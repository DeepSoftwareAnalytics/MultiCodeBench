[
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "handleOpenMarketplace = (): void => ",
        "start_line": "136",
        "end_line": "144",
        "file_path": "webapp/channels/src/components/actions_menu/actions_menu.tsx",
        "docstring": "This function, handleOpenMarketplace, opens a marketplace modal.\\nIt sets the source of the opening action as 'actions_menu' and creates an object with modal ID, dialog type, and dialog properties.\\nThis object is then passed to a method that triggers the opening of the modal.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "112855ce32e1",
        "ground_truth": "handleOpenMarketplace = (): void => {\n    const openedFrom: OpenedFromType = 'actions_menu';\n    const openMarketplaceData = {\n        modalId: ModalIdentifiers.PLUGIN_MARKETPLACE,\n        dialogType: MarketplaceModal,\n        dialogProps: {openedFrom},\n    };\n    this.props.actions.openModal(openMarketplaceData);\n};",
        "import_statements": [
            "import classNames from 'classnames';",
            "classNames",
            "import React from 'react';",
            "React",
            "import type {IntlShape} from 'react-intl';",
            "{IntlShape}",
            "{IntlShape}",
            "IntlShape",
            "import {FormattedMessage, injectIntl} from 'react-intl';",
            "{FormattedMessage, injectIntl}",
            "{FormattedMessage, injectIntl}",
            "FormattedMessage",
            "injectIntl",
            "import type {AppBinding} from '@mattermost/types/apps';",
            "{AppBinding}",
            "{AppBinding}",
            "AppBinding",
            "import type {Post} from '@mattermost/types/posts';",
            "{Post}",
            "{Post}",
            "Post",
            "import {AppCallResponseTypes} from 'mattermost-redux/constants/apps';",
            "{AppCallResponseTypes}",
            "{AppCallResponseTypes}",
            "AppCallResponseTypes",
            "import Permissions from 'mattermost-redux/constants/permissions';",
            "Permissions",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import FormattedMarkdownMessage from 'components/formatted_markdown_message';",
            "FormattedMarkdownMessage",
            "import SystemPermissionGate from 'components/permissions_gates/system_permission_gate';",
            "SystemPermissionGate",
            "import type {OpenedFromType} from 'components/plugin_marketplace/marketplace_modal';",
            "{OpenedFromType}",
            "{OpenedFromType}",
            "OpenedFromType",
            "import MarketplaceModal from 'components/plugin_marketplace/marketplace_modal';",
            "MarketplaceModal",
            "import Menu from 'components/widgets/menu/menu';",
            "Menu",
            "import MenuWrapper from 'components/widgets/menu/menu_wrapper';",
            "MenuWrapper",
            "import WithTooltip from 'components/with_tooltip';",
            "WithTooltip",
            "import Pluggable from 'plugins/pluggable';",
            "Pluggable",
            "import {createCallContext} from 'utils/apps';",
            "{createCallContext}",
            "{createCallContext}",
            "createCallContext",
            "import {Constants, Locations, ModalIdentifiers} from 'utils/constants';",
            "{Constants, Locations, ModalIdentifiers}",
            "{Constants, Locations, ModalIdentifiers}",
            "Constants",
            "Locations",
            "ModalIdentifiers",
            "import * as PostUtils from 'utils/post_utils';",
            "* as PostUtils",
            "* as PostUtils",
            "import * as Utils from 'utils/utils';",
            "* as Utils",
            "* as Utils",
            "import type {ModalData} from 'types/actions';",
            "{ModalData}",
            "{ModalData}",
            "ModalData",
            "import type {HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost} from 'types/apps';",
            "{HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost}",
            "{HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost}",
            "HandleBindingClick",
            "OpenAppsModal",
            "PostEphemeralCallResponseForPost",
            "import type {PluginComponent} from 'types/store/plugins';",
            "{PluginComponent}",
            "{PluginComponent}",
            "PluginComponent",
            "import './actions_menu.scss';",
            "import {ActionsMenuIcon} from './actions_menu_icon';",
            "{ActionsMenuIcon}",
            "{ActionsMenuIcon}",
            "ActionsMenuIcon"
        ],
        "reference_api": [
            "this.props.actions.openModal"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.props.actions.openModal",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "onClickAppBinding = async (binding: AppBinding) =>",
        "start_line": "146",
        "end_line": "194",
        "file_path": "webapp/channels/src/components/actions_menu/actions_menu.tsx",
        "docstring": "This function, onClickAppBinding, handles the click event for an app binding asynchronously.\\nIt creates a context using the app ID, location, channel ID, team ID, post ID, and root post ID.\\nThen, it calls a method to handle the binding click with the binding, context, and internationalization.\\nIf an error occurs, it posts an ephemeral call response with an error message.\\nIf successful, it processes the response based on its type: posting an ephemeral message for 'OK', handling navigation for 'NAVIGATE', and opening a modal for 'FORM'.\\nFor unsupported response types, it posts an error message.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "421836df0bf0",
        "ground_truth": "onClickAppBinding = async (binding: AppBinding) => {\n    const {post, intl} = this.props;\n    const context = createCallContext(\n        binding.app_id,\n        binding.location,\n        this.props.post.channel_id,\n        this.props.teamId,\n        this.props.post.id,\n        this.props.post.root_id,\n    );\n    const res = await this.props.actions.handleBindingClick(binding, context, intl);\n    if (res.error) {\n        const errorResponse = res.error;\n        const errorMessage = errorResponse.text || intl.formatMessage({\n            id: 'apps.error.unknown',\n            defaultMessage: 'Unknown error occurred.',\n        });\n        this.props.actions.postEphemeralCallResponseForPost(errorResponse, errorMessage, post);\n        return;\n    }\n    const callResp = res.data!;\n    switch (callResp.type) {\n    case AppCallResponseTypes.OK:\n        if (callResp.text) {\n            this.props.actions.postEphemeralCallResponseForPost(callResp, callResp.text, post);\n        }\n        break;\n    case AppCallResponseTypes.NAVIGATE:\n        break;\n    case AppCallResponseTypes.FORM:\n        if (callResp.form) {\n            this.props.actions.openAppsModal(callResp.form, context);\n        }\n        break;\n    default: {\n        const errorMessage = intl.formatMessage({\n            id: 'apps.error.responses.unknown_type',\n            defaultMessage: 'App response type not supported. Response type: {type}.',\n        }, {\n            type: callResp.type,\n        });\n        this.props.actions.postEphemeralCallResponseForPost(callResp, errorMessage, post);\n    }\n    }\n};",
        "import_statements": [
            "import classNames from 'classnames';",
            "classNames",
            "import React from 'react';",
            "React",
            "import type {IntlShape} from 'react-intl';",
            "{IntlShape}",
            "{IntlShape}",
            "IntlShape",
            "import {FormattedMessage, injectIntl} from 'react-intl';",
            "{FormattedMessage, injectIntl}",
            "{FormattedMessage, injectIntl}",
            "FormattedMessage",
            "injectIntl",
            "import type {AppBinding} from '@mattermost/types/apps';",
            "{AppBinding}",
            "{AppBinding}",
            "AppBinding",
            "import type {Post} from '@mattermost/types/posts';",
            "{Post}",
            "{Post}",
            "Post",
            "import {AppCallResponseTypes} from 'mattermost-redux/constants/apps';",
            "{AppCallResponseTypes}",
            "{AppCallResponseTypes}",
            "AppCallResponseTypes",
            "import Permissions from 'mattermost-redux/constants/permissions';",
            "Permissions",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import FormattedMarkdownMessage from 'components/formatted_markdown_message';",
            "FormattedMarkdownMessage",
            "import SystemPermissionGate from 'components/permissions_gates/system_permission_gate';",
            "SystemPermissionGate",
            "import type {OpenedFromType} from 'components/plugin_marketplace/marketplace_modal';",
            "{OpenedFromType}",
            "{OpenedFromType}",
            "OpenedFromType",
            "import MarketplaceModal from 'components/plugin_marketplace/marketplace_modal';",
            "MarketplaceModal",
            "import Menu from 'components/widgets/menu/menu';",
            "Menu",
            "import MenuWrapper from 'components/widgets/menu/menu_wrapper';",
            "MenuWrapper",
            "import WithTooltip from 'components/with_tooltip';",
            "WithTooltip",
            "import Pluggable from 'plugins/pluggable';",
            "Pluggable",
            "import {createCallContext} from 'utils/apps';",
            "{createCallContext}",
            "{createCallContext}",
            "createCallContext",
            "import {Constants, Locations, ModalIdentifiers} from 'utils/constants';",
            "{Constants, Locations, ModalIdentifiers}",
            "{Constants, Locations, ModalIdentifiers}",
            "Constants",
            "Locations",
            "ModalIdentifiers",
            "import * as PostUtils from 'utils/post_utils';",
            "* as PostUtils",
            "* as PostUtils",
            "import * as Utils from 'utils/utils';",
            "* as Utils",
            "* as Utils",
            "import type {ModalData} from 'types/actions';",
            "{ModalData}",
            "{ModalData}",
            "ModalData",
            "import type {HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost} from 'types/apps';",
            "{HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost}",
            "{HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost}",
            "HandleBindingClick",
            "OpenAppsModal",
            "PostEphemeralCallResponseForPost",
            "import type {PluginComponent} from 'types/store/plugins';",
            "{PluginComponent}",
            "{PluginComponent}",
            "PluginComponent",
            "import './actions_menu.scss';",
            "import {ActionsMenuIcon} from './actions_menu_icon';",
            "{ActionsMenuIcon}",
            "{ActionsMenuIcon}",
            "ActionsMenuIcon"
        ],
        "reference_api": [
            "this.props.actions.handleBindingClick",
            "this.props.actions.postEphemeralCallResponseForPost",
            "createCallContext",
            "intl.formatMessage",
            "this.props.actions.openAppsModal"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.props.actions.handleBindingClick",
                "code": ")"
            },
            {
                "name": "this.props.actions.postEphemeralCallResponseForPost",
                "code": ")"
            },
            {
                "name": "createCallContext",
                "code": ")"
            },
            {
                "name": "intl.formatMessage",
                "code": ")"
            },
            {
                "name": "this.props.actions.openAppsModal",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "handleDropdownOpened = (open: boolean) =>",
        "start_line": "237",
        "end_line": "260",
        "file_path": "webapp/channels/src/components/actions_menu/actions_menu.tsx",
        "docstring": "This function, handleDropdownOpened, manages the state when a dropdown is opened.\\nIt triggers a prop function to handle the dropdown state and returns if the dropdown is closed.\\nIf opened, it calculates the position of the dropdown button and determines the available space above and below the button.\\nBased on the available space, it updates the component state to open the dropdown upwards if there is more space on top than on the bottom.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7b2d58ae93e2",
        "ground_truth": "handleDropdownOpened = (open: boolean) => {\n    this.props.handleDropdownOpened?.(open);\n    if (!open) {\n        return;\n    }\n    const buttonRect = this.buttonRef.current?.getBoundingClientRect();\n    let y;\n    if (typeof buttonRect?.y === 'undefined') {\n        y = typeof buttonRect?.top == 'undefined' ? 0 : buttonRect?.top;\n    } else {\n        y = buttonRect?.y;\n    }\n    const windowHeight = window.innerHeight;\n    const totalSpace = windowHeight - MENU_BOTTOM_MARGIN;\n    const spaceOnTop = y - Constants.CHANNEL_HEADER_HEIGHT;\n    const spaceOnBottom = (totalSpace - (spaceOnTop + Constants.POST_AREA_HEIGHT));\n    this.setState({\n        openUp: (spaceOnTop > spaceOnBottom),\n    });\n};",
        "import_statements": [
            "import classNames from 'classnames';",
            "classNames",
            "import React from 'react';",
            "React",
            "import type {IntlShape} from 'react-intl';",
            "{IntlShape}",
            "{IntlShape}",
            "IntlShape",
            "import {FormattedMessage, injectIntl} from 'react-intl';",
            "{FormattedMessage, injectIntl}",
            "{FormattedMessage, injectIntl}",
            "FormattedMessage",
            "injectIntl",
            "import type {AppBinding} from '@mattermost/types/apps';",
            "{AppBinding}",
            "{AppBinding}",
            "AppBinding",
            "import type {Post} from '@mattermost/types/posts';",
            "{Post}",
            "{Post}",
            "Post",
            "import {AppCallResponseTypes} from 'mattermost-redux/constants/apps';",
            "{AppCallResponseTypes}",
            "{AppCallResponseTypes}",
            "AppCallResponseTypes",
            "import Permissions from 'mattermost-redux/constants/permissions';",
            "Permissions",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import FormattedMarkdownMessage from 'components/formatted_markdown_message';",
            "FormattedMarkdownMessage",
            "import SystemPermissionGate from 'components/permissions_gates/system_permission_gate';",
            "SystemPermissionGate",
            "import type {OpenedFromType} from 'components/plugin_marketplace/marketplace_modal';",
            "{OpenedFromType}",
            "{OpenedFromType}",
            "OpenedFromType",
            "import MarketplaceModal from 'components/plugin_marketplace/marketplace_modal';",
            "MarketplaceModal",
            "import Menu from 'components/widgets/menu/menu';",
            "Menu",
            "import MenuWrapper from 'components/widgets/menu/menu_wrapper';",
            "MenuWrapper",
            "import WithTooltip from 'components/with_tooltip';",
            "WithTooltip",
            "import Pluggable from 'plugins/pluggable';",
            "Pluggable",
            "import {createCallContext} from 'utils/apps';",
            "{createCallContext}",
            "{createCallContext}",
            "createCallContext",
            "import {Constants, Locations, ModalIdentifiers} from 'utils/constants';",
            "{Constants, Locations, ModalIdentifiers}",
            "{Constants, Locations, ModalIdentifiers}",
            "Constants",
            "Locations",
            "ModalIdentifiers",
            "import * as PostUtils from 'utils/post_utils';",
            "* as PostUtils",
            "* as PostUtils",
            "import * as Utils from 'utils/utils';",
            "* as Utils",
            "* as Utils",
            "import type {ModalData} from 'types/actions';",
            "{ModalData}",
            "{ModalData}",
            "ModalData",
            "import type {HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost} from 'types/apps';",
            "{HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost}",
            "{HandleBindingClick, OpenAppsModal, PostEphemeralCallResponseForPost}",
            "HandleBindingClick",
            "OpenAppsModal",
            "PostEphemeralCallResponseForPost",
            "import type {PluginComponent} from 'types/store/plugins';",
            "{PluginComponent}",
            "{PluginComponent}",
            "PluginComponent",
            "import './actions_menu.scss';",
            "import {ActionsMenuIcon} from './actions_menu_icon';",
            "{ActionsMenuIcon}",
            "{ActionsMenuIcon}",
            "ActionsMenuIcon"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "function mapStateToProps(state: GlobalState, ownProps: Props)",
        "start_line": "46",
        "end_line": "73",
        "file_path": "webapp/channels/src/components/actions_menu/index.ts",
        "docstring": "This function, mapStateToProps, maps state and ownProps to props for a component.\\nIt extracts the post from ownProps and checks if it is a system message.\\nIt determines whether app bindings should be shown based on the state and post type, and retrieves the relevant app bindings if applicable.\\nIt also gets the current user and checks if they are a system administrator.\\nFinally, it returns an object containing various properties such as app bindings, apps enabled status, plugin components, user roles, team ID, mobile view status, and marketplace access permissions.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "024f57c26061",
        "ground_truth": "function mapStateToProps(state: GlobalState, ownProps: Props) {\n    const {post} = ownProps;\n     const systemMessage = isSystemMessage(post);\n     const apps = appsEnabled(state);\n    const showBindings = apps && !systemMessage && !isCombinedUserActivityPost(post.id);\n    let appBindings: AppBinding[] | null = emptyBindings;\n    if (showBindings) {\n        appBindings = getPostOptionBinding(state, ownProps.location);\n    }\n    const currentUser = getCurrentUser(state);\n    const isSysAdmin = isSystemAdmin(currentUser.roles);\n     return {\n        appBindings,\n        appsEnabled: apps,\n        components: state.plugins.components,\n        isSysAdmin,\n        pluginMenuItems: state.plugins.components.PostDropdownMenu,\n        teamId: getCurrentTeamId(state),\n        isMobileView: getIsMobileView(state),\n        canOpenMarketplace: (\n            isMarketplaceEnabled(state) &&\n            haveICurrentTeamPermission(state, Permissions.SYSCONSOLE_WRITE_PLUGINS)\n        ),\n    };\n}",
        "import_statements": [
            "import type {ComponentProps} from 'react';",
            "{ComponentProps}",
            "{ComponentProps}",
            "ComponentProps",
            "import {connect} from 'react-redux';",
            "{connect}",
            "{connect}",
            "connect",
            "import {bindActionCreators} from 'redux';",
            "{bindActionCreators}",
            "{bindActionCreators}",
            "bindActionCreators",
            "import type {Dispatch} from 'redux';",
            "{Dispatch}",
            "{Dispatch}",
            "Dispatch",
            "import type {AppBinding} from '@mattermost/types/apps';",
            "{AppBinding}",
            "{AppBinding}",
            "AppBinding",
            "import type {Post} from '@mattermost/types/posts';",
            "{Post}",
            "{Post}",
            "Post",
            "import {Permissions} from 'mattermost-redux/constants';",
            "{Permissions}",
            "{Permissions}",
            "Permissions",
            "import {AppBindingLocations} from 'mattermost-redux/constants/apps';",
            "{AppBindingLocations}",
            "{AppBindingLocations}",
            "AppBindingLocations",
            "import {appsEnabled} from 'mattermost-redux/selectors/entities/apps';",
            "{appsEnabled}",
            "{appsEnabled}",
            "appsEnabled",
            "import {isMarketplaceEnabled} from 'mattermost-redux/selectors/entities/general';",
            "{isMarketplaceEnabled}",
            "{isMarketplaceEnabled}",
            "isMarketplaceEnabled",
            "import {haveICurrentTeamPermission} from 'mattermost-redux/selectors/entities/roles';",
            "{haveICurrentTeamPermission}",
            "{haveICurrentTeamPermission}",
            "haveICurrentTeamPermission",
            "import {getCurrentTeamId} from 'mattermost-redux/selectors/entities/teams';",
            "{getCurrentTeamId}",
            "{getCurrentTeamId}",
            "getCurrentTeamId",
            "import {getCurrentUser} from 'mattermost-redux/selectors/entities/users';",
            "{getCurrentUser}",
            "{getCurrentUser}",
            "getCurrentUser",
            "import {isCombinedUserActivityPost} from 'mattermost-redux/utils/post_list';",
            "{isCombinedUserActivityPost}",
            "{isCombinedUserActivityPost}",
            "isCombinedUserActivityPost",
            "import {isSystemMessage} from 'mattermost-redux/utils/post_utils';",
            "{isSystemMessage}",
            "{isSystemMessage}",
            "isSystemMessage",
            "import {isSystemAdmin} from 'mattermost-redux/utils/user_utils';",
            "{isSystemAdmin}",
            "{isSystemAdmin}",
            "isSystemAdmin",
            "import {makeFetchBindings, postEphemeralCallResponseForPost, handleBindingClick, openAppsModal} from 'actions/apps';",
            "{makeFetchBindings, postEphemeralCallResponseForPost, handleBindingClick, openAppsModal}",
            "{makeFetchBindings, postEphemeralCallResponseForPost, handleBindingClick, openAppsModal}",
            "makeFetchBindings",
            "postEphemeralCallResponseForPost",
            "handleBindingClick",
            "openAppsModal",
            "import {openModal} from 'actions/views/modals';",
            "{openModal}",
            "{openModal}",
            "openModal",
            "import {getIsMobileView} from 'selectors/views/browser';",
            "{getIsMobileView}",
            "{getIsMobileView}",
            "getIsMobileView",
            "import type {GlobalState} from 'types/store';",
            "{GlobalState}",
            "{GlobalState}",
            "GlobalState",
            "import ActionsMenu from './actions_menu';",
            "ActionsMenu",
            "import {makeGetPostOptionBinding} from './selectors';",
            "{makeGetPostOptionBinding}",
            "{makeGetPostOptionBinding}",
            "makeGetPostOptionBinding"
        ],
        "reference_api": [
            "getPostOptionBinding",
            "getIsMobileView",
            "isMarketplaceEnabled",
            "haveICurrentTeamPermission",
            "getCurrentTeamId",
            "isCombinedUserActivityPost",
            "getCurrentUser",
            "appsEnabled",
            "isSystemMessage",
            "isSystemAdmin"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "getPostOptionBinding",
            "getIsMobileView",
            "isMarketplaceEnabled",
            "haveICurrentTeamPermission",
            "getCurrentTeamId",
            "isCombinedUserActivityPost",
            "getCurrentUser",
            "appsEnabled",
            "isSystemMessage",
            "isSystemAdmin"
        ]
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "export default function DeviceIcon(props: Props)",
        "start_line": "15",
        "end_line": "31",
        "file_path": "webapp/channels/src/components/activity_log_modal/components/device_icon.tsx",
        "docstring": "This function, DeviceIcon, renders an icon element with a class name and title based on the provided props.\\nIt uses the useIntl hook to obtain internationalization functions.\\nThe title is determined by checking if the deviceTitle prop is a message descriptor, formatting it accordingly, or using it directly.\\nThe rendered icon element uses the devicePicture prop for its class name and the resolved title for its title attribute.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "ae0a07f4dbea",
        "ground_truth": "export default function DeviceIcon(props: Props) {\n    const intl = useIntl();\n     let title;\n    if (isMessageDescriptor(props.deviceTitle)) {\n        title = intl.formatMessage(props.deviceTitle);\n    } else {\n        title = props.deviceTitle;\n    }\n     return (\n        <i\n            className={props.devicePicture}\n            title={title}\n        />\n    );\n}",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import type {MessageDescriptor} from 'react-intl';",
            "{MessageDescriptor}",
            "{MessageDescriptor}",
            "MessageDescriptor",
            "import {useIntl} from 'react-intl';",
            "{useIntl}",
            "{useIntl}",
            "useIntl",
            "import {isMessageDescriptor} from 'utils/i18n';",
            "{isMessageDescriptor}",
            "{isMessageDescriptor}",
            "isMessageDescriptor"
        ],
        "reference_api": [
            "useIntl",
            "intl.formatMessage",
            "isMessageDescriptor"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "useIntl",
            "intl.formatMessage",
            "isMessageDescriptor"
        ]
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "function mapStateToProps(state: GlobalState, ownProps: OwnProps) ",
        "start_line": "29",
        "end_line": "50",
        "file_path": "webapp/channels/src/components/add_groups_to_channel_modal/index.ts",
        "docstring": "This function, mapStateToProps, maps state and ownProps to props for a component.\\nIt retrieves the search term from the state and the current channel from ownProps or state.\\nIt selects groups not associated with the channel, filtering them based on the search term if it exists.\\nIt returns an object containing the current channel's name, ID, team ID, and other properties from ownProps, as well as the search term and the filtered groups.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "e0a805402908",
        "ground_truth": "function mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const searchTerm = state.views.search.modalSearch;\n     const channel = ownProps.channel || getCurrentChannel(state) || {};\n     let groups = selectGroupsNotAssociatedToChannel(state, channel.id, channel.team_id);\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n     return {\n        currentChannelName: channel.display_name,\n        currentChannelId: channel.id,\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n        teamID: channel.team_id,\n    };\n}",
        "import_statements": [
            "import {connect} from 'react-redux';",
            "{connect}",
            "{connect}",
            "connect",
            "import {bindActionCreators} from 'redux';",
            "{bindActionCreators}",
            "{bindActionCreators}",
            "bindActionCreators",
            "import type {Dispatch} from 'redux';",
            "{Dispatch}",
            "{Dispatch}",
            "Dispatch",
            "import type {Channel} from '@mattermost/types/channels';",
            "{Channel}",
            "{Channel}",
            "Channel",
            "import type {Group} from '@mattermost/types/groups';",
            "{Group}",
            "{Group}",
            "Group",
            "import {getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel, getAllGroupsAssociatedToTeam} from 'mattermost-redux/actions/groups';",
            "{getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel, getAllGroupsAssociatedToTeam}",
            "{getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel, getAllGroupsAssociatedToTeam}",
            "getGroupsNotAssociatedToChannel",
            "linkGroupSyncable",
            "getAllGroupsAssociatedToChannel",
            "getAllGroupsAssociatedToTeam",
            "import {getTeam} from 'mattermost-redux/actions/teams';",
            "{getTeam}",
            "{getTeam}",
            "getTeam",
            "import {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';",
            "{getCurrentChannel}",
            "{getCurrentChannel}",
            "getCurrentChannel",
            "import {getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel} from 'mattermost-redux/selectors/entities/groups';",
            "{getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel}",
            "{getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel}",
            "getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel",
            "import {setModalSearchTerm} from 'actions/views/search';",
            "{setModalSearchTerm}",
            "{setModalSearchTerm}",
            "setModalSearchTerm",
            "import type {GlobalState} from 'types/store';",
            "{GlobalState}",
            "{GlobalState}",
            "GlobalState",
            "import AddGroupsToChannelModal from './add_groups_to_channel_modal';",
            "AddGroupsToChannelModal"
        ],
        "reference_api": [
            "regex.test"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "regex.test",
                "code": "g"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "componentDidUpdate(prevProps: Props)",
        "start_line": "91",
        "end_line": "109",
        "file_path": "webapp/channels/src/components/add_groups_to_channel_modal/add_groups_to_channel_modal.tsx",
        "docstring": "This function, componentDidUpdate, checks if the search term has changed.\\nIf it has, it clears the previous timeout and sets a new one.\\nWhen the timeout completes, it sets the loading state to true, performs a search for groups not associated with the current channel, and then sets the loading state to false.\\nIf the search term is empty, the function returns immediately.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "a3412b1c0762",
        "ground_truth": "componentDidUpdate(prevProps: Props) {\n    if (this.props.searchTerm !== prevProps.searchTerm) {\n        clearTimeout(this.searchTimeoutId);\n        const searchTerm = this.props.searchTerm;\n        if (searchTerm === '') {\n            return;\n        }\n        this.searchTimeoutId = window.setTimeout(\n            async () => {\n                this.setGroupsLoadingState(true);\n                await this.props.actions.getGroupsNotAssociatedToChannel(this.props.currentChannelId, searchTerm, undefined, undefined, true);\n                this.setGroupsLoadingState(false);\n            },\n            Constants.SEARCH_TIMEOUT_MILLISECONDS,\n        );\n    }\n}",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {Modal} from 'react-bootstrap';",
            "{Modal}",
            "{Modal}",
            "Modal",
            "import type {IntlShape} from 'react-intl';",
            "{IntlShape}",
            "{IntlShape}",
            "IntlShape",
            "import {injectIntl, FormattedMessage} from 'react-intl';",
            "{injectIntl, FormattedMessage}",
            "{injectIntl, FormattedMessage}",
            "injectIntl",
            "FormattedMessage",
            "import type {ServerError} from '@mattermost/types/errors';",
            "{ServerError}",
            "{ServerError}",
            "ServerError",
            "import type {Group, SyncablePatch} from '@mattermost/types/groups';",
            "{Group, SyncablePatch}",
            "{Group, SyncablePatch}",
            "Group",
            "SyncablePatch",
            "import {SyncableType} from '@mattermost/types/groups';",
            "{SyncableType}",
            "{SyncableType}",
            "SyncableType",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import MultiSelect from 'components/multiselect/multiselect';",
            "MultiSelect",
            "import type {Value} from 'components/multiselect/multiselect';",
            "{Value}",
            "{Value}",
            "Value",
            "import groupsAvatar from 'images/groups-avatar.png';",
            "groupsAvatar",
            "import Constants from 'utils/constants';",
            "Constants",
            "import {localizeMessage} from 'utils/utils';",
            "{localizeMessage}",
            "{localizeMessage}",
            "localizeMessage"
        ],
        "reference_api": [
            "this.props.actions.getGroupsNotAssociatedToChannel",
            "this.setGroupsLoadingState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.props.actions.getGroupsNotAssociatedToChannel",
                "code": ")"
            },
            {
                "name": "this.setGroupsLoadingState",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "function mapStateToProps(state: GlobalState, ownProps: OwnProps)",
        "start_line": "29",
        "end_line": "50",
        "file_path": "webapp/channels/src/components/add_groups_to_channel_modal/index.ts",
        "docstring": "This function, mapStateToProps, maps state and ownProps to props for a component.\\nIt retrieves the search term from the state and determines the current channel from ownProps or state.\\nIt then selects groups not associated with the current channel, filtering them based on the search term if it exists.\\nFinally, it returns an object containing various properties, including current channel information, callback functions, excluded groups, the search term, and the filtered groups.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0f47faf97411",
        "ground_truth": "function mapStateToProps(state: GlobalState, ownProps: OwnProps) {\n    const searchTerm = state.views.search.modalSearch;\n     const channel = ownProps.channel || getCurrentChannel(state) || {};\n     let groups = selectGroupsNotAssociatedToChannel(state, channel.id, channel.team_id);\n    if (searchTerm) {\n        const regex = RegExp(searchTerm, 'i');\n        groups = groups.filter((group) => regex.test(group.display_name) || regex.test(group.name));\n    }\n     return {\n        currentChannelName: channel.display_name,\n        currentChannelId: channel.id,\n        skipCommit: ownProps.skipCommit,\n        onAddCallback: ownProps.onAddCallback,\n        excludeGroups: ownProps.excludeGroups,\n        searchTerm,\n        groups,\n        teamID: channel.team_id,\n    };\n}",
        "import_statements": [
            "import {connect} from 'react-redux';",
            "{connect}",
            "{connect}",
            "connect",
            "import {bindActionCreators} from 'redux';",
            "{bindActionCreators}",
            "{bindActionCreators}",
            "bindActionCreators",
            "import type {Dispatch} from 'redux';",
            "{Dispatch}",
            "{Dispatch}",
            "Dispatch",
            "import type {Channel} from '@mattermost/types/channels';",
            "{Channel}",
            "{Channel}",
            "Channel",
            "import type {Group} from '@mattermost/types/groups';",
            "{Group}",
            "{Group}",
            "Group",
            "import {getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel, getAllGroupsAssociatedToTeam} from 'mattermost-redux/actions/groups';",
            "{getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel, getAllGroupsAssociatedToTeam}",
            "{getGroupsNotAssociatedToChannel, linkGroupSyncable, getAllGroupsAssociatedToChannel, getAllGroupsAssociatedToTeam}",
            "getGroupsNotAssociatedToChannel",
            "linkGroupSyncable",
            "getAllGroupsAssociatedToChannel",
            "getAllGroupsAssociatedToTeam",
            "import {getTeam} from 'mattermost-redux/actions/teams';",
            "{getTeam}",
            "{getTeam}",
            "getTeam",
            "import {getCurrentChannel} from 'mattermost-redux/selectors/entities/channels';",
            "{getCurrentChannel}",
            "{getCurrentChannel}",
            "getCurrentChannel",
            "import {getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel} from 'mattermost-redux/selectors/entities/groups';",
            "{getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel}",
            "{getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel}",
            "getGroupsNotAssociatedToChannel as selectGroupsNotAssociatedToChannel",
            "import {setModalSearchTerm} from 'actions/views/search';",
            "{setModalSearchTerm}",
            "{setModalSearchTerm}",
            "setModalSearchTerm",
            "import type {GlobalState} from 'types/store';",
            "{GlobalState}",
            "{GlobalState}",
            "GlobalState",
            "import AddGroupsToChannelModal from './add_groups_to_channel_modal';",
            "AddGroupsToChannelModal"
        ],
        "reference_api": [
            "regex.test"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "regex.test",
                "code": "g"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "private handlePageChange = (page: number, prevPage: number): void => ",
        "start_line": "135",
        "end_line": "148",
        "file_path": "webapp/channels/src/components/add_user_to_group_multiselect/add_user_to_group_multiselect.tsx",
        "docstring": "This function, handlePageChange, manages page changes.\\nIf the new page number is greater than the previous, it sets a loading state to true.\\nIt then fetches user profiles, either from a group if a groupId is present or generally, for the next page.\\nOnce the profiles are fetched, it resets the loading state to false.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "923c0c472c01",
        "ground_truth": "private handlePageChange = (page: number, prevPage: number): void => {\n    if (page > prevPage) {\n        this.setUsersLoadingState(true);\n        if (this.props.groupId) {\n            this.props.actions.getProfilesNotInGroup(this.props.groupId, page + 1, USERS_PER_PAGE).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        } else {\n            this.props.actions.getProfiles(page + 1, USERS_PER_PAGE).then(() => {\n                this.setUsersLoadingState(false);\n            });\n        }\n    }\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import type {IntlShape} from 'react-intl';",
            "{IntlShape}",
            "{IntlShape}",
            "IntlShape",
            "import {injectIntl} from 'react-intl';",
            "{injectIntl}",
            "{injectIntl}",
            "injectIntl",
            "import type {UserProfile} from '@mattermost/types/users';",
            "{UserProfile}",
            "{UserProfile}",
            "UserProfile",
            "import type {RelationOneToOne} from '@mattermost/types/utilities';",
            "{RelationOneToOne}",
            "{RelationOneToOne}",
            "RelationOneToOne",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import {filterProfilesStartingWithTerm} from 'mattermost-redux/utils/user_utils';",
            "{filterProfilesStartingWithTerm}",
            "{filterProfilesStartingWithTerm}",
            "filterProfilesStartingWithTerm",
            "import MultiSelect from 'components/multiselect/multiselect';",
            "MultiSelect",
            "import type {Value} from 'components/multiselect/multiselect';",
            "{Value}",
            "{Value}",
            "Value",
            "import Constants from 'utils/constants';",
            "Constants",
            "import {localizeMessage} from 'utils/utils';",
            "{localizeMessage}",
            "{localizeMessage}",
            "localizeMessage",
            "import MultiSelectOption from './multiselect_option/multiselect_option';",
            "MultiSelectOption"
        ],
        "reference_api": [
            "this.setUsersLoadingState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.setUsersLoadingState",
                "code": "v"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "public search = (searchTerm: string): void => ",
        "start_line": "158",
        "end_line": "175",
        "file_path": "webapp/channels/src/components/add_user_to_group_multiselect/add_user_to_group_multiselect.tsx",
        "docstring": "This function, search, takes a search term as input and trims any leading or trailing whitespace.\\nIt clears any existing search timeout, updates the state with the trimmed term, and if the term is not empty, sets the user loading state to true.\\nThen, it sets a timeout to search for user profiles after a specified delay, and upon completion, sets the user loading state to false.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "4614bb3319bb",
        "ground_truth": "public search = (searchTerm: string): void => {\n    const term = searchTerm.trim();\n    clearTimeout(this.searchTimeoutId);\n    this.setState({\n        term,\n    });\n    if (term) {\n        this.setUsersLoadingState(true);\n        this.searchTimeoutId = window.setTimeout(\n            async () => {\n                await this.props.actions.searchProfiles(term, this.props.searchOptions);\n                this.setUsersLoadingState(false);\n            },\n            Constants.SEARCH_TIMEOUT_MILLISECONDS,\n        );\n    }\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import type {IntlShape} from 'react-intl';",
            "{IntlShape}",
            "{IntlShape}",
            "IntlShape",
            "import {injectIntl} from 'react-intl';",
            "{injectIntl}",
            "{injectIntl}",
            "injectIntl",
            "import type {UserProfile} from '@mattermost/types/users';",
            "{UserProfile}",
            "{UserProfile}",
            "UserProfile",
            "import type {RelationOneToOne} from '@mattermost/types/utilities';",
            "{RelationOneToOne}",
            "{RelationOneToOne}",
            "RelationOneToOne",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import {filterProfilesStartingWithTerm} from 'mattermost-redux/utils/user_utils';",
            "{filterProfilesStartingWithTerm}",
            "{filterProfilesStartingWithTerm}",
            "filterProfilesStartingWithTerm",
            "import MultiSelect from 'components/multiselect/multiselect';",
            "MultiSelect",
            "import type {Value} from 'components/multiselect/multiselect';",
            "{Value}",
            "{Value}",
            "Value",
            "import Constants from 'utils/constants';",
            "Constants",
            "import {localizeMessage} from 'utils/utils';",
            "{localizeMessage}",
            "{localizeMessage}",
            "localizeMessage",
            "import MultiSelectOption from './multiselect_option/multiselect_option';",
            "MultiSelectOption"
        ],
        "reference_api": [
            "this.props.actions.searchProfiles",
            "this.setUsersLoadingState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.props.actions.searchProfiles",
                "code": "v"
            },
            {
                "name": "this.setUsersLoadingState",
                "code": "v"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "visibleSections = () =>",
        "start_line": "145",
        "end_line": "170",
        "file_path": "webapp/channels/src/components/admin_console/admin_sidebar/admin_sidebar.tsx",
        "docstring": "This function, visibleSections, determines which sections are visible based on the provided configuration, license, buildEnterpriseReady status, consoleAccess, adminDefinition, and cloud properties.\\nIt checks if each item has a schema and title, and if it is not hidden according to specific conditions.\\nIt iterates through the sections and subsections, adding the URLs of visible items to a result set, which it then returns.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "aeafe2d0ee11",
        "ground_truth": "visibleSections = () => {\n    const {config, license, buildEnterpriseReady, consoleAccess, adminDefinition, cloud} = this.props;\n    const isVisible = (item: any) => {\n        if (!item.schema) {\n            return false;\n        }\n        if (!item.title) {\n            return false;\n        }\n        if (item.isHidden && item.isHidden(config, this.state, license, buildEnterpriseReady, consoleAccess, cloud)) {\n            return false;\n        }\n        return true;\n    };\n    const result = new Set();\n    for (const section of Object.values(adminDefinition)) {\n        for (const item of Object.values(section.subsections)) {\n            if (isVisible(item)) {\n                result.add(item.url);\n            }\n        }\n    }\n    return result;\n};",
        "import_statements": [
            "import classNames from 'classnames';",
            "classNames",
            "import isEqual from 'lodash/isEqual';",
            "isEqual",
            "import React from 'react';",
            "React",
            "import Scrollbars from 'react-custom-scrollbars';",
            "Scrollbars",
            "import {FormattedMessage, injectIntl} from 'react-intl';",
            "{FormattedMessage, injectIntl}",
            "{FormattedMessage, injectIntl}",
            "FormattedMessage",
            "injectIntl",
            "import type {IntlShape} from 'react-intl';",
            "{IntlShape}",
            "{IntlShape}",
            "IntlShape",
            "import type {PluginRedux} from '@mattermost/types/plugins';",
            "{PluginRedux}",
            "{PluginRedux}",
            "PluginRedux",
            "import AdminSidebarCategory from 'components/admin_console/admin_sidebar/admin_sidebar_category';",
            "AdminSidebarCategory",
            "import AdminSidebarSection from 'components/admin_console/admin_sidebar/admin_sidebar_section';",
            "AdminSidebarSection",
            "import AdminSidebarHeader from 'components/admin_console/admin_sidebar_header';",
            "AdminSidebarHeader",
            "import SearchKeywordMarking from 'components/admin_console/search_keyword_marking';",
            "SearchKeywordMarking",
            "import QuickInput from 'components/quick_input';",
            "QuickInput",
            "import SearchIcon from 'components/widgets/icons/search_icon';",
            "SearchIcon",
            "import {generateIndex} from 'utils/admin_console_index';",
            "{generateIndex}",
            "{generateIndex}",
            "generateIndex",
            "import type {Index} from 'utils/admin_console_index';",
            "{Index}",
            "{Index}",
            "Index",
            "import {getHistory} from 'utils/browser_history';",
            "{getHistory}",
            "{getHistory}",
            "getHistory",
            "import type AdminDefinition from '../admin_definition';",
            "AdminDefinition",
            "import type {PropsFromRedux} from './index';",
            "{PropsFromRedux}",
            "{PropsFromRedux}",
            "PropsFromRedux"
        ],
        "reference_api": [
            "item.isHidden"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "item.isHidden",
                "code": "p"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "handleImageChange = () =>",
        "start_line": "114",
        "end_line": "126",
        "file_path": "webapp/channels/src/components/admin_console/brand_image_setting/brand_image_setting.tsx",
        "docstring": "This function, handleImageChange, handles changes to an image input field.\\nIt checks if the file input reference is valid and if there are files selected.\\nIf a file is selected, it sets a flag indicating that saving is needed and updates the state with the selected image while ensuring the delete flag is set to false.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "e869682a1b2c",
        "ground_truth": "handleImageChange = () => {\n    if (!this.fileInputRef.current) {\n        return;\n    }\n    const element = this.fileInputRef.current;\n    if (element.files && element.files.length > 0) {\n        this.props.setSaveNeeded();\n        this.setState({\n            brandImage: element.files[0],\n            deleteBrandImage: false,\n        });\n    }\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import {Client4} from 'mattermost-redux/client';",
            "{Client4}",
            "{Client4}",
            "Client4",
            "import {uploadBrandImage, deleteBrandImage} from 'actions/admin_actions.jsx';",
            "{uploadBrandImage, deleteBrandImage}",
            "{uploadBrandImage, deleteBrandImage}",
            "uploadBrandImage",
            "deleteBrandImage",
            "import FormError from 'components/form_error';",
            "FormError",
            "import OverlayTrigger from 'components/overlay_trigger';",
            "OverlayTrigger",
            "import Tooltip from 'components/tooltip';",
            "Tooltip",
            "import {Constants} from 'utils/constants';",
            "{Constants}",
            "{Constants}",
            "Constants"
        ],
        "reference_api": [
            "this.props.setSaveNeeded",
            "this.setState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.props.setSaveNeeded",
                "code": "r"
            },
            {
                "name": "this.setState",
                "code": "r"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "private removeChannel = (channel: ChannelWithTeamData) =>",
        "start_line": "113",
        "end_line": "128",
        "file_path": "webapp/channels/src/components/admin_console/data_retention_settings/channel_list/channel_list.tsx",
        "docstring": "This function, removeChannel, removes a specified channel.\\nIt first checks if the channel is already marked for removal and exits if true.\\nIt then retrieves the current page state and pagination properties.\\nThe function calls a callback to handle the channel removal.\\nIf conditions are met regarding the end count and page size, it decrements the page number.\\nFinally, it updates the state with the new page number.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8bc13681a6b2",
        "ground_truth": "private removeChannel = (channel: ChannelWithTeamData) => {\n    const {channelsToRemove} = this.props;\n    if (channelsToRemove[channel.id] === channel) {\n        return;\n    }\n    let {page} = this.state;\n    const {endCount} = this.getPaginationProps();\n    this.props.onRemoveCallback(channel);\n    if (endCount > this.getVisibleTotalCount() && (endCount % PAGE_SIZE) === 1 && page > 0) {\n        page--;\n    }\n    this.setStatePage(page);\n};",
        "import_statements": [
            "import debounce from 'lodash/debounce';",
            "debounce",
            "import isEqual from 'lodash/isEqual';",
            "isEqual",
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import type {ChannelSearchOpts, ChannelWithTeamData} from '@mattermost/types/channels';",
            "{ChannelSearchOpts, ChannelWithTeamData}",
            "{ChannelSearchOpts, ChannelWithTeamData}",
            "ChannelSearchOpts",
            "ChannelWithTeamData",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import DataGrid from 'components/admin_console/data_grid/data_grid';",
            "DataGrid",
            "import type {Column, Row} from 'components/admin_console/data_grid/data_grid';",
            "{Column, Row}",
            "{Column, Row}",
            "Column",
            "Row",
            "import type {FilterOptions} from 'components/admin_console/filter/filter';",
            "{FilterOptions}",
            "{FilterOptions}",
            "FilterOptions",
            "import TeamFilterDropdown from 'components/admin_console/filter/team_filter_dropdown';",
            "TeamFilterDropdown",
            "import ArchiveIcon from 'components/widgets/icons/archive_icon';",
            "ArchiveIcon",
            "import GlobeIcon from 'components/widgets/icons/globe_icon';",
            "GlobeIcon",
            "import LockIcon from 'components/widgets/icons/lock_icon';",
            "LockIcon",
            "import {isArchivedChannel} from 'utils/channel_utils';",
            "{isArchivedChannel}",
            "{isArchivedChannel}",
            "isArchivedChannel",
            "import {Constants} from 'utils/constants';",
            "{Constants}",
            "{Constants}",
            "Constants",
            "import './channel_list.scss';"
        ],
        "reference_api": [
            "this.getPaginationProps",
            "this.getVisibleTotalCount",
            "this.props.onRemoveCallback",
            "this.setStatePage"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.getPaginationProps",
                "code": ")"
            },
            {
                "name": "this.getVisibleTotalCount",
                "code": ")"
            },
            {
                "name": "this.props.onRemoveCallback",
                "code": ")"
            },
            {
                "name": "this.setStatePage",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "addToRemovedChannels = (channel: ChannelWithTeamData) => ",
        "start_line": "187",
        "end_line": "198",
        "file_path": "webapp/channels/src/components/admin_console/data_retention_settings/custom_policy_form/custom_policy_form.tsx",
        "docstring": "This function, addToRemovedChannels, manages the state of removed channels.\\nIt updates the count and state of removed channels if the channel is not already in the removed channels list.\\nIf the channel is in the new channels list, it is removed from there.\\nFinally, it updates the state and sets navigation to be blocked.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "ac41454927ac",
        "ground_truth": "addToRemovedChannels = (channel: ChannelWithTeamData) => {\n    let {removedChannelsCount} = this.state;\n    const {newChannels, removedChannels} = this.state;\n    if (newChannels[channel.id]?.id === channel.id) {\n        delete newChannels[channel.id];\n    } else if (removedChannels[channel.id]?.id !== channel.id) {\n        removedChannelsCount += 1;\n        removedChannels[channel.id] = channel;\n    }\n    this.setState({removedChannels: {...removedChannels}, newChannels: {...newChannels}, removedChannelsCount, saveNeeded: true});\n    this.props.actions.setNavigationBlocked(true);\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import type {ChannelWithTeamData} from '@mattermost/types/channels';",
            "{ChannelWithTeamData}",
            "{ChannelWithTeamData}",
            "ChannelWithTeamData",
            "import type {\n    DataRetentionCustomPolicy,\n    CreateDataRetentionCustomPolicy,\n    PatchDataRetentionCustomPolicy,\n} from '@mattermost/types/data_retention';",
            "{\n    DataRetentionCustomPolicy,\n    CreateDataRetentionCustomPolicy,\n    PatchDataRetentionCustomPolicy,\n}",
            "{\n    DataRetentionCustomPolicy,\n    CreateDataRetentionCustomPolicy,\n    PatchDataRetentionCustomPolicy,\n}",
            "DataRetentionCustomPolicy",
            "CreateDataRetentionCustomPolicy",
            "PatchDataRetentionCustomPolicy",
            "import type {Team} from '@mattermost/types/teams';",
            "{Team}",
            "{Team}",
            "Team",
            "import type {IDMappedObjects} from '@mattermost/types/utilities';",
            "{IDMappedObjects}",
            "{IDMappedObjects}",
            "IDMappedObjects",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import BlockableLink from 'components/admin_console/blockable_link';",
            "BlockableLink",
            "import ChannelList from 'components/admin_console/data_retention_settings/channel_list';",
            "ChannelList",
            "import {keepForeverOption, yearsOption, daysOption, FOREVER, YEARS} from 'components/admin_console/data_retention_settings/dropdown_options/dropdown_options';",
            "{keepForeverOption, yearsOption, daysOption, FOREVER, YEARS}",
            "{keepForeverOption, yearsOption, daysOption, FOREVER, YEARS}",
            "keepForeverOption",
            "yearsOption",
            "daysOption",
            "FOREVER",
            "YEARS",
            "import TeamList from 'components/admin_console/data_retention_settings/team_list';",
            "TeamList",
            "import Card from 'components/card/card';",
            "Card",
            "import TitleAndButtonCardHeader from 'components/card/title_and_button_card_header/title_and_button_card_header';",
            "TitleAndButtonCardHeader",
            "import ChannelSelectorModal from 'components/channel_selector_modal';",
            "ChannelSelectorModal",
            "import SaveButton from 'components/save_button';",
            "SaveButton",
            "import TeamSelectorModal from 'components/team_selector_modal';",
            "TeamSelectorModal",
            "import AdminHeader from 'components/widgets/admin_console/admin_header';",
            "AdminHeader",
            "import DropdownInputHybrid from 'components/widgets/inputs/dropdown_input_hybrid';",
            "DropdownInputHybrid",
            "import Input from 'components/widgets/inputs/input/input';",
            "Input",
            "import {getHistory} from 'utils/browser_history';",
            "{getHistory}",
            "{getHistory}",
            "getHistory",
            "import {ItemStatus} from 'utils/constants';",
            "{ItemStatus}",
            "{ItemStatus}",
            "ItemStatus",
            "import * as Utils from 'utils/utils';",
            "* as Utils",
            "* as Utils",
            "import './custom_policy_form.scss';"
        ],
        "reference_api": [
            "this.props.actions.setNavigationBlocked",
            "this.setState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.props.actions.setNavigationBlocked",
                "code": ")"
            },
            {
                "name": "this.setState",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "private removeTeam = (team: Team) =>",
        "start_line": "105",
        "end_line": "120",
        "file_path": "webapp/channels/src/components/admin_console/data_retention_settings/team_list/team_list.tsx",
        "docstring": "This function, removeTeam, removes a specified team from a list if it exists.\\nIt checks if the team is already marked for removal and returns if so.\\nThe function then updates pagination properties and invokes a callback to remove the team.\\nIf the removal affects the pagination, the current page number is adjusted.\\nFinally, the updated page number is set in the state.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "bdc81f9a884e",
        "ground_truth": "private removeTeam = (team: Team) => {\n    const {teamsToRemove} = this.props;\n    if (teamsToRemove[team.id] === team) {\n        return;\n    }\n    let {page} = this.state;\n    const {endCount} = this.getPaginationProps();\n    this.props.onRemoveCallback(team);\n    if (endCount > this.getVisibleTotalCount() && (endCount % PAGE_SIZE) === 1 && page > 0) {\n        page--;\n    }\n    this.setStatePage(page);\n};",
        "import_statements": [
            "import debounce from 'lodash/debounce';",
            "debounce",
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import type {Team, TeamSearchOpts} from '@mattermost/types/teams';",
            "{Team, TeamSearchOpts}",
            "{Team, TeamSearchOpts}",
            "Team",
            "TeamSearchOpts",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import DataGrid from 'components/admin_console/data_grid/data_grid';",
            "DataGrid",
            "import type {Column, Row} from 'components/admin_console/data_grid/data_grid';",
            "{Column, Row}",
            "{Column, Row}",
            "Column",
            "Row",
            "import TeamIcon from 'components/widgets/team_icon/team_icon';",
            "TeamIcon",
            "import Constants from 'utils/constants';",
            "Constants",
            "import * as Utils from 'utils/utils';",
            "* as Utils",
            "* as Utils",
            "import './team_list.scss';"
        ],
        "reference_api": [
            "this.getPaginationProps",
            "this.getVisibleTotalCount",
            "this.props.onRemoveCallback",
            "this.setStatePage"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.getPaginationProps",
                "code": ")"
            },
            {
                "name": "this.getVisibleTotalCount",
                "code": ")"
            },
            {
                "name": "this.props.onRemoveCallback",
                "code": ")"
            },
            {
                "name": "this.setStatePage",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "async function loadListInPageNumber(page: number)",
        "start_line": "34",
        "end_line": "56",
        "file_path": "webapp/channels/src/components/admin_console/filter/team_filter_dropdown/team_filter_dropdown.tsx",
        "docstring": "This async function, loadListInPageNumber, fetches a list of teams for a given page number.\\nIt calls an API to get the teams, maps and sorts them by display name, and updates the list state based on the page number.\\nIf it's the first page, it sets the list; otherwise, it appends the new teams to the existing list.\\nIt also updates the page number for subsequent fetches.\\nErrors are logged to the console.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "e55dd105e5d2",
        "ground_truth": "async function loadListInPageNumber(page: number) {\n    try {\n        const response = await props.getTeams(page, TEAMS_PER_PAGE, true) as ActionResult<{teams: Team[]}>;\n        if (response && response.data && response.data.teams && response.data.teams.length > 0) {\n            const list = response.data.teams.\n                map((team: Team) => ({\n                    value: team.id,\n                    label: team.display_name,\n                })).\n                sort((a: TeamSelectOption, b: TeamSelectOption) => a.label.localeCompare(b.label));\n            if (page === 0) {\n                setList(list);\n            } else {\n                setList((existingList) => [...existingList, ...list]);\n            }\n            setPageNumber(page + 1);\n        }\n    } catch (error) {\n        console.error(error); // eslint-disable-line no-console\n    }\n}",
        "import_statements": [
            "import React, {useEffect, useState} from 'react';",
            "React, {useEffect, useState}",
            "{useEffect, useState}",
            "useEffect",
            "useState",
            "import {useIntl} from 'react-intl';",
            "{useIntl}",
            "{useIntl}",
            "useIntl",
            "import type {ActionMeta, OptionsType, ValueType} from 'react-select';",
            "{ActionMeta, OptionsType, ValueType}",
            "{ActionMeta, OptionsType, ValueType}",
            "ActionMeta",
            "OptionsType",
            "ValueType",
            "import AsyncSelect from 'react-select/async';",
            "AsyncSelect",
            "import type {PagedTeamSearchOpts, Team} from '@mattermost/types/teams';",
            "{PagedTeamSearchOpts, Team}",
            "{PagedTeamSearchOpts, Team}",
            "PagedTeamSearchOpts",
            "Team",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import LoadingSpinner from 'components/widgets/loading/loading_spinner';",
            "LoadingSpinner",
            "import type {FilterOption, FilterValues} from '../filter';",
            "{FilterOption, FilterValues}",
            "{FilterOption, FilterValues}",
            "FilterOption",
            "FilterValues",
            "import type {PropsFromRedux} from './index';",
            "{PropsFromRedux}",
            "{PropsFromRedux}",
            "PropsFromRedux"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "async function searchInList(term: string, callBack: (options: OptionsType<{label: string; value: string}>) => void)",
        "start_line": "58",
        "end_line": "75",
        "file_path": "webapp/channels/src/components/admin_console/filter/team_filter_dropdown/team_filter_dropdown.tsx",
        "docstring": "This function, searchInList, asynchronously searches for teams based on a search term.\\nIt uses the searchTeams method with pagination options and processes the response to extract team details.\\nIf teams are found, it formats them and invokes the callBack function with the results.\\nIf no teams are found or an error occurs, it logs the error and invokes the callBack function with an empty array.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2de31ed13207",
        "ground_truth": "async function searchInList(term: string, callBack: (options: OptionsType<{label: string; value: string}>) => void) {\n    try {\n        const response = await props.searchTeams(term, {page: 0, per_page: TEAMS_PER_PAGE} as PagedTeamSearchOpts);\n        if (response && response.data && response.data.teams && response.data.teams.length > 0) {\n            const teams = response.data.teams.map((team: Team) => ({\n                value: team.id,\n                label: team.display_name,\n            }));\n            callBack(teams);\n        }\n        callBack([]);\n    } catch (error) {\n        console.error(error); // eslint-disable-line no-console\n        callBack([]);\n    }\n}",
        "import_statements": [
            "import React, {useEffect, useState} from 'react';",
            "React, {useEffect, useState}",
            "{useEffect, useState}",
            "useEffect",
            "useState",
            "import {useIntl} from 'react-intl';",
            "{useIntl}",
            "{useIntl}",
            "useIntl",
            "import type {ActionMeta, OptionsType, ValueType} from 'react-select';",
            "{ActionMeta, OptionsType, ValueType}",
            "{ActionMeta, OptionsType, ValueType}",
            "ActionMeta",
            "OptionsType",
            "ValueType",
            "import AsyncSelect from 'react-select/async';",
            "AsyncSelect",
            "import type {PagedTeamSearchOpts, Team} from '@mattermost/types/teams';",
            "{PagedTeamSearchOpts, Team}",
            "{PagedTeamSearchOpts, Team}",
            "PagedTeamSearchOpts",
            "Team",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import LoadingSpinner from 'components/widgets/loading/loading_spinner';",
            "LoadingSpinner",
            "import type {FilterOption, FilterValues} from '../filter';",
            "{FilterOption, FilterValues}",
            "{FilterOption, FilterValues}",
            "FilterOption",
            "FilterValues",
            "import type {PropsFromRedux} from './index';",
            "{PropsFromRedux}",
            "{PropsFromRedux}",
            "PropsFromRedux"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "onChangeRoles = (id: string, type: string, schemeAdmin: boolean) =>",
        "start_line": "312",
        "end_line": "350",
        "file_path": "webapp/channels/src/components/admin_console/group_settings/group_details/group_details.tsx",
        "docstring": "This function, onChangeRoles, updates the roles of a group based on the provided id, type, and schemeAdmin status.\\nIt extracts the current roles to change, group teams, and group channels from the state.\\nDepending on the type, it identifies whether the update pertains to teams or channels and updates the corresponding list.\\nThe function then maps through the list to update the schemeAdmin status of the specified item.\\nFinally, it sets the new state with the updated information and flags that saving is needed, also blocking navigation using a provided action.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "845d63ff0f74",
        "ground_truth": "onChangeRoles = (id: string, type: string, schemeAdmin: boolean) => {\n    const {\n        rolesToChange = {},\n        groupTeams = [],\n        groupChannels = [],\n    } = this.state;\n    let listToUpdate;\n    let getId: (item: any) => string;\n    let stateKey;\n    const key = `${id}/${type}`;\n    rolesToChange[key] = schemeAdmin;\n    if (\n        this.syncableTypeFromEntryType(type) === SyncableType.Team\n    ) {\n        listToUpdate = groupTeams;\n        getId = (item: GroupTeam) => item.team_id;\n        stateKey = 'groupTeams';\n    } else {\n        listToUpdate = groupChannels;\n        getId = (item: GroupChannel) => item.channel_id;\n        stateKey = 'groupChannels';\n    }\n    const updatedItems = listToUpdate.map((item) => {\n        if (getId(item) === id) {\n            item.scheme_admin = schemeAdmin;\n        }\n        return item;\n    }); // clone list of objects\n    this.setState({\n        saveNeeded: true,\n        rolesToChange,\n        [stateKey]: updatedItems,\n    } as any);\n    this.props.actions.setNavigationBlocked(true);\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import type {WrappedComponentProps} from 'react-intl';",
            "{WrappedComponentProps}",
            "{WrappedComponentProps}",
            "WrappedComponentProps",
            "import {FormattedMessage, defineMessage, injectIntl} from 'react-intl';",
            "{FormattedMessage, defineMessage, injectIntl}",
            "{FormattedMessage, defineMessage, injectIntl}",
            "FormattedMessage",
            "defineMessage",
            "injectIntl",
            "import type {ChannelWithTeamData} from '@mattermost/types/channels';",
            "{ChannelWithTeamData}",
            "{ChannelWithTeamData}",
            "ChannelWithTeamData",
            "import {\n    SyncableType,\n} from '@mattermost/types/groups';",
            "{\n    SyncableType,\n}",
            "{\n    SyncableType,\n}",
            "SyncableType",
            "import type {\n    Group,\n    GroupChannel,\n    GroupPatch,\n    GroupTeam,\n    SyncablePatch} from '@mattermost/types/groups';",
            "{\n    Group,\n    GroupChannel,\n    GroupPatch,\n    GroupTeam,\n    SyncablePatch}",
            "{\n    Group,\n    GroupChannel,\n    GroupPatch,\n    GroupTeam,\n    SyncablePatch}",
            "Group",
            "GroupChannel",
            "GroupPatch",
            "GroupTeam",
            "SyncablePatch",
            "import type {Team} from '@mattermost/types/teams';",
            "{Team}",
            "{Team}",
            "Team",
            "import type {UserProfile} from '@mattermost/types/users';",
            "{UserProfile}",
            "{UserProfile}",
            "UserProfile",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import BlockableLink from 'components/admin_console/blockable_link';",
            "BlockableLink",
            "import {GroupProfileAndSettings} from 'components/admin_console/group_settings/group_details/group_profile_and_settings';",
            "{GroupProfileAndSettings}",
            "{GroupProfileAndSettings}",
            "GroupProfileAndSettings",
            "import GroupTeamsAndChannels from 'components/admin_console/group_settings/group_details/group_teams_and_channels';",
            "GroupTeamsAndChannels",
            "import GroupUsers from 'components/admin_console/group_settings/group_details/group_users';",
            "GroupUsers",
            "import SaveChangesPanel from 'components/admin_console/team_channel_settings/save_changes_panel';",
            "SaveChangesPanel",
            "import ChannelSelectorModal from 'components/channel_selector_modal';",
            "ChannelSelectorModal",
            "import FormError from 'components/form_error';",
            "FormError",
            "import TeamSelectorModal from 'components/team_selector_modal';",
            "TeamSelectorModal",
            "import AdminHeader from 'components/widgets/admin_console/admin_header';",
            "AdminHeader",
            "import AdminPanel from 'components/widgets/admin_console/admin_panel';",
            "AdminPanel",
            "import Menu from 'components/widgets/menu/menu';",
            "Menu",
            "import MenuWrapper from 'components/widgets/menu/menu_wrapper';",
            "MenuWrapper"
        ],
        "reference_api": [
            "getId"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "getId",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "handleRolesToUpdate = async () =>",
        "start_line": "520",
        "end_line": "550",
        "file_path": "webapp/channels/src/components/admin_console/group_settings/group_details/group_details.tsx",
        "docstring": "This function, handleRolesToUpdate, processes role changes asynchronously.\\nIt retrieves the roles to change from the component's state and creates a list of promises to update these roles.\\nIf there are roles to change, it iterates over them, extracting syncable IDs and types, then creates and pushes update promises to the list.\\nOnce all promises are resolved, it checks for errors in the results and updates the component's state accordingly, either setting an error message or clearing the roles to change.\\nFinally, it returns a boolean indicating success or failure.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "02b54f0774f3",
        "ground_truth": "handleRolesToUpdate = async () => {\n    const {rolesToChange} = this.state;\n    const promises: Array<Promise<ActionResult>> = [];\n    if (rolesToChange) {\n        Object.entries(rolesToChange).forEach(([key, value]) => {\n            const [syncableID, type] = key.split('/');\n            const syncableType = this.syncableTypeFromEntryType(type);\n            if (syncableType) {\n                promises.push(\n                    this.props.actions.patchGroupSyncable(\n                        this.props.groupID,\n                        syncableID,\n                        syncableType,\n                        {scheme_admin: value, auto_add: false},\n                    ),\n                );\n            }\n        });\n    }\n    const results = await Promise.all(promises);\n    const errors = results.\n        map((r) => r.error?.message).\n        filter((item) => item);\n    if (errors.length) {\n        this.setState({serverError: <>{errors[0]}</>});\n        return false;\n    }\n    this.setState({rolesToChange: {}});\n    return true;\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import type {WrappedComponentProps} from 'react-intl';",
            "{WrappedComponentProps}",
            "{WrappedComponentProps}",
            "WrappedComponentProps",
            "import {FormattedMessage, defineMessage, injectIntl} from 'react-intl';",
            "{FormattedMessage, defineMessage, injectIntl}",
            "{FormattedMessage, defineMessage, injectIntl}",
            "FormattedMessage",
            "defineMessage",
            "injectIntl",
            "import type {ChannelWithTeamData} from '@mattermost/types/channels';",
            "{ChannelWithTeamData}",
            "{ChannelWithTeamData}",
            "ChannelWithTeamData",
            "import {\n    SyncableType,\n} from '@mattermost/types/groups';",
            "{\n    SyncableType,\n}",
            "{\n    SyncableType,\n}",
            "SyncableType",
            "import type {\n    Group,\n    GroupChannel,\n    GroupPatch,\n    GroupTeam,\n    SyncablePatch} from '@mattermost/types/groups';",
            "{\n    Group,\n    GroupChannel,\n    GroupPatch,\n    GroupTeam,\n    SyncablePatch}",
            "{\n    Group,\n    GroupChannel,\n    GroupPatch,\n    GroupTeam,\n    SyncablePatch}",
            "Group",
            "GroupChannel",
            "GroupPatch",
            "GroupTeam",
            "SyncablePatch",
            "import type {Team} from '@mattermost/types/teams';",
            "{Team}",
            "{Team}",
            "Team",
            "import type {UserProfile} from '@mattermost/types/users';",
            "{UserProfile}",
            "{UserProfile}",
            "UserProfile",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import BlockableLink from 'components/admin_console/blockable_link';",
            "BlockableLink",
            "import {GroupProfileAndSettings} from 'components/admin_console/group_settings/group_details/group_profile_and_settings';",
            "{GroupProfileAndSettings}",
            "{GroupProfileAndSettings}",
            "GroupProfileAndSettings",
            "import GroupTeamsAndChannels from 'components/admin_console/group_settings/group_details/group_teams_and_channels';",
            "GroupTeamsAndChannels",
            "import GroupUsers from 'components/admin_console/group_settings/group_details/group_users';",
            "GroupUsers",
            "import SaveChangesPanel from 'components/admin_console/team_channel_settings/save_changes_panel';",
            "SaveChangesPanel",
            "import ChannelSelectorModal from 'components/channel_selector_modal';",
            "ChannelSelectorModal",
            "import FormError from 'components/form_error';",
            "FormError",
            "import TeamSelectorModal from 'components/team_selector_modal';",
            "TeamSelectorModal",
            "import AdminHeader from 'components/widgets/admin_console/admin_header';",
            "AdminHeader",
            "import AdminPanel from 'components/widgets/admin_console/admin_panel';",
            "AdminPanel",
            "import Menu from 'components/widgets/menu/menu';",
            "Menu",
            "import MenuWrapper from 'components/widgets/menu/menu_wrapper';",
            "MenuWrapper"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "nextPage = async () =>",
        "start_line": "58",
        "end_line": "76",
        "file_path": "webapp/channels/src/components/admin_console/group_settings/group_details/group_users.tsx",
        "docstring": "This async function, nextPage, calculates the next page of members to load based on the current state and total members.\\nIt checks if the next page exceeds the total number of members and prevents unnecessary loading.\\nIf additional members are needed, it sets the loading state, fetches the members, and updates the state accordingly.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "30463a7bcb15",
        "ground_truth": "nextPage = async () => {\n    const {total, members, groupID, getMembers} = this.props;\n    const page =\n        (this.state.page + 1) * GROUP_MEMBERS_PAGE_SIZE >= total ? this.state.page : this.state.page + 1;\n    if (page === this.state.page) {\n        return;\n    }\n    const numberOfMembersToLoad =\n        (page + 1) * GROUP_MEMBERS_PAGE_SIZE >= total ? total : (page + 1) * GROUP_MEMBERS_PAGE_SIZE;\n    if (members.length >= numberOfMembersToLoad) {\n        this.setState({page});\n        return;\n    }\n    this.setState({page, loading: true});\n    await getMembers(groupID, page, GROUP_MEMBERS_PAGE_SIZE);\n    this.setState({loading: false});\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import type {UserProfile} from '@mattermost/types/users';",
            "{UserProfile}",
            "{UserProfile}",
            "UserProfile",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import GroupUsersRow from 'components/admin_console/group_settings/group_details/group_users_row';",
            "GroupUsersRow",
            "import FormattedMarkdownMessage from 'components/formatted_markdown_message';",
            "FormattedMarkdownMessage",
            "import NextIcon from 'components/widgets/icons/fa_next_icon';",
            "NextIcon",
            "import PreviousIcon from 'components/widgets/icons/fa_previous_icon';",
            "PreviousIcon",
            "import {getSiteURL} from 'utils/url';",
            "{getSiteURL}",
            "{getSiteURL}",
            "getSiteURL"
        ],
        "reference_api": [
            "getMembers",
            "this.setState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "getMembers",
                "code": ")"
            },
            {
                "name": "this.setState",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "public handleGroupSearchKeyUp(e: any)",
        "start_line": "312",
        "end_line": "326",
        "file_path": "webapp/channels/src/components/admin_console/group_settings/groups_list/groups_list.tsx",
        "docstring": "This function, handleGroupSearchKeyUp, handles the key up event for a group search input.\\nIf the Enter key is pressed, it resets the page state to 0 and triggers a search for groups.\\nIt then creates a new state object and updates it based on whether the search string matches certain criteria defined in a mapping.\\nFinally, it updates the component's state with the new state object.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "d6aba286f65f",
        "ground_truth": "public handleGroupSearchKeyUp(e: any) {\n    const {key} = e;\n    const {searchString} = this.state;\n    if (key === Constants.KeyCodes.ENTER[0]) {\n        this.setState({page: 0});\n        this.searchGroups();\n    }\n    const newState = {};\n    Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([k, value]) => {\n        if (!this.regex(value.filter).test(searchString)) {\n            (newState as any)[k] = false;\n        }\n    });\n    this.setState(newState);\n}",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import type {GroupSearchOpts, MixedUnlinkedGroupRedux} from '@mattermost/types/groups';",
            "{GroupSearchOpts, MixedUnlinkedGroupRedux}",
            "{GroupSearchOpts, MixedUnlinkedGroupRedux}",
            "GroupSearchOpts",
            "MixedUnlinkedGroupRedux",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import GroupRow from 'components/admin_console/group_settings/group_row';",
            "GroupRow",
            "import CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon';",
            "CheckboxCheckedIcon",
            "import NextIcon from 'components/widgets/icons/fa_next_icon';",
            "NextIcon",
            "import PreviousIcon from 'components/widgets/icons/fa_previous_icon';",
            "PreviousIcon",
            "import SearchIcon from 'components/widgets/icons/search_icon';",
            "SearchIcon",
            "import {Constants} from 'utils/constants';",
            "{Constants}",
            "{Constants}",
            "Constants",
            "import * as Utils from 'utils/utils';",
            "* as Utils",
            "* as Utils"
        ],
        "reference_api": [
            "this.regex",
            "this.regex(value.filter).test"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.regex",
                "code": ")"
            },
            {
                "name": "this.regex(value.filter).test",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "reloadPercentage = async () => ",
        "start_line": "143",
        "end_line": "159",
        "file_path": "webapp/channels/src/components/admin_console/license_settings/license_settings.tsx",
        "docstring": "This function, reloadPercentage, asynchronously checks the upgrade status and handles the interval for status updates.\\nIt retrieves the upgrade percentage and any error, clearing the interval and logging events if the upgrade is complete or an error occurred.\\nIf the percentage is greater than 0 and no interval is set, it sets an interval to recheck the status every 2 seconds.\\nIt updates the component state with the current upgrade percentage and any error message.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "f0ab31c8ac4b",
        "ground_truth": "reloadPercentage = async () => {\n    const {percentage, error} = await this.props.actions.upgradeToE0Status();\n    if (percentage === 100 || error) {\n        if (this.interval) {\n            clearInterval(this.interval);\n            this.interval = null;\n            if (error) {\n                trackEvent('api', 'upgrade_to_e0_failed', {error});\n            } else {\n                trackEvent('api', 'upgrade_to_e0_success');\n            }\n        }\n    } else if (percentage > 0 && !this.interval) {\n        this.interval = setInterval(this.reloadPercentage, 2000);\n    }\n    this.setState({upgradingPercentage: percentage || 0, upgradeError: error as string});\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {FormattedMessage, defineMessages} from 'react-intl';",
            "{FormattedMessage, defineMessages}",
            "{FormattedMessage, defineMessages}",
            "FormattedMessage",
            "defineMessages",
            "import type {StatusOK} from '@mattermost/types/client4';",
            "{StatusOK}",
            "{StatusOK}",
            "StatusOK",
            "import type {ClientLicense} from '@mattermost/types/config';",
            "{ClientLicense}",
            "{ClientLicense}",
            "ClientLicense",
            "import type {ServerError} from '@mattermost/types/errors';",
            "{ServerError}",
            "{ServerError}",
            "ServerError",
            "import type {ServerLimits} from '@mattermost/types/limits';",
            "{ServerLimits}",
            "{ServerLimits}",
            "ServerLimits",
            "import type {GetFilteredUsersStatsOpts, UsersStats} from '@mattermost/types/users';",
            "{GetFilteredUsersStatsOpts, UsersStats}",
            "{GetFilteredUsersStatsOpts, UsersStats}",
            "GetFilteredUsersStatsOpts",
            "UsersStats",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import {trackEvent} from 'actions/telemetry_actions';",
            "{trackEvent}",
            "{trackEvent}",
            "trackEvent",
            "import ExternalLink from 'components/external_link';",
            "ExternalLink",
            "import AdminHeader from 'components/widgets/admin_console/admin_header';",
            "AdminHeader",
            "import {AboutLinks, CloudLinks, ModalIdentifiers} from 'utils/constants';",
            "{AboutLinks, CloudLinks, ModalIdentifiers}",
            "{AboutLinks, CloudLinks, ModalIdentifiers}",
            "AboutLinks",
            "CloudLinks",
            "ModalIdentifiers",
            "import {isLicenseExpired, isLicenseExpiring, isTrialLicense, isEnterpriseOrE20License, licenseSKUWithFirstLetterCapitalized} from 'utils/license_utils';",
            "{isLicenseExpired, isLicenseExpiring, isTrialLicense, isEnterpriseOrE20License, licenseSKUWithFirstLetterCapitalized}",
            "{isLicenseExpired, isLicenseExpiring, isTrialLicense, isEnterpriseOrE20License, licenseSKUWithFirstLetterCapitalized}",
            "isLicenseExpired",
            "isLicenseExpiring",
            "isTrialLicense",
            "isEnterpriseOrE20License",
            "licenseSKUWithFirstLetterCapitalized",
            "import type {ModalData} from 'types/actions';",
            "{ModalData}",
            "{ModalData}",
            "ModalData",
            "import EnterpriseEditionLeftPanel, {messages as enterpriseEditionLeftPanelMessages} from './enterprise_edition/enterprise_edition_left_panel';",
            "EnterpriseEditionLeftPanel, {messages as enterpriseEditionLeftPanelMessages}",
            "{messages as enterpriseEditionLeftPanelMessages}",
            "messages as enterpriseEditionLeftPanelMessages",
            "import EnterpriseEditionRightPanel from './enterprise_edition/enterprise_edition_right_panel';",
            "EnterpriseEditionRightPanel",
            "import ConfirmLicenseRemovalModal from './modals/confirm_license_removal_modal';",
            "ConfirmLicenseRemovalModal",
            "import EELicenseModal from './modals/ee_license_modal';",
            "EELicenseModal",
            "import UploadLicenseModal from './modals/upload_license_modal';",
            "UploadLicenseModal",
            "import RenewLinkCard from './renew_license_card/renew_license_card';",
            "RenewLinkCard",
            "import StarterLeftPanel, {messages as licenseSettingsStarterEditionMessages} from './starter_edition/starter_left_panel';",
            "StarterLeftPanel, {messages as licenseSettingsStarterEditionMessages}",
            "{messages as licenseSettingsStarterEditionMessages}",
            "messages as licenseSettingsStarterEditionMessages",
            "import StarterRightPanel from './starter_edition/starter_right_panel';",
            "StarterRightPanel",
            "import TeamEditionLeftPanel from './team_edition/team_edition_left_panel';",
            "TeamEditionLeftPanel",
            "import TeamEditionRightPanel from './team_edition/team_edition_right_panel';",
            "TeamEditionRightPanel",
            "import TrialBanner from './trial_banner/trial_banner';",
            "TrialBanner",
            "import TrialLicenseCard from './trial_license_card/trial_license_card';",
            "TrialLicenseCard",
            "import './license_settings.scss';"
        ],
        "reference_api": [
            "trackEvent",
            "clearInterval",
            "setInterval",
            "this.setState",
            "this.props.actions.upgradeToE0Status"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "trackEvent",
                "code": "s"
            },
            {
                "name": "this.setState",
                "code": "s"
            },
            {
                "name": "this.props.actions.upgradeToE0Status",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => ",
        "start_line": "60",
        "end_line": "81",
        "file_path": "webapp/channels/src/components/admin_console/license_settings/modals/upload_license_modal.tsx",
        "docstring": "This function, handleSubmit, handles the submission of a form triggered by a button click event.\\nIt prevents the default form submission behavior and checks if a file object is present.\\nIf a file is being uploaded, it sets the uploading state to true and dispatches an upload action.\\nIn case of an error during upload, it resets the file object, sets the server error message, and turns off the uploading state.\\nIf the upload is successful, it dispatches an action to get the license configuration, resets the file object and server error, turns off the uploading state, and marks the upload as successful.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "f91ab43e6fe1",
        "ground_truth": "const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    if (fileObj === null) {\n        return;\n    }\n    setIsUploading(true);\n    const {error} = await dispatch(uploadLicense(fileObj));\n    if (error) {\n        setFileObj(null);\n        setServerError(error.message);\n        setIsUploading(false);\n        return;\n    }\n    await dispatch(getLicenseConfig());\n    setFileObj(null);\n    setServerError(null);\n    setIsUploading(false);\n    setUploadSuccessful(true);\n};",
        "import_statements": [
            "import marked from 'marked';",
            "marked",
            "import React, {useRef} from 'react';",
            "React, {useRef}",
            "{useRef}",
            "useRef",
            "import {FormattedDate, FormattedMessage} from 'react-intl';",
            "{FormattedDate, FormattedMessage}",
            "{FormattedDate, FormattedMessage}",
            "FormattedDate",
            "FormattedMessage",
            "import {useSelector, useDispatch} from 'react-redux';",
            "{useSelector, useDispatch}",
            "{useSelector, useDispatch}",
            "useSelector",
            "useDispatch",
            "import {GenericModal} from '@mattermost/components';",
            "{GenericModal}",
            "{GenericModal}",
            "GenericModal",
            "import type {ClientLicense} from '@mattermost/types/config';",
            "{ClientLicense}",
            "{ClientLicense}",
            "ClientLicense",
            "import {uploadLicense} from 'mattermost-redux/actions/admin';",
            "{uploadLicense}",
            "{uploadLicense}",
            "uploadLicense",
            "import {getLicenseConfig} from 'mattermost-redux/actions/general';",
            "{getLicenseConfig}",
            "{getLicenseConfig}",
            "getLicenseConfig",
            "import {getLicense} from 'mattermost-redux/selectors/entities/general';",
            "{getLicense}",
            "{getLicense}",
            "getLicense",
            "import {closeModal} from 'actions/views/modals';",
            "{closeModal}",
            "{closeModal}",
            "closeModal",
            "import {getCurrentLocale} from 'selectors/i18n';",
            "{getCurrentLocale}",
            "{getCurrentLocale}",
            "getCurrentLocale",
            "import {isModalOpen} from 'selectors/views/modals';",
            "{isModalOpen}",
            "{isModalOpen}",
            "isModalOpen",
            "import FileSvg from 'components/common/svg_images_components/file_svg';",
            "FileSvg",
            "import HandsSvg from 'components/common/svg_images_components/hands_svg';",
            "HandsSvg",
            "import WomanArmOnTable from 'components/common/svg_images_components/woman_arm_on_table_svg';",
            "WomanArmOnTable",
            "import LoadingWrapper from 'components/widgets/loading/loading_wrapper';",
            "LoadingWrapper",
            "import {FileTypes, ModalIdentifiers} from 'utils/constants';",
            "{FileTypes, ModalIdentifiers}",
            "{FileTypes, ModalIdentifiers}",
            "FileTypes",
            "ModalIdentifiers",
            "import {getMonthLong} from 'utils/i18n';",
            "{getMonthLong}",
            "{getMonthLong}",
            "getMonthLong",
            "import {getSkuDisplayName} from 'utils/subscription';",
            "{getSkuDisplayName}",
            "{getSkuDisplayName}",
            "getSkuDisplayName",
            "import {fileSizeToString, localizeMessage} from 'utils/utils';",
            "{fileSizeToString, localizeMessage}",
            "{fileSizeToString, localizeMessage}",
            "fileSizeToString",
            "localizeMessage",
            "import type {GlobalState} from 'types/store';",
            "{GlobalState}",
            "{GlobalState}",
            "GlobalState",
            "import './upload_license_modal.scss';"
        ],
        "reference_api": [
            "setUploadSuccessful",
            "getLicenseConfig",
            "dispatch",
            "e.preventDefault",
            "setServerError",
            "setFileObj",
            "uploadLicense",
            "setIsUploading"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "setUploadSuccessful",
                "code": ")"
            },
            {
                "name": "getLicenseConfig",
                "code": ")"
            },
            {
                "name": "dispatch",
                "code": ")"
            },
            {
                "name": "e.preventDefault",
                "code": ")"
            },
            {
                "name": "setServerError",
                "code": ")"
            },
            {
                "name": "setFileObj",
                "code": ")"
            },
            {
                "name": "uploadLicense",
                "code": ")"
            },
            {
                "name": "setIsUploading",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "handleSubmit = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent> | React.FormEvent<HTMLFormElement>) =>",
        "start_line": "156",
        "end_line": "210",
        "file_path": "webapp/channels/src/components/admin_console/schema_admin_settings.tsx",
        "docstring": "This function, handleSubmit, handles form submission events and prevents the default behavior.\\nIf confirmation is needed, it sets the confirmation state and exits.\\nIt then sets the saving state and clears any server errors.\\nDepending on the saveNeeded state, it processes permission settings or configuration settings.\\nFor permissions, it maps settings to role bindings and updates roles, handling errors appropriately.\\nFor configuration, it submits the settings or resets the state and unblocks navigation.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "840d965d4dcc",
        "ground_truth": "handleSubmit = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent> | React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (this.state.confirmNeededId) {\n        this.setState({\n            showConfirmId: this.state.confirmNeededId,\n        });\n        return;\n    }\n    this.setState({\n        saving: true,\n        serverError: null,\n    });\n    if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'permissions') {\n        const settings = (this.props.schema && 'settings' in this.props.schema && this.props.schema.settings) || [];\n        const rolesBinding = settings.reduce<Record<string, string>>((acc, val) => {\n            if (val.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                acc[val.permissions_mapping_name] = this.state[val.key].toString();\n            }\n            return acc;\n        }, {});\n        const updatedRoles = rolesFromMapping(rolesBinding, this.props.roles);\n        let success = true;\n        await Promise.all(Object.values(updatedRoles).map(async (item) => {\n            try {\n                await this.props.editRole(item);\n            } catch (err) {\n                success = false;\n                this.setState({\n                    saving: false,\n                    serverError: err.message,\n                });\n            }\n        }));\n        if (!success) {\n            return;\n        }\n    }\n    if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'config') {\n        this.doSubmit(SchemaAdminSettings.getStateFromConfig);\n    } else {\n        this.setState({\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n        });\n        this.props.setNavigationBlocked(false);\n    }\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {Overlay} from 'react-bootstrap';",
            "{Overlay}",
            "{Overlay}",
            "Overlay",
            "import {FormattedMessage, injectIntl} from 'react-intl';",
            "{FormattedMessage, injectIntl}",
            "{FormattedMessage, injectIntl}",
            "FormattedMessage",
            "injectIntl",
            "import type {IntlShape, MessageDescriptor, WrappedComponentProps} from 'react-intl';",
            "{IntlShape, MessageDescriptor, WrappedComponentProps}",
            "{IntlShape, MessageDescriptor, WrappedComponentProps}",
            "IntlShape",
            "MessageDescriptor",
            "WrappedComponentProps",
            "import {Link} from 'react-router-dom';",
            "{Link}",
            "{Link}",
            "Link",
            "import type {CloudState} from '@mattermost/types/cloud';",
            "{CloudState}",
            "{CloudState}",
            "CloudState",
            "import type {AdminConfig, ClientLicense, EnvironmentConfig} from '@mattermost/types/config';",
            "{AdminConfig, ClientLicense, EnvironmentConfig}",
            "{AdminConfig, ClientLicense, EnvironmentConfig}",
            "AdminConfig",
            "ClientLicense",
            "EnvironmentConfig",
            "import type {Role} from '@mattermost/types/roles';",
            "{Role}",
            "{Role}",
            "Role",
            "import type {DeepPartial} from '@mattermost/types/utilities';",
            "{DeepPartial}",
            "{DeepPartial}",
            "DeepPartial",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import BooleanSetting from 'components/admin_console/boolean_setting';",
            "BooleanSetting",
            "import ColorSetting from 'components/admin_console/color_setting';",
            "ColorSetting",
            "import DropdownSetting from 'components/admin_console/dropdown_setting';",
            "DropdownSetting",
            "import FileUploadSetting from 'components/admin_console/file_upload_setting';",
            "FileUploadSetting",
            "import GeneratedSetting from 'components/admin_console/generated_setting';",
            "GeneratedSetting",
            "import JobsTable from 'components/admin_console/jobs';",
            "JobsTable",
            "import MultiSelectSetting from 'components/admin_console/multiselect_settings';",
            "MultiSelectSetting",
            "import RadioSetting from 'components/admin_console/radio_setting';",
            "RadioSetting",
            "import RemoveFileSetting from 'components/admin_console/remove_file_setting';",
            "RemoveFileSetting",
            "import RequestButton from 'components/admin_console/request_button/request_button';",
            "RequestButton",
            "import SchemaText from 'components/admin_console/schema_text';",
            "SchemaText",
            "import SettingsGroup from 'components/admin_console/settings_group';",
            "SettingsGroup",
            "import TextSetting from 'components/admin_console/text_setting';",
            "TextSetting",
            "import UserAutocompleteSetting from 'components/admin_console/user_autocomplete_setting';",
            "UserAutocompleteSetting",
            "import FormError from 'components/form_error';",
            "FormError",
            "import Markdown from 'components/markdown';",
            "Markdown",
            "import SaveButton from 'components/save_button';",
            "SaveButton",
            "import Tooltip from 'components/tooltip';",
            "Tooltip",
            "import AdminHeader from 'components/widgets/admin_console/admin_header';",
            "AdminHeader",
            "import WarningIcon from 'components/widgets/icons/fa_warning_icon';",
            "WarningIcon",
            "import * as I18n from 'i18n/i18n.jsx';",
            "* as I18n",
            "* as I18n",
            "import Constants from 'utils/constants';",
            "Constants",
            "import {mappingValueFromRoles, rolesFromMapping} from 'utils/policy_roles_adapter';",
            "{mappingValueFromRoles, rolesFromMapping}",
            "{mappingValueFromRoles, rolesFromMapping}",
            "mappingValueFromRoles",
            "rolesFromMapping",
            "import Setting from './setting';",
            "Setting",
            "import type {AdminDefinitionSetting, AdminDefinitionSettingBanner, AdminDefinitionSettingDropdownOption, AdminDefinitionSubSectionSchema, ConsoleAccess} from './types';",
            "{AdminDefinitionSetting, AdminDefinitionSettingBanner, AdminDefinitionSettingDropdownOption, AdminDefinitionSubSectionSchema, ConsoleAccess}",
            "{AdminDefinitionSetting, AdminDefinitionSettingBanner, AdminDefinitionSettingDropdownOption, AdminDefinitionSubSectionSchema, ConsoleAccess}",
            "AdminDefinitionSetting",
            "AdminDefinitionSettingBanner",
            "AdminDefinitionSettingDropdownOption",
            "AdminDefinitionSubSectionSchema",
            "ConsoleAccess",
            "import './schema_admin_settings.scss';"
        ],
        "reference_api": [
            "this.props.editRole",
            "this.setState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.props.editRole",
                "code": "s"
            },
            {
                "name": "this.setState",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "const ContactUsButton: React.FC<Props> = (props: Props) =>",
        "start_line": "19",
        "end_line": "41",
        "file_path": "webapp/channels/src/components/announcement_bar/contact_sales/contact_us.tsx",
        "docstring": "This React functional component, ContactUsButton, renders a button that triggers a sales contact link.\\nIt uses a custom hook to open the sales link and defines an event handler that prevents the default action, tracks an event, and opens the sales contact link when the button is clicked.\\nThe button's text and custom class are customizable via props.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "86453b2860e5",
        "ground_truth": "const ContactUsButton: React.FC<Props> = (props: Props) => {\n    const [openContactSales] = useOpenSalesLink();\n     const handleContactUsLinkClick = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        trackEvent('admin', props.eventID || 'in_trial_contact_sales');\n        openContactSales();\n    };\n     return (\n        <button\n            className={`contact-us ${props.customClass ? props.customClass : ''}`}\n            onClick={(e) => handleContactUsLinkClick(e)}\n        >\n            {props.buttonTextElement || (\n                <FormattedMessage\n                    id={'admin.license.trialCard.contactSales'}\n                    defaultMessage={'Contact sales'}\n                />\n            )}\n        </button>\n    );\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import {trackEvent} from 'actions/telemetry_actions';",
            "{trackEvent}",
            "{trackEvent}",
            "trackEvent",
            "import useOpenSalesLink from 'components/common/hooks/useOpenSalesLink';",
            "useOpenSalesLink",
            "import './contact_us.scss';"
        ],
        "reference_api": [
            "openContactSales",
            "e.preventDefault",
            "trackEvent"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "openContactSales",
                "code": "s"
            },
            {
                "name": "e.preventDefault",
                "code": "s"
            },
            {
                "name": "trackEvent",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "const RenewalLink = (props: RenewalLinkProps) => ",
        "start_line": "22",
        "end_line": "46",
        "file_path": "webapp/channels/src/components/announcement_bar/renewal_link/renewal_link.tsx",
        "docstring": "This function component, RenewalLink, renders a button that triggers a contact sales link when clicked.\\nIt uses a hook to get the openContactSales function and defines a click handler to prevent default behavior and open the sales link.\\nThe button displays text fetched from a formatted message and can be disabled based on props.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "49713e95ae2e",
        "ground_truth": "const RenewalLink = (props: RenewalLinkProps) => {\n    const [openContactSales] = useOpenSalesLink();\n     const handleLinkClick = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        openContactSales();\n    };\n     const btnText = (\n        <FormattedMessage\n            id='announcement_bar.warn.renew_license_contact_sales'\n            defaultMessage='Contact sales'\n        />\n    );\n     return (\n        <button\n            className='btn btn-primary annnouncementBar__renewLicense'\n            disabled={props.isDisabled}\n            onClick={(e) => handleLinkClick(e)}\n        >\n            {btnText}\n        </button>\n    );\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import useOpenSalesLink from 'components/common/hooks/useOpenSalesLink';",
            "useOpenSalesLink",
            "import type {ModalData} from 'types/actions';",
            "{ModalData}",
            "{ModalData}",
            "ModalData",
            "import './renew_link.scss';"
        ],
        "reference_api": [
            "openContactSales",
            "e.preventDefault"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "openContactSales",
                "code": "s"
            },
            {
                "name": "e.preventDefault",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "updateErrors = (elements: DialogElement[], fieldErrors?: {[x: string]: string}, formError?: string): boolean =>",
        "start_line": "103",
        "end_line": "136",
        "file_path": "webapp/channels/src/components/apps_form/apps_form_component.tsx",
        "docstring": "This function, updateErrors, processes and updates error states for form elements.\\nIt checks for a form error and field errors, setting corresponding state properties and formatting error messages.\\nIf field errors match the elements, it converts them to Markdown components.\\nUnknown field errors are formatted with a specific message.\\nIf any errors are found, the state is updated and the function returns true.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "23618eba67aa",
        "ground_truth": "updateErrors = (elements: DialogElement[], fieldErrors?: {[x: string]: string}, formError?: string): boolean => {\n    let hasErrors = false;\n    const state = {} as State;\n    if (formError) {\n        hasErrors = true;\n        state.formError = formError;\n    }\n    if (fieldErrors && Object.keys(fieldErrors).length >= 0) {\n        hasErrors = true;\n        if (checkIfErrorsMatchElements(fieldErrors, elements)) {\n            state.fieldErrors = {};\n            for (const [key, value] of Object.entries(fieldErrors)) {\n                state.fieldErrors[key] = (<Markdown message={value}/>);\n            }\n        } else if (!state.formError) {\n            const field = Object.keys(fieldErrors)[0];\n            state.formError = this.props.intl.formatMessage({\n                id: 'apps.error.responses.unknown_field_error',\n                defaultMessage: 'Received an error for an unknown field. Field name: `{field}`. Error:\\n{error}',\n            }, {\n                field,\n                error: fieldErrors[field],\n            });\n        }\n    }\n    if (hasErrors) {\n        this.setState(state);\n    }\n    return hasErrors;\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import {Modal, Fade} from 'react-bootstrap';",
            "{Modal, Fade}",
            "{Modal, Fade}",
            "Modal",
            "Fade",
            "import {FormattedMessage, injectIntl} from 'react-intl';",
            "{FormattedMessage, injectIntl}",
            "{FormattedMessage, injectIntl}",
            "FormattedMessage",
            "injectIntl",
            "import type {WrappedComponentProps} from 'react-intl';",
            "{WrappedComponentProps}",
            "{WrappedComponentProps}",
            "WrappedComponentProps",
            "import type {AppCallResponse, AppField, AppForm, AppFormValues, AppSelectOption, FormResponseData, AppLookupResponse, AppFormValue} from '@mattermost/types/apps';",
            "{AppCallResponse, AppField, AppForm, AppFormValues, AppSelectOption, FormResponseData, AppLookupResponse, AppFormValue}",
            "{AppCallResponse, AppField, AppForm, AppFormValues, AppSelectOption, FormResponseData, AppLookupResponse, AppFormValue}",
            "AppCallResponse",
            "AppField",
            "AppForm",
            "AppFormValues",
            "AppSelectOption",
            "FormResponseData",
            "AppLookupResponse",
            "AppFormValue",
            "import type {DialogElement} from '@mattermost/types/integrations';",
            "{DialogElement}",
            "{DialogElement}",
            "DialogElement",
            "import {AppCallResponseTypes, AppFieldTypes} from 'mattermost-redux/constants/apps';",
            "{AppCallResponseTypes, AppFieldTypes}",
            "{AppCallResponseTypes, AppFieldTypes}",
            "AppCallResponseTypes",
            "AppFieldTypes",
            "import {\n    checkDialogElementForError, checkIfErrorsMatchElements,\n} from 'mattermost-redux/utils/integration_utils';",
            "{\n    checkDialogElementForError, checkIfErrorsMatchElements,\n}",
            "{\n    checkDialogElementForError, checkIfErrorsMatchElements,\n}",
            "checkDialogElementForError",
            "checkIfErrorsMatchElements",
            "import Markdown from 'components/markdown';",
            "Markdown",
            "import SpinnerButton from 'components/spinner_button';",
            "SpinnerButton",
            "import ModalSuggestionList from 'components/suggestion/modal_suggestion_list';",
            "ModalSuggestionList",
            "import SuggestionList from 'components/suggestion/suggestion_list';",
            "SuggestionList",
            "import LoadingSpinner from 'components/widgets/loading/loading_spinner';",
            "LoadingSpinner",
            "import {filterEmptyOptions} from 'utils/apps';",
            "{filterEmptyOptions}",
            "{filterEmptyOptions}",
            "filterEmptyOptions",
            "import {localizeMessage} from 'utils/utils';",
            "{localizeMessage}",
            "{localizeMessage}",
            "localizeMessage",
            "import type {DoAppCallResult} from 'types/apps';",
            "{DoAppCallResult}",
            "{DoAppCallResult}",
            "DoAppCallResult",
            "import AppsFormField from './apps_form_field';",
            "AppsFormField",
            "import AppsFormHeader from './apps_form_header';",
            "AppsFormHeader",
            "import './apps_form_component.scss';"
        ],
        "reference_api": [
            "this.props.intl.formatMessage",
            "Object.entries",
            "checkIfErrorsMatchElements",
            "this.setState",
            "Object.keys"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.props.intl.formatMessage",
                "code": "f"
            },
            {
                "name": "checkIfErrorsMatchElements",
                "code": "f"
            },
            {
                "name": "this.setState",
                "code": "f"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "loadDynamicChannelOptions = async (userInput: string): Promise<AppSelectOption[]> =>",
        "start_line": "101",
        "end_line": "109",
        "file_path": "webapp/channels/src/components/apps_form/apps_form_field/apps_form_select_field.tsx",
        "docstring": "This function, loadDynamicChannelOptions, asynchronously fetches channel options based on user input.\\nIt converts the input to lowercase and calls an autocomplete function to search for matching channels.\\nThe search results are then transformed into a format suitable for selection options, with each option including a label and value derived from the channel's display name and ID.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "10be7e79f7e0",
        "ground_truth": "loadDynamicChannelOptions = async (userInput: string): Promise<AppSelectOption[]> => {\n    let channelsSearchResults: Channel[] = [];\n    await this.props.actions.autocompleteChannels(userInput.toLowerCase(), (data) => {\n        channelsSearchResults = data;\n    }, () => {});\n    return channelsSearchResults.map((channel) => ({...channel, label: channel.display_name, value: channel.id}));\n};",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import ReactSelect from 'react-select';",
            "ReactSelect",
            "import AsyncSelect from 'react-select/async';",
            "AsyncSelect",
            "import type {AppField, AppSelectOption} from '@mattermost/types/apps';",
            "{AppField, AppSelectOption}",
            "{AppField, AppSelectOption}",
            "AppField",
            "AppSelectOption",
            "import type {UserAutocomplete} from '@mattermost/types/autocomplete';",
            "{UserAutocomplete}",
            "{UserAutocomplete}",
            "UserAutocomplete",
            "import type {Channel} from '@mattermost/types/channels';",
            "{Channel}",
            "{Channel}",
            "Channel",
            "import {AppFieldTypes} from 'mattermost-redux/constants/apps';",
            "{AppFieldTypes}",
            "{AppFieldTypes}",
            "AppFieldTypes",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import {displayUsername} from 'mattermost-redux/utils/user_utils';",
            "{displayUsername}",
            "{displayUsername}",
            "displayUsername",
            "import {imageURLForUser} from 'utils/utils';",
            "{imageURLForUser}",
            "{imageURLForUser}",
            "imageURLForUser",
            "import {SelectChannelOption} from './select_channel_option';",
            "{SelectChannelOption}",
            "{SelectChannelOption}",
            "SelectChannelOption",
            "import {SelectUserOption} from './select_user_option';",
            "{SelectUserOption}",
            "{SelectUserOption}",
            "SelectUserOption"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "handleJoin = async (channel: Channel, done: () => void) => ",
        "start_line": "174",
        "end_line": "193",
        "file_path": "webapp/channels/src/components/browse_channels/browse_channels.tsx",
        "docstring": "This function, handleJoin, is used to join a specified channel.\\nIt extracts actions, currentUserId, teamId, and teamName from the component's props.\\nIf the user is not already a member of the channel, it attempts to join the channel using the provided actions.\\nIf there is an error during the join process, it sets the serverError state with the error message.\\nIf the join is successful, it updates the channel member count, navigates to the channel's URL, and closes the right-hand sidebar.\\nFinally, if a callback function is provided, it is executed.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b44d060ba306",
        "ground_truth": "handleJoin = async (channel: Channel, done: () => void) => {\n    const {actions, currentUserId, teamId, teamName} = this.props;\n    let result;\n    if (!this.isMemberOfChannel(channel.id)) {\n        result = await actions.joinChannel(currentUserId, teamId, channel.id);\n    }\n    if (result?.error) {\n        this.setState({serverError: result.error.message});\n    } else {\n        this.props.actions.getChannelsMemberCount([channel.id]);\n        getHistory().push(getRelativeChannelURL(teamName!, channel.name));\n        this.closeEditRHS();\n    }\n    if (done) {\n        done();\n    }\n};",
        "import_statements": [
            "import classNames from 'classnames';",
            "classNames",
            "import React from 'react';",
            "React",
            "import {FormattedMessage} from 'react-intl';",
            "{FormattedMessage}",
            "{FormattedMessage}",
            "FormattedMessage",
            "import {GenericModal} from '@mattermost/components';",
            "{GenericModal}",
            "{GenericModal}",
            "GenericModal",
            "import type {Channel, ChannelMembership, ChannelSearchOpts, ChannelsWithTotalCount} from '@mattermost/types/channels';",
            "{Channel, ChannelMembership, ChannelSearchOpts, ChannelsWithTotalCount}",
            "{Channel, ChannelMembership, ChannelSearchOpts, ChannelsWithTotalCount}",
            "Channel",
            "ChannelMembership",
            "ChannelSearchOpts",
            "ChannelsWithTotalCount",
            "import type {RelationOneToOne} from '@mattermost/types/utilities';",
            "{RelationOneToOne}",
            "{RelationOneToOne}",
            "RelationOneToOne",
            "import Permissions from 'mattermost-redux/constants/permissions';",
            "Permissions",
            "import type {ActionResult} from 'mattermost-redux/types/actions';",
            "{ActionResult}",
            "{ActionResult}",
            "ActionResult",
            "import LoadingScreen from 'components/loading_screen';",
            "LoadingScreen",
            "import NewChannelModal from 'components/new_channel_modal/new_channel_modal';",
            "NewChannelModal",
            "import TeamPermissionGate from 'components/permissions_gates/team_permission_gate';",
            "TeamPermissionGate",
            "import SearchableChannelList from 'components/searchable_channel_list';",
            "SearchableChannelList",
            "import {getHistory} from 'utils/browser_history';",
            "{getHistory}",
            "{getHistory}",
            "getHistory",
            "import Constants, {ModalIdentifiers, RHSStates, StoragePrefixes} from 'utils/constants';",
            "Constants, {ModalIdentifiers, RHSStates, StoragePrefixes}",
            "{ModalIdentifiers, RHSStates, StoragePrefixes}",
            "ModalIdentifiers",
            "RHSStates",
            "StoragePrefixes",
            "import {getRelativeChannelURL} from 'utils/url';",
            "{getRelativeChannelURL}",
            "{getRelativeChannelURL}",
            "getRelativeChannelURL",
            "import {localizeMessage} from 'utils/utils';",
            "{localizeMessage}",
            "{localizeMessage}",
            "localizeMessage",
            "import type {ModalData} from 'types/actions';",
            "{ModalData}",
            "{ModalData}",
            "ModalData",
            "import type {RhsState} from 'types/store/rhs';",
            "{RhsState}",
            "{RhsState}",
            "RhsState",
            "import './browse_channels.scss';"
        ],
        "reference_api": [
            "getRelativeChannelURL",
            "done",
            "getHistory().push",
            "getHistory",
            "this.props.actions.getChannelsMemberCount",
            "this.closeEditRHS",
            "this.setState",
            "this.isMemberOfChannel",
            "actions.joinChannel"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "getRelativeChannelURL",
                "code": "r"
            },
            {
                "name": "done",
                "code": "r"
            },
            {
                "name": "getHistory().push",
                "code": "r"
            },
            {
                "name": "getHistory",
                "code": "r"
            },
            {
                "name": "this.props.actions.getChannelsMemberCount",
                "code": "r"
            },
            {
                "name": "this.closeEditRHS",
                "code": "r"
            },
            {
                "name": "this.setState",
                "code": "r"
            },
            {
                "name": "this.isMemberOfChannel",
                "code": "r"
            },
            {
                "name": "actions.joinChannel",
                "code": "r"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "const CardHeader: React.FC<Props> = (props: Props) =>",
        "start_line": "13",
        "end_line": "23",
        "file_path": "webapp/channels/src/components/card/card_header.tsx",
        "docstring": "This functional component, CardHeader, returns a div with a dynamic class name based on whether it is expanded or not.\\nIt handles a click event using a provided onClick function.\\nThe children elements are rendered inside the div, and if the component is expanded, a horizontal rule is also included.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c6636f0c9c0b",
        "ground_truth": "const CardHeader: React.FC<Props> = (props: Props) => {\n    return (\n        <div\n            className={classNames('Card__header', {expanded: props.expanded})}\n            onClick={props.onClick}\n        >\n            {props.children}\n            {props.expanded && <hr className='Card__hr'/>}\n        </div>\n    );\n};",
        "import_statements": [
            "import classNames from 'classnames';",
            "classNames",
            "import React from 'react';",
            "React"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "mattermost/mattermost",
        "function_declaration": "const TitleAndButtonCardHeader: React.FC<Props> = (props: Props) =>",
        "start_line": "15",
        "end_line": "42",
        "file_path": "webapp/channels/src/components/card/title_and_button_card_header/title_and_button_card_header.tsx",
        "docstring": "This React functional component, TitleAndButtonCardHeader, displays a title and optionally a subtitle within a div.\\nIf both buttonText and onClick props are provided, it also renders a button with the provided text, an onClick event handler, and a disabled state based on the isDisabled prop.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "230cb3cd6dd5",
        "ground_truth": "const TitleAndButtonCardHeader: React.FC<Props> = (props: Props) => {\n    return (\n        <>\n            <div>\n                <div className='text-top'>\n                    {props.title}\n                </div>\n                {\n                    props.subtitle &&\n                    <div className='text-bottom'>\n                        {props.subtitle}\n                    </div>\n                }\n            </div>\n            {\n                props.buttonText && props.onClick &&\n                    <button\n                        disabled={props.isDisabled}\n                        className='btn btn-primary'\n                        onClick={props.onClick}\n                    >\n                        {props.buttonText}\n                    </button>\n            }\n         </>\n    );\n};",
        "import_statements": [
            "import React from 'react';",
            "React"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "elastic/kibana",
        "function_declaration": "export const createNotifications = (services: KibanaServices): KibanaReactNotifications => {",
        "start_line": "14",
        "end_line": "55",
        "file_path": "src/plugins/kibana_react/public/notifications/create_notifications.tsx",
        "docstring": "This function, createNotifications, generates a notification system using Kibana services.\\nIt defines a show function to display notifications, handling title, body, color, icon, lifetime, and onClose behavior.\\nIf the notifications service is unavailable, it throws an error.\\nAdditionally, it provides success, warning, and danger functions for specific notification types, each with predefined colors and icons.\\nThe function returns an object with these methods to manage notifications.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "eb5c7946fd59",
        "ground_truth": "export const createNotifications = (services: KibanaServices): KibanaReactNotifications => {\n  const show: KibanaReactNotifications['toasts']['show'] = ({\n    title,\n    body,\n    color,\n    iconType,\n    toastLifeTimeMs,\n    onClose,\n  }) => {\n    if (!services.notifications) {\n      throw new TypeError('Could not show notification as notifications service is not available.');\n    }\n    services.notifications!.toasts.add({\n      title: toMountPoint(title, { theme$: services.theme?.theme$ }),\n      text: toMountPoint(<>{body || null}</>, { theme$: services.theme?.theme$ }),\n      color,\n      iconType,\n      toastLifeTimeMs,\n      onClose,\n    });\n  };\n   const success: KibanaReactNotifications['toasts']['success'] = (input) =>\n    show({ color: 'success', iconType: 'check', ...input });\n   const warning: KibanaReactNotifications['toasts']['warning'] = (input) =>\n    show({ color: 'warning', iconType: 'help', ...input });\n   const danger: KibanaReactNotifications['toasts']['danger'] = (input) =>\n    show({ color: 'danger', iconType: 'error', ...input });\n   const notifications: KibanaReactNotifications = {\n    toasts: {\n      show,\n      success,\n      warning,\n      danger,\n    },\n  };\n   return notifications;\n};",
        "import_statements": [
            "import * as React from 'react';",
            "* as React",
            "* as React",
            "import { KibanaServices } from '../context/types';",
            "{ KibanaServices }",
            "{ KibanaServices }",
            "KibanaServices",
            "import { KibanaReactNotifications } from './types';",
            "{ KibanaReactNotifications }",
            "{ KibanaReactNotifications }",
            "KibanaReactNotifications",
            "import { toMountPoint } from '../util';",
            "{ toMountPoint }",
            "{ toMountPoint }",
            "toMountPoint"
        ],
        "reference_api": [
            "show"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "show",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "elastic/kibana",
        "function_declaration": "const openFlyout: KibanaReactOverlays['openFlyout'] = (node, options?) =>",
        "start_line": "21",
        "end_line": "27",
        "file_path": "src/plugins/kibana_react/public/overlays/create_react_overlays.tsx",
        "docstring": "This function, openFlyout, opens a flyout overlay.\\nIt first checks the core service, then uses the services' overlays to open the flyout with the given node and optional parameters.\\nThe node is converted to a mount point with an optional theme before being passed to the overlay service.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "e8c4d43e5232",
        "ground_truth": "const openFlyout: KibanaReactOverlays['openFlyout'] = (node, options?) => {\n  checkCoreService();\n  return services.overlays!.openFlyout(\n    toMountPoint(<>{node}</>, { theme$: services.theme?.theme$ }),\n    options\n  );\n};",
        "import_statements": [
            "import * as React from 'react';",
            "* as React",
            "* as React",
            "import { KibanaServices } from '../context/types';",
            "{ KibanaServices }",
            "{ KibanaServices }",
            "KibanaServices",
            "import { KibanaReactOverlays } from './types';",
            "{ KibanaReactOverlays }",
            "{ KibanaReactOverlays }",
            "KibanaReactOverlays",
            "import { toMountPoint } from '../util';",
            "{ toMountPoint }",
            "{ toMountPoint }",
            "toMountPoint"
        ],
        "reference_api": [
            "toMountPoint",
            "services.overlays!.openFlyout",
            "checkCoreService"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "toMountPoint",
                "code": "s"
            },
            {
                "name": "services.overlays!.openFlyout",
                "code": "s"
            },
            {
                "name": "checkCoreService",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "elastic/kibana",
        "function_declaration": "export const reactRouterOnClickHandler =\n  (history: ScopedHistory | History, to: string | LocationObject, onClickCallback?: Function) =>\n  (event: MouseEvent) =>",
        "start_line": "36",
        "end_line": "60",
        "file_path": "src/plugins/kibana_react/public/react_router_navigate/react_router_navigate.tsx",
        "docstring": "This function, reactRouterOnClickHandler, creates an event handler for a mouse click event.\\nIt optionally executes a callback, checks if the event's default action was prevented, and ensures the event target does not have a 'target' attribute.\\nIt also verifies the event is a left-click and not modified before preventing the default page reload and navigating to a specified location using the provided history object.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "89d99efaa3c9",
        "ground_truth": "export const reactRouterOnClickHandler =\n  (history: ScopedHistory | History, to: string | LocationObject, onClickCallback?: Function) =>\n  (event: MouseEvent) => {\n    if (onClickCallback) {\n      onClickCallback(event);\n    }\n     if (event.defaultPrevented) {\n      return;\n    }\n     if (\n      (event.target as unknown as { getAttribute: (a: string) => unknown })?.getAttribute('target')\n    ) {\n      return;\n    }\n     if (isModifiedEvent(event) || !isLeftClickEvent(event)) {\n      return;\n    }\n     // prevents page reload\n    event.preventDefault();\n    history.push(toLocationObject(to));\n  };",
        "import_statements": [
            "import { ScopedHistory } from '@kbn/core/public';",
            "{ ScopedHistory }",
            "{ ScopedHistory }",
            "ScopedHistory",
            "import { MouseEvent } from 'react';",
            "{ MouseEvent }",
            "{ MouseEvent }",
            "MouseEvent",
            "import { History, parsePath } from 'history';",
            "{ History, parsePath }",
            "{ History, parsePath }",
            "History",
            "parsePath"
        ],
        "reference_api": [
            "onClickCallback",
            "isLeftClickEvent",
            "(event.target as unknown as { getAttribute: (a: string) => unknown })?.getAttribute",
            "event.preventDefault",
            "history.push",
            "isModifiedEvent",
            "toLocationObject"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "onClickCallback",
                "code": "e"
            },
            {
                "name": "isLeftClickEvent",
                "code": "e"
            },
            {
                "name": "(event.target as unknown as { getAttribute: (a: string) => unknown })?.getAttribute",
                "code": "e"
            },
            {
                "name": "event.preventDefault",
                "code": "e"
            },
            {
                "name": "history.push",
                "code": "e"
            },
            {
                "name": "isModifiedEvent",
                "code": "e"
            },
            {
                "name": "toLocationObject",
                "code": "e"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "elastic/kibana",
        "function_declaration": "export const useGlobalUiSetting$ = <T>(key: string, defaultValue?: T): [T, Setter<T>] => ",
        "start_line": "102",
        "end_line": "119",
        "file_path": "src/plugins/kibana_react/public/ui_settings/use_ui_setting.ts",
        "docstring": "This function, useGlobalUiSetting$, retrieves and sets global UI settings using a key and an optional default value.\\nIt accesses the settings service from the Kibana context and throws an error if the service is unavailable.\\nIt creates an observable for the setting's value and uses it to manage the setting's state.\\nThe function returns the current value and a setter function for the setting.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8d8e28c04bbd",
        "ground_truth": "export const useGlobalUiSetting$ = <T>(key: string, defaultValue?: T): [T, Setter<T>] => {\n  const {\n    services: { settings },\n  } = useKibana();\n   if (!settings) {\n    throw new TypeError('uiSettings service not available in kibana-react context.');\n  }\n   const observable$ = useMemo(\n    () => settings!.globalClient.get$(key, defaultValue),\n    [key, defaultValue, settings!.globalClient]\n  );\n  const value = useObservable<T>(observable$, settings!.globalClient.get(key, defaultValue));\n  const set = useCallback((newValue: T) => settings!.globalClient.set(key, newValue), [key]);\n   return [value, set];\n};",
        "import_statements": [
            "import { useCallback, useMemo } from 'react';",
            "{ useCallback, useMemo }",
            "{ useCallback, useMemo }",
            "useCallback",
            "useMemo",
            "import useObservable from 'react-use/lib/useObservable';",
            "useObservable",
            "import { useKibana } from '../context';",
            "{ useKibana }",
            "{ useKibana }",
            "useKibana"
        ],
        "reference_api": [
            "settings!.globalClient.set"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "settings!.globalClient.set",
                "code": "T"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "elastic/kibana",
        "function_declaration": "const wrapMainPanelItemsIntoSubmenu = (panels: Record<string, PanelDescriptor>, id: string) =>",
        "start_line": "66",
        "end_line": "89",
        "file_path": "src/plugins/ui_actions/public/context_menu/build_eui_context_menu_panels.tsx",
        "docstring": "This function, wrapMainPanelItemsIntoSubmenu, checks if a panel exists and its items count exceeds a specified limit.\\nIf so, it divides the items into two groups: visible items and submenu items.\\nIt then creates a 'more' item that links to a new subpanel containing the submenu items and updates the original panel with these changes.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7da631faf620",
        "ground_truth": "const wrapMainPanelItemsIntoSubmenu = (panels: Record<string, PanelDescriptor>, id: string) => {\n  const panel = panels[id];\n  if (!panel) return;\n  const maxItemsBeforeWrapping = 4;\n  if (!panel.items) return;\n  if (panel.items.length <= maxItemsBeforeWrapping) return;\n  const visibleItems = panel.items.slice(0, 3) as ItemDescriptor[];\n  const itemsInSubmenu = panel.items.slice(3) as ItemDescriptor[];\n  const morePanelId = panel.id + '__more';\n  const more: ItemDescriptor = {\n    name: txtMore,\n    panel: morePanelId,\n    icon: 'boxesHorizontal',\n    'data-test-subj': `embeddablePanelMore-${id}`,\n    _order: -1,\n  };\n  panel.items = [...visibleItems, more];\n  const subPanel: PanelDescriptor = {\n    id: morePanelId,\n    title: panel.title || defaultTitle,\n    items: itemsInSubmenu,\n  };\n  panels[morePanelId] = subPanel;\n};",
        "import_statements": [
            "import * as React from 'react';",
            "* as React",
            "* as React",
            "import { EuiContextMenuPanelDescriptor, EuiContextMenuPanelItemDescriptor } from '@elastic/eui';",
            "{ EuiContextMenuPanelDescriptor, EuiContextMenuPanelItemDescriptor }",
            "{ EuiContextMenuPanelDescriptor, EuiContextMenuPanelItemDescriptor }",
            "EuiContextMenuPanelDescriptor",
            "EuiContextMenuPanelItemDescriptor",
            "import { i18n } from '@kbn/i18n';",
            "{ i18n }",
            "{ i18n }",
            "i18n",
            "import type { Trigger } from '@kbn/ui-actions-browser/src/triggers';",
            "{ Trigger }",
            "{ Trigger }",
            "Trigger",
            "import type { Action, ActionExecutionContext, ActionInternal } from '../actions';",
            "{ Action, ActionExecutionContext, ActionInternal }",
            "{ Action, ActionExecutionContext, ActionInternal }",
            "Action",
            "ActionExecutionContext",
            "ActionInternal"
        ],
        "reference_api": [
            "panel.items.slice"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "panel.items.slice",
                "code": "a"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "elastic/kibana",
        "function_declaration": "private scheduleFlush()",
        "start_line": "68",
        "end_line": "102",
        "file_path": "src/plugins/ui_actions/public/service/ui_actions_execution_service.ts",
        "docstring": "This function, scheduleFlush, sets a timeout to process pending tasks.\\nIf there are no pending tasks, it creates a unique list of tasks from the batching queue.\\nIf any task requires always showing a popup, it displays a popup menu with the tasks.\\nOtherwise, it executes a single task if only one is present, or shows the popup menu if multiple tasks are present.\\nFinally, it clears the batching queue.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7a1a98211380",
        "ground_truth": "private scheduleFlush() {\n  /**\n   * Have to delay at least until next macro task\n   * Otherwise chain:\n   * Trigger -> await action.execute() -> trigger -> action\n   * isn't batched\n   *\n   * This basically needed to support a chain of scheduled micro tasks (async/awaits) within uiActions code\n   */\n  setTimeout(() => {\n    if (this.pendingTasks.size === 0) {\n      const tasks = uniqBy(this.batchingQueue, (t) => t.action.id);\n      if (tasks.length > 0) {\n        let alwaysShowPopup = false;\n        for (const task of tasks) {\n          if (task.alwaysShowPopup) {\n            alwaysShowPopup = true;\n            break;\n          }\n        }\n        if (alwaysShowPopup) {\n          this.showActionPopupMenu(tasks);\n        } else {\n          if (tasks.length === 1) {\n            this.executeSingleTask(tasks[0]);\n          } else if (tasks.length > 1) {\n            this.showActionPopupMenu(tasks);\n          }\n        }\n      }\n      this.batchingQueue.splice(0, this.batchingQueue.length);\n    }\n  }, 0);\n}",
        "import_statements": [
            "import { uniqBy } from 'lodash';",
            "{ uniqBy }",
            "{ uniqBy }",
            "uniqBy",
            "import { defer as createDefer, Defer } from '@kbn/kibana-utils-plugin/public';",
            "{ defer as createDefer, Defer }",
            "{ defer as createDefer, Defer }",
            "defer as createDefer",
            "Defer",
            "import type { Trigger } from '@kbn/ui-actions-browser/src/triggers';",
            "{ Trigger }",
            "{ Trigger }",
            "Trigger",
            "import { Action } from '../actions';",
            "{ Action }",
            "{ Action }",
            "Action",
            "import { buildContextMenuForActions, openContextMenu } from '../context_menu';",
            "{ buildContextMenuForActions, openContextMenu }",
            "{ buildContextMenuForActions, openContextMenu }",
            "buildContextMenuForActions",
            "openContextMenu"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "elastic/kibana",
        "function_declaration": "public async execute(context: Context, alwaysShowPopup?: boolean)",
        "start_line": "24",
        "end_line": "40",
        "file_path": "src/plugins/ui_actions/public/triggers/trigger_internal.ts",
        "docstring": "This function, execute, retrieves compatible actions for a given trigger and context.\\nIt then concurrently executes these actions using the execution service, passing the action, context, trigger, and an optional flag to always show a popup.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "702779fd9f4a",
        "ground_truth": "public async execute(context: Context, alwaysShowPopup?: boolean) {\n  const triggerId = this.trigger.id;\n  const actions = await this.service.getTriggerCompatibleActions!(triggerId, context);\n  await Promise.all([\n    actions.map((action) =>\n      this.service.executionService.execute(\n        {\n          action,\n          context,\n          trigger: this.trigger,\n        },\n        alwaysShowPopup\n      )\n    ),\n  ]);\n}",
        "import_statements": [
            "import type { Trigger } from '@kbn/ui-actions-browser/src/triggers';",
            "{ Trigger }",
            "{ Trigger }",
            "Trigger",
            "import { TriggerContract } from './trigger_contract';",
            "{ TriggerContract }",
            "{ TriggerContract }",
            "TriggerContract",
            "import { UiActionsService } from '../service';",
            "{ UiActionsService }",
            "{ UiActionsService }",
            "UiActionsService"
        ],
        "reference_api": [
            "this.service.executionService.execute"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.service.executionService.execute",
                "code": "a"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "function readImages(chunk: Chunk, frameCount: number): Uint8Array[] ",
        "start_line": "56",
        "end_line": "63",
        "file_path": "packages/ani-cursor/src/parser.ts",
        "docstring": "This function, readImages, processes a chunk to extract image data.\\nIt takes a chunk and a frame count as parameters.\\nThe function iterates over the sub-chunks, up to the specified frame count, checking that each sub-chunk is of type 'icon'.\\nIf a sub-chunk is not of the expected type, an error is thrown.\\nFor valid sub-chunks, it slices the chunk data to extract the image data and returns an array of these image data slices.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "16fd1e46a9be",
        "ground_truth": "function readImages(chunk: Chunk, frameCount: number): Uint8Array[] {\n  return chunk.subChunks.slice(0, frameCount).map((c) => {\n    if (c.chunkId !== \"icon\") {\n      throw new Error(`Unexpected chunk type in fram: ${c.chunkId}`);\n    }\n    return arr.slice(c.chunkData.start, c.chunkData.end);\n  });\n}",
        "import_statements": [
            "import { RIFFFile } from \"riff-file\";",
            "{ RIFFFile }",
            "{ RIFFFile }",
            "RIFFFile",
            "import { unpackArray, unpackString } from \"byte-data\";",
            "{ unpackArray, unpackString }",
            "{ unpackArray, unpackString }",
            "unpackArray",
            "unpackString"
        ],
        "reference_api": [
            "arr.slice"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "arr.slice",
                "code": "c"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "function readAni(contents: Uint8Array): AniCursorImage",
        "start_line": "57",
        "end_line": "75",
        "file_path": "packages/ani-cursor/src/index.ts",
        "docstring": "This function, readAni, processes the contents of a Uint8Array to create an AniCursorImage.\\nIt parses the contents, calculates the display rate, and determines the total duration.\\nIt then maps images to frame objects with URLs and empty percentage arrays.\\nUsing the display rate, it calculates and assigns the elapsed display percentage for each frame.\\nFinally, it returns an object containing the total duration in milliseconds and the frames.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "6b6f91239073",
        "ground_truth": "function readAni(contents: Uint8Array): AniCursorImage {\n  const ani = parseAni(contents);\n  const rate = ani.rate ?? ani.images.map(() => ani.metadata.iDispRate);\n  const duration = sum(rate);\n   const frames = ani.images.map((image) => ({\n    url: curUrlFromByteArray(image),\n    percents: [] as number[],\n  }));\n   let elapsed = 0;\n  rate.forEach((r, i) => {\n    const frameIdx = ani.seq ? ani.seq[i] : i;\n    frames[frameIdx].percents.push((elapsed / duration) * 100);\n    elapsed += r;\n  });\n   return { duration: duration * JIFFIES_PER_MS, frames };\n}",
        "import_statements": [
            "import { parseAni } from \"./parser\";",
            "{ parseAni }",
            "{ parseAni }",
            "parseAni"
        ],
        "reference_api": [
            "frames[frameIdx].percents.push"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "frames[frameIdx].percents.push",
                "code": "{"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export async function checkInternetArchiveMetadata(): Promise<void>",
        "start_line": "19",
        "end_line": "61",
        "file_path": "packages/skin-database/tasks/integrityCheck.ts",
        "docstring": "This function, checkInternetArchiveMetadata, retrieves metadata from a database and processes it to identify and categorize issues.\\nIt queries the database for items with non-empty metadata, then iterates through each item to parse and filter the metadata files.\\nItems are categorized into three arrays based on specific conditions: too many files, too few files, and missing skin file.\\nFinally, it logs a table summarizing the results of the categorization.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "f059427111a8",
        "ground_truth": "export async function checkInternetArchiveMetadata(): Promise<void> {\n  const results = await knex.raw(\n    'SELECT skin_md5, identifier, metadata FROM ia_items WHERE metadata != \"\";'\n  );\n   const tooMany: string[] = [];\n  const tooFew: string[] = [];\n  const missingSkin: string[] = [];\n   for (const item of results) {\n    const { identifier, metadata, skin_md5 } = item;\n    try {\n      const allFiles = JSON.parse(metadata).files;\n      const files = allFiles.filter(isNotGeneratedFile);\n      if (files.length > 2) {\n        tooMany.push(skin_md5);\n        continue;\n        console.warn(\"Too many files\", { files, identifier, skin_md5 });\n      }\n      const skinFile = files.find((file) => file.md5 === skin_md5);\n      if (skinFile == null) {\n        missingSkin.push(skin_md5);\n        continue;\n        console.warn(\"No skin file\", { identifier, skin_md5 });\n      }\n      if (files.length < 2) {\n        console.log({ skin_md5, identifier, length: files.length });\n        tooFew.push(skin_md5);\n        continue;\n        console.warn(\"Too few files\", { identifier, skin_md5 });\n      }\n    } catch (e) {\n      console.log(metadata);\n    }\n  }\n   console.table({\n    total: results.length,\n    tooMany: tooMany.length,\n    tooFew: tooFew.length,\n    missingSkin: missingSkin.length,\n  });\n}",
        "import_statements": [
            "import { knex } from \"../db\";",
            "{ knex }",
            "{ knex }",
            "knex",
            "import { TWEET_SNOWFLAKE_REGEX } from \"../utils\";",
            "{ TWEET_SNOWFLAKE_REGEX }",
            "{ TWEET_SNOWFLAKE_REGEX }",
            "TWEET_SNOWFLAKE_REGEX"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "function useSkinKeyboardControls()",
        "start_line": "13",
        "end_line": "27",
        "file_path": "packages/skin-museum-client/src/FocusedSkin.js",
        "docstring": "This function, useSkinKeyboardControls, sets up keyboard event listeners for the \"ArrowRight\" and \"ArrowLeft\" keys.\\nWhen these keys are pressed, it triggers the selection of the next or previous skin using a specified action.\\nThe event listeners are cleaned up when the component is unmounted.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "9d9b04763521",
        "ground_truth": "function useSkinKeyboardControls() {\n  const selectRelativeSkin = useActionCreator(Actions.selectRelativeSkin);\n  useEffect(() => {\n    const subscription = fromEvent(window.document, \"keydown\").subscribe(\n      (e) => {\n        if (e.key === \"ArrowRight\") {\n          selectRelativeSkin(1);\n        } else if (e.key === \"ArrowLeft\") {\n          selectRelativeSkin(-1);\n        }\n      }\n    );\n    return () => subscription.unsubscribe();\n  }, [selectRelativeSkin]);\n}",
        "import_statements": [
            "import React, { useEffect, useMemo, useState } from \"react\";",
            "React, { useEffect, useMemo, useState }",
            "{ useEffect, useMemo, useState }",
            "useEffect",
            "useMemo",
            "useState",
            "import { useSelector } from \"react-redux\";",
            "{ useSelector }",
            "{ useSelector }",
            "useSelector",
            "import { useActionCreator, useWindowSize, useWebampAnimation } from \"./hooks\";",
            "{ useActionCreator, useWindowSize, useWebampAnimation }",
            "{ useActionCreator, useWindowSize, useWebampAnimation }",
            "useActionCreator",
            "useWindowSize",
            "useWebampAnimation",
            "import * as Selectors from \"./redux/selectors\";",
            "* as Selectors",
            "* as Selectors",
            "import * as Actions from \"./redux/actionCreators\";",
            "* as Actions",
            "* as Actions",
            "import WebampComponent from \"./WebampComponent\";",
            "WebampComponent",
            "import * as Utils from \"./utils\";",
            "* as Utils",
            "* as Utils",
            "import { SCREENSHOT_HEIGHT, SCREENSHOT_WIDTH } from \"./constants\";",
            "{ SCREENSHOT_HEIGHT, SCREENSHOT_WIDTH }",
            "{ SCREENSHOT_HEIGHT, SCREENSHOT_WIDTH }",
            "SCREENSHOT_HEIGHT",
            "SCREENSHOT_WIDTH",
            "import { fromEvent } from \"rxjs\";",
            "{ fromEvent }",
            "{ fromEvent }",
            "fromEvent"
        ],
        "reference_api": [
            "subscription.unsubscribe"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "subscription.unsubscribe",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "function _openFileDialog(\n  accept: string | null,\n  expectedType: \"SKIN\" | \"MEDIA\" | \"EQ\"\n): Thunk",
        "start_line": "148",
        "end_line": "162",
        "file_path": "packages/webamp/js/actionCreators/files.ts",
        "docstring": "This function, _openFileDialog, prompts the user to select files with a specified file type.\\nIt then dispatches an action with the expected file type, the number of selected files, and the name of the first file.\\nFinally, it dispatches another action to load the selected files.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c49e878d86ad",
        "ground_truth": "function _openFileDialog(\n  accept: string | null,\n  expectedType: \"SKIN\" | \"MEDIA\" | \"EQ\"\n): Thunk {\n  return async (dispatch) => {\n    const fileReferences = await promptForFileReferences({ accept });\n    dispatch({\n      type: \"OPENED_FILES\",\n      expectedType,\n      count: fileReferences.length,\n      firstFileName: fileReferences[0]?.name,\n    });\n    dispatch(loadFilesFromReferences(fileReferences));\n  };\n}",
        "import_statements": [
            "import { parser, creator } from \"winamp-eqf\";",
            "{ parser, creator }",
            "{ parser, creator }",
            "parser",
            "creator",
            "import { BANDS, LOAD_STYLE } from \"../constants\";",
            "{ BANDS, LOAD_STYLE }",
            "{ BANDS, LOAD_STYLE }",
            "BANDS",
            "LOAD_STYLE",
            "import * as Utils from \"../utils\";",
            "* as Utils",
            "* as Utils",
            "import {\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n} from \"../fileUtils\";",
            "{\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n}",
            "{\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n}",
            "promptForFileReferences",
            "genArrayBufferFromFileReference",
            "genMediaDuration",
            "genMediaTags",
            "import skinParser from \"../skinParser\";",
            "skinParser",
            "import {\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n} from \"../selectors\";",
            "{\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n}",
            "{\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n}",
            "getTracks",
            "getUserTracks",
            "getTrackIsVisibleFunction",
            "getEqfData",
            "getPlaylistURL",
            "import {\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n} from \"../actionTypes\";",
            "{\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n}",
            "{\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n}",
            "ADD_TRACK_FROM_URL",
            "PLAY_TRACK",
            "BUFFER_TRACK",
            "SET_MEDIA_TAGS",
            "SET_MEDIA_DURATION",
            "MEDIA_TAG_REQUEST_INITIALIZED",
            "MEDIA_TAG_REQUEST_FAILED",
            "SET_SKIN_DATA",
            "LOADED",
            "LOADING",
            "import LoadQueue from \"../loadQueue\";",
            "LoadQueue",
            "import { removeAllTracks } from \"./playlist\";",
            "{ removeAllTracks }",
            "{ removeAllTracks }",
            "removeAllTracks",
            "import { setPreamp, setEqBand } from \"./equalizer\";",
            "{ setPreamp, setEqBand }",
            "{ setPreamp, setEqBand }",
            "setPreamp",
            "setEqBand",
            "import {\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n} from \"../types\";",
            "{\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n}",
            "{\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n}",
            "LoadStyle",
            "Thunk",
            "Track",
            "EqfPreset",
            "SkinData",
            "WindowId"
        ],
        "reference_api": [
            "promptForFileReferences",
            "loadFilesFromReferences",
            "dispatch"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "promptForFileReferences",
                "code": "f"
            },
            {
                "name": "loadFilesFromReferences",
                "code": "f"
            },
            {
                "name": "dispatch",
                "code": "f"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export function loadMedia(\n  e: React.DragEvent<HTMLDivElement>,\n  loadStyle: LoadStyle = LOAD_STYLE.NONE,\n  atIndex = 0\n): Thunk",
        "start_line": "198",
        "end_line": "215",
        "file_path": "packages/webamp/js/actionCreators/files.ts",
        "docstring": "This function, loadMedia, handles the loading of media files when a drag event occurs.\\nIt extracts files from the drag event and returns an asynchronous function that dispatches actions based on the presence of a handleTrackDropEvent function.\\nIf handleTrackDropEvent is available, it processes the event and dispatches an action to load the media files with the provided style and index.\\nIf not, it dispatches an action to load files directly from the references.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "afa715d20f88",
        "ground_truth": "export function loadMedia(\n  e: React.DragEvent<HTMLDivElement>,\n  loadStyle: LoadStyle = LOAD_STYLE.NONE,\n  atIndex = 0\n): Thunk {\n  const { files } = e.dataTransfer;\n  return async (dispatch, getState, { handleTrackDropEvent }) => {\n    if (handleTrackDropEvent) {\n      const tracks = await handleTrackDropEvent(e);\n       if (tracks != null) {\n        dispatch(loadMediaFiles(tracks, loadStyle, atIndex));\n        return;\n      }\n    }\n    dispatch(loadFilesFromReferences(files, loadStyle, atIndex));\n  };\n}",
        "import_statements": [
            "import { parser, creator } from \"winamp-eqf\";",
            "{ parser, creator }",
            "{ parser, creator }",
            "parser",
            "creator",
            "import { BANDS, LOAD_STYLE } from \"../constants\";",
            "{ BANDS, LOAD_STYLE }",
            "{ BANDS, LOAD_STYLE }",
            "BANDS",
            "LOAD_STYLE",
            "import * as Utils from \"../utils\";",
            "* as Utils",
            "* as Utils",
            "import {\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n} from \"../fileUtils\";",
            "{\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n}",
            "{\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n}",
            "promptForFileReferences",
            "genArrayBufferFromFileReference",
            "genMediaDuration",
            "genMediaTags",
            "import skinParser from \"../skinParser\";",
            "skinParser",
            "import {\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n} from \"../selectors\";",
            "{\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n}",
            "{\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n}",
            "getTracks",
            "getUserTracks",
            "getTrackIsVisibleFunction",
            "getEqfData",
            "getPlaylistURL",
            "import {\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n} from \"../actionTypes\";",
            "{\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n}",
            "{\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n}",
            "ADD_TRACK_FROM_URL",
            "PLAY_TRACK",
            "BUFFER_TRACK",
            "SET_MEDIA_TAGS",
            "SET_MEDIA_DURATION",
            "MEDIA_TAG_REQUEST_INITIALIZED",
            "MEDIA_TAG_REQUEST_FAILED",
            "SET_SKIN_DATA",
            "LOADED",
            "LOADING",
            "import LoadQueue from \"../loadQueue\";",
            "LoadQueue",
            "import { removeAllTracks } from \"./playlist\";",
            "{ removeAllTracks }",
            "{ removeAllTracks }",
            "removeAllTracks",
            "import { setPreamp, setEqBand } from \"./equalizer\";",
            "{ setPreamp, setEqBand }",
            "{ setPreamp, setEqBand }",
            "setPreamp",
            "setEqBand",
            "import {\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n} from \"../types\";",
            "{\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n}",
            "{\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n}",
            "LoadStyle",
            "Thunk",
            "Track",
            "EqfPreset",
            "SkinData",
            "WindowId"
        ],
        "reference_api": [
            "handleTrackDropEvent",
            "loadFilesFromReferences",
            "loadMediaFiles",
            "dispatch"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "handleTrackDropEvent",
                "code": "f"
            },
            {
                "name": "loadFilesFromReferences",
                "code": "f"
            },
            {
                "name": "loadMediaFiles",
                "code": "f"
            },
            {
                "name": "dispatch",
                "code": "f"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export function fetchMediaTags(file: string | Blob, id: number): Thunk {\n  return async (dispatch, getState, { requireMusicMetadata }) =>",
        "start_line": "317",
        "end_line": "347",
        "file_path": "packages/webamp/js/actionCreators/files.ts",
        "docstring": "This function, fetchMediaTags, asynchronously fetches media tags for a given file or Blob using a thunk.\\nIt dispatches an action to indicate the request has started, retrieves metadata, extracts relevant information such as artist, title, album, and album art, and then dispatches an action to set these media tags.\\nIf an error occurs, it dispatches a failure action.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0faea0aa350c",
        "ground_truth": "export function fetchMediaTags(file: string | Blob, id: number): Thunk {\n  return async (dispatch, getState, { requireMusicMetadata }) => {\n    dispatch({ type: MEDIA_TAG_REQUEST_INITIALIZED, id });\n     try {\n      const metadata = await genMediaTags(file, await requireMusicMetadata());\n      // There's more data here, but we don't have a use for it yet:\n      const { artist, title, album, picture } = metadata.common;\n      const { numberOfChannels, bitrate, sampleRate } = metadata.format;\n      let albumArtUrl = null;\n      if (picture && picture.length >= 1) {\n        const byteArray = new Uint8Array(picture[0].data);\n        const blob = new Blob([byteArray], { type: picture[0].format });\n        albumArtUrl = URL.createObjectURL(blob);\n      }\n      dispatch({\n        type: SET_MEDIA_TAGS,\n        artist: artist ? artist : \"\",\n        title: title ? title : \"\",\n        album,\n        albumArtUrl,\n        numberOfChannels,\n        bitrate,\n        sampleRate,\n        id,\n      });\n    } catch (e) {\n      dispatch({ type: MEDIA_TAG_REQUEST_FAILED, id });\n    }\n  };\n}",
        "import_statements": [
            "import { parser, creator } from \"winamp-eqf\";",
            "{ parser, creator }",
            "{ parser, creator }",
            "parser",
            "creator",
            "import { BANDS, LOAD_STYLE } from \"../constants\";",
            "{ BANDS, LOAD_STYLE }",
            "{ BANDS, LOAD_STYLE }",
            "BANDS",
            "LOAD_STYLE",
            "import * as Utils from \"../utils\";",
            "* as Utils",
            "* as Utils",
            "import {\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n} from \"../fileUtils\";",
            "{\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n}",
            "{\n  promptForFileReferences,\n  genArrayBufferFromFileReference,\n  genMediaDuration,\n  genMediaTags,\n}",
            "promptForFileReferences",
            "genArrayBufferFromFileReference",
            "genMediaDuration",
            "genMediaTags",
            "import skinParser from \"../skinParser\";",
            "skinParser",
            "import {\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n} from \"../selectors\";",
            "{\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n}",
            "{\n  getTracks,\n  getUserTracks,\n  getTrackIsVisibleFunction,\n  getEqfData,\n  getPlaylistURL,\n}",
            "getTracks",
            "getUserTracks",
            "getTrackIsVisibleFunction",
            "getEqfData",
            "getPlaylistURL",
            "import {\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n} from \"../actionTypes\";",
            "{\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n}",
            "{\n  ADD_TRACK_FROM_URL,\n  PLAY_TRACK,\n  BUFFER_TRACK,\n  SET_MEDIA_TAGS,\n  SET_MEDIA_DURATION,\n  MEDIA_TAG_REQUEST_INITIALIZED,\n  MEDIA_TAG_REQUEST_FAILED,\n  SET_SKIN_DATA,\n  LOADED,\n  LOADING,\n}",
            "ADD_TRACK_FROM_URL",
            "PLAY_TRACK",
            "BUFFER_TRACK",
            "SET_MEDIA_TAGS",
            "SET_MEDIA_DURATION",
            "MEDIA_TAG_REQUEST_INITIALIZED",
            "MEDIA_TAG_REQUEST_FAILED",
            "SET_SKIN_DATA",
            "LOADED",
            "LOADING",
            "import LoadQueue from \"../loadQueue\";",
            "LoadQueue",
            "import { removeAllTracks } from \"./playlist\";",
            "{ removeAllTracks }",
            "{ removeAllTracks }",
            "removeAllTracks",
            "import { setPreamp, setEqBand } from \"./equalizer\";",
            "{ setPreamp, setEqBand }",
            "{ setPreamp, setEqBand }",
            "setPreamp",
            "setEqBand",
            "import {\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n} from \"../types\";",
            "{\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n}",
            "{\n  LoadStyle,\n  Thunk,\n  Track,\n  EqfPreset,\n  SkinData,\n  WindowId,\n}",
            "LoadStyle",
            "Thunk",
            "Track",
            "EqfPreset",
            "SkinData",
            "WindowId"
        ],
        "reference_api": [
            "URL.createObjectURL",
            "genMediaTags",
            "requireMusicMetadata",
            "dispatch"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "URL.createObjectURL",
                "code": "f"
            },
            {
                "name": "genMediaTags",
                "code": "f"
            },
            {
                "name": "requireMusicMetadata",
                "code": "f"
            },
            {
                "name": "dispatch",
                "code": "f"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export function playTrack(id: number): Thunk {",
        "start_line": "22",
        "end_line": "32",
        "file_path": "packages/webamp/js/actionCreators/media.ts",
        "docstring": "This function, playTrack, is a Thunk that plays a track based on its ID.\\nIt first retrieves the current state and checks if the media status is stopped.\\nIf the media is stopped, it dispatches a BUFFER_TRACK action with the track ID.\\nOtherwise, it dispatches a PLAY_TRACK action with the track ID.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "02174213852f",
        "ground_truth": "export function playTrack(id: number): Thunk {\n  return (dispatch, getState) => {\n    const state = getState();\n    const isStopped = Selectors.getMediaStatus(state) === MEDIA_STATUS.STOPPED;\n    if (isStopped) {\n      dispatch({ type: BUFFER_TRACK, id });\n    } else {\n      dispatch({ type: PLAY_TRACK, id });\n    }\n  };\n}",
        "import_statements": [
            "import { clamp } from \"../utils\";",
            "{ clamp }",
            "{ clamp }",
            "clamp",
            "import {\n  SEEK_TO_PERCENT_COMPLETE,\n  SET_BALANCE,\n  SET_VOLUME,\n  STOP,\n  TOGGLE_REPEAT,\n  TOGGLE_SHUFFLE,\n  PLAY,\n  PAUSE,\n  PLAY_TRACK,\n  TOGGLE_TIME_MODE,\n  BUFFER_TRACK,\n  IS_STOPPED,\n} from \"../actionTypes\";",
            "{\n  SEEK_TO_PERCENT_COMPLETE,\n  SET_BALANCE,\n  SET_VOLUME,\n  STOP,\n  TOGGLE_REPEAT,\n  TOGGLE_SHUFFLE,\n  PLAY,\n  PAUSE,\n  PLAY_TRACK,\n  TOGGLE_TIME_MODE,\n  BUFFER_TRACK,\n  IS_STOPPED,\n}",
            "{\n  SEEK_TO_PERCENT_COMPLETE,\n  SET_BALANCE,\n  SET_VOLUME,\n  STOP,\n  TOGGLE_REPEAT,\n  TOGGLE_SHUFFLE,\n  PLAY,\n  PAUSE,\n  PLAY_TRACK,\n  TOGGLE_TIME_MODE,\n  BUFFER_TRACK,\n  IS_STOPPED,\n}",
            "SEEK_TO_PERCENT_COMPLETE",
            "SET_BALANCE",
            "SET_VOLUME",
            "STOP",
            "TOGGLE_REPEAT",
            "TOGGLE_SHUFFLE",
            "PLAY",
            "PAUSE",
            "PLAY_TRACK",
            "TOGGLE_TIME_MODE",
            "BUFFER_TRACK",
            "IS_STOPPED",
            "import { MEDIA_STATUS } from \"../constants\";",
            "{ MEDIA_STATUS }",
            "{ MEDIA_STATUS }",
            "MEDIA_STATUS",
            "import { openMediaFileDialog } from \"./\";",
            "{ openMediaFileDialog }",
            "{ openMediaFileDialog }",
            "openMediaFileDialog",
            "import { GetState, Dispatch, Thunk, Action } from \"../types\";",
            "{ GetState, Dispatch, Thunk, Action }",
            "{ GetState, Dispatch, Thunk, Action }",
            "GetState",
            "Dispatch",
            "Thunk",
            "Action",
            "import * as Selectors from \"../selectors\";",
            "* as Selectors",
            "* as Selectors"
        ],
        "reference_api": [
            "Selectors.getMediaStatus",
            "dispatch",
            "getState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "Selectors.getMediaStatus",
                "code": "d"
            },
            {
                "name": "dispatch",
                "code": "d"
            },
            {
                "name": "getState",
                "code": "d"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export function scrollVolume(e: React.WheelEvent<HTMLDivElement>): Thunk",
        "start_line": "125",
        "end_line": "132",
        "file_path": "packages/webamp/js/actionCreators/media.ts",
        "docstring": "This function, scrollVolume, handles the volume adjustment based on the scroll wheel event.\\nIt prevents the default scrolling behavior, retrieves the current volume from the state, and dispatches an action to set the new volume by adding the scroll delta value to the current volume.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "643b829015d2",
        "ground_truth": "export function scrollVolume(e: React.WheelEvent<HTMLDivElement>): Thunk {\n  e.preventDefault();\n  return (dispatch, getState) => {\n    const currentVolume = getState().media.volume;\n    // Using pixels as percentage difference here is a bit arbirary, but... oh well.\n    return dispatch(setVolume(currentVolume + e.deltaY));\n  };\n}",
        "import_statements": [
            "import { clamp } from \"../utils\";",
            "{ clamp }",
            "{ clamp }",
            "clamp",
            "import {\n  SEEK_TO_PERCENT_COMPLETE,\n  SET_BALANCE,\n  SET_VOLUME,\n  STOP,\n  TOGGLE_REPEAT,\n  TOGGLE_SHUFFLE,\n  PLAY,\n  PAUSE,\n  PLAY_TRACK,\n  TOGGLE_TIME_MODE,\n  BUFFER_TRACK,\n  IS_STOPPED,\n} from \"../actionTypes\";",
            "{\n  SEEK_TO_PERCENT_COMPLETE,\n  SET_BALANCE,\n  SET_VOLUME,\n  STOP,\n  TOGGLE_REPEAT,\n  TOGGLE_SHUFFLE,\n  PLAY,\n  PAUSE,\n  PLAY_TRACK,\n  TOGGLE_TIME_MODE,\n  BUFFER_TRACK,\n  IS_STOPPED,\n}",
            "{\n  SEEK_TO_PERCENT_COMPLETE,\n  SET_BALANCE,\n  SET_VOLUME,\n  STOP,\n  TOGGLE_REPEAT,\n  TOGGLE_SHUFFLE,\n  PLAY,\n  PAUSE,\n  PLAY_TRACK,\n  TOGGLE_TIME_MODE,\n  BUFFER_TRACK,\n  IS_STOPPED,\n}",
            "SEEK_TO_PERCENT_COMPLETE",
            "SET_BALANCE",
            "SET_VOLUME",
            "STOP",
            "TOGGLE_REPEAT",
            "TOGGLE_SHUFFLE",
            "PLAY",
            "PAUSE",
            "PLAY_TRACK",
            "TOGGLE_TIME_MODE",
            "BUFFER_TRACK",
            "IS_STOPPED",
            "import { MEDIA_STATUS } from \"../constants\";",
            "{ MEDIA_STATUS }",
            "{ MEDIA_STATUS }",
            "MEDIA_STATUS",
            "import { openMediaFileDialog } from \"./\";",
            "{ openMediaFileDialog }",
            "{ openMediaFileDialog }",
            "openMediaFileDialog",
            "import { GetState, Dispatch, Thunk, Action } from \"../types\";",
            "{ GetState, Dispatch, Thunk, Action }",
            "{ GetState, Dispatch, Thunk, Action }",
            "GetState",
            "Dispatch",
            "Thunk",
            "Action",
            "import * as Selectors from \"../selectors\";",
            "* as Selectors",
            "* as Selectors"
        ],
        "reference_api": [
            "setVolume",
            "dispatch",
            "getState"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "setVolume",
                "code": "d"
            },
            {
                "name": "dispatch",
                "code": "d"
            },
            {
                "name": "getState",
                "code": "d"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "function FullScreen(props: Props)",
        "start_line": "23",
        "end_line": "57",
        "file_path": "packages/webamp/js/components/Fullscreen.tsx",
        "docstring": "This function component, FullScreen, manages fullscreen behavior for its child elements.\\nIt uses refs to track the target element and monitors fullscreen changes using an effect that adds and removes an event listener for fullscreen changes.\\nA layout effect checks the fullscreen status and toggles fullscreen mode based on the enabled prop.\\nThe component renders a div that takes full height and width when enabled, containing any child elements passed as props.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "d97c127090ce",
        "ground_truth": "function FullScreen(props: Props) {\n  const { onChange, enabled } = props;\n  const ref = useRef<HTMLDivElement | null>(null);\n   useEffect(() => {\n    function detectFullScreen() {\n      if (onChange) {\n        onChange(fscreen.fullscreenElement === ref.current);\n      }\n    }\n    fscreen.addEventListener(\"fullscreenchange\", detectFullScreen);\n    return () => {\n      fscreen.removeEventListener(\"fullscreenchange\", detectFullScreen);\n    };\n  }, [onChange]);\n   // This must run in response to a click event, so we'll use useLayoutEffect just in case.\n  useLayoutEffect(() => {\n    const isEnabled = fscreen.fullscreenElement === ref.current;\n    if (isEnabled && !enabled) {\n      leaveFullScreen();\n    } else if (!isEnabled && enabled && ref.current != null) {\n      enterFullScreen(ref.current);\n    }\n  }, [enabled]);\n   return (\n    <div\n      ref={ref}\n      style={props.enabled ? { height: \"100%\", width: \"100%\" } : undefined}\n    >\n      {props.children}\n    </div>\n  );\n}",
        "import_statements": [
            "import { ReactNode, useRef, useLayoutEffect, useEffect } from \"react\";",
            "{ ReactNode, useRef, useLayoutEffect, useEffect }",
            "{ ReactNode, useRef, useLayoutEffect, useEffect }",
            "ReactNode",
            "useRef",
            "useLayoutEffect",
            "useEffect",
            "import fscreen from \"fscreen\";",
            "fscreen"
        ],
        "reference_api": [
            "enterFullScreen",
            "leaveFullScreen"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "enterFullScreen",
                "code": "u"
            },
            {
                "name": "leaveFullScreen",
                "code": "u"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "const getClipPaths = createSelector(Selectors.getSkinRegion, (skinRegion) =>",
        "start_line": "130",
        "end_line": "139",
        "file_path": "packages/webamp/js/components/Skin.tsx",
        "docstring": "This function, getClipPaths, is a selector that processes skin region data.\\nIt creates an object to store clip paths, iterates over the skin regions, and maps region names to IDs if polygons are present.\\nThe resulting object containing these clip paths is then returned.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "d333738337a8",
        "ground_truth": "const getClipPaths = createSelector(Selectors.getSkinRegion, (skinRegion) => {\n  const clipPaths: { [id: string]: string[] } = {};\n  for (const [regionName, polygons] of Object.entries(skinRegion)) {\n    if (polygons) {\n      const id = mapRegionNamesToIds[regionName];\n      clipPaths[id] = polygons;\n    }\n  }\n  return clipPaths;\n});",
        "import_statements": [
            "import { LETTERS } from \"../constants\";",
            "{ LETTERS }",
            "{ LETTERS }",
            "LETTERS",
            "import { imageSelectors, cursorSelectors } from \"../skinSelectors\";",
            "{ imageSelectors, cursorSelectors }",
            "{ imageSelectors, cursorSelectors }",
            "imageSelectors",
            "cursorSelectors",
            "import { useTypedSelector } from \"../hooks\";",
            "{ useTypedSelector }",
            "{ useTypedSelector }",
            "useTypedSelector",
            "import * as Selectors from \"../selectors\";",
            "* as Selectors",
            "* as Selectors",
            "import { SkinImages } from \"../types\";",
            "{ SkinImages }",
            "{ SkinImages }",
            "SkinImages",
            "import { createSelector } from \"reselect\";",
            "{ createSelector }",
            "{ createSelector }",
            "createSelector",
            "import Css from \"./Css\";",
            "Css",
            "import ClipPaths from \"./ClipPaths\";",
            "ClipPaths",
            "import { convertAniBinaryToCSS } from \"ani-cursor\";",
            "{ convertAniBinaryToCSS }",
            "{ convertAniBinaryToCSS }",
            "convertAniBinaryToCSS"
        ],
        "reference_api": [
            "Object.entries"
        ],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "function octaveBucketsForBufferLength(bufferLength: number): number[]",
        "start_line": "13",
        "end_line": "32",
        "file_path": "packages/webamp/js/components/useBarVisualizer.ts",
        "docstring": "This function, octaveBucketsForBufferLength, generates an array of octave bucket values based on the given buffer length.\\nIt initializes the buckets, calculates frequency steps from minHz to maxHz, and maps these frequencies to indices in the buffer.\\nFinally, it returns the array of octave bucket indices.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "6d30b280ffbe",
        "ground_truth": "function octaveBucketsForBufferLength(bufferLength: number): number[] {\n  const octaveBuckets = new Array(NUM_BARS).fill(0);\n  const minHz = 200;\n  const maxHz = 22050;\n  const octaveStep = Math.pow(maxHz / minHz, 1 / NUM_BARS);\n   octaveBuckets[0] = 0;\n  octaveBuckets[1] = minHz;\n  for (let i = 2; i < NUM_BARS - 1; i++) {\n    octaveBuckets[i] = octaveBuckets[i - 1] * octaveStep;\n  }\n  octaveBuckets[NUM_BARS - 1] = maxHz;\n   for (let i = 0; i < NUM_BARS; i++) {\n    const octaveIdx = Math.floor((octaveBuckets[i] / maxHz) * bufferLength);\n    octaveBuckets[i] = octaveIdx;\n  }\n   return octaveBuckets;\n}",
        "import_statements": [
            "import { useMemo, useCallback, useState } from \"react\";",
            "{ useMemo, useCallback, useState }",
            "{ useMemo, useCallback, useState }",
            "useMemo",
            "useCallback",
            "useState",
            "import * as Selectors from \"../selectors\";",
            "* as Selectors",
            "* as Selectors",
            "import { useTypedSelector } from \"../hooks\";",
            "{ useTypedSelector }",
            "{ useTypedSelector }",
            "useTypedSelector"
        ],
        "reference_api": [
            "Math.pow",
            "new Array(NUM_BARS).fill",
            "Math.floor"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "new Array(NUM_BARS).fill",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "function EqGraph()",
        "start_line": "12",
        "end_line": "49",
        "file_path": "packages/webamp/js/components/EqualizerWindow/EqGraph.tsx",
        "docstring": "This function, EqGraph, renders an equalizer graph on a canvas element.\\nIt retrieves slider values and an image using selectors, and manages the canvas element and its context using state and memoization.\\nThe function uses a layout effect to draw the equalizer line when dependencies change, ensuring the canvas context, node, image, and color pattern are available.\\nThe rendered canvas has specified dimensions and is referenced for future updates.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "e7c399fb0db4",
        "ground_truth": "function EqGraph() {\n  const sliders = useTypedSelector(Selectors.getSliders);\n   const preampLineImagePromise = useTypedSelector(Selectors.getPreampLineImage);\n  const preampLineImage = usePromiseValueOrNull(preampLineImagePromise);\n   const [canvasNode, setCanvasNode] = useState<HTMLCanvasElement | null>(null);\n   const canvasCtx = useMemo(\n    () => canvasNode?.getContext(\"2d\") ?? null,\n    [canvasNode]\n  );\n  const colorPattern = useColorPattern(canvasCtx);\n   useLayoutEffect(() => {\n    if (\n      canvasCtx == null ||\n      canvasNode == null ||\n      preampLineImage == null ||\n      colorPattern == null\n    ) {\n      return;\n    }\n    const width = Number(canvasNode.width);\n    const height = Number(canvasNode.height);\n    canvasCtx.clearRect(0, 0, width, height);\n    drawEqLine({ colorPattern, sliders, canvasCtx, preampLineImage });\n  }, [canvasCtx, canvasNode, colorPattern, preampLineImage, sliders]);\n   return (\n    <canvas\n      id=\"eqGraph\"\n      ref={setCanvasNode}\n      width={GRAPH_WIDTH}\n      height={GRAPH_HEIGHT}\n    />\n  );\n}",
        "import_statements": [
            "import { useState, useMemo, useLayoutEffect } from \"react\";",
            "{ useState, useMemo, useLayoutEffect }",
            "{ useState, useMemo, useLayoutEffect }",
            "useState",
            "useMemo",
            "useLayoutEffect",
            "import { percentToRange, clamp } from \"../../utils\";",
            "{ percentToRange, clamp }",
            "{ percentToRange, clamp }",
            "percentToRange",
            "clamp",
            "import { BANDS } from \"../../constants\";",
            "{ BANDS }",
            "{ BANDS }",
            "BANDS",
            "import spline from \"./spline\";",
            "spline",
            "import * as Selectors from \"../../selectors\";",
            "* as Selectors",
            "* as Selectors",
            "import { usePromiseValueOrNull, useTypedSelector } from \"../../hooks\";",
            "{ usePromiseValueOrNull, useTypedSelector }",
            "{ usePromiseValueOrNull, useTypedSelector }",
            "usePromiseValueOrNull",
            "useTypedSelector",
            "import { Slider } from \"../../types\";",
            "{ Slider }",
            "{ Slider }",
            "Slider"
        ],
        "reference_api": [
            "canvasCtx.clearRect",
            "drawEqLine",
            "Number"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "canvasCtx.clearRect",
                "code": ")"
            },
            {
                "name": "drawEqLine",
                "code": ")"
            },
            {
                "name": "Number",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "const ClutterBar = memo(() =>",
        "start_line": "22",
        "end_line": "46",
        "file_path": "packages/webamp/js/components/MainWindow/ClutterBar.tsx",
        "docstring": "This memoized functional component, ClutterBar, renders a clutter bar with several buttons and a context menu.\\nIt uses action creators to handle mouse events for setting focus and mouse up actions.\\nThe state of the 'doubled' mode is retrieved from a selector and used to conditionally apply a CSS class to one of the buttons.\\nThe component includes mouse event handlers to toggle the 'doubled' mode.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b858f410c3f3",
        "ground_truth": "const ClutterBar = memo(() => {\n  const handleMouseDown = useActionCreator(setFocusDouble);\n  const handleMouseUp = useActionCreator(mouseUp);\n  const doubled = useTypedSelector(Selectors.getDoubled);\n  return (\n    <div id=\"clutter-bar\">\n      <ContextMenuTarget bottom renderMenu={() => <OptionsContextMenu />}>\n        <div id=\"button-o\" />\n      </ContextMenuTarget>\n      <div id=\"button-a\" />\n      <div id=\"button-i\" />\n      <div\n        title={\"Toggle Doublesize Mode\"}\n        id=\"button-d\"\n        className={classnames({ selected: doubled })}\n        onPointerUp={handleMouseUp}\n        onPointerDown={(e) => {\n          e.preventDefault();\n          handleMouseDown();\n        }}\n      />\n      <div id=\"button-v\" />\n    </div>\n  );\n});",
        "import_statements": [
            "import { memo } from \"react\";",
            "{ memo }",
            "{ memo }",
            "memo",
            "import classnames from \"classnames\";",
            "classnames",
            "import * as Actions from \"../../actionCreators\";",
            "* as Actions",
            "* as Actions",
            "import { Action, Thunk } from \"../../types\";",
            "{ Action, Thunk }",
            "{ Action, Thunk }",
            "Action",
            "Thunk",
            "import OptionsContextMenu from \"../OptionsContextMenu\";",
            "OptionsContextMenu",
            "import ContextMenuTarget from \"../ContextMenuTarget\";",
            "ContextMenuTarget",
            "import { useActionCreator, useTypedSelector } from \"../../hooks\";",
            "{ useActionCreator, useTypedSelector }",
            "{ useActionCreator, useTypedSelector }",
            "useActionCreator",
            "useTypedSelector",
            "import * as Selectors from \"../../selectors\";",
            "* as Selectors",
            "* as Selectors"
        ],
        "reference_api": [
            "useActionCreator",
            "useTypedSelector"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "useActionCreator",
                "code": "d"
            },
            {
                "name": "useTypedSelector",
                "code": "d"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "const PlaylistToggleButton = memo(() =>",
        "start_line": "13",
        "end_line": "24",
        "file_path": "packages/webamp/js/components/MainWindow/PlaylistToggleButton.tsx",
        "docstring": "This function, PlaylistToggleButton, is a memoized component that toggles the playlist editor.\\nIt uses a selector to determine if the playlist is currently open and an action creator to handle the toggle action.\\nThe component returns a button with an ID, dynamic class name based on the selected state, an onClick handler, and a title.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "5946b13d68ba",
        "ground_truth": "const PlaylistToggleButton = memo(() => {\n  const selected = useTypedSelector(Selectors.getWindowOpen)(\"playlist\");\n  const handleClick = useActionCreator(togglePlaylist);\n  return (\n    <WinampButton\n      id=\"playlist-button\"\n      className={classnames({ selected })}\n      onClick={handleClick}\n      title=\"Toggle Playlist Editor\"\n    />\n  );\n});",
        "import_statements": [
            "import { memo } from \"react\";",
            "{ memo }",
            "{ memo }",
            "memo",
            "import classnames from \"classnames\";",
            "classnames",
            "import * as Selectors from \"../../selectors\";",
            "* as Selectors",
            "* as Selectors",
            "import * as Actions from \"../../actionCreators\";",
            "* as Actions",
            "* as Actions",
            "import { useTypedSelector, useActionCreator } from \"../../hooks\";",
            "{ useTypedSelector, useActionCreator }",
            "{ useTypedSelector, useActionCreator }",
            "useTypedSelector",
            "useActionCreator",
            "import WinampButton from \"../WinampButton\";",
            "WinampButton"
        ],
        "reference_api": [
            "useActionCreator",
            "useTypedSelector(Selectors.getWindowOpen)",
            "useTypedSelector"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "useActionCreator",
                "code": ")"
            },
            {
                "name": "useTypedSelector(Selectors.getWindowOpen)",
                "code": ")"
            },
            {
                "name": "useTypedSelector",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "const Desktop = React.memo(({ children }: Props) =>",
        "start_line": "9",
        "end_line": "21",
        "file_path": "packages/webamp/js/components/MilkdropWindow/Desktop.tsx",
        "docstring": "This React component, Desktop, creates a div element and appends it to the document body with a class name 'webamp-desktop'.\\nIt uses React hooks to manage the lifecycle of this div, ensuring it is added when the component mounts and removed when it unmounts.\\nThe children of the Desktop component are rendered inside this div using a portal.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "39ecf0db7a99",
        "ground_truth": "const Desktop = React.memo(({ children }: Props) => {\n  const [desktopNode] = React.useState(() => document.createElement(\"div\"));\n   React.useEffect(() => {\n    desktopNode.classList.add(\"webamp-desktop\");\n    document.body.appendChild(desktopNode);\n    return () => {\n      document.body.removeChild(desktopNode);\n    };\n  }, [desktopNode]);\n   return ReactDOM.createPortal(children, desktopNode);\n});",
        "import_statements": [
            "import * as React from \"react\";",
            "* as React",
            "* as React",
            "import { ReactNode } from \"react\";",
            "{ ReactNode }",
            "{ ReactNode }",
            "ReactNode",
            "import ReactDOM from \"react-dom\";",
            "ReactDOM"
        ],
        "reference_api": [
            "document.body.removeChild"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "document.body.removeChild",
                "code": "{"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export default function PlaylistScrollBar()",
        "start_line": "17",
        "end_line": "42",
        "file_path": "packages/webamp/js/components/PlaylistWindow/PlaylistScrollBar.tsx",
        "docstring": "This function, PlaylistScrollBar, renders a custom vertical scrollbar for a playlist.\\nIt retrieves the playlist height, scroll position, and visibility status of all tracks using selectors.\\nIt also uses an action creator to update the scroll position.\\nThe scrollbar is disabled if all tracks are visible.\\nThe component includes a VerticalSlider with a custom handle and updates the scroll position based on user input.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "41be320578a4",
        "ground_truth": "export default function PlaylistScrollBar() {\n  const getWindowPixelSize = useTypedSelector(Selectors.getWindowPixelSize);\n  const playlistHeight = getWindowPixelSize(WINDOWS.PLAYLIST).height;\n  const playlistScrollPosition = useTypedSelector(\n    Selectors.getPlaylistScrollPosition\n  );\n  const allTracksAreVisible = useTypedSelector(\n    Selectors.getAllTracksAreVisible\n  );\n  const setPlaylistScrollPosition = useActionCreator(\n    Actions.setPlaylistScrollPosition\n  );\n  return (\n    <div className=\"playlist-scrollbar\" style={{ marginLeft: 5 }}>\n      <VerticalSlider\n        height={playlistHeight - 58}\n        handleHeight={HANDLE_HEIGHT}\n        width={8}\n        value={playlistScrollPosition / 100}\n        onChange={(val) => setPlaylistScrollPosition(val * 100)}\n        handle={<Handle />}\n        disabled={allTracksAreVisible}\n      />\n    </div>\n  );\n}",
        "import_statements": [
            "import VerticalSlider from \"../VerticalSlider\";",
            "VerticalSlider",
            "import * as Selectors from \"../../selectors\";",
            "* as Selectors",
            "* as Selectors",
            "import * as Actions from \"../../actionCreators\";",
            "* as Actions",
            "* as Actions",
            "import { useTypedSelector, useActionCreator } from \"../../hooks\";",
            "{ useTypedSelector, useActionCreator }",
            "{ useTypedSelector, useActionCreator }",
            "useTypedSelector",
            "useActionCreator",
            "import { WINDOWS } from \"../../constants\";",
            "{ WINDOWS }",
            "{ WINDOWS }",
            "WINDOWS"
        ],
        "reference_api": [
            "setPlaylistScrollPosition"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "setPlaylistScrollPosition",
                "code": "v"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export function genMediaDuration(url: string): Promise<number>",
        "start_line": "29",
        "end_line": "51",
        "file_path": "packages/webamp/js/fileUtils.ts",
        "docstring": "This function, genMediaDuration, takes a media file URL and returns a Promise that resolves with the duration of the media file.\\nIt creates an audio element, sets its crossOrigin attribute, and attaches event listeners for duration change and error events.\\nWhen the duration changes, the promise is resolved with the audio duration, and the event listener is removed.\\nIf an error occurs, the promise is rejected with the error.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "fccf51432007",
        "ground_truth": "export function genMediaDuration(url: string): Promise<number> {\n  invariant(\n    typeof url === \"string\",\n    \"Attempted to get the duration of media file without passing a url\"\n  );\n  return new Promise((resolve, reject) => {\n    // TODO: Does this actually stop downloading the file once it's\n    // got the duration?\n    const audio = document.createElement(\"audio\");\n    audio.crossOrigin = \"anonymous\";\n    const durationChange = () => {\n      resolve(audio.duration);\n      audio.removeEventListener(\"durationchange\", durationChange);\n      audio.src = \"\";\n      // TODO: Not sure if this really gets cleaned up.\n    };\n    audio.addEventListener(\"durationchange\", durationChange);\n    audio.addEventListener(\"error\", (e) => {\n      reject(e);\n    });\n    audio.src = url;\n  });\n}",
        "import_statements": [
            "import invariant from \"invariant\";",
            "invariant",
            "import { IMusicMetadataBrowserApi } from \"./types\";",
            "{ IMusicMetadataBrowserApi }",
            "{ IMusicMetadataBrowserApi }",
            "IMusicMetadataBrowserApi",
            "import { IAudioMetadata } from \"music-metadata-browser\";",
            "{ IAudioMetadata }",
            "{ IAudioMetadata }",
            "IAudioMetadata",
            "import * as Utils from \"./utils\";",
            "* as Utils",
            "* as Utils"
        ],
        "reference_api": [
            "reject"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "reject",
                "code": "r"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export async function genArrayBufferFromFileReference(\n  fileReference: File\n): Promise<any>",
        "start_line": "53",
        "end_line": "68",
        "file_path": "packages/webamp/js/fileUtils.ts",
        "docstring": "This function, genArrayBufferFromFileReference, takes a file reference and returns a Promise that resolves to an ArrayBuffer of the file's contents.\\nIt ensures the file reference is not null and uses a FileReader to read the file as an ArrayBuffer.\\nThe Promise resolves with the result on successful read and rejects if an error occurs.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8055da9c9425",
        "ground_truth": "export async function genArrayBufferFromFileReference(\n  fileReference: File\n): Promise<any> {\n  invariant(\n    fileReference != null,\n    \"Attempt to get an ArrayBuffer without assigning a fileReference\"\n  );\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      resolve(reader.result as ArrayBuffer);\n    };\n    reader.onerror = reject;\n    reader.readAsArrayBuffer(fileReference);\n  });\n}",
        "import_statements": [
            "import invariant from \"invariant\";",
            "invariant",
            "import { IMusicMetadataBrowserApi } from \"./types\";",
            "{ IMusicMetadataBrowserApi }",
            "{ IMusicMetadataBrowserApi }",
            "IMusicMetadataBrowserApi",
            "import { IAudioMetadata } from \"music-metadata-browser\";",
            "{ IAudioMetadata }",
            "{ IAudioMetadata }",
            "IAudioMetadata",
            "import * as Utils from \"./utils\";",
            "* as Utils",
            "* as Utils"
        ],
        "reference_api": [
            "resolve"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "resolve",
                "code": "r"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export function usePromiseValueOrNull<T>(propValue: Promise<T>): T | null",
        "start_line": "27",
        "end_line": "44",
        "file_path": "packages/webamp/js/hooks.ts",
        "docstring": "This custom hook, usePromiseValueOrNull, takes a promise as an input and returns its resolved value or null.\\nIt manages a state to store the resolved value and uses an effect to handle the promise resolution.\\nIf the component unmounts before the promise resolves, it ensures the state is not updated by setting a disposed flag.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b3dc12d7d309",
        "ground_truth": "export function usePromiseValueOrNull<T>(propValue: Promise<T>): T | null {\n  const [value, setValue] = useState<T | null>(null);\n  useEffect(() => {\n    let disposed = false;\n    propValue.then((resolvedValue) => {\n      if (disposed) {\n        return;\n      }\n      setValue(resolvedValue);\n    });\n     return () => {\n      disposed = true;\n    };\n  }, [propValue]);\n   return value;\n}",
        "import_statements": [
            "import {\n  useState,\n  useEffect,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n} from \"react\";",
            "{\n  useState,\n  useEffect,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n}",
            "{\n  useState,\n  useEffect,\n  useCallback,\n  useLayoutEffect,\n  useRef,\n}",
            "useState",
            "useEffect",
            "useCallback",
            "useLayoutEffect",
            "useRef",
            "import { useDispatch, useSelector } from \"react-redux\";",
            "{ useDispatch, useSelector }",
            "{ useDispatch, useSelector }",
            "useDispatch",
            "useSelector",
            "import * as Utils from \"./utils\";",
            "* as Utils",
            "* as Utils",
            "import { Action, Thunk, AppState } from \"./types\";",
            "{ Action, Thunk, AppState }",
            "{ Action, Thunk, AppState }",
            "Action",
            "Thunk",
            "AppState"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export default function regionParser(regionStr: string): RegionData",
        "start_line": "13",
        "end_line": "51",
        "file_path": "packages/webamp/js/regionParser.ts",
        "docstring": "This function, regionParser, takes a string representing region data in INI format and returns a RegionData object.\\nIt parses the input string into sections, processes each section to extract polygon points, and filters out invalid polygons.\\nThe resulting valid polygons are then stored in the output object under their respective sections.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7fc14a50df16",
        "ground_truth": "export default function regionParser(regionStr: string): RegionData {\n  const iniData = parseIni(regionStr);\n  const data: RegionData = {};\n  Object.keys(iniData).forEach((section) => {\n    const { numpoints, pointlist } = iniData[section];\n    if (!numpoints || !pointlist) {\n      return;\n    }\n    const pointCounts = numpoints.split(/\\s*,\\s*/).filter((val) => val !== \"\");\n    const points = pointPairs(\n      // points can be separated by spaces, or by commas\n      pointlist.split(/\\s*[, ]\\s*/).filter((val) => val !== \"\")\n    );\n    let pointIndex = 0;\n    const polygons = pointCounts.map((numStr) => {\n      const num = Number(numStr);\n      if (num < 3) {\n        // What use is a polygon with less than three sides?\n        pointIndex += num;\n        return null;\n      }\n      const polygon = points.slice(pointIndex, pointIndex + num).join(\" \");\n      if (!polygon.length) {\n        // It's possible that the skin author specified more polygons than provided points.\n        return null;\n      }\n      pointIndex += num;\n      return polygon;\n    });\n    const validPolygons = polygons.filter(\n      (polygon) => polygon != null\n    ) as string[];\n    if (validPolygons.length) {\n      data[section] = validPolygons;\n    }\n  });\n   return data;\n}",
        "import_statements": [
            "import { parseIni } from \"./utils\";",
            "{ parseIni }",
            "{ parseIni }",
            "parseIni"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": "export const getCurrentlyPlayingTrackIdIfLoaded = createSelector(",
        "start_line": "349",
        "end_line": "363",
        "file_path": "packages/webamp/js/selectors.ts",
        "docstring": "This selector function, getCurrentlyPlayingTrackIdIfLoaded, determines the ID of the currently playing track if it is fully loaded.\\nIt checks if media is playing, if there is a current track, and if the media tags of the current track are not in the initialized state.\\nIf any of these conditions are not met, it returns null.\\nOtherwise, it returns the ID of the current track.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "6e97ec2706cf",
        "ground_truth": "export const getCurrentlyPlayingTrackIdIfLoaded = createSelector(\n  getMediaIsPlaying,\n  getCurrentTrack,\n  (mediaIsPlaying, currentTrack) => {\n    if (\n      !mediaIsPlaying ||\n      !currentTrack ||\n      currentTrack.mediaTagsRequestStatus ===\n        MEDIA_TAG_REQUEST_STATUS.INITIALIZED\n    ) {\n      return null;\n    }\n    return currentTrack.id;\n  }\n);",
        "import_statements": [
            "import {\n  AppState,\n  PlaylistTrack,\n  WebampWindow,\n  WindowId,\n  WindowInfo,\n  LoadedURLTrack,\n  WindowPositions,\n  PlaylistStyle,\n  TransitionType,\n  MediaStatus,\n  TimeMode,\n  SkinImages,\n  Cursors,\n  SkinRegion,\n  GenLetterWidths,\n  MilkdropMessage,\n  DummyVizData,\n} from \"./types\";",
            "{\n  AppState,\n  PlaylistTrack,\n  WebampWindow,\n  WindowId,\n  WindowInfo,\n  LoadedURLTrack,\n  WindowPositions,\n  PlaylistStyle,\n  TransitionType,\n  MediaStatus,\n  TimeMode,\n  SkinImages,\n  Cursors,\n  SkinRegion,\n  GenLetterWidths,\n  MilkdropMessage,\n  DummyVizData,\n}",
            "{\n  AppState,\n  PlaylistTrack,\n  WebampWindow,\n  WindowId,\n  WindowInfo,\n  LoadedURLTrack,\n  WindowPositions,\n  PlaylistStyle,\n  TransitionType,\n  MediaStatus,\n  TimeMode,\n  SkinImages,\n  Cursors,\n  SkinRegion,\n  GenLetterWidths,\n  MilkdropMessage,\n  DummyVizData,\n}",
            "AppState",
            "PlaylistTrack",
            "WebampWindow",
            "WindowId",
            "WindowInfo",
            "LoadedURLTrack",
            "WindowPositions",
            "PlaylistStyle",
            "TransitionType",
            "MediaStatus",
            "TimeMode",
            "SkinImages",
            "Cursors",
            "SkinRegion",
            "GenLetterWidths",
            "MilkdropMessage",
            "DummyVizData",
            "import { createSelector, defaultMemoize } from \"reselect\";",
            "{ createSelector, defaultMemoize }",
            "{ createSelector, defaultMemoize }",
            "createSelector",
            "defaultMemoize",
            "import * as Utils from \"./utils\";",
            "* as Utils",
            "* as Utils",
            "import {\n  BANDS,\n  TRACK_HEIGHT,\n  WINDOW_RESIZE_SEGMENT_WIDTH,\n  WINDOW_RESIZE_SEGMENT_HEIGHT,\n  WINDOW_WIDTH,\n  MEDIA_STATUS,\n  MEDIA_TAG_REQUEST_STATUS,\n  WINDOWS,\n  VISUALIZERS,\n} from \"./constants\";",
            "{\n  BANDS,\n  TRACK_HEIGHT,\n  WINDOW_RESIZE_SEGMENT_WIDTH,\n  WINDOW_RESIZE_SEGMENT_HEIGHT,\n  WINDOW_WIDTH,\n  MEDIA_STATUS,\n  MEDIA_TAG_REQUEST_STATUS,\n  WINDOWS,\n  VISUALIZERS,\n}",
            "{\n  BANDS,\n  TRACK_HEIGHT,\n  WINDOW_RESIZE_SEGMENT_WIDTH,\n  WINDOW_RESIZE_SEGMENT_HEIGHT,\n  WINDOW_WIDTH,\n  MEDIA_STATUS,\n  MEDIA_TAG_REQUEST_STATUS,\n  WINDOWS,\n  VISUALIZERS,\n}",
            "BANDS",
            "TRACK_HEIGHT",
            "WINDOW_RESIZE_SEGMENT_WIDTH",
            "WINDOW_RESIZE_SEGMENT_HEIGHT",
            "WINDOW_WIDTH",
            "MEDIA_STATUS",
            "MEDIA_TAG_REQUEST_STATUS",
            "WINDOWS",
            "VISUALIZERS",
            "import { createPlaylistURL } from \"./playlistHtml\";",
            "{ createPlaylistURL }",
            "{ createPlaylistURL }",
            "createPlaylistURL",
            "import * as fromTracks from \"./reducers/tracks\";",
            "* as fromTracks",
            "* as fromTracks",
            "import * as fromDisplay from \"./reducers/display\";",
            "* as fromDisplay",
            "* as fromDisplay",
            "import * as fromEqualizer from \"./reducers/equalizer\";",
            "* as fromEqualizer",
            "* as fromEqualizer",
            "import * as fromMedia from \"./reducers/media\";",
            "* as fromMedia",
            "* as fromMedia",
            "import * as fromWindows from \"./reducers/windows\";",
            "* as fromWindows",
            "* as fromWindows",
            "import * as MarqueeUtils from \"./marqueeUtils\";",
            "* as MarqueeUtils",
            "* as MarqueeUtils",
            "import { generateGraph } from \"./resizeUtils\";",
            "{ generateGraph }",
            "{ generateGraph }",
            "generateGraph",
            "import { SerializedStateV1 } from \"./serializedStates/v1Types\";",
            "{ SerializedStateV1 }",
            "{ SerializedStateV1 }",
            "SerializedStateV1"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "captbaritone/webamp",
        "function_declaration": " async renderWhenReady(node: HTMLElement): Promise<void>",
        "start_line": "402",
        "end_line": "424",
        "file_path": "packages/webamp/js/webampLazy.tsx",
        "docstring": "This async function, renderWhenReady, initializes a rendering process for a given HTML element.\\nIt dispatches an action to center windows, waits for a skin to load, and ensures the instance is not already rendered.\\nIf not disposed, it creates a React root and sets up cleanup to unmount it later.\\nFinally, it renders the application within a Redux Provider, passing media and file picker options.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "5dbbdd07f829",
        "ground_truth": "async renderWhenReady(node: HTMLElement): Promise<void> {\n  this.store.dispatch(Actions.centerWindowsInContainer(node));\n  await this.skinIsLoaded();\n  if (this._disposable.disposed) {\n    return;\n  }\n  if (this._root != null) {\n    throw new Error(\"Cannot render a Webamp instance twice\");\n  }\n  this._root = ReactDOM.createRoot(node);\n  this._disposable.add(() => {\n    if (this._root != null) {\n      this._root.unmount();\n      this._root = null;\n    }\n  });\n  this._root.render(\n    <Provider store={this.store}>\n      <App media={this.media} filePickers={this.options.filePickers || []} />\n    </Provider>\n  );\n}",
        "import_statements": [
            "import * as React from \"react\";",
            "* as React",
            "* as React",
            "import ReactDOM from \"react-dom/client\";",
            "ReactDOM",
            "import { Provider } from \"react-redux\";",
            "{ Provider }",
            "{ Provider }",
            "Provider",
            "import {\n  Store,\n  AppState,\n  Track,\n  LoadedURLTrack,\n  Middleware,\n  ButterchurnOptions,\n  PartialState,\n  Options,\n  MediaStatus,\n} from \"./types\";",
            "{\n  Store,\n  AppState,\n  Track,\n  LoadedURLTrack,\n  Middleware,\n  ButterchurnOptions,\n  PartialState,\n  Options,\n  MediaStatus,\n}",
            "{\n  Store,\n  AppState,\n  Track,\n  LoadedURLTrack,\n  Middleware,\n  ButterchurnOptions,\n  PartialState,\n  Options,\n  MediaStatus,\n}",
            "Store",
            "AppState",
            "Track",
            "LoadedURLTrack",
            "Middleware",
            "ButterchurnOptions",
            "PartialState",
            "Options",
            "MediaStatus",
            "import getStore from \"./store\";",
            "getStore",
            "import App from \"./components/App\";",
            "App",
            "import { bindHotkeys } from \"./hotkeys\";",
            "{ bindHotkeys }",
            "{ bindHotkeys }",
            "bindHotkeys",
            "import Media from \"./media\";",
            "Media",
            "import * as Selectors from \"./selectors\";",
            "* as Selectors",
            "* as Selectors",
            "import * as Actions from \"./actionCreators\";",
            "* as Actions",
            "* as Actions",
            "import { LOAD_STYLE } from \"./constants\";",
            "{ LOAD_STYLE }",
            "{ LOAD_STYLE }",
            "LOAD_STYLE",
            "import * as FileUtils from \"./fileUtils\";",
            "* as FileUtils",
            "* as FileUtils",
            "import {\n  SET_AVAILABLE_SKINS,\n  NETWORK_CONNECTED,\n  NETWORK_DISCONNECTED,\n  CLOSE_WINAMP,\n  MINIMIZE_WINAMP,\n  LOADED,\n  SET_Z_INDEX,\n  CLOSE_REQUESTED,\n  ENABLE_MILKDROP,\n} from \"./actionTypes\";",
            "{\n  SET_AVAILABLE_SKINS,\n  NETWORK_CONNECTED,\n  NETWORK_DISCONNECTED,\n  CLOSE_WINAMP,\n  MINIMIZE_WINAMP,\n  LOADED,\n  SET_Z_INDEX,\n  CLOSE_REQUESTED,\n  ENABLE_MILKDROP,\n}",
            "{\n  SET_AVAILABLE_SKINS,\n  NETWORK_CONNECTED,\n  NETWORK_DISCONNECTED,\n  CLOSE_WINAMP,\n  MINIMIZE_WINAMP,\n  LOADED,\n  SET_Z_INDEX,\n  CLOSE_REQUESTED,\n  ENABLE_MILKDROP,\n}",
            "SET_AVAILABLE_SKINS",
            "NETWORK_CONNECTED",
            "NETWORK_DISCONNECTED",
            "CLOSE_WINAMP",
            "MINIMIZE_WINAMP",
            "LOADED",
            "SET_Z_INDEX",
            "CLOSE_REQUESTED",
            "ENABLE_MILKDROP",
            "import Emitter from \"./emitter\";",
            "Emitter",
            "import { SerializedStateV1 } from \"./serializedStates/v1Types\";",
            "{ SerializedStateV1 }",
            "{ SerializedStateV1 }",
            "SerializedStateV1",
            "import Disposable from \"./Disposable\";",
            "Disposable"
        ],
        "reference_api": [
            "this._root.unmount"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this._root.unmount",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "handleContextMenu(e: any)",
        "start_line": "49",
        "end_line": "68",
        "file_path": "src/app/app.tsx",
        "docstring": "This function, handleContextMenu, determines whether the context menu should show cut options based on the active element.\\nIt checks if the active element is a non-terminal input field (textarea or input type text) and sets a flag accordingly.\\nIt also checks if there is any selected text.\\nIf either condition is met, it invokes the contextEditMenu method with the event and options.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2598a3bbc50d",
        "ground_truth": "handleContextMenu(e: any) {\n    let isInNonTermInput = false;\n    const activeElem = document.activeElement;\n    if (activeElem != null && activeElem.nodeName == \"TEXTAREA\") {\n        if (!activeElem.classList.contains(\"xterm-helper-textarea\")) {\n            isInNonTermInput = true;\n        }\n    }\n    if (activeElem != null && activeElem.nodeName == \"INPUT\" && activeElem.getAttribute(\"type\") == \"text\") {\n        isInNonTermInput = true;\n    }\n    const opts: ContextMenuOpts = {};\n    if (isInNonTermInput) {\n        opts.showCut = true;\n    }\n    const sel = window.getSelection();\n    if (!isBlank(sel?.toString()) || isInNonTermInput) {\n        GlobalModel.contextEditMenu(e, opts);\n    }\n}",
        "import_statements": [
            "import * as React from \"react\";",
            "* as React",
            "* as React",
            "import * as mobxReact from \"mobx-react\";",
            "* as mobxReact",
            "* as mobxReact",
            "import * as mobx from \"mobx\";",
            "* as mobx",
            "* as mobx",
            "import { clsx } from \"clsx\";",
            "{ clsx }",
            "{ clsx }",
            "clsx",
            "import { boundMethod } from \"autobind-decorator\";",
            "{ boundMethod }",
            "{ boundMethod }",
            "boundMethod",
            "import { If } from \"tsx-control-statements/components\";",
            "{ If }",
            "{ If }",
            "If",
            "import { GlobalModel } from \"@/models\";",
            "{ GlobalModel }",
            "{ GlobalModel }",
            "GlobalModel",
            "import { isBlank } from \"@/util/util\";",
            "{ isBlank }",
            "{ isBlank }",
            "isBlank",
            "import { WorkspaceView } from \"./workspace/workspaceview\";",
            "{ WorkspaceView }",
            "{ WorkspaceView }",
            "WorkspaceView",
            "import { PluginsView } from \"./pluginsview/pluginsview\";",
            "{ PluginsView }",
            "{ PluginsView }",
            "PluginsView",
            "import { BookmarksView } from \"./bookmarks/bookmarks\";",
            "{ BookmarksView }",
            "{ BookmarksView }",
            "BookmarksView",
            "import { HistoryView } from \"./history/history\";",
            "{ HistoryView }",
            "{ HistoryView }",
            "HistoryView",
            "import { ConnectionsView } from \"./connections/connections\";",
            "{ ConnectionsView }",
            "{ ConnectionsView }",
            "ConnectionsView",
            "import { ClientSettingsView } from \"./clientsettings/clientsettings\";",
            "{ ClientSettingsView }",
            "{ ClientSettingsView }",
            "ClientSettingsView",
            "import { MainSideBar } from \"./sidebar/main\";",
            "{ MainSideBar }",
            "{ MainSideBar }",
            "MainSideBar",
            "import { RightSideBar } from \"./sidebar/right\";",
            "{ RightSideBar }",
            "{ RightSideBar }",
            "RightSideBar",
            "import { DisconnectedModal, ClientStopModal } from \"@/modals\";",
            "{ DisconnectedModal, ClientStopModal }",
            "{ DisconnectedModal, ClientStopModal }",
            "DisconnectedModal",
            "ClientStopModal",
            "import { ModalsProvider } from \"@/modals/provider\";",
            "{ ModalsProvider }",
            "{ ModalsProvider }",
            "ModalsProvider",
            "import { Button } from \"@/elements\";",
            "{ Button }",
            "{ Button }",
            "Button",
            "import { ErrorBoundary } from \"@/common/error/errorboundary\";",
            "{ ErrorBoundary }",
            "{ ErrorBoundary }",
            "ErrorBoundary",
            "import { TermStyleList } from \"@/elements\";",
            "{ TermStyleList }",
            "{ TermStyleList }",
            "TermStyleList",
            "import \"./app.less\";"
        ],
        "reference_api": [
            "handleContextMenu",
            "sel?.toString",
            "window.getSelection",
            "isBlank",
            "activeElem.getAttribute",
            "GlobalModel.contextEditMenu",
            "activeElem.classList.contains"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "handleContextMenu",
                "code": ")"
            },
            {
                "name": "sel?.toString",
                "code": ")"
            },
            {
                "name": "window.getSelection",
                "code": ")"
            },
            {
                "name": "isBlank",
                "code": ")"
            },
            {
                "name": "activeElem.getAttribute",
                "code": ")"
            },
            {
                "name": "GlobalModel.contextEditMenu",
                "code": ")"
            },
            {
                "name": "activeElem.classList.contains",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "handleChangeFontSize(fontSize: string): void",
        "start_line": "50",
        "end_line": "57",
        "file_path": "src/app/clientsettings/clientsettings.tsx",
        "docstring": "This function, handleChangeFontSize, changes the terminal font size.\\nIt converts the input font size to a number and checks if it is different from the current font size.\\nIf they are different, it sets the new font size and handles the command's return value, potentially displaying an error message.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "9a7475588195",
        "ground_truth": "handleChangeFontSize(fontSize: string): void {\n    const newFontSize = Number(fontSize);\n    if (GlobalModel.getTermFontSize() == newFontSize) {\n        return;\n    }\n    const prtn = GlobalCommandRunner.setTermFontSize(newFontSize, false);\n    commandRtnHandler(prtn, this.errorMessage);\n}",
        "import_statements": [
            "import * as React from \"react\";",
            "* as React",
            "* as React",
            "import * as mobxReact from \"mobx-react\";",
            "* as mobxReact",
            "* as mobxReact",
            "import * as mobx from \"mobx\";",
            "* as mobx",
            "* as mobx",
            "import { boundMethod } from \"autobind-decorator\";",
            "{ boundMethod }",
            "{ boundMethod }",
            "boundMethod",
            "import { If } from \"tsx-control-statements/components\";",
            "{ If }",
            "{ If }",
            "If",
            "import { GlobalModel, GlobalCommandRunner, RemotesModel } from \"@/models\";",
            "{ GlobalModel, GlobalCommandRunner, RemotesModel }",
            "{ GlobalModel, GlobalCommandRunner, RemotesModel }",
            "GlobalModel",
            "GlobalCommandRunner",
            "RemotesModel",
            "import { Toggle, InlineSettingsTextEdit, SettingsError, Dropdown } from \"@/common/elements\";",
            "{ Toggle, InlineSettingsTextEdit, SettingsError, Dropdown }",
            "{ Toggle, InlineSettingsTextEdit, SettingsError, Dropdown }",
            "Toggle",
            "InlineSettingsTextEdit",
            "SettingsError",
            "Dropdown",
            "import { commandRtnHandler, isBlank } from \"@/util/util\";",
            "{ commandRtnHandler, isBlank }",
            "{ commandRtnHandler, isBlank }",
            "commandRtnHandler",
            "isBlank",
            "import { getTermThemes } from \"@/util/themeutil\";",
            "{ getTermThemes }",
            "{ getTermThemes }",
            "getTermThemes",
            "import * as appconst from \"@/app/appconst\";",
            "* as appconst",
            "* as appconst",
            "import { MainView } from \"@/common/elements/mainview\";",
            "{ MainView }",
            "{ MainView }",
            "MainView",
            "import { OverlayScrollbarsComponent } from \"overlayscrollbars-react\";",
            "{ OverlayScrollbarsComponent }",
            "{ OverlayScrollbarsComponent }",
            "OverlayScrollbarsComponent",
            "import \"./clientsettings.less\";"
        ],
        "reference_api": [
            "GlobalCommandRunner.setTermFontSize",
            "GlobalModel.getTermFontSize",
            "handleChangeFontSize",
            "Number",
            "commandRtnHandler"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "GlobalCommandRunner.setTermFontSize",
                "code": "w"
            },
            {
                "name": "GlobalModel.getTermFontSize",
                "code": "w"
            },
            {
                "name": "handleChangeFontSize",
                "code": "w"
            },
            {
                "name": "Number",
                "code": "w"
            },
            {
                "name": "commandRtnHandler",
                "code": "w"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "handleChangeTermTheme(theme: string): void",
        "start_line": "79",
        "end_line": "88",
        "file_path": "src/app/clientsettings/clientsettings.tsx",
        "docstring": "This function, handleChangeTermTheme, changes the terminal theme.\\nIt retrieves the current theme and compares it with the new theme.\\nIf they are the same, it returns without making changes.\\nOtherwise, it sets the new theme and handles the command return value, managing potential errors.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "d4d74a9c8035",
        "ground_truth": "handleChangeTermTheme(theme: string): void {\n    // For root terminal theme, the key is root, otherwise it's either\n    // sessionId or screenId.\n    const currTheme = GlobalModel.getTermThemeSettings()[\"root\"];\n    if (currTheme == theme) {\n        return;\n    }\n    const prtn = GlobalCommandRunner.setRootTermTheme(theme, false);\n    commandRtnHandler(prtn, this.errorMessage);\n}",
        "import_statements": [
            "import * as React from \"react\";",
            "* as React",
            "* as React",
            "import * as mobxReact from \"mobx-react\";",
            "* as mobxReact",
            "* as mobxReact",
            "import * as mobx from \"mobx\";",
            "* as mobx",
            "* as mobx",
            "import { boundMethod } from \"autobind-decorator\";",
            "{ boundMethod }",
            "{ boundMethod }",
            "boundMethod",
            "import { If } from \"tsx-control-statements/components\";",
            "{ If }",
            "{ If }",
            "If",
            "import { GlobalModel, GlobalCommandRunner, RemotesModel } from \"@/models\";",
            "{ GlobalModel, GlobalCommandRunner, RemotesModel }",
            "{ GlobalModel, GlobalCommandRunner, RemotesModel }",
            "GlobalModel",
            "GlobalCommandRunner",
            "RemotesModel",
            "import { Toggle, InlineSettingsTextEdit, SettingsError, Dropdown } from \"@/common/elements\";",
            "{ Toggle, InlineSettingsTextEdit, SettingsError, Dropdown }",
            "{ Toggle, InlineSettingsTextEdit, SettingsError, Dropdown }",
            "Toggle",
            "InlineSettingsTextEdit",
            "SettingsError",
            "Dropdown",
            "import { commandRtnHandler, isBlank } from \"@/util/util\";",
            "{ commandRtnHandler, isBlank }",
            "{ commandRtnHandler, isBlank }",
            "commandRtnHandler",
            "isBlank",
            "import { getTermThemes } from \"@/util/themeutil\";",
            "{ getTermThemes }",
            "{ getTermThemes }",
            "getTermThemes",
            "import * as appconst from \"@/app/appconst\";",
            "* as appconst",
            "* as appconst",
            "import { MainView } from \"@/common/elements/mainview\";",
            "{ MainView }",
            "{ MainView }",
            "MainView",
            "import { OverlayScrollbarsComponent } from \"overlayscrollbars-react\";",
            "{ OverlayScrollbarsComponent }",
            "{ OverlayScrollbarsComponent }",
            "OverlayScrollbarsComponent",
            "import \"./clientsettings.less\";"
        ],
        "reference_api": [
            "GlobalCommandRunner.setRootTermTheme",
            "GlobalModel.getTermThemeSettings",
            "handleChangeTermTheme",
            "commandRtnHandler"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "GlobalCommandRunner.setRootTermTheme",
                "code": "w"
            },
            {
                "name": "GlobalModel.getTermThemeSettings",
                "code": "w"
            },
            {
                "name": "handleChangeTermTheme",
                "code": "w"
            },
            {
                "name": "commandRtnHandler",
                "code": "w"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "const ModalHeader: React.FC<ModalHeaderProps> = ({ onClose, keybindings, title }) => ",
        "start_line": "20",
        "end_line": "32",
        "file_path": "src/app/common/elements/modal.tsx",
        "docstring": "This functional React component, ModalHeader, renders a modal header with a title and optional close functionality.\\nIf keybindings and onClose are provided, it includes a ModalKeybindings component.\\nThe title is displayed in a div, and if onClose is provided, a button to close the modal is rendered with an icon.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "329444949255",
        "ground_truth": "const ModalHeader: React.FC<ModalHeaderProps> = ({ onClose, keybindings, title }) => (\n    <div className=\"wave-modal-header\">\n        <If condition={keybindings && onClose}>\n            <ModalKeybindings onCancel={onClose}></ModalKeybindings>\n        </If>\n        {<div className=\"wave-modal-title\">{title}</div>}\n        <If condition={onClose}>\n            <Button className=\"secondary ghost\" onClick={() => onClose()} title=\"Close (ESC)\">\n                <i className=\"fa-sharp fa-solid fa-xmark\"></i>\n            </Button>\n        </If>\n    </div>\n);",
        "import_statements": [
            "import * as React from \"react\";",
            "* as React",
            "* as React",
            "import { If } from \"tsx-control-statements/components\";",
            "{ If }",
            "{ If }",
            "If",
            "import ReactDOM from \"react-dom\";",
            "ReactDOM",
            "import { Button } from \"./button\";",
            "{ Button }",
            "{ Button }",
            "Button",
            "import { v4 as uuidv4 } from \"uuid\";",
            "{ v4 as uuidv4 }",
            "{ v4 as uuidv4 }",
            "v4 as uuidv4",
            "import { GlobalModel } from \"@/models\";",
            "{ GlobalModel }",
            "{ GlobalModel }",
            "GlobalModel",
            "import \"./modal.less\";",
            "import { boundMethod } from \"autobind-decorator\";",
            "{ boundMethod }",
            "{ boundMethod }",
            "boundMethod"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "function formatRemoteName(rnames: Record<string, string>, rptr: RemotePtrType): string",
        "start_line": "47",
        "end_line": "59",
        "file_path": "src/app/history/history.tsx",
        "docstring": "This function, formatRemoteName, formats a remote name based on a given record of remote names and a remote pointer.\\nIf the remote pointer is null or its remoteid is blank, it returns an empty string.\\nIt looks up the remote name using the remoteid, defaulting to the first 8 characters of the remoteid if not found.\\nIf the remote pointer has a non-blank name, it appends it to the remote name with a colon separator.\\nFinally, it returns the formatted name enclosed in square brackets.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "1da69d707d33",
        "ground_truth": "function formatRemoteName(rnames: Record<string, string>, rptr: RemotePtrType): string {\n    if (rptr == null || isBlank(rptr.remoteid)) {\n        return \"\";\n    }\n    let rname = rnames[rptr.remoteid];\n    if (rname == null) {\n        rname = rptr.remoteid.substring(0, 8);\n    }\n    if (!isBlank(rptr.name)) {\n        rname = rname + \":\" + rptr.name;\n    }\n    return \"[\" + rname + \"]\";\n}",
        "import_statements": [
            "import * as React from \"react\";",
            "* as React",
            "* as React",
            "import * as mobxReact from \"mobx-react\";",
            "* as mobxReact",
            "* as mobxReact",
            "import * as mobx from \"mobx\";",
            "* as mobx",
            "* as mobx",
            "import { If, For } from \"tsx-control-statements/components\";",
            "{ If, For }",
            "{ If, For }",
            "If",
            "For",
            "import { sprintf } from \"sprintf-js\";",
            "{ sprintf }",
            "{ sprintf }",
            "sprintf",
            "import { boundMethod } from \"autobind-decorator\";",
            "{ boundMethod }",
            "{ boundMethod }",
            "boundMethod",
            "import { clsx } from \"clsx\";",
            "{ clsx }",
            "{ clsx }",
            "clsx",
            "import { GlobalModel, GlobalCommandRunner } from \"@/models\";",
            "{ GlobalModel, GlobalCommandRunner }",
            "{ GlobalModel, GlobalCommandRunner }",
            "GlobalModel",
            "GlobalCommandRunner",
            "import dayjs from \"dayjs\";",
            "dayjs",
            "import localizedFormat from \"dayjs/plugin/localizedFormat\";",
            "localizedFormat",
            "import customParseFormat from \"dayjs/plugin/customParseFormat\";",
            "customParseFormat",
            "import { Line } from \"@/app/line/linecomps\";",
            "{ Line }",
            "{ Line }",
            "Line",
            "import { checkKeyPressed, adaptFromReactOrNativeKeyEvent } from \"@/util/keyutil\";",
            "{ checkKeyPressed, adaptFromReactOrNativeKeyEvent }",
            "{ checkKeyPressed, adaptFromReactOrNativeKeyEvent }",
            "checkKeyPressed",
            "adaptFromReactOrNativeKeyEvent",
            "import { TextField, Dropdown, Button, CopyButton } from \"@/elements\";",
            "{ TextField, Dropdown, Button, CopyButton }",
            "{ TextField, Dropdown, Button, CopyButton }",
            "TextField",
            "Dropdown",
            "Button",
            "CopyButton",
            "import { ReactComponent as ChevronLeftIcon } from \"@/assets/icons/history/chevron-left.svg\";",
            "{ ReactComponent as ChevronLeftIcon }",
            "{ ReactComponent as ChevronLeftIcon }",
            "ReactComponent as ChevronLeftIcon",
            "import { ReactComponent as ChevronRightIcon } from \"@/assets/icons/history/chevron-right.svg\";",
            "{ ReactComponent as ChevronRightIcon }",
            "{ ReactComponent as ChevronRightIcon }",
            "ReactComponent as ChevronRightIcon",
            "import { ReactComponent as RightIcon } from \"@/assets/icons/history/right.svg\";",
            "{ ReactComponent as RightIcon }",
            "{ ReactComponent as RightIcon }",
            "ReactComponent as RightIcon",
            "import { ReactComponent as SearchIcon } from \"@/assets/icons/history/search.svg\";",
            "{ ReactComponent as SearchIcon }",
            "{ ReactComponent as SearchIcon }",
            "ReactComponent as SearchIcon",
            "import { ReactComponent as TrashIcon } from \"@/assets/icons/trash.svg\";",
            "{ ReactComponent as TrashIcon }",
            "{ ReactComponent as TrashIcon }",
            "ReactComponent as TrashIcon",
            "import { ReactComponent as CheckedCheckbox } from \"@/assets/icons/checked-checkbox.svg\";",
            "{ ReactComponent as CheckedCheckbox }",
            "{ ReactComponent as CheckedCheckbox }",
            "ReactComponent as CheckedCheckbox",
            "import \"./history.less\";",
            "import { MainView } from \"../common/elements/mainview\";",
            "{ MainView }",
            "{ MainView }",
            "MainView"
        ],
        "reference_api": [
            "isBlank",
            "rptr.remoteid.substring"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "isBlank",
                "code": "u"
            },
            {
                "name": "rptr.remoteid.substring",
                "code": "w"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "adjustTextAreaHeight()",
        "start_line": "255",
        "end_line": "269",
        "file_path": "src/app/sidebar/aichat.tsx",
        "docstring": "This method, adjustTextAreaHeight, dynamically adjusts the height of a textarea to fit its content.\\nIt sets the initial height to 1px to measure the scrollHeight, then calculates the new height within a minimum and maximum range based on the font size and a maximum number of lines.\\nThe new height is applied to the textarea to ensure it fits the text without exceeding the defined limits.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "757ee5b9626f",
        "ground_truth": "adjustTextAreaHeight() {\n    if (this.textAreaRef.current == null) {\n        return;\n    }\n    // Adjust the height of the textarea to fit the text\n    const textAreaMaxLines = 100;\n    const textAreaLineHeight = this.termFontSize * 1.5;\n    const textAreaMinHeight = textAreaLineHeight;\n    const textAreaMaxHeight = textAreaLineHeight * textAreaMaxLines;\n    this.textAreaRef.current.style.height = \"1px\";\n    const scrollHeight = this.textAreaRef.current.scrollHeight;\n    const newHeight = Math.min(Math.max(scrollHeight, textAreaMinHeight), textAreaMaxHeight);\n    this.textAreaRef.current.style.height = newHeight + \"px\";\n}",
        "import_statements": [
            "import * as React from \"react\"",
            "import * as mobxReact from \"mobx-react\"",
            "import * as mobx from \"mobx\"",
            "import { GlobalModel } from \"@/models\"",
            "import { boundMethod } from \"autobind-decorator\"",
            "import { For, If } from \"tsx-control-statements/components\"",
            "import { Markdown, TypingIndicator } from \"@/elements\"",
            "import type { OverlayScrollbars } from \"overlayscrollbars\"",
            "import { OverlayScrollbarsComponent, OverlayScrollbarsComponentRef } from \"overlayscrollbars-react\"",
            "import tinycolor from \"tinycolor2\"",
            "import \"./aichat.less\""
        ],
        "reference_api": [
            "Math.min",
            "Math.max"
        ],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "onEnterKeyPressed()",
        "start_line": "296",
        "end_line": "307",
        "file_path": "src/app/sidebar/aichat.tsx",
        "docstring": "This method, onEnterKeyPressed, handles the Enter key press event.\\nIt checks if a code block is selected and sets the command input value if true.\\nIf no code block is selected, it retrieves the current message string, submits it as a chat message, clears the input value, and resets the command and output in the sidebar chat model.\\nThe method returns true in both cases.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c0fa6e5d0067",
        "ground_truth": "onEnterKeyPressed() {\n    const blockIndex = GlobalModel.sidebarchatModel.getSelectedCodeBlockIndex();\n    if (blockIndex != null) {\n        this.onSetCmdInputValue();\n        return true;\n    }\n    const messageStr = this.value.get();\n    this.submitChatMessage(messageStr);\n    this.value.set(\"\");\n    GlobalModel.sidebarchatModel.resetCmdAndOutput();\n    return true;\n}",
        "import_statements": [
            "import * as React from \"react\"",
            "import * as mobxReact from \"mobx-react\"",
            "import * as mobx from \"mobx\"",
            "import { GlobalModel } from \"@/models\"",
            "import { boundMethod } from \"autobind-decorator\"",
            "import { For, If } from \"tsx-control-statements/components\"",
            "import { Markdown, TypingIndicator } from \"@/elements\"",
            "import type { OverlayScrollbars } from \"overlayscrollbars\"",
            "import { OverlayScrollbarsComponent, OverlayScrollbarsComponentRef } from \"overlayscrollbars-react\"",
            "import tinycolor from \"tinycolor2\"",
            "import \"./aichat.less\""
        ],
        "reference_api": [
            "GlobalModel.sidebarchatModel.getSelectedCodeBlockIndex()",
            "this.onSetCmdInputValue()",
            "this.value.get()",
            "this.submitChatMessage",
            "this.value.set",
            "GlobalModel.sidebarchatModel.resetCmdAndOutput()"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "getSelectedCodeBlockIndex()",
                "code": "getSelectedCodeBlockIndex(): number {\n    return this.selectedCodeBlockIndex.get();\n}"
            },
            {
                "name": "this.onSetCmdInputValue()",
                "code": "onSetCmdInputValue(cmd?: string) {\n        console.log(\"got here\");\n        if (cmd) {\n            this.setCmdInputValue(cmd);\n        } else {\n            const pres = this.chatWindowRef.current?.querySelectorAll(\"pre\");\n            if (pres) {\n                const selectedIdx = GlobalModel.sidebarchatModel.getSelectedCodeBlockIndex();\n                pres.forEach((preElement, idx) => {\n                    if (selectedIdx === idx) {\n                        const codeElement = preElement.querySelector(\"code\");\n                        if (codeElement) {\n                            const command = codeElement.textContent.replace(/\\n$/, \"\");\n                            this.setCmdInputValue(command);\n                        }\n                    }\n                });\n            }\n        }\n        return true;\n    }"
            },
            {
                "name": "this.submitChatMessage",
                "code": "submitChatMessage(messageStr: string) {\n        GlobalModel.sidebarchatModel.resetCmdAndOutput();\n        const curLine = GlobalModel.inputModel.curLine;\n        const prtn = GlobalModel.submitChatInfoCommand(messageStr, curLine, false);\n        prtn.then((rtn) => {\n            if (!rtn.success) {\n                console.log(\"submit chat command error: \" + rtn.error);\n            }\n        }).catch((_) => {});\n    }"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "function readAuthKey(): string",
        "start_line": "185",
        "end_line": "213",
        "file_path": "src/electron/emain.ts",
        "docstring": "The function readAuthKey retrieves or generates an authorization key.\\nIt first determines the home directory and constructs the path to the auth key file.\\nIf the file does not exist, it generates a new UUID, saves it to the file with specific permissions, and returns it.\\nIf the file exists, it reads and returns the key, throwing an error if the key is invalid.\\nAdditionally, the reloadAcceleratorKey is set based on the platform, and the cmdOrAlt variable is set accordingly.\\nThe viewSubMenu array is populated with menu options, including a reload role with a platform-specific accelerator, a toggle for developer tools, and a dev UI toggle in development mode.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "a022487e54ff",
        "ground_truth": "function readAuthKey(): string {\n    const homeDir = getWaveHomeDir();\n    const authKeyFileName = path.join(homeDir, AuthKeyFile);\n    if (!fs.existsSync(authKeyFileName)) {\n        const authKeyStr = String(uuidv4());\n        fs.writeFileSync(authKeyFileName, authKeyStr, { mode: 0o600 });\n        return authKeyStr;\n    }\n    const authKeyData = fs.readFileSync(authKeyFileName);\n    const authKeyStr = String(authKeyData);\n    if (authKeyStr == null || authKeyStr == \"\") {\n        throw new Error(\"cannot read authkey\");\n    }\n    return authKeyStr.trim();\n}\nconst reloadAcceleratorKey = unamePlatform == \"darwin\" ? \"Option+R\" : \"Super+R\";\nconst cmdOrAlt = process.platform === \"darwin\" ? \"Cmd\" : \"Alt\";\n let viewSubMenu: Electron.MenuItemConstructorOptions[] = [];\nviewSubMenu.push({ role: \"reload\", accelerator: reloadAcceleratorKey });\nviewSubMenu.push({ role: \"toggleDevTools\" });\nif (isDev) {\n    viewSubMenu.push({\n        label: \"Toggle Dev UI\",\n        click: (_, window) => {\n            window?.webContents.send(\"toggle-devui\");\n        },\n    });\n}",
        "import_statements": [
            "import * as electron from \"electron\";",
            "* as electron",
            "* as electron",
            "import { autoUpdater } from \"electron-updater\";",
            "{ autoUpdater }",
            "{ autoUpdater }",
            "autoUpdater",
            "import * as path from \"path\";",
            "* as path",
            "* as path",
            "import * as fs from \"fs\";",
            "* as fs",
            "* as fs",
            "import fetch from \"node-fetch\";",
            "fetch",
            "import * as child_process from \"node:child_process\";",
            "* as child_process",
            "* as child_process",
            "import { debounce } from \"throttle-debounce\";",
            "{ debounce }",
            "{ debounce }",
            "debounce",
            "import * as winston from \"winston\";",
            "* as winston",
            "* as winston",
            "import * as util from \"util\";",
            "* as util",
            "* as util",
            "import * as waveutil from \"../util/util\";",
            "* as waveutil",
            "* as waveutil",
            "import { sprintf } from \"sprintf-js\";",
            "{ sprintf }",
            "{ sprintf }",
            "sprintf",
            "import { handleJsonFetchResponse, fireAndForget } from \"@/util/util\";",
            "{ handleJsonFetchResponse, fireAndForget }",
            "{ handleJsonFetchResponse, fireAndForget }",
            "handleJsonFetchResponse",
            "fireAndForget",
            "import { v4 as uuidv4 } from \"uuid\";",
            "{ v4 as uuidv4 }",
            "{ v4 as uuidv4 }",
            "v4 as uuidv4",
            "import { adaptFromElectronKeyEvent, setKeyUtilPlatform } from \"@/util/keyutil\";",
            "{ adaptFromElectronKeyEvent, setKeyUtilPlatform }",
            "{ adaptFromElectronKeyEvent, setKeyUtilPlatform }",
            "adaptFromElectronKeyEvent",
            "setKeyUtilPlatform",
            "import { platform } from \"os\";",
            "{ platform }",
            "{ platform }",
            "platform"
        ],
        "reference_api": [
            "window?.webContents.send"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "window?.webContents.send",
                "code": "i"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "wavetermdev/waveterm",
        "function_declaration": "handleDataFromRenderer(data: string, renderer: RendererModel): void",
        "start_line": "123",
        "end_line": "131",
        "file_path": "src/models/cmd.ts",
        "docstring": "This function, handleDataFromRenderer, processes data from a renderer in chunks.\\nIf the system is not running, it returns immediately.\\nIt iterates through the data in increments of a defined chunk size, slicing the data into chunks, and processes each chunk using another function.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "9c3e2f93e1c1",
        "ground_truth": "handleDataFromRenderer(data: string, renderer: RendererModel): void {\n    if (!this.isRunning()) {\n        return;\n    }\n    for (let pos = 0; pos < data.length; pos += InputChunkSize) {\n        let dataChunk = data.slice(pos, pos + InputChunkSize);\n        this.handleInputChunk(dataChunk);\n    }\n}",
        "import_statements": [
            "import * as mobx from \"mobx\";",
            "* as mobx",
            "* as mobx",
            "import { stringToBase64 } from \"@/util/util\";",
            "{ stringToBase64 }",
            "{ stringToBase64 }",
            "stringToBase64",
            "import { TermWrap } from \"@/plugins/terminal/term\";",
            "{ TermWrap }",
            "{ TermWrap }",
            "TermWrap",
            "import { cmdStatusIsRunning } from \"@/app/line/lineutil\";",
            "{ cmdStatusIsRunning }",
            "{ cmdStatusIsRunning }",
            "cmdStatusIsRunning",
            "import { Model } from \"./model\";",
            "{ Model }",
            "{ Model }",
            "Model"
        ],
        "reference_api": [
            "handleDataFromRenderer",
            "this.handleInputChunk",
            "data.slice",
            "this.isRunning"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "handleDataFromRenderer",
                "code": ")"
            },
            {
                "name": "this.handleInputChunk",
                "code": ")"
            },
            {
                "name": "data.slice",
                "code": ")"
            },
            {
                "name": "this.isRunning",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "React",
        "owner/repo": "reduction-admin/react-reduction",
        "function_declaration": "function checkValidServiceWorker(swUrl) ",
        "start_line": "75",
        "end_line": "100",
        "file_path": "src/registerServiceWorker.js",
        "docstring": "This function, checkValidServiceWorker, verifies the presence and validity of a service worker by fetching its URL.\\nIf the service worker is not found or is not a JavaScript file, it unregisters the current service worker and reloads the page.\\nIf the service worker is valid, it calls registerValidSW to proceed.\\nIf there is no internet connection, it logs that the app is running in offline mode.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "37ad09d7b939",
        "ground_truth": "function checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}",
        "import_statements": [],
        "reference_api": [
            "response.headers.get",
            "console.log",
            "navigator.serviceWorker.ready.then",
            "window.location.reload",
            "registerValidSW",
            "fetch",
            "registration.unregister().then",
            "response.headers.get('content-type').indexOf",
            "registration.unregister",
            "fetch(swUrl)\n    .then",
            "fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "registerValidSW",
                "code": "function registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}"
            },
            {
                "name": "registration.unregister",
                "code": "function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}"
            }
        ],
        "third_party": [
            "response.headers.get",
            "navigator.serviceWorker.ready.then",
            "window.location.reload",
            "registration.unregister().then",
            "response.headers.get('content-type').indexOf",
            "fetch(swUrl)\n    .then",
            "fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch"
        ]
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "function areAllRequiredElementsHighlighted",
        "start_line": "22",
        "end_line": "35",
        "file_path": "code/addons/a11y/src/components/Report/HighlightToggle.tsx",
        "docstring": "This function, areAllRequiredElementsHighlighted, determines the state of highlighted elements.\\nIt checks how many of the elements to highlight are present in the highlighted array and returns a checkbox state.\\nIf none are highlighted, it returns UNCHECKED.\\nIf all are highlighted, it returns CHECKED.\\nOtherwise, it returns INDETERMINATE.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "27dabe0c40aa",
        "ground_truth": "function areAllRequiredElementsHighlighted(\n  elementsToHighlight: NodeResult[],\n  highlighted: string[]\n): CheckBoxStates {\n  const highlightedCount = elementsToHighlight.filter((item) =>\n    highlighted.includes(item.target[0] as any)\n  ).length;\n   return highlightedCount === 0\n    ? CheckBoxStates.UNCHECKED\n    : highlightedCount === elementsToHighlight.length\n      ? CheckBoxStates.CHECKED\n      : CheckBoxStates.INDETERMINATE;\n}",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import { styled } from 'storybook/internal/theming';",
            "{ styled }",
            "{ styled }",
            "styled",
            "import type { NodeResult } from 'axe-core';",
            "{ NodeResult }",
            "{ NodeResult }",
            "NodeResult",
            "import { useA11yContext } from '../A11yContext';",
            "{ useA11yContext }",
            "{ useA11yContext }",
            "useA11yContext"
        ],
        "reference_api": [
            "highlighted.includes"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "highlighted.includes",
                "code": "{"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "const createHandlers = (actionsFn: (...arg: any[]) => object, ...handles: any[]) => ",
        "start_line": "26",
        "end_line": "40",
        "file_path": "code/addons/actions/src/decorator.ts",
        "docstring": "This function, createHandlers, generates event handlers based on a provided action function and handlers.\\nIt calls the action function with the given handlers to obtain an actions object.\\nIt then iterates over the entries of this object, parsing each key to extract the event name and selector.\\nFor each entry, it creates an event handler that invokes the corresponding action if the event target matches the selector or if no selector is specified.\\nThe function returns an array of objects, each containing the event name and its associated handler.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c60e532809af",
        "ground_truth": "const createHandlers = (actionsFn: (...arg: any[]) => object, ...handles: any[]) => {\n  const actionsObject = actionsFn(...handles);\n  return Object.entries(actionsObject).map(([key, action]) => {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    const [_, eventName, selector] = key.match(delegateEventSplitter) || [];\n    return {\n      eventName,\n      handler: (e: { target: any }) => {\n        if (!selector || hasMatchInAncestry(e.target, selector)) {\n          action(e);\n        }\n      },\n    };\n  });\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import { useEffect, makeDecorator } from 'storybook/internal/preview-api';",
            "{ useEffect, makeDecorator }",
            "{ useEffect, makeDecorator }",
            "useEffect",
            "makeDecorator",
            "import type { PartialStoryFn, Renderer } from 'storybook/internal/types';",
            "{ PartialStoryFn, Renderer }",
            "{ PartialStoryFn, Renderer }",
            "PartialStoryFn",
            "Renderer",
            "import { actions } from './runtime/actions';",
            "{ actions }",
            "{ actions }",
            "actions",
            "import { PARAM_KEY } from './constants';",
            "{ PARAM_KEY }",
            "{ PARAM_KEY }",
            "PARAM_KEY"
        ],
        "reference_api": [
            "hasMatchInAncestry",
            "action"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "hasMatchInAncestry",
                "code": "e"
            },
            {
                "name": "action",
                "code": "e"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "const applyEventHandlers = (actionsFn: any, ...handles: any[]) =>",
        "start_line": "42",
        "end_line": "53",
        "file_path": "code/addons/actions/src/decorator.ts",
        "docstring": "This function, applyEventHandlers, attaches event handlers to the 'storybook-root' element.\\nIt uses the actionsFn and additional handles to create handlers.\\nThese handlers are added as event listeners to the root element when the component mounts and removed when it unmounts.\\nThe useEffect hook manages the attachment and detachment of these event listeners based on the root element, actionsFn, and handles.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8c81ca953249",
        "ground_truth": "const applyEventHandlers = (actionsFn: any, ...handles: any[]) => {\n  const root = document && document.getElementById('storybook-root');\n  useEffect(() => {\n    if (root != null) {\n      const handlers = createHandlers(actionsFn, ...handles);\n      handlers.forEach(({ eventName, handler }) => root.addEventListener(eventName, handler));\n      return () =>\n        handlers.forEach(({ eventName, handler }) => root.removeEventListener(eventName, handler));\n    }\n    return undefined;\n  }, [root, actionsFn, handles]);\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import { useEffect, makeDecorator } from 'storybook/internal/preview-api';",
            "{ useEffect, makeDecorator }",
            "{ useEffect, makeDecorator }",
            "useEffect",
            "makeDecorator",
            "import type { PartialStoryFn, Renderer } from 'storybook/internal/types';",
            "{ PartialStoryFn, Renderer }",
            "{ PartialStoryFn, Renderer }",
            "PartialStoryFn",
            "Renderer",
            "import { actions } from './runtime/actions';",
            "{ actions }",
            "{ actions }",
            "actions",
            "import { PARAM_KEY } from './constants';",
            "{ PARAM_KEY }",
            "{ PARAM_KEY }",
            "PARAM_KEY"
        ],
        "reference_api": [
            "root.removeEventListener"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "root.removeEventListener",
                "code": "e"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "addAction = (action: ActionDisplay) =>",
        "start_line": "62",
        "end_line": "74",
        "file_path": "code/addons/actions/src/containers/ActionLogger/index.tsx",
        "docstring": "This function, addAction, adds a new action to the component's state.\\nIt first retrieves the previous state and actions list.\\nIf the last action in the list has the same data as the new action, it increments the count of the last action.\\nOtherwise, it sets the new action's count to 1 and adds it to the list.\\nFinally, it updates the state with the modified actions list, limited by the specified options.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "3b9dc9070ef1",
        "ground_truth": "addAction = (action: ActionDisplay) => {\n  this.setState((prevState: ActionLoggerState) => {\n    const actions = [...prevState.actions];\n    const previous = actions.length && actions[actions.length - 1];\n    if (previous && safeDeepEqual(previous.data, action.data)) {\n      previous.count++;\n    } else {\n      action.count = 1;\n      actions.push(action);\n    }\n    return { actions: actions.slice(0, action.options.limit) };\n  });\n};",
        "import_statements": [
            "import React, { Component } from 'react';",
            "React, { Component }",
            "{ Component }",
            "Component",
            "import { dequal as deepEqual } from 'dequal';",
            "{ dequal as deepEqual }",
            "{ dequal as deepEqual }",
            "dequal as deepEqual",
            "import type { API } from 'storybook/internal/manager-api';",
            "{ API }",
            "{ API }",
            "API",
            "import { STORY_CHANGED } from 'storybook/internal/core-events';",
            "{ STORY_CHANGED }",
            "{ STORY_CHANGED }",
            "STORY_CHANGED",
            "import { ActionLogger as ActionLoggerComponent } from '../../components/ActionLogger';",
            "{ ActionLogger as ActionLoggerComponent }",
            "{ ActionLogger as ActionLoggerComponent }",
            "ActionLogger as ActionLoggerComponent",
            "import type { ActionDisplay } from '../../models';",
            "{ ActionDisplay }",
            "{ ActionDisplay }",
            "ActionDisplay",
            "import { CLEAR_ID, EVENT_ID } from '../../constants';",
            "{ CLEAR_ID, EVENT_ID }",
            "{ CLEAR_ID, EVENT_ID }",
            "CLEAR_ID",
            "EVENT_ID"
        ],
        "reference_api": [
            "actions.slice",
            "safeDeepEqual",
            "actions.push"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "actions.slice",
                "code": "a"
            },
            {
                "name": "safeDeepEqual",
                "code": "a"
            },
            {
                "name": "actions.push",
                "code": "a"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "export const addGridStyle = (selector: string, css: string) => ",
        "start_line": "59",
        "end_line": "71",
        "file_path": "code/addons/backgrounds/src/helpers/index.ts",
        "docstring": "This function, addGridStyle, adds or updates a style element with a specific selector and CSS content.\\nIf a style element with the given selector ID exists, it updates its content if different.\\nIf it does not exist, it creates a new style element with the specified ID and CSS content, then appends it to the document head.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c58b95bdb84e",
        "ground_truth": "export const addGridStyle = (selector: string, css: string) => {\n  const existingStyle = document.getElementById(selector) as HTMLElement;\n  if (existingStyle) {\n    if (existingStyle.innerHTML !== css) {\n      existingStyle.innerHTML = css;\n    }\n  } else {\n    const style = document.createElement('style') as HTMLElement;\n    style.setAttribute('id', selector);\n    style.innerHTML = css;\n    document.head.appendChild(style);\n  }\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import { dedent } from 'ts-dedent';",
            "{ dedent }",
            "{ dedent }",
            "dedent",
            "import { logger } from 'storybook/internal/client-logger';",
            "{ logger }",
            "{ logger }",
            "logger",
            "import type { Background } from '../types';",
            "{ Background }",
            "{ Background }",
            "Background"
        ],
        "reference_api": [
            "document.head.appendChild",
            "document.createElement",
            "document.getElementById",
            "style.setAttribute"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "document.head.appendChild",
                "code": ")"
            },
            {
                "name": "style.setAttribute",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "export const addBackgroundStyle = (selector: string, css: string, storyId: string | null) =>",
        "start_line": "73",
        "end_line": "93",
        "file_path": "code/addons/backgrounds/src/helpers/index.ts",
        "docstring": "This function, addBackgroundStyle, applies a CSS style to the document based on a given selector and story ID.\\nIt first checks if a style element with the given selector ID already exists.\\nIf it exists and its content differs from the provided CSS, it updates the content.\\nIf it doesn't exist, it creates a new style element with the given CSS and ID.\\nIt then checks for an existing grid style element based on the story ID to insert the new style before it or appends it to the document head if no such grid style exists.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "882d870a20b2",
        "ground_truth": "export const addBackgroundStyle = (selector: string, css: string, storyId: string | null) => {\n  const existingStyle = document.getElementById(selector) as HTMLElement;\n  if (existingStyle) {\n    if (existingStyle.innerHTML !== css) {\n      existingStyle.innerHTML = css;\n    }\n  } else {\n    const style = document.createElement('style') as HTMLElement;\n    style.setAttribute('id', selector);\n    style.innerHTML = css;\n     const gridStyleSelector = `addon-backgrounds-grid${storyId ? `-docs-${storyId}` : ''}`;\n    // If grids already exist, we want to add the style tag BEFORE it so the background doesn't override grid\n    const existingGridStyle = document.getElementById(gridStyleSelector) as HTMLElement;\n    if (existingGridStyle) {\n      existingGridStyle.parentElement?.insertBefore(style, existingGridStyle);\n    } else {\n      document.head.appendChild(style);\n    }\n  }\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import { dedent } from 'ts-dedent';",
            "{ dedent }",
            "{ dedent }",
            "dedent",
            "import { logger } from 'storybook/internal/client-logger';",
            "{ logger }",
            "{ logger }",
            "logger",
            "import type { Background } from '../types';",
            "{ Background }",
            "{ Background }",
            "Background"
        ],
        "reference_api": [
            "document.createElement",
            "document.getElementById",
            "style.setAttribute",
            "document.head.appendChild",
            "existingGridStyle.parentElement?.insertBefore"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "style.setAttribute",
                "code": ")"
            },
            {
                "name": "document.head.appendChild",
                "code": ")"
            },
            {
                "name": "existingGridStyle.parentElement?.insertBefore",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "const onSubmitForm = async (event: React.FormEvent<HTMLFormElement>) =>",
        "start_line": "124",
        "end_line": "137",
        "file_path": "code/addons/controls/src/SaveStory.tsx",
        "docstring": "This async function, onSubmitForm, handles form submission events.\\nIt prevents the default form submission behavior and checks if a save operation is already in progress.\\nIf not, it resets the error message, sets the saving state to true, and attempts to create a story with a sanitized story name.\\nAfter the story creation, it resets the creating and saving states.\\nIf an error occurs, it sets the error message and resets the saving state.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c17e647327b5",
        "ground_truth": "const onSubmitForm = async (event: React.FormEvent<HTMLFormElement>) => {\n  event.preventDefault();\n  if (saving) return;\n  try {\n    setErrorMessage(null);\n    setSaving(true);\n    await createStory(storyName.replace(/^[^a-z]/i, '').replaceAll(/[^a-z0-9]/gi, ''));\n    setCreating(false);\n    setSaving(false);\n  } catch (e: any) {\n    setErrorMessage(e.message);\n    setSaving(false);\n  }\n};",
        "import_statements": [
            "import {\n  Bar as BaseBar,\n  Button,\n  Form,\n  IconButton,\n  Modal,\n  TooltipNote,\n  WithTooltip,\n} from 'storybook/internal/components';",
            "{\n  Bar as BaseBar,\n  Button,\n  Form,\n  IconButton,\n  Modal,\n  TooltipNote,\n  WithTooltip,\n}",
            "{\n  Bar as BaseBar,\n  Button,\n  Form,\n  IconButton,\n  Modal,\n  TooltipNote,\n  WithTooltip,\n}",
            "Bar as BaseBar",
            "Button",
            "Form",
            "IconButton",
            "Modal",
            "TooltipNote",
            "WithTooltip",
            "import { AddIcon, CheckIcon, UndoIcon } from '@storybook/icons';",
            "{ AddIcon, CheckIcon, UndoIcon }",
            "{ AddIcon, CheckIcon, UndoIcon }",
            "AddIcon",
            "CheckIcon",
            "UndoIcon",
            "import { keyframes, styled } from 'storybook/internal/theming';",
            "{ keyframes, styled }",
            "{ keyframes, styled }",
            "keyframes",
            "styled",
            "import React from 'react';",
            "React"
        ],
        "reference_api": [
            "createStory",
            "setCreating",
            "storyName.replace(/^[^a-z]/i, '').replaceAll",
            "setSaving",
            "event.preventDefault",
            "storyName.replace",
            "setErrorMessage"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "createStory",
                "code": "{"
            },
            {
                "name": "setCreating",
                "code": "{"
            },
            {
                "name": "storyName.replace(/^[^a-z]/i, '').replaceAll",
                "code": "{"
            },
            {
                "name": "setSaving",
                "code": "{"
            },
            {
                "name": "event.preventDefault",
                "code": "{"
            },
            {
                "name": "storyName.replace",
                "code": "{"
            },
            {
                "name": "setErrorMessage",
                "code": "{"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "function Title()",
        "start_line": "21",
        "end_line": "36",
        "file_path": "code/addons/controls/src/manager.tsx",
        "docstring": "This function, Title, uses the useArgTypes hook to get argument types and counts the number of those with controls that are not disabled.\\nIt creates a suffix badge displaying the count if there are any such controls.\\nThe function returns a div containing the text 'Controls' and the optional suffix badge, styled and spaced appropriately.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2d58c69eda27",
        "ground_truth": "function Title() {\n  const rows = useArgTypes();\n  const controlsCount = Object.values(rows).filter(\n    (argType) => argType?.control && !argType?.table?.disable\n  ).length;\n  const suffix = controlsCount === 0 ? '' : <Badge status=\"neutral\">{controlsCount}</Badge>;\n   return (\n    <div>\n      <Spaced col={1}>\n        <span style={{ display: 'inline-block', verticalAlign: 'middle' }}>Controls</span>\n        {suffix}\n      </Spaced>\n    </div>\n  );\n}",
        "import_statements": [
            "import React from 'react';",
            "React",
            "import { dequal as deepEqual } from 'dequal';",
            "{ dequal as deepEqual }",
            "{ dequal as deepEqual }",
            "dequal as deepEqual",
            "import { AddonPanel, Badge, Spaced } from 'storybook/internal/components';",
            "{ AddonPanel, Badge, Spaced }",
            "{ AddonPanel, Badge, Spaced }",
            "AddonPanel",
            "Badge",
            "Spaced",
            "import type {\n  ResponseData,\n  SaveStoryRequestPayload,\n  SaveStoryResponsePayload,\n} from 'storybook/internal/core-events';",
            "{\n  ResponseData,\n  SaveStoryRequestPayload,\n  SaveStoryResponsePayload,\n}",
            "{\n  ResponseData,\n  SaveStoryRequestPayload,\n  SaveStoryResponsePayload,\n}",
            "ResponseData",
            "SaveStoryRequestPayload",
            "SaveStoryResponsePayload",
            "import { SAVE_STORY_REQUEST, SAVE_STORY_RESPONSE } from 'storybook/internal/core-events';",
            "{ SAVE_STORY_REQUEST, SAVE_STORY_RESPONSE }",
            "{ SAVE_STORY_REQUEST, SAVE_STORY_RESPONSE }",
            "SAVE_STORY_REQUEST",
            "SAVE_STORY_RESPONSE",
            "import {\n  addons,\n  experimental_requestResponse,\n  types,\n  useArgTypes,\n} from 'storybook/internal/manager-api';",
            "{\n  addons,\n  experimental_requestResponse,\n  types,\n  useArgTypes,\n}",
            "{\n  addons,\n  experimental_requestResponse,\n  types,\n  useArgTypes,\n}",
            "addons",
            "experimental_requestResponse",
            "types",
            "useArgTypes",
            "import { color } from 'storybook/internal/theming';",
            "{ color }",
            "{ color }",
            "color",
            "import { ControlsPanel } from './ControlsPanel';",
            "{ ControlsPanel }",
            "{ ControlsPanel }",
            "ControlsPanel",
            "import { ADDON_ID, PARAM_KEY } from './constants';",
            "{ ADDON_ID, PARAM_KEY }",
            "{ ADDON_ID, PARAM_KEY }",
            "ADDON_ID",
            "PARAM_KEY",
            "import type { Args } from '@storybook/csf';",
            "{ Args }",
            "{ Args }",
            "Args"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "const highlight = (infos: HighlightInfo) =>",
        "start_line": "26",
        "end_line": "44",
        "file_path": "code/addons/highlight/src/preview.ts",
        "docstring": "This function, highlight, applies highlight styles to specified elements.\\nIt first resets any existing highlights and ensures no duplicate selectors in the elements array.\\nIt creates a new style element, sets its ID, and defines CSS rules for each element based on the provided highlight information.\\nThe style element is then appended to the document head.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b8fba20204d6",
        "ground_truth": "const highlight = (infos: HighlightInfo) => {\n  const id = HIGHLIGHT_STYLE_ID;\n  resetHighlight();\n   // Make sure there are no duplicated selectors\n  const elements = Array.from(new Set(infos.elements));\n   const sheet = document.createElement('style');\n  sheet.setAttribute('id', id);\n  sheet.innerHTML = elements\n    .map(\n      (target) =>\n        `${target}{\n          ${highlightStyle(infos.color, infos.style)}\n         }`\n    )\n    .join(' ');\n  document.head.appendChild(sheet);\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import { addons } from 'storybook/internal/preview-api';",
            "{ addons }",
            "{ addons }",
            "addons",
            "import { STORY_CHANGED } from 'storybook/internal/core-events';",
            "{ STORY_CHANGED }",
            "{ STORY_CHANGED }",
            "STORY_CHANGED",
            "import { HIGHLIGHT, RESET_HIGHLIGHT, HIGHLIGHT_STYLE_ID } from './constants';",
            "{ HIGHLIGHT, RESET_HIGHLIGHT, HIGHLIGHT_STYLE_ID }",
            "{ HIGHLIGHT, RESET_HIGHLIGHT, HIGHLIGHT_STYLE_ID }",
            "HIGHLIGHT",
            "RESET_HIGHLIGHT",
            "HIGHLIGHT_STYLE_ID"
        ],
        "reference_api": [
            "highlightStyle"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "highlightStyle",
                "code": "c"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "const resetHighlight = () =>",
        "start_line": "46",
        "end_line": "52",
        "file_path": "code/addons/highlight/src/preview.ts",
        "docstring": "This function, resetHighlight, removes a stylesheet with a specific ID from the document.\\nIt retrieves the element by the ID and, if it exists, removes it from its parent node.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "08a3fb827e48",
        "ground_truth": "const resetHighlight = () => {\n  const id = HIGHLIGHT_STYLE_ID;\n  const sheetToBeRemoved = document.getElementById(id);\n  if (sheetToBeRemoved) {\n    sheetToBeRemoved.parentNode?.removeChild(sheetToBeRemoved);\n  }\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import { addons } from 'storybook/internal/preview-api';",
            "{ addons }",
            "{ addons }",
            "addons",
            "import { STORY_CHANGED } from 'storybook/internal/core-events';",
            "{ STORY_CHANGED }",
            "{ STORY_CHANGED }",
            "STORY_CHANGED",
            "import { HIGHLIGHT, RESET_HIGHLIGHT, HIGHLIGHT_STYLE_ID } from './constants';",
            "{ HIGHLIGHT, RESET_HIGHLIGHT, HIGHLIGHT_STYLE_ID }",
            "{ HIGHLIGHT, RESET_HIGHLIGHT, HIGHLIGHT_STYLE_ID }",
            "HIGHLIGHT",
            "RESET_HIGHLIGHT",
            "HIGHLIGHT_STYLE_ID"
        ],
        "reference_api": [
            "sheetToBeRemoved.parentNode?.removeChild",
            "document.getElementById"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "sheetToBeRemoved.parentNode?.removeChild",
                "code": "c"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "function parseQuery(queryString: string)",
        "start_line": "20",
        "end_line": "31",
        "file_path": "code/addons/links/src/utils.ts",
        "docstring": "This function, parseQuery, parses a query string into an object.\\nIt initializes an empty object and processes the query string by removing the leading '?' if present and splitting it into key-value pairs.\\nEach pair is decoded and added to the object, with keys and values properly handled for URL encoding.\\nThe resulting object contains the parsed query parameters.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "1287df4e99b3",
        "ground_truth": "function parseQuery(queryString: string) {\n  const query: Record<string, string> = {};\n  const pairs = (queryString[0] === '?' ? queryString.substring(1) : queryString)\n    .split('&')\n    .filter(Boolean);\n   for (let i = 0; i < pairs.length; i++) {\n    const pair = pairs[i].split('=');\n    query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');\n  }\n  return query;\n}",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import { addons, makeDecorator } from 'storybook/internal/preview-api';",
            "{ addons, makeDecorator }",
            "{ addons, makeDecorator }",
            "addons",
            "makeDecorator",
            "import { STORY_CHANGED, SELECT_STORY } from 'storybook/internal/core-events';",
            "{ STORY_CHANGED, SELECT_STORY }",
            "{ STORY_CHANGED, SELECT_STORY }",
            "STORY_CHANGED",
            "SELECT_STORY",
            "import type { StoryId, StoryName, ComponentTitle, StoryKind } from 'storybook/internal/types';",
            "{ StoryId, StoryName, ComponentTitle, StoryKind }",
            "{ StoryId, StoryName, ComponentTitle, StoryKind }",
            "StoryId",
            "StoryName",
            "ComponentTitle",
            "StoryKind",
            "import { toId } from '@storybook/csf';",
            "{ toId }",
            "{ toId }",
            "toId",
            "import { PARAM_KEY } from './constants';",
            "{ PARAM_KEY }",
            "{ PARAM_KEY }",
            "PARAM_KEY"
        ],
        "reference_api": [
            "decodeURIComponent",
            "(queryString[0] === '?' ? queryString.substring(1) : queryString)\n    .split",
            "queryString.substring",
            "(queryString[0] === '?' ? queryString.substring(1) : queryString)\n    .split('&')\n    .filter",
            "pairs[i].split"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "(queryString[0] === '?' ? queryString.substring(1) : queryString)\n    .split",
                "code": "p"
            },
            {
                "name": "queryString.substring",
                "code": "p"
            },
            {
                "name": "(queryString[0] === '?' ? queryString.substring(1) : queryString)\n    .split('&')\n    .filter",
                "code": "p"
            },
            {
                "name": "pairs[i].split",
                "code": "p"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "const linksListener = (e: Event) =>",
        "start_line": "79",
        "end_line": "90",
        "file_path": "code/addons/links/src/utils.ts",
        "docstring": "This function, linksListener, handles click events on elements.\\nIt checks if the event target is an HTML element and retrieves its dataset properties sbKind and sbStory.\\nIf either property is present, it prevents the default action and calls the navigate function with the kind and story values.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "83c4f520b99a",
        "ground_truth": "const linksListener = (e: Event) => {\n  const { target } = e;\n  if (!(target instanceof HTMLElement)) {\n    return;\n  }\n  const element = target as HTMLElement;\n  const { sbKind: kind, sbStory: story } = element.dataset;\n  if (kind || story) {\n    e.preventDefault();\n    navigate({ kind, story });\n  }\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import { addons, makeDecorator } from 'storybook/internal/preview-api';",
            "{ addons, makeDecorator }",
            "{ addons, makeDecorator }",
            "addons",
            "makeDecorator",
            "import { STORY_CHANGED, SELECT_STORY } from 'storybook/internal/core-events';",
            "{ STORY_CHANGED, SELECT_STORY }",
            "{ STORY_CHANGED, SELECT_STORY }",
            "STORY_CHANGED",
            "SELECT_STORY",
            "import type { StoryId, StoryName, ComponentTitle, StoryKind } from 'storybook/internal/types';",
            "{ StoryId, StoryName, ComponentTitle, StoryKind }",
            "{ StoryId, StoryName, ComponentTitle, StoryKind }",
            "StoryId",
            "StoryName",
            "ComponentTitle",
            "StoryKind",
            "import { toId } from '@storybook/csf';",
            "{ toId }",
            "{ toId }",
            "toId",
            "import { PARAM_KEY } from './constants';",
            "{ PARAM_KEY }",
            "{ PARAM_KEY }",
            "PARAM_KEY"
        ],
        "reference_api": [
            "e.preventDefault",
            "navigate"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "e.preventDefault",
                "code": "p"
            },
            {
                "name": "navigate",
                "code": "p"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "const crawlShadows = (node: HTMLElement): HTMLElement =>",
        "start_line": "6",
        "end_line": "24",
        "file_path": "code/addons/measure/src/util.ts",
        "docstring": "This function, crawlShadows, recursively navigates through the shadow DOM of a given HTML element.\\nIf the element has a shadow root, it finds the nested element at specific coordinates using elementFromPoint.\\nIf the nested element is the same as the root element, it returns the root element.\\nIf the nested element also has a shadow root, the function calls itself recursively.\\nIf there are no more shadow DOMs, it returns the nested element.\\nIf the element does not have a shadow root, it returns the element itself.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8b8e277eb593",
        "ground_truth": "const crawlShadows = (node: HTMLElement): HTMLElement => {\n  if (node && node.shadowRoot) {\n    // elementFromPoint() doesn't exist in ShadowRoot type\n    const nestedElement = (node.shadowRoot as any).elementFromPoint(x, y);\n    // Nested node is same as the root one\n    if (node.isEqualNode(nestedElement)) {\n      return node;\n    }\n    // The nested node has shadow DOM too so continue crawling\n    if (nestedElement.shadowRoot) {\n      return crawlShadows(nestedElement);\n    }\n    // No more shadow DOM\n    return nestedElement;\n  }\n  return node;\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global"
        ],
        "reference_api": [
            "(node.shadowRoot as any).elementFromPoint",
            "node.isEqualNode",
            "crawlShadows"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "(node.shadowRoot as any).elementFromPoint",
                "code": "x"
            },
            {
                "name": "node.isEqualNode",
                "code": "x"
            },
            {
                "name": "crawlShadows",
                "code": "x"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "function createCanvas(): CanvasState",
        "start_line": "24",
        "end_line": "42",
        "file_path": "code/addons/measure/src/box-model/canvas.ts",
        "docstring": "This function, createCanvas, creates and configures an HTML canvas element.\\nIt sets the canvas ID and obtains its 2D drawing context, ensuring the context is not null.\\nThe canvas dimensions are set based on the document's width and height.\\nThe canvas is positioned absolutely at the top-left corner of the document with a high z-index and pointer events disabled to prevent user interactions.\\nFinally, the canvas is appended to the document body, and an object containing the canvas, context, width, and height is returned.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2fa298c35659",
        "ground_truth": "function createCanvas(): CanvasState {\n  const canvas = global.document.createElement('canvas');\n  canvas.id = 'storybook-addon-measure';\n  const context = canvas.getContext('2d');\n  invariant(context != null);\n  // Set canvas width & height\n  const { width, height } = getDocumentWidthAndHeight();\n  setCanvasWidthAndHeight(canvas, context, { width, height });\n  // Position canvas\n  canvas.style.position = 'absolute';\n  canvas.style.left = '0';\n  canvas.style.top = '0';\n  canvas.style.zIndex = '2147483647';\n  // Disable any user interactions\n  canvas.style.pointerEvents = 'none';\n  global.document.body.appendChild(canvas);\n   return { canvas, context, width, height };\n}",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global",
            "import invariant from 'tiny-invariant';",
            "invariant"
        ],
        "reference_api": [
            "canvas.getContext",
            "global.document.body.appendChild",
            "global.document.createElement",
            "setCanvasWidthAndHeight",
            "invariant",
            "getDocumentWidthAndHeight"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "setCanvasWidthAndHeight",
                "code": "u"
            },
            {
                "name": "getDocumentWidthAndHeight",
                "code": "u"
            }
        ],
        "third_party": [
            "canvas.getContext",
            "global.document.body.appendChild",
            "global.document.createElement",
            "invariant"
        ]
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "export const experimental_serverChannel = async (channel: Channel, options: Options) =>",
        "start_line": "14",
        "end_line": "36",
        "file_path": "code/addons/onboarding/src/preset.ts",
        "docstring": "This async function, experimental_serverChannel, configures a server channel with optional telemetry support.\\nIt applies core configuration presets to check if telemetry is disabled.\\nIf telemetry is enabled, it reads the version of the '@storybook/addon-onboarding' package and listens for telemetry events on the channel.\\nWhen a telemetry event is received, it sends telemetry data including the event details and addon version.\\nFinally, it returns the configured channel.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0484eaeba359",
        "ground_truth": "export const experimental_serverChannel = async (channel: Channel, options: Options) => {\n  const { disableTelemetry } = await options.presets.apply<CoreConfig>('core', {});\n   if (!disableTelemetry) {\n    const packageJsonPath = require.resolve('@storybook/addon-onboarding/package.json');\n     const { version: addonVersion } = JSON.parse(\n      fs.readFileSync(packageJsonPath, { encoding: 'utf-8' })\n    );\n     channel.on(STORYBOOK_ADDON_ONBOARDING_CHANNEL, ({ type, ...event }: Event) => {\n      if (type === 'telemetry') {\n        // @ts-expect-error (bad string)\n        telemetry('addon-onboarding', {\n          ...event,\n          addonVersion,\n        });\n      }\n    });\n  }\n   return channel;\n};",
        "import_statements": [
            "import type { CoreConfig, Options } from 'storybook/internal/types';",
            "{ CoreConfig, Options }",
            "{ CoreConfig, Options }",
            "CoreConfig",
            "Options",
            "import type { Channel } from 'storybook/internal/channels';",
            "{ Channel }",
            "{ Channel }",
            "Channel",
            "import { STORYBOOK_ADDON_ONBOARDING_CHANNEL } from './constants';",
            "{ STORYBOOK_ADDON_ONBOARDING_CHANNEL }",
            "{ STORYBOOK_ADDON_ONBOARDING_CHANNEL }",
            "STORYBOOK_ADDON_ONBOARDING_CHANNEL",
            "import { telemetry } from 'storybook/internal/telemetry';",
            "{ telemetry }",
            "{ telemetry }",
            "telemetry",
            "import fs from 'fs';",
            "fs"
        ],
        "reference_api": [
            "telemetry"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "telemetry",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "storybookjs/storybook",
        "function_declaration": "export const addOutlineStyles = (selector: string, css: string) => ",
        "start_line": "16",
        "end_line": "28",
        "file_path": "code/addons/outline/src/helpers.ts",
        "docstring": "This function, addOutlineStyles, adds or updates a style block in the document head based on a given selector and CSS string.\\nIt first checks if a style element with the specified selector ID already exists.\\nIf it exists and its content differs from the provided CSS, it updates the content.\\nIf it does not exist, it creates a new style element with the given ID and CSS, then appends it to the document head.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8552de1f8368",
        "ground_truth": "export const addOutlineStyles = (selector: string, css: string) => {\n  const existingStyle = global.document.getElementById(selector);\n  if (existingStyle) {\n    if (existingStyle.innerHTML !== css) {\n      existingStyle.innerHTML = css;\n    }\n  } else {\n    const style = global.document.createElement('style');\n    style.setAttribute('id', selector);\n    style.innerHTML = css;\n    global.document.head.appendChild(style);\n  }\n};",
        "import_statements": [
            "import { global } from '@storybook/global';",
            "{ global }",
            "{ global }",
            "global"
        ],
        "reference_api": [
            "global.document.getElementById",
            "global.document.head.appendChild",
            "global.document.createElement",
            "style.setAttribute"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "global.document.getElementById",
                "code": "s"
            },
            {
                "name": "global.document.head.appendChild",
                "code": "s"
            },
            {
                "name": "global.document.createElement",
                "code": "s"
            },
            {
                "name": "style.setAttribute",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "export async function loadActiveTranslations(\n  context: BuilderContext,\n  i18n: NormalizedApplicationBuildOptions['i18nOptions'],\n)",
        "start_line": "151",
        "end_line": "185",
        "file_path": "packages/angular/build/src/builders/application/i18n.ts",
        "docstring": "This async function, loadActiveTranslations, loads active translations based on the provided context and internationalization options.\\nIt iterates through the locales, skipping those not marked for inlining and not the source locale.\\nIf the locale has associated translation files, it initializes a translation loader and loads the translations with warning and error handling based on the context's logger and the specified duplicate translation behavior.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2472b6d48b9a",
        "ground_truth": "export async function loadActiveTranslations(\n  context: BuilderContext,\n  i18n: NormalizedApplicationBuildOptions['i18nOptions'],\n) {\n  // Load locale data and translations (if present)\n  let loader;\n  for (const [locale, desc] of Object.entries(i18n.locales)) {\n    if (!i18n.inlineLocales.has(locale) && locale !== i18n.sourceLocale) {\n      continue;\n    }\n     if (!desc.files.length) {\n      continue;\n    }\n     loader ??= await createTranslationLoader();\n     loadTranslations(\n      locale,\n      desc,\n      context.workspaceRoot,\n      loader,\n      {\n        warn(message) {\n          context.logger.warn(message);\n        },\n        error(message) {\n          throw new Error(message);\n        },\n      },\n      undefined,\n      i18n.duplicateTranslationBehavior,\n    );\n  }\n}",
        "import_statements": [
            "import { BuilderContext } from '@angular-devkit/architect';",
            "{ BuilderContext }",
            "{ BuilderContext }",
            "BuilderContext",
            "import { join, posix } from 'node:path';",
            "{ join, posix }",
            "{ join, posix }",
            "join",
            "posix",
            "import { BuildOutputFileType, InitialFileRecord } from '../../tools/esbuild/bundler-context';",
            "{ BuildOutputFileType, InitialFileRecord }",
            "{ BuildOutputFileType, InitialFileRecord }",
            "BuildOutputFileType",
            "InitialFileRecord",
            "import { ExecutionResult } from '../../tools/esbuild/bundler-execution-result';",
            "{ ExecutionResult }",
            "{ ExecutionResult }",
            "ExecutionResult",
            "import { I18nInliner } from '../../tools/esbuild/i18n-inliner';",
            "{ I18nInliner }",
            "{ I18nInliner }",
            "I18nInliner",
            "import { maxWorkers } from '../../utils/environment-options';",
            "{ maxWorkers }",
            "{ maxWorkers }",
            "maxWorkers",
            "import { loadTranslations } from '../../utils/i18n-options';",
            "{ loadTranslations }",
            "{ loadTranslations }",
            "loadTranslations",
            "import { createTranslationLoader } from '../../utils/load-translations';",
            "{ createTranslationLoader }",
            "{ createTranslationLoader }",
            "createTranslationLoader",
            "import { urlJoin } from '../../utils/url';",
            "{ urlJoin }",
            "{ urlJoin }",
            "urlJoin",
            "import { executePostBundleSteps } from './execute-post-bundle';",
            "{ executePostBundleSteps }",
            "{ executePostBundleSteps }",
            "executePostBundleSteps",
            "import { NormalizedApplicationBuildOptions } from './options';",
            "{ NormalizedApplicationBuildOptions }",
            "{ NormalizedApplicationBuildOptions }",
            "NormalizedApplicationBuildOptions"
        ],
        "reference_api": [
            "error"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "error",
                "code": "f"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "export function buildApplication(\n  options: ApplicationBuilderOptions,\n  context: BuilderContext,\n  pluginsOrExtensions?: Plugin[] | ApplicationBuilderExtensions,\n): AsyncIterable<ApplicationBuilderOutput>",
        "start_line": "191",
        "end_line": "208",
        "file_path": "packages/angular/build/src/builders/application/index.ts",
        "docstring": "This async generator function, buildApplication, builds an application based on provided options and context.\\nIt handles optional plugins or extensions, normalizing them if they are an array of plugins.\\nThe function iterates over results from an internal build function, yielding an object indicating success based on the result kind.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "24579c798101",
        "ground_truth": "export async function* buildApplication(\n  options: ApplicationBuilderOptions,\n  context: BuilderContext,\n  pluginsOrExtensions?: Plugin[] | ApplicationBuilderExtensions,\n): AsyncIterable<ApplicationBuilderOutput> {\n  let extensions: ApplicationBuilderExtensions | undefined;\n  if (pluginsOrExtensions && Array.isArray(pluginsOrExtensions)) {\n    extensions = {\n      codePlugins: pluginsOrExtensions,\n    };\n  } else {\n    extensions = pluginsOrExtensions;\n  }\n   for await (const result of buildApplicationInternal(options, context, undefined, extensions)) {\n    yield { success: result.kind !== ResultKind.Failure };\n  }\n}",
        "import_statements": [
            "import { BuilderContext, BuilderOutput, createBuilder } from '@angular-devkit/architect';",
            "import type { Plugin } from 'esbuild';",
            "import { BuildOutputFile, BuildOutputFileType } from '../../tools/esbuild/bundler-context';",
            "import { createJsonBuildManifest } from '../../tools/esbuild/utils';",
            "import { colors as ansiColors } from '../../utils/color';",
            "import { purgeStaleBuildCache } from '../../utils/purge-cache';",
            "import { assertCompatibleAngularVersion } from '../../utils/version';",
            "import { runEsBuildBuildAction } from './build-action';",
            "import { executeBuild } from './execute-build';",
            "import { ApplicationBuilderExtensions, ApplicationBuilderInternalOptions, normalizeOptions } from './options';",
            "import { Result, ResultKind } from './results';",
            "import { Schema as ApplicationBuilderOptions } from './schema';",
            "{ BuilderContext, BuilderOutput, createBuilder }",
            "{ Plugin }",
            "{ BuildOutputFile, BuildOutputFileType }",
            "{ createJsonBuildManifest }",
            "{ colors as ansiColors }",
            "{ purgeStaleBuildCache }",
            "{ assertCompatibleAngularVersion }",
            "{ runEsBuildBuildAction }",
            "{ executeBuild }",
            "{ ApplicationBuilderExtensions, ApplicationBuilderInternalOptions, normalizeOptions }",
            "{ Result, ResultKind }",
            "{ Schema as ApplicationBuilderOptions }",
            "BuilderContext",
            "BuilderOutput",
            "createBuilder",
            "Plugin",
            "BuildOutputFile",
            "BuildOutputFileType",
            "createJsonBuildManifest",
            "colors as ansiColors",
            "purgeStaleBuildCache",
            "assertCompatibleAngularVersion",
            "runEsBuildBuildAction",
            "executeBuild",
            "ApplicationBuilderExtensions",
            "ApplicationBuilderInternalOptions",
            "normalizeOptions",
            "Result",
            "ResultKind",
            "Schema as ApplicationBuilderOptions"
        ],
        "reference_api": [
            "buildApplicationInternal"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "buildApplicationInternal",
                "code": ""
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "const diagnostics = checkDuplicateMessages",
        "start_line": "81",
        "end_line": "88",
        "file_path": "packages/angular/build/src/builders/extract-i18n/builder.ts",
        "docstring": "This function, diagnostics, calls checkDuplicateMessages with parameters including checkFileSystem, extractionResult.messages, 'warning', and extractionResult.basePath.\\nIt aims to identify duplicate messages, treating checkFileSystem and extractionResult.basePath as any type to bypass TypeScript's type checking.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "126e9e9e4010",
        "ground_truth": "const diagnostics = checkDuplicateMessages(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  checkFileSystem as any,\n  extractionResult.messages,\n  'warning',\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  extractionResult.basePath as any,\n);",
        "import_statements": [
            "import type { Diagnostics } from '@angular/localize/tools';",
            "{ Diagnostics }",
            "{ Diagnostics }",
            "Diagnostics",
            "import type { BuilderContext, BuilderOutput } from '@angular-devkit/architect';",
            "{ BuilderContext, BuilderOutput }",
            "{ BuilderContext, BuilderOutput }",
            "BuilderContext",
            "BuilderOutput",
            "import fs from 'node:fs';",
            "fs",
            "import path from 'node:path';",
            "path",
            "import { loadEsmModule } from '../../utils/load-esm';",
            "{ loadEsmModule }",
            "{ loadEsmModule }",
            "loadEsmModule",
            "import { assertCompatibleAngularVersion } from '../../utils/version';",
            "{ assertCompatibleAngularVersion }",
            "{ assertCompatibleAngularVersion }",
            "assertCompatibleAngularVersion",
            "import type { ApplicationBuilderExtensions } from '../application/options';",
            "{ ApplicationBuilderExtensions }",
            "{ ApplicationBuilderExtensions }",
            "ApplicationBuilderExtensions",
            "import { normalizeOptions } from './options';",
            "{ normalizeOptions }",
            "{ normalizeOptions }",
            "normalizeOptions",
            "import { Schema as ExtractI18nBuilderOptions, Format } from './schema';",
            "{ Schema as ExtractI18nBuilderOptions, Format }",
            "{ Schema as ExtractI18nBuilderOptions, Format }",
            "Schema as ExtractI18nBuilderOptions",
            "Format"
        ],
        "reference_api": [
            "import",
            "fs.writeFileSync",
            "path.dirname",
            "diagnostics.formatDiagnostics",
            "fs.mkdirSync",
            "path.relative",
            "context.logger.info",
            "assertCompatibleAngularVersion",
            "checkDuplicateMessages",
            "context.getBuilderNameForTarget",
            "context.logger.warn",
            "normalizeOptions",
            "serializer.serialize",
            "createSerializer",
            "context.logger.error",
            "extractMessages",
            "fs.existsSync"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "createSerializer",
                "code": "s"
            }
        ],
        "third_party": [
            "import",
            "fs.writeFileSync",
            "path.dirname",
            "diagnostics.formatDiagnostics",
            "fs.mkdirSync",
            "path.relative",
            "context.logger.info",
            "assertCompatibleAngularVersion",
            "checkDuplicateMessages",
            "context.getBuilderNameForTarget",
            "context.logger.warn",
            "normalizeOptions",
            "serializer.serialize",
            "context.logger.error",
            "extractMessages",
            "fs.existsSync"
        ]
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "function isTslibHelperName(name: string): boolean",
        "start_line": "24",
        "end_line": "33",
        "file_path": "packages/angular/build/src/tools/babel/plugins/pure-toplevel-functions.ts",
        "docstring": "This function, isTslibHelperName, checks if a given name is a valid tslib helper name.\\nIt splits the name by the '$' character and extracts the original name.\\nIf the name has more than two parts or if the second part is not a number, it returns false.\\nOtherwise, it checks if the original name exists in the tslibHelpers set and returns the result.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "349518a072df",
        "ground_truth": "function isTslibHelperName(name: string): boolean {\n  const nameParts = name.split('$');\n  const originalName = nameParts[0];\n   if (nameParts.length > 2 || (nameParts.length === 2 && isNaN(+nameParts[1]))) {\n    return false;\n  }\n   return tslibHelpers.has(originalName);\n}",
        "import_statements": [
            "import type { PluginObj } from '@babel/core';",
            "{ PluginObj }",
            "{ PluginObj }",
            "PluginObj",
            "import annotateAsPure from '@babel/helper-annotate-as-pure';",
            "annotateAsPure",
            "import * as tslib from 'tslib';",
            "* as tslib",
            "* as tslib"
        ],
        "reference_api": [
            "isNaN",
            "name.split",
            "tslibHelpers.has"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "name.split",
                "code": "h"
            },
            {
                "name": "tslibHelpers.has",
                "code": "h"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "async bundle(): Promise<BundleContextResult>",
        "start_line": "189",
        "end_line": "201",
        "file_path": "packages/angular/build/src/tools/esbuild/bundler-context.ts",
        "docstring": "This async function, bundle, returns a BundleContextResult.\\nIf a cached result is available, it returns this existing result.\\nOtherwise, it performs a bundle operation and, if caching is enabled, stores the result for future use.\\nFinally, it returns the result of the bundle operation.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0a9b3093b5bc",
        "ground_truth": "async bundle(): Promise<BundleContextResult> {\n // Return existing result if present\n if (this.#esbuildResult) {\n   return this.#esbuildResult;\n }\n const result = await this.#performBundle();\n if (this.#shouldCacheResult) {\n   this.#esbuildResult = result;\n }\n return result;\n}",
        "import_statements": [
            "import {\n  BuildContext,\n  BuildFailure,\n  BuildOptions,\n  BuildResult,\n  Message,\n  Metafile,\n  OutputFile,\n  build,\n  context,\n} from 'esbuild';",
            "{\n  BuildContext,\n  BuildFailure,\n  BuildOptions,\n  BuildResult,\n  Message,\n  Metafile,\n  OutputFile,\n  build,\n  context,\n}",
            "{\n  BuildContext,\n  BuildFailure,\n  BuildOptions,\n  BuildResult,\n  Message,\n  Metafile,\n  OutputFile,\n  build,\n  context,\n}",
            "BuildContext",
            "BuildFailure",
            "BuildOptions",
            "BuildResult",
            "Message",
            "Metafile",
            "OutputFile",
            "build",
            "context",
            "import assert from 'node:assert';",
            "assert",
            "import { basename, extname, join, relative } from 'node:path';",
            "{ basename, extname, join, relative }",
            "{ basename, extname, join, relative }",
            "basename",
            "extname",
            "join",
            "relative",
            "import { LoadResultCache, MemoryLoadResultCache } from './load-result-cache';",
            "{ LoadResultCache, MemoryLoadResultCache }",
            "{ LoadResultCache, MemoryLoadResultCache }",
            "LoadResultCache",
            "MemoryLoadResultCache",
            "import { convertOutputFile } from './utils';",
            "{ convertOutputFile }",
            "{ convertOutputFile }",
            "convertOutputFile"
        ],
        "reference_api": [
            "this.#performBundle"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.#performBundle",
                "code": "."
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "findChangedFiles(previousOutputHashes: Map<string, string>): Set<string> ",
        "start_line": "158",
        "end_line": "168",
        "file_path": "packages/angular/build/src/tools/esbuild/bundler-execution-result.ts",
        "docstring": "This function, findChangedFiles, identifies files with changed content by comparing their current hashes with previous hashes.\\nIt iterates over the output files, and if a file's previous hash is undefined or different from its current hash, it adds the file path to a set of changed files.\\nThe function returns this set of changed files.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "f4fe3e6ac648",
        "ground_truth": "findChangedFiles(previousOutputHashes: Map<string, string>): Set<string> {\n  const changed = new Set<string>();\n  for (const file of this.outputFiles) {\n    const previousHash = previousOutputHashes.get(file.path);\n    if (previousHash === undefined || previousHash !== file.hash) {\n      changed.add(file.path);\n    }\n  }\n  return changed;\n}",
        "import_statements": [
            "import type { Message, PartialMessage } from 'esbuild';",
            "{ Message, PartialMessage }",
            "{ Message, PartialMessage }",
            "Message",
            "PartialMessage",
            "import { normalize } from 'node:path';",
            "{ normalize }",
            "{ normalize }",
            "normalize",
            "import type { ChangedFiles } from '../../tools/esbuild/watcher';",
            "{ ChangedFiles }",
            "{ ChangedFiles }",
            "ChangedFiles",
            "import type { SourceFileCache } from './angular/source-file-cache';",
            "{ SourceFileCache }",
            "{ SourceFileCache }",
            "SourceFileCache",
            "import type { BuildOutputFile, BuildOutputFileType, BundlerContext } from './bundler-context';",
            "{ BuildOutputFile, BuildOutputFileType, BundlerContext }",
            "{ BuildOutputFile, BuildOutputFileType, BundlerContext }",
            "BuildOutputFile",
            "BuildOutputFileType",
            "BundlerContext",
            "import { createOutputFile } from './utils';",
            "{ createOutputFile }",
            "{ createOutputFile }",
            "createOutputFile"
        ],
        "reference_api": [
            "changed.add",
            "findChangedFiles",
            "previousOutputHashes.get"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "changed.add",
                "code": "a"
            },
            {
                "name": "findChangedFiles",
                "code": "a"
            },
            {
                "name": "previousOutputHashes.get",
                "code": "a"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "async function loadLocalizeTools(): Promise<LocalizeUtilityModule> ",
        "start_line": "87",
        "end_line": "94",
        "file_path": "packages/angular/build/src/tools/esbuild/i18n-inliner-worker.ts",
        "docstring": "This async function, loadLocalizeTools, loads the localization tools module if it has not been loaded already.\\nIt uses a nullish coalescing assignment to await the loading of the module from '@angular/localize/tools'.\\nFinally, it returns the loaded localization tools module.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8969b8ce5198",
        "ground_truth": "async function loadLocalizeTools(): Promise<LocalizeUtilityModule> {\n  // Load ESM `@angular/localize/tools` using the TypeScript dynamic import workaround.\n  // Once TypeScript provides support for keeping the dynamic import this workaround can be\n  // changed to a direct dynamic import.\n  localizeToolsModule ??= await loadEsmModule<LocalizeUtilityModule>('@angular/localize/tools');\n   return localizeToolsModule;\n}",
        "import_statements": [
            "import remapping, { SourceMapInput } from '@ampproject/remapping';",
            "remapping, { SourceMapInput }",
            "{ SourceMapInput }",
            "SourceMapInput",
            "import { PluginObj, parseSync, transformFromAstAsync, types } from '@babel/core';",
            "{ PluginObj, parseSync, transformFromAstAsync, types }",
            "{ PluginObj, parseSync, transformFromAstAsync, types }",
            "PluginObj",
            "parseSync",
            "transformFromAstAsync",
            "types",
            "import assert from 'node:assert';",
            "assert",
            "import { workerData } from 'node:worker_threads';",
            "{ workerData }",
            "{ workerData }",
            "workerData",
            "import { assertIsError } from '../../utils/error';",
            "{ assertIsError }",
            "{ assertIsError }",
            "assertIsError",
            "import { loadEsmModule } from '../../utils/load-esm';",
            "{ loadEsmModule }",
            "{ loadEsmModule }",
            "loadEsmModule"
        ],
        "reference_api": [
            "await loadEsmModule"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "await loadEsmModule",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "async function createI18nPlugins(locale: string, translation: Record<string, unknown> | undefined)",
        "start_line": "102",
        "end_line": "127",
        "file_path": "packages/angular/build/src/tools/esbuild/i18n-inliner-worker.ts",
        "docstring": "This async function, createI18nPlugins, generates a set of i18n plugins for localization based on the provided locale and translation.\\nIt loads localization tools, initializes diagnostics, and creates a translation plugin handling missing translations.\\nAdditionally, it creates a plugin to replace a locale specifier constant with the actual locale.\\nFinally, it returns an object containing the diagnostics and the array of plugins.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "d7c4df80e1ac",
        "ground_truth": "async function createI18nPlugins(locale: string, translation: Record<string, unknown> | undefined) {\n  const { Diagnostics, makeEs2015TranslatePlugin } = await loadLocalizeTools();\n   const plugins: PluginObj[] = [];\n  const diagnostics = new Diagnostics();\n   plugins.push(\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    makeEs2015TranslatePlugin(diagnostics, (translation || {}) as any, {\n      missingTranslation: translation === undefined ? 'ignore' : missingTranslation,\n    }),\n  );\n   // Create a plugin to replace the locale specifier constant inject by the build system with the actual specifier\n  plugins.push({\n    visitor: {\n      StringLiteral(path) {\n        if (path.node.value === '___NG_LOCALE_INSERT___') {\n          path.replaceWith(types.stringLiteral(locale));\n        }\n      },\n    },\n  });\n   return { diagnostics, plugins };\n}",
        "import_statements": [
            "import remapping, { SourceMapInput } from '@ampproject/remapping';",
            "remapping, { SourceMapInput }",
            "{ SourceMapInput }",
            "SourceMapInput",
            "import { PluginObj, parseSync, transformFromAstAsync, types } from '@babel/core';",
            "{ PluginObj, parseSync, transformFromAstAsync, types }",
            "{ PluginObj, parseSync, transformFromAstAsync, types }",
            "PluginObj",
            "parseSync",
            "transformFromAstAsync",
            "types",
            "import assert from 'node:assert';",
            "assert",
            "import { workerData } from 'node:worker_threads';",
            "{ workerData }",
            "{ workerData }",
            "workerData",
            "import { assertIsError } from '../../utils/error';",
            "{ assertIsError }",
            "{ assertIsError }",
            "assertIsError",
            "import { loadEsmModule } from '../../utils/load-esm';",
            "{ loadEsmModule }",
            "{ loadEsmModule }",
            "loadEsmModule"
        ],
        "reference_api": [
            "StringLiteral",
            "path.replaceWith",
            "types.stringLiteral"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "StringLiteral",
                "code": ")"
            },
            {
                "name": "path.replaceWith",
                "code": ")"
            },
            {
                "name": "types.stringLiteral",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "const readAsset = async function (filePath: string): Promise<string>",
        "start_line": "72",
        "end_line": "81",
        "file_path": "packages/angular/build/src/tools/esbuild/index-html-generator.ts",
        "docstring": "This async function, readAsset, reads the content of an asset file given its file path.\\nIt converts the file path to a relative path by removing the leading directory separator.\\nIt then searches for the file in the browserOutputFiles array by matching the path.\\nIf the file is found, it returns the file's text content.\\nIf the file is not found, it throws an error indicating the file does not exist.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "9486259c4631",
        "ground_truth": "const readAsset = async function (filePath: string): Promise<string> {\n  // Remove leading directory separator\n  const relativefilePath = path.relative(virtualOutputPath, filePath);\n  const file = browserOutputFiles.find((file) => file.path === relativefilePath);\n  if (file) {\n    return file.text;\n  }\n  throw new Error(`Output file does not exist: ${relativefilePath}`);\n};",
        "import_statements": [
            "import assert from 'node:assert';",
            "assert",
            "import path from 'node:path';",
            "path",
            "import { NormalizedApplicationBuildOptions } from '../../builders/application/options';",
            "{ NormalizedApplicationBuildOptions }",
            "{ NormalizedApplicationBuildOptions }",
            "NormalizedApplicationBuildOptions",
            "import { IndexHtmlGenerator } from '../../utils/index-file/index-html-generator';",
            "{ IndexHtmlGenerator }",
            "{ IndexHtmlGenerator }",
            "IndexHtmlGenerator",
            "import { BuildOutputFile, BuildOutputFileType, InitialFileRecord } from './bundler-context';",
            "{ BuildOutputFile, BuildOutputFileType, InitialFileRecord }",
            "{ BuildOutputFile, BuildOutputFileType, InitialFileRecord }",
            "BuildOutputFile",
            "BuildOutputFileType",
            "InitialFileRecord"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "async put(path: string, result: OnLoadResult): Promise<void>",
        "start_line": "56",
        "end_line": "70",
        "file_path": "packages/angular/build/src/tools/esbuild/load-result-cache.ts",
        "docstring": "This async function, put, stores the result of a load operation for a given path and updates file dependencies.\\nIt sets the result in the #loadResults map with the path as the key.\\nIf the result contains watch files, it normalizes their paths and updates the #fileDependencies map to track which paths are affected by these watch files.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2206ca03c7ec",
        "ground_truth": "async put(path: string, result: OnLoadResult): Promise<void> {\n  this.#loadResults.set(path, result);\n  if (result.watchFiles) {\n    for (const watchFile of result.watchFiles) {\n      // Normalize the watch file path to ensure OS consistent paths\n      const normalizedWatchFile = normalize(watchFile);\n      let affected = this.#fileDependencies.get(normalizedWatchFile);\n      if (affected === undefined) {\n        affected = new Set();\n        this.#fileDependencies.set(normalizedWatchFile, affected);\n      }\n      affected.add(path);\n    }\n  }\n}",
        "import_statements": [
            "import type { OnLoadResult, PluginBuild } from 'esbuild';",
            "{ OnLoadResult, PluginBuild }",
            "{ OnLoadResult, PluginBuild }",
            "OnLoadResult",
            "PluginBuild",
            "import { normalize } from 'node:path';",
            "{ normalize }",
            "{ normalize }",
            "normalize"
        ],
        "reference_api": [
            "this.#fileDependencies.set",
            "this.#fileDependencies.get",
            "normalize",
            "affected.add",
            "async put(path: string, result: OnLoadResult): Promise<void> {\n    this.#loadResults.set"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.#fileDependencies.set",
                "code": "s"
            },
            {
                "name": "this.#fileDependencies.get",
                "code": "s"
            },
            {
                "name": "normalize",
                "code": "s"
            },
            {
                "name": "affected.add",
                "code": "s"
            },
            {
                "name": "async put(path: string, result: OnLoadResult): Promise<void> {\n    this.#loadResults.set",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "invalidate(path: string): boolean",
        "start_line": "72",
        "end_line": "86",
        "file_path": "packages/angular/build/src/tools/esbuild/load-result-cache.ts",
        "docstring": "This function, invalidate, invalidates the load results for a given path by removing them from the #loadResults map.\\nIt retrieves the affected paths from the #fileDependencies map and attempts to delete each from the #loadResults map.\\nIf any load results are deleted, it sets a flag to true.\\nFinally, it removes the path from the #fileDependencies map and returns whether any load results were found and deleted.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "a261d85630d0",
        "ground_truth": "invalidate(path: string): boolean {\n  const affectedPaths = this.#fileDependencies.get(path);\n  let found = false;\n  if (affectedPaths) {\n    for (const affected of affectedPaths) {\n      if (this.#loadResults.delete(affected)) {\n        found = true;\n      }\n    }\n    this.#fileDependencies.delete(path);\n  }\n  return found;\n}",
        "import_statements": [
            "import type { OnLoadResult, PluginBuild } from 'esbuild';",
            "{ OnLoadResult, PluginBuild }",
            "{ OnLoadResult, PluginBuild }",
            "OnLoadResult",
            "PluginBuild",
            "import { normalize } from 'node:path';",
            "{ normalize }",
            "{ normalize }",
            "normalize"
        ],
        "reference_api": [
            "this.#fileDependencies.delete",
            "this.#fileDependencies.get",
            "invalidate",
            "this.#loadResults.delete"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.#fileDependencies.delete",
                "code": "s"
            },
            {
                "name": "this.#fileDependencies.get",
                "code": "s"
            },
            {
                "name": "invalidate",
                "code": "s"
            },
            {
                "name": "this.#loadResults.delete",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "function recordDuration(name: string, startTime: bigint, cumulative?: boolean): void",
        "start_line": "45",
        "end_line": "56",
        "file_path": "packages/angular/build/src/tools/esbuild/profiling.ts",
        "docstring": "This function, recordDuration, calculates and records the duration of an event given its name and start time.\\nIf the cumulative flag is true, it stores the duration in a map of cumulative durations.\\nIf the cumulative flag is false, it logs the duration to the console in seconds with nine decimal places.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8fa6dee0ba79",
        "ground_truth": "function recordDuration(name: string, startTime: bigint, cumulative?: boolean): void {\n  const duration = Number(process.hrtime.bigint() - startTime) / 10 ** 9;\n  if (cumulative) {\n    cumulativeDurations ??= new Map<string, number[]>();\n    const durations = cumulativeDurations.get(name) ?? [];\n    durations.push(duration);\n    cumulativeDurations.set(name, durations);\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(`DURATION[${name}]: ${duration.toFixed(9)}s`);\n  }\n}",
        "import_statements": [
            "import { debugPerformance } from '../../utils/environment-options';",
            "{ debugPerformance }",
            "{ debugPerformance }",
            "debugPerformance"
        ],
        "reference_api": [
            "console.log",
            "cumulativeDurations.get",
            "cumulativeDurations.set",
            "durations.push",
            "Number",
            "process.hrtime.bigint",
            "duration.toFixed"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "cumulativeDurations.get",
            "cumulativeDurations.set",
            "durations.push",
            "Number",
            "process.hrtime.bigint",
            "duration.toFixed"
        ]
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "export function ensureSourceFileVersions(program: ts.Program): void",
        "start_line": "35",
        "end_line": "51",
        "file_path": "packages/angular/build/src/tools/angular/angular-host.ts",
        "docstring": "This function, ensureSourceFileVersions, augments a TypeScript program to ensure each source file has a version.\\nIt overrides the program's getSourceFiles method to compute and assign a SHA-256 hash as the version for files that do not have a version defined.\\nThe hash is based on the file's text content.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0c530cbeb386",
        "ground_truth": "export function ensureSourceFileVersions(program: ts.Program): void {\n  const baseGetSourceFiles = program.getSourceFiles;\n  // TODO: Update Angular compiler to add versions to all internal files and remove this\n  program.getSourceFiles = function (...parameters) {\n    const files: readonly (ts.SourceFile & { version?: string })[] = baseGetSourceFiles(\n      ...parameters,\n    );\n     for (const file of files) {\n      if (file.version === undefined) {\n        file.version = createHash('sha256').update(file.text).digest('hex');\n      }\n    }\n     return files;\n  };\n}",
        "import_statements": [
            "import type ng from '@angular/compiler-cli';",
            "ng",
            "import { createHash } from 'node:crypto';",
            "{ createHash }",
            "{ createHash }",
            "createHash",
            "import nodePath from 'node:path';",
            "nodePath",
            "import type ts from 'typescript';",
            "ts"
        ],
        "reference_api": [
            "createHash",
            "createHash('sha256').update(file.text).digest",
            "createHash('sha256').update",
            "baseGetSourceFiles"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "createHash",
                "code": "n"
            },
            {
                "name": "createHash('sha256').update(file.text).digest",
                "code": "n"
            },
            {
                "name": "createHash('sha256').update",
                "code": "n"
            },
            {
                "name": "baseGetSourceFiles",
                "code": "n"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "const tryReplace = (resolvedModule: ts.ResolvedModule | undefined) =>",
        "start_line": "144",
        "end_line": "154",
        "file_path": "packages/angular/build/src/tools/angular/angular-host.ts",
        "docstring": "This function, tryReplace, attempts to replace a resolved module with a normalized replacement if one exists.\\nIt checks if a replacement is available for the resolved module's file name.\\nIf a replacement exists, it returns an object with the replacement file name and a flag indicating if it is an external library import.\\nIf no replacement is found, it returns the original resolved module.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "3faf480d56ae",
        "ground_truth": "const tryReplace = (resolvedModule: ts.ResolvedModule | undefined) => {\n  const replacement = resolvedModule && normalizedReplacements[resolvedModule.resolvedFileName];\n  if (replacement) {\n    return {\n      resolvedFileName: replacement,\n      isExternalLibraryImport: /[/\\\\]node_modules[/\\\\]/.test(replacement),\n    };\n  } else {\n    return resolvedModule;\n  }\n};",
        "import_statements": [
            "import type ng from '@angular/compiler-cli';",
            "ng",
            "import { createHash } from 'node:crypto';",
            "{ createHash }",
            "{ createHash }",
            "createHash",
            "import nodePath from 'node:path';",
            "nodePath",
            "import type ts from 'typescript';",
            "ts"
        ],
        "reference_api": [
            "/[/\\\\]node_modules[/\\\\]/.test"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "/[/\\\\]node_modules[/\\\\]/.test",
                "code": "n"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "get waitUntilReady(): Promise<boolean>",
        "start_line": "15",
        "end_line": "25",
        "file_path": "packages/angular/build/src/tools/esbuild/angular/compilation-state.ts",
        "docstring": "This getter, waitUntilReady, returns a promise indicating whether a compilation is ready.\\nIf there is no pending compilation, it resolves immediately with the current error status.\\nIf a compilation is pending, it initializes the compilation ready promise if not already set, and returns this promise.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "382672b61228",
        "ground_truth": "get waitUntilReady(): Promise<boolean> {\n  if (!this.#pendingCompilation) {\n    return Promise.resolve(this.#hasErrors);\n  }\n  this.#compilationReadyPromise ??= new Promise((resolve) => {\n    this.#resolveCompilationReady = resolve;\n  });\n  return this.#compilationReadyPromise;\n}",
        "import_statements": [],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "const bundlerContext = await this.#inlineContexts.getOrCreate(entry, () =>",
        "start_line": "58",
        "end_line": "91",
        "file_path": "packages/angular/build/src/tools/esbuild/angular/component-stylesheets.ts",
        "docstring": "This async function retrieves or creates a bundler context for a given entry using #inlineContexts.\\nIt defines a namespace 'angular:styles/component' and creates a new BundlerContext with workspace root and incremental options.\\nThe context setup includes creating stylesheet bundle options, setting entry points, and adding a plugin to handle Angular component styles.\\nThe plugin resolves and loads stylesheets, specifying the path, namespace, content, loader, and resolve directory.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "27f631043b39",
        "ground_truth": "const bundlerContext = await this.#inlineContexts.getOrCreate(entry, () => {\n  const namespace = 'angular:styles/component';\n  return new BundlerContext(this.options.workspaceRoot, this.incremental, (loadCache) => {\n    const buildOptions = createStylesheetBundleOptions(this.options, loadCache, {\n      [entry]: data,\n    });\n    buildOptions.entryPoints = [`${namespace};${entry}`];\n    buildOptions.plugins.push({\n      name: 'angular-component-styles',\n      setup(build) {\n        build.onResolve({ filter: /^angular:styles\\/component;/ }, (args) => {\n          if (args.kind !== 'entry-point') {\n            return null;\n          }\n          return {\n            path: entry,\n            namespace,\n          };\n        });\n        build.onLoad({ filter: /^css;/, namespace }, () => {\n          return {\n            contents: data,\n            loader: 'css',\n            resolveDir: path.dirname(filename),\n          };\n        });\n      },\n    });\n    return buildOptions;\n  });\n});",
        "import_statements": [
            "import { OutputFile } from 'esbuild';",
            "{ OutputFile }",
            "{ OutputFile }",
            "OutputFile",
            "import { createHash } from 'node:crypto';",
            "{ createHash }",
            "{ createHash }",
            "createHash",
            "import path from 'node:path';",
            "path",
            "import { BuildOutputFileType, BundleContextResult, BundlerContext } from '../bundler-context';",
            "{ BuildOutputFileType, BundleContextResult, BundlerContext }",
            "{ BuildOutputFileType, BundleContextResult, BundlerContext }",
            "BuildOutputFileType",
            "BundleContextResult",
            "BundlerContext",
            "import { MemoryCache } from '../cache';",
            "{ MemoryCache }",
            "{ MemoryCache }",
            "MemoryCache",
            "import {\n  BundleStylesheetOptions,\n  createStylesheetBundleOptions,\n} from '../stylesheets/bundle-options';",
            "{\n  BundleStylesheetOptions,\n  createStylesheetBundleOptions,\n}",
            "{\n  BundleStylesheetOptions,\n  createStylesheetBundleOptions,\n}",
            "BundleStylesheetOptions",
            "createStylesheetBundleOptions"
        ],
        "reference_api": [
            "path.dirname"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "path.dirname",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "invalidate(files: Iterable<string>) ",
        "start_line": "97",
        "end_line": "110",
        "file_path": "packages/angular/build/src/tools/esbuild/angular/component-stylesheets.ts",
        "docstring": "This function, invalidate, invalidates cached data for a given set of files if incremental processing is enabled.\\nIt normalizes the file paths and then calls the invalidate method on each bundler in both the #fileContexts and #inlineContexts collections with the normalized file paths.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b89b44b794a7",
        "ground_truth": "invalidate(files: Iterable<string>) {\n  if (!this.incremental) {\n    return;\n  }\n  const normalizedFiles = [...files].map(path.normalize);\n  for (const bundler of this.#fileContexts.values()) {\n    bundler.invalidate(normalizedFiles);\n  }\n  for (const bundler of this.#inlineContexts.values()) {\n    bundler.invalidate(normalizedFiles);\n  }\n}",
        "import_statements": [
            "import { OutputFile } from 'esbuild';",
            "{ OutputFile }",
            "{ OutputFile }",
            "OutputFile",
            "import { createHash } from 'node:crypto';",
            "{ createHash }",
            "{ createHash }",
            "createHash",
            "import path from 'node:path';",
            "path",
            "import { BuildOutputFileType, BundleContextResult, BundlerContext } from '../bundler-context';",
            "{ BuildOutputFileType, BundleContextResult, BundlerContext }",
            "{ BuildOutputFileType, BundleContextResult, BundlerContext }",
            "BuildOutputFileType",
            "BundleContextResult",
            "BundlerContext",
            "import { MemoryCache } from '../cache';",
            "{ MemoryCache }",
            "{ MemoryCache }",
            "MemoryCache",
            "import {\n  BundleStylesheetOptions,\n  createStylesheetBundleOptions,\n} from '../stylesheets/bundle-options';",
            "{\n  BundleStylesheetOptions,\n  createStylesheetBundleOptions,\n}",
            "{\n  BundleStylesheetOptions,\n  createStylesheetBundleOptions,\n}",
            "BundleStylesheetOptions",
            "createStylesheetBundleOptions"
        ],
        "reference_api": [
            "bundler.invalidate",
            "[...files].map",
            "invalidate",
            "this.#inlineContexts.values",
            "this.#fileContexts.values"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "bundler.invalidate",
                "code": ")"
            },
            {
                "name": "[...files].map",
                "code": ")"
            },
            {
                "name": "invalidate",
                "code": ")"
            },
            {
                "name": "this.#inlineContexts.values",
                "code": ")"
            },
            {
                "name": "this.#fileContexts.values",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "export function convertTypeScriptDiagnostic(\n  typescript: typeof ts,\n  diagnostic: ts.Diagnostic,\n): PartialMessage ",
        "start_line": "72",
        "end_line": "97",
        "file_path": "packages/angular/build/src/tools/esbuild/angular/diagnostics.ts",
        "docstring": "This function, convertTypeScriptDiagnostic, converts a TypeScript diagnostic into a PartialMessage object.\\nIt sets the code prefix to 'TS' or 'NG' based on the diagnostic source and adjusts the code accordingly.\\nThe main message is created using convertTypeScriptDiagnosticInfo with the prefixed code.\\nIf there is related information, it adds notes to the message by converting each related diagnostic information.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "aa3aa0817adf",
        "ground_truth": "export function convertTypeScriptDiagnostic(\n  typescript: typeof ts,\n  diagnostic: ts.Diagnostic,\n): PartialMessage {\n  let codePrefix = 'TS';\n  let code = `${diagnostic.code}`;\n  if (diagnostic.source === 'ngtsc') {\n    codePrefix = 'NG';\n    // Remove `-99` Angular prefix from diagnostic code\n    code = code.slice(3);\n  }\n   const message: PartialMessage = convertTypeScriptDiagnosticInfo(\n    typescript,\n    diagnostic,\n    `${codePrefix}${code}: `,\n  );\n   if (diagnostic.relatedInformation?.length) {\n    message.notes = diagnostic.relatedInformation.map((info) =>\n      convertTypeScriptDiagnosticInfo(typescript, info),\n    );\n  }\n   return message;\n}",
        "import_statements": [
            "import type { PartialMessage, PartialNote } from 'esbuild';",
            "{ PartialMessage, PartialNote }",
            "{ PartialMessage, PartialNote }",
            "PartialMessage",
            "PartialNote",
            "import { platform } from 'node:os';",
            "{ platform }",
            "{ platform }",
            "platform",
            "import type ts from 'typescript';",
            "ts"
        ],
        "reference_api": [
            "convertTypeScriptDiagnosticInfo"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "convertTypeScriptDiagnosticInfo",
                "code": "u"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "add(containingFile: string, referencedFiles: Iterable<string>): void",
        "start_line": "18",
        "end_line": "34",
        "file_path": "packages/angular/build/src/tools/esbuild/angular/file-reference-tracker.ts",
        "docstring": "This function, add, updates the referencing files map with the relationship between a containing file and its referenced files.\\nIt normalizes the paths of the containing and referenced files.\\nIf a referenced file is the same as the containing file, it skips processing.\\nFor each referenced file, it adds the containing file to a set in the #referencingFiles map, creating a new set if necessary.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0cd0285018f1",
        "ground_truth": "add(containingFile: string, referencedFiles: Iterable<string>): void {\n  const normalizedContainingFile = normalize(containingFile);\n  for (const file of referencedFiles) {\n    const normalizedReferencedFile = normalize(file);\n    if (normalizedReferencedFile === normalizedContainingFile) {\n      // Containing file is already known to the AOT compiler\n      continue;\n    }\n    const referencing = this.#referencingFiles.get(normalizedReferencedFile);\n    if (referencing === undefined) {\n      this.#referencingFiles.set(normalizedReferencedFile, new Set([normalizedContainingFile]));\n    } else {\n      referencing.add(normalizedContainingFile);\n    }\n  }\n}",
        "import_statements": [
            "import { normalize } from 'node:path';",
            "{ normalize }",
            "{ normalize }",
            "normalize"
        ],
        "reference_api": [
            "this.#referencingFiles.get",
            "referencing.add",
            "this.#referencingFiles.set",
            "add",
            "normalize"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "this.#referencingFiles.get",
            "referencing.add",
            "this.#referencingFiles.set",
            "add",
            "normalize"
        ]
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "static async loadCompilerCli(): Promise<typeof ng> ",
        "start_line": "35",
        "end_line": "42",
        "file_path": "packages/angular/build/src/tools/angular/compilation/angular-compilation.ts",
        "docstring": "This static async function, loadCompilerCli, loads the Angular compiler CLI module if it is not already loaded.\\nIt uses a nullish coalescing assignment to asynchronously load the module from '@angular/compiler-cli'.\\nFinally, it returns the loaded Angular compiler CLI module.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "e22be1916b33",
        "ground_truth": "static async loadCompilerCli(): Promise<typeof ng> {\n  // This uses a wrapped dynamic import to load `@angular/compiler-cli` which is ESM.\n  // Once TypeScript provides support for retaining dynamic imports this workaround can be dropped.\n  AngularCompilation.#angularCompilerCliModule ??=\n    await loadEsmModule<typeof ng>('@angular/compiler-cli');\n  return AngularCompilation.#angularCompilerCliModule;\n}",
        "import_statements": [
            "import type ng from '@angular/compiler-cli';",
            "ng",
            "import type { PartialMessage } from 'esbuild';",
            "{ PartialMessage }",
            "{ PartialMessage }",
            "PartialMessage",
            "import type ts from 'typescript';",
            "ts",
            "import { loadEsmModule } from '../../../utils/load-esm';",
            "{ loadEsmModule }",
            "{ loadEsmModule }",
            "loadEsmModule",
            "import { convertTypeScriptDiagnostic } from '../../esbuild/angular/diagnostics';",
            "{ convertTypeScriptDiagnostic }",
            "{ convertTypeScriptDiagnostic }",
            "convertTypeScriptDiagnostic",
            "import { profileAsync, profileSync } from '../../esbuild/profiling';",
            "{ profileAsync, profileSync }",
            "{ profileAsync, profileSync }",
            "profileAsync",
            "profileSync",
            "import type { AngularHostOptions } from '../angular-host';",
            "{ AngularHostOptions }",
            "{ AngularHostOptions }",
            "AngularHostOptions"
        ],
        "reference_api": [
            "await loadEsmModule",
            "loadCompilerCli"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "await loadEsmModule",
                "code": ")"
            },
            {
                "name": "loadCompilerCli",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "export async function createAngularCompilation(jit: boolean): Promise<AngularCompilation>",
        "start_line": "19",
        "end_line": "35",
        "file_path": "packages/angular/build/src/tools/angular/compilation/factory.ts",
        "docstring": "This async function, createAngularCompilation, creates an Angular compilation based on the provided JIT flag and the useParallelTs flag.\\nIf useParallelTs is true, it imports and returns a new instance of ParallelCompilation.\\nIf JIT is true, it imports and returns a new instance of JitCompilation.\\nOtherwise, it imports and returns a new instance of AotCompilation.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "64e42342101f",
        "ground_truth": "export async function createAngularCompilation(jit: boolean): Promise<AngularCompilation> {\n  if (useParallelTs) {\n    const { ParallelCompilation } = await import('./parallel-compilation');\n     return new ParallelCompilation(jit);\n  }\n   if (jit) {\n    const { JitCompilation } = await import('./jit-compilation');\n     return new JitCompilation();\n  } else {\n    const { AotCompilation } = await import('./aot-compilation');\n     return new AotCompilation();\n  }\n}",
        "import_statements": [
            "import { useParallelTs } from '../../../utils/environment-options';",
            "{ useParallelTs }",
            "{ useParallelTs }",
            "useParallelTs",
            "import type { AngularCompilation } from './angular-compilation';",
            "{ AngularCompilation }",
            "{ AngularCompilation }",
            "AngularCompilation"
        ],
        "reference_api": [
            "import"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "import"
        ]
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "function sourceMapToUrlComment(\n  sourceMap: Exclude<CompileResult['sourceMap'], undefined>,\n  root: string,\n): string",
        "start_line": "198",
        "end_line": "209",
        "file_path": "packages/angular/build/src/tools/esbuild/stylesheets/sass-language.ts",
        "docstring": "This function, sourceMapToUrlComment, converts a source map into a URL comment.\\nIt updates the sources in the source map to relative paths based on the given root.\\nThe source map is then serialized to a base64-encoded JSON string.\\nFinally, it returns a source map URL comment containing the encoded source map.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "37804d74eb2d",
        "ground_truth": "function sourceMapToUrlComment(\n  sourceMap: Exclude<CompileResult['sourceMap'], undefined>,\n  root: string,\n): string {\n  // Remove `file` protocol from all sourcemap sources and adjust to be relative to the input file.\n  // This allows esbuild to correctly process the paths.\n  sourceMap.sources = sourceMap.sources.map((source) => relative(root, fileURLToPath(source)));\n   const urlSourceMap = Buffer.from(JSON.stringify(sourceMap), 'utf-8').toString('base64');\n   return `/*# sourceMappingURL=data:application/json;charset=utf-8;base64,${urlSourceMap} */`;\n}",
        "import_statements": [
            "import type { OnLoadResult, PartialMessage, PartialNote, ResolveResult } from 'esbuild';",
            "{ OnLoadResult, PartialMessage, PartialNote, ResolveResult }",
            "{ OnLoadResult, PartialMessage, PartialNote, ResolveResult }",
            "OnLoadResult",
            "PartialMessage",
            "PartialNote",
            "ResolveResult",
            "import { dirname, join, relative } from 'node:path';",
            "{ dirname, join, relative }",
            "{ dirname, join, relative }",
            "dirname",
            "join",
            "relative",
            "import { fileURLToPath, pathToFileURL } from 'node:url';",
            "{ fileURLToPath, pathToFileURL }",
            "{ fileURLToPath, pathToFileURL }",
            "fileURLToPath",
            "pathToFileURL",
            "import type { CanonicalizeContext, CompileResult, Exception, Syntax } from 'sass';",
            "{ CanonicalizeContext, CompileResult, Exception, Syntax }",
            "{ CanonicalizeContext, CompileResult, Exception, Syntax }",
            "CanonicalizeContext",
            "CompileResult",
            "Exception",
            "Syntax",
            "import type { SassWorkerImplementation } from '../../sass/sass-service';",
            "{ SassWorkerImplementation }",
            "{ SassWorkerImplementation }",
            "SassWorkerImplementation",
            "import { MemoryCache } from '../cache';",
            "{ MemoryCache }",
            "{ MemoryCache }",
            "MemoryCache",
            "import { StylesheetLanguage, StylesheetPluginOptions } from './stylesheet-plugin-factory';",
            "{ StylesheetLanguage, StylesheetPluginOptions }",
            "{ StylesheetLanguage, StylesheetPluginOptions }",
            "StylesheetLanguage",
            "StylesheetPluginOptions"
        ],
        "reference_api": [
            "relative",
            "fileURLToPath"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "relative",
                "code": "s"
            },
            {
                "name": "fileURLToPath",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "function* extractFilesFromStack(stack: string): Iterable<string>",
        "start_line": "211",
        "end_line": "235",
        "file_path": "packages/angular/build/src/tools/esbuild/stylesheets/sass-language.ts",
        "docstring": "This generator function, extractFilesFromStack, extracts file paths from a given stack trace string.\\nIt splits the stack trace into lines and iterates through each line to extract segments.\\nFile paths are reconstructed from segments preceding location identifiers and adjusted to be relative to the current working directory.\\nIt yields each extracted file path.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "bccb5eeb4c4d",
        "ground_truth": "function* extractFilesFromStack(stack: string): Iterable<string> {\n  const lines = stack.split('\\n');\n  const cwd = process.cwd();\n   // Stack line has format of \"<file> <location> <identifier>\"\n  for (const line of lines) {\n    const segments = line.split(' ');\n    if (segments.length < 3) {\n      break;\n    }\n     // Extract path from stack line.\n    // Paths may contain spaces. All segments before location are part of the file path.\n    let path = '';\n    let index = 0;\n    while (!segments[index].match(/\\d+:\\d+/)) {\n      path += segments[index++];\n    }\n     if (path) {\n      // Stack paths from dart-sass are relative to the current working directory (not input file or workspace root)\n      yield join(cwd, path);\n    }\n  }\n}",
        "import_statements": [
            "OnLoadResult",
            "PartialMessage",
            "PartialNote",
            "ResolveResult",
            "dirname",
            "join",
            "relative",
            "fileURLToPath",
            "pathToFileURL",
            "CanonicalizeContext",
            "CompileResult",
            "Exception",
            "Syntax",
            "SassWorkerImplementation",
            "MemoryCache",
            "StylesheetLanguage",
            "StylesheetPluginOptions"
        ],
        "reference_api": [
            "split",
            "cwd",
            "match"
        ],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "function hasTailwindKeywords(contents: string | Uint8Array): boolean",
        "start_line": "304",
        "end_line": "314",
        "file_path": "packages/angular/build/src/tools/esbuild/stylesheets/stylesheet-plugin-factory.ts",
        "docstring": "This function, hasTailwindKeywords, checks if the given contents contain any Tailwind CSS keywords.\\nIt accepts the contents as either a string or a Uint8Array.\\nFor string contents, it checks for the presence of any Tailwind keywords using the includes method.\\nFor Uint8Array contents, it converts them to a Buffer and performs the same check.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "e73986d88a00",
        "ground_truth": "function hasTailwindKeywords(contents: string | Uint8Array): boolean {\n  // TODO: use better search algorithm for keywords\n  if (typeof contents === 'string') {\n    return TAILWIND_KEYWORDS.some((keyword) => contents.includes(keyword));\n  }\n   // Contents is a Uint8Array\n  const data = contents instanceof Buffer ? contents : Buffer.from(contents);\n   return TAILWIND_KEYWORDS.some((keyword) => data.includes(keyword));\n}",
        "import_statements": [
            "import type { OnLoadResult, Plugin, PluginBuild } from 'esbuild';",
            "{ OnLoadResult, Plugin, PluginBuild }",
            "{ OnLoadResult, Plugin, PluginBuild }",
            "OnLoadResult",
            "Plugin",
            "PluginBuild",
            "import glob from 'fast-glob';",
            "glob",
            "import assert from 'node:assert';",
            "assert",
            "import { readFile } from 'node:fs/promises';",
            "{ readFile }",
            "{ readFile }",
            "readFile",
            "import { extname } from 'node:path';",
            "{ extname }",
            "{ extname }",
            "extname",
            "import type { PostcssConfiguration } from '../../../utils/postcss-configuration';",
            "{ PostcssConfiguration }",
            "{ PostcssConfiguration }",
            "PostcssConfiguration",
            "import { LoadResultCache, createCachedLoad } from '../load-result-cache';",
            "{ LoadResultCache, createCachedLoad }",
            "{ LoadResultCache, createCachedLoad }",
            "LoadResultCache",
            "createCachedLoad"
        ],
        "reference_api": [
            "data.includes"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "data.includes",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "export function appendServerConfiguredHeaders(\n  server: ViteDevServer,\n  res: ServerResponse<IncomingMessage>,\n): void",
        "start_line": "36",
        "end_line": "50",
        "file_path": "packages/angular/build/src/tools/vite/utils.ts",
        "docstring": "This function, appendServerConfiguredHeaders, appends headers configured on the server to a server response.\\nIt retrieves the headers from the server configuration.\\nIf headers are defined, it iterates over each header and sets it on the response if the value is not undefined.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "ff27dc4f1deb",
        "ground_truth": "export function appendServerConfiguredHeaders(\n  server: ViteDevServer,\n  res: ServerResponse<IncomingMessage>,\n): void {\n  const headers = server.config.server.headers;\n  if (!headers) {\n    return;\n  }\n   for (const [name, value] of Object.entries(headers)) {\n    if (value !== undefined) {\n      res.setHeader(name, value);\n    }\n  }\n}",
        "import_statements": [
            "import { lookup as lookupMimeType } from 'mrmime';",
            "{ lookup as lookupMimeType }",
            "{ lookup as lookupMimeType }",
            "lookup as lookupMimeType",
            "import type { IncomingMessage, ServerResponse } from 'node:http';",
            "{ IncomingMessage, ServerResponse }",
            "{ IncomingMessage, ServerResponse }",
            "IncomingMessage",
            "ServerResponse",
            "import { extname } from 'node:path';",
            "{ extname }",
            "{ extname }",
            "extname",
            "import type { ViteDevServer } from 'vite';",
            "{ ViteDevServer }",
            "{ ViteDevServer }",
            "ViteDevServer"
        ],
        "reference_api": [
            "Object.entries",
            "res.setHeader"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "res.setHeader"
        ]
    },
    {
        "subclass": "Angular",
        "owner/repo": "angular/angular-cli",
        "function_declaration": "export async function createTranslationLoader(): Promise<TranslationLoader>",
        "start_line": "22",
        "end_line": "51",
        "file_path": "packages/angular/build/src/utils/load-translations.ts",
        "docstring": "This async function, createTranslationLoader, imports parsers and diagnostics modules, and returns a function that loads translations from a specified file path.\\nThe returned function reads the file content, iterates through available parsers to analyze and parse the content, and returns translation details including format, locale, translations, diagnostics, and a content integrity hash if a suitable parser is found.\\nIf no parser can handle the file, it throws an error listing the diagnostics from all attempted parsers.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "1d547de72724",
        "ground_truth": "export async function createTranslationLoader(): Promise<TranslationLoader> {\n  const { parsers, diagnostics } = await importParsers();\n   return (path: string) => {\n    const content = fs.readFileSync(path, 'utf8');\n    const unusedParsers = new Map();\n    for (const [format, parser] of Object.entries(parsers)) {\n      const analysis = parser.analyze(path, content);\n      if (analysis.canParse) {\n        // Types don't overlap here so we need to use any.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const { locale, translations } = parser.parse(path, content, analysis.hint as any);\n        const integrity = 'sha256-' + createHash('sha256').update(content).digest('base64');\n         return { format, locale, translations, diagnostics, integrity };\n      } else {\n        unusedParsers.set(parser, analysis);\n      }\n    }\n     const messages: string[] = [];\n    for (const [parser, analysis] of unusedParsers.entries()) {\n      messages.push(analysis.diagnostics.formatDiagnostics(`*** ${parser.constructor.name} ***`));\n    }\n    throw new Error(\n      `Unsupported translation file format in ${path}. The following parsers were tried:\\n` +\n        messages.join('\\n'),\n    );\n  };\n}",
        "import_statements": [
            "import type { Diagnostics } from '@angular/localize/tools';",
            "{ Diagnostics }",
            "{ Diagnostics }",
            "Diagnostics",
            "import { createHash } from 'crypto';",
            "{ createHash }",
            "{ createHash }",
            "createHash",
            "import * as fs from 'fs';",
            "* as fs",
            "* as fs",
            "import { loadEsmModule } from './load-esm';",
            "{ loadEsmModule }",
            "{ loadEsmModule }",
            "loadEsmModule"
        ],
        "reference_api": [
            "createHash",
            "fs.readFileSync",
            "createHash('sha256').update(content).digest",
            "messages.push",
            "parser.parse",
            "Object.entries",
            "unusedParsers.entries",
            "parser.analyze",
            "createHash('sha256').update",
            "analysis.diagnostics.formatDiagnostics",
            "unusedParsers.set",
            "messages.join"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "createHash",
                "code": "a"
            },
            {
                "name": "fs.readFileSync",
                "code": "a"
            },
            {
                "name": "createHash('sha256').update(content).digest",
                "code": "a"
            },
            {
                "name": "messages.push",
                "code": "a"
            },
            {
                "name": "parser.parse",
                "code": "a"
            },
            {
                "name": "unusedParsers.entries",
                "code": "a"
            },
            {
                "name": "parser.analyze",
                "code": "a"
            },
            {
                "name": "createHash('sha256').update",
                "code": "a"
            },
            {
                "name": "analysis.diagnostics.formatDiagnostics",
                "code": "a"
            },
            {
                "name": "unusedParsers.set",
                "code": "a"
            },
            {
                "name": "messages.join",
                "code": "a"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "akveo/ngx-admin",
        "function_declaration": "toggleSidebar(): boolean",
        "start_line": "83",
        "end_line": "88",
        "file_path": "src/app/@theme/components/header/header.component.ts",
        "docstring": "This function, toggleSidebar, toggles the sidebar visibility and updates the layout size.\\nIt calls the sidebarService to toggle the sidebar with specified parameters and then triggers a layout size change using the layoutService.\\nThe function returns false.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0c0d3dcf983c",
        "ground_truth": "toggleSidebar(): boolean {\n  this.sidebarService.toggle(true, 'menu-sidebar');\n  this.layoutService.changeLayoutSize();\n  return false;\n}",
        "import_statements": [
            "import { Component, OnDestroy, OnInit } from '@angular/core';",
            "{ Component, OnDestroy, OnInit }",
            "{ Component, OnDestroy, OnInit }",
            "Component",
            "OnDestroy",
            "OnInit",
            "import { NbMediaBreakpointsService, NbMenuService, NbSidebarService, NbThemeService } from '@nebular/theme';",
            "{ NbMediaBreakpointsService, NbMenuService, NbSidebarService, NbThemeService }",
            "{ NbMediaBreakpointsService, NbMenuService, NbSidebarService, NbThemeService }",
            "NbMediaBreakpointsService",
            "NbMenuService",
            "NbSidebarService",
            "NbThemeService",
            "import { UserData } from '../../../@core/data/users';",
            "{ UserData }",
            "{ UserData }",
            "UserData",
            "import { LayoutService } from '../../../@core/utils';",
            "{ LayoutService }",
            "{ LayoutService }",
            "LayoutService",
            "import { map, takeUntil } from 'rxjs/operators';",
            "{ map, takeUntil }",
            "{ map, takeUntil }",
            "map",
            "takeUntil",
            "import { Subject } from 'rxjs';",
            "{ Subject }",
            "{ Subject }",
            "Subject"
        ],
        "reference_api": [
            "toggleSidebar",
            "this.sidebarService.toggle",
            "this.layoutService.changeLayoutSize"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "toggleSidebar",
                "code": "u"
            },
            {
                "name": "this.sidebarService.toggle",
                "code": "u"
            },
            {
                "name": "this.layoutService.changeLayoutSize",
                "code": "u"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Angular",
        "owner/repo": "akveo/ngx-admin",
        "function_declaration": "loadNext(cardData)",
        "start_line": "28",
        "end_line": "40",
        "file_path": "src/app/pages/layout/infinite-list/infinite-list.component.ts",
        "docstring": "This function, loadNext, loads the next page of news if it is not already loading.\\nIt sets the loading state to true and creates placeholders.\\nIt then uses the newsService to load the next page of news and subscribes to the result.\\nWhen new news items are received, it clears the placeholders, appends the new items to the existing news array, sets the loading state to false, and increments the page number to load next.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c5ebbdd1dadf",
        "ground_truth": "loadNext(cardData) {\n  if (cardData.loading) { return; }\n  cardData.loading = true;\n  cardData.placeholders = new Array(this.pageSize);\n  this.newsService.load(cardData.pageToLoadNext, this.pageSize)\n    .subscribe(nextNews => {\n      cardData.placeholders = [];\n      cardData.news.push(...nextNews);\n      cardData.loading = false;\n      cardData.pageToLoadNext++;\n    });\n}",
        "import_statements": [
            "import { Component } from '@angular/core';",
            "{ Component }",
            "{ Component }",
            "Component",
            "import { NewsService } from '../news.service';",
            "{ NewsService }",
            "{ NewsService }",
            "NewsService"
        ],
        "reference_api": [
            "cardData.news.push"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "cardData.news.push",
                "code": "e"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Vue",
        "owner/repo": "PanJiaChen/vue-element-admin",
        "function_declaration": "backToTop()",
        "start_line": "60",
        "end_line": "76",
        "file_path": "src/components/BackToTop/index.vue",
        "docstring": "This function, backToTop, smoothly scrolls the window back to the top.\\nIt checks if a scroll is already in progress and prevents multiple triggers.\\nThe function uses an easing function to calculate the scroll position and sets an interval to update the window scroll position every 16.7 milliseconds.\\nWhen the scroll position reaches the top, it stops the interval and marks the movement as complete.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "1bd87ab8efa2",
        "ground_truth": "backToTop() {\n  if (this.isMoving) return\n  const start = window.pageYOffset\n  let i = 0\n  this.isMoving = true\n  this.interval = setInterval(() => {\n    const next = Math.floor(this.easeInOutQuad(10 * i, start, -start, 500))\n    if (next <= this.backPosition) {\n      window.scrollTo(0, this.backPosition)\n      clearInterval(this.interval)\n      this.isMoving = false\n    } else {\n      window.scrollTo(0, next)\n    }\n    i++\n  }, 16.7)\n},",
        "import_statements": [],
        "reference_api": [
            "Math.floor",
            "this.easeInOutQuad",
            "clearInterval",
            "window.scrollTo",
            "setInterval",
            "backToTop"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.easeInOutQuad",
                "code": "easeInOutQuad(t, b, c, d) {\n      if ((t /= d / 2) < 1) return c / 2 * t * t + b\n      return -c / 2 * (--t * (t - 2) - 1) + b\n    }"
            },
            {
                "name": "backToTop",
                "code": "backToTop() {\n      if (this.isMoving) return\n      const start = window.pageYOffset\n      let i = 0\n      this.isMoving = true\n      this.interval = setInterval(() => {\n        const next = Math.floor(this.easeInOutQuad(10 * i, start, -start, 500))\n        if (next <= this.backPosition) {\n          window.scrollTo(0, this.backPosition)\n          clearInterval(this.interval)\n          this.isMoving = false\n        } else {\n          window.scrollTo(0, next)\n        }\n        i++\n      }, 16.7)\n    }"
            }
        ],
        "third_party": [
            "window.scrollTo"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "PanJiaChen/vue-element-admin",
        "function_declaration": "getBreadcrumb()",
        "start_line": "34",
        "end_line": "44",
        "file_path": "src/components/Breadcrumb/index.vue",
        "docstring": "This function, getBreadcrumb, generates a breadcrumb trail for the current route.\\nIt filters the matched routes to include only those with a meta title.\\nIf the first matched route is not the dashboard, it prepends a dashboard route to the list.\\nIt then sets the levelList to routes that have a meta title and are not explicitly excluded from the breadcrumb.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0ef728b56235",
        "ground_truth": "getBreadcrumb() {\n  // only show routes with meta.title\n  let matched = this.$route.matched.filter(item => item.meta && item.meta.title)\n  const first = matched[0]\n  if (!this.isDashboard(first)) {\n    matched = [{ path: '/dashboard', meta: { title: 'Dashboard' }}].concat(matched)\n  }\n  this.levelList = matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb !== false)\n},",
        "import_statements": [],
        "reference_api": [
            "this.isDashboard",
            "matched.filter",
            "[{ path: '/dashboard', meta: { title: 'Dashboard' }}].concat",
            "getBreadcrumb",
            "this.$route.matched.filter"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.isDashboard",
                "code": "isDashboard(route) {\n      const name = route && route.name\n      if (!name) {\n        return false\n      }\n      return name.trim().toLocaleLowerCase() === 'Dashboard'.toLocaleLowerCase()\n    }"
            },
            {
                "name": "getBreadcrumb",
                "code": "getBreadcrumb() {\n      // only show routes with meta.title\n      let matched = this.$route.matched.filter(item => item.meta && item.meta.title)\n      const first = matched[0]\n\n      if (!this.isDashboard(first)) {\n        matched = [{ path: '/dashboard', meta: { title: 'Dashboard' }}].concat(matched)\n      }\n\n      this.levelList = matched.filter(item => item.meta && item.meta.title && item.meta.breadcrumb !== false)\n    }"
            },
            {
                "name": "this.$route.matched.filter",
                "code": "$route(route) {\n      // if you go to the redirect page, do not update the breadcrumbs\n      if (route.path.startsWith('/redirect/')) {\n        return\n      }\n      this.getBreadcrumb()\n    }"
            }
        ],
        "third_party": [
            "matched.filter",
            "[{ path: '/dashboard', meta: { title: 'Dashboard' }}].concat"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "PanJiaChen/vue-element-admin",
        "function_declaration": "destroyListener()",
        "start_line": "45",
        "end_line": "50",
        "file_path": "src/components/Charts/mixins/resize.js",
        "docstring": "This function, destroyListener, removes event listeners for resize and transitionend events.\\nIt detaches the resize handler from the window's resize event and sets the handler to null.\\nIf a sidebar element exists, it removes the transitionend event listener from it.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "4431fde0a559",
        "ground_truth": "destroyListener() {\n  window.removeEventListener('resize', this.$_resizeHandler)\n  this.$_resizeHandler = null\n  this.$_sidebarElm && this.$_sidebarElm.removeEventListener('transitionend', this.$_sidebarResizeHandler)\n},",
        "import_statements": [
            "@/utils"
        ],
        "reference_api": [
            "window.removeEventListener",
            "destroyListener",
            "this.$_sidebarElm.removeEventListener"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "destroyListener",
                "code": "destroyListener() {\n      window.removeEventListener('resize', this.$_resizeHandler)\n      this.$_resizeHandler = null\n\n      this.$_sidebarElm && this.$_sidebarElm.removeEventListener('transitionend', this.$_sidebarResizeHandler)\n    }"
            }
        ],
        "third_party": [
            "this.$_sidebarElm.removeEventListener"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "PanJiaChen/vue-element-admin",
        "function_declaration": "deleteEle(ele)",
        "start_line": "74",
        "end_line": "85",
        "file_path": "src/components/DndList/index.vue",
        "docstring": "This function, deleteEle, removes an element from list1 based on its id and adds it to the beginning of list2 if it is not already present there.\\nIt iterates through list1 to find and remove the element with the matching id.\\nThen, it checks if the element is not in list2 using the isNotInList2 method, and if so, prepends the element to list2.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7215170e04cd",
        "ground_truth": "deleteEle(ele) {\n  for (const item of this.list1) {\n    if (item.id === ele.id) {\n      const index = this.list1.indexOf(item)\n      this.list1.splice(index, 1)\n      break\n    }\n  }\n  if (this.isNotInList2(ele)) {\n    this.list2.unshift(ele)\n  }\n},",
        "import_statements": [],
        "reference_api": [
            "this.isNotInList2",
            "this.list1.splice",
            "deleteEle",
            "this.list2.unshift",
            "this.list1.indexOf"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.isNotInList2",
                "code": "isNotInList2(v) {\n      return this.list2.every(k => v.id !== k.id)\n    }"
            },
            {
                "name": "deleteEle",
                "code": "deleteEle(ele) {\n      for (const item of this.list1) {\n        if (item.id === ele.id) {\n          const index = this.list1.indexOf(item)\n          this.list1.splice(index, 1)\n          break\n        }\n      }\n      if (this.isNotInList2(ele)) {\n        this.list2.unshift(ele)\n      }\n    }"
            }
        ],
        "third_party": [
            "this.list1.splice",
            "this.list2.unshift",
            "this.list1.indexOf"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "PanJiaChen/vue-element-admin",
        "function_declaration": "generateRoutes(routes, basePath = '/', prefixTitle = [])",
        "start_line": "99",
        "end_line": "130",
        "file_path": "src/components/HeaderSearch/index.vue",
        "docstring": "This function, generateRoutes, generates a list of routes with their resolved paths and titles.\\nIt iterates over the provided routes, skipping hidden routes.\\nFor each visible route, it constructs a data object with the resolved path and title.\\nIf the route has a meta title and is not marked with 'noRedirect', the data object is added to the result list.\\nThe function handles nested routes recursively, appending child routes to the result list.\\nFinally, it returns the list of generated routes.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b2acc5757074",
        "ground_truth": "generateRoutes(routes, basePath = '/', prefixTitle = []) {\n  let res = []\n  for (const router of routes) {\n    // skip hidden router\n    if (router.hidden) { continue }\n    const data = {\n      path: path.resolve(basePath, router.path),\n      title: [...prefixTitle]\n    }\n    if (router.meta && router.meta.title) {\n      data.title = [...data.title, router.meta.title]\n      if (router.redirect !== 'noRedirect') {\n        // only push the routes with title\n        // special case: need to exclude parent router without redirect\n        res.push(data)\n      }\n    }\n    // recursive child routes\n    if (router.children) {\n      const tempRoutes = this.generateRoutes(router.children, data.path, data.title)\n      if (tempRoutes.length >= 1) {\n        res = [...res, ...tempRoutes]\n      }\n    }\n  }\n  return res\n},",
        "import_statements": [
            "path"
        ],
        "reference_api": [
            "generateRoutes",
            "res.push",
            "this.generateRoutes",
            "path.resolve"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "generateRoutes",
                "code": "generateRoutes(routes, basePath = '/', prefixTitle = []) {\n      let res = []\n\n      for (const router of routes) {\n        // skip hidden router\n        if (router.hidden) { continue }\n\n        const data = {\n          path: path.resolve(basePath, router.path),\n          title: [...prefixTitle]\n        }\n\n        if (router.meta && router.meta.title) {\n          data.title = [...data.title, router.meta.title]\n\n          if (router.redirect !== 'noRedirect') {\n            // only push the routes with title\n            // special case: need to exclude parent router without redirect\n            res.push(data)\n          }\n        }\n\n        // recursive child routes\n        if (router.children) {\n          const tempRoutes = this.generateRoutes(router.children, data.path, data.title)\n          if (tempRoutes.length >= 1) {\n            res = [...res, ...tempRoutes]\n          }\n        }\n      }\n      return res\n    }"
            },
            {
                "name": "this.generateRoutes",
                "code": "generateRoutes(routes, basePath = '/', prefixTitle = []) {\n      let res = []\n\n      for (const router of routes) {\n        // skip hidden router\n        if (router.hidden) { continue }\n\n        const data = {\n          path: path.resolve(basePath, router.path),\n          title: [...prefixTitle]\n        }\n\n        if (router.meta && router.meta.title) {\n          data.title = [...data.title, router.meta.title]\n\n          if (router.redirect !== 'noRedirect') {\n            // only push the routes with title\n            // special case: need to exclude parent router without redirect\n            res.push(data)\n          }\n        }\n\n        // recursive child routes\n        if (router.children) {\n          const tempRoutes = this.generateRoutes(router.children, data.path, data.title)\n          if (tempRoutes.length >= 1) {\n            res = [...res, ...tempRoutes]\n          }\n        }\n      }\n      return res\n    }"
            }
        ],
        "third_party": [
            "res.push",
            "path.resolve"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "PanJiaChen/vue-element-admin",
        "function_declaration": "closeSidebar(evt)",
        "start_line": "63",
        "end_line": "69",
        "file_path": "src/components/RightPanel/index.vue",
        "docstring": "This function, closeSidebar, handles the event to close a sidebar.\\nIt checks if the event target is inside an element with the class 'rightPanel'.\\nIf not, it sets the show property to false and removes the event listener for click events to close the sidebar.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c4e47c376d30",
        "ground_truth": "closeSidebar(evt) {\n  const parent = evt.target.closest('.rightPanel')\n  if (!parent) {\n    this.show = false\n    window.removeEventListener('click', this.closeSidebar)\n  }\n},",
        "import_statements": [],
        "reference_api": [
            "window.removeEventListener",
            "evt.target.closest",
            "closeSidebar"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "closeSidebar",
                "code": "closeSidebar(evt) {\n      const parent = evt.target.closest('.rightPanel')\n      if (!parent) {\n        this.show = false\n        window.removeEventListener('click', this.closeSidebar)\n      }\n    }"
            }
        ],
        "third_party": [
            "evt.target.closest"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "PanJiaChen/vue-element-admin",
        "function_declaration": "click()",
        "start_line": "24",
        "end_line": "33",
        "file_path": "src/components/Screenfull/index.vue",
        "docstring": "This function, click, checks if fullscreen mode is supported by the browser using screenfull.enabled.\\nIf not supported, it displays a warning message saying 'your browser cannot work' and returns false.\\nIf supported, it toggles the fullscreen mode using screenfull.toggle().",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "ab91e02736a1",
        "ground_truth": "click() {\n  if (!screenfull.enabled) {\n    this.$message({\n      message: 'you browser can not work',\n      type: 'warning'\n    })\n    return false\n  }\n  screenfull.toggle()\n},",
        "import_statements": [],
        "reference_api": [
            "screenfull.toggle",
            "this.$message",
            "click"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "click",
                "code": "click() {\n      if (!screenfull.enabled) {\n        this.$message({\n          message: 'you browser can not work',\n          type: 'warning'\n        })\n        return false\n      }\n      screenfull.toggle()\n    }"
            }
        ],
        "third_party": [
            "screenfull.toggle",
            "this.$message"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "PanJiaChen/vue-element-admin",
        "function_declaration": "function checkPermission(el, binding) ",
        "start_line": "3",
        "end_line": "22",
        "file_path": "src/directive/permission/permission.js",
        "docstring": "This function, checkPermission, verifies if an element should be displayed based on user roles.\\nIt retrieves the roles from the store and checks if the binding value is a non-empty array of required roles.\\nIf the user does not have the required roles, the element is removed from the DOM.\\nIf the binding value is not a valid array, it throws an error indicating the need for roles.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "3f27cb09d8c2",
        "ground_truth": "function checkPermission(el, binding) {\n  const { value } = binding\n  const roles = store.getters && store.getters.roles\n   if (value && value instanceof Array) {\n    if (value.length > 0) {\n      const permissionRoles = value\n       const hasPermission = roles.some(role => {\n        return permissionRoles.includes(role)\n      })\n       if (!hasPermission) {\n        el.parentNode && el.parentNode.removeChild(el)\n      }\n    }\n  } else {\n    throw new Error(`need roles! Like v-permission=\"['admin','editor']\"`)\n  }\n}",
        "import_statements": [
            "@/store"
        ],
        "reference_api": [
            "roles.some",
            "permissionRoles.includes",
            "el.parentNode.removeChild"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "roles.some",
            "permissionRoles.includes",
            "el.parentNode.removeChild"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "hoppscotch/hoppscotch",
        "function_declaration": "async inviteNewUser(\n    @GqlUser() adminUser: AuthUser,\n    @Args({\n      name: 'inviteeEmail',\n      description: 'invitee email',\n    })\n    inviteeEmail: string,\n  ): Promise<InvitedUser>",
        "start_line": "56",
        "end_line": "71",
        "file_path": "packages/hoppscotch-backend/src/admin/admin.resolver.ts",
        "docstring": "This async function, inviteNewUser, invites a new user via email.\\nIt takes the admin user's authentication details and the invitee's email as arguments.\\nThe function calls the adminService to send an invitation email to the invitee.\\nIf the invitation fails, it throws an error; otherwise, it returns the invited user's details.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "04e47e771281",
        "ground_truth": "async inviteNewUser(\n  @GqlUser() adminUser: AuthUser,\n  @Args({\n    name: 'inviteeEmail',\n    description: 'invitee email',\n  })\n  inviteeEmail: string,\n): Promise<InvitedUser> {\n  const invitedUser = await this.adminService.inviteUserToSignInViaEmail(\n    adminUser.uid,\n    adminUser.email,\n    inviteeEmail,\n  );\n  if (E.isLeft(invitedUser)) throwErr(invitedUser.left);\n  return invitedUser.right;\n}",
        "import_statements": [
            "import {\n  Args,\n  ID,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n  Subscription,\n} from '@nestjs/graphql';",
            "{\n  Args,\n  ID,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n  Subscription,\n}",
            "{\n  Args,\n  ID,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n  Subscription,\n}",
            "Args",
            "ID",
            "Mutation",
            "Parent",
            "Query",
            "ResolveField",
            "Resolver",
            "Subscription",
            "import { Admin } from './admin.model';",
            "{ Admin }",
            "{ Admin }",
            "Admin",
            "import { UseGuards } from '@nestjs/common';",
            "{ UseGuards }",
            "{ UseGuards }",
            "UseGuards",
            "import { GqlAuthGuard } from '../guards/gql-auth.guard';",
            "{ GqlAuthGuard }",
            "{ GqlAuthGuard }",
            "GqlAuthGuard",
            "import { GqlAdminGuard } from './guards/gql-admin.guard';",
            "{ GqlAdminGuard }",
            "{ GqlAdminGuard }",
            "GqlAdminGuard",
            "import { GqlAdmin } from './decorators/gql-admin.decorator';",
            "{ GqlAdmin }",
            "{ GqlAdmin }",
            "GqlAdmin",
            "import { AdminService } from './admin.service';",
            "{ AdminService }",
            "{ AdminService }",
            "AdminService",
            "import * as E from 'fp-ts/Either';",
            "* as E",
            "* as E",
            "import { throwErr } from '../utils';",
            "{ throwErr }",
            "{ throwErr }",
            "throwErr",
            "import { AuthUser } from '../types/AuthUser';",
            "{ AuthUser }",
            "{ AuthUser }",
            "AuthUser",
            "import { InvitedUser } from './invited-user.model';",
            "{ InvitedUser }",
            "{ InvitedUser }",
            "InvitedUser",
            "import { GqlUser } from '../decorators/gql-user.decorator';",
            "{ GqlUser }",
            "{ GqlUser }",
            "GqlUser",
            "import { PubSubService } from '../pubsub/pubsub.service';",
            "{ PubSubService }",
            "{ PubSubService }",
            "PubSubService",
            "import { Team, TeamMember } from '../team/team.model';",
            "{ Team, TeamMember }",
            "{ Team, TeamMember }",
            "Team",
            "TeamMember",
            "import {\n  AddUserToTeamArgs,\n  ChangeUserRoleInTeamArgs,\n} from './input-types.args';",
            "{\n  AddUserToTeamArgs,\n  ChangeUserRoleInTeamArgs,\n}",
            "{\n  AddUserToTeamArgs,\n  ChangeUserRoleInTeamArgs,\n}",
            "AddUserToTeamArgs",
            "ChangeUserRoleInTeamArgs",
            "import { GqlThrottlerGuard } from 'src/guards/gql-throttler.guard';",
            "{ GqlThrottlerGuard }",
            "{ GqlThrottlerGuard }",
            "GqlThrottlerGuard",
            "import { SkipThrottle } from '@nestjs/throttler';",
            "{ SkipThrottle }",
            "{ SkipThrottle }",
            "SkipThrottle",
            "import { UserDeletionResult } from 'src/user/user.model';",
            "{ UserDeletionResult }",
            "{ UserDeletionResult }",
            "UserDeletionResult"
        ],
        "reference_api": [
            "Args",
            "throwErr",
            "this.adminService.inviteUserToSignInViaEmail",
            "GqlUser",
            "E.isLeft"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "Args",
                "code": ")"
            },
            {
                "name": "throwErr",
                "code": ")"
            },
            {
                "name": "this.adminService.inviteUserToSignInViaEmail",
                "code": ")"
            },
            {
                "name": "GqlUser",
                "code": ")"
            },
            {
                "name": "E.isLeft",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Vue",
        "owner/repo": "hoppscotch/hoppscotch",
        "function_declaration": "async googleAuthRedirect(@Request() req, @Res() res)",
        "start_line": "116",
        "end_line": "125",
        "file_path": "packages/hoppscotch-backend/src/auth/auth.controller.ts",
        "docstring": "This async function, googleAuthRedirect, handles Google authentication redirection.\\nIt generates authentication tokens for the user using the authService and checks for errors.\\nIf there are no errors, it sets the authentication cookies in the response and redirects the user to the specified URI.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "3f25736bfbcd",
        "ground_truth": "async googleAuthRedirect(@Request() req, @Res() res) {\n  const authTokens = await this.authService.generateAuthTokens(req.user.uid);\n  if (E.isLeft(authTokens)) throwHTTPErr(authTokens.left);\n  authCookieHandler(\n    res,\n    authTokens.right,\n    true,\n    req.authInfo.state.redirect_uri,\n  );\n}",
        "import_statements": [
            "import {\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  Request,\n  Res,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';",
            "{\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  Request,\n  Res,\n  UseGuards,\n  UseInterceptors,\n}",
            "{\n  Body,\n  Controller,\n  Get,\n  Post,\n  Query,\n  Request,\n  Res,\n  UseGuards,\n  UseInterceptors,\n}",
            "Body",
            "Controller",
            "Get",
            "Post",
            "Query",
            "Request",
            "Res",
            "UseGuards",
            "UseInterceptors",
            "import { AuthService } from './auth.service';",
            "{ AuthService }",
            "{ AuthService }",
            "AuthService",
            "import { SignInMagicDto } from './dto/signin-magic.dto';",
            "{ SignInMagicDto }",
            "{ SignInMagicDto }",
            "SignInMagicDto",
            "import { VerifyMagicDto } from './dto/verify-magic.dto';",
            "{ VerifyMagicDto }",
            "{ VerifyMagicDto }",
            "VerifyMagicDto",
            "import { Response } from 'express';",
            "{ Response }",
            "{ Response }",
            "Response",
            "import * as E from 'fp-ts/Either';",
            "* as E",
            "* as E",
            "import { RTJwtAuthGuard } from './guards/rt-jwt-auth.guard';",
            "{ RTJwtAuthGuard }",
            "{ RTJwtAuthGuard }",
            "RTJwtAuthGuard",
            "import { JwtAuthGuard } from './guards/jwt-auth.guard';",
            "{ JwtAuthGuard }",
            "{ JwtAuthGuard }",
            "JwtAuthGuard",
            "import { GqlUser } from 'src/decorators/gql-user.decorator';",
            "{ GqlUser }",
            "{ GqlUser }",
            "GqlUser",
            "import { AuthUser } from 'src/types/AuthUser';",
            "{ AuthUser }",
            "{ AuthUser }",
            "AuthUser",
            "import { RTCookie } from 'src/decorators/rt-cookie.decorator';",
            "{ RTCookie }",
            "{ RTCookie }",
            "RTCookie",
            "import { AuthProvider, authCookieHandler, authProviderCheck } from './helper';",
            "{ AuthProvider, authCookieHandler, authProviderCheck }",
            "{ AuthProvider, authCookieHandler, authProviderCheck }",
            "AuthProvider",
            "authCookieHandler",
            "authProviderCheck",
            "import { GoogleSSOGuard } from './guards/google-sso.guard';",
            "{ GoogleSSOGuard }",
            "{ GoogleSSOGuard }",
            "GoogleSSOGuard",
            "import { GithubSSOGuard } from './guards/github-sso.guard';",
            "{ GithubSSOGuard }",
            "{ GithubSSOGuard }",
            "GithubSSOGuard",
            "import { MicrosoftSSOGuard } from './guards/microsoft-sso-.guard';",
            "{ MicrosoftSSOGuard }",
            "{ MicrosoftSSOGuard }",
            "MicrosoftSSOGuard",
            "import { ThrottlerBehindProxyGuard } from 'src/guards/throttler-behind-proxy.guard';",
            "{ ThrottlerBehindProxyGuard }",
            "{ ThrottlerBehindProxyGuard }",
            "ThrottlerBehindProxyGuard",
            "import { SkipThrottle } from '@nestjs/throttler';",
            "{ SkipThrottle }",
            "{ SkipThrottle }",
            "SkipThrottle",
            "import { AUTH_PROVIDER_NOT_SPECIFIED } from 'src/errors';",
            "{ AUTH_PROVIDER_NOT_SPECIFIED }",
            "{ AUTH_PROVIDER_NOT_SPECIFIED }",
            "AUTH_PROVIDER_NOT_SPECIFIED",
            "import { ConfigService } from '@nestjs/config';",
            "{ ConfigService }",
            "{ ConfigService }",
            "ConfigService",
            "import { throwHTTPErr } from 'src/utils';",
            "{ throwHTTPErr }",
            "{ throwHTTPErr }",
            "throwHTTPErr",
            "import { UserLastLoginInterceptor } from 'src/interceptors/user-last-login.interceptor';",
            "{ UserLastLoginInterceptor }",
            "{ UserLastLoginInterceptor }",
            "UserLastLoginInterceptor"
        ],
        "reference_api": [
            "throwHTTPErr",
            "authCookieHandler",
            "this.authService.generateAuthTokens",
            "Request",
            "Res",
            "E.isLeft"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "throwHTTPErr",
            "authCookieHandler",
            "this.authService.generateAuthTokens",
            "Request",
            "Res",
            "E.isLeft"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "const mousewheel = function(element, callback)",
        "start_line": "5",
        "end_line": "12",
        "file_path": "src/directives/mousewheel.js",
        "docstring": "This function, mousewheel, adds a mouse wheel event listener to a given element.\\nIt uses 'DOMMouseScroll' for Firefox and 'mousewheel' for other browsers.\\nWhen the event is triggered, it normalizes the wheel event and calls the provided callback function with the event and normalized values.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "52aa108e3521",
        "ground_truth": "const mousewheel = function(element, callback) {\n  if (element && element.addEventListener) {\n    element.addEventListener(isFirefox ? 'DOMMouseScroll' : 'mousewheel', function(event) {\n      const normalized = normalizeWheel(event);\n      callback && callback.apply(this, [event, normalized]);\n    });\n  }\n};",
        "import_statements": [
            "normalize-wheel"
        ],
        "reference_api": [
            "normalizeWheel",
            "element.addEventListener",
            "callback.apply"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "normalizeWheel",
            "element.addEventListener",
            "callback.apply"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "let i18nHandler = function()",
        "start_line": "9",
        "end_line": "21",
        "file_path": "src/locale/index.js",
        "docstring": "This function, i18nHandler, integrates Vue i18n functionality into the current context.\\nIt retrieves the $t method from Vue's prototype and checks if it is a function and if Vue.locale exists.\\nIf not already merged, it merges the provided language data with the current locale data and sets the merged flag to true.\\nFinally, it invokes the $t method with the given arguments.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "bb9e14122636",
        "ground_truth": "let i18nHandler = function() {\n  const vuei18n = Object.getPrototypeOf(this || Vue).$t;\n  if (typeof vuei18n === 'function' && !!Vue.locale) {\n    if (!merged) {\n      merged = true;\n      Vue.locale(\n        Vue.config.lang,\n        deepmerge(lang, Vue.locale(Vue.config.lang) || {}, { clone: true })\n      );\n    }\n    return vuei18n.apply(this, arguments);\n  }\n};",
        "import_statements": [
            "element-ui/src/locale/lang/zh-CN",
            "vue",
            "deepmerge",
            "./format"
        ],
        "reference_api": [
            "Object.getPrototypeOf",
            "vuei18n.apply",
            "Vue.locale",
            "deepmerge"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "vuei18n.apply",
            "Vue.locale",
            "deepmerge"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "function broadcast(componentName, eventName, params)",
        "start_line": "1",
        "end_line": "11",
        "file_path": "src/mixins/emitter.js",
        "docstring": "This function, broadcast, emits an event to a specified child component or propagates the event to deeper descendants.\\nIt iterates over the $children of the current component, checking if each child's componentName matches the specified componentName.\\nIf a match is found, it emits the event with the provided parameters.\\nIf not, it recursively calls broadcast on the child to continue the propagation.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b0608b85127a",
        "ground_truth": "function broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    var name = child.$options.componentName;\n     if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}",
        "import_statements": [],
        "reference_api": [
            "broadcast.apply",
            "child.$emit.apply",
            "[componentName, eventName].concat",
            "this.$children.forEach",
            "[eventName].concat"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "broadcast.apply",
                "code": "function broadcast(componentName, eventName, params) {\n  this.$children.forEach(child => {\n    var name = child.$options.componentName;\n\n    if (name === componentName) {\n      child.$emit.apply(child, [eventName].concat(params));\n    } else {\n      broadcast.apply(child, [componentName, eventName].concat([params]));\n    }\n  });\n}"
            }
        ],
        "third_party": [
            "child.$emit.apply",
            "[componentName, eventName].concat",
            "this.$children.forEach",
            "[eventName].concat"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "aria.Utils.focusFirstDescendant = function(element)",
        "start_line": "13",
        "end_line": "21",
        "file_path": "src/utils/aria-utils.js",
        "docstring": "This function, aria.Utils.focusFirstDescendant, attempts to set focus on the first focusable descendant of a given element.\\nIt iterates through the child nodes of the element, trying to focus each one.\\nIf a child is focusable or contains a focusable descendant, it returns true.\\nIf no focusable descendant is found, it returns false.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "da57b9dc5023",
        "ground_truth": "aria.Utils.focusFirstDescendant = function(element) {\n  for (var i = 0; i < element.childNodes.length; i++) {\n    var child = element.childNodes[i];\n    if (aria.Utils.attemptFocus(child) || aria.Utils.focusFirstDescendant(child)) {\n      return true;\n    }\n  }\n  return false;\n};",
        "import_statements": [],
        "reference_api": [
            "aria.Utils.focusFirstDescendant",
            "aria.Utils.attemptFocus"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "aria.Utils.focusFirstDescendant",
            "aria.Utils.attemptFocus"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "highlight(index)",
        "start_line": "240",
        "end_line": "265",
        "file_path": "packages/autocomplete/src/autocomplete.vue",
        "docstring": "This function, highlight, highlights a suggestion in an autocomplete list based on the given index.\\nIt checks if suggestions are visible and not loading, adjusts the index if it is out of bounds, and updates the scroll position to ensure the highlighted item is visible.\\nIt then sets the highlighted index and updates the aria-activedescendant attribute for accessibility.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "a029702e104d",
        "ground_truth": "highlight(index) {\n  if (!this.suggestionVisible || this.loading) { return; }\n  if (index < 0) {\n    this.highlightedIndex = -1;\n    return;\n  }\n  if (index >= this.suggestions.length) {\n    index = this.suggestions.length - 1;\n  }\n  const suggestion = this.$refs.suggestions.$el.querySelector('.el-autocomplete-suggestion__wrap');\n  const suggestionList = suggestion.querySelectorAll('.el-autocomplete-suggestion__list li');\n  let highlightItem = suggestionList[index];\n  let scrollTop = suggestion.scrollTop;\n  let offsetTop = highlightItem.offsetTop;\n  if (offsetTop + highlightItem.scrollHeight > (scrollTop + suggestion.clientHeight)) {\n    suggestion.scrollTop += highlightItem.scrollHeight;\n  }\n  if (offsetTop < scrollTop) {\n    suggestion.scrollTop -= highlightItem.scrollHeight;\n  }\n  this.highlightedIndex = index;\n  let $input = this.getInput();\n  $input.setAttribute('aria-activedescendant', `${this.id}-item-${this.highlightedIndex}`);\n},",
        "import_statements": [
            "element-ui/packages/input",
            "element-ui/src/utils/clickoutside",
            "./autocomplete-suggestions.vue",
            "element-ui/src/mixins/emitter",
            "element-ui/src/mixins/migrating",
            "element-ui/src/utils/util",
            "element-ui/src/mixins/focus"
        ],
        "reference_api": [
            "$input.setAttribute",
            "this.$refs.suggestions.$el.querySelector",
            "this.getInput",
            "highlight",
            "suggestion.querySelectorAll"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.getInput",
                "code": "getInput() {\n        return this.$refs.input.getInput();\n      }"
            },
            {
                "name": "highlight",
                "code": "highlight(index) {\n        if (!this.suggestionVisible || this.loading) { return; }\n        if (index < 0) {\n          this.highlightedIndex = -1;\n          return;\n        }\n        if (index >= this.suggestions.length) {\n          index = this.suggestions.length - 1;\n        }\n        const suggestion = this.$refs.suggestions.$el.querySelector('.el-autocomplete-suggestion__wrap');\n        const suggestionList = suggestion.querySelectorAll('.el-autocomplete-suggestion__list li');\n\n        let highlightItem = suggestionList[index];\n        let scrollTop = suggestion.scrollTop;\n        let offsetTop = highlightItem.offsetTop;\n\n        if (offsetTop + highlightItem.scrollHeight > (scrollTop + suggestion.clientHeight)) {\n          suggestion.scrollTop += highlightItem.scrollHeight;\n        }\n        if (offsetTop < scrollTop) {\n          suggestion.scrollTop -= highlightItem.scrollHeight;\n        }\n        this.highlightedIndex = index;\n        let $input = this.getInput();\n        $input.setAttribute('aria-activedescendant', `${this.id}-item-${this.highlightedIndex}`);\n      }"
            }
        ],
        "third_party": [
            "$input.setAttribute",
            "this.$refs.suggestions.$el.querySelector",
            "suggestion.querySelectorAll"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "translateItem(index, activeIndex, oldIndex)",
        "start_line": "79",
        "end_line": "104",
        "file_path": "packages/carousel/src/item.vue",
        "docstring": "This function, translateItem, updates the state of a carousel item based on its index, active index, and old index.\\nIt handles different behaviors depending on the carousel type (card or non-card) and direction (vertical or horizontal).\\nFor non-card types, it manages animation states and looping logic.\\nFor card types, it calculates the item's translation and scaling, warning if vertical direction is used.\\nIt sets the item's active state, translation, scaling, and marks it as ready.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2db32f7ad18f",
        "ground_truth": "translateItem(index, activeIndex, oldIndex) {\n  const parentType = this.$parent.type;\n  const parentDirection = this.parentDirection;\n  const length = this.$parent.items.length;\n  if (parentType !== 'card' && oldIndex !== undefined) {\n    this.animating = index === activeIndex || index === oldIndex;\n  }\n  if (index !== activeIndex && length > 2 && this.$parent.loop) {\n    index = this.processIndex(index, activeIndex, length);\n  }\n  if (parentType === 'card') {\n    if (parentDirection === 'vertical') {\n      console.warn('[Element Warn][Carousel]vertical direction is not supported in card mode');\n    }\n    this.inStage = Math.round(Math.abs(index - activeIndex)) <= 1;\n    this.active = index === activeIndex;\n    this.translate = this.calcCardTranslate(index, activeIndex);\n    this.scale = this.active ? 1 : CARD_SCALE;\n  } else {\n    this.active = index === activeIndex;\n    const isVertical = parentDirection === 'vertical';\n    this.translate = this.calcTranslate(index, activeIndex, isVertical);\n    this.scale = 1;\n  }\n  this.ready = true;\n},",
        "import_statements": [],
        "reference_api": [
            "this.calcTranslate",
            "translateItem",
            "Math.abs",
            "console.warn",
            "this.calcCardTranslate",
            "this.processIndex",
            "Math.round"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.calcTranslate",
                "code": "calcTranslate(index, activeIndex, isVertical) {\n        const distance = this.$parent.$el[isVertical ? 'offsetHeight' : 'offsetWidth'];\n        return distance * (index - activeIndex);\n      }"
            },
            {
                "name": "translateItem",
                "code": "translateItem(index, activeIndex, oldIndex) {\n        const parentType = this.$parent.type;\n        const parentDirection = this.parentDirection;\n        const length = this.$parent.items.length;\n        if (parentType !== 'card' && oldIndex !== undefined) {\n          this.animating = index === activeIndex || index === oldIndex;\n        }\n        if (index !== activeIndex && length > 2 && this.$parent.loop) {\n          index = this.processIndex(index, activeIndex, length);\n        }\n        if (parentType === 'card') {\n          if (parentDirection === 'vertical') {\n            console.warn('[Element Warn][Carousel]vertical direction is not supported in card mode');\n          }\n          this.inStage = Math.round(Math.abs(index - activeIndex)) <= 1;\n          this.active = index === activeIndex;\n          this.translate = this.calcCardTranslate(index, activeIndex);\n          this.scale = this.active ? 1 : CARD_SCALE;\n        } else {\n          this.active = index === activeIndex;\n          const isVertical = parentDirection === 'vertical';\n          this.translate = this.calcTranslate(index, activeIndex, isVertical);\n          this.scale = 1;\n        }\n        this.ready = true;\n      }"
            },
            {
                "name": "this.calcCardTranslate",
                "code": "calcCardTranslate(index, activeIndex) {\n        const parentWidth = this.$parent.$el.offsetWidth;\n        if (this.inStage) {\n          return parentWidth * ((2 - CARD_SCALE) * (index - activeIndex) + 1) / 4;\n        } else if (index < activeIndex) {\n          return -(1 + CARD_SCALE) * parentWidth / 4;\n        } else {\n          return (3 + CARD_SCALE) * parentWidth / 4;\n        }\n      }"
            },
            {
                "name": "this.processIndex",
                "code": "processIndex(index, activeIndex, length) {\n        if (activeIndex === 0 && index === length - 1) {\n          return -1;\n        } else if (activeIndex === length - 1 && index === 0) {\n          return length;\n        } else if (index < activeIndex - 1 && activeIndex - index >= length / 2) {\n          return length + 1;\n        } else if (index > activeIndex + 1 && index - activeIndex >= length / 2) {\n          return -2;\n        }\n        return index;\n      }"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "handleButtonEnter(arrow)",
        "start_line": "193",
        "end_line": "200",
        "file_path": "packages/carousel/src/main.vue",
        "docstring": "This function, handleButtonEnter, handles the hover state for items when a button is entered.\\nIf the direction is 'vertical', it returns immediately.\\nIt iterates through the items, and if the arrow matches the itemInStage result for an item, it sets that item's hover state to true.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "49b9aa91f62e",
        "ground_truth": "handleButtonEnter(arrow) {\n  if (this.direction === 'vertical') return;\n  this.items.forEach((item, index) => {\n    if (arrow === this.itemInStage(item, index)) {\n      item.hover = true;\n    }\n  });\n},",
        "import_statements": [
            "element-ui/src/utils/resize-event"
        ],
        "reference_api": [
            "this.itemInStage",
            "handleButtonEnter",
            "this.items.forEach"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.itemInStage",
                "code": "itemInStage(item, index) {\n      const length = this.items.length;\n      if (index === length - 1 && item.inStage && this.items[0].active ||\n        (item.inStage && this.items[index + 1] && this.items[index + 1].active)) {\n        return 'left';\n      } else if (index === 0 && item.inStage && this.items[length - 1].active ||\n        (item.inStage && this.items[index - 1] && this.items[index - 1].active)) {\n        return 'right';\n      }\n      return false;\n    }"
            },
            {
                "name": "handleButtonEnter",
                "code": "handleButtonEnter(arrow) {\n      if (this.direction === 'vertical') return;\n      this.items.forEach((item, index) => {\n        if (arrow === this.itemInStage(item, index)) {\n          item.hover = true;\n        }\n      });\n    }"
            },
            {
                "name": "this.items.forEach",
                "code": "items(val) {\n      if (val.length > 0) this.setActiveItem(this.initialIndex);\n    }"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "scrollIntoView()",
        "start_line": "345",
        "end_line": "358",
        "file_path": "packages/cascader-panel/src/cascader-panel.vue",
        "docstring": "This method, scrollIntoView, ensures active menu items are scrolled into view.\\nIt checks if the code is running on the server and exits if true.\\nFor each menu reference, it finds the scrollable container and the active or in-active-path node within the menu.\\nIt then calls scrollIntoView to bring the active node into view within the container.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "85cdf6991b1f",
        "ground_truth": "scrollIntoView() {\n  if (this.$isServer) return;\n  const menus = this.$refs.menu || [];\n  menus.forEach(menu => {\n    const menuElement = menu.$el;\n    if (menuElement) {\n      const container = menuElement.querySelector('.el-scrollbar__wrap');\n      const activeNode = menuElement.querySelector('.el-cascader-node.is-active') ||\n        menuElement.querySelector('.el-cascader-node.in-active-path');\n      scrollIntoView(container, activeNode);\n    }\n  });\n},",
        "import_statements": [
            "./store",
            "element-ui/src/utils/merge",
            "element-ui/src/utils/aria-utils",
            "element-ui/src/utils/scroll-into-view",
            "element-ui/src/utils/util"
        ],
        "reference_api": [
            "scrollIntoView",
            "menus.forEach",
            "menuElement.querySelector"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "scrollIntoView",
                "code": "scrollIntoView() {\n      if (this.$isServer) return;\n\n      const menus = this.$refs.menu || [];\n      menus.forEach(menu => {\n        const menuElement = menu.$el;\n        if (menuElement) {\n          const container = menuElement.querySelector('.el-scrollbar__wrap');\n          const activeNode = menuElement.querySelector('.el-cascader-node.is-active') ||\n            menuElement.querySelector('.el-cascader-node.in-active-path');\n          scrollIntoView(container, activeNode);\n        }\n      });\n    }"
            }
        ],
        "third_party": [
            "menus.forEach",
            "menuElement.querySelector"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "const rgb2hsv = function(r, g, b)",
        "start_line": "90",
        "end_line": "121",
        "file_path": "packages/color-picker/src/color.js",
        "docstring": "This function, rgb2hsv, converts RGB color values to HSV color values.\\nIt normalizes the RGB values to a range of 0 to 1 and calculates the maximum and minimum values.\\nIt determines the value (v) as the maximum value and the saturation (s) based on the difference between the max and min values.\\nThe hue (h) is calculated based on which RGB value is the maximum, with adjustments for different ranges.\\nFinally, it returns the HSV values with hue multiplied by 360 and saturation and value multiplied by 100.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "fc6784c79aa5",
        "ground_truth": "const rgb2hsv = function(r, g, b) {\n  r = bound01(r, 255);\n  g = bound01(g, 255);\n  b = bound01(b, 255);\n   const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let h, s;\n  let v = max;\n   const d = max - min;\n  s = max === 0 ? 0 : d / max;\n   if (max === min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n    h /= 6;\n  }\n   return { h: h * 360, s: s * 100, v: v * 100 };\n};",
        "import_statements": [],
        "reference_api": [
            "bound01",
            "Math.max",
            "Math.min"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "bound01"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "handleDrag(event)",
        "start_line": "53",
        "end_line": "70",
        "file_path": "packages/color-picker/src/components/alpha-slider.vue",
        "docstring": "This function, handleDrag, handles the drag event to adjust a color's alpha value.\\nIt calculates the position of the drag relative to the element's bounding rectangle and adjusts based on whether the orientation is vertical or horizontal.\\nThe alpha value is set by normalizing the drag position within the element's dimensions.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "37b868b6a5cc",
        "ground_truth": "handleDrag(event) {\n  const rect = this.$el.getBoundingClientRect();\n  const { thumb } = this.$refs;\n  if (!this.vertical) {\n    let left = event.clientX - rect.left;\n    left = Math.max(thumb.offsetWidth / 2, left);\n    left = Math.min(left, rect.width - thumb.offsetWidth / 2);\n    this.color.set('alpha', Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));\n  } else {\n    let top = event.clientY - rect.top;\n    top = Math.max(thumb.offsetHeight / 2, top);\n    top = Math.min(top, rect.height - thumb.offsetHeight / 2);\n    this.color.set('alpha', Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));\n  }\n},",
        "import_statements": [],
        "reference_api": [
            "this.$el.getBoundingClientRect",
            "this.color.set",
            "handleDrag",
            "Math.max",
            "Math.min",
            "Math.round"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "handleDrag",
                "code": "handleDrag(event) {\n        const rect = this.$el.getBoundingClientRect();\n        const { thumb } = this.$refs;\n\n        if (!this.vertical) {\n          let left = event.clientX - rect.left;\n          left = Math.max(thumb.offsetWidth / 2, left);\n          left = Math.min(left, rect.width - thumb.offsetWidth / 2);\n\n          this.color.set('alpha', Math.round((left - thumb.offsetWidth / 2) / (rect.width - thumb.offsetWidth) * 100));\n        } else {\n          let top = event.clientY - rect.top;\n          top = Math.max(thumb.offsetHeight / 2, top);\n          top = Math.min(top, rect.height - thumb.offsetHeight / 2);\n\n          this.color.set('alpha', Math.round((top - thumb.offsetHeight / 2) / (rect.height - thumb.offsetHeight) * 100));\n        }\n      }"
            }
        ],
        "third_party": [
            "this.$el.getBoundingClientRect",
            "this.color.set"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "displayValue()",
        "start_line": "531",
        "end_line": "547",
        "file_path": "packages/date-picker/src/picker.vue",
        "docstring": "This function, displayValue, formats and returns a value based on parsed input, format, type, and a range separator.\\nIf the user input is an array, it returns the user input values or formatted values.\\nIf the user input is not null, it returns the user input.\\nIf there is a formatted value, it returns it as a joined string for certain types or as is.\\nIf none of these conditions are met, it returns an empty string.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "a3b2c61b5a1e",
        "ground_truth": "displayValue() {\n  const formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);\n  if (Array.isArray(this.userInput)) {\n    return [\n      this.userInput[0] || (formattedValue && formattedValue[0]) || '',\n      this.userInput[1] || (formattedValue && formattedValue[1]) || ''\n    ];\n  } else if (this.userInput !== null) {\n    return this.userInput;\n  } else if (formattedValue) {\n    return (this.type === 'dates' || this.type === 'years' || this.type === 'months')\n      ? formattedValue.join(', ')\n      : formattedValue;\n  } else {\n    return '';\n  }\n},",
        "import_statements": [
            "element-ui/src/utils/clickoutside",
            "element-ui/src/utils/date-util",
            "element-ui/src/utils/vue-popper",
            "element-ui/src/mixins/emitter",
            "element-ui/packages/input",
            "element-ui/src/utils/merge"
        ],
        "reference_api": [
            "displayValue",
            "formatAsFormatAndType",
            "Array.isArray",
            "formattedValue.join"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "displayValue",
                "code": "displayValue() {\n      const formattedValue = formatAsFormatAndType(this.parsedValue, this.format, this.type, this.rangeSeparator);\n      if (Array.isArray(this.userInput)) {\n        return [\n          this.userInput[0] || (formattedValue && formattedValue[0]) || '',\n          this.userInput[1] || (formattedValue && formattedValue[1]) || ''\n        ];\n      } else if (this.userInput !== null) {\n        return this.userInput;\n      } else if (formattedValue) {\n        return (this.type === 'dates' || this.type === 'years' || this.type === 'months')\n          ? formattedValue.join(', ')\n          : formattedValue;\n      } else {\n        return '';\n      }\n    }"
            }
        ],
        "third_party": [
            "formatAsFormatAndType",
            "formattedValue.join"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "handleStartChange(event)",
        "start_line": "697",
        "end_line": "708",
        "file_path": "packages/date-picker/src/picker.vue",
        "docstring": "This function, handleStartChange, processes the start value change event.\\nIt parses the user input and updates the userInput array with the formatted start value and the existing end display value.\\nIt then sets the new picker value with the parsed start value and the existing end value.\\nIf the new value is valid, it emits the input event with the new value and resets the userInput to null.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "305dba2399e1",
        "ground_truth": "handleStartChange(event) {\n  const value = this.parseString(this.userInput && this.userInput[0]);\n  if (value) {\n    this.userInput = [this.formatToString(value), this.displayValue[1]];\n    const newValue = [value, this.picker.value && this.picker.value[1]];\n    this.picker.value = newValue;\n    if (this.isValidValue(newValue)) {\n      this.emitInput(newValue);\n      this.userInput = null;\n    }\n  }\n},",
        "import_statements": [
            "element-ui/src/utils/clickoutside",
            "element-ui/src/utils/date-util",
            "element-ui/src/utils/vue-popper",
            "element-ui/src/mixins/emitter",
            "element-ui/packages/input",
            "element-ui/src/utils/merge"
        ],
        "reference_api": [
            "this.isValidValue",
            "this.parseString",
            "handleStartChange",
            "this.formatToString",
            "this.emitInput"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "this.parseString",
                "code": "parseString(value) {\n      const type = Array.isArray(value) ? this.type : this.type.replace('range', '');\n      return parseAsFormatAndType(value, this.format, type);\n    }"
            },
            {
                "name": "handleStartChange",
                "code": "handleStartChange(event) {\n      const value = this.parseString(this.userInput && this.userInput[0]);\n      if (value) {\n        this.userInput = [this.formatToString(value), this.displayValue[1]];\n        const newValue = [value, this.picker.value && this.picker.value[1]];\n        this.picker.value = newValue;\n        if (this.isValidValue(newValue)) {\n          this.emitInput(newValue);\n          this.userInput = null;\n        }\n      }\n    }"
            },
            {
                "name": "this.formatToString",
                "code": "formatToString(value) {\n      const type = Array.isArray(value) ? this.type : this.type.replace('range', '');\n      return formatAsFormatAndType(value, this.format, type);\n    }"
            }
        ],
        "third_party": [
            "this.isValidValue",
            "this.emitInput"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "bindScrollEvent()",
        "start_line": "220",
        "end_line": "231",
        "file_path": "packages/date-picker/src/basic/time-spinner.vue",
        "docstring": "This function, bindScrollEvent, binds scroll events to the 'hours', 'minutes', and 'seconds' elements.\\nIt defines a bindFunction that sets the onscroll event handler for each element's wrap property.\\nThe event handler calls the handleScroll method with the element type and the scroll event.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0f76d5fb83b3",
        "ground_truth": "bindScrollEvent() {\n  const bindFunction = (type) => {\n    this.$refs[type].wrap.onscroll = (e) => {\n      // TODO: scroll is emitted when set scrollTop programatically\n      // should find better solutions in the future!\n      this.handleScroll(type, e);\n    };\n  };\n  bindFunction('hours');\n  bindFunction('minutes');\n  bindFunction('seconds');\n},",
        "import_statements": [],
        "reference_api": [
            "this.handleScroll"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "this.handleScroll"
        ]
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "scrollDown(step)",
        "start_line": "259",
        "end_line": "287",
        "file_path": "packages/date-picker/src/basic/time-spinner.vue",
        "docstring": "This function, scrollDown, adjusts the current scrollbar value by a given step.\\nIf there is no active scrollbar, it emits a select range event for 'hours'.\\nFor the 'hours' scrollbar, it iterates through the hours list to adjust the value while skipping unavailable hours.\\nFor other scrollbars, it adjusts the value within a 60-minute range.\\nIt then updates the date field, adjusts the spinner, and emits a select range event for the current scrollbar.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "fe8ad366d911",
        "ground_truth": "scrollDown(step) {\n  if (!this.currentScrollbar) {\n    this.emitSelectRange('hours');\n  }\n  const label = this.currentScrollbar;\n  const hoursList = this.hoursList;\n  let now = this[label];\n  if (this.currentScrollbar === 'hours') {\n    let total = Math.abs(step);\n    step = step > 0 ? 1 : -1;\n    let length = hoursList.length;\n    while (length-- && total) {\n      now = (now + step + hoursList.length) % hoursList.length;\n      if (hoursList[now]) {\n        continue;\n      }\n      total--;\n    }\n    if (hoursList[now]) return;\n  } else {\n    now = (now + step + 60) % 60;\n  }\n  this.modifyDateField(label, now);\n  this.adjustSpinner(label, now);\n  this.$nextTick(() => this.emitSelectRange(this.currentScrollbar));\n},",
        "import_statements": [],
        "reference_api": [
            "this.emitSelectRange",
            "Math.abs",
            "this.modifyDateField",
            "this.adjustSpinner",
            "this.$nextTick"
        ],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "imgStyle()",
        "start_line": "135",
        "end_line": "147",
        "file_path": "packages/image/src/image-viewer.vue",
        "docstring": "This function, imgStyle, generates a style object for an image based on the current transformation properties.\\nIt sets the transform property using scale and rotation values, and applies a transition if enabled.\\nIt adjusts the image position with offsetX and offsetY values.\\nIf the mode is set to 'CONTAIN', it also sets maxWidth and maxHeight to 100%.\\nThe function returns the constructed style object.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "9b22163fdfde",
        "ground_truth": "imgStyle() {\n  const { scale, deg, offsetX, offsetY, enableTransition } = this.transform;\n  const style = {\n    transform: `scale(${scale}) rotate(${deg}deg)`,\n    transition: enableTransition ? 'transform .3s' : '',\n    'margin-left': `${offsetX}px`,\n    'margin-top': `${offsetY}px`\n  };\n  if (this.mode === Mode.CONTAIN) {\n    style.maxWidth = style.maxHeight = '100%';\n  }\n  return style;\n},",
        "import_statements": [],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Vue",
        "owner/repo": "ElemeFE/element",
        "function_declaration": "addLazyLoadListener()",
        "start_line": "172",
        "end_line": "192",
        "file_path": "packages/image/src/main.vue",
        "docstring": "This function, addLazyLoadListener, adds a lazy load listener to the component.\\nIt checks if the code is running on the server and returns if true.\\nIt determines the scroll container based on the provided scrollContainer value, which can be an HTML element, a string selector, or derived from the component's element.\\nOnce the scroll container is found, it sets up a throttled lazy load handler and attaches it to the scroll event of the container.\\nThe lazy load handler is also called immediately.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "3bf2230ab870",
        "ground_truth": "addLazyLoadListener() {\n  if (this.$isServer) return;\n  const { scrollContainer } = this;\n  let _scrollContainer = null;\n  if (isHtmlElement(scrollContainer)) {\n    _scrollContainer = scrollContainer;\n  } else if (isString(scrollContainer)) {\n    _scrollContainer = document.querySelector(scrollContainer);\n  } else {\n    _scrollContainer = getScrollContainer(this.$el);\n  }\n  if (_scrollContainer) {\n    this._scrollContainer = _scrollContainer;\n    this._lazyLoadHandler = throttle(200, this.handleLazyLoad);\n    on(_scrollContainer, 'scroll', this._lazyLoadHandler);\n    this.handleLazyLoad();\n  }\n},",
        "import_statements": [],
        "reference_api": [
            "isHtmlElement",
            "document.querySelector",
            "on",
            "getScrollContainer",
            "addLazyLoadListener",
            "throttle",
            "isString",
            "this.handleLazyLoad"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "addLazyLoadListener",
                "code": "addLazyLoadListener() {\n        if (this.$isServer) return;\n\n        const { scrollContainer } = this;\n        let _scrollContainer = null;\n\n        if (isHtmlElement(scrollContainer)) {\n          _scrollContainer = scrollContainer;\n        } else if (isString(scrollContainer)) {\n          _scrollContainer = document.querySelector(scrollContainer);\n        } else {\n          _scrollContainer = getScrollContainer(this.$el);\n        }\n\n        if (_scrollContainer) {\n          this._scrollContainer = _scrollContainer;\n          this._lazyLoadHandler = throttle(200, this.handleLazyLoad);\n          on(_scrollContainer, 'scroll', this._lazyLoadHandler);\n          this.handleLazyLoad();\n        }\n      }"
            },
            {
                "name": "this.handleLazyLoad",
                "code": "handleLazyLoad() {\n        if (isInContainer(this.$el, this._scrollContainer)) {\n          this.show = true;\n          this.removeLazyLoadListener();\n        }\n      }"
            }
        ],
        "third_party": [
            "isHtmlElement",
            "on",
            "getScrollContainer",
            "throttle",
            "isString"
        ]
    },
    {
        "subclass": "Next",
        "owner/repo": "trpc/trpc",
        "function_declaration": "function transformQueryOrMutationCacheErrors<\n  TState extends\n    | DehydratedState['mutations'][0]\n    | DehydratedState['queries'][0],\n>(result: TState): TState ",
        "start_line": "24",
        "end_line": "45",
        "file_path": "packages/next/src/ssrPrepass.ts",
        "docstring": "This function, transformQueryOrMutationCacheErrors, processes cache errors for queries or mutations.\\nIt checks if the error in the result state is an instance of TRPCClientError.\\nIf so, it creates a new error object with the same message, data, and shape, and updates the result state with this new error.\\nIf not, it returns the original result unchanged.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7180fba29076",
        "ground_truth": "function transformQueryOrMutationCacheErrors<\n  TState extends\n    | DehydratedState['mutations'][0]\n    | DehydratedState['queries'][0],\n>(result: TState): TState {\n  const error = result.state.error as Maybe<TRPCClientError<any>>;\n  if (error instanceof Error && error.name === 'TRPCClientError') {\n    const newError: TRPCClientErrorLike<any> = {\n      message: error.message,\n      data: error.data,\n      shape: error.shape,\n    };\n    return {\n      ...result,\n      state: {\n        ...result.state,\n        error: newError,\n      },\n    };\n  }\n  return result;\n}",
        "import_statements": [
            "import type { DehydratedState } from '@tanstack/react-query';",
            "{ DehydratedState }",
            "{ DehydratedState }",
            "DehydratedState",
            "import { dehydrate } from '@tanstack/react-query';",
            "{ dehydrate }",
            "{ dehydrate }",
            "dehydrate",
            "import { createTRPCUntypedClient } from '@trpc/client';",
            "{ createTRPCUntypedClient }",
            "{ createTRPCUntypedClient }",
            "createTRPCUntypedClient",
            "import type { CoercedTransformerParameters } from '@trpc/client/unstable-internals';",
            "{ CoercedTransformerParameters }",
            "{ CoercedTransformerParameters }",
            "CoercedTransformerParameters",
            "import { getTransformer } from '@trpc/client/unstable-internals';",
            "{ getTransformer }",
            "{ getTransformer }",
            "getTransformer",
            "import type { TRPCClientError, TRPCClientErrorLike } from '@trpc/react-query';",
            "{ TRPCClientError, TRPCClientErrorLike }",
            "{ TRPCClientError, TRPCClientErrorLike }",
            "TRPCClientError",
            "TRPCClientErrorLike",
            "import { getQueryClient } from '@trpc/react-query/shared';",
            "{ getQueryClient }",
            "{ getQueryClient }",
            "getQueryClient",
            "import type {\n  AnyRouter,\n  Dict,\n  Maybe,\n} from '@trpc/server/unstable-core-do-not-import';",
            "{\n  AnyRouter,\n  Dict,\n  Maybe,\n}",
            "{\n  AnyRouter,\n  Dict,\n  Maybe,\n}",
            "AnyRouter",
            "Dict",
            "Maybe",
            "import type {\n  AppContextType,\n  NextPageContext,\n} from 'next/dist/shared/lib/utils';",
            "{\n  AppContextType,\n  NextPageContext,\n}",
            "{\n  AppContextType,\n  NextPageContext,\n}",
            "AppContextType",
            "NextPageContext",
            "import { createElement } from 'react';",
            "{ createElement }",
            "{ createElement }",
            "createElement",
            "import type { TRPCPrepassHelper, TRPCPrepassProps } from './withTRPC';",
            "{ TRPCPrepassHelper, TRPCPrepassProps }",
            "{ TRPCPrepassHelper, TRPCPrepassProps }",
            "TRPCPrepassHelper",
            "TRPCPrepassProps"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "trpc/trpc",
        "function_declaration": "WithTRPC.getInitialProps = async (appOrPageCtx: AppContextType) => ",
        "start_line": "162",
        "end_line": "184",
        "file_path": "packages/next/src/withTRPC.tsx",
        "docstring": "This async function, WithTRPC.getInitialProps, determines if it is wrapping an App or Page component.\\nIt executes the wrapped component's getInitialProps function and merges its result with additional page properties.\\nIt then returns the merged properties in a format suitable for the wrapped component type.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b0ff12e8aa0d",
        "ground_truth": "WithTRPC.getInitialProps = async (appOrPageCtx: AppContextType) => {\n  // Determine if we are wrapping an App component or a Page component.\n  const isApp = !!appOrPageCtx.Component;\n  // Run the wrapped component's getInitialProps function.\n  let pageProps: Dict<unknown> = {};\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const originalProps = await AppOrPage.getInitialProps!(\n    appOrPageCtx as any,\n  );\n  const originalPageProps = isApp\n    ? originalProps.pageProps ?? {}\n    : originalProps;\n  pageProps = {\n    ...originalPageProps,\n    ...pageProps,\n  };\n  const getAppTreeProps = (props: Dict<unknown>) =>\n    isApp ? { pageProps: props } : props;\n  return getAppTreeProps(pageProps);\n};",
        "import_statements": [
            "import type { DehydratedState, QueryClient } from '@tanstack/react-query';",
            "{ DehydratedState, QueryClient }",
            "{ DehydratedState, QueryClient }",
            "DehydratedState",
            "QueryClient",
            "import { HydrationBoundary, QueryClientProvider } from '@tanstack/react-query';",
            "{ HydrationBoundary, QueryClientProvider }",
            "{ HydrationBoundary, QueryClientProvider }",
            "HydrationBoundary",
            "QueryClientProvider",
            "import type { CreateTRPCClientOptions, TRPCUntypedClient } from '@trpc/client';",
            "{ CreateTRPCClientOptions, TRPCUntypedClient }",
            "{ CreateTRPCClientOptions, TRPCUntypedClient }",
            "CreateTRPCClientOptions",
            "TRPCUntypedClient",
            "import type { CoercedTransformerParameters } from '@trpc/client/unstable-internals';",
            "{ CoercedTransformerParameters }",
            "{ CoercedTransformerParameters }",
            "CoercedTransformerParameters",
            "import {\n  getTransformer,\n  type TransformerOptions,\n} from '@trpc/client/unstable-internals';",
            "{\n  getTransformer,\n  type TransformerOptions,\n}",
            "{\n  getTransformer,\n  type TransformerOptions,\n}",
            "getTransformer",
            "type TransformerOptions",
            "import type { TRPCClientError } from '@trpc/react-query';",
            "{ TRPCClientError }",
            "{ TRPCClientError }",
            "TRPCClientError",
            "import type {\n  CreateTRPCReactOptions,\n  CreateTRPCReactQueryClientConfig,\n} from '@trpc/react-query/shared';",
            "{\n  CreateTRPCReactOptions,\n  CreateTRPCReactQueryClientConfig,\n}",
            "{\n  CreateTRPCReactOptions,\n  CreateTRPCReactQueryClientConfig,\n}",
            "CreateTRPCReactOptions",
            "CreateTRPCReactQueryClientConfig",
            "import { createRootHooks, getQueryClient } from '@trpc/react-query/shared';",
            "{ createRootHooks, getQueryClient }",
            "{ createRootHooks, getQueryClient }",
            "createRootHooks",
            "getQueryClient",
            "import type {\n  AnyRouter,\n  Dict,\n  inferClientTypes,\n  ResponseMeta,\n} from '@trpc/server/unstable-core-do-not-import';",
            "{\n  AnyRouter,\n  Dict,\n  inferClientTypes,\n  ResponseMeta,\n}",
            "{\n  AnyRouter,\n  Dict,\n  inferClientTypes,\n  ResponseMeta,\n}",
            "AnyRouter",
            "Dict",
            "inferClientTypes",
            "ResponseMeta",
            "import type {\n  AppContextType,\n  AppPropsType,\n  NextComponentType,\n  NextPageContext,\n} from 'next/dist/shared/lib/utils';",
            "{\n  AppContextType,\n  AppPropsType,\n  NextComponentType,\n  NextPageContext,\n}",
            "{\n  AppContextType,\n  AppPropsType,\n  NextComponentType,\n  NextPageContext,\n}",
            "AppContextType",
            "AppPropsType",
            "NextComponentType",
            "NextPageContext",
            "import type { NextRouter } from 'next/router';",
            "{ NextRouter }",
            "{ NextRouter }",
            "NextRouter",
            "import React, { useState } from 'react';",
            "React, { useState }",
            "{ useState }",
            "useState"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "trpc/trpc",
        "function_declaration": "export function formDataToObject(formData: FormData)",
        "start_line": "35",
        "end_line": "44",
        "file_path": "packages/server/src/unstable-core-do-not-import/http/formDataToObject.ts",
        "docstring": "This function, formDataToObject, converts a FormData object into a plain JavaScript object.\\nIt iterates through the FormData entries, splits each key into parts, and sets the corresponding value in the resulting object using a nested structure based on the key parts.\\nFinally, it returns the constructed object.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b46c87572278",
        "ground_truth": "export function formDataToObject(formData: FormData) {\n  const obj: Record<string, unknown> = {};\n   for (const [key, value] of formData.entries()) {\n    const parts = key.split(/[\\.\\[\\]]/).filter(Boolean);\n    set(obj, parts, value);\n  }\n   return obj;\n}",
        "import_statements": [],
        "reference_api": [
            "set",
            "key.split",
            "formData.entries",
            "key.split(/[\\.\\[\\]]/).filter"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "set",
                "code": "s"
            },
            {
                "name": "key.split",
                "code": "s"
            },
            {
                "name": "formData.entries",
                "code": "s"
            },
            {
                "name": "key.split(/[\\.\\[\\]]/).filter",
                "code": "s"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "trpc/trpc",
        "function_declaration": "export async function experimental_revalidateEndpoint(req: Request)",
        "start_line": "202",
        "end_line": "219",
        "file_path": "packages/next/src/app-dir/server.ts",
        "docstring": "This async function, experimental_revalidateEndpoint, handles a request to revalidate a cache tag.\\nIt extracts the cacheTag from the request JSON body and checks if it is a string.\\nIf not, it responds with an error message and a 400 status.\\nIf valid, it calls revalidateTag with the cacheTag and responds with a success message, including the current timestamp, and a 200 status.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b63467546c58",
        "ground_truth": "export async function experimental_revalidateEndpoint(req: Request) {\n  const { cacheTag } = await req.json();\n   if (typeof cacheTag !== 'string') {\n    return new Response(\n      JSON.stringify({\n        revalidated: false,\n        error: 'cacheTag must be a string',\n      }),\n      { status: 400 },\n    );\n  }\n   revalidateTag(cacheTag);\n  return new Response(JSON.stringify({ revalidated: true, now: Date.now() }), {\n    status: 200,\n  });\n}",
        "import_statements": [
            "import {\n  clientCallTypeToProcedureType,\n  createTRPCUntypedClient,\n} from '@trpc/client';",
            "{\n  clientCallTypeToProcedureType,\n  createTRPCUntypedClient,\n}",
            "{\n  clientCallTypeToProcedureType,\n  createTRPCUntypedClient,\n}",
            "clientCallTypeToProcedureType",
            "createTRPCUntypedClient",
            "import type { CreateContextCallback } from '@trpc/server';",
            "{ CreateContextCallback }",
            "{ CreateContextCallback }",
            "CreateContextCallback",
            "import type {\n  AnyProcedure,\n  AnyRootTypes,\n  AnyRouter,\n  ErrorHandlerOptions,\n  inferClientTypes,\n  inferProcedureInput,\n  MaybePromise,\n  RootConfig,\n  Simplify,\n  TRPCResponse,\n} from '@trpc/server/unstable-core-do-not-import';",
            "{\n  AnyProcedure,\n  AnyRootTypes,\n  AnyRouter,\n  ErrorHandlerOptions,\n  inferClientTypes,\n  inferProcedureInput,\n  MaybePromise,\n  RootConfig,\n  Simplify,\n  TRPCResponse,\n}",
            "{\n  AnyProcedure,\n  AnyRootTypes,\n  AnyRouter,\n  ErrorHandlerOptions,\n  inferClientTypes,\n  inferProcedureInput,\n  MaybePromise,\n  RootConfig,\n  Simplify,\n  TRPCResponse,\n}",
            "AnyProcedure",
            "AnyRootTypes",
            "AnyRouter",
            "ErrorHandlerOptions",
            "inferClientTypes",
            "inferProcedureInput",
            "MaybePromise",
            "RootConfig",
            "Simplify",
            "TRPCResponse",
            "import {\n  createRecursiveProxy,\n  formDataToObject,\n  getErrorShape,\n  getTRPCErrorFromUnknown,\n  transformTRPCResponse,\n  TRPCError,\n} from '@trpc/server/unstable-core-do-not-import';",
            "{\n  createRecursiveProxy,\n  formDataToObject,\n  getErrorShape,\n  getTRPCErrorFromUnknown,\n  transformTRPCResponse,\n  TRPCError,\n}",
            "{\n  createRecursiveProxy,\n  formDataToObject,\n  getErrorShape,\n  getTRPCErrorFromUnknown,\n  transformTRPCResponse,\n  TRPCError,\n}",
            "createRecursiveProxy",
            "formDataToObject",
            "getErrorShape",
            "getTRPCErrorFromUnknown",
            "transformTRPCResponse",
            "TRPCError",
            "import { revalidateTag } from 'next/cache';",
            "{ revalidateTag }",
            "{ revalidateTag }",
            "revalidateTag",
            "import { isNotFoundError } from 'next/dist/client/components/not-found';",
            "{ isNotFoundError }",
            "{ isNotFoundError }",
            "isNotFoundError",
            "import { isRedirectError } from 'next/dist/client/components/redirect';",
            "{ isRedirectError }",
            "{ isRedirectError }",
            "isRedirectError",
            "import { cache } from 'react';",
            "{ cache }",
            "{ cache }",
            "cache",
            "import type {\n  ActionHandlerDef,\n  CreateTRPCNextAppRouterOptions,\n  inferActionDef,\n} from './shared';",
            "{\n  ActionHandlerDef,\n  CreateTRPCNextAppRouterOptions,\n  inferActionDef,\n}",
            "{\n  ActionHandlerDef,\n  CreateTRPCNextAppRouterOptions,\n  inferActionDef,\n}",
            "ActionHandlerDef",
            "CreateTRPCNextAppRouterOptions",
            "inferActionDef",
            "import { generateCacheTag, isFormData } from './shared';",
            "{ generateCacheTag, isFormData }",
            "{ generateCacheTag, isFormData }",
            "generateCacheTag",
            "isFormData",
            "import type { NextAppDirDecorateRouterRecord } from './types';",
            "{ NextAppDirDecorateRouterRecord }",
            "{ NextAppDirDecorateRouterRecord }",
            "NextAppDirDecorateRouterRecord"
        ],
        "reference_api": [
            "JSON.stringify",
            "Date.now",
            "revalidateTag",
            "req.json"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "revalidateTag",
                "code": ")"
            },
            {
                "name": "req.json",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "trpc/trpc",
        "function_declaration": "export function createUseProxy<TRouter extends AnyRouter>",
        "start_line": "41",
        "end_line": "54",
        "file_path": "packages/next/src/app-dir/shared.ts",
        "docstring": "This function, createUseProxy, creates a proxy for a TRPC client.\\nIt uses createRecursiveProxy to generate a proxy that maps procedure records of a given router type.\\nThe proxy constructs a path from the provided options and calls the client's query method with the path and arguments.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "4cc5d9754d1f",
        "ground_truth": "export function createUseProxy<TRouter extends AnyRouter>(\n  client: TRPCUntypedClient<TRouter>,\n) {\n  return createRecursiveProxy<\n    UseProcedureRecord<\n      TRouter['_def']['_config']['$types'],\n      TRouter['_def']['record']\n    >\n  >((opts) => {\n    const path = opts.path.join('.');\n     return client.query(path, ...opts.args);\n  });\n}",
        "import_statements": [
            "import type {\n  CreateTRPCClientOptions,\n  Resolver,\n  TRPCUntypedClient,\n} from '@trpc/client';",
            "{\n  CreateTRPCClientOptions,\n  Resolver,\n  TRPCUntypedClient,\n}",
            "{\n  CreateTRPCClientOptions,\n  Resolver,\n  TRPCUntypedClient,\n}",
            "CreateTRPCClientOptions",
            "Resolver",
            "TRPCUntypedClient",
            "import type { inferProcedureOutput } from '@trpc/server';",
            "{ inferProcedureOutput }",
            "{ inferProcedureOutput }",
            "inferProcedureOutput",
            "import type {\n  AnyClientTypes,\n  AnyProcedure,\n  AnyQueryProcedure,\n  AnyRootTypes,\n  AnyRouter,\n  inferProcedureInput,\n  inferTransformedProcedureOutput,\n  ProtectedIntersection,\n  RouterRecord,\n} from '@trpc/server/unstable-core-do-not-import';",
            "{\n  AnyClientTypes,\n  AnyProcedure,\n  AnyQueryProcedure,\n  AnyRootTypes,\n  AnyRouter,\n  inferProcedureInput,\n  inferTransformedProcedureOutput,\n  ProtectedIntersection,\n  RouterRecord,\n}",
            "{\n  AnyClientTypes,\n  AnyProcedure,\n  AnyQueryProcedure,\n  AnyRootTypes,\n  AnyRouter,\n  inferProcedureInput,\n  inferTransformedProcedureOutput,\n  ProtectedIntersection,\n  RouterRecord,\n}",
            "AnyClientTypes",
            "AnyProcedure",
            "AnyQueryProcedure",
            "AnyRootTypes",
            "AnyRouter",
            "inferProcedureInput",
            "inferTransformedProcedureOutput",
            "ProtectedIntersection",
            "RouterRecord",
            "import { createRecursiveProxy } from '@trpc/server/unstable-core-do-not-import';",
            "{ createRecursiveProxy }",
            "{ createRecursiveProxy }",
            "createRecursiveProxy"
        ],
        "reference_api": [
            "client.query",
            "opts.path.join"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "client.query",
                "code": "o"
            },
            {
                "name": "opts.path.join",
                "code": "o"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "const Accordion = ({ child, name }: AccordionProps) =>",
        "start_line": "9",
        "end_line": "27",
        "file_path": "next/src/components/Accordion.tsx",
        "docstring": "This functional component, Accordion, renders an accordion UI element using AccordionPrimitive.\\nIt displays a button with the provided name and a chevron icon that rotates when open.\\nWhen the accordion is open, it shows the child content inside a panel with specified styles for both the button and panel elements.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "ec07b15792dd",
        "ground_truth": "const Accordion = ({ child, name }: AccordionProps) => {\n  return (\n    <AccordionPrimitive>\n      {({ open }) => (\n        <>\n          <AccordionPrimitive.Button className=\"border:black delay-50 flex w-full items-center justify-between rounded-xl bg-[#4a4a4a] px-3 py-2 text-sm tracking-wider outline-0 transition-all placeholder:text-white/20 hover:border-[#1E88E5]/40 hover:bg-[#6b6b6b] focus:border-[#1E88E5] focus-visible:ring  md:text-lg\">\n            {name}\n            <FaChevronDown\n              className={`${open ? \"rotate-180 transform\" : \"\"} h-5 w-5`}\n            />\n          </AccordionPrimitive.Button>\n          <AccordionPrimitive.Panel className=\"rounded-xl bg-[#4a4a4a] p-2\">\n            {child}\n          </AccordionPrimitive.Panel>\n        </>\n      )}\n    </AccordionPrimitive>\n  );\n};",
        "import_statements": [
            "import { Disclosure as AccordionPrimitive } from \"@headlessui/react\"",
            "import { FaChevronDown } from \"react-icons/fa\""
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "function Menu({ icon, name, items, chevron, buttonPosition = \"top\" }: MenuProps)",
        "start_line": "15",
        "end_line": "28",
        "file_path": "next/src/components/Menu.tsx",
        "docstring": "This function, Menu, returns a JSX element representing a styled menu component.\\nIt uses MenuPrimitive for the base menu structure and includes a button displaying an icon, optional name, and optional chevron.\\nWhen the button is clicked, it shows the menu items, which are positioned based on the buttonPosition prop.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "728fa96ca3cf",
        "ground_truth": "function Menu({ icon, name, items, chevron, buttonPosition = \"top\" }: MenuProps) {\n  return (\n    <MenuPrimitive>\n      <div className=\"relative\">\n        <MenuPrimitive.Button className=\"flex h-8 items-center gap-1 rounded-lg bg-slate-1 p-2 font-bold shadow-depth-1 hover:bg-slate-3\">\n          <div>{icon}</div>\n          {name && <p className=\"text-gray/50 font-mono text-sm\">{name}</p>}\n          {chevron && <FaChevronDown size={15} className=\"ml-2\" />}\n        </MenuPrimitive.Button>\n        <MenuItems buttonPosition={buttonPosition} items={items} />\n      </div>\n    </MenuPrimitive>\n  );\n}",
        "import_statements": [
            "import { Menu as MenuPrimitive, Transition } from \"@headlessui/react\";",
            "{ Menu as MenuPrimitive, Transition }",
            "{ Menu as MenuPrimitive, Transition }",
            "Menu as MenuPrimitive",
            "Transition",
            "import clsx from \"clsx\";",
            "clsx",
            "import type { ReactNode } from \"react\";",
            "{ ReactNode }",
            "{ ReactNode }",
            "ReactNode",
            "import { Fragment } from \"react\";",
            "{ Fragment }",
            "{ Fragment }",
            "Fragment",
            "import { FaChevronDown } from \"react-icons/fa\";",
            "{ FaChevronDown }",
            "{ FaChevronDown }",
            "FaChevronDown"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "const handleScroll = (event: React.UIEvent<HTMLDivElement>) => ",
        "start_line": "36",
        "end_line": "42",
        "file_path": "next/src/components/console/ChatWindow.tsx",
        "docstring": "This function, handleScroll, handles the scroll event of a div element.\\nIt checks if the user has scrolled up from the bottom by comparing scrollTop, scrollHeight, and clientHeight values with a threshold of 10 pixels.\\nIt then updates the state to indicate whether the user has scrolled up.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "a2733fb19224",
        "ground_truth": "const handleScroll = (event: React.UIEvent<HTMLDivElement>) => {\n  const { scrollTop, scrollHeight, clientHeight } = event.currentTarget;\n  // Use has scrolled if we have scrolled up at all from the bottom\n  const hasUserScrolled = scrollTop < scrollHeight - clientHeight - 10;\n  setHasUserScrolled(hasUserScrolled);\n};",
        "import_statements": [
            "import clsx from \"clsx\";",
            "clsx",
            "import { useTranslation } from \"next-i18next\";",
            "{ useTranslation }",
            "{ useTranslation }",
            "useTranslation",
            "import type { ReactNode } from \"react\";",
            "{ ReactNode }",
            "{ ReactNode }",
            "ReactNode",
            "import React, { useEffect, useRef, useState } from \"react\";",
            "React, { useEffect, useRef, useState }",
            "{ useEffect, useRef, useState }",
            "useEffect",
            "useRef",
            "useState",
            "import { FaArrowCircleDown, FaCommentDots } from \"react-icons/fa\";",
            "{ FaArrowCircleDown, FaCommentDots }",
            "{ FaArrowCircleDown, FaCommentDots }",
            "FaArrowCircleDown",
            "FaCommentDots",
            "import { ImSpinner2 } from \"react-icons/im\";",
            "{ ImSpinner2 }",
            "{ ImSpinner2 }",
            "ImSpinner2",
            "import type { HeaderProps } from \"./MacWindowHeader\";",
            "{ HeaderProps }",
            "{ HeaderProps }",
            "HeaderProps",
            "import { MacWindowHeader, messageListId } from \"./MacWindowHeader\";",
            "{ MacWindowHeader, messageListId }",
            "{ MacWindowHeader, messageListId }",
            "MacWindowHeader",
            "messageListId",
            "import { useAgentStore } from \"../../stores\";",
            "{ useAgentStore }",
            "{ useAgentStore }",
            "useAgentStore",
            "import Button from \"../Button\";",
            "Button",
            "import Input from \"../Input\";",
            "Input",
            "import HideShow from \"../motions/HideShow\";",
            "HideShow"
        ],
        "reference_api": [
            "setHasUserScrolled"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "setHasUserScrolled",
                "code": "e"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "const handleScrollToBottom = (behaviour: \"instant\" | \"smooth\") =>",
        "start_line": "44",
        "end_line": "51",
        "file_path": "next/src/components/console/ChatWindow.tsx",
        "docstring": "This function, handleScrollToBottom, scrolls a referenced element to its bottom.\\nIt checks if the scrollRef and its current property are defined.\\nIf so, it scrolls to the bottom of the element with the specified scroll behavior, either 'instant' or 'smooth'.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "128baf9be3e8",
        "ground_truth": "const handleScrollToBottom = (behaviour: \"instant\" | \"smooth\") => {\n  if (!scrollRef || !scrollRef.current) return;\n  scrollRef.current.scrollTo({\n    top: scrollRef.current.scrollHeight,\n    behavior: behaviour,\n  });\n};",
        "import_statements": [
            "import clsx from \"clsx\";",
            "clsx",
            "import { useTranslation } from \"next-i18next\";",
            "{ useTranslation }",
            "{ useTranslation }",
            "useTranslation",
            "import type { ReactNode } from \"react\";",
            "{ ReactNode }",
            "{ ReactNode }",
            "ReactNode",
            "import React, { useEffect, useRef, useState } from \"react\";",
            "React, { useEffect, useRef, useState }",
            "{ useEffect, useRef, useState }",
            "useEffect",
            "useRef",
            "useState",
            "import { FaArrowCircleDown, FaCommentDots } from \"react-icons/fa\";",
            "{ FaArrowCircleDown, FaCommentDots }",
            "{ FaArrowCircleDown, FaCommentDots }",
            "FaArrowCircleDown",
            "FaCommentDots",
            "import { ImSpinner2 } from \"react-icons/im\";",
            "{ ImSpinner2 }",
            "{ ImSpinner2 }",
            "ImSpinner2",
            "import type { HeaderProps } from \"./MacWindowHeader\";",
            "{ HeaderProps }",
            "{ HeaderProps }",
            "HeaderProps",
            "import { MacWindowHeader, messageListId } from \"./MacWindowHeader\";",
            "{ MacWindowHeader, messageListId }",
            "{ MacWindowHeader, messageListId }",
            "MacWindowHeader",
            "messageListId",
            "import { useAgentStore } from \"../../stores\";",
            "{ useAgentStore }",
            "{ useAgentStore }",
            "useAgentStore",
            "import Button from \"../Button\";",
            "Button",
            "import Input from \"../Input\";",
            "Input",
            "import HideShow from \"../motions/HideShow\";",
            "HideShow"
        ],
        "reference_api": [
            "scrollRef.current.scrollTo"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "scrollRef.current.scrollTo",
                "code": "e"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "const saveElementAsImage = (elementId: string) =>",
        "start_line": "27",
        "end_line": "51",
        "file_path": "next/src/components/console/MacWindowHeader.tsx",
        "docstring": "This function, saveElementAsImage, saves a specified HTML element as an image.\\nIt locates the element by its ID and, if found, converts it to a JPEG image using the htmlToImage library with specific style adjustments.\\nThe resulting image is then downloaded as 'agent-gpt-output.png'.\\nIf an error occurs, an alert notifies the user that saving the image failed.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "070c4b1ac0b5",
        "ground_truth": "const saveElementAsImage = (elementId: string) => {\n  const element = document.getElementById(elementId);\n  if (!element) {\n    return;\n  }\n  htmlToImage\n    .toJpeg(element, {\n      height: element.scrollHeight,\n      style: {\n        overflowY: \"visible\",\n        maxHeight: \"none\",\n        border: \"none\",\n      },\n    })\n    .then((dataUrl) => {\n      const link = document.createElement(\"a\");\n      link.href = dataUrl;\n      link.download = \"agent-gpt-output.png\";\n      link.click();\n    })\n    .catch(() =>\n      alert(\"Error saving image! Note this doesn't work if the AI generated an image\")\n    );\n};",
        "import_statements": [
            "import clsx from \"clsx\";",
            "clsx",
            "import * as htmlToImage from \"html-to-image\";",
            "* as htmlToImage",
            "* as htmlToImage",
            "import { useTranslation } from \"next-i18next\";",
            "{ useTranslation }",
            "{ useTranslation }",
            "useTranslation",
            "import type { PropsWithChildren, ReactNode } from \"react\";",
            "{ PropsWithChildren, ReactNode }",
            "{ PropsWithChildren, ReactNode }",
            "PropsWithChildren",
            "ReactNode",
            "import React from \"react\";",
            "React",
            "import { CgExport } from \"react-icons/cg\";",
            "{ CgExport }",
            "{ CgExport }",
            "CgExport",
            "import { FaImage } from \"react-icons/fa\";",
            "{ FaImage }",
            "{ FaImage }",
            "FaImage",
            "import { FiClipboard } from \"react-icons/fi\";",
            "{ FiClipboard }",
            "{ FiClipboard }",
            "FiClipboard",
            "import type { Message } from \"../../types/message\";",
            "{ Message }",
            "{ Message }",
            "Message",
            "import Menu from \"../Menu\";",
            "Menu",
            "import Expand from \"../motions/expand\";",
            "Expand",
            "import PopIn from \"../motions/popin\";",
            "PopIn",
            "import PDFButton from \"../pdf/PDFButton\";",
            "PDFButton",
            "import WindowButton from \"../WindowButton\";",
            "WindowButton"
        ],
        "reference_api": [
            "alert"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "alert",
                "code": "e"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "const copyElementText = (elementId: string) =>",
        "start_line": "53",
        "end_line": "80",
        "file_path": "next/src/components/console/MacWindowHeader.tsx",
        "docstring": "This function, copyElementText, copies the text content of an HTML element with the given ID to the clipboard.\\nIt first retrieves the element by its ID and extracts its inner text.\\nIf the Clipboard API is available, it uses it to write the text to the clipboard.\\nFor unsupported browsers, it falls back to creating a temporary textarea element to execute the copy command manually.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "346ea48343da",
        "ground_truth": "const copyElementText = (elementId: string) => {\n  const element = document.getElementById(elementId);\n  if (!element) {\n    return;\n  }\n  const text = element.innerText;\n  if (navigator.clipboard) {\n    void navigator.clipboard.writeText(text);\n  } else {\n    // Fallback to a different method for unsupported browsers\n    const textArea = document.createElement(\"textarea\");\n    textArea.value = text;\n    document.body.appendChild(textArea);\n    textArea.focus();\n    textArea.select();\n    try {\n      document.execCommand(\"copy\");\n      console.log(\"Text copied to clipboard\");\n    } catch (err) {\n      console.error(\"Unable to copy text to clipboard\", err);\n    }\n    document.body.removeChild(textArea);\n  }\n};",
        "import_statements": [
            "import clsx from \"clsx\";",
            "clsx",
            "import * as htmlToImage from \"html-to-image\";",
            "* as htmlToImage",
            "* as htmlToImage",
            "import { useTranslation } from \"next-i18next\";",
            "{ useTranslation }",
            "{ useTranslation }",
            "useTranslation",
            "import type { PropsWithChildren, ReactNode } from \"react\";",
            "{ PropsWithChildren, ReactNode }",
            "{ PropsWithChildren, ReactNode }",
            "PropsWithChildren",
            "ReactNode",
            "import React from \"react\";",
            "React",
            "import { CgExport } from \"react-icons/cg\";",
            "{ CgExport }",
            "{ CgExport }",
            "CgExport",
            "import { FaImage } from \"react-icons/fa\";",
            "{ FaImage }",
            "{ FaImage }",
            "FaImage",
            "import { FiClipboard } from \"react-icons/fi\";",
            "{ FiClipboard }",
            "{ FiClipboard }",
            "FiClipboard",
            "import type { Message } from \"../../types/message\";",
            "{ Message }",
            "{ Message }",
            "Message",
            "import Menu from \"../Menu\";",
            "Menu",
            "import Expand from \"../motions/expand\";",
            "Expand",
            "import PopIn from \"../motions/popin\";",
            "PopIn",
            "import PDFButton from \"../pdf/PDFButton\";",
            "PDFButton",
            "import WindowButton from \"../WindowButton\";",
            "WindowButton"
        ],
        "reference_api": [
            "document.execCommand",
            "console.log",
            "textArea.focus",
            "document.body.appendChild",
            "textArea.select",
            "console.error",
            "navigator.clipboard.writeText",
            "document.createElement",
            "document.getElementById",
            "document.body.removeChild"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "document.execCommand",
                "code": "e"
            },
            {
                "name": "textArea.focus",
                "code": "e"
            },
            {
                "name": "document.body.appendChild",
                "code": "e"
            },
            {
                "name": "textArea.select",
                "code": "e"
            },
            {
                "name": "document.body.removeChild",
                "code": "e"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "const CustomCodeBlock = ({ inline, className, children }: CustomCodeBlockProps) => ",
        "start_line": "87",
        "end_line": "96",
        "file_path": "next/src/components/console/MarkdownRenderer.tsx",
        "docstring": "This function, CustomCodeBlock, is a React component that renders code blocks.\\nIf the code block is inline, it wraps the children in a styled <code> element.\\nFor non-inline code blocks, it determines the language from the className prop and applies the appropriate styling using highlight.js classes.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "25f193a0eddf",
        "ground_truth": "const CustomCodeBlock = ({ inline, className, children }: CustomCodeBlockProps) => {\n  // Inline code blocks will be placed directly within a paragraph\n  if (inline) {\n    return <code className=\"rounded bg-slate-2 px-1 py-[1px] text-black\">{children}</code>;\n  }\n   const language = className ? className.replace(\"language-\", \"\") : \"plaintext\";\n   return <code className={`hljs ${language}`}>{children}</code>;\n};",
        "import_statements": [
            "import clsx from \"clsx\";",
            "clsx",
            "import type { ReactNode } from \"react\";",
            "{ ReactNode }",
            "{ ReactNode }",
            "ReactNode",
            "import React, { useCallback, useState } from \"react\";",
            "React, { useCallback, useState }",
            "{ useCallback, useState }",
            "useCallback",
            "useState",
            "import { FiClipboard } from \"react-icons/fi\";",
            "{ FiClipboard }",
            "{ FiClipboard }",
            "FiClipboard",
            "import ReactMarkdown from \"react-markdown\";",
            "ReactMarkdown",
            "import rehypeHighlight from \"rehype-highlight\";",
            "rehypeHighlight",
            "import remarkGfm from \"remark-gfm\";",
            "remarkGfm",
            "import \"highlight.js/styles/default.css\";"
        ],
        "reference_api": [
            "className.replace"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "className.replace",
                "code": "{"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "const extractTextFromNode = (node: React.ReactNode): string =>",
        "start_line": "128",
        "end_line": "143",
        "file_path": "next/src/components/console/MarkdownRenderer.tsx",
        "docstring": "This function, extractTextFromNode, extracts text content from a React node.\\nIf the node is a string, it returns the string.\\nIf the node is an array, it recursively extracts text from each element and joins them.\\nIf the node is a valid React element, it recursively extracts text from its children.\\nOtherwise, it returns an empty string.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7ba7dfdc0ab6",
        "ground_truth": "const extractTextFromNode = (node: React.ReactNode): string => {\n  if (typeof node === \"string\") {\n    return node;\n  }\n   if (Array.isArray(node)) {\n    return node.map(extractTextFromNode).join(\"\");\n  }\n   if (React.isValidElement(node)) {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument,@typescript-eslint/no-unsafe-member-access\n    return extractTextFromNode(node.props.children);\n  }\n   return \"\";\n};",
        "import_statements": [
            "import clsx from \"clsx\";",
            "clsx",
            "import type { ReactNode } from \"react\";",
            "{ ReactNode }",
            "{ ReactNode }",
            "ReactNode",
            "import React, { useCallback, useState } from \"react\";",
            "React, { useCallback, useState }",
            "{ useCallback, useState }",
            "useCallback",
            "useState",
            "import { FiClipboard } from \"react-icons/fi\";",
            "{ FiClipboard }",
            "{ FiClipboard }",
            "FiClipboard",
            "import ReactMarkdown from \"react-markdown\";",
            "ReactMarkdown",
            "import rehypeHighlight from \"rehype-highlight\";",
            "rehypeHighlight",
            "import remarkGfm from \"remark-gfm\";",
            "remarkGfm",
            "import \"highlight.js/styles/default.css\";"
        ],
        "reference_api": [
            "node.map",
            "extractTextFromNode",
            "node.map(extractTextFromNode).join",
            "Array.isArray",
            "React.isValidElement"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "node.map",
                "code": "{"
            },
            {
                "name": "extractTextFromNode",
                "code": "{"
            },
            {
                "name": "node.map(extractTextFromNode).join",
                "code": "{"
            },
            {
                "name": "React.isValidElement",
                "code": "{"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "reworkd/AgentGPT",
        "function_declaration": "const Summarize = () =>",
        "start_line": "8",
        "end_line": "38",
        "file_path": "next/src/components/console/SummarizeButton.tsx",
        "docstring": "This functional component, Summarize, checks if certain conditions are met, such as the agent being available, the lifecycle being \"stopped\", there being completed tasks with results, and the summary not already being done.\\nIf all conditions are met, it renders a div with a prompt to summarize the conversation and a button to trigger the summarization.\\nWhen the button is clicked, it sets the summary state to true and calls the agent's summarize method.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "a67cb8d31dde",
        "ground_truth": "const Summarize = () => {\n  const agent = useAgentStore.use.agent();\n  const lifecycle = useAgentStore.use.lifecycle();\n  const tasksWithResults = useTaskStore.use\n    .tasks()\n    .filter((task) => task.status == \"completed\" && task.result !== \"\");\n  const summarized = useAgentStore.use.summarized();\n  const setSummarized = useAgentStore.use.setSummarized();\n   if (!agent || lifecycle !== \"stopped\" || tasksWithResults.length < 1 || summarized) return null;\n   return (\n    <div\n      className={clsx(\n        \"mr-2 flex flex-row items-center gap-2 rounded-lg bg-slate-1 p-2 shadow-depth-1 transition duration-300 sm:mr-4\",\n        \"text-xs sm:text-base\"\n      )}\n    >\n      <span className=\"text-sm\">Click here to summarize the conversation</span>\n      <Button\n        className=\"ml-auto py-1 font-medium sm:py-1 md:py-1\"\n        onClick={async () => {\n          setSummarized(true);\n          await agent?.summarize();\n        }}\n      >\n        Summarize\n      </Button>\n    </div>\n  );\n};",
        "import_statements": [
            "import clsx from \"clsx\";",
            "clsx",
            "import React from \"react\";",
            "React",
            "import { useAgentStore } from \"../../stores\";",
            "{ useAgentStore }",
            "{ useAgentStore }",
            "useAgentStore",
            "import { useTaskStore } from \"../../stores/taskStore\";",
            "{ useTaskStore }",
            "{ useTaskStore }",
            "useTaskStore",
            "import Button from \"../Button\";",
            "Button"
        ],
        "reference_api": [
            "setSummarized",
            "agent?.summarize"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "setSummarized",
                "code": ")"
            },
            {
                "name": "agent?.summarize",
                "code": ")"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "noodle-run/noodle",
        "function_declaration": "export default function DashboardLayout({ children }: PropsWithChildren)",
        "start_line": "12",
        "end_line": "28",
        "file_path": "src/app/(dashboard)/layout.tsx",
        "docstring": "This function, DashboardLayout, is a React component that provides a layout for a dashboard.\\nIt wraps its children with a ClerkProvider and a TRPCReactProvider.\\nThe ClerkProvider is customized with a dark theme, a primary color, and specific styles for various elements.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "983031b20224",
        "ground_truth": "export default function DashboardLayout({ children }: PropsWithChildren) {\n  return (\n    <ClerkProvider\n      appearance={{\n        baseTheme: dark,\n        variables: { colorPrimary: '#F9617B' },\n        elements: {\n          userButtonPopoverMain: 'bg-gray-subtle',\n          navbar: 'bg-gradient-to-r from-gray-subtle to-gray-subtle',\n          pageScrollBox: 'bg-gray-subtle',\n        },\n      }}\n    >\n      <TRPCReactProvider>{children}</TRPCReactProvider>\n    </ClerkProvider>\n  );\n}",
        "import_statements": [
            "import { TRPCReactProvider } from '@/lib/trpc/react';",
            "{ TRPCReactProvider }",
            "{ TRPCReactProvider }",
            "TRPCReactProvider",
            "import { ClerkProvider } from '@clerk/nextjs';",
            "{ ClerkProvider }",
            "{ ClerkProvider }",
            "ClerkProvider",
            "import { dark } from '@clerk/themes';",
            "{ dark }",
            "{ dark }",
            "dark",
            "import type { PropsWithChildren } from 'react';",
            "{ PropsWithChildren }",
            "{ PropsWithChildren }",
            "PropsWithChildren"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "noodle-run/noodle",
        "function_declaration": "export function ActiveButton({ href, label, icon }: Props)",
        "start_line": "15",
        "end_line": "33",
        "file_path": "src/app/(dashboard)/app/_components/active-button.tsx",
        "docstring": "This function, ActiveButton, renders a button with a link, icon, and label.\\nIt uses the current pathname to conditionally apply a CSS class if the pathname matches the href prop.\\nThe button has a 'ghost' variant and contains a link with the provided icon and label, with the label truncated if necessary.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0ba912ee94c7",
        "ground_truth": "export function ActiveButton({ href, label, icon }: Props) {\n  const pathname = usePathname();\n   return (\n    <Button\n      variant=\"ghost\"\n      className={cn(\n        'justify-start gap-3 font-normal',\n        pathname === href && 'text-foreground',\n      )}\n      asChild\n    >\n      <Link href={href}>\n        {icon}\n        <span className=\"w-full truncate\">{label}</span>\n      </Link>\n    </Button>\n  );\n}",
        "import_statements": [
            "import { cn } from '@/lib/utils';",
            "{ cn }",
            "{ cn }",
            "cn",
            "import { Button } from '@/primitives/button';",
            "{ Button }",
            "{ Button }",
            "Button",
            "import Link from 'next/link';",
            "Link",
            "import { usePathname } from 'next/navigation';",
            "{ usePathname }",
            "{ usePathname }",
            "usePathname",
            "import type { ReactNode } from 'react';",
            "{ ReactNode }",
            "{ ReactNode }",
            "ReactNode"
        ],
        "reference_api": [
            "usePathname"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "usePathname"
        ]
    },
    {
        "subclass": "Next",
        "owner/repo": "noodle-run/noodle",
        "function_declaration": "export default function RootLayout({ children }: PropsWithChildren) ",
        "start_line": "26",
        "end_line": "43",
        "file_path": "src/app/layout.tsx",
        "docstring": "This function, RootLayout, defines a root layout component.\\nIt sets the HTML language to English and applies specific CSS classes, suppressing hydration warnings.\\nThe body contains a ThemeProvider for managing themes without transition on change, and includes children components along with Toaster, Analytics, and SpeedInsights components.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "1fd5b7fdcc9b",
        "ground_truth": "export default function RootLayout({ children }: PropsWithChildren) {\n  return (\n    <html\n      lang=\"en\"\n      suppressHydrationWarning\n      className={`${GeistSans.variable} ${GeistMono.variable}`}\n    >\n      <body>\n        <ThemeProvider attribute=\"class\" disableTransitionOnChange>\n          {children}\n          <Toaster />\n          <Analytics />\n          <SpeedInsights />\n        </ThemeProvider>\n      </body>\n    </html>\n  );\n}",
        "import_statements": [
            "import type { Metadata } from 'next';",
            "{ Metadata }",
            "{ Metadata }",
            "Metadata",
            "import { GeistMono } from 'geist/font/mono';",
            "{ GeistMono }",
            "{ GeistMono }",
            "GeistMono",
            "import { GeistSans } from 'geist/font/sans';",
            "{ GeistSans }",
            "{ GeistSans }",
            "GeistSans",
            "import './globals.css';",
            "import { ThemeProvider } from 'next-themes';",
            "{ ThemeProvider }",
            "{ ThemeProvider }",
            "ThemeProvider",
            "import type { PropsWithChildren } from 'react';",
            "{ PropsWithChildren }",
            "{ PropsWithChildren }",
            "PropsWithChildren",
            "import { Analytics } from '@vercel/analytics/react';",
            "{ Analytics }",
            "{ Analytics }",
            "Analytics",
            "import { SpeedInsights } from '@vercel/speed-insights/next';",
            "{ SpeedInsights }",
            "{ SpeedInsights }",
            "SpeedInsights",
            "import { constructMetadata } from '@/lib/utils';",
            "{ constructMetadata }",
            "{ constructMetadata }",
            "constructMetadata",
            "import { Toaster } from '@/primitives/sonner';",
            "{ Toaster }",
            "{ Toaster }",
            "Toaster"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Next",
        "owner/repo": "Blazity/next-enterprise",
        "function_declaration": "export function Button({ className, intent, size, underline, ...props }: ButtonProps)",
        "start_line": "41",
        "end_line": "47",
        "file_path": "components/Button/Button.tsx",
        "docstring": "This function, Button, is a React component that renders an anchor (a) element.\\nIt merges the provided className with other styling classes based on intent, size, and underline properties using twMerge.\\nThe resulting className is applied to the anchor element, and any additional props are spread onto it.\\nThe children of the anchor element are rendered inside it.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "390ef9405b57",
        "ground_truth": "export function Button({ className, intent, size, underline, ...props }: ButtonProps) {\n  return (\n    <a className={twMerge(button({ intent, size, className, underline }))} {...props}>\n      {props.children}\n    </a>\n  )\n}",
        "import_statements": [
            "import { cva, type VariantProps } from \"class-variance-authority\"",
            "{ cva, type VariantProps }",
            "{ cva, type VariantProps }",
            "cva",
            "type VariantProps",
            "import { twMerge } from \"tailwind-merge\"",
            "{ twMerge }",
            "{ twMerge }",
            "twMerge"
        ],
        "reference_api": [
            "button"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "button"
        ]
    },
    {
        "subclass": "Next",
        "owner/repo": "Blazity/next-enterprise",
        "function_declaration": "export function middleware(request: NextRequest)",
        "start_line": "4",
        "end_line": "9",
        "file_path": "middleware.ts",
        "docstring": "This middleware function checks if the request host includes \"next-enterprise.vercel.app\".\\nIf it does, it redirects the request to \"https://blazity.com/open-source/nextjs-enterprise-boilerplate\" with a 301 status code.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "aa655671cb7e",
        "ground_truth": "export function middleware(request: NextRequest) {\n  // TODO: Feel free to remove this block\n  if (request.headers?.get(\"host\")?.includes(\"next-enterprise.vercel.app\")) {\n    return NextResponse.redirect(\"https://blazity.com/open-source/nextjs-enterprise-boilerplate\", { status: 301 })\n  }\n}",
        "import_statements": [
            "import { NextResponse } from \"next/server\"",
            "{ NextResponse }",
            "{ NextResponse }",
            "NextResponse",
            "import type { NextRequest } from \"next/server\"",
            "{ NextRequest }",
            "{ NextRequest }",
            "NextRequest"
        ],
        "reference_api": [
            "NextResponse.redirect",
            "request.headers?.get",
            "request.headers?.get(\"host\")?.includes"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "NextResponse.redirect",
            "request.headers?.get",
            "request.headers?.get(\"host\")?.includes"
        ]
    },
    {
        "subclass": "Node",
        "owner/repo": "expressjs/express",
        "function_declaration": "app.lazyrouter = function lazyrouter()",
        "start_line": "144",
        "end_line": "154",
        "file_path": "lib/application.js",
        "docstring": "This function, lazyrouter, initializes the router for the app if it is not already created.\\nIt sets up the router with case sensitivity and strict routing based on the app's configuration.\\nAdditionally, it configures the router to use a query parser and an initialization middleware.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b33fa69187fb",
        "ground_truth": "app.lazyrouter = function lazyrouter() {\n  if (!this._router) {\n    this._router = new Router({\n      caseSensitive: this.enabled('case sensitive routing'),\n      strict: this.enabled('strict routing')\n    });\n     this._router.use(query(this.get('query parser fn')));\n    this._router.use(middleware.init(this));\n  }\n};",
        "import_statements": [],
        "reference_api": [
            "this.enabled",
            "middleware.init",
            "this.get",
            "query",
            "this._router.use"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "this.enabled",
            "middleware.init",
            "this.get",
            "query",
            "this._router.use"
        ]
    },
    {
        "subclass": "Node",
        "owner/repo": "expressjs/express",
        "function_declaration": "function createApplication()",
        "start_line": "37",
        "end_line": "57",
        "file_path": "lib/express.js",
        "docstring": "This function, createApplication, creates and initializes an application object.\\nThe application handles requests by delegating to its handle method.\\nIt mixes in properties from EventEmitter and a prototype object into the app.\\nIt sets up prototypes for requests and responses, linking them to the app.\\nFinally, it calls the app's init method and returns the app object.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7aadf79801c0",
        "ground_truth": "function createApplication() {\n  var app = function(req, res, next) {\n    app.handle(req, res, next);\n  };\n   mixin(app, EventEmitter.prototype, false);\n  mixin(app, proto, false);\n   // expose the prototype that will get set on requests\n  app.request = Object.create(req, {\n    app: { configurable: true, enumerable: true, writable: true, value: app }\n  })\n   // expose the prototype that will get set on responses\n  app.response = Object.create(res, {\n    app: { configurable: true, enumerable: true, writable: true, value: app }\n  })\n   app.init();\n  return app;\n}",
        "import_statements": [],
        "reference_api": [
            "mixin",
            "Object.create",
            "app.init",
            "app.handle"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "mixin",
            "app.init",
            "app.handle"
        ]
    },
    {
        "subclass": "Node",
        "owner/repo": "expressjs/express",
        "function_declaration": "res.sendFile = function sendFile(path, options, callback) ",
        "start_line": "419",
        "end_line": "458",
        "file_path": "lib/response.js",
        "docstring": "This function, sendFile, sends a file as a response in an Express application.\\nIt validates the provided path and options, ensuring the path is a string and either absolute or with a root directory specified.\\nIt supports a callback as the second argument, adjusting the options accordingly.\\nIt creates a file stream for the specified path and transfers the file, handling errors by invoking the callback or the next middleware as appropriate.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2b4af4a14e81",
        "ground_truth": "res.sendFile = function sendFile(path, options, callback) {\n  var done = callback;\n  var req = this.req;\n  var res = this;\n  var next = req.next;\n  var opts = options || {};\n   if (!path) {\n    throw new TypeError('path argument is required to res.sendFile');\n  }\n   if (typeof path !== 'string') {\n    throw new TypeError('path must be a string to res.sendFile')\n  }\n   // support function as second arg\n  if (typeof options === 'function') {\n    done = options;\n    opts = {};\n  }\n   if (!opts.root && !isAbsolute(path)) {\n    throw new TypeError('path must be absolute or specify root to res.sendFile');\n  }\n   // create file stream\n  var pathname = encodeURI(path);\n  var file = send(req, pathname, opts);\n   // transfer\n  sendfile(res, file, opts, function (err) {\n    if (done) return done(err);\n    if (err && err.code === 'EISDIR') return next();\n     // next() all but write errors\n    if (err && err.code !== 'ECONNABORTED' && err.syscall !== 'write') {\n      next(err);\n    }\n  });\n};",
        "import_statements": [],
        "reference_api": [
            "done",
            "encodeURI",
            "next",
            "isAbsolute",
            "sendfile",
            "send"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "sendfile",
                "code": "function sendfile(res, file, options, callback) {\n  var done = false;\n  var streaming;\n\n  // request aborted\n  function onaborted() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('Request aborted');\n    err.code = 'ECONNABORTED';\n    callback(err);\n  }\n\n  // directory\n  function ondirectory() {\n    if (done) return;\n    done = true;\n\n    var err = new Error('EISDIR, read');\n    err.code = 'EISDIR';\n    callback(err);\n  }\n\n  // errors\n  function onerror(err) {\n    if (done) return;\n    done = true;\n    callback(err);\n  }\n\n  // ended\n  function onend() {\n    if (done) return;\n    done = true;\n    callback();\n  }\n\n  // file\n  function onfile() {\n    streaming = false;\n  }\n\n  // finished\n  function onfinish(err) {\n    if (err && err.code === 'ECONNRESET') return onaborted();\n    if (err) return onerror(err);\n    if (done) return;\n\n    setImmediate(function () {\n      if (streaming !== false && !done) {\n        onaborted();\n        return;\n      }\n\n      if (done) return;\n      done = true;\n      callback();\n    });\n  }\n\n  // streaming\n  function onstream() {\n    streaming = true;\n  }\n\n  file.on('directory', ondirectory);\n  file.on('end', onend);\n  file.on('error', onerror);\n  file.on('file', onfile);\n  file.on('stream', onstream);\n  onFinished(res, onfinish);\n\n  if (options.headers) {\n    // set headers on successful transfer\n    file.on('headers', function headers(res) {\n      var obj = options.headers;\n      var keys = Object.keys(obj);\n\n      for (var i = 0; i < keys.length; i++) {\n        var k = keys[i];\n        res.setHeader(k, obj[k]);\n      }\n    });\n  }\n\n  // pipe\n  file.pipe(res);\n}"
            }
        ],
        "third_party": [
            "done",
            "next",
            "isAbsolute",
            "send"
        ]
    },
    {
        "subclass": "Node",
        "owner/repo": "expressjs/express",
        "function_declaration": "View.prototype.lookup = function lookup(name)",
        "start_line": "104",
        "end_line": "123",
        "file_path": "lib/view.js",
        "docstring": "This function, lookup, searches for a file path based on a given name within the root directories of a View instance.\\nIt iterates through the root directories, resolving the path, directory, and file name.\\nThe function attempts to resolve the file path for each root directory until it finds a valid path, which it then returns.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "24ba2258749d",
        "ground_truth": "View.prototype.lookup = function lookup(name) {\n  var path;\n  var roots = [].concat(this.root);\n   debug('lookup \"%s\"', name);\n   for (var i = 0; i < roots.length && !path; i++) {\n    var root = roots[i];\n     // resolve the path\n    var loc = resolve(root, name);\n    var dir = dirname(loc);\n    var file = basename(loc);\n     // resolve the file\n    path = this.resolve(dir, file);\n  }\n   return path;\n};",
        "import_statements": [],
        "reference_api": [
            "dirname",
            "resolve",
            "debug",
            "this.resolve",
            "[].concat",
            "basename"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "dirname",
            "resolve",
            "debug",
            "this.resolve",
            "[].concat",
            "basename"
        ]
    },
    {
        "subclass": "Node",
        "owner/repo": "expressjs/express",
        "function_declaration": "module.exports = function query(options)",
        "start_line": "25",
        "end_line": "47",
        "file_path": "lib/middleware/query.js",
        "docstring": "This function, query, creates middleware for parsing query strings in HTTP requests.\\nIt merges the provided options with defaults and allows for a custom query string parser function.\\nIf options are not defined, it defaults to enabling prototype properties.\\nThe middleware parses the query string from the request URL and assigns it to req.query before calling next() to continue processing the request.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "4a3a45242878",
        "ground_truth": "module.exports = function query(options) {\n  var opts = merge({}, options)\n  var queryparse = qs.parse;\n   if (typeof options === 'function') {\n    queryparse = options;\n    opts = undefined;\n  }\n   if (opts !== undefined && opts.allowPrototypes === undefined) {\n    // back-compat for qs module\n    opts.allowPrototypes = true;\n  }\n   return function query(req, res, next){\n    if (!req.query) {\n      var val = parseUrl(req).query;\n      req.query = queryparse(val, opts);\n    }\n     next();\n  };\n};",
        "import_statements": [],
        "reference_api": [
            "next",
            "parseUrl",
            "queryparse",
            "merge"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "next",
            "parseUrl",
            "queryparse",
            "merge"
        ]
    },
    {
        "subclass": "Node",
        "owner/repo": "TryGhost/Ghost",
        "function_declaration": "const App: React.FC<AppProps> = ({framework, designSystem}) =>",
        "start_line": "20",
        "end_line": "30",
        "file_path": "apps/admin-x-activitypub/src/App.tsx",
        "docstring": "This functional component, App, sets up the main application structure using several providers.\\nIt wraps the main content inside a FrameworkProvider and a RoutingProvider with a base path of 'activitypub' and specified modals.\\nThe DesignSystemApp is used to apply the design system and a specific class name to the main content.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "786ae7051b03",
        "ground_truth": "const App: React.FC<AppProps> = ({framework, designSystem}) => {\n    return (\n        <FrameworkProvider {...framework}>\n            <RoutingProvider basePath='activitypub' modals={modals}>\n                <DesignSystemApp className='admin-x-activitypub' {...designSystem}>\n                    <MainContent />\n                </DesignSystemApp>\n            </RoutingProvider>\n        </FrameworkProvider>\n    );\n};",
        "import_statements": [
            "import MainContent from './MainContent';",
            "MainContent",
            "import {DesignSystemApp, DesignSystemAppProps} from '@tryghost/admin-x-design-system';",
            "{DesignSystemApp, DesignSystemAppProps}",
            "{DesignSystemApp, DesignSystemAppProps}",
            "DesignSystemApp",
            "DesignSystemAppProps",
            "import {FrameworkProvider, TopLevelFrameworkProps} from '@tryghost/admin-x-framework';",
            "{FrameworkProvider, TopLevelFrameworkProps}",
            "{FrameworkProvider, TopLevelFrameworkProps}",
            "FrameworkProvider",
            "TopLevelFrameworkProps",
            "import {RoutingProvider} from '@tryghost/admin-x-framework/routing';",
            "{RoutingProvider}",
            "{RoutingProvider}",
            "RoutingProvider"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Node",
        "owner/repo": "TryGhost/Ghost",
        "function_declaration": "const darkMode = () =>",
        "start_line": "28",
        "end_line": "47",
        "file_path": "apps/comments-ui/src/components/ContentBox.tsx",
        "docstring": "This function, darkMode, determines if the color scheme should be dark.\\nIf the colorScheme is 'light', it returns false; if 'dark', it returns true.\\nOtherwise, it checks the background color of the element's parent and calculates its contrast with white.\\nIt returns true if the contrast ratio is less than 5, indicating a dark background.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "8100930f7ce7",
        "ground_truth": "const darkMode = () => {\n    if (colorScheme === 'light') {\n        return false;\n    } else if (colorScheme === 'dark') {\n        return true;\n    } else {\n        const el = document.getElementById(ROOT_DIV_ID);\n        if (!el || !el.parentElement) {\n            return false;\n        }\n        const containerColor = getComputedStyle(el.parentElement).getPropertyValue('color');\n        const colorsOnly = containerColor.substring(containerColor.indexOf('(') + 1, containerColor.lastIndexOf(')')).split(/,\\s*/);\n        const red = parseInt(colorsOnly[0]);\n        const green = parseInt(colorsOnly[1]);\n        const blue = parseInt(colorsOnly[2]);\n        return contrast([255, 255, 255], [red, green, blue]) < 5;\n    }\n};",
        "import_statements": [
            "import Content from './content/Content';",
            "Content",
            "import Loading from './content/Loading';",
            "Loading",
            "import React from 'react';",
            "React",
            "import {ROOT_DIV_ID} from '../utils/constants';",
            "{ROOT_DIV_ID}",
            "{ROOT_DIV_ID}",
            "ROOT_DIV_ID",
            "import {useAppContext} from '../AppContext';",
            "{useAppContext}",
            "{useAppContext}",
            "useAppContext"
        ],
        "reference_api": [
            "containerColor.substring(containerColor.indexOf('(') + 1, containerColor.lastIndexOf(')')).split",
            "containerColor.lastIndexOf",
            "containerColor.substring",
            "document.getElementById",
            "contrast",
            "containerColor.indexOf",
            "parseInt",
            "getComputedStyle(el.parentElement).getPropertyValue",
            "getComputedStyle"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "containerColor.substring(containerColor.indexOf('(') + 1, containerColor.lastIndexOf(')')).split",
                "code": "{"
            },
            {
                "name": "containerColor.lastIndexOf",
                "code": "{"
            },
            {
                "name": "containerColor.substring",
                "code": "{"
            },
            {
                "name": "contrast",
                "code": "{"
            },
            {
                "name": "containerColor.indexOf",
                "code": "{"
            },
            {
                "name": "getComputedStyle(el.parentElement).getPropertyValue",
                "code": "{"
            },
            {
                "name": "getComputedStyle",
                "code": "{"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "Node",
        "owner/repo": "TryGhost/Ghost",
        "function_declaration": "const ContentTitle: React.FC<ContentTitleProps> = ({title, showCount, count}) =>",
        "start_line": "43",
        "end_line": "57",
        "file_path": "apps/comments-ui/src/components/content/ContentTitle.tsx",
        "docstring": "This React functional component, ContentTitle, renders a title and an optional count.\\nIt checks if the title is null and showCount is false, returning null in that case.\\nIf conditions are met, it returns a styled div containing the title and count elements.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7da55fac8ceb",
        "ground_truth": "const ContentTitle: React.FC<ContentTitleProps> = ({title, showCount, count}) => {\n    // We have to check for null for title because null means default, wheras empty string means empty\n    if (!title && !showCount && title !== null) {\n        return null;\n    }\n     return (\n        <div className=\"mb-8 flex w-full items-baseline justify-between font-sans\">\n            <h2 className=\"text-[2.8rem] font-bold tracking-tight dark:text-[rgba(255,255,255,0.85)]\" data-testid=\"title\">\n                <Title title={title}/>\n            </h2>\n            <Count count={count} showCount={showCount} />\n        </div>\n    );\n};",
        "import_statements": [
            "import {formatNumber} from '../../utils/helpers'",
            "import {useAppContext} from '../../AppContext'"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "def union_queryset(*args, base_queryset=None)",
        "start_line": "55",
        "end_line": "66",
        "file_path": "apps/common/utils/django.py",
        "docstring": "This function, union_queryset, takes multiple querysets and optionally a base queryset.\\nIt returns a single queryset that is the union of the provided querysets.\\nIf only one queryset is provided, it returns that queryset.\\nIf no querysets are provided, it raises a ValueError.\\nThe function orders each queryset, performs a union operation, and retrieves the IDs from the result.\\nIt filters the base queryset or the model's objects using these IDs to create the final combined queryset.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "1d104e0b7fc7",
        "ground_truth": "def union_queryset(*args, base_queryset=None):\n    if len(args) == 1:\n        return args[0]\n    elif len(args) == 0:\n        raise ValueError(\"args is empty\")\n    args = [q.order_by() for q in args]\n    sub_query = args[0].union(*args[1:])\n    queryset_id = list(sub_query.values_list('id', flat=True))\n    if not base_queryset:\n        base_queryset = args[0].model.objects\n    queryset = base_queryset.filter(id__in=queryset_id)\n    return queryset",
        "import_statements": [
            "import re",
            "from django.conf import settings",
            "from django.db import models",
            "from django.db.models.signals import post_save, pre_save",
            "from django.shortcuts import reverse as dj_reverse",
            "from django.utils import timezone",
            "from django.utils.http import url_has_allowed_host_and_scheme"
        ],
        "reference_api": [
            "list",
            "base_queryset.filter",
            "ValueError",
            "len",
            "q.order_by",
            "sub_query.values_list",
            "union"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "q.order_by",
            "union",
            "sub_query.values_list",
            "base_queryset.filter"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "def record_logs(self, ids, action, detail, model=None, **kwargs)",
        "start_line": "53",
        "end_line": "67",
        "file_path": "apps/common/views/mixins.py",
        "docstring": "This method, record_logs, records logs for specified resource IDs and actions.\\nIt temporarily overrides the language to English and determines the resource type from the model's metadata.\\nIt creates or updates an operation log with the given action and additional keyword arguments.\\nIt then constructs a list of ActivityLog instances for each resource ID, setting details and organizational information.\\nFinally, it bulk creates these ActivityLog entries in the database.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "96fe55f8e114",
        "ground_truth": "def record_logs(self, ids, action, detail, model=None, **kwargs):\n    with translation.override('en'):\n        model = model or self.model\n        resource_type = model._meta.verbose_name\n        create_or_update_operate_log(\n            action, resource_type, force=True, **kwargs\n        )\n        activities = [\n            ActivityLog(\n                resource_id=resource_id, type=ActivityChoices.operate_log,\n                detail=detail, org_id=current_org.id,\n            )\n            for resource_id in ids\n        ]\n        ActivityLog.objects.bulk_create(activities)",
        "import_statements": [
            "from django.contrib.auth.mixins import UserPassesTestMixin",
            "from django.http.response import JsonResponse",
            "from django.db.models import Model",
            "from django.utils import translation",
            "from rest_framework import permissions",
            "from rest_framework.request import Request",
            "from audits.const import ActivityChoices",
            "from audits.handler import create_or_update_operate_log",
            "from audits.models import ActivityLog",
            "from common.exceptions import UserConfirmRequired",
            "from orgs.utils import current_org"
        ],
        "reference_api": [
            "bulk_create",
            "ActivityLog",
            "translation.override",
            "create_or_update_operate_log"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "translation.override",
            "create_or_update_operate_log",
            "ActivityLog",
            "bulk_create"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "def prepare_django_request(self, request)",
        "start_line": "32",
        "end_line": "40",
        "file_path": "apps/authentication/backends/saml2/views.py",
        "docstring": "This function, prepare_django_request, prepares a dictionary containing information from a Django request object.\\nIt includes whether the connection is secure, the HTTP host, the script name, and copies of GET and POST data.\\nThe function returns this dictionary as the result.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "9e851c424f45",
        "ground_truth": "def prepare_django_request(self, request):\n    result = {\n        'https': self.is_secure(),\n        'http_host': request.META['HTTP_HOST'],\n        'script_name': request.META['PATH_INFO'],\n        'get_data': request.GET.copy(),\n        'post_data': request.POST.copy()\n    }\n    return result",
        "import_statements": [
            "import copy",
            "from urllib import parse",
            "from django.views import View",
            "from django.contrib import auth",
            "from django.urls import reverse",
            "from django.conf import settings",
            "from django.views.decorators.csrf import csrf_exempt",
            "from django.http import HttpResponseRedirect, HttpResponse, HttpResponseServerError",
            "from onelogin.saml2.auth import OneLogin_Saml2_Auth",
            "from onelogin.saml2.errors import OneLogin_Saml2_Error",
            "from onelogin.saml2.idp_metadata_parser import (\n    OneLogin_Saml2_IdPMetadataParser as IdPMetadataParse,\n    dict_deep_merge\n)",
            "from common.utils import get_logger"
        ],
        "reference_api": [
            "self.is_secure",
            "copy"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "self.is_secure"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "function getUserLang() ",
        "start_line": "1264",
        "end_line": "1271",
        "file_path": "apps/static/js/jumpserver.js",
        "docstring": "This function, getUserLang, checks the browser cookies for the presence of 'django_language=en'.\\nIf found, it returns 'en-US'; otherwise, it returns 'zh-CN'.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "dcea4bd482c4",
        "ground_truth": "function getUserLang() {\n    let userLangEN = document.cookie.indexOf('django_language=en');\n    if (userLangEN === -1) {\n        return 'zh-CN'\n    } else {\n        return 'en-US'\n    }\n}",
        "import_statements": [],
        "reference_api": [
            "document.cookie.indexOf"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "document.cookie.indexOf"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "function reloadPage()",
        "start_line": "1312",
        "end_line": "1316",
        "file_path": "apps/static/js/jumpserver.js",
        "docstring": "This function, reloadPage, sets a timeout to reload the current web page after 300 milliseconds.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "fd6824a005d5",
        "ground_truth": "function reloadPage() {\n    setTimeout(function () {\n        window.location.reload();\n    }, 300);\n}",
        "import_statements": [],
        "reference_api": [
            "setTimeout",
            "window.location.reload"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "window.location.reload"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "function fillKey(key)",
        "start_line": "1350",
        "end_line": "1361",
        "file_path": "apps/static/js/jumpserver.js",
        "docstring": "This function, fillKey, ensures a key is exactly 16 bytes long.\\nIf the key is longer than 16 bytes, it truncates it.\\nIt creates a 16-byte buffer and copies the key into this buffer.\\nThe resulting buffer is returned as the filled key.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b32d5862b6b1",
        "ground_truth": "function fillKey(key) {\n    const KeyLength = 16\n    if (key.length > KeyLength) {\n        key = key.slice(0, KeyLength)\n    }\n    const filledKey = Buffer.alloc(KeyLength)\n    const keys = Buffer.from(key)\n    for (let i = 0; i < keys.length; i++) {\n        filledKey[i] = keys[i]\n    }\n    return filledKey\n}",
        "import_statements": [],
        "reference_api": [
            "Buffer.alloc",
            "key.slice",
            "Buffer.from"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "Buffer.alloc",
            "key.slice",
            "Buffer.from"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "function rsaEncrypt(text, pubKey)",
        "start_line": "1371",
        "end_line": "1378",
        "file_path": "apps/static/js/jumpserver.js",
        "docstring": "This function, rsaEncrypt, encrypts a given text using RSA encryption with a provided public key.\\nIf the text is empty, it returns the text as is.\\nIt initializes a JSEncrypt object, sets the public key, and returns the encrypted text.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c839d19e0833",
        "ground_truth": "function rsaEncrypt(text, pubKey) {\n    if (!text) {\n        return text\n    }\n    const jsEncrypt = new JSEncrypt();\n    jsEncrypt.setPublicKey(pubKey);\n    return jsEncrypt.encrypt(text);\n}",
        "import_statements": [],
        "reference_api": [
            "jsEncrypt.encrypt",
            "jsEncrypt.setPublicKey"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "jsEncrypt.encrypt",
            "jsEncrypt.setPublicKey"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "function checkAll(id, name)",
        "start_line": "20",
        "end_line": "31",
        "file_path": "apps/static/js/jumpserver.js",
        "docstring": "This function, checkAll, toggles the checked state of a group of checkboxes based on the state of a master checkbox.\\nIt retrieves all checkboxes by name and checks or unchecks them based on the master checkbox's state.\\nIf the master checkbox is checked, all checkboxes are checked; otherwise, they are unchecked.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "c73bc91399b9",
        "ground_truth": "function checkAll(id, name) {\n    var checklist = document.getElementsByName(name);\n    if (document.getElementById(id).checked) {\n        for (var i = 0; i < checklist.length; i++) {\n            checklist[i].checked = 1;\n        }\n    } else {\n        for (var j = 0; j < checklist.length; j++) {\n            checklist[j].checked = 0;\n        }\n    }\n}",
        "import_statements": [],
        "reference_api": [
            "document.getElementsByName",
            "document.getElementById"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "document.getElementsByName"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "jumpserver/jumpserver",
        "function_declaration": "function getCookie(name)",
        "start_line": "106",
        "end_line": "120",
        "file_path": "apps/static/js/jumpserver.js",
        "docstring": "This function, getCookie, retrieves the value of a specified cookie by name.\\nIt checks if there are cookies in the document and splits them into individual cookies.\\nIt then iterates through each cookie, trims whitespace, and checks if it starts with the specified name.\\nIf a matching cookie is found, it decodes and returns its value.\\nIf no matching cookie is found, it returns null.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "5164f2c2d67e",
        "ground_truth": "function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = jQuery.trim(cookies[i]);\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                // break;\n            }\n        }\n    }\n    return cookieValue;\n}",
        "import_statements": [],
        "reference_api": [
            "document.cookie.split",
            "jQuery.trim",
            "cookie.substring",
            "decodeURIComponent"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "document.cookie.split",
            "jQuery.trim",
            "cookie.substring"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "wagtail/wagtail",
        "function_declaration": "def post(self, request)",
        "start_line": "185",
        "end_line": "214",
        "file_path": "wagtail/images/views/chooser.py",
        "docstring": "This function, post, processes a POST request to create an image.\\nIt retrieves the image model and creation form, then checks if the form is valid.\\nIf valid, it saves the image and checks for duplicates.\\nIf a duplicate is found, it returns a response indicating the duplicate.\\nIf a format selection is requested, it renders a response to select the format; otherwise, it returns the image details.\\nIf the form is invalid, it returns a response to reshow the creation form.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7ce6dc0f1f24",
        "ground_truth": "def post(self, request):\n    self.model = get_image_model()\n    self.form = self.get_creation_form()\n    if self.form.is_valid():\n        image = self.save_form(self.form)\n        duplicates = find_image_duplicates(\n            image=image,\n            user=request.user,\n            permission_policy=permission_policy,\n        )\n        existing_image = duplicates.first()\n        if existing_image:\n            return self.render_duplicate_found_response(\n                request, image, existing_image\n            )\n        if request.GET.get(\"select_format\"):\n            insertion_form = ImageInsertionForm(\n                initial={\"alt_text\": image.default_alt_text},\n                prefix=\"image-chooser-insertion\",\n            )\n            return self.render_select_format_response(image, insertion_form)\n        else:\n            # not specifying a format; return the image details now\n            return self.get_chosen_response(image)\n    else:  # form is invalid\n        return self.get_reshow_creation_form_response()",
        "import_statements": [
            "from django.conf import settings",
            "from django.shortcuts import get_object_or_404",
            "from django.template.loader import render_to_string",
            "from django.urls import path, reverse",
            "from django.utils.functional import cached_property",
            "from django.utils.http import urlencode",
            "from django.utils.translation import gettext_lazy as _",
            "from django.views.generic.base import View",
            "from wagtail.admin.auth import PermissionPolicyChecker",
            "from wagtail.admin.modal_workflow import render_modal_workflow",
            "from wagtail.admin.models import popular_tags_for_model",
            "from wagtail.admin.views.generic.chooser import (\n    BaseChooseView,\n    ChooseResultsViewMixin,\n    ChooseViewMixin,\n    ChosenMultipleViewMixin,\n    ChosenResponseMixin,\n    ChosenViewMixin,\n    CreateViewMixin,\n    CreationFormMixin,\n    PreserveURLParametersMixin,\n)",
            "from wagtail.admin.viewsets.chooser import ChooserViewSet",
            "from wagtail.images import get_image_model",
            "from wagtail.images.formats import get_image_format",
            "from wagtail.images.forms import ImageInsertionForm, get_image_form",
            "from wagtail.images.permissions import permission_policy",
            "from wagtail.images.utils import find_image_duplicates"
        ],
        "reference_api": [
            "self.render_duplicate_found_response",
            "self.render_select_format_response",
            "self.get_creation_form",
            "ImageInsertionForm",
            "self.get_reshow_creation_form_response",
            "get",
            "duplicates.first",
            "is_valid",
            "self.get_chosen_response",
            "get_image_model",
            "self.save_form",
            "find_image_duplicates"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "self.get_creation_form",
                "code": "def get_creation_form(self):\n        form_class = self.get_creation_form_class()\n        if not form_class:\n            return None\n\n        return form_class(**self.get_creation_form_kwargs())"
            },
            {
                "name": "self.save_form",
                "code": "def save_form(self, form):\n        return form.save()"
            },
            {
                "name": "find_image_duplicates",
                "code": "def find_image_duplicates(image, user, permission_policy):\n    \"\"\"\n    Finds all the duplicates of a given image.\n    To keep things simple, two images are considered to be duplicates if they have the same `file_hash` value.\n    This function also ensures that the `user` can choose one of the duplicate images returned (if any).\n    \"\"\"\n\n    instances = permission_policy.instances_user_has_permission_for(user, \"choose\")\n    return instances.exclude(pk=image.pk).filter(file_hash=image.file_hash)"
            },
            {
                "name": "self.render_duplicate_found_response",
                "code": "f render_duplicate_found_response(self, request, new_image, existing_image):\n        next_step_url = (\n            \"wagtailimages_chooser:select_format\"\n            if request.GET.get(\"select_format\")\n            else \"wagtailimages_chooser:chosen\"\n        )\n        choose_new_image_url = self.append_preserved_url_parameters(\n            reverse(next_step_url, args=(new_image.id,))\n        )\n        choose_existing_image_url = self.append_preserved_url_parameters(\n            reverse(next_step_url, args=(existing_image.id,))\n        )\n\n        cancel_duplicate_upload_action = (\n            f\"{reverse('wagtailimages:delete', args=(new_image.id,))}?\"\n            f\"{urlencode({'next': choose_existing_image_url})}\"\n        )\n\n        duplicate_upload_html = render_to_string(\n            \"wagtailimages/chooser/confirm_duplicate_upload.html\",\n            {\n                \"new_image\": new_image,\n                \"existing_image\": existing_image,\n                \"confirm_duplicate_upload_action\": choose_new_image_url,\n                \"cancel_duplicate_upload_action\": cancel_duplicate_upload_action,\n            },\n            request,\n        )\n        return render_modal_workflow(\n            request,\n            None,\n            None,\n            None,\n            json_data={\n                \"step\": \"duplicate_found\",\n                \"htmlFragment\": duplicate_upload_html,\n            },\n        )\n\n"
            },
            {
                "name": "get",
                "code": "f get(self, request):\n        self.model = get_image_model()\n        return super().get(request)\n\n"
            },
            {
                "name": "self.render_select_format_response",
                "code": "f render_select_format_response(self, image, form):\n        action_url = self.append_preserved_url_parameters(\n            reverse(\"wagtailimages_chooser:select_format\", args=(image.id,))\n        )\n        return render_modal_workflow(\n            self.request,\n            \"wagtailimages/chooser/select_format.html\",\n            None,\n            {\"image\": image, \"form\": form, \"select_format_action_url\": action_url},\n            json_data={\"step\": \"select_format\"},\n        )\n\n"
            },
            {
                "name": "self.get_chosen_response",
                "code": "def get_chosen_response(self, item):\n        \"\"\"\n        Return the HTTP response to indicate that an object has been chosen\n        \"\"\"\n        response_data = self.get_chosen_response_data(item)\n\n        if self.request.GET.get(\"multiple\"):\n            # a multiple result was requested but we're only returning one,\n            # so wrap as a list\n            response_data = [response_data]\n\n        return self._wrap_chosen_response_data(response_data)"
            },
            {
                "name": "self.get_reshow_creation_form_response",
                "code": "def get_reshow_creation_form_response(self):\n        context = {\"view\": self}\n        context.update(self.get_creation_form_context_data(self.form))\n        response_html = render_to_string(\n            self.creation_form_template_name, context, self.request\n        )\n        return render_modal_workflow(\n            self.request,\n            None,\n            None,\n            None,\n            json_data={\n                \"step\": \"reshow_creation_form\",\n                \"htmlFragment\": response_html,\n            },\n        )"
            }
        ],
        "third_party": [
            "get_image_model",
            "is_valid",
            "duplicates.first",
            "ImageInsertionForm"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "wagtail/wagtail",
        "function_declaration": "def _annotate_queryset(self, pages)",
        "start_line": "220",
        "end_line": "236",
        "file_path": "wagtail/admin/views/pages/listing.py",
        "docstring": "This function, _annotate_queryset, processes a queryset of pages by prefetching related content types and site roots.\\nIt filters the pages based on the user's permissions for explorable instances.\\nStreamfield values are deferred for specific page instances.\\nIf Wagtail workflow is enabled, workflow states are prefetched.\\nThe queryset is further annotated with site root state and approved schedule for performance optimizations.\\nFinally, the function returns the annotated queryset.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2ee66e343cd1",
        "ground_truth": "def _annotate_queryset(self, pages):\n    pages = pages.prefetch_related(\"content_type\", \"sites_rooted_here\").filter(\n        pk__in=self.permission_policy.explorable_instances(\n            self.request.user\n        ).values_list(\"pk\", flat=True)\n    )\n    # We want specific page instances, but do not need streamfield values here\n    pages = pages.defer_streamfields().specific()\n    # Annotate queryset with various states to be used later for performance optimisations\n    if getattr(settings, \"WAGTAIL_WORKFLOW_ENABLED\", True):\n        pages = pages.prefetch_workflow_states()\n    pages = pages.annotate_site_root_state().annotate_approved_schedule()\n    return pages",
        "import_statements": [
            "from django.conf import settings",
            "from django.contrib.auth import get_user_model",
            "from django.db.models import F",
            "from django.forms import CheckboxSelectMultiple, RadioSelect",
            "from django.shortcuts import get_object_or_404, redirect",
            "from django.urls import reverse",
            "from django.utils.functional import cached_property, classproperty",
            "from django.utils.translation import gettext_lazy as _",
            "from django_filters.filters import (\n    ChoiceFilter,\n    DateFromToRangeFilter,\n    ModelMultipleChoiceFilter,\n)",
            "from wagtail import hooks",
            "from wagtail.admin.filters import (\n    DateRangePickerWidget,\n    MultipleContentTypeFilter,\n    MultipleUserFilter,\n    WagtailFilterSet,\n)",
            "from wagtail.admin.forms.search import SearchForm",
            "from wagtail.admin.ui.components import MediaContainer",
            "from wagtail.admin.ui.side_panels import (\n    PageStatusSidePanel,\n)",
            "from wagtail.admin.ui.tables import Column, DateColumn",
            "from wagtail.admin.ui.tables.pages import (\n    BulkActionsColumn,\n    NavigateToChildrenColumn,\n    OrderingColumn,\n    PageStatusColumn,\n    PageTable,\n    PageTitleColumn,\n)",
            "from wagtail.admin.views import generic",
            "from wagtail.models import Page, PageLogEntry, Site, get_page_content_types",
            "from wagtail.permissions import page_permission_policy"
        ],
        "reference_api": [
            "filter",
            "getattr",
            "pages.annotate_site_root_state",
            "pages.defer_streamfields",
            "pages.prefetch_related",
            "annotate_approved_schedule",
            "values_list",
            "explorable_instances",
            "specific",
            "pages.prefetch_workflow_states"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "pages.prefetch_related",
            "values_list",
            "explorable_instances",
            "specific",
            "pages.defer_streamfields",
            "pages.prefetch_workflow_states",
            "annotate_approved_schedule",
            "pages.annotate_site_root_state"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "wagtail/wagtail",
        "function_declaration": "def search_queryset(self, queryset)",
        "start_line": "268",
        "end_line": "274",
        "file_path": "wagtail/admin/views/pages/listing.py",
        "docstring": "This method, search_queryset, modifies a given queryset based on a search condition.\\nIf the is_searching flag is true, it applies an autocomplete filter to the queryset using the query_string.\\nIt also orders the results by relevance unless explicitly ordered.\\nThe method then returns the modified or original queryset.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "970bf123b037",
        "ground_truth": "def search_queryset(self, queryset):\n    if self.is_searching:\n        queryset = queryset.autocomplete(\n            self.query_string, order_by_relevance=(not self.is_explicitly_ordered)\n        )\n    return queryset",
        "import_statements": [
            "from django.conf import settings",
            "from django.contrib.auth import get_user_model",
            "from django.db.models import F",
            "from django.forms import CheckboxSelectMultiple, RadioSelect",
            "from django.shortcuts import get_object_or_404, redirect",
            "from django.urls import reverse",
            "from django.utils.functional import cached_property, classproperty",
            "from django.utils.translation import gettext_lazy as _",
            "from django_filters.filters import (\n    ChoiceFilter,\n    DateFromToRangeFilter,\n    ModelMultipleChoiceFilter,\n)",
            "from wagtail import hooks",
            "from wagtail.admin.filters import (\n    DateRangePickerWidget,\n    MultipleContentTypeFilter,\n    MultipleUserFilter,\n    WagtailFilterSet,\n)",
            "from wagtail.admin.forms.search import SearchForm",
            "from wagtail.admin.ui.components import MediaContainer",
            "from wagtail.admin.ui.side_panels import (\n    PageStatusSidePanel,\n)",
            "from wagtail.admin.ui.tables import Column, DateColumn",
            "from wagtail.admin.ui.tables.pages import (\n    BulkActionsColumn,\n    NavigateToChildrenColumn,\n    OrderingColumn,\n    PageStatusColumn,\n    PageTable,\n    PageTitleColumn,\n)",
            "from wagtail.admin.views import generic",
            "from wagtail.models import Page, PageLogEntry, Site, get_page_content_types",
            "from wagtail.permissions import page_permission_policy"
        ],
        "reference_api": [
            "queryset.autocomplete"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "queryset.autocomplete"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "wagtail/wagtail",
        "function_declaration": "def user_can_access_snippets(user)",
        "start_line": "22",
        "end_line": "35",
        "file_path": "wagtail/snippets/permissions.py",
        "docstring": "This function, user_can_access_snippets, checks if a user has any permissions (add, change, delete, view) for any snippet model.\\nIt retrieves all snippet models and iterates through them, checking the user's permissions for each model.\\nIf the user has any permissions for a model, it returns True.\\nIf no permissions are found across all models, it returns False.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "b2058bd51dfa",
        "ground_truth": "def user_can_access_snippets(user):\n    \"\"\"\n    true if user has 'add', 'change', 'delete', or 'view' permission\n    on any model registered as a snippet type\n    \"\"\"\n    snippet_models = get_snippet_models()\n     for model in snippet_models:\n        if model.snippet_viewset.permission_policy.user_has_any_permission(\n            user, {\"add\", \"change\", \"delete\", \"view\"}\n        ):\n            return True\n     return False",
        "import_statements": [
            "from django.contrib.auth import get_permission_codename",
            "from wagtail.snippets.models import get_snippet_models"
        ],
        "reference_api": [
            "get_snippet_models",
            "user_has_any_permission"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "get_snippet_models",
                "code": "def get_snippet_models():\n    # Snippets can be registered in wagtail_hooks.py by calling register_snippet\n    # as a function instead of a decorator. Make sure we search for hooks before\n    # returning the list of snippet models.\n    search_for_hooks()\n    return SNIPPET_MODELS"
            }
        ],
        "third_party": [
            "user_has_any_permission"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "netbox-community/netbox",
        "function_declaration": "def get_auth_backends(self, request)",
        "start_line": "64",
        "end_line": "82",
        "file_path": "netbox/account/views.py",
        "docstring": "This function, get_auth_backends, retrieves a list of authentication backends for a request.\\nIt loads authentication backends from the settings and generates URLs for them.\\nIf there is a 'next' parameter in the request, it includes it in the parameters.\\nFor SAML backends with multiple identity providers, it generates separate entries for each IDP with modified display names.\\nIt returns a list of authentication data for each backend.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "bf09fb693900",
        "ground_truth": "def get_auth_backends(self, request):\n    auth_backends = []\n    saml_idps = get_saml_idps()\n    for name in load_backends(settings.AUTHENTICATION_BACKENDS).keys():\n        url = reverse('social:begin', args=[name])\n        params = {}\n        if next := request.GET.get('next'):\n            params['next'] = next\n        if name.lower() == 'saml' and saml_idps:\n            for idp in saml_idps:\n                params['idp'] = idp\n                data = self.gen_auth_data(name, url, params)\n                data['display_name'] = f'{data[\"display_name\"]} ({idp})'\n                auth_backends.append(data)\n        else:\n            auth_backends.append(self.gen_auth_data(name, url, params))\n    return auth_backends",
        "import_statements": [
            "import logging",
            "from django.conf import settings",
            "from django.contrib import messages",
            "from django.contrib.auth import login as auth_login, logout as auth_logout, update_session_auth_hash",
            "from django.contrib.auth.forms import AuthenticationForm, PasswordChangeForm",
            "from django.contrib.auth.mixins import LoginRequiredMixin",
            "from django.contrib.auth.models import update_last_login",
            "from django.contrib.auth.signals import user_logged_in",
            "from django.http import HttpResponseRedirect",
            "from django.shortcuts import get_object_or_404, redirect",
            "from django.shortcuts import render, resolve_url",
            "from django.urls import reverse",
            "from django.utils.decorators import method_decorator",
            "from django.utils.http import url_has_allowed_host_and_scheme, urlencode",
            "from django.utils.translation import gettext_lazy as _",
            "from django.views.decorators.debug import sensitive_post_parameters",
            "from django.views.generic import View",
            "from social_core.backends.utils import load_backends",
            "from account.models import UserToken",
            "from extras.models import Bookmark, ObjectChange",
            "from extras.tables import BookmarkTable, ObjectChangeTable",
            "from netbox.authentication import get_auth_backend_display, get_saml_idps",
            "from netbox.config import get_config",
            "from netbox.views import generic",
            "from users import forms, tables",
            "from users.models import UserConfig",
            "from utilities.views import register_model_view"
        ],
        "reference_api": [
            "keys",
            "get_saml_idps",
            "name.lower",
            "auth_backends.append",
            "load_backends",
            "self.gen_auth_data",
            "get",
            "reverse"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "get",
                "code": "def get(self, request):\n        form = AuthenticationForm(request)\n\n        if request.user.is_authenticated:\n            logger = logging.getLogger('netbox.auth.login')\n            return self.redirect_to_next(request, logger)\n\n        return render(request, self.template_name, {\n            'form': form,\n            'auth_backends': self.get_auth_backends(request),\n        })"
            },
            {
                "name": "self.gen_auth_data",
                "code": "def gen_auth_data(self, name, url, params):\n        display_name, icon_source = get_auth_backend_display(name)\n\n        icon_name = None\n        icon_img = None\n        if icon_source:\n            if '://' in icon_source:\n                icon_img = icon_source\n            else:\n                icon_name = icon_source\n\n        return {\n            'display_name': display_name,\n            'icon_name': icon_name,\n            'icon_img': icon_img,\n            'url': f'{url}?{urlencode(params)}',\n        }"
            },
            {
                "name": "self.gen_auth_data",
                "code": "def gen_auth_data(self, name, url, params):\n        display_name, icon_source = get_auth_backend_display(name)\n\n        icon_name = None\n        icon_img = None\n        if icon_source:\n            if '://' in icon_source:\n                icon_img = icon_source\n            else:\n                icon_name = icon_source\n\n        return {\n            'display_name': display_name,\n            'icon_name': icon_name,\n            'icon_img': icon_img,\n            'url': f'{url}?{urlencode(params)}',\n        }"
            }
        ],
        "third_party": [
            "get_saml_idps",
            "keys",
            "load_backends",
            "reverse",
            "name.lower",
            "auth_backends.append",
            "auth_backends.append"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "netbox-community/netbox",
        "function_declaration": "def as_sql(self, qn, connection)",
        "start_line": "26",
        "end_line": "30",
        "file_path": "netbox/extras/lookups.py",
        "docstring": "This function, as_sql, generates SQL for a specific operation.\\nIt processes the left-hand side (lhs) and right-hand side (rhs) of the expression using provided methods and combines their parameters.\\nIt returns a SQL string that casts the lhs as an INET type and checks if it contains the rhs, along with the combined parameters.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "ea59163b25cc",
        "ground_truth": "def as_sql(self, qn, connection):\n    lhs, lhs_params = self.process_lhs(qn, connection)\n    rhs, rhs_params = self.process_rhs(qn, connection)\n    params = lhs_params + rhs_params\n    return 'CAST(%s AS INET) >>= %s' % (lhs, rhs), params",
        "import_statements": [
            "from django.db.models import CharField, TextField, Lookup"
        ],
        "reference_api": [
            "self.process_lhs",
            "self.process_rhs"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "self.process_lhs",
            "self.process_rhs"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "netbox-community/netbox",
        "function_declaration": "def get_model_urls(app_label, model_name)",
        "start_line": "12",
        "end_line": "45",
        "file_path": "netbox/utilities/urls.py",
        "docstring": "This function, get_model_urls, generates URL paths for a given model based on its registered views.\\nIt retrieves the views for the specified app label and model name from the registry, handling cases where no views are registered.\\nFor each view configuration, it imports the view, either as a class or function, and creates a URL path with the appropriate name and kwargs.\\nThe resulting list of paths is returned.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "6658ddec6820",
        "ground_truth": "def get_model_urls(app_label, model_name):\n    \"\"\"\n    Return a list of URL paths for detail views registered to the given model.\n     Args:\n        app_label: App/plugin name\n        model_name: Model name\n    \"\"\"\n    paths = []\n     # Retrieve registered views for this model\n    try:\n        views = registry['views'][app_label][model_name]\n    except KeyError:\n        # No views have been registered for this model\n        views = []\n     for config in views:\n        # Import the view class or function\n        if type(config['view']) is str:\n            view_ = import_string(config['view'])\n        else:\n            view_ = config['view']\n        if issubclass(view_, View):\n            view_ = view_.as_view()\n         # Create a path to the view\n        name = f\"{model_name}_{config['name']}\" if config['name'] else model_name\n        url_path = f\"{config['path']}/\" if config['path'] else ''\n        paths.append(\n            path(url_path, view_, name=name, kwargs=config['kwargs'])\n        )\n     return paths",
        "import_statements": [
            "from django.urls import path",
            "from django.utils.module_loading import import_string",
            "from django.views.generic import View",
            "from netbox.registry import registry"
        ],
        "reference_api": [
            "import_string",
            "issubclass",
            "path",
            "paths.append",
            "view_.as_view",
            "type"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "import_string",
            "view_.as_view",
            "paths.append",
            "path"
        ]
    },
    {
        "subclass": "Django",
        "owner/repo": "netbox-community/netbox",
        "function_declaration": "def run_validators(instance, validators)",
        "start_line": "28",
        "end_line": "47",
        "file_path": "netbox/extras/signals.py",
        "docstring": "This function, run_validators, runs a series of validators on a given instance.\\nIt retrieves the current request and iterates through each validator.\\nIf a validator is specified as a string, it dynamically loads the validator class.\\nIf a validator is a dictionary, it creates a CustomValidator instance from it.\\nIf a validator is not a subclass of CustomValidator, it raises an ImproperlyConfigured exception.\\nFinally, it applies each validator to the instance and request.",
        "language": "Python",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "9f4c69dfe312",
        "ground_truth": "def run_validators(instance, validators):\n    \"\"\"\n    Run the provided iterable of validators for the instance.\n    \"\"\"\n    request = current_request.get()\n    for validator in validators:\n         # Loading a validator class by dotted path\n        if type(validator) is str:\n            module, cls = validator.rsplit('.', 1)\n            validator = getattr(importlib.import_module(module), cls)()\n         # Constructing a new instance on the fly from a ruleset\n        elif type(validator) is dict:\n            validator = CustomValidator(validator)\n         elif not issubclass(validator.__class__, CustomValidator):\n            raise ImproperlyConfigured(f\"Invalid value for custom validator: {validator}\")\n         validator(instance, request)",
        "import_statements": [
            "import importlib",
            "import logging",
            "from django.contrib.contenttypes.models import ContentType",
            "from django.core.exceptions import ImproperlyConfigured, ValidationError",
            "from django.db.models.fields.reverse_related import ManyToManyRel",
            "from django.db.models.signals import m2m_changed, post_save, pre_delete",
            "from django.dispatch import receiver, Signal",
            "from django.utils.translation import gettext_lazy as _",
            "from django_prometheus.models import model_deletes, model_inserts, model_updates",
            "from core.models import ObjectType",
            "from core.signals import job_end, job_start",
            "from extras.constants import EVENT_JOB_END, EVENT_JOB_START",
            "from extras.events import process_event_rules",
            "from extras.models import EventRule",
            "from netbox.config import get_config",
            "from netbox.context import current_request, events_queue",
            "from netbox.models.features import ChangeLoggingMixin",
            "from netbox.signals import post_clean",
            "from utilities.exceptions import AbortRequest"
        ],
        "reference_api": [
            "getattr",
            "validator.rsplit",
            "issubclass",
            "current_request.get",
            "validator",
            "ImproperlyConfigured",
            "type",
            "importlib.import_module",
            "CustomValidator"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "current_request.get",
            "validator.rsplit",
            "CustomValidator",
            "ImproperlyConfigured",
            "validator"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "export function playMedia(destiny)",
        "start_line": "26",
        "end_line": "49",
        "file_path": "src/js/media.js",
        "docstring": "This function, playMedia, plays media elements within a specified panel.\\nIt retrieves the panel using the given destiny and then selects HTML5 video and audio elements with the 'data-autoplay' attribute, playing them if they have a play method.\\nFor YouTube iframes with 'data-autoplay', it plays them using the playYoutube function, and sets an onload handler to ensure they play once the URL is fully loaded.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "0b2ff7fe76f6",
        "ground_truth": "export function playMedia(destiny){\n    var panel = getSlideOrSection(destiny);\n     //playing HTML5 media elements\n    utils.$('video, audio', panel).forEach(function(element){\n        if( element.hasAttribute('data-autoplay') && typeof element.play === 'function' ) {\n            element.play();\n        }\n    });\n     //youtube videos\n    utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function(element){\n        if ( element.hasAttribute('data-autoplay') ){\n            playYoutube(element);\n        }\n         //in case the URL was not loaded yet. On page load we need time for the new URL (with the API string) to load.\n        element.onload = function() {\n            if ( element.hasAttribute('data-autoplay') ){\n                playYoutube(element);\n            }\n        };\n    });\n}",
        "import_statements": [
            "./common/utils.js",
            "./common/utilsFP.js",
            "./common/options.js"
        ],
        "reference_api": [
            "playYoutube",
            "element.hasAttribute"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "playYoutube",
                "code": "function playYoutube(element){\n    element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"playVideo\",\"args\":\"\"}', '*');\n}"
            }
        ],
        "third_party": [
            "element.hasAttribute"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "export function stopMedia(destiny)",
        "start_line": "61",
        "end_line": "77",
        "file_path": "src/js/media.js",
        "docstring": "This function, stopMedia, stops media playback in a specified section or slide.\\nIt selects the target panel using the getSlideOrSection function.\\nFor HTML5 video and audio elements in the panel, it pauses them unless they have the 'data-keepplaying' attribute.\\nFor YouTube iframes in the panel, it sends a postMessage to pause the video unless they have the 'data-keepplaying' attribute.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "12d28719c647",
        "ground_truth": "export function stopMedia(destiny){\n    var panel = getSlideOrSection(destiny);\n     //stopping HTML5 media elements\n    utils.$('video, audio', panel).forEach(function(element){\n        if( !element.hasAttribute('data-keepplaying') && typeof element.pause === 'function' ) {\n            element.pause();\n        }\n    });\n     //youtube videos\n    utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach(function(element){\n        if( /youtube\\.com\\/embed\\//.test(utils.getAttr(element, 'src')) && !element.hasAttribute('data-keepplaying')){\n            element.contentWindow.postMessage('{\"event\":\"command\",\"func\":\"pauseVideo\",\"args\":\"\"}','*');\n        }\n    });\n}",
        "import_statements": [
            "./common/utils.js",
            "./common/utilsFP.js",
            "./common/options.js"
        ],
        "reference_api": [
            "utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach",
            "/youtube\\.com\\/embed\\//.test",
            "utils.$",
            "element.pause",
            "getSlideOrSection",
            "utils.$('video, audio', panel).forEach",
            "utils.getAttr",
            "element.hasAttribute",
            "element.contentWindow.postMessage"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "utils.$('iframe[src*=\"youtube.com/embed/\"]', panel).forEach",
            "/youtube\\.com\\/embed\\//.test",
            "utils.$",
            "element.pause",
            "getSlideOrSection",
            "utils.$('video, audio', panel).forEach",
            "utils.getAttr",
            "element.hasAttribute",
            "element.contentWindow.postMessage"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "export function createSlideArrows(section)",
        "start_line": "50",
        "end_line": "66",
        "file_path": "src/js/arrows.js",
        "docstring": "This function, createSlideArrows, creates and configures navigation arrows for a slide section.\\nIt generates arrow elements from HTML templates and appends them to the section's slide wrapper.\\nIt adds specific classes to the arrows for styling and sets their color based on configuration.\\nIf horizontal looping is disabled, it hides the previous arrow.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "e0d58d76f87e",
        "ground_truth": "export function createSlideArrows(section){\n    var sectionElem = section.item;\n    var arrows = [utils.createElementFromHTML(getOptions().controlArrowsHTML[0]), utils.createElementFromHTML(getOptions().controlArrowsHTML[1])];\n    utils.after(utils.$(SLIDES_WRAPPER_SEL, sectionElem)[0], arrows);\n    utils.addClass(arrows, SLIDES_ARROW);\n    utils.addClass(arrows[0], SLIDES_PREV);\n    utils.addClass(arrows[1], SLIDES_NEXT);\n     if(getOptions().controlArrowColor !== '#fff'){\n        utils.css(utils.$(SLIDES_ARROW_NEXT_SEL, sectionElem), {'border-color': 'transparent transparent transparent '+getOptions().controlArrowColor});\n        utils.css(utils.$(SLIDES_ARROW_PREV_SEL, sectionElem), {'border-color': 'transparent '+ getOptions().controlArrowColor + ' transparent transparent'});\n    }\n     if(!getOptions().loopHorizontal){\n        utils.hide(utils.$(SLIDES_ARROW_PREV_SEL, sectionElem));\n    }\n}",
        "import_statements": [
            "./common/utils.js",
            "./common/options.js",
            "./common/selectors.js",
            "./common/isScrollAllowed.js",
            "./common/state.js",
            "./common/eventEmitter.js",
            "./common/events.js"
        ],
        "reference_api": [
            "utils.createElementFromHTML",
            "utils.hide",
            "utils.$",
            "utils.after",
            "utils.css",
            "getOptions",
            "utils.addClass"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "utils.createElementFromHTML",
            "utils.hide",
            "utils.$",
            "utils.after",
            "utils.css",
            "getOptions",
            "utils.addClass"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "function slideArrowHandler()",
        "start_line": "29",
        "end_line": "45",
        "file_path": "src/js/arrows.js",
        "docstring": "This function, slideArrowHandler, handles the click event on slide navigation arrows.\\nIt determines the closest section to the clicked arrow and checks if the arrow has the class SLIDES_PREV.\\nIf true, and left scroll is allowed, it updates the state and triggers the moveSlideLeft event.\\nIf false, and right scroll is allowed, it updates the state and triggers the moveSlideRight event.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "09898985b216",
        "ground_truth": "function slideArrowHandler(){\n    /*jshint validthis:true */\n    var section = utils.closest(this, SECTION_SEL);\n     /*jshint validthis:true */\n    if (utils.hasClass(this, SLIDES_PREV)) {\n        if(getIsScrollAllowed().m.left){\n            setState({scrollTrigger: 'slideArrow'});\n            EventEmitter.emit(events.moveSlideLeft, {section: section});\n        }\n    } else {\n        if(getIsScrollAllowed().m.right){\n            setState({scrollTrigger: 'slideArrow'});\n            EventEmitter.emit(events.moveSlideRight, {section: section});\n        }\n    }\n}",
        "import_statements": [
            "./common/utils.js",
            "./common/options.js",
            "./common/selectors.js",
            "./common/isScrollAllowed.js",
            "./common/state.js",
            "./common/eventEmitter.js",
            "./common/events.js"
        ],
        "reference_api": [
            "EventEmitter.emit",
            "utils.hasClass",
            "utils.closest",
            "setState",
            "getIsScrollAllowed"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "EventEmitter.emit",
            "utils.hasClass",
            "utils.closest",
            "setState",
            "getIsScrollAllowed"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "export function addSlidesNavigation(section)",
        "start_line": "55",
        "end_line": "74",
        "file_path": "src/js/nav/slides.js",
        "docstring": "This function, addSlidesNavigation, adds navigation controls for slides within a given section.\\nIt creates a navigation container and appends it to the section element.\\nThe navigation is positioned based on configuration options.\\nFor each slide, it creates a navigation bullet and appends it to the navigation container.\\nIt centers the navigation container and highlights the bullet for the active slide.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "69ef3030fb15",
        "ground_truth": "export function addSlidesNavigation(section){\n    var sectionElem = section.item;\n    var numSlides = section.slides.length;\n    utils.appendTo(utils.createElementFromHTML('<div class=\"' + SLIDES_NAV + '\"><ul></ul></div>'), sectionElem);\n    var nav = utils.$(SLIDES_NAV_SEL, sectionElem)[0];\n     //top or bottom\n    utils.addClass(nav, 'fp-' + getOptions().slidesNavPosition);\n     for(var i=0; i< numSlides; i++){\n        var slide = utils.$(SLIDE_SEL, sectionElem)[i];\n        utils.appendTo(utils.createElementFromHTML('<li><a href=\"#\"><span class=\"fp-sr-only\">'+ getBulletLinkName(i, 'Slide', slide) +'</span><span></span></a></li>'), utils.$('ul', nav)[0] );\n    }\n     //centering it\n    utils.css(nav, {'margin-left': '-' + (nav.innerWidth/2) + 'px'});\n     var activeSlideIndex = section.activeSlide ? section.activeSlide.index() : 0;\n    utils.addClass(utils.$('a', utils.$('li', nav)[activeSlideIndex] ), ACTIVE);\n}",
        "import_statements": [
            "../common/utils.js",
            "../common/options.js",
            "../common/state.js",
            "../common/selectors.js",
            "../common/item.js",
            "../common/eventEmitter.js",
            "./getBulletLinkName.js",
            "../common/events.js"
        ],
        "reference_api": [
            "utils.createElementFromHTML",
            "utils.$",
            "section.activeSlide.index",
            "utils.css",
            "getOptions",
            "utils.addClass",
            "utils.appendTo",
            "getBulletLinkName"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "utils.createElementFromHTML",
            "utils.$",
            "section.activeSlide.index",
            "utils.css",
            "getOptions",
            "utils.addClass",
            "utils.appendTo",
            "getBulletLinkName"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "function menuItemsHandler(e)",
        "start_line": "24",
        "end_line": "37",
        "file_path": "src/js/menu/index.js",
        "docstring": "This function, menuItemsHandler, handles menu item click events.\\nIt sets the scroll trigger state to 'menu' and checks if the menu exists and if anchors are locked or not defined.\\nIf so, it prevents the default event behavior and emits an onMenuClick event with the anchor associated with the clicked menu item.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "d86cd1fd918a",
        "ground_truth": "function menuItemsHandler(e){\n    setState({scrollTrigger: 'menu'});\n     if(utils.$(getOptions().menu)[0] && (getOptions().lockAnchors || !getOptions().anchors.length)){\n        utils.preventDefault(e);\n         const menuAnchorEl = closest(this, '[data-menuanchor]');\n         /*jshint validthis:true */\n        EventEmitter.emit(events.onMenuClick, {\n            anchor: utils.getAttr(menuAnchorEl, 'data-menuanchor')\n        });\n    }\n}",
        "import_statements": [
            "../common/utils.js",
            "../common/options.js",
            "../common/eventEmitter.js",
            "../common/state.js",
            "../common/events.js",
            "../common/utils.js"
        ],
        "reference_api": [
            "EventEmitter.emit",
            "utils.$",
            "closest",
            "getOptions",
            "setState",
            "utils.getAttr",
            "utils.preventDefault"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "EventEmitter.emit",
            "utils.$",
            "closest",
            "getOptions",
            "setState",
            "utils.getAttr",
            "utils.preventDefault"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "export function setScrolling(element, val)",
        "start_line": "64",
        "end_line": "78",
        "file_path": "src/js/common/utilsFP.js",
        "docstring": "This function, setScrolling, sets the scroll position of an element based on given options and conditions.\\nIt first checks if auto-scrolling is enabled or if a scrollbar is present, and if the element is not the window and has the SLIDES_WRAPPER class.\\nIf the element has the SLIDES_WRAPPER class, it scrolls horizontally by setting scrollLeft to the specified value.\\nOtherwise, it scrolls vertically by calling scrollTo with the specified value.\\nIf auto-scrolling is enabled and no scrollbar is present, it sets the element's top style to the specified value in pixels.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "19fb16a46144",
        "ground_truth": "export function setScrolling(element, val){\n    if(!getOptions().autoScrolling || getOptions().scrollBar || (element.self != window && utils.hasClass(element, SLIDES_WRAPPER))){\n         //scrolling horizontally through the slides?\n        if(element.self != window  && utils.hasClass(element, SLIDES_WRAPPER)){\n            element.scrollLeft = val;\n        }\n        //vertical scroll\n        else{   \n            element.scrollTo(0, val);\n        }\n    }else{\n         element.style.top = val + 'px';\n    }\n}",
        "import_statements": [
            "./utils.js",
            "./options.js",
            "./selectors.js",
            "./constants.js"
        ],
        "reference_api": [
            "getOptions",
            "utils.hasClass",
            "element.scrollTo"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "getOptions",
            "utils.hasClass",
            "element.scrollTo"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "function activateMenuElement(name)",
        "start_line": "20",
        "end_line": "29",
        "file_path": "src/js/menu/activateMenuAndNav.js",
        "docstring": "This function, activateMenuElement, activates a menu element based on the provided name.\\nIt checks if the menu options exist and are not empty.\\nFor each menu, it removes the active class from the currently active element and adds the active class to the element with the corresponding data-menuanchor attribute matching the provided name.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "09a10e1f1af9",
        "ground_truth": "function activateMenuElement(name){\n    if(getOptions().menu && getOptions().menu.length){\n        utils.$(getOptions().menu).forEach(function(menu) {\n            if(menu != null){\n                utils.removeClass(utils.$(ACTIVE_SEL, menu), ACTIVE);\n                utils.addClass(utils.$('[data-menuanchor=\"'+name+'\"]', menu), ACTIVE);\n            }\n        });\n    }\n}",
        "import_statements": [
            "../common/utils.js",
            "../common/options.js",
            "../nav/sections.js",
            "../common/selectors.js"
        ],
        "reference_api": [
            "utils.$",
            "getOptions",
            "utils.addClass",
            "utils.removeClass",
            "utils.$(getOptions().menu).forEach"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "utils.$",
            "getOptions",
            "utils.addClass",
            "utils.removeClass",
            "utils.$(getOptions().menu).forEach"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "export function lazyLoadOthers()",
        "start_line": "17",
        "end_line": "31",
        "file_path": "src/js/lazyLoad/lazyLoadOthers.js",
        "docstring": "This function, lazyLoadOthers, handles the lazy loading of sections based on certain conditions.\\nIt checks if there are any auto-height sections or if the responsive mode is active with responsive auto-height sections.\\nIf lazy loading is enabled and these conditions are met, it proceeds to lazy load sections that are not currently active but are in the viewport.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "4556a956fd7c",
        "ground_truth": "export function lazyLoadOthers(){\n    var hasAutoHeightSections = utils.$(AUTO_HEIGHT_SEL)[0] || isResponsiveMode() && utils.$(AUTO_HEIGHT_RESPONSIVE_SEL)[0];\n     //quitting when it doesn't apply\n    if (!getOptions().lazyLoading || !hasAutoHeightSections){\n        return;\n    }\n     //making sure to lazy load auto-height sections that are in the viewport\n    utils.$(SECTION_SEL + ':not(' + ACTIVE_SEL + ')').forEach(function(section){\n        if(isSectionInViewport(section)){\n            lazyLoad(section);\n        }\n    });\n}",
        "import_statements": [
            "../common/utils.js",
            "../common/options.js",
            "../common/selectors.js",
            "../common/state.js",
            "../responsive.js",
            "./lazyLoad.js"
        ],
        "reference_api": [
            "utils.$",
            "getOptions",
            "lazyLoad",
            "utils.$(SECTION_SEL + ':not(' + ACTIVE_SEL + ')').forEach",
            "isSectionInViewport",
            "isResponsiveMode"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "isSectionInViewport",
                "code": "function isSectionInViewport (el) {\n    var rect = el.getBoundingClientRect();\n    var top = rect.top;\n    var bottom = rect.bottom;\n\n    //sometimes there's a 1px offset on the bottom of the screen even when the \n    //section's height is the window.innerHeight one. I guess because pixels won't allow decimals.\n    //using this prevents from lazyLoading the section that is not yet visible \n    //(only 1 pixel offset is)\n    var pixelOffset = 2;\n    \n    var isTopInView = top + pixelOffset < state.windowsHeight && top > 0;\n    var isBottomInView = bottom > pixelOffset && bottom < state.windowsHeight;\n\n    return isTopInView || isBottomInView;\n}"
            }
        ],
        "third_party": [
            "utils.$",
            "getOptions",
            "lazyLoad",
            "utils.$(SECTION_SEL + ':not(' + ACTIVE_SEL + ')').forEach",
            "isResponsiveMode"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "function keepSlidesPosition()",
        "start_line": "15",
        "end_line": "20",
        "file_path": "src/js/infiniteScroll/fixPosition.js",
        "docstring": "This function, keepSlidesPosition, maintains the position of active slides.\\nIt selects all active slides using a utility function and iterates through them.\\nFor each active slide, it calls silentLandscapeScroll with the slide element and 'internal' as arguments.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "a4324e094376",
        "ground_truth": "function keepSlidesPosition(){\n    var activeSlides = utils.$(SLIDE_ACTIVE_SEL);\n    for( var i =0; i<activeSlides.length; i++){\n        silentLandscapeScroll(activeSlides[i], 'internal');\n    }\n}",
        "import_statements": [
            "../common/utils.js",
            "../common/silentScroll.js",
            "../common/state.js",
            "../slides/silentLandscapeScroll.js",
            "../common/selectors.js"
        ],
        "reference_api": [
            "utils.$",
            "silentLandscapeScroll"
        ],
        "repo_defined_api_with_code": [],
        "third_party": [
            "utils.$",
            "silentLandscapeScroll"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "export function updateStructuralState()",
        "start_line": "43",
        "end_line": "65",
        "file_path": "src/js/stateUpdates.js",
        "docstring": "This function, updateStructuralState, updates the state of sections and slides in a container.\\nIt retrieves all section items and filters them to get visible ones.\\nIt creates SectionPanel objects for each section item and filters them by visibility.\\nIt gathers all slides from the visible sections and updates the state with the number of sections, number of slides, and lists of sections, slides, and panels.\\nIt also keeps track of the previously active section and slide indices.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "9eb664182655",
        "ground_truth": "export function updateStructuralState(){\n    var allSectionItems = utils.$(getOptions().sectionSelector, getContainer());\n    var sectionsItems = utils.getVisible(allSectionItems);\n    var allSections = Array.from(allSectionItems).map( item => new SectionPanel(item));\n    var sections = allSections.filter( item => item.isVisible);\n    var slides = sections.reduce(function(acc, section){\n        return acc.concat(section.slides);\n    }, []);\n     // keeping track of the previously active section\n    g_prevActiveSectionIndex = getPrevActivePanelIndex(state.activeSection);\n    g_prevActiveSlideIndex = getPrevActivePanelIndex(state.activeSection ? state.activeSection.activeSlide : null);\n     state.numSections = sectionsItems.length;\n    state.numSlides = sections.reduce( function(acc, section){\n        return acc + section.slides.length;\n    }, 0);\n    state.sections = sections;\n     state.sectionsIncludingHidden = allSections;\n    state.slides = slides;\n    state.panels = state.sections.concat(state.slides);\n}",
        "import_statements": [
            "./common/utils.js",
            "./common/options.js",
            "./common/item.js",
            "./common/selectors.js",
            "./common/state.js",
            "./common/silentScroll.js",
            "./slides/silentLandscapeScroll.js",
            "./scrolloverflow.js"
        ],
        "reference_api": [
            "Array.from",
            "sections.reduce",
            "state.sections.concat",
            "Array.from(allSectionItems).map",
            "utils.$",
            "getContainer",
            "allSections.filter",
            "acc.concat",
            "getPrevActivePanelIndex",
            "utils.getVisible",
            "getOptions"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "getPrevActivePanelIndex",
                "code": "function getPrevActivePanelIndex(activePanel){\n    if(!activePanel){\n        return null;\n    }\n    var prevActivePanelItem = activePanel ? activePanel.item : null;\n    var hiddenPanels = activePanel.isSection ? state.sectionsIncludingHidden : state.activeSection.slidesIncludingHidden;\n    if(prevActivePanelItem){\n        let panel = getPanelByElement(hiddenPanels, prevActivePanelItem);\n        return panel ? panel.index() : null;\n    }\n    return null;\n}"
            }
        ],
        "third_party": [
            "sections.reduce",
            "state.sections.concat",
            "Array.from(allSectionItems).map",
            "utils.$",
            "getContainer",
            "allSections.filter",
            "acc.concat",
            "utils.getVisible",
            "getOptions"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "alvarotrigo/fullPage.js",
        "function_declaration": "function performHorizontalMove(slides, v, fireCallback)",
        "start_line": "122",
        "end_line": "151",
        "file_path": "src/js/slides/landscapeScroll.js",
        "docstring": "This function, performHorizontalMove, handles the horizontal movement of slides.\\nIt updates the slide navigation and sets the scroll position based on the destination position.\\nIf CSS3 is enabled, it applies a 3D translation to the slides container and triggers a callback after the scrolling animation completes.\\nIf CSS3 is not enabled, it uses a scrollTo function to move the slides and triggers the callback after scrolling.",
        "language": "JavaScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "2b3c1077db45",
        "ground_truth": "function performHorizontalMove(slides, v, fireCallback){\n    var destinyPos = v.destinyPos;\n     activeSlidesNavigation(v.slidesNav, v.slideIndex);\n    setState({\n        scrollX: Math.round(destinyPos.left)\n    });\n     if(getOptions().css3){\n        var translate3d = 'translate3d(-' + Math.round(destinyPos.left) + 'px, 0px, 0px)';\n         FP.test.translate3dH[v.sectionIndex] = translate3d;\n        utils.css(addAnimation(utils.$(SLIDES_CONTAINER_SEL, slides)), getTransforms(translate3d));\n         clearTimeout(g_afterSlideLoadsId);\n        g_afterSlideLoadsId = setTimeout(function(){\n            if(fireCallback){\n                afterSlideLoads(v);\n            }\n        }, getOptions().scrollingSpeed);\n    }else{\n        FP.test.left[v.sectionIndex] = Math.round(destinyPos.left);\n         scrollTo(slides, Math.round(destinyPos.left), getOptions().scrollingSpeed, function(){\n            if(fireCallback){\n                afterSlideLoads(v);\n            }\n        });\n    }\n}",
        "import_statements": [
            "../common/utils.js",
            "../common/options.js",
            "../common/state.js",
            "../common/scrollTo.js",
            "../common/constants.js",
            "../common/utilsFP.js",
            "../common/selectors.js",
            "../callbacks/fireCallback.js",
            "../stateUpdates.js",
            "../media.js",
            "../lazyLoad/lazyLoad.js",
            "../anchors/setPageStatus.js",
            "../nav/slides.js",
            "../arrows.js",
            "../common/eventEmitter.js",
            "../common/events.js",
            "../scrolloverflow.js"
        ],
        "reference_api": [
            "activeSlidesNavigation",
            "addAnimation",
            "utils.$",
            "afterSlideLoads",
            "setTimeout",
            "scrollTo",
            "utils.css",
            "getOptions",
            "getTransforms",
            "setState",
            "clearTimeout",
            "Math.round"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "afterSlideLoads",
                "code": "function afterSlideLoads(v){\n\n    //if the site is not just resizing and readjusting the slides\n    if(!v.localIsResizing){\n        if(utils.isFunction( getOptions().afterSlideLoad )){\n            fireCallback('afterSlideLoad', v);\n        }\n\n        //needs to be inside the condition to prevent problems with continuousVertical and scrollHorizontally\n        //and to prevent double scroll right after a windows resize\n        setState({canScroll: true});\n        \n        playMedia(v.destiny);\n\n        EventEmitter.emit(events.afterSlideLoads, v);\n    }\n\n    //letting them slide again\n    setState({slideMoving: false});\n}"
            }
        ],
        "third_party": [
            "activeSlidesNavigation",
            "addAnimation",
            "utils.$",
            "scrollTo",
            "utils.css",
            "getOptions",
            "getTransforms",
            "setState"
        ]
    },
    {
        "subclass": "jQuery",
        "owner/repo": "NervJS/taro",
        "function_declaration": "buildLink (name: string, params: Record<string, any>): string",
        "start_line": "190",
        "end_line": "198",
        "file_path": "packages/taro-router-rn/src/view/TabBar.tsx",
        "docstring": "This function, buildLink, constructs a URL with query parameters.\\nIt takes a base URL name and a parameters object, sorts the parameter keys, and builds a query string by encoding each parameter value.\\nIt removes the trailing ampersand and returns the complete URL with the query string appended.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "82491a251576",
        "ground_truth": "buildLink (name: string, params: Record<string, any>): string {\n  const keys = Object.keys(params).sort()\n  let str = ''\n  keys.forEach((v) => {\n    str += (v + '=' + encodeURIComponent(params[v]) + '&')\n  })\n  str = str.slice(0, str.length - 1)\n  return str ? `${name}?${str}` : `${name}`\n}",
        "import_statements": [
            "import {\n  Link\n} from '@react-navigation/native'",
            "{\n  Link\n}",
            "{\n  Link\n}",
            "Link",
            "import * as React from 'react'",
            "* as React",
            "* as React",
            "import {\n  Animated,\n  Dimensions,\n  EmitterSubscription,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View\n} from 'react-native'",
            "{\n  Animated,\n  Dimensions,\n  EmitterSubscription,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View\n}",
            "{\n  Animated,\n  Dimensions,\n  EmitterSubscription,\n  Keyboard,\n  LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View\n}",
            "Animated",
            "Dimensions",
            "EmitterSubscription",
            "Keyboard",
            "LayoutChangeEvent",
            "Platform",
            "StyleSheet",
            "TouchableWithoutFeedback",
            "View",
            "import { EdgeInsets, withSafeAreaInsets, WithSafeAreaInsetsProps } from 'react-native-safe-area-context'",
            "{ EdgeInsets, withSafeAreaInsets, WithSafeAreaInsetsProps }",
            "{ EdgeInsets, withSafeAreaInsets, WithSafeAreaInsetsProps }",
            "EdgeInsets",
            "withSafeAreaInsets",
            "WithSafeAreaInsetsProps",
            "import { getDefaultTabItem, getTabConfig, getTabItemConfig, getTabVisible, isUrl } from '../utils/index'",
            "{ getDefaultTabItem, getTabConfig, getTabItemConfig, getTabVisible, isUrl }",
            "{ getDefaultTabItem, getTabConfig, getTabItemConfig, getTabVisible, isUrl }",
            "getDefaultTabItem",
            "getTabConfig",
            "getTabItemConfig",
            "getTabVisible",
            "isUrl",
            "import TabBarItem, { TabBarOptions, TabOptions } from './TabBarItem'",
            "TabBarItem, { TabBarOptions, TabOptions }",
            "{ TabBarOptions, TabOptions }",
            "TabBarOptions",
            "TabOptions",
            "import { getInitSafeAreaInsets } from './tabBarUtils'",
            "{ getInitSafeAreaInsets }",
            "{ getInitSafeAreaInsets }",
            "getInitSafeAreaInsets"
        ],
        "reference_api": [
            "encodeURIComponent"
        ],
        "repo_defined_api_with_code": [],
        "third_party": []
    },
    {
        "subclass": "jQuery",
        "owner/repo": "NervJS/taro",
        "function_declaration": "function showLoading (options: Taro.showLoading.Option): Promise<TaroGeneral.CallbackResult> ",
        "start_line": "181",
        "end_line": "200",
        "file_path": "packages/taro-rn/src/lib/showModal/toast.tsx",
        "docstring": "This function, showLoading, displays a loading toast with specified options.\\nIt first validates the options object and logs an error if the validation fails, returning a rejected promise.\\nIt then extracts properties like title, mask, success, fail, and complete from the options.\\nFinally, it calls showToast with these properties, setting the icon to 'loading' and duration to 0.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "89f175570176",
        "ground_truth": "function showLoading (options: Taro.showLoading.Option = { title: '\u52a0\u8f7d\u4e2d' }): Promise<TaroGeneral.CallbackResult> {\n  const isObject = shouldBeObject(options)\n  if (!isObject.res) {\n    const res = { errMsg: `showLoading${isObject.msg}` }\n    console.error(res.errMsg)\n    return Promise.reject(res)\n  }\n   const { title = '', mask, success, fail, complete } = options || {}\n   return showToast({\n    title,\n    icon: 'loading',\n    duration: 0,\n    mask,\n    success,\n    fail,\n    complete\n  })\n}",
        "import_statements": [
            "import PropTypes from 'prop-types'",
            "import React from 'react'",
            "import { ActivityIndicator, Image, StyleSheet, Text, View } from 'react-native'",
            "import RootSiblings from 'react-native-root-siblings'",
            "import { errorHandler, shouldBeObject, successHandler } from '../../utils'",
            "import errorPng from './error.png'",
            "import successPng from './success.png'"
        ],
        "reference_api": [
            "shouldBeObject",
            "error",
            "reject",
            "showToast"
        ],
        "repo_defined_api_with_code": [
            {
                "name": "shouldBeObject",
                "code": "export function shouldBeObject (target: unknown): ShouldBeObjectResult {\n  if (target && typeof target === 'object') return { res: true }\n  return {\n    res: false,\n    msg: getParameterError({\n      correct: 'Object',\n      wrong: target\n    })\n  }\n}"
            },
            {
                "name": "showToast",
                "code": "function showToast (options: Taro.showToast.Option): Promise<TaroGeneral.CallbackResult> {\n  const isObject = shouldBeObject(options)\n  if (!isObject.res) {\n    const res = { errMsg: `showToast${isObject.msg}` }\n    console.error(res.errMsg)\n    return Promise.reject(res)\n  }\n\n  let { title = '', icon = 'success', image, duration = 1500, mask = false, success, fail, complete } = options || {} // eslint-disable-line\n\n  const isLoading = (icon === 'loading')\n\n  const res = isLoading ? { errMsg: 'showLoading:ok' } : { errMsg: 'showToast:ok' }\n\n  const maskStyle = mask ? styles.container : styles.noMaskContainer\n\n  let ToastView\n\n  if (image) {\n    ToastView = <View style={maskStyle}>\n      <View style={styles.grayBlock}>\n        <View style={styles.toastView}>\n          <Image source={image as any} style={styles.toastIcon} />\n          <Text style={styles.toastContent}>{title || ''}</Text>\n        </View>\n      </View>\n    </View>\n  } else if (isLoading) {\n    ToastView = <WXLoading title={title} mask={mask} />\n  } else if (icon === 'none') {\n    ToastView = <View style={maskStyle}>\n      <View style={styles.textGrayBlock}>\n        <Text style={styles.textToastContent}>{title || ''}</Text>\n      </View>\n    </View>\n  } else {\n    ToastView = <View style={"
            }
        ],
        "third_party": []
    },
    {
        "subclass": "jQuery",
        "owner/repo": "cheeriojs/cheerio",
        "function_declaration": "export function HomepageTweets()",
        "start_line": "164",
        "end_line": "175",
        "file_path": "website/src/components/HomepageTweets.tsx",
        "docstring": "This function, HomepageTweets, is a React component that renders a section displaying user tweets.\\nIt returns a container div with a centered heading and a row of Tweet components.\\nEach Tweet component is populated with properties from the TweetList array.",
        "language": "TypeScript",
        "created_time": "",
        "commit_sha": "",
        "instance_id": "7d41757a0645",
        "ground_truth": "export function HomepageTweets() {\n  return (\n    <div className=\"container\">\n      <h2 className=\"text--center\">What Our Users Say</h2>\n      <div className=\"row\">\n        {TweetList.map((props) => (\n          <Tweet {...props} />\n        ))}\n      </div>\n    </div>\n  );\n}",
        "import_statements": [
            "import React from 'react';",
            "React"
        ],
        "reference_api": [],
        "repo_defined_api_with_code": [],
        "third_party": []
    }
]