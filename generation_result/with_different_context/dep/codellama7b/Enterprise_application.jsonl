{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t# 1. Retrieve attachment IDs from HTTP request arguments.\n    attachment_ids = request.env['ir.attachment'].search([('id', 'in', args.get('attachment_ids'))])\n    # 2. Verify read access rights and rules for the attachments.\n    attachment_ids.check_access_rights('read')\n    attachment_ids.check_access_rule('read')\n    # 3. Build a zip file from the attachments' content.\n    zip_file = zipfile.ZipFile(io.BytesIO(), 'w', zipfile.ZIP_DEFLATED)\n    for attachment in attachment_ids:\n        zip_file.writestr(attachment.name, attachment.datas_f)\n    # 4. Prepare HTTP headers for the zip file.\n    headers = _get_zip_headers(zip_file.read(), attachment_ids[0].name)\n    # 5. Return the zip file as an HTTP response.\n    return request.make_response(zip_file.read(), headers=headers)", "CodeBleu_score": 38.10429737904313}, {"code": "def export_zip_documents(self, **args)\n\t# TODO: the function should be moved to the web module\n    # TODO: the function should be refactored to use the new zipfile module\n    # TODO: the function should be refactored to use the new werkzeug.FileWrapper\n    # TODO: the function should be refactored to use the new werkzeug.make_response\n    # TODO: the function should be refactored to use the new odoo.http.request.make_response\n    # TODO: the function should be refactored to use the new odoo.http.request.make_zip_response\n    # TODO: the function should be refactored to use the new odoo.http.request.make_zip_attachment\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_open\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_close\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_read\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_seek\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_tell\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_size\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_exists\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_name\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_ext\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_mimetype\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_mimetype_guess\n    # TODO: the function should be refactored to use the new odoo.tools.misc.file_mimetype_filename", "CodeBleu_score": 0.8928571428571428}, {"code": "def export_zip_documents(self, **args)\n\tzip_content = io.BytesIO()\n    zip_file = zipfile.ZipFile(zip_content, mode='w', compression=zipfile.ZIP_DEFLATED)\n    attachment_ids = self.env['ir.attachment'].search([('id', 'in', args.get('ids', []))])\n    for attachment in attachment_ids:\n        if not attachment.check_access_rule('read'):\n            raise AccessError(_('Access Error! You do not have access to this file.'))\n        if attachment.datas_fname:\n            zip_file.writestr(attachment.datas_fname, attachment.datas_file)\n        else:\n            zip_file.writestr(attachment.name, attachment.datas_file)\n    zip_file.close()\n    zip_content.seek(0)\n    return self.make_response(zip_content.read(), _get_zip_headers(zip_content.read(), 'attachments.zip'))", "CodeBleu_score": 23.22751751993003}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 74.75909263190782}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 74.75909263190782}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    return request.render(\"account_portal.invoice_list\", values)", "CodeBleu_score": 23.50069273219928}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    return request.render(\"account_portal.invoices\", values)", "CodeBleu_score": 23.32247758046664}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\treturn self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)", "CodeBleu_score": 12.676011476537624}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.invoice'].browse(invoice_id)\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.partner_id:\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.partner_id.has_user(request.env.user):\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.partner_id.user_has_groups('account.group_invoice'):\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.partner_id.user_has_groups('account.group_invoice_reporter'):\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.partner_id.user_has_groups('account.group_invoice_user'):\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.partner_id.user_has_groups('account.group_account_invoice'):\n        raise werkzeug.exceptions.NotFound()\n    if invoice.type != 'out_invoice':\n        raise werkzeug.exceptions.NotFound()\n    if invoice.state not in ['draft', 'open', 'paid', 'invoiced']:\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.company_id.invoice_report_template_id:\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.company_id.invoice_report_template_id.report_name:\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.company_id.invoice_report_template_id.report_type:\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.company_id.invoice_report_template_id.report_type in ['html', 'pdf', 'text']:\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.company_id.invoice_report_template_id.report_type in ['html', 'pdf', 'text']:\n        raise werkzeug.exceptions.NotFound()\n    if not invoice.company_id", "CodeBleu_score": 22.363126330396593}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.invoice'].browse(invoice_id)\n    if not invoice.exists():\n        raise http.HttpNotFound()\n    if invoice.type not in ['out_invoice', 'out_refund']:\n        raise http.HttpBadRequest()\n    if invoice.state not in ['open', 'paid']:\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice'):\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice_reports'):\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice_reports'):\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice_reports'):\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice_reports'):\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice_reports'):\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice_reports'):\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice_reports'):\n        raise http.HttpBadRequest()\n    if not invoice.partner_id.user_id.partner_id.has_group('account.group_account_invoice_reports'):\n        raise http.HttpBadRequest()\n    if not in", "CodeBleu_score": 21.84953994305451}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = self.env['account.invoice'].browse(invoice_id)\n    if not invoice.exists():\n        return request.redirect('/my/invoices')\n    if not invoice.can_read():\n        return request.redirect('/my/invoices')\n    if not invoice.partner_id:\n        return request.redirect('/my/invoices')\n    if not invoice.partner_id.user_id:\n        return request.redirect('/my/invoices')\n    if invoice.state in ('draft', 'cancel'):\n        return request.redirect('/my/invoices')\n    if invoice.partner_id.user_id.id != request.session.uid:\n        return request.redirect('/my/invoices')\n    if report_type == 'pdf' and invoice.state == 'posted':\n        if not invoice.partner_id.user_id.has_group('account.group_account_invoice'):\n            return request.redirect('/my/invoices')\n        if invoice.type == 'out_invoice':\n            return request.redirect('/my/invoices')\n        if not invoice.partner_id.user_id.has_group('account.group_account_invoice_reports'):\n            return request.redirect('/my/invoices')\n        if not invoice.partner_id.user_id.has_group('account.group_account_invoice_reports'):\n            return request.redirect('/my/invoices')\n        if not invoice.partner_id.user_id.has_group('account.group_account_invoice_reports'):\n            return request.redirect('/my/invoices')\n        if not invoice.partner_id.user_id.has_group('account.group_account_invoice_reports'):\n            return request.redirect('/my/invoices')\n        if not invoice.partner_id.user_id.has_group('account.group_account_invoice_reports'):\n            return request.redirect('/my/invoices')\n        if not invoice.partner_id.", "CodeBleu_score": 25.81094659921595}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t# Search for product templates based on the company's domain\n    domain = [('company_id', '=', self.id)]\n    if company:\n        domain = [('company_id', '=', self.id), ('company', '=', company.id)]\n\n    # Get the product templates\n    products = self.env['product.template'].search(domain)\n\n    # Update the sale taxes for these products\n    if self.account_sale_tax_id:\n        for product in products:\n            product.sale_ok = True\n            product.taxes_id = [(6, 0, [self.account_sale_tax_id.id])]\n\n    # Update the purchase taxes for these products\n    if self.account_purchase_tax_id:\n        for product in products:\n            product.purchase_ok = True\n            product.taxes_id = [(6, 0, [self.account_purchase_tax_id.id])]\n\n    return products\n\n", "CodeBleu_score": 28.128931037400385}, {"code": "def _get_demo_data_products(self, company=False)\n\t# Get the product template ids\n    product_template_ids = self.env['product.template'].search([('demo_company', '=', company)], limit=1)\n    # Get the taxes\n    tax_sale = self.env['account.tax'].search([('company_id', '=', company), ('type_tax_use', '=', 'sale')])\n    tax_purchase = self.env['account.tax'].search([('company_id', '=', company), ('type_tax_use', '=', 'purchase')])\n    # Get the product templates\n    product_templates = self.env['product.template'].browse(product_template_ids.ids)\n    # Update the taxes\n    for product_template in product_templates:\n        product_template.taxes_id = tax_sale\n        product_template.purchase_taxes_id = tax_purchase\n\n", "CodeBleu_score": 20.699155889086807}, {"code": "def _get_demo_data_products(self, company=False)\n\tif not self.company_id:\n        return\n    if company:\n        self.company_id = company\n    domain = [('company_id', '=', self.company_id.id)]\n    if self.company_id.country_id.id:\n        domain += [('country_id', '=', self.company_id.country_id.id)]\n    if self.company_id.state_id:\n        domain += [('state_id', '=', self.company_id.state_id.id)]\n    if self.company_id.city_id:\n        domain += [('city_id', '=', self.company_id.city_id.id)]\n    if self.company_id.partner_id:\n        domain += [('partner_id', '=', self.company_id.partner_id.id)]\n    if self.company_id.currency_id:\n        domain += [('currency_id', '=', self.company_id.currency_id.id)]\n    if self.company_id.company_type_id:\n        domain += [('company_type_id', '=', self.company_id.company_type_id.id)]\n    if self.company_id.account_sale_tax_id:\n        domain += [('account_sale_tax_id', '=', self.company_id.account_sale_tax_id.id)]\n    if self.company_id.account_purchase_tax_id:\n        domain += [('account_purchase_tax_id', '=', self.company_id.account_purchase_tax_id.id)]\n    if self.company_id.product_variant_count > 0:\n        domain += [('product_variant_count', '=', self.company_id.product_variant_count)]\n    if self.company_id.product_template_count > 0:\n        domain += [('product_template_count', '=', self.company_id.product_template_count)]\n    if self.company_id.product_count > 0:\n        domain += [('product_count', '=',", "CodeBleu_score": 29.119863735841296}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t# First, try to find the account using the company's ID and the xml_id in the 'ir.model.data' model.\n    account_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id, raise_if_not_found=False, company_id=company.id)\n    # If not found, try to find the account matching the account_type within the company's domain.\n    if not account_id:\n        account_id = self.env['account.account'].search([('company_id', '=', company.id), ('internal_type', '=', account_type), ('code', '=', xml_id)], limit=1).id\n    # If still not found, return the first account within the company's domain.\n    if not account_id:\n        account_id = self.env['account.account'].search([('company_id', '=', company.id), ('internal_type', '=', account_type)], limit=1).id\n    return account_id\n\n", "CodeBleu_score": 42.824899929555194}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t# Find the account using the company's ID and the xml_id in the 'ir.model.data' model\n    account_data = self.env['ir.model.data']._get_id(\n        'l10n_in_account_chart', xml_id, company.id)\n    if account_data:\n        account_id = account_data.res_id\n    else:\n        # Find the account using the account_type within the company's domain\n        account_id = self.env['account.account'].search(\n            [('company_id', '=', company.id),\n             ('type', '=', account_type),\n             ('code', '=', xml_id)], limit=1).id\n\n    # If still not found, return the first account within the company's domain\n    if not account_id:\n        account_id = self.env['account.account'].search(\n            [('company_id', '=', company.id),\n             ('type', '=', account_type)], limit=1).id\n\n    return account_id\n\n", "CodeBleu_score": 51.240193099710396}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\taccount_data = self.env['ir.model.data'].xmlid_to_object(xml_id, raise_if_not_found=False)\n    if account_data:\n        return account_data\n    accounts = self.env['account.account'].search([('company_id', '=', company.id), ('type', '=', account_type)])\n    if accounts:\n        return accounts[0]\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 41.00845677928281}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\taccount_type = \"Current Year Earnings\"\n    accounts = self.env['account.account'].search([('type', '=', account_type), ('company_id', 'in', self.company_ids.ids)])\n    account_by_company = accounts.read(['company_id', 'name'])\n    for company in self.company_ids:\n        accounts_for_company = account_by_company.filtered(lambda x: x['company_id'] == company.id)\n        if len(accounts_for_company) > 1:\n            raise ValidationError(_('There can only be one account with the type \"%s\" for each company.') % account_type)\n\n", "CodeBleu_score": 20.255211700125233}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccount_type_current_year_earning = self.env['account.account.type'].search([('type_current_year_earning', '=', True)])\n    accounts = self.env['account.account'].search([('type_id', 'in', account_type_current_year_earning.ids)])\n    for account in accounts:\n        accounts_with_same_type = accounts.filtered(lambda account: account.type_id == account.type_id)\n        if len(accounts_with_same_type) > 1:\n            raise ValidationError(_('You cannot have more than one account of type \"%s\" for the same company.') % account.type_id.name)\n\n", "CodeBleu_score": 25.21823799229598}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self.env['account.account'].search([\n        ('type', '=', 'earnings'),\n        ('code', '=', '0000')\n    ])\n    for account in accounts:\n        if account.company_id.id:\n            count = self.env['account.account'].search_count([\n                ('company_id', '=', account.company_id.id),\n                ('type', '=', 'earnings'),\n                ('code', '=', '0000')\n            ])\n            if count > 1:\n                raise ValidationError(_('You can only have one \"Current Year Earnings\" account for each company.'))\n\n", "CodeBleu_score": 20.783295147845724}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and self.env.context.get('default_partner_id'):\n        partner_ids = self.env['res.partner'].search([('id', '=', self.env.context.get('default_partner_id'))])\n        return self.search([('partner_id', 'in', partner_ids.ids)], limit=limit, order=order)\n    else:\n        if not name:\n            return self.search([], limit=limit, order=order)\n        if not domain:\n            domain = []\n        if operator == 'ilike':\n            domain += [('name', operator, name)]\n        else:\n            domain += [('name', operator, name)]\n        return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 41.02358036922313}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif name and not domain:\n        domain = [('name', operator, name)]\n    elif not name and self.env.context.get('default_name'):\n        domain = [('name', operator, self.env.context['default_name'])]\n    elif not name and self.env.context.get('default_partner_id'):\n        domain = [('partner_id', '=', self.env.context['default_partner_id'])]\n    else:\n        domain = []\n    if self._context.get('search_default_name'):\n        domain += [('name', operator, self._context['search_default_name'])]\n    if self._context.get('search_default_partner_id'):\n        domain += [('partner_id', '=', self._context['search_default_partner_id'])]\n    if self._context.get('search_default_company_id'):\n        domain += [('company_id', '=', self._context['search_default_company_id'])]\n    if self._context.get('search_default_create_date'):\n        domain += [('create_date', operator, self._context['search_default_create_date'])]\n    if self._context.get('search_default_create_date_to'):\n        domain += [('create_date', operator, self._context['search_default_create_date_to'])]\n    if self._context.get('search_default_write_date'):\n        domain += [('write_date', operator, self._context['search_default_write_date'])]\n    if self._context.get('search_default_write_date_to'):\n        domain += [('write_date', operator, self._context['search_default_write_date_to'])]\n    if self._context.get('search_default_user_id'):\n        domain += [('user_id', '=', self._context['search_default_user_id'])]\n    if self._context.get('search_default_company_id'):\n        domain += [('company_id', '=', self._context['search_default_company_id'])]\n    if self._context.get", "CodeBleu_score": 35.54113736349443}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name:\n        if self.env.context.get('partner_id'):\n            partner_id = self.env.context.get('partner_id')\n            if partner_id:\n                partner_ids = [partner_id]\n            else:\n                partner_ids = self.env.user.partner_id.ids\n            return self.search([('partner_id', 'in', partner_ids)], limit=limit, order=order)\n        else:\n            return self.search([], limit=limit, order=order)\n    else:\n        if domain:\n            domain = ['|', ('name', operator, name), ('email', operator, name)] + domain\n        else:\n            domain = ['|', ('name', operator, name), ('email', operator, name)]\n        return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 41.22350149282824}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    domain = [('id', 'in', self.account_move_line_ids.mapped('move_id').ids)]\n    if self.analytic_account_id:\n        domain += [('analytic_account_id', '=', self.analytic_account_id.id)]\n    return {\n        'name': _('Invoices'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': domain,\n        'context': self._context,\n    }\n\n", "CodeBleu_score": 21.73015460078972}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    # Search for account move lines related to sale types\n    domain = [('sale_type', 'in', self.sale_type_id.ids)]\n    # Add conditions for the current record's ID and analytic accounts\n    domain += [('analytic_account_id', 'in', self.analytic_account_id.ids)]\n    domain += [('analytic_account_id', '=', False)]\n    domain += [('id', 'in', self.account_move_line_ids.ids)]\n    # Execute the query to get distinct move IDs\n    move_ids = self.env['account.move'].search(domain).ids\n    # Return an action dictionary to display customer invoices in tree and form views with specific context and domain settings\n    return {\n        'name': _('Invoices'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'default_type': 'in_invoice', 'default_move_id': self.id},\n    }\n\n", "CodeBleu_score": 27.221253223234566}, {"code": "def action_view_invoice(self)\n\taction = self.env.ref('account.action_invoice_tree').read()[0]\n    action['context'] = {\n        'search_default_type': 'out_invoice',\n        'search_default_move_id': self.id,\n        'search_default_journal_id': self.journal_id.id,\n    }\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search([\n        ('move_id', '=', self.id),\n        ('account_id', 'in', self.analytic_account_id.ids),\n        ('account_id', 'in', self.account_id.ids),\n    ]).mapped('move_id').ids)]\n    return action\n\n", "CodeBleu_score": 33.35214904298754}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\treturn self.env['account.move'].with_context(\n        active_ids=self.ids,\n        active_id=self.ids[0],\n        active_model=self._name,\n        default_move_type='in_invoice',\n        search_default_move_line_ids='=',\n        search_default_purchase_id=self.ids[0],\n    ).tree_view()\n\n", "CodeBleu_score": 14.876615152131478}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    account_move_line_ids = self.env['account.move.line'].search([\n        ('move_id.type', '=', 'purchase'),\n        ('move_id.invoice_date', '=', self.invoice_date),\n        ('move_id.ref', '=', self.name),\n        ('move_id.invoice_payment_term_id', '=', self.invoice_payment_term_id.id),\n        ('move_id.invoice_user_id', '=', self.invoice_user_id.id),\n        ('move_id.invoice_partner_id', '=', self.invoice_partner_id.id),\n        ('move_id.invoice_payment_method_id', '=', self.invoice_payment_method_id.id),\n        ('move_id.invoice_payment_term_id', '=', self.invoice_payment_term_id.id),\n        ('move_id.invoice_type', '=', self.invoice_type),\n        ('move_id.invoice_state', '=', 'open'),\n        ('move_id.invoice_origin', '=', self.name),\n        ('move_id.invoice_origin_type', '=', 'purchase'),\n        ('move_id.invoice_date', '=', self.invoice_date),\n        ('move_id.journal_id', '=', self.journal_id.id),\n        ('move_id.move_type', '=', 'in_invoice'),\n        ('move_id.company_id', '=', self.company_id.id),\n        ('move_id.invoice_payment_type', '=', 'inbound'),\n        ('move_id.invoice_payment_type', '=', 'inbound'),\n        ('move_id.invoice_payment_type', '=', 'inbound'),\n        ('move_id.invoice_payment_type', '=', 'inbound'),\n        ('move_id.invoice_payment_type', '=', 'inbound'),", "CodeBleu_score": 19.57746392716862}, {"code": "def action_view_vendor_bill(self)\n\t# Search for account move lines related to purchase types and the current record's ID\n    domain = [('type', 'in', ['purchase', 'purchase_refund']), ('account_id', '=', self.id)]\n    account_move_lines = self.env['account.move.line'].search(domain)\n    # Get distinct move IDs\n    move_ids = account_move_lines.mapped('move_id').ids\n    # Construct and return an action to display vendor bills in a tree and form view, with a specific context to prevent creation and set the default move type to 'in_invoice'\n    action = self.env.ref('account.action_move_line_all_vendors').read()[0]\n    action['context'] = {\n        'active_ids': move_ids,\n        'active_id': move_ids[0],\n        'default_move_type': 'in_invoice',\n        'search_default_move_type': 'in_invoice',\n        'search_default_move_ids': move_ids,\n    }\n    return action\n\n", "CodeBleu_score": 29.06434175205281}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tif not self.company_id:\n        self.company_id = self.env.company\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context.get('default_company_id'):\n        self.company_id = self.env.context['default_company_id']\n    if self.env.context", "CodeBleu_score": 19.35447127262932}, {"code": "def _find_or_create_bank_account(self)\n\t# Check if bank account creation is disabled\n    if not self.env.company.bank_account_creation_enabled:\n        return self.env['res.partner.bank']\n\n    # Check if the partner has a bank account\n    partner_bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id)])\n    if partner_bank_account:\n        return partner_bank_account\n\n    # Check if the partner has a bank account with the same account number\n    partner_bank_account = self.env['res.partner.bank'].search([\n        ('partner_id', '=', self.id),\n        ('acc_number', '=', self.bank_acc_number),\n    ])\n    if partner_bank_account:\n        return partner_bank_account\n\n    # Create a new bank account\n    return self.env['res.partner.bank'].create({\n        'partner_id': self.id,\n        'acc_number': self.bank_acc_number,\n        'bank_id': self.env.company.bank_id.id,\n        'currency_id': self.env.company.currency_id.id,\n    })\n\n", "CodeBleu_score": 43.63934375042272}, {"code": "def _find_or_create_bank_account(self)\n\t# Check if we should skip creation of bank accounts\n    if self.env.company.get('create_bank_account', True) == False:\n        return self.env['res.partner.bank']\n    # Find or create bank account\n    partner_id = self.env.company.partner_id.id\n    bank_account_id = self.env['res.partner.bank'].search([('partner_id', '=', partner_id), ('acc_number', '=', self.env.company.acc_number)], limit=1)\n    if not bank_account_id:\n        bank_account_id = self.env['res.partner.bank'].create({\n            'partner_id': partner_id,\n            'acc_number': self.env.company.acc_number,\n            'acc_name': self.env.company.name,\n            'bank_id': self.env.company.bank_id.id,\n            'currency_id': self.env.company.currency_id.id,\n        })\n    return bank_account_id\n\n", "CodeBleu_score": 49.91064024065414}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    # Retrieve the accounting amounts and currencies\n    accounting_amounts_and_currencies = self._get_accounting_amounts_and_currencies()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = accounting_amounts_and_currencies\n    # Adjust the transaction amount and balance depending on the currency type\n    if currency.type == 'base':\n        transaction_amount = abs(transaction_amount)\n        balance = abs(balance)\n    elif currency.type == 'normal':\n        transaction_amount = -transaction_amount\n        balance = -balance\n    # Compute the counterpart amounts\n    counterpart_amounts = {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': transaction_currency,\n        'journal_amount': journal_amount,\n        'journal_currency': journal_currency,\n        'company_amount': company_amount,\n        'company_currency': company_currency,\n    }\n    if currency.type == 'base':\n        # In case of base currency, the transaction amount is the same as the amount_currency\n        counterpart_amounts['transaction_amount'] = amount_currency\n    elif currency.type == 'normal':\n        # In case of normal currency, the transaction amount is the same as the balance\n        counterpart_amounts['transaction_amount'] = balance\n    return counterpart_amounts\n\n", "CodeBleu_score": 24.630787001844542}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting", "CodeBleu_score": 1.5725316675342702}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t# The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting amounts and currencies, and computes the transaction amount, journal amount, and company amount using various exchange rates. Depending on the currency type, it adjusts the transaction amount and balance accordingly and returns these values in a dictionary.\n    # The function _prepare_counterpart_amounts_using_st_line_rate calculates the amounts in different currencies for a given transaction. It ensures a single record context, retrieves relevant accounting", "CodeBleu_score": 1.5725316675342702}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = [(6, 0, [])]\n        if journal.type in ('bank', 'cash'):\n            payment_methods = journal._default_outbound_payment_methods()\n            for payment_method in payment_methods:\n                journal.outbound_payment_method_line_ids.append((0, 0, {\n                    'payment_method_id': payment_method.id,\n                    'amount_min': 0.0,\n                    'amount_max': 1000000000000.0,\n                    'sequence': 1,\n                }))\n\n", "CodeBleu_score": 41.35567226862291}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        if journal.type == 'bank' or journal.type == 'cash':\n            journal.outbound_payment_method_line_ids = journal._default_outbound_payment_methods()\n        else:\n            journal.outbound_payment_method_line_ids = False\n\n", "CodeBleu_score": 23.280504288638486}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids = journal._default_outbound_payment_methods.ids\n\n", "CodeBleu_score": 19.721959151665295}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date and not move.date:\n            move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n\n", "CodeBleu_score": 26.310333218265058}, {"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date:\n            if move.is_sale_document(include_receipts=True):\n                move.date = move.invoice_date\n            else:\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n        if move.date != move.date_invoice:\n            move.date_invoice = move.date\n        if move.date != move.date_due:\n            move.date_due = move.date\n        if move.date != move.date_maturity:\n            move.date_maturity = move.date\n        if move.date != move.date_payment_scheduled:\n            move.date_payment_scheduled = move.date\n\n", "CodeBleu_score": 42.832269543693336}, {"code": "def _compute_date(self)\n\tfor move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        elif move.invoice_date and move.is_sale_document(include_receipts=True):\n            has_tax = move._affect_tax_report()\n            move.date = move._get_accounting_date(move.invoice_date, has_tax)\n            if move.date != move.invoice_date:\n                move.invoice_date = move.date\n                move.write({'date': move.date})\n\n", "CodeBleu_score": 37.89697625019527}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tfor move in self:\n        if move.is_sale_document():\n            if move.partner_id.property_supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            elif move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document():\n            if move.partner_id.property_customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n            elif move.partner_id.property_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 43.326088984002915}, {"code": "def _compute_invoice_payment_term_id(self)\n\tfor move in self:\n        if move.partner_id:\n            if move.is_sale_document():\n                if move.partner_id.property_supplier_payment_term_id:\n                    move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n                else:\n                    move.invoice_payment_term_id = False\n            elif move.is_purchase_document():\n                if move.partner_id.property_customer_payment_term_id:\n                    move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n                else:\n                    move.invoice_payment_term_id = False\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 44.81411248363641}, {"code": "def _compute_invoice_payment_term_id(self)\n\tfor move in self:\n        if move.is_sale_document(include_receipts=True) and move.partner_id.property_supplier_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        elif move.is_purchase_document(include_receipts=True) and move.partner_id.property_customer_payment_term_id:\n            move.invoice_payment_term_id = move.partner_id.property_customer_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 64.18196759874994}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\ttax_groups_by_country_and_company = {}\n    for tax in self:\n        if tax.country_id:\n            key = (tax.country_id.id, tax.company_id.id)\n        else:\n            key = (False, tax.company_id.id)\n        if key not in tax_groups_by_country_and_company:\n            tax_groups_by_country_and_company[key] = tax.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n        if not tax_groups_by_country_and_company[key]:\n            tax_groups_by_country_and_company[key] = tax.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n        tax.tax_group_id = tax_groups_by_country_and_company[key]\n\n\n def _compute_tax_group_id_for_tax_include(self):\n    \"\"\"This function assigns the appropriate tax group to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    tax_groups_by_country_and_company = {}\n    for tax in self:\n        if tax.country_id:\n            key = (tax.country_id.id, tax.company_id.id)\n        else:\n            key = (False, tax.company_id.id)\n        if key not in tax_groups_by_country_and_company:\n            tax_groups_by_country_and_company[key] = tax.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n        if not tax_groups_by_country_and", "CodeBleu_score": 31.594749740330187}, {"code": " def _compute_tax_group_id(self)\n\ttaxes_by_country = {}\n    taxes_by_company = {}\n    for tax in self:\n        if tax.country_id:\n            if tax.country_id.id not in taxes_by_country:\n                taxes_by_country[tax.country_id.id] = {}\n            if tax.company_id.id not in taxes_by_country[tax.country_id.id]:\n                taxes_by_country[tax.country_id.id][tax.company_id.id] = []\n            taxes_by_country[tax.country_id.id][tax.company_id.id].append(tax)\n        else:\n            if tax.company_id.id not in taxes_by_company:\n                taxes_by_company[tax.company_id.id] = []\n            taxes_by_company[tax.company_id.id].append(tax)\n\n    for taxes in taxes_by_country.values():\n        for company_taxes in taxes.values():\n            company_taxes.sort(key=lambda x: x.sequence)\n            for tax in company_taxes:\n                tax.tax_group_id = tax.country_id.tax_group_id\n                if tax.tax_group_id:\n                    break\n            if not tax.tax_group_id:\n                for tax in company_taxes:\n                    tax.tax_group_id = tax.company_id.tax_group_id\n                    if tax.tax_group_id:\n                        break\n\n    for taxes in taxes_by_company.values():\n        taxes.sort(key=lambda x: x.sequence)\n        for tax in taxes:\n            tax.tax_group_id = tax.company_id.tax_group_id\n            if tax.tax_group_id:\n                break\n\n def _compute_tax_group_id_onchange(self):\n    \"\"\"This function is called when the tax group is changed. It updates the taxes' country and company to match the tax group's country and company.\"\"\"\n    for tax in self:\n        if tax.", "CodeBleu_score": 24.57744755276943}, {"code": " def _compute_tax_group_id(self)\n\ttax_groups = {}\n    taxes = self.env['account.tax'].search([('active', '=', True)])\n    for tax in taxes:\n        if tax.company_id.id not in tax_groups:\n            tax_groups[tax.company_id.id] = {}\n        if tax.country_id.id not in tax_groups[tax.company_id.id]:\n            tax_groups[tax.company_id.id][tax.country_id.id] = {}\n        if tax.company_id.id not in tax_groups[tax.country_id.id]:\n            tax_groups[tax.country_id.id][tax.company_id.id] = {}\n        if tax.country_id.id not in tax_groups[tax.company_id.id][tax.company_id.id]:\n            tax_groups[tax.country_id.id][tax.company_id.id][tax.company_id.id] = {}\n        if tax.country_id.id not in tax_groups[tax.company_id.id][tax.company_id.id][tax.company_id.id]:\n            tax_groups[tax.country_id.id][tax.company_id.id][tax.company_id.id][tax.company_id.id] = {}\n        if tax.country_id.id not in tax_groups[tax.company_id.id][tax.company_id.id][tax.company_id.id][tax.company_id.id]:\n            tax_groups[tax.country_id.id][tax.company_id.id][tax.company_id.id][tax.company_id.id][tax.company_id.id] = {}\n        if tax.country_id.id not in tax_groups[tax.company_id.id][tax.company_id.id][tax.company_id.id][tax.company_id.id][tax.company_id.id]:\n            tax_groups[tax.country_id.id][tax.company_id.id][tax.company_id.id][tax.company_id.id][tax.company_id.id][tax.company", "CodeBleu_score": 22.2707515712384}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session\n    self.set_database(url, login, password, db)\n\n    # Read the module file\n    with open(module_file, 'r') as f:\n        module_content = f.read()\n\n    # Prepare the POST request data\n    post_data = {\n        'module': module_content,\n        'force': force\n    }\n\n    # Upload the module\n    response = requests.post(url + '/base_import_module/login_upload', data=post_data)\n\n    # Check if the module was uploaded successfully\n    if response.status_code != 200:\n        raise Exception('The server did not accept the module.')\n\n    return response.text\n\n", "CodeBleu_score": 35.83492829903753}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set database\n    self.set_db(db)\n\n    # Set login and password\n    self.set_login_password(login, password)\n\n    # Get login URL\n    login_url = self.get_login_url()\n\n    # Set session\n    self.set_session(login_url)\n\n    # Read module file\n    module_file_content = open(module_file, 'rb').read()\n\n    # Prepare data\n    data = {\n        'module_file': module_file_content,\n        'force': force\n    }\n\n    # Prepare headers\n    headers = {\n        'Content-Type': 'multipart/form-data'\n    }\n\n    # Prepare request\n    request = requests.post(url + '/base_import_module/login_upload', data=data, headers=headers)\n\n    # Return response\n    return request.text\n\n", "CodeBleu_score": 32.47742600659659}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session\n    self.set_database(url, login, password, db)\n\n    # Prepare the POST request data\n    data = {'force': force}\n    with open(module_file, 'rb') as f:\n        data['file'] = f\n\n    # Upload the module\n    return self.post(url + '/base_import_module/login_upload', data=data)\n\n", "CodeBleu_score": 23.432915155341107}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t# The database name is retrieved from the configuration\n    database_name = 'odoo'\n\n    # Whether to overwrite existing translations is retrieved from the configuration\n    overwrite = True\n\n    # A new database registry is created\n    registry = openerp.modules.registry.RegistryManager.get(database_name)\n\n    # A cursor is created\n    cr = registry.cursor()\n\n    # The importer is initialized\n    importer = openerp.tools.trans_load.TranslationImporter(cr, overwrite)\n\n    # The importer loads the translations\n    importer.load_translations()\n\n    # The importer saves the translations\n    importer.save_translations()\n\n", "CodeBleu_score": 35.923494175876655}, {"code": "def import_translation()\n\t# Get configuration\n    database_name = 'odoo'\n    overwrite = True\n\n    # Create registry\n    registry = odoo.registry(database_name)\n\n    # Get cursor\n    cr = registry.cursor()\n\n    # Create importer\n    importer = TranslationImporter(cr, overwrite)\n\n    # Load files\n    importer.import_translations('base', 'base.lang')\n    importer.import_translations('base', 'web.lang')\n    importer.import_translations('base', 'web_tour.lang')\n    importer.import_translations('base', 'web_editor.lang')\n    importer.import_translations('base', 'web_kanban.lang')\n    importer.import_translations('base', 'web_calendar.lang')\n    importer.import_translations('base', 'web_graph.lang')\n    importer.import_translations('base', 'web_mail.lang')\n    importer.import_translations('base', 'web_widget.lang')\n    importer.import_translations('base', 'web_planner.lang')\n    importer.import_translations('base', 'web_portal.lang')\n    importer.import_translations('base', 'web_tests.lang')\n    importer.import_translations('base', 'web_calendar_event.lang')\n    importer.import_translations('base', 'web_calendar_leave.lang')\n    importer.import_translations('base', 'web_calendar_meeting.lang')\n    importer.import_translations('base', 'web_calendar_project.lang')\n    importer.import_translations('base', 'web_calendar_task.lang')\n    importer.import_translations('base', 'web_calendar_recurring.lang')\n    importer.import_translations('base', 'web_calendar_recurring_event.lang')\n    importer.import_translations('base', 'web_calendar_recurring_leave.lang')", "CodeBleu_score": 20.568087210147155}, {"code": "def import_translation()\n\timport odoo\n    import odoo.modules\n    from odoo.tools.translate import TranslationImporter\n    from odoo.modules.registry import RegistryManager\n\n    db_name = 'my_database'\n    overwrite = True\n\n    # initialize the registry\n    registry = RegistryManager.get(db_name)\n    cr = registry.cursor()\n\n    # initialize the translations importer\n    importer = TranslationImporter(cr, overwrite)\n\n    # load translations\n    importer.import_module('base')\n    importer.import_module('web')\n    importer.import_module('web_kanban')\n    importer.import_module('web_graph')\n    importer.import_module('web_calendar')\n    importer.import_module('web_editor')\n    importer.import_module('web_planner')\n    importer.import_module('web_mail')\n    importer.import_module('web_widget')\n    importer.import_module('web_graph')\n    importer.import_module('web_kanban')\n    importer.import_module('web_calendar')\n    importer.import_module('web_editor')\n    importer.import_module('web_planner')\n    importer.import_module('web_mail')\n    importer.import_module('web_widget')\n    importer.import_module('web_graph')\n    importer.import_module('web_kanban')\n    importer.import_module('web_calendar')\n    importer.import_module('web_editor')\n    importer.import_module('web_planner')\n    importer.import_module('web_mail')\n    importer.import_module('web_widget')\n    importer.import_module('web_graph')\n    importer.import_module('web_kanban')\n    importer.import_module('web_calendar')\n    importer.import_module('web_editor')\n    importer.import_module('web_planner')\n    importer.import_module('web_mail')\n    importer.import_module('web", "CodeBleu_score": 22.993263184927002}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t# Check if the child already exists\n    if name in self.children:\n        return self.children[name]\n\n    # Create the new child node\n    child = Node(name, info)\n    child.depth = self.depth + 1\n\n    # Inherit attributes from the parent\n    if self.info.get('attributes'):\n        for key in self.info['attributes']:\n            if key not in child.info['attributes']:\n                child.info['attributes'][key] = self.info['attributes'][key]\n\n    # Append the child to the children list\n    self.children[name] = child\n\n    # Sort the children by name\n    self.children = sorted(self.children.items(), key=lambda x: x[0])\n\n    return child\n\n", "CodeBleu_score": 37.610546254928664}, {"code": "def add_child(self, name, info)\n\tif self.children is None:\n        self.children = []\n    if name in self.children:\n        return self.children[name]\n    else:\n        node = Node(name, info)\n        node.depth = self.depth + 1\n        self.children.append(node)\n        self.children.sort(key=lambda x: x.name)\n        return node\n\n", "CodeBleu_score": 46.48504763601395}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n    else:\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        self.children[name] = new_node\n        self.children = dict(sorted(self.children.items(), key=lambda item: item[0]))\n        return new_node\n\n", "CodeBleu_score": 38.07266323037946}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t# Initialize the result\n    result = {}\n    result[\"dates\"] = dates\n    for date in dates:\n        result[date] = {}\n        result[date][\"balance\"] = 0\n\n    # Determine the root type\n    root_type = account.root_type\n    if root_type != \"Asset\" and root_type != \"Expense\":\n        root_type = \"Liability\"\n\n    # Iterate through the entries\n    for entry in gl_entries:\n        # Get the date of the entry\n        entry_date = entry.date\n\n        # Get the account of the entry\n        entry_account = entry.account\n\n        # Get the balance of the entry\n        entry_balance = entry.balance\n\n        # Update the balance for the entry's date\n        if entry_date in result:\n            result[entry_date][\"balance\"] += entry_balance\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if root_type != \"Asset\" and root_type != \"Expense\":\n        for date in result:\n            result[date][\"balance\"] *= -1\n\n    # If the root type is \"Asset\" or \"Liability,\" accumulate the balances over time\n    if root_type == \"Asset\" or root_type == \"Liability\":\n        for date in result:\n            if date == dates[0]:\n                result[date][\"balance\"] = result[date][\"balance\"]\n            else:\n                result[date][\"balance\"] += result[date - 1][\"balance\"]\n\n    # Return the computed results\n    return result\n\n", "CodeBleu_score": 23.83828995052749}, {"code": "def build_result(account, dates, gl_entries)\n\t# Initialize the result with the dates and zeros for balances.\n    result = {\n        'account': account,\n        'dates': dates,\n        'balances': {\n            'assets': {\n                'opening': 0.0,\n                'closing': 0.0,\n            },\n            'expenses': {\n                'opening': 0.0,\n                'closing': 0.0,\n            },\n            'income': {\n                'opening': 0.0,\n                'closing': 0.0,\n            },\n            'net_assets': {\n                'opening': 0.0,\n                'closing': 0.0,\n            },\n        },\n    }\n\n    # Determine the account's root type.\n    root_type = account.root_type\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances.\n    if root_type not in ('Asset', 'Expense'):\n        for date in result['dates']:\n            for balance_type in result['balances']:\n                result['balances'][balance_type]['opening'] = -result['balances'][balance_type]['opening']\n                result['balances'][balance_type]['closing'] = -result['balances'][balance_type]['closing']\n\n    # If the root type is not \"Asset,\" \"Liability,\" or \"Equity,\" accumulate the balance over time.\n    if root_type not in ('Asset', 'Liability', 'Equity'):\n        for date in result['dates']:\n            for balance_type in result['balances']:\n                if date == result['dates'][0]:\n                    result['balances'][balance_type]['opening'] = result['balances'][balance_type]['opening'] + result['balances'][balance_type]['closing']\n                else:\n                    result['balances'][balance_type]['opening'] = result['balances'][balance_type]['closing']\n\n    # Iterate through the entries, updating the balance for each date.", "CodeBleu_score": 16.421483719769622}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = {}\n    for date in dates:\n        result[date] = {\"balance\": 0}\n    for entry in gl_entries:\n        if entry[\"account\"][\"id\"] == account[\"id\"]:\n            if entry[\"date\"] in result:\n                result[entry[\"date\"]][\"balance\"] += entry[\"amount\"]\n            else:\n                result[entry[\"date\"]] = {\"balance\": entry[\"amount\"]}\n    if account[\"root_type\"] in [\"Asset\", \"Liability\", \"Equity\"]:\n        for date in dates:\n            if date in result:\n                result[date][\"balance\"] = result[date][\"balance\"] + result[date - 1][\"balance\"]\n    elif account[\"root_type\"] == \"Expense\":\n        for date in dates:\n            if date in result:\n                result[date][\"balance\"] = -result[date][\"balance\"]\n    return result\n\n", "CodeBleu_score": 20.73360764148977}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\tif self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.account_type != self.account_type_old:\n            if self.account_type != \"Receivable\" and self.account_type != \"Payable\":\n                if self.is_group:\n                    pass\n                else:\n                    gl_entries = frappe.get_all(\n                        \"GL Entry\", filters={\"account\": self.name}, fields=[\"name\"])\n                    if gl_entries:\n                        frappe.throw(\n                            _(\"This account has existing entries in the general ledger. Changing the account type to a non-receivable/payable type will cause issues in the Accounts report. Please check the Accounts report before changing the account type.\"))\n                        self.db_set(\"account_type\", self.account_type_old)\n                        self.db_set(\"account_type_old\", self.account_type)\n                        self.db_set(\"account_type_display\", self.account_type_old)\n                        self.db_set(\"account_type_display_old\", self.account_type)\n                        frappe.msgprint(_(\"Account type has been reverted to previous value\"))\n                        return\n                    else:\n                        self.db_set(\"account_type\", self.account_type_old)\n                        self.db_set(\"account_type_old\", self.account_type)\n                        self.db_set(\"account_type_display\", self.account_type_old)\n                        self.db_set(\"account_type_display_old\", self.account_type)\n                        frappe.msgprint(_(\"Account type has been reverted to previous value\"))\n                        return\n            else:\n                self.db_set(\"account_type\", self.account_type_old)\n                self.db_set(\"account_type_old\", self.account_type)\n                self.db_set(\"account_type_display\", self.account_type_old)\n                self.db_set(\"account_type_display_old\", self.account_type)\n                frappe.msgprint(_(\"Account type", "CodeBleu_score": 31.27751629710155}, {"code": "def validate_receivable_payable_account_type(self)\n\tif self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != self.old_account_type:\n            if self.account_type == \"Bank\":\n                if self.account_type != \"Receivable\" and self.account_type != \"Payable\":\n                    if self.account_type != \"Bank\":\n                        frappe.throw(\"Cannot change account type from Receivable/Payable to Bank\")\n            if self.account_type == \"Receivable\":\n                if self.account_type != \"Bank\":\n                    if self.account_type != \"Payable\":\n                        if self.account_type != \"Receivable\":\n                            if self.account_type != \"Bank\":\n                                if self.account_type != \"Cash\":\n                                    if self.account_type != \"Cash in Hand\":\n                                        if self.account_type != \"Cash in Bank\":\n                                            if self.account_type != \"Cash in Post Office\":\n                                                if self.account_type != \"Cash in Hand\":\n                                                    if self.account_type != \"Cash in Bank\":\n                                                        if self.account_type != \"Cash in Post Office\":\n                                                            if self.account_type != \"Cash\":\n                                                                if self.account_type != \"Cash in Hand\":\n                                                                    if self.account_type != \"Cash in Bank\":\n                                                                        if self.account_type != \"Cash in Post Office\":\n                                                                            if self.account_type != \"Cash\":\n                                                                                if self.account_type != \"Bank\":\n                                                                                    if self.account_type != \"Receivable\":\n                                                                                        if self.account_type != \"Payable\":\n                                                                                            if self.account_type != \"Bank\":\n                                                                                                if self.account_type != \"Receivable\":\n                                                                                                    if self.account_type != \"Payable\":", "CodeBleu_score": 15.107080308258622}, {"code": "def validate_receivable_payable_account_type(self)\n\tif self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != self.account_type_old:\n            if self.account_type == \"Expense Account\" or self.account_type == \"Income Account\":\n                frappe.throw(_(\"Cannot change account type to {0} for account {1}\").format(self.account_type, self.account_name))\n            else:\n                if self.account_type == \"Bank\" or self.account_type == \"Cash\" or self.account_type == \"Cash In Hand\" or self.account_type == \"Bank FD\" or self.account_type == \"Bank OD\":\n                    if self.account_type == \"Bank\" or self.account_type == \"Cash\" or self.account_type == \"Cash In Hand\" or self.account_type == \"Bank FD\" or self.account_type == \"Bank OD\":\n                        if self.account_type == \"Bank\" or self.account_type == \"Cash\" or self.account_type == \"Cash In Hand\" or self.account_type == \"Bank FD\" or self.account_type == \"Bank OD\":\n                            if self.account_type == \"Bank\" or self.account_type == \"Cash\" or self.account_type == \"Cash In Hand\" or self.account_type == \"Bank FD\" or self.account_type == \"Bank OD\":\n                                if self.account_type == \"Bank\" or self.account_type == \"Cash\" or self.account_type == \"Cash In Hand\" or self.account_type == \"Bank FD\" or self.account_type == \"Bank OD\":\n                                    if self.account_type == \"Bank\" or self.account_type == \"Cash\" or self.account_type == \"Cash In Hand\" or self.account_type == \"Bank FD\" or self.account_type == \"Bank OD\":\n                                        if self.account_type == \"Bank\" or self.account_", "CodeBleu_score": 16.85851070231939}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\tif self.company_currency == self.currency:\n        self.explicit_currency = True\n    else:\n        self.explicit_currency = False\n        self.currency = self.company_currency\n\n    if self.account_type == \"Bank\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Bank accounts must be in the company's currency.\")\n\n    if self.account_type == \"Cash\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Cash accounts must be in the company's currency.\")\n\n    if self.account_type == \"Receivable\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Receivable accounts must be in the company's currency.\")\n\n    if self.account_type == \"Payable\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Payable accounts must be in the company's currency.\")\n\n    if self.account_type == \"Expense\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Expense accounts must be in the company's currency.\")\n\n    if self.account_type == \"Income\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Income accounts must be in the company's currency.\")\n\n    if self.account_type == \"Equity\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Equity accounts must be in the company's currency.\")\n\n    if self.account_type == \"Liability\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Liability accounts must be in the company's currency.\")\n\n    if self.account_type == \"Asset\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Asset accounts must be in the company's currency.\")\n\n    if self.account_type == \"Revenue\" and self.account_currency != self.company_currency:\n        raise ValueError(\"Revenue accounts must be in the company's currency.\")\n\n    if self.account_type == \"Cost of Sales", "CodeBleu_score": 19.53010994443182}, {"code": "def validate_account_currency(self)\n\tif self.company:\n        if not self.currency:\n            self.currency = self.company.currency\n        if self.currency != self.company.currency:\n            self.explicit_currency = True\n            self.currency = self.company.currency\n            if self.account_type != 'contra':\n                general_ledger_entries = self.get_general_ledger_entries()\n                if general_ledger_entries:\n                    for entry in general_ledger_entries:\n                        if entry.currency != self.currency:\n                            frappe.throw(_(\"Cannot change currency of account {0} as it has existing entries in {1}\").format(self.name, entry.currency))\n\n", "CodeBleu_score": 29.08614253131936}, {"code": "def validate_account_currency(self)\n\tif not self.currency_id:\n        self.currency_id = self.company_id.currency_id\n        self.currency_id.company_id = self.company_id\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The currency of the account is not valid for the company.\"))\n    if self.currency_id.company_id != self.company_id:\n        raise ValidationError(_(\"The", "CodeBleu_score": 19.53040605031268}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\taggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n\t\t\t\t\"account\": key_values[\"account\"],\n\t\t\t\t\"account_currency\": key_values[\"account_currency\"],\n\t\t\t\t\"cost_center\": key_values[\"cost_center\"],\n\t\t\t\t\"project\": key_values[\"project\"],\n\t\t\t\t\"finance_book\": key_values[\"finance_book\"],\n\t\t\t\t\"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n\t\t\t\t\"debit\": 0,\n\t\t\t\t\"credit\": 0,\n\t\t\t\t\"debit_in_account_currency\": 0,\n\t\t\t\t\"credit_in_account_currency\": 0,\n\t\t\t\t\"total_debit\": 0,\n\t\t\t\t\"total_credit\": 0,\n\t\t\t\t\"total_debit_in_account_currency\": 0,\n\t\t\t\t\"total_credit_in_account_currency\": 0,\n\t\t\t\t\"account_last_closing_balance\": 0,\n\t\t\t\t\"account_last_closing_balance_in_account_currency\": 0,\n\t\t\t\t\"account_closing_balance\": 0,\n\t\t\t\t\"account_closing_balance_in_account_currency\": 0,\n\t\t\t\t\"account_last_year_closing_balance\": 0,\n\t\t\t\t\"account_last_year_closing_balance_in_account_currency\": 0,\n\t\t\t\t\"account_year_closing_balance\": 0,\n\t\t\t\t\"account_year_closing_balance_in_account_currency\": 0,\n\t\t\t\t\"account_last_year_closing_balance_diff\": 0,\n\t\t\t\t\"account_", "CodeBleu_score": 32.15577150957039}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\taggregated_entries = {}\n\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n\t\t\t\t\"account\": key_values[\"account\"],\n\t\t\t\t\"account_currency\": key_values[\"account_currency\"],\n\t\t\t\t\"cost_center\": key_values[\"cost_center\"],\n\t\t\t\t\"project\": key_values[\"project\"],\n\t\t\t\t\"finance_book\": key_values[\"finance_book\"],\n\t\t\t\t\"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n\t\t\t\t\"debit\": 0,\n\t\t\t\t\"credit\": 0,\n\t\t\t\t\"debit_in_account_currency\": 0,\n\t\t\t\t\"credit_in_account_currency\": 0,\n\t\t\t\t\"last_account_closing_balance\": 0,\n\t\t\t\t\"account_name\": frappe.db.get_value(\"Account\", key_values[\"account\"], \"account_name\"),\n\t\t\t\t\"account_type\": frappe.db.get_value(\"Account\", key_values[\"account\"], \"account_type\"),\n\t\t\t\t\"account_balance\": 0,\n\t\t\t\t\"account_balance_in_account_currency\": 0,\n\t\t\t\t\"account_balance_in_account_currency_with_dr_cr\": 0,\n\t\t\t\t\"account_balance_in_account_currency_with_dr\": 0,\n\t\t\t\t\"account_balance_in_account_currency_with_cr\": 0,\n\t\t\t\t\"account_balance_in_account_currency_with_dr_cr_diff\": 0,\n\t\t\t\t\"account_balance_in_account_currency_with_dr_diff\": 0,\n\t\t\t\t\"account_balance_in_account_currency_with_cr_diff\": 0,", "CodeBleu_score": 33.50597829687225}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\taggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"account\": entry.get(\"account\"),\n                \"account_currency\": entry.get(\"account_currency\"),\n                \"cost_center\": entry.get(\"cost_center\"),\n                \"project\": entry.get(\"project\"),\n                \"finance_book\": entry.get(\"finance_book\"),\n                \"is_period_closing_voucher_entry\": entry.get(\"is_period_closing_voucher_entry\"),\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n            }\n            for dimension in accounting_dimensions:\n                aggregated_entries[key][dimension] = entry.get(dimension)\n\n        if entry.get(\"debit\"):\n            aggregated_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n            aggregated_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        if entry.get(\"credit\"):\n            aggregated_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n            aggregated_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return aggregated_entries\n\n", "CodeBleu_score": 38.546476548907826}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.type == \"in_invoice\" and self.partner_id.supplier:\n        if self.partner_id.supplier.blocked:\n            if self.partner_id.supplier.blocked_type == \"supplier\":\n                if self.partner_id.supplier.blocked_until and self.partner_id.supplier.blocked_until > fields.Date.today():\n                    raise UserError(_(\"This supplier is on hold until %s. Please contact the administrator.\") % (self.partner_id.supplier.blocked_until,))\n                else:\n                    raise UserError(_(\"This supplier is on hold. Please contact the administrator.\"))\n\n", "CodeBleu_score": 20.039283780808738}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.supplier_id:\n        supplier = self.env['res.partner'].browse(self.supplier_id)\n        if supplier.blocked:\n            if self.type == 'in_invoice' and supplier.blocked_type == 'invoice':\n                if supplier.blocked_date > fields.Date.today():\n                    raise UserError(_('The supplier is on hold and cannot be paid. The hold will be lifted on %s.') % (supplier.blocked_date.strftime('%Y-%m-%d')))\n            elif self.type == 'out_invoice' and supplier.blocked_type == 'invoice':\n                if supplier.blocked_date > fields.Date.today():\n                    raise UserError(_('The supplier is on hold and cannot be paid. The hold will be lifted on %s.') % (supplier.blocked_date.strftime('%Y-%m-%d')))\n            elif self.type == 'in_refund' and supplier.blocked_type == 'refund':\n                if supplier.blocked_date > fields.Date.today():\n                    raise UserError(_('The supplier is on hold and cannot be paid. The hold will be lifted on %s.') % (supplier.blocked_date.strftime('%Y-%m-%d')))\n            elif self.type == 'out_refund' and supplier.blocked_type == 'refund':\n                if supplier.blocked_date > fields.Date.today():\n                    raise UserError(_('The supplier is on hold and cannot be paid. The hold will be lifted on %s.') % (supplier.blocked_date.strftime('%Y-%m-%d')))\n            elif self.type == 'in_payment' and supplier.blocked_type == 'payment':\n                if supplier.blocked_date > fields.Date.today():\n                    raise UserError(_('The supplier is on hold and cannot be paid. The hold will be lifted on %s.') % (supplier.blocked_date.strftime('%Y-%m-%d')))", "CodeBleu_score": 22.14625741183379}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.type == \"in_invoice\" and self.partner_id.supplier_blocked:\n        if self.partner_id.supplier_blocked.type == \"hold\":\n            if self.partner_id.supplier_blocked.release_date < self.date_invoice:\n                raise UserError(_(\"The supplier is still blocked.\"))\n        else:\n            raise UserError(_(\"The supplier is still blocked.\"))\n\n", "CodeBleu_score": 15.935294155004131}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = frappe.get_all(\"Repost Doctype\", filters={\"docstatus\": 1, \"disabled\": 0}, fields=[\"name\", \"repost_vouchers\", \"vouchers\"])\n    if not repost_doctypes:\n        return\n\n    repost_doctypes_map = {}\n    for repost_doctype in repost_doctypes:\n        repost_doctypes_map.setdefault(repost_doctype.name, [])\n        if repost_doctype.repost_vouchers:\n            repost_doctypes_map[repost_doctype.name].append(\"repost_vouchers\")\n        if repost_doctype.vouchers:\n            repost_doctypes_map[repost_doctype.name].append(\"vouchers\")\n\n    for repost_doctype_name, fields in repost_doctypes_map.items():\n        repost_doctype = frappe.get_doc(\"Repost Doctype\", repost_doctype_name)\n        for field in fields:\n            if field == \"repost_vouchers\":\n                voucher_type = repost_doctype.repost_voucher_type\n            else:\n                voucher_type = repost_doctype.voucher_type\n\n            voucher_number = repost_doctype.repost_voucher_number\n            if field == \"vouchers\":\n                voucher_number = repost_doctype.voucher_number\n\n            if not voucher_type or not voucher_number:\n                continue\n\n            rows = frappe.db.get_all(\n                \"Repost Row\",\n                filters={\n                    \"parent\": repost_doctype.name,\n                    \"repost_doctype\": repost_doctype_name,\n                    \"repost_voucher_type\": voucher_type,\n                    \"repost_voucher_number\": voucher_number\n                },", "CodeBleu_score": 20.260930904831216}, {"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = [\"Sales Invoice Repost\", \"Purchase Invoice Repost\", \"Journal Entry Repost\", \"Payment Entry Repost\", \"Purchase Receipt Repost\", \"Sales Invoice Repost\", \"Sales Order Repost\", \"Purchase Order Repost\", \"Delivery Note Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales Invoice Repost\", \"Sales", "CodeBleu_score": 3.8832496088768225}, {"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = [\"GL Entry\", \"Payment Entry\", \"Journal Entry\", \"Stock Ledger Entry\", \"Stock Reconciliation\", \"Sales Invoice\", \"Purchase Invoice\", \"Purchase Receipt\", \"Sales Invoice\", \"Delivery Note\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice\", \"Sales Invoice", "CodeBleu_score": 3.1746990825480816}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.auth()\n        # Construct the query parameters\n        query_parameters = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\n                \"count\": 200,\n                \"offset\": 0,\n                \"include_item\": True,\n                \"account_ids\": [account_id] if account_id else None\n            }\n        }\n        # Fetch the transactions\n        transactions = []\n        while True:\n            # Authenticate the client\n            self.auth()\n            # Construct the query parameters\n            query_parameters[\"options\"][\"offset\"] = len(transactions)\n            # Fetch the transactions\n            response = self.client.Transactions.get(**query_parameters)\n            transactions += response.transactions\n            # Break if the number of retrieved transactions is less than the total\n            if len(transactions) < response.total_transactions:\n                pass\n            # Break if the number of retrieved transactions is equal to the total\n            elif len(transactions) == response.total_transactions:\n                break\n            # Raise an exception if the number of retrieved transactions is greater than the total\n            else:\n                frappe.log_error(\"Plaid: Too many transactions retrieved\")\n                frappe.throw(_(\"Too many transactions retrieved\"), title=_(\"Transactions Error\"))\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.log_error(\"Plaid: Item login required\")\n            frappe.throw(_(\"Item login required\"), title=_(\"Transactions Error\"))\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            frappe.log_error(\"Plaid: Planned maintenance\")\n            frappe.throw(_(\"Planned maintenance\"), title=_(\"Transactions Error\"))\n    except requests.Timeout:\n        frappe.log_error(\"Plaid: Timeout\")\n        frappe.throw(_(\"Timeout\"), title=_(\"Transactions Error\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid:", "CodeBleu_score": 32.428507869042086}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t# Authenticate the client\n    self.auth()\n\n    # Construct the query parameters\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\n            \"count\": 200,\n            \"offset\": 0\n        }\n    }\n\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n\n    # Fetch the transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(**query_params)\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transaction error\")\n            frappe.throw(_(str(e)), title=_(\"Transaction Failed\"))\n\n        # Stop fetching if there are no more transactions\n        if len(response.transactions) == 0:\n            break\n\n        # Add the transactions to the list\n        transactions += response.transactions\n\n        # Update the query parameters\n        query_params[\"options\"][\"offset\"] += 200\n\n        # Stop fetching if the total number of transactions has been reached\n        if len(transactions) >= response.total_transactions:\n            break\n\n    return transactions\n\n", "CodeBleu_score": 34.69971159154016}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\tself.auth()\n    try:\n        transactions = []\n        if account_id:\n            transactions = self.client.Transactions.get(\n                account_id=account_id,\n                start_date=start_date,\n                end_date=end_date,\n                count=100,\n                options=[\"balances\", \"name\", \"pending\"],\n            )\n        else:\n            transactions = self.client.Transactions.get(\n                start_date=start_date,\n                end_date=end_date,\n                count=100,\n                options=[\"balances\", \"name\", \"pending\"],\n            )\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transaction error\")\n        frappe.throw(_(str(e)), title=_(\"Transaction Failed\"))\n\n", "CodeBleu_score": 41.25950827722914}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\tbank_name = response[\"institution\"][\"name\"]\n    bank_id = response[\"institution\"][\"institution_id\"]\n    bank_type = response[\"institution\"][\"type\"]\n    bank_url = response[\"institution\"][\"url\"]\n    bank_primary_color = response[\"institution\"][\"primary_color\"]\n    bank_logo = response[\"institution\"][\"primary_color\"]\n    bank_access_token = get_access_token(token)\n    bank = frappe.get_all(\"Bank\", filters={\"bank_id\": bank_id}, fields=[\"name\"])\n    if len(bank) == 0:\n        frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"bank_name\": bank_name,\n            \"bank_id\": bank_id,\n            \"bank_type\": bank_type,\n            \"bank_url\": bank_url,\n            \"bank_primary_color\": bank_primary_color,\n            \"bank_logo\": bank_logo,\n            \"bank_access_token\": bank_access_token\n        }).insert()\n    else:\n        bank = frappe.get_doc(\"Bank\", bank[0].name)\n        bank.bank_access_token = bank_access_token\n        bank.save()\n\n", "CodeBleu_score": 33.93869632599169}, {"code": "def add_institution(token, response)\n\tinstitution = response[\"item\"][\"institution\"]\n    if not frappe.db.exists(\"Bank\", institution[\"name\"]):\n        new_bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"bank_name\": institution[\"name\"],\n            \"bank_code\": institution[\"institution_id\"],\n            \"access_token\": token\n        })\n        new_bank.insert(ignore_permissions=True)\n    else:\n        existing_bank = frappe.get_doc(\"Bank\", institution[\"name\"])\n        existing_bank.access_token = token\n        existing_bank.save(ignore_permissions=True)\n\n", "CodeBleu_score": 33.613482291786056}, {"code": "def add_institution(token, response)\n\tinstitution_id = response[\"institution_id\"]\n    access_token = get_access_token(token, response[\"public_token\"])\n    if frappe.db.exists(\"Bank\", institution_id):\n        bank = frappe.get_doc(\"Bank\", institution_id)\n        bank.access_token = access_token\n        bank.save()\n    else:\n        bank = frappe.new_doc(\"Bank\")\n        bank.institution_id = institution_id\n        bank.access_token = access_token\n        bank.save()\n    return bank\n\n", "CodeBleu_score": 33.56517422181941}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\tif not bank_account:\n        frappe.throw(_(\"Please select a bank account to sync transactions for.\"))\n\n    bank_account_doc = frappe.get_doc(\"Bank Account\", bank_account)\n    bank_doc = frappe.get_doc(\"Bank\", bank_account_doc.bank)\n\n    if not bank_doc.plaid_access_token:\n        frappe.throw(_(\"Please link the Plaid account for the Bank {}.\").format(bank_doc.name))\n\n    if not bank_account_doc.integration_id:\n        frappe.throw(_(\"Please link the Plaid account for the Bank Account {}.\").format(bank_account_doc.name))\n\n    if not bank_doc.plaid_access_token or not bank_account_doc.integration_id:\n        frappe.throw(\n            _(\"Please link the Plaid account for the Bank {} and Bank Account {}.\").format(\n                bank_doc.name, bank_account_doc.name\n            )\n        )\n\n    transactions = get_transactions(bank_doc.name, bank_account_doc.name)\n    if not transactions:\n        frappe.log_error(message=_(\"No transactions found.\"), title=_(\"No Transactions Found\"))\n        return\n\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    if new_transactions:\n        frappe.log_error(\n            message=_(\"{} new transactions added.\").format(len(new_transactions)),\n            title=_(\"New Transactions Added\"),\n        )\n\n    if transactions:\n        last_transaction = transactions[-1]\n        last_integration_date = getdate(last_transaction[\"date\"])\n        bank_account_doc.last_integration_date = last_integration_date\n        bank_account_doc.save()\n\n", "CodeBleu_score": 33.371620697172155}, {"code": "def sync_transactions(bank, bank_account)\n\tlast_integration_date = frappe.db.get_value(\n        \"Bank\", bank, \"last_integration_date\"\n    )\n    if not last_integration_date:\n        last_integration_date = get_first_day(add_months(today(), -1))\n\n    transactions = get_transactions(bank, bank_account, last_integration_date)\n    if not transactions:\n        frappe.log_error(\n            message=_(\"There were no transactions to sync.\"),\n            title=_(\"No Transactions to Sync\"),\n        )\n        return\n\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    if new_transactions:\n        frappe.db.set_value(\n            \"Bank\", bank, \"last_integration_date\", transactions[0][\"date\"]\n        )\n\n    frappe.log_error(\n        message=_(\"{} new transactions added.\").format(len(new_transactions)),\n        title=_(\"Transactions Synced\"),\n    )\n\n", "CodeBleu_score": 33.63805280082444}, {"code": "def sync_transactions(bank, bank_account)\n\tlast_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    if not last_integration_date:\n        last_integration_date = get_last_integration_date(bank_account)\n\n    transactions = get_transactions(bank, bank_account, last_integration_date)\n\n    if transactions:\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if new_transactions:\n            frappe.db.set_value(\n                \"Bank Account\",\n                bank_account,\n                \"last_integration_date\",\n                transactions[-1][\"date\"],\n            )\n\n        frappe.log_error(\n            message=_(\"{0} new transactions added\").format(len(new_transactions)),\n            title=_(\"Plaid Transactions Added\"),\n        )\n\n    else:\n        frappe.log_error(\n            message=_(\"No transactions found\"),\n            title=_(\"Plaid No Transactions Found\"),\n        )\n\n", "CodeBleu_score": 30.11969888243879}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t# Construct the query URI\n    query_uri = self._get_query_uri(entity)\n    # Determine the total number of entries\n    response = self._get(query_uri)\n    total = response.json().get(\"TotalCount\")\n    # Retrieve the entries in batches of 1000\n    for start_position in range(0, total, 1000):\n        # Construct the query URI\n        query_uri = self._get_query_uri(entity, start_position=start_position)\n        # Retrieve the entries\n        response = self._get(query_uri)\n        # Preprocess and save the entries\n        entries = response.json().get(\"QueryResponse\").get(entity)\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 24.844653082221388}, {"code": "def _migrate_entries(self, entity)\n\t# Construct the query URI\n    query_uri = f\"{self.base_uri}/company/{self.company_id}/query\"\n    # Determine the total number of entries\n    total = self._get(\n        query_uri,\n        params={\n            \"query\": f\"SELECT * FROM {entity}\",\n            \"minorversion\": self.minor_version,\n        },\n    ).json()[\"QueryResponse\"][\"totalCount\"]\n    # Retrieve the entries in batches of 1000\n    for index in range(0, total, 1000):\n        # Construct the query URI\n        query_uri = f\"{self.base_uri}/company/{self.company_id}/query\"\n        # Retrieve the entries\n        response = self._get(\n            query_uri,\n            params={\n                \"query\": f\"SELECT * FROM {entity} STARTPOSITION {index} MAXRESULTS 1000\",\n                \"minorversion\": self.minor_version,\n            },\n        )\n        # Preprocess and save the entries\n        self._save_entries(entity, self._preprocess_entries(entity, response.json()[\"QueryResponse\"][\"entity\"]))\n\n", "CodeBleu_score": 34.051469511373014}, {"code": "def _migrate_entries(self, entity)\n\tself._publish({\"event\": \"progress\", \"message\": _(\"Retrieving {0}\").format(entity)})\n    total = 0\n    query_uri = self._get_query_uri(entity)\n    response = self._get(query_uri)\n    total = response.json()[\"TotalCount\"]\n    self._publish(\n        {\"event\": \"progress\", \"message\": _(\"Retrieved {0}\").format(entity), \"total\": total}\n    )\n    for page in range(1, math.ceil(total / 1000) + 1):\n        self._publish(\n            {\n                \"event\": \"progress\",\n                \"message\": _(\"Fetching {0} page {1} of {2}\").format(\n                    entity, page, math.ceil(total / 1000)\n                ),\n            }\n        )\n        response = self._get(query_uri, params={\"page\": page})\n        entries = response.json()[\"QueryResponse\"][entity]\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 34.24340091800725}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\ttry:\n        if invoice[\"DocType\"] == \"Invoice\":\n            self._save_invoice_as_journal_entry(invoice)\n        elif invoice[\"DocType\"] == \"SalesReceipt\":\n            self._save_sales_receipt(invoice)\n        elif invoice[\"DocType\"] == \"CreditMemo\":\n            self._save_credit_memo(invoice)\n        elif invoice[\"DocType\"] == \"Bill\":\n            self._save_bill(invoice)\n        elif invoice[\"DocType\"] == \"Deposit\":\n            self._save_deposit(invoice)\n        elif invoice[\"DocType\"] == \"JournalEntry\":\n            self._save_journal_entry(invoice)\n        elif invoice[\"DocType\"] == \"SalesInvoice\":\n            self._save_sales_invoice(invoice)\n        elif invoice[\"DocType\"] == \"PurchaseInvoice\":\n            self._save_purchase_invoice(invoice)\n        elif invoice[\"DocType\"] == \"PurchaseOrder\":\n            self._save_purchase_order(invoice)\n        elif invoice[\"DocType\"] == \"Estimate\":\n            self._save_estimate(invoice)\n        elif invoice[\"DocType\"] == \"SalesOrder\":\n            self._save_sales_order(invoice)\n        elif invoice[\"DocType\"] == \"TimeSheet\":\n            self._save_time_sheet(invoice)\n        elif invoice[\"DocType\"] == \"Payment\":\n            self._save_payment(invoice)\n        elif invoice[\"DocType\"] == \"BillPayment\":\n            self._save_bill_payment(invoice)\n        elif invoice[\"DocType\"] == \"Bill\":\n            self._save_bill(invoice)\n        elif invoice[\"DocType\"] == \"Account\":\n            self._save_account(invoice)\n        elif invoice[\"DocType\"] == \"Customer\":\n            self._save_customer(invoice)\n        elif invoice[\"DocType\"] == \"Vendor\":\n            self._save_vendor(invoice)\n        elif", "CodeBleu_score": 13.561281721070195}, {"code": "def _save_invoice(self, invoice)\n\ttry:\n        if invoice[\"TxnTaxDetail\"][\"TotalTax\"][\"Amount\"] != 0:\n            self._log_error(\n                \"Invoice has taxes, not saving. Please create a tax rule for this invoice.\",\n                [invoice],\n            )\n            return\n        if invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\":\n            self._save_statement_charge_invoice(invoice)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\":\n            self._save_reimburse_charge_invoice(invoice)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\":\n            self._save_purchase_invoice(invoice)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\":\n            self._save_purchase_invoice(invoice)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n            self._save_sales_invoice(invoice)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n            self._save_sales_invoice(invoice, is_return=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n            self._save_sales_invoice(invoice, is_pos=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n            self._save_sales_invoice(invoice, is_return=True, is_pos=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n            self._save_sales_invoice(invoice, is_return=True, is_pos=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n            self._save_sales_invoice(invoice, is_return=True, is_pos=True)", "CodeBleu_score": 16.250677926403316}, {"code": "def _save_invoice(self, invoice)\n\ttry:\n        if self.general_ledger[\"Invoice\"][invoice[\"Id\"]][\"linked_transactions\"]:\n            self._save_invoice_as_journal_entry(invoice, self.general_ledger[\"Invoice\"][invoice[\"Id\"]][\"quickbooks_id\"])\n        else:\n            self._save_sales_invoice(invoice, self.general_ledger[\"Invoice\"][invoice[\"Id\"]][\"quickbooks_id\"])\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 27.159684541304273}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# Get the number of days between the start and end date\n    no_of_days = (end_date - start_date).days\n\n    # Get the number of days between visits\n    interval = no_of_days / no_of_visit\n\n    # Create a list of dates between the start and end date\n    dates = [start_date + timedelta(days=x) for x in range(0, no_of_days, interval)]\n\n    # Create a list of scheduled dates\n    scheduled_dates = []\n\n    # Iterate through the list of dates and create scheduled dates\n    for date in dates:\n        scheduled_date = self.validate_schedule_date_for_holiday_list(date, sales_person)\n        if scheduled_date:\n            scheduled_dates.append(scheduled_date)\n\n    return scheduled_dates\n\n", "CodeBleu_score": 21.820935154862408}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# Create a list of dates between start and end date\n    # The interval between visits is calculated from the number of visits\n    # The list of dates is adjusted to avoid holidays\n    # The final list of schedule dates is returned\n\n    # Create a list of dates between start and end date\n    dates = [start_date + timedelta(days=i) for i in range((end_date - start_date).days + 1)]\n\n    # The interval between visits is calculated from the number of visits\n    interval = (dates[-1] - dates[0]).days / no_of_visit\n\n    # Iterate to create the schedule\n    schedule_dates = []\n    for i in range(no_of_visit):\n        schedule_dates.append(dates[int(round(i * interval, 0))])\n\n    # Adjust dates to avoid holidays\n    for i, schedule_date in enumerate(schedule_dates):\n        schedule_dates[i] = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n\n    return schedule_dates\n\n", "CodeBleu_score": 28.129477057858267}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\tschedule_list = []\n    visit_interval = self.visit_interval\n\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, visit_interval * i)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 27.084599348029514}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$selectedContacts = $this->getSelectedInput($request);\n\n    $deletedContacts = [];\n    $failedContacts = [];\n\n    foreach ($selectedContacts as $contactId) {\n        try {\n            $contact = $this->model::find($contactId);\n            $contact->delete();\n            $deletedContacts[] = $contact;\n        } catch (Exception $e) {\n            $failedContacts[] = $contactId;\n        }\n    }\n\n    if (count($deletedContacts) > 0) {\n        $this->flashSuccess(trans('contacts.deleted'));\n    }\n\n    if (count($failedContacts) > 0) {\n        $this->flashWarning(trans('contacts.delete_failed'));\n    }\n\n    return $this->redirectTo($request);\n}", "CodeBleu_score": 35.53737407496974}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n    $deleted = 0;\n\n    foreach ($contacts as $contact) {\n        try {\n            $contact->delete();\n            $deleted++;\n        } catch (\\Exception $e) {\n            $this->error($e->getMessage());\n        }\n    }\n\n    if ($deleted > 0) {\n        $this->success(\"Deleted $deleted contacts.\");\n    }\n}", "CodeBleu_score": 58.24440256383519}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    $deleted = 0;\n    $errors = [];\n\n    foreach ($contacts as $contact) {\n        try {\n            $contact->delete();\n            $deleted++;\n        } catch (Exception $e) {\n            $errors[] = $e->getMessage();\n        }\n    }\n\n    if ($deleted > 0) {\n        $this->flash('success', $deleted . ' ' . Str::plural('contact', $deleted) . ' deleted');\n    }\n\n    if (count($errors) > 0) {\n        $this->flash('error', implode('<br>', $errors));\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 49.3937809732697}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request, ['user']);\n\n    try {\n        foreach ($transactions as $transaction) {\n            DeleteTransactionJob::dispatch($transaction);\n        }\n    } catch (\\Exception $e) {\n        $this->flashError($e->getMessage());\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 61.62222020455449}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    $this->deleteTransactions($transactions);\n\n    $this->flashSuccessMessage('transactions.deleted');\n\n    return redirect()->route('transactions.index');\n}", "CodeBleu_score": 34.65286904324936}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $transaction->delete();\n        } catch (\\Exception $e) {\n            $this->flashErrorMessage($e->getMessage());\n        }\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 60.10106495212785}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\tif (method_exists($this, 'prepareRules')) {\n        $rules = $this->prepareRules($this->rules());\n        $validator->setRules($rules);\n    }\n\n    if (method_exists($this, 'prepareForValidation')) {\n        $this->prepareForValidation();\n    }\n\n    if ($this->container && $this->container->bound(FormRequest::class)) {\n        $class = $this->container->make(FormRequest::class);\n\n        if ($class instanceof FormRequest && ! $class->authorize()) {\n            throw new AuthorizationException;\n        }\n\n        if (method_exists($class, 'validationData')) {\n            $data = $class->validationData();\n\n            $this->replace($data);\n        }\n\n        $rules = $class->rules();\n\n        $validator->setRules($rules);\n\n        if (method_exists($class, 'messages')) {\n            $messages = $class->messages();\n\n            $validator->setMessages($messages);\n        }\n\n        if (method_exists($class, 'attributes')) {\n            $attributes = $class->attributes();\n\n            $validator->setAttributeNames($attributes);\n        }\n\n        if (method_exists($class, 'validationAttributes')) {\n            $attributes = $class->validationAttributes();\n\n            $validator->setCustomAttributes($attributes);\n        }\n\n        if (method_exists($class, 'prepareForValidation')) {\n            $class->prepareForValidation();\n        }\n    }\n\n    $validator->setData($this->validationData());\n\n    try {\n        $validator->validate();\n    } catch (ValidationException $e) {\n        $e->validator = $this->getValidatorInstance();\n\n        throw $e;\n    }\n}", "CodeBleu_score": 38.97922244584755}, {"code": "<?\npublic function withValidator($validator){\n\tif (! $this->container->has(static::class)) {\n        return $validator;\n    }\n\n    $request = $this->container->get(static::class);\n\n    if (! $request instanceof FormRequest) {\n        return $validator;\n    }\n\n    $validator->after(function ($validator) use ($request) {\n        $request->setValidator($validator);\n\n        $request->prepareRules($validator->getRules());\n\n        try {\n            $request->validateResolved();\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->errors());\n\n            throw $e;\n        }\n    });\n\n    return $validator;\n}", "CodeBleu_score": 32.979128317587545}, {"code": "<?\npublic function withValidator($validator){\n\t$validator->after(function ($validator) {\n        if ($validator->fails()) {\n            $this->validator = $validator;\n            throw new \\Illuminate\\Validation\\ValidationException($validator);\n        }\n    });\n}", "CodeBleu_score": 17.094930911422814}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this->shouldUpdate()) {\n        $this->setModel($this->getModelInstance($arguments[0] ?? null));\n        $this->setRequest($this->getRequestInstance($arguments[1] ?? null));\n    }\n}", "CodeBleu_score": 20.652493915689753}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (is_null($this->getModelInstance()) && is_null($this->getRequestInstance())) {\n\n        if ($this instanceof ShouldUpdate) {\n\n            if (count($arguments) > 0 && $arguments[0] instanceof Model) {\n\n                $this->setModelInstance($arguments[0]);\n\n            }\n\n            if (count($arguments) > 1 && $arguments[1] instanceof FormRequest) {\n\n                $this->setRequestInstance($arguments[1]);\n\n            }\n\n        }\n\n    }\n\n}", "CodeBleu_score": 29.18039912697582}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this instanceof ShouldUpdate) {\n        $this->model = $this->getModelInstance($arguments[0]);\n        $this->request = $this->getRequestInstance($arguments[1]);\n    }\n}", "CodeBleu_score": 38.955859973173695}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n\n  // Apply search\n  $query = $this->scopeSearch($query);\n\n  // Apply sorting\n  if ($request->has('sort')) {\n   $sort = $request->sort;\n  }\n  $query = $this->scopeSort($query, $sort);\n\n  // Check if the request is expecting a JSON response\n  if ($request->expectsJson() && !$request->is('api/*')) {\n   return $query->get();\n  }\n\n  // Paginate\n  $limit = $request->limit;\n  if ($limit) {\n   return $query->paginate($limit);\n  }\n\n  return $query->paginate(10);\n\n }", "CodeBleu_score": 50.37975354230366}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$sort = $this->getSorting($sort);\n  $query = $query->orderBy($sort['field'], $sort['direction']);\n  $query = $this->search($query);\n  if (request()->expectsJson() && !request()->is('api*')) {\n   return $query->get();\n  }\n  return $query->paginate(request()->get('limit', $this->limit));\n }", "CodeBleu_score": 45.80853145159208}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t// Check if the request expects a JSON response and is not an API request\n    if (request()->wantsJson() && !request()->is('api/*')) {\n        return $query->get();\n    }\n\n    // Get the sorting parameter from the request\n    $sort = request()->sort ? request()->sort : $sort;\n\n    // Apply search to the query\n    $query = $this->scopeSearch($query);\n\n    // Check if the request has a limit parameter\n    if (request()->limit) {\n        return $query->orderBy($sort)->paginate(request()->limit);\n    }\n\n    // Otherwise, return the default pagination limit\n    return $query->orderBy($sort)->paginate(10);\n}", "CodeBleu_score": 42.689393528616094}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n    $overdueAmount = 0;\n    if ($model->status == 'paid') {\n        return array(\n            'openAmount' => 0,\n            'overdueAmount' => 0,\n        );\n    }\n    $totalAmount = $model->amount;\n    if ($model->status == 'partial') {\n        $totalAmount = 0;\n        foreach ($model->transactions as $transaction) {\n            $totalAmount += $transaction->amount;\n        }\n    }\n    if ($model->status == 'open') {\n        $openAmount = $totalAmount;\n    } else {\n        $dueDate = new DateTime($model->due_date);\n        $today = new DateTime();\n        if ($today > $dueDate) {\n            $overdueAmount = $totalAmount;\n        } else {\n            $openAmount = $totalAmount;\n        }\n    }\n    return array(\n        'openAmount' => $openAmount,\n        'overdueAmount' => $overdueAmount,\n    );\n}", "CodeBleu_score": 41.995824183416936}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n\t$overdueAmount = 0;\n\tif ($model->getStatus() == 'paid') {\n\t\treturn array($openAmount, $overdueAmount);\n\t}\n\t$payments = $model->getPayments();\n\t$total = $model->getTotal();\n\t$openAmount = $total;\n\t$overdueAmount = 0;\n\tforeach ($payments as $payment) {\n\t\t$openAmount -= $payment->getAmount();\n\t}\n\tif ($openAmount > 0) {\n\t\t$dueDate = $model->getDueDate();\n\t\t$today = new DateTime();\n\t\t$interval = $today->diff($dueDate);\n\t\t$days = $interval->days;\n\t\tif ($days > 0) {\n\t\t\t$overdueAmount = $openAmount;\n\t\t}\n\t}\n\treturn array($openAmount, $overdueAmount);\n}", "CodeBleu_score": 40.31757373660868}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n\t$overdueAmount = 0;\n\tif ($model->status == 'paid') {\n\t\treturn array(0, 0);\n\t}\n\t$total = $model->total;\n\t$payments = $model->payments;\n\tif ($model->status == 'partial') {\n\t\tforeach ($payments as $payment) {\n\t\t\t$openAmount += $payment->amount;\n\t\t\t$dueDate = new DateTime($payment->due_date);\n\t\t\t$today = new DateTime();\n\t\t\t$diff = $dueDate->diff($today);\n\t\t\t$days = $diff->format('%a');\n\t\t\tif ($days > 0) {\n\t\t\t\t$overdueAmount += $payment->amount;\n\t\t\t}\n\t\t}\n\t}\n\tif ($model->status == 'open') {\n\t\t$openAmount = $total;\n\t\t$dueDate = new DateTime($model->due_date);\n\t\t$today = new DateTime();\n\t\t$diff = $dueDate->diff($today);\n\t\t$days = $diff->format('%a');\n\t\tif ($days > 0) {\n\t\t\t$overdueAmount = $total;\n\t\t}\n\t}\n\treturn array($openAmount, $overdueAmount);\n}", "CodeBleu_score": 43.503959682554935}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: LengthAwarePaginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $paginator = new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => LengthAwarePaginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n\n    $paginator->appends(request()->all());\n\n    return $paginator;\n}", "CodeBleu_score": 72.9390626371355}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: LengthAwarePaginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = $this->forPage($page, $perPage)->get($columns);\n\n    $total = $this->toBase()->getCountForPagination();\n\n    $paginator = new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => LengthAwarePaginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n\n    $paginator->appends(request()->all());\n\n    return $paginator;\n}", "CodeBleu_score": 72.9390626371355}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$perPage = $perPage ?: $this->model->getPerPage();\n\n    $page = $page ?: LengthAwarePaginator::resolveCurrentPage($pageName);\n\n    $total = $this->model->count();\n\n    $results = $this->model->forPage($page, $perPage)->get($columns);\n\n    return new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => LengthAwarePaginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 66.0677892544654}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$this->db->startTransaction();\n\ttry {\n\t\t$reconciliations = $this->getReconciliations($request);\n\t\t$this->processReconciliations($reconciliations);\n\t\t$this->db->commitTransaction();\n\t} catch (Exception $e) {\n\t\t$this->db->rollbackTransaction();\n\t\tthrow $e;\n\t}\n}", "CodeBleu_score": 22.522932426906408}, {"code": "<?\npublic function reconcile($request){\n\t$this->db->trans_start();\n\t$this->db->trans_strict(FALSE);\n\t$this->db->trans_begin();\n\n\t$this->db->select('reconciliations.*, reconciliation_details.id as detail_id, reconciliation_details.account_id, reconciliation_details.transaction_id, reconciliation_details.amount, reconciliation_details.currency_id, reconciliation_details.date');\n\t$this->db->from('reconciliations');\n\t$this->db->join('reconciliation_details', 'reconciliations.id = reconciliation_details.reconciliation_id', 'inner');\n\t$this->db->where('reconciliations.id', $request->reconciliation_id);\n\t$reconciliation = $this->db->get()->row();\n\n\tif (!$reconciliation) {\n\t\tthrow new Exception('Reconciliation not found.');\n\t}\n\n\t$this->db->select('transactions.*, accounts.currency_id');\n\t$this->db->from('transactions');\n\t$this->db->join('accounts', 'transactions.account_id = accounts.id', 'inner');\n\t$this->db->where('transactions.account_id', $reconciliation->account_id);\n\t$this->db->where('transactions.date >=', $reconciliation->date_from);\n\t$this->db->where('transactions.date <=', $reconciliation->date_to);\n\t$transactions = $this->db->get()->result();\n\n\t$transactions_to_reconcile = array();\n\t$transactions_to_reconcile_by_id = array();\n\tforeach ($transactions as $transaction) {\n\t\tif ($transaction->currency_id == $reconciliation->currency_id) {\n\t\t\t$transactions_to_reconcile[] = $transaction;\n\t\t\t$transactions_to_reconcile_by_id[$transaction->id", "CodeBleu_score": 24.399477347119955}, {"code": "<?\npublic function reconcile($request){\n\t// Get the reconciliations\n\t$reconciliations = $this->getReconciliations($request);\n\n\t// Process each reconciliation\n\tforeach ($reconciliations as $reconciliation) {\n\t\t// Get the transactions\n\t\t$transactions = $this->getTransactions($reconciliation);\n\n\t\t// Process each transaction\n\t\tforeach ($transactions as $transaction) {\n\t\t\t// Set the transaction as reconciled\n\t\t\t$transaction->setReconciled(true);\n\n\t\t\t// Save the transaction\n\t\t\t$transaction->save();\n\t\t}\n\n\t\t// Set the reconciliation as reconciled\n\t\t$reconciliation->setStatus(Reconciliation::STATUS_RECONCILED);\n\n\t\t// Save the reconciliation\n\t\t$reconciliation->save();\n\t}\n}", "CodeBleu_score": 36.37163818820757}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t// Get the user's existing invitations.\n    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n\n    // Delete all existing invitations for the user.\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    // Create a new invitation.\n    $invitation = new UserInvitation;\n    $invitation->user_id = $this->user->id;\n    $invitation->token = $this->generateInvitationToken();\n    $invitation->save();\n\n    // Attempt to dispatch a notification job.\n    try {\n        $this->dispatch(new SendInvitationNotification($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception($e->getMessage());\n    }\n\n    // Return the invitation.\n    return $invitation;\n}", "CodeBleu_score": 42.24045700256263}, {"code": "<?\npublic function handle(): UserInvitation{\n\tDB::transaction(function () {\n        // Retrieve the user's existing invitations.\n        $invitations = $this->user->invitations()->get();\n\n        // Delete the user's existing invitations.\n        foreach ($invitations as $invitation) {\n            $invitation->delete();\n        }\n\n        // Create a new invitation.\n        $invitation = $this->user->invitations()->create([\n            'token' => Str::uuid(),\n            'email' => $this->email,\n        ]);\n\n        // Attempt to dispatch a notification job to notify the user.\n        try {\n            Notification::send($invitation, new UserInvitationNotification($invitation));\n        } catch (Exception $e) {\n            throw new Exception($e->getMessage());\n        }\n\n        // Return the newly created invitation.\n        return $invitation;\n    });\n}", "CodeBleu_score": 39.646449328054636}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->validate();\n    $user = $this->getUser();\n    $this->deleteExistingInvitations();\n    $invitation = $this->createInvitation();\n    $this->dispatchNotification($invitation);\n    return $invitation;\n}", "CodeBleu_score": 11.667798993594776}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->reconciled) {\n        throw new Exception(\"Transaction has already been reconciled. Please create a new transaction to reconcile this transaction.\");\n    }\n    if ($this->transfer) {\n        throw new Exception(\"Transfer transactions cannot be reconciled.\");\n    }\n}", "CodeBleu_score": 21.86253510346892}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->isReconciled()) {\n        throw new Exception('This transaction has already been reconciled.');\n    }\n\n    if ($this->isTransferTransaction()) {\n        throw new Exception('This transaction is a transfer transaction.');\n    }\n}", "CodeBleu_score": 27.062073333004445}, {"code": "<?\npublic function authorize(): void{\n\tif (this.reconciled) {\n        throw new Exception(\"This transaction has been reconciled. It cannot be authorized.\");\n    } else if (this.type == \"transfer\") {\n        throw new Exception(\"This transaction is a transfer transaction. It cannot be authorized.\");\n    }\n}", "CodeBleu_score": 17.81498785999529}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"users\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenants\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenants_users\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenants_users_roles\")) {\n    return true;\n  }\n  if (tableName.equals(\"roles\")) {\n    return true;\n  }\n  if (tableName.equals(\"roles_permissions\")) {\n    return true;\n  }\n  if (tableName.equals(\"permissions\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenant_permissions\")) {\n    return true;\n  }\n  if (tableName.equals(\"users_permissions\")) {\n    return true;\n  }\n  if (tableName.equals(\"users_tenants\")) {\n    return true;\n  }\n  if (tableName.equals(\"users_roles\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenants_roles\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenants_users_roles\")) {\n    return true;\n  }\n  if (tableName.equals(\"roles_permissions\")) {\n    return true;\n  }\n  if (tableName.equals(\"permissions\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenant_permissions\")) {\n    return true;\n  }\n  if (tableName.equals(\"users_permissions\")) {\n    return true;\n  }\n  if (tableName.equals(\"users_tenants\")) {\n    return true;\n  }\n  if (tableName.equals(\"users_roles\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenants_roles\")) {\n    return true;\n  }\n  if (tableName.equals(\"tenants_users_roles\")) {\n    return true;\n  }\n  if (tableName.equals(\"roles_permissions\")) {\n    return true;\n  }", "CodeBleu_score": 15.488543585934684}, {"code": "public boolean doTableFilter(String tableName){\n\t// Get the tenant ID from the access token\n    String tenantId = getTenantId();\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (tenantId != null && !tenantId.equals(\"0\")) {\n        if (tableName.equals(\"user\") || tableName.equals(\"tenant\") || tableName.equals(\"role\") || tableName.equals(\"tenant_role\") || tableName.equals(\"role_permission\") || tableName.equals(\"permission\") || tableName.equals(\"user_role\") || tableName.equals(\"user_tenant\") || tableName.equals(\"tenant_user\") || tableName.equals(\"tenant_tenant\") || tableName.equals(\"role_tenant\") || tableName.equals(\"role_user\") || tableName.equals(\"tenant_role_tenant\") || tableName.equals(\"tenant_role_user\") || tableName.equals(\"tenant_role_role\") || tableName.equals(\"user_role_role\") || tableName.equals(\"user_role_tenant\") || tableName.equals(\"user_role_user\") || tableName.equals(\"user_tenant_tenant\") || tableName.equals(\"user_tenant_user\") || tableName.equals(\"user_tenant_role\") || tableName.equals(\"role_tenant_tenant\") || tableName.equals(\"role_tenant_user\") || tableName.equals(\"role_tenant_role\") || tableName.equals(\"role_user_role\") || tableName.equals(\"role_user_tenant\") || tableName.equals(\"role_user_user\") || tableName.equals(\"role_permission_role\") || tableName.equals(\"role_permission_tenant\") || tableName.equals(\"role_permission_user\") || tableName.equals(\"permission_role\") || tableName.equals(\"permission_tenant\") || tableName.equals(\"permission_user\") || tableName.equals(\"user_permission\") || tableName.equals(\"user_permission_role\") || tableName.equals(\"user_permission_tenant\") || tableName.equals(\"user_permission_user\") || tableName.equals(\"tenant_permission\") || tableName.equals(\"", "CodeBleu_score": 11.874691769045821}, {"code": "public boolean doTableFilter(String tableName){\n\tif (request.getAccessToken() == null) {\n    return false;\n  }\n  var token = request.getAccessToken();\n  var tenantId = token.getTenantId();\n  if (tenantId == 0) {\n    return false;\n  }\n  var permittedTables = new HashSet<String>();\n  permittedTables.add(\"Tenant\");\n  permittedTables.add(\"User\");\n  permittedTables.add(\"UserRole\");\n  permittedTables.add(\"Role\");\n  permittedTables.add(\"RolePermission\");\n  permittedTables.add(\"Permission\");\n  permittedTables.add(\"TenantUser\");\n  permittedTables.add(\"TenantRole\");\n  permittedTables.add(\"TenantPermission\");\n  permittedTables.add(\"TenantUserRole\");\n  permittedTables.add(\"TenantRolePermission\");\n  permittedTables.add(\"TenantPermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUserRolePermission\");\n  permittedTables.add(\"TenantUser", "CodeBleu_score": 21.760956178114576}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.01345939450465}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2261177705181}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.01358572267596}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.01358572267596}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n        // Get the system configuration list\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\n        // Check if the list is not empty\n        if (!systemConfigList.isEmpty()) {\n            // Set the response code to 200\n            response.setResponseCode(200);\n\n            // Set the response data to the first item in the list\n            response.setResponseData(systemConfigList.get(0));\n        } else {\n            // Set the response code to 404\n            response.setResponseCode(404);\n\n            // Set the response message to \"Not Found\"\n            response.setResponseMessage(\"Not Found\");\n        }\n    } catch (Exception e) {\n        // Log the exception\n        logger.error(e.getMessage(), e);\n\n        // Set the response code to 500\n        response.setResponseCode(500);\n\n        // Set the response message to \"Internal Server Error\"\n        response.setResponseMessage(\"Internal Server Error\");\n    }\n\n    // Return the response object\n    return response;\n}", "CodeBleu_score": 36.12349204874226}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfigurationInfo> list = getSystemConfigurationList(request);\n\t\tif (list != null && list.size() > 0) {\n\t\t\tresponse.setResponseCode(ResponseCode.SUCCESS.getCode());\n\t\t\tresponse.setData(list.get(0));\n\t\t} else {\n\t\t\tresponse.setResponseCode(ResponseCode.NO_DATA.getCode());\n\t\t}\n\t} catch (Exception ex) {\n\t\tresponse.setResponseCode(ResponseCode.ERROR.getCode());\n\t\tresponse.setErrorMessage(ex.getMessage());\n\t\tLOGGER.error(ex.getMessage(), ex);\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.571966361643014}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t// Initialize the response object\n\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setCode(500);\n\n\t// Attempt to retrieve the system configuration list\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList != null && systemConfigList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setData(e.getMessage());\n\t}\n\n\treturn response;\n\n}", "CodeBleu_score": 36.6377773508664}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        String filePath = request.getParameter(\"filePath\");\n        String fileName = request.getParameter(\"fileName\");\n        String fileType = request.getParameter(\"fileType\");\n        String fileSize = request.getParameter(\"fileSize\");\n        String file = request.getParameter(\"file\");\n        String fileUrl = request.getParameter(\"fileUrl\");\n        String fileUrlType = request.getParameter(\"fileUrlType\");\n        String fileUrlSize = request.getParameter(\"fileUrlSize\");\n        String fileUrlName = request.getParameter(\"fileUrlName\");\n        String fileUrlContentType = request.getParameter(\"fileUrlContentType\");\n        String fileUrlFileSize = request.getParameter(\"fileUrlFileSize\");\n        String fileUrlFileType = request.getParameter(\"fileUrlFileType\");\n        String fileUrlFilePath = request.getParameter(\"fileUrlFilePath\");\n        String fileUrlFileBusinessPath = request.getParameter(\"fileUrlFileBusinessPath\");\n        String fileUrlFileUuid = request.getParameter(\"fileUrlFileUuid\");\n        String fileUrlFileUploadTime = request.getParameter(\"fileUrlFileUploadTime\");\n        String fileUrlFileUploadUser = request.getParameter(\"fileUrlFileUploadUser\");\n        String fileUrlFileUploadUserName = request.getParameter(\"fileUrlFileUploadUserName\");\n        String fileUrlFileUploadUserId = request.getParameter(\"fileUrlFileUploadUserId\");\n        String fileUrlFileUploadUserType = request.getParameter(\"fileUrlFileUploadUserType\");\n        String fileUrlFileUploadUserTypeName = request.getParameter(\"fileUrlFileUploadUserTypeName\");\n        String fileUrlFileUploadUserTypeCode = request.getParameter(\"fileUrlFileUploadUserTypeCode\");\n        String fileUrlFileUploadUserTypeIcon = request.getParameter(\"fileUrlFileUploadUserTypeIcon\");\n        String fileUrlFileUploadUserTypeSort = request.getParameter(\"fileUrlFileUploadUserTypeSort\");\n        String fileUrlFileUploadUserTypeDescription = request.getParameter(\"fileUrlFileUploadUserTypeDescription\");\n        String fileUrlFileUploadUserTypeCreateTime = request.get", "CodeBleu_score": 22.102590929978362}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n    try {\n        // Get the file upload type from the request\n        String fileUploadType = request.getParameter(\"fileUploadType\");\n        // Get the business path from the request\n        String businessPath = request.getParameter(\"businessPath\");\n        // Get the file from the request\n        MultipartFile file = request.getFile(\"file\");\n        // Check that the file upload type, business path and file are not null\n        if (fileUploadType != null && businessPath != null && file != null) {\n            // Check that the file upload type is one of the allowed types\n            if (fileUploadType.equals(\"local\") || fileUploadType.equals(\"alioss\")) {\n                // Check that the file is not empty\n                if (!file.isEmpty()) {\n                    // Get the file name\n                    String fileName = file.getOriginalFilename();\n                    // Get the file extension\n                    String fileExtension = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n                    // Check that the file extension is one of the allowed types\n                    if (fileExtension.equals(\"jpg\") || fileExtension.equals(\"jpeg\") || fileExtension.equals(\"png\") || fileExtension.equals(\"pdf\") || fileExtension.equals(\"doc\") || fileExtension.equals(\"docx\") || fileExtension.equals(\"xls\") || fileExtension.equals(\"xlsx\")) {\n                        // Check that the file upload type is local\n                        if (fileUploadType.equals(\"local\")) {\n                            // Save the file locally\n                            String filePath = fileUploadService.saveFile(file, businessPath, fileName);\n                            // Set the response code to 200 and the response data to the file path\n                            responseInfo.setCode(200);\n                            responseInfo.setData(filePath);\n                        } else {\n                            // Save the file to AliOss\n                            String filePath = fileUploadService.saveFileToAliOss(file, businessPath, fileName);\n                            // Set the response code to 200 and the response data to the file path\n                            responseInfo.setCode(200);\n                            responseInfo.setData(filePath);", "CodeBleu_score": 32.275069196203546}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tString businessPath = request.getParameter(\"businessPath\");\n    String fileName = request.getParameter(\"fileName\");\n    String fileType = request.getParameter(\"fileType\");\n    String fileSize = request.getParameter(\"fileSize\");\n    String fileMD5 = request.getParameter(\"fileMD5\");\n    String fileSHA1 = request.getParameter(\"fileSHA1\");\n    String fileSHA256 = request.getParameter(\"fileSHA256\");\n    String fileSHA512 = request.getParameter(\"fileSHA512\");\n    String filePath = request.getParameter(\"filePath\");\n    String fileUrl = request.getParameter(\"fileUrl\");\n    String fileStorage = request.getParameter(\"fileStorage\");\n    String fileUploadId = request.getParameter(\"fileUploadId\");\n    String fileUploadType = request.getParameter(\"fileUploadType\");\n    String fileUploadStatus = request.getParameter(\"fileUploadStatus\");\n    String fileUploadError = request.getParameter(\"fileUploadError\");\n    String fileUploadErrorMessage = request.getParameter(\"fileUploadErrorMessage\");\n    String fileUploadErrorStackTrace = request.getParameter(\"fileUploadErrorStackTrace\");\n    String fileUploadErrorTime = request.getParameter(\"fileUploadErrorTime\");\n    String fileUploadTime = request.getParameter(\"fileUploadTime\");\n    String fileUploadUserId = request.getParameter(\"fileUploadUserId\");\n    String fileUploadUserName = request.getParameter(\"fileUploadUserName\");\n    String fileUploadUserEmail = request.getParameter(\"fileUploadUserEmail\");\n    String fileUploadUserLocale = request.getParameter(\"fileUploadUserLocale\");\n    String fileUploadUserTimeZone = request.getParameter(\"fileUploadUserTimeZone\");\n    String fileUploadUserIpAddress = request.getParameter(\"fileUploadUserIpAddress\");\n    String fileUploadUserAgent = request.getParameter(\"fileUploadUserAgent\");\n    String fileUploadUserHost = request.getParameter(\"fileUploadUserHost\");\n    String fileUploadUserBrowser = request.getParameter(\"fileUploadUserBrowser\");\n    String fileUploadUserPlatform = request.getParameter(\"fileUploadUserPlatform\");\n    String fileUploadUserVersion = request.getParameter(\"fileUploadUserVersion\");\n    String fileUploadUser", "CodeBleu_score": 16.019942197143298}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result=0;\n    try{\n        String name = obj.getString(\"name\");\n        String serialNo = obj.getString(\"serialNo\");\n        String type = obj.getString(\"type\");\n        String remark = obj.getString(\"remark\");\n        String isDefault = obj.getString(\"isDefault\");\n        String isSystem = obj.getString(\"isSystem\");\n        String isDelete = obj.getString(\"isDelete\");\n        String operator = obj.getString(\"operator\");\n        String token = obj.getString(\"token\");\n        //Get the account type based on the type.\n        AccountType accountType = accountTypeService.getAccountTypeByType(type);\n        if(accountType==null) {\n            accountType = new AccountType();\n            accountType.setType(type);\n            accountType.setRemark(type);\n            accountType.setCreateTime(new Date());\n            accountType.setDeleteFlag(0);\n            accountType.setCreateUser(operator);\n            accountType.setUpdateUser(operator);\n            accountType.setCreateUser(operator);\n            accountType.setUpdateUser(operator);\n            accountType.setDeleteFlag(0);\n            accountType.setId(UUID.randomUUID().toString());\n            accountType.setCreateTime(new Date());\n            accountType.setUpdateTime(new Date());\n            accountTypeService.saveAccountType(accountType);\n        }\n        Account account = new Account();\n        account.setName(name);\n        account.setSerialNo(serialNo);\n        account.setType(type);\n        account.setTypeId(accountType.getId());\n        account.setRemark(remark);\n        account.setIsDefault(isDefault);\n        account.setIsSystem(isSystem);\n        account.setIsDelete(isDelete);\n        account.setOperator(operator);\n        account.setToken(token);\n        account.setCreateTime(new Date());\n        account.setUpdateTime(new Date());\n        account.setDeleteFlag(0);\n        account.setId(UUID.randomUUID().toString());\n        account.setCreateUser(operator);\n        account.setUpdateUser(operator);\n        account.setCreateTime(new", "CodeBleu_score": 26.41069189332016}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result=0;\n    try{\n        Account account = setAccount(obj);\n        result = accountMapper.insertSelective(account);\n        // \u5982\u679c\u6709\u9ed8\u8ba4\u8d26\u6237\uff0c\u5219\u8bbe\u7f6e\u4e3a\u9ed8\u8ba4\u8d26\u6237\n        if(result>0){\n            // \u83b7\u53d6\u5f53\u524d\u767b\u5f55\u7684\u7528\u6237\u4fe1\u606f\n            User user = (User) request.getSession().getAttribute(\"user\");\n            // \u83b7\u53d6\u6240\u6709\u7684\u8d26\u6237\u4fe1\u606f\n            List<Account> accountList = getAccountByParam(\"\", \"\");\n            // \u5982\u679c\u5f53\u524d\u8d26\u6237\u4e3a\u9ed8\u8ba4\u8d26\u6237\uff0c\u5219\u66f4\u65b0\u5176\u4ed6\u8d26\u6237\u7684\u9ed8\u8ba4\u8d26\u6237\n            if(account.getIsDefault()==1){\n                for(Account acc : accountList){\n                    if(acc.getId()!=account.getId()){\n                        acc.setIsDefault(0);\n                        accountMapper.updateByPrimaryKeySelective(acc);\n                    }\n                }\n            }\n            // \u5982\u679c\u5f53\u524d\u8d26\u6237\u4e0d\u4e3a\u9ed8\u8ba4\u8d26\u6237\uff0c\u5219\u5224\u65ad\u662f\u5426\u6709\u9ed8\u8ba4\u8d26\u6237\n            if(account.getIsDefault()==0){\n                for(Account acc : accountList){\n                    if(acc.getIsDefault()==1){\n                        account.setIsDefault(1);\n                        accountMapper.updateByPrimaryKeySelective(account);\n                        break;\n                    }\n                }\n            }\n        }\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 44.812116294678596}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result=0;\n        try{\n            Account account=new Account();\n            account.setId(UUID.randomUUID().toString());\n            account.setCreateTime(new Date());\n            account.setDeleteFlag(0);\n            account.setEnabled(true);\n            account.setAccountType(obj.getString(\"accountType\"));\n            account.setName(obj.getString(\"name\"));\n            account.setSerialNo(obj.getString(\"serialNo\"));\n            account.setDescription(obj.getString(\"description\"));\n            account.setCreateTime(new Date());\n            account.setUpdateTime(new Date());\n            account.setCreateId(JshException.getUserId(request));\n            account.setUpdateId(JshException.getUserId(request));\n            account.setRemark(obj.getString(\"remark\"));\n            account.setBeginBalance(new BigDecimal(obj.getString(\"beginBalance\")));\n            account.setLastBalance(new BigDecimal(obj.getString(\"lastBalance\")));\n            account.setLastTime(new Date());\n            account.setLastOperatorId(JshException.getUserId(request));\n            account.setLastRemark(obj.getString(\"lastRemark\"));\n            account.setLastOperatorTime(new Date());\n            account.setAccountStatus(obj.getString(\"accountStatus\"));\n            account.setAccountStatusTime(new Date());\n            account.setAccountStatusOperatorId(JshException.getUserId(request));\n            account.setAccountStatusRemark(obj.getString(\"accountStatusRemark\"));\n            account.setAccountStatusOperatorTime(new Date());\n            account.setAccountStatusOperatorName(JshException.getUserName(request));\n            account.setAccountStatusOperatorTime(new Date());\n            account.setAccountStatusOperatorName(JshException.getUserName(request));\n            account.setDefaultAccount(obj.getString(\"defaultAccount\"));\n            account.setDefaultAccountTime(new Date());\n            account.setDefaultAccountOperatorId(JshException.getUserId(request));\n            account.setDefaultAccountOperatorName(JshException.getUserName(request));\n            account.setDefaultAccountOperatorTime(new Date());\n            account.setDefaultAccountOperator", "CodeBleu_score": 23.776123282906596}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(e);\n        return null;\n    }\n}", "CodeBleu_score": 30.056676349037826}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Exception occurred while getting the count of accounts with the specified name and serial number.\", e);\n        return null;\n    }\n}", "CodeBleu_score": 29.4434924866197}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        LOGGER.error(\"Exception occurred while getting the count of accounts with the specified name and serial number: \" + e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 28.349563041172964}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\ttry {\n\t\treturn depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t\tthrow new Exception(e.getMessage());\n\t}\n}", "CodeBleu_score": 29.46883892587277}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n    try {\n        result = depotItemMapper.deleteDepotItem(id);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        throw new Exception(\"Error deleting depot item with ID \" + id, e);\n    }\n    return result;\n}", "CodeBleu_score": 59.56009264633651}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = -1;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error occurred while attempting to delete depot item with ID \" + id + \" from the database.\", e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 51.21108510776236}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\tString url = null;\n\t\tString key = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\turl = String.format(\"%s://%s:%s/api/v1/projects/%s/nodes\",\n\t\t\t\t\tgetProtocol(), getHost(), getPort(),\n\t\t\t\t\twithProjectName(projectName));\n\t\t\tHttpPost httpPost = new HttpPost(url);\n\t\t\thttpPost.setHeader(\"Content-Type\", \"application/json\");\n\t\t\thttpPost.setHeader(\"Accept\", \"application/json\");\n\t\t\tString json = String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"key\\\":\\\"%s\\\"}\", nodeType, nodeKey);\n\t\t\thttpPost.setEntity(new StringEntity(json));\n\t\t\thttpResponse = httpClient.execute(httpPost);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString response = EntityUtils.toString(entity);\n\t\t\t\tJsonNode node = new ObjectMapper().readTree(response);\n\t\t\t\tkey = node.get(\"key\").asText();\n\t\t\t\tSystem.out.println(key);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn key != null;\n\t}", "CodeBleu_score": 52.56838905334392}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tString url = this.host + this.port + this.withProjectName(projectName) + \"nodes/\" + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpGet.addHeader(\"Authorization\", \"Basic \" + this.getBasicAuth());\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tthis.close(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 40.19472538385512}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = host +        getPort() +        withProjectName(projectName) +        nodeType +        \"/\" + nodeKey;\n\t\t\tHttpGet get = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(get);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() != 200) {\n\t\t\t\tSystem.out.println(\"Failed to add node to project \" + projectName);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tif (response.contains(nodeKey)) {\n\t\t\t\tSystem.out.println(\"Successfully added node \" + nodeKey + \" to project \" + projectName);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tSystem.out.println(\"Failed to add node to project \" + projectName);\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 48.647011140669846}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = this.host + \"/\" + this.getProjectName(projectName) + this.getEdgeType(edgeType) + this.getFromType(fromType) + this.getToType(toType) + this.getFrom(from) + this.getTo(to);\n\t\t\tHttpGet request = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(request);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tJSONObject responseJSON = new JSONObject(responseString);\n\t\t\treturn responseJSON.has(\"key\");\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tthis.close(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 49.230930464522984}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = this.host + \"/\" + this.withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n\t\t\tHttpGet request = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(request);\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() != 200) {\n\t\t\t\tthrow new RuntimeException(\"Failed : HTTP error code : \"\n\t\t\t\t\t\t+ httpResponse.getStatusLine().getStatusCode() + \" for URL \" + url);\n\t\t\t}\n\t\t\tJSONObject json = new JSONObject(response);\n\t\t\treturn json.has(\"key\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tthis.close(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 48.768329250900976}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString endpoint = withProjectName(projectName) + \"edges\";\n\t\t\tHttpGet request = new HttpGet(endpoint);\n\t\t\trequest.setHeader(\"Content-type\", \"application/json\");\n\t\t\trequest.setHeader(\"Accept\", \"application/json\");\n\t\t\trequest.setHeader(\"X-Auth-Token\", token);\n\t\t\trequest.setHeader(\"X-From-App-ID\", appId);\n\t\t\trequest.setHeader(\"X-From-App-Version\", appVersion);\n\t\t\tString urlParameters = \"?fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to + \"&edgeType=\" + edgeType;\n\t\t\trequest.setURI(new URI(request.getURI().toString() + urlParameters));\n\t\t\thttpResponse = httpClient.execute(request);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString result = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tif (result.contains(\"\\\"key\\\"\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 48.358934723850425}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event != null && event.getMessage() != null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setEventTime(LocalDateTime.now());\n\t\tString eventJson = event.toJSON();\n\t\tif (event.getTarget() != null) {\n\t\t\tproducer.send(new ProducerRecord<String, String>(event.getTarget(), eventJson));\n\t\t} else {\n\t\t\tproducer.send(new ProducerRecord<String, String>(\"test\", eventJson));\n\t\t}\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 28.13287810888313}, {"code": "public void sendEvent(Event event){\n\tif(event != null && event.getMessage() != null) {\n\t\tif(event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setEventTime(System.currentTimeMillis());\n\t\tString jsonString = gson.toJson(event);\n\t\tProducerRecord<String, String> record;\n\t\tif(event.getTarget() != null) {\n\t\t\trecord = new ProducerRecord<String, String>(event.getTarget(), jsonString);\n\t\t}\n\t\telse {\n\t\t\trecord = new ProducerRecord<String, String>(\"test\", jsonString);\n\t\t}\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 36.40358082393198}, {"code": "public void sendEvent(Event event){\n\tif(event!=null && event.getMessage()!=null){\n\t\tif(event.getLocation()==null){\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setEventTime(Instant.now());\n\t\tString eventAsJSON = gson.toJson(event);\n\t\tProducerRecord<String, String> record;\n\t\tif(event.getTarget()!=null){\n\t\t\trecord = new ProducerRecord<String, String>(event.getTarget(), eventAsJSON);\n\t\t}\n\t\telse{\n\t\t\trecord = new ProducerRecord<String, String>(\"test\", eventAsJSON);\n\t\t}\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 34.46685662905203}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t// 1. Construct an OSS client\n        OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        // 2. Upload an object\n        try {\n            ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        // 3. Shut down the OSS client\n        ossClient.shutdown();\n        // 4. Return the URL of the uploaded object\n        return config.getEndpoint() + \"/\" + config.getBucketName() + \"/\" + objName;\n    }", "CodeBleu_score": 38.50286172709725}, {"code": "public String upload(String objName, byte[] content){\n\t// Construct an OSS client instance.\n        OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n        // Upload the file.\n        ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n        // Shut down the OSS client.\n        ossClient.shutdown();\n        // Return the URL of the uploaded object.\n        return ossClient.getEndpoint() + \"/\" + bucketName + \"/\" + objName;\n    }", "CodeBleu_score": 31.527617015825648}, {"code": "public String upload(String objName, byte[] content){\n\tString endpoint = config.getEndpoint();\n    String accessKeyId = config.getAccessKeyId();\n    String accessKeySecret = config.getAccessKeySecret();\n    String bucketName = config.getBucketName();\n\n    // Creates an OSSClient instance.\n    OSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n    // Creates an OSS object.\n    OSSObject ossObject = new OSSObject();\n    ossObject.setBucketName(bucketName);\n    ossObject.setObjectName(objName);\n    ossObject.setObjectContent(new ByteArrayInputStream(content));\n\n    // Uploads the object to the OSS bucket.\n    ossClient.putObject(ossObject);\n\n    // Shuts down the OSS client.\n    ossClient.shutdown();\n\n    // Returns the URL of the uploaded object.\n    return ossObject.getObjectURL();\n}", "CodeBleu_score": 37.1428619554304}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tensureIpToLocationWorker();\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.getLocationInfoByIP(ipAddress);\n    }", "CodeBleu_score": 30.794572543326325}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.getLocationInfoByIP(ipAddress);\n    }", "CodeBleu_score": 28.167816076823183}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return getLocationInfoByIP(ipAddress);\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 28.907308206489606}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient == null || highLevelClient == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tif (lowLevelClient == null || highLevelClient == null) {\n\t\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\t\tlowLevelClient = new RestClient(hosts);\n\t\t\t\t\thighLevelClient = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[0])));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 51.97672990037792}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (restClient != null && restClient.isPresent() && restClientLowLevel != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (restClient != null && restClient.isPresent() && restClientLowLevel != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\trestClient = Optional.of(RestClient.builder(hosts.toArray(new HttpHost[0])).build());\n\t\t\trestClientLowLevel = restClient.get().getLowLevelClient();\n\t\t}\n\t}", "CodeBleu_score": 62.947405427378186}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tlowLevelClient = new RestClient(hosts);\n\t\t\thighLevelClient = new RestHighLevelClient(RestClientBuilder.", "CodeBleu_score": 49.35628622533252}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] hostPort = host.split(\":\");\n            host = hostPort[0];\n            port = Integer.parseInt(hostPort[1]);\n        }\n        HttpHost httpHost = new HttpHost(host, port, \"http\");\n        hosts.add(httpHost);\n    }\n    return hosts;\n}", "CodeBleu_score": 40.79654904328996}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] parts = host.split(\":\");\n        String hostname = parts[0];\n        int port = clusterPort;\n        if (parts.length == 2) {\n            port = Integer.parseInt(parts[1]);\n        }\n        HttpHost httpHost = new HttpHost(hostname, port, \"http\");\n        hosts.add(httpHost);\n    }\n    return hosts;\n}", "CodeBleu_score": 41.08557277126931}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostPort = host.split(\":\");\n\t\tif (hostPort.length > 1) {\n\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(hostPort[0], clusterPort, \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.34508289651041}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\ttry {\n\t\t\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task == null) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tswitch (task.getType()) {\n\t\t\t\tcase PLAIN_TEXT:\n\t\t\t\t\ttry {\n\t\t\t\t\t\tsendPlainTextMessage(task.getToNumber(), task.getMessage());\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tlogger.error(\"SMS send failed: \" + e.getMessage());\n\t\t\t\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\t\t\t\tString messageContent = String.format(\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r", "CodeBleu_score": 21.616338771828687}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\ttry {\n\t\t\t\tString taskId = this.getTaskQueue().poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (taskId != null) {\n\t\t\t\t\tTask task = this.getTaskManager().getTask(taskId);\n\t\t\t\t\tif (task != null) {\n\t\t\t\t\t\tif (task.getType() == Task.TYPE_PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\t\t\t\tthis.sendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t\t\tthis.getTaskManager().completeTask(taskId);\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\tthis.getTaskManager().failTask(taskId, e.getMessage());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.getTaskManager().failTask(taskId, \"Unsupported task type: \" + task.getType());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 32.525332456527195}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\ttry {\n\t\t\t\tTask task = queue.poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\tswitch (task.getType()) {\n\t\t\t\t\tcase PLAIN_TEXT_MESSAGE:\n\t\t\t\t\t\tsendPlainTextMessage(task.getToNumber(), task.getMessage());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tlogger.error(\"Unsupported task type: \" + task.getType());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Error sending message\", e);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 17.8397868850633}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tCloseableHttpResponse response = null;\n\t\tString responseString = null;\n\t\ttry {\n\t\t\tHttpGet httpget = new HttpGet(uri);\n\t\t\thttpget.setHeader(\"Accept\", \"application/xml\");\n\t\t\tresponse = httpclient.execute(httpget);\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tresponseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t\tlog.info(responseString);\n\t\t\t}\n\t\t} finally {\n\t\t\tif (response != null) {\n\t\t\t\ttry {\n\t\t\t\t\tresponse.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (httpclient != null) {\n\t\t\t\ttry {\n\t\t\t\t\thttpclient.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn responseString;\n\t}", "CodeBleu_score": 47.779686422473326}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = getHttpClient().execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString xml = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t\tlog.debug(\"Response content: \" + xml);\n\t\t\t\treturn xml;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 50.6250714219003}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString xml = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t\tlog.info(xml);\n\t\t\t\treturn xml;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 62.529971181910085}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t// \u521b\u5efa\u4e00\u4e2aDocumentBuilderFactory\u7684\u5b9e\u4f8b\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t// \u901a\u8fc7DocumentBuilderFactory\u7684\u5b9e\u4f8b\u5316\u65b9\u6cd5\u83b7\u5f97DocumentBuilder\u5b9e\u4f8b\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t// \u901a\u8fc7DocumentBuilder\u5b9e\u4f8b\u5316\u65b9\u6cd5\u89e3\u6790\u8f93\u5165\u7684XML\u5b57\u7b26\u4e32\n\tDocument document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\t// \u83b7\u5f97\u6839\u8282\u70b9\n\tNode root = document.getFirstChild();\n\t// \u83b7\u5f97\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\n\tNodeList childNodes = root.getChildNodes();\n\t// \u5c06\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u8f6c\u6362\u6210Map\n\tObject[] rootNode = decodeNodeToMap(root, doTrim);\n\tif (rootNode == null || rootNode.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> rootMap = new HashMap<String, Object>();\n\trootMap.put(rootNode[0].toString(), rootNode[1]);\n\t// \u5c06\u6839\u8282\u70b9\u7684\u5b50\u8282\u70b9\u8f6c\u6362\u6210Map\n\tfor (int i = 0; i < childNodes.getLength(); i++) {\n\t\tNode childNode = childNodes.item(i);\n\t\tObject[] childValue = decodeNodeToMap(childNode, doTrim);\n\t\tif (childValue == null || childValue.length < 2){\n\t\t\tcontinue;\n\t\t}\n\t\tString key = (String) childValue[0];\n\t\tif (TEXT.equals(key)){\n\t\t\tString oldValue = (String) rootMap.get(key);\n\t\t\tif (StringUtils.isBlank(oldValue)){\n\t\t\t\trootMap.put(key, childValue[1]);\n\t\t\t}else{\n\t\t\t\trootMap.put(key, oldValue+\"\\r", "CodeBleu_score": 55.47638057882198}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(UTF8)));\n\tNode root = doc.getFirstChild();\n\tif (root == null){\n\t\treturn null;\n\t}\n\tObject[] rootNode = decodeNodeToMap(root, doTrim);\n\tif (rootNode == null || rootNode.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootNode[0].toString(), rootNode[1]);\n\treturn result;\n}", "CodeBleu_score": 67.16874583253056}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t// \u521b\u5efa\u4e00\u4e2abuilder\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t// \u5c06\u5b57\u7b26\u4e32\u8f6c\u4e3aDocument\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\t// \u83b7\u53d6\u6839\u8282\u70b9\n\tNode root = document.getFirstChild();\n\t// \u9012\u5f52\u89e3\u6790\u6839\u8282\u70b9\n\tObject[] rootValue = decodeNodeToMap(root, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\t// \u6839\u8282\u70b9\u7684\u503c\u662f\u4e00\u4e2amap\n\tMap<String, Object> rootMap = (Map<String, Object>) rootValue[1];\n\treturn rootMap;\n}", "CodeBleu_score": 57.97762226506236}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tfinal String transactionName = isEligibleForAutoProcessing ? \"C_Order_AutoProcessing\" : \"C_Order_MissingSchedules\";\n\n\tfinal String logMessage = \"Enqueuing order \" + orderRecord.getDocumentNo() + \" for \" + transactionName;\n\tlogger.info(logMessage);\n\n\tfinal String trxName = ITrx.TRXNAME_ThreadInherited;\n\tfinal I_C_Async_Batch asyncBatch = asyncBatchBL.getAsyncBatchById(AsyncBatchId.ofRepoIdOrNull(orderRecord.getC_Async_Batch_ID()));\n\tfinal I_C_Async_Batch_Type asyncBatchType = asyncBatchBL.getAsyncBatchTypeById(asyncBatch.getC_Async_Batch_Type_ID());\n\tfinal String asyncBatchTypeName = asyncBatchType.getName();\n\n\tfinal I_C_Async_Batch_Type_Queue asyncBatchTypeQueue = asyncBatchBL.getAsyncBatchTypeQueueById(asyncBatchType.getC_Async_Batch_Type_Queue_ID());\n\tfinal String asyncBatchTypeQueueName = asyncBatchTypeQueue.getName();\n\n\tfinal I_C_Async_Batch_Type_Node asyncBatchTypeNode = asyncBatchBL.getAsyncBatchTypeNodeById(asyncBatchTypeQueue.getC_Async_Batch_Type_Node_ID());\n\tfinal String asyncBatchTypeNodeName = asyncBatchTypeNode.getName();\n\n\tfinal I_C_Async_Batch_Type_Node_Workflow asyncBatchTypeNodeWorkflow = asyncBatchBL.getAsyncBatchTypeNodeWorkflowById(asyncBatchTypeNode.getC_Async_Batch_Type_Node_Workflow_ID());\n\tfinal String asyncBatchTypeNodeWorkflowName = asyncBatchTypeNodeWorkflow.getName();\n\n\tfinal I_C_Async_Batch_Type_Workflow asyncBatchTypeWorkflow = asyncBatchBL.getAsyncBatchTypeWorkflowById(asyncBatchType.getC_Async_Batch_Type_Workflow_ID());\n\tfinal String asyncBatchTypeWorkflowName = asyncBatchTypeWorkflow.getName();\n\n\tfinal I_C", "CodeBleu_score": 33.30099854819879}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\treturn;\n\t}\n\n\tfinal String trxName = InterfaceWrapperHelper.getTrxName(orderRecord);\n\tfinal I_C_Async_Batch asyncBatch = asyncBatchBL.getAsyncBatchById(AsyncBatchId.ofRepoIdOrNull(orderRecord.getC_Async_Batch_ID()));\n\tfinal boolean isAsyncBatchObserved = asyncBatchObserver.isAsyncBatchObserved(AsyncBatchId.ofRepoIdOrNull(orderRecord.getC_Async_Batch_ID()));\n\n\tif (isAsyncBatchObserved) {\n\t\tlogger.debug(\"Order {} is already involved in an async batch, skipping\", orderRecord);\n\t\treturn;\n\t}\n\n\tfinal I_C_Async_Batch_Type asyncBatchType = asyncBatchBL.getAsyncBatchTypeById(AsyncBatchTypeId.ofRepoIdOrNull(asyncBatch.getC_Async_Batch_Type_ID()));\n\tfinal boolean isAutoShipAndInvoice = asyncBatchType.isAutoShipAndInvoice();\n\n\tif (isAutoShipAndInvoice) {\n\t\tlogger.debug(\"Order {} is eligible for auto-processing\", orderRecord);\n\t\tlogger.debug(\"Enqueuing order {} for auto-processing\", orderRecord);\n\t\tasyncBatchBL.enqueueAsyncBatchForProcessing(AsyncBatchId.ofRepoIdOrNull(orderRecord.getC_Async_Batch_ID()), trxName);\n\t}\n\telse {\n\t\tlogger.debug(\"Order {} is not eligible for auto-processing\", orderRecord);\n\t\tfinal I_C_Order order = InterfaceWrapperHelper.create(orderRecord, I_C_Order.class);\n\t\tfinal I_C_Async_Batch_Attribute asyncBatchAttribute = asyncBatchBL.getAsyncBatchAttributeById(AsyncBatchAttributeId.ofRepoIdOrNull(order.getC_Async_Batch_Attribute_ID()));\n\t\tfinal boolean isPostponeMissingShipmentSchedules = asyncBatchAttribute.isPostponeMissingShipmentSchedules();\n\n\t\tif (isPostponeMissingShipment", "CodeBleu_score": 43.72698059444656}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (!isEligibleForAutoProcessing(orderRecord)) {\n\t\treturn;\n\t}\n\n\tfinal String trxName = ITrx.TRXNAME_ThreadInherited;\n\tfinal IContextAware contextProvider = PlainContextAware.newWithTrxName(Env.getCtx(), trxName);\n\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\tfinal Order order = orderDAO.getById(orderId);\n\tfinal OrderScheduleGenerationResult orderScheduleGenerationResult = orderScheduleBL.generateSchedules(order, contextProvider);\n\n\tif (orderScheduleGenerationResult.isSuccess()) {\n\t\tlogger.info(\"Order {} was enqueued for auto-processing\", orderId);\n\t} else {\n\t\tlogger.info(\"Order {} was not enqueued for auto-processing because {}\", orderId, orderScheduleGenerationResult.getErrorMsg());\n\t}\n}", "CodeBleu_score": 51.04403668040668}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n    return $user;\n}", "CodeBleu_score": 51.09234604414432}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (\n        $user &&\n        Hash::check($request->password, $user->password)\n    ) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 50.05504836881084}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (\n        $user &&\n        Hash::check($request->password, $user->password)\n    ) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 50.05504836881084}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$request->increment('login_attempts');\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 80.98396657486376}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 83.57390278364174}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementRequestLimit($request);\n    throw ValidationException::withMessages([\n        'email' => [\n            __('auth.failed'),\n        ],\n    ]);\n}", "CodeBleu_score": 72.41625628674038}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('two_factor.user');\n    $remember = $request->session()->get('two_factor.remember');\n    $user = User::find($user->id);\n    if ($user) {\n        $credential = $user->getTwoFactorAuthenticationCredential();\n        if ($credential) {\n            $data = [\n                'user' => $user,\n                'remember' => $remember,\n                'publicKey' => $credential->public_key,\n                'enabled' => $user->two_factor_authentication_enabled\n            ];\n            return response()->view('auth.two-factor-challenge', $data);\n        }\n    }\n    return redirect()->route('login');\n}", "CodeBleu_score": 40.99854158942816}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('two_factor.user');\n\n    if (!$user) {\n        return redirect()->route('login');\n    }\n\n    $user = User::find($user->id);\n\n    if (!$user) {\n        return redirect()->route('login');\n    }\n\n    if (!$user->two_factor_secret) {\n        return redirect()->route('login');\n    }\n\n    $credentials = $request->validate([\n        'code' => 'required|digits:6',\n    ]);\n\n    if (!Auth::attempt($credentials, $request->has('remember'))) {\n        $request->session()->put('two_factor.user', $user);\n\n        return redirect()->route('two-factor.login');\n    }\n\n    $remember = $request->has('remember');\n\n    $request->session()->put('auth.password_confirmed_at', time());\n\n    $request->session()->put('auth.remember', $remember);\n\n    $request->session()->put('auth.user', $user);\n\n    $request->session()->put('auth.two_factor_confirmed_at', time());\n\n    $request->session()->put('auth.two_factor_remember', $remember);\n\n    $request->session()->put('auth.two_factor_secret', $user->two_factor_secret);\n\n    $request->session()->put('auth.two_factor_recovery_codes', $user->two_factor_recovery_codes);\n\n    $request->session()->put('auth.two_factor_provider', $user->two_factor_provider);\n\n    $request->session()->put('auth.two_factor_provider_id', $user->two_factor_provider_id);\n\n    $request->session()->put('auth.two_factor_provider_data', $user->two_factor_provider_data);\n\n    $request->session()->put('auth.two_factor_provider_data.user_id', $user->id);\n\n    $request->session()->put('auth.two_factor_provider_data.two_factor_secret',", "CodeBleu_score": 32.57961340365435}, {"code": "<?\npublic function toResponse($request){\n\t$session = $request->getSession();\n\t$userID = $session->get('user_id');\n\t$user = User::find($userID);\n\t$session->remove('user_id');\n\t\n\tif ($user) {\n\t\t$data = array();\n\t\t$data['twoFactorEnabled'] = $user->twoFactorEnabled;\n\t\t$data['rememberMe'] = $request->has('remember_me');\n\t\t\n\t\t$assertion = $this->generateAssertion($user);\n\t\t$data['assertion'] = $assertion;\n\t\t\n\t\treturn view('TwoFactorChallenge', $data);\n\t} else {\n\t\treturn redirect('/');\n\t}\n}", "CodeBleu_score": 43.58091772342152}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::where('driver', $driver)->where('driver_id', $socialite->getId())->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        $this->checkUserAssociation($request, $user, $driver);\n\n        return $user;\n    }\n\n    $user = $this->getUserOrCreate($socialite);\n\n    $this->checkUserAssociation($request, $user, $driver);\n\n    $this->createUserToken($user, $driver, $socialite);\n\n    return $user;\n}", "CodeBleu_score": 54.68859881272089}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = $this->getUserToken($driver, $socialite->getId());\n\n    if ($token) {\n        $user = $token->user;\n        $this->checkUserAssociation($request, $user, $driver);\n\n        return $user;\n    }\n\n    $user = $this->getUserOrCreate($socialite);\n\n    $this->createUserToken($user, $driver, $socialite);\n\n    return $user;\n}", "CodeBleu_score": 44.08000035860519}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tif ($userToken = UserToken::where('driver', $driver)->where('driver_id', $socialite->getId())->first()) {\n        $user = $userToken->user;\n\n        $this->checkUserAssociation($request, $user, $driver);\n\n        $userToken->update([\n            'token' => $socialite->token,\n            'refresh_token' => $socialite->refreshToken,\n            'expires_in' => $socialite->expiresIn,\n        ]);\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n\n        $this->checkUserAssociation($request, $user, $driver);\n\n        $userToken = $this->createUserToken($user, $driver, $socialite);\n    }\n\n    Auth::login($user, true);\n\n    return $user;\n}", "CodeBleu_score": 55.99200122179684}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$credentials = $this->filterCredentials($request);\n    $user = $this->provider->retrieveByCredentials($credentials);\n\n    if ($user === null) {\n        $this->fireFailedEvent($request);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    if (! $this->validateAssertion($request, $user)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 59.66613423440552}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$credentials = $this->filterCredentials($request);\n\n    $user = $this->provider->retrieveByCredentials($credentials);\n\n    if ($user === null) {\n        $this->fireFailedEvent($request);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    $result = $this->webauthn->validateAssertion(\n        $user,\n        $credentials['response'],\n        $credentials['rawId'],\n        $credentials['type']\n    );\n\n    if (! $result->isValid()) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    $this->guard->login($user);\n\n    return true;\n}", "CodeBleu_score": 60.91643589136577}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$credentials = $this->filterCredentials($request);\n\n    $user = $this->provider->retrieveByCredentials($credentials);\n\n    if ($user === null) {\n        $this->fireFailedEvent($request);\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    if (! $this->validateAssertion($request, $user)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    $this->limiter->clear($request);\n\n    return true;\n}", "CodeBleu_score": 56.684164630892276}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$user = null;\n    if (isset($_POST['email'])) {\n        $email = $_POST['email'];\n        try {\n            $user = User::findByEmail($email);\n        } catch (Exception $e) {\n            error_log(\"Error: \" . $e->getMessage());\n        }\n    } else {\n        error_log(\"Email not provided\");\n    }\n    return $user;\n}", "CodeBleu_score": 39.57931330042285}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->getEmail();\n    if (!$email) {\n        $this->logger->error('Email not provided');\n        return null;\n    }\n    try {\n        $user = User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->logger->error('User not found');\n        return null;\n    }\n    return $user;\n}", "CodeBleu_score": 56.13748109128171}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->email)) {\n        $this->log->error(\"No email provided to retrieve user.\");\n        return null;\n    }\n\n    try {\n        return User::where(\"email\", $this->email)->first();\n    } catch (Exception $e) {\n        $this->log->error(\"Could not retrieve user with email \" . $this->email . \".\");\n        return null;\n    }\n}", "CodeBleu_score": 31.582507287784733}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (!config('scout.driver')) {\n        return;\n    }\n    if (!config('scout.flush')) {\n        return;\n    }\n    $meilisearch = new Meilisearch(config('scout.meilisearch.host'), config('scout.meilisearch.key'));\n    $indexes = $meilisearch->getAllIndexes();\n    $indexes = $indexes->getData();\n    foreach ($indexes as $index) {\n        $table = $this->getTableName($index['uid']);\n        $this->artisan('scout:flush', [\n            'model' => $table,\n        ]);\n        $this->info(\"Scout indexes for table {$table} flushed.\");\n    }\n}", "CodeBleu_score": 46.11190298546534}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (!config('scout.driver') || !config('scout.flush')) {\n        return;\n    }\n\n    $indexes = config('scout.meilisearch.indexes');\n\n    if (!$indexes) {\n        return;\n    }\n\n    foreach ($indexes as $index) {\n        $table = $index['table_name'] ?? $index['model'];\n        $this->artisan(\"meilisearch:flush-index {$table}\");\n    }\n\n    $this->info('Indexes flushed.');\n}", "CodeBleu_score": 42.47067473283322}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') !== 'meilisearch') {\n        return;\n    }\n\n    $meilisearch = config('scout.meilisearch.hosts')[0];\n    $apiKey = config('scout.meilisearch.key');\n    $client = new Client($meilisearch, $apiKey);\n\n    $indexes = $client->getAllIndexes();\n\n    foreach ($indexes as $index) {\n        $table = $index->uid;\n        $this->artisan(\"scout:flush $table\");\n        $this->info(\"Scout index $table flushed.\");\n    }\n}", "CodeBleu_score": 47.77283370939367}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->read($resource);\n    if ($vcard === null) {\n        $vcard = $this->create($resource);\n    }\n    $this->exporters($resource->getType())->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n    return $vcard;\n}", "CodeBleu_score": 17.959909038037996}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $resource->getVCard();\n    if ($vcard === null) {\n        $vcard = new VCard();\n        $vcard->setUID($resource->getUID());\n        $vcard->addName($resource->getFirstName(), $resource->getLastName());\n        $vcard->addEmail($resource->getEmail());\n        $vcard->addPhoneNumber($resource->getPhoneNumber());\n    }\n    $this->exporters($resource->getType())->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n    return $vcard;\n}", "CodeBleu_score": 23.95880038074637}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $resource->getVCard();\n\n    if ($vcard === null) {\n        $vcard = new VCard();\n        $vcard->setUID($resource->getUID());\n    }\n\n    $exporters = $this->exporters($resource->getType());\n\n    $exporters->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n\n    return $vcard;\n}", "CodeBleu_score": 21.795864250676157}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tif (isset($this->addressBooks[$addressBookId])) {\n\t\t$addressBook = $this->addressBooks[$addressBookId];\n\t\tif (isset($addressBook['uri']) && $addressBook['uri'] === $cardUri) {\n\t\t\t$object = $addressBook;\n\t\t} else {\n\t\t\t$object = $this->getObjectByUri($addressBookId, $cardUri);\n\t\t}\n\t\tif ($object && isset($object['uri'])) {\n\t\t\t$this->dispatcher->addJob('carddav_delete_object', ['object' => $object]);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.13621744476985}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\tif ($addressBookId === null || $cardUri === null) {\n\t\treturn false;\n\t}\n\n\t$object = $this->getObject($addressBookId, $cardUri);\n\tif ($object === null) {\n\t\treturn false;\n\t}\n\n\tif ($object['uri'] === null) {\n\t\treturn false;\n\t}\n\n\tif ($object['uri'] === 'principal') {\n\t\treturn false;\n\t}\n\n\tif ($object['uri'] === 'book') {\n\t\treturn false;\n\t}\n\n\tif ($object['uri'] === 'addressbook') {\n\t\treturn false;\n\t}\n\n\tif ($object['uri'] === 'group') {\n\t\t$this->jobList->add(new Job\\DeleteGroup($this, $addressBookId, $cardUri));\n\t\treturn true;\n\t}\n\n\tif ($object['uri'] === 'contact') {\n\t\t$this->jobList->add(new Job\\DeleteContact($this, $addressBookId, $cardUri));\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 42.27105258545928}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$addressBook = $this->getAddressBook($addressBookId);\n\tif ($addressBook === false) {\n\t\treturn false;\n\t}\n\t$card = $this->getCard($addressBookId, $cardUri);\n\tif ($card === false) {\n\t\treturn false;\n\t}\n\tif ($card['carddata']['CARDDATA']['is_vcard'] === '1') {\n\t\t$card = $this->getCard($addressBookId, $card['carddata']['CARDDATA']['uri']);\n\t\tif ($card === false) {\n\t\t\treturn false;\n\t\t}\n\t}\n\tif ($card['carddata']['CARDDATA']['is_vcard'] === '1') {\n\t\t$this->app->getJobList()->add(new Job\\DestroyVCard($this->app, $card['carddata']['CARDDATA']['uri']));\n\t} elseif ($card['carddata']['CARDDATA']['is_group'] === '1') {\n\t\t$this->app->getJobList()->add(new Job\\DestroyGroup($this->app, $card['carddata']['CARDDATA']['uri']));\n\t} elseif ($card['carddata']['CARDDATA']['is_contact'] === '1') {\n\t\t$this->app->getJobList()->add(new Job\\DestroyContact($this->app, $card['carddata']['CARDDATA']['uri']));\n\t} else {\n\t\treturn false;\n\t}\n\t$this->app->getJobList()->add(new Job\\DestroyCard($this->app, $card['carddata']['CARDDATA']['uri']));\n\t$this->app->getJobList()->add(new Job\\DestroyAddressBookObject($this->app, $card['carddata']['CARDDATA']['uri']));\n\t$this->app->getJobList()->add(new Job\\DestroyAddressBookObject($this->app, $card['carddata']['CARDDATA']['uri'] . '.vcf'));\n\t$this->app->getJobList()->add(new Job\\DestroyAddressBookObject($this->app, $card['carddata']['CARDD", "CodeBleu_score": 33.02672384270336}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t$file = $data['file'];\n  if (!$file) {\n    return;\n  }\n  $activity = CRM_Activity_BAO_Activity::create($data);\n  if (!$activity) {\n    return;\n  }\n  $file = CRM_Utils_File::uploadFile($file);\n  if (!$file) {\n    return;\n  }\n  $file = CRM_Utils_File::storeFile($file['name'], $file['tmp_name'], $file['type']);\n  if (!$file) {\n    return;\n  }\n  $file = CRM_Core_DAO::createTestFile($file);\n  if (!$file) {\n    return;\n  }\n  $file['activity_id'] = $activity->id;\n  $file['file_name'] = $file['name'];\n  $file['file_mime_type'] = $file['mime_type'];\n  $file['file_url'] = $file['url'];\n  $file['file_path'] = $file['file_path'];\n  $file['file_type'] = $file['file_type'];\n  $file['file_size'] = $file['file_size'];\n  $file['is_image'] = $file['is_image'];\n  $file['is_temp'] = $file['is_temp'];\n  $file['contact_id'] = $activity->contact_id;\n  $file['modified_date'] = $activity->modified_date;\n  $file['created_date'] = $activity->created_date;\n  $file['created_id'] = $activity->created_id;\n  $file['status_id'] = $activity->status_id;\n  $file['is_deleted'] = $activity->is_deleted;\n  $file['is_test'] = $activity->is_test;\n  $file['file_id'] = $file['id'];\n  $file['id'] = $activity->id;\n  $file['contact_type'] = 'Activity';\n  $file['file_id'] = $file['id'];\n  $file['contact_type'] = 'Activity", "CodeBleu_score": 34.771384991809974}, {"code": "<?\npublic function upload(array $data){\n\tif (!isset($data['file'])) {\n    return null;\n  }\n\n  $file = $data['file'];\n  $leadActivity = $this->createLeadActivity($data);\n  $fileRecord = $this->createFileRecord($leadActivity, $file);\n\n  return $fileRecord;\n}", "CodeBleu_score": 24.0852193419716}, {"code": "<?\npublic function upload(array $data){\n\t// Check if a file is included in the request\n  if (!isset($data['file'])) {\n    return null;\n  }\n\n  // Create a new lead activity record\n  $leadActivity = new LeadActivity();\n  $leadActivity->setLeadId($data['lead_id']);\n  $leadActivity->setUserId($this->getUser()->getId());\n  $leadActivity->setActivityTypeId(LeadActivity::TYPE_UPLOADED_FILE);\n  $leadActivity->setDetails($data['details']);\n  $leadActivity->setCreatedAt(new DateTime());\n\n  // Save the lead activity record\n  $this->getEntityManager()->persist($leadActivity);\n  $this->getEntityManager()->flush();\n\n  // Create a new file record\n  $file = new File();\n  $file->setName($data['file']['name']);\n  $file->setPath($data['file']['path']);\n  $file->setLeadActivityId($leadActivity->getId());\n\n  // Save the file record\n  $this->getEntityManager()->persist($file);\n  $this->getEntityManager()->flush();\n\n  // Return the file record\n  return $file;\n}", "CodeBleu_score": 21.92813547692761}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$path = request()->is('admin*') ? 'admin' : 'front';\n\n    $statusCode = $exception->getStatusCode();\n\n    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } elseif ($exception instanceof TokenMismatchException) {\n        $statusCode = 419;\n    }\n\n    return $this->response($path, $statusCode);\n}", "CodeBleu_score": 48.30276326325955}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$statusCode = 500;\n\n    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } elseif ($exception instanceof NotFoundHttpException) {\n        $statusCode = 404;\n    }\n\n    $path = request()->is('admin') ? 'admin' : 'front';\n\n    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    if ($statusCode == 404 && request()->is('admin')) {\n        return response()->view(\"admin::errors.{$statusCode}\", [], $statusCode);\n    } elseif ($statusCode == 404 && request()->is('front')) {\n        return response()->view(\"front::errors.{$statusCode}\", [], $statusCode);\n    } elseif ($statusCode == 404 && request()->is('api')) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    } elseif ($statusCode == 404 && request()->is('customer')) {\n        return response()->view(\"customer::errors.{$statusCode}\", [], $statusCode);\n    } elseif ($statusCode == 404 && request()->is('vendor')) {\n        return response()->view(\"vendor::errors.{$statusCode}\", [], $statusCode);\n    } elseif ($statusCode == 404 && request()->is('super-admin')) {\n        return response()->view(\"super-admin::errors.{$statusCode}\", [], $statusCode);\n    } elseif ($statusCode == 40", "CodeBleu_score": 34.95543577558296}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$statusCode = $exception->getStatusCode();\n    $path = request()->segment(1);\n\n    if ($exception instanceof ModelNotFoundException) {\n        return $this->response($path, 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return $this->response($path, 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return $this->response($path, 500);\n    }\n\n    if ($exception instanceof NotFoundHttpException) {\n        return $this->response($path, 404);\n    }\n\n    if ($exception instanceof MethodNotAllowedHttpException) {\n        return $this->response($path, 405);\n    }\n\n    if ($exception instanceof HttpException) {\n        return $this->response($path, $statusCode);\n    }\n\n    if ($exception instanceof AuthenticationException) {\n        return $this->response($path, 401);\n    }\n\n    if ($exception instanceof AuthorizationException) {\n        return $this->response($path, 403);\n    }\n\n    if ($exception instanceof TokenMismatchException) {\n        return $this->response($path, 419);\n    }\n\n    if ($exception instanceof ValidationException) {\n        return $this->response($path, 422);\n    }\n\n    if ($exception instanceof Exception) {\n        return $this->response($path, 500);\n    }\n}", "CodeBleu_score": 43.63542714819693}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$activity_ids = $this->input->post('activity_ids');\n\t$is_done = $this->input->post('is_done');\n\t$is_done = $is_done == 'true' ? 1 : 0;\n\n\t$this->load->model('activity_model');\n\t$this->load->model('event_model');\n\n\t$num_updates = 0;\n\t$activity_ids_string = implode(',', $activity_ids);\n\t$activities = $this->activity_model->get_by_ids($activity_ids);\n\tforeach ($activities as $activity) {\n\t\t$activity_id = $activity['activity_id'];\n\t\t$activity_name = $activity['activity_name'];\n\n\t\t$this->activity_model->update_is_done($activity_id, $is_done);\n\t\t$num_updates++;\n\n\t\t$activity_event = array(\n\t\t\t'activity_id' => $activity_id,\n\t\t\t'activity_name' => $activity_name,\n\t\t\t'is_done' => $is_done\n\t\t);\n\n\t\t$this->event_model->dispatch_activity_event($activity_event);\n\t}\n\n\t$response = array(\n\t\t'success' => $num_updates > 0,\n\t\t'num_updates' => $num_updates,\n\t\t'activity_ids' => $activity_ids_string\n\t);\n\n\techo json_encode($response);\n}", "CodeBleu_score": 33.12506319327253}, {"code": "<?\npublic function massUpdate(){\n\t$activityIDs = $this->getRequest()->getParameter('activity_ids');\n\t$isDone = $this->getRequest()->getParameter('is_done');\n\t$activityIDs = explode(',', $activityIDs);\n\t$count = 0;\n\tforeach ($activityIDs as $activityID) {\n\t\t$activity = $this->getActivityDao()->getById($activityID);\n\t\tif (!$activity) {\n\t\t\tcontinue;\n\t\t}\n\t\t$this->dispatcher->notify(new ModifyActivityEvent($activity, $isDone));\n\t\t$this->getActivityDao()->updateActivity($activityID, array('is_done' => $isDone));\n\t\t$count++;\n\t}\n\t$response = new JSONMessage(true);\n\t$response->setData(array('count' => $count));\n\treturn $response;\n}", "CodeBleu_score": 38.33521562672143}, {"code": "<?\npublic function massUpdate(){\n\t// Get the activity IDs to update\n\t$activity_ids = $this->getRequestData('activity_ids');\n\tif (empty($activity_ids)) {\n\t\tthrow new Exception('No activity IDs specified');\n\t}\n\n\t// Get the new status\n\t$new_status = $this->getRequestData('new_status');\n\tif (empty($new_status)) {\n\t\tthrow new Exception('No new status specified');\n\t}\n\n\t// Get the user ID\n\t$user_id = $this->getRequestData('user_id');\n\n\t// Get the user\n\t$user = $this->getUser($user_id);\n\n\t// Get the activity IDs\n\t$activity_ids = explode(',', $activity_ids);\n\n\t// Get the activity IDs\n\t$activity_ids = array_map('intval', $activity_ids);\n\n\t// Get the activities\n\t$activities = $this->getActivities($activity_ids);\n\n\t// Get the activities\n\t$activities = array_filter($activities);\n\n\t// Get the activities\n\t$activities = array_values($activities);\n\n\t// Get the activities\n\t$activities = array_filter($activities);\n\n\t// Get the activities\n\t$activities = array_values($activities);\n\n\t// Get the activities\n\t$activities = array_filter($activities);\n\n\t// Get the activities\n\t$activities = array_values($activities);\n\n\t// Get the activities\n\t$activities = array_filter($activities);\n\n\t// Get the activities\n\t$activities = array_values($activities);\n\n\t// Get the activities\n\t$activities = array_filter($activities);\n\n\t// Get the activities\n\t$activities = array_values($activities);\n\n\t// Get the activities\n\t$activities = array_filter($activities);\n\n\t// Get the activities\n\t$activities = array_values($activities);\n\n\t// Get the activities\n\t$activities = array_filter($activities);\n\n\t// Get the activities\n\t$activities = array_values($activities);\n\n\t//", "CodeBleu_score": 30.028837494773402}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t$ids = $this->input->post('ids');\n \t$ids = explode(',', $ids);\n \t$this->load->model('Activity_model');\n \t$this->load->model('Activity_type_model');\n \t$this->load->model('Activity_user_model');\n \t$this->load->model('Activity_tag_model');\n \t$this->load->model('Activity_location_model');\n \t$this->load->model('Activity_comment_model');\n \t$this->load->model('Activity_like_model');\n \t$this->load->model('Activity_share_model');\n \t$this->load->model('Activity_report_model');\n \t$this->load->model('Activity_report_comment_model');\n \t$this->load->model('Activity_report_comment_like_model');\n \t$this->load->model('Activity_report_comment_share_model');\n \t$this->load->model('Activity_report_comment_share_like_model');\n \t$this->load->model('Activity_report_share_model');\n \t$this->load->model('Activity_report_share_like_model');\n \t$this->load->model('Activity_report_share_comment_model');\n \t$this->load->model('Activity_report_share_comment_like_model');\n \t$this->load->model('Activity_report_share_comment_share_model');\n \t$this->load->model('Activity_report_share_comment_share_like_model');\n \t$this->load->model('Activity_report_share_comment_share_report_model');\n \t$this->load->model('Activity_report_share_comment_share_report_like_model');\n \t$this->load->model('Activity_report_share_comment_share_report_report_model');\n \t$this->load->model('Activity_report_share_comment_share_report_report_like_model');\n \t$this->load->model('Activity_report_share_comment_share_report_report_report_model');\n \t$this", "CodeBleu_score": 14.439225291694994}, {"code": "<?\n public function massDestroy(){\n\t$ids = $this->getRequest()->get('ids');\n    $activities = $this->getRepository('activity')->findByIds($ids);\n    $this->getDispatcher()->dispatch(ActivityEvents::ACTIVITY_DELETE_BATCH_PRE, new ActivityDeleteBatchEvent($activities));\n    foreach ($activities as $activity) {\n      $this->getRepository('activity')->delete($activity);\n    }\n    $this->getDispatcher()->dispatch(ActivityEvents::ACTIVITY_DELETE_BATCH_POST, new ActivityDeleteBatchEvent($activities));\n    return $this->getResponse()->setData([\n      'success' => true,\n      'message' => 'Activities deleted successfully'\n    ]);\n  }", "CodeBleu_score": 23.74194344802414}, {"code": "<?\n public function massDestroy(){\n\t// Validate request data.\n  if (!$this->validateRequestData()) {\n   return;\n  }\n  // Get the activity IDs to delete.\n  $activityIds = $this->request->getRequestData('activityIds');\n  // Dispatch the \"beforeDeleteActivities\" event.\n  $event = new \\Symfony\\Component\\EventDispatcher\\GenericEvent();\n  $event->setArgument('activityIds', $activityIds);\n  $this->dispatcher->dispatch('beforeDeleteActivities', $event);\n  // Delete the activities.\n  $this->deleteActivities($activityIds);\n  // Dispatch the \"afterDeleteActivities\" event.\n  $event = new \\Symfony\\Component\\EventDispatcher\\GenericEvent();\n  $event->setArgument('activityIds', $activityIds);\n  $this->dispatcher->dispatch('afterDeleteActivities', $event);\n  // Return a successful response.\n  $this->response->setResponseCode(\\Slim\\Http\\StatusCode::HTTP_OK);\n  $this->response->setResponseData(array('success' => true));\n }", "CodeBleu_score": 22.331563246228722}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n    $data = json_decode(file_get_contents('php://input'), true);\n    foreach($cards as $card) {\n      foreach($data as $key => $value) {\n        if($value['id'] == $card['id']) {\n          $card['selected'] = $value['selected'];\n        }\n      }\n    }\n    $this->setCards($cards);\n    return json_encode($cards);\n  }", "CodeBleu_score": 36.364812864187535}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n    $request = $this->getRequest();\n    $data = $request->getPost();\n    $selected = $data['selected'];\n\n    foreach ($cards as $key => $card) {\n        if (in_array($card['id'], $selected)) {\n            $cards[$key]['selected'] = true;\n        } else {\n            $cards[$key]['selected'] = false;\n        }\n    }\n\n    $this->setCards($cards);\n\n    return new JsonModel(array(\n        'cards' => $cards\n    ));\n}", "CodeBleu_score": 42.905994724461436}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n    $request = $this->getRequest();\n    $data = $request->getParsedBody();\n    foreach ($cards as $card) {\n        $cardId = $card['id'];\n        $selected = $card['selected'];\n        if (isset($data[$cardId])) {\n            $selected = $data[$cardId];\n        }\n        $card['selected'] = $selected;\n    }\n    $this->setCards($cards);\n    return $cards;\n}", "CodeBleu_score": 36.974733300281045}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t// Get the request data\n\t$request = $this->request();\n\t\n\t// Dispatch the event\n\t$event = $this->dispatcher->dispatch('configuration.store', $request);\n\t\n\t// Create the configuration\n\t$configuration = $this->repository->create($event->configuration);\n\t\n\t// Dispatch the event\n\t$this->dispatcher->dispatch('configuration.stored', $configuration);\n\t\n\t// Flash a success message\n\t$this->flash->success($this->translation->get('configuration.flash.created'));\n\t\n\t// Redirect to the previous page\n\t$this->redirect($request->getReferrer());\n\t\n}", "CodeBleu_score": 23.907700756254098}, {"code": "<?\npublic function store(){\n\t// Validate the request\n\t$this->validate($this->request, [\n\t\t'name' => 'required|max:255',\n\t\t'description' => 'max:255',\n\t\t'status' => 'required|integer|in:0,1',\n\t\t'sort' => 'integer',\n\t]);\n\n\t// Dispatch a event before saving\n\t$this->dispatch(new Configurations\\Events\\ConfigurationSaving($this->request));\n\n\t// Create the configuration\n\t$configuration = Configurations\\Configuration::create($this->request->all());\n\n\t// Dispatch a event after saving\n\t$this->dispatch(new Configurations\\Events\\ConfigurationSaved($configuration));\n\n\t// Flash a success message to the session\n\t$this->flash->success(trans('configuration.created'));\n\n\t// Redirect back to the previous page\n\treturn redirect()->back();\n}", "CodeBleu_score": 28.305804473083}, {"code": "<?\npublic function store(){\n\t// Get the request data.\n\t$data = $this->request->getPost();\n\n\t// Dispatch the before event.\n\t$this->dispatchEvent('before_store_configuration', [$data]);\n\n\t// Create the configuration.\n\t$configuration = $this->create($data);\n\n\t// Dispatch the after event.\n\t$this->dispatchEvent('after_store_configuration', [$configuration, $data]);\n\n\t// Flash a success message to the session.\n\t$this->flashSession->success('The configuration was saved successfully');\n\n\t// Redirect to the previous page.\n\t$this->response->redirect($this->getReferer());\n\n}", "CodeBleu_score": 23.94210192464181}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> listOfSorts = new ArrayList<AdminModelSort>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(model);\n        sort.setOrder(1);\n        listOfSorts.add(sort);\n    }\n    List<AdminModelSort> existingSorts = adminModelSortRepository.findAllByUser(user);\n    existingSorts.addAll(listOfSorts);\n    adminModelSortRepository.deleteAll(existingSorts);\n    adminModelSortRepository.saveAll(existingSorts);\n    return success();\n}", "CodeBleu_score": 31.929896790909538}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\ttry {\n        List<AdminModelSort> sortList = new ArrayList<>();\n        for (String model : list) {\n            AdminModelSort sort = new AdminModelSort();\n            sort.setModel(model);\n            sort.setSortOrder(1);\n            sortList.add(sort);\n        }\n        adminModelSortRepository.deleteAll();\n        adminModelSortRepository.saveAll(sortList);\n        return new Result(true);\n    } catch (Exception e) {\n        return new Result(false, \"Error setting header model sort order: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 37.42136036948772}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> list = new ArrayList<AdminModelSort>();\n\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(model);\n        sort.setSortOrder(1);\n        list.add(sort);\n    }\n\n    adminModelSortRepository.deleteAll();\n    adminModelSortRepository.saveAll(list);\n\n    return new Result(true);\n}", "CodeBleu_score": 28.37431912089527}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }", "CodeBleu_score": 91.5627799574396}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 92.90405771471555}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 92.90405771471555}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\ttry {\n \t\tif(json.length() == 0) {\n \t\t\treturn ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Invalid JSON array\");\n \t\t}\n \t\tUser user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n \t\tif(user == null) {\n \t\t\treturn ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(\"Not authorized\");\n \t\t}\n \t\tUserConfiguration userConfiguration = userConfigurationRepository.findByUserAndCustomKey(user, customKey);\n \t\tif(userConfiguration == null) {\n \t\t\tuserConfiguration = new UserConfiguration();\n \t\t\tuserConfiguration.setUser(user);\n \t\t\tuserConfiguration.setCustomKey(customKey);\n \t\t}\n \t\tuserConfiguration.setCustomValue(json.toString());\n \t\tuserConfigurationRepository.save(userConfiguration);\n \t\treturn ResponseEntity.status(HttpStatus.OK).body(\"Success\");\n \t} catch (Exception e) {\n \t\treturn ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());\n \t}\n }", "CodeBleu_score": 44.44851200599253}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t// Get the user configuration by the custom key\n \tUserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n \t\n \t// If the configuration exists, update it with the provided JSON\n \tif(userConfiguration != null) {\n \t\tuserConfiguration.setCustomJson(json);\n \t\tuserConfigurationRepository.save(userConfiguration);\n \t}\n \t\n \t// If the configuration does not exist, create it and save it\n \telse {\n \t\tuserConfiguration = new UserConfiguration();\n \t\tuserConfiguration.setCustomKey(customKey);\n \t\tuserConfiguration.setCustomJson(json);\n \t\tuserConfigurationRepository.save(userConfiguration);\n \t}\n \t\n \treturn new ResponseEntity<>(new Response(true, \"Successfully updated custom setting\"), HttpStatus.OK);\n }", "CodeBleu_score": 44.77927907355591}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\ttry {\n\t \t\tUser user = User.find.where().eq(\"id\", request().username()).findUnique();\n\t \t\tCustomSetting customSetting = CustomSetting.find.where().eq(\"customKey\", customKey).eq(\"user\", user).findUnique();\n\t \t\tif (customSetting == null) {\n\t \t\t\tcustomSetting = new CustomSetting();\n\t \t\t\tcustomSetting.setCustomKey(customKey);\n\t \t\t\tcustomSetting.setUser(user);\n\t \t\t\tcustomSetting.setCustomSetting(json.toString());\n\t \t\t\tcustomSetting.save();\n\t \t\t} else {\n\t \t\t\tcustomSetting.setCustomSetting(json.toString());\n\t \t\t\tcustomSetting.update();\n\t \t\t}\n\t \t\treturn ok(new CustomSettingResult(customSetting.getCustomSetting()));\n\t \t} catch (Exception e) {\n\t \t\treturn badRequest(e.getMessage());\n\t \t}\n  }", "CodeBleu_score": 43.12440440779724}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserDao.findById(userId);\n\tif (user == null) {\n\t\treturn new Result<AdminUser>(ResultCode.USER_NOT_FOUND, null);\n\t}\n\tAdminDepartment department = adminDepartmentDao.findById(user.getDepartmentId());\n\tuser.setDepartmentName(department.getName());\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn new Result<AdminUser>(ResultCode.SUCCESS, user);\n}", "CodeBleu_score": 44.20683067577137}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = userService.getUser(userId);\n    if (user == null) {\n        return Result.failure(\"User not found\");\n    }\n    user.setDepartmentName(departmentService.getDepartmentName(user.getDepartmentId()));\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 40.9574871766615}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserService.getUserInfo(userId);\n    if (user != null) {\n        user.setPassword(null);\n        user.setSalt(null);\n        if (user.getDepartmentId() != null) {\n            user.setDepartmentName(departmentService.getDepartmentName(user.getDepartmentId()));\n        }\n    }\n    return new Result<>(user);\n}", "CodeBleu_score": 41.378322101952975}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\tString userID = session(\"connected\");\n\t if (userID == null) {\n\t\t return redirect(routes.Application.index());\n\t }\n\t \n\t List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userID\", userID).findList();\n\t \n\t if (readNoticeList.size() > 0) {\n\t\t for (ReadNotice readNotice : readNoticeList) {\n\t\t\t readNotice.status = 1;\n\t\t\t readNotice.save();\n\t\t }\n\t } else {\n\t\t ReadNotice readNotice = new ReadNotice();\n\t\t readNotice.userID = userID;\n\t\t readNotice.status = 1;\n\t\t readNotice.save();\n\t }\n\t \n\t return ok(\"success\");\n }", "CodeBleu_score": 22.519132306649485}, {"code": " public Result readNotice() {\n\tString userId = session().get(\"connected\");\n \t\tif (userId == null) {\n \t\t\treturn redirect(routes.Application.index());\n \t\t}\n\n \t\tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\n \t\tif (readNoticeList.size() > 0) {\n \t\t\tfor (ReadNotice readNotice : readNoticeList) {\n \t\t\t\treadNotice.status = 1;\n \t\t\t\treadNotice.update();\n \t\t\t}\n \t\t}\n\n \t\tReadNotice readNotice = new ReadNotice();\n \t\treadNotice.userId = userId;\n \t\treadNotice.status = 1;\n \t\treadNotice.save();\n\n \t\treturn ok(\"Success\");\n \t}", "CodeBleu_score": 24.376332310056263}, {"code": " public Result readNotice() {\n\tForm<ReadNotice> readNoticeForm = Form.form(ReadNotice.class).bindFromRequest();\n \tif(readNoticeForm.hasErrors()) {\n \t\tflash(\"error\", \"Something went wrong.\");\n \t\treturn badRequest(readNotice.render(readNoticeForm));\n \t} else {\n \t\tReadNotice readNotice = readNoticeForm.get();\n \t\tString userId = readNotice.getUserId();\n \t\tReadNotice readNotice1 = new ReadNotice();\n \t\treadNotice1.setUserId(userId);\n \t\tReadNotice readNotice2 = new ReadNotice();\n \t\treadNotice2.setUserId(userId);\n \t\tList<ReadNotice> readNoticeList = readNoticeDao.getReadNotice(readNotice1);\n \t\tif(readNoticeList.size() > 1) {\n \t\t\tfor(ReadNotice readNotice3 : readNoticeList) {\n \t\t\t\treadNotice3.setReadNotice(1);\n \t\t\t\treadNoticeDao.updateReadNotice(readNotice3);\n \t\t\t}\n \t\t} else {\n \t\t\treadNotice2.setReadNotice(1);\n \t\t\treadNoticeDao.createReadNotice(readNotice2);\n \t\t}\n \t\tflash(\"success\", \"Notice read successfully.\");\n \t\treturn redirect(routes.HomeController.index());\n \t}\n }", "CodeBleu_score": 29.701548602993462}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tAdminConfigBO adminConfigBO = getAdminConfig(\"companyInfo\");\n\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setName(\"companyInfo\");\n    }\n\n    adminConfigBO.setValue(adminCompanyBO.toJSONString());\n    adminConfigBO.setDescription(\"Company Information\");\n\n    adminConfigBO = getAdminConfigDAO().saveAdminConfig(adminConfigBO);\n}", "CodeBleu_score": 40.1728525758981}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\ttry {\n\t\tAdminConfiguration adminConfig = getAdminConfig(AdminConfiguration.COMPANY_INFO);\n\t\tif (adminConfig == null) {\n\t\t\tadminConfig = new AdminConfiguration();\n\t\t\tadminConfig.setConfigName(AdminConfiguration.COMPANY_INFO);\n\t\t\tadminConfig.setConfigValue(adminCompanyBO.getJson());\n\t\t\tadminConfig.setIsActive(true);\n\t\t\tadminConfig.setIsDeleted(false);\n\t\t\tadminConfig.setCreatedBy(getUserId());\n\t\t\tadminConfig.setCreatedOn(new Date());\n\t\t\tadminConfig.setUpdatedBy(getUserId());\n\t\t\tadminConfig.setUpdatedOn(new Date());\n\t\t\tadminConfig = adminConfigurationDao.save(adminConfig);\n\t\t} else {\n\t\t\tadminConfig.setConfigValue(adminCompanyBO.getJson());\n\t\t\tadminConfig.setUpdatedBy(getUserId());\n\t\t\tadminConfig.setUpdatedOn(new Date());\n\t\t\tadminConfig = adminConfigurationDao.save(adminConfig);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in setAdminConfig()\", e);\n\t\tthrow new ServiceException(\"Error in setAdminConfig()\");\n\t}\n}", "CodeBleu_score": 39.058270362524425}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\ttry {\n\t\tAdminConfigBO adminConfigBO = adminConfigService.getAdminConfig(AdminConfigBO.COMPANY_INFO);\n\t\tif (adminConfigBO == null) {\n\t\t\tadminConfigBO = new AdminConfigBO();\n\t\t\tadminConfigBO.setName(AdminConfigBO.COMPANY_INFO);\n\t\t\tadminConfigBO.setValue(adminCompanyBO.getCompanyInfo());\n\t\t\tadminConfigBO.setCreatedBy(userBO.getUserId());\n\t\t\tadminConfigBO.setCreatedDate(new Date());\n\t\t\tadminConfigBO.setUpdatedBy(userBO.getUserId());\n\t\t\tadminConfigBO.setUpdatedDate(new Date());\n\t\t\tadminConfigBO.setStatus(AdminConfigBO.STATUS_ACTIVE);\n\t\t\tadminConfigBO = adminConfigService.saveAdminConfig(adminConfigBO);\n\t\t} else {\n\t\t\tadminConfigBO.setValue(adminCompanyBO.getCompanyInfo());\n\t\t\tadminConfigBO.setUpdatedBy(userBO.getUserId());\n\t\t\tadminConfigBO.setUpdatedDate(new Date());\n\t\t\tadminConfigBO = adminConfigService.updateAdminConfig(adminConfigBO);\n\t\t}\n\t} catch (ServiceException e) {\n\t\tLOG.error(\"Error while setting company information.\", e);\n\t\tthrow new BusinessException(e.getMessage());\n\t}\n}", "CodeBleu_score": 34.07253559791315}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\tString adminConfig = getAdminConfig();\n\tif (adminConfig != null) {\n\t\ttry {\n\t\t\tadminCompany = (AdminCompanyBO) JSONValue.parseStrict(adminConfig);\n\t\t} catch (Exception e) {\n\t\t\tLOG.error(\"Error parsing admin config: \" + e.getMessage());\n\t\t}\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 38.905707934743255}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminConfig = new AdminCompanyBO();\n    String adminConfigKey = AdminConfigKey.ADMIN_CONFIG_KEY;\n    String adminConfigValue = getAdminConfigValue(adminConfigKey);\n\n    if (StringUtils.isNotBlank(adminConfigValue)) {\n        adminConfig = (AdminCompanyBO) SerializationUtils.deserialize(adminConfigValue);\n    }\n\n    return adminConfig;\n}", "CodeBleu_score": 33.291623807967106}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n    try {\n        String adminConfig = AdminConfigUtil.getAdminConfig(this.getCompanyId(), AdminConfigUtil.ADMIN_CONFIG_KEY);\n        if (StringUtils.isNotBlank(adminConfig)) {\n            adminCompany = (AdminCompanyBO) SerializationUtils.deserialize(adminConfig);\n        }\n    } catch (Exception e) {\n        LOG.error(\"Error retrieving admin configuration\", e);\n    }\n    return adminCompany;\n}", "CodeBleu_score": 35.84280999726286}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigs = new ArrayList<AdminConfig>();\n        for (String string : stringList) {\n            AdminConfig adminConfig = AdminConfig.createAdminConfig(string);\n            adminConfigs.add(adminConfig);\n        }\n        AdminConfigHelper.removeLogWelcomeSpeech(adminConfigs);\n        AdminConfigHelper.saveLogWelcomeSpeech(adminConfigs);\n    }", "CodeBleu_score": 33.03590538141525}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n  for (String string : stringList) {\n   AdminConfig config = AdminConfig.createAdminConfig(\"LogWelcomeSpeech\", null, null);\n   config.setProperty(\"logWelcomeSpeech\", string);\n   configList.add(config);\n  }\n  AdminConfig.removeAll(\"LogWelcomeSpeech\");\n  AdminConfig.save(configList);\n }", "CodeBleu_score": 40.12769757940342}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig config = AdminConfig.createAdminConfig(string, \"LogWelcomeSpeech\", \"Cell:\" + cellName);\n        configList.add(config);\n    }\n    AdminConfig.remove(AdminConfig.getid(\"/Cell:\" + cellName + \"/LogWelcomeSpeech:\"));\n    AdminConfig.save(configList);\n}", "CodeBleu_score": 39.742214174453295}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString username = adminInitDataBO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String passwordHash = adminInitDataBO.getPasswordHash();\n    String salt = adminInitDataBO.getSalt();\n\n    // Get the current user's ID\n    Integer userId = adminUserDAO.getUserId(username);\n\n    // Get the current user's details\n    AdminUserBO adminUserBO = adminUserDAO.getUser(userId);\n\n    // Check the password\n    if (adminUserBO.getPasswordHash().equals(passwordHash)) {\n        // Generate a temporary access code\n        String accessCode = generateAccessCode();\n\n        // Store the access code in Redis\n        redisTemplate.opsForValue().set(ACCESS_CODE_PREFIX + accessCode, username, 10, TimeUnit.MINUTES);\n\n        return accessCode;\n    } else {\n        throw new InvalidPasswordException();\n    }\n}", "CodeBleu_score": 37.08713276370671}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString userId = adminInitDataBO.getUserId();\n    String password = adminInitDataBO.getPassword();\n    String username = adminInitDataBO.getUsername();\n    String salt = adminInitDataBO.getSalt();\n    String accessCode = null;\n    String accessCodeKey = null;\n    String accessCodeValue = null;\n    String accessCodeKeyPrefix = null;\n    String accessCodeKeySuffix = null;\n    String accessCodeExpiration = null;\n    String accessCodeExpirationKey = null;\n    String accessCodeExpirationValue = null;\n    String accessCodeExpirationKeyPrefix = null;\n    String accessCodeExpirationKeySuffix = null;\n\n    try {\n        // Retrieve the user's ID and details.\n        UserBO userBO = getUser(userId);\n\n        // Check the password against the stored password.\n        if (!password.equals(userBO.getPassword())) {\n            throw new Exception(\"Invalid password.\");\n        }\n\n        // Generate a temporary access code.\n        accessCode = generateAccessCode();\n\n        // Store the access code in Redis.\n        accessCodeKey = getAccessCodeKey(userId);\n        accessCodeValue = accessCode;\n        accessCodeKeyPrefix = getAccessCodeKeyPrefix();\n        accessCodeKeySuffix = getAccessCodeKeySuffix();\n        accessCodeExpirationKey = getAccessCodeExpirationKey(userId);\n        accessCodeExpirationValue = getAccessCodeExpirationValue();\n        accessCodeExpirationKeyPrefix = getAccessCodeExpirationKeyPrefix();\n        accessCodeExpirationKeySuffix = getAccessCodeExpirationKeySuffix();\n        redisService.set(accessCodeKeyPrefix + accessCodeKeySuffix + accessCodeKey, accessCodeValue, accessCodeExpirationKeyPrefix + accessCodeExpirationKeySuffix + accessCodeExpirationKey, accessCodeExpirationValue);\n\n        // Return the access code.\n        return accessCode;\n    } catch (Exception e) {\n        // Log the exception.\n        logger.error(e.getMessage(), e);\n\n        // Throw an exception.\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 29.431606832882807}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString userId = adminInitDataBO.getUserId();\n\tString password = adminInitDataBO.getPassword();\n\tString username = adminInitDataBO.getUsername();\n\t\n\t// Retrieve the user details from the database\n\tUserBO userBO = new UserBO();\n\tuserBO.setUserId(userId);\n\tUser user = userBO.getUser();\n\t\n\t// Check that the username matches the username provided\n\tif (!username.equals(user.getUsername())) {\n\t\tthrow new InvalidUsernameException();\n\t}\n\t\n\t// Check that the password matches the stored password\n\tif (!password.equals(user.getPassword())) {\n\t\tthrow new InvalidPasswordException();\n\t}\n\t\n\t// Generate a temporary access code\n\tString accessCode = generateAccessCode();\n\t\n\t// Store the access code in Redis with a 10-minute expiration\n\tredisTemplate.opsForValue().set(accessCode, userId, 10, TimeUnit.MINUTES);\n\t\n\treturn accessCode;\n}", "CodeBleu_score": 31.43689383378306}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tString userId = session.getAttribute(\"userId\");\n    String key = \"initAuth:\" + userId;\n    String unauthorizedURLs = redisService.get(key);\n    if (unauthorizedURLs == null) {\n        return false;\n    }\n    if (unauthorizedURLs.contains(request.getRequestURI())) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 34.50533595636705}, {"code": "private boolean verifyInitAuth(){\n\tString userId = (String)session.getAttribute(\"userId\");\n    String key = \"initAuth:\" + userId;\n    String initAuthUrl = (String)session.getAttribute(\"initAuthUrl\");\n    List<String> initAuthUrlList = jedis.lrange(key, 0, -1);\n    if (initAuthUrlList.contains(initAuthUrl)) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 36.4254867787826}, {"code": "private boolean verifyInitAuth(){\n\t// Get the user ID from the session.\n    def userId = session.userId\n\n    // Construct the key for the Redis list.\n    def key = \"initAuth:\" + userId\n\n    // Get the list of unauthorized menu URLs from Redis.\n    def list = redisService.getList(key)\n\n    // If the initial authentication URL is in the list, return true.\n    if (list.contains(grailsApplication.config.initAuth.url)) {\n        return true\n    }\n\n    // Otherwise, return false.\n    return false\n}", "CodeBleu_score": 15.291258294285942}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuDao.save(roleMenuList);\n}", "CodeBleu_score": 50.685799027206514}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuDao.saveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 59.282192509395436}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tif (roleMenuList.size() > 0) {\n\t\tadminRoleMenuDao.deleteByRoleId(roleId);\n\t\tadminRoleMenuDao.saveAll(roleMenuList);\n\t}\n}", "CodeBleu_score": 47.71374599922441}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.remove(\"id\");\n        map.put(\"createTime\", DateUtil.formatDateTime(new Date()));\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map, XContentType.JSON);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 53.400997278293694}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tMap<String, Object> map = new HashMap<>();\n        map.put(\"log\", sysLog);\n        map.put(\"createTime\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n        map.put(\"id\", null);\n        IndexRequest indexRequest = new IndexRequest(getSysLogIndex());\n        indexRequest.id(UUID.randomUUID().toString());\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n                @Override\n                public void onResponse(IndexResponse indexResponse) {\n                    log.info(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u6210\u529f,id:{}\", indexResponse.getId());\n                }\n\n                @Override\n                public void onFailure(Exception e) {\n                    log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u5931\u8d25,msg:{}\", e.getMessage());\n                }\n            });\n        } catch (IOException e) {\n            log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u5931\u8d25,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 43.39034075807009}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tMap<String, Object> map = new HashMap<>();\n    map.put(\"logType\", sysLog.getLogType());\n    map.put(\"logContent\", sysLog.getLogContent());\n    map.put(\"createTime\", DateUtil.formatDate(sysLog.getCreateTime()));\n    map.put(\"userId\", sysLog.getUserId());\n    map.put(\"userName\", sysLog.getUserName());\n    map.put(\"createTime\", DateUtil.formatDate(sysLog.getCreateTime()));\n    map.put(\"ip\", sysLog.getIp());\n    map.put(\"browser\", sysLog.getBrowser());\n    map.put(\"os\", sysLog.getOs());\n    map.put(\"device\", sysLog.getDevice());\n    map.put(\"location\", sysLog.getLocation());\n    map.put(\"userAgent\", sysLog.getUserAgent());\n    map.put(\"url\", sysLog.getUrl());\n    map.put(\"method\", sysLog.getMethod());\n    map.put(\"params\", sysLog.getParams());\n    map.put(\"time\", sysLog.getTime());\n    map.put(\"cost\", sysLog.getCost());\n    map.put(\"exception\", sysLog.getException());\n    map.put(\"errorMsg\", sysLog.getErrorMsg());\n    map.put(\"status\", sysLog.getStatus());\n    map.put(\"createTime\", DateUtil.formatDate(sysLog.getCreateTime()));\n    map.put(\"updateTime\", DateUtil.formatDate(sysLog.getUpdateTime()));\n    try {\n        IndexRequest indexRequest = new IndexRequest(getSysLogIndex());\n        indexRequest.source(map);\n        restHighLevelClient.indexAsync(indexRequest, RequestOptions.DEFAULT, new ActionListener<IndexResponse>() {\n            @Override\n            public void onResponse(IndexResponse indexResponse) {\n                log.info(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u6210\u529f,msg:{}\", indexResponse.toString());\n            }\n\n            @Override\n            public void onFailure(Exception e) {\n                log.error(\"\u7cfb\u7edf\u65e5\u5fd7\u4fdd\u5b58\u5931\u8d25,msg:{}\", e.getMessage());\n            }\n        });\n    } catch", "CodeBleu_score": 39.068058131577665}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"model\", \"subModelLabel\", \"content\", \"createTime\"}, null);\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            List<SysLog> sysLogList = new ArrayList<>();\n            SearchHit[] hits = searchResponse.getHits().getHits();\n            for (SearchHit hit : hits) {\n                SysLog sysLog = new SysLog();\n                Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n                sysLog.setId(sourceAsMap.get(\"id\").toString());\n                sysLog.setUserId(sourceAsMap.get(\"userId\").toString());\n                sysLog.setModel(sourceAsMap.get(\"model\").toString());\n                sysLog.setSubModelLabel(sourceAsMap.get(\"subModelLabel\").toString());\n                sysLog.setContent(sourceAsMap.get(\"content\").toString());\n                sysLog.setCreateTime(new Date(Long.parseLong(sourceAsMap.get(\"createTime\").toString())));\n                sysLogList.add(sysLog);\n            }\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setCurrentPage(querySysLogBO.getPage());\n            basePage.setLimit(querySysLogBO.getLimit());\n            basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n            basePage.setList(sysLogList);\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n            return null;\n        }\n    }", "CodeBleu_score": 52.477642199017524}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            SearchHits hits = searchResponse.getHits();\n            SearchHit[] searchHits = hits.getHits();\n            List<SysLog> sysLogList = new ArrayList<>();\n            for (SearchHit searchHit : searchHits) {\n                SysLog sysLog = searchHit.getSourceAsObject(SysLog.class);\n                sysLogList.add(sysLog);\n            }\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setList(sysLogList);\n            basePage.setTotal(hits.getTotalHits().value);\n            basePage.setPage(querySysLogBO.getPage());\n            basePage.setLimit(querySysLogBO.getLimit());\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5206\u9875\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n            return null;\n        }\n    }", "CodeBleu_score": 59.880492851816584}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    // \u6392\u5e8f\n    searchSourceBuilder.sort(querySysLogBO.getType() == null ? \"loginTime\" : \"createTime\", SortOrder.DESC);\n    // \u6392\u9664\u5b57\u6bb5\n    searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"model\", \"subModelLabel\", \"loginTime\", \"createTime\"}, null);\n    // \u6267\u884c\u641c\u7d22\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.source(searchSourceBuilder);\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n    // \u5904\u7406\u7ed3\u679c\n    if (searchResponse != null) {\n        SearchHits hits = searchResponse.getHits();\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit hit : hits) {\n            SysLog sysLog = JSON.parseObject(hit.getSourceAsString(), SysLog.class);\n            sysLogList.add(sysLog);\n        }\n        return new BasePage<>(searchResponse.getHits().getTotalHits().value, querySysLogBO.getPage(), querySysLogBO.getLimit(), sysLogList);\n    }\n    return null;\n}", "CodeBleu_score": 54.424138862671825}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n        const file = fs.createWriteStream(dest);\n        https.get(url, (response) => {\n            response.pipe(file);\n            file.on('finish', () => {\n                file.close();\n                resolve();\n            });\n        }).on('error', (err) => {\n            fs.unlink(dest);\n            reject(err);\n        });\n    });\n}", "CodeBleu_score": 66.52905794472295}, {"code": "async function downloadFile(url, dest){\n\ttry {\n    const file = fs.createWriteStream(dest);\n    const response = await axios({\n      url,\n      method: 'GET',\n      responseType: 'stream'\n    });\n    response.data.pipe(file);\n    return new Promise((resolve, reject) => {\n      file.on('finish', () => {\n        file.close();\n        resolve();\n      });\n      file.on('error', err => {\n        fs.unlink(dest);\n        reject(err);\n      });\n    });\n  } catch (err) {\n    console.error(err);\n    return Promise.reject(err);\n  }\n}", "CodeBleu_score": 53.367301263313806}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise(async (resolve, reject) => {\n        const file = fs.createWriteStream(dest);\n        const response = await axios({\n            method: 'GET',\n            url: url,\n            responseType: 'stream'\n        });\n        response.data.pipe(file);\n        file.on('finish', () => {\n            file.close();\n            resolve();\n        });\n        file.on('error', err => {\n            fs.unlink(dest);\n            reject(err);\n        });\n    });\n}", "CodeBleu_score": 51.421088925229576}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn Flux.fromIterable(module.getDependencies())\n        .filter(dependency -> !circularDependencyCheckSet.contains(dependency.getId()))\n        .map(dependency -> {\n            circularDependencyCheckSet.add(dependency.getId());\n            return dependency;\n        })\n        .flatMap(dependency -> getApplicationById(dependency.getId()))\n        .onErrorResume(\n            t -> {\n                log.warn(\"Error while retrieving dependent module for module ID \" + module.getId(), t);\n                return Mono.empty();\n            });\n}", "CodeBleu_score": 48.17359205844358}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn Flux.fromIterable(module.getDependencies())\n        .flatMap(dependency -> {\n            if (circularDependencyCheckSet.contains(dependency.getId())) {\n                log.warn(\"Circular dependency detected: \" + module.getId() + \" -> \" + dependency.getId());\n                return Flux.empty();\n            }\n\n            circularDependencyCheckSet.add(module.getId());\n            return getModule(dependency.getId());\n        });\n}", "CodeBleu_score": 49.52643807441442}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn Flux.fromIterable(module.getDependencies())\n        .filter(dependency -> !circularDependencyCheckSet.contains(dependency))\n        .flatMap(dependency -> getApplication(dependency)\n            .doOnNext(dependentModule -> {\n                if (!circularDependencyCheckSet.add(dependentModule.getId())) {\n                    log.warn(\"Circular dependency detected between modules \" + module.getId() + \" and \" + dependentModule.getId());\n                }\n            }))\n        .collectList()\n        .map(dependentModules -> {\n            module.setDependencies(dependentModules);\n            return module;\n        })\n        .onErrorResume(e -> {\n            log.warn(\"Error retrieving dependent modules for module \" + module.getId(), e);\n            return Flux.just(module);\n        });\n}", "CodeBleu_score": 49.15860578231187}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n        if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n            Object comp = map.get(\"comp\");\n            if (comp instanceof Map<?, ?> compMap) {\n                String appId = (String) compMap.get(\"appId\");\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        }\n\n        map.forEach((key, value) -> {\n            if (value instanceof Map<?, ?> valueMap) {\n                doGetDependentModules(valueMap, dependentModuleIds);\n            }\n            if (value instanceof List<?> valueList) {\n                valueList.forEach(i -> {\n                    if (i instanceof Map<?, ?> iMap) {\n                        doGetDependentModules(iMap, dependentModuleIds);\n                    }\n                });\n            }\n        });\n    }", "CodeBleu_score": 97.11303639608452}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tif (createThumbnail) {\n            dataBuffer = new DataBuffer(resizeImage(dataBuffer));\n            srcContentType = MediaType.IMAGE_JPEG;\n        }\n        Asset asset = new Asset(dataBuffer, srcContentType);\n        DataBufferUtils.release(dataBuffer);\n        return asset;\n    }", "CodeBleu_score": 41.806838242979524}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tByteArrayInputStream in = new ByteArrayInputStream(dataBuffer.asInputStream().readAllBytes());\n        ByteArrayOutputStream out = new ByteArrayOutputStream();\n        ImageIO.write(ImageIO.read(in), \"jpg\", out);\n        ByteArrayInputStream assetContent = new ByteArrayInputStream(out.toByteArray());\n        MediaType contentType = srcContentType;\n        if (createThumbnail) {\n            contentType = MediaType.IMAGE_JPEG;\n        }\n        DataBufferUtils.release(dataBuffer);\n        return new Asset(assetContent, contentType);\n    }", "CodeBleu_score": 46.09209637048579}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = null;\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        } else {\n            data = DataBufferUtils.getByteArray(dataBuffer);\n        }\n        DataBufferUtils.release(dataBuffer);\n        MediaType contentType = srcContentType;\n        if (createThumbnail) {\n            contentType = MediaType.IMAGE_JPEG;\n        }\n        Asset asset = new Asset();\n        asset.setContent(data);\n        asset.setContentType(contentType);\n        return asset;\n    }", "CodeBleu_score": 51.82999554456384}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n                .flatMap(asset -> {\n                    if (asset.getContentType() != null) {\n                        exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                    }\n                    exchange.getResponse().setStatusCode(HttpStatus.OK);\n                    return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n                });\n    }", "CodeBleu_score": 45.74555861332513}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n                .flatMap(asset -> {\n                    exchange.getResponse().setStatusCode(HttpStatus.OK);\n                    if (asset.getContentType() != null) {\n                        exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                    }\n                    return exchange.getResponse().writeWith(Flux.just(DataBufferUtils.write(asset.getData(), exchange.getResponse())));\n                });\n    }", "CodeBleu_score": 42.64460628439492}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n        .flatMap(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n            }\n            return exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n        });\n}", "CodeBleu_score": 44.38227086762587}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn Flux.defer(() -> {\n        if (isSaaS()) {\n            return Flux.empty();\n        } else {\n            return organizationRepository.findAll()\n                    .map(organization -> organization.getAuthConfigs())\n                    .flatMap(Flux::fromIterable)\n                    .map(authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getName(), authConfig.getType(), authConfig.getConfig(), authConfig.getOrganizationId(), authConfig.getOrganizationName()))\n                    .sort(Comparator.comparing(FindAuthConfig::getName));\n        }\n    });\n}", "CodeBleu_score": 31.5128087309425}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\t\treturn Flux.empty();\n\t\t}\n\t\treturn organizationRepository.findAll()\n\t\t\t\t.map(organization -> new FindAuthConfig(organization.getId(), organization.getName(), organization.getDomainName(), organization.getAuthenticationType()))\n\t\t\t\t.sort(Comparator.comparing(FindAuthConfig::getName));\n\t}", "CodeBleu_score": 30.296194965900362}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn Flux.just(new FindAuthConfig());\n}", "CodeBleu_score": 7.7624839931469}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockApplicationRunner mongockApplicationRunner = MongockSpring5.builder()\n        .setApplicationContext(springContext)\n        .setSpringDataMongoTemplate(mongoTemplate)\n        .setPackagesToScan(\"com.example.mongock.changelogs\")\n        .setLockQuickConfig()\n        .build();\n    return mongockApplicationRunner;\n}", "CodeBleu_score": 41.02848018751439}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockApplicationRunner runner = MongockSpring5.builder()\n            .setSpringContext(springContext)\n            .setApplicationName(\"mongock-demo\")\n            .setMongoTemplate(mongoTemplate)\n            .setChangeLogsScanPackage(\"com.example.demo.changelogs\")\n            .setLockQuickConfig()\n            .setTransactionEnabled(true)\n            .setTransactionTemplate(new SpringTransactionTemplate(mongoTemplate))\n            .build();\n    return runner;\n}", "CodeBleu_score": 44.23315343204513}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockApplicationConfiguration mongockApplicationConfiguration = new MongockApplicationConfiguration();\n    mongockApplicationConfiguration.setSpringContext(springContext);\n    mongockApplicationConfiguration.setMongoTemplate(mongoTemplate);\n    mongockApplicationConfiguration.setChangeLogsScanPackage(\"com.example.mongock.changelogs\");\n    mongockApplicationConfiguration.setLockAcquiredForMinutes(5);\n    mongockApplicationConfiguration.setLockQuitTryingAfterSeconds(5);\n    mongockApplicationConfiguration.setMaxTries(5);\n    mongockApplicationConfiguration.setEnabled(true);\n    mongockApplicationConfiguration.setThrowExceptionIfCannotObtainLock(true);\n    mongockApplicationConfiguration.setThrowExceptionIfCannotInitialize(true);\n    mongockApplicationConfiguration.setThrowExceptionIfCannotObtainLock(true);\n    mongockApplicationConfiguration.setThrowExceptionIfValidationFails(true);\n\n    MongockApplicationRunner mongockApplicationRunner = new MongockApplicationRunner(mongockApplicationConfiguration);\n\n    return mongockApplicationRunner;\n}", "CodeBleu_score": 31.34681468269661}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setWriteConcern(WriteConcern.ACKNOWLEDGED);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 67.10814800116336}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setWriteConcern(WriteConcern.ACKNOWLEDGED);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 68.90558141630969}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.21973361724991}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findLatestLibraryQuery(libraryQueryId)\n                .switchIfEmpty(Mono.just(LibraryQuery.builder()\n                        .libraryQueryId(libraryQueryId)\n                        .build()))\n                .flatMap(libraryQuery -> {\n                    if (libraryQuery.getDsl() != null) {\n                        return Mono.just(libraryQuery.getDsl());\n                    }\n                    return libraryQueryRepository.findById(libraryQueryId)\n                            .map(LibraryQuery::getDsl);\n                });\n    }", "CodeBleu_score": 52.63089089391608}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findById(libraryQueryId)\n                .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n                .flatMap(libraryQuery -> {\n                    if (libraryQuery.getLatestLibraryQueryDsl() != null) {\n                        return Mono.just(libraryQuery.getLatestLibraryQueryDsl());\n                    } else {\n                        return libraryQueryService.getById(libraryQueryId)\n                                .map(LibraryQuery::getDsl);\n                    }\n                });\n    }", "CodeBleu_score": 50.655247231300606}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findLatestLibraryQueryRecordByLibraryQueryId(libraryQueryId)\n            .switchIfEmpty(Mono.error(new ResponseStatusException(HttpStatus.NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\")))\n            .map(libraryQueryRecord -> {\n                Map<String, Object> dsl = libraryQueryRecord.getDsl();\n                if (dsl == null) {\n                    throw new ResponseStatusException(HttpStatus.NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\");\n                }\n                return dsl;\n            });\n}", "CodeBleu_score": 39.63077752719013}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t// Parse timeout duration from the query config\n        Duration timeout = Duration.ofMillis(Long.parseLong(timeoutStr));\n        // Create a deferred that will be used to execute the query\n        Mono<QueryExecutionResult> queryExecutionResultMono = null;\n\n        // If the datasource type is Node.js, execute the query on Node.js\n        if (datasource.getType().equalsIgnoreCase(NodeJsDatasource.NODE_JS_TYPE)) {\n            queryExecutionResultMono = executeByNodeJs(datasource, queryConfig, requestParams);\n        } else {\n            // Else, execute the query locally\n            queryExecutionResultMono = executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n\n        // Create a timeout exception that will be used to cancel the query execution\n        TimeoutException timeoutException = new TimeoutException(\"Query execution timed out\");\n\n        // Create a Mono that will be used to cancel the query execution\n        Mono<Void> timeoutMono = Mono.delay(timeout).flatMap(unused -> Mono.error(timeoutException));\n\n        // Zip the query execution Mono and the timeout Mono together and then switch to the query execution Mono. This will ensure that the query execution Mono is always executed, even if the timeout Mono is cancelled.\n        return Mono.zip(queryExecutionResultMono, timeoutMono)\n                .flatMap(tuple -> {\n                    QueryExecutionResult queryExecutionResult = tuple.getT1();\n                    return Mono.just(queryExecutionResult);\n                })\n                .onErrorResume(throwable -> {\n                    // If the query execution Mono throws a TimeoutException, map it to a plugin exception\n                    if (throwable.getCause() instanceof TimeoutException) {\n                        return Mono.just(new PluginException(PluginError.TIMEOUT_ERROR, \"Query execution timed out\"));\n                    }\n                    // If the query execution Mono throws an error, log the error and map it to a generic query execution error\n                    else {\n                        log.error(\"Error executing query\", throwable);\n                        return Mono.just(new Query", "CodeBleu_score": 47.39579733296168}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDuration timeout = Duration.ofMillis(Long.parseLong(timeoutStr));\n        Mono<QueryExecutionResult> resultMono = null;\n        if (datasource.getType().equalsIgnoreCase(PluginType.JAVASCRIPT.toString())) {\n            resultMono = executeByNodeJs(datasource, queryConfig, requestParams);\n        } else {\n            resultMono = executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n        return resultMono.timeout(timeout)\n                .onErrorResume(e -> e instanceof TimeoutException, e -> Mono.just(new QueryExecutionResult(\n                        new QueryExecutionResult.ErrorDetails(\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.toMillis() + \"ms\",\n                                \"Query timed out after \" + timeout.to", "CodeBleu_score": 38.289099422761616}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tMono<QueryExecutionResult> queryExecutionResultMono;\n        try {\n            long timeout = Long.parseLong(timeoutStr);\n            queryExecutionResultMono = Mono.defer(() -> {\n                if (datasource.getDatasourceConfiguration().getIsNode()) {\n                    return executeByNodeJs(datasource, queryConfig, requestParams);\n                } else {\n                    return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n                }\n            }).timeout(Duration.ofMillis(timeout))\n                    .onErrorResume(t -> {\n                        if (t instanceof TimeoutException) {\n                            return Mono.just(new QueryExecutionResult(\n                                    new AppsmithPluginException(\n                                            AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                                            \"Query timed out after \" + timeout + \" milliseconds.\"\n                                    )\n                            ));\n                        } else {\n                            log.error(\"Error executing query\", t);\n                            return Mono.just(new QueryExecutionResult(\n                                    new AppsmithPluginException(\n                                            AppsmithPluginError.PLUGIN_ERROR,\n                                            \"Error executing query: \" + t.getMessage()\n                                    )\n                            ));\n                        }\n                    });\n        } catch (NumberFormatException e) {\n            log.error(\"Error parsing timeout value\", e);\n            queryExecutionResultMono = Mono.just(new QueryExecutionResult(\n                    new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_ERROR,\n                            \"Error parsing timeout value: \" + timeoutStr\n                    )\n            ));\n        }\n\n        return queryExecutionResultMono;\n    }", "CodeBleu_score": 49.593150946478836}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\n\n        // Build the query execution context\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n\n        // Acquire a connection from the datasource connection pool\n        return Mono.from(datasource.getConnection())\n                // Execute the query\n                .flatMap(connection -> queryExecutor.execute(connection, queryExecutionContext))\n                // Release the connection to the datasource connection pool\n                .doFinally(signal -> connection.close())\n                // Handle any errors that occur during execution\n                .onErrorResume(error -> Mono.just(new QueryExecutionResult(error)));\n    }", "CodeBleu_score": 38.51598235913195}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn Mono.fromCallable(() -> {\n            // get query executor based on datasource type\n            QueryExecutor queryExecutor = QueryExecutorFactory.get(datasource.getDatasourceConfiguration());\n\n            // build query execution context\n            QueryExecutionContext queryExecutionContext = new QueryExecutionContext(\n                    datasource,\n                    queryConfig,\n                    requestParams,\n                    queryVisitorContext,\n                    pluginExecutor);\n\n            // acquire connection from the datasource connection pool\n            Connection connection = datasource.getConnection();\n\n            // execute the query\n            QueryExecutionResult queryExecutionResult = queryExecutor.execute(queryExecutionContext, connection);\n\n            // close the connection\n            connection.close();\n\n            return queryExecutionResult;\n        });\n    }", "CodeBleu_score": 49.223178534428435}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tMono<QueryExecutor> queryExecutorMono = getQueryExecutor(datasource);\n        Mono<Connection> connectionMono = Mono.fromCallable(() -> getConnection(datasource));\n        Mono<QueryExecutionResult> queryExecutionResultMono = Mono.zip(queryExecutorMono, connectionMono)\n                .flatMap(tuple -> {\n                    QueryExecutor queryExecutor = tuple.getT1();\n                    Connection connection = tuple.getT2();\n                    QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext, connection);\n                    return queryExecutor.execute(queryExecutionContext);\n                });\n\n        return queryExecutionResultMono;\n    }", "CodeBleu_score": 49.57030894160936}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tint timeoutMs;\n        if (StringUtils.isBlank(timeoutStr)) {\n            timeoutMs = DEFAULT_QUERY_TIMEOUT_MS;\n        } else {\n            String valueStr = StringUtils.substringBefore(timeoutStr, \" \");\n            String unit = StringUtils.substringAfter(timeoutStr, \" \");\n            if (StringUtils.isBlank(valueStr) || StringUtils.isBlank(unit)) {\n                throw new IllegalArgumentException(\"Invalid timeout format: \" + timeoutStr);\n            }\n            int value;\n            try {\n                value = Integer.parseInt(valueStr);\n            } catch (NumberFormatException e) {\n                throw new IllegalArgumentException(\"Invalid timeout format: \" + timeoutStr);\n            }\n            Pair<String, Integer> unitInfo = getUnitInfo(unit);\n            if (unitInfo.getLeft().equals(\"ms\")) {\n                timeoutMs = value;\n            } else {\n                timeoutMs = convertToMs(value, unitInfo.getLeft());\n            }\n            if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n                throw new IllegalArgumentException(\"Query timeout cannot be greater than \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n            }\n        }\n        return timeoutMs;\n    }", "CodeBleu_score": 44.61979825769821}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (timeoutStr == null || timeoutStr.trim().isEmpty()) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        int unitIndex = StringUtils.indexOfAny(timeoutStr, 'M', 'm');\n        if (unitIndex == -1) {\n            unitIndex = StringUtils.indexOfAny(timeoutStr, 'S', 's');\n        }\n        if (unitIndex == -1) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        String unit = timeoutStr.substring(unitIndex).toLowerCase();\n        String valueStr = timeoutStr.substring(0, unitIndex);\n        double value;\n        try {\n            value = Double.parseDouble(valueStr);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Query timeout \" + timeoutStr + \" is greater than the maximum allowed timeout \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n        }\n        return timeoutMs;\n    }", "CodeBleu_score": 49.90394727267513}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n        double value = Double.parseDouble(timeoutStr.substring(0, unitIndex));\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs < 0) {\n            throw new IllegalArgumentException(String.format(\"Timeout value must be non-negative: %s\", timeoutStr));\n        }\n        if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(String.format(\"Timeout value must not exceed %d: %s\", MAX_QUERY_TIMEOUT_MS, timeoutStr));\n        }\n        return timeoutMs;\n    }", "CodeBleu_score": 61.000337494392994}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueriesFromApplication(application)\n                .flatMap(liveQueryList -> {\n                    if (liveQueryList.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"Live Query\"));\n                    }\n\n                    List<String> datasourceIds = liveQueryList.stream()\n                            .map(LiveQuery::getDatasourceId)\n                            .collect(Collectors.toList());\n\n                    return copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, datasourceIds, visitorId);\n                });\n    }", "CodeBleu_score": 42.483569463791085}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getLiveQueries(application)\n                .flatMap(queries -> {\n                    if (CollectionUtils.isEmpty(queries)) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_DATASOURCE_FOUND));\n                    }\n                    List<String> datasourceIds = queries.stream()\n                            .map(Query::getDatasource)\n                            .collect(Collectors.toList());\n                    return copyDatasourceFromTemplateToCurrentOrganization(currentOrganizationId, datasourceIds, visitorId);\n                });\n    }", "CodeBleu_score": 43.647086891890254}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn applicationService.getApplicationById(application.getId())\n                .flatMap(app -> {\n                    List<String> datasourceIds = new ArrayList<>();\n                    List<String> copiedDatasourceIds = new ArrayList<>();\n                    List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n                    List<String> liveQueryIds = new ArrayList<>();\n                    app.getPages()\n                            .forEach(page -> {\n                                page.getLayouts()\n                                        .forEach(layout -> {\n                                            layout.getDsl()\n                                                    .forEach((key, dsl) -> {\n                                                        if (dsl instanceof Layout) {\n                                                            ((Layout) dsl).getLayoutOnLoadActions()\n                                                                    .forEach(action -> {\n                                                                        if (action.getCollection() != null) {\n                                                                            liveQueryIds.add(action.getCollection().getQueryId());\n                                                                        }\n                                                                    });\n                                                        }\n                                                    });\n                                        });\n                            });\n\n                    if (liveQueryIds.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_LIVE_QUERY_FOUND_ERROR));\n                    }\n\n                    return datasourceService.getAllByOrganizationId(application.getOrganizationId())\n                            .collectList()\n                            .flatMap(datasources -> {\n                                liveQueryIds.forEach(queryId -> {\n                                    datasources.forEach(datasource -> {\n                                        if (datasource.getQueries() != null) {\n                                            datasource.getQueries()\n                                                    .forEach(query -> {\n                                                        if (queryId.equals(query.getId())) {\n                                                            datasourceIds.add(datasource.getId());\n                                                        }\n                                                    });\n                                        }\n                                    });\n                                });\n\n                                if (datasourceIds.isEmpty()) {\n                                    return Mono.error(new AppsmithException(Appsmith", "CodeBleu_score": 28.399540065332808}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.findById(datasourceId)\n                .flatMap(datasource -> {\n                    if (datasource.getIsSystem()) {\n                        return Mono.just(datasource.getId());\n                    }\n                    if (datasource.getIsLegacyQuickRestApi() || datasource.getIsLegacyOpenBlocksApi()) {\n                        return datasource.getIsLegacyQuickRestApi() ?\n                                quickRestApiService.getById(datasource.getLegacyQuickRestApiId())\n                                        .map(QuickRestApi::getId)\n                                : openBlocksService.getById(datasource.getLegacyOpenBlocksApiId())\n                                        .map(OpenBlocksApi::getId);\n                    }\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                });\n    }", "CodeBleu_score": 60.99319872304992}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystem() && datasource.getIsStatic()) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.getIsSystem() && datasource.getIsLegacyQuickRestApi()) {\n                    return Mono.just(datasource.getLegacyQuickRestApiId());\n                } else if (datasource.getIsSystem() && datasource.getIsLegacyOpenBlocksApi()) {\n                    return Mono.just(datasource.getLegacyOpenBlocksApiId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 55.45469507322981}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystem() && datasource.getIsStatic()) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.getIsLegacyQuickRestApi()) {\n                    return datasourceService.getById(datasource.getLegacyQuickRestApiDatasourceId())\n                            .map(datasource1 -> datasource1.getId());\n                } else if (datasource.getIsLegacyOpenBlocks()) {\n                    return datasourceService.getById(datasource.getLegacyOpenBlocksDatasourceId())\n                            .map(datasource1 -> datasource1.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 56.46433337757977}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn fileService.saveFile(filePart)\n                .flatMap(newAvatar -> {\n                    return updateUserAvatar(newAvatar, user.getId());\n                });\n    }", "CodeBleu_score": 17.0338687431729}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\tString userId = user.getId();\n        String fileName = filePart.filename();\n        String contentType = filePart.headers().getContentType().get();\n        String userAvatarId = user.getAvatar();\n        Mono<Asset> newAvatar = assetService.uploadAsset(filePart, fileName, contentType);\n        Mono<Boolean> deleteOldAvatar = Mono.empty();\n        if (userAvatarId != null) {\n            deleteOldAvatar = assetService.deleteAsset(userAvatarId);\n        }\n        return newAvatar.flatMap(asset -> {\n            return deleteOldAvatar.flatMap(deleted -> {\n                return updateUserAvatar(asset, userId);\n            });\n        });\n    }", "CodeBleu_score": 44.83605530346628}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn Mono.fromCallable(() -> {\n            String fileName = filePart.getSubmittedFileName();\n            String fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n            String filePath = \"users/\" + user.getId() + \"/\" + fileName;\n            String newFilePath = \"users/\" + user.getId() + \"/\" + fileName + \"_\" + UUID.randomUUID().toString() + \".\" + fileType;\n            String oldFilePath = user.getAvatar();\n            try {\n                filePart.write(newFilePath);\n                user.setAvatar(newFilePath);\n                if (oldFilePath != null) {\n                    fileSystemService.deleteFile(oldFilePath);\n                }\n                mongoUpsertHelper.updateById(user, user.getId());\n                return true;\n            } catch (IOException e) {\n                e.printStackTrace();\n                return false;\n            }\n        });\n    }", "CodeBleu_score": 39.142378825286016}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setEnabled(authUser.isEnabled());\n    user.setAvatar(authUser.getAvatar());\n    user.setAuthSource(authUser.getAuthSource());\n    user.setAuthContext(authUser.getAuthContext());\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    if (authUser.getAuthSource() == AuthSource.EMAIL) {\n        if (authUser.getAuthContext().containsKey(AuthContextKeys.PASSWORD)) {\n            user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContextKeys.PASSWORD)));\n        }\n    }\n    return repository.save(user);\n}", "CodeBleu_score": 47.05792228973259}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n        user.setName(authUser.getName());\n        user.setState(authUser.getState());\n        user.setEnabled(authUser.isEnabled());\n        user.setAvatar(authUser.getAvatar());\n        user.setAuthSource(authUser.getAuthSource());\n        user.setAuthContext(authUser.getAuthContext());\n        user.setNew(true);\n\n        if (authUser.getAuthSource() == AuthSource.EMAIL) {\n            if (authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n                user.setPassword(encryptionService.encryptPassword((String) authUser.getAuthContext().get(AuthContext.PASSWORD)));\n            }\n        }\n\n        return create(user);\n    }", "CodeBleu_score": 46.30688958483657}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setEnabled(authUser.isEnabled());\n    user.setAvatar(authUser.getAvatar());\n    user.setAuthSource(authUser.getAuthSource());\n    user.setAuthContext(authUser.getAuthContext());\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n\n    if (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(\"password\")) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\")));\n    }\n\n    return repository.save(user);\n}", "CodeBleu_score": 43.96398372524316}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.from(this.emailSource.findByEmail(email))\n            .flatMap(email -> {\n                if (email.getUser() != null) {\n                    return Mono.error(new DuplicateKeyException(\"Email already bound to another user\"));\n                }\n                email.setUser(user);\n                return this.emailSource.save(email);\n            })\n            .flatMap(email -> {\n                user.getEmails().add(email);\n                return this.userSource.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 33.1129286903679}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.from(emailSource.createConnection(email))\n        .flatMap(connection -> {\n            user.getConnections().add(connection);\n            return userRepository.save(user);\n        })\n        .map(user -> true)\n        .onErrorResume(e -> {\n            if (e instanceof DuplicateKeyException) {\n                return Mono.just(false);\n            }\n            return Mono.error(e);\n        });\n}", "CodeBleu_score": 32.5472925497706}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.just(user)\n            .flatMap(u -> {\n                Connection connection = new Connection();\n                connection.setUserId(u.getId());\n                connection.setProvider(Connection.Provider.EMAIL);\n                connection.setProviderUserId(email);\n                connection.setDisplayName(email);\n                connection.setProfileUrl(email);\n                connection.setImageUrl(email);\n                return connectionRepository.save(connection).then(Mono.just(u));\n            })\n            .flatMap(u -> userRepository.save(u).then(Mono.just(true)))\n            .onErrorResume(err -> {\n                if (err instanceof DuplicateKeyException) {\n                    return Mono.just(false);\n                }\n                return Mono.error(err);\n            });\n}", "CodeBleu_score": 43.68170712239675}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!encryptionService.isValidPassword(user.getPassword(), oldPassword)) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 30.08517546893951}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\n                    throw new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\");\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 32.05105135863413}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!encryptionService.isPasswordValid(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 30.187987097098095}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t// Get the list of groups for the user\n        return getUserGroups(userId, orgMember, withoutDynamicGroups)\n                .collectList()\n                .map(groups -> {\n                    // Filter out the \"all users\" group\n                    List<String> groupIds = groups.stream()\n                            .filter(group -> !group.getId().equals(Group.ALL_USERS_GROUP_ID))\n                            .map(Group::getId)\n                            .collect(Collectors.toList());\n\n                    // Get the localized names for the groups\n                    return groupService.getGroupNames(groupIds, locale)\n                            .collectList()\n                            .map(groupNames -> {\n                                // Map the group IDs to group names\n                                return groupNames.stream()\n                                        .map(groupName -> {\n                                            Map<String, String> group = new HashMap<>();\n                                            group.put(\"id\", groupName.getId());\n                                            group.put(\"name\", groupName.getName());\n                                            return group;\n                                        })\n                                        .collect(Collectors.toList());\n                            });\n                });\n    }", "CodeBleu_score": 34.8327069905511}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn getUserDetails(userId)\n                .flatMap(user -> {\n                    if (user.getIsDeleted()) {\n                        return Mono.error(new UserNotFoundException(userId));\n                    }\n                    return Mono.just(user);\n                })\n                .flatMap(user -> {\n                    if (orgMember.getIsAdmin()) {\n                        return getAllGroups(locale);\n                    } else {\n                        return getGroupsWithoutAdminGroups(userId, orgMember, locale, withoutDynamicGroups);\n                    }\n                });\n    }", "CodeBleu_score": 25.752277807150058}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn Mono.zip(\n                getGroupIdsForUser(userId, orgMember, withoutDynamicGroups),\n                getGroupNames(orgMember.getOrganization().getId(), locale)\n        ).map(tuple -> {\n            List<String> groupIds = tuple.getT1();\n            List<Map<String, String>> groupNames = tuple.getT2();\n            return groupNames.stream()\n                    .filter(group -> groupIds.contains(group.get(\"id\")))\n                    .collect(Collectors.toList());\n        });\n    }", "CodeBleu_score": 25.93311556250184}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId, true);\n    return mongoUpsertHelper.upsert(UserStatus.class, userStatus, \"userId\", userStatus.getUserId())\n            .thenReturn(true);\n}", "CodeBleu_score": 40.02738383606657}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus newUserStatus = new UserStatus();\n    newUserStatus.setUserId(userId);\n    newUserStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(newUserStatus);\n}", "CodeBleu_score": 31.08572030690022}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class, \"userId\");\n}", "CodeBleu_score": 38.81389698137217}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tc.RLock()\n\tdefer c.RUnlock()\n\tvar wg sync.WaitGroup\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\twg.Done()\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 37.507112889217794}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\trunGroup := new(sync.WaitGroup)\n\n\t// Enqueue each partition that satisfies the partition predicate.\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.Key, partition) {\n\t\t\trunGroup.Add(1)\n\t\t\tgo func(partition *Partition) {\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t\trunGroup.Done()\n\t\t\t}(partition)\n\t\t}\n\t}\n\n\t// Wait for all tasks to complete.\n\trunGroup.Wait()\n}", "CodeBleu_score": 38.52029551376383}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\tc.RLock()\n\tdefer c.RUnlock()\n\tvar wg sync.WaitGroup\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.partitionName, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\twg.Done()\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 37.93600113361857}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n}", "CodeBleu_score": 40.70928711501141}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn (maxItemsTotal * avgWeightPerPartition) / (maxItemsTotal + avgWeightPerPartition)\n}", "CodeBleu_score": 37.77873054835348}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(avgWeightPerPartition)))\n}", "CodeBleu_score": 40.70928711501141}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\treturn Mono.from(this.getConnectionMetadata()).map(ConnectionMetadata::getDatabaseProductName).defaultIfEmpty(null).map(productName -> {\n        Map<String, Object> contributorMap = new HashMap<>();\n        contributorMap.put(DATABASE_PRODUCT_NAME, productName);\n        contributorMap.put(DATABASE_PRODUCT_VERSION, this.getDatabaseVersion());\n        return contributorMap;\n    }).block();\n}", "CodeBleu_score": 29.321444513972295}, {"code": "public Map<String, Object> contributorMap(){\n\treturn Mono.from(getConnectionMetadata())\n            .map(metadata -> {\n                Map<String, Object> map = new HashMap<>();\n                if (metadata != null) {\n                    map.put(DATABASE_PRODUCT_NAME, metadata.getDatabaseProductName());\n                    map.put(DATABASE_PRODUCT_VERSION, metadata.getDatabaseProductVersion());\n                }\n                return map;\n            })\n            .block();\n    }", "CodeBleu_score": 32.70585087319996}, {"code": "public Map<String, Object> contributorMap(){\n\treturn getConnectionMetadata().block()\n        .map(ConnectionMetadata::getDatabaseProductName)\n        .map(dbName -> {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"db.vendor\", dbName);\n            return map;\n        })\n        .orElse(Collections.emptyMap());\n}", "CodeBleu_score": 34.08790888399391}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tMap<String, Object> userSettings = (Map<String, Object>) configMap.get(\"user\");\n    if (userSettings == null) {\n        info.setRegisterEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setRegisterEnabled((Boolean) userSettings.get(\"register\"));\n        info.setEmailVerificationEnabled((Boolean) userSettings.get(\"emailVerification\"));\n    }\n}", "CodeBleu_score": 44.46152173000414}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tif (configMap.get(\"user\") != null) {\n\t\tConfigMap userSettings = (ConfigMap) configMap.get(\"user\");\n\t\tif (userSettings.get(\"registration\") != null) {\n\t\t\tConfigMap registrationSettings = (ConfigMap) userSettings.get(\"registration\");\n\t\t\tif (registrationSettings.get(\"enabled\") != null) {\n\t\t\t\tinfo.setUserRegistrationEnabled((Boolean) registrationSettings.get(\"enabled\"));\n\t\t\t}\n\t\t\tif (registrationSettings.get(\"emailVerification\") != null) {\n\t\t\t\tConfigMap emailVerificationSettings = (ConfigMap) registrationSettings.get(\"emailVerification\");\n\t\t\t\tif (emailVerificationSettings.get(\"enabled\") != null) {\n\t\t\t\t\tinfo.setUserEmailVerificationEnabled((Boolean) emailVerificationSettings.get(\"enabled\"));\n\t\t\t\t}\n\t\t\t\tif (emailVerificationSettings.get(\"emailSubject\") != null) {\n\t\t\t\t\tinfo.setUserEmailVerificationEmailSubject((String) emailVerificationSettings.get(\"emailSubject\"));\n\t\t\t\t}\n\t\t\t\tif (emailVerificationSettings.get(\"emailBody\") != null) {\n\t\t\t\t\tinfo.setUserEmailVerificationEmailBody((String) emailVerificationSettings.get(\"emailBody\"));\n\t\t\t\t}\n\t\t\t\tif (emailVerificationSettings.get(\"emailBodyHtml\") != null) {\n\t\t\t\t\tinfo.setUserEmailVerificationEmailBodyHtml((String) emailVerificationSettings.get(\"emailBodyHtml\"));\n\t\t\t\t}\n\t\t\t\tif (emailVerificationSettings.get(\"emailBodyText\") != null) {\n\t\t\t\t\tinfo.setUserEmailVerificationEmailBodyText((String) emailVerificationSettings.get(\"emailBodyText\"));\n\t\t\t\t}\n\t\t\t\tif (emailVerificationSettings.get(\"emailBodyTextHtml\") != null) {\n\t\t\t\t\tinfo.setUserEmailVerificationEmailBodyTextHtml((String) emailVerificationSettings.get(\"emailBodyTextHtml\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 26.566748733800516}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t// Get user settings from configuration map\n\tMap<String, Object> userSettings = (Map<String, Object>) configMap.get(\"user\");\n\t\n\t// If user settings are null, disable registration and email verification\n\tif (userSettings == null) {\n\t\tinfo.setRegister(false);\n\t\tinfo.setEmailVerification(false);\n\t}\n\t\n\t// Otherwise, update the GlobalInfo object with the retrieved settings\n\telse {\n\t\t\n\t\t// Get registration setting\n\t\tBoolean registration = (Boolean) userSettings.get(\"registration\");\n\t\t\n\t\t// If registration setting is null, disable registration\n\t\tif (registration == null) {\n\t\t\tinfo.setRegister(false);\n\t\t}\n\t\t\n\t\t// Otherwise, update the GlobalInfo object with the retrieved registration setting\n\t\telse {\n\t\t\tinfo.setRegister(registration);\n\t\t}\n\t\t\n\t\t// Get email verification setting\n\t\tBoolean emailVerification = (Boolean) userSettings.get(\"emailVerification\");\n\t\t\n\t\t// If email verification setting is null, disable email verification\n\t\tif (emailVerification == null) {\n\t\t\tinfo.setEmailVerification(false);\n\t\t}\n\t\t\n\t\t// Otherwise, update the GlobalInfo object with the retrieved email verification setting\n\t\telse {\n\t\t\tinfo.setEmailVerification(emailVerification);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.12707207374869}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t// Create a new thread group to isolate the restart process from the current thread group\n\tThreadGroup tg = new ThreadGroup(\"Restart\");\n\t// Create a new thread to execute the restart process\n\tThread t = new Thread(tg, new Runnable() {\n\t\tpublic void run() {\n\t\t\t// Set the thread as non-daemon\n\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t// Assign the application class loader as the context class loader\n\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\t\t// Execute the restart process\n\t\t\ttry {\n\t\t\t\t// Get the path to the application directory\n\t\t\t\tString path = getClass().getProtectionDomain().getCodeSource().getLocation().getPath();\n\t\t\t\t// Get the path to the application directory\n\t\t\t\tpath = path.substring(0, path.lastIndexOf('/') + 1);\n\t\t\t\t// Create a new process builder\n\t\t\t\tProcessBuilder pb = new ProcessBuilder();\n\t\t\t\t// Set the path to the application directory as the process builder's working directory\n\t\t\t\tpb.directory(new File(path));\n\t\t\t\t// Set the path to the application's executable as the process builder's command\n\t\t\t\tpb.command(path + getClass().getSimpleName() + \".exe\");\n\t\t\t\t// Execute the process builder\n\t\t\t\tpb.start();\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Log the exception\n\t\t\t\tSystem.err.println(\"Unable to restart application: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t});\n\t// Start the thread\n\tt.start();\n\t// Return a message indicating the restart has begun\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 40.77972465365778}, {"code": "public Object restart(){\n\t// create new thread group\n\tThreadGroup group = new ThreadGroup(\"Restart\");\n\t// create new thread\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\t// set context class loader to application class loader\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\t\t\t// set thread to non-daemon\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\t// start application\n\t\t\t\tstart();\n\t\t\t} catch (Exception e) {\n\t\t\t\t// log error\n\t\t\t\tLogger.error(\"Error restarting application\", e);\n\t\t\t}\n\t\t}\n\t});\n\t// start thread\n\tthread.start();\n\t// return message\n\treturn \"Application restart has begun.\";\n}", "CodeBleu_score": 42.64275831122444}, {"code": "public Object restart(){\n\tThreadGroup group = new ThreadGroup(\"Restart\");\n    Thread thread = new Thread(group, new Runnable() {\n        public void run() {\n            try {\n                // Create a new class loader and load the application class\n                ClassLoader loader = new ApplicationClassLoader(getClass().getClassLoader());\n                Class<?> applicationClass = loader.loadClass(getClass().getName());\n\n                // Create a new instance of the application class\n                Object application = applicationClass.newInstance();\n\n                // Invoke the restart method on the application instance\n                Method restartMethod = applicationClass.getMethod(\"restart\", new Class<?>[]{});\n                restartMethod.invoke(application, new Object[]{});\n            } catch (Exception e) {\n                // Log the exception\n                e.printStackTrace();\n            }\n        }\n    });\n    thread.setContextClassLoader(getClass().getClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restart has begun\";\n}", "CodeBleu_score": 42.31233741458741}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tObjectMapper objectMapper = new ObjectMapper();\n    objectMapper.registerModule(new JavaTimeModule());\n    objectMapper.disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);\n    objectMapper.disable(DeserializationFeature.ADJUST_DATES_TO_CONTEXT_TIME_ZONE);\n    objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\n    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 42.809236814591415}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n  configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 71.067616333255}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.41180996545182}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n                        .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                        .and(RequestPredicates.not(RequestPredicates.headers(HttpHeaders.UPGRADE, WebSocketHttpHeaders.SEC_WEBSOCKET_EXTENSIONS)))\n                        .and(RequestPredicates.not(RequestPredicates.pathExtension(\"html\"))),\n                (request) -> serveIndex(\"/console/index.html\"));\n    }", "CodeBleu_score": 21.605675534362568}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.webSocket()))\n                .and(RequestPredicates.pathMatchers(PathPatterns.ant(\"!/console/assets/**\"))),\n                request -> serveIndex(\"/console/index.html\"));\n    }", "CodeBleu_score": 28.19815431182704}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.WebSocket()))\n                .and(RequestPredicates.not(\"/console/assets/**\")))\n                .andRoute(r -> serveIndex(\"/console/index.html\"));\n    }", "CodeBleu_score": 28.88940879964843}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n        .and(RequestPredicates.accept(MediaType.TEXT_HTML)\n            .and(RequestPredicates.not(RequestPredicates.headers(HttpHeaders.UPGRADE, \"websocket\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"html\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"js\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"css\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"png\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ico\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff2\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ttf\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"svg\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"map\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"json\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"txt\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"eot\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"otf\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"swf\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"mp4\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"mp3\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff\")))\n            .and(RequestPredicates.not(RequestPredicates.path", "CodeBleu_score": 11.753089085724167}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML)\n                .and(RequestPredicates.not(RequestPredicates.WebSocket()))\n                .and(RequestPredicates.not(RequestPredicates.pathExtension(\"assets\"))))\n            .and(request -> serveIndex(\"/uc/index.html\").onErrorResume(throwable -> Mono.empty())),\n            request -> serveIndex(\"/uc/index.html\"));\n    }", "CodeBleu_score": 26.014715882884122}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"html\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"js\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"css\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"png\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"jpg\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ico\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"woff2\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ttf\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"svg\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"map\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"json\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"txt\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"eot\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"otf\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"wasm\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"mp4\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"webm\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ogv\")))\n            .and(RequestPredicates.not(RequestPredicates.pathExtension(\"ogg\")))\n            .", "CodeBleu_score": 11.65521404458418}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tReactiveIndexedSessionRepository<MapSession> repository = new ReactiveIndexedSessionRepository<MapSession>();\n    repository.setDefaultMaxInactiveInterval(session.getDefaultMaxInactiveInterval());\n    repository.setDefaultSessionTimeout(server.getDefaultSessionTimeout());\n    return repository;\n}", "CodeBleu_score": 27.97062949149609}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tConcurrentMap<String, MapSession> sessions = new ConcurrentHashMap<>();\n\n    /**\n     * This function initializes the session repository with a default session timeout.\n     */\n    public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository() {\n        ReactiveIndexedSessionRepository<MapSession> repository = new ReactiveIndexedSessionRepository<MapSession>();\n        repository.setDefaultMaxInactiveInterval(session.getDefaultMaxInactiveInterval());\n        repository.setSessions(sessions);\n        return repository;\n    }\n}", "CodeBleu_score": 35.68794362606293}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new MapSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 10.887467237315963}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n    userDetailsService.setUserService(userService)\n    userDetailsService.setRoleService(roleService)\n    userDetailsService.setEnableTwoFactorAuthentication(haloProperties.security.twoFactorAuthenticationEnabled)\n    return userDetailsService\n}", "CodeBleu_score": 31.97737521530255}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n    userDetailsService.userService = userService\n    userDetailsService.roleService = roleService\n    userDetailsService.enableTwoFactorAuthentication = haloProperties.security.twoFactorAuthentication.enabled\n    return userDetailsService\n}", "CodeBleu_score": 29.855671019955977}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n    userDetailsService.setUserService(userService)\n    userDetailsService.setRoleService(roleService)\n    userDetailsService.setEnableTwoFactorAuthentication(haloProperties.security.twoFactorAuthenticationEnabled)\n    userDetailsService\n}", "CodeBleu_score": 31.630883748080652}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(\"email\");\n    owner.setEmail(this.email);\n    owner.setDisplayName(this.displayName);\n    owner.setAvatar(new Comment.CommentOwner.Avatar());\n    owner.getAvatar().setUrl(\"\");\n    owner.setWebsite(new Comment.CommentOwner.Website());\n    owner.getWebsite().setUrl(\"\");\n    return owner;\n}", "CodeBleu_score": 30.707848227340506}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(email);\n    commentOwner.setDisplayName(displayName);\n    commentOwner.setAvatar(avatar);\n    commentOwner.setWebsite(website);\n    return commentOwner;\n}", "CodeBleu_score": 35.77213492550657}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n    owner.setKind(Comment.CommentOwner.KIND_EMAIL);\n    owner.setEmail(this.email);\n    owner.setDisplayName(this.displayName);\n    owner.setAvatar(this.avatar);\n    owner.setWebsite(this.website);\n    return owner;\n}", "CodeBleu_score": 31.413498389794224}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind().equals(\"email\")) {\n        User user = User.getUser(commentOwner.getName());\n        if (user == null) {\n            return false;\n        }\n        return post.getOwner().equals(user.getEmail());\n    } else {\n        return post.getOwner().equals(commentOwner.getName());\n    }\n}", "CodeBleu_score": 33.11554871833485}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (post.getOwner().getKind() == User.Kind.EMAIL) {\n        User user = User.getUserByEmail(post.getOwner().getName());\n        return user.getEmail().equals(commentOwner.getName());\n    } else {\n        return post.getOwner().getName().equals(commentOwner.getName());\n    }\n}", "CodeBleu_score": 36.24088646831227}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n        User user = User.find.where().eq(\"email\", commentOwner.getName()).findUnique();\n        if (user != null) {\n            return post.getOwner().equals(user);\n        }\n    } else {\n        return post.getOwner().getName().equals(commentOwner.getName());\n    }\n    return false;\n}", "CodeBleu_score": 43.89298022616901}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n    List<String> fieldQuery = new ArrayList<>();\n    List<String> fieldQueryConditions = new ArrayList<>();\n    if (getOwnerName() != null) {\n        fieldQueryConditions.add(\"metadata.ownerReferences.name=\" + getOwnerName());\n    }\n    if (getOwnerKind() != null) {\n        fieldQueryConditions.add(\"metadata.ownerReferences.kind=\" + getOwnerKind());\n    }\n    if (getKeyword() != null) {\n        fieldQueryConditions.add(\"metadata.name=\" + getKeyword());\n    }\n    if (!fieldQueryConditions.isEmpty()) {\n        fieldQuery.add(\"(\" + String.join(\") AND (\", fieldQueryConditions) + \")\");\n    }\n    if (!fieldQuery.isEmpty()) {\n        listOptions.setFieldSelector(String.join(\",\", fieldQuery));\n    }\n    return listOptions;\n}", "CodeBleu_score": 26.65138499341868}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n\n        // Build field query from selectors\n        if (fieldSelectors != null) {\n                StringBuilder fieldQueryBuilder = new StringBuilder();\n                for (Map.Entry<String, String> fieldSelector : fieldSelectors.entrySet()) {\n                        if (fieldQueryBuilder.length() > 0) {\n                                fieldQueryBuilder.append(\",\");\n                        }\n                        fieldQueryBuilder.append(fieldSelector.getKey());\n                        fieldQueryBuilder.append(\"=\");\n                        fieldQueryBuilder.append(fieldSelector.getValue());\n                }\n                listOptions.setFieldSelector(fieldQueryBuilder.toString());\n        }\n\n        // Add conditions based on keyword and owner name, if provided\n        if (getKeyword() != null) {\n                addKeywordCondition(listOptions);\n        }\n        if (getOwnerName() != null) {\n                addOwnerNameCondition(listOptions);\n        }\n        if (getOwnerKind() != null) {\n                addOwnerKindCondition(listOptions);\n        }\n\n        return listOptions;\n}", "CodeBleu_score": 22.47007678671368}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        listOptions.setLabelSelector(labelSelector);\n        listOptions.setFieldSelector(fieldSelector);\n\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            listOptions.setFieldSelector(listOptions.getFieldSelector() + \",metadata.ownerReferences.name=\" + getOwnerName());\n        }\n        if (StringUtils.isNotBlank(getOwnerKind())) {\n            listOptions.setFieldSelector(listOptions.getFieldSelector() + \",metadata.ownerReferences.kind=\" + getOwnerKind());\n        }\n        if (StringUtils.isNotBlank(getKeyword())) {\n            listOptions.setFieldSelector(listOptions.getFieldSelector() + \",metadata.name=\" + getKeyword());\n        }\n\n        return listOptions;\n    }", "CodeBleu_score": 28.007606072480566}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\tif (commentName == null) {\n        return Mono.empty();\n    }\n    return this.redisTemplate.opsForHash().get(COUNTERS_KEY, commentName)\n            .map(upvoteCount -> new CommentStats(commentName, Long.parseLong(upvoteCount)));\n}", "CodeBleu_score": 43.980530117187385}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tif (commentName == null) {\n        return Mono.just(new CommentStats());\n    }\n    return this.commentCounter.get(commentName)\n        .map(counter -> new CommentStats(counter.getCount()));\n}", "CodeBleu_score": 36.57744735679837}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tif (commentName == null) {\n        return Mono.empty();\n    }\n    return counterService.getCounter(commentName).map(counter -> {\n        CommentStats stats = new CommentStats();\n        stats.setUpvotes(counter.getCount());\n        return stats;\n    }).defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 33.86780238028249}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason interestReason = new Subscription.InterestReason();\n    interestReason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    interestReason.setCondition(Subscription.InterestReason.Condition.OWNER_MATCHES_NAME);\n    interestReason.setValue(identity.name());\n\n    Subscription.Subscription subscription = new Subscription.Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(interestReason);\n\n    Subscription.SubscriptionResponse response = notificationCenter.subscribe(subscription);\n    if (response.getStatus() != Subscription.SubscriptionResponse.Status.SUCCESS) {\n        return;\n    }\n\n    // Block until the subscription is completed.\n    while (true) {\n        Subscription.SubscriptionStatus status = notificationCenter.getSubscriptionStatus(response.getSubscriptionId());\n        if (status.getStatus() == Subscription.SubscriptionStatus.Status.COMPLETED) {\n            break;\n        }\n    }\n}", "CodeBleu_score": 49.2189289770642}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n        if (subscriber == null) {\n            return;\n        }\n\n        Subscription.Interest interest = new Subscription.Interest();\n        interest.setReasonType(Subscription.Interest.ReasonType.REPLIED);\n        interest.setCondition(String.format(\"owner = '%s'\", identity.name()));\n\n        Subscription.Subscription subscription = new Subscription.Subscription();\n        subscription.setSubscriber(subscriber);\n        subscription.setInterest(interest);\n\n        try {\n            Subscription.SubscribeRequest request = new Subscription.SubscribeRequest();\n            request.setSubscription(subscription);\n\n            Subscription.SubscribeResponse response = notificationClient.subscribe(request);\n            if (response.getSubscription() != null) {\n                System.out.println(String.format(\"Subscribed user '%s' to reply notifications\", identity.name()));\n            } else {\n                System.out.println(String.format(\"Failed to subscribe user '%s' to reply notifications\", identity.name()));\n            }\n        } catch (Exception e) {\n            System.out.println(String.format(\"Failed to subscribe user '%s' to reply notifications: %s\", identity.name(), e.getMessage()));\n        }\n    }", "CodeBleu_score": 46.86248032105541}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n        if (subscriber == null) {\n            return;\n        }\n\n        Subscription.InterestReason interestReason = new Subscription.InterestReason();\n        interestReason.setType(\"someone replied to you\");\n        interestReason.setCondition(\"replied.owner == '\" + identity.name() + \"'\");\n        subscriber.setInterestReason(interestReason);\n\n        try {\n            NotificationCenter.getDefault().subscribe(subscriber, new Subscription.Callback() {\n                @Override\n                public void onSubscribed(Subscription subscription) {\n                    Log.i(TAG, \"Subscribed to reply notifications\");\n                }\n\n                @Override\n                public void onFailed(Subscription subscription, int errorCode) {\n                    Log.e(TAG, \"Failed to subscribe to reply notifications\");\n                }\n            });\n        } catch (Exception e) {\n            Log.e(TAG, \"Failed to subscribe to reply notifications\");\n        }\n    }", "CodeBleu_score": 48.40789280865141}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), comment -> {\n        comment.setApproved(true);\n        comment.setApprovedTime(Instant.now());\n        return comment;\n    });\n}", "CodeBleu_score": 21.17309016336053}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\tcomment.setApproved(true);\n        comment.setApprovedAt(Instant.now());\n        return updateCommentWithRetry(comment.getName(), c -> c);\n    }", "CodeBleu_score": 16.02372766205129}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> {\n            c.setApproved(true);\n            c.setApprovedTime(Instant.now());\n            return c;\n        });\n    }", "CodeBleu_score": 20.803801658999603}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setLivewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 52.95341381912182}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setComponent($this);\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 49.62863451246557}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setComponent($this);\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 49.62863451246557}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($this->successRedirect) {\n        $url = $this->evaluate($this->successRedirect);\n\n        if ($url) {\n            $this->redirect($url);\n        }\n    }\n\n    return $this;\n}", "CodeBleu_score": 69.5727209022145}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$redirect = $this->evaluate($this->getSuccessRedirect());\n\n    if (! empty($redirect)) {\n        $this->redirect($redirect);\n    }\n\n    return $this;\n}", "CodeBleu_score": 60.25643771678737}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirect);\n\n    if (! empty($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 76.85868568840884}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif ($record && method_exists($record, 'tags')) {\n        $tagModel = $this->getTagModel();\n        $tags = [];\n        foreach ($state['tags'] as $tagName) {\n            $tag = $tagModel->findOrCreate(['name' => $tagName]);\n            $tags[] = $tag;\n        }\n        $record->tags()->sync($tags);\n    }\n}", "CodeBleu_score": 27.55852844409023}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (is_null($record)) {\n\t\treturn;\n\t}\n\n\t$tags = $this->processTags($state['tags'] ?? []);\n\n\t$tagModel = $this->tagModel();\n\n\t$record->tags()->sync($tagModel::findOrCreateMany($tags));\n}", "CodeBleu_score": 18.369902719643687}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (!$record || !$record->tags || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $model = $record->tags();\n    $tags = $this->getTagsFromState($state);\n\n    $record->tags()->sync($tags->pluck('id')->all());\n}", "CodeBleu_score": 22.23220146508792}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repositoryName, err := dissectPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(scopePipeline, spacePath, repositoryName, pipelineIdentifier)\n\tresource := authz.NewResource(resourcePipeline, pipelineIdentifier)\n\n\t// Check if the user has the required permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.14622091273231}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := dissectPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(authz.PipelineResourceType, pipelineIdentifier)\n\tresource := authz.NewResource(spacePath, repoName)\n\n\t// Check if the user has the required permission.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 46.56722464136899}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Get the space path and repository name from the repository path.\n\tspacePath, repositoryName, err := GetSpacePathAndRepositoryName(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create the scope and resource.\n\tscope := authz.GetScope(spacePath)\n\tresource := authz.GetResource(repositoryName, pipelineIdentifier)\n\n\t// Check the permission.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 43.72080917276487}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Get the parent space and name.\n\tparentSpace, name := space.ParentSpace(), space.Name()\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope, err := NewScope(parentSpace, name)\n\tif err != nil {\n\t\treturn err\n\t}\n\tresource := NewResource(scope)\n\n\t// Check the permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 51.227395144945554}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif session == nil {\n\t\treturn authz.ErrUnauthorized\n\t}\n\n\tscope := authz.NewScope(\n\t\tauthz.NewResource(\n\t\t\tspace.ParentSpaceID,\n\t\t\tspace.Name,\n\t\t),\n\t)\n\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tscope,\n\t\tauthz.NewResource(\n\t\t\tspace.ID,\n\t\t\t\"\",\n\t\t),\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 44.66372266738078}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif session == nil {\n\t\treturn authz.ErrUnauthorized\n\t}\n\n\tif space == nil {\n\t\treturn authz.ErrUnauthorized\n\t}\n\n\tif len(space.Path) == 0 {\n\t\treturn authz.ErrUnauthorized\n\t}\n\n\t// Get the parent space and name.\n\tparentSpace, name := GetParentSpaceAndName(space.Path)\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := &types.Scope{\n\t\tResource: &types.Resource{\n\t\t\tType: types.ResourceTypeSpace,\n\t\t\tID:   parentSpace.ID,\n\t\t},\n\t\tAction: types.ActionRead,\n\t}\n\n\tresource := &types.Resource{\n\t\tType: types.ResourceTypeSpace,\n\t\tID:   name,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 60.27165817604936}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t// If the source is empty, marshal the provided data to JSON.\n\tif len(source) == 0 {\n\t\tjsonData, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\n\t\tsource = jsonData\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields.\n\tvar decodedData any\n\terr := json.Unmarshal(source, &decodedData)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Encode the data to ensure it conforms to the required format.\n\tencodedData, err := json.Marshal(decodedData)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result.\n\tresult := bytes.TrimRight(encodedData, \"\n\")\n\n\treturn result, nil\n}", "CodeBleu_score": 37.89810812413086}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\tvar sanitized json.RawMessage\n\tif err := json.Unmarshal(source, &sanitized); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := json.Unmarshal(source, &sanitized); err != nil {\n\t\treturn nil, err\n\t}\n\treturn sanitized, nil\n}", "CodeBleu_score": 32.93336457281597}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar result any\n\tif err := json.Unmarshal(source, &result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif _, err := json.Marshal(result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar resultBytes []byte\n\tif resultBytes, err = json.Marshal(result); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresultBytes = bytes.TrimRight(resultBytes, \"\n\")\n\n\treturn resultBytes, nil\n}", "CodeBleu_score": 39.11097435953963}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 37.86724053866769}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepoRef, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Get the repository.\n\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkPermissions(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.30828497847611}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate repository reference.\n\trepoRef, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch repository.\n\trepo, err := c.Repos.GetRepository(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 50.42775933561141}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 64.09328399401282}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t}\n\n\treturn sanitizers\n}", "CodeBleu_score": 32.77633556132738}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 64.09328399401282}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tif self.attached then\n        error(\"Buffer is already attached to renderer\", 2)\n    end\n\n    self.state.on_render = on_render\n\n    self.attached = true\n    self.renderer:attach_buffer(self)\n\n    return self", "CodeBleu_score": 48.89113697952562}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tif self.renderer == nil then\n        self.renderer = self.screen.renderer\n        self.renderer.buffers[self.id] = self\n    end\n    self.state.on_render = on_render\n    return self", "CodeBleu_score": 46.294876856636336}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tif not self.attached then\n\t\tself.renderer:attach_buffer(self)\n\t\tself.attached = true\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 48.110113375477404}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tlocal filename = self:getFilename()\n  local watcher = lfs.new_watcher(filename)\n  if watcher == nil then\n    print(\"Error: Could not watch file \" .. filename)\n    return\n  end\n\n  local function watcher_callback(reason, filename)\n    if reason == \"modified\" then\n      if callback ~= nil then\n        callback()\n      end\n    end\n  end\n\n  watcher:start(watcher_callback)", "CodeBleu_score": 46.799847382904645}, {"code": "function Buffer:watch(callback)\n\tlocal filename = self:getFilename()\n    local watcher = lfs.new_watcher(filename)\n    if not watcher then\n        error(\"Failed to set up file watcher for buffer \" .. filename)\n    end\n    watcher:start()\n    local function watch_callback()\n        if self:isValid() then\n            callback()\n        end\n    end\n    watcher:set_callback(watch_callback)\n    self.watcher = watcher", "CodeBleu_score": 44.28980945678964}, {"code": "function Buffer:watch(callback)\n\tlocal filename = self:filename()\n    if not filename then\n        error(\"Invalid buffer\")\n    end\n    local watcher = luv.new_fs_poll()\n    local function on_change()\n        if not self:valid() then\n            error(\"Invalid buffer\")\n        end\n        if callback then\n            callback(self)\n        end\n    end\n    local function on_error(err)\n        log.error(\"Error watching buffer: \" .. err)\n    end\n    luv.fs_poll_start(watcher, filename, on_change, on_error)\n    return watcher", "CodeBleu_score": 45.46585100903309}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self:get_spec()\n\tlocal attr = self.foreground and \"fg\" or \"bg\"\n\tlocal hl = vim.api.nvim_get_hl_by_name(spec[attr], true)\n\tif hl then\n\t\tself.hex = vim.fn.synIDattr(hl, \"fg\", \"cterm\")\n\tend\n\n\treturn self.hex", "CodeBleu_score": 50.95076633014195}, {"code": "function Color:to_hex()\n\tif self.hex_value then\n    return self.hex_value\n  end\n  local spec = self:to_spec()\n  local attr = self.attr\n  local hex_value\n  if attr == \"fg\" then\n    hex_value = vim.api.nvim_get_hl_by_name(spec, true)\n  elseif attr == \"bg\" then\n    hex_value = vim.api.nvim_get_hl_by_name(spec, false)\n  end\n  if hex_value then\n    hex_value = vim.fn.rgb_to_hex(hex_value)\n    self.hex_value = hex_value\n    return hex_value\n  end", "CodeBleu_score": 49.13733751400853}, {"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n\n  local spec = self:get_spec()\n  local attr = self:get_attr()\n\n  local hex\n  if spec then\n    hex = spec[attr]\n  end\n\n  if hex then\n    self.hex = hex\n  else\n    hex = self:get_hex()\n  end\n\n  return hex", "CodeBleu_score": 43.30900371449531}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n\n  for i, line in ipairs(lines) do\n    local start_pos, end_pos = line:find(pattern)\n    if start_pos then\n      buffer:add_highlight(hl, i - 1, start_pos, end_pos)\n    end\n  end\n\n  return self", "CodeBleu_score": 42.9909562611354}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local ns = self:get_id()\n\n  for i, line in ipairs(lines) do\n    local start, finish = line:find(pattern)\n    if start then\n      buffer:add_highlight(hl, i - 1, start, finish)\n    end\n  end\n\n  return self", "CodeBleu_score": 45.41340797172884}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  for i, line in ipairs(lines) do\n    local start_pos, end_pos = line:find(pattern)\n    if start_pos then\n      buffer:add_highlight(hl, i - 1, start_pos, end_pos)\n    end\n  end\n\n  return self", "CodeBleu_score": 42.9909562611354}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tif not buffer then return end\n  local id = self:get_virtual_text_id(buffer, row, col)\n  if id then\n    self:set_virtual_text(buffer, id, text, hl, row, col, pos, priority)\n    return id\n  end\n  return self:add_virtual_text(buffer, text, hl, row, col, pos, priority)", "CodeBleu_score": 41.562694920830324}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = buffer:get_extmarks_by_id(self.ns_id, row, col, row, col, {})[1]\n    if id == nil then\n        id = buffer:set_extmark(self.ns_id, row, col, {\n            virt_text = { { text, hl } },\n            virt_text_pos = pos,\n            virt_text_win = self.win_id,\n            virt_text_hide = true,\n            priority = priority\n        })\n    else\n        buffer:set_extmark(self.ns_id, id, row, col, {\n            virt_text = { { text, hl } },\n            virt_text_pos = pos,\n            virt_text_win = self.win_id,\n            virt_text_hide = true,\n            priority = priority\n        })\n    end\n    return id", "CodeBleu_score": 53.41321590692489}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = self:get_virtual_text_id(buffer, row, col)\n\tlocal extmarks = self.virtual_texts[buffer]\n\tif not extmarks then\n\t\textmarks = {}\n\t\tself.virtual_texts[buffer] = extmarks\n\tend\n\n\tlocal extmark = extmarks[id]\n\tif not extmark then\n\t\textmark = self.api.nvim_buf_set_extmark(buffer, self.namespace, row, col, {\n\t\t\tid = id,\n\t\t\tend_row = row,\n\t\t\tend_col = col,\n\t\t\thl_group = hl,\n\t\t\tvirt_text = text,\n\t\t\tvirt_text_pos = pos,\n\t\t\tvirt_text_win_col = col,\n\t\t\tvirt_text_hide = false,\n\t\t\tvirt_text_hide_on_mouse = false,\n\t\t\tvirt_text_hide_on_focus = false,\n\t\t\tvirt_text_hide_on_cursor = false,\n\t\t\tvirt_text_hide_on_redraw = false,\n\t\t\tpriority = priority,\n\t\t})\n\telse\n\t\textmark = self.api.nvim_buf_set_extmark(buffer, self.namespace, row, col, {\n\t\t\tid = id,\n\t\t\tend_row = row,\n\t\t\tend_col = col,\n\t\t\thl_group = hl,\n\t\t\tvirt_text = text,\n\t\t\tvirt_text_pos = pos,\n\t\t\tvirt_text_win_col = col,\n\t\t\tvirt_text_hide = false,\n\t\t\tvirt_text_hide_on_mouse = false,\n\t\t\tvirt_text_hide_on_focus = false,\n\t\t\tvirt_text_hide_on_cursor = false,\n\t\t\tvirt_text_hide_on_redraw = false,\n\t\t\tpriority = priority,\n\t\t})\n\tend\n\textmarks[id] = extmark\n\treturn id", "CodeBleu_score": 43.41646271342318}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n  for i=1,#output do\n    local char = string.sub(output, i, i)\n    if char == \"", "CodeBleu_score": 17.722156535993275}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal lines = {}\n  local line = \"\"\n  local i = 1\n\n  while i <= #output do\n    local c = output:sub(i, i)\n    if c == \"", "CodeBleu_score": 22.561359037775553}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i=1,#output do\n\t\tlocal c = output:sub(i,i)\n\t\tif c == \"", "CodeBleu_score": 18.80579314096035}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\tlocal watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n\n  local watcher = vim.loop.new_fs_event()\n  self.watchers[path] = watcher\n\n  watcher:start(path, vim.schedule_wrap(handler))\n  return watcher", "CodeBleu_score": 49.57675044650634}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(path, vim.schedule_wrap(handler))\n    self.watchers[path] = watcher\n\n    return watcher", "CodeBleu_score": 49.30991427385003}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watchers[path] then\n        return self.watchers[path]\n    end\n\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(path, handler)\n    self.watchers[path] = watcher\n\n    return watcher", "CodeBleu_score": 45.93869898189797}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\tlocal hunks, err = self:hunks()\n    if err then return nil, err end\n\n    local lines = self:lines()\n    if not lines then return nil, \"GitBuffer:live_hunks: Could not get buffer lines\" end\n\n    for i = 1, #lines do\n        local hunk = hunks[i]\n        if not hunk then break end\n        local line = lines[i]\n        if not line then break end\n\n        if hunk.type == \"add\" then\n            self:sign_line(i, \"GitGutterAdd\", hunk.type)\n        elseif hunk.type == \"delete\" then\n            self:sign_line(i, \"GitGutterDelete\", hunk.type)\n        elseif hunk.type == \"change\" then\n            self:sign_line(i, \"GitGutterChange\", hunk.type)\n        end\n    end\n\n    return hunks", "CodeBleu_score": 40.11567246779531}, {"code": "function GitBuffer:live_hunks()\n\tlocal buffer = self.buffer\n    local hunks = self.hunks\n    local lines = buffer:get_lines()\n    local git_lines = self.git_lines\n    local git_hunks = self.git_hunks\n    local git_error = self.git_error\n\n    if git_error then\n        return git_error\n    end\n\n    if not git_lines or #git_lines ~= #lines then\n        git_lines = {}\n        git_hunks = {}\n        for i = 1, #lines do\n            git_lines[i] = lines[i]\n        end\n    end\n\n    local git_hunks, git_error = self:get_hunks()\n    if git_error then\n        return git_error\n    end\n\n    if #git_hunks ~= #git_lines then\n        return \"Git returned \" .. #git_hunks .. \" hunks but \" .. #git_lines .. \" lines\"\n    end\n\n    local signs = {}\n    local hunks = {}\n    local sign_priorities = {\n        -- The order of these matters!\n        -- The higher the priority, the higher the sign will be.\n        -- The priority is used to determine which signs to delete when a hunk is deleted.\n        -- The priority is also used to determine which signs to update when a hunk is updated.\n        -- The priority is also used to determine which signs to update when a hunk is added.\n        -- The priority is also used to determine which signs to update when a hunk is modified.\n        -- The priority is also used to determine which signs to update when a hunk is moved.\n        -- The priority is also used to determine which signs to update when a hunk is renamed.\n        -- The priority is also used to determine which signs to update when a hunk is split.\n        -- The priority is also used to determine which signs to update when a hunk is squashed.\n        -- The priority is also used to determine which signs to update when a hunk is merged.\n        -- The priority is also used to determine which signs to update when a hunk is rebased.\n        -- The priority is also used to determine which signs to update when a hunk is rebased.", "CodeBleu_score": 35.31046665803415}, {"code": "function GitBuffer:live_hunks()\n\tlocal lines = self:lines()\n\tlocal hunks = self:hunks()\n\tlocal git_object = self:git_object()\n\tif not lines or not hunks or not git_object then\n\t\treturn nil, \"GitBuffer:live_hunks(): Error retrieving lines, hunks, or git_object\"\n\tend\n\tlocal git_lines = git_object:lines()\n\tif not git_lines then\n\t\treturn nil, \"GitBuffer:live_hunks(): Error retrieving git_lines\"\n\tend\n\tlocal git_hunks = git_object:hunks()\n\tif not git_hunks then\n\t\treturn nil, \"GitBuffer:live_hunks(): Error retrieving git_hunks\"\n\tend\n\tlocal git_hunks_by_line = {}\n\tfor i = 1, #git_hunks do\n\t\tlocal hunk = git_hunks[i]\n\t\tfor j = hunk.start, hunk.stop do\n\t\t\tgit_hunks_by_line[j] = hunk\n\t\tend\n\tend\n\tlocal signs = {}\n\tlocal priority = 1\n\tfor i = 1, #lines do\n\t\tlocal line = lines[i]\n\t\tlocal git_line = git_lines[i]\n\t\tlocal hunk = git_hunks_by_line[i]\n\t\tif hunk then\n\t\t\tif hunk.type == \"delete\" then\n\t\t\t\tsigns[i] = {\n\t\t\t\t\tpriority = priority,\n\t\t\t\t\tsign_name = \"git_delete\",\n\t\t\t\t\tline = line,\n\t\t\t\t\tgit_line = git_line,\n\t\t\t\t\thunk = hunk,\n\t\t\t\t}\n\t\t\t\tpriority = priority + 1\n\t\t\telseif hunk.type == \"insert\" then\n\t\t\t\tsigns[i] = {\n\t\t\t\t\tpriority = priority,\n\t\t\t\t\tsign_name = \"git_insert\",\n\t\t\t\t\tline = line,\n\t\t\t\t\tgit_line = git_line,", "CodeBleu_score": 44.026841376792355}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tempfile = os.tmpname()\n  fs.write_file(tempfile, patch)\n\n  local err = self:stage_hunk_from_file(tempfile)\n\n  fs.remove_file(tempfile)\n\n  return err", "CodeBleu_score": 42.31648468481101}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tempfile = os.tmpname()\n  local f = io.open(tempfile, 'w')\n  f:write(patch)\n  f:close()\n\n  local command = 'git apply --cached --index --reject --whitespace=nowarn ' .. tempfile\n  local result = loop.execute_command(command)\n\n  os.remove(tempfile)\n\n  return result", "CodeBleu_score": 45.949662409791635}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal temp_file = io.open(os.tmpname(), 'w')\n  temp_file:write(patch)\n  temp_file:close()\n\n  local cmd = {\n    'git', 'apply', '--cached', '--reject', '--index', '--whitespace=nowarn', '--unidiff-zero', '--', temp_file:get_name()\n  }\n\n  local result = loop.run_command(cmd)\n\n  os.remove(temp_file:get_name())\n\n  return result", "CodeBleu_score": 41.56237841517786}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tif (requestToken == null) {\n            throw new IllegalArgumentException(\"Request token cannot be null.\");\n        }\n\n        if (verifier == null) {\n            throw new IllegalArgumentException(\"Verifier cannot be null.\");\n        }\n\n        OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n        request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n        request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n        request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n        request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n        request.addBodyParameter(OAuthConstants.GRANT_TYPE, \"authorization_code\");\n\n        OAuthResponse response = request.send();\n        return api.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 51.19353345472408}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t// Create an OAuth request to the access token endpoint\n        OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\n        // Add the necessary authentication header and body parameters\n        request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n        request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n        // Send the request and extract the access token from the response body\n        OAuthResponse response = request.send();\n        return config.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 55.97038100678671}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tString accessTokenUrl = config.getAccessTokenUrl();\n        OAuthRequest request = new OAuthRequest(Verb.POST, accessTokenUrl);\n\n        request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n        request.addBodyParameter(\"oauth_token\", requestToken.getValue());\n\n        OAuthResponse response = request.send();\n\n        return config.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 55.67662235268236}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tcontext.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n    authCache.put(host, authScope, credentials);\n    log.info(\"Added \" + host + \" to auth cache\");\n}", "CodeBleu_score": 24.059373406187362}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(user, password));\n    context.setCredentialsProvider(credsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n    log.info(\"Added host \" + host.getHostName() + \" to auth cache\");\n}", "CodeBleu_score": 52.09904948596912}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t// Create the credentials provider\n    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n\n    // Set up the credentials\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n\n    // Add the credentials provider to the context\n    context.setCredentialsProvider(credsProvider);\n\n    // Create a BasicScheme object and add it to the authentication cache\n    BasicScheme basicAuth = new BasicScheme();\n    context.getAuthCache().put(host, basicAuth);\n\n    // Log the action of adding the host to the auth cache\n    logger.info(\"Added \" + host.getHostName() + \" to the auth cache\");\n}", "CodeBleu_score": 46.72145683653321}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n        AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n        if (cache == null) {\n            throw new IllegalStateException(\"AvatarCache extension not found\");\n        }\n        String key = cache.getKey(source);\n        if (key == null) {\n            throw new IllegalStateException(\"AvatarCache extension returned null key\");\n        }\n        try {\n            return jenkins.getRootUrl() + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\"UTF-8 encoding not supported\");\n        }\n    }", "CodeBleu_score": 49.032905835355756}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n        if (jenkins == null) {\n            throw new IllegalStateException(\"Jenkins instance is null\");\n        }\n        AvatarCacheExtension extension = jenkins.getExtensionList(AvatarCacheExtension.class).get(0);\n        if (extension == null) {\n            throw new IllegalStateException(\"AvatarCacheExtension is null\");\n        }\n        String key = extension.getKey(source);\n        if (key == null) {\n            throw new IllegalStateException(\"AvatarCacheExtension key is null\");\n        }\n        try {\n            return jenkins.getRootUrl() + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n        }\n    }", "CodeBleu_score": 48.60133636308171}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tString key = getCacheKey(source);\n    AvatarCache cache = AvatarCache.getInstance();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance not found\");\n    }\n    cache.seed(key, source);\n    try {\n        return Jenkins.get().getRootUrl() + \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n    }\n}", "CodeBleu_score": 40.42848517883212}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128);\n    }\n}", "CodeBleu_score": 48.985902285970454}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    } else {\n        this.lastModified = lastModified;\n    }\n}", "CodeBleu_score": 39.39046438538498}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128);\n    }\n}", "CodeBleu_score": 48.985902285970454}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            CacheEntry entry = future.get();\n            if (entry == null) {\n                future = null;\n                return false;\n            }\n            if (entry.getImage() != null) {\n                image = entry.getImage();\n            }\n            lastModified = entry.getLastModified();\n            future = null;\n            return false;\n        }\n        return true;\n    } catch (InterruptedException | ExecutionException e) {\n        future = null;\n        return true;\n    }\n}", "CodeBleu_score": 60.87362918293555}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            CacheEntry entry = future.get();\n            image = entry.image;\n            lastModified = entry.lastModified;\n            future = null;\n            return false;\n        }\n    } catch (Exception e) {\n        future = null;\n        return true;\n    }\n    return true;\n}", "CodeBleu_score": 53.208365989532844}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            future.get();\n            future = null;\n            return false;\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n            return true;\n        } catch (ExecutionException e) {\n            e.printStackTrace();\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 41.95172724371778}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n    generateResponse(req, baos, node);\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setHeader(\"Cache-Control\", \"no-cache\");\n    rsp.setDateHeader(\"Expires\", 0);\n    rsp.setHeader(\"Content-Length\", String.valueOf(baos.size()));\n    baos.writeTo(rsp.getOutputStream());\n    baos.close();\n}", "CodeBleu_score": 36.357624496715125}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t// TODO: add support for caching\n    // TODO: add support for setting the content type\n    // TODO: add support for setting the content length\n    // TODO: add support for setting the cache headers\n    // TODO: add support for setting the content disposition\n    // TODO: add support for setting the content encoding\n    // TODO: add support for setting the expiration date\n    // TODO: add support for setting the last modified date\n    // TODO: add support for setting the ETag\n    // TODO: add support for setting the Vary header\n    // TODO: add support for setting the Pragma header\n    // TODO: add support for setting the Warning header\n    // TODO: add support for setting the Content-Security-Policy header\n    // TODO: add support for setting the X-Content-Type-Options header\n    // TODO: add support for setting the X-Frame-Options header\n    // TODO: add support for setting the X-XSS-Protection header\n    // TODO: add support for setting the Strict-Transport-Security header\n    // TODO: add support for setting the X-UA-Compatible header\n    // TODO: add support for setting the X-DNS-Prefetch-Control header\n    // TODO: add support for setting the X-Download-Options header\n    // TODO: add support for setting the X-Permitted-Cross-Domain-Policies header\n    // TODO: add support for setting the X-Powered-By header\n    // TODO: add support for setting the X-Content-Duration header\n    // TODO: add support for setting the X-Content-Security-Policy header\n    // TODO: add support for setting the X-WebKit-CSP header\n    // TODO: add support for setting the X-Content-Type-Options header\n    // TODO: add support for setting the X-Robots-Tag header\n    // TODO: add support for setting the X-UA-Compatible header\n    // TODO: add support for setting the X-DNS-Prefetch-Control header\n    // TODO: add support for setting the X-Download-Options header\n    // TODO: add support for setting the X-Permitted-Cross-Domain-Policies header\n    // TODO: add support for setting the X-Powered-By header\n    //", "CodeBleu_score": 9.478070530273596}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        generateImage(baos, node);\n    } catch (Exception e) {\n        throw new ServletException(\"Error generating image\", e);\n    }\n\n    // set headers\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setHeader(\"Cache-Control\", \"no-cache\");\n    rsp.setHeader(\"Expires\", \"0\");\n    rsp.setContentType(\"image/png\");\n    rsp.setCharacterEncoding(\"UTF-8\");\n    rsp.setContentLength(baos.size());\n\n    // write image\n    OutputStream os = rsp.getOutputStream();\n    os.write(baos.toByteArray());\n    os.flush();\n}", "CodeBleu_score": 49.146259764029246}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.httpClient = buildHttpClient();\n    }", "CodeBleu_score": 23.733661480239824}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.client = createHttpClient();\n        this.context = HttpClientContext.create();\n        if (authenticator != null) {\n            authenticator.configureContext(context);\n        }\n    }", "CodeBleu_score": 35.46505839396381}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.httpClient = buildHttpClient();\n        this.context = HttpClientContext.create();\n        this.teamCache = new HashMap<>();\n        this.repositoriesCache = new HashMap<>();\n        if (authenticator != null) {\n            authenticator.configureContext(context, new HttpHost(BITBUCKET_CLOUD_API_HOST));\n        }\n    }", "CodeBleu_score": 37.30465764654811}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tBitbucketCloudBranch sourceBranch = null;\n    BitbucketCloudBranch destinationBranch = null;\n    try {\n        sourceBranch = getBranch(pullRequest.getSourceBranch());\n        destinationBranch = getBranch(pullRequest.getDestinationBranch());\n    } catch (IOException | InterruptedException e) {\n        LOGGER.log(Level.WARNING, \"Unable to retrieve branch information for pull request \" + pullRequest.getPullRequestId(), e);\n    }\n\n    if (sourceBranch != null) {\n        pullRequest.setSourceBranch(sourceBranch);\n    }\n    if (destinationBranch != null) {\n        pullRequest.setDestinationBranch(destinationBranch);\n    }\n}", "CodeBleu_score": 34.853553308984985}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tBitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSourceBranch());\n        BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestinationBranch());\n        if (sourceBranch != null) {\n            pullRequest.setSourceCommitClosure(new CommitClosure(sourceBranch.getRawNode()));\n        }\n        if (destinationBranch != null) {\n            pullRequest.setDestinationCommitClosure(new CommitClosure(destinationBranch.getRawNode()));\n        }\n    }", "CodeBleu_score": 47.999371410326816}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tBitbucketCloudBranch sourceBranch = null;\n    BitbucketCloudBranch destinationBranch = null;\n    try {\n        sourceBranch = getBranch(pullRequest.getSourceBranch());\n    } catch (IOException | InterruptedException e) {\n        LOGGER.log(Level.WARNING, \"Unable to retrieve source branch for pull request \" + pullRequest.getId() + \" from Bitbucket\", e);\n    }\n    try {\n        destinationBranch = getBranch(pullRequest.getDestinationBranch());\n    } catch (IOException | InterruptedException e) {\n        LOGGER.log(Level.WARNING, \"Unable to retrieve destination branch for pull request \" + pullRequest.getId() + \" from Bitbucket\", e);\n    }\n    if (sourceBranch != null) {\n        pullRequest.setSourceCommitClosure(new BitbucketCloudCommitClosure(sourceBranch.getRawNode()));\n    }\n    if (destinationBranch != null) {\n        pullRequest.setDestinationCommitClosure(new BitbucketCloudCommitClosure(destinationBranch.getRawNode()));\n    }\n}", "CodeBleu_score": 46.45729614862641}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is null\");\n    }\n    String rootURL = jenkinsLocationConfiguration.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"Jenkins location configuration URL is null\");\n    }\n    return rootURL;\n}", "CodeBleu_score": 48.55140222994715}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString url = null;\n    try {\n        JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n        if (location == null) {\n            throw new IllegalStateException(\"Jenkins location configuration is not set\");\n        }\n        if (location.getUrl() == null) {\n            throw new IllegalStateException(\"Jenkins URL is not set\");\n        }\n        DisplayURLProvider provider = DisplayURLProvider.get();\n        if (provider == null) {\n            throw new IllegalStateException(\"Display URL provider is not set\");\n        }\n        url = provider.getRunURL(build);\n    } catch (IllegalStateException e) {\n        e.printStackTrace();\n    }\n    return url;\n}", "CodeBleu_score": 47.46180345694266}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tdef location = JenkinsLocationConfiguration.get()\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins Location not configured\")\n    }\n    def url = location.getUrl()\n    if (url == null) {\n        throw new IllegalStateException(\"Jenkins Location URL not configured\")\n    }\n    def displayURLProvider = ExtensionList.lookup(DisplayURLProvider.class).get(DefaultDisplayURLProvider.class)\n    if (displayURLProvider == null) {\n        throw new IllegalStateException(\"Display URL Provider not configured\")\n    }\n    return displayURLProvider.getRunURL(build)\n}", "CodeBleu_score": 43.94881251704882}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url.matches(\"https?://.*\")) {\n        // URL is well-formed\n        String host = new URL(url).getHost()\n        if (host == \"localhost\" || host == \"unconfigured-jenkins-location\") {\n            throw new IllegalStateException(\"The URL provided is not valid. Please enter a valid URL for your Jenkins server.\")\n        }\n        if (bitbucket.getServerType() == BitbucketServerType.BITBUCKET_CLOUD) {\n            if (!host.matches(\".*\\\\..*\")) {\n                throw new IllegalStateException(\"The URL provided is not valid. Please enter a fully qualified URL for your Bitbucket Cloud server.\")\n            }\n        }\n    } else {\n        throw new IllegalStateException(\"The URL provided is not valid. Please enter a valid URL for your Jenkins server.\")\n    }\n    return url\n}", "CodeBleu_score": 44.02171397350977}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url.startsWith(\"http://localhost\") || url.startsWith(\"https://localhost\") || url.startsWith(\"http://unconfigured-jenkins-location\") || url.startsWith(\"https://unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"The Jenkins URL must not contain \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\" as the host. Please configure the Jenkins URL in the \\\"Manage Jenkins\\\" page.\");\n    }\n    try {\n        new URL(url);\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL is malformed. Please configure the Jenkins URL in the \\\"Manage Jenkins\\\" page.\");\n    }\n    if (bitbucket == BitbucketApi.BITBUCKET_CLOUD) {\n        if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            throw new IllegalStateException(\"The Jenkins URL must start with \\\"http://\\\" or \\\"https://\\\". Please configure the Jenkins URL in the \\\"Manage Jenkins\\\" page.\");\n        }\n        if (!url.contains(\".\")) {\n            throw new IllegalStateException(\"The Jenkins URL must contain a hostname. Please configure the Jenkins URL in the \\\"Manage Jenkins\\\" page.\");\n        }\n    }\n    return url;\n}", "CodeBleu_score": 36.92492432291725}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url == null) {\n        throw new IllegalStateException(\"URL cannot be null\");\n    }\n    if (url.isEmpty()) {\n        throw new IllegalStateException(\"URL cannot be empty\");\n    }\n    if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n        throw new IllegalStateException(\"URL must start with http:// or https://\");\n    }\n    if (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"URL cannot contain localhost or unconfigured-jenkins-location\");\n    }\n    if (bitbucket instanceof BitbucketCloudApi) {\n        if (!url.startsWith(\"https://\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API clients must use https://\");\n        }\n        if (!url.contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API clients must use a fully qualified URL\");\n        }\n    }\n    return url;\n}", "CodeBleu_score": 45.08140017099824}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t// Initialize Bitbucket context\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n\n        // Check if notifications are disabled\n        if (context.disableNotifications()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        // Get SCM revision\n        SCMRevision revision = source.fetch(build, listener);\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] No SCM revision\");\n            return;\n        }\n\n        // Determine whether to share the build key between branch and PR\n        boolean shareBuildKeyBetweenBranchAndPR = false;\n        if (revision instanceof PullRequestSCMRevision) {\n            SCMHead origin = ((PullRequestSCMRevision) revision).getPull().getOrigin();\n            if (origin instanceof BranchSCMHead) {\n                shareBuildKeyBetweenBranchAndPR = true;\n            }\n        }\n\n        // Determine the build key\n        String key = getBuildKey(build, source.getBranch(), shareBuildKeyBetweenBranchAndPR);\n\n        // Initialize Bitbucket client\n        BitbucketApi bitbucket = source.getBitbucketClient(build, listener);\n\n        // Get SCM revision hash\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No SCM revision hash\");\n            return;\n        }\n\n        // Create and send build status notification\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 56.410944119215415}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t// Check if notifications are disabled\n        if (!source.isNotifyCommit()) {\n            listener.getLogger().println(\"[Bitbucket] Build status notifications are disabled\");\n            return;\n        }\n\n        // Initialize Bitbucket context\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        BitbucketApi bitbucket = BitbucketApiFactory.newInstance(source.getServerUrl(), context.getApiType());\n\n        // Retrieve SCM revision\n        SCMRevision revision = source.fetch(build, listener);\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] No revision found\");\n            return;\n        }\n\n        // Determine whether to share the build key between branch and PR\n        String branch = source.getBranch();\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        // Determine build key\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        // Determine hash\n        String hash = getHash(revision);\n\n        // Initialize Bitbucket client\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            listener.getLogger().println(\"[Bitbucket] Sending build status notification for commit \" + hash + \" to Bitbucket Cloud\");\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Sending build status notification for commit \" + hash + \" to Bitbucket Server\");\n        }\n\n        // Create and send build status notification\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 51.1333512624642}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t// Check if notifications are disabled.\n        if (source.isDisableBitbucketNotifications()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled for this project.\");\n            return;\n        }\n\n        // Get the SCM revision and its hash.\n        SCMRevision revision = source.fetch(build, listener);\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No hash found for the SCM revision.\");\n            return;\n        }\n\n        // Determine whether to share the build key between branch and PR.\n        boolean shareBuildKeyBetweenBranchAndPR = source.isShareBuildKeyBetweenBranchAndPR();\n\n        // Determine the build key.\n        String key = getBuildKey(build, source.getBranch(), shareBuildKeyBetweenBranchAndPR);\n\n        // Initialize the Bitbucket context.\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        BitbucketApi api = new BitbucketApiFactory().create(context, source.getServerUrl());\n\n        // Initialize the Bitbucket client.\n        BitbucketClientFactory clientFactory = new BitbucketClientFactory(api, listener);\n        BitbucketClient client = clientFactory.getClient();\n\n        // Create and send the build status notification.\n        createStatus(build, listener, client, key, hash);\n    }", "CodeBleu_score": 50.022096319164625}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = build.getParent().getFullName();\n    if (shareBuildKeyBetweenBranchAndPR) {\n        String folderName = build.getParent().getParent().getFullName();\n        if (folderName != null && !folderName.isEmpty()) {\n            buildKey = folderName + \"/\" + branch;\n        }\n    }\n    return buildKey;\n}", "CodeBleu_score": 55.98943179315115}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString jobName = build.getParent().getFullName();\n    String buildKey = jobName;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = jobName + \"-\" + branch;\n    }\n    return buildKey;\n}", "CodeBleu_score": 37.47547303819535}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \":\" + branch;\n    } else {\n        buildKey = build.getParent().getFullName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 47.96127131886701}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = Jenkins.getInstance().getRootUrl();\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.serverUrl is null, defaulting to Jenkins root URL\");\n    }\n    if (traits == null) {\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.traits is null, reconstructing legacy traits\");\n        traits = new ArrayList<>();\n        if (includes != null) {\n            traits.add(new BranchDiscoveryTrait(includes, excludes));\n        }\n        if (buildStrategies != null) {\n            traits.add(new BuildOriginPullRequestDiscoveryTrait(buildStrategies));\n        }\n        if (originPRStrategy != null) {\n            traits.add(new ForkPullRequestDiscoveryTrait(originPRStrategy));\n        }\n        if (originPushStrategy != null) {\n            traits.add(new ForkPullRequestDiscoveryTrait(originPushStrategy));\n        }\n        if (trustSelfSignedCertificate) {\n            traits.add(new SelfSignedCertificateTrait(true));\n        }\n        if (sshCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(sshCredentialsId));\n        }\n        if (skipSslValidation) {\n            traits.add(new SslIgnoreTrait(true));\n        }\n        if (sshCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(sshCredentialsId));\n        }\n        if (sshPrivateKeyCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(sshPrivateKeyCredentialsId));\n        }\n        if (sshCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(sshCredentialsId));\n        }\n        if (sshPrivateKeyCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(sshPrivateKeyCredentialsId));\n        }\n        if (sshCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(sshCredentialsId));", "CodeBleu_score": 45.31432121032537}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (getServerUrl() == null) {\n        // If the server URL is null, the server URL is the server URL of the first repository.\n        if (getRepositories() != null && !getRepositories().isEmpty()) {\n            setServerUrl(getRepositories().get(0).getServerUrl());\n        }\n        // If the server URL is still null, the server URL is the default server URL.\n        if (getServerUrl() == null) {\n            setServerUrl(BitbucketSCMNavigator.DEFAULT_SERVER_URL);\n        }\n    }\n    if (getTraits() == null) {\n        // If the traits are null, the legacy behavior is to use the BitbucketSCMSourceTrait.\n        List<SCMSourceTrait> legacyTraits = new ArrayList<SCMSourceTrait>();\n        legacyTraits.add(new BitbucketSCMSourceTrait());\n        setTraits(legacyTraits);\n    }\n    return this;\n}", "CodeBleu_score": 13.232666374831403}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        LOGGER.log(Level.WARNING, \"serverUrl is null\");\n    }\n    if (traits == null) {\n        LOGGER.log(Level.WARNING, \"traits is null\");\n        traits = new ArrayList<>();\n        if (repositoryOwner != null) {\n            traits.add(new BitbucketRepositoryOwnerTrait(repositoryOwner));\n        }\n        if (repositoryName != null) {\n            traits.add(new BitbucketRepositoryNameTrait(repositoryName));\n        }\n        if (credentialsId != null) {\n            traits.add(new BitbucketCredentialsTrait(credentialsId));\n        }\n        if (branches != null) {\n            traits.add(new BitbucketBranchDiscoveryTrait(branches));\n        }\n        if (prDestinationBranches != null) {\n            traits.add(new BitbucketPullRequestDiscoveryTrait(prDestinationBranches));\n        }\n        if (prBranchFilter != null) {\n            traits.add(new BitbucketPullRequestBranchFilterTrait(prBranchFilter));\n        }\n        if (prStatusFilter != null) {\n            traits.add(new BitbucketPullRequestStatusFilterTrait(prStatusFilter));\n        }\n        if (prTriggerFilter != null) {\n            traits.add(new BitbucketPullRequestTriggerFilterTrait(prTriggerFilter));\n        }\n        if (prOriginBranchFilter != null) {\n            traits.add(new BitbucketPullRequestOriginBranchFilterTrait(prOriginBranchFilter));\n        }\n        if (prDestinationBranchFilter != null) {\n            traits.add(new BitbucketPullRequestDestinationBranchFilterTrait(prDestinationBranchFilter));\n        }\n        if (prMergeStrategy != null) {\n            traits.add(new BitbucketPullRequestMergeStrategyTrait(prMergeStrategy));\n        }\n        if (prCommentTriggerFilter != null) {\n            traits.add(new BitbucketPullRequestCommentTriggerFilterTrait(prCommentTriggerFilter));", "CodeBleu_score": 33.401292754755815}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tRepository repository = repositoryService.getByName(name);\n    if (repository == null) {\n        logger.error(\"Repository not found: \" + name);\n        return;\n    }\n    if (isMatch) {\n        logger.info(\"Proposing repository: \" + name);\n        repository.setProposed(true);\n        repositoryService.update(repository);\n        count.incrementAndGet();\n    } else {\n        logger.info(\"Ignoring repository: \" + name);\n    }\n}", "CodeBleu_score": 43.6508054756092}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tRepository repository = repositoryService.findByName(name);\n    if (repository == null) {\n        log.warn(\"Could not find repository with name: {}\", name);\n        return;\n    }\n    if (isMatch) {\n        repository.setProposed(true);\n        repository.setProposedCount(repository.getProposedCount() + 1);\n    } else {\n        repository.setIgnored(true);\n        repository.setIgnoredCount(repository.getIgnoredCount() + 1);\n    }\n    repositoryService.save(repository);\n    log.info(\"{} repository: {}\", isMatch ? \"Proposed\" : \"Ignored\", name);\n}", "CodeBleu_score": 40.58506820501938}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tRepository repo = repositoryService.getRepository(name);\n    if (repo == null) {\n        logger.warn(\"No repository found with name: \" + name);\n        return;\n    }\n    if (isMatch) {\n        logger.info(\"Repository {} is proposed\", name);\n        repo.setProposed(true);\n        repo.setProposedCount(repo.getProposedCount() + 1);\n    } else {\n        logger.info(\"Repository {} is ignored\", name);\n        repo.setIgnored(true);\n        repo.setIgnoredCount(repo.getIgnoredCount() + 1);\n    }\n    repositoryService.save(repo);\n}", "CodeBleu_score": 40.906692577147055}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev.getType() == RevisionType.TAG) {\n            return rev;\n        }\n        String sha1 = rev.getSha1String();\n        if (commitExists(git, sha1)) {\n            return rev;\n        }\n        if (marked != null) {\n            String markedSha1 = marked.getSha1String();\n            if (commitExists(git, markedSha1)) {\n                return rev;\n            }\n        }\n        // We have a branch that doesn't exist locally.\n        // Try to find a remote branch that does.\n        String remoteBranch = findRemoteBranch(scm, build, listener, sha1);\n        if (remoteBranch == null) {\n            // We couldn't find a remote branch that exists locally.\n            // Create a RefSpec for the missing commit.\n            RefSpec refSpec = new RefSpec(sha1 + \":\" + sha1);\n            try {\n                git.fetch(null, refSpec);\n            } catch (GitException e) {\n                // The commit doesn't exist remotely.\n                // This is a fatal error.\n                throw new AbortException(\"Could not find commit \" + sha1 + \" in remote repository\");\n            }\n            return rev;\n        }\n        // We have a remote branch.\n        // Create a RefSpec for the missing commit.\n        RefSpec refSpec = new RefSpec(remoteBranch + \":\" + sha1);\n        try {\n            git.fetch(null, refSpec);\n        } catch (GitException e) {\n            // The commit doesn't exist remotely.\n            // This is a fatal error.\n            throw new AbortException(\"Could not find commit \" + sha1 + \" in remote repository\");\n        }\n        return rev;\n    }", "CodeBleu_score": 35.4333778777145}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (marked != null) {\n            return marked;\n        }\n        if (rev.getSha1() == null) {\n            return rev;\n        }\n        if (rev.getSha1().length() == 40) {\n            if (!commitExists(git, rev.getSha1())) {\n                try {\n                    // fetch missing commits\n                    listener.getLogger().println(\"Fetching missing commits from \" + scm.getRepositoryByName(rev.getBranch()));\n                    git.fetch_().from(scm.getRepositoryByName(rev.getBranch()), new RefSpec(\"+refs/heads/*:refs/remotes/origin/*\")).execute();\n                } catch (GitException e) {\n                    listener.error(\"Failed to fetch missing commits from \" + scm.getRepositoryByName(rev.getBranch()));\n                    throw new AbortException(e.getMessage());\n                }\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 31.629402555736153}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// Check if we have a branch with a hash.\n        if (marked != null && marked.getSha1() != null) {\n            String sha1 = marked.getSha1();\n\n            // Check if the commit exists locally.\n            if (!commitExists(git, sha1)) {\n                // If not, we need to fetch the commit from the remote repository.\n                // We use the clone link to find the remote repository.\n                String cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n\n                // Create the RefSpec to fetch the commit.\n                RefSpec refSpec = new RefSpec(sha1 + \":refs/remotes/origin/\" + sha1);\n\n                // Fetch the commit from the remote repository.\n                git.fetch_()\n                    .from(cloneLink, Arrays.asList(refSpec))\n                    .execute();\n\n                // Check if the commit exists now.\n                if (commitExists(git, sha1)) {\n                    // If it does, we can use it.\n                    return marked;\n                }\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 35.83895756792017}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tMap<String, BitbucketHref> links = getLinks();\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        newLinks.put(entry.getKey(), entry.getValue());\n    }\n    return newLinks;\n}", "CodeBleu_score": 52.43780168701755}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 74.44040653730201}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().clone());\n    }\n    return result;\n}", "CodeBleu_score": 58.94292894099009}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (!resourceStates.length) {\n\t\treturn;\n\t}\n\n\tconst { provider, rootFsPath } = this.getRepository(resourceStates[0].resourceUri);\n\n\tif (!provider) {\n\t\treturn;\n\t}\n\n\tconst resources = distinct(resourceStates.map(r => r.resourceUri), r => r.toString());\n\n\tconst result = await provider.add(resources, {\n\t\tprogress: (resource, progress) => {\n\t\t\tthis._onDidChangeOperation.fire({\n\t\t\t\tresource,\n\t\t\t\toperation: Operation.Add,\n\t\t\t\tstatus: Status.InProgress,\n\t\t\t\tprogress\n\t\t\t});\n\t\t}\n\t});\n\n\tif (result) {\n\t\tfor (const resource of resources) {\n\t\t\tthis._onDidChangeOperation.fire({\n\t\t\t\tresource,\n\t\t\t\toperation: Operation.Add,\n\t\t\t\tstatus: Status.Succeeded\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 39.557428145354365}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n        return;\n    }\n\n    // Get the selected resources.\n    const selectedResources: SourceControlResourceState[] = resourceStates.filter((resourceState: SourceControlResourceState) => resourceState.resourceUri.scheme === 'file');\n\n    // Check if there are any selected resources.\n    if (selectedResources.length === 0) {\n        return;\n    }\n\n    // Get the resources grouped by their repository.\n    const resourcesByRepository: Map<string, SourceControlResourceState[]> = new Map();\n    for (const selectedResource of selectedResources) {\n        const repository: string = this.getRepository(selectedResource.resourceUri);\n        if (repository === undefined) {\n            continue;\n        }\n\n        let resources: SourceControlResourceState[] | undefined = resourcesByRepository.get(repository);\n        if (resources === undefined) {\n            resources = [];\n            resourcesByRepository.set(repository, resources);\n        }\n\n        resources.push(selectedResource);\n    }\n\n    // Add the resources to each repository.\n    for (const [repository, resources] of resourcesByRepository) {\n        await this.addResources(repository, resources);\n    }\n}", "CodeBleu_score": 38.75859643728043}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = new Map<string, SourceControlResourceState[]>();\n\tfor (const resource of resourceStates) {\n\t\tconst key = this.getRepositoryKey(resource);\n\t\tif (key) {\n\t\t\tconst arr = resources.get(key) || [];\n\t\t\tarr.push(resource);\n\t\t\tresources.set(key, arr);\n\t\t}\n\t}\n\n\tconst promises: Promise<void>[] = [];\n\tfor (const [repository, resources] of resources) {\n\t\tpromises.push(this.addResources(repository, resources));\n\t}\n\n\tawait Promise.all(promises);\n}", "CodeBleu_score": 41.56713421376362}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tif (this.resourceStates.length === 0 || !(this.resourceStates[0].resource instanceof Uri)) {\n\t\tlet resource = await this.getSCMResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [new Resource(resource, this.provider)].concat(this.resourceStates);\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 34.42507782656678}, {"code": "protected async getResourceStates{\n\tif (!this.resourceStates || this.resourceStates.length === 0 || !(this.resourceStates[0].resource instanceof Uri)) {\n\t\tconst resource = await this.getResource();\n\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [new Resource(resource, {})];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 34.22756170494031}, {"code": "protected async getResourceStates{\n\tif (resourceStates.length === 0 || !resourceStates[0].resourceUri.instanceof(Uri)) {\n\n        let scmResource = await this.getSCMResource();\n\n        if (scmResource) {\n\n            resourceStates.push(scmResource);\n        }\n    }\n\n    return resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 41.7183851272324}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tlet uriToUse: Uri | undefined = uri;\n    if (!uriToUse) {\n      uriToUse = window.activeTextEditor?.document.uri;\n    }\n    if (!uriToUse) {\n      return undefined;\n    }\n    if (uriToUse.scheme === 'svn') {\n      uriToUse = Uri.file(uriToUse.path);\n    }\n    const repository = await this.sourceControlManager.getRepository(uriToUse);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uriToUse);\n  }", "CodeBleu_score": 44.167827547422355}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tconst editor = window.activeTextEditor;\n    const resource = editor && editor.document.uri;\n    if (!resource) {\n      return undefined;\n    }\n    if (uri) {\n      uri = uri.with({ scheme: 'file' });\n    } else if (resource.scheme !== 'file') {\n      return undefined;\n    }\n    const sourceControlManager = workspace.scm;\n    if (!sourceControlManager) {\n      return undefined;\n    }\n    const repository = sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 49.50266201140092}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      uri = window.activeTextEditor?.document.uri;\n    }\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === 'svn') {\n      uri = await this.fromSvnUri(uri);\n      if (!uri) {\n        return undefined;\n      }\n    }\n    const repository = await this.repository.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return this.repository.getResourceFromFile(uri, repository);\n  }", "CodeBleu_score": 42.24314147871432}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepository = await this.model.getRemoteRepository(element);\n    if (element.status === Status.Modified) {\n      const oldRevision = element.oldRevision;\n      const newRevision = element.newRevision;\n      const oldPath = element.oldPath;\n      const newPath = element.newPath;\n      const oldFile = await this.model.getFile(oldRevision, oldPath, remoteRepository);\n      const newFile = await this.model.getFile(newRevision, newPath, remoteRepository);\n      const diff = await this.model.getDiff(oldFile, newFile);\n      this.openDiff(diff);\n    } else if (element.status === Status.Added) {\n      const newRevision = element.newRevision;\n      const newPath = element.newPath;\n      const file = await this.model.getFile(newRevision, newPath, remoteRepository);\n      this.openFileRemote(file);\n    }\n  }", "CodeBleu_score": 35.30023054834386}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.isModified) {\n   this.openDiff(element);\n  } else {\n   const remoteRepository = await this.model.getRemoteRepository(element);\n   this.openFileRemote(remoteRepository, element.newPath, element.newRevision);\n  }\n }", "CodeBleu_score": 34.05840099876379}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet remoteRepository = this.model.getRemoteRepository(element.path);\n  if (element.type === 'modified') {\n   this.openDiff(element.path, element.oldRevision, element.newRevision, remoteRepository);\n  } else if (element.type === 'added') {\n   this.openFileRemote(element.path, element.newRevision, remoteRepository);\n  }\n }", "CodeBleu_score": 36.66245728970859}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (window.activeTextEditor && window.activeTextEditor.document) {\n        const commit = item.commit;\n        if (commit) {\n            const message = commit.message;\n            const revision = commit.revision;\n            const commitMessage = `${message} (${revision})`;\n            if (navigator.clipboard && what === 'message') {\n                await navigator.clipboard.writeText(commitMessage);\n            } else {\n                window.showErrorMessage('Clipboard not supported.');\n            }\n        }\n    }\n}", "CodeBleu_score": 41.10181341996616}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (window.activeTextEditor === undefined) {\n\t\treturn;\n\t}\n\tif (!window.activeTextEditor.document.fileName.endsWith('git-history.md')) {\n\t\treturn;\n\t}\n\tif (!isClipboardSupported()) {\n\t\twindow.showErrorMessage('Clipboard not supported.');\n\t\treturn;\n\t}\n\tif (item.commit === undefined) {\n\t\treturn;\n\t}\n\tif (what === 'commitMessage') {\n\t\tconst a = item.commit.commitMessage;\n\t\tif (a === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tawait copyToClipboard(a);\n\t}\n\tif (what === 'revision') {\n\t\tconst a = item.commit.revision;\n\t\tif (a === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tawait copyToClipboard(a);\n\t}\n}", "CodeBleu_score": 40.275773584721605}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (vscode.env.clipboard.writeText) {\n\t\tlet a: string;\n\t\tif (what === 'message') {\n\t\t\ta = item.commit.message;\n\t\t} else if (what === 'revision') {\n\t\t\ta = item.commit.hash;\n\t\t}\n\t\tvscode.env.clipboard.writeText(a);\n\t} else {\n\t\tvscode.window.showErrorMessage('Clipboard not supported');\n\t}\n}", "CodeBleu_score": 28.26211523133488}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n        long priority = 0L;\n        GiteaConnectionFactory best = null;\n        for (GiteaConnectionFactory factory : loader) {\n            if (factory.canOpen(this)) {\n                long p = factory.priority(this);\n                if (best == null || p > priority) {\n                    best = factory;\n                    priority = p;\n                }\n            }\n        }\n        if (best != null) {\n            return best.open(this);\n        }\n        throw new IOException(\"No implementation for connecting to \" + serverUrl);\n    }", "CodeBleu_score": 97.57784747925552}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n        long priority = 0L;\n        GiteaConnectionFactory best = null;\n        for (GiteaConnectionFactory factory : loader) {\n            if (factory.canOpen(this)) {\n                long p = factory.priority(this);\n                if (best == null || p > priority) {\n                    best = factory;\n                    priority = p;\n                }\n            }\n        }\n        if (best != null) {\n            return best.open(this);\n        }\n        throw new IOException(\"No implementation for connecting to \" + serverUrl);\n    }", "CodeBleu_score": 97.57784747925552}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\treturn open(false);\n}", "CodeBleu_score": 2.2655930399497928}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        return new Gitea(jenkins.pluginManager.uberClassLoader);\n    } else {\n        return new Gitea(getClass().getClassLoader());\n    }\n}", "CodeBleu_score": 36.78851176654042}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstance();\n    ClassLoader classLoader = jenkins != null ? jenkins.pluginManager.uberClassLoader : this.getClass().getClassLoader();\n    return this.setClassLoader(classLoader);\n}", "CodeBleu_score": 50.814009716189965}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        return new Gitea(jenkins.pluginManager.uberClassLoader);\n    } else {\n        return new Gitea(this.getClass().getClassLoader());\n    }\n}", "CodeBleu_score": 34.43001938078935}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n        this.serverUrl = serverUrl;\n        this.manageHooks = manageHooks;\n        this.credentialsId = credentialsId;\n        this.aliasUrl = aliasUrl;\n\n        if (aliasUrl == null) {\n            this.aliasUrl = serverUrl;\n        }\n\n        if (displayName == null) {\n            this.displayName = serverUrl;\n        }\n\n        if (!serverUrl.endsWith(\"/\")) {\n            serverUrl = serverUrl + \"/\";\n        }\n    }", "CodeBleu_score": 32.44005645718377}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tsuper(displayName, serverUrl, manageHooks, credentialsId, aliasUrl);\n}", "CodeBleu_score": 13.281725701487671}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName\n    this.serverUrl = serverUrl\n    this.manageHooks = manageHooks\n    this.credentialsId = credentialsId\n    this.aliasUrl = aliasUrl\n\n    if (this.credentialsId != null) {\n        this.manageHooks = true\n    }\n\n    if (this.displayName == null) {\n        this.displayName = serverUrl\n    }\n\n    if (this.aliasUrl == null) {\n        this.aliasUrl = serverUrl\n    }\n\n    this.serverUrl = serverUrl.trim()\n    this.aliasUrl = aliasUrl.trim()\n\n    if (!this.serverUrl.endsWith('/')) {\n        this.serverUrl += '/'\n    }\n\n    if (!this.aliasUrl.endsWith('/')) {\n        this.aliasUrl += '/'\n    }\n}", "CodeBleu_score": 29.890467806305303}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\treturn doFillCredentialsIdItems(serverUrl, null);\n}", "CodeBleu_score": 6.2486144066076506}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (serverUrl == null || serverUrl.isEmpty()) {\n        return new StandardListBoxModel();\n    }\n\n    try {\n        return new StandardListBoxModel()\n            .includeEmptyValue()\n            .includeMatchingAs(ACL.SYSTEM, Jenkins.getInstance(), GiteaAuth.class,\n                (item, auth) -> auth.getServerUrl().equals(serverUrl));\n    } catch (IOException e) {\n        return new StandardListBoxModel();\n    }\n}", "CodeBleu_score": 33.16869983684575}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (hasAdminPermissions()) {\n        ListBoxModel items = new ListBoxModel();\n        String normalizedServerUrl = normalizeServerUrl(serverUrl);\n        for (GiteaAuth auth : GiteaAuth.all()) {\n            if (auth.getServerUrl().equals(normalizedServerUrl)) {\n                items.add(auth.getCredentialsId());\n            }\n        }\n        return items;\n    } else {\n        return new ListBoxModel();\n    }\n}", "CodeBleu_score": 35.94168407142574}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            return null;\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"/\";\n        }\n        String query = uri.getQuery();\n        if (query != null) {\n            path = path + \"?\" + query;\n        }\n        String fragment = uri.getFragment();\n        if (fragment != null) {\n            path = path + \"#\" + fragment;\n        }\n        return new URI(scheme, null, host, port, path, null, null).toString().toLowerCase().replaceAll(\"/$\", \"\");\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 45.501211090308374}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n\n        if (scheme == null || host == null) {\n            return null;\n        }\n\n        if (scheme.equals(\"http\") && port == 80) {\n            port = -1;\n        } else if (scheme.equals(\"https\") && port == 443) {\n            port = -1;\n        }\n\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n\n        if (path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n\n        return new URI(scheme, null, host, port, path, null, null).toString();\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 49.790448944803956}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        String path = uri.getPath();\n        String query = uri.getQuery();\n        String fragment = uri.getFragment();\n        String normalizedUrl = \"\";\n        if (scheme == null) {\n            normalizedUrl = \"http://\";\n        } else {\n            normalizedUrl = scheme + \"://\";\n        }\n        if (host == null) {\n            normalizedUrl += \"localhost\";\n        } else {\n            normalizedUrl += host;\n        }\n        if (port != -1) {\n            if (port == 80 && scheme.equals(\"http\")) {\n                normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 3);\n            } else if (port == 443 && scheme.equals(\"https\")) {\n                normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 3);\n            } else {\n                normalizedUrl += \":\" + port;\n            }\n        }\n        if (path == null) {\n            normalizedUrl += \"/\";\n        } else {\n            normalizedUrl += path;\n        }\n        if (query != null) {\n            normalizedUrl += \"?\" + query;\n        }\n        if (fragment != null) {\n            normalizedUrl += \"#\" + fragment;\n        }\n        return normalizedUrl.toLowerCase().replaceAll(\"\\\\s\", \"\");\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 41.94897152492879}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        items.add(server.getDisplayName(), server.getUrl());\n    }\n    return items;\n}", "CodeBleu_score": 31.50173720008269}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        items.add(server.getDisplayName(), server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 32.179867645640456}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        items.add(server.getDisplayName(), server.getUrl());\n    }\n    return items;\n}", "CodeBleu_score": 31.50173720008269}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException(Messages.GiteaServers_NotAdmin());\n        }\n\n        if (servers == null) {\n            servers = Collections.emptyList();\n        }\n\n        // remove duplicates and empty URLs\n        Set<String> urls = new HashSet<>();\n        List<GiteaServer> serversList = new ArrayList<>();\n        for (GiteaServer server : servers) {\n            String url = server.getUrl();\n            if (url != null && !url.isEmpty()) {\n                if (!urls.contains(url)) {\n                    serversList.add(server);\n                    urls.add(url);\n                }\n            }\n        }\n\n        // update servers\n        this.servers.clear();\n        this.servers.addAll(serversList);\n\n        // save configuration\n        save();\n    }", "CodeBleu_score": 41.49238987864868}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException();\n        }\n        if (servers == null) {\n            servers = Collections.emptyList();\n        }\n        servers = new ArrayList<>(servers);\n        servers.removeIf(server -> server.getServerUrl() == null || server.getServerUrl().isEmpty());\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITLAB_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITHUB_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_BITBUCKET_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITLAB_ENTERPRISE_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITHUB_ENTERPRISE_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_BITBUCKET_ENTERPRISE_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITEA_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITHUB_ENTERPRISE_2_SERVER));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITEA_SERVER_2));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITEA_SERVER_3));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITEA_SERVER_4));\n        servers.removeIf(server -> server.getServerUrl().equals(GiteaServer.DEFAULT_GITEA_SERVER_5));", "CodeBleu_score": 24.11743832670185}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException(\"Need admin permission to set servers\");\n        }\n        List<GiteaServer> serversToSet = new ArrayList<GiteaServer>();\n        if (servers != null) {\n            for (GiteaServer server : servers) {\n                if (server != null && server.getServerUrl() != null && !server.getServerUrl().isEmpty()) {\n                    serversToSet.add(server);\n                }\n            }\n        }\n        this.servers = serversToSet;\n        save();\n    }", "CodeBleu_score": 34.65130059225806}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tserverUrl = normalizeServerUrl(serverUrl);\n    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    List<GiteaServer> newServers = new ArrayList<>();\n    for (GiteaServer server : servers) {\n        if (!serverUrl.equals(server.getServerUrl())) {\n            newServers.add(server);\n        }\n    }\n    if (newServers.size() == servers.size()) {\n        return false;\n    }\n    servers = newServers;\n    save();\n    return true;\n}", "CodeBleu_score": 38.151175389184914}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    for (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        String endpointUrl = endpoint.getServerUrl();\n        if (StringUtils.equals(serverUrl, endpointUrl)) {\n            iterator.remove();\n            save();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 45.07060499682976}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tserverUrl = normalizeServerUrl(serverUrl);\n        List<GiteaServer> newServers = new ArrayList<>(servers.size());\n        boolean removed = false;\n        for (GiteaServer server : servers) {\n            if (!server.getServerUrl().equals(serverUrl)) {\n                newServers.add(server);\n            } else {\n                removed = true;\n            }\n        }\n        if (removed) {\n            servers = newServers;\n            save();\n        }\n        return removed;\n    }", "CodeBleu_score": 47.11657278573422}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = el.asType().toString();\n      descriptorElements.add(new DescriptorElement(el, type, attributes));\n    }\n  }", "CodeBleu_score": 48.481267499477774}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = el.asType().toString();\n      if (attributes.containsKey(\"type\")) {\n        type = attributes.get(\"type\");\n      }\n      descriptorElements.add(new DescriptorElement(el.getSimpleName().toString(), type, attributes));\n    }\n  }", "CodeBleu_score": 48.24668801857316}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = el.asType().toString();\n      descriptorElements.add(new DescriptorElement(type, attributes));\n    }\n  }", "CodeBleu_score": 51.75049635843156}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace(\"$\", \".\")\n                .equals(annotationClass.getCanonicalName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 51.64376641023296}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().equals(annotationClass.getCanonicalName().replace(\"$\", \".\"))) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 54.67720966935967}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace('$', '.').equals(annotationClass.getCanonicalName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.709361402950385}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"leave_type\": [\"not in\", [\"Holiday\", \"On Leave\"]],\n    }\n    if for_approval:\n        filters[\"status\"] = [\"in\", get_allowed_states_for_workflow(get_workflow_name(\"Leave Application\"), approver_id)]\n    else:\n        filters[\"status\"] = [\"not in\", [\"Canceled\"]]\n    return filters\n\n", "CodeBleu_score": 27.40693215925816}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n    }\n    if approver_id:\n        filters[\"approver\"] = approver_id\n        if for_approval:\n            filters[\"status\"] = [\"not in\", [\"Approved\", \"Rejected\"]]\n            filters[\"approver\"] = [\"not in\", [employee]]\n    else:\n        if for_approval:\n            filters[\"status\"] = [\"not in\", [\"Approved\", \"Rejected\", \"Cancelled\"]]\n    return filters\n\n", "CodeBleu_score": 26.16785228210649}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n    }\n\n    if approver_id:\n        filters.update({\n            \"status\": [\"in\", get_allowed_states_for_workflow(get_workflow_for_doctype(\"Leave Application\"), approver_id)],\n            \"approver\": [\"!=\", approver_id],\n        })\n    elif for_approval:\n        filters.update({\n            \"status\": [\"in\", get_allowed_states_for_workflow(get_workflow_for_doctype(\"Leave Application\"), employee)],\n            \"approver\": [\"!=\", employee],\n        })\n    else:\n        filters.update({\n            \"status\": \"Open\",\n            \"cancelled\": 0,\n        })\n\n    return filters\n\n", "CodeBleu_score": 26.99326921295993}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tleave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    current_date = datetime.date.today()\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {}\n        allocated_leaves = leave_details[leave_type][0]\n        balance_leaves = leave_details[leave_type][1]\n        leave_balance_map[leave_type][\"allocated\"] = allocated_leaves\n        leave_balance_map[leave_type][\"balance\"] = balance_leaves\n        if leave_type == \"casual\":\n            if allocated_leaves > balance_leaves:\n                leave_balance_map[leave_type][\"balance\"] = 0\n            elif allocated_leaves < balance_leaves:\n                leave_balance_map[leave_type][\"balance\"] = balance_leaves - allocated_leaves\n            else:\n                leave_balance_map[leave_type][\"balance\"] = balance_leaves\n        elif leave_type == \"sick\":\n            if allocated_leaves > balance_leaves:\n                leave_balance_map[leave_type][\"balance\"] = 0\n            elif allocated_leaves < balance_leaves:\n                leave_balance_map[leave_type][\"balance\"] = balance_leaves - allocated_leaves\n            else:\n                leave_balance_map[leave_type][\"balance\"] = balance_leaves\n        elif leave_type == \"maternity\":\n            if allocated_leaves > balance_leaves:\n                leave_balance_map[leave_type][\"balance\"] = 0\n            elif allocated_leaves < balance_leaves:\n                leave_balance_map[leave_type][\"balance\"] = balance_leaves - allocated_leaves\n            else:\n                leave_balance_map[leave_type][\"balance\"] = balance_leaves\n        elif leave_type == \"paternity\":\n            if allocated_leaves > balance_leaves:", "CodeBleu_score": 25.214020865880904}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t# Get current date\n    current_date = get_current_date()\n\n    # Get leave details\n    leave_details = get_leave_details(employee, current_date)\n\n    # Construct leave balance map\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"]\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 38.86187811442656}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\ttoday = date.today()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"]\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.29805943576099}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list == None:\n        return []\n\n    holidays = []\n    for holiday in holiday_list:\n        if holiday[\"type\"] == \"Holiday\":\n            holidays.append(holiday)\n\n    holidays.sort(key=lambda holiday: holiday[\"date\"])\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 25.804318554305382}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = get_holiday_list_for_employee(employee)\n\n    if not holiday_list:\n        return []\n\n    holidays = []\n\n    for holiday_id in holiday_list:\n        holiday = get_holiday(holiday_id)\n\n        if holiday[\"type\"] == \"weekly_off\":\n            continue\n\n        holidays.append(holiday)\n\n    return sorted(holidays, key=lambda holiday: holiday[\"date\"])\n\n", "CodeBleu_score": 22.705681750903665}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholidays = []\n    holiday_list = get_holiday_list(employee)\n    if holiday_list:\n        holidays = get_holidays_from_db(holiday_list)\n        for holiday in holidays:\n            holiday[\"description\"] = strip_html(holiday[\"description\"])\n        holidays = sorted(holidays, key=lambda holiday: holiday[\"date\"])\n    return holidays\n\n", "CodeBleu_score": 22.39751166278539}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\tif frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders_in_advance\"):\n        frequency = frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")\n        send_advance_holiday_reminders(frequency)\n\n", "CodeBleu_score": 41.360300237456734}, {"code": "def send_reminders_in_advance_weekly()\n\tsettings = frappe.get_single(\"HR Settings\")\n    if settings.send_holiday_reminders_in_advance and settings.holiday_reminder_frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 20.927053827918783}, {"code": "def send_reminders_in_advance_weekly()\n\tsend_holidays_reminder_in_advance_weekly()\n\n", "CodeBleu_score": 0.8426861592747177}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\tself_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += self_rating.rating * self_rating.weightage\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 22.184250154031776}, {"code": "def calculate_self_appraisal_score(self)\n\tself_appraisal_score = 0\n    for entry in self.self_ratings:\n        self_appraisal_score += entry.rating * entry.weightage\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 29.11307771749373}, {"code": "def calculate_self_appraisal_score(self)\n\tself_appraisal_score = 0\n    for i in self.self_ratings:\n        self_appraisal_score += i.rating * i.percentage_weightage\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 23.928306962513997}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\tappraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    appraisal_formula = appraisal_cycle.appraisal_formula\n\n    if appraisal_formula:\n        appraisal_formula = sanitize_expression(appraisal_formula)\n\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        try:\n            final_score = eval(appraisal_formula)\n        except Exception:\n            frappe.log_error(\"Error in appraisal formula: \" + appraisal_formula)\n            final_score = None\n    else:\n        final_score = (\n            (total_score + average_feedback_score + self_appraisal_score) / 3\n        )\n\n    if final_score:\n        final_score = round(final_score, appraisal_cycle.precision)\n\n    self.final_score = final_score\n    self.save()\n\n", "CodeBleu_score": 31.513092200693087}, {"code": "def calculate_final_score(self)\n\tappraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        formula = appraisal_cycle.formula\n        formula = sanitize_expression(formula)\n        if formula:\n            total_score = self.total_score\n            average_feedback_score = self.average_feedback_score\n            self_appraisal_score = self.self_appraisal_score\n            try:\n                final_score = eval(formula)\n                self.final_score = round(final_score, appraisal_cycle.precision)\n            except Exception as e:\n                frappe.log_error(\n                    f\"Error calculating final score for appraisal {self.name} based on formula {formula}: {e}\"\n                )\n    else:\n        self.final_score = round(\n            (\n                self.total_score + self.average_feedback_score + self.self_appraisal_score\n            )\n            / 3,\n            appraisal_cycle.precision,\n        )\n\n", "CodeBleu_score": 27.508532055449013}, {"code": "def calculate_final_score(self)\n\tappraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score:\n        total_score = self.total_score\n        feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        formula = appraisal_cycle.final_score_formula\n\n        if not formula:\n            frappe.throw(\"Please enter a formula for the final score.\")\n\n        sanitized_formula = sanitize_expression(formula)\n        if not sanitized_formula:\n            frappe.throw(\"Please enter a formula for the final score.\")\n\n        try:\n            final_score = eval(sanitized_formula)\n        except Exception as e:\n            frappe.throw(\"The formula for the final score is invalid. Please check the formula and try again.\")\n\n        self.db_set(\"final_score\", final_score)\n    else:\n        final_score = (total_score + feedback_score + self_appraisal_score) / 3\n        self.db_set(\"final_score\", final_score)\n\n", "CodeBleu_score": 30.298280424834083}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance cannot be marked for future dates.\"))\n        elif not frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"status\": \"Approved\", \"leave_type\": \"On Duty Leave\", \"from_date\": self.attendance_date, \"to_date\": self.attendance_date}):\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the employee is on leave.\"))\n\n    elif self.attendance_date < self.employee_date_of_joining:\n        frappe.throw(_(\"Attendance cannot be marked for dates before the employee's date of joining.\"))\n\n", "CodeBleu_score": 30.87649352519942}, {"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            if not self.leave_application:\n                frappe.throw(\"Attendance Date cannot be in future. Please select a valid date.\")\n        else:\n            if self.leave_application:\n                frappe.throw(\"Attendance Date cannot be in future. Please select a valid date.\")\n            else:\n                frappe.throw(\"Attendance Date cannot be in future. Please select a valid date.\")\n    else:\n        if self.attendance_date < self.employee.date_of_joining:\n            frappe.throw(\"Attendance Date cannot be before the date of joining. Please select a valid date.\")\n\n", "CodeBleu_score": 23.2333972852507}, {"code": "def validate_attendance_date(self)\n\tif self.employee and self.employee.date_of_joining and self.attendance_date and self.attendance_date > self.employee.date_of_joining:\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be greater than the employee's date of joining\"))\n        else:\n            if not frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"status\": \"Approved\", \"from_date\": self.attendance_date, \"to_date\": self.attendance_date}):\n                frappe.throw(_(\"Attendance date cannot be greater than the employee's date of joining\"))\n\n", "CodeBleu_score": 28.198101633170076}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\tduplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        frappe.throw(\n            _(\n                \"Attendance for {0} on {1} already exists. Please edit the existing attendance record instead of creating a new one. <a href='{2}'>Click here</a> to view the existing attendance record.\"\n            ).format(\n                self.employee,\n                self.attendance_date,\n                frappe.utils.get_url(\n                    \"/desk#Form/Attendance/\" + duplicate_attendance_record\n                ),\n            )\n        )\n\n", "CodeBleu_score": 26.284603332301078}, {"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Duplicate attendance record found for {0} on {1}. Please check the existing record: {2}.\"\n            ).format(\n                self.employee,\n                self.attendance_date,\n                frappe.utils.get_link_to_form(\n                    \"Attendance\",\n                    duplicate,\n                    _(\"Go to existing attendance record\"),\n                ),\n            )\n        )\n\n", "CodeBleu_score": 34.605063347765444}, {"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record for {employee} on {date} already exists. Please check the link below.\"\n            ).format(employee=self.employee, date=self.attendance_date),\n            title=_(\"Duplicate Attendance Record\"),\n            exc=frappe.DuplicateEntryError,\n            duplicate_entry=duplicate,\n        )\n\n", "CodeBleu_score": 31.403674181739316}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\tself.get_message_details()\n    self.get_user_emails_from_group()\n    self.send_email()\n    self.update_status()\n\n", "CodeBleu_score": 6.641453635245529}, {"code": "def send_summary(self)\n\tif not self.daily_work_summary_group:\n        frappe.throw(_(\"Please specify a Daily Work Summary Group\"))\n\n    if self.status != \"Open\":\n        frappe.throw(_(\"This daily work summary has already been sent\"))\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Please specify the recipients\"))\n\n    if not self.email_template:\n        frappe.throw(_(\"Please specify an Email Template\"))\n\n    if not self.subject:\n        frappe.throw(_(\"Please specify a Subject\"))\n\n    if not self.message:\n        frappe.throw(_(\"Please specify a message\"))\n\n    if not self.send_after:\n        frappe.throw(_(\"Please specify a Send After date\"))\n\n    if self.send_after < frappe.utils.nowdate():\n        frappe.throw(_(\"The Send After date cannot be in the past\"))\n\n    if self.send_after > frappe.utils.add_days(frappe.utils.nowdate(), 1):\n        frappe.throw(_(\"The Send After date cannot be more than one day in the future\"))\n\n    if not self.email_account:\n        frappe.throw(_(\"Please specify an Email Account\"))\n\n    if not frappe.db.exists(\"Email Account\", self.email_account):\n        frappe.throw(_(\"The Email Account does not exist\"))\n\n    if not frappe.db.get_value(\"Email Account\", self.email_account, \"enable_outgoing\"):\n        frappe.throw(_(\"The Email Account is not enabled for outgoing emails\"))\n\n    if not frappe.db.get_value(\"Email Account\", self.email_account, \"append_to\"):\n        frappe.throw(_(\"The Email Account is not set to append to\"))\n\n    if not frappe.db.get_value(\"Email Account\", self.email_account, \"email_id\"):\n        frappe.throw(_(\"The Email Account does not have an Email ID\"))\n\n    if not frappe.db.get_value(\"Email Account\", self.email_account, \"password\"):\n        frappe.throw(_(\"The", "CodeBleu_score": 26.211647606718014}, {"code": "def send_summary(self)\n\tif self.status == \"Sent\":\n        return\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Please select a group to send the summary to.\"))\n\n    if not self.creation:\n        frappe.throw(_(\"Please select a date to send the summary.\"))\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Please select at least one user to send the summary to.\"))\n\n    if not self.message:\n        frappe.throw(_(\"Please enter the message to send.\"))\n\n    message_details = self.get_message_details()\n\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    if not emails:\n        frappe.throw(_(\"Please select at least one user to send the summary to.\"))\n\n    if self.send_as_attachment:\n        attachments = [frappe.attach_print(self.doctype, self.name, file_name=self.name + \".pdf\")]\n    else:\n        attachments = []\n\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details.get(\"title\"),\n        message=message_details.get(\"original_message\"),\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        attachments=attachments,\n        print_letterhead=False,\n        print_format=\"Daily Work Summary\",\n        print_format_attachment=True,\n        unsubscribe_message=None,\n        send_email=True,\n        delayed=False,\n        now=False,\n        as_bulk=False,\n    )\n\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 50.738774898342285}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\tinterview_query = Interview.objects.filter(job_posting=self.job_posting, job_applicant=self.job_applicant)\n    if interview_query:\n        raise ValidationError(\"You have already applied for this job. If you want to reschedule an interview, please contact the recruiter.\")\n\n", "CodeBleu_score": 21.16732024017746}, {"code": "def validate_duplicate_interview(self)\n\tfrom .models import Interview\n    from django.db import IntegrityError\n    from django.db.models import Q\n    from django.core.exceptions import ObjectDoesNotExist\n    from django.contrib.auth.models import User\n    from django.utils import timezone\n\n    try:\n        interview_records = Interview.objects.filter(Q(job_applicant=self.job_applicant) & Q(interview_round=self.interview_round)).exclude(pk=self.pk)\n        if interview_records:\n            for interview_record in interview_records:\n                if interview_record.interview_round.interview_round_date == self.interview_round.interview_round_date:\n                    raise IntegrityError(\"Duplicate Interview Record: The job applicant \" + self.job_applicant.job_applicant_name + \" has already been interviewed for this round on \" + self.interview_round.interview_round_date.strftime(\"%A, %B %d, %Y\") + \". Please go to the existing interview record for this job applicant and interview round to update the interview details. \" + \"<a href='/interview/interview_record/\" + str(interview_record.pk) + \"/'>\" + str(interview_record.pk) + \"</a>\")\n    except ObjectDoesNotExist:\n        pass\n\n", "CodeBleu_score": 35.2396558624959}, {"code": "def validate_duplicate_interview(self)\n\tinterview_round = self.interview_round\n    job_applicant = self.job_applicant\n    duplicate_interview = frappe.db.sql(\"\"\"select name from `tabInterview` where job_applicant = %s and interview_round = %s\"\"\", (job_applicant, interview_round), as_dict=1)\n    if duplicate_interview:\n        frappe.throw(\"Job Applicant <a href='/desk#Form/Job Applicant/{0}'>{1}</a> has already been interviewed in this round. Please <a href='/desk#Form/Interview/{2}'>{2}</a>\".format(job_applicant, job_applicant, duplicate_interview[0].get('name')))\n\n", "CodeBleu_score": 26.795508522019716}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\ttotal_rating = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total_rating / num_assessments\n\n", "CodeBleu_score": 24.359997719457834}, {"code": "def calculate_average_rating(self)\n\ttotal = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.82453903493814}, {"code": "def calculate_average_rating(self)\n\ttotal = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.220811863029258}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\tif isinstance(doc, str):\n        interview_details = doc\n    else:\n        interview_details = doc['interview_details']\n    interview_round = doc['interview_round']\n    designation = doc['designation']\n    interviewers = doc['interviewers']\n    interview = Interview(interview_round, designation, interview_details)\n    if interviewers:\n        interview.interviewers = interviewers\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 32.8711212188263}, {"code": "def create_interview(doc):\n\tinterview = Interview()\n    if isinstance(doc, dict):\n        interview.interview_round = doc['interview_round']\n        interview.designation = doc['designation']\n        interview.interviewers = doc['interviewers']\n        interview.interview_date = doc['interview_date']\n        interview.interview_time = doc['interview_time']\n        interview.interview_status = doc['interview_status']\n        interview.interview_feedback = doc['interview_feedback']\n        interview.interview_remarks = doc['interview_remarks']\n        interview.interview_location = doc['interview_location']\n        interview.save()\n        return interview\n    elif isinstance(doc, str):\n        interview.interview_round = doc\n        interview.save()\n        return interview\n\n", "CodeBleu_score": 24.43308008528813}, {"code": "def create_interview(doc):\n\tif type(doc)==str:\n        doc=json.loads(doc)\n    interview=Interview(round=doc['round'],designation=doc['designation'])\n    interview.save()\n    if 'interviewers' in doc:\n        for interviewer in doc['interviewers']:\n            interview.interviewers.add(interviewer)\n    interview.save()\n    return interview\n", "CodeBleu_score": 37.64092289612349}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.get_all('Job Offer',\n                                  filters={'from_date': from_date, 'to_date': to_date, 'designation': self.designation, 'company': self.company, 'docstatus': 1},\n                                  fields=['name', 'designation', 'from_date', 'to_date', 'company', 'status', 'job_offer_status'])\n    return job_offers\n\n", "CodeBleu_score": 48.11227151671747}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.get_all(\"Job Offer\",\n                                  filters={\n                                      \"from_date\": from_date,\n                                      \"to_date\": to_date,\n                                      \"designation\": self.designation,\n                                      \"company\": self.company,\n                                      \"docstatus\": 1\n                                  },\n                                  fields=[\"name\"])\n    return job_offers\n\n", "CodeBleu_score": 53.241822796197404}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.db.sql(\"\"\"\n        SELECT\n            name\n        FROM\n            `tabJob Offer`\n        WHERE\n            designation = %(designation)s\n            AND company = %(company)s\n            AND docstatus = 1\n            AND creation >= %(from_date)s\n            AND creation <= %(to_date)s\n        ORDER BY\n            creation\n    \"\"\", {\n        \"designation\": self.designation,\n        \"company\": self.company,\n        \"from_date\": from_date,\n        \"to_date\": to_date\n    }, as_dict=1)\n    return job_offers\n\n", "CodeBleu_score": 46.90280662698355}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t# Get total job offers\n    total_job_offers = frappe.db.count('Job Offer', {'docstatus': 1})\n    # Get accepted job offers\n    if company:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'company': company, 'status': 'Accepted'})\n    elif department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'department': department, 'status': 'Accepted'})\n    else:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'status': 'Accepted'})\n    # Calculate acceptance rate\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100\n    # Return acceptance rate\n    return acceptance_rate\n\n", "CodeBleu_score": 31.55122746862705}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\ttotal_job_offers = frappe.db.sql(\"\"\"\n        SELECT\n            COUNT(*) AS total_job_offers\n        FROM\n            `tabJob Offer`\n        WHERE\n            docstatus = 1\n            {company_filter}\n            {department_filter}\n    \"\"\".format(\n        company_filter=get_company_filter(company),\n        department_filter=get_department_filter(department)\n    ), as_dict=True)\n\n    accepted_job_offers = frappe.db.sql(\"\"\"\n        SELECT\n            COUNT(*) AS accepted_job_offers\n        FROM\n            `tabJob Offer`\n        WHERE\n            docstatus = 1\n            AND status = 'Accepted'\n            {company_filter}\n            {department_filter}\n    \"\"\".format(\n        company_filter=get_company_filter(company),\n        department_filter=get_department_filter(department)\n    ), as_dict=True)\n\n    if total_job_offers[0]['total_job_offers'] == 0:\n        return 0\n    else:\n        return round((accepted_job_offers[0]['accepted_job_offers'] / total_job_offers[0]['total_job_offers']) * 100, 2)\n\n", "CodeBleu_score": 27.0279274137555}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif company:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company})\n    else:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1})\n\n    if department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"department\": department})\n\n    accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"})\n\n    total_job_offers = len(job_offers)\n    accepted_job_offers = len(accepted_job_offers)\n\n    if accepted_job_offers == 0:\n        return 0\n\n    return (accepted_job_offers / total_job_offers) * 100\n\n", "CodeBleu_score": 31.70758606885468}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\t\tif (!result.isSuccess())\n\t\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\t\treturn ResponseEntity.ok(result);\n\t}", "CodeBleu_score": 89.74307879426813}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\t\tif (!result.isSuccess())\n\t\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\t\treturn ResponseEntity.ok(result);\n\t}", "CodeBleu_score": 89.74307879426813}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\t\tif (!result.isSuccess())\n\t\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\t\treturn ResponseEntity.ok(result);\n\t}", "CodeBleu_score": 89.74307879426813}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\t\tfinal Result passwordResult = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (!passwordResult.isSuccess()) {\n\t\t\treturn passwordResult;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult();\n\t}", "CodeBleu_score": 49.207911004980346}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\t\t}\n\t\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult();\n\t}", "CodeBleu_score": 39.9701679049662}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\t\t}\n\t\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult();\n\t}", "CodeBleu_score": 39.9701679049662}]}
