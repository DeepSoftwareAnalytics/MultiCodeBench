{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t    var dllDir = GetDirectedDllDirectory();\n\n    var dllPath = Path.Combine(dllDir, dllName);\n\n    if (OperatingSystem.IsWindows()) {\n        var hModule = LoadLibrary(dllPath);\n        if (hModule == IntPtr.Zero) {\n            throw new Exception($\"Failed to load library: {dllPath}\");\n        }\n    } else {\n        var handle = dlopen(dllPath, RTLD_NOW);\n        if (handle == IntPtr.Zero) {\n            throw new Exception($\"Failed to load library: {dllPath}\");\n        }\n    }\n}", "CodeBleu_score": 32.574985447839744}, {"code": "public static void PreloadDll(string dllName){\n\t    var dllDir = GetDirectedDllDirectory();\n\n    if (Environment.OSVersion.Platform == PlatformID.Win32NT) {\n        var dllPath = Path.Combine(dllDir, dllName);\n        var hModule = LoadLibrary(dllPath);\n        if (hModule == IntPtr.Zero) {\n            var errorCode = Marshal.GetLastWin32Error();\n            throw new Exception($\"Failed to load DLL '{dllName}': {errorCode}\");\n        }\n    } else {\n        var dllPath = Path.Combine(dllDir, dllName);\n        var result = dlopen(dllPath, RTLD_NOW | RTLD_GLOBAL);\n        if (result == IntPtr.Zero) {\n            var errorPtr = dlerror();\n            var errorMessage = Marshal.PtrToStringAnsi(errorPtr);\n            throw new Exception($\"Failed to load DLL '{dllName}': {errorMessage}\");\n        }\n    }\n}", "CodeBleu_score": 32.339723456264934}, {"code": "public static void PreloadDll(string dllName){\n\t    var dllDir = GetDirectedDllDirectory();\n\n    if (OperatingSystem.IsWindows()) {\n        var dllPath = Path.Combine(dllDir, dllName + \".dll\");\n        LoadLibrary(dllPath);\n    } else {\n        var dllPath = Path.Combine(dllDir, \"lib\" + dllName + \".so\");\n        dlopen(dllPath, RTLD_NOW | RTLD_GLOBAL);\n    }\n}", "CodeBleu_score": 35.30521432752267}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (assetsFileList.Any(x => x.OriginalPath == originalPath)) {\n        return;\n    }\n\n    var assetsFile = new SerializedFile(reader);\n    CheckStrippedVersion(assetsFile);\n    assetsFileList.Add(assetsFile);\n}", "CodeBleu_score": 20.368871610079335}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (!_assetsFiles.ContainsKey(originalPath)) {\n        try {\n            var assetsFile = new SerializedFile(reader);\n            CheckStrippedVersion(assetsFile);\n            _assetsFiles.Add(originalPath, assetsFile);\n        } catch (Exception ex) {\n            _logger.LogWarning($\"Failed to load asset file {originalPath}: {ex.Message}\");\n            _skippedFiles.Add(originalPath);\n        }\n    }\n}", "CodeBleu_score": 32.93738311591813}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (loadedAssetFiles.ContainsKey(originalPath))\n    {\n        Logger.Log(LogLevel.Warning, $\"Skipping already loaded asset file {originalPath}\");\n        return;\n    }\n\n    var assetsFile = new SerializedFile(reader);\n    CheckStrippedVersion(assetsFile);\n    loadedAssetFiles.Add(originalPath, assetsFile);\n}", "CodeBleu_score": 20.930935472123778}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t    string[] parts = path.Split('/');\n    string name = parts[0];\n    if (parts.Length == 1) {\n        if (Name == name) {\n            return this;\n        }\n    } else {\n        foreach (ImportedFrame child in FindChilds(name)) {\n            if (child.Path == path) {\n                return child;\n            }\n        }\n    }\n    return null;\n}", "CodeBleu_score": 56.58059722758048}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    string[] pathParts = path.Split('/');\n    string name = pathParts[0];\n    ImportedFrame child = null;\n    foreach (ImportedFrame frame in FindChilds(name)) {\n        if (frame.Path == path) {\n            return frame;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 65.69184723093065}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    string[] parts = path.Split('/');\n    string name = parts[0];\n    foreach (ImportedFrame child in FindChilds(name)) {\n        if (child.Path == path) {\n            return child;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 59.86506773590558}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    MemoryStream memoryStream = new MemoryStream();\n    using (GZipStream gzipStream = new GZipStream(reader.GetStream(), CompressionMode.Decompress)) {\n        gzipStream.CopyTo(memoryStream);\n    }\n    memoryStream.Position = 0L;\n    return new FileReader(memoryStream);\n}", "CodeBleu_score": 54.67737544256364}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    using (MemoryStream memoryStream = new MemoryStream()) {\n        using (GZipStream gZipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n            gZipStream.CopyTo(memoryStream);\n        }\n        return new FileReader(memoryStream.ToArray());\n    }\n}", "CodeBleu_score": 37.14106005189559}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    using (MemoryStream memoryStream = new MemoryStream()) {\n        using (GZipStream gZipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n            gZipStream.CopyTo(memoryStream);\n        }\n        memoryStream.Position = 0L;\n        return new FileReader(memoryStream);\n    }\n}", "CodeBleu_score": 60.86427388469999}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    bool stop = false;\n    foreach (string commandString in commandStrings) {\n        if (stop) {\n            nonSwitchStrings.Add(commandString);\n            continue;\n        }\n        if (commandString == stopToken) {\n            stop = true;\n            continue;\n        }\n        if (ParseString(commandString, switchForms)) {\n            continue;\n        }\n        nonSwitchStrings.Add(commandString);\n    }\n}", "CodeBleu_score": 44.55527827846105}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    // Iterate through the command strings\n    foreach (string commandString in commandStrings) {\n        // Initialize variables\n        int pos = 0;\n        bool stop = false;\n        // Iterate through the characters in the command string\n        while (pos < commandString.Length && !stop) {\n            // Check if the current character is a switch character\n            if (IsItSwitchChar(commandString[pos])) {\n                // Parse the switch using the SwitchForm objects\n                bool parsed = ParseString(commandString.Substring(pos), switchForms);\n                // If the switch was parsed successfully, update the position\n                if (parsed) {\n                    pos += switchForms[0].IDString.Length;\n                }\n            } else {\n                // If the current character is not a switch character, check if it is the stop token\n                if (commandString[pos] == kSwitchStop) {\n                    // If it is the stop token, set the stop flag to true and break out of the loop\n                    stop = true;\n                } else {\n                    // If it is not the stop token, add the current character to the non-switch string collection\n                    nonSwitchStrings.Add(commandString[pos].ToString());\n                }\n                // Increment the position\n                pos++;\n            }\n        }\n    }\n}", "CodeBleu_score": 36.596391708214185}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t", "CodeBleu_score": 7.310515368361058}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    this.m_Texture2D = m_Texture2D;\n    this.imageData = m_Texture2D.GetRawTextureData();\n    this.m_Texture2D.GetRawTextureData();\n    this.width = m_Texture2D.width;\n    this.height = m_Texture2D.height;\n    this.textureFormat = m_Texture2D.format;\n    this.version = 0;\n    this.platform = 0;\n    this.outputSize = this.imageData.Length;\n}", "CodeBleu_score": 35.69778825520294}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    imageData = m_Texture2D.GetRawTextureData();\n    width = m_Texture2D.width;\n    height = m_Texture2D.height;\n    textureFormat = m_Texture2D.format;\n    version = \"2.3.0-exp.2\";\n    platform = \"Windows\";\n    outputSize = width * height * 4;\n}", "CodeBleu_score": 49.70749397601909}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    imageData = m_Texture2D.GetRawTextureData();\n    width = m_Texture2D.width;\n    height = m_Texture2D.height;\n    textureFormat = m_Texture2D.format;\n    version = m_Texture2D.imageContentsHash.ToString();\n    platform = Application.platform.ToString();\n    outputSize = imageData.Length;\n}", "CodeBleu_score": 45.25785612379795}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        SerializedProperty element = sp.GetArrayElementAtIndex(i);\n        if (element.propertyType == SerializedPropertyType.Boolean) {\n            if (element.boolValue) {\n                result.Add(element.displayName);\n            }\n        }\n    }\n    if (result.Count == 0) {\n        return \"Nothing\";\n    }\n    else {\n        return string.Join(\", \", result);\n    }\n}", "CodeBleu_score": 44.889356813667845}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        SerializedProperty element = sp.GetArrayElementAtIndex(i);\n        if (element.propertyType == SerializedPropertyType.ObjectReference) {\n            result.Add(element.objectReferenceValue ? element.objectReferenceValue.name : \"null\");\n        } else {\n            result.Add(element.stringValue);\n        }\n    }\n    if (result.Count == 0) {\n        return \"Nothing\";\n    } else {\n        return string.Join(\", \", result);\n    }\n}", "CodeBleu_score": 46.20549962166601}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        var item = sp.GetArrayElementAtIndex(i);\n        var name = item.FindPropertyRelative(\"name\").stringValue;\n        if (string.IsNullOrEmpty(name)) {\n            continue;\n        }\n        result.Add(name);\n    }\n    if (result.Count == 0) {\n        return \"Nothing\";\n    }\n    return string.Join(\", \", result);\n}", "CodeBleu_score": 46.02607936663846}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (!add && !sp.Contains(new SerializedProperty() { name = prop.name }))\n        return;\n\n    string name = prop.name;\n    string type = prop.type;\n    string val = prop.value;\n\n    string path = sp.propertyPath + \"/\" + name;\n    SerializedProperty p = sp.serializedObject.FindProperty(path);\n\n    if (add) {\n        if (p != null)\n            return;\n\n        p = sp.InsertArrayElementAtIndex(sp.arraySize);\n        p.FindPropertyRelative(\"name\").stringValue = name;\n        p.FindPropertyRelative(\"type\").stringValue = type;\n        p.FindPropertyRelative(\"value\").stringValue = val;\n    }\n    else {\n        if (p == null)\n            return;\n\n        sp.DeleteArrayElementAtIndex(p.arrayIndex);\n    }\n\n    sp.serializedObject.ApplyModifiedProperties();\n\n    menu.AddItem(new GUIContent(name), false, () => {\n        AddMenu(menu, sp, prop, !add);\n    });\n}", "CodeBleu_score": 41.131506876055525}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    string name = prop.name;\n    if (!add) {\n        name = \"- \" + name;\n    }\n    if (sp.FindPropertyRelative(name) == null) {\n        menu.AddItem(new GUIContent(name), add, () => {\n            if (add) {\n                sp.AddProperty(name);\n            } else {\n                sp.DeleteProperty(name);\n            }\n            sp.serializedObject.ApplyModifiedProperties();\n        });\n    }\n}", "CodeBleu_score": 30.670312902423124}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    string name = prop.name;\n    string type = prop.type;\n    bool active = sp.FindPropertyRelative(name).boolValue;\n    if (add == active) {\n        return;\n    }\n    menu.AddItem(new GUIContent(name + \" (\" + type + \")\"), false, (target) => {\n        SerializedProperty prop = target as SerializedProperty;\n        prop.FindPropertyRelative(name).boolValue = !active;\n        prop.serializedObject.ApplyModifiedProperties();\n    });\n}", "CodeBleu_score": 27.36281187463392}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    bool changed = false;\n    if (showXyz) {\n        EditorGUI.BeginChangeCheck();\n        Vector3 v = sp.vector3Value;\n        v = EditorGUILayout.Vector3Field(sp.displayName, v);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = v;\n            changed = true;\n        }\n    } else {\n        EditorGUI.BeginChangeCheck();\n        float x = sp.floatValue;\n        float y = sp.FindPropertyRelative(\"y\").floatValue;\n        float z = sp.FindPropertyRelative(\"z\").floatValue;\n        bool sameValue = Mathf.Approximately(x, y) && Mathf.Approximately(y, z);\n        if (sameValue) {\n            x = EditorGUILayout.FloatField(sp.displayName, x);\n            if (EditorGUI.EndChangeCheck()) {\n                sp.floatValue = x;\n                sp.FindPropertyRelative(\"y\").floatValue = x;\n                sp.FindPropertyRelative(\"z\").floatValue = x;\n                changed = true;\n            }\n        } else {\n            EditorGUILayout.BeginHorizontal();\n            EditorGUILayout.LabelField(sp.displayName);\n            EditorGUILayout.BeginHorizontal();\n            EditorGUI.BeginChangeCheck();\n            x = EditorGUILayout.FloatField(GUIContent.none, x);\n            y = EditorGUILayout.FloatField(GUIContent.none, y);\n            z = EditorGUILayout.FloatField(GUIContent.none, z);\n            if (EditorGUI.EndChangeCheck()) {\n                sp.floatValue = x;\n                sp.FindPropertyRelative(\"y\").floatValue = y;\n                sp.FindPropertyRelative(\"z\").floatValue = z;\n                changed = true;\n            }\n            EditorGUILayout.EndHorizontal();\n            EditorGUILayout.EndHorizontal();\n        }\n    }\n    return changed;\n}", "CodeBleu_score": 40.69445588937104}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    bool isSingle = true;\n    float x = sp.vector3Value.x;\n    float y = sp.vector3Value.y;\n    float z = sp.vector3Value.z;\n\n    if (x != y || x != z || y != z) {\n        isSingle = false;\n    }\n\n    if (showXyz) {\n        EditorGUI.BeginChangeCheck();\n        EditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName), true);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n            return true;\n        }\n    } else {\n        EditorGUI.BeginChangeCheck();\n        EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), new GUIContent(sp.displayName));\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n            return true;\n        }\n    }\n\n    if (isSingle) {\n        EditorGUI.BeginChangeCheck();\n        EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), new GUIContent(sp.displayName));\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n            return true;\n        }\n    } else {\n        EditorGUI.BeginChangeCheck();\n        EditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName), true);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = new Vector3(sp.vector3Value.x, sp.vector3Value.x, sp.vector3Value.x);\n            return true;\n        }\n    }\n\n    return false;\n}", "CodeBleu_score": 37.877285708284205}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    bool changed = false;\n    if (showXyz) {\n        EditorGUI.BeginChangeCheck();\n        Vector3 v = EditorGUILayout.Vector3Field(sp.displayName, sp.vector3Value);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.vector3Value = v;\n            changed = true;\n        }\n    } else {\n        EditorGUI.BeginChangeCheck();\n        float f = EditorGUILayout.FloatField(sp.displayName, sp.floatValue);\n        if (EditorGUI.EndChangeCheck()) {\n            sp.floatValue = f;\n            changed = true;\n        }\n    }\n    return changed;\n}", "CodeBleu_score": 24.332785520163082}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    // Check if the material list is null, if so, create a new list\n    if (materialList == null) {\n        materialList = new List<MaterialEntry>();\n    }\n\n    // Loop through the material list\n    for (int i = 0; i < materialList.Count; i++) {\n        // Get the current material entry\n        MaterialEntry entry = materialList[i];\n\n        // Check if the entry's base material, texture, id, and properties match the input values\n        if (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n            // If a match is found, increment the count of the entry and return the custom material\n            entry.count++;\n            return entry.customMat;\n        }\n    }\n\n    // If no match is found, create a new material entry\n    MaterialEntry newEntry = new MaterialEntry();\n    newEntry.baseMat = baseMat;\n    newEntry.texture = texture;\n    newEntry.id = id;\n    newEntry.props = props;\n    newEntry.count = 1;\n    newEntry.customMat = new Material(baseMat);\n    newEntry.customMat.mainTexture = texture;\n\n    // Set the properties of the custom material based on the input value\n    if ((props & 1) == 1) {\n        newEntry.customMat.SetFloat(\"_Metallic\", 1f);\n    }\n    if ((props & 2) == 2) {\n        newEntry.customMat.SetFloat(\"_Glossiness\", 1f);\n    }\n    if ((props & 4) == 4) {\n        newEntry.customMat.SetFloat(\"_OcclusionStrength\", 1f);\n    }\n    if ((props & 8) == 8) {\n        newEntry.customMat.SetFloat(\"_Emission\", 1f);\n    }\n\n    // Add the new material entry to the list\n    materialList.Add(newEntry);\n\n    // Return the custom material\n    return newEntry.customMat;\n}", "CodeBleu_score": 35.294863952957236}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    Material customMat = null;\n\n    for (int i = 0; i < mats.Count; i++) {\n        if (mats[i].baseMat == baseMat && mats[i].texture == texture && mats[i].id == id && mats[i].props == props) {\n            customMat = mats[i].customMat;\n            mats[i].count++;\n            break;\n        }\n    }\n\n    if (customMat == null) {\n        customMat = new Material(baseMat);\n        customMat.mainTexture = texture;\n        customMat.SetInt(\"_ID\", id);\n        customMat.SetInt(\"_Props\", props);\n\n        MaterialEntry entry = new MaterialEntry();\n        entry.baseMat = baseMat;\n        entry.texture = texture;\n        entry.id = id;\n        entry.props = props;\n        entry.customMat = customMat;\n        entry.count = 1;\n        mats.Add(entry);\n    }\n\n    return customMat;\n}", "CodeBleu_score": 34.61405295355135}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t", "CodeBleu_score": 4.0916924613467}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) {\n        return;\n    }\n\n    for (int i = 0; i < entries.Count; i++) {\n        if (entries[i].customMat == customMat) {\n            entries[i].count--;\n\n            if (entries[i].count <= 0) {\n                UnityEngine.Object.Destroy(customMat);\n                entries[i].customMat = null;\n                entries[i].customMatData = null;\n                entries.RemoveAt(i);\n            }\n\n            return;\n        }\n    }\n}", "CodeBleu_score": 38.5494052544101}, {"code": "public static void Remove(Material customMat){\n\t    if (!customMat) return;\n    for (int i = 0; i < entries.Count; i++) {\n        if (entries[i].customMat == customMat) {\n            entries[i].count--;\n            if (entries[i].count <= 0) {\n                UnityEngine.Object.Destroy(customMat);\n                entries[i].customMat = null;\n                entries[i].customMatData = null;\n                entries.RemoveAt(i);\n            }\n            break;\n        }\n    }\n}", "CodeBleu_score": 45.561929271996746}, {"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) {\n        return;\n    }\n    foreach (Entry entry in entries) {\n        if (entry.customMat == customMat) {\n            entry.count--;\n            if (entry.count <= 0) {\n                UnityEngine.Object.Destroy(customMat);\n                entry.customMat = null;\n                entry.texture = null;\n                entry.color = Color.white;\n                entries.Remove(entry);\n            }\n            return;\n        }\n    }\n}", "CodeBleu_score": 36.671025756982374}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t    // Get all child particle systems\n    ParticleSystem[] particleSystems = root.GetComponentsInChildren<ParticleSystem>();\n\n    // Remove those not associated with the current UIParticle instance\n    List<ParticleSystem> filteredParticleSystems = new List<ParticleSystem>();\n    foreach (ParticleSystem ps in particleSystems) {\n        if (ps.GetComponent<UIParticle>() == this) {\n            filteredParticleSystems.Add(ps);\n        }\n    }\n\n    // Adjust texture sheet animation settings if necessary\n    if (m_TextureSheetAnimation) {\n        foreach (ParticleSystem ps in filteredParticleSystems) {\n            ParticleSystemRenderer renderer = ps.GetComponent<ParticleSystemRenderer>();\n            renderer.enabled = true;\n            renderer.material.mainTexture = m_TextureSheet;\n            renderer.material.SetTextureScale(\"_MainTex\", new Vector2(1f / m_HorizontalCount, 1f / m_VerticalCount));\n            renderer.material.SetTextureOffset(\"_MainTex\", new Vector2(m_HorizontalIndex * (1f / m_HorizontalCount), m_VerticalIndex * (1f / m_VerticalCount)));\n        }\n    }\n\n    // Call RefreshParticles on the updated list of particle systems\n    foreach (ParticleSystem ps in filteredParticleSystems) {\n        ps.RefreshParticles();\n    }\n}", "CodeBleu_score": 27.69962590971573}, {"code": "private void RefreshParticles(GameObject root){\n\t    // Collect all child particle systems\n    ParticleSystem[] particles = root.GetComponentsInChildren<ParticleSystem>();\n\n    // Remove those not associated with the current UIParticle instance\n    List<ParticleSystem> updatedParticles = new List<ParticleSystem>();\n    foreach (ParticleSystem particle in particles) {\n        UIParticle particleComponent = particle.GetComponent<UIParticle>();\n        if (particleComponent != null && particleComponent == this) {\n            updatedParticles.Add(particle);\n        }\n    }\n\n    // Adjust texture sheet animation settings if necessary\n    foreach (ParticleSystem particle in updatedParticles) {\n        ParticleSystemRenderer renderer = particle.GetComponent<ParticleSystemRenderer>();\n        if (renderer != null && renderer.material.mainTexture != null) {\n            renderer.material.mainTexture = textureSheet;\n            renderer.material.SetTextureScale(\"_MainTex\", new Vector2(1f / textureSheetColumns, 1f / textureSheetRows));\n        }\n    }\n\n    // Call RefreshParticles on the updated list of particle systems\n    foreach (ParticleSystem particle in updatedParticles) {\n        particle.RefreshParticles();\n    }\n}", "CodeBleu_score": 31.42175042256107}, {"code": "private void RefreshParticles(GameObject root){\n\t    // Collect all child particle systems\n    ParticleSystem[] allParticles = root.GetComponentsInChildren<ParticleSystem>(true);\n\n    // Remove those not associated with the current UIParticle instance\n    List<ParticleSystem> particles = new List<ParticleSystem>();\n    foreach (ParticleSystem ps in allParticles) {\n        if (ps.GetComponent<UIParticle>() == this) {\n            particles.Add(ps);\n        }\n    }\n\n    // Adjust texture sheet animation settings if necessary\n    if (textureSheet != null) {\n        foreach (ParticleSystem ps in particles) {\n            ParticleSystemRenderer psr = ps.GetComponent<ParticleSystemRenderer>();\n            if (psr != null) {\n                psr.material = textureSheet.material;\n                psr.material.mainTexture = textureSheet.texture;\n                psr.material.mainTextureOffset = textureSheet.offset;\n                psr.material.mainTextureScale = textureSheet.scale;\n            }\n        }\n    }\n\n    // Call RefreshParticles on the updated list of particle systems\n    foreach (ParticleSystem ps in particles) {\n        ps.RefreshParticles();\n    }\n}", "CodeBleu_score": 34.816958252079885}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(typeof(ColorSwapManager).Assembly).AsImplementedInterfaces().SingleInstance();\n}", "CodeBleu_score": 19.979649439005176}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly()).Where(t => t.GetInterfaces().Any(i => i == typeof(IColorSwapManager))).AsImplementedInterfaces().SingleInstance();\n}", "CodeBleu_score": 20.064855364912905}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    var types = typeof(Program).Assembly.GetTypes();\n    var colorSwapManagerTypes = types.Where(t => typeof(IColorSwapManager).IsAssignableFrom(t) && t.IsClass);\n    foreach (var colorSwapManagerType in colorSwapManagerTypes) {\n        containerBuilder.RegisterType(colorSwapManagerType).AsSelf().SingleInstance();\n    }\n}", "CodeBleu_score": 32.802126613632055}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t  this.ipAddress = ipAddress;\n  this.port = port;\n  await serializer.InitializeAsync(this.ipAddress, this.port);\n  await NegotiateReservationAsync();\n }", "CodeBleu_score": 37.858139542094115}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t  _ipAddress = ipAddress;\n  _port = port;\n  await _serializer.InitializeAsync();\n  await InitiateReservationNegotiation();\n }", "CodeBleu_score": 39.05813488243538}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t  if (this.IsConnected) {\n   return;\n  }\n\n  this.ipAddress = ipAddress;\n  this.port = port;\n\n  await this.serializer.InitializeAsync();\n\n  this.IsConnected = true;\n\n  this.NegotiateReservation();\n }", "CodeBleu_score": 30.851997408465497}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (sessionConnectionState == null) {\n        throw new ArgumentNullException(\"sessionConnectionState\");\n    }\n\n    if (sessionConnectionState == _sessionConnectionState) {\n        return;\n    }\n\n    Log.Debug(\"MultiplayerSessionConnectionStateManager\", \"Connection state transitioning from {0} to {1}\", _sessionConnectionState, sessionConnectionState);\n\n    if (sessionConnectionState == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n        Log.Debug(\"MultiplayerSessionConnectionStateManager\", \"Player name: {0}\", _playerName);\n    }\n\n    _sessionConnectionState = sessionConnectionState;\n    if (ConnectionStateChanged != null) {\n        ConnectionStateChanged(this, new MultiplayerSessionConnectionStateChangedEventArgs(_sessionConnectionState));\n    }\n}", "CodeBleu_score": 36.49883251552999}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (sessionConnectionState == null) {\n        throw new ArgumentNullException(\"sessionConnectionState\");\n    }\n    if (sessionConnectionState == this.sessionConnectionState) {\n        return;\n    }\n    if (this.sessionConnectionState != null) {\n        Debug.LogFormat(\"MultiplayerSessionConnectionState: Transitioning from {0} to {1}\", this.sessionConnectionState.GetType().Name, sessionConnectionState.GetType().Name);\n    }\n    this.sessionConnectionState = sessionConnectionState;\n    if (this.sessionConnectionState is MultiplayerSessionConnectionStateReserved) {\n        MultiplayerSessionConnectionStateReserved multiplayerSessionConnectionStateReserved = (MultiplayerSessionConnectionStateReserved)this.sessionConnectionState;\n        Debug.LogFormat(\"MultiplayerSessionConnectionState: Session reserved for player {0}\", multiplayerSessionConnectionStateReserved.PlayerName);\n    }\n    if (this.ConnectionStateChanged != null) {\n        this.ConnectionStateChanged(this, new MultiplayerSessionConnectionStateChangedEventArgs(this.sessionConnectionState));\n    }\n}", "CodeBleu_score": 30.39508929937692}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    if (sessionConnectionState == null) {\n        throw new ArgumentNullException(\"sessionConnectionState\");\n    }\n    if (sessionConnectionState == _sessionConnectionState) {\n        return;\n    }\n    Log.Debug(\"MultiplayerSessionConnectionState\", \"Transitioning from state {0} to state {1}\", _sessionConnectionState, sessionConnectionState);\n    if (sessionConnectionState == IMultiplayerSessionConnectionState.SESSION_RESERVED) {\n        Log.Debug(\"MultiplayerSessionConnectionState\", \"Player name is {0}\", _sessionConnectionState.PlayerName);\n    }\n    _sessionConnectionState = sessionConnectionState;\n    if (ConnectionStateChanged != null) {\n        ConnectionStateChanged(this, new MultiplayerSessionConnectionStateChangedEventArgs(sessionConnectionState));\n    }\n}", "CodeBleu_score": 36.34110543347779}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    // Create a new LiteNetLibClient\n    client = new LiteNetLibClient();\n\n    // Subscribe to the client's connection event\n    client.ConnectionEvent += OnConnectionEvent;\n\n    // Start the client and connect to the server\n    client.Start();\n    client.Connect(ipAddress, serverPort, \"\");\n\n    // Wait for the connection event for up to 2000 milliseconds\n    await Task.Delay(2000);\n\n    // Reset the connection event\n    client.ConnectionEvent -= OnConnectionEvent;\n}", "CodeBleu_score": 41.40179569052704}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    try {\n        // Asynchronously initialize and start the LiteNetLibClient.\n        await client.StartAsync();\n\n        // Attempt to connect to the server using the specified IP address and port.\n        client.Connect(ipAddress, serverPort, \"\");\n\n        // Wait for a connection event for up to 2000 milliseconds.\n        if (!await connectionEvent.WaitAsync(2000)) {\n            // If the connection event did not occur within the specified time, reset the event.\n            connectionEvent.Reset();\n        }\n    } catch (Exception ex) {\n        // If an exception occurs during the process, log the error message.\n        Debug.LogError(ex.Message);\n    }\n}", "CodeBleu_score": 51.7275442326433}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    // Create a new LiteNetLibClient instance\n    client = new LiteNetLibClient();\n\n    // Start the client asynchronously\n    await client.StartAsync();\n\n    // Connect the client to the specified IP address and port\n    client.Connect(ipAddress, serverPort);\n\n    // Wait for a connection event for up to 2000 milliseconds\n    client.WaitForConnectionEvent(2000);\n\n    // Reset the connection event\n    client.ResetConnectionEvent();\n}", "CodeBleu_score": 41.341150967581164}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t    Cyclops cyclops = id.SubRoot.gameObject.GetComponent<Cyclops>();\n    FireExtinguisherButton fireExtinguisherButton = cyclops.GetComponentInChildren<FireExtinguisherButton>();\n    cyclops.StartCoroutine(StartFireSuppressionSystem(fireExtinguisherButton));\n    cyclops.StartCoroutine(StartFireSuppressionCooldown(fireExtinguisherButton));\n}", "CodeBleu_score": 51.72466001820379}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    Cyclops cyclops = id.SubRoot.gameObject.GetComponent<Cyclops>();\n    if (cyclops == null) {\n        return;\n    }\n    FireExtinguisherButton button = cyclops.GetComponentInChildren<FireExtinguisherButton>();\n    if (button == null) {\n        return;\n    }\n    StartCoroutine(StartFireSuppression(button));\n    StartCoroutine(ButtonCooldown(button));\n}", "CodeBleu_score": 51.382061794451815}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    Cyclops cyclops = SubRoot.Cyclops;\n    if (cyclops == null) {\n        Log.Error($\"Could not find cyclops with id {id}\");\n        return;\n    }\n    SubFire fire = cyclops.GetComponentInChildren<SubFire>();\n    if (fire == null) {\n        Log.Error($\"Could not find fire component on cyclops with id {id}\");\n        return;\n    }\n    cyclops.StartCoroutine(StartFireSuppressionSystem(fire));\n    cyclops.StartCoroutine(CooldownFireSuppressionButton(fire));\n}", "CodeBleu_score": 50.18186123674475}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.ID != this.subRootID) {\n        return;\n    }\n    if (this.damagePointID != damagePoint.ID) {\n        return;\n    }\n    RepairPacket repairPacket = new RepairPacket(this.subRootID, this.damagePointID, repairAmount);\n    this.packetSender.Send(repairPacket);\n}", "CodeBleu_score": 28.895897546867044}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.subRootID != this.subRootId) {\n        return;\n    }\n\n    int damagePointIndex = this.damagePointIndexMap[damagePoint];\n\n    RepairPacket packet = new RepairPacket(this.subRootId, damagePointIndex, repairAmount);\n    this.packetSender.SendPacket(packet);\n}", "CodeBleu_score": 28.66060097765331}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.SubRootId == this.subRootId) {\n        // Identify the specific damage point\n        int damagePointIndex = this.GetDamagePointIndex(damagePoint);\n\n        if (damagePointIndex != -1) {\n            // Create a repair packet with the relevant details\n            RepairPacket repairPacket = new RepairPacket {\n                SubRootId = this.subRootId,\n                DamagePointIndex = damagePointIndex,\n                RepairAmount = repairAmount\n            };\n\n            // Send the repair packet using a packet sender\n            this.packetSender.SendPacket(repairPacket);\n        }\n    }\n}", "CodeBleu_score": 30.015517958536908}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.TryGetIdOrWarn(out NitroxId subRootId))\n    {\n        return;\n    }\n\n    float health = subRoot.liveMixin.health;\n    if (health < 0.01f)\n    {\n        return;\n    }\n\n    CyclopsDamageInfoData? damageInfoData = null;\n    if (info.HasValue)\n    {\n        damageInfoData = new CyclopsDamageInfoData(\n            info.Value.damage,\n            info.Value.type,\n            info.Value.position,\n            info.Value.radius,\n            info.Value.damageType,\n            info.Value.attackerId,\n            info.Value.attackerTechType,\n            info.Value.attackerName,\n            info.Value.attackerPiloting,\n            info.Value.attackerVehicleName,\n            info.Value.attackerVehicleId\n        );\n    }\n\n    List<int> activeDamagePoints = GetActiveDamagePoints(subRoot).ToList();\n    List<CyclopsFireData> activeRoomFires = GetActiveRoomFires(subRoot.fire).ToList();\n\n    CyclopsDamage damage = new CyclopsDamage(\n        subRootId,\n        health,\n        activeDamagePoints,\n        activeRoomFires,\n        damageInfoData\n    );\n\n    CyclopsDamageEvent damageEvent = new CyclopsDamageEvent(damage);\n    PlayerManager.SendPacketToOtherPlayers(damageEvent);\n}", "CodeBleu_score": 50.657156819460255}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t            if (!subRoot.TryGetIdOrWarn(out NitroxId subRootId))\n            {\n                return;\n            }\n\n            if (subRoot.liveMixin.health < 100f)\n            {\n                return;\n            }\n\n            CyclopsDamageInfoData? damageInfoData = null;\n\n            if (info.HasValue)\n            {\n                damageInfoData = new CyclopsDamageInfoData(\n                    info.Value.damage,\n                    info.Value.type,\n                    info.Value.damagedBy,\n                    info.Value.attackerId,\n                    info.Value.techType,\n                    info.Value.cellIndex,\n                    info.Value.fireExtinguished,\n                    info.Value.fireExposure,\n                    info.Value.fireDamage,\n                    info.Value.fireDamageBy\n                );\n            }\n\n            IEnumerable<int> activeDamagePoints = GetActiveDamagePoints(subRoot);\n            IEnumerable<CyclopsFireData> activeRoomFires = GetActiveRoomFires(subRoot.fire);\n\n            CyclopsDamage damage = new CyclopsDamage(\n                subRootId,\n                subRoot.liveMixin.health,\n                activeDamagePoints,\n                activeRoomFires,\n                damageInfoData\n            );\n\n            CyclopsDamageEvent damageEvent = new CyclopsDamageEvent(damage);\n            PlayerCyclopsDamageEvent playerDamageEvent = new PlayerCyclopsDamageEvent(damage);\n\n            SendBroadcast(damageEvent);\n            SendBroadcast(playerDamageEvent);\n        }", "CodeBleu_score": 45.02558422111836}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n        return;\n    }\n\n    if (subRoot.liveMixin.health < 1) {\n        return;\n    }\n\n    CyclopsDamageInfoData damageInfoData = null;\n\n    if (info.HasValue) {\n        damageInfoData = new CyclopsDamageInfoData(info.Value.damage, info.Value.type, info.Value.damagedBy);\n    }\n\n    CyclopsDamagePoint[] damagePoints = GetActiveDamagePoints(subRoot).Select(i => new CyclopsDamagePoint(i, subRoot.damageManager.damagePoints[i].liveMixin.health)).ToArray();\n    CyclopsFireData[] fireData = GetActiveRoomFires(subRoot.fire).Select(f => new CyclopsFireData(f.fireId, f.subRootId, f.room, f.spawnNodeIndex)).ToArray();\n\n    CyclopsDamage cyclopsDamage = new CyclopsDamage(subRootId, subRoot.liveMixin.health, damageInfoData, damagePoints, fireData);\n    CyclopsDamageEvent damageEvent = new CyclopsDamageEvent(cyclopsDamage);\n    PlayerCyclopsDamageEvent playerCyclopsDamageEvent = new PlayerCyclopsDamageEvent(cyclopsDamage);\n\n    Multiplayer.Main.SendPacket(damageEvent);\n    Multiplayer.Main.SendPacket(playerCyclopsDamageEvent);\n}", "CodeBleu_score": 49.559382454575406}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        GameObject entityGameObject = GetEntityGameObject(entity.Id);\n        if (entityGameObject != null) {\n            Destroy(entityGameObject);\n        }\n    }\n}", "CodeBleu_score": 56.26368298842161}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        GameObject go = entity.GameObject;\n        if (go != null) {\n            GameObject.Destroy(go);\n        }\n    }\n}", "CodeBleu_score": 50.777822163525556}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n\n        GameObject entityGameObject = GetEntityGameObject(entity.Id);\n        if (entityGameObject != null) {\n            Destroy(entityGameObject);\n        }\n    }\n}", "CodeBleu_score": 56.26368298842161}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t    var parentID = entity.ParentID;\n    if (!_pendingParentEntities.ContainsKey(parentID)) {\n        _pendingParentEntities[parentID] = new List<Entity>();\n    }\n    _pendingParentEntities[parentID].Add(entity);\n}", "CodeBleu_score": 34.60847211692419}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (entity.parentId == null) {\n        return;\n    }\n    if (!pendingParentEntities.ContainsKey(entity.parentId)) {\n        pendingParentEntities.Add(entity.parentId, new List<Entity>());\n    }\n    pendingParentEntities[entity.parentId].Add(entity);\n}", "CodeBleu_score": 36.162248708785576}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    var parentId = entity.ParentId;\n    if (!pendingParentEntities.ContainsKey(parentId)) {\n        pendingParentEntities[parentId] = new List<Entity>();\n    }\n    pendingParentEntities[parentId].Add(entity);\n}", "CodeBleu_score": 35.516640612459724}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    ExosuitArmAction armAction;\n    if (cooldown == clawArm.pickupCooldown) {\n        armAction = ExosuitArmAction.START_USE_TOOL;\n    } else if (cooldown == clawArm.punchCooldown) {\n        armAction = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Claw arm action cooldown mismatch\");\n        return;\n    }\n    BroadcastArmAction(TechType.ClawArm, clawArm, armAction, null, null);\n}", "CodeBleu_score": 63.685018465770526}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    ExosuitArmAction action;\n\n    if (cooldown == clawArm.pickupCooldown) {\n        action = ExosuitArmAction.START_USE_TOOL;\n    } else if (cooldown == clawArm.punchCooldown) {\n        action = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Unknown cooldown time for claw use: \" + cooldown);\n        return;\n    }\n\n    BroadcastArmAction(clawArm.techType, clawArm, action, null, null);\n}", "CodeBleu_score": 72.6756921193235}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    if (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id))\n    {\n        ExosuitArmAction armAction;\n\n        if (cooldown == clawArm.pickupCooldown)\n        {\n            armAction = ExosuitArmAction.START_USE_TOOL;\n        }\n        else if (cooldown == clawArm.punchCooldown)\n        {\n            armAction = ExosuitArmAction.ALT_HIT;\n        }\n        else\n        {\n            Log.Error($\"Unknown cooldown time for claw arm: {cooldown}\");\n            return;\n        }\n\n        BroadcastArmAction(TechType.ExosuitClawArmModule, clawArm, armAction, null, null);\n    }\n}", "CodeBleu_score": 61.93172375188506}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (gameObject == null) {\n        return;\n    }\n    int entityId = gameObject.GetInstanceID();\n    int parentId = parent.GetInstanceID();\n    if (entityId == 0 || parentId == 0) {\n        return;\n    }\n    var metadata = gameObject.GetComponent<PrefabMetadata>();\n    if (metadata == null) {\n        return;\n    }\n    var entity = new InstalledBatteryEntity(entityId, parentId, techType, metadata.ClassId, metadata.SlotType, metadata.LandingMode, metadata.Position, metadata.Rotation, metadata.Scale);\n    SendEntitySpawnedByClient(entity);\n}", "CodeBleu_score": 41.6883043942626}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t", "CodeBleu_score": 11.969764320593383}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (gameObject == null || parent == null || techType == TechType.None) {\n        return;\n    }\n    var entityId = gameObject.GetComponent<PrefabIdentifier>().Id;\n    var parentId = parent.GetComponent<PrefabIdentifier>().Id;\n    if (entityId == null || parentId == null) {\n        return;\n    }\n    var entityMetadata = gameObject.GetComponent<PrefabMetadata>();\n    if (entityMetadata == null) {\n        return;\n    }\n    var installedBatteryEntity = new InstalledBatteryEntity(entityId, parentId, techType, entityMetadata.ClassId, entityMetadata.SlotType, entityMetadata.BatteryLevel);\n    var entitySpawnedByClient = new EntitySpawnedByClient(installedBatteryEntity);\n    Send(entitySpawnedByClient);\n}", "CodeBleu_score": 40.226576132021684}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    if (PickingUpObject != null) {\n        Log.Warn(\"[Items] Attempted to pick up an item while already picking up an item!\");\n        return;\n    }\n    PickingUpObject = gameObject;\n    RemoveAnyRemoteControl(gameObject);\n    NitroxId itemId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n    Log.Debug($\"[Items] Picked up {gameObject.name} with id {itemId}\");\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, entityMetadataManager);\n    inventoryItemEntity.SpawnedByPlayer = true;\n\n    PickupItem pickupItem = new(itemId, inventoryItemEntity);\n    SendPacket(pickupItem);\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 51.149759185521646}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    RemoveAnyRemoteControl(gameObject);\n\n    NitroxId itemId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, entityMetadataManager);\n\n    inventoryItemEntity.SpawnedByPlayer = true;\n\n    Log.Debug($\"Item {itemId} picked up\");\n\n    PickupItem pickupItem = new(inventoryItemEntity);\n    SendPacket(pickupItem);\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 41.73627217501778}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    RemoveAnyRemoteControl(gameObject);\n    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, EntityMetadataManager);\n    inventoryItemEntity.SpawnedByPlayer = true;\n\n    Log.Debug($\"Item picked up: {techType} - {id}\");\n    PickupItem pickupItem = new(id, inventoryItemEntity);\n    SendPacket(pickupItem);\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 44.88598010562789}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    string classId = gameObject.GetComponent<PrefabIdentifier>().classId;\n    TechType techType = gameObject.GetComponent<TechType>();\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    IEnumerable<Entity> childEntities = GetPrefabChildren(gameObject, id, entityMetadataManager);\n    NitroxId playerId = NitroxPlayer.GetPlayerId(gameObject);\n\n    InventoryItemEntity entity = new InventoryItemEntity(id, classId, techType.ToDto(), metadata.Value, childEntities, playerId);\n\n    if (techType == TechType.Battery)\n    {\n        Battery battery = gameObject.GetComponent<Battery>();\n        entity.BatteryLevel = battery.charge;\n        entity.BatteryCapacity = battery.capacity;\n    }\n\n    return entity;\n}", "CodeBleu_score": 58.351793130828}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    string classId = gameObject.GetClassId();\n    TechType techType = gameObject.GetComponent<TechType>();\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    List<Entity> children = new List<Entity>(GetPrefabChildren(gameObject, id, entityMetadataManager));\n\n    NitroxId playerId = NitroxEntity.GetIdOrGenerateNew(Player.main.gameObject);\n    InventoryItemEntity entity = new InventoryItemEntity(id, classId, techType.ToDto(), metadata.Value, children, playerId);\n\n    if (techType == TechType.Battery)\n    {\n        entity.BatteryLevel = gameObject.GetComponent<Battery>().charge;\n        entity.BatteryCapacity = gameObject.GetComponent<Battery>().capacity;\n    }\n\n    return entity;\n}", "CodeBleu_score": 56.74147680824918}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    string classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n    TechType techType = gameObject.GetComponent<TechType>();\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    List<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n    NitroxId playerId = NitroxPlayer.main.Id;\n    InventoryItemEntity entity = new InventoryItemEntity(id, classId, techType.ToDto(), metadata.Value, children, playerId);\n    if (techType == TechType.Battery)\n    {\n        Battery battery = gameObject.GetComponent<Battery>();\n        entity.BatteryLevel = battery.charge;\n        entity.BatteryCapacity = battery.capacity;\n    }\n    return entity;\n}", "CodeBleu_score": 62.1886769121925}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tplayerBody = new Lazy<Body>(() => multiplayerSession.PlayerBody);\n\tplayerModel = new Lazy<PlayerModel>(() => multiplayerSession.PlayerModel);\n\tbodyPrototype = new Lazy<BodyPrototype>(() => multiplayerSession.BodyPrototype);\n\tpermissions = new Lazy<PlayerPermissions>(() => new PlayerPermissions(this));\n}", "CodeBleu_score": 53.908081299261426}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.permissions = new PlayerPermissions();\n    this.permissions.SetAllTo(true);\n}", "CodeBleu_score": 32.36217228315035}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\n\tbody = new Lazy<Body>(() => multiplayerSession.GetBody(multiplayerSession.LocalPlayerBodyId));\n\tplayerModel = new Lazy<PlayerModel>(() => multiplayerSession.GetPlayerModel(multiplayerSession.LocalPlayerModelId));\n\tbodyPrototype = new Lazy<BodyPrototype>(() => multiplayerSession.GetBodyPrototype(multiplayerSession.LocalPlayerBodyPrototypeId));\n\n\tpermissions = new PlayerPermissions(multiplayerSession.LocalPlayerId);\n}", "CodeBleu_score": 54.48087807177142}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t    // Ensure the player's head is visible\n    _head.layer = LayerMask.NameToLayer(\"PlayerHead\");\n\n    // Instantiate a clone of the body prototype\n    GameObject clone = Instantiate(_bodyPrototype, Vector3.zero, Quaternion.identity);\n\n    // Reset the head's shadow casting mode\n    _head.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\n    // Deactivate and rename the clone\n    clone.SetActive(false);\n    clone.name = \"RemotePlayerPrototype\";\n\n    // Remove items held in hand from the clone\n    Destroy(clone.GetComponentInChildren<VR.Interaction.Interactable>());\n\n    // Return the clone\n    return clone;\n}", "CodeBleu_score": 26.37423660510117}, {"code": "private GameObject CreateBodyPrototype{\n\t    // Ensure the player's head is visible\n    head.gameObject.SetActive(true);\n\n    // Instantiate a clone of the body prototype\n    GameObject clone = Instantiate(bodyPrototype);\n\n    // Reset the head's shadow casting mode\n    head.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\n    // Deactivate and rename the clone\n    clone.SetActive(false);\n    clone.name = \"RemotePlayerPrototype\";\n\n    // Remove items held in hand from the clone\n    RemoveItemsFromHand(clone);\n\n    // Return the clone\n    return clone;\n}", "CodeBleu_score": 21.536868763933104}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure the player's head is visible\n        playerHead.SetActive(true);\n\n        // Instantiate a clone of the body prototype\n        GameObject clone = Instantiate(bodyPrototype);\n\n        // Reset the head's shadow casting mode\n        playerHead.GetComponent<MeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\n        // Deactivate and rename the clone\n        clone.SetActive(false);\n        clone.name = \"RemotePlayerPrototype\";\n\n        // Remove items held in hand\n        RemoveItemsHeldInHand(clone);\n\n        return clone;\n    }\n}", "CodeBleu_score": 28.02920870320414}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(GetType().FullName);\n    bw.Write(Location);\n    bw.Write(Metadata);\n    bw.Write(Processes.Count);\n    foreach (Process p in Processes) {\n        bw.Write(p.ProcessName);\n        bw.Write(p.Arguments);\n        bw.Write(p.WorkingDirectory);\n    }\n    bw.Write(Dependencies.Count);\n    foreach (ICacheable d in Dependencies) {\n        d.Save(bw);\n    }\n    bw.Write(Incompatibilities.Count);\n    foreach (ICacheable i in Incompatibilities) {\n        i.Save(bw);\n    }\n    bw.Write(TargetVersion);\n}", "CodeBleu_score": 46.34167039786508}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    // Write the object's type name, location, metadata, processes, dependencies, incompatibilities, and target version to the binary stream\n    bw.Write(GetType().Name);\n    bw.Write(Location);\n    bw.Write(Metadata);\n    bw.Write(Processes.Count);\n    bw.Write(Dependencies.Count);\n    bw.Write(Incompatibilities.Count);\n    bw.Write(TargetVersion);\n\n    // Write the object's processes to the binary stream\n    foreach (var process in Processes) {\n        bw.Write(process.GetType().Name);\n        process.Save(bw);\n    }\n\n    // Write the object's dependencies to the binary stream\n    foreach (var dependency in Dependencies) {\n        bw.Write(dependency.GetType().Name);\n        dependency.Save(bw);\n    }\n\n    // Write the object's incompatibilities to the binary stream\n    foreach (var incompatibility in Incompatibilities) {\n        bw.Write(incompatibility.GetType().Name);\n        incompatibility.Save(bw);\n    }\n}", "CodeBleu_score": 52.38832401149106}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(this.GetType().Name);\n    bw.Write(this.Location);\n    bw.Write(this.Metadata);\n    bw.Write(this.Processes);\n    bw.Write(this.Dependencies.Count);\n    foreach (var dependency in this.Dependencies) {\n        dependency.Save(bw);\n    }\n    bw.Write(this.Incompatibilities.Count);\n    foreach (var incompatibility in this.Incompatibilities) {\n        incompatibility.Save(bw);\n    }\n    bw.Write(this.TargetVersion);\n}", "CodeBleu_score": 30.595374968360677}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    Type pluginType = pluginAssembly.GetTypes().FirstOrDefault(t => typeof(BasePlugin).IsAssignableFrom(t));\n    BasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n    PluginLoad?.Invoke(plugin);\n    plugin.Load();\n    return plugin;\n}", "CodeBleu_score": 48.78786408864363}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    Type pluginType = pluginAssembly.GetTypes().FirstOrDefault(t => typeof(BasePlugin).IsAssignableFrom(t) && !t.IsInterface && !t.IsAbstract);\n\n    if (pluginType == null) {\n        return null;\n    }\n\n    BasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n    plugin.PluginInfo = pluginInfo;\n    plugin.PluginAssembly = pluginAssembly;\n\n    PluginLoad?.Invoke(this, new PluginLoadEventArgs(plugin));\n\n    plugin.Load();\n\n    return plugin;\n}", "CodeBleu_score": 45.040816052669776}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    // Get the plugin type\n    Type pluginType = pluginAssembly.GetTypes().First(type => typeof(BasePlugin).IsAssignableFrom(type));\n\n    // Create an instance of the plugin\n    BasePlugin plugin = Activator.CreateInstance(pluginType) as BasePlugin;\n\n    // Invoke the PluginLoad event\n    PluginLoad?.Invoke(this, new PluginLoadEventArgs(plugin));\n\n    // Load the plugin\n    plugin.Load(this, pluginInfo);\n\n    return plugin;\n}", "CodeBleu_score": 44.93540089135014}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod != null) return TrampolineMethod;\n    if (!IsPrepared) Prepare();\n    if (TrampolineMethod == null) {\n        TrampolineMethod = GenerateTrampolineImpl(TrampolinePtr, signature);\n        Logger.LogDebug($\"Generated trampoline method: {TrampolineMethod.Name}\");\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 57.64616228902548}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = GenerateTrampolineImpl(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 69.56107354267704}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (IsPrepared == false) Prepare();\n    if (TrampolineMethod != null) return TrampolineMethod;\n    Logger.LogDebug($\"Generating trampoline from 0x{TrampolinePtr:X2}\");\n    TrampolineMethod = GenerateTrampolineImpl(signature);\n    Logger.LogDebug($\"Generated trampoline; TrampolineMethod: {TrampolineMethod}\");\n    return TrampolineMethod;\n}", "CodeBleu_score": 42.309990236176844}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"BlazorWasmLocalizationSample.Resources.\" + code + \".json\");\n    if (stream == null) {\n        throw new NullReferenceException(\"Language file not found for code: \" + code);\n    }\n    using (StreamReader reader = new StreamReader(stream)) {\n        string json = reader.ReadToEnd();\n        try {\n            Dictionary<string, string> language = JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n            return language;\n        }\n        catch (JsonException) {\n            throw new JsonException(\"Error deserializing language file for code: \" + code);\n        }\n    }\n}", "CodeBleu_score": 43.11340346794897}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var resourceName = $\"{assembly.GetName().Name}.Resources.Languages.{code}.json\";\n\n    using (var stream = assembly.GetManifestResourceStream(resourceName)) {\n        if (stream == null) {\n            throw new NullReferenceException($\"Language file not found for language code: {code}\");\n        }\n\n        using (var reader = new StreamReader(stream)) {\n            var json = reader.ReadToEnd();\n            var language = JsonConvert.DeserializeObject<Dictionary<string, string>>(json);\n\n            if (language == null) {\n                throw new JsonException($\"Failed to deserialize language file for language code: {code}\");\n            }\n\n            return language;\n        }\n    }\n}", "CodeBleu_score": 40.59723642094083}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    var assembly = Assembly.GetExecutingAssembly();\n    var resourceName = $\"{assembly.GetName().Name}.Resources.Languages.{code}.json\";\n    var stream = assembly.GetManifestResourceStream(resourceName);\n    if (stream == null) {\n        throw new NullReferenceException($\"Language file not found for code: {code}\");\n    }\n    using var reader = new StreamReader(stream);\n    var json = reader.ReadToEnd();\n    try {\n        return JsonConvert.DeserializeObject<Dictionary<string, string>>(json);\n    }\n    catch (JsonException) {\n        throw new JsonException($\"Failed to deserialize language file for code: {code}\");\n    }\n}", "CodeBleu_score": 42.26757897601184}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            expressionCount += Visit(node as ParserRuleContext);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 51.20061809894896}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            expressionCount += Visit(node as ParserRuleContext);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 51.20061809894896}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            IParseTreeVisitor<int> visitor = new ExpressionVisitor();\n            int count = visitor.Visit(node);\n            expressionCount += count;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 52.76449890905918}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // Generate code for any expressions in the formatted text\n    var expressionCount = GenerateExpressionCode(context.formatted_text());\n\n    // Get the line ID tag\n    var lineID = context.LINE_TAG().GetText();\n\n    // Emit a RunLine opcode with the line ID and expression count\n    Emit(OpCode.RunLine, lineID, expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 28.987522736802458}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // Emit any expressions in the formatted text\n    Visit(context.formatted_text());\n\n    // Retrieve the line ID tag\n    string lineID = context.line_id().GetText();\n\n    // Emit a RunLine opcode with the line ID and expression count\n    EmitOpcode(Opcode.RunLine, lineID, expressions.Count);\n\n    // Reset the expression stack\n    expressions.Clear();\n\n    // Return 0 to indicate success\n    return 0;\n}", "CodeBleu_score": 37.97172983035064}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    var lineID = context.line_id().GetText();\n\n    // Generate code for any expressions in the formatted text\n    var expressionCount = GenerateExpressionCode(context.formatted_text());\n\n    // Emit a RunLine opcode with the line ID and expression count\n    EmitOpcode(Opcode.RunLine, lineID, expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 28.10131356297831}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var unknownCommands = new HashSet<string>();\n\n    foreach (var node in yarnFile.Nodes) {\n        foreach (var command in node.Lines) {\n            var commandName = command.Command.Name;\n            if (!yarnFile.KnownCommands.Contains(commandName)) {\n                unknownCommands.Add(commandName);\n            }\n        }\n    }\n\n    foreach (var command in unknownCommands) {\n        var diagnostic = Diagnostic.Create(\n            new DiagnosticDescriptor(\n                \"YarnSpinner.UnknownCommand\",\n                \"Unknown command\",\n                $\"Unknown command '{command}'\",\n                \"YarnSpinner\",\n                DiagnosticSeverity.Warning,\n                true\n            ),\n            Location.None,\n            new Dictionary<string, string> {\n                { \"command\", command }\n            }\n        );\n        yield return diagnostic;\n    }\n}", "CodeBleu_score": 27.92565984813824}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var knownCommands = yarnFile.Project.Commands.Select(c => c.Name).ToHashSet();\n\n    foreach (var command in yarnFile.Commands) {\n        if (!knownCommands.Contains(command.Name)) {\n            var diagnostic = Diagnostic.Create(\n                new DiagnosticDescriptor(\n                    \"Yarn.UnknownCommand\",\n                    $\"Unknown command '{command.Name}'\",\n                    \"Unknown command '{0}'\",\n                    \"Yarn\",\n                    DiagnosticSeverity.Warning,\n                    true\n                ),\n                command.Range,\n                command.Name\n            );\n\n            diagnostic.AdditionalLocations = new[] {\n                new Location(command.Range.Document, command.Range.Range)\n            };\n\n            yield return diagnostic;\n        }\n    }\n}", "CodeBleu_score": 34.75540641748335}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    foreach (var command in yarnFile.Commands) {\n        if (!Commands.KnownCommands.ContainsKey(command.Key)) {\n            var diagnostic = Diagnostic.Create(\n                new DiagnosticDescriptor(\n                    \"YAR0001\",\n                    \"Unknown command\",\n                    \"Unknown command '{0}'\",\n                    \"Yarn\",\n                    DiagnosticSeverity.Warning,\n                    true\n                ),\n                Location.None,\n                command.Key,\n                command.Value.Definition.Range\n            );\n            yield return diagnostic;\n        }\n    }\n}", "CodeBleu_score": 24.1942713658403}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = YarnDocumentSelector.Instance,\n        ResolveProvider = false,\n        CodeActionKinds = new[] { CodeActionKind.QuickFix }\n    };\n}", "CodeBleu_score": 58.50917159918269}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = YarnDocumentSelector.Instance,\n        ResolveProvider = false,\n        CodeActionKinds = new[] { CodeActionKind.QuickFix }\n    };\n}", "CodeBleu_score": 58.50917159918269}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = YarnDocumentSelector.Instance,\n        ResolveProvider = false,\n        CodeActionKinds = new[] { CodeActionKind.QuickFix }\n    };\n}", "CodeBleu_score": 58.50917159918269}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out object value)) {\n        if (value is T typedValue) {\n            result = typedValue;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable '{variableName}' is not of type '{typeof(T).Name}'.\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 52.59996494169369}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out object value)) {\n        if (value is T typedValue) {\n            result = typedValue;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable '{variableName}' is not of type '{typeof(T).Name}'.\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 52.59996494169369}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out object value)) {\n        if (value is T) {\n            result = (T)value;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable '{variableName}' is not of type '{typeof(T).Name}'.\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 53.92803918174338}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    VariableStorage = variableStorage;\n    Library = new Library();\n    VirtualMachine = new VirtualMachine(Library, VariableStorage);\n    ImportStandardLibrary();\n    RegisterFunction(\"visit_count\", 1, (vm, parameters) => {\n        return GetNodeVisitCount(parameters[0].AsString);\n    });\n    RegisterFunction(\"visited\", 1, (vm, parameters) => {\n        return IsNodeVisited(parameters[0].AsString);\n    });\n    LineParser = new LineParser(Library);\n    LineParser.RegisterMarkerProcessor<Yarn.Markup.SelectMarkerProcessor>();\n    LineParser.RegisterMarkerProcessor<Yarn.Markup.PluralMarkerProcessor>();\n    LineParser.RegisterMarkerProcessor<Yarn.Markup.OrdinalMarkerProcessor>();\n}", "CodeBleu_score": 42.00244651849143}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    VariableStorage = variableStorage;\n    Library = new Library();\n    VirtualMachine = new VirtualMachine(Library);\n    ImportStandardLibrary();\n    RegisterNodeVisitCountFunctions();\n    LineParser = new LineParser();\n    RegisterMarkerProcessors();\n}", "CodeBleu_score": 17.363808797381246}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t            this.VariableStorage = variableStorage;\n            this.Library = new Yarn.Library();\n            this.VirtualMachine = new Yarn.VirtualMachine(Library);\n            this.LineParser = new Yarn.LineParser(Library);\n            this.LineParser.RegisterMarkerProcessor<Yarn.Markers.Select_Marker>(\"select\");\n            this.LineParser.RegisterMarkerProcessor<Yarn.Markers.Plural_Marker>(\"plural\");\n            this.LineParser.RegisterMarkerProcessor<Yarn.Markers.Ordinal_Marker>(\"ordinal\");\n            this.StandardLibrary.RegisterFunctions(Library);\n            this.Library.RegisterFunction<float>(\"visited\", delegate(string nodeName) {\n                return GetNodeVisitCount(nodeName);\n            });\n            this.Library.RegisterFunction<bool>(\"visited_once\", delegate(string nodeName) {\n                return IsNodeVisited(nodeName);\n            });\n        }", "CodeBleu_score": 42.739817270908475}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 76.47859416392919}, {"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < loopListBank.Count; i++) {\n        if (loopListBank[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 75.43669871388066}, {"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 76.47859416392919}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t    LoopListBankData newData = new LoopListBankData();\n    newData.Content = newContent;\n    newData.UniqueId = m_UniqueId;\n    m_LoopListBankDataList.Add(newData);\n    m_UniqueId++;\n}", "CodeBleu_score": 37.54050134721019}, {"code": "public void AddContent(object newContent){\n\t    LoopListBankData newLoopListBankData = new LoopListBankData();\n    newLoopListBankData.m_Content = newContent;\n    newLoopListBankData.m_ID = GenerateID();\n    m_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 40.12428098809188}, {"code": "public void AddContent(object newContent){\n\t    LoopListBankData newLoopListBankData = new LoopListBankData();\n    newLoopListBankData.Content = newContent;\n    newLoopListBankData.ID = m_LoopListBankDataList.Count;\n    m_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 39.310974799777284}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    m_ClickUniqueID = ClickUniqueID;\n    m_ClickObject = ClickObject;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = \"Cell \" + idx.ToString();\n    }\n}", "CodeBleu_score": 60.23366063743819}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = \"ScrollCell[\" + m_PrefabName + \"][\" + idx.ToString() + \"]\";\n    }\n}", "CodeBleu_score": 67.0561311817925}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \"_\" + idx;\n    }\n    m_ClickUniqueID = ClickUniqueID;\n    m_ClickObject = ClickObject;\n}", "CodeBleu_score": 56.6365133480564}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t    int count = int.Parse(inputField.text);\n    if (count <= 0) {\n        count = 1;\n    }\n    for (int i = 0; i < count; i++) {\n        bank.Add(Random.Range(0, 10));\n    }\n    scrollRect.totalCount = bank.Count;\n    scrollRect.RefillCells();\n}", "CodeBleu_score": 33.54293697948509}, {"code": "private void OnButtonAddDataClickk(){\n\t    int count = int.Parse(inputField.text);\n    if (count < 1) {\n        count = 1;\n    }\n    for (int i = 0; i < count; i++) {\n        bank.Add(Random.Range(0, 10));\n    }\n    scrollRect.totalCount = bank.Count;\n    scrollRect.RefillCells();\n}", "CodeBleu_score": 33.46159838327804}, {"code": "private void OnButtonAddDataClickk(){\n\t    int count = int.Parse(m_InputField.text);\n    if (count < 1) {\n        count = 1;\n    }\n    for (int i = 0; i < count; ++i) {\n        m_Bank.Add(Random.Range(0, 10));\n    }\n    m_ScrollRect.totalCount = m_Bank.Count;\n    m_ScrollRect.Refresh();\n}", "CodeBleu_score": 33.83721552760326}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\n    // If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n    if (startIndex > 0) {\n        for (int i = 0; i < startIndex; i++) {\n            ReturnToPrefabSource(contentPool[i]);\n        }\n        startIndex = 0;\n    }\n\n    // If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n    if (endIndex < contentPool.Count) {\n        for (int i = contentPool.Count - 1; i >= endIndex; i--) {\n            ReturnToPrefabSource(contentPool[i]);\n        }\n        endIndex = contentPool.Count;\n    }\n\n    // Verify that the content has the expected number of child elements.\n    if (content.childCount != contentPool.Count) {\n        Debug.LogError(\"Content has \" + content.childCount + \" child elements, but content pool has \" + contentPool.Count + \" items.\");\n    }\n}", "CodeBleu_score": 47.24346750858772}, {"code": "protected override void ClearTempPool(){\n\t\t\n\t// Check that the pool is not empty\n\tif (pool.Count > 0) {\n\t\t\n\t\t// Check if there are items marked for deletion at the start of the pool\n\t\tif (startIndex > 0) {\n\t\t\t\n\t\t\t// Loop through the items marked for deletion at the start of the pool\n\t\t\tfor (int i = 0; i < startIndex; i++) {\n\t\t\t\t\n\t\t\t\t// Return the item to the prefab source\n\t\t\t\tprefabSource.ReturnInstance(pool[i]);\n\t\t\t}\n\t\t\t\n\t\t\t// Remove the items marked for deletion at the start of the pool from the pool\n\t\t\tpool.RemoveRange(0, startIndex);\n\t\t\t\n\t\t\t// Reset the start index\n\t\t\tstartIndex = 0;\n\t\t}\n\t\t\n\t\t// Check if there are items marked for deletion at the end of the pool\n\t\tif (endIndex > 0) {\n\t\t\t\n\t\t\t// Loop through the items marked for deletion at the end of the pool\n\t\t\tfor (int i = pool.Count - endIndex; i < pool.Count; i++) {\n\t\t\t\t\n\t\t\t\t// Return the item to the prefab source\n\t\t\t\tprefabSource.ReturnInstance(pool[i]);\n\t\t\t}\n\t\t\t\n\t\t\t// Remove the items marked for deletion at the end of the pool from the pool\n\t\t\tpool.RemoveRange(pool.Count - endIndex, endIndex);\n\t\t\t\n\t\t\t// Reset the end index\n\t\t\tendIndex = 0;\n\t\t}\n\t}\n}", "CodeBleu_score": 35.16160785542901}, {"code": "protected override void ClearTempPool(){\n\t    // If there are items marked for deletion at the start, return them to the prefab source and reset the start index\n    if (startIndex != 0) {\n        for (int i = 0; i < startIndex; i++) {\n            tempPool[i].SetActive(false);\n            tempPool[i].transform.parent = poolParent;\n        }\n        startIndex = 0;\n    }\n\n    // If there are items marked for deletion at the end, return them to the prefab source and reset the end index\n    if (endIndex != tempPool.Length - 1) {\n        for (int i = endIndex + 1; i < tempPool.Length; i++) {\n            tempPool[i].SetActive(false);\n            tempPool[i].transform.parent = poolParent;\n        }\n        endIndex = tempPool.Length - 1;\n    }\n}", "CodeBleu_score": 41.78871885070309}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (networkActive && networkListening) {\n        localScale = newScale;\n        anticipatedScale = newScale;\n\n        if (allowAuthority) {\n            authoritativeScale = newScale;\n        }\n    }\n\n    RecordAnticipation(newScale);\n    UpdateAnticipationCountersAndTimes();\n\n    smoothTransitionDuration = 0f;\n    currentSmimothTime = 0f;\n}", "CodeBleu_score": 22.726378358313305}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkManager.Singleton.IsActiveAndListening) {\n        localScale = newScale;\n        anticipatedScale = newScale;\n        if (allowed) {\n            authoritativeScale = newScale;\n        }\n        RecordAnticipatedTransform();\n        anticipationCount++;\n        anticipationTime = Time.time;\n        smoothTransitionDuration = 0;\n        currentSmoothTime = 0;\n    }\n}", "CodeBleu_score": 28.705492816809574}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkClient.active && NetworkClient.isListening) {\n        localScale = newScale;\n        anticipatedScale = newScale;\n\n        if (hasAuthority) {\n            CmdAnticipateScale(newScale);\n        }\n\n        RecordAnticipatedTransform();\n        anticipationCounters[AnticipationType.Scale]++;\n        anticipationTimes[AnticipationType.Scale] = Time.time;\n    }\n\n    smoothTransitionDuration = 0f;\n    currentSmoothTime = 0f;\n}", "CodeBleu_score": 26.038736624545873}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t    // Iterate over the list of animation updates and send each one via the appropriate client or server RPC method\n    foreach (AnimationUpdate a in animationUpdates) {\n        if (isServer) {\n            RpcUpdateAnimation(a.animatorName, a.animationName, a.trigger);\n        } else {\n            CmdUpdateAnimation(a.animatorName, a.animationName, a.trigger);\n        }\n    }\n\n    // Iterate over the list of parameter updates and send each one via the appropriate client or server RPC method\n    foreach (ParameterUpdate p in parameterUpdates) {\n        if (isServer) {\n            RpcUpdateParameter(p.animatorName, p.parameterName, p.value);\n        } else {\n            CmdUpdateParameter(p.animatorName, p.parameterName, p.value);\n        }\n    }\n\n    // Iterate over the list of trigger updates and send each one via the appropriate client or server RPC method\n    foreach (TriggerUpdate t in triggerUpdates) {\n        if (isServer) {\n            RpcUpdateTrigger(t.animatorName, t.triggerName);\n        } else {\n            CmdUpdateTrigger(t.animatorName, t.triggerName);\n        }\n    }\n\n    // Clear the lists of updates to prepare for the next set of updates\n    animationUpdates.Clear();\n    parameterUpdates.Clear();\n    triggerUpdates.Clear();\n}", "CodeBleu_score": 51.091168027059794}, {"code": "private void FlushMessages(){\n\t    // Iterate over animation updates\n    for (int i = 0; i < m_AnimatorUpdates.Count; i++) {\n        // Send animation update via appropriate RPC method\n        if (isServer) {\n            RpcUpdateAnimator(m_AnimatorUpdates[i]);\n        } else {\n            CmdUpdateAnimator(m_AnimatorUpdates[i]);\n        }\n    }\n\n    // Clear animation updates list\n    m_AnimatorUpdates.Clear();\n\n    // Iterate over parameter updates\n    for (int i = 0; i < m_ParameterUpdates.Count; i++) {\n        // Send parameter update via appropriate RPC method\n        if (isServer) {\n            RpcUpdateParameter(m_ParameterUpdates[i]);\n        } else {\n            CmdUpdateParameter(m_ParameterUpdates[i]);\n        }\n    }\n\n    // Clear parameter updates list\n    m_ParameterUpdates.Clear();\n\n    // Iterate over trigger updates\n    for (int i = 0; i < m_TriggerUpdates.Count; i++) {\n        // Send trigger update via appropriate RPC method\n        if (isServer) {\n            RpcUpdateTrigger(m_TriggerUpdates[i]);\n        } else {\n            CmdUpdateTrigger(m_TriggerUpdates[i]);\n        }\n    }\n\n    // Clear trigger updates list\n    m_TriggerUpdates.Clear();\n}", "CodeBleu_score": 41.50869178365864}, {"code": "private void FlushMessages(){\n\t    // Iterate over the animation updates and send them via the appropriate RPC method\n    for (int i = 0; i < m_AnimatorUpdates.Count; ++i) {\n        if (m_AnimatorUpdates[i].animator) {\n            if (isServer) {\n                m_AnimatorUpdates[i].animator.SetTrigger(m_AnimatorUpdates[i].triggerHash);\n            } else {\n                m_AnimatorUpdates[i].animator.SetTrigger(m_AnimatorUpdates[i].triggerHash);\n            }\n        }\n    }\n\n    // Clear the list of animation updates\n    m_AnimatorUpdates.Clear();\n\n    // Iterate over the parameter updates and send them via the appropriate RPC method\n    for (int i = 0; i < m_ParameterUpdates.Count; ++i) {\n        if (m_ParameterUpdates[i].animator) {\n            if (isServer) {\n                m_ParameterUpdates[i].animator.SetFloat(m_ParameterUpdates[i].parameterHash, m_ParameterUpdates[i].value);\n            } else {\n                m_ParameterUpdates[i].animator.SetFloat(m_ParameterUpdates[i].parameterHash, m_ParameterUpdates[i].value);\n            }\n        }\n    }\n\n    // Clear the list of parameter updates\n    m_ParameterUpdates.Clear();\n\n    // Iterate over the trigger updates and send them via the appropriate RPC method\n    for (int i = 0; i < m_TriggerUpdates.Count; ++i) {\n        if (m_TriggerUpdates[i].animator) {\n            if (isServer) {\n                m_TriggerUpdates[i].animator.SetTrigger(m_TriggerUpdates[i].triggerHash);\n            } else {\n                m_TriggerUpdates[i].animator.SetTrigger(m_TriggerUpdates[i].triggerHash);\n            }\n        }\n    }\n\n    // Clear the list of trigger updates\n    m_TriggerUpdates.Clear();\n}", "CodeBleu_score": 44.20410758110297}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (IsOwner || IsServer) {\n            FlushMessages();\n        }\n        ProcessParameterUpdates();\n        if (IsServer || IsOwner) {\n            CheckForAnimatorChanges();\n        }\n    }\n}", "CodeBleu_score": 17.696428181224963}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (IsOwner || IsServer) {\n            FlushMessages();\n        }\n\n        ProcessParameterUpdates();\n\n        if (IsServer || IsOwner) {\n            CheckForAnimatorChanges();\n        }\n    }\n}", "CodeBleu_score": 17.696428181224963}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (IsOwner || IsServer) {\n            FlushMessages();\n        }\n    }\n\n    if (updateStage == NetworkUpdateStage.Update) {\n        if (IsOwner || IsServer) {\n            ProcessParameterUpdates();\n            if (IsServer && IsServerAuthority) {\n                CheckForAnimatorChanges();\n            }\n        }\n    }\n}", "CodeBleu_score": 29.960182573403358}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t    // Check if the object has authority\n    if (hasAuthority) {\n        // Set the authority state to \"Authoritative\"\n        authorityState = AuthorityState.Authoritative;\n\n        // Set the Rigidbody's kinematic property to false\n        rigidbody.isKinematic = false;\n\n        // Set the Rigidbody's interpolation property to \"Interpolate\"\n        rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n    } else {\n        // Set the authority state to \"Non-Authoritative\"\n        authorityState = AuthorityState.NonAuthoritative;\n\n        // Set the Rigidbody's kinematic property to true\n        rigidbody.isKinematic = true;\n\n        // Set the Rigidbody's interpolation property to \"None\"\n        rigidbody.interpolation = RigidbodyInterpolation.None;\n    }\n}", "CodeBleu_score": 32.915599980790304}, {"code": "private void UpdateOwnershipAuthority(){\n\t    if (ServerAuthority) {\n        AuthorityState = AuthorityState.Server;\n        if (Owned) {\n            Rigidbody.isKinematic = false;\n            Rigidbody.interpolation = RigidbodyInterpolation.None;\n        } else {\n            Rigidbody.isKinematic = true;\n            Rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n        }\n    } else {\n        AuthorityState = AuthorityState.Client;\n        if (Owned) {\n            Rigidbody.isKinematic = false;\n            Rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n        } else {\n            Rigidbody.isKinematic = true;\n            Rigidbody.interpolation = RigidbodyInterpolation.None;\n        }\n    }\n}", "CodeBleu_score": 26.939692462969926}, {"code": "private void UpdateOwnershipAuthority(){\n\t    if (isServer) {\n        // If the object is owned by the server, set the authority state to true\n        authorityState = true;\n\n        // If the object is owned by the server and the Rigidbody component is present, set the Rigidbody's kinematic property to false\n        if (rb != null) {\n            rb.isKinematic = false;\n            rb.interpolation = RigidbodyInterpolation.None;\n        }\n    } else {\n        // If the object is not owned by the server, set the authority state to false\n        authorityState = false;\n\n        // If the object is not owned by the server and the Rigidbody component is present, set the Rigidbody's kinematic property to true\n        if (rb != null) {\n            rb.isKinematic = true;\n            rb.interpolation = RigidbodyInterpolation.Interpolate;\n        }\n    }\n}", "CodeBleu_score": 26.148515632714382}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    // Determine which component to skip based on the compressed value's highest two bits\n    int skipComponent = (int)(compressed >> 30);\n\n    // Decompress the remaining components\n    float x = (float)(compressed >> 20 & 0x3FF) / 1023.0f;\n    float y = (float)(compressed >> 10 & 0x3FF) / 1023.0f;\n    float z = (float)(compressed & 0x3FF) / 1023.0f;\n\n    // Calculate the sum of squared magnitudes\n    float sumOfSquaredMagnitudes = x * x + y * y + z * z;\n\n    // Compute the skipped component based on the unit length constraint\n    float skippedComponent = (float)Math.Sqrt(1.0 - sumOfSquaredMagnitudes);\n\n    // Assign the decompressed values to the Quaternion\n    quaternion.x = skipComponent == 0 ? skippedComponent : x;\n    quaternion.y = skipComponent == 1 ? skippedComponent : y;\n    quaternion.z = skipComponent == 2 ? skippedComponent : z;\n    quaternion.w = skipComponent == 3 ? skippedComponent : -skippedComponent;\n}", "CodeBleu_score": 25.21159748291444}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    float x, y, z, w;\n    int skipIndex = (int)(compressed >> 62);\n    float sumSquared = 0;\n    for (int i = 0; i < 4; i++) {\n        if (i != skipIndex) {\n            float value = (float)(compressed >> (i * 16)) & 0xFFFF;\n            value /= (1 << 15);\n            value = 2 * value - 1;\n            sumSquared += value * value;\n            if (i == 0) x = value;\n            else if (i == 1) y = value;\n            else if (i == 2) z = value;\n        }\n    }\n    float root = (float)Math.Sqrt(1 - sumSquared);\n    if (skipIndex == 0) x = root;\n    else if (skipIndex == 1) y = root;\n    else if (skipIndex == 2) z = root;\n    else w = root;\n    quaternion.x = x;\n    quaternion.y = y;\n    quaternion.z = z;\n    quaternion.w = w;\n}", "CodeBleu_score": 29.179664691301237}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t    float sumSq = quaternion.x * quaternion.x + quaternion.y * quaternion.y + quaternion.z * quaternion.z;\n    int highestIndex = compressed >> 30;\n    switch (highestIndex) {\n        case 0:\n            quaternion.x = ReconstructComponent(compressed, sumSq, 1);\n            quaternion.y = ReconstructComponent(compressed, sumSq, 2);\n            quaternion.z = ReconstructComponent(compressed, sumSq, 3);\n            break;\n        case 1:\n            quaternion.y = ReconstructComponent(compressed, sumSq, 1);\n            quaternion.x = ReconstructComponent(compressed, sumSq, 2);\n            quaternion.z = ReconstructComponent(compressed, sumSq, 3);\n            break;\n        case 2:\n            quaternion.z = ReconstructComponent(compressed, sumSq, 1);\n            quaternion.x = ReconstructComponent(compressed, sumSq, 2);\n            quaternion.y = ReconstructComponent(compressed, sumSq, 3);\n            break;\n        case 3:\n            quaternion.w = ReconstructComponent(compressed, sumSq, 1);\n            quaternion.x = ReconstructComponent(compressed, sumSq, 2);\n            quaternion.y = ReconstructComponent(compressed, sumSq, 3);\n            break;\n    }\n    quaternion.Normalize();\n}", "CodeBleu_score": 17.09228347325186}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t    var domain = AppDomain.CreateDomain(\"ILRuntime\");\n    var dllBytes = File.ReadAllBytes(\"Library/ScriptAssemblies/Assembly-CSharp.dll\");\n    var assembly = domain.Load(dllBytes);\n    // Initialize ILRuntime\n    ILRuntime.Runtime.Enviorment.AppDomain appDomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    appDomain.LoadAssembly(assembly, new ILRuntime.CLR.TypeSystem(), new ILRuntime.Mono.Cecil.MonoLoader());\n    ILRuntime.Runtime.Generated.CLRBindings.Initialize(appDomain);\n    // Generate binding code\n    var generatedCode = appDomain.GenerateBindingCode();\n    // Refresh AssetDatabase\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 22.57744683551001}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    // Create a new AppDomain\n    AppDomain domain = AppDomain.CreateDomain(\"ILRuntime\");\n\n    // Load the assembly from the specified file\n    Assembly assembly = domain.Load(File.ReadAllBytes(\"path/to/assembly.dll\"));\n\n    // Initialize ILRuntime with the domain\n    using (ILRuntime.Runtime.Enviorment.AppDomain appDomain = new ILRuntime.Runtime.Enviorment.AppDomain()) {\n        appDomain.LoadAssembly(assembly);\n\n        // Generate binding code\n        ILRuntime.Runtime.CLRBinding.BindingCodeGenerator generator = new ILRuntime.Runtime.CLRBinding.BindingCodeGenerator(appDomain);\n        string generatedCode = generator.GenerateBindingCode();\n\n        // Save the generated code to a file\n        File.WriteAllText(\"path/to/generated/code.cs\", generatedCode);\n\n        // Refresh the AssetDatabase\n        AssetDatabase.Refresh();\n    }\n}", "CodeBleu_score": 27.534012022181244}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t    string dllPath = EditorUtility.OpenFilePanel(\"Select DLL\", Application.dataPath, \"dll\");\n    if (string.IsNullOrEmpty(dllPath)) {\n        return;\n    }\n\n    // Create a new AppDomain\n    AppDomain domain = AppDomain.CreateDomain(\"ILRuntime\");\n\n    // Load the assembly from the specified file\n    Assembly assembly = domain.Load(File.ReadAllBytes(dllPath));\n\n    // Initialize ILRuntime with the domain\n    ILRuntime.Runtime.Enviorment.AppDomain appDomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    appDomain.LoadAssembly(assembly);\n\n    // Generate binding code\n    using (ILRuntime.Runtime.Generated.GeneratedAssembly generatedAssembly = appDomain.LoadAssembly(assembly)) {\n        generatedAssembly.BindingGenerated += (sender, args) => {\n            string generatedCode = args.GeneratedCode;\n            // Do something with the generated code\n        };\n    }\n\n    // Refresh the AssetDatabase\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 24.797883716112576}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t    serializedObject.Update();\n\n    DrawPropertiesExcluding(serializedObject, \"m_Script\");\n\n    using (new EditorGUI.DisabledGroupScope(Application.isPlaying && PrefabUtility.IsPartOfPrefabInstance(target))) {\n        if (Application.isPlaying && PrefabUtility.IsPartOfPrefabInstance(target)) {\n            EditorGUILayout.LabelField(\"Config Count\", ConfigComponent.ConfigCount.ToString());\n            EditorGUILayout.LabelField(\"Cached Bytes Size\", ConfigComponent.CachedBytesSize.ToString());\n        }\n\n        serializedObject.ApplyModifiedProperties();\n    }\n\n    Repaint();\n}", "CodeBleu_score": 53.63888072285972}, {"code": "public override void OnInspectorGUI(){\n\t    serializedObject.Update();\n\n    EditorGUILayout.PropertyField(m_Configs);\n    EditorGUILayout.PropertyField(m_ConfigsInScene);\n    EditorGUILayout.PropertyField(m_ConfigsInSceneCount);\n    EditorGUILayout.PropertyField(m_CachedBytes);\n    EditorGUILayout.PropertyField(m_CachedBytesCount);\n\n    if (Application.isPlaying && Selection.activeGameObject.scene.rootCount > 0) {\n        EditorGUILayout.LabelField(\"Config Count\", m_Target.Configs.Count.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", m_Target.CachedBytes.Length.ToString());\n    }\n\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 50.36387104274132}, {"code": "public override void OnInspectorGUI(){\n\t    serializedObject.Update();\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"target\"));\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"configs\"));\n    using (new EditorGUI.DisabledGroupScope(Application.isPlaying && serializedObject.targetObject.GetType() == typeof(GameObject))) {\n        EditorGUILayout.PropertyField(serializedObject.FindProperty(\"configCount\"));\n        EditorGUILayout.PropertyField(serializedObject.FindProperty(\"cachedBytesSize\"));\n    }\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 42.5976004803286}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t", "CodeBleu_score": 1.3756526078371607}, {"code": "public static void DefaultScenes(){\n\t", "CodeBleu_score": 1.3756526078371607}, {"code": "public static void DefaultScenes(){\n\t", "CodeBleu_score": 1.3756526078371607}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t    // Draw the popup menu for selecting a helper type\n    selectedIndex = EditorGUILayout.Popup(\"Helper Type\", selectedIndex, helperTypeNames);\n\n    // Get the selected helper type\n    Type selectedHelperType = helperTypes[selectedIndex];\n\n    // If no helper type is selected, display a field for a custom helper\n    if (selectedHelperType == null) {\n        customHelper = EditorGUILayout.ObjectField(\"Custom Helper\", customHelper, typeof(MonoBehaviour), true) as MonoBehaviour;\n\n        // If the custom helper is not set, show an error message\n        if (customHelper == null) {\n            EditorGUILayout.HelpBox(\"Please select a helper type or set a custom helper.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 38.00597044872166}, {"code": "public void Draw(){\n\t    // Get the selected index of the helper type\n    int selectedIndex = EditorGUILayout.Popup(\"Helper Type\", selectedIndex, helperNames);\n\n    // If the selected index has changed, update the selected index and helper type\n    if (selectedIndex != this.selectedIndex) {\n        this.selectedIndex = selectedIndex;\n        helperType = selectedIndex == 0 ? null : helperTypes[selectedIndex - 1];\n    }\n\n    // If a helper type is selected, display the configuration fields for the helper\n    if (helperType != null) {\n        // Get the fields of the helper type\n        FieldInfo[] fields = helperType.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);\n\n        // Iterate over the fields and display them in the editor\n        foreach (FieldInfo field in fields) {\n            // Get the value of the field\n            object value = field.GetValue(this);\n\n            // Display the field in the editor\n            EditorGUILayout.PropertyField(new SerializedObject(this).FindProperty(field.Name), true);\n        }\n    } else {\n        // If no helper type is selected, display a field for a custom helper\n        EditorGUILayout.PropertyField(serializedObject.FindProperty(\"customHelper\"), true);\n\n        // If the custom helper is not set, show an error message\n        if (customHelper == null) {\n            EditorGUILayout.HelpBox(\"No helper type selected or custom helper not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 37.98452376281403}, {"code": "public void Draw(){\n\t    if (m_HelperType != HelperType.Custom) {\n        m_HelperType = (HelperType)EditorGUILayout.EnumPopup(GetContent(\"Helper Type\"), m_HelperType);\n    }\n\n    if (m_HelperType == HelperType.Custom) {\n        EditorGUILayout.PropertyField(m_CustomHelper);\n        if (m_CustomHelper.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(GetContent(\"Custom Helper must be set!\"), MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 43.521976570662225}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t    // Remove the general logging symbol\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(\"LOGGING\", \"\"));\n\n    // Remove symbols for specific logs and logs above a certain level\n    foreach (LogType logType in Enum.GetValues(typeof(LogType))) {\n        if (logType != LogType.Log) {\n            PlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(logType.ToString().ToUpper(), \"\"));\n        }\n    }\n}", "CodeBleu_score": 38.42736825216593}, {"code": "public static void DisableAllLogs(){\n\t    // Remove the general logging symbol\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, \"\");\n\n    // Iterate through the logging symbols and remove them\n    foreach (string symbol in LoggingSymbols) {\n        PlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(symbol, \"\"));\n    }\n}", "CodeBleu_score": 39.721028073536324}, {"code": "public static void DisableAllLogs(){\n\t    // Remove the general logging symbol\n    PlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(\"LOGGING\", \"\"));\n\n    // Iterate through the logs and remove the symbols for each log and logs above the specified level\n    for (int i = 0; i < (int)LogLevel.None; i++) {\n        PlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(\"LOG_\" + i, \"\"));\n    }\n}", "CodeBleu_score": 37.05577469560857}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    // Iterate through the linked list of components\n    for (GameFrameworkComponent component = components; component != null; component = component.next) {\n        // Check if the current component's type matches the specified type\n        if (component.GetType() == type) {\n            // Return the matching component\n            return component;\n        }\n    }\n\n    // Return null if no matching component was found\n    return null;\n}", "CodeBleu_score": 36.96743629783025}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    GameFrameworkComponent component = firstComponent;\n    while (component != null) {\n        if (component.GetType() == type) {\n            return component;\n        }\n        component = component.nextComponent;\n    }\n    return null;\n}", "CodeBleu_score": 50.15017218961866}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    // Check if the type is null\n    if (type == null) {\n        // Throw an exception if the type is null\n        throw new ArgumentNullException(\"type\");\n    }\n\n    // Check if the type is not a GameFrameworkComponent\n    if (!typeof(GameFrameworkComponent).IsAssignableFrom(type)) {\n        // Throw an exception if the type is not a GameFrameworkComponent\n        throw new ArgumentException(\"The type must be a GameFrameworkComponent.\", \"type\");\n    }\n\n    // Iterate through the linked list of components\n    for (GameFrameworkComponent component = firstComponent; component != null; component = component.nextComponent) {\n        // Check if the component's type matches the specified type\n        if (component.GetType() == type) {\n            // Return the matching component\n            return component;\n        }\n    }\n\n    // Return null if no matching component is found\n    return null;\n}", "CodeBleu_score": 34.607133126762534}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    // Log the shutdown action\n    Debug.Log(\"Shutting down the game framework...\");\n\n    // Shutdown the BaseComponent if it exists\n    if (BaseComponent.Instance != null) {\n        BaseComponent.Instance.Shutdown();\n    }\n\n    // Clear game framework components\n    ClearComponents();\n\n    // Handle the shutdown type\n    switch (shutdownType) {\n        case ShutdownType.Restart:\n            // Restart the game scene\n            UnityEngine.SceneManagement.SceneManager.LoadScene(UnityEngine.SceneManagement.SceneManager.GetActiveScene().buildIndex);\n            break;\n        case ShutdownType.Quit:\n            // Quit the application\n            UnityEngine.Application.Quit();\n            break;\n        case ShutdownType.None:\n            // Do nothing\n            break;\n    }\n}", "CodeBleu_score": 30.936956813678012}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    if (shutdownType == ShutdownType.None) return;\n\n    if (shutdownType == ShutdownType.Restart) {\n        Log.Info(\"Restarting the game scene...\");\n        UnityEngine.SceneManagement.SceneManager.LoadScene(UnityEngine.SceneManagement.SceneManager.GetActiveScene().name);\n    }\n    else if (shutdownType == ShutdownType.Quit) {\n        Log.Info(\"Quitting the application...\");\n        Application.Quit();\n    }\n\n    if (BaseComponent.Instance != null) {\n        BaseComponent.Instance.Shutdown();\n    }\n\n    ClearComponents();\n}", "CodeBleu_score": 40.33425635134168}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    // Log the shutdown action\n    Debug.Log(\"Shutting down the game framework...\");\n\n    // Shut down the BaseComponent if it exists\n    if (BaseComponent.Instance != null) {\n        BaseComponent.Instance.Shutdown();\n    }\n\n    // Clear game framework components\n    ClearComponents();\n\n    // Handle the shutdown type\n    switch (shutdownType) {\n        case ShutdownType.Restart:\n            // Restart the game scene\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            // Quit the application\n            Application.Quit();\n            break;\n        case ShutdownType.None:\n            // Do nothing\n            break;\n    }\n}", "CodeBleu_score": 26.922889186458494}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t    base.Awake();\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    if (m_ReadDataSuccessEvent || m_ReadDataFailureEvent) {\n        m_ConfigManager.SubscribeReadDataSuccessEvent(OnReadDataSuccess);\n        m_ConfigManager.SubscribeReadDataFailureEvent(OnReadDataFailure);\n    }\n\n    if (m_UpdateAssetEvent || m_DependencyAssetEvent) {\n        m_ConfigManager.SubscribeUpdateAssetEvent(OnUpdateAsset);\n        m_ConfigManager.SubscribeDependencyAssetEvent(OnDependencyAsset);\n    }\n}", "CodeBleu_score": 56.42339338033347}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tGameFrameworkEntry.ConfigManager.SubscribeReadDataSuccess(OnReadDataSuccess);\n\tGameFrameworkEntry.ConfigManager.SubscribeReadDataFailure(OnReadDataFailure);\n\tif (m_UpdateAsset) {\n\t\tGameFrameworkEntry.ConfigManager.SubscribeUpdateAsset(OnUpdateAsset);\n\t}\n\tif (m_DependencyAsset) {\n\t\tGameFrameworkEntry.ConfigManager.SubscribeDependencyAsset(OnDependencyAsset);\n\t}\n}", "CodeBleu_score": 18.785130632249043}, {"code": "protected override void Awake(){\n\t    base.Awake();\n    // Get the config manager from the GameFrameworkEntry module\n    m_ConfigManager = GameFrameworkEntry.GetModule<ConfigManager>();\n\n    // Check if the config manager is valid\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    // Subscribe to events for reading data success and failure\n    m_ConfigManager.ReadDataSuccess += OnReadDataSuccess;\n    m_ConfigManager.ReadDataFailure += OnReadDataFailure;\n\n    // Optionally subscribe to update and dependency asset events based on specific flags\n    if (m_UpdateAsset) {\n        m_ConfigManager.UpdateAsset += OnUpdateAsset;\n    }\n\n    if (m_DependencyAsset) {\n        m_ConfigManager.DependencyAsset += OnDependencyAsset;\n    }\n}", "CodeBleu_score": 85.04192788544198}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (configAsset == null) {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    if (configAsset is TextAsset) {\n        string text = (configAsset as TextAsset).text;\n\n        if (configAssetName.EndsWith(\".bytes\")) {\n            configManager.ParseBytes(text, userData);\n        } else {\n            configManager.ParseText(text, userData);\n        }\n    } else {\n        Log.Warning(\"Config asset '{0}' is invalid.\", configAssetName);\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 64.388545424326}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (configAsset == null) {\n        Debug.LogWarning(\"[Default Config Reader] ReadData failure : config asset is invalid, config asset name '{0}'.\", configAssetName);\n        return false;\n    }\n    TextAsset textAsset = configAsset as TextAsset;\n    if (textAsset == null) {\n        Debug.LogWarning(\"[Default Config Reader] ReadData failure : config asset type '{0}' is invalid, config asset name '{1}'.\", configAsset.GetType().FullName, configAssetName);\n        return false;\n    }\n    byte[] bytes = textAsset.bytes;\n    string text = textAsset.text;\n    if (configAssetName.EndsWith(Constant.Config.Extension.BYTES)) {\n        return configManager.ParseBytes(bytes, userData);\n    } else {\n        return configManager.ParseText(text, userData);\n    }\n}", "CodeBleu_score": 60.08913023986751}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (configAsset is TextAsset textAsset) {\n        string extension = Path.GetExtension(configAssetName);\n        if (extension == \".bytes\") {\n            return configManager.ParseBytes(textAsset.bytes, userData);\n        } else {\n            return configManager.ParseText(textAsset.text, userData);\n        }\n    }\n\n    Log.Warning(\"Can not parse 'ConfigAsset' data with invalid asset.\");\n    return false;\n}", "CodeBleu_score": 61.04844809908997}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    if (configBytes == null || configBytes.Length <= 0) {\n        return true;\n    }\n\n    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n                while (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n                    string configName = binaryReader.ReadString();\n                    string configValue = binaryReader.ReadString();\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Can not add config with name '{0}' and value '{1}' to config manager.\", configName, configValue);\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    } catch (Exception exception) {\n        Log.Error(\"Parse data with binary reader failure.\", exception);\n        return false;\n    }\n}", "CodeBleu_score": 81.30804816595692}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream stream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader reader = new BinaryReader(stream)) {\n                while (reader.BaseStream.Position < reader.BaseStream.Length) {\n                    string configName = reader.ReadString();\n                    string configValue = reader.ReadString();\n\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning($\"Config entry '{configName}' cannot be added due to being invalid or duplicate.\");\n                        return false;\n                    }\n                }\n            }\n        }\n    } catch (Exception e) {\n        Log.Error(e.ToString());\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 61.639865355402314}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream stream = new MemoryStream(configBytes, startIndex, length)) {\n            using (BinaryReader reader = new BinaryReader(stream)) {\n                while (reader.BaseStream.Position < reader.BaseStream.Length) {\n                    string configName = reader.ReadString();\n                    string configValue = reader.ReadString();\n\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning($\"Invalid or duplicate config entry: {configName} = {configValue}\");\n                        return false;\n                    }\n                }\n            }\n        }\n    } catch (Exception ex) {\n        Log.Error($\"Error parsing config data: {ex.Message}\");\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 60.238610376422216}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    ResourceComponent resourceComponent = configManager.GetExtension<ResourceComponent>();\n    resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 41.79010955956288}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    // Get the resource component from the config manager\n    ResourceComponent resourceComponent = configManager.GetComponent<ResourceComponent>();\n\n    // Unload the config asset using the resource component\n    resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 41.94452061479711}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    configManager.GetComponent<ResourceComponent>().UnloadAsset(configAsset);\n}", "CodeBleu_score": 42.03651830189442}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t     ActiveSceneChangedEventArgs obj = new ActiveSceneChangedEventArgs();\n     obj.lastActiveScene = lastActiveScene;\n     obj.activeScene = activeScene;\n     return obj;\n }", "CodeBleu_score": 35.56247803903838}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t     var instance = new ActiveSceneChangedEventArgs();\n     instance.lastActiveScene = lastActiveScene;\n     instance.activeScene = activeScene;\n     return instance;\n }", "CodeBleu_score": 31.00895293351543}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t  return new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n }", "CodeBleu_score": 12.687654252266334}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (!IsValidSceneAssetName(sceneAssetName)) {\n        Debug.LogError(\"Invalid scene asset name: \" + sceneAssetName);\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Debug.LogError(\"Scene asset name must start with 'Assets/' and end with '.unity': \" + sceneAssetName);\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 56.342973077454104}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (!IsSceneAssetNameValid(sceneAssetName)) {\n        Debug.LogError(\"Invalid scene asset name: \" + sceneAssetName);\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Debug.LogError(\"Scene asset name must start with 'Assets/' and end with '.unity': \" + sceneAssetName);\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 56.342973077454104}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Debug.LogError(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n        Debug.LogError(\"Scene asset name must start with 'Assets/' and end with '.unity'.\");\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, LoadSceneMode.Single, priority, userData);\n}", "CodeBleu_score": 63.4179421583344}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t    // Retrieve registered feature implementations and append their names to the binaries patch feature enumerations\n    for (auto& Feature : IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(GetModularFeatureName())) {\n        if (Feature != nullptr) {\n            Feature->AppendFeatureEnums(FeatureEnums);\n        }\n    }\n\n    // Set up callbacks for when modular features are registered or unregistered\n    OnModularFeatureRegisteredHandle = IModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    OnModularFeatureUnregisteredHandle = IModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 47.688443381589295}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t    UE_LOG(LogBinariesPatchFeature, Log, TEXT(\"StartupModule\"));\n\n    // Retrieve registered feature implementations\n    TArray<IBinariesPatchFeature*> Implementations = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(IBinariesPatchFeature::GetModularFeatureName());\n\n    // Append their names to the binaries patch feature enumerations\n    for (IBinariesPatchFeature* Implementation : Implementations) {\n        FString ImplementationName = Implementation->GetFeatureName();\n        UE_LOG(LogBinariesPatchFeature, Log, TEXT(\"Append feature name: %s\"), *ImplementationName);\n        BinariesPatchFeatureEnum.Add(ImplementationName);\n    }\n\n    // Set up callbacks for when modular features are registered or unregistered\n    OnModularFeatureRegisteredHandle = IModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    OnModularFeatureUnregisteredHandle = IModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 48.632592687938114}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t    // Call the base class implementation\n    IModularFeatures::StartupModule();\n\n    // Retrieve registered feature implementations\n    TArray<IBinariesPatchFeature*> FeatureImplementations = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(IBinariesPatchFeature::GetModularFeatureName());\n\n    // Append the names of the feature implementations to the binaries patch feature enumerations\n    for (IBinariesPatchFeature* Feature : FeatureImplementations) {\n        UE_LOG(LogBinariesPatchFeature, Log, TEXT(\"Registered binaries patch feature: %s\"), *Feature->GetFeatureName());\n        UE_LOG(LogBinariesPatchFeature, Log, TEXT(\"Registered binaries patch feature: %s\"), *Feature->GetFeatureName());\n    }\n\n    // Set up callbacks for when modular features are registered or unregistered\n    OnModularFeatureRegisteredHandle = IModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    OnModularFeatureUnregisteredHandle = IModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 47.46385366449268}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> PatchConfigs;\n\n\tTMap<FString, FString> KeyValues;\n\tCommandlineHelper::ParseCommandline(Commandline, KeyValues);\n\n\tif (KeyValues.Contains(Token)) {\n\t\tFString PatchConfigsStr = KeyValues[Token];\n\t\tPatchConfigsStr.ParseIntoArray(PatchConfigs, TEXT(\",\"), true);\n\t}\n\n\treturn PatchConfigs;\n}", "CodeBleu_score": 57.00515243234459}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tTMap<FString, FString> CommandlineMap;\n\tFString Key;\n\tFString Value;\n\n\t// Parse the command line into a map of key-value pairs\n\tbool bInQuotes = false;\n\tbool bInKey = true;\n\tfor (const TCHAR& Char : Commandline) {\n\t\tif (Char == '\"') {\n\t\t\tbInQuotes = !bInQuotes;\n\t\t}\n\t\telse if (Char == ' ' && !bInQuotes) {\n\t\t\tif (bInKey) {\n\t\t\t\tbInKey = false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tCommandlineMap.Add(Key, Value);\n\t\t\t\tKey.Empty();\n\t\t\t\tValue.Empty();\n\t\t\t\tbInKey = true;\n\t\t\t}\n\t\t}\n\t\telse if (bInKey) {\n\t\t\tKey += Char;\n\t\t}\n\t\telse {\n\t\t\tValue += Char;\n\t\t}\n\t}\n\tif (!Key.IsEmpty()) {\n\t\tCommandlineMap.Add(Key, Value);\n\t}\n\n\t// Check for the specified token and return the associated value\n\tif (CommandlineMap.Contains(Token)) {\n\t\tFString Value = CommandlineMap[Token];\n\t\tValue.ParseIntoArray(Result, TEXT(\",\"));\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 51.30620938092007}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString, FString> CommandLineMap;\n\tFParse::Value(FCommandLine::Get(), TEXT(\"PATCH_CONFIG=\"), CommandLineMap);\n\n\tTArray<FString> PatchConfigArray;\n\n\tif (CommandLineMap.Contains(Token))\n\t{\n\t\tFString PatchConfigString = CommandLineMap[Token];\n\t\tPatchConfigString.ParseIntoArray(PatchConfigArray, TEXT(\",\"));\n\t}\n\n\treturn PatchConfigArray;\n}", "CodeBleu_score": 53.43863479082387}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    if (UObject::GetCurrentThreadContext() == nullptr) {\n        return false;\n    }\n    \n    FString CommandletName = UObject::GetCurrentThreadContext()->GetContextName();\n    if (!CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n        return true;\n    }\n    \n    return false;\n}", "CodeBleu_score": 34.519704943667826}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    if (UCommandlet::IsRunningCommandlet()) {\n        FString CommandletName = UCommandlet::GetCommandletName();\n        if (!CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 32.466485726514414}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    if (UCommandlet::IsRunningCommandlet()) {\n        FString CommandletName = UCommandlet::GetCurrentCommandletName();\n        if (!CommandletName.IsEmpty() && CommandletName.Equals(\"cook\", ESearchCase::IgnoreCase)) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 28.450147967538065}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t}", "CodeBleu_score": 3.991974524144627}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t}", "CodeBleu_score": 3.991974524144627}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t}", "CodeBleu_score": 3.991974524144627}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t    if (TargetPlatform == nullptr) {\n        return false;\n    }\n\n    FString PlatformName = TargetPlatform->PlatformName();\n    return PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 39.483668248685646}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t    FString PlatformName = TargetPlatform->PlatformName();\n    return PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 37.172485594931615}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t    if (TargetPlatform == nullptr) {\n        return false;\n    }\n\n    FString PlatformName = TargetPlatform->PlatformName();\n    return PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 39.483668248685646}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tUPackage* Package = Object->GetOutermost();\n\tif (!Package) {\n\t\treturn;\n\t}\n\n\tbool bIsCookerAsset = Package->bIsCookerAsset;\n\tbool bIsAlwaysPostLoad = IsAlwayPostLoadClasses(Package, (UObject*)Object);\n\n\tif (!bIsCookerAsset && !bIsAlwaysPostLoad) {\n\t\tPackageObjectsMap.FindOrAdd(Package).Add(Object);\n\t\tFreezeObjects.Add((UObject*)Object);\n\t}\n\n\tObject->ClearFlags(RF_NeedPostLoad);\n\tObject->ClearFlags(RF_NeedPostLoadSubobjects);\n}", "CodeBleu_score": 43.40709678405177}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tUPackage* Package = Object->GetOutermost();\n\tif (Package) {\n\t\tif (IsAlwayPostLoadClasses(Package, Object)) {\n\t\t\tif (Package->IsCookerAsset()) {\n\t\t\t\tPackage->FreezeObject(Object, Index);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 22.588031852680373}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tUObject* ObjectPtr = const_cast<UObject*>(Object);\n\tUPackage* Package = ObjectPtr->GetOutermost();\n\tif (Package) {\n\t\tif (IsAlwayPostLoadClasses(Package, ObjectPtr)) {\n\t\t\tPackageObjectsMap.Add(Package, ObjectPtr);\n\t\t\tFreezeObjects.Add(ObjectPtr);\n\t\t}\n\t\telse {\n\t\t\tObjectPtr->ClearFlags(RF_NeedPostLoad);\n\t\t\tObjectPtr->ClearFlags(RF_NeedPostLoadSubobjects);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.610190292345045}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t", "CodeBleu_score": 3.322889697418792}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t", "CodeBleu_score": 3.322889697418792}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFBulkDataBuffer* BulkDataBuffer = Record.GetBulkDataBuffer();\n\tif (BulkDataBuffer)\n\t{\n\t\tFBulkDataBuffer::FElement& BulkData = BulkDataBuffer->Elements[0];\n\t\tif (BulkData.BulkData.IsAppendedToExport())\n\t\t{\n\t\t\tFExportBufferList* ExportBufferList = Context.GetExportBufferList(BulkData.BulkData.GetExportIndex());\n\t\t\tif (ExportBufferList)\n\t\t\t{\n\t\t\t\tExportBufferList->Add(BulkData.BulkData.GetExportBuffer());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFOutputFileEntry* OutputFileEntry = Context.CreateOutputFileEntry();\n\t\t\tOutputFileEntry->Filename = BulkData.Filename;\n\t\t\tOutputFileEntry->Buffer = BulkData.BulkData.GetBuffer();\n\t\t\tOutputFileEntry->Regions = BulkData.BulkData.GetRegions();\n\t\t\tOutputFileEntry->bIsSidecar = BulkData.BulkData.IsSidecar();\n\t\t\tOutputFileEntry->bContributeToHash = BulkData.BulkData.ContributeToHash();\n\t\t}\n\t}\n}", "CodeBleu_score": 36.809310724239396}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.ExportedPackages.Num() == 0) return;\n\n\tbool bExportArchiveCompleted = true;\n\tfor (auto& Package : Context.ExportedPackages)\n\t{\n\t\tif (Package.Value.ExportBuffer.Num() == 0)\n\t\t{\n\t\t\tbExportArchiveCompleted = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (bExportArchiveCompleted)\n\t{\n\t\tContext.ExportedPackages.Empty();\n\t\treturn;\n\t}\n\n\tFBufferArchive FooterBuffer;\n\tFPackageFileTag PackageFileTag;\n\tPackageFileTag.Filename = TEXT(\"\");\n\tPackageFileTag.PackageFileVersion = GPackageFileUE4Version;\n\tPackageFileTag.PackageFileLicenseeUE4 = GPackageFileLicenseeUE4;\n\tPackageFileTag.Save(FooterBuffer);\n\n\tfor (auto& Package : Context.ExportedPackages)\n\t{\n\t\tPackage.Value.ExportBuffer.Append(FooterBuffer.GetData(), FooterBuffer.Num());\n\t}\n}", "CodeBleu_score": 40.67223608452425}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tTArray<FExportInfo> ExportInfos;\n\tFExportInfo ExportInfo;\n\tExportInfo.ExportMode = EExportMode::Diff;\n\tExportInfo.ExportName = \"Footer\";\n\tExportInfo.ExportType = EExportType::Footer;\n\tExportInfo.ExportData = Record.Footer;\n\tExportInfos.Add(ExportInfo);\n\tContext.AddExportInfos(Record.Key, ExportInfos);\n}", "CodeBleu_score": 39.46188689750168}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tTArray<FString> PackageNames;\n\tContext.GetAllPackages(PackageNames);\n\tfor (auto& PackageName : PackageNames) {\n\t\tauto& Package = Context.GetPackage(PackageName);\n\t\tif (Package.IsDirty()) {\n\t\t\tFBufferArchive PackageFooter;\n\t\t\tPackageFooter.Serialize(const_cast<TCHAR*>(TEXT(\"PackageFileTag\")), 15);\n\t\t\tPackage.AddFooter(PackageFooter);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.957549702450876}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t    Super::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n    UGDCharacterMovementComponent* MovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n    if (MovementComponent) {\n        MovementComponent->SavedMove.bSprinting = MovementComponent->bWantsToSprint;\n        MovementComponent->SavedMove.bADS = MovementComponent->bWantsToAimDownSights;\n    }\n}", "CodeBleu_score": 68.80041448921106}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t    UCharacterMovementComponent::FGDSavedMove::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n    UGDCharacterMovementComponent* MovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n    if (MovementComponent) {\n        MovementComponent->SetSprinting(bSprinting);\n        MovementComponent->SetADS(bADS);\n    }\n}", "CodeBleu_score": 65.3699452426481}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t    Super::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n    if (UGDCharacterMovementComponent* GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetMovementComponent())) {\n        GDCharacterMovementComponent->SetSprinting(bSprinting);\n        GDCharacterMovementComponent->SetADS(bADS);\n    }\n}", "CodeBleu_score": 63.55839090086408}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t}", "CodeBleu_score": 4.61596512866752}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t}", "CodeBleu_score": 4.61596512866752}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t    return NULL;\n}", "CodeBleu_score": 2.7505152054841}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t}", "CodeBleu_score": 2.750515142824237}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t    return NULL;\n}", "CodeBleu_score": 2.7505152054841}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    return;\n}", "CodeBleu_score": 4.47210729013937}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t    return;\n}", "CodeBleu_score": 10.577094047813492}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\t// Remove the delegate from the ability system component\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t}\n\n\tif (AbilityEnded && bStopWhenAbilityEnds)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 68.17385153103898}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (Ability)\n\t{\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\tAbility->OnGameplayAbilityEnded.Remove(EndedHandle);\n\n\t\tif (StopWhenAbilityEnds == true)\n\t\t{\n\t\t\tStopPlayingMontage();\n\t\t}\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 78.68739561254077}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\n\t// Remove the delegate to the cancel handler\n\tif (Ability)\n\t{\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelHandle);\n\t}\n\n\tif (StopWhenAbilityEnds)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 76.28485584035106}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    return false;\n}", "CodeBleu_score": 3.758120540592745}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    return false;\n}", "CodeBleu_score": 3.758120540592745}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    return false;\n}", "CodeBleu_score": 3.758120540592745}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t    Super::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n    // Check if AI pawn and target actor are valid\n    AAIController* AIController = OwnerComp.GetAIOwner();\n    if (!AIController) {\n        return;\n    }\n\n    APawn* AIPawn = AIController->GetPawn();\n    if (!AIPawn) {\n        return;\n    }\n\n    AActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(GetSelectedBlackboardKey()));\n    if (!TargetActor) {\n        return;\n    }\n\n    // Calculate distance to target\n    float DistanceToTarget = FVector::Distance(AIPawn->GetActorLocation(), TargetActor->GetActorLocation());\n\n    // Check if target is within attack range\n    if (DistanceToTarget <= MaxAttackRange) {\n        // Check for line of sight to target\n        FVector DirectionToTarget = TargetActor->GetActorLocation() - AIPawn->GetActorLocation();\n        FHitResult HitResult;\n        FCollisionQueryParams QueryParams;\n        QueryParams.AddIgnoredActor(AIPawn);\n\n        GetWorld()->LineTraceSingleByChannel(HitResult, AIPawn->GetActorLocation(), TargetActor->GetActorLocation(), ECC_Visibility, QueryParams);\n\n        if (HitResult.GetActor() == TargetActor) {\n            // Target is within attack range and visible\n            OwnerComp.GetBlackboardComponent()->SetValueAsBool(GetSelectedBlackboardKey(), true);\n        }\n        else {\n            // Target is within attack range but not visible\n            OwnerComp.GetBlackboardComponent()->SetValueAsBool(GetSelectedBlackboardKey(), false);\n        }\n    }\n    else {\n        // Target is not within attack range\n        OwnerComp.GetBlackboardComponent()->SetValueAsBool(GetSelectedBlackboardKey(), false);\n    }\n}", "CodeBleu_score": 51.35294428761187}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t    Super::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n    // Check if AI controller is valid\n    AAIController* AIController = OwnerComp.GetAIOwner();\n    if (AIController == nullptr) {\n        return;\n    }\n\n    // Get target actor from blackboard\n    UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n    AActor* TargetActor = Cast<AActor>(BlackboardComp->GetValueAsObject(TargetKey.SelectedKeyName));\n    if (TargetActor == nullptr) {\n        return;\n    }\n\n    // Get AI pawn and calculate distance to target\n    APawn* AIPawn = AIController->GetPawn();\n    float DistanceToTarget = FVector::Dist(AIPawn->GetActorLocation(), TargetActor->GetActorLocation());\n\n    // Check if target is within maximum attack range\n    if (DistanceToTarget <= MaxAttackRange) {\n        // Check for line of sight to target\n        FHitResult HitResult;\n        FCollisionQueryParams QueryParams;\n        QueryParams.AddIgnoredActor(AIPawn);\n        bool bHasLOS = GetWorld()->LineTraceSingleByChannel(HitResult, AIPawn->GetActorLocation(), TargetActor->GetActorLocation(), ECC_Visibility, QueryParams);\n\n        // Store result in blackboard\n        BlackboardComp->SetValueAsBool(HasLOSKey.SelectedKeyName, bHasLOS);\n    }\n    else {\n        // Target is too far away, store false in blackboard\n        BlackboardComp->SetValueAsBool(HasLOSKey.SelectedKeyName, false);\n    }\n}", "CodeBleu_score": 56.4869828654371}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t    Super::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n    // Check if AI pawn is within attack range of its target\n    AAIController* AIController = OwnerComp.GetAIOwner();\n    if (AIController) {\n        APawn* AIPawn = AIController->GetPawn();\n        if (AIPawn) {\n            UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n            if (BlackboardComp) {\n                AActor* TargetActor = Cast<AActor>(BlackboardComp->GetValueAsObject(TargetKey.SelectedKeyName));\n                if (TargetActor) {\n                    float DistanceToTarget = FVector::Dist(AIPawn->GetActorLocation(), TargetActor->GetActorLocation());\n                    if (DistanceToTarget <= MaxAttackRange) {\n                        // Check for line of sight to target\n                        FVector StartLocation = AIPawn->GetActorLocation() + FVector(0.0f, 0.0f, 50.0f);\n                        FVector EndLocation = TargetActor->GetActorLocation();\n                        FHitResult HitResult;\n                        FCollisionQueryParams QueryParams;\n                        QueryParams.AddIgnoredActor(AIPawn);\n                        bool bHasLineOfSight = GetWorld()->LineTraceSingleByChannel(HitResult, StartLocation, EndLocation, ECC_Visibility, QueryParams);\n                        if (bHasLineOfSight) {\n                            BlackboardComp->SetValueAsBool(TargetInAttackRangeKey.SelectedKeyName, true);\n                        } else {\n                            BlackboardComp->SetValueAsBool(TargetInAttackRangeKey.SelectedKeyName, false);\n                        }\n                    } else {\n                        BlackboardComp->SetValueAsBool(TargetInAttackRangeKey.SelectedKeyName, false);\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 51.23077186349817}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (MyPawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(MyPawn);\n\tif (ensure(AttributeComp)) {\n\t\tAttributeComp->ApplyHealthChange(MyPawn, AttributeComp->GetHealthMax());\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 77.58264108693042}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t    Super::ExecuteTask(OwnerComp, NodeMemory);\n\n    APawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n    if (MyPawn == nullptr) {\n        return EBTNodeResult::Failed;\n    }\n\n    USAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(MyPawn);\n    if (ensure(AttributeComp)) {\n        AttributeComp->ApplyHealthChange(MyPawn, AttributeComp->GetHealthMax());\n    }\n\n    return EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 76.99456842648823}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAAIController* MyController = OwnerComp.GetAIOwner();\n\n\tif (MyController == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tAPawn* MyPawn = MyController->GetPawn();\n\tUSAttributeComponent* MyAttributeComp = USAttributeComponent::GetAttributes(MyPawn);\n\n\tif (MyAttributeComp == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tMyAttributeComp->ApplyHealthChange(MyAttributeComp->GetMaxHealth());\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 53.33067339454614}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    Super::BeginPlay();\n    USTickablesSubsystem::Get(this->GetWorld())->RegisterPrimaryTick(this);\n}", "CodeBleu_score": 33.01693150956124}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    UProjectileMovementComponent::BeginPlay();\n    this->RegisterComponent();\n}", "CodeBleu_score": 27.718903264322662}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    Super::BeginPlay();\n    USTickablesSubsystem::GetTickablesSubsystem(this->GetWorld())->RegisterPrimaryTick(this);\n}", "CodeBleu_score": 36.28704381526242}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t}", "CodeBleu_score": 6.860273838124142}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    UProjectileMovementComponent::EndPlay(EndPlayReason);\n\n    if (UWorld* World = GetWorld()) {\n        if (USTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>()) {\n            TickablesSubsystem->DeregisterTickFunction(PrimaryTickFunction);\n        }\n    }\n}", "CodeBleu_score": 53.855154624479695}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t}", "CodeBleu_score": 6.860273838124142}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t    Super::BeginPlay();\n\n    // Initialize the significance component\n    if (bManageSignificance) {\n        // Check if the owner implements the significance interface\n        if (GetOwner()->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n            // Register the component with the manager immediately or schedule it for the next tick\n            if (bWaitOneFrame) {\n                FTimerHandle TimerHandle;\n                GetWorld()->GetTimerManager().SetTimer(TimerHandle, this, &USSignificanceComponent::RegisterWithManager, 0.01f, false);\n            } else {\n                RegisterWithManager();\n            }\n        }\n    }\n\n    // Manage particle significance for any particle system components owned by the actor\n    TArray<UParticleSystemComponent*> ParticleSystemComponents;\n    GetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n    for (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n        if (ParticleSystemComponent->bManageSignificance) {\n            ParticleSystemComponent->bManageSignificance = false;\n            ParticleSystemComponent->bAllowSignificanceUpdates = true;\n        }\n    }\n}", "CodeBleu_score": 62.157491599427125}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tRegisterWithManager();\n\t}\n}", "CodeBleu_score": 16.68646337804473}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t    Super::BeginPlay();\n\n    if (bManageSignificance) {\n        if (USignificanceManager::Get(GetWorld())) {\n            if (AActor* Owner = GetOwner()) {\n                if (Owner->Implements<USSignificanceInterface>()) {\n                    if (bWaitOneFrame) {\n                        RegisterWithManager();\n                    } else {\n                        RegisterWithManager();\n                    }\n                } else {\n                    UE_LOG(LogTemp, Error, TEXT(\"USSignificanceComponent: Owner does not implement USSignificanceInterface\"));\n                }\n            }\n        } else {\n            UE_LOG(LogTemp, Error, TEXT(\"USSignificanceComponent: SignificanceManager is not valid\"));\n        }\n    }\n}", "CodeBleu_score": 53.822026403598144}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Retrieve the significance manager from the world\n\tUSignificanceManager* SignificanceManager = GetWorld()->GetSubsystem<USignificanceManager>();\n\n\t// Define lambda functions for calculating significance and handling post-significance updates\n\tauto CalcSignificanceLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) {\n\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t};\n\n\tauto PostSignificanceUpdateLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t};\n\n\t// Register the component with the manager\n\tSignificanceManager->RegisterObject(GetOwner(), GetOwner()->GetClass()->GetName(), CalcSignificanceLambda, PostSignificanceUpdateLambda);\n}", "CodeBleu_score": 69.4007990917362}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tUSignificanceManager* SignificanceManager = GetWorld()->GetSubsystem<USignificanceManager>();\n\tif (!SignificanceManager)\n\t{\n\t\tUE_LOG(LogGame, Error, TEXT(\"SignificanceManager is not available\"));\n\t\treturn;\n\t}\n\n\tauto CalcFunc = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint)\n\t{\n\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t};\n\n\tauto UpdateFunc = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal)\n\t{\n\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t};\n\n\tSignificanceManager->RegisterObject(this, GetOwner()->GetClass()->GetName(), CalcFunc, UpdateFunc);\n}", "CodeBleu_score": 67.5640870377789}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t    if (GetWorld()) {\n        USignificanceManager* SignificanceManager = GetWorld()->GetSubsystem<USignificanceManager>();\n        if (SignificanceManager) {\n            // Define lambda functions for calculating significance and handling post-significance updates\n            auto CalculateSignificanceLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) {\n                return CalcSignificance(ObjectInfo, Viewpoint);\n            };\n\n            auto PostSignificanceUpdateLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n                PostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n            };\n\n            // Register the component with the manager\n            SignificanceManager->RegisterObject(this, GetOwner()->GetClass()->GetName(), CalculateSignificanceLambda, PostSignificanceUpdateLambda);\n        }\n    }\n}", "CodeBleu_score": 67.13384734651837}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t    return false;\n}", "CodeBleu_score": 6.854673974783592}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t    return false;\n}", "CodeBleu_score": 6.854673974783592}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t    return false;\n}", "CodeBleu_score": 6.854673974783592}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t    return;\n}", "CodeBleu_score": 7.060714295027128}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t    return;\n}", "CodeBleu_score": 7.060714295027128}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t    return;\n}", "CodeBleu_score": 7.060714295027128}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t}", "CodeBleu_score": 8.780336534048907}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t}", "CodeBleu_score": 8.780336534048907}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t}", "CodeBleu_score": 8.780336534048907}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t    UE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n    // GrantedTags.AppendTags(TagsToGrant);\n    for (const FGameplayTag& Tag : GrantedTags) {\n        UE_LOG(LogTemp, Log, TEXT(\"Granted tag: %s\"), *Tag.ToString());\n        GetOwningComponent()->GetOwner()->Tags.AddTag(Tag);\n    }\n\n    for (USActionComponent* Comp : GetOwningComponent()->GetOwner()->GetComponentsByClass(USActionComponent::StaticClass())) {\n        Comp->ReplicationData.bIsRunning = true;\n        Comp->ReplicationData.Instigator = Instigator;\n    }\n\n    if (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n        TimeStarted = GetWorld()->TimeSeconds;\n    }\n\n    GetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 63.107157891158195}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t    UE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n    // GrantedTags.AppendTags(TagsToGrant);\n    // OwningComponent->GetOwner()->Tags.AppendTags(GrantedTags);\n\n    // for (FGameplayTag Tag : GrantedTags) {\n    //     UE_LOG(LogTemp, Log, TEXT(\"Granted tag: %s\"), *Tag.ToString());\n    // }\n\n    // RepData.bIsRunning = true;\n    // RepData.Instigator = Instigator;\n\n    // if (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n    //     TimeStarted = GetWorld()->TimeSeconds;\n    // }\n\n    // GetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 3.617081911437413}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t    return;\n}", "CodeBleu_score": 3.0164811217508074}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t    AActor* Instigator = GetOwningActorFromActorInfo();\n    if (!ensure(Instigator)) {\n        return Duration;\n    }\n\n    UWorld* World = Instigator->GetWorld();\n    if (!ensure(World)) {\n        return Duration;\n    }\n\n    const AGameStateBase* GameState = World->GetGameState();\n    if (!ensure(GameState)) {\n        return Duration;\n    }\n\n    return Duration - (World->GetTimeSeconds() - GameState->GetServerWorldTimeSeconds());\n}", "CodeBleu_score": 45.432758828826906}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t    AActor* Instigator = GetOwningComponent()->GetOwner();\n    if (!ensure(Instigator)) {\n        return Duration;\n    }\n\n    USGameplayFunctionLibrary::USGameplayFunctionLibrary GameplayFunctionLibrary;\n    if (USActionComponent* ActionComp = USActionComponent::GetActionComp(Instigator)) {\n        return ActionComp->GetTimeRemaining(this);\n    }\n\n    return Duration;\n}", "CodeBleu_score": 44.2226743777637}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t    AActor* Instigator = GetOwningActorFromActorInfo();\n    if (Instigator && USActionComponent* Comp = USActionComponent::GetActionComp(Instigator)) {\n        return Duration - Comp->GetWorld()->TimeSeconds - TimeStarted;\n    }\n    return Duration;\n}", "CodeBleu_score": 48.819971983366116}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t    return;\n}", "CodeBleu_score": 7.08320512058551}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t    return;\n}", "CodeBleu_score": 7.08320512058551}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t    return;\n}", "CodeBleu_score": 7.08320512058551}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(TargetActor);\n\tif (AttributeComp) {\n\t\treturn AttributeComp->ApplyHealthChange(DamageCauser, -DamageAmount);\n\t}\n\treturn false;\n}", "CodeBleu_score": 97.96709109292398}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t    return false;\n}", "CodeBleu_score": 12.57845491469045}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t    return false;\n}", "CodeBleu_score": 12.57845491469045}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t    bool bNewRecord = false;\n    if (NewTime > this->PersonalRecordTime) {\n        this->PersonalRecordTime = NewTime;\n        bNewRecord = true;\n    }\n    return bNewRecord;\n}", "CodeBleu_score": 36.78043159958466}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t    if (NewTime > this->PersonalRecordTime) {\n        this->PersonalRecordTime = NewTime;\n        this->BroadcastOnPersonalRecordTimeChanged();\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 40.577555478228504}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t    if (NewTime < PersonalRecordTime) {\n        float OldPersonalRecordTime = PersonalRecordTime;\n        PersonalRecordTime = NewTime;\n        OnRecordTimeChanged.Broadcast(this, PersonalRecordTime, OldPersonalRecordTime);\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 83.96007797956668}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (!ensure(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\t// Only activate if healed successfully\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 83.68460409249526}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t    if (!ensure(InstigatorPawn)) {\n        return;\n    }\n\n    USAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n    if (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n        if (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n            if (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n                HideAndCooldownPowerup();\n            }\n        }\n    }\n}", "CodeBleu_score": 96.4323221127461}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t    if (!ensure(InstigatorPawn)) {\n        return;\n    }\n\n    USAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n    if (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n        if (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n            if (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n                HideAndCooldownPowerup();\n            }\n        }\n    }\n}", "CodeBleu_score": 96.4323221127461}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t    // Spawn visual and sound effects.\n    if (ensure(ImpactVFX)) {\n        UGameplayStatics::SpawnEmitterAtLocation(this, ImpactVFX, GetActorLocation(), GetActorRotation());\n    }\n\n    if (ensure(ImpactSFX)) {\n        UGameplayStatics::PlaySoundAtLocation(this, ImpactSFX, GetActorLocation());\n    }\n\n    // Apply radial damage.\n    UGameplayStatics::ApplyRadialDamage(this, 20.0f, GetActorLocation(), 100.0f, DamageTypeClass, {}, this, GetInstigatorController(), true);\n\n    // Shake camera.\n    APawn* Pawn = GetInstigator();\n    if (ensure(Pawn)) {\n        APlayerController* PC = Cast<APlayerController>(Pawn->GetController());\n        if (ensure(PC)) {\n            PC->ClientPlayCameraShake(ImpactShake);\n        }\n    }\n\n    // Release back to pool.\n    SetLifeSpan(2.0f);\n}", "CodeBleu_score": 56.297197500757946}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t\n\t// Spawn visual effects\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactVFX, GetActorLocation(), GetActorRotation());\n\n\t// Play sound effects\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\n\t// Trigger camera shake\n\tAPawn* MyOwner = Cast<APawn>(GetOwner());\n\tif (MyOwner) {\n\t\tAPlayerController* PC = Cast<APlayerController>(MyOwner->GetController());\n\t\tif (PC) {\n\t\t\tPC->ClientStartCameraShake(ImpactShake);\n\t\t}\n\t}\n\n\t// Release projectile back to actor pool\n\tSetLifeSpan(2.0f);\n}", "CodeBleu_score": 46.97403195127576}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\n\t// Spawn a visual effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactVFX, GetActorLocation(), GetActorRotation());\n\n\t// Play a sound at the projectile's location\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tAPawn* MyInstigator = GetInstigator();\n\tif (MyInstigator) {\n\t\tAPlayerController* PC = Cast<APlayerController>(MyInstigator->GetController());\n\t\tif (PC) {\n\t\t\tPC->ClientStartCameraShake(ImpactShake);\n\t\t}\n\t}\n\n\t// Release the projectile back to the actor pool\n\tif (ensure(GetWorld())) {\n\t\tASGameModeBase* GM = Cast<ASGameModeBase>(GetWorld()->GetAuthGameMode());\n\t\tif (GM) {\n\t\t\tGM->FreezeFrame(ImpactFreezeTime);\n\t\t}\n\t}\n\n\tDestroy();\n}", "CodeBleu_score": 52.78272732457121}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    return NULL;\n}", "CodeBleu_score": 4.823838256198898}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t}", "CodeBleu_score": 2.393394606457801}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    return NULL;\n}", "CodeBleu_score": 4.823838256198898}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t}", "CodeBleu_score": 6.287841583637895}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t}", "CodeBleu_score": 6.287841583637895}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t}", "CodeBleu_score": 6.287841583637895}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t}", "CodeBleu_score": 1.0359384184486702}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t}", "CodeBleu_score": 1.0359384184486702}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t}", "CodeBleu_score": 1.0359384184486702}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t    static int font_size = framework_config.font_size;\n    static int theme_index = framework_config.theme_index;\n\n    ImGui::Text(\"Theme\");\n    ImGui::SameLine();\n    ImGui::SetNextItemWidth(120);\n    if (ImGui::Combo(\"##Theme\", &theme_index, themes, IM_ARRAYSIZE(themes))) {\n        framework_config.theme_index = theme_index;\n        framework_config.theme = themes[theme_index];\n        set_theme(framework_config.theme);\n    }\n\n    ImGui::Text(\"Font size\");\n    ImGui::SameLine();\n    ImGui::SetNextItemWidth(120);\n    if (ImGui::SliderInt(\"##Font size\", &font_size, 10, 30)) {\n        framework_config.font_size = font_size;\n        set_font_size(framework_config.font_size);\n    }\n}", "CodeBleu_score": 41.167915569108445}, {"code": "void FrameworkConfig::draw_themes(){\n\t    ImGui::Text(\"Theme:\");\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Dark\", &theme, 0);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Light\", &theme, 1);\n    ImGui::SameLine();\n    ImGui::RadioButton(\"Classic\", &theme, 2);\n    ImGui::Text(\"Font size:\");\n    ImGui::SameLine();\n    ImGui::SliderInt(\"##fontsize\", &font_size, 12, 24);\n    if (font_size != last_font_size) {\n        ImGui::GetIO().FontGlobalScale = font_size / 16.0f;\n        last_font_size = font_size;\n    }\n}", "CodeBleu_score": 39.177181582812096}, {"code": "void FrameworkConfig::draw_themes(){\n\t    ImGui::Begin(\"Themes\");\n\n    if (ImGui::Button(\"Light\")) {\n        ImGui::StyleColorsLight();\n        m_theme = Theme::Light;\n    }\n    if (ImGui::Button(\"Dark\")) {\n        ImGui::StyleColorsDark();\n        m_theme = Theme::Dark;\n    }\n    if (ImGui::Button(\"Classic\")) {\n        ImGui::StyleColorsClassic();\n        m_theme = Theme::Classic;\n    }\n\n    if (ImGui::SliderFloat(\"Font Size\", &m_font_size, 10.0f, 25.0f)) {\n        ImGui::GetIO().FontGlobalScale = m_font_size / 15.0f;\n    }\n\n    ImGui::End();\n}", "CodeBleu_score": 38.4093161574419}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t", "CodeBleu_score": 2.3096479186355663}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Text(\"Menu Key: %s\", menu_key.c_str());\n    ImGui::Text(\"Show Cursor: %s\", show_cursor ? \"true\" : \"false\");\n    ImGui::Text(\"Remember Menu State: %s\", remember_menu_state ? \"true\" : \"false\");\n    ImGui::Text(\"Enable L3 + R3 Toggle: %s\", enable_l3_r3_toggle ? \"true\" : \"false\");\n    ImGui::Text(\"Always Show Cursor: %s\", always_show_cursor ? \"true\" : \"false\");\n    ImGui::Text(\"Log Level: %s\", log_level.c_str());\n\n    if (ImGui::Button(\"Save\")) {\n        save();\n    }\n}", "CodeBleu_score": 49.28954817787946}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Checkbox(\"Menu Key\", &menu_key);\n    ImGui::Checkbox(\"Show Cursor\", &show_cursor);\n    ImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n    ImGui::SliderInt(\"Log Level\", &log_level, 0, 6);\n\n    if (log_level >= 0 && log_level <= 6) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n    }\n}", "CodeBleu_score": 44.37816351420593}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t    // Check if the file path is actually a text buffer\n    if ( bIsFilePathActuallyTextBuffer ) {\n        // If it is, parse the text buffer using FFastXml\n        FFastXml::ParseXmlFile( OSMFilePath, true, true, FeedbackContext, true );\n    } else {\n        // If it's not, parse the file using FFastXml\n        FFastXml::ParseXmlFile( OSMFilePath, true, true, FeedbackContext, true );\n    }\n\n    // If the parsing was successful, calculate the average latitude and longitude\n    if ( FeedbackContext->GetContext().IsEmpty() ) {\n        // Calculate the average latitude\n        double AverageLatitude = 0.0;\n        for ( const auto& Node : NodeData ) {\n            AverageLatitude += Node.Latitude;\n        }\n        AverageLatitude /= NodeData.Num();\n\n        // Calculate the average longitude\n        double AverageLongitude = 0.0;\n        for ( const auto& Node : NodeData ) {\n            AverageLongitude += Node.Longitude;\n        }\n        AverageLongitude /= NodeData.Num();\n\n        // Set the average latitude and longitude\n        AverageData.Latitude = AverageLatitude;\n        AverageData.Longitude = AverageLongitude;\n\n        // Return true to indicate success\n        return true;\n    } else {\n        // If the parsing failed, log an error message with the error details\n        UE_LOG( LogTemp, Error, TEXT( \"Error parsing OpenStreetMap file: %s\" ), *FeedbackContext->GetContext() );\n\n        // Return false to indicate failure\n        return false;\n    }\n}", "CodeBleu_score": 51.10235529797477}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t    // Load the XML file into a string buffer\n    FString OSMFileData;\n    if ( bIsFilePathActuallyTextBuffer ) {\n        OSMFileData = OSMFilePath;\n    } else {\n        if ( !FFileHelper::LoadFileToString( OSMFileData, *OSMFilePath ) ) {\n            UE_LOG( LogTemp, Error, TEXT( \"Failed to load OpenStreetMap XML file: %s\" ), *OSMFilePath );\n            return false;\n        }\n    }\n\n    // Parse the XML data into a document\n    FXmlFile OSMFileXml;\n    if ( !OSMFileXml.LoadFile( OSMFileData, EConstructMethod::ConstructFromBuffer ) ) {\n        UE_LOG( LogTemp, Error, TEXT( \"Failed to parse OpenStreetMap XML file: %s\" ), *OSMFileXml.GetError() );\n        return false;\n    }\n\n    // Process the XML document\n    const FXmlNode* RootNode = OSMFileXml.GetRootNode();\n    if ( RootNode ) {\n        for ( const FXmlNode* Node : RootNode->GetChildrenNodes() ) {\n            if ( Node->GetTag() == TEXT( \"node\" ) ) {\n                // Process node data\n                FString Id = Node->GetAttribute( TEXT( \"id\" ) );\n                FString Lat = Node->GetAttribute( TEXT( \"lat\" ) );\n                FString Lon = Node->GetAttribute( TEXT( \"lon\" ) );\n                // ...\n            } else if ( Node->GetTag() == TEXT( \"way\" ) ) {\n                // Process way data\n                FString Id = Node->GetAttribute( TEXT( \"id\" ) );\n                // ...\n            }\n            // ...\n        }\n    }\n\n    // Calculate the average latitude and longitude from the node data\n    // ...\n\n    return true;\n}", "CodeBleu_score": 48.05478004030876}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    return NULL;\n}", "CodeBleu_score": 6.795335121768092}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t}", "CodeBleu_score": 6.795334699194849}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t}", "CodeBleu_score": 6.795334699194849}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif(SelectedComponents.Num() > 0)\n\t{\n\t\tfor(TWeakObjectPtr<UStreetMapComponent> SelectedComponent : SelectedComponents)\n\t\t{\n\t\t\tSelectedComponent->BuildMesh();\n\t\t}\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 63.11330936003559}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tTSharedPtr<FStreetMapComponentDetails> Instance = StaticCastSharedPtr<FStreetMapComponentDetails>(GetInstance());\n\tif (Instance.IsValid())\n\t{\n\t\tif (Instance->LastDetailBuilderPtr != nullptr)\n\t\t{\n\t\t\tInstance->LastDetailBuilderPtr->BuildMesh();\n\t\t\tInstance->RefreshDetails();\n\t\t}\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 58.557684374058724}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif(LastDetailBuilderPtr != nullptr)\n\t{\n\t\tLastDetailBuilderPtr->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 75.24408322236928}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t    // Register the StreetMap asset type with the asset tools\n    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n    AssetTools.RegisterAssetTypeActions(MakeShareable(new FAssetTypeActions_StreetMap()));\n\n    // Initialize the StreetMap style\n    FStreetMapStyle::Initialize();\n\n    // Register a custom class layout for the StreetMapComponent in the property editor module\n    FPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n    PropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n    // Notify the property editor module that the customization module has changed\n    PropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 74.54216385278254}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t    // Register the StreetMap asset type with the asset tools\n    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n    EAssetTypeCategories::Type StreetMapAssetCategoryBit = AssetTools.RegisterAdvancedAssetCategory(FName(TEXT(\"StreetMap\")), NSLOCTEXT(\"StreetMapEditor\", \"StreetMapAssetCategory\", \"StreetMap\"));\n    TSharedPtr<IAssetTypeActions> StreetMapAssetTypeActions = MakeShareable(new FAssetTypeActions_StreetMap());\n    AssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n    CreatedAssetTypeActions.Add(StreetMapAssetTypeActions);\n\n    // Initialize the StreetMap style\n    FStreetMapStyle::Initialize();\n    FStreetMapStyle::ReloadTextures();\n\n    // Register a custom class layout for the StreetMapComponent in the property editor module\n    FPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n    PropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n    PropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 69.59505069084851}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t    // Check if the StreetMap style is registered\n    if (!IsRegistered()) {\n        // Register the StreetMap style\n        FStreetMapStyle::Initialize();\n        FStreetMapStyle::ReloadTextures();\n\n        // Register the StreetMap asset type with the asset tools\n        IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n        AssetTools.RegisterAssetTypeActions(MakeShareable(new FAssetTypeActions_StreetMap()));\n\n        // Register a custom class layout for the StreetMapComponent in the property editor module\n        FPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n        PropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n        // Notify the property editor module that the customization module has changed\n        PropertyModule.NotifyCustomizationModuleChanged();\n    }\n}", "CodeBleu_score": 71.56359758213426}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    FStreetMapSceneProxy* Proxy = nullptr;\n\n    if (Mesh) {\n        Proxy = new FStreetMapSceneProxy(this);\n        Proxy->Initialize(Mesh->Vertices, Mesh->Indices);\n    }\n\n    return Proxy;\n}", "CodeBleu_score": 54.14451372979245}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    if (this->Mesh) {\n        return new FStreetMapSceneProxy(this);\n    }\n    return nullptr;\n}", "CodeBleu_score": 12.068953969542736}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    if (IsValid(this->Mesh)) {\n        return new FStreetMapSceneProxy(this->Vertices, this->Indices);\n    }\n    return nullptr;\n}", "CodeBleu_score": 13.529402401801475}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t    TestAbility01Handle = ServerHandle;\n\n    TArray<int32> InputIDs;\n    InputIDs.Add(0);\n\n    UFAFAbilitySystemComponent* ASC = GetAbilitySystemComponent();\n    ASC->BindAbilityToInputComponent(TestAbility01Handle, InputComponent, InputIDs);\n}", "CodeBleu_score": 51.471478897268405}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t    TestAbility01Handle = ServerHandle;\n\n    TArray<int32> InputIDs;\n    InputIDs.Add(AbilityInputID::Ability01);\n\n    AbilitySystemComponent->BindAbilityActivationToInputComponent(Spec.Handle, InputComponent, InputIDs);\n}", "CodeBleu_score": 54.3396312856265}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t    TestAbility01Handle = ServerHandle;\n    TArray<int32> AbilityInputIDs;\n    AbilityInputIDs.Add(AbilityInputID::Ability01);\n    BindAbility(AbilityInputIDs, TestAbility01Handle);\n}", "CodeBleu_score": 56.06450447809831}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t    if (Controller != NULL && Value != 0.0f) {\n        // find out which way is forward\n        const FRotator Rotation = Controller->GetControlRotation();\n        const FRotator YawRotation(0, Rotation.Yaw, 0);\n\n        // get forward vector\n        const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n        AddMovementInput(Direction, Value);\n    }\n}", "CodeBleu_score": 84.95616644134128}, {"code": "void AARCharacter::MoveForward(float Value){\n\t    if ((Controller != NULL) && (Value != 0.0f)) {\n        // find out which way is forward\n        const FRotator Rotation = Controller->GetControlRotation();\n        const FRotator YawRotation(0, Rotation.Yaw, 0);\n\n        // get forward vector\n        const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n        AddMovementInput(Direction, Value);\n    }\n}", "CodeBleu_score": 97.16523160485698}, {"code": "void AARCharacter::MoveForward(float Value){\n\t    if (Controller != NULL && Value != 0.0f) {\n        // find out which way is forward\n        const FRotator Rotation = Controller->GetControlRotation();\n        const FRotator YawRotation(0, Rotation.Yaw, 0);\n\n        // get forward vector\n        const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n        AddMovementInput(Direction, Value);\n    }\n}", "CodeBleu_score": 84.95616644134128}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t    return FVector();\n}", "CodeBleu_score": 9.481991580299942}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t    return FVector();\n}", "CodeBleu_score": 9.481991580299942}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t    return FVector();\n}", "CodeBleu_score": 9.481991580299942}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinEnemies) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 62.14266942425435}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority)\n\t{\n\t\tEnemies.Remove(InEnemy);\n\n\t\tif (Enemies.Num() < MinEnemies)\n\t\t{\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 57.40552728754429}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinEnemies) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 62.14266942425435}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t    FString Result = Super::ApproveLogin(Options);\n\n    TArray<FString> Params;\n    Options.ParseIntoArray(Params, TEXT(\"&\"));\n\n    for (FString& Param : Params) {\n        if (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n            FString PlayerId = Param.Mid(9);\n            // TODO: Implement your logic here\n            break;\n        }\n    }\n\n    return Result;\n}", "CodeBleu_score": 58.83535749089812}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t    FString Result = Super::ApproveLogin(Options);\n\n    // Parse the options string into an array of parameters\n    TArray<FString> Params;\n    Options.ParseIntoArray(Params, TEXT(\"&\"));\n\n    // Search for the \"PlayerId\" parameter and extract the player ID value\n    FString PlayerId;\n    for (const FString& Param : Params) {\n        if (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n            PlayerId = Param.RightChop(8);\n            break;\n        }\n    }\n\n    // Return the result from the parent method\n    return Result;\n}", "CodeBleu_score": 62.93756135419716}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t    FString Result = Super::ApproveLogin(Options);\n    TArray<FString> Params;\n    Options.ParseIntoArray(Params, TEXT(\"&\"));\n    for (auto Param : Params) {\n        if (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n            FString PlayerId = Param.RightChop(9);\n            // TODO: Implement your own login approval logic here\n            return FString::Printf(TEXT(\"%s&PlayerId=%s\"), *Result, *PlayerId);\n        }\n    }\n    return Result;\n}", "CodeBleu_score": 58.46748985508993}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t    FString Username = UsernameInput->GetText().ToString();\n    FString DisplayName = DisplayNameInput->GetText().ToString();\n    FString Password = PasswordInput->GetText().ToString();\n\n    if (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n        WarningText->SetVisibility(ESlateVisibility::Visible);\n        return;\n    }\n\n    RegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n    GameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 39.92909652197755}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t    FString username = UsernameInput->GetText().ToString();\n    FString displayName = DisplayNameInput->GetText().ToString();\n    FString password = PasswordInput->GetText().ToString();\n\n    if (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty()) {\n        WarningText->SetVisibility(ESlateVisibility::Visible);\n        return;\n    }\n\n    RegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n    GetGameInstance<UARGameInstance>()->RegisterNewPlayer(username, displayName, password);\n}", "CodeBleu_score": 39.465995602360884}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t    FString Username = UsernameInput->GetText().ToString();\n    FString DisplayName = DisplayNameInput->GetText().ToString();\n    FString Password = PasswordInput->GetText().ToString();\n\n    if (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n        WarningText->SetVisibility(ESlateVisibility::Visible);\n        return;\n    }\n\n    RegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n    GameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 39.92909652197755}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t    if (InMod.TargetActor.IsValid()) {\n        FVector2D ScreenLocation;\n        UGameplayStatics::ProjectWorldToScreen(this->GetWorld(), InMod.TargetActor->GetActorLocation(), ScreenLocation);\n        this->SetFloatingCombatText(InMod.Value, ScreenLocation);\n    }\n}", "CodeBleu_score": 29.577134910672036}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t    return;\n}", "CodeBleu_score": 4.7264940243362235}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t    return;\n}", "CodeBleu_score": 4.7264940243362235}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t}", "CodeBleu_score": 3.4944055265683636}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t}", "CodeBleu_score": 3.4944055265683636}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t}", "CodeBleu_score": 3.4944055265683636}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAActor* Owner = GetOwner();\n\n\tif (!Owner)\n\t\treturn;\n\n\tAARCharacter* Character = Cast<AARCharacter>(Owner);\n\n\tif (!Character)\n\t\treturn;\n\n\tUGAAbilityBase* Ability = Character->GetAbilitySystemComponent()->GetAbilityByHandle(InAbilityTag.GetHandle());\n\n\tSetAbilityToItem(LocalIndex, Cast<UGAAbilityBase>(Ability));\n}", "CodeBleu_score": 57.879777720055344}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tUARWeaponAbilityBase* Ability = InAbilityTag.LoadSynchronous();\n\tif (!Ability)\n\t\treturn;\n\n\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (!Character)\n\t\treturn;\n\n\tUGAAbilityBase* AbilityBase = Character->GetAbilityComponent()->GetAbilityByHandle(Ability->GetAbilityHandle());\n\tif (!AbilityBase)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, AbilityBase);\n}", "CodeBleu_score": 56.253570349982255}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tUARAbilityComponent* AbilityComponent = Cast<UARAbilityComponent>(GetOwner()->GetComponentByClass(UARAbilityComponent::StaticClass()));\n\n\tif (!AbilityComponent)\n\t\treturn;\n\n\tUGAAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Cast<UGAAbilityBase>(Ability));\n}", "CodeBleu_score": 51.328590660502}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = TEXT(\"\");\n\t\tData.SocketName = NAME_None;\n\t\tData.Position = FVector(0, 0, 0);\n\t\tData.Rotation = FRotator(0, 0, 0);\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tCharacter->Unequip();\n\t\t}\n\t}\n}", "CodeBleu_score": 59.583101208653446}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tSuper::OnItemRemoved(LocalIndex);\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = nullptr;\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t}\n}", "CodeBleu_score": 67.21948817685646}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(POwner);\n\tif (!Character)\n\t\treturn;\n\tFARWeaponRPC Data;\n\tData.Weapon = TEXT(\"\");\n\tData.Position = FVector(0, 0, 0);\n\tData.Rotation = FRotator(0, 0, 0);\n\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\tif (LocalIndex == CurrentWeaponIndex)\n\t{\n\t\tUnequip(LocalIndex);\n\t}\n}", "CodeBleu_score": 71.19798644231295}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t    return BP_ShutdownModule_Implementation(); // Call the blueprint event function BP_ShutdownModule_Implementation.\n}", "CodeBleu_score": 10.956995358668955}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t    // This function is empty.\n}", "CodeBleu_score": 4.448538495338253}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t    return BP_ShutdownModule_Implementation();\n}", "CodeBleu_score": 10.956368844672202}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (UAsyncLoadingScreenLibrary::IsLoadingScreenEnabled()) {\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\t\tUAsyncLoadingScreenLibrary::SetLoadingScreenStartup(false);\n\t\tSetupLoadingScreen(Settings->LoadingScreen);\n\t}\n}", "CodeBleu_score": 58.72687225380751}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (IsMoviePlayerEnabled())\n\t{\n\t\tUAsyncLoadingScreenSettings* Settings = GetMutableDefault<UAsyncLoadingScreenSettings>();\n\t\tSettings->bIsEnabled = true;\n\t\tSettings->bStartup = false;\n\t\tSetupLoadingScreen(Settings->StartupScreen);\n\t}\n}", "CodeBleu_score": 47.15982376112292}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (IsLoadingScreenEnabled())\n\t{\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\t\tSettings->bIsFirstStartup = false;\n\t\tSetupLoadingScreen(Settings->StartupLoadingScreen);\n\t}\n}", "CodeBleu_score": 55.691231951053396}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tRemoveAllBackgroundImages();\n\n\tconst FLoadingScreenSettings* Settings = GetDefault<UAsyncLoadingScreenSettings>();\n\n\tif (Settings->bUseStartupBackground)\n\t{\n\t\tfor (auto StartupBackground : Settings->StartupBackgrounds)\n\t\t{\n\t\t\tif (UObject* StartupBackgroundObject = StartupBackground.TryLoad())\n\t\t\t{\n\t\t\t\tStartupBackgroundImages.Add(StartupBackgroundObject);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (Settings->bUseDefaultBackground)\n\t{\n\t\tfor (auto DefaultBackground : Settings->DefaultBackgrounds)\n\t\t{\n\t\t\tif (UObject* DefaultBackgroundObject = DefaultBackground.TryLoad())\n\t\t\t{\n\t\t\t\tDefaultBackgroundImages.Add(DefaultBackgroundObject);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 44.029047531526054}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tRemoveAllBackgroundImages();\n\n\tFAsyncLoadingScreenSettings LoadingScreenSettings;\n\tLoadingScreenSettings.LoadSettings();\n\n\tLoadBackgroundImages(LoadingScreenSettings.StartupLoadingScreen, StartupBackgroundImages);\n\tLoadBackgroundImages(LoadingScreenSettings.DefaultLoadingScreen, DefaultBackgroundImages);\n}", "CodeBleu_score": 26.985654768484235}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tRemoveAllBackgroundImages();\n\n\tFLoadingScreenSettings* Settings = GetDefault<UAsyncLoadingScreenSettings>();\n\n\tfor (const auto& BackgroundImage : Settings->StartupBackgroundImages) {\n\t\tFSoftObjectPath Path = BackgroundImage.Value;\n\t\tTSharedPtr<FSlateDynamicImageBrush> ImageBrush = MakeShareable(new FSlateDynamicImageBrush(*Path.ToString(), Path));\n\t\tStartupBackgroundImages.Add(BackgroundImage.Key, ImageBrush);\n\t}\n\n\tfor (const auto& BackgroundImage : Settings->DefaultBackgroundImages) {\n\t\tFSoftObjectPath Path = BackgroundImage.Value;\n\t\tTSharedPtr<FSlateDynamicImageBrush> ImageBrush = MakeShareable(new FSlateDynamicImageBrush(*Path.ToString(), Path));\n\t\tDefaultBackgroundImages.Add(BackgroundImage.Key, ImageBrush);\n\t}\n}", "CodeBleu_score": 50.01159150720513}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tstatic const float MIN_ALPHA = 0.0f;\n\tstatic const float MAX_ALPHA = 1.0f;\n\tstatic const float ANIMATION_SPEED = 1.0f;\n\n\tstatic float AnimationDirection = 1.0f;\n\tstatic float CurrentAlpha = MIN_ALPHA;\n\n\tCurrentAlpha += ANIMATION_SPEED * InDeltaTime * AnimationDirection;\n\n\tif (CurrentAlpha > MAX_ALPHA) {\n\t\tCurrentAlpha = MAX_ALPHA;\n\t\tAnimationDirection *= -1.0f;\n\t} else if (CurrentAlpha < MIN_ALPHA) {\n\t\tCurrentAlpha = MIN_ALPHA;\n\t\tAnimationDirection *= -1.0f;\n\t}\n\n\tLoadingCompleteText->SetOpacity(CurrentAlpha);\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 37.54180280192089}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t    if (bIsAnimating) {\n        if (TextAlpha >= MaxAlpha) {\n            bIsAnimating = false;\n            TextAlpha = MaxAlpha;\n        }\n        else if (TextAlpha <= MinAlpha) {\n            bIsAnimating = false;\n            TextAlpha = MinAlpha;\n        }\n        else {\n            TextAlpha += (InDeltaTime * AnimationSpeed) * (bIsAnimatingForward ? 1 : -1);\n        }\n    }\n    return EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 39.99246747255767}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t    float Alpha = Text->GetAlpha();\n    float NewAlpha = Alpha + (InDeltaTime * AnimationSpeed);\n    if (NewAlpha > MaxAlpha || NewAlpha < MinAlpha) {\n        AnimationSpeed *= -1;\n    }\n    Text->SetAlpha(NewAlpha);\n    return EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 30.1124168797953}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t    std::unique_lock<std::mutex> lock(mutex);\n    if (index != -1) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 21.417461859406714}, {"code": "bool FRaceAwaiter::await_ready(){\n\t    std::unique_lock<std::mutex> lock(data->mutex);\n    if (data->index != -1) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 44.5727459729779}, {"code": "bool FRaceAwaiter::await_ready(){\n\t    std::lock_guard<std::mutex> lock(data->mutex);\n    return data->index != -1;\n}", "CodeBleu_score": 30.16695869649746}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t    if (bCleanup) {\n        if (State != nullptr) {\n            delete State;\n            State = nullptr;\n        }\n    }\n    return State != nullptr;\n}", "CodeBleu_score": 15.300846597766956}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t    if (bCleanup) {\n        if (State) {\n            FPathFollowingManager* PathFollowingManager = Cast<FPathFollowingManager>(State);\n            if (PathFollowingManager) {\n                PathFollowingManager->AbortFindPathRequest();\n            }\n            delete State;\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 25.224003232508952}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t    if (State == nullptr) {\n        return true;\n    }\n\n    if (bCleanup) {\n        // Cleanup the state\n        // ...\n    }\n\n    return false;\n}", "CodeBleu_score": 12.122889258681319}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (get_viewport()->get_audio_listener_2d() != nullptr) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 53.70878527767997}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (get_viewport()->get_audio_listener_2d() != nullptr) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_part_of_edited_scene()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 53.70878527767997}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && is_current()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 52.3447475781112}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (!active) {\n\t\treturn;\n\t}\n\n\tif (mutex.try_lock()) {\n\t\tint todo = p_frames;\n\t\tint offset = 0;\n\n\t\twhile (todo) {\n\t\t\tint to_mix = MIN(todo, mix_buffer_len);\n\t\t\taudio_server_process(to_mix, mix_buffer, false);\n\t\t\tfor (int i = 0; i < to_mix * 2; i++) {\n\t\t\t\tp_buffer[i + offset] = mix_buffer[i];\n\t\t\t}\n\t\t\toffset += to_mix * 2;\n\t\t\ttodo -= to_mix;\n\t\t}\n\n\t\tmutex.unlock();\n\t}\n}", "CodeBleu_score": 50.653187508637096}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (!active) {\n\t\treturn;\n\t}\n\n\tif (use_threads) {\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(todo, mix_buffer_size);\n\t\tlock();\n\t\taudio_server_process(to_mix, p_buffer, true);\n\t\tunlock();\n\n\t\tp_buffer += to_mix * channels;\n\t\ttodo -= to_mix;\n\t}\n}", "CodeBleu_score": 35.45452724053349}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (!active) {\n\t\treturn;\n\t}\n\n\tif (!use_threads) {\n\t\taudio_server_process(p_frames, p_buffer);\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(todo, mix_buffer_size);\n\n\t\tlock();\n\t\taudio_server_process(to_mix, mix_buffer);\n\t\tunlock();\n\n\t\tfor (int i = 0; i < p_buffer_channels; i++) {\n\t\t\tfor (int j = 0; j < to_mix; j++) {\n\t\t\t\tp_buffer[(j * p_buffer_channels) + i] = mix_buffer[i * to_mix + j];\n\t\t\t}\n\t\t}\n\n\t\ttodo -= to_mix;\n\t}\n}", "CodeBleu_score": 54.14026333075226}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t", "CodeBleu_score": 3.550376443750522}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n\tswitch (get_space_override_mode()) {\n\n\t\tcase SPACE_OVERRIDE_DISABLED:\n\t\t\tbreak;\n\t\tcase SPACE_OVERRIDE_COMBINE:\n\t\tcase SPACE_OVERRIDE_COMBINE_REPLACE:\n\t\tcase SPACE_OVERRIDE_REPLACE:\n\t\tcase SPACE_OVERRIDE_REPLACE_COMBINE: {\n\n\t\t\treal_t gravity;\n\t\t\tbool gravity_point = false;\n\t\t\tVector2 gravity_vec;\n\t\t\treal_t attenuation;\n\n\t\t\tswitch (get_gravity_distance_scale()) {\n\n\t\t\t\tcase GRAVITY_DISTANCE_SCALE_LINEAR: {\n\n\t\t\t\t\tgravity = get_gravity();\n\t\t\t\t} break;\n\t\t\t\tcase GRAVITY_DISTANCE_SCALE_INVERSE_LINEAR: {\n\n\t\t\t\t\tgravity = 1.0 / get_gravity();\n\t\t\t\t} break;\n\t\t\t\tcase GRAVITY_DISTANCE_SCALE_INVERSE_SQUARED: {\n\n\t\t\t\t\tgravity = 1.0 / (get_gravity() * get_gravity());\n\t\t\t\t} break;\n\t\t\t}\n\n\t\t\tgravity_vec = get_gravity_vector();\n\t\t\tgravity_point = get_gravity_is_point();\n\t\t\tattenuation = get_gravity_distance_scale();\n\n\t\t\tVector2 diff = p_position - get_transform().get_origin();\n\t\t\tif (gravity_point)\n\t\t\t\tgravity = gravity / (diff.length_squared() * attenuation + 1);\n\t\t\telse\n\t\t\t\tgravity *= attenuation;\n\n\t\t\tr_gravity += gravity_vec * gravity;\n\n\t\t} break;\n\t}\n}", "CodeBleu_score": 42.97313218238985}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\n\tswitch (get_space_override_mode()) {\n\t\tcase SPACE_OVERRIDE_DISABLED:\n\t\t\tbreak;\n\t\tcase SPACE_OVERRIDE_COMBINE:\n\t\t\tr_gravity += get_gravity_vector() * get_gravity_distance_scale();\n\t\tcase SPACE_OVERRIDE_COMBINE_REPLACE:\n\t\tcase SPACE_OVERRIDE_REPLACE:\n\t\t\tr_gravity = get_gravity_vector();\n\t\t\tbreak;\n\t\tcase SPACE_OVERRIDE_REPLACE_COMBINE:\n\t\t\tr_gravity = get_gravity_vector() * get_gravity_distance_scale();\n\t\t\tbreak;\n\t}\n\n\tif (get_gravity_is_point()) {\n\t\tr_gravity = (get_gravity_vector() - p_position).normalized() * get_gravity();\n\t}\n}", "CodeBleu_score": 37.83045699116816}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\n  int i;\n  int j;\n  int c = get_constraint_count();\n  const Constraint *ptr = get_constraint_ptr();\n  for (i = 0; i < c; i++) {\n    const Constraint &con = ptr[i];\n    if (!con.is_valid())\n      continue;\n\n    BodyState *bs = get_body_state(con.body_B);\n    if (bs->mode == PhysicsServer2D::BODY_MODE_RIGID && !bs->is_active) {\n      bs->is_active = true;\n      bs->active_list_index = bs->index;\n      bs->index = active_list.request(bs);\n      active_list.make_current(bs->index);\n    }\n    bs = get_body_state(con.body_A);\n    if (bs->mode == PhysicsServer2D::BODY_MODE_RIGID && !bs->is_active) {\n      bs->is_active = true;\n      bs->active_list_index = bs->index;\n      bs->index = active_list.request(bs);\n      active_list.make_current(bs->index);\n    }\n  }\n}", "CodeBleu_score": 44.695817152110386}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\n    for (int i = 0; i < get_constraint_count(); i++) {\n\n        GodotConstraint2D *c = get_constraint(i);\n        GodotBody2D *b = c->get_body_b();\n        if (b == this) {\n            continue;\n        }\n\n        if (b->get_mode() == PhysicsServer2D::BODY_MODE_RIGID && !b->is_active()) {\n            b->set_active(true);\n        }\n    }\n}", "CodeBleu_score": 42.85866839951652}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\n\tERR_FAIL_COND(!get_space());\n\n\tfor (int i = 0; i < get_constraint_count(); i++) {\n\t\tGodotConstraint2D *c = Object::cast_to<GodotConstraint2D>(get_constraint(i));\n\t\tif (!c) continue;\n\n\t\tGodotBody2D *b = Object::cast_to<GodotBody2D>(c->get_body_b());\n\t\tif (!b) continue;\n\n\t\tif (b->get_mode() == PhysicsServer2D::BODY_MODE_RIGID && !b->is_active()) {\n\t\t\tb->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.3737266453995}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t", "CodeBleu_score": 3.230831668935217}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t", "CodeBleu_score": 3.230831668935217}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t", "CodeBleu_score": 3.230831668935217}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\treal_t mass = get_mass();\n\treal_t inertia = get_inertia();\n\n\tVector3 center_of_mass = get_center_of_mass();\n\tBasis principal_inertia_axes = get_principal_inertia_axes();\n\n\tBasis inertia_tensor = get_inertia_tensor();\n\n\tif (mass > 0) {\n\t\tcenter_of_mass /= mass;\n\t} else {\n\t\tcenter_of_mass = Vector3();\n\t}\n\n\tprincipal_inertia_axes.rotate_local(get_transform().basis.get_rotation());\n\tinertia_tensor = principal_inertia_axes.transposed() * inertia_tensor * principal_inertia_axes;\n\n\tset_center_of_mass(center_of_mass);\n\tset_principal_inertia_axes(principal_inertia_axes);\n\tset_inertia_tensor(inertia_tensor);\n}", "CodeBleu_score": 39.768765788947015}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tAudioServer::get_singleton()->driver_process(p_frames, p_buffer);\n}", "CodeBleu_score": 65.89197479269488}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\tAudioServer::get_singleton()->process(p_frames, p_buffer);\n}", "CodeBleu_score": 64.60577297064339}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tAudioServer::get_singleton()->process(p_frames, p_buffer);\n}", "CodeBleu_score": 64.60577297064339}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(!p_feed.is_valid());\n\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tprint_verbose(\"CameraServer: Removing feed \", p_feed->get_name(), \" (ID \", itos(p_feed->get_id()), \")\");\n\t\t\tfeeds.remove(i);\n\t\t\temit_signal(SNAME(\"feed_removed\"), p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n\n\tERR_FAIL_MSG(\"CameraServer: Attempted to remove feed that does not exist: \" + p_feed->get_name());\n}", "CodeBleu_score": 57.66104762349256}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(!p_feed.is_valid());\n\tERR_FAIL_COND(!p_feed->is_active());\n\n\tprint_verbose(\"CameraServer: Removing feed with ID: \", p_feed->get_id());\n\n\t// Remove feed from the list of feeds.\n\tactive_feeds.remove(p_feed);\n\n\t// Emit signal to indicate feed has been removed.\n\temit_signal(\"feed_removed\", p_feed->get_id());\n\n\t// Unref the feed.\n\tp_feed->unref();\n}", "CodeBleu_score": 30.46367940881012}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tRef<CameraFeed> feed = feeds[i];\n\t\t\tfeeds.remove(i);\n\t\t\tprint_verbose(\"CameraServer: Removed feed \", feed->get_name(), \" (ID: \", String::num_int64(feed->get_id()), \")\");\n\t\t\temit_signal(\"remove_feed\", feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 54.90343224641442}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* ret = new EaseRateAction();\n    if (ret && ret->initWithAction(action, rate)) {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 52.11305525899165}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* ret = new EaseRateAction();\n    if (ret && ret->initWithAction(action, rate)) {\n        ret->autorelease();\n        return ret;\n    }\n    delete ret;\n    return nullptr;\n}", "CodeBleu_score": 49.07631641236004}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* ret = new (std::nothrow) EaseRateAction();\n\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t}\n\telse {\n\t\tAX_SAFE_DELETE(ret);\n\t}\n\n\treturn ret;\n}", "CodeBleu_score": 51.25228904304072}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->name == childName) {\n        return node;\n    }\n    for (Node* child : node->children) {\n        Node* foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode != nullptr) {\n            return foundNode;\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 52.63510048182586}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->name == childName) {\n        return node;\n    }\n\n    for (auto &child: node->children) {\n        Node* foundNode = findChildByNameRecursively(child.get(), childName);\n        if (foundNode != nullptr) {\n            return foundNode;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 51.27445910878055}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->name == childName) {\n        return node;\n    }\n\n    for (Node* child : node->children) {\n        Node* found = findChildByNameRecursively(child, childName);\n        if (found != nullptr) {\n            return found;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 51.433787564871416}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\tif (target) {\n\t\tauto it = fadeIn.find(target);\n\t\tif (it != fadeIn.end()) {\n\t\t\tauto& v = it->second;\n\t\t\tauto vit = std::find(v.begin(), v.end(), this);\n\t\t\tif (vit != v.end()) {\n\t\t\t\tv.erase(vit);\n\t\t\t}\n\t\t}\n\t\tit = fadeOut.find(target);\n\t\tif (it != fadeOut.end()) {\n\t\t\tauto& v = it->second;\n\t\t\tauto vit = std::find(v.begin(), v.end(), this);\n\t\t\tif (vit != v.end()) {\n\t\t\t\tv.erase(vit);\n\t\t\t}\n\t\t}\n\t\tit = running.find(target);\n\t\tif (it != running.end()) {\n\t\t\tauto& v = it->second;\n\t\t\tauto vit = std::find(v.begin(), v.end(), this);\n\t\t\tif (vit != v.end()) {\n\t\t\t\tv.erase(vit);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.80506651748799}, {"code": "void Animate3D::removeFromMap(){\n\t    if (target) {\n        if (target->fadeInAnimations.count(this)) {\n            target->fadeInAnimations.erase(this);\n        }\n        if (target->fadeOutAnimations.count(this)) {\n            target->fadeOutAnimations.erase(this);\n        }\n        if (target->runningAnimations.count(this)) {\n            target->runningAnimations.erase(this);\n        }\n    }\n}", "CodeBleu_score": 22.222639321626595}, {"code": "void Animate3D::removeFromMap(){\n\t    if (target) {\n        if (fadeInMap.find(target) != fadeInMap.end()) {\n            if (fadeInMap[target] == this) {\n                fadeInMap.erase(target);\n            }\n        }\n        if (fadeOutMap.find(target) != fadeOutMap.end()) {\n            if (fadeOutMap[target] == this) {\n                fadeOutMap.erase(target);\n            }\n        }\n        if (runningMap.find(target) != runningMap.end()) {\n            if (runningMap[target] == this) {\n                runningMap.erase(target);\n            }\n        }\n    }\n}", "CodeBleu_score": 42.681643729396534}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    // Generate a unique key based on the file name and animation name\n    std::string key = fileName + \":\" + animationName;\n\n    // Check the cache for an existing animation\n    auto it = _animationCache.find(key);\n    if (it != _animationCache.end()) {\n        // If found, return the cached animation\n        return it->second;\n    }\n\n    // If not found, create a new Animation3D object\n    Animation3D* animation = new Animation3D();\n\n    // Initialize the animation with the given file and animation name\n    if (!animation->initWithFile(fileName, animationName)) {\n        // If initialization fails, delete the new animation and return nullptr\n        delete animation;\n        return nullptr;\n    }\n\n    // Add the new animation to the cache\n    _animationCache[key] = animation;\n\n    // Return the new animation\n    return animation;\n}", "CodeBleu_score": 52.607378392969416}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    Animation3D* animation = nullptr;\n\n    // Generate a unique key for the animation\n    std::string key = fileName + \":\" + animationName;\n\n    // Check the cache for an existing animation\n    auto it = _animationCache.find(key);\n    if (it != _animationCache.end()) {\n        // Found an existing animation, return it\n        animation = it->second;\n    } else {\n        // Not found, create a new animation\n        animation = new (std::nothrow) Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            // Successfully initialized, add it to the cache\n            _animationCache.emplace(key, animation);\n        } else {\n            // Failed to initialize, delete the animation\n            delete animation;\n            animation = nullptr;\n        }\n    }\n\n    return animation;\n}", "CodeBleu_score": 59.35308300520209}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    // Generate a unique key based on the file name and animation name\n    std::string key = fileName + \":\" + animationName;\n\n    // Check the cache for an existing animation\n    auto it = _cache.find(key);\n    if (it != _cache.end()) {\n        // Animation found in cache, return it\n        return it->second;\n    }\n\n    // Animation not found in cache, create a new one\n    Animation3D* animation = new (std::nothrow) Animation3D();\n    if (animation && animation->initWithFile(fileName, animationName)) {\n        // Initialization successful, add it to the cache\n        _cache.insert(std::make_pair(key, animation));\n        animation->autorelease();\n        return animation;\n    }\n\n    // Initialization failed, delete the new animation and return nullptr\n    delete animation;\n    return nullptr;\n}", "CodeBleu_score": 61.90765112155165}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto it = _animationCache.begin(); it != _animationCache.end();) {\n        if (it->second.use_count() == 1) {\n            _animationCache.erase(it++);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 54.27523988585208}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto it = _animationCache.begin(); it != _animationCache.end();) {\n        auto animation = it->second;\n        if (animation->getReferenceCount() == 1) {\n            // If the reference count is 1, release the animation and remove it from the cache.\n            animation->release();\n            it = _animationCache.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 58.486381960286295}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto it = _animations.begin(); it != _animations.end();) {\n        auto animation = it->second;\n        if (animation->getReferenceCount() == 1) {\n            it = _animations.erase(it);\n            animation->release();\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 60.02714863992216}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billBoard = new (std::nothrow) BillBoard();\n    if (billBoard && billBoard->initWithTexture(texture, mode)) {\n        billBoard->autorelease();\n        return billBoard;\n    }\n    CC_SAFE_DELETE(billBoard);\n    return nullptr;\n}", "CodeBleu_score": 67.53270554544405}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    auto billBoard = new (std::nothrow) BillBoard();\n    if (billBoard && billBoard->initWithTexture(texture, mode)) {\n        billBoard->autorelease();\n        return billBoard;\n    }\n    CC_SAFE_DELETE(billBoard);\n    return nullptr;\n}", "CodeBleu_score": 65.06792695461161}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billBoard = new (std::nothrow) BillBoard();\n    if (billBoard && billBoard->initWithTexture(texture, mode)) {\n        billBoard->autorelease();\n        return billBoard;\n    }\n    CC_SAFE_DELETE(billBoard);\n    return nullptr;\n}", "CodeBleu_score": 67.53270554544405}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t    // Clear previous data\n    clear();\n    \n    // Check if path is empty or already loaded\n    if (path.empty() || path == _path)\n        return true;\n    \n    // Determine file extension\n    size_t index = path.find_last_of('.');\n    std::string extension = path.substr(index + 1);\n    transform(extension.begin(), extension.end(), extension.begin(), ::tolower);\n    \n    // Load file based on extension\n    if (extension == \"c3t\") {\n        if (!loadJson(path))\n            return false;\n    }\n    else if (extension == \"c3b\") {\n        if (!loadBinary(path))\n            return false;\n    }\n    else {\n        clear();\n        CCLOG(\"warning: Invalid file format for bundle: %s\", path.c_str());\n        return false;\n    }\n    \n    // Set internal path\n    _path = path;\n    getModelRelativePath(path);\n    \n    return true;\n}", "CodeBleu_score": 50.61099728001353}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty())\n        return false;\n    \n    if (_path == path)\n        return true;\n    \n    clear();\n    \n    size_t index = path.find_last_of('.');\n    std::string extension = path.substr(index + 1);\n    \n    if (extension == \"c3t\")\n    {\n        if (!loadJson(path))\n            return false;\n    }\n    else if (extension == \"c3b\")\n    {\n        if (!loadBinary(path))\n            return false;\n    }\n    else\n    {\n        CCLOG(\"warning: Invalid format for bundle: %s\", path.c_str());\n        return false;\n    }\n    \n    _path = path;\n    \n    return true;\n}", "CodeBleu_score": 57.28626167821504}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || _path == path)\n        return true;\n\n    clear();\n\n    _path = path;\n\n    // get file extension\n    ssize_t index = path.find_last_of('.');\n    std::string ext = path.substr(index + 1);\n\n    if (ext == \"c3t\") {\n        if (!loadJson(path))\n            return false;\n    }\n    else if (ext == \"c3b\") {\n        if (!loadBinary(path))\n            return false;\n    }\n    else {\n        clear();\n        CCLOG(\"warning: Invalid file extension: %s\", path.c_str());\n        return false;\n    }\n\n    getModelRelativePath(path);\n\n    return true;\n}", "CodeBleu_score": 56.03882765708256}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    if (!skindata)\n        return false;\n\n    skindata->reset();\n\n    if (_binaryReader.isOpen())\n    {\n        return loadSkinDataBinary(skindata);\n    }\n    else\n    {\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 81.66511767261514}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    // reset skin data\n    skindata->reset();\n\n    // load skin data\n    if (_isBinary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 66.41763098438419}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    skindata->reset();\n\n    if (_isBinary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 66.26220195556263}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    if (size == 0 || nmemb == 0 || ptr == NULL) {\n        return 0;\n    }\n\n    size_t n = fread(ptr, size, nmemb, (FILE*)datasource);\n    return n;\n}", "CodeBleu_score": 23.97639519485007}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t  if (datasource == NULL) return 0;\n  AudioFileSource* source = static_cast<AudioFileSource*>(datasource);\n  if (source->buffer == NULL) return 0;\n  if (source->len == 0) return 0;\n\n  size_t bytesToRead;\n  if (source->len > size * nmemb) {\n    bytesToRead = size * nmemb;\n  } else {\n    bytesToRead = source->len;\n  }\n\n  memcpy(ptr, (source->buffer + source->pos), bytesToRead);\n  source->pos += bytesToRead;\n  source->len -= bytesToRead;\n  return bytesToRead;\n}", "CodeBleu_score": 43.93530587328648}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    if (((AudioFileSource*)datasource)->eof) return 0;\n    size_t bytesToRead = std::min(size * nmemb, ((AudioFileSource*)datasource)->dataSize - ((AudioFileSource*)datasource)->filePosition);\n    memcpy(ptr, ((AudioFileSource*)datasource)->data + ((AudioFileSource*)datasource)->filePosition, bytesToRead);\n    ((AudioFileSource*)datasource)->filePosition += bytesToRead;\n    if (bytesToRead < size * nmemb) ((AudioFileSource*)datasource)->eof = true;\n    return bytesToRead;\n}", "CodeBleu_score": 33.726382244548226}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.20981144348684}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _result.pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _result.pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 47.47528589690022}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _result.pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _result.pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 47.47528589690022}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> lock(downloader_mutex);\n    auto it = downloader_map.find(id);\n    if (it != downloader_map.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 64.60899338789763}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> lock(g_downloaderAndroidMutex);\n    auto it = g_downloaderAndroidMap.find(id);\n    if (it != g_downloaderAndroidMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 65.20950371967398}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> lock(s_downloaderMapMutex);\n    auto it = s_downloaderMap.find(id);\n    if (it != s_downloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 65.71254113655881}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t    local loop = false\n    if isLoop then\n        loop = true\n    end\n    SimpleAudioEngine:sharedEngine():playBackgroundMusic(filename, loop)", "CodeBleu_score": 47.86623304424458}, {"code": "function M.playMusic(filename, isLoop)\n\t    local loop = isLoop or false\n    SimpleAudioEngine:getInstance():playMusic(filename, loop)", "CodeBleu_score": 40.0110617637232}, {"code": "function M.playMusic(filename, isLoop)\n\t    local loop = false\n    if isLoop then loop = true end\n    audio.playMusic(filename, loop)", "CodeBleu_score": 45.00666869159004}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\tlocal result = true\n\t\n\tif self.enabled == false then\n\t\tresult = false\n\telseif self.conditions == nil then\n\t\tresult = false\n\telse\n\t\tfor i,v in ipairs(self.conditions) do\n\t\t\tresult = result and v:detect()\n\t\tend\n\tend\n\t\n\treturn result", "CodeBleu_score": 32.95837286221096}, {"code": "function ccs.TriggerObj:detect()\n\tend\n\n\n\n\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\t\tlocal enabled = self:isEnabled()\n\tif not enabled then\n\t\treturn true\n\tend\n\tlocal conditions = self:getConditions()\n\tif not conditions then\n\t\treturn true\n\tend\n\tlocal result = true\n\tfor i, condition in ipairs(conditions) do\n\t\tlocal detect = condition:detect()\n\t\tresult = result and detect\n\tend\n\treturn result", "CodeBleu_score": 38.098741843320944}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 10.422059020442871}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tlocal conds = self.conditions\n\tlocal acts = self.actions\n\tfor i,v in ipairs(conds) do\n\t\tif v.removeAll then v:removeAll() end\n\tend\n\tfor i,v in ipairs(acts) do\n\t\tif v.removeAll then v:removeAll() end\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 38.380825448177205}, {"code": "function ccs.TriggerObj:removeAll()\n\t\t--[[\n\tThis function, removeAll, clears all conditions and actions of a TriggerObj.", "CodeBleu_score": 8.529140003522285}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t    local effect = self:createEffect(\"hurtAnimation\")\n    effect.billboard = true\n    effect.scale = 1.5\n    effect.position = Vector3(0, 0.5, 0)\n    effect:runAnimation(\"hurt\")\n    effect:setRemovalTime(effect:getAnimationLength(\"hurt\"))\n    target:addChild(effect)\n    effect:setCameraMask(2)", "CodeBleu_score": 30.49997249345992}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local effect = self.hurtAnimation:clone()\n    effect.billboard = true\n    effect.scale = {x = 1, y = 1, z = 1}\n    effect.position = {x = 0, y = 0, z = 0}\n    effect.animation = \"hurt\"\n    effect.onAnimationEnd = function()\n        effect:remove()\n    end\n    target:addChild(effect)\n    effect:setCameraMask(1)", "CodeBleu_score": 40.24914196609748}, {"code": "function BasicCollider:hurtEffect(target)\n\t\t-- Create a new billboard for the effect\n\tlocal effect = Billboard.new()\n\t\n\t-- Set the effect's scale to 0.5\n\teffect.scale = Vector3.new(0.5, 0.5, 0.5)\n\t\n\t-- Set the effect's position to the target's position\n\teffect.position = target.position\n\t\n\t-- Set the effect's animation to the cached \"hurtAnimation\"\n\teffect.animation = self.hurtAnimation\n\t\n\t-- Set the effect to run the animation\n\teffect:runAnimation()\n\t\n\t-- Set the effect to remove itself after the animation is finished\n\teffect:removeAfterAnimation()\n\t\n\t-- Add the effect as a child of the target with a specific camera mask\n\ttarget:addChild(effect, \"hurtEffects\")", "CodeBleu_score": 29.384104207147267}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t    self.particleSystem1:stop()\n    self.particleSystem2:stop()\n    local seq = cc.Sequence:create(\n        cc.DelayTime:create(0.5),\n        cc.CallFunc:create(function()\n            self:removeFromParent()\n        end)\n    )\n    self:runAction(seq)\n    local particleSystem = cc.ParticleSystemQuad:create(\"particles/mage_normal_attack.plist\")\n    self:addChild(particleSystem)\n    particleSystem:setPosition(cc.p(0, 0))\n    particleSystem:setAnchorPoint(cc.p(0.5, 0.5))\n    particleSystem:setAutoRemoveOnFinish(true)\n    self.sprite:setTexture(\"mage_normal_attack.png\")\n    local fadeOut = cc.FadeOut:create(0.5)\n    self.sprite:runAction(fadeOut)\n    self.sprite:setScale(1.5)", "CodeBleu_score": 51.95108303702589}, {"code": "function MageNormalAttack:onTimeOut()\n\t    self.m_particle:Stop();\n    self.m_particle2:Stop();\n    self.m_particle3:Stop();\n    self:removeFromParentAndCleanup(true);\n    self.m_particle = nil;\n    self.m_particle2 = nil;\n    self.m_particle3 = nil;\n    self.m_particle4 = nil;\n    self.m_particle5 = nil;\n    self.m_particle6 = nil;\n    self.m_particle7 = nil;\n    self.m_particle8 = nil;\n    self.m_particle9 = nil;\n    self.m_particle10 = nil;\n    self.m_particle11 = nil;\n    self.m_particle12 = nil;\n    self.m_particle13 = nil;\n    self.m_particle14 = nil;\n    self.m_particle15 = nil;\n    self.m_particle16 = nil;\n    self.m_particle17 = nil;\n    self.m_particle18 = nil;\n    self.m_particle19 = nil;\n    self.m_particle20 = nil;\n    self.m_particle21 = nil;\n    self.m_particle22 = nil;\n    self.m_particle23 = nil;\n    self.m_particle24 = nil;\n    self.m_particle25 = nil;\n    self.m_particle26 = nil;\n    self.m_particle27 = nil;\n    self.m_particle28 = nil;\n    self.m_particle29 = nil;\n    self.m_particle30 = nil;\n    self.m_particle31 = nil;\n    self.m_particle32 = nil;\n    self.m_particle33 = nil;\n    self.m_particle34 = nil;\n    self.m_particle35 = nil;\n    self.m_particle36 = nil;\n    self.m_particle37 = nil;\n    self.m_particle38 = nil;\n    self.m_particle39 = nil;\n    self.m_particle40 =", "CodeBleu_score": 25.049333023696864}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.m_pParticleSystem1:stop()\n\tself.m_pParticleSystem2:stop()\n\tlocal seq = cc.Sequence:create(\n\t\tcc.DelayTime:create(0.1),\n\t\tcc.CallFunc:create(function()\n\t\t\tself:removeFromParent()\n\t\tend)\n\t)\n\tself:runAction(seq)\n\tlocal pParticleSystem = cc.ParticleSystemQuad:create(\"particle/mage_normal_attack_effect.plist\")\n\tself:addChild(pParticleSystem)\n\tpParticleSystem:setPosition(0, 0)\n\tpParticleSystem:setAutoRemoveOnFinish(true)\n\tself.m_pSprite:setTexture(\"mage/mage_normal_attack.png\")\n\tself.m_pSprite:runAction(cc.FadeOut:create(0.1))\n\tself.m_pSprite:setScale(0.6)", "CodeBleu_score": 45.877343818681545}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t    local heroName = hero:getName()\n    local heroImage = self.heroes[heroName].image\n    local heroFrame = self.heroes[heroName].frame\n    local heroAngerFullSignal = self.heroes[heroName].angerFullSignal\n    local heroAngerClone = self.heroes[heroName].angerClone\n\n    -- Apply a grey shader to the hero's image and frame\n    heroImage:setShader(self.greyShader)\n    heroFrame:setShader(self.greyShader)\n\n    -- Hide the hero's anger full signal and anger clone UI elements\n    heroAngerFullSignal:setVisible(false)\n    heroAngerClone:setVisible(false)", "CodeBleu_score": 30.182980106755736}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\n    --[[\n    This code block checks if the hero's name is \"Knight\", \"Mage\", or \"Archer\".", "CodeBleu_score": 2.074947895192548}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    local heroName = hero.name\n    local heroImage = self.heroImages[heroName]\n    local heroFrame = self.heroFrames[heroName]\n    local heroAngerFullSignal = self.heroAngerFullSignals[heroName]\n    local heroAngerClone = self.heroAngerClones[heroName]\n\n    heroImage:setColor(1, 1, 1, 0.5)\n    heroFrame:setColor(1, 1, 1, 0.5)\n    heroAngerFullSignal:setVisible(false)\n    heroAngerClone:setVisible(false)", "CodeBleu_score": 24.73160021336583}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t    if specialCameraActive then\n        local camPos = getCameraPosition()\n        local targetPos = specialCameraTarget\n        local camSpeed = 10\n        local camPosX = camPos.x + (targetPos.x - camPos.x) * camSpeed * dt\n        local camPosY = camPos.y + (targetPos.y - camPos.y) * camSpeed * dt\n        local camPosZ = camPos.z + (targetPos.z - camPos.z) * camSpeed * dt\n        setCameraPosition(camPosX, camPosY, camPosZ)\n        setCameraLookAt(specialCameraLookAt.x, specialCameraLookAt.y, specialCameraLookAt.z)\n    elseif #activeHeroes > 0 then\n        local camPos = getCameraPosition()\n        local targetPos = getFocusPointOfHeros()\n        local camSpeed = 10\n        local camPosX = camPos.x + (targetPos.x - camPos.x) * camSpeed * dt\n        local camPosY = camPos.y + (targetPos.y - camPos.y) * camSpeed * dt\n        local camPosZ = camPos.z + (targetPos.z - camPos.z) * camSpeed * dt\n        setCameraPosition(camPosX, camPosY, camPosZ)\n        setCameraLookAt(targetPos.x, targetPos.y, targetPos.z)\n    end", "CodeBleu_score": 37.31616891059524}, {"code": "local function moveCamera(dt)\n\t    if specialCameraActive then\n        local newPos = camera:getPosition()\n        local newLookAt = camera:getLookAt()\n        local newUp = camera:getUp()\n\n        local newPos = interpolate(newPos, specialCameraTarget, dt * specialCameraSpeed)\n        local newLookAt = interpolate(newLookAt, specialCameraLookAt, dt * specialCameraSpeed)\n        local newUp = interpolate(newUp, specialCameraUp, dt * specialCameraSpeed)\n\n        camera:setPosition(newPos)\n        camera:setLookAt(newLookAt)\n        camera:setUp(newUp)\n    else\n        local newPos = camera:getPosition()\n        local newLookAt = camera:getLookAt()\n        local newUp = camera:getUp()\n\n        local newPos = interpolate(newPos, getFocusPointOfHeros(), dt * cameraSpeed)\n        local newLookAt = interpolate(newLookAt, getFocusPointOfHeros(), dt * cameraSpeed)\n        local newUp = interpolate(newUp, getFocusPointOfHeros(), dt * cameraSpeed)\n\n        camera:setPosition(newPos)\n        camera:setLookAt(newLookAt)\n        camera:setUp(newUp)\n    end", "CodeBleu_score": 29.802731245851298}, {"code": "local function moveCamera(dt)\n\t    if specialCamera then\n        local camPos = camera.getPosition()\n        local camDir = camera.getDirection()\n        local targetPos = specialCamera.targetPos\n        local targetDir = specialCamera.targetDir\n        local camPosX, camPosY, camPosZ = camPos[1], camPos[2], camPos[3]\n        local targetPosX, targetPosY, targetPosZ = targetPos[1], targetPos[2], targetPos[3]\n        local camDirX, camDirY, camDirZ = camDir[1], camDir[2], camDir[3]\n        local targetDirX, targetDirY, targetDirZ = targetDir[1], targetDir[2], targetDir[3]\n        local camPosX, camPosY, camPosZ = camPosX + (targetPosX - camPosX) * dt * 5, camPosY + (targetPosY - camPosY) * dt * 5, camPosZ + (targetPosZ - camPosZ) * dt * 5\n        local camDirX, camDirY, camDirZ = camDirX + (targetDirX - camDirX) * dt * 5, camDirY + (targetDirY - camDirY) * dt * 5, camDirZ + (targetDirZ - camDirZ) * dt * 5\n        camera.setPosition(camPosX, camPosY, camPosZ)\n        camera.setDirection(camDirX, camDirY, camDirZ)\n    else\n        local focusPoint = getFocusPointOfHeros()\n        if focusPoint then\n            local camPos = camera.getPosition()\n            local camDir = camera.getDirection()\n            local focusPointX, focusPointY, focusPointZ = focusPoint[1], focusPoint[2], focusPoint[3]\n            local camPosX, camPosY, camPosZ = camPos[1], camPos[2], camPos[3]\n            local camDirX, camDirY, camDirZ = camDir[1], camDir[2], camDir[3]\n            local camPosX, camPosY, camPosZ = camPosX + (focusPointX - camPos", "CodeBleu_score": 37.97490858259661}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tlocal heroes = HeroManager.getHeroes()\n\tfor i = 1, #heroes do\n\t\tlocal hero = heroes[i]\n\t\tlocal posTable = getPosTable(hero)\n\t\tif posTable then\n\t\t\tlocal particle = hero:getChildByTag(100)\n\t\t\tif particle then\n\t\t\t\tparticle:setPosition(posTable.x, posTable.y)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 42.14983756772474}, {"code": "local function updateParticlePos()\n\t\tlocal heroList = HeroManager:getHeroList()\n\tfor i = 1, #heroList do\n\t\tlocal hero = heroList[i]\n\t\tlocal effectNode = getPosTable(hero)\n\t\tif effectNode then\n\t\t\teffectNode:setPosition(hero:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 39.93171200348244}, {"code": "local function updateParticlePos()\n\t    for i,hero in ipairs(HeroManager.getHeroes()) do\n        local particle = getPosTable(hero)\n        if particle then\n            particle:setPosition(hero:getPosition())\n        end\n    end", "CodeBleu_score": 33.60393897226594}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.hero:getChildByTag(1)\n    local raceType = hero:getRaceType()\n    if raceType == RACE_TYPE.KNIGHT then\n        self:playAudioEffect(\"audio/sound/chooseRole/role_knight.mp3\")\n    elseif raceType == RACE_TYPE.ARCHER then\n        self:playAudioEffect(\"audio/sound/chooseRole/role_archer.mp3\")\n    elseif raceType == RACE_TYPE.MAGE then\n        self:playAudioEffect(\"audio/sound/chooseRole/role_mage.mp3\")\n    end", "CodeBleu_score": 49.47588309231848}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.heroes[self.curHeroIndex]\n    local raceType = hero:getRaceType()\n    if raceType == \"Knight\" then\n        self.audio:playSound(\"Knight_rotate\")\n    elseif raceType == \"Archer\" then\n        self.audio:playSound(\"Archer_rotate\")\n    elseif raceType == \"Mage\" then\n        self.audio:playSound(\"Mage_rotate\")\n    end", "CodeBleu_score": 49.40752672191079}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.hero\n    local heroRace = hero:getRace()\n    if heroRace == \"Knight\" then\n        audio.play(audio.knight)\n    elseif heroRace == \"Archer\" then\n        audio.play(audio.archer)\n    elseif heroRace == \"Mage\" then\n        audio.play(audio.mage)\n    end", "CodeBleu_score": 42.48532306570954}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Character:new(\"knight\", 0, 0, \"knight_idle\", \"knight_walk\", \"knight_attack\", \"knight_hurt\", \"knight_death\", \"knight_idle\", \"knight_walk\", \"knight_attack\", \"knight_hurt\", \"knight_death\", 100, 10, 20, 10, 100, 100)\n\tknight:setPosition(100, 100)\n\tknight:setCurrentLayer(self.currentLayer)\n\tknight:setMode(\"idle\")\n\tself.heroManager:push(knight)\n\t\n\tlocal mage = Character:new(\"mage\", 0, 0, \"mage_idle\", \"mage_walk\", \"mage_attack\", \"mage_hurt\", \"mage_death\", \"mage_idle\", \"mage_walk\", \"mage_attack\", \"mage_hurt\", \"mage_death\", 100, 10, 20, 10, 100, 100)\n\tmage:setPosition(200, 100)\n\tmage:setCurrentLayer(self.currentLayer)\n\tmage:setMode(\"idle\")\n\tself.heroManager:push(mage)\n\t\n\tlocal archer = Character:new(\"archer\", 0, 0, \"archer_idle\", \"archer_walk\", \"archer_attack\", \"archer_hurt\", \"archer_death\", \"archer_idle\", \"archer_walk\", \"archer_attack\", \"archer_hurt\", \"archer_death\", 100, 10, 20, 10, 100, 100)\n\tarcher:setPosition(300, 100)\n\tarcher:setCurrentLayer(self.currentLayer)\n\tarcher:setMode(\"idle\")\n\tself.heroManager:push(archer)", "CodeBleu_score": 42.39548233350698}, {"code": "function GameMaster:AddHeros()\n\t\tlocal Knight = Character:new(\"Knight\")\n\tKnight:SetPosition(100, 100)\n\tKnight:SetIdle()\n\tKnight:SetLayer(self.currentLayer)\n\tself.HeroManager:AddHero(Knight)\n\t\n\tlocal Mage = Character:new(\"Mage\")\n\tMage:SetPosition(150, 100)\n\tMage:SetIdle()\n\tMage:SetLayer(self.currentLayer)\n\tself.HeroManager:AddHero(Mage)\n\t\n\tlocal Archer = Character:new(\"Archer\")\n\tArcher:SetPosition(200, 100)\n\tArcher:SetIdle()\n\tArcher:SetLayer(self.currentLayer)\n\tself.HeroManager:AddHero(Archer)", "CodeBleu_score": 49.490958499931324}, {"code": "function GameMaster:AddHeros()\n\t\t-- Create and position the Knight\n\tlocal knight = Character:new(self.game, \"Knight\", \"knight\", 1)\n\tknight:SetPosition(100, 100)\n\tself.game.layer:AddChild(knight)\n\tknight:SetIdleMode()\n\tHeroManager:AddHero(knight)\n\t\n\t-- Create and position the Mage\n\tlocal mage = Character:new(self.game, \"Mage\", \"mage\", 2)\n\tmage:SetPosition(100, 200)\n\tself.game.layer:AddChild(mage)\n\tmage:SetIdleMode()\n\tHeroManager:AddHero(mage)\n\t\n\t-- Create and position the Archer\n\tlocal archer = Character:new(self.game, \"Archer\", \"archer\", 3)\n\tarcher:SetPosition(100, 300)\n\tself.game.layer:AddChild(archer)\n\tarcher:SetIdleMode()\n\tHeroManager:AddHero(archer)", "CodeBleu_score": 52.63595400422902}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t    local boss = Rat()\n    boss:setCameraMask(self.camera.mask)\n    self.layer:addChild(boss)\n    boss.x = self.layer.width/2\n    boss.y = self.layer.height/2\n    boss.facing = RIGHT\n    boss.aiEnabled = false\n    boss:bounceOut()\n    boss.aiEnabled = true\n    self.monsterManager:add(boss)", "CodeBleu_score": 35.822791877946784}, {"code": "function GameMaster:showBoss()\n\t    local boss = Rat.new()\n    boss.cameraMask = {self.camera}\n    boss.layer = self.layer\n    boss.x = 100\n    boss.y = 100\n    boss.facing = \"right\"\n    boss.aiEnabled = false\n    boss:bounceOut()\n    boss.aiEnabled = true\n    self.monsterManager:addMonster(boss)", "CodeBleu_score": 32.463107166813685}, {"code": "function GameMaster:showBoss()\n\t    local rat = Rat()\n    rat:setCameraMask(self.camera:getCameraMask())\n    self.currentLayer:addChild(rat)\n    rat:setPosition(cc.p(self.map:getContentSize().width/2, self.map:getContentSize().height/2))\n    rat:setFacingDirection(self.player:getFacingDirection())\n    rat:setAIEnabled(false)\n    rat:bounceOut()\n    rat:setAIEnabled(true)\n    self.monsterManager:addMonster(rat)", "CodeBleu_score": 35.89167352211798}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal anim = Animation3D(file)\n\tlocal animate = Animate3D(anim, begin, finish)\n\tanimate.speed = speed\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 37.02437839227575}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal anim = Animation3D.new(file)\n\tlocal animate = Animate3D.new(anim, begin, finish)\n\tanimate.speed = speed\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 40.05073888177883}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal anim = Animation3D.new(file)\n\tlocal animate = Animate3D.new(anim, begin, finish)\n\tanimate.speed = speed\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 40.05073888177883}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t    for i = #table, 1, -1 do\n        table.remove(table, i)\n    end", "CodeBleu_score": 30.585023681991153}, {"code": "function removeAll(table)\n\t    for i = #table, 1, -1 do\n        table.remove(table, i)\n    end", "CodeBleu_score": 30.585023681991153}, {"code": "function removeAll(table)\n\t    for i,v in pairs(table) do\n        table.remove(table, i)\n    end", "CodeBleu_score": 32.08034085044802}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t    local delayAction = cc.DelayTime:create(delay)\n    local sequence = cc.Sequence:create(delayAction, func)\n    target:runAction(sequence)", "CodeBleu_score": 56.27935469057357}, {"code": "function delayExecute(target, func, delay)\n\t    local delayAction = cc.DelayTime:create(delay)\n    local sequence = cc.Sequence:create(delayAction, func)\n    target:runAction(sequence)", "CodeBleu_score": 56.27935469057357}, {"code": "function delayExecute(target, func, delay)\n\t    local delayAction = cc.DelayTime:create(delay)\n    local sequence = cc.Sequence:create(delayAction, func)\n    target:runAction(sequence)", "CodeBleu_score": 56.27935469057357}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\t--[[\n\tThis code sets the default font for the loading text.\n\t]]\n\tlocal defaultFont = \"Helvetica-Bold\"\n\t--[[\n\tThis code creates six loading text labels with different text content and font sizes, and adds them to the layer.\n\t]]\n\tlocal loadingText = {}\n\tloadingText[1] = display.newText(\"Loading\", 0, 0, defaultFont, 50)\n\tloadingText[2] = display.newText(\"Loading .\", 0, 0, defaultFont, 50)\n\tloadingText[3] = display.newText(\"Loading . .\", 0, 0, defaultFont, 50)\n\tloadingText[4] = display.newText(\"Loading . . .\", 0, 0, defaultFont, 50)\n\tloadingText[5] = display.newText(\"Loading . . . .\", 0, 0, defaultFont, 50)\n\tloadingText[6] = display.newText(\"Loading . . . . .\", 0, 0, defaultFont, 50)\n\t\n\t--[[\n\tThis code sets the position of each loading text label on the screen.\n\t]]\n\tloadingText[1].x = display.contentCenterX\n\tloadingText[1].y = display.contentCenterY\n\tloadingText[2].x = display.contentCenterX\n\tloadingText[2].y = display.contentCenterY\n\tloadingText[3].x = display.contentCenterX\n\tloadingText[3].y = display.contentCenterY\n\tloadingText[4].x = display.contentCenterX\n\tloadingText[4].y = display.contentCenterY\n\tloadingText[5].x = display.contentCenterX\n\tloadingText[5].y = display.contentCenterY\n\tloadingText[6].x = display.contentCenterX\n\tloadingText[6].y = display.contentCenterY\n\t\n\t--[[\n\tThis code adds each loading text label to the layer.\n\t]]\n\tlayer:insert(loadingText[1])\n\tlayer:insert(loadingText[2])\n\tlayer:insert(loadingText[3])\n\tlayer:insert(loadingText[4", "CodeBleu_score": 35.28164908074854}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = display.newText(\"Loading\", \"assets/fonts/Roboto-Bold.ttf\", 30)\n\tloadingText.x = display.contentCenterX\n\tloadingText.y = display.contentCenterY + 100\n\tlayer:insert(loadingText)\n\tself._loading = {loadingText}", "CodeBleu_score": 16.39970594830781}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    local loadingText = display.newText(\"Loading...\", 0, 0, \"Helvetica\", 24)\n    loadingText.x = display.contentWidth / 2\n    loadingText.y = display.contentHeight / 2\n    layer:insert(loadingText)\n    self._loading = {loadingText}", "CodeBleu_score": 17.527065705262974}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = display.newScene()\n\tlocal layer = MainMenuScene.createLayer()\n\tscene:add(layer)\n\treturn scene", "CodeBleu_score": 60.02128119511796}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = CCScene:create()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 64.46469509503693}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = CCScene:create()\n\tlocal layer = MainMenuLayer.new()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 64.99783925112406}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t    -- Check for collisions with HeroManager\n    for _, hero in pairs(HeroManager.getAliveHeroes()) do\n        if object:collides(hero) then\n            solveCollision(object, hero)\n        end\n    end\n\n    -- Check for collisions with MonsterManager\n    for _, monster in pairs(MonsterManager.getAliveMonsters()) do\n        if object:collides(monster) then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 35.11312643178146}, {"code": "local function collision(object)\n\n\t    -- Check for collisions with heroes\n    for _, hero in ipairs(HeroManager.getAliveHeroes()) do\n        if object:collides(hero) then\n            solveCollision(object, hero)\n        end\n    end\n\n    -- Check for collisions with monsters\n    for _, monster in ipairs(MonsterManager.getAliveMonsters()) do\n        if object:collides(monster) then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 35.160103537087}, {"code": "local function collision(object)\n\n\t    -- Check for collisions with Heroes\n    for _, hero in ipairs(HeroManager.getAliveHeroes()) do\n        if hero:collides(object) then\n            solveCollision(object, hero)\n        end\n    end\n\n    -- Check for collisions with Monsters\n    for _, monster in ipairs(MonsterManager.getAliveMonsters()) do\n        if monster:collides(object) then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 35.160103537087}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t    local hero = HeroManager:getHero()\n    local monster = MonsterManager:getMonster()\n    local hero_x, hero_y = hero:getPosition()\n    local hero_width, hero_height = hero:getContentSize().width, hero:getContentSize().height\n    local monster_x, monster_y = monster:getPosition()\n    local monster_width, monster_height = monster:getContentSize().width, monster:getContentSize().height\n    local hero_x_min, hero_x_max = hero_x - hero_width / 2, hero_x + hero_width / 2\n    local hero_y_min, hero_y_max = hero_y - hero_height / 2, hero_y + hero_height / 2\n    local monster_x_min, monster_x_max = monster_x - monster_width / 2, monster_x + monster_width / 2\n    local monster_y_min, monster_y_max = monster_y - monster_height / 2, monster_y + monster_height / 2\n\n    if hero:isAlive() and monster:isAlive() then\n        if hero_x_min < monster_x_max and hero_x_max > monster_x_min and hero_y_min < monster_y_max and hero_y_max > monster_y_min then\n            collision(hero, monster)\n        end\n    end\n\n    if isOutOfBound(hero) then\n        hero:die()\n    end\n\n    if isOutOfBound(monster) then\n        monster:die()\n    end\n\n    if not hero:isAlive() then\n        HeroManager:removeHero(hero)\n    end\n\n    if not monster:isAlive() then\n        MonsterManager:removeMonster(monster)\n    end", "CodeBleu_score": 30.811384024011158}, {"code": "function collisionDetect(dt)\n\t    for i = #HeroManager, 1, -1 do\n        local hero = HeroManager[i]\n        if hero.isAlive then\n            for j = #MonsterManager, 1, -1 do\n                local monster = MonsterManager[j]\n                if monster.isAlive then\n                    if collision(hero, monster) then\n                        hero:hurt(monster.damage)\n                        monster:hurt(hero.damage)\n                    end\n                else\n                    table.remove(MonsterManager, j)\n                end\n            end\n            if isOutOfBound(hero) then\n                hero:hurt(hero.damage)\n            end\n            hero:update(dt)\n        else\n            table.remove(HeroManager, i)\n        end\n    end", "CodeBleu_score": 48.90863292391231}, {"code": "function collisionDetect(dt)\n\t    for i = #HeroManager, 1, -1 do\n        local hero = HeroManager[i]\n        if hero.alive then\n            for j = #MonsterManager, 1, -1 do\n                local monster = MonsterManager[j]\n                if monster.alive then\n                    local hero_x, hero_y = hero.sprite:getPosition()\n                    local monster_x, monster_y = monster.sprite:getPosition()\n                    local hero_width, hero_height = hero.sprite:getContentSize().width, hero.sprite:getContentSize().height\n                    local monster_width, monster_height = monster.sprite:getContentSize().width, monster.sprite:getContentSize().height\n                    local hero_center_x, hero_center_y = hero_x + hero_width / 2, hero_y + hero_height / 2\n                    local monster_center_x, monster_center_y = monster_x + monster_width / 2, monster_y + monster_height / 2\n                    local distance = math.sqrt((hero_center_x - monster_center_x)^2 + (hero_center_y - monster_center_y)^2)\n                    if distance <= hero_width / 2 + monster_width / 2 then\n                        if monster.type == \"monster\" then\n                            hero.health = hero.health - monster.damage\n                            monster.alive = false\n                            monster.sprite:removeSelf()\n                            table.remove(MonsterManager, j)\n                        end\n                    end\n                end\n            end\n            if hero.health <= 0 then\n                hero.alive = false\n                hero.sprite:removeSelf()\n                table.remove(HeroManager, i)\n            end\n            if isOutOfBound(hero.sprite) then\n                hero.alive = false\n                hero.sprite:removeSelf()\n                table.remove(HeroManager, i)\n            end\n        end\n    end", "CodeBleu_score": 38.73232225740716}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t    local attackCollider = self.specialAttackCollider\n    local attackColliderProperties = self.specialAttackColliderProperties\n    local attackColliderPosition = self.specialAttackColliderPosition\n    local attackColliderDirection = self.specialAttackColliderDirection\n    local attackColliderSound = self.specialAttackColliderSound\n    local attackColliderSoundProperties = self.specialAttackColliderSoundProperties\n    local attackColliderSoundPosition = self.specialAttackColliderSoundPosition\n    local attackColliderSoundDirection = self.specialAttackColliderSoundDirection\n    local attackColliderSoundVolume = self.specialAttackColliderSoundVolume\n    local attackColliderSoundPitch = self.specialAttackColliderSoundPitch\n    local attackColliderSoundPitchVariation = self.specialAttackColliderSoundPitchVariation\n    local attackColliderSoundPan = self.specialAttackColliderSoundPan\n    local attackColliderSoundPanVariation = self.specialAttackColliderSoundPanVariation\n    local attackColliderSoundPlaybackSpeed = self.specialAttackColliderSoundPlaybackSpeed\n    local attackColliderSoundPlaybackSpeedVariation = self.specialAttackColliderSoundPlaybackSpeedVariation\n    local attackColliderSoundLoop = self.specialAttackColliderSoundLoop\n    local attackColliderSoundLoopVariation = self.specialAttackColliderSoundLoopVariation\n    local attackColliderSoundLoopCount = self.specialAttackColliderSoundLoopCount\n    local attackColliderSoundLoopCountVariation = self.specialAttackColliderSoundLoopCountVariation\n    local attackColliderSoundLoopStart = self.specialAttackColliderSoundLoopStart\n    local attackColliderSoundLoopStartVariation = self.specialAttackColliderSoundLoopStartVariation\n    local attackColliderSoundLoopEnd = self.specialAttackColliderSoundLoopEnd\n    local attackColliderSoundLoopEndVariation = self.specialAttackColliderSoundLoopEndVariation\n    local attackColliderSoundLoopType = self.specialAttackColliderSoundLoopType\n    local attackColliderSoundLoopTypeVariation = self.specialAttackColliderSoundLoopTypeVariation\n    local attackColliderSoundLoopDirection = self.specialAttack", "CodeBleu_score": 25.757196973932984}, {"code": "function Actor:specialAttack()\n\t\tlocal attackProperties = self.specialAttackProperties\n\tlocal attackCollider = self.specialAttackCollider\n\tlocal attackSound = self.specialAttackSound\n\tlocal attackAnimation = self.specialAttackAnimation\n\n\tlocal attackCollider = self:createAttackCollider(attackProperties)\n\tself:playSound(attackSound)\n\tself:playAnimation(attackAnimation)", "CodeBleu_score": 29.707328887541447}, {"code": "function Actor:specialAttack()\n\t    local attack = self.specialAttack\n    local attackCollider = self.specialAttackCollider\n    local attackSound = self.specialAttackSound\n\n    if attackCollider then\n        attackCollider:destroy()\n    end\n\n    if attackSound then\n        attackSound:stop()\n    end\n\n    if attack then\n        local collider = Collider:new(self.position, attack.size, attack.offset, attack.direction, attack.damage, attack.hitstun, attack.hitstop, attack.hitspark, attack.hitsparkOffset, attack.hitsparkDirection, attack.hitsparkSize, attack.hitsparkDuration, attack.hitsparkFade, attack.hitsparkSound, attack.hitsparkSoundVolume, attack.hitsparkSoundPitch, attack.hitsparkSoundPitchVariation, attack.hitsparkSoundAttenuation, attack.hitsparkSoundMinDistance, attack.hitsparkSoundMaxDistance, attack.hitsparkSoundConeAngleInner, attack.hitsparkSoundConeAngleOuter, attack.hitsparkSoundConeVolumeOuter, attack.hitsparkSoundRolloffFactor, attack.hitsparkSoundDopplerFactor, attack.hitsparkSoundRelative, attack.hitsparkSoundConeInnerAngle, attack.hitsparkSoundConeOuterAngle, attack.hitsparkSoundConeOuterGain, attack.hitsparkSoundDistanceCutoff, attack.hitsparkSoundAudibleDistance, attack.hitsparkSoundObstructionVolumeCutoff, attack.hitsparkSoundOcclusionVolumeCutoff, attack.hitsparkSoundObstructionRolloffFactor, attack.hitsparkSoundOcclusionRolloffFactor, attack.hitsparkSoundReverbVolume, attack.hitsparkSoundReverbTime, attack.hitsparkSoundReverbHFDamping, attack.hitsparkSoundReverbLFDamping, attack.hitsparkSoundReverbDecayHFRatio, attack.", "CodeBleu_score": 31.517870729990726}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\n\tlocal state = self.angry\n\n\tif state == trueFalse then\n\t\treturn\n\tend\n\n\tself.angry = trueFalse\n\n\tif trueFalse then\n\t\tself.sprite:setTexture(self.angryTexture)\n\telse\n\t\tself.sprite:setTexture(self.normalTexture)\n\tend\n", "CodeBleu_score": 48.98021818869627}, {"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse then\n        if self.angryFace == true then\n            return\n        end\n        self.angryFace = true\n        self.sprite:setTexture(self.texture.angry)\n    else\n        if self.angryFace == false then\n            return\n        end\n        self.angryFace = false\n        self.sprite:setTexture(self.texture.normal)\n    end", "CodeBleu_score": 46.073144755980145}, {"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse then\n        if self.currentState ~= \"angry\" then\n            self.currentState = \"angry\"\n            self.sprite:setTexture(self.textureAngry)\n        end\n    else\n        if self.currentState ~= \"normal\" then\n            self.currentState = \"normal\"\n            self.sprite:setTexture(self.textureNormal)\n        end\n    end", "CodeBleu_score": 46.92830459054406}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t        val metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n        var width = paint.measureText(char.toString()).toInt()\n        var height = ceil(metric.height).toInt()\n        if (width == 0) {\n            height = getFontSize()\n            width = height\n        }\n\n        val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n        val canvas = Canvas(bitmap)\n        canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n        val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n        val data = IntArray(width * height)\n        bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n        for (x in 0 until width) {\n            for (y in 0 until height) {\n                pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n            }\n        }\n        bitmap.recycle()\n        return pixmap\n    }", "CodeBleu_score": 87.05633685920874}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val symbolString = char.toString()\n    val metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n    var width = paint.measureText(symbolString).toInt()\n    var height = ceil(metric.height).toInt()\n    if (width == 0) {\n        height = getFontSize()\n        width = height\n    }\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(symbolString, 0f, metric.leading + metric.ascent + 1f, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    val data = IntArray(width * height)\n    bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 97.6584520163006}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val symbolString = char.toString()\n    val metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n    var width = paint.measureText(symbolString).toInt()\n    var height = ceil(metric.height).toInt()\n    if (width == 0) {\n        height = getFontSize()\n        width = height\n    }\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(symbolString, 0f, metric.leading + metric.ascent + 1f, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    val data = IntArray(width * height)\n    bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 97.6584520163006}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        // When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        // When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        // When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        val onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.03406591579981}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        val onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.03406591579981}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n        val onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.03406591579981}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.8124700189432}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.8124700189432}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.8124700189432}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.92076970183604}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.92076970183604}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.92076970183604}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t    val defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.87849771543958}, {"code": "fun packImages(workingPath: String){\n\t    val defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.87849771543958}, {"code": "fun packImages(workingPath: String){\n\t    val defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.87849771543958}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t    val worldScreen = worldScreen!!\n    val gameInfo = worldScreen.gameInfo\n    val newWorldScreen = loadGame(gameInfo, worldScreen.autoPlay, true)\n    newWorldScreen.loadGame(gameInfo, worldScreen.autoPlay, true)\n    worldScreen.dispose()\n}", "CodeBleu_score": 32.62313401326742}, {"code": "suspend fun reloadWorldscreen(){\n\t    val worldScreen = worldScreen\n    if (worldScreen != null) {\n        val newWorldScreen = loadGame(worldScreen.gameInfo, worldScreen.autoPlay, true)\n        newWorldScreen.gameInfo.setTransients()\n        newWorldScreen.mapHolder.reload()\n    }\n}", "CodeBleu_score": 47.764311099157986}, {"code": "suspend fun reloadWorldscreen(){\n\t    val worldScreen = worldScreen!!\n    val newWorldScreen = loadGame(worldScreen.gameInfo, worldScreen.autoPlay, true)\n    worldScreen.dispose()\n    worldScreen.game.screen = newWorldScreen\n}", "CodeBleu_score": 31.610491050450857}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.pushScreen(MainMenuScreen())\n    return mainMenuScreen\n}", "CodeBleu_score": 44.64795830844584}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    // This function is called when the game is closed, and the main menu screen is reloaded\n    // It's needed because the main menu screen is not a root screen, and we need to reload it\n    // to update the mods list\n    val mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.pushScreen(MainMenuScreen())\n    return mainMenuScreen\n}", "CodeBleu_score": 44.647089367740364}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.pushScreen(MainMenuScreen())\n    return mainMenuScreen\n}", "CodeBleu_score": 44.64795830844584}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t        // Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t        // Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t        // Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t    val osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 94.16518826261579}, {"code": "private fun getLinuxDistro(): String{\n\t    val osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 94.16518826261579}, {"code": "private fun getLinuxDistro(): String{\n\t    val osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 94.16518826261579}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t    try {\n        if (SystemTray.isSupported()) {\n            val trayIcon = TrayIcon(ImageIcon(this.javaClass.getResource(\"/images/icon.png\")).image)\n            val tray = SystemTray.getSystemTray()\n            tray.add(trayIcon)\n            trayIcon.displayMessage(\"\", \"New message received\", TrayIcon.MessageType.INFO)\n            tray.remove(trayIcon)\n        } else {\n            val flashTask = FlashTask(this)\n            flashTask.execute()\n        }\n    } catch (e: Exception) {\n        logger.error(\"Error flashing window: ${e.message}\")\n    }\n}", "CodeBleu_score": 39.7447327272029}, {"code": "private fun flashWindow(){\n\t    try {\n        if (SystemTray.isSupported()) {\n            val tray = SystemTray.getSystemTray()\n            val icon = tray.iconImages\n            val flash = tray.isSupported(TrayIcon.MessageType.INFO)\n            if (flash) {\n                tray.displayMessage(\"\", \"Application is running\", TrayIcon.MessageType.INFO)\n            } else {\n                val taskbar = Taskbar()\n                taskbar.flash(true)\n            }\n        }\n    } catch (e: Exception) {\n        logger.error(\"Error flashing window\", e)\n    }\n}", "CodeBleu_score": 51.129655375472595}, {"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t\tsuper.onFullBackup(data);\n\t\tFile sharedPrefs = getFile(getApplicationContext().getFilesDir(), \"../shared_prefs\");\n\t\tif (sharedPrefs.exists()) {\n\t\t\taddFileToBackup(data, sharedPrefs, \"shared_prefs\");\n\t\t}\n\t\tFile gameData = getFile(getApplicationContext().getFilesDir(), \"../databases\");\n\t\tif (gameData.exists()) {\n\t\t\tFile[] files = gameData.listFiles();\n\t\t\tfor (File file : files) {\n\t\t\t\tif (file.getName().startsWith(\"ranking_\")) {\n\t\t\t\t\taddFileToBackup(data, file, \"ranking\");\n\t\t\t\t} else if (file.getName().startsWith(\"badges_\")) {\n\t\t\t\t\taddFileToBackup(data, file, \"badges\");\n\t\t\t\t} else if (file.getName().startsWith(\"journal_\")) {\n\t\t\t\t\taddFileToBackup(data, file, \"journal\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 23.054477197795933}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t\tFile base = new File(getFilesDir(), \"..\");\n\t\tFile[] files = base.listFiles();\n\t\tfor (File file : files) {\n\t\t\tif (file.getName().equals(\"shared_prefs\")) {\n\t\t\t\tbackupSharedPrefs(data, file);\n\t\t\t} else if (file.getName().equals(\"databases\")) {\n\t\t\t\tbackupDb(data, file);\n\t\t\t} else if (file.getName().equals(\"files\")) {\n\t\t\t\tbackupFiles(data, file);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 25.056143483064698}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !cm.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = cm.getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 67.96567627635042}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return cm.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = cm.getActiveNetworkInfo();\n        if (networkInfo != null && networkInfo.isConnected()) {\n            int type = networkInfo.getType();\n            return type == ConnectivityManager.TYPE_WIFI || type == ConnectivityManager.TYPE_WIMAX || type == ConnectivityManager.TYPE_BLUETOOTH || type == ConnectivityManager.TYPE_ETHERNET;\n        }\n        return false;\n    }\n}", "CodeBleu_score": 58.06823592864545}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n        return activeNetworkInfo != null && activeNetworkInfo.isConnected() && (activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI || activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIMAX || activeNetworkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 60.755598087691844}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t  hero.interruptCurrentAction();\n  hero.sprite.play( \"healed\" );\n  hero.removeAllStatuses();\n  hero.removeCurseEquipped();\n  hero.satisfyHunger();\n  hero.HP = hero.HT;\n  hero.sprite.showStatus( null );\n  hero.sprite.emitter().burst( Speck.factory( Speck.HEALING ), 1 );\n  hero.sprite.emitter().start( Speck.factory( Speck.HEALING ), 0.3f, 3 );\n  hero.sprite.emitter().start( Speck.factory( Speck.SHIELD ), 0.3f, 3 );\n  hero.sprite.emitter().start( Speck.factory( Speck.LIGHT ), 0.3f, 3 );\n  Dungeon.level.drop( new PotionOfHealing(), hero.pos ).sprite.drop();\n  hero.spendAndNext( TIME_TO_EAT );\n  hero.busy();\n  hero.sprite.operate( hero.pos );\n  hero.sprite.zap( hero.pos );\n  Dungeon.observe();\n  GLog.i( Messages.get( this, \"name\" ) );\n  return true;\n}", "CodeBleu_score": 54.025887068191416}, {"code": "protected boolean affectHero( Hero hero ){\n\t  if ( !hero.isAlive() ) {\n    return false;\n  }\n  hero.spend( hero.getHp() );\n  hero.setHp( hero.getHp() );\n  hero.cure();\n  hero.getBelongings().getEquipment().removeCurse();\n  hero.satisfyHunger();\n  hero.sprite.play( \"heal\" );\n  hero.sprite.emitter().burst( Speck.factory( Speck.HEALING ), 1 );\n  Dungeon.observe();\n  return true;\n}", "CodeBleu_score": 32.42245547943416}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t  if (item.isWaterskin() && !item.isFull()) {\n    item.fillWater();\n    return item;\n  }\n  if (item.isAnkh() && !item.isBlessed()) {\n    item.bless();\n    return item;\n  }\n  if (item.isCursed() && !item.isUncursable()) {\n    item.uncurse();\n    return item;\n  }\n  return null;\n}", "CodeBleu_score": 26.161307970386744}, {"code": "protected Item affectItem( Item item, int pos ){\n\t  if ( item == null ) {\n    return null;\n  }\n\n  if ( item instanceof Waterskin && !((Waterskin) item).isFull() ) {\n    ((Waterskin) item).fill();\n    return item;\n  }\n\n  if ( item instanceof Ankh && !((Ankh) item).isBlessed() ) {\n    ((Ankh) item).bless();\n    return item;\n  }\n\n  if ( item.cursed() ) {\n    item.detach( Dungeon.level.items.get( pos ) );\n    Dungeon.level.drop( item, pos ).sprite.drop();\n    return null;\n  }\n\n  return null;\n}", "CodeBleu_score": 49.174266011809195}, {"code": "protected Item affectItem( Item item, int pos ){\n\t  if (item instanceof Waterskin) {\n    Waterskin waterskin = (Waterskin) item;\n    if (waterskin.isFull()) {\n      return null;\n    }\n    waterskin.fill();\n    Sample.INSTANCE.play(Assets.SND_DRINK);\n    return waterskin;\n  }\n  if (item instanceof Ankh) {\n    Ankh ankh = (Ankh) item;\n    if (ankh.isBlessed()) {\n      return null;\n    }\n    ankh.bless();\n    Sample.INSTANCE.play(Assets.SND_ZAP);\n    return ankh;\n  }\n  if (item.cursed()) {\n    item.uncurseEquipped();\n    return item;\n  }\n  return null;\n}", "CodeBleu_score": 37.920708751047336}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t    if (enemy.isAlly()) {\n        enemy.addBuff(buffCls);\n    }\n    if (enemy.isEnemy()) {\n        if (hero.rollForLoot()) {\n            hero.addItem(enemy.getLoot());\n        }\n        hero.addKill(enemy.getType());\n        hero.processAscensionChallenge(enemy.getType());\n        hero.addExperience(enemy.getLevel());\n        if (hero.getClass().getSimpleName().equals(\"Monk\")) {\n            hero.addEnergy(1);\n        }\n    }\n}", "CodeBleu_score": 19.900688198697445}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t    if (enemy.isEnemy()) {\n        enemy.addBuff(buffCls);\n        if (enemy.isKilled()) {\n            hero.addKill();\n            if (enemy instanceof Monster) {\n                hero.addExperience(enemy.getLevel());\n                if (hero instanceof Monk) {\n                    hero.addEnergy(1);\n                }\n            }\n            if (hero.getKills() % 5 == 0) {\n                hero.getAscension().challenge();\n            }\n        }\n    }\n}", "CodeBleu_score": 20.06998205136894}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t  if (enemy.isAlignedAsEnemy()) {\n    enemy.affect(buffCls);\n    if (enemy.isAlive()) {\n      hero.rollForLoot(enemy);\n    }\n    hero.updateKillStatistics(enemy);\n    hero.processAscensionChallenges(enemy);\n    if (hero instanceof Monk) {\n      if (enemy.getLevel() > hero.getLevel()) {\n        hero.gainExperience(enemy.getLevel() - hero.getLevel());\n      }\n      hero.gainEnergy(1);\n    }\n  }\n}", "CodeBleu_score": 20.66805479473158}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t    if (AscensionChallenge.isActive(hero)) {\n        if (enemy.isBoosted()) {\n            enemy.revertToOriginal();\n        }\n        if (enemy.isValid()) {\n            if (enemy.isMinion()) {\n                AscensionChallenge.reduceStacks(hero, 1);\n            } else if (enemy.isElite()) {\n                AscensionChallenge.reduceStacks(hero, 2);\n            } else if (enemy.isBoss()) {\n                AscensionChallenge.reduceStacks(hero, 3);\n            }\n            if (AscensionChallenge.getStacks(hero) <= 0) {\n                AscensionChallenge.logWeakening(hero);\n            }\n            if (hero.isMaxLevel()) {\n                hero.grantExp(100);\n            }\n            hero.refreshBuffIndicators();\n        }\n    }\n}", "CodeBleu_score": 12.68408371528694}, {"code": "public static void processEnemyKill(Char enemy){\n\t    if (!AscensionChallenge.buffActive(hero)) {\n        return;\n    }\n    boolean valid = false;\n    for (String type : AscensionChallenge.enemyTypes) {\n        if (enemy.type().equals(type)) {\n            valid = true;\n            break;\n        }\n    }\n    if (!valid) {\n        return;\n    }\n    if (enemy.buff(AscensionChallenge.BOOST) != null) {\n        enemy.buff(AscensionChallenge.BOOST).detach();\n        enemy.sprite.restoreNormal();\n    }\n    int stacks = AscensionChallenge.stacks(hero);\n    if (enemy.type().equals(AscensionChallenge.ELITE)) {\n        stacks -= 2;\n    } else if (enemy.type().equals(AscensionChallenge.MINIBOSS)) {\n        stacks -= 1;\n    }\n    AscensionChallenge.stacks(hero, stacks);\n    if (stacks <= 0) {\n        GameScene.show(new WndMessage(TXT_WEAKENING));\n    }\n    if (hero.isAlive() && hero.HP == hero.HT && hero.lvl == Dungeon.maxLevel()) {\n        hero.spend(hero.EXP - hero.EXP / 2);\n    }\n    BuffIndicator.refreshHero();\n}", "CodeBleu_score": 28.566238070045465}, {"code": "public static void processEnemyKill(Char enemy){\n\t    if (AscensionChallenge.isActive(hero)) {\n        // Revert transformed enemies to their original state\n        if (enemy.isTransformed()) {\n            enemy.revertToOriginalState();\n        }\n\n        // Check if the enemy is valid and not boosted\n        if (enemy.isValidTarget() && !enemy.isBoosted()) {\n            // Reduce challenge stacks based on enemy type\n            if (enemy.isBoss()) {\n                AscensionChallenge.reduceStacks(hero, 2);\n            } else if (enemy.isElite()) {\n                AscensionChallenge.reduceStacks(hero, 1);\n            }\n\n            // Log a weakening message if stacks drop below a threshold\n            if (AscensionChallenge.getStacks(hero) < 5) {\n                AscensionChallenge.logWeakeningMessage(hero);\n            }\n\n            // Grant experience if the hero is at max level\n            if (hero.isMaxLevel()) {\n                AscensionChallenge.grantExperience(hero);\n            }\n\n            // Refresh the hero's buff indicators\n            AscensionChallenge.refreshBuffIndicators(hero);\n        }\n    }\n}", "CodeBleu_score": 12.342860090693948}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\t\tcount++;\n\t\tcomboTimer = count * 1000;\n\n\t\tif (enemy.isDead() || (enemy.hasBuff(Buff.Corruption) && enemy.HP == enemy.maxHP)) {\n\t\t\tcomboTimer += (int) (comboTimer * (talentPoints[Talent.Cleave] * 0.1));\n\t\t}\n\n\t\tcomboTimer = Math.min(comboTimer, 10000);\n\n\t\tactionIndicator.trigger(ActionIndicator.Action.Hit);\n\n\t\tvalidateMasteryCombos();\n\n\t\tlog.write(count + \" hit combo!\");\n\n\t\thero.refreshBuffIndicator();\n\t}", "CodeBleu_score": 39.93673509676244}, {"code": "public void hit( Char enemy ){\n\t\t\tcount++;\n\t\tcomboTimer = initialComboTime;\n\t\tif (enemy.isDead() || enemy.hasBuff(Buff.CORRUPTION) && enemy.getHp() == enemy.getMaxHp()) {\n\t\t\tcomboTimer += Math.min(count, 5) * 1000;\n\t\t}\n\t\tactionIndicator.trigger(ActionIndicator.Type.COMBO);\n\t\tvalidateMasteryCombos();\n\t\tlog.combo(count);\n\t\thero.refreshBuffIndicator();\n\t}", "CodeBleu_score": 29.529701596621493}, {"code": "public void hit( Char enemy ){\n\t\tcount++;\n\tcomboTimer = getComboTimer();\n\ttriggerActionIndicators();\n\tvalidateMasteryCombos();\n\tlogComboCount();\n\trefreshBuffIndicator();\n}", "CodeBleu_score": 9.807769180454413}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t    int cap = super.capacity();\n    for (Item item : items) {\n        if (item instanceof Bag) {\n            cap++;\n        }\n    }\n    if (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n        //secondary weapons still occupy an inv. slot\n        cap--;\n    }\n    return cap;\n}", "CodeBleu_score": 87.23478599112863}, {"code": "public int capacity(){\n\t    int cap = super.capacity();\n    for (Item item : items) {\n        if (item instanceof Bag) {\n            cap++;\n        }\n    }\n    if (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n        // secondary weapons still occupy an inv. slot\n        cap--;\n    }\n    return cap;\n}", "CodeBleu_score": 87.23478599112863}, {"code": "public int capacity(){\n\t    int cap = super.capacity();\n    for (Item item : items) {\n        if (item instanceof Bag) {\n            cap++;\n        }\n    }\n    if (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n        // secondary weapons still occupy an inv. slot\n        cap--;\n    }\n    return cap;\n}", "CodeBleu_score": 87.23478599112863}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t  // Calculate the base HT based on the character's level\n  int baseHT = ( level * 10 ) + 20;\n  // Adjust for any active RingOfMight and ElixirOfMight buffs\n  baseHT += ( ringOfMight ? 10 : 0 );\n  baseHT += ( elixirOfMight ? 10 : 0 );\n  // Apply any multipliers\n  baseHT *= htMultiplier;\n  // Update the character's HT\n  ht = baseHT;\n  // Optionally increase current HP if boostHP is true\n  if ( boostHP ) {\n    hp += ( baseHT - ht );\n  }\n  // Ensure HP does not exceed the new HT value\n  hp = Math.min( hp, ht );\n}", "CodeBleu_score": 20.539136060346397}, {"code": "public void updateHT( boolean boostHP ){\n\t  int baseHT = getLevel() * 10;\n  int ringOfMightBuff = getRingOfMightBuff();\n  int elixirOfMightBuff = getElixirOfMightBuff();\n  int ht = baseHT + ringOfMightBuff + elixirOfMightBuff;\n  setHT( ht );\n  if ( boostHP ) {\n    int hp = getHP();\n    int hpBoost = getLevel() * 10;\n    hp += hpBoost;\n    if ( hp > ht ) {\n      hp = ht;\n    }\n    setHP( hp );\n  }\n}", "CodeBleu_score": 19.40464429829848}, {"code": "public void updateHT( boolean boostHP ){\n\t  // Calculate the character's base maximum health\n  int baseHT = ( 10 + ( level * 5 ) );\n  // Apply any Ring of Might buff\n  baseHT += RingOfMight.getBuff( this );\n  // Apply any Elixir of Might buff\n  baseHT += ElixirOfMight.getBuff( this );\n  // Update the character's maximum health\n  HT = baseHT;\n  // If boostHP is true, increase current health\n  if ( boostHP ) {\n    HP += ( HT - oldHT );\n  }\n  // Ensure current health does not exceed maximum health\n  HP = Math.min( HP, HT );\n  // Update the character's old maximum health\n  oldHT = HT;\n}", "CodeBleu_score": 26.394468030726724}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t  if ( enemy.alignment == Alignment.ENEMY || enemy.alignment == Alignment.NEUTRAL_MIMIC ) {\n    try {\n      wep.attack( enemy );\n      wep.setThrown( true );\n      wep.clearThrown();\n      if ( enemy.alignment == Alignment.ENEMY ) {\n        if ( this.alignment == Alignment.GLADIATOR ) {\n          this.applyBuff( Buff.COMBAT_CRITICAL_STRIKE );\n          this.applyBuff( Buff.COMBAT_CRITICAL_DAMAGE );\n        } else if ( this.alignment == Alignment.DUELIST ) {\n          this.applyBuff( Buff.COMBAT_CRITICAL_STRIKE );\n          this.applyBuff( Buff.COMBAT_CRITICAL_DAMAGE );\n        }\n      }\n      return true;\n    } catch ( Exception e ) {\n      return false;\n    }\n  } else {\n    return false;\n  }\n}", "CodeBleu_score": 22.130380603471643}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t    boolean success = false;\n    if ( enemy.alignment == Alignment.ENEMY || enemy.alignment == Alignment.NEUTRAL_MIMIC ) {\n        try {\n            success = attack( enemy, wep );\n            thrown = wep;\n            thrown.set( this );\n            thrown.clear( this );\n        } finally {\n            thrown = null;\n        }\n        if ( success && ( this instanceof Gladiator || this instanceof Duelist ) ) {\n            if ( this.combo == 0 ) {\n                this.combo++;\n            } else if ( this.combo == 1 ) {\n                this.combo++;\n                this.addBuff( new Buff( Buff.Type.COMBO, 10, 1, 1 ) );\n            } else if ( this.combo == 2 ) {\n                this.combo = 0;\n                this.addBuff( new Buff( Buff.Type.COMBO, 10, 2, 2 ) );\n            }\n        }\n    }\n    return success;\n}", "CodeBleu_score": 22.5545264408138}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t  if (enemy.alignment == Char.Alignment.ENEMY || enemy.alignment == Char.Alignment.NEUTRAL_MIMIC) {\n    boolean success = wep.attack(enemy);\n    wep.setThrown(true);\n    wep.clearThrown();\n    if (success) {\n      if (this instanceof Gladiator) {\n        ((Gladiator) this).setCombo(true);\n        ((Gladiator) this).setComboCount(((Gladiator) this).getComboCount() + 1);\n      } else if (this instanceof Duelist) {\n        ((Duelist) this).setCombo(true);\n        ((Duelist) this).setComboCount(((Duelist) this).getComboCount() + 1);\n      }\n    }\n    return success;\n  } else {\n    return false;\n  }\n}", "CodeBleu_score": 22.079500100220212}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\t\tdouble acc = 100;\n\t\tacc *= weapon.getAccuracy();\n\t\tif (target.getDistance(this) > 1) acc *= 0.8;\n\t\tif (target.getDistance(this) > 2) acc *= 0.6;\n\t\tif (target.getDistance(this) > 3) acc *= 0.4;\n\t\tif (target.getDistance(this) > 4) acc *= 0.2;\n\t\tacc *= getBuffMultiplier(\"attack\");\n\t\treturn (int) (acc * baseAttackSkill);\n\t}", "CodeBleu_score": 23.831925638023783}, {"code": "public int attackSkill( Char target ){\n\t\t\tdouble acc = accuracy( target );\n\t\tacc *= weapon.accuracyMultiplier( target );\n\t\tacc *= accuracyMultiplier( target );\n\t\tacc *= accuracyMultiplier( target, weapon );\n\t\tacc *= accuracyMultiplier( target, weapon, this );\n\t\tacc *= accuracyMultiplier( target, this );\n\t\tacc *= accuracyMultiplier( target, this, weapon );\n\t\treturn (int) (acc * baseAttackSkill());\n\t}", "CodeBleu_score": 18.95841525575531}, {"code": "public int attackSkill( Char target ){\n\t\t\tfloat acc = 1.0f;\n\t\tfloat acc_mult = 1.0f;\n\t\tfloat acc_mult_weapon = 1.0f;\n\t\tfloat acc_mult_prox = 1.0f;\n\t\tfloat acc_mult_buff = 1.0f;\n\t\tfloat acc_mult_buff_weapon = 1.0f;\n\t\tfloat acc_mult_buff_prox = 1.0f;\n\n\t\tacc_mult_weapon = weapon.getAccuracyMultiplier();\n\t\tacc_mult_prox = proximity( target );\n\n\t\tacc_mult_buff = getBuffMultiplier( Buff.Accuracy );\n\t\tacc_mult_buff_weapon = weapon.getBuffAccuracyMultiplier();\n\t\tacc_mult_buff_prox = getBuffProximityMultiplier();\n\n\t\tacc_mult = acc_mult_weapon * acc_mult_prox * acc_mult_buff * acc_mult_buff_weapon * acc_mult_buff_prox;\n\t\tacc = acc_mult * baseAttackSkill;\n\n\t\treturn (int)acc;\n\t}", "CodeBleu_score": 26.44054539434282}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  if (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.66901484923096}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  if (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.66901484923096}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  if (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.66901484923096}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 72.2461355663553}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 72.2461355663553}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 72.2461355663553}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t    this.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.33589882619545}, {"code": "onPointerOver (){\n\t  this.scene.city.map.selectedCell.x = this.x;\n  this.scene.city.map.selectedCell.y = this.y;\n\n  this.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n\n  this.related.forEach((cell) => {\n    cell.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n  });\n\n  if (this.tiles.heightmap) {\n    if (this.tiles.heightmap.polygon.top) {\n      this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n    }\n    if (this.tiles.heightmap.polygon.slope) {\n      this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n    }\n  }\n}", "CodeBleu_score": 96.64632406414762}, {"code": "onPointerOver (){\n\t  this.scene.city.map.selectedCell.x = this.x;\n  this.scene.city.map.selectedCell.y = this.y;\n\n  this.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n\n  this.related.forEach((cell) => {\n    cell.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n  });\n\n  if (this.tiles.heightmap) {\n    if (this.tiles.heightmap.polygon.top){\n      this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n    }\n    if (this.tiles.heightmap.polygon.slope){\n      this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n    }\n  }\n}", "CodeBleu_score": 99.90449187546066}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t  if (this.current < this.lightThreshold)\n    return null;\n\n  if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n    return 'light';\n\n  if (this.current >= this.heavyThreshold)\n    return 'heavy';\n}", "CodeBleu_score": 74.7499443566065}, {"code": "getTrafficDensity (){\n\t  if (this.current < this.lightThreshold)\n    return null;\n\n  if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n    return 'light';\n\n  if (this.current >= this.heavyThreshold)\n    return 'heavy';\n}", "CodeBleu_score": 74.7499443566065}, {"code": "getTrafficDensity (){\n\t    if (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.24930950211879}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t", "CodeBleu_score": 25.419227090064833}, {"code": "restart: function (){\n\t    this.currentValue = 0;\n    this.lastUpdate = Date.now();\n    this.updateInterval = 1000;\n    this.lightThreshold = 100;\n    this.heavyThreshold = 1000;\n  }", "CodeBleu_score": 11.381552876950714}, {"code": "restart: function (){\n\t    this.currentValue = this.lightThreshold;\n    this.state = 'light';\n    this.update();\n}", "CodeBleu_score": 8.503780080268351}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t    if (color === undefined) { color = '#ffffff'; }\n    if (duration === undefined) { duration = 1000; }\n    if (force === undefined) { force = false; }\n    if (alpha === undefined) { alpha = 0.5; }\n\n    if (!this.effects.flash || force) {\n        this.clearEffects();\n        this.game.debug.geom(this.sprite.body, '#ffff00');\n        var flash = this.game.add.graphics(0, 0);\n        flash.beginFill(color, alpha);\n        flash.drawRect(-this.sprite.width / 2, -this.sprite.height / 2, this.sprite.width, this.sprite.height);\n        flash.endFill();\n        this.sprite.addChild(flash);\n\n        this.effects.flash = flash;\n    }\n    return true;\n}", "CodeBleu_score": 63.466211977698606}, {"code": "flash: function (color, duration, force, alpha){\n\t    var self = this;\n    if (duration === undefined) {\n        duration = self.data.duration;\n    }\n    if (force === undefined) {\n        force = self.data.force;\n    }\n    if (alpha === undefined) {\n        alpha = self.data.alpha;\n    }\n    if (force === false && this.data.force === true) {\n        return false;\n    }\n    if (self.data.effect.alpha === 0) {\n        self.clear();\n        self.game.ctx.fillStyle = color;\n        self.game.ctx.fillRect(self.x - self.offset.x, self.y - self.offset.y, self.width, self.height);\n        self.data.effect.alpha = alpha;\n        self.data.effect.duration = duration;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 51.80251285488442}, {"code": "flash: function (color, duration, force, alpha){\n\t    if (typeof color === 'undefined') {\n        color = '#ffffff';\n    }\n    if (typeof duration === 'undefined') {\n        duration = 1000;\n    }\n    if (typeof force === 'undefined') {\n        force = true;\n    }\n    if (typeof alpha === 'undefined') {\n        alpha = 0.5;\n    }\n    if (!this.visible || (this.alpha === 0) && !force) {\n        return false;\n    }\n    this.alpha = 1;\n    this.fillColor = color;\n    this.fillAlpha = alpha;\n    this.game.time.events.add(duration, function () {\n        this.alpha = 0;\n    }, this);\n    return true;\n}", "CodeBleu_score": 54.0976914711579}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t", "CodeBleu_score": 2.218908958697607}, {"code": "createFluidLayer: function (children, addToWorld){\n\t", "CodeBleu_score": 2.218908958697607}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    var layer = new FlexLayer();\n    layer.type = 'fluid';\n    layer.addToWorld = addToWorld;\n    layer.children = children;\n    this.layers.push(layer);\n    return layer;\n}", "CodeBleu_score": 25.658139091060356}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t    var layer = new Phaser.FlexLayer(this.game, this.game.world.width, this.game.world.height, this.game.world.width, this.game.world.height, this.game.world.width, this.game.world.height);\n    this.game.world.addChild(layer);\n    this.layers.push(layer);\n    if (children) {\n        children.forEach(function (child) {\n            layer.addChild(child);\n        });\n    }\n    return layer;\n}", "CodeBleu_score": 55.6911672763387}, {"code": "createFullLayer: function (children){\n\t    var layer = new Phaser.FlexLayer(this.game, this.game.width, this.game.height);\n    this.game.world.addChild(layer);\n    this.layers.push(layer);\n    if (children) {\n        children.forEach(function (child) {\n            layer.addChild(child);\n        });\n    }\n    return layer;\n}", "CodeBleu_score": 59.06072941264018}, {"code": "createFullLayer: function (children){\n\t    var layer = this.game.add.flexLayer();\n    layer.position.set(0, 0);\n    layer.bounds.set(0, 0, this.game.width, this.game.height);\n    layer.scale.set(1, 1);\n    this.game.world.add(layer);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 54.02873363223144}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t    if (rect) {\n        if (copy) {\n            this.cropRect = rect.clone();\n        } else {\n            this.cropRect.x = rect.x;\n            this.cropRect.y = rect.y;\n            this.cropRect.width = rect.width;\n            this.cropRect.height = rect.height;\n        }\n        this.updateCrop();\n    } else {\n        this.resetFrame();\n    }\n}", "CodeBleu_score": 31.421873970799226}, {"code": "crop: function (rect, copy){\n\t    var rect = rect || {\n        x: 0,\n        y: 0,\n        width: this.width,\n        height: this.height\n    };\n    var copy = copy || false;\n    if (copy) {\n        this.cropRect = rect;\n        this.updateCrop();\n    } else {\n        this.cropRect = null;\n        this.resetFrame();\n    }\n    return this;\n}", "CodeBleu_score": 29.910761098460505}, {"code": "crop: function (rect, copy){\n\t    var self = this;\n    var crop = self.get('crop');\n    var frame = self.get('frame');\n    var cropRect = null;\n    var frameRect = null;\n    if (rect) {\n        cropRect = self.getRect(crop);\n        frameRect = self.getRect(frame);\n        if (copy) {\n            cropRect.x = rect.x;\n            cropRect.y = rect.y;\n            cropRect.width = rect.width;\n            cropRect.height = rect.height;\n        } else {\n            frameRect.x = rect.x;\n            frameRect.y = rect.y;\n            frameRect.width = rect.width;\n            frameRect.height = rect.height;\n        }\n        self.set('crop', cropRect);\n        self.set('frame', frameRect);\n    } else {\n        if (copy) {\n            self.set('crop', null);\n        } else {\n            self.set('frame', null);\n        }\n    }\n    if (copy) {\n        self.updateCrop();\n    } else {\n        self.resetFrame();\n    }\n}", "CodeBleu_score": 26.208013228194915}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t  this.moveH(x, wrap);\n  this.moveV(y, wrap);\n  return this;\n}", "CodeBleu_score": 36.82833036433193}, {"code": "move: function (x, y, wrap){\n\t    if (x !== 0) {\n        this.moveH(x, wrap);\n    }\n    if (y !== 0) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 84.73897543219616}, {"code": "move: function (x, y, wrap){\n\t    if (x) {\n        this.moveH(x, wrap);\n    }\n    if (y) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 60.84056819218002}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n    if (this.frozenFrames)\n    {\n        return false;\n    }\n\n    var key = this.key + '_' + state;\n    var frame = this.game.cache.getFrame(key);\n\n    if (frame)\n    {\n        this.frame = frame.index;\n        return true;\n    }\n\n    return false;\n\n}", "CodeBleu_score": 36.199912882232724}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    if (this.frozenFrames) {\n        return false;\n    }\n\n    var key = this.key + '_' + state;\n    var frame = this.frames[key];\n\n    if (typeof frame === 'string' || typeof frame === 'number') {\n        this.frame = frame;\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 49.03526003270953}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    if (this.frozenFrames) {\n        return false;\n    }\n\n    var frame = this.frames[state];\n\n    if (typeof frame === 'string' || typeof frame === 'number') {\n        this.frame = frame;\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 44.590546417848124}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    // Create a new Phaser.Weapon plugin instance\n    var weapon = this.game.plugins.add(Phaser.Weapon);\n\n    // If a custom bullet class is provided, set it as the default bullet class for the weapon\n    if (bulletClass) {\n        weapon.bulletClass = bulletClass;\n    }\n\n    // Create the specified quantity of bullets with the given parameters\n    weapon.createBullets(quantity, key, frame, group);\n\n    // Return the configured weapon instance\n    return weapon;\n}", "CodeBleu_score": 90.14225409976095}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    var weapon = this.game.plugins.add(Phaser.Plugin.Weapon);\n\n    if (bulletClass) {\n        weapon.bulletClass = bulletClass;\n    }\n\n    weapon.createBullets(quantity, key, frame, group);\n\n    return weapon;\n\n}", "CodeBleu_score": 80.69703575911736}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n    //  Create the weapon instance\n    var weapon = this.game.plugins.add(Phaser.Weapon);\n\n    //  Set the bullet class if given\n    if (bulletClass) {\n        weapon.bulletClass = bulletClass;\n    }\n\n    //  Create the bullets\n    weapon.createBullets(quantity, key, frame, group);\n\n    return weapon;\n\n}", "CodeBleu_score": 90.14225409976095}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull) {\n        var v1 = points[1].clone().subtract(points[0].x, points[0].y, points[0].z);\n        var v2 = points[2].clone().subtract(points[0].x, points[0].y, points[0].z);\n        var normal = new THREE.Vector3().crossVectors(v1, v2).normalize();\n        if (normal.dot(this.camera.position) > 0) {\n            return;\n        }\n    }\n\n    this.lineStyle(1, 0x000000, 1);\n    this.beginFill(0x000000, 1);\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n    this.endFill();\n}", "CodeBleu_score": 36.29677986806695}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull) {\n\n        var v1 = points[1].clone().subtract(points[0]);\n        var v2 = points[2].clone().subtract(points[0]);\n\n        var normal = new Phaser.Point3D(\n            v1.y * v2.z - v1.z * v2.y,\n            v1.z * v2.x - v1.x * v2.z,\n            v1.x * v2.y - v1.y * v2.x\n        );\n\n        if (normal.dot(this.camera.position) > 0) {\n            return;\n        }\n\n    }\n\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n\n}", "CodeBleu_score": 37.59171535305181}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    var x0 = points[0].x;\n    var y0 = points[0].y;\n    var x1 = points[1].x;\n    var y1 = points[1].y;\n    var x2 = points[2].x;\n    var y2 = points[2].y;\n\n    if (cull) {\n\n        var vx0 = x1 - x0;\n        var vy0 = y1 - y0;\n        var vx1 = x2 - x0;\n        var vy1 = y2 - y0;\n\n        var normal = {\n            x: vy0 * vx1 - vx0 * vy1,\n            y: vx0 * vy1 - vy0 * vx1,\n            z: vx0 * vy1 - vy0 * vx1\n        };\n\n        var dot = this.camera.x * normal.x + this.camera.y * normal.y + this.camera.z * normal.z;\n\n        if (dot >= 0)\n            return;\n\n    }\n\n    this.moveTo(x0, y0);\n    this.lineTo(x1, y1);\n    this.lineTo(x2, y2);\n    this.lineTo(x0, y0);\n\n}", "CodeBleu_score": 32.25073929797107}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t    if (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n        this.stopPendingSourceChange();\n        this.updateVideoTexture();\n    } else {\n        this.retryCounter--;\n        if (this.retryCounter <= 0) {\n            console.warn(\"Video failed to start downloading after \" + this.maxRetries + \" retries.\");\n        } else {\n            setTimeout(this.checkVideoProgress, 1000);\n        }\n    }\n}", "CodeBleu_score": 34.90137266191532}, {"code": "checkVideoProgress: function (){\n\t    var self = this;\n\n    if (self.video.readyState === self.video.HAVE_ENOUGH_DATA) {\n        self.video.pause();\n        self.video.removeAttribute('src');\n        self.video.load();\n        self.video.src = self.videoSrc;\n        self.video.play();\n        self.video.addEventListener('canplaythrough', function () {\n            self.videoReady = true;\n            self.updateTexture();\n        }, false);\n    } else if (self.videoRetries > 0) {\n        self.videoRetries--;\n        setTimeout(function () {\n            self.checkVideoProgress();\n        }, 1000);\n    } else {\n        console.warn('Video failed to start downloading.');\n    }\n}", "CodeBleu_score": 20.809809279753523}, {"code": "checkVideoProgress: function (){\n\t    if (this.video.readyState === 4) {\n        this.video.pause();\n        this.video.currentTime = 0;\n        this.video.load();\n        this.video.play();\n        this.stopPendingSourceChange();\n        this.updateTexture();\n    } else {\n        if (this.videoRetries > 0) {\n            this.videoRetries--;\n            setTimeout(this.checkVideoProgress, 100);\n        } else {\n            console.warn('Video failed to start downloading.');\n        }\n    }\n}", "CodeBleu_score": 37.99371333404864}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t    if (this._state !== 'up') {\n        return;\n    }\n\n    this._state = 'down';\n    this._repeatCount = 0;\n    this._repeatTimer = 0;\n    this._repeatInterval = 0;\n    this._repeatDelay = 0;\n\n    if (event) {\n        this._modifiers = this.getModifiers(event);\n    }\n\n    this.dispatchEvent('onDown', {\n        state: this._state,\n        value: value\n    });\n}", "CodeBleu_score": 28.59111728911674}, {"code": "start: function (event, value){\n\t  if (this.state !== \"down\") {\n    this.state = \"down\";\n    this.timing = {\n      down: Date.now(),\n      up: 0,\n      delay: 0,\n      repeat: 0\n    };\n    this.repeat = {\n      count: 0,\n      delay: 0\n    };\n    if (event) {\n      this.modifiers = {\n        alt: event.altKey,\n        shift: event.shiftKey,\n        ctrl: event.ctrlKey\n      };\n    }\n    this.dispatch(\"onDown\", this.state, value);\n  }\n}", "CodeBleu_score": 34.29203339318592}, {"code": "start: function (event, value){\n\t    if (this.state != 'down') {\n        this.state = 'down';\n        this.startTime = this.now();\n        this.lastTime = this.startTime;\n        this.downCount = 0;\n        this.repeatCount = 0;\n        this.event = event;\n        this.value = value;\n        if (event) {\n            this.alt = event.altKey;\n            this.shift = event.shiftKey;\n            this.ctrl = event.ctrlKey;\n        }\n        this.dispatchEvent('onDown', this.state, this.value);\n    }\n}", "CodeBleu_score": 52.79870453569542}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t    this.mouseDown = event;\n    if (this.options.preventDefault) {\n        event.preventDefault();\n    }\n    if (this.options.onMouseDown) {\n        this.options.onMouseDown(event);\n    }\n    if (this.options.enableInput) {\n        this.initMouse(event);\n    }\n}", "CodeBleu_score": 41.571294260250134}, {"code": "onMouseDown: function (event){\n\t    this.mouseDown = event;\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n    if (this.onMouseDownCallback) {\n        this.onMouseDownCallback(event);\n    }\n    if (this.inputEnabled) {\n        this.initMousePointer(event);\n    }\n}", "CodeBleu_score": 42.89959041240612}, {"code": "onMouseDown: function (event){\n\t    this.mouseDownEvent = event;\n    if (this.preventDefaultMouseDown) {\n        event.preventDefault();\n    }\n    if (this.inputEnabled) {\n        this.initMousePointer(event);\n    }\n    if (this.onDownCallback) {\n        this.onDownCallback(event);\n    }\n}", "CodeBleu_score": 43.22365279512336}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t    if (this.inputEnabled) {\n        this.input.mouse.mouseUp(event);\n    }\n}", "CodeBleu_score": 27.690734113795095}, {"code": "onMouseUpGlobal: function (event){\n\t    this.mouseDownEvent = event;\n    if (this.options.preventDefault) {\n        event.preventDefault();\n    }\n    if (this.mouseDownCallback) {\n        this.mouseDownCallback(event);\n    }\n    if (this.options.inputEnabled) {\n        this.mouseDownIdentifier = event.identifier;\n        this.startMousePointerInput();\n    }\n}", "CodeBleu_score": 49.45848611389732}, {"code": "onMouseUpGlobal: function (event){\n\t    // Store the event\n    this.mouseEvent = event;\n\n    // Prevent default behavior if specified\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n\n    // Invoke the mouse down callback if defined\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback(this.mouseEvent);\n    }\n\n    // If input is enabled, assign an identifier to the event and start the mouse pointer input process\n    if (this.inputEnabled) {\n        this.mouseEvent.identifier = this.mouseEvent.identifier || this.mouseEvent.pointerId;\n        this.startMouseInput(this.mouseEvent);\n    }\n}", "CodeBleu_score": 36.74636811969323}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t    if (this.gameInput && this.enabled) {\n        this.touchEvent = event;\n        if (this.touchEnterCallback) {\n            this.touchEnterCallback(event);\n        }\n        if (this.preventDefault) {\n            event.preventDefault();\n        }\n    }\n}", "CodeBleu_score": 65.86281246128104}, {"code": "onTouchEnter: function (event){\n\t  if (!this.gameInputEnabled || !this.enabled) {\n    return;\n  }\n  this.touchEnterEvent = event;\n  if (this.touchEnterCallback) {\n    this.touchEnterCallback(event);\n  }\n  if (this.preventDefaultOnTouchEnter) {\n    event.preventDefault();\n  }\n}", "CodeBleu_score": 66.91141249503639}, {"code": "onTouchEnter: function (event){\n\t    if (!this.gameInput || !this.enabled) {\n        return;\n    }\n\n    this.touchEnterEvent = event;\n\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback(this, event);\n    }\n\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n}", "CodeBleu_score": 60.80866664740769}]}
