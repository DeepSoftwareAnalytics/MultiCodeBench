{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if attachment_ids:\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids if attachment_id.isdigit()]\n        if attachment_ids:\n            # Verify read access rights and rules for the attachments\n            attachments = request.env['ir.attachment'].sudo().browse(attachment_ids)\n            attachments.check_access_rights('read')\n            attachments.check_access_rule('read')\n\n            # Build the zip file\n            zip_buffer = io.BytesIO()\n            with zipfile.ZipFile(zip_buffer, 'w') as zip_file:\n                for attachment in attachments:\n                    zip_file.writestr(attachment.name, attachment.raw)\n\n            # Prepare HTTP headers for the zip file\n            headers = _get_zip_headers(zip_buffer.getvalue(), 'attachments.zip')\n\n            # Return the zip file as an HTTP response\n            return request.make_response(zip_buffer.getvalue(), headers=headers)\n\n    return request.not_found()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 38.32167648515195}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids', [])\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    # verify read access rights and rules for the attachments\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    # build zip file from attachments' content\n    zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, 'w') as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.name, attachment.datas)\n    # prepare HTTP headers for the zip file\n    headers = _get_zip_headers(zip_buffer.getvalue(), 'attachments.zip')\n    # return the zip file as an HTTP response\n    return request.make_response(zip_buffer.getvalue(), headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 32.94602347070834}, {"code": "def export_zip_documents(self, **args)\n\t\n\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = self.env['ir.attachment'].browse([int(x) for x in self.env['ir.attachment'].search([('id', 'in', args.get('attachment_ids', []))]).ids])\n\n    # Verify read access rights and rules for the attachments\n    attachment_ids.check_access_rights('read')\n    attachment_ids.check_access_rule('read')\n\n    # Build zip file from attachments' content\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w') as zip_file:\n        for attachment in attachment_ids:\n            zip_file.writestr(attachment.name, attachment.raw)\n\n    # Prepare HTTP headers for the zip file\n    zip_headers = _get_zip_headers(zip_content.getvalue(), 'attachments.zip')\n\n    # Return zip file as HTTP response\n    return request.make_response(zip_content.getvalue(), headers=zip_headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 33.71203823130562}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, domain=[], url=\"/my/invoices\")\n    values['invoices'](offset=self._items_per_page * (page - 1))\n    request.session['my_invoices_history'] = values['invoices'].ids[:100]\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 42.522145204387776}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = values['pager']['ids']\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n", "CodeBleu_score": 31.792742661613634}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = values['pager']['ids']\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 31.792742661613634}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if not has_unsplash_key_installed():\n        return request.redirect('/my')\n\n    session_info = self._get_session_info()\n    if invoice_sudo.move_type == 'out_invoice':\n        if invoice_sudo.state not in ['draft', 'posted']:\n            return request.redirect('/my')\n    else:\n        if invoice_sudo.state != 'posted':\n            return request.redirect('/my')\n\n    if report_type == 'zip':\n        report = request.env.ref('account.account_invoices')\n        context = dict(self.env.context, active_ids=invoice_sudo.ids)\n        vals = report.with_context(**context).sudo()._get_report_values(invoice_sudo, self._get_report_base_filename(invoice_sudo))\n        if not vals.get('attachments'):\n            return request.redirect('/my')\n        pdf = vals.get('pdf_data')\n        if not pdf:\n            return request.redirect('/my')\n        pdfhttpheaders = [\n            ('Content-Type', 'application/pdf'),\n            ('Content-Length', len(pdf)),\n        ]\n        return request.make_response(pdf, headers=pdfhttpheaders)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, session_info, report_type, download)\n    return request.render(\"portal.portal_my_invoice\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 54.36740321130118}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.action_report_invoice', download=download)\n\n    if download:\n        return self._portal_prepare_attachment_download(invoice_sudo.invoice_print_pdf())\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render('portal.portal_my_invoice', values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 35.98200829686647}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if not access_token or not invoice_sudo.is_move_sent():\n        return request.redirect('/my')\n\n    if download:\n        return self._portal_get_invoice_report(invoice_sudo, report_type)\n\n    return request.render(\"portal.portal_invoice_page\", self._invoice_get_page_view_values(invoice_sudo, access_token, **kw))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.666046683767306}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', False)]\n    if company and company.account_sale_tax_id:\n        domain = ['|', ('company_id', '=', company.id), ('company_id', '=', False)]\n    products = self.env['product.template'].search(domain)\n    if company and company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    if company and company.account_purchase_tax_id:\n        products.write({'supplier_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n    return products\n\n\n\n", "CodeBleu_score": 23.635347062495622}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [(\"company_id\", \"=\", self.id)]\n    products = self.env[\"product.template\"].search(domain)\n    if self.account_sale_tax_id:\n        products.write({\"taxes_id\": [(6, 0, self.account_sale_tax_id.ids)]})\n    if self.account_purchase_tax_id:\n        products.write({\"supplier_taxes_id\": [(6, 0, self.account_purchase_tax_id.ids)]})\n    return products\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 17.804824623787987}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', self.env.company.id)]\n    if company:\n        domain.append(('company_id', '=', False))\n    products = self.env['product.product'].search(domain)\n    if not products:\n        return\n    if self.env.company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, self.env.company.account_sale_tax_id.ids)]})\n    if self.env.company.account_purchase_tax_id:\n        products.write({'supplier_taxes_id': [(6, 0, self.env.company.account_purchase_tax_id.ids)]})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 26.527983951233104}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env[\"account.account\"].search([(\"company_id\", \"=\", company.id), (\"code\", \"=\", xml_id)], limit=1)\n    if not account:\n        domain = [(\"deprecated\", \"=\", False), (\"company_id\", \"=\", company.id)]\n        if account_type:\n            domain += [(\"user_type_id.type\", \"=\", account_type)]\n        account = self.env[\"account.account\"].search(domain, limit=1)\n    return account\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.11651140417559}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('code', '=', xml_id),\n    ], limit=1)\n    if account:\n        return account\n    account = self.env['account.account'].search([\n        ('company_id', '=', company.id),\n        ('user_type_id.type', '=', account_type),\n    ], limit=1)\n    if account:\n        return account\n    account = self.env['account.account'].search([\n        ('company_id', 'in', [company.id, False]),\n        ('user_type_id.type', '=', account_type),\n    ], limit=1)\n    return account", "CodeBleu_score": 55.18341724505803}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env[\"account.account\"].search(\n        [(\"company_id\", \"=\", company.id), (\"code\", \"=\", xml_id)], limit=1\n    )\n    if account:\n        return account\n    domain = [(\"deprecated\", \"=\", False)]\n    if account_type:\n        domain += [(\"user_type_id.type\", \"=\", account_type)]\n    domain += company.compute_account_ids.filtered(\n        lambda a: a.deprecated == False\n    )\n    return domain[0]", "CodeBleu_score": 32.3332420096592}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company in self:\n        accounts = self.search([\n            ('company_id', '=', company.id),\n            ('account_type', '=', 'Current Year Earnings'),\n        ])\n        if len(accounts) > 1:\n            raise ValidationError(\n                _('There can only be one account with \"Current Year Earnings\" type for each company.'))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 35.52501122777137}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company, accounts in self.filtered(lambda a: a.account_type == 'current_year_earnings').groupby('company_id'):\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account with \"Current Year Earnings\" type for each company.'))\n\n\n\n", "CodeBleu_score": 21.861013920242844}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company in self:\n        accounts = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.name', '=', 'Current Year Earnings')])\n        if len(accounts) > 1:\n            raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company.'))\n\n\n\n\n", "CodeBleu_score": 34.62061398981311}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_frequency_ids'):\n        return models.Model._search(self, [], offset=0, limit=limit, order=order, access_rights_uid=None)\n    return super()._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)", "CodeBleu_score": 18.72203936834968}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_frequency_ids'):\n        return models.Model.search(self._cr, self._uid, [('id', 'in', self._context.get('partner_frequency_ids'))], limit=limit, order=order)\n    return super(ResPartnerBank, self)._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.011773809569107}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('partner_frequency_ids'):\n        return models.Model._search(self, [], offset=0, limit=limit, order=order, count=False, access_rights_uid=None)\n    return super(AccountAccount, self)._name_search(name=name, domain=domain, operator=operator, limit=limit, order=order)\n\n\n\n\n", "CodeBleu_score": 19.551097715326005}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded) + ('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 78.8120198794498}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    line_ids = self.env['account.move.line'].search([('sale_line_ids', 'in', self.order_line.ids)]).filtered(lambda line: line.display_type not in ('line_section', 'line_note'))\n    action = self.env['ir.actions.act_window']._for_xml_id('account.action_move_out_invoice_type')\n    if not line_ids:\n        action.update({'display_name': _('Customer Invoices'), 'domain': [('id', 'in', [])]})\n        return action\n    invoices = self.env['account.move'].search([('line_ids', 'in', line_ids.ids), ('move_type', 'in', ('out_invoice', 'out_refund', 'out_receipt')), ('state', 'not in', ('draft', 'cancel'))])\n    action.update({'display_name': _('Customer Invoices'), 'domain': [('id', 'in', invoices.ids)]})\n    if len(invoices) == 1:\n        action.update({'views': [(self.env.ref('account.view_move_form').id, 'form')], 'res_id': invoices.id})\n    return action", "CodeBleu_score": 34.61873681915269}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    [data] = self.env['account.move.line'].read_group([('sale_type_id', '=', self.id)], ['move_id:array_agg'], [])\n    if not data['move_id']:\n        return {\n            'type': 'ir.actions.act_window',\n            'name': _('Customer Invoices'),\n            'domain': [('account_internal_type', '=', 'receivable')],\n            'context': ({\n                'search_default_unreconciled': 1,\n                'search_default_receivable_accounts_only': 1,\n                'search_default_in_invoice': 1,\n                'default_move_type': 'in_invoice',\n                'default_journal_id': self.env['account.journal'].search([('type', '=', 'sale')], limit=1).id,\n            } if self.env.context.get('default_move_type', 'in_invoice') == 'in_invoice' else {\n                'search_default_unreconciled': 1,\n                'search_default_receivable_accounts_only': 1,\n                'search_default_out_invoice': 1,\n                'default_move_type': 'out_invoice',\n                'default_journal_id': self.env['account.journal'].search([('type', '=', 'purchase')], limit=1).id,\n            })\n        }\n    action = self.env['ir.actions.act_window']._for_xml_id('account.action_move_journal_line')\n    action['context'] = {\n        'default_move_type': 'entry',\n        'journal_id': self.env['account.journal'].search([('type', '=', 'sale')], limit=1).id,\n        'default_sale_type_id': self.id,\n        'default_company_id': self.company_id.id,\n    }\n    action['domain'] = [('id', 'in', data", "CodeBleu_score": 25.028777911924337}, {"code": "def action_view_invoice(self)\n\t\n    action = self.action_view_invoice()\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env['account.journal'].search([('type', '=', 'sale')], limit=1).id\n    }\n    action['context'].update({\n        'default_invoice_line_ids': [(0, 0, line_values) for line_values in self._get_invoice_line_values()]\n    })\n    if self.env.context.get('open_invoices', False) and self[0].state in ('sale', 'done'):\n        action['domain'] = [('id', 'in', self.invoice_ids.ids)]\n    else:\n        action['domain'] = [('id', 'in', self.mapped('invoice_ids').filtered(lambda x: x.state not in ('draft', 'cancel')).ids)]\n    return action\n\n\n\n", "CodeBleu_score": 35.032998128923765}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    action = self.action_view_vendor_bill()\n    action['context'] = {\n        'default_move_type': 'in_invoice',\n        'create': False,\n    }\n    if len(self) == 1:\n        action['context'].update({\n            'default_partner_id': self.partner_id.id,\n            'default_purchase_id': self.id,\n        })\n    else:\n        action['domain'] = [('id', 'in', self.mapped('invoice_ids').ids)]\n    return action", "CodeBleu_score": 23.410384455201942}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    lines = self.env['account.move.line'].search([('purchase_type', '=', 'purchase'), ('purchase_id', '=', self.id)])\n    move_ids = lines.mapped('move_id').ids\n    action = {\n        'type': 'ir.actions.act_window',\n        'views': [(self.env.ref('account.view_move_form').id, 'form'), (self.env.ref('account.view_move_tree').id, 'tree')],\n        'view_mode': 'tree,form',\n        'name': _('Vendor Bills'),\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': \"{'create': False, 'default_move_type': 'in_invoice'}\",\n    }\n    return action", "CodeBleu_score": 36.3465772740568}, {"code": "def action_view_vendor_bill(self)\n\t\n\n    action = self.action_view_vendor_bill()\n    action['context'] = {'default_move_type': 'in_invoice'}\n    if not action['context'].get('create', True):\n        action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n        if 'views' in action:\n            action['views'] = [(state, view) for state, view in action['views'] if view != 'form']\n    else:\n        action['context'] = {'default_move_type': 'in_invoice'}\n    return action", "CodeBleu_score": 23.85058476538171}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.54198523107293}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    # Check if the configuration parameter to skip bank account creation is set to True\n    if self.env['ir.config_parameter'].sudo().get_param('skip_bank_account_creation') == 'True':\n        # If the configuration parameter is set to True, return an empty bank account record\n        return self.env['res.partner.bank'].browse()\n\n    # Get the current company ID\n    company_id = self.env.company.id\n\n    # Search for an existing bank account with the same account number and partner ID\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', company_id)\n    ])\n\n    # If no bank account is found, create a new one\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': company_id\n        })\n\n    # Return the bank account filtered by the company ID\n    return bank_account.filtered(lambda b: b.company_id.id == company_id)\n\n", "CodeBleu_score": 59.65388369976857}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if not self.company_id.create_bank_account:\n        return self.env['res.partner.bank'].browse()\n    bank_account = self.partner_bank_id.filtered(\n        lambda b: b.company_id == self.company_id)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.account_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n            'currency_id': self.currency_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 50.76725226437747}, {"code": "def _find_or_create_bank_account(self)\n\t\n    # Check if the bank account creation should be skipped\n    if self.env['ir.config_parameter'].sudo().get_param('skip_bank_account_creation'):\n        return self.env['account.bank.account'].browse()\n\n    # Search for an existing bank account with the same account number and partner ID\n    bank_account = self.env['account.bank.account'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ], limit=1)\n\n    # Create a new bank account if none is found\n    if not bank_account:\n        bank_account = self.env['account.bank.account'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n\n    return bank_account\n\n", "CodeBleu_score": 55.512677786772045}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if currency and currency != self.currency_id:\n        amount_currency = currency._convert(amount_currency, self.currency_id, self.company_id, self.date)\n    if self.currency_id != self.company_currency_id:\n        balance = self.currency_id._convert(balance, self.company_currency_id, self.company_id, self.date)\n    if self.currency_id != self.company_currency_id or self.currency_id != currency:\n        amount_currency = self.company_currency_id._convert(amount_currency, currency, self.company_id, self.date)\n    if self.currency_id != self.company_currency_id or self.currency_id != self.foreign_currency_id:\n        balance = self.company_currency_id._convert(balance, self.foreign_currency_id, self.company_id, self.date)\n    return {\n        'transaction_amount': self.amount_currency if self.foreign_currency_id else self.amount,\n        'transaction_currency': self.foreign_currency_id or self.currency_id,\n        'journal_amount': balance,\n        'journal_currency': self.currency_id,\n        'company_amount': amount_currency,\n        'company_currency': currency,\n    }\n\n", "CodeBleu_score": 21.759727510561035}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n\n    with_context = self if self._context.get('active_model') else self.with_context(active_model=self._name)\n\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = with_context._get_accounting_amounts_and_currencies()\n\n    if currency:\n        if currency == company_currency:\n            balance = company_amount\n        elif currency == journal_currency:\n            balance = journal_amount\n        else:\n            balance = journal_currency._convert(journal_amount, currency, self.company_id, self.date)\n\n    if not amount_currency:\n        amount_currency = transaction_currency._convert(transaction_amount, amount_currency, self.company_id, self.date)\n\n    return {\n        'currency': currency,\n        'balance': balance,\n        'amount_currency': amount_currency,\n    }", "CodeBleu_score": 24.270933928284517}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    with_context(self._set_context()) as new_self:\n        transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = new_self._get_accounting_amounts_and_currencies()\n        if currency and currency != transaction_currency:\n            if currency == journal_currency:\n                transaction_amount = journal_amount\n            else:\n                transaction_amount = journal_amount * currency._convert(1.0, transaction_currency, currency, self.company_id, self.date)\n        if not self.foreign_currency_id:\n            return {\n                'amount_currency': transaction_amount,\n                'balance': balance,\n            }\n        if self.foreign_currency_id == company_currency:\n            amount_currency = company_amount\n        else:\n            amount_currency = company_amount * company_currency._convert(1.0, self.foreign_currency_id, company_currency, self.company_id, self.date)\n        return {\n            'amount_currency': transaction_amount,\n            'balance': balance,\n            'amount_currency_company_currency': amount_currency,\n        }", "CodeBleu_score": 31.48820826782207}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ['bank', 'cash']:\n            methods = journal._default_outbound_payment_methods()\n            for method in methods:\n                journal.outbound_payment_method_line_ids = [(0, 0, {\n                    'payment_method_id': method.id,\n                    'journal_id': journal.id,\n                })]", "CodeBleu_score": 41.7547630839878}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = [\n                (5, 0, 0),\n                (0, 0, {\n                    'payment_method_id': method.id,\n                    'journal_id': journal.id,\n                }) for method in journal._default_outbound_payment_methods()\n            ]", "CodeBleu_score": 42.584285982635706}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            methods = self.env.ref('account.account_payment_method_manual_out')\n            for method in methods:\n                journal.outbound_payment_method_line_ids = [(0, 0, {'payment_method_id': method.id})]\n\n", "CodeBleu_score": 37.52381375306049}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        if move.invoice_date:\n            if not move.is_sale_document(include_receipts=True):\n                accounting_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n                if accounting_date != move.date:\n                    move.date = accounting_date\n                    move._recompute_dynamic_lines(recompute_all_taxes=True)\n\n\n\n", "CodeBleu_score": 51.2728259915746}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date:\n            if not move.invoice_date:\n                move.date = fields.Date.context_today(move)\n            else:\n                if not move.is_sale_document(include_receipts=True):\n                    move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n                else:\n                    move.date = move.invoice_date\n        if move.date != move._cache.get('date'):\n            move._cache.update({\n                'date': move.date,\n                'invoice_date': move.invoice_date,\n                'highest_name': move.highest_name,\n                'accounting_date': move.accounting_date,\n                'tax_lock_date': move.tax_lock_date,\n                'sequence_prefix': move.sequence_prefix,\n                'sequence_number': move.sequence_number,\n            })\n            move.invalidate_model(['date', 'invoice_date', 'highest_name', 'accounting_date', 'tax_lock_date', 'sequence_prefix', 'sequence_number'])\n            move.env.add_to_compute(move._fields['date'], move)\n            move.env.add_to_compute(move._fields['invoice_date'], move)\n            move.env.add_to_compute(move._fields['highest_name'], move)\n            move.env.add_to_compute(move._fields['accounting_date'], move)\n            move.env.add_to_compute(move._fields['tax_lock_date'], move)\n            move.env.add_to_compute(move._fields['sequence_prefix'], move)\n            move.env.add_to_compute(move._fields['sequence_number'], move)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 38.18995063490425}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.invoice_date:\n            if not move.date:\n                move.date = fields.Date.context_today(move)\n        elif not move.is_sale_document(include_receipts=True):\n            accounting_date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            if accounting_date != move.date:\n                move.date = accounting_date\n                move._recompute_dynamic_lines(recompute_all_taxes=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 50.68328775349356}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.with_context(force_company=move.company_id.id).property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.fiscal_position_id.payment_term_id or move.partner_id.with_context(force_company=move.company_id.id).property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False", "CodeBleu_score": 45.401814165664746}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 52.6280379827765}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 52.6280379827765}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group = self.env['account.tax.group'].search([('country_id', '=', tax.company_id.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n        tax.tax_group_id = tax_group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.823484576360908}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([])\n    tax_groups_by_country_and_company = {}\n    for tax_group in tax_groups:\n        key = (tax_group.country_id, tax_group.company_id)\n        if key not in tax_groups_by_country_and_company:\n            tax_groups_by_country_and_company[key] = []\n        tax_groups_by_country_and_company[key].append(tax_group)\n    for tax in self:\n        key = (tax.country_id, tax.company_id)\n        if key in tax_groups_by_country_and_company:\n            for tax_group in tax_groups_by_country_and_company[key]:\n                if tax_group.country_id == tax.country_id and tax_group.company_id == tax.company_id:\n                    tax.tax_group_id = tax_group\n                    break\n        else:\n            for tax_group in tax_groups_by_country_and_company.get((None, tax.company_id), []):\n                if tax_group.company_id == tax.company_id:\n                    tax.tax_group_id = tax_group\n                    break\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 28.248997949711207}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_id = False\n        if tax.country_id:\n            tax_groups = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n            if not tax_groups:\n                tax_groups = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n            if tax_groups:\n                tax_group_id = tax_groups[0].id\n        tax.tax_group_id = tax_group_id", "CodeBleu_score": 27.737737553651172}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session by accessing the login URL\n    self.session.get(url)\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force,\n    }\n\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n\n    # Upload the module file to the server\n    response = self.session.post(\n        urljoin(url, 'base_import_module/login_upload'),\n        data=data,\n        files={'file': module_data},\n    )\n\n    # Check if the server has the required module installed or is outdated\n    if response.status_code == 400:\n        raise Exception(response.text)\n\n    return response.text", "CodeBleu_score": 49.05175550136015}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    self.session.db = db\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n    }\n    if force:\n        data[\"force\"] = \"1\"\n    with open(module_file, \"rb\") as f:\n        data[\"mod_file\"] = f.read()\n    response = self.session.post(\n        url + \"/base_import_module/login_upload\", data=data\n    )\n    if \"Error\" in response.text:\n        raise Exception(response.text)\n    return response.text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 37.839217815184064}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    self.session.db = db\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n    }\n    if force:\n        data['force'] = '1'\n    with open(module_file, 'rb') as f:\n        data['mod_file'] = f.read()\n    response = self.session.post(url + '/base_import_module/login_upload', data=data)\n    if 'Error: The server does not have the required module installed or is outdated.' in response.text:\n        raise Exception('The server does not have the required module installed or is outdated.')\n    return response.text", "CodeBleu_score": 49.337849394245644}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n\n    db_name = config['db_name']\n    overwrite_existing = config.getboolean('overwrite_existing')\n\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr)\n\n        # Load translation files\n        importer.load(i18n_import_module.get_modules_with_translations())\n\n        # Save translations\n        importer.save(overwrite=overwrite_existing)", "CodeBleu_score": 35.10930812759199}, {"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['overwrite']\n    registry = odoo.registry(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.addons.base.models.ir_translation.TranslationImporter(cr)\n        path = odoo.modules.get_module_resource('my_module', 'i18n')\n        importer.load_module_terms(path, 'my_module', overwrite=overwrite)", "CodeBleu_score": 31.8553254497902}, {"code": "def import_translation()\n\t\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    with registry(db_name).cursor() as cr:\n        importer = TranslationImporter(cr)\n        importer.load(i18n_module_name)\n        importer.save(overwrite)", "CodeBleu_score": 22.98072258765239}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    node = Node(name, info, self.depth + 1)\n    if node not in self.children:\n        self.children.append(node)\n        node.parent = self\n        if hasattr(self, \"is_expanded\"):\n            node.is_expanded = self.is_expanded\n        if hasattr(self, \"is_selected\"):\n            node.is_selected = self.is_selected\n        if hasattr(self, \"is_highlighted\"):\n            node.is_highlighted = self.is_highlighted\n        if hasattr(self, \"is_draggable\"):\n            node.is_draggable = self.is_draggable\n        if hasattr(self, \"is_droppable\"):\n            node.is_droppable = self.is_droppable\n        if hasattr(self, \"is_deletable\"):\n            node.is_deletable = self.is_deletable\n        if hasattr(self, \"is_renamable\"):\n            node.is_renamable = self.is_renamable\n        if hasattr(self, \"is_editable\"):\n            node.is_editable = self.is_editable\n        if hasattr(self, \"is_selectable\"):\n            node.is_selectable = self.is_selectable\n        if hasattr(self, \"is_highlightable\"):\n            node.is_highlightable = self.is_highlightable\n        if hasattr(self, \"is_draggable\"):\n            node.is_draggable = self.is_draggable\n        if hasattr(self, \"is_droppable\"):\n            node.is_droppable = self.is_droppable\n        if hasattr(self, \"is_deletable\"):\n            node.is_deletable = self.is_deletable\n        if hasattr(self, \"is_renamable\"):\n            node.is_renamable = self.is_renamable\n        if hasattr(self, \"is_editable\"):\n            node.is_editable = self.is_", "CodeBleu_score": 30.10365731980834}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n    if self.parent:\n        child.parent = self.parent\n        child.parent_name = self.parent_name\n        child.parent_info = self.parent_info\n        child.parent_depth = self.parent_depth\n        child.parent_children = self.parent_children\n        child.parent_children_names = self.parent_children_names\n        child.parent_children_infos = self.parent_children_infos\n        child.parent_children_depths = self.parent_children_depths\n        child.parent_children_children = self.parent_children_children\n        child.parent_children_children_names = self.parent_children_children_names\n        child.parent_children_children_infos = self.parent_children_children_infos\n        child.parent_children_children_depths = self.parent_children_children_depths\n    self.children.sort(key=lambda x: x.name)\n    return child\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 34.951011789284685}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n    child.parent = self\n    child.parent_name = self.name\n    child.parent_info = self.info\n    child.parent_depth = self.depth\n    child.parent_children = self.children\n    child.parent_children_names = self.children_names\n    child.parent_children_infos = self.children_infos\n    child.parent_children_depths = self.children_depths\n    child.parent_children_parents = self.children_parents\n    child.parent_children_parents_names = self.children_parents_names\n    child.parent_children_parents_infos = self.children_parents_infos\n    child.parent_children_parents_depths = self.children_parents_depths\n    child.parent_children_parents_children = self.children_parents_children\n    child.parent_children_parents_children_names = self.children_parents_children_names\n    child.parent_children_parents_children_infos = self.children_parents_children_infos\n    child.parent_children_parents_children_depths = self.children_parents_children_depths\n    child.parent_children_parents_children_parents = self.children_parents_children_parents\n    child.parent_children_parents_children_parents_names = self.children_parents_children_parents_names\n    child.parent_children_parents_children_parents_infos = self.children_parents_children_parents_infos\n    child.parent_children_parents_children_parents_depths = self.children_parents_children_parents_depths\n    child.parent_children_parents_children_parents_children = self.children_parents_children_parents_children\n    child.parent_children_parents_children_parents_children_names = self.children_parents_children_parents_children_names\n    child.parent_children_parents_children_parents_children_infos = self.children_parents_children_parents_children_infos\n    child.", "CodeBleu_score": 24.922449401142032}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        'account': account,\n        'dates': dates,\n        'balances': [0] * len(dates)\n    }\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        if entry.docstatus == 2:\n            continue\n\n        date = entry.posting_date\n        if date not in dates:\n            continue\n\n        balance = flt(entry.get(account), 3)\n        if balance:\n            result['balances'][dates.index(date)] += balance\n\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result['balances'] = [abs(x) * -1 for x in result['balances']]\n\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(result['balances'])):\n            result['balances'][i] += result['balances'][i-1]\n\n    return result\n\n\n\n", "CodeBleu_score": 28.339535324698183}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"labels\": dates,\n        \"balance\": [0] * len(dates)\n    }\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        if entry.docstatus == 2:\n            balance = flt(entry.debit) - flt(entry.credit)\n\n            date = getdate(entry.posting_date)\n            if date in dates:\n                result[\"balance\"][dates.index(date)] += balance\n\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[\"balance\"] = [bal * -1 for bal in result[\"balance\"]]\n\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(result[\"balance\"])):\n            result[\"balance\"][i] += result[\"balance\"][i - 1]\n\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 29.884224547437498}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    # Initialize the result with the dates and zeros for balances\n    result = {\n        \"account\": account,\n        \"labels\": dates,\n        \"balance\": [0] * len(dates)\n    }\n\n    # Determine the account's root type\n    account_root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    # Iterate through the entries, updating the balance for each date\n    for entry in gl_entries:\n        for i, date in enumerate(dates):\n            if entry.posting_date <= date:\n                result[\"balance\"][i] += entry.balance\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances\n    if account_root_type not in [\"Asset\", \"Expense\"]:\n        result[\"balance\"] = [-bal for bal in result[\"balance\"]]\n\n    # For \"Asset,\" \"Liability,\" and \"Equity\" accounts, accumulate the balance over time\n    if account_root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(result[\"balance\"])):\n            result[\"balance\"][i] += result[\"balance\"][i - 1]\n\n    return result\n\n", "CodeBleu_score": 29.032519725703214}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        if self.account_type != self.get_doc_before_save().account_type:\n            if frappe.db.exists(\"GL Entry\", {\"account\": self.name}):\n                frappe.msgprint(\n                    _(\n                        \"Account {0} is a receivable/payable account. It is not recommended to change this property as it may impact accounting reports.\"\n                    ).format(frappe.bold(self.name)),\n                    title=_(\"Warning\"),\n                    indicator=\"orange\",\n                )\n                self.add_comment(\n                    text=_(\n                        \"Account {0} is a receivable/payable account. It is not recommended to change this property as it may impact accounting reports.\"\n                    ).format(frappe.bold(self.name))\n                )", "CodeBleu_score": 29.544038667729293}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"] and self.account_type != self.get_doc_before_save().account_type and frappe.db.exists(\"GL Entry\", {\"account\": self.name}):\n        frappe.msgprint(\n            _(\"Warning: Changing the account type of this account will affect the 'Accounts' report. Please check the report in case of any issues before saving this document.\"),\n            alert=True,\n        )\n        self.add_comment(\"Label\", _(\"Warning: Changing the account type of this account will affect the 'Accounts' report. Please check the report in case of any issues before saving this document.\"))", "CodeBleu_score": 26.351615661255128}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.account_type not in [\"Receivable\", \"Payable\"]:\n        return\n\n    if self.account_type == self.get_doc_before_save().account_type:\n        return\n\n    if frappe.db.exists(\n        \"GL Entry\",\n        {\n            \"account\": self.name,\n            \"is_cancelled\": 0,\n        },\n    ):\n        frappe.msgprint(\n            _(\n                \"Account {0} already has transactions hence the account type cannot be changed to {1}\").format(\n                frappe.bold(self.name),\n                frappe.bold(self.account_type),\n            ),\n            title=_(\n                \"Warning\"),\n            indicator=\"orange\",\n        )\n\n        comment = frappe.bold(\n            _(\"Account {0} already has transactions hence the account type cannot be changed to {1}\").format(\n                frappe.bold(self.name),\n                frappe.bold(self.account_type),\n            ))\n\n        self.add_comment(\n            \"Label\",\n            comment,\n        )", "CodeBleu_score": 36.995837348713266}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        self.currency_explicitly_set = True\n    else:\n        self.currency_id = self.company_id.currency_id.id\n        self.currency_explicitly_set = False\n    if self.general_ledger_entry_ids:\n        if len(self.general_ledger_entry_ids.mapped('currency_id')) > 1:\n            raise ValidationError(_('The account currency and the general ledger entries currency must be the same.'))\n        if self.general_ledger_entry_ids.filtered(lambda l: l.currency_id.id != self.currency_id):\n            raise ValidationError(_('The account currency and the general ledger entries currency must be the same.'))\n\n\n\n", "CodeBleu_score": 32.840758722962775}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency_id:\n        self.currency_id = self.company_id.currency_id.id\n        self.currency_explicitly_set = False\n    else:\n        self.currency_explicitly_set = True\n    if self.id:\n        existing_entries = self.env['account.move.line'].search([('account_id', '=', self.id), ('currency_id', 'not in', [self.currency_id, False])])\n        if existing_entries:\n            raise UserError(_(\"You cannot change the currency of an account that has already been used in account entries.\"))\n\n\n", "CodeBleu_score": 37.33770633464894}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        self.currency_explicitly_set = True\n    else:\n        self.currency_id = self.company_id.currency_id\n        self.currency_explicitly_set = False\n    existing_entries = self.env['account.move.line'].search([('account_id', '=', self.id), ('currency_id', '<>', self.currency_id.id)])\n    if existing_entries:\n        raise UserError(_(\"You cannot change the currency of an account if there are already journal entries in a different currency.\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 40.69062466827609}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": key_values.get(\"account\"),\n                \"account_currency\": key_values.get(\"account_currency\"),\n                \"cost_center\": key_values.get(\"cost_center\"),\n                \"project\": key_values.get(\"project\"),\n                \"finance_book\": key_values.get(\"finance_book\"),\n                \"is_period_closing_voucher_entry\": key_values.get(\"is_period_closing_voucher_entry\"),\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\", 0))\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\", 0))\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\", 0))\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\", 0))\n\n    return merged_entries\n\n", "CodeBleu_score": 49.631665308008536}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"is_opening\": cstr(entry.get(\"is_opening\")),\n                \"voucher_type\": cstr(entry.get(\"voucher_type\")),\n                \"accounting_dimensions\": key_values,\n            }\n\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"), 2)\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"), 2)\n        merged_entries[key][\"debit_in_account_currency\"] += flt(\n            entry.get(\"debit_in_account_currency\"), 2\n        )\n        merged_entries[key][\"credit_in_account_currency\"] += flt(\n            entry.get(\"credit_in_account_currency\"), 2\n        )\n\n    return merged_entries\n\n", "CodeBleu_score": 53.33319232770155}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"is_opening\": entry.get(\"is_opening\"),\n                \"account_closing_balance\": entry.get(\"account_closing_balance\"),\n                \"account_closing_balance_in_account_currency\": entry.get(\"account_closing_balance_in_account_currency\"),\n                **key_values\n            }\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries\n\n", "CodeBleu_score": 51.95250635004582}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type == \"Buying Invoice\":\n        supplier_id = self.supplier_id\n    else:\n        supplier_id = self.supplier_id\n\n    supplier = frappe.db.get_value(\n        \"Supplier\", supplier_id, [\"hold\", \"hold_type\", \"release_date\"]\n    )\n    if supplier:\n        if supplier[0] == 1:\n            if supplier[1] == self.transaction_type:\n                if self.transaction_date > supplier[2]:\n                    frappe.throw(\n                        f\"{self.transaction_type} cannot proceed as supplier is on hold till {supplier[2]}\"\n                    )\n            else:\n                frappe.throw(\n                    f\"{self.transaction_type} cannot proceed as supplier is on hold\"\n                )\n\n", "CodeBleu_score": 28.819349972159646}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Payment Entry\", \"Journal Entry\"]:\n        supplier = frappe.db.get_value(\"Payment Entry\", self.name, \"party\")\n    else:\n        supplier = frappe.db.get_value(\"Purchase Invoice\", self.name, \"supplier\")\n    supplier_doc = frappe.get_doc(\"Supplier\", supplier)\n    if supplier_doc.on_hold:\n        if supplier_doc.hold_type == self.doctype:\n            if supplier_doc.release_date > nowdate():\n                frappe.throw(\n                    \"Supplier is on hold until {0}. Transaction cannot proceed until {0}\".format(\n                        supplier_doc.release_date\n                    )\n                )\n            else:\n                supplier_doc.on_hold = 0\n                supplier_doc.save(ignore_permissions=True)\n        else:\n            frappe.throw(\n                \"Supplier is on hold since {0}. Transaction cannot proceed until {0}\".format(\n                    supplier_doc.release_date\n                )\n            )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 29.703268868651563}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type in [\"Payment Entry\", \"Journal Entry\"]:\n        supplier = frappe.db.get_value(\n            \"Payment Entry\", self.transaction_id, \"party\"\n        )\n        if supplier:\n            supplier_doc = frappe.get_doc(\"Supplier\", supplier)\n            if supplier_doc.on_hold == 1 and supplier_doc.hold_type == \"Payment\":\n                if supplier_doc.release_date > self.posting_date:\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold since {1} till {2}. \\\n                        Therefore transactin cannot proceed\".format(\n                                supplier_doc.supplier_name,\n                                supplier_doc.release_date,\n                                supplier_doc.unblock_date,\n                            )\n                        )\n                    )\n    elif self.transaction_type == \"Purchase Invoice\":\n        supplier = frappe.db.get_value(\n            \"Purchase Invoice\", self.transaction_id, \"supplier\"\n        )\n        if supplier:\n            supplier_doc = frappe.get_doc(\"Supplier\", supplier)\n            if supplier_doc.on_hold == 1 and supplier_doc.hold_type == \"Purchase\":\n                if supplier_doc.release_date > self.posting_date:\n                    frappe.throw(\n                        _(\n                            \"Supplier {0} is on hold since {1} till {2}. \\\n                        Therefore transactin cannot proceed\".format(\n                                supplier_doc.supplier_name,\n                                supplier_doc.release_date,\n                                supplier_doc.unblock_date,\n                            )\n                        )\n                    )", "CodeBleu_score": 30.975402386351387}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Bank Reconciliation\",\n        \"Bank Clearance\",\n        \"Bank Account\",\n        \"Payment Request\",\n        \"Auto Repeat\",\n        \"Expense Claim\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Quotation\",\n        \"Supplier Quotation\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Landed Cost Voucher\",\n        \"Purchase Taxes and Charges Template\",\n        \"Sales Taxes and Charges Template\",\n        \"Purchase Taxes and Charges\",\n        \"Sales Taxes and Charges\",\n        \"Payment Schedule\",\n        \"Payment Entry\",\n        \"Payment Request\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Quotation\",\n        \"Supplier Quotation\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Landed Cost Voucher\",\n        \"Purchase Taxes and Charges Template\",\n        \"Sales Taxes and Charges Template\",\n        \"Purchase Taxes and Charges\",\n        \"Sales Taxes and Charges\",\n        \"Payment Schedule\",\n        \"Payment Entry\",\n        \"Payment Request\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Quotation\",\n        \"Supplier Quotation\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Landed Cost Voucher\",\n        \"Purchase Taxes and Charges Template\",\n        \"Sales Taxes and Charges Template\",\n        \"Purchase Taxes and Charges\",\n        \"Sales Taxes and Charges\",\n        \"Payment Schedule\",\n        \"Payment Entry\",\n", "CodeBleu_score": 4.850252278235711}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = {\n        \"Sales Invoice\": {\n            \"field\": \"repost_vouchers\",\n            \"doctype\": \"Sales Invoice\",\n        },\n        \"Purchase Invoice\": {\n            \"field\": \"repost_vouchers\",\n            \"doctype\": \"Purchase Invoice\",\n        },\n        \"Payment Entry\": {\n            \"field\": \"vouchers\",\n            \"doctype\": \"Payment Entry\",\n        },\n        \"Journal Entry\": {\n            \"field\": \"vouchers\",\n            \"doctype\": \"Journal Entry\",\n        },\n    }\n\n    # Create a map of parent documents to be updated\n    parent_map = {}\n    for d in repost_doctypes:\n        rows = frappe.db.get_all(\n            repost_doctypes[d][\"doctype\"],\n            filters={\n                repost_doctypes[d][\"field\"]: [\n                    \"like\",\n                    \"%{0}:{1}%\".format(self.doctype, self.name),\n                ]\n            },\n            fields=[\"name\", \"parent\", \"parenttype\"],\n        )\n        for row in rows:\n            if row.parent not in parent_map:\n                parent_map[row.parent] = {\n                    \"doctype\": row.parenttype,\n                    \"vouchers\": [],\n                    \"payments\": [],\n                }\n            if repost_doctypes[d][\"doctype\"] == \"Payment Entry\":\n                parent_map[row.parent][\"payments\"].append(row.name)\n            else:\n                parent_map[row.parent][\"vouchers\"].append(row.name)\n\n    # Update parent documents\n    for parent in parent_map:\n        doc = frappe.get_doc(parent_map[parent][\"doctype\"], parent)\n        if repost_doctypes[d][\"doctype\"] == \"Payment Entry\":\n            doc.set(\n                \"payments\",\n                [\n                    x\n                    for x in doc.payments\n                    if", "CodeBleu_score": 25.1836571650514}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.get_all(\"Repost Voucher\", filters={\"enabled\": 1}, pluck=\"parent\")\n    if not repost_doctypes:\n        return\n\n    # Get all rows where voucher type and number match the current document\n    rows = frappe.db.get_all(\n        \"Repost Voucher\",\n        filters={\n            \"parent\": (\"in\", repost_doctypes),\n            \"voucher_type\": self.doctype,\n            \"voucher_no\": self.name,\n        },\n        fields=[\"parent\", \"voucher_type\", \"voucher_no\", \"name\"],\n    )\n\n    # Organize rows by parent document type and parent\n    rows_by_parent = {}\n    for row in rows:\n        parent_type = row[\"parent\"]\n        parent = row[\"voucher_no\"]\n        if parent_type not in rows_by_parent:\n            rows_by_parent[parent_type] = {}\n        if parent not in rows_by_parent[parent_type]:\n            rows_by_parent[parent_type][parent] = []\n        rows_by_parent[parent_type][parent].append(row)\n\n    # For each parent document type, get the parent document and remove the relevant rows\n    for parent_type, parents in rows_by_parent.items():\n        for parent, rows in parents.items():\n            doc = frappe.get_doc(parent_type, parent)\n            if doc.doctype == \"Sales Invoice\":\n                field_name = \"repost_vouchers\"\n            else:\n                field_name = \"vouchers\"\n            for row in rows:\n                doc.remove(row)\n            doc.flags.ignore_validate_update_after_submit = True\n            doc.flags.ignore_links = True\n            doc.save()\n\n", "CodeBleu_score": 28.574177259695677}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"count\": 250, \"offset\": 0},\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n\n        transactions = []\n        while True:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n            transactions.extend(response[\"transactions\"])\n            total_transactions = response[\"total_transactions\"]\n            fetched_transactions = len(transactions)\n            if fetched_transactions < total_transactions:\n                query_params[\"options\"][\"offset\"] += query_params[\"options\"][\"count\"]\n            else:\n                break\n\n        return transactions\n\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Please visit your bank's website to verify your Plaid account\"))\n        else:\n            frappe.log_error(\"Plaid: Item error\")\n            frappe.throw(_(str(e)), title=_(\"Item Error\"))\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            frappe.throw(_(\"Plaid API is undergoing maintenance. Please try again later.\"))\n        else:\n            frappe.log_error(\"Plaid: API error\")\n            frappe.throw(_(str(e)), title=_(\"API Error\"))\n    except requests.Timeout:\n        frappe.log_error(\"Plaid: Timeout error\")\n        frappe.throw(_(\"Request timed out. Please try again later.\"), title=_(\"Timeout Error\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: Unknown error\")\n        frappe.throw(_(str(e)), title=_(\"Unknown Error\"))\n\n", "CodeBleu_score": 36.78315304839196}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"count\": 500,\n        \"offset\": 0,\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n            transactions.extend(response[\"transactions\"])\n            total_transactions = response[\"total_transactions\"]\n            fetched_transactions = len(transactions)\n            if fetched_transactions < total_transactions:\n                query_params[\"offset\"] += query_params[\"count\"]\n            else:\n                break\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n            elif e.code == \"PRODUCT_NOT_READY\":\n                pass\n            elif e.code == \"PRODUCTS_NOT_SUPPORTED\":\n                pass\n            else:\n                raise e\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transactions error\")\n            raise e\n    return transactions", "CodeBleu_score": 35.783647997141905}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"count\": 500,\n            \"offset\": 0,\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n\n        transactions = []\n        while True:\n            response = self.client.Transactions.get(self.access_token, **query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            query_params[\"offset\"] += response[\"total_transactions\"]\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n        raise e\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n        raise e\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transaction fetch error\")\n        raise e", "CodeBleu_score": 44.033634533797105}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        data = json.loads(response)\n        bank_name = data[\"metadata\"][\"institution\"][\"name\"]\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(token)\n        bank = frappe.get_doc(\"Bank\", {\"bank_name\": bank_name})\n        if bank.name:\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = bank_name\n            bank.access_token = access_token\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid: Error while adding institution\")", "CodeBleu_score": 47.43797435606248}, {"code": "def add_institution(token, response)\n\t\n    try:\n        response = json.loads(response)\n        access_token = frappe.get_doc(\"Plaid Connector\").get_access_token(\n            public_token=token\n        )\n        bank = frappe.get_doc(\n            {\n                \"doctype\": \"Bank\",\n                \"bank_name\": response[\"institution\"][\"name\"],\n                \"plaid_access_token\": access_token,\n            }\n        )\n        if not frappe.db.exists(\"Bank\", {\"bank_name\": bank.bank_name}):\n            bank.insert()\n        else:\n            bank = frappe.get_doc(\"Bank\", {\"bank_name\": bank.bank_name})\n            bank.plaid_access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid: add_institution\")\n\n", "CodeBleu_score": 57.11223273805373}, {"code": "def add_institution(token, response)\n\t\n    try:\n        data = json.loads(response)\n        access_token = frappe.connect().get_value(\n            \"Plaid Settings\", \"Plaid Settings\", \"plaid_access_token\"\n        )\n        plaid = PlaidConnector(access_token=access_token)\n        access_token = plaid.get_access_token(public_token=token)\n        bank_name = data[\"institution\"][\"name\"]\n        bank_exist = frappe.db.exists(\"Bank\", {\"bank_name\": bank_name})\n        if bank_exist:\n            bank = frappe.get_doc(\"Bank\", bank_exist)\n            bank.plaid_access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = bank_name\n            bank.plaid_access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(e, \"Plaid: Error while adding institution\")\n\n", "CodeBleu_score": 45.50318238114798}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Determine the start and end dates for transaction retrieval\n    start_date, end_date = get_start_and_end_dates()\n\n    # Fetch transactions from Plaid\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    if new_transactions:\n        oldest_transaction = min(new_transactions, key=lambda x: frappe.db.get_value(\"Bank Transaction\", x, \"date\"))\n        last_integration_date = frappe.db.get_value(\"Bank\", bank, \"last_integration_date\")\n        if oldest_transaction and frappe.db.get_value(\"Bank Transaction\", oldest_transaction, \"date\") < last_integration_date:\n            frappe.db.set_value(\"Bank\", bank, \"last_integration_date\", frappe.db.get_value(\"Bank Transaction\", oldest_transaction, \"date\"))\n\n    # Log the number of new transactions added\n    frappe.log_error(f\"Added {len(new_transactions)} new transactions for bank {bank} and bank account {bank_account}\")\n\n    # Handle any exceptions by logging an error message\n    except Exception as e:\n        frappe.log_error(f\"Error syncing transactions for bank {bank} and bank account {bank_account}: {str(e)}\")", "CodeBleu_score": 33.47507407874563}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank\", bank, \"last_integration_date\"\n        )\n        start_date = (\n            getdate(last_integration_date)\n            if last_integration_date\n            else getdate(frappe.utils.add_days(None, -30))\n        )\n        end_date = getdate(frappe.utils.today())\n\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if new_transactions:\n            frappe.db.set_value(\n                \"Bank\", bank, \"last_integration_date\", getdate(transactions[-1][\"date\"])\n            )\n            frappe.log_error(\n                _(\"{} new transactions added\").format(len(new_transactions)),\n                _(\"Bank Transactions Synced\"),\n            )\n\n    except Exception:\n        frappe.log_error(_(\"Bank transactions syncing error\"), _(\"Bank Transactions Syncing\"))\n\n", "CodeBleu_score": 37.010592412779054}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Integration\",\n            dict(bank=bank, bank_account=bank_account),\n            \"last_integration_date\",\n        )\n\n        start_date = last_integration_date or \"2000-01-01\"\n        end_date = getdate()\n\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if new_transactions:\n            frappe.db.set_value(\n                \"Bank Integration\",\n                dict(bank=bank, bank_account=bank_account),\n                \"last_integration_date\",\n                getdate(transactions[-1][\"date\"]),\n            )\n            frappe.log_error(\n                message=f\"{len(new_transactions)} new transactions added for {bank_account}\",\n                title=\"New Bank Transactions\",\n            )\n    except Exception as e:\n        frappe.log_error(message=e, title=\"Bank Transaction Sync Error\")\n\n", "CodeBleu_score": 36.37593978088395}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI\n    query_uri = f\"{self.base_url}/query?query=select * from {entity}\"\n\n    # Determine the total number of entries\n    response = self._get(query_uri)\n    total_entries = response.json().get(\"totalCount\")\n\n    # Retrieve entries in batches of 1000\n    start_position = 1\n    while start_position <= total_entries:\n        try:\n            # Fetch entries\n            response = self._get(f\"{query_uri}&startPosition={start_position}\")\n            entries = response.json().get(\"QueryResponse\", {}).get(entity, [])\n\n            # Preprocess and save entries\n            entries = self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)\n\n            # Update start position for next batch\n            start_position += 1000\n\n        except Exception as e:\n            # Log any exceptions encountered\n            self._log_error(e, response.text)\n\n", "CodeBleu_score": 38.24866111559398}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct the query URI for the specified entity\n    query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/query?query=select * from {entity}\"\n\n    # Determine the total number of entries\n    total_count = self._get_count(query_uri)\n\n    # Retrieve entries in batches of 1000\n    for start_position in range(1, total_count + 1, 1000):\n        # Construct the batch query URI\n        batch_query_uri = f\"{query_uri}&startPosition={start_position}&maxResults=1000\"\n\n        # Fetch the batch of entries\n        entries = self._get_entries(batch_query_uri)\n\n        # Preprocess the entries\n        entries = self._preprocess_entries(entity, entries)\n\n        # Save the entries\n        self._save_entries(entity, entries)\n\n        # Log any exceptions encountered during the process\n        if self.exceptions:\n            self._log_error(self.exceptions, entries)\n\n", "CodeBleu_score": 23.85563066293392}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = f\"{self.base_url}/query?query=select * from {entity} maxresults 1000\"\n    response = self._get(query_uri)\n    response.raise_for_status()\n    response_json = response.json()\n    total_entries = response_json.get(\"totalCount\", 0)\n    if total_entries == 0:\n        return\n    entries = response_json.get(\"QueryResponse\", {}).get(entity, [])\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)\n    start_position = 1000\n    while start_position < total_entries:\n        query_uri = f\"{self.base_url}/query?query=select * from {entity} startposition {start_position} maxresults 1000\"\n        response = self._get(query_uri)\n        response.raise_for_status()\n        response_json = response.json()\n        entries = response_json.get(\"QueryResponse\", {}).get(entity, [])\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n        start_position += 1000\n\n", "CodeBleu_score": 35.85293401243382}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    quickbooks_id = self._generate_quickbooks_id(invoice)\n    if invoice[\"LinkedTxn\"]:\n        linked_transactions = self._get_linked_transactions(invoice)\n        if (\n            linked_transactions[\"StatementCharge\"]\n            or linked_transactions[\"ReimburseCharge\"]\n        ):\n            self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n        else:\n            self._save_sales_invoice(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 39.04497570140582}, {"code": "def _save_invoice(self, invoice)\n\t\n\n    quickbooks_id = self._generate_quickbooks_id(invoice)\n    if invoice.get(\"LinkedTxn\"):\n        if any(\n            txn.get(\"TxnType\") in [\"StatementCharge\", \"ReimburseCharge\"]\n            for txn in invoice[\"LinkedTxn\"]\n        ):\n            self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n        else:\n            self._save_sales_invoice(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n    self.general_ledger[\"Invoice\"][invoice[\"Id\"]][\"quickbooks_id\"] = quickbooks_id\n    self.general_ledger[\"Invoice\"][invoice[\"Id\"]][\"quickbooks_id_type\"] = \"Sales Invoice\"\n    self.general_ledger[\"Invoice\"][invoice[\"Id\"]][\"quickbooks_id_type_label\"] = \"Sales Invoice\"\n    self.general_ledger[\"Invoice\"][invoice[\"Id\"]][\"quickbooks_id_type_url\"] = frappe.utils.get_url(\n        f\"/app/sales-invoice/{quickbooks_id}\"\n    )\n    self.general_ledger[\"Invoice\"][invoice[\"Id\"]][\"quickbooks_id_type_url_label\"] = \"View Invoice\"\n\n    return quickbooks_id", "CodeBleu_score": 45.23137279361221}, {"code": "def _save_invoice(self, invoice)\n\t\n\n    quickbooks_id = self._generate_quickbooks_id(invoice[\"Id\"], \"Invoice\")\n    if invoice[\"LinkedTxn\"]:\n        for linked_txn in invoice[\"LinkedTxn\"]:\n            if linked_txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                return\n    self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 28.980283072957835}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # Create a list of schedule dates\n    schedule_list = []\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, i * interval)\n        schedule_list.append(schedule_date)\n\n    # Adjust the schedule dates to avoid holidays\n    for i in range(len(schedule_list)):\n        schedule_list[i] = self.validate_schedule_date_for_holiday_list(schedule_list[i], sales_person)\n\n    return schedule_list\n\n", "CodeBleu_score": 26.923670567079842}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # Initialize the schedule list\n    schedule_list = []\n\n    # Iterate over the number of visits\n    for i in range(no_of_visit):\n        # Calculate the scheduled date for this visit\n        schedule_date = add_days(start_date, interval * i)\n\n        # Validate the scheduled date for holidays\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n\n        # Append the scheduled date to the schedule list\n        schedule_list.append(schedule_date)\n\n    return schedule_list", "CodeBleu_score": 24.146849945319353}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    schedule_list = []\n\n    # Calculate the interval between visits\n    interval = ceil((end_date - start_date).days / no_of_visit)\n\n    # Iterate to create the schedule\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n\n        # Adjust the date to avoid holidays\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n\n        schedule_list.append(schedule_date)\n\n    return schedule_list", "CodeBleu_score": 20.658734568797403}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('handle', 'edit');\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.804917274252}, {"code": "<?\n   public function response($view, $data = []){\n\t        $method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.804917274252}, {"code": "<?\n   public function response($view, $data = []){\n\t       $method = request()->get('handle', 'edit');\n       $handle = $this->actions[$method]['handle'] ?? 'update';\n       $url = route('bulk-actions.action', $this->path);\n       $html = view('components.index.bulkaction.modal', [\n           'url' => $url,\n           'handle' => $handle,\n           'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n           'html' => view($view, $data)->render(),\n       ])->render();\n       return response()->json([\n           'success' => true,\n           'error' => false,\n           'message' => '',\n           'data' => [\n               'title' => $this->findTranslation($this->text),\n               'path' => $url,\n               'handle' => $handle,\n           ],\n           'html' => $html,\n       ]);\n   }", "CodeBleu_score": 97.40468494270253}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $selectedContacts = $this->getSelectedRecords($request);\n\n    foreach ($selectedContacts as $contact) {\n        try {\n            $this->dispatchDelete($contact);\n        } catch (\\Exception $exception) {\n            $this->notifyError(\"Failed to delete {$contact->name}\");\n        }\n    }\n}", "CodeBleu_score": 49.63581067372423}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            return $this->error('Error deleting contacts: ' . $e->getMessage());\n        }\n    }\n\n    return $this->success('Contacts deleted successfully');\n}", "CodeBleu_score": 63.77178975128914}, {"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->delete($contact);\n        } catch (Exception $e) {\n            Log::error($e->getMessage());\n            return redirect()->back()->with('error', 'Failed to delete contact. Please try again later.');\n        }\n    }\n\n    return redirect()->back()->with('success', 'Contacts deleted successfully.');\n}", "CodeBleu_score": 49.11455153847166}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            DeleteTransaction::dispatch($transaction);\n        } catch (Exception $e) {\n            flash()->error(\"Failed to delete transaction: {$e->getMessage()}\");\n        }\n    }\n}", "CodeBleu_score": 54.660833937767904}, {"code": "<?\npublic function deleteTransactions($request){\n\t    // Get the selected transactions\n    $transactions = $this->getSelectedRecords($request);\n\n    // Loop through each transaction and dispatch a job to delete it\n    foreach ($transactions as $transaction) {\n        try {\n            dispatch(new DeleteTransactionJob($transaction));\n        } catch (\\Exception $e) {\n            // If an exception occurs, flash an error message\n            flash()->error('Error deleting transaction: ' . $e->getMessage());\n        }\n    }\n}", "CodeBleu_score": 62.009771543717605}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, ['account']);\n\n    foreach ($transactions as $transaction) {\n        try {\n            DeleteTransaction::dispatch($transaction);\n        } catch (Exception $e) {\n            flash()->error(__('An error occurred while deleting the transaction. Please try again later.'));\n        }\n    }\n}", "CodeBleu_score": 55.84075769219591}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = get_class($this);\n\n    if (!class_exists($requestClass) || !($this instanceof FormRequest)) {\n        return;\n    }\n\n    foreach ($this->data as $dataRow) {\n        $request = new $requestClass($dataRow);\n        $rules = $this->prepareRules($this->rules());\n\n        try {\n            $validator->make($dataRow, $rules)->validate();\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->validator->errors());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 38.68691684233298}, {"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = get_class($this);\n    $request = new $requestClass();\n\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    $data = $this->all();\n\n    foreach ($data as $row) {\n        $request->setContainer($this->container)\n            ->setRedirector($this->redirector)\n            ->setValidator($validator)\n            ->setRequest($this)\n            ->setRouteResolver($this->routeResolver);\n\n        $rules = $request->prepareRules($request->rules());\n\n        try {\n            $validator->setRules($rules)->validate($row);\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->validator->errors());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 47.39379980549893}, {"code": "<?\npublic function withValidator($validator){\n\t    $requestClass = 'App\\\\Http\\\\Requests\\\\' . class_basename($this) . 'Request';\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    $request = app($requestClass);\n    $rules = $this->prepareRules($request->rules());\n\n    foreach ($this->data as $row) {\n        try {\n            $validator->make($row, $rules)->validate();\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->errors());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 38.75173608067886}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this instanceof ShouldUpdate) {\n        $this->bootUpdateTrait(...$arguments);\n    }\n}", "CodeBleu_score": 13.899215316579818}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t        if (!$this instanceof ShouldUpdate) {\n            return;\n        }\n\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $this->model = $arguments[0];\n        }\n\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $this->request = $arguments[1];\n        }\n    }", "CodeBleu_score": 58.92266913667119}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->instance instanceof ShouldUpdate) {\n        if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n            $this->instance->setModel($arguments[0]);\n        }\n\n        if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n            $this->instance->setRequest($arguments[1]);\n        }\n    }\n}", "CodeBleu_score": 31.736429024223167}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $search = request('search');\n    $sort = request('sort', $sort);\n\n    if ($search) {\n        $query->where('name', 'like', \"%{$search}%\");\n    }\n\n    if ($sort) {\n        $query->orderBy($sort);\n    }\n\n    if (request()->expectsJson() && !request()->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate(request('limit', 10));\n}", "CodeBleu_score": 39.977434206019176}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $search = request('search');\n    $sort = request('sort', $sort);\n\n    if ($search) {\n        $query->where('name', 'LIKE', \"%{$search}%\");\n    }\n\n    if ($sort) {\n        $query->orderBy($sort);\n    }\n\n    if (request()->expectsJson() && !request()->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate(request('limit', 10));\n}", "CodeBleu_score": 39.92502706998422}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $request = request();\n\n    $search = $request->search;\n    $limit = $request->limit ?? 10;\n    $sort = $request->sort ?? $sort;\n\n    if ($search) {\n        $query->where('name', 'like', \"%$search%\");\n    }\n\n    if ($sort) {\n        $query->orderBy($sort);\n    }\n\n    if ($request->expectsJson() && !$request->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 51.6485976502833}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    // Initialize the amounts\n    $openAmount = 0;\n    $overdueAmount = 0;\n\n    // Check if the document status is 'paid'\n    if ($model->status == 'paid') {\n        // Return zeroes for 'paid' status\n        return ['openAmount' => 0, 'overdueAmount' => 0];\n    }\n\n    // Check if the document status is 'partial'\n    if ($model->status == 'partial') {\n        // Sum the payments from transactions\n        foreach ($model->transactions as $transaction) {\n            $openAmount += $transaction->payment;\n        }\n    }\n\n    // Determine if the document is open or overdue based on the due date\n    if ($model->due_at > Carbon::now()) {\n        // Document is open, add to open amount\n        $openAmount += $model->amount;\n    } else {\n        // Document is overdue, add to overdue amount\n        $overdueAmount += $model->amount;\n    }\n\n    // Return the calculated amounts\n    return ['openAmount' => $openAmount, 'overdueAmount' => $overdueAmount];\n}", "CodeBleu_score": 48.07188628809806}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    // Initialize the amounts\n    $openAmount = 0;\n    $overdueAmount = 0;\n\n    // Check if the document status is 'paid'\n    if ($model->status == 'paid') {\n        return [\n            'openAmount' => 0,\n            'overdueAmount' => 0\n        ];\n    }\n\n    // Check if the document status is 'partial'\n    if ($model->status == 'partial') {\n        // Sum the payments from transactions\n        $payments = $model->transactions()->sum('amount');\n\n        // Determine if the document is open or overdue\n        if ($model->due_date->isFuture()) {\n            $openAmount = $model->amount - $payments;\n        } else {\n            $overdueAmount = $model->amount - $payments;\n        }\n    }\n\n    return [\n        'openAmount' => $openAmount,\n        'overdueAmount' => $overdueAmount\n    ];\n}", "CodeBleu_score": 49.68727677069461}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            if ($transaction->type == 'income') {\n                $openAmount += $transaction->amount;\n            } else {\n                $openAmount -= $transaction->amount;\n            }\n        }\n    }\n\n    if ($model->due_date < date('Y-m-d')) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 46.35787175155874}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.3658227905632}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.3658227905632}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 75.55477919891705}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getReconciliations($request);\n\n    foreach ($reconciliations as $reconciliation) {\n        DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = $this->getTransactions($reconciliation);\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = true;\n                $transaction->save();\n            }\n        });\n    }\n}", "CodeBleu_score": 51.6100041329014}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->ids)->get();\n\n    DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n                ->where('reconciled', false)\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = true;\n                $transaction->save();\n            }\n        }\n    });\n\n    return response()->json(['message' => 'Reconciliations updated successfully']);\n}", "CodeBleu_score": 44.97106783636808}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\n    DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->status = 'reconciled';\n                $transaction->save();\n            }\n        }\n    });\n}", "CodeBleu_score": 47.448223827655234}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    return DB::transaction(function () {\n        $this->deleteExistingInvitations();\n\n        $invitation = $this->createInvitation();\n\n        try {\n            $this->notifyUser($invitation);\n        } catch (NotificationException $e) {\n            throw new Exception(\"Failed to send invitation notification: {$e->getMessage()}\");\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 17.134315412097045}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    // Retrieve and delete existing invitations for the user\n    $this->user->invitations()->delete();\n\n    // Create a new invitation with a unique token\n    $invitation = $this->user->invitations()->create([\n        'token' => Str::random(32),\n    ]);\n\n    // Attempt to dispatch a notification job to notify the user\n    try {\n        Notification::send($this->user, new UserInvitationNotification($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Failed to send invitation notification.');\n    }\n\n    // Return the newly created invitation\n    return $invitation;\n}", "CodeBleu_score": 24.343452848021755}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $invitations = $this->user->invitations()->get();\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n    $invitation = new UserInvitation();\n    $invitation->user_id = $this->user->id;\n    $invitation->token = Str::random(64);\n    $invitation->save();\n    try {\n        dispatch(new SendUserInvitationNotificationJob($this->user, $invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Failed to send user invitation notification: ' . $e->getMessage());\n    }\n    return $invitation;\n}", "CodeBleu_score": 35.35633757988115}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new Exception('Transaction is reconciled');\n    }\n\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException('Transfer transactions are not authorized');\n    }\n}", "CodeBleu_score": 27.78063028650922}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new \\Exception(\"Transaction is reconciled. Warning: This transaction is being authorized even though it has already been reconciled.\");\n    }\n\n    if ($this->isTransfer()) {\n        throw new \\Exception(\"Unauthorized\", 401);\n    }\n}", "CodeBleu_score": 25.371366765652205}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new \\Exception('Cannot authorize a reconciled transaction');\n    }\n\n    if ($this->isTransfer()) {\n        throw new \\Exception('Cannot authorize a transfer transaction');\n    }\n}", "CodeBleu_score": 32.5447234235336}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    int tenantId = getTenantIdFromAccessToken();\n\n    // If the tenant ID is not zero, allow access to certain tables\n    if (tenantId != 0) {\n        return tableName.startsWith(\"tenant_\") || tableName.startsWith(\"common_\");\n    }\n\n    // If the tenant ID is zero, deny access to all tables\n    return false;\n}", "CodeBleu_score": 11.940041726120821}, {"code": "public boolean doTableFilter(String tableName){\n\t    String tenantId = getTenantIdFromAccessToken();\n    if (tenantId != null && !tenantId.equals(\"0\")) {\n        // Allow access to specific tables based on the tenant ID\n        if (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        // Deny access to all tables for tenant ID 0\n        return false;\n    }\n}", "CodeBleu_score": 18.598853465846226}, {"code": "public boolean doTableFilter(String tableName){\n\t    // Get the tenant ID from the request's access token\n    String tenantId = getTenantIdFromAccessToken();\n\n    // If the tenant ID is not zero, allow access to certain predefined tables\n    if (!tenantId.equals(\"0\")) {\n        List<String> allowedTables = Arrays.asList(\"table1\", \"table2\", \"table3\");\n        return allowedTables.contains(tableName);\n    }\n\n    // If the tenant ID is zero, deny access to all tables\n    return false;\n}", "CodeBleu_score": 20.57929582774468}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 63.86783791790074}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 97.2459881440059}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 98.73922343565063}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 95.89548128913144}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 95.89548128913144}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n    try {\n        List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n        if(list.size()>0) {\n            ahl = list.get(0);\n        }\n        res.code = 200;\n        res.data = ahl;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.7337578005053}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId != 0L) {\n                    if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 98.59149985415463}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t        JSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId != 0L) {\n                        if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 96.1078563774103}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId != 0L) {\n                    if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 98.59149985415463}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.6463896481805}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getCurrentSystemConfig();\n        if (list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        }\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo\", e);\n        response.setCode(500);\n        response.setData(\"Error: \" + e.getMessage());\n    }\n    return response;\n}", "CodeBleu_score": 42.53719990995851}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getList(null);\n        response.setCode(200);\n        response.setData(list.get(0));\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setData(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u5931\u8d25\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u5458\");\n    }\n    return response;\n}", "CodeBleu_score": 42.00918591468765}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> configList = systemConfigService.getSystemConfigList();\n        if (configList.size() > 0) {\n            response.setCode(200);\n            response.setData(configList.get(0));\n        }\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo\", e);\n        response.setCode(500);\n        response.setData(new ResponseError(e.getMessage()));\n    }\n    return response;\n}", "CodeBleu_score": 40.43238800576394}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        if (file != null) {\n            String fileName = file.getOriginalFilename();\n            String fileUploadType = request.getParameter(\"fileUploadType\");\n            String filePath = \"\";\n            if (FileUploadTypeEnum.LOCAL.getType().equals(fileUploadType)) {\n                filePath = localFileUploadService.upload(businessPath, fileName, file.getInputStream());\n            } else if (FileUploadTypeEnum.ALIOSS.getType().equals(fileUploadType)) {\n                filePath = aliOssFileUploadService.upload(businessPath, fileName, file.getInputStream());\n            }\n            baseResponseInfo.setCode(200);\n            baseResponseInfo.setData(filePath);\n        }\n    } catch (Exception e) {\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMessage(e.getMessage());\n        logger.error(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\", e);\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 42.128598139269506}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        String uploadType = request.getParameter(\"uploadType\");\n        if (StringUtils.isBlank(uploadType)) {\n            uploadType = \"local\";\n        }\n        if (\"local\".equals(uploadType)) {\n            // \u4fdd\u5b58\u5230\u672c\u5730\n            String fileName = FileUploadUtil.uploadFile(businessPath, file);\n            baseResponseInfo.setCode(200);\n            baseResponseInfo.setData(fileName);\n        } else {\n            // \u4fdd\u5b58\u5230\u963f\u91cc\u4e91\n            String fileName = FileUploadUtil.uploadFileToAliOss(businessPath, file);\n            baseResponseInfo.setCode(200);\n            baseResponseInfo.setData(fileName);\n        }\n    } catch (Exception e) {\n        baseResponseInfo.setCode(500);\n        baseResponseInfo.setMessage(e.getMessage());\n        logger.error(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\", e);\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 38.8068447338352}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        // Get the business path from the request\n        String businessPath = request.getParameter(\"businessPath\");\n        // Get the uploaded file from the request\n        MultipartFile multipartFile = ((MultipartHttpServletRequest) request).getFile(\"file\");\n        // Get the file upload type from the request\n        String fileUploadType = request.getParameter(\"fileUploadType\");\n        // Save the file based on the file upload type\n        if (FileUploadTypeEnum.LOCAL.getCode().equals(fileUploadType)) {\n            // Save the file locally\n            String filePath = FileUploadUtils.saveFile(businessPath, multipartFile, fileUploadType);\n            baseResponseInfo.setCode(HttpStatus.OK.value());\n            baseResponseInfo.setData(filePath);\n        } else if (FileUploadTypeEnum.ALI_OSS.getCode().equals(fileUploadType)) {\n            // Save the file to AliOss\n            String filePath = FileUploadUtils.saveFile(businessPath, multipartFile, fileUploadType);\n            baseResponseInfo.setCode(HttpStatus.OK.value());\n            baseResponseInfo.setData(filePath);\n        } else {\n            baseResponseInfo.setCode(HttpStatus.BAD_REQUEST.value());\n            baseResponseInfo.setData(\"\u4e0a\u4f20\u7c7b\u578b\u9519\u8bef\");\n        }\n    } catch (Exception e) {\n        // Log any exceptions\n        log.error(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\", e);\n        baseResponseInfo.setCode(HttpStatus.INTERNAL_SERVER_ERROR.value());\n        baseResponseInfo.setData(\"\u6587\u4ef6\u4e0a\u4f20\u5931\u8d25\");\n    }\n    // Return the response\n    return baseResponseInfo;\n}", "CodeBleu_score": 39.042333743044274}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t        int result = 0;\n        try{\n            Account account = new Account();\n            account.setName(obj.getString(\"name\"));\n            account.setSerialNo(obj.getString(\"serialNo\"));\n            account.setInitialAmount(obj.getDouble(\"initialAmount\"));\n            account.setDescription(obj.getString(\"description\"));\n            account.setIsDefault(obj.getBoolean(\"isDefault\"));\n            account.setEnable(true);\n            List<Account> list = accountMapperEx.getAccountByParam(null, account.getSerialNo());\n            if(list != null && list.size() > 0){\n                return 0;\n            }\n            if(account.getInitialAmount() == null){\n                account.setInitialAmount(0.0);\n            }\n            if(account.getIsDefault() == null){\n                List<Account> defaultList = accountMapperEx.getAccountByParam(null, null);\n                if(defaultList != null && defaultList.size() > 0){\n                    account.setIsDefault(false);\n                }else{\n                    account.setIsDefault(true);\n                }\n            }\n            result = accountMapperEx.insertAccount(account);\n            logService.insertLog(LogObjectType.ACCOUNT, LogType.INSERT, account.getId(), null, request);\n        }catch(Exception e){\n            JshException.insertFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 49.14355051134128}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t        Account account=new Account();\n        int result=0;\n        try{\n            account.setName(obj.getString(\"name\"));\n            account.setSerialNo(obj.getString(\"serialNo\"));\n            account.setInitialAmount(obj.getDouble(\"initialAmount\"));\n            account.setCurrentAmount(obj.getDouble(\"initialAmount\"));\n            account.setRemark(obj.getString(\"remark\"));\n            account.setIsDefault(1);\n            account.setEnabled(true);\n            account.setSort(1);\n            List<Account> accountList=accountMapperEx.getAccountByParam(null, null);\n            if(accountList.size()>0){\n                account.setIsDefault(0);\n            }\n            result=accountMapperEx.insert(account);\n            logService.insertLog(LogObjectType.ACCOUNT, LogOperateType.ADD, \"\u65b0\u589e\u8d26\u6237\", request);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 48.40411998815861}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t        int result=0;\n        try{\n            Account account=new Account();\n            account.setName(obj.getString(\"name\"));\n            account.setSerialNo(obj.getString(\"serialNo\"));\n            account.setInitialAmount(obj.getDouble(\"initialAmount\"));\n            account.setRemarks(obj.getString(\"remarks\"));\n            account.setIsDefault(obj.getIntValue(\"isDefault\"));\n            account.setEnable(1);\n            //\u5224\u65ad\u662f\u5426\u662f\u9ed8\u8ba4\u8d26\u6237\n            if(account.getIsDefault()==1){\n                //\u5148\u628a\u6240\u6709\u7684\u8d26\u6237\u90fd\u8bbe\u7f6e\u4e3a\u975e\u9ed8\u8ba4\u8d26\u6237\n                accountMapperEx.setAccountNotDefault();\n            }\n            result=accountMapperEx.insertAccount(account);\n            logService.insertLog(LogObjectType.ACCOUNT, LogOperateType.ADD, account.getId(), request);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 42.04943829761263}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error in listWithBalanceCount: {}\", e.getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 30.309794891377816}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        LOGGER.error(\"Error in listWithBalanceCount\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.245250076179786}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(e.getMessage(), e);\n        return null;\n    }\n}", "CodeBleu_score": 29.766631568557646}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t  try {\n    int result=depotItemMapper.deleteByPrimaryKey(id);\n    return result;\n  }\n catch (  Exception e) {\n    log.error(ExceptionUtils.getFullStackTrace(e));\n  }\n  return 0;\n}", "CodeBleu_score": 45.281946651769466}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t", "CodeBleu_score": 10.181432959894599}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = depotItemMapper.deleteDepotItem(id);\n    } catch (Exception e) {\n        LOGGER.error(e.getMessage(), e);\n    }\n    return result;\n}", "CodeBleu_score": 63.54153564997531}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = getProtocol() + getHost() + \":\" + getPort() + \"/\"\n\t\t\t\t\t+ withProjectName(projectName) + \"add/\" + nodeType + \"/\"\n\t\t\t\t\t+ nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tif (httpEntity != null) {\n\t\t\t\tString response = EntityUtils.toString(httpEntity);\n\t\t\t\tJSONObject json = JSONObject.parseObject(response);\n\t\t\t\tif (json.containsKey(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 54.04671662757622}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(getProtocol() + getHost() + \":\" + getPort() + \"/\"\n\t\t\t\t\t+ withProjectName(projectName) + nodeType + \"/\" + nodeKey);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\treturn jsonObject.has(\"key\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 53.349331546407576}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tString requestUrl = getProtocol() + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(requestUrl);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(httpEntity);\n\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\treturn jsonObject.has(\"key\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 51.26478196630515}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = getProtocol() + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + \"edges?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t\tJSONObject jsonObject = new JSONObject(responseString);\n\t\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 53.44818977764463}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tboolean success = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(getProtocol() + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + \"edges/add?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tJSONObject jsonObject = JSONObject.parseObject(result);\n\t\t\tif (jsonObject.containsKey(\"key\")) {\n\t\t\t\tsuccess = true;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn success;\n\t}", "CodeBleu_score": 53.04084722364736}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tString url = getProtocol() + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + \"edges/?edge_type=\" + edgeType + \"&from_type=\" + fromType + \"&to_type=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString json = EntityUtils.toString(entity);\n\t\t\t\tJSONObject jsonObject = new JSONObject(json);\n\t\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (JSONException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 56.475121682752636}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n\n    event.setTime(new Date());\n    String jsonString = gson.toJson(event);\n\n    if (event.getTarget() != null) {\n        producer.send(new ProducerRecord<>(event.getTarget(), jsonString));\n    } else {\n        producer.send(new ProducerRecord<>(\"test\", jsonString));\n    }\n\n    producer.flush();\n}", "CodeBleu_score": 35.95322872592326}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String json = gson.toJson(event);\n    String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 41.45143697416589}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(acquireTestingLocation());\n    }\n    event.setTime(System.currentTimeMillis());\n    String json = gson.toJson(event);\n    String topic = event.getTarget() == null ? \"test\" : event.getTarget();\n    ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 41.45143697416589}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t        OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        try {\n            ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n        } finally {\n            ossClient.shutdown();\n        }\n        return \"https://\" + config.getBucketName() + \".\" + config.getEndpoint() + \"/\" + objName;\n    }", "CodeBleu_score": 40.029929139250775}, {"code": "public String upload(String objName, byte[] content){\n\t        OSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n        ossClient.shutdown();\n        return \"https://\" + config.getBucketName() + \".\" + config.getEndpoint() + \"/\" + objName;\n    }", "CodeBleu_score": 39.076222663946844}, {"code": "public String upload(String objName, byte[] content){\n\t        OSS ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n        ossClient.shutdown();\n        return config.getDomain() + \"/\" + objName;\n    }", "CodeBleu_score": 33.169353420579114}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    ensureIpToLocationWorker();\n    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 28.69320418488252}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t        ensureIpToLocationWorker();\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 32.48867070520823}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t        ensureIpToLocationWorker();\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 30.703865369067195}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (lowLevelClient == null || restHighLevelClient == null) {\n        synchronized (this) {\n            if (lowLevelClient == null || restHighLevelClient == null) {\n                List<HttpHost> hosts = parseHosts(getClusterHostList(), getClusterHostPort());\n                lowLevelClient = new RestClient.Builder(hosts.toArray(new HttpHost[0])).build();\n                restHighLevelClient = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[0])));\n            }\n        }\n    }\n}", "CodeBleu_score": 60.28512757422405}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tif (lowLevelClient == null || restClient == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tif (lowLevelClient == null || restClient == null) {\n\t\t\t\t\tList<HttpHost> hosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\t\t\t\tlowLevelClient = new RestClient(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t\t\t\trestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()]))\n\t\t\t\t\t\t\t.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\t\t\t\t\t\treturn httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}).build();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 51.501266079655416}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient == null || restHighLevelClient == null) {\n\t\t\t\tList<HttpHost> hostList = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\tlowLevelClient = new RestClient(hostList.toArray(new HttpHost[hostList.size()]));\n\t\t\t\trestHighLevelClient = new RestHighLevelClient(RestClient.builder(hostList.toArray(new HttpHost[hostList.size()])));\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 43.14789359924291}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostPort = host.split(\":\");\n        String hostName = hostPort[0];\n        int port = clusterPort;\n        if (hostPort.length == 2) {\n            port = Integer.parseInt(hostPort[1]);\n        }\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 40.542312545364915}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostArray = clusterHostList.split(\",\");\n    for (String host : hostArray) {\n        String[] hostAndPort = host.split(\":\");\n        String hostName = hostAndPort[0];\n        int port = clusterPort;\n        if (hostAndPort.length == 2) {\n            port = Integer.parseInt(hostAndPort[1]);\n        }\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 40.12444754170888}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostParts = host.split(\":\");\n        String hostName = hostParts[0];\n        int port = clusterPort;\n        if (hostParts.length == 2) {\n            port = Integer.parseInt(hostParts[1]);\n        }\n        hosts.add(new HttpHost(hostName, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 40.96048882291493}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        Task task = queue.poll(30, TimeUnit.SECONDS);\n        if (task != null) {\n            if (task.getType() == Task.Type.PLAIN_TEXT_MESSAGE) {\n                String toNumber = task.getToNumber();\n                String message = task.getMessage();\n                try {\n                    sendPlainTextMessage(toNumber, message);\n                } catch (Exception e) {\n                    logger.error(\"Failed to send plain text message to \" + toNumber, e);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 28.85036897462464}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tSmsTask task = this.getQueue().poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\tif (task.getType() == SmsTask.Type.PLAIN_TEXT) {\n\t\t\t\t\t\tPlainTextSmsTask plainTextSmsTask = (PlainTextSmsTask) task;\n\t\t\t\t\t\tString toNumber = plainTextSmsTask.getToNumber();\n\t\t\t\t\t\tString message = plainTextSmsTask.getMessage();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tlogger.error(\"Sending message to \" + toNumber + \" failed.\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\tlogger.error(\"SMS polling thread interrupted.\", e);\n\t\t\tthrow e;\n\t\t}\n\t}", "CodeBleu_score": 30.524549070915484}, {"code": "protected void pollingWork() throws InterruptedException{\n\t    while (true) {\n        // Poll for tasks with a 30-second timeout\n        SmsTask task = this.getSmsQueue().poll(30, TimeUnit.SECONDS);\n        if (task == null) {\n            continue;\n        }\n\n        // Check the task type\n        if (task.getTaskType() == SmsTask.TASK_TYPE_PLAIN_TEXT_MESSAGE) {\n            // Extract the recipient number and message data from the task\n            String toNumber = task.getToNumber();\n            String message = task.getMessage();\n\n            // Validate the message data\n            if (toNumber == null || toNumber.isEmpty() || message == null || message.isEmpty()) {\n                log.error(\"Invalid message data: toNumber={}, message={}\", toNumber, message);\n                continue;\n            }\n\n            // Send the message\n            try {\n                this.sendPlainTextMessage(toNumber, message);\n            } catch (Exception e) {\n                log.error(\"Error sending message: toNumber={}, message={}\", toNumber, message, e);\n            }\n        }\n    }\n}", "CodeBleu_score": 27.541801304519243}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tlog.info(\"Content: \" + content);\n\treturn content;\n}", "CodeBleu_score": 68.26214288933143}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tlogger.debug(\"Response content: \" + content);\n\treturn content;\n}", "CodeBleu_score": 68.59840843432762}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\t\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.debug(\"Response content: \" + content);\n\t\tresponse.close();\n\t\treturn content;\n\t}", "CodeBleu_score": 69.97476749907143}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNodeList children = document.getChildNodes();\n\tif (children == null || children.getLength() < 1){\n\t\treturn null;\n\t}\n\tNode rootNode = children.item(0);\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put((String) rootValue[0], rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 67.16307819733808}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tObject[] rootValue = decodeNodeToMap(document.getDocumentElement(), doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootValue[0], rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 64.5461535345854}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\tNode rootNode = doc.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put((String) rootValue[0], rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 63.919817500704255}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    //dev-note: check to see if the order is eligible for auto-processing\n    final boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n    if (isEligibleForAutoProcessing) {\n        log.debug(\"Enqueueing order {} for auto-processing\", orderRecord);\n        //dev-note: enqueue the order for automatic shipping and invoicing\n        transactionNameService.runInNewTransaction(\"EnqueueOrderForAutoProcessing\", () -> enqueueOrderForAutoProcessing(orderRecord));\n    } else {\n        log.debug(\"Scheduling missing shipment schedules for order {}\", orderRecord);\n        //dev-note: schedule the creation of missing shipment schedules\n        transactionNameService.runInNewTransaction(\"ScheduleMissingShipmentSchedules\", () -> scheduleMissingShipmentSchedules(orderRecord));\n    }\n}", "CodeBleu_score": 28.746283476479697}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing) {\n\t\tlog.info(\"Enqueuing order {} for auto-shipping and auto-invoicing\", orderRecord);\n\t\tfinal String transactionName = \"EnqueueOrderForAutoShipAndInvoice-\" + orderRecord.getC_Order_ID();\n\t\tenqueue(orderRecord.getC_Order_ID(), transactionName);\n\t} else {\n\t\tlog.info(\"Enqueuing order {} for missing shipment schedules creation\", orderRecord);\n\t\tfinal String transactionName = \"EnqueueOrderForMissingShipmentSchedules-\" + orderRecord.getC_Order_ID();\n\t\tenqueue(orderRecord.getC_Order_ID(), transactionName);\n\t}\n}", "CodeBleu_score": 39.145048732750745}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\t\tfinal OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\t\tif (isEligibleForAutoProcessing) {\n\t\t\tlog.info(\"Enqueuing order {} for automatic shipping and invoicing\", orderId);\n\t\t\ttransactionName.enqueue(I_C_Order.class, orderRecord.getC_Order_ID(), I_C_Order.TRXNAME_AutoShipAndInvoice);\n\t\t} else {\n\t\t\tlog.info(\"Enqueuing order {} to create missing shipment schedules\", orderId);\n\t\t\ttransactionName.enqueue(I_C_Order.class, orderRecord.getC_Order_ID(), I_C_Order.TRXNAME_CreateMissingShipmentSchedules);\n\t\t}\n\t}", "CodeBleu_score": 46.98148652482231}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = $this->getUserByEmail($request->email);\n\n    if (!$model || !Hash::check($request->password, $model->password)) {\n        $this->fireFailedEvent($request, $model);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $model;\n}", "CodeBleu_score": 40.32506583461151}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 51.34599837132956}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = $this->getUserModel();\n    $user = $model->where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 55.2519079243891}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 72.95533593440727}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($this->throttleKey($request));\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 83.61592416841617}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->incrementLoginAttempts($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.33535701037877}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $userId = session()->get('user_id');\n    $user = User::find($userId);\n    if ($user) {\n        $publicKey = (new WebAuthnAssertionResponse())->prepare($user);\n        $data = [\n            'publicKey' => $publicKey,\n            'two_factor_enabled' => !empty($user->two_factor_secret),\n            'remember' => session()->get('remember'),\n        ];\n        return Inertia::render('TwoFactorChallenge', $data);\n    }\n}", "CodeBleu_score": 46.42664524770549}, {"code": "<?\npublic function toResponse($request){\n\t    $user = Auth::guard('web')->user();\n\n    $publicKey = $user->webAuthnCredentials()->first()->publicKey;\n\n    $publicKeyCredentialRequestOptions = PublicKeyCredentialRequestOptions::create($publicKey);\n    $publicKeyCredentialRequestOptions->setUserVerification(PublicKeyCredentialRequestOptions::USER_VERIFICATION_REQUIREMENT_PREFERRED);\n\n    $data = [\n        'publicKey' => $publicKey,\n        'publicKeyCredentialRequestOptions' => $publicKeyCredentialRequestOptions,\n        'twoFactorEnabled' => $user->two_factor_enabled,\n        'remember' => $request->session()->get('auth.remember'),\n    ];\n\n    return Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 42.63215252314358}, {"code": "<?\npublic function toResponse($request){\n\t    // Retrieve the user ID from the session\n    $userId = session('webauthn_auth');\n\n    // Fetch the user\n    $user = User::find($userId);\n\n    // If the user exists, prepare a WebAuthn assertion\n    if ($user) {\n        $publicKey = $user->webauthnCredentials()->first()->publicKey;\n\n        // Include the public key in the response data\n        $data = [\n            'user' => $user,\n            'publicKey' => $publicKey,\n        ];\n\n        // Render the 'TwoFactorChallenge' view with data indicating whether two-factor authentication is enabled and if the \"remember me\" option is set\n        return view('auth.TwoFactorChallenge', [\n            'two_factor_enabled' => true,\n            'remember' => session('remember'),\n        ])->with($data);\n    }\n\n    // If the user does not exist, return a response indicating an error\n    return response('Error', 401);\n}", "CodeBleu_score": 44.19672583996238}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::where('driver', $driver)\n        ->where('driver_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        // If there is an existing user token, retrieve the associated user\n        $user = $userToken->user;\n\n        // Verify the user association\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        // If there is no existing user token, create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n    }\n\n    // Create a new user token if it doesn't exist\n    if (!$userToken) {\n        $userToken = $this->createUserToken($user, $driver, $socialite);\n    }\n\n    // Return the authenticated user\n    return $user;\n}", "CodeBleu_score": 62.45377723196511}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)\n        ->where('driver_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    return $user;\n}", "CodeBleu_score": 59.392759481439064}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::where('driver', $driver)\n        ->where('driver_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        // Retrieve the associated user\n        $user = $userToken->user;\n\n        // Verify the user association\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        // Create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n    }\n\n    // Create a new user token\n    $this->createUserToken($user, $driver, $socialite);\n\n    // Return the authenticated user\n    return $user;\n}", "CodeBleu_score": 58.63439988923681}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    if (! $user = $this->getUser($request)) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if ($this->validator->validate($credentials, $user)) {\n        return true;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n\n    return false;\n}", "CodeBleu_score": 52.500993318794144}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->getUser($request);\n\n    if ($user === null) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! $this->validateWebAuthnAssertion($credentials, $user)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 62.35437244778227}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if ($user === null) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (!$this->validateCredentials($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 73.57593323630434}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    if (!$this->email) {\n        Log::error('User email is required');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        Log::error('User not found with email: ' . $this->email);\n        return null;\n    }\n}", "CodeBleu_score": 39.94309776472505}, {"code": "<?\nprivate function user(): ?User{\n\t    if (!$this->email) {\n        Log::error('No email provided');\n        return null;\n    }\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        Log::error('User not found: ' . $e->getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 39.61989999150847}, {"code": "<?\nprivate function user(): ?User{\n\t    if (!$this->email) {\n        Log::error('Email is required to retrieve user');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        Log::error('User not found', ['email' => $this->email]);\n        return null;\n    }\n}", "CodeBleu_score": 41.116311586687424}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch') {\n        return;\n    }\n\n    if (!$this->option('flush')) {\n        return;\n    }\n\n    foreach (config('scout.meilisearch.index-settings') as $index => $settings) {\n        $table = Arr::get($settings, 'table');\n        $this->artisan(\"scout:flush \\\"{$table}\\\"\", 'Flushing index:', ['--index-name' => $index]);\n    }\n\n    $this->line('\u2705 Indexes flushed.');\n}", "CodeBleu_score": 57.128249905428284}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch' || !config('scout.flush')) {\n        return;\n    }\n\n    foreach (config('scout.meilisearch.settings') as $index => $settings) {\n        $table = array_key_first($settings);\n        $this->artisan(\"Flushing index: {$index}\", 'scout:flush', ['model' => $table]);\n    }\n\n    $this->info('Indexes flushed');\n}", "CodeBleu_score": 49.236020935741074}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') !== 'meilisearch') {\n        return;\n    }\n\n    if (!$this->option('flush')) {\n        return;\n    }\n\n    $indexes = config('scout.meilisearch.indexes');\n\n    foreach ($indexes as $index => $settings) {\n        $table = $settings['model']::getTableName();\n        $this->artisan(\"scout:flush \\\"$table\\\"\", 'meilisearch:import');\n    }\n\n    $this->info('Indexes flushed');\n}", "CodeBleu_score": 53.101231108941725}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getVCard($resource);\n\n    if (! $vcard) {\n        $vcard = new VCard();\n        $this->setUID($vcard, $resource);\n    }\n\n    $this->exporters($resource::class)\n        ->each(function (ExportVCardResource $exporter) use ($vcard, $resource) {\n            $exporter->export($vcard, $resource);\n        });\n\n    return $vcard;\n}", "CodeBleu_score": 24.424043508499928}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getVCardFromResource($resource);\n\n    $this->exporters($resource::class)\n        ->each(fn (ExportVCardResource $exporter) => $exporter->execute($resource, $vcard));\n\n    return $vcard;\n}", "CodeBleu_score": 15.54739559936521}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getVCard($resource);\n\n    $this->exporters(get_class($resource))\n        ->each(function (ExportVCardResource $exporter) use ($resource, $vcard) {\n            $exporter->export($vcard, $resource);\n        });\n\n    return $vcard;\n}", "CodeBleu_score": 17.324957988671898}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $obj = $this->getObjectByUri($addressBookId, $cardUri);\n\n    if ($obj instanceof Contact) {\n        Queue::push(new DestroyContact($obj), 'high');\n    } elseif ($obj instanceof Group) {\n        Queue::push(new DestroyGroup($obj), 'high');\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 35.50603251586486}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObjectByUri($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Queue::pushOn('high', new DestroyContact($object->id));\n\n        return true;\n    }\n\n    if ($object instanceof Group) {\n        Queue::pushOn('high', new DestroyGroup($object->id));\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 40.93646320705866}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObjectByUri($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        // Dispatch a job to destroy the contact\n        $this->dispatch(new DestroyContact($object));\n    } elseif ($object instanceof Group) {\n        // Dispatch a job to destroy the group\n        $this->dispatch(new DestroyGroup($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 32.22980175443653}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    $user = auth()->user();\n\n    $activity = LeadActivity::create([\n        'user_id' => $user->id,\n        'lead_id' => $data['lead_id'],\n        'type' => LeadActivity::TYPE_FILE_UPLOAD,\n        'details' => $data['details'],\n    ]);\n\n    $file = request()->file('file');\n\n    return LeadActivityFile::create([\n        'lead_activity_id' => $activity->id,\n        'name' => $file->getClientOriginalName(),\n        'path' => $file->store('lead-activity-files'),\n    ]);\n}", "CodeBleu_score": 56.82682022312058}, {"code": "<?\npublic function upload(array $data){\n\t    $file = $data['file'] ?? null;\n\n    if (!$file) {\n        return;\n    }\n\n    $leadActivity = LeadActivity::create([\n        'user_id' => auth()->id(),\n        'lead_id' => $data['lead_id'],\n        'activity_type_id' => $data['activity_type_id'],\n        'note' => $data['note'],\n        'date' => $data['date'],\n    ]);\n\n    $fileName = $file->getClientOriginalName();\n    $filePath = $file->store('lead_activity_files');\n\n    return LeadActivityFile::create([\n        'lead_activity_id' => $leadActivity->id,\n        'file_name' => $fileName,\n        'file_path' => $filePath,\n    ]);\n}", "CodeBleu_score": 54.14538970935161}, {"code": "<?\npublic function upload(array $data){\n\t    if (!$this->request->hasFile('file')) {\n        return;\n    }\n\n    $activity = $this->leadActivityRepository->create([\n        'type' => 'file',\n        'description' => $data['description'],\n        'user_id' => auth()->user()->id,\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    $file = $this->request->file('file');\n    $fileName = $file->getClientOriginalName();\n    $filePath = $file->storeAs('lead_files', $fileName, 'public');\n\n    return $this->leadFileRepository->create([\n        'name' => $fileName,\n        'path' => $filePath,\n        'lead_activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 54.03324343797332}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } else if ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } else if ($exception instanceof ParseError) {\n        $statusCode = 500;\n    } else {\n        $statusCode = $exception->getStatusCode() ?: 500;\n    }\n\n    if (request()->is('admin/*')) {\n        return $this->response('admin', $statusCode);\n    } else if (request()->is('*/admin/*')) {\n        return redirect()->route('admin.session.create');\n    } else {\n        return $this->response('front', $statusCode);\n    }\n}", "CodeBleu_score": 42.36453163472039}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n        $path = 'admin';\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n        $path = 'admin';\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n        $path = 'admin';\n    } else {\n        $statusCode = $exception->getCode() ?: 500;\n        $path = $this->isAdmin(request()) ? 'admin' : 'front';\n    }\n\n    if ($statusCode == 404) {\n        if ($this->isAdmin(request())) {\n            return $this->response($path, $statusCode);\n        } else {\n            return redirect()->route('admin.session.create');\n        }\n    }\n\n    return $this->response($path, $statusCode);\n}", "CodeBleu_score": 51.39658711507372}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    // Check if the route is for admin or front\n    $isAdminRoute = request()->route()->getPrefix() === 'admin';\n\n    // Check if the exception is an instance of ModelNotFoundException\n    if ($exception instanceof ModelNotFoundException) {\n        // Set the status code to 404\n        $statusCode = 404;\n\n        // Redirect front routes to the admin session creation\n        if (! $isAdminRoute) {\n            return redirect()->route('admin.session.create');\n        }\n    }\n\n    // Check if the exception is an instance of PDOException\n    if ($exception instanceof PDOException) {\n        // Set the status code to 500\n        $statusCode = 500;\n    }\n\n    // Check if the exception is an instance of ParseError\n    if ($exception instanceof ParseError) {\n        // Set the status code to 500\n        $statusCode = 500;\n    }\n\n    // Check if the exception is an instance of HttpException\n    if ($exception instanceof HttpException) {\n        // Set the status code to the exception's status code\n        $statusCode = $exception->getStatusCode();\n    }\n\n    // Check if the status code is set\n    if (isset($statusCode)) {\n        // Return the appropriate response based on the status code\n        switch ($statusCode) {\n            case 404:\n                // Return the 404 response\n                return $this->response('admin', $statusCode);\n            case 500:\n                // Return the 500 response\n                return $this->response('admin', $statusCode);\n        }\n    }\n\n    // Return the default response\n    return parent::render($request, $exception);\n}", "CodeBleu_score": 49.847642569482964}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $activity_ids = request()->get('activity_ids');\n    $is_done = request()->get('is_done');\n\n    $count = 0;\n\n    foreach ($activity_ids as $activity_id) {\n        $activity = Activity::find($activity_id);\n\n        if ($activity) {\n            event(new ActivityUpdating($activity));\n\n            $activity->is_done = $is_done;\n            $activity->save();\n\n            event(new ActivityUpdated($activity));\n\n            $count++;\n        }\n    }\n\n    if ($count > 0) {\n        return response()->json(['success' => true]);\n    } else {\n        return response()->json(['success' => false]);\n    }\n}", "CodeBleu_score": 40.41946263672555}, {"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request('activityIds');\n    $isDone = request('isDone');\n    $updatedCount = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = Activity::find($activityId);\n\n        if ($activity) {\n            event(new ActivityUpdating($activity));\n            $activity->is_done = $isDone;\n            $activity->save();\n            event(new ActivityUpdated($activity));\n            $updatedCount++;\n        }\n    }\n\n    if ($updatedCount > 0) {\n        return response()->json([\n            'status' => 'success',\n            'message' => 'Activities updated successfully.'\n        ]);\n    } else {\n        return response()->json([\n            'status' => 'error',\n            'message' => 'No activities were updated.'\n        ]);\n    }\n}", "CodeBleu_score": 37.84694010357205}, {"code": "<?\npublic function massUpdate(){\n\t    $activity_ids = request()->get('activity_ids');\n    $is_done = request()->get('is_done');\n\n    $count = 0;\n    foreach ($activity_ids as $activity_id) {\n        $activity = Activity::find($activity_id);\n\n        if ($activity) {\n            event(new ActivityUpdating($activity));\n            $activity->is_done = $is_done;\n            $activity->save();\n            event(new ActivityUpdated($activity));\n            $count++;\n        }\n    }\n\n    if ($count > 0) {\n        return response()->json(['success' => true]);\n    } else {\n        return response()->json(['success' => false]);\n    }\n}", "CodeBleu_score": 40.41946263672555}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    foreach (request('ids') as $id) {\n        $activity = Activity::find($id);\n        event(new ActivityDeleting($activity));\n        $activity->delete();\n        event(new ActivityDeleted($activity));\n    }\n    return response()->json(['success' => true]);\n}", "CodeBleu_score": 25.61399496350476}, {"code": "<?\n public function massDestroy(){\n\t    $activityIds = request()->input('ids');\n\n    foreach ($activityIds as $activityId) {\n        $activity = Activity::find($activityId);\n\n        if ($activity) {\n            event(new ActivityDeleting($activity));\n            $activity->delete();\n            event(new ActivityDeleted($activity));\n        }\n    }\n\n    return response()->json([\n        'success' => true,\n        'message' => 'Activities successfully destroyed.',\n    ]);\n}", "CodeBleu_score": 29.07878375479458}, {"code": "<?\n public function massDestroy(){\n\t    $activityIds = request()->input('activityIds');\n\n    foreach ($activityIds as $activityId) {\n        $activity = Activity::find($activityId);\n\n        event(new ActivityDeleting($activity));\n\n        $activity->delete();\n\n        event(new ActivityDeleted($activity));\n    }\n\n    return response()->json([\n        'success' => true,\n        'message' => 'Activities deleted successfully.',\n    ]);\n}", "CodeBleu_score": 30.362462848642757}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $request = request();\n    $cards = Card::all();\n\n    foreach ($cards as $card) {\n        $card->selected = false;\n        foreach ($request->cards as $requestCard) {\n            if ($card->id === $requestCard['id']) {\n                $card->selected = true;\n                break;\n            }\n        }\n    }\n\n    return response()->json(['cards' => $cards]);\n}", "CodeBleu_score": 35.82134910732664}, {"code": "<?\n public function updateCards(){\n\t    $cards = $this->getCards();\n    $request = request();\n    $data = $request->all();\n\n    foreach ($cards as $card) {\n        foreach ($data as $key => $value) {\n            if ($card['id'] == $key) {\n                $card['selected'] = $value;\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 40.56799301778449}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardCard::get();\n    $requestData = request()->all();\n\n    foreach ($cards as $card) {\n        $card->selected = isset($requestData[$card->id]) ? true : false;\n        $card->save();\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 31.014652098891034}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    // Dispatch an event before saving\n    event(new ConfigurationSaving());\n\n    // Create the configuration with the provided request data\n    Configuration::create(request()->all());\n\n    // Dispatch an event after saving\n    event(new ConfigurationSaved());\n\n    // Flash a success message to the session\n    session()->flash('message', 'Configuration saved successfully.');\n\n    // Redirect back to the previous page\n    return redirect()->back();\n}", "CodeBleu_score": 30.9944311449458}, {"code": "<?\npublic function store(){\n\t    Event::dispatch('config.before_save');\n\n    $config = new Config();\n    $config->fill($this->request->all());\n    $config->save();\n\n    Event::dispatch('config.after_save');\n\n    Session::flash('success', 'Config saved successfully');\n\n    return Redirect::back();\n}", "CodeBleu_score": 30.28388137793553}, {"code": "<?\npublic function store(){\n\t    event(new \\App\\Events\\Configuration\\BeforeSave());\n\n    $configuration = \\App\\Models\\Configuration::create(request()->all());\n\n    event(new \\App\\Events\\Configuration\\AfterSave($configuration));\n\n    flash('Configuration created successfully.')->success();\n\n    return redirect()->back();\n}", "CodeBleu_score": 33.93129458151288}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/'. $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.27286940382231}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.27286940382231}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/' . $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 90.66551583260859}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t  List<AdminModelSort> sortList = new ArrayList<>();\n  for (int i = 0; i < list.size(); i++) {\n    AdminModelSort sort = new AdminModelSort();\n    sort.setUserId(userId);\n    sort.setModelName(list.get(i));\n    sort.setSortOrder(i);\n    sortList.add(sort);\n  }\n  adminModelSortRepository.deleteByUserId(userId);\n  adminModelSortRepository.saveAll(sortList);\n  return new Result(true);\n}", "CodeBleu_score": 54.02733870485401}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (int i = 0; i < list.size(); i++) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setUserId(userService.getUserId());\n        sort.setModelName(list.get(i));\n        sort.setSortOrder(i);\n        sortList.add(sort);\n    }\n    adminModelSortRepository.deleteByUserId(userService.getUserId());\n    adminModelSortRepository.saveAll(sortList);\n    return Result.success();\n}", "CodeBleu_score": 57.79944084331673}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t  List<AdminModelSort> adminModelSortList = new ArrayList<>();\n  for (int i = 0; i < list.size(); i++) {\n    AdminModelSort adminModelSort = new AdminModelSort();\n    adminModelSort.setAdminId(SecurityUtils.getCurrentUserId());\n    adminModelSort.setModelId(list.get(i));\n    adminModelSort.setSort(i);\n    adminModelSortList.add(adminModelSort);\n  }\n  adminModelSortService.removeByAdminId(SecurityUtils.getCurrentUserId());\n  adminModelSortService.saveBatch(adminModelSortList);\n  return ResultGenerator.genSuccessResult();\n}", "CodeBleu_score": 62.80701313433858}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    // Retrieve the current admin configuration by the setting ID.\n    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\n    // Check if the module is CRM.\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        // Return an error if the module is CRM.\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n\n    // Update the status of the admin configuration.\n    adminConfig.setStatus(moduleSetting.getStatus());\n\n    // Save the updated setting.\n    adminConfigService.setModuleSetting(adminConfig);\n\n    // Return a success result.\n    return Result.ok();\n}", "CodeBleu_score": 91.59826725658814}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.51211380615895}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.51211380615895}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfiguration userConfiguration = userConfigurationService.findByCustomKey(customKey);\n    if (userConfiguration != null) {\n        userConfiguration.setValue(json.toString());\n        userConfigurationService.save(userConfiguration);\n    } else {\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setCustomKey(customKey);\n        userConfiguration.setValue(json.toString());\n        userConfigurationService.save(userConfiguration);\n    }\n    return Result.success();\n}", "CodeBleu_score": 57.10987571923059}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfiguration userConfiguration = userConfigurationService.getUserConfigurationByCustomKey(customKey);\n    if (userConfiguration != null) {\n        userConfiguration.setValue(json.toString());\n        userConfigurationService.saveUserConfiguration(userConfiguration);\n    } else {\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setValue(json.toString());\n        userConfiguration.setCustomKey(customKey);\n        userConfigurationService.saveUserConfiguration(userConfiguration);\n    }\n    return new Result(true, StatusCode.OK, \"Query custom setting successfully\");\n}", "CodeBleu_score": 57.29718021069012}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfig userConfig = userConfigRepository.findByCustomKey(customKey);\n    if (userConfig != null) {\n        userConfig.setValue(json.toString());\n    } else {\n        userConfig = new UserConfig();\n        userConfig.setCustomKey(customKey);\n        userConfig.setValue(json.toString());\n    }\n    userConfigRepository.save(userConfig);\n    return Result.success();\n}", "CodeBleu_score": 60.002444539632215}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userService.getUser(userId);\n    if (user == null) {\n        return Result.error(CodeMsg.USER_NOT_EXIST);\n    }\n    String departmentName = departmentService.getDepartmentName(user.getDepartmentId());\n    user.setDepartmentName(departmentName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 49.01790409964728}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    Department department = departmentService.getById(user.getDepartmentId());\n    user.setDepartmentName(department.getName());\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 50.11479411606443}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = userMapper.getUserInfo(userId);\n    String departmentName = departmentMapper.getDepartmentName(user.getDepartmentId());\n    user.setDepartmentName(departmentName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 49.32116843256633}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t    User user = User.find.byId(session().get(\"email\"));\n    List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"user\", user).findList();\n    if (readNotices.size() > 1) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUser(user);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok(Json.toJson(1));\n}", "CodeBleu_score": 34.8940272359952}, {"code": " public Result readNotice() {\n\t    User user = User.find.byId(session().get(\"email\"));\n    List<ReadNotice> readNotices = ReadNotice.find.query().where().eq(\"user.email\", user.getEmail()).findList();\n    if (readNotices.size() > 0) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice(user);\n        readNotice.save();\n    }\n    return ok(Json.toJson(\"success\"));\n}", "CodeBleu_score": 29.81593321379642}, {"code": " public Result readNotice() {\n\t  User user = User.find.byId(session().get(\"email\"));\n  List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"user\", user).findList();\n  if (readNotices.size() > 0) {\n   for (ReadNotice readNotice : readNotices) {\n    readNotice.readNotice = 1;\n    readNotice.update();\n   }\n  }\n  else {\n   ReadNotice readNotice = new ReadNotice(user, 1);\n   readNotice.save();\n  }\n  return ok(Json.toJson(\"success\"));\n }", "CodeBleu_score": 24.241356563463068}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigRepository.findByName(CompanyInfo.COMPANY_INFO);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(CompanyInfo.COMPANY_INFO);\n    }\n    adminConfig.setValue(adminCompanyBO.getCompanyInfo());\n    adminConfigRepository.save(adminConfig);\n}", "CodeBleu_score": 40.0860258722174}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigRepository.findByName(Constants.ADMIN_CONFIG_COMPANY_INFO);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(Constants.ADMIN_CONFIG_COMPANY_INFO);\n        adminConfig.setValue(Constants.ADMIN_CONFIG_COMPANY_INFO_DEFAULT_VALUE);\n    }\n    adminConfig.setValue(adminCompanyBO.toString());\n    adminConfigRepository.save(adminConfig);\n}", "CodeBleu_score": 43.18731119368034}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = adminConfigRepository.findByName(\"companyInfo\");\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{\\\"name\\\":\\\"\\\",\\\"address\\\":\\\"\\\",\\\"phone\\\":\\\"\\\",\\\"email\\\":\\\"\\\",\\\"logo\\\":\\\"\\\",\\\"website\\\":\\\"\\\"}\");\n    } else {\n        JSONObject jsonObject = new JSONObject(adminConfig.getValue());\n        jsonObject.put(\"name\", adminCompanyBO.getName());\n        jsonObject.put(\"address\", adminCompanyBO.getAddress());\n        jsonObject.put(\"phone\", adminCompanyBO.getPhone());\n        jsonObject.put(\"email\", adminCompanyBO.getEmail());\n        jsonObject.put(\"logo\", adminCompanyBO.getLogo());\n        jsonObject.put(\"website\", adminCompanyBO.getWebsite());\n        adminConfig.setValue(jsonObject.toString());\n    }\n    adminConfigRepository.save(adminConfig);\n}", "CodeBleu_score": 46.15781607976779}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String adminConfig = getAdminConfig(AdminConstants.ADMIN_CONFIG_KEY);\n    if (StringUtils.isNotEmpty(adminConfig)) {\n        try {\n            adminCompanyBO = JSON.parseObject(adminConfig, AdminCompanyBO.class);\n        } catch (Exception e) {\n            log.error(\"queryAdminConfig error\", e);\n        }\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 43.44127679172657}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String configKey = AdminCompanyBO.class.getName();\n    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String configValue = adminConfigService.queryAdminConfig(configKey);\n    if (StringUtils.isNotBlank(configValue)) {\n        try {\n            adminCompanyBO = JSON.parseObject(configValue, AdminCompanyBO.class);\n        } catch (Exception e) {\n            LOGGER.error(\"Failed to parse admin configuration value for key: {}\", configKey, e);\n        }\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 41.89545897172634}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t  String key = \"admin.company\";\n  AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n  AdminConfig adminConfig = adminConfigRepository.findByKey(key);\n  if (adminConfig != null) {\n    adminCompanyBO = parseAdminConfig(adminConfig.getValue());\n  }\n  return adminCompanyBO;\n}", "CodeBleu_score": 50.30731241443611}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t        List<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n        for (String string : stringList) {\n            AdminConfig adminConfig = new AdminConfig();\n            adminConfig.setName(string);\n            adminConfig.setValue(string);\n            adminConfig.setConfigType(\"log\");\n            adminConfigList.add(adminConfig);\n        }\n        AdminConfig.removeAll(AdminConfig.class, \"configType\", \"log\");\n        AdminConfig.saveAll(adminConfigList);\n    }", "CodeBleu_score": 36.13004579142036}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigs = new ArrayList<>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setConfigDataId(UUID.randomUUID().toString());\n        adminConfig.setName(\"welcome_speech\");\n        adminConfig.setValue(string);\n        adminConfig.setDescription(\"Welcome Speech\");\n        adminConfig.setType(\"text\");\n        adminConfig.setCategory(\"welcome_speech\");\n        adminConfig.setConfigId(logConfig.getConfigId());\n        adminConfigs.add(adminConfig);\n    }\n    adminConfigRepository.deleteByCategoryAndConfigId(logConfig.getConfigId(), \"welcome_speech\");\n    adminConfigRepository.saveAll(adminConfigs);\n}", "CodeBleu_score": 40.10920192866703}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> configList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setConfigData(string);\n        config.setConfigName(logConfigName);\n        config.setConfigType(logConfigType);\n        config.setDescription(logConfigDescription);\n        configList.add(config);\n    }\n    AdminConfigService adminConfigService = new AdminConfigService();\n    adminConfigService.removeConfigurations(logConfigName);\n    adminConfigService.saveConfigurations(configList);\n}", "CodeBleu_score": 42.15895880599174}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Retrieve the current user ID and user details\n    Long userId = SecurityUtil.getUserId();\n    SysUser user = userService.getById(userId);\n    // Check if the user is enabled\n    if (user.getStatus().equals(CommonConstant.STATUS_DISABLE)) {\n        throw new ServiceException(ResultCode.USER_DISABLED);\n    }\n    // Check if the user has a password\n    if (StringUtils.isBlank(user.getPassword())) {\n        throw new ServiceException(ResultCode.USER_NO_PASSWORD_ERROR);\n    }\n    // Check if the provided password matches the stored password\n    if (!PasswordUtil.matches(adminInitDataBO.getPassword(), user.getPassword())) {\n        throw new ServiceException(ResultCode.USER_PASSWORD_ERROR);\n    }\n    // Generate a temporary access code\n    String accessCode = UUID.randomUUID().toString();\n    // Store the access code in Redis with a 10-minute expiration\n    redisTemplate.opsForValue().set(accessCode, userId, 10, TimeUnit.MINUTES);\n    // Return the access code\n    return accessCode;\n}", "CodeBleu_score": 37.64888787772496}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Get the current user ID and user details\n    Long userId = SecurityUtils.getUserId();\n    UserDetailsBO userDetails = SecurityUtils.getUserDetails();\n    String username = userDetails.getUsername();\n\n    // Retrieve the user's password and salt from the database\n    User user = userService.getById(userId);\n    String password = user.getPassword();\n    String salt = user.getSalt();\n\n    // Check if the provided password matches the stored password\n    if (passwordService.matches(adminInitDataBO.getPassword(), salt, password)) {\n        // Generate a temporary access code\n        String accessCode = IdUtils.simpleUUID();\n\n        // Store the temporary access code in Redis with a 10-minute expiration\n        redisUtils.set(CacheConstants.SYS_CONFIG_KEY + accessCode, accessCode, 10L, TimeUnit.MINUTES);\n\n        // Return the temporary access code\n        return accessCode;\n    } else {\n        // Throw an exception indicating an invalid password\n        throw new ServiceException(ErrorCode.USER_INCORRECT_PASSWORD);\n    }\n}", "CodeBleu_score": 42.31881394728687}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Get the current user ID\n    Long userId = getCurrentUserId();\n\n    // Retrieve user details\n    User user = userService.getById(userId);\n\n    // Check the provided password against the stored password\n    if (user.getPassword().equals(PasswordUtils.encode(adminInitDataBO.getPassword(), user.getSalt()))) {\n        // Generate a temporary access code\n        String accessCode = UUID.randomUUID().toString();\n\n        // Store the access code in Redis with a 10-minute expiration\n        redisTemplate.opsForValue().set(ACCESS_CODE_PREFIX + accessCode, userId, 10, TimeUnit.MINUTES);\n\n        return accessCode;\n    } else {\n        throw new BusinessException(ErrorCodeEnum.INVALID_PASSWORD);\n    }\n}", "CodeBleu_score": 33.99698444108054}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    // Get the user ID from the authentication token\n    String userId = AuthUtil.getUserId();\n    // Construct a key to retrieve the list of unauthorized menu URLs from Redis\n    String key = \"user:unauthorized:menu:url:\" + userId;\n    // Fetch the list of unauthorized menu URLs from Redis\n    List<String> unauthorizedMenuUrlList = redisTemplate.opsForList().range(key, 0, -1);\n    // Check if the initial authentication URL is in the list of unauthorized menu URLs\n    if (unauthorizedMenuUrlList != null && !unauthorizedMenuUrlList.isEmpty()) {\n        // Iterate over the list of unauthorized menu URLs\n        for (String url : unauthorizedMenuUrlList) {\n            // Check if the current URL matches the initial authentication URL\n            if (url.equals(AuthConstant.INIT_AUTH_URL)) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 40.80531918648203}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = getKey(userId);\n    List<String> unauthorizedMenuUrls = getUnauthorizedMenuUrls(key);\n    String initAuthUrl = getInitAuthUrl();\n    return unauthorizedMenuUrls.contains(initAuthUrl);\n}", "CodeBleu_score": 29.425413690009027}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = String.format(\"%s:%s\", userId, \"unauthorized_menu_url\");\n    Set<String> unauthorizedMenuUrls = redisTemplate.opsForSet().members(key);\n    String initialAuthUrl = getInitialAuthUrl();\n    return unauthorizedMenuUrls.contains(initialAuthUrl);\n}", "CodeBleu_score": 41.94926412284245}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    menuIdList.forEach(menuId -> {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    });\n    // Save role-menu associations in batches\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 60.33942374488041}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    menuIdList.forEach(menuId -> {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    });\n    // Save role-menu associations in batches\n    List<List<AdminRoleMenu>> subLists = Lists.partition(roleMenuList, 100);\n    for (List<AdminRoleMenu> subList : subLists) {\n        adminRoleMenuService.saveBatch(subList);\n    }\n}", "CodeBleu_score": 59.420126220960135}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    // Save role-menu associations in batches\n    int batchSize = 100;\n    for (int i = 0; i < roleMenuList.size(); i += batchSize) {\n        int endIndex = Math.min(i + batchSize, roleMenuList.size());\n        List<AdminRoleMenu> subList = roleMenuList.subList(i, endIndex);\n        roleMenuMapper.batchInsert(subList);\n    }\n}", "CodeBleu_score": 51.59022239929091}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = JSONObject.parseObject(JSONObject.toJSONString(sysLog));\n        map.put(\"@timestamp\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index).source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 55.61527328457886}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"createTime\", DateUtil.formatDateTime(sysLog.getCreateTime()));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 56.371958286815946}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = objectMapper.convertValue(sysLog, Map.class);\n        map.put(\"createTime\", DateUtil.formatFullTime(LocalDateTime.now(), DateUtil.FULL_TIME_SPLIT_PATTERN));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index);\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 54.88601837311737}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(createSearchSourceBuilder(querySysLogBO));\n        searchRequest.fetchSource(null, EXCLUDE_FIELDS);\n        searchRequest.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            SearchHits hits = searchResponse.getHits();\n            List<SysLog> sysLogs = Arrays.stream(hits.getHits())\n                    .map(SearchHit::getSourceAsMap)\n                    .map(map -> {\n                        SysLog sysLog = new SysLog();\n                        sysLog.setId(map.get(\"id\").toString());\n                        sysLog.setUserId(map.get(\"userId\").toString());\n                        sysLog.setModel(map.get(\"model\").toString());\n                        sysLog.setSubModelLabel(map.get(\"subModelLabel\").toString());\n                        sysLog.setCreateTime(map.get(\"createTime\").toString());\n                        return sysLog;\n                    }).collect(Collectors.toList());\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setTotalHits(hits.getTotalHits().value);\n            basePage.setPage(querySysLogBO.getPage());\n            basePage.setList(sysLogs);\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return new BasePage<>();\n    }", "CodeBleu_score": 53.328071726700735}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        // \u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        // \u6392\u5e8f\n        searchRequest.source().sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        // \u6392\u9664\u5b57\u6bb5\n        searchRequest.source().fetchSource(new String[]{\"userId\", \"model\", \"subModelLabel\", \"createTime\", \"result\", \"params\"}, new String[]{});\n        // \u67e5\u8be2\u6761\u4ef6\n        searchRequest.source(createSearchSourceBuilder(querySysLogBO));\n        // \u6267\u884c\u67e5\u8be2\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            // \u7ed3\u679c\u6620\u5c04\n            List<SysLog> sysLogs = Arrays.stream(searchResponse.getHits().getHits()).map(SearchHit::getSourceAsMap).map(map -> {\n                SysLog sysLog = new SysLog();\n                sysLog.setUserId(Long.parseLong(map.get(\"userId\").toString()));\n                sysLog.setModel(map.get(\"model\").toString());\n                sysLog.setSubModelLabel(map.get(\"subModelLabel\").toString());\n                sysLog.setCreateTime(LocalDateTime.parse(map.get(\"createTime\").toString(), DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n                sysLog.setResult(map.get(\"result\").toString());\n                sysLog.setParams(map.get(\"params\").toString());\n                return sysLog;\n            }).collect(Collectors.toList());\n            // \u5206\u9875\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setList(sysLogs);\n            basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n            basePage.setCurrent(querySysLogBO.getPage());\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n            return new BasePage<>();\n        }\n    }", "CodeBleu_score": 47.757392509332206}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        // \u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        // \u6392\u5e8f\n        searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        // \u4e0d\u8fd4\u56de\u5b57\u6bb5\n        searchSourceBuilder.fetchSource(null, new String[]{\"content\"});\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        // \u6267\u884c\u67e5\u8be2\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            List<SysLog> sysLogList = new ArrayList<>();\n            Arrays.stream(searchResponse.getHits().getHits()).forEach(hit -> {\n                SysLog sysLog = new SysLog();\n                Map<String, Object> sourceAsMap = hit.getSourceAsMap();\n                BeanUtil.copyProperties(sourceAsMap, sysLog);\n                sysLogList.add(sysLog);\n            });\n            BasePage<SysLog> page = new BasePage<>();\n            page.setTotal(searchResponse.getHits().getTotalHits().value);\n            page.setCurrent(querySysLogBO.getPage());\n            page.setRecords(sysLogList);\n            return page;\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return null;\n    }", "CodeBleu_score": 58.497041206393895}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n\n  const request = https.get(url, function (response) {\n    response.pipe(file);\n  });\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close();\n      resolve(true);\n    });\n\n    file.on('error', (err) => {\n      fs.unlink(dest);\n      reject(err.message);\n    });\n  });\n}", "CodeBleu_score": 53.27765134768987}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise(async (resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n\n    https\n      .get(url, (response) => {\n        response.pipe(file);\n        file.on(\"finish\", () => {\n          file.close(resolve(true));\n        });\n      })\n      .on(\"error\", (err) => {\n        fs.unlink(dest, () => reject(err.message));\n      });\n  });\n}", "CodeBleu_score": 55.1914228357948}, {"code": "async function downloadFile(url, dest){\n\t    const file = fs.createWriteStream(dest);\n  \n    const request = https.get(url, function(response) {\n      response.pipe(file);\n  \n      file.on('finish', () => {\n        file.close();\n        resolve();\n      });\n  \n      file.on('error', err => {\n        fs.unlink(dest); // delete the file async. (but we don't check the result)\n        reject(err.message);\n      });\n    });\n  \n    request.on('error', err => {\n      fs.unlink(dest); // delete the file async. (but we don't check the result)\n      reject(err.message);\n    });\n  }", "CodeBleu_score": 48.292360284063584}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return module.getDependentModules().stream()\n        .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n        .peek(circularDependencyCheckSet::add)\n        .flatMap(moduleId -> getApplicationById(moduleId).onErrorResume(error -> {\n            log.warn(\"Error retrieving dependent module for moduleId: {}\", moduleId, error);\n            return Mono.empty();\n        }))\n        .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n}", "CodeBleu_score": 54.00576088894849}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t  return module.getDependentModules()\n    .stream()\n    .filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule))\n    .peek(circularDependencyCheckSet::add)\n    .map(dependentModule -> {\n     try {\n      return applicationRepository.findById(dependentModule).block();\n     } catch (Exception e) {\n      log.warn(\"Error retrieving dependent module: {}\", dependentModule, e);\n      return null;\n     }\n    })\n    .filter(Objects::nonNull)\n    .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n }", "CodeBleu_score": 50.29787055737302}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return module.getDependentModules()\n        .stream()\n        .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n        .peek(circularDependencyCheckSet::add)\n        .map(moduleId -> moduleRepository.findById(moduleId)\n            .map(depModule -> getDependentModules(depModule, circularDependencyCheckSet))\n            .orElseGet(Flux::empty))\n        .reduce(Flux::mergeWith)\n        .orElseGet(Flux::empty)\n        .onErrorResume(error -> {\n            log.warn(\"Error while retrieving dependent modules for module {}: {}\", module.getId(), error.getMessage());\n            return Flux.empty();\n        });\n}", "CodeBleu_score": 51.82518165549046}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    // Check if the component type is \"module\"\n    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        // Get the component map\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            // Get the app ID from the component map\n            String appId = (String) compMap.get(\"appId\");\n            // If the app ID is not blank, add it to the set of dependent module IDs\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    // Iterate through the map's entries\n    map.forEach((key, value) -> {\n        // If the value is a nested map, process it recursively\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        // If the value is a list, iterate through its items and process any nested maps recursively\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.50653063447942}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t        Object compType = map.get(\"compType\");\n        if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n            Object comp = map.get(\"comp\");\n            if (comp instanceof Map<?, ?> compMap) {\n                String appId = (String) compMap.get(\"appId\");\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        }\n\n        map.forEach((key, value) -> {\n            if (value instanceof Map<?, ?> valueMap) {\n                doGetDependentModules(valueMap, dependentModuleIds);\n            }\n            if (value instanceof List<?> valueList) {\n                valueList.forEach(i -> {\n                    if (i instanceof Map<?, ?> iMap) {\n                        doGetDependentModules(iMap, dependentModuleIds);\n                    }\n                });\n            }\n        });\n    }", "CodeBleu_score": 96.95596629593783}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t        Object compType = map.get(\"compType\");\n        if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n            Object comp = map.get(\"comp\");\n            if (comp instanceof Map<?, ?> compMap) {\n                String appId = (String) compMap.get(\"appId\");\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        }\n\n        map.forEach((key, value) -> {\n            if (value instanceof Map<?, ?> valueMap) {\n                doGetDependentModules(valueMap, dependentModuleIds);\n            }\n            if (value instanceof List<?> valueList) {\n                valueList.forEach(i -> {\n                    if (i instanceof Map<?, ?> iMap) {\n                        doGetDependentModules(iMap, dependentModuleIds);\n                    }\n                });\n            }\n        });\n    }", "CodeBleu_score": 96.95596629593783}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data;\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        } else {\n            data = dataBuffer.asByteBuffer().array();\n        }\n        DataBufferUtils.release(dataBuffer);\n        MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 53.761212282057215}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = createThumbnail ? resizeImage(dataBuffer) : dataBuffer.asByteBuffer().array();\n        MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        DataBufferUtils.release(dataBuffer);\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 43.0483166672196}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = createThumbnail ? resizeImage(dataBuffer) : dataBuffer.asByteBuffer().array();\n        String contentType = createThumbnail ? MediaType.IMAGE_JPEG_VALUE : srcContentType.toString();\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 37.14152950593718}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    Mono<Asset> assetMono = assetService.getById(assetId);\n    return exchange.getResponse().writeWith(assetMono.flatMap(asset -> {\n        exchange.getResponse().setStatusCode(HttpStatus.OK);\n        if (asset.getContentType() != null) {\n            exchange.getResponse().getHeaders().setContentType(asset.getContentType());\n        }\n        return exchange.getResponse().writeWith(Flux.just(asset.getData().getData()));\n    }));\n}", "CodeBleu_score": 43.895936040600034}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                return exchange.getResponse().writeWith(Flux.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 38.47464833375981}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                Optional.ofNullable(asset.getMimeType()).ifPresent(mimeType -> response.getHeaders().setContentType(MediaType.valueOf(mimeType)));\n                return response.writeWith(Flux.just(response.bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 52.7136725133716}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return isEnterpriseMode() ? findAllAuthConfigsForEnterpriseMode() : Flux.empty();\n}", "CodeBleu_score": 11.382707429087342}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (isSaasMode()) {\n        return Flux.empty();\n    }\n    return organizationRepository.findAll().map(this::mapToFindAuthConfig);\n}", "CodeBleu_score": 18.3680956697065}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (workspaceMode == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationRepository.findAll().map(org -> {\n        FindAuthConfig findAuthConfig = new FindAuthConfig();\n        findAuthConfig.setId(org.getId());\n        findAuthConfig.setAuthType(org.getAuthType());\n        findAuthConfig.setAuthConfig(org.getAuthConfig());\n        return findAuthConfig;\n    });\n}", "CodeBleu_score": 33.2969420846221}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(SpringDataMongo3Driver.withDefaultLock(mongoTemplate))\n            .addChangeLogsScanPackage(\"com.mongodb.mongock.examples.springdata.v3.changelogs\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 26.426818055248358}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .setDriver(SpringDataMongo3Driver.withDefaultLock(mongoTemplate))\n        .setLockQuickConfig()\n        .addChangeLogsScanPackage(\"com.baeldung.mongock.changelogs\")\n        .setSpringContext(springContext)\n        .buildApplicationRunner();\n}", "CodeBleu_score": 25.740972218797996}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n            .setDriver(springContext.getBean(MongoDriver.class))\n            .setSpringContext(springContext)\n            .addChangeLogsScanPackage(\"com.mongodb.mongock.test.springboot.config.changelogs\")\n            .setLockQuickConfig()\n            .buildApplicationRunner();\n}", "CodeBleu_score": 24.541802438887792}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        mongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return mongoTemplate;\n    }", "CodeBleu_score": 95.78632722296167}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate mongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        mongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return mongoTemplate;\n    }", "CodeBleu_score": 95.78632722296167}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t        return libraryQueryRepository.findFirstByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n                .map(LibraryQuery::getDSL)\n                .switchIfEmpty(libraryQueryService.getById(libraryQueryId).map(LibraryQuery::getDSL));\n    }", "CodeBleu_score": 58.390754181268576}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t        return libraryQueryRepository.findFirstByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n                .map(LibraryQuery::getDsl)\n                .switchIfEmpty(libraryQueryService.getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl));\n    }", "CodeBleu_score": 59.639756879020226}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t        return libraryQueryRepository.findFirstByLibraryQueryIdOrderByVersionDesc(libraryQueryId)\n                .map(LibraryQuery::getDsl)\n                .switchIfEmpty(libraryQueryService.getById(libraryQueryId)\n                        .map(LibraryQuery::getDsl));\n    }", "CodeBleu_score": 59.64774481214392}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        return Flux.defer(() -> {\n            if (datasource.isUseNodeJs()) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        })\n                .timeout(Duration.ofSeconds(timeoutStr == null ? 30 : Long.parseLong(timeoutStr)))\n                .onErrorMap(PluginException.class, exception -> {\n                    log.error(\"executeQuery error\", exception);\n                    return new QueryExecutionException(exception.getMessage());\n                })\n                .onErrorResume(throwable -> {\n                    log.error(\"executeQuery error\", throwable);\n                    return Mono.just(QueryExecutionResult.error(new QueryExecutionException(throwable.getMessage())));\n                })\n                .singleOrEmpty();\n    }", "CodeBleu_score": 46.92284967685486}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeoutDuration = TimeoutUtils.parseTimeout(timeoutStr);\n        return Mono.defer(() -> {\n            if (datasource.isNodejs()) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        }).timeout(timeoutDuration)\n                .onErrorMap(TimeoutException.class, e -> new PluginException(ErrorCodeEnum.PLUGIN_TIMEOUT_ERROR, e.getMessage()))\n                .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e)))\n                .onErrorMap(e -> {\n                    log.error(\"execute query error\", e);\n                    return new QueryExecutionException(e.getMessage());\n                });\n    }", "CodeBleu_score": 56.44750377064995}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeout = TimeoutUtils.parseTimeout(timeoutStr);\n        if (datasource.getType() == DatasourceType.NODEJS) {\n            return executeByNodeJs(datasource, queryConfig, requestParams)\n                    .timeout(timeout)\n                    .onErrorMap(PluginException.class, PluginException::new)\n                    .onErrorResume(e -> {\n                        if (e instanceof TimeoutException) {\n                            return Mono.just(QueryExecutionResult.error(new PluginException(e)));\n                        }\n                        log.error(\"Error while executing query on datasource {}\", datasource.getId(), e);\n                        return Mono.just(QueryExecutionResult.error(new PluginException(e)));\n                    });\n        } else {\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                    .timeout(timeout)\n                    .onErrorMap(PluginException.class, PluginException::new)\n                    .onErrorResume(e -> {\n                        if (e instanceof TimeoutException) {\n                            return Mono.just(QueryExecutionResult.error(new PluginException(e)));\n                        }\n                        log.error(\"Error while executing query on datasource {}\", datasource.getId(), e);\n                        return Mono.just(QueryExecutionResult.error(new PluginException(e)));\n                    });\n        }\n    }", "CodeBleu_score": 51.08027140435918}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.fromCallable(() -> {\n            QueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n            QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n            Connection connection = acquireConnection(datasource);\n            try {\n                return queryExecutor.execute(connection, queryExecutionContext);\n            } catch (Exception e) {\n                throw new RuntimeException(\"Error executing query\", e);\n            } finally {\n                releaseConnection(datasource, connection);\n            }\n        });\n    }", "CodeBleu_score": 44.91494990784315}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.fromCallable(() -> {\n            QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n            return queryExecutionContext.getDatasource().getConnectionPool().getConnection();\n        })\n                .flatMap(connection -> {\n                    QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n                    return executeQuery(queryExecutionContext, connection);\n                });\n    }", "CodeBleu_score": 37.76873506218752}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n    QueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n    QueryExecutionContext queryExecutionContext = queryExecutor.buildExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n    return datasource.getConnectionPool()\n            .acquire()\n            .flatMap(connection -> queryExecutor.execute(connection, queryExecutionContext))\n            .onErrorResume(throwable -> {\n                log.error(\"Error executing query locally\", throwable);\n                return Mono.just(QueryExecutionResult.builder().error(throwable).build());\n            });\n}", "CodeBleu_score": 44.588522062719406}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getKey();\n        int unitIndex = unitInfo.getValue();\n\n        double value;\n        if (unitIndex == -1) {\n            value = Double.parseDouble(timeoutStr);\n        } else {\n            value = Double.parseDouble(timeoutStr.substring(0, unitIndex));\n        }\n\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs <= 0 || timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Invalid query timeout value: \" + timeoutStr);\n        }\n\n        return timeoutMs;\n    }", "CodeBleu_score": 57.511128233642125}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        int unitIndex = StringUtils.indexOfAny(timeoutStr, 'M', 'm');\n        if (unitIndex == -1) {\n            unitIndex = StringUtils.indexOfAny(timeoutStr, 'S', 's');\n        }\n        if (unitIndex == -1) {\n            throw new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n        }\n        String unit = timeoutStr.substring(unitIndex).toLowerCase();\n        double value = Double.parseDouble(timeoutStr.substring(0, unitIndex));\n        if (value <= 0) {\n            throw new IllegalArgumentException(\"Query timeout value must be positive: \" + value);\n        }\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Query timeout value exceeds maximum allowed: \" + timeoutMs);\n        }\n        return timeoutMs;\n    }", "CodeBleu_score": 49.63846848589779}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n\n        double value;\n        if (unitIndex == -1) {\n            value = Double.parseDouble(timeoutStr);\n        } else {\n            value = Double.parseDouble(timeoutStr.substring(0, unitIndex));\n        }\n\n        int timeoutMs = convertToMs(value, unit);\n        if (timeoutMs <= 0 || timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n        }\n\n        return timeoutMs;\n    }", "CodeBleu_score": 60.12176379161717}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        if (application.getQueries() == null || application.getQueries().isEmpty()) {\n            return Mono.error(new ServerException(ErrorCode.NO_QUERIES_FOUND_IN_TEMPLATE));\n        }\n        List<String> datasourceIds = application.getQueries().stream()\n                .map(query -> query.getDatasource().getId())\n                .distinct()\n                .collect(Collectors.toList());\n\n        return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> {\n                    return datasourceService.getById(datasourceId)\n                            .flatMap(datasource -> {\n                                if (datasource.isSystemStatic()) {\n                                    return Mono.just(Pair.of(datasource.getId(), datasource.getId()));\n                                }\n                                if (datasource.isLegacyQuickRestApi()) {\n                                    return Mono.just(Pair.of(datasource.getId(), Datasource.QUICK_REST_API.getId()));\n                                }\n                                if (datasource.isLegacyOpenblocksApi()) {\n                                    return Mono.just(Pair.of(datasource.getId(), Datasource.OPENBLOCKS_API.getId()));\n                                }\n                                return createNewDatasourceFrom(currentOrganizationId, visitorId, datasource)\n                                        .map(copiedDatasourceId -> Pair.of(datasource.getId(), copiedDatasourceId));\n                            });\n                })\n                .collectList();\n    }", "CodeBleu_score": 47.69533865941293}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        List<String> datasourceIds = application.getLiveQueries().stream()\n                .map(liveQuery -> liveQuery.getDatasource().getId())\n                .collect(Collectors.toList());\n        if (datasourceIds.isEmpty()) {\n            return Mono.error(new ServerException(ErrorCode.INVALID_PARAMETER, \"no datasource in template\"));\n        }\n\n        return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                        .map(copiedDatasourceId -> new Pair<>(datasourceId, copiedDatasourceId)))\n                .collectList();\n    }", "CodeBleu_score": 62.556569954246555}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n        return application.getLiveQueries().stream()\n                .filter(liveQuery -> liveQuery.getDatasource() != null)\n                .map(LiveQuery::getDatasource)\n                .map(datasourceRef -> datasourceRef.getDatasourceId())\n                .collect(Collectors.toList())\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new ServerException(ErrorCode.INVALID_PARAMETER, \"no datasource found in the application\"));\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                    .map(copiedDatasourceId -> Pair.of(datasourceId, copiedDatasourceId)))\n                            .collectList();\n                })\n                .map(copiedDatasourceIdPairs -> {\n                    datasourceIdPairs.addAll(copiedDatasourceIdPairs);\n                    return datasourceIdPairs;\n                });\n    }", "CodeBleu_score": 45.79685047758006}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.findById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.isLegacyQuickRestApi()) {\n                    return datasourceService.findByLegacyQuickRestApiId(datasourceId)\n                            .map(Datasource::getId);\n                } else if (datasource.isLegacyOpenblocksApi()) {\n                    return datasourceService.findByLegacyOpenblocksApiId(datasourceId)\n                            .map(Datasource::getId);\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 57.5497112549756}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.isLegacyQuickRestApi()) {\n                    return datasourceService.createLegacyQuickRestApiDatasource(organizationId, datasource.getDetailConfig())\n                            .map(Datasource::getId);\n                }\n                if (datasource.isLegacyOpenblocksApi()) {\n                    return datasourceService.createLegacyOpenblocksApiDatasource(organizationId, datasource.getDetailConfig())\n                            .map(Datasource::getId);\n                }\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 69.61072590049675}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t        return datasourceService.findById(datasourceId)\n                .flatMap(datasource -> {\n                    if (datasource.isSystemStatic()) {\n                        return Mono.just(datasource.getId());\n                    }\n                    if (datasource.isLegacyQuickApi()) {\n                        return datasourceService.createLegacyQuickApi(datasource, organizationId, visitorId)\n                                .map(Datasource::getId);\n                    }\n                    if (datasource.isLegacyOpenblocksApi()) {\n                        return datasourceService.createLegacyOpenblocksApi(datasource, organizationId, visitorId)\n                                .map(Datasource::getId);\n                    }\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                });\n    }", "CodeBleu_score": 69.35261494765876}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return filePart.content()\n                .flatMap(dataBuffer -> {\n                    Asset asset = new Asset();\n                    asset.setData(dataBuffer.asByteBuffer().array());\n                    asset.setContentType(filePart.headers().getContentType().toString());\n                    asset.setName(filePart.filename());\n                    return assetService.save(asset);\n                })\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.deleteById(user.getAvatar())\n                                .flatMap(deleted -> updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 30.589394426345883}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return assetService.uploadAsset(filePart)\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.removeAsset(user.getAvatar());\n                    } else {\n                        return Mono.just(true);\n                    }\n                })\n                .flatMap(result -> updateUserAvatar(asset, user.getId()));\n    }", "CodeBleu_score": 29.145442398870774}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return fileUploadService.uploadFile(filePart)\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return fileUploadService.deleteFile(user.getAvatar())\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 30.908709584806203}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\").toString()));\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 39.92477486102306}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\")));\n    }\n    establishUserConnections(user, authUser);\n    user.setNew(true);\n    return create(user);\n}", "CodeBleu_score": 45.89835848739747}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (AuthSource.EMAIL.equals(authUser.getAuthSource())) {\n        if (authUser.getAuthContext().containsKey(\"password\")) {\n            user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\").toString()));\n        }\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return create(user);\n}", "CodeBleu_score": 42.035818971686325}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        if (user.getConnections().stream().anyMatch(connection -> connection.getEmail().equals(email))) {\n            throw new DuplicateKeyException(\"Email already bound\");\n        }\n        Connection connection = new Connection();\n        connection.setEmail(email);\n        connection.setSource(Source.EMAIL);\n        user.getConnections().add(connection);\n        return userRepository.save(user).thenReturn(true);\n    }).onErrorResume(DuplicateKeyException.class, e -> Mono.error(new DuplicateKeyException(\"Email already bound\"))).flatMap(Function.identity());\n}", "CodeBleu_score": 33.80022157283371}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(user)\n            .map(u -> {\n                EmailSource emailSource = new EmailSource();\n                emailSource.setEmail(email);\n                u.getConnections().add(emailSource);\n                return u;\n            })\n            .flatMap(userRepository::save)\n            .map(u -> true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new DuplicateEmailException(\"Duplicate email\", e)));\n}", "CodeBleu_score": 30.072282519155824}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return connectionRepository.createConnectionRepository(email).flatMap(connection -> {\n        Set<String> set = user.getConnections();\n        set.add(connection.getConnectionId());\n        user.setConnections(set);\n        return userRepository.save(user).map(u -> true);\n    }).onErrorResume(DuplicateKeyException.class, e -> Mono.error(new DuplicateConnectionException(\"Connection already exists\")));\n}", "CodeBleu_score": 24.071487238011784}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .map(user -> {\n                if (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\"));\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 32.810284757631074}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .map(user -> {\n                if (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 27.477525628550442}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .map(user -> {\n                if (encryptionService.validatePassword(oldPassword, user.getPassword())) {\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    return user;\n                } else {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n                }\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 34.42335779406584}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return getUserDetailGroups(userId, withoutDynamicGroups, locale);\n        }\n        return getUserDetailGroups(userId, withoutDynamicGroups, locale)\n                .map(groups -> groups.stream()\n                        .filter(group -> !group.get(GROUP_ID).equals(ALL_USERS_GROUP_ID))\n                        .map(group -> Map.of(GROUP_ID, group.get(GROUP_ID), GROUP_NAME, group.get(GROUP_NAME)))\n                        .collect(Collectors.toList())\n                );\n    }", "CodeBleu_score": 27.678635891980434}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return Mono.just(orgMember.getGroups())\n                .filter(it -> !withoutDynamicGroups || !it.contains(orgMember.getOrgId()))\n                .map(it -> it.stream()\n                        .filter(group -> !group.equals(orgMember.getOrgId()))\n                        .map(group -> {\n                            Map<String, String> map = new HashMap<>();\n                            map.put(\"id\", group);\n                            map.put(\"name\", groupLocalizationService.getLocalizedGroupName(group, locale));\n                            return map;\n                        })\n                        .collect(Collectors.toList())\n                );\n    }", "CodeBleu_score": 28.933023592050844}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getGroupsForUser(userId, orgMember, withoutDynamicGroups)\n                .filter(it -> !it.getId().equals(UserGroup.ALL_USERS_ID))\n                .map(it -> Map.of(\"id\", it.getId(), \"name\", it.getName(locale)))\n                .collectList();\n    }", "CodeBleu_score": 18.302171140648564}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class, UserStatus::getUserId);\n}", "CodeBleu_score": 36.66801301523608}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class);\n}", "CodeBleu_score": 37.86535231105651}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 36.88515919818297}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\trun := parallel.NewRunGroup()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trun.Enqueue(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trun.Wait()\n}", "CodeBleu_score": 37.21643878898893}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\trunGroup := NewRunGroup()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trunGroup.Enqueue(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trunGroup.Wait()\n}", "CodeBleu_score": 37.434017651112946}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\trun := rungroup.New(c.ctx)\n\tfor k, p := range c.partitions {\n\t\tk, p := k, p\n\t\tif predicatePartition(k, p) {\n\t\t\trun.Go(func() {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trun.Wait()\n}", "CodeBleu_score": 37.71026252513764}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn maxItemsTotal / (avgWeightPerPartition * numPartitions)\n}", "CodeBleu_score": 32.13993911550735}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\tmaxSizePerPartition := int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 41.70934245568974}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 41.67657031457538}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t        Map<String, Object> map = new HashMap<>();\n        ConnectionMetadata metadata = this.connectionFactory.getMetadata();\n        if (metadata != null) {\n            map.put(\"databaseProductName\", metadata.getDatabaseProductName());\n            map.put(\"databaseVersion\", metadata.getDatabaseMajorVersion() + \".\" + metadata.getDatabaseMinorVersion());\n        }\n        return map;\n    }", "CodeBleu_score": 44.7021123581341}, {"code": "public Map<String, Object> contributorMap(){\n\t        ConnectionMetadata metadata = this.connectionFactory.getMetadata();\n        if (metadata != null) {\n            Map<String, Object> map = new HashMap<>();\n            map.put(\"database\", metadata.getDatabaseProductName());\n            map.put(\"version\", metadata.getDatabaseMajorVersion() + \".\" + metadata.getDatabaseMinorVersion());\n            return map;\n        }\n        return Collections.emptyMap();\n    }", "CodeBleu_score": 44.42458123255132}, {"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    ConnectionMetadata metadata = this.getConnectionMetadata().block();\n    if (metadata != null) {\n        map.put(\"database\", metadata.getDatabaseProductName());\n        map.put(\"version\", metadata.getDatabaseMajorVersion() + \".\" + metadata.getDatabaseMinorVersion());\n    }\n    return map;\n}", "CodeBleu_score": 51.237762325189266}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSettings userSettings = configMap.getUserSettings();\n    if (userSettings == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationOnRegistration(false);\n    } else {\n        info.setRegistrationEnabled(userSettings.isRegistrationEnabled());\n        info.setEmailVerificationOnRegistration(userSettings.isEmailVerificationOnRegistration());\n    }\n}", "CodeBleu_score": 42.41754826969309}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    ConfigMap userSettings = configMap.getConfigMap(ConfigMap.USER_SETTINGS);\n    if (userSettings == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationOnRegistrationEnabled(false);\n    } else {\n        info.setRegistrationEnabled(userSettings.getBoolean(ConfigMap.USER_SETTINGS_REGISTRATION_ENABLED, true));\n        info.setEmailVerificationOnRegistrationEnabled(userSettings.getBoolean(ConfigMap.USER_SETTINGS_EMAIL_VERIFICATION_ON_REGISTRATION_ENABLED, true));\n    }\n}", "CodeBleu_score": 36.48975854897712}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSettings settings = configMap.getUserSettings();\n    if (settings == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationOnRegistration(false);\n    } else {\n        info.setRegistrationEnabled(settings.isRegistrationEnabled());\n        info.setEmailVerificationOnRegistration(settings.isEmailVerificationOnRegistration());\n    }\n}", "CodeBleu_score": 41.15395954381446}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"Restart\");\n    Thread t = new Thread(tg, this);\n    t.setDaemon(false);\n    t.setContextClassLoader(getClass().getClassLoader());\n    t.start();\n    return \"Restarting application\";\n}", "CodeBleu_score": 43.64159700557386}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"Restart Thread Group\");\n    Thread thread = new Thread(threadGroup, \"Restart Thread\");\n    thread.setDaemon(false);\n    thread.setContextClassLoader(getClass().getClassLoader());\n    thread.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 52.97326191301806}, {"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(Thread.currentThread().getThreadGroup(), \"restart-thread-group\");\n    threadGroup.setDaemon(false);\n    Thread thread = new Thread(threadGroup, \"restart-thread\");\n    thread.setDaemon(false);\n    thread.setContextClassLoader(this.applicationClassLoader);\n    thread.start();\n    return \"Restarting application\";\n}", "CodeBleu_score": 50.1936044851315}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t     configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n     configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 71.35968156121783}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 70.31411393684094}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n    }", "CodeBleu_score": 52.936336272247885}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.pathPattern(\"/console/**\")\n                .negate())\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n            request -> serveIndex(\"classpath:/console/index.html\"));\n    }", "CodeBleu_score": 28.824887252863252}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return route(GET(\"/console/**\")\n                .and(accept(MediaType.TEXT_HTML))\n                .and(not(path(\"/console/assets/**\")))\n                .and(not(request -> request.getHeaders().getUpgrade().contains(\"websocket\"))),\n            request -> serveIndex(\"classpath:/META-INF/resources/console/index.html\"));\n    }", "CodeBleu_score": 30.717936880633374}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.pathPattern(\"/console/**\")\n                .negate())\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n            request -> serveIndex(\"classpath:/META-INF/resources/console/index.html\"));\n    }", "CodeBleu_score": 28.1267256222575}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.pathPattern(\"/uc/**\")\n                    .negate())\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.webSocket().negate()),\n            request -> serveIndex(ucLocation)\n        );\n    }", "CodeBleu_score": 27.642577439215533}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML)),\n            request -> serveIndex(\"classpath:/static/uc/index.html\"));\n    }", "CodeBleu_score": 19.627833341509778}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return route(\n            GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(not(path(\"/uc/assets/**\"))).and(not(WebSocketRequestPredicate.webSocket())),\n            req -> serveIndex(ucLocation)\n        );\n    }", "CodeBleu_score": 27.020755739659197}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    def sessionRepository = new MapReactiveIndexedSessionRepository(new ConcurrentHashMap<>())\n    sessionRepository.setDefaultMaxInactiveInterval(session.timeout.toMillis())\n    sessionRepository\n}", "CodeBleu_score": 24.982162112412613}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ConcurrentMapSessionRepository repository = new ConcurrentMapSessionRepository(new ConcurrentHashMap<>());\n    repository.setDefaultMaxInactiveInterval(sessionProperties.getRedis().getDefaultMaxInactiveInterval());\n    return repository;\n}", "CodeBleu_score": 32.93948992976154}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    ConcurrentMapSessionRepository<MapSession> sessionRepository = new ConcurrentMapSessionRepository<>(new ConcurrentHashMap<>());\n    sessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(sessionProperties.getRedis().getDefaultMaxInactiveInterval()));\n    return sessionRepository;\n}", "CodeBleu_score": 30.89700114313595}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n\n    // Enable/disable two-factor authentication based on security settings\n    if (haloProperties.getSecurity().getTwoFactorAuth().isEnabled()) {\n        userDetailService.setTwoFactorAuthentication(true);\n    }\n\n    return userDetailService;\n}", "CodeBleu_score": 52.74010053283054}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuth(haloProperties.getSecurity().getTwoFactorAuth().isEnable());\n    return userDetailService;\n}", "CodeBleu_score": 52.18336836099663}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthentication(haloProperties.getSecurity().isTwoFactorAuth());\n    return userDetailService;\n}", "CodeBleu_score": 50.36939387671422}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t  Comment.CommentOwner owner = new Comment.CommentOwner();\n  owner.setKind(\"email\");\n  owner.setEmail(email != null ? email : \"\");\n  owner.setDisplayName(displayName);\n  owner.getAnnotations().put(\"avatar\", avatar);\n  owner.getAnnotations().put(\"website\", website);\n  return owner;\n}", "CodeBleu_score": 31.902238462145817}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t  Comment.CommentOwner owner = new Comment.CommentOwner();\n  owner.setKind(\"email\");\n  owner.setEmail(email != null ? email : \"\");\n  owner.setDisplayName(displayName);\n  owner.getAnnotations().put(\"avatar\", avatar);\n  owner.getAnnotations().put(\"website\", website);\n  return owner;\n}", "CodeBleu_score": 31.902238462145817}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t  Comment.CommentOwner owner = new Comment.CommentOwner();\n  owner.setKind(\"email\");\n  owner.setEmail(email != null ? email : \"\");\n  owner.setDisplayName(displayName);\n  owner.setAnnotations(new ArrayList<Comment.CommentOwner.Annotation>() {\n    {\n      add(new Comment.CommentOwner.Annotation().setType(\"avatar\").setValue(avatar));\n      add(new Comment.CommentOwner.Annotation().setType(\"website\").setValue(website));\n    }\n  });\n  return owner;\n}", "CodeBleu_score": 38.998280460686345}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t  if (commentOwner.getKind() == \"email\") {\n    User user = getUserByEmail(commentOwner.getName());\n    return post.getOwner().equals(user);\n  }\n  return post.getOwner().getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 28.83825072763479}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind().equals(\"email\")) {\n        User user = ofy().load().type(User.class).id(post.getUserId()).now();\n        if (user != null) {\n            return user.getEmail().equals(commentOwner.getName());\n        }\n    } else {\n        return post.getUserId().equals(commentOwner.getName());\n    }\n    return false;\n}", "CodeBleu_score": 40.990197314170295}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind().equals(\"email\")) {\n        User user = User.getByEmail(post.getOwner().getName());\n        if (user != null && user.getEmail().equals(commentOwner.getName())) {\n            return true;\n        }\n    } else if (commentOwner.getKind().equals(\"user\")) {\n        if (post.getOwner().getName().equals(commentOwner.getName())) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 38.63429373015573}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t        ListOptions options = new ListOptions();\n        StringBuilder fieldQuery = new StringBuilder();\n        String keyword = getKeyword();\n        String ownerName = getOwnerName();\n        String ownerKind = getOwnerKind();\n        if (StringUtils.isNotBlank(keyword)) {\n            fieldQuery.append(\"metadata.name~=\").append(keyword).append(\",\");\n        }\n        if (StringUtils.isNotBlank(ownerName)) {\n            fieldQuery.append(\"metadata.ownerReferences.name=\").append(ownerName).append(\",\");\n        }\n        if (StringUtils.isNotBlank(ownerKind)) {\n            fieldQuery.append(\"metadata.ownerReferences.kind=\").append(ownerKind).append(\",\");\n        }\n        if (fieldQuery.length() > 0) {\n            fieldQuery.deleteCharAt(fieldQuery.length() - 1);\n            options.setFieldSelector(fieldQuery.toString());\n        }\n        return options;\n    }", "CodeBleu_score": 37.70309729847675}, {"code": "public ListOptions toListOptions(){\n\t        ListOptions listOptions = new ListOptions();\n        StringBuilder fieldQuery = new StringBuilder();\n\n        if (getOwnerKind() != null) {\n            fieldQuery.append(\"metadata.ownerReferences.kind=\").append(getOwnerKind()).append(\",\");\n        }\n        if (getOwnerName() != null) {\n            fieldQuery.append(\"metadata.ownerReferences.name=\").append(getOwnerName()).append(\",\");\n        }\n\n        if (fieldQuery.length() > 0) {\n            fieldQuery.setLength(fieldQuery.length() - 1);\n            listOptions.fieldSelector(fieldQuery.toString());\n        }\n\n        if (getKeyword() != null) {\n            listOptions.labelSelector(getKeyword());\n        }\n\n        return listOptions;\n    }", "CodeBleu_score": 26.635785805903634}, {"code": "public ListOptions toListOptions(){\n\t        ListOptions listOptions = new ListOptions();\n\n        String labelSelector = getLabelSelector();\n        String fieldSelector = getFieldSelector();\n        String ownerName = getOwnerName();\n        String keyword = getKeyword();\n        String ownerKind = getOwnerKind();\n\n        if (StringUtils.isNotBlank(labelSelector)) {\n            fieldSelector = fieldSelector + \",metadata.labels=\" + labelSelector;\n        }\n\n        if (StringUtils.isNotBlank(keyword)) {\n            fieldSelector = fieldSelector + \",metadata.name=\" + keyword + \"*\";\n        }\n\n        if (StringUtils.isNotBlank(ownerName)) {\n            fieldSelector = fieldSelector + \",metadata.ownerReferences.name=\" + ownerName;\n        }\n\n        if (StringUtils.isNotBlank(ownerKind)) {\n            fieldSelector = fieldSelector + \",metadata.ownerReferences.kind=\" + ownerKind;\n        }\n\n        if (StringUtils.isNotBlank(fieldSelector)) {\n            listOptions.fieldSelector(fieldSelector);\n        }\n\n        return listOptions;\n    }", "CodeBleu_score": 37.419449809115065}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    if (commentName == null) {\n        return Mono.error(new IllegalArgumentException(\"Comment name cannot be null\"));\n    }\n\n    Mono<Counter> counterMono = counterRepository.findById(commentName);\n\n    Mono<CommentStats> commentStatsMono = counterMono.map(counter -> {\n        int upvoteCount = counter.getUpvoteCount();\n        return new CommentStats(upvoteCount);\n    }).defaultIfEmpty(new CommentStats(0));\n\n    return commentStatsMono;\n}", "CodeBleu_score": 29.584029249139217}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    if (commentName == null) {\n        return Mono.empty();\n    }\n    return reactiveRedisOperations.opsForHash().get(COMMENT_STATS_KEY, commentName)\n            .map(counter -> new CommentStats(counter.getCount()));\n}", "CodeBleu_score": 45.561687024418376}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Objects.requireNonNull(commentName, \"commentName cannot be null\");\n    return counterRepository.findById(commentName)\n            .map(counter -> new CommentStats(counter.getCount()))\n            .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 43.98927869730759}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason interestReason = new Subscription.InterestReason();\n    interestReason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    interestReason.setCondition(Subscription.InterestReason.Condition.builder().repliedOwner(identity.name()).build());\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(interestReason);\n    NotificationCenter.subscribe(subscription).blockingAwait();\n}", "CodeBleu_score": 54.76725861906016}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason interestReason = new Subscription.InterestReason();\n    interestReason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    interestReason.setCondition(new Subscription.InterestReason.Condition());\n    interestReason.getCondition().setRepliedOwner(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReasons(Collections.singletonList(interestReason));\n\n    notificationCenter.subscribe(subscription).block();\n}", "CodeBleu_score": 53.959209566419766}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    InterestReason reason = new InterestReason();\n    reason.setType(InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(new InterestReason.Condition(Condition.Field.REPLIED_OWNER, Condition.Operator.EQUALS, identity.name()));\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(reason);\n\n    try {\n        notificationCenter.subscribe(subscription).get();\n    } catch (InterruptedException | ExecutionException e) {\n        // Handle the exception\n    }\n}", "CodeBleu_score": 46.42593340303735}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t        return updateCommentWithRetry(comment.getName(), c -> {\n            c.setApproved(true);\n            c.setApprovedAt(Instant.now());\n            return c;\n        });\n    }", "CodeBleu_score": 20.301795498506497}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedAt(Instant.now());\n        return c;\n    });\n}", "CodeBleu_score": 18.58816497902717}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t        return updateCommentWithRetry(comment.getName(), c -> {\n            c.setApproved(true);\n            c.setApprovedAt(LocalDateTime.now());\n            return c;\n        });\n    }", "CodeBleu_score": 20.47989608429579}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->component($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.44894791551677}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction && !$action->getComponent()) {\n        $action->component($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 61.99942031842234}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 67.07739332696906}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->redirectUrl) {\n        $this->redirect($this->redirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 33.753162689537795}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirectUrl = $this->evaluate($this->getSuccessRedirectUrl());\n\n    if (filled($successRedirectUrl)) {\n        $this->redirect($successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 59.07029670158366}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    if ($this->redirectUrl) {\n        $this->redirect($this->redirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 33.753162689537795}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record) {\n        return;\n    }\n\n    if (!method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClass = get_class($record->tags()->getRelated());\n\n    $tagNames = collect($state['tags'] ?? [])\n        ->map(fn ($name) => trim($name))\n        ->filter(fn ($name) => filled($name))\n        ->unique()\n        ->toArray();\n\n    $tags = collect($tagNames)\n        ->map(fn ($name) => $tagClass::findOrCreate($name, 'en'))\n        ->filter();\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 44.73573445282854}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    if (! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClass = static::getTagClass();\n\n    $tagNames = collect($state['tags'])\n        ->map(fn (string $name): string => trim($name))\n        ->filter(fn (string $name): bool => strlen($name) > 0);\n\n    $tags = $tagClass::findOrCreate($tagNames->toArray());\n\n    $record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 37.98617018088841}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModelClass = $record->tags()->getMorphClass();\n\n    $tagNames = Arr::wrap(Arr::get($state, 'tags', []));\n\n    $tags = collect($tagNames)->map(function ($value) use ($tagModelClass) {\n        if ($value instanceof Model) {\n            return $value;\n        }\n\n        return $tagModelClass::findOrCreate($value, 'en');\n    });\n\n    $record->tags()->sync($tags->pluck('id')->toArray());\n}", "CodeBleu_score": 42.95594962336872}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := dissectPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := fmt.Sprintf(\"space/%s/repository/%s/pipeline/%s\", spacePath, repoName, pipelineIdentifier)\n\tresource := fmt.Sprintf(\"space/%s/repository/%s/pipeline/%s\", spacePath, repoName, pipelineIdentifier)\n\treturn authz.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.20018950667278}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := dissectPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := enum.Scope{\n\t\tType: enum.ScopeTypePipeline,\n\t\tSpace: &spacePath,\n\t\tRepository: &repoName,\n\t\tPipeline: &pipelineIdentifier,\n\t}\n\n\tresource := enum.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tScope: &scope,\n\t}\n\n\treturn authorizer.Check(ctx, session, &resource, permission)\n}", "CodeBleu_score": 57.3622438792507}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := dissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := enum.Scope{\n\t\tType: enum.Repository,\n\t\tPath: spacePath,\n\t}\n\n\tresource := enum.Resource{\n\t\tType: enum.Pipeline,\n\t\tName: repoName,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 59.387449407408276}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tspacePath := space.Path\n\tparentSpace, name := spacePath.Split()\n\n\tscope := &auth.Scope{\n\t\tType:    enum.SpaceScope,\n\t\tSpaceID: parentSpace.ID,\n\t}\n\tresource := &auth.Resource{\n\t\tType: enum.SpaceResource,\n\t\tName: name,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 61.731094516376636}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tspacePath := space.Path\n\tspaceName := spacePath[strings.LastIndex(spacePath, \"/\")+1:]\n\tspaceParentPath := spacePath[:strings.LastIndex(spacePath, \"/\")+1]\n\tscope := scope.NewSpace(spaceParentPath)\n\tresource := resource.NewSpace(spaceName)\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 43.21629457886158}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := space.ParentSpaceAndName()\n\tscope := authz.NewScope(\n\t\tparentSpace.Format(),\n\t\tauthz.ScopeSpace,\n\t)\n\tresource := authz.NewResource(\n\t\tname,\n\t\tauthz.ResourceSpace,\n\t)\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 48.283897756484905}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tdecoder := json.NewDecoder(bytes.NewReader(source))\n\tdecoder.DisallowUnknownFields()\n\n\tvar result bytes.Buffer\n\tencoder := json.NewEncoder(&result)\n\n\tif err := decoder.Decode(&data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := encoder.Encode(data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresultBytes := result.Bytes()\n\tif len(resultBytes) > 0 && resultBytes[len(resultBytes)-1] == '\n' {\n\t\tresultBytes = resultBytes[:len(resultBytes)-1]\n\t}\n\n\treturn resultBytes, nil\n}", "CodeBleu_score": 56.95976846381758}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar raw map[string]any\n\tif err := json.Unmarshal(source, &raw); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult, err := json.Marshal(raw)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(result, \"\n\"), nil\n}", "CodeBleu_score": 30.85990831295905}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tvar decoded interface{}\n\tif err := json.Unmarshal(source, &decoded); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencoded, err := json.Marshal(decoded)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(encoded, \"\n\"), nil\n}", "CodeBleu_score": 31.29013980149574}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepoRef, err := c.validateRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !c.checkAccess(session, repo, reqPermission) {\n\t\treturn nil, fmt.Errorf(\"you do not have access to the repository\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 46.58073350119449}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\n\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tok, err := c.checkRepoAccess(ctx, session, repo, reqPermission)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !ok {\n\t\treturn nil, fmt.Errorf(\"access denied\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 46.234922106477434}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\thasAccess, err := c.checkAccess(ctx, session, repo.ID, reqPermission)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif !hasAccess {\n\t\treturn nil, errors.ErrForbidden\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.51823108023756}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:      createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n\n\treturn sanitizers\n}", "CodeBleu_score": 33.035000827936386}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.475340699696524}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.475340699696524}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t    self.state.on_render = on_render\n    if not self.state.attached_to_renderer then\n        self.state.attached_to_renderer = true\n        self.renderer:attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 59.08849962106453}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.on_render = on_render\n\tif not self.renderer then\n\t\tself.renderer = self.screen:attach_to_renderer(self)\n\t\tself.state.renderer = self.renderer\n\tend\n\treturn self", "CodeBleu_score": 50.69340224824981}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    self.state.on_render = on_render\n\n    if not self.attached then\n        self:attach_to_screen()\n    end\n\n    return self", "CodeBleu_score": 40.87446902649188}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t  if not self:valid() then return end\n  if callback then callback() end\n  local filename = self.filename\n  if not filename then return end\n  local watcher = vim.loop.fs_events:new(filename, { recursive = false }, function(err, filename, events, status)\n    if err then\n      print('Error watching file: ' .. err)\n    else\n      if callback then callback() end\n    end\n  end)\n  watcher:start()\n  self.watcher = watcher", "CodeBleu_score": 48.87586455632392}, {"code": "function Buffer:watch(callback)\n\t    if self.valid then \n        self.callback = callback\n        self.watcher = vim.loop.fs_watch(self.filename, {}, function(err, name, flags)\n            if err then\n                vim.notify(\"Error watching file: \" .. err, vim.log.levels.ERROR)\n            else\n                if flags.change then\n                    if self.callback then\n                        self.callback(self)\n                    end\n                end\n            end\n        end)\n    end", "CodeBleu_score": 45.773321105609035}, {"code": "function Buffer:watch(callback)\n\t    if self.valid then\n        local watcher = vim.loop.fs_watch(self.filename, {}, function()\n            if callback then\n                callback()\n            end\n        end)\n        if watcher then\n            self.watcher = watcher\n        else\n            log.error(\"Failed to set up file watcher for buffer: \" .. self.filename)\n        end\n    end", "CodeBleu_score": 48.48087438317643}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t    if self.hex then \n        return self.hex \n    end \n    local spec = self:get_spec() \n    local attr = spec.attr and spec.attr.reverse and spec.attr.reverse.foreground or spec.attr and spec.attr.reverse and spec.attr.reverse.background \n    if not attr then \n        return nil \n    end \n    local hl_id = vim.api.nvim_get_hl_by_name(attr, true) \n    if not hl_id then \n        return nil \n    end \n    local hex = vim.api.nvim_get_hl(hl_id, true) \n    if not hex then \n        return nil \n    end \n    self.hex = hex.foreground and hex.foreground:gsub(\"#\", \"\") or hex.background and hex.background:gsub(\"#\", \"\") \n    return self.hex ", "CodeBleu_score": 51.25571404460825}, {"code": "function Color:to_hex()\n\t    if self.hex then\n        return self.hex\n    end\n    local spec = self:get_spec()\n    local attr = self.attr == 'fg' and 'foreground' or 'background'\n    local hl = vim.api.nvim_get_hl_by_name(spec, true)\n    if not hl then\n        return nil\n    end\n    local hex = hl[attr]\n    if hex then\n        self.hex = hex\n    end\n    return hex", "CodeBleu_score": 60.045615426247636}, {"code": "function Color:to_hex()\n\t    local hex_value = self.hex_value\n    if hex_value ~= nil then\n        return hex_value\n    end\n\n    local spec = self.spec\n    local attr = spec.attr\n    local hl_name = spec.hl_name\n\n    local hl_id = vim.api.nvim_get_hl_by_name(hl_name, true)\n    if hl_id == nil then\n        return nil\n    end\n\n    local hl_attr = vim.api.nvim_get_hl(hl_id, {[attr] = true})\n    local color = hl_attr[attr]\n\n    if color == nil then\n        return nil\n    end\n\n    hex_value = Color.to_hex_string(color)\n    self.hex_value = hex_value\n    return hex_value", "CodeBleu_score": 42.66950866305858}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local row = 0\n\n  for _, line in ipairs(lines) do\n    local start_col, end_col = string.find(line, pattern, 1, true)\n\n    if start_col then\n      buffer:add_highlight(hl, row, start_col, end_col)\n    end\n\n    row = row + 1\n  end\n\n  return self", "CodeBleu_score": 46.18946246960965}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t    local lines = buffer:get_lines()\n    for i, line in ipairs(lines) do\n        local start_pos = 1\n        while true do\n            local start_pos, end_pos = string.find(line, pattern, start_pos, true)\n            if start_pos then\n                buffer:add_highlight(hl, i, start_pos, end_pos)\n                start_pos = end_pos + 1\n            else\n                break\n            end\n        end\n    end\n    return self", "CodeBleu_score": 49.424518336186786}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local row = 0\n  for _, line in ipairs(lines) do\n    local col_top = 0\n    while true do\n      local col_end, match = string.find(line, pattern, col_top, true)\n      if col_end then\n        buffer:add_highlight(hl, row, col_top, col_end)\n        col_top = col_end + 1\n      else\n        break\n      end\n    end\n    row = row + 1\n  end\n  return self", "CodeBleu_score": 53.80716967651218}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = (row * 10000) + col\n    local ns_id = vim.api.nvim_create_namespace(\"TransposeVirtualText\")\n    local mark = vim.api.nvim_buf_set_extmark(buffer, ns_id, row, col, {\n        id = id,\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 69.44209624038488}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = string.format(\"%d-%d\", row, col)\n    local ns_id = vim.api.nvim_create_namespace(\"transpose_virtual_text\")\n    vim.api.nvim_buf_set_extmark(buffer, ns_id, id, row, col, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 61.7043656950969}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = (row * 1000000) + col\n\tlocal ns_id = vim.api.nvim_create_namespace(\"Transpose\")\n\tvim.api.nvim_buf_set_extmark(buffer, ns_id, id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 64.38320175496035}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local result = \"\"\n    local line = \"\"\n    for i = 1, #output do\n        local char = string.sub(output, i, i)\n        if char == \"", "CodeBleu_score": 23.165452316767166}, {"code": "function Spawn:parse_result(output, callback)\n\t    local result = \"\"\n    local line = \"\"\n    local in_quotes = false\n    local escaped = false\n    local i = 1\n\n    while i <= #output do\n        local c = output:sub(i, i)\n        if c == '\"' then\n            in_quotes = not in_quotes\n        elseif c == '\\\\' then\n            escaped = true\n        elseif c == '", "CodeBleu_score": 34.6473912591401}, {"code": "function Spawn:parse_result(output, callback)\n\t    local lines = {}\n    local line = \"\"\n    for i = 1, #output do\n        local c = output:sub(i, i)\n        if c == \"", "CodeBleu_score": 25.138233132697675}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t    local watcher = self.watchers[path]\n    if watcher then\n        return watcher\n    end\n\n    watcher = vim.loop.new_fs_event()\n    watcher:start(path, {}, vim.schedule_wrap(handler))\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 50.9838628592001}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watchers[path] then \n    return self.watchers[path] \n  end \n  local watcher = vim.loop.new_fs_event() \n  watcher:start(path, {}, vim.schedule_wrap(handler)) \n  self.watchers[path] = watcher \n  return watcher ", "CodeBleu_score": 48.006163251958064}, {"code": "function Watcher:watch_file(path, handler)\n\t    local watcher = self.watchers[path]\n    if watcher then\n        return watcher\n    end\n    watcher = vim.loop.new_fs_event()\n    watcher:start(path, {}, vim.schedule_wrap(handler))\n    self.watchers[path] = watcher\n    return watcher", "CodeBleu_score": 50.9838628592001}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n\tlocal hunks, err = self.git_object:live_hunks(lines)\n\tif err then\n\t\treturn nil, err\n\tend\n\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign = {\n\t\t\t\tlnum = line.lnum,\n\t\t\t\tname = 'GitHunk',\n\t\t\t\tpriority = line.type == 'add' and 10 or 9,\n\t\t\t\tid = self.bufnr,\n\t\t\t\tnumber = line.lnum,\n\t\t\t\ton_click = {\n\t\t\t\t\tcallback = function()\n\t\t\t\t\t\tvim.api.nvim_win_set_cursor(0, { line.lnum, 0 })\n\t\t\t\t\tend,\n\t\t\t\t},\n\t\t\t}\n\t\t\ttable.insert(signs, sign)\n\t\tend\n\tend\n\n\tvim.api.nvim_buf_set_extmark(self.bufnr, 'GitHunk', 0, -1, {})\n\tvim.api.nvim_buf_set_extmark(self.bufnr, 'GitHunk', 0, -1, signs)\n\n\treturn hunks", "CodeBleu_score": 47.59330160143774}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n\tlocal hunks = self.git_object:hunks(lines)\n\tif hunks == nil then\n\t\treturn hunks\n\tend\n\tlocal signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign = self:sign(line.type, line.priority)\n\t\t\tsigns[line.lineno] = sign\n\t\tend\n\tend\n\tvim.fn.sign_define('GitSignAdd', { text = '+', texthl = 'GitSignAdd' })\n\tvim.fn.sign_define('GitSignDelete', { text = '-', texthl = 'GitSignDelete' })\n\tvim.fn.sign_define('GitSignChange', { text = '~', texthl = 'GitSignChange' })\n\tvim.fn.sign_define('GitSignUnchanged', { text = ' ', texthl = 'GitSignUnchanged' })\n\tvim.fn.sign_define('GitSignUnknown', { text = '?', texthl = 'GitSignUnknown' })\n\tvim.fn.sign_define('GitSignError', { text = 'X', texthl = 'GitSignError' })\n\tvim.fn.sign_define('GitSignWarning', { text = 'W', texthl = 'GitSignWarning' })\n\tvim.fn.sign_define('GitSignInfo', { text = 'I', texthl = 'GitSignInfo' })\n\tvim.fn.sign_define('GitSignHunk', { text = 'H', texthl = 'GitSignHunk' })\n\tvim.fn.sign_define('GitSignRenamed', { text = 'R', texthl = 'GitSignRenamed' })\n\tvim.fn.sign_define('GitSignCopied', { text = 'C', texthl =", "CodeBleu_score": 35.322809369839426}, {"code": "function GitBuffer:live_hunks()\n\t    local lines = self.buf:lines()\n    local hunks = self.git:hunks()\n    if not hunks then\n        return hunks\n    end\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk) do\n            local sign = self.signs[line.type]\n            sign.priority = self.priorities[line.type]\n            sign.lnum = lines[line.lineno].lnum\n            sign.name = line.type\n            sign.id = self.buf.id\n            table.insert(self.signs.group, sign)\n        end\n    end\n    self.buf:set_signs(self.signs.group, 'Git')\n    return hunks", "CodeBleu_score": 38.95861675482665}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local temp_file = os.tmpname()\n  local f = io.open(temp_file, 'wb')\n  f:write(patch)\n  f:close()\n  local err = self:stage_hunk(temp_file)\n  os.remove(temp_file)\n  return err", "CodeBleu_score": 45.212957479191616}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t    local temp_file = os.tmpname()\n    local f = io.open(temp_file, 'w')\n    f:write(patch)\n    f:close()\n    local _, _, exit_code = os.execute('git add -p ' .. temp_file)\n    os.remove(temp_file)\n    if exit_code ~= 0 then\n        return 'Error staging hunk from patch'\n    end\n    return nil", "CodeBleu_score": 46.15985098752118}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmp_file = os.tmpname()\n  local f = io.open(tmp_file, 'w')\n  f:write(patch)\n  f:close()\n\n  local cmd = 'git add -p ' .. tmp_file\n  local ok, err = os.execute(cmd)\n  os.remove(tmp_file)\n\n  if not ok then\n    error(err)\n  end", "CodeBleu_score": 49.2222516457573}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\n    request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n    request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n\n    Response response = request.send();\n    return config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 60.099474941342756}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t        OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n        request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(OAuthConstants.TOKEN, requestToken.getToken());\n        request.addBodyParameter(OAuthConstants.VERIFIER, verifier.getValue());\n        Response response = request.send();\n        return api.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 62.261990691013146}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\n    request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n    request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n    Response response = request.send();\n\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 62.18043872254783}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t  AuthCache authCache = new BasicAuthCache();\n  BasicScheme basicAuth = new BasicScheme();\n  authCache.put(host, basicAuth);\n  BasicCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n  credentialsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n  context.setCredentialsProvider(credentialsProvider);\n  context.setAuthCache(authCache);\n  log.info(\"Added {} to auth cache\", host);\n}", "CodeBleu_score": 63.44498240757527}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t  CredentialsProvider credsProvider = new BasicCredentialsProvider();\n  credsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n  context.setCredentialsProvider(credsProvider);\n  AuthCache authCache = new BasicAuthCache();\n  BasicScheme basicAuth = new BasicScheme();\n  authCache.put(host, basicAuth);\n  context.setAuthCache(authCache);\n  LOGGER.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 59.813335395384}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t  // Create a credentials provider with the specified credentials\n  CredentialsProvider credsProvider = new BasicCredentialsProvider();\n  credsProvider.setCredentials(new AuthScope(host), new UsernamePasswordCredentials(username, password));\n  // Add the host to an authentication cache using the Basic authentication scheme\n  AuthCache authCache = new BasicAuthCache();\n  authCache.put(host, new BasicScheme());\n  // Assign these to the context\n  context.setCredentialsProvider(credsProvider);\n  context.setAuthCache(authCache);\n  // Log the action of adding the host to the auth cache\n  log.debug(\"Added host to auth cache: \" + host);\n}", "CodeBleu_score": 68.69835667245148}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    AvatarCache cache = Jenkins.get().getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"No avatar cache found\");\n    }\n    String cacheKey = cache.seedCache(source);\n    try {\n        return Jenkins.get().rootUrl + \"/\" + URLEncoder.encode(cacheKey, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 41.59770933801008}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not available\");\n    }\n    String key = cache.seed(source);\n    try {\n        return Jenkins.get().getRootUrl() + URLEncoder.encode(key, \"UTF-8\") + \"?s=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 35.07865939378}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    AvatarCache cache = AvatarCache.getInstance();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not installed\");\n    }\n    String key = cache.seedCache(source);\n    try {\n        return Jenkins.get().rootUrl + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 35.436527136221564}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > MAX_SIZE || image.getHeight() > MAX_SIZE) {\n        this.image = scaleImage(image, MAX_SIZE);\n    } else {\n        this.image = image;\n    }\n}", "CodeBleu_score": 62.71975217380745}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128);\n    }\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 67.32746562131986}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = scaleImage(image, 128);\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 48.24381130861109}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t  if (future == null) {\n    return false;\n  }\n  try {\n    if (future.isDone()) {\n      cacheEntry=future.get();\n      if (cacheEntry != null) {\n        image=cacheEntry.getImage();\n        lastModified=cacheEntry.getLastModified();\n      }\n      future=null;\n    }\n  }\n catch (  Exception e) {\n    return true;\n  }\n  return true;\n}", "CodeBleu_score": 45.97259744204408}, {"code": "private synchronized boolean pending(){\n\t  if (future == null) {\n    return false;\n  }\n  if (future.isDone()) {\n    try {\n      cacheEntry=future.get();\n      if (cacheEntry != null) {\n        image=cacheEntry.getImage();\n        lastModified=cacheEntry.getLastModified();\n      }\n      future=null;\n      return false;\n    }\n catch (    InterruptedException e) {\n      return true;\n    }\ncatch (    ExecutionException e) {\n      return true;\n    }\n  }\n  return true;\n}", "CodeBleu_score": 53.23488872487046}, {"code": "private synchronized boolean pending(){\n\t  if (future == null) {\n    return false;\n  }\n  if (future.isDone()) {\n    try {\n      cacheEntry=future.get();\n      if (cacheEntry == null) {\n        return false;\n      }\n      image=cacheEntry.getImage();\n      lastModified=cacheEntry.getLastModified();\n      future=null;\n    }\n catch (    Exception e) {\n      future=null;\n      return true;\n    }\n    return false;\n  }\n  return true;\n}", "CodeBleu_score": 50.12259028986379}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n    if (rsp.isCommitted()) {\n        return;\n    }\n\n    if (req.getMethod().equalsIgnoreCase(\"HEAD\")) {\n        rsp.setStatus(HttpServletResponse.SC_OK);\n        return;\n    }\n\n    byte[] image = getImage(req, node);\n    if (image == null) {\n        rsp.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        return;\n    }\n\n    rsp.setStatus(HttpServletResponse.SC_OK);\n    rsp.setHeader(\"Cache-Control\", \"public, max-age=31536000\");\n    rsp.setHeader(\"Content-Type\", \"image/png\");\n    rsp.setContentLength(image.length);\n    rsp.getOutputStream().write(image);\n    rsp.flushBuffer();\n}", "CodeBleu_score": 40.21630716440647}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n    // create the image\n    BufferedImage image = createImage(node);\n\n    // write the image to a byte array output stream\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(image, \"png\", baos);\n    baos.flush();\n\n    // set headers\n    rsp.setHeader(\"Cache-Control\", \"no-cache\");\n    rsp.setHeader(\"Expires\", \"-1\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setContentType(\"image/png\");\n\n    // write the byte array to the response output stream\n    rsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 46.382379976600475}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t", "CodeBleu_score": 9.478070530273596}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClients.custom()\n            .setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n            .setConnectionManager(new PoolingHttpClientConnectionManager())\n            .setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n\n        if (authenticator != null) {\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, null);\n            builder.setDefaultRequestConfig(RequestConfig.custom().setAuthenticationEnabled(true).build());\n        }\n\n        setClientProxyParams(BITBUCKET_API_HOST, builder);\n        this.httpClient = builder.build();\n    }", "CodeBleu_score": 47.95608535495287}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t", "CodeBleu_score": 7.452943353488384}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.context = null;\n\n        HttpClientBuilder builder = HttpClients.custom();\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        builder.setConnectionManager(new PoolingHttpClientConnectionManager());\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, false));\n        if (authenticator != null) {\n            authenticator.configureClient(builder);\n            authenticator.configureContext(context, null);\n        }\n        setClientProxyParams(API_HOST, builder);\n        this.client = builder.build();\n    }", "CodeBleu_score": 48.56405485527096}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    String sourceBranchName = pullRequest.getSource().getBranch().getName();\n    BitbucketCloudBranch sourceBranch = getBranch(sourceBranchName);\n    if (sourceBranch != null) {\n        CommitClosure sourceClosure = new CommitClosure(sourceBranch.getTarget().getRawNode());\n        pullRequest.getSource().setCommitClosure(sourceClosure);\n    }\n\n    String destinationBranchName = pullRequest.getDestination().getBranch().getName();\n    BitbucketCloudBranch destinationBranch = getBranch(destinationBranchName);\n    if (destinationBranch != null) {\n        CommitClosure destinationClosure = new CommitClosure(destinationBranch.getTarget().getRawNode());\n        pullRequest.getDestination().setCommitClosure(destinationClosure);\n    }\n}", "CodeBleu_score": 38.144747400045425}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n    if (sourceBranch != null) {\n        sourceBranch.setCommitClosure(new CommitClosure(sourceBranch.getRawNode()));\n    }\n    BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n    if (destinationBranch != null) {\n        destinationBranch.setCommitClosure(new CommitClosure(destinationBranch.getRawNode()));\n    }\n}", "CodeBleu_score": 53.90315199024942}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketBranchValue sourceBranch = pullRequest.getSource().getBranch();\n    if (sourceBranch != null) {\n        CommitClosure commitClosure = new CommitClosure(sourceBranch.getRawNode(), sourceBranch.getRawNode());\n        sourceBranch.setCommitClosure(commitClosure);\n    }\n    BitbucketBranchValue destBranch = pullRequest.getDestination().getBranch();\n    if (destBranch != null) {\n        CommitClosure commitClosure = new CommitClosure(destBranch.getRawNode(), destBranch.getRawNode());\n        destBranch.setCommitClosure(commitClosure);\n    }\n}", "CodeBleu_score": 43.590623521320225}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null || jenkinsLocationConfiguration.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins Location configuration not found\");\n    }\n    return jenkinsLocationConfiguration.getUrl().toExternalForm() + build.getDisplayUrl();\n}", "CodeBleu_score": 55.04941463173398}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\n    if (jlc == null || jlc.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is not configured\");\n    }\n    return jlc.getUrl().getDisplayURL(build);\n}", "CodeBleu_score": 65.49068975969246}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null || config.url == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 62.96845750519584}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URI uri = new URI(url);\n        if (uri.getHost() == null || uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n        }\n        if (bitbucket instanceof BitbucketCloudApi) {\n            if (!uri.getHost().contains(\".\")) {\n                throw new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n            }\n        }\n        return url;\n    }\n catch (    URISyntaxException e) {\n        throw new IllegalStateException(\"Invalid Jenkins URL: \" + url, e);\n    }\n}", "CodeBleu_score": 57.76527099343017}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n      URL parsedUrl=new URL(url);\n      if (parsedUrl.getHost().equals(\"localhost\") || parsedUrl.getHost().equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"Jenkins URL is not configured\");\n      }\n      if (bitbucket instanceof BitbucketCloudApiClient) {\n        if (!parsedUrl.getHost().contains(\".\")) {\n          throw new IllegalStateException(\"Jenkins URL is not fully qualified\");\n        }\n      }\n      return url;\n    }\n catch (    MalformedURLException e) {\n      throw new IllegalStateException(\"Jenkins URL is malformed\",e);\n    }\n  }", "CodeBleu_score": 61.3576073993065}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t  try {\n    URI uri=new URI(url);\n    if (uri.getHost().equals(\"localhost\") || uri.getHost().equals(\"unconfigured-jenkins-location\")) {\n      throw new IllegalStateException(\"Jenkins URL is not configured. Please configure it in Jenkins settings.\");\n    }\n    if (bitbucket instanceof BitbucketCloudApi) {\n      if (uri.getHost().contains(\".\")) {\n        return url;\n      }\n else {\n        throw new IllegalStateException(\"Jenkins URL is not fully qualified. Please configure it in Jenkins settings.\");\n      }\n    }\n    return url;\n  }\n catch (  URISyntaxException e) {\n    throw new IllegalStateException(\"Jenkins URL is malformed. Please configure it in Jenkins settings.\");\n  }\n}", "CodeBleu_score": 63.867014544257714}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        if (source == null || build == null) {\n            return;\n        }\n\n        // Initialize the Bitbucket context\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n\n        // Check if notifications are disabled\n        if (context.isNotificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        // Retrieve the SCM revision and its hash\n        SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        String hash = getHash(revision);\n\n        // Determine whether to share the build key between branch and PR\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        // Log the notification type\n        if (revision instanceof PullRequestSCMRevision) {\n            listener.getLogger().println(\"[Bitbucket] Notify PR\");\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Notify branch\");\n        }\n\n        // Construct the build key\n        String branch = getBranch(revision);\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        // Initialize the Bitbucket client\n        BitbucketApi bitbucket = source.getBitbucketClient(context);\n\n        // Create and send the build status notification\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 52.36139893563123}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isNotificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] No revision found\");\n            return;\n        }\n\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No hash found\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        String branch = revision.getBranch();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        BitbucketApi bitbucket = source.getClient();\n\n        if (revision instanceof PullRequestSCMRevision) {\n            listener.getLogger().println(\"[Bitbucket] Sending PR notification\");\n            createPRNotification(build, listener, bitbucket, key, hash, branch);\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Sending branch notification\");\n            createStatus(build, listener, bitbucket, key, hash);\n        }\n    }", "CodeBleu_score": 54.479008220264106}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isNotificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Skip notifications\");\n            return;\n        }\n\n        SCMRevision revision = build.getAction(SCMRevisionState.class).getRevision();\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] Skip notifications, no SCM revision\");\n            return;\n        }\n\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Skip notifications, no hash\");\n            return;\n        }\n\n        String branch = getBranch(revision);\n        if (branch == null) {\n            listener.getLogger().println(\"[Bitbucket] Skip notifications, no branch\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        BitbucketApi bitbucket = BitbucketApiFactory.create(source.getTraits());\n\n        listener.getLogger().println(\"[Bitbucket] Send \" +\n                (revision instanceof PullRequestSCMRevision ? \"PR\" : \"branch\") +\n                \" build status notification for \" +\n                key + \" with hash \" + hash);\n\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 50.77276650421738}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n        return build.getParent().getFullName() + \"/\" + branch;\n    }\n    return build.getParent().getFullName();\n}", "CodeBleu_score": 29.871365856637226}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = build.getParent().getFullName() + \"/\" + branch;\n    } else {\n        key = build.getFullDisplayName();\n    }\n    return key;\n}", "CodeBleu_score": 48.2410651465423}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String folderName = build.getParent().getFullName();\n    String jobName = build.getParent().getFullName();\n    if (shareBuildKeyBetweenBranchAndPR) {\n        return folderName + \"/\" + branch;\n    } else {\n        return jobName;\n    }\n}", "CodeBleu_score": 47.72926560290833}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t  if (serverUrl == null) {\n    serverUrl=new URL(\"https://bitbucket.org\");\n    if (traits == null) {\n      traits=new BitbucketSCMNavigatorTrait();\n    }\n  }\n  return this;\n}", "CodeBleu_score": 10.648684565427182}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t  if (serverUrl == null) {\n    serverUrl=getServerUrl();\n    if (serverUrl == null) {\n      LOGGER.warning(\"Server URL not set for BitbucketSCMNavigator\");\n    }\n  }\n  if (traits == null) {\n    traits=new BitbucketSCMNavigatorTrait();\n    traits.setRepoOwner(repoOwner);\n    traits.setCredentialsId(credentialsId);\n    traits.setGitServer(gitServer);\n    traits.setProjectName(projectName);\n    traits.setRepoName(repoName);\n    traits.setCredentialsId(credentialsId);\n    traits.setCloneByHttp(cloneByHttp);\n  }\n  return this;\n}", "CodeBleu_score": 16.803270446721523}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t  if (serverUrl == null) {\n    serverUrl=getServerUrl();\n    if (serverUrl == null) {\n      LOGGER.warning(\"Could not resolve serverUrl for BitbucketSCMNavigator\");\n    }\n  }\n  if (traits == null) {\n    traits=createDefaultTraits();\n  }\n  return this;\n}", "CodeBleu_score": 11.57486909073656}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t  BitbucketRepository repository = repositoryService.getByName(name);\n  if (repository == null) {\n    LOG.warn(\"Unable to find repository with name {}\", name);\n    return;\n  }\n  if (isMatch) {\n    LOG.info(\"Repository {} is proposed\", name);\n    proposedCount++;\n  }\n else {\n    LOG.info(\"Repository {} is ignored\", name);\n  }\n}", "CodeBleu_score": 47.4333734187435}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t  Optional<BitbucketRepository> repository = repositoryService.getByName(name);\n  if (repository.isPresent()) {\n    if (isMatch) {\n      LOGGER.info(\"Repository {} is proposed\", name);\n      count++;\n    }\n else {\n      LOGGER.info(\"Repository {} is ignored\", name);\n    }\n  }\n else {\n    LOGGER.info(\"Repository {} is ignored\", name);\n  }\n}", "CodeBleu_score": 47.96105629606381}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t  BitbucketRepository repository = repositoryService.getRepository(name);\n  if (repository == null) {\n    return;\n  }\n  if (isMatch) {\n    log.info(\"Proposed repository: {}\", name);\n    count++;\n  }\n else {\n    log.info(\"Ignored repository: {}\", name);\n  }\n}", "CodeBleu_score": 46.11775519268979}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (rev instanceof BranchRevision) {\n            BranchRevision branchRevision = (BranchRevision) rev;\n            String branch = branchRevision.getBranch();\n            String sha1 = branchRevision.getSha1String();\n\n            if (!commitExists(git, sha1)) {\n                listener.getLogger().println(\"Revision \" + sha1 + \" not found locally. Fetching it from remote repository.\");\n                String cloneLink = scm.getUserRemoteConfigs().get(0).getUrl();\n                git.fetch()\n                        .setRefSpecs(new RefSpec(sha1))\n                        .setRemote(cloneLink)\n                        .setCredentialsProvider(scm.getProvider())\n                        .call();\n            }\n\n            return new BranchRevision(branch, sha1);\n        } else {\n            return rev;\n        }\n    }", "CodeBleu_score": 36.084910949004}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (rev == null) {\n            return null;\n        }\n        if (marked != null) {\n            return marked;\n        }\n        if (rev instanceof Branch) {\n            Branch branch = (Branch) rev;\n            if (branch.isSHA1()) {\n                if (commitExists(git, branch.getSHA1())) {\n                    return rev;\n                }\n                String refspec = \"+refs/heads/\" + branch.getName() + \":\" + branch.getName();\n                listener.getLogger().println(\"Fetching \" + refspec + \" from \" + scm.getUserRemoteConfigs().get(0).getUrl());\n                git.fetch()\n                        .setRemote(scm.getUserRemoteConfigs().get(0).getName())\n                        .setRefSpecs(refspec)\n                        .call();\n                return rev;\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 31.262639427537998}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (rev instanceof BranchRevision) {\n            BranchRevision branchRevision = (BranchRevision) rev;\n            String sha1 = branchRevision.getSha1String();\n            if (!commitExists(git, sha1)) {\n                String branchName = branchRevision.getBranchName();\n                listener.getLogger().println(\"Revision \" + sha1 + \" does not exist locally, fetching it from the remote repository\");\n                scm.createClient(build, listener).fetch(scm.getRepositories(), scm.getBranches(), scm.getExtensions(), scm.getGitTool(), scm.getUserRemoteConfigs());\n                if (!commitExists(git, sha1)) {\n                    listener.getLogger().println(\"Revision \" + sha1 + \" still does not exist locally, skipping build\");\n                    return null;\n                }\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 31.857783412312422}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (hrefs != null && !hrefs.isEmpty()) {\n            result.put(entry.getKey(), hrefs.get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 72.53760188613965}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t  if (links == null) {\n    return null;\n  }\n  Map<String,BitbucketHref> result=new HashMap<String,BitbucketHref>();\n  for (  Map.Entry<String,List<BitbucketHref>> entry : links.entrySet()) {\n    List<BitbucketHref> hrefs=entry.getValue();\n    if (hrefs != null && !hrefs.isEmpty()) {\n      result.put(entry.getKey(),hrefs.get(0));\n    }\n  }\n  return result;\n}", "CodeBleu_score": 58.4474669613675}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    Map<String, BitbucketHref> links = super.getLinks();\n    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 67.05273114735344}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  if (resourceStates.length === 0) {\n    return;\n  }\n\n  const resources = resourceStates.map((state) => state.resource);\n  const repositoryToResources = new Map<string, string[]>();\n\n  for (const resource of resources) {\n    const repository = await this.getRepository(resource);\n    if (!repositoryToResources.has(repository)) {\n      repositoryToResources.set(repository, []);\n    }\n    repositoryToResources.get(repository).push(resource.uri.fsPath);\n  }\n\n  for (const [repository, filePaths] of repositoryToResources) {\n    try {\n      await this.addFiles(repository, filePaths);\n    } catch (error) {\n      console.error(`Error adding files to repository ${repository}: ${error}`);\n      vscode.window.showErrorMessage(`Failed to add files to repository ${repository}. See console for details.`);\n    }\n  }\n}", "CodeBleu_score": 45.54383492867286}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  if (!resourceStates || resourceStates.length === 0) {\n    return;\n  }\n\n  const resourceStatesByRepository = this.mapResourceStatesByRepository(\n    resourceStates\n  );\n\n  for (const [repository, resourceStates] of resourceStatesByRepository) {\n    const filePaths = resourceStates.map((state) => state.resourceUri.fsPath);\n\n    try {\n      await repository.add(filePaths);\n    } catch (error) {\n      this.logger.error(error);\n      vscode.window.showErrorMessage(\n        localize(\n          \"error.sourceControl.add\",\n          \"Unable to add files to source control.\"\n        )\n      );\n    }\n  }\n}", "CodeBleu_score": 49.91403350779914}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  if (resourceStates.length === 0) {\n    return;\n  }\n\n  const repositoryMap = new Map<string, string[]>();\n  for (const resourceState of resourceStates) {\n    const uri = resourceState.resourceUri;\n    const repository = await this.getRepository(uri);\n    if (!repositoryMap.has(repository)) {\n      repositoryMap.set(repository, []);\n    }\n    repositoryMap.get(repository).push(uri);\n  }\n\n  for (const [repository, uris] of repositoryMap) {\n    const filePaths = uris.map((uri) => this.getFilePath(uri));\n    try {\n      await this.addFilesToRepository(repository, filePaths);\n    } catch (error) {\n      console.error(error);\n      this.showErrorMessage(`Failed to add files to repository ${repository}`);\n    }\n  }\n}", "CodeBleu_score": 47.549152356497515}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t    if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n        return this.resourceStates;\n    }\n\n    const resourceStates: ResourceState[] = [];\n\n    for (const resourceState of this.resourceStates) {\n        const resource = await this.getScmResource(resourceState.resourceUri);\n        if (resource) {\n            resourceStates.push({\n                resourceUri: resourceState.resourceUri,\n                contextValue: resourceState.contextValue,\n                command: resourceState.command,\n                resource: resource\n            });\n        }\n    }\n\n    return resourceStates.filter(resourceState => resourceState.resource instanceof Resource);\n}", "CodeBleu_score": 33.326919060115834}, {"code": "protected async getResourceStates{\n\t  if (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n    const scmResource = await this.getScmResource();\n    if (scmResource) {\n      this.resourceStates = [{ resourceUri: scmResource.uri, ...scmResource.scmResourceGroup }];\n    }\n  }\n  return this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 36.55806953853657}, {"code": "protected async getResourceStates{\n\t    const { resourceStates } = this;\n\n    if (\n        !resourceStates ||\n        resourceStates.length === 0 ||\n        !(resourceStates[0].uri instanceof Uri)\n    ) {\n        await this.getScmResource();\n    }\n\n    return resourceStates.filter((s) => s instanceof Resource);\n}", "CodeBleu_score": 34.83809375982231}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n\n    const scm = sourceControlManager.getRepository(uri);\n    if (!scm) {\n      return undefined;\n    }\n\n    const repository = await scm.getResourceFromFile(uri);\n    return repository;\n  }", "CodeBleu_score": 46.34453916869658}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n      if (!editor) {\n        return undefined;\n      }\n      uri = editor.document.uri;\n    }\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n    const scm = this.sourceControlManager;\n    if (!scm) {\n      return undefined;\n    }\n    const repository = scm.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 47.77164516509056}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const activeEditor = window.activeTextEditor;\n      if (!activeEditor) {\n        return undefined;\n      }\n      uri = activeEditor.document.uri;\n    }\n\n    if (uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n\n    const scm = await this.sourceControlManager.getRepository(uri);\n    if (!scm) {\n      return undefined;\n    }\n\n    const resource = await scm.getResourceFromFile(uri.fsPath);\n    return resource;\n  }", "CodeBleu_score": 45.12742704517185}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    try {\n        const remoteRepository = await this.model.getRemoteRepository(element);\n        if (element.status === 'M') {\n            // Open a diff between the old and new revisions\n            const diffCmd = `svn diff -r ${element.oldRevision}:${element.newRevision} ${remoteRepository}`;\n            await this.openDiff(diffCmd);\n        } else if (element.status === 'A') {\n            // Open the remote file at the new path and revision\n            const remoteFileCmd = `svn cat -r ${element.newRevision} ${remoteRepository}`;\n            await this.openDiff(remoteFileCmd);\n        }\n    } catch (error) {\n        console.error(error);\n    }\n}", "CodeBleu_score": 35.8624209246933}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const remoteRepository = await this.model.getRemoteRepository(element.path);\n  if (element.type === ChangeType.MODIFIED) {\n    this.openDiff(remoteRepository, element.oldRevision, element.newRevision);\n  } else if (element.type === ChangeType.ADDED) {\n    this.openFileRemote(remoteRepository, element.newPath, element.newRevision);\n  }\n}", "CodeBleu_score": 51.83145213445122}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const repository = await this.model.getRemoteRepository(element.path);\n    if (repository) {\n      if (element.type === ChangeType.Modified) {\n        const [base, head] = await Promise.all([\n          this.model.getRemoteFile(element.oldPath, element.oldRevision),\n          this.model.getRemoteFile(element.path, element.revision),\n        ]);\n        if (base && head) {\n          return this.openDiff(base, head);\n        }\n      } else if (element.type === ChangeType.Added) {\n        const head = await this.model.getRemoteFile(element.path, element.revision);\n        if (head) {\n          return this.openDiff(undefined, head);\n        }\n      }\n    }\n  }", "CodeBleu_score": 42.6946536546347}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.isSupported()) {\n        await window.showErrorMessage(`Copying to clipboard is not supported in your environment.`);\n        return;\n    }\n\n    if (item instanceof Commit) {\n        const commit = item as Commit;\n        const commitMessage = commit.message;\n        const commitRevision = commit.revision;\n\n        if (what === \"revision\") {\n            clipboard.writeText(commitRevision);\n        } else if (what === \"message\") {\n            clipboard.writeText(commitMessage);\n        }\n    }\n}", "CodeBleu_score": 38.308948969906325}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!clipboard.isSupported()) {\n    window.showErrorMessage('Clipboard is not supported');\n    return;\n  }\n\n  if (item instanceof CommitItem) {\n    const commit = item.commit;\n    if (what === 'message') {\n      clipboard.writeText(commit.message);\n    } else {\n      clipboard.writeText(commit.revision);\n    }\n  }\n}", "CodeBleu_score": 37.88935488446947}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.isSupported()) {\n        window.showErrorMessage('Copying to the clipboard is not supported');\n        return;\n    }\n    if (item instanceof CommitItem) {\n        switch (what) {\n            case 'revision':\n                clipboard.writeText(item.commit.revision);\n                break;\n            case 'message':\n                clipboard.writeText(item.commit.message);\n                break;\n        }\n    }\n}", "CodeBleu_score": 34.36190783467591}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t  Jenkins jenkins = Jenkins.getInstance();\n  if (jenkins != null) {\n    PluginManager pluginManager = jenkins.getPluginManager();\n    if (pluginManager != null) {\n      ClassLoader classLoader = pluginManager.getClassLoader();\n      if (classLoader != null) {\n        gitea.setClassLoader(classLoader);\n      }\n    }\n  }\n  return gitea;\n}", "CodeBleu_score": 39.070984829399706}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        this.pluginClassLoader = jenkins.getPluginManager().getPluginClassLoader();\n    } else {\n        this.pluginClassLoader = this.getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 50.228175262915364}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t  Jenkins jenkins = Jenkins.getInstance();\n  if (jenkins != null) {\n    PluginManager pluginManager = jenkins.getPluginManager();\n    if (pluginManager != null) {\n      return jenkinsPluginClassLoader(pluginManager.getClassLoader());\n    }\n  }\n  return jenkinsPluginClassLoader(getClass().getClassLoader());\n}", "CodeBleu_score": 36.82322223336247}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName != null ? displayName : serverUrl;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n    normalizeUrl(this.serverUrl);\n    normalizeUrl(this.aliasUrl);\n}", "CodeBleu_score": 29.911017325001062}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName != null ? displayName : serverUrl;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    if (manageHooks) {\n        this.credentialsId = credentialsId;\n    }\n    this.aliasUrl = normalizeAndTrim(aliasUrl);\n}", "CodeBleu_score": 33.120616683254724}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n\n    if (StringUtils.isBlank(displayName)) {\n        this.displayName = getServerName(serverUrl);\n    }\n\n    if (manageHooks && StringUtils.isBlank(credentialsId)) {\n        throw new IllegalArgumentException(\"Credentials ID must be provided when hooks are managed.\");\n    }\n\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.aliasUrl = StringUtils.trimToNull(aliasUrl);\n}", "CodeBleu_score": 42.82785534879486}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel result = new ListBoxModel();\n    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        if (serverUrl == null) {\n            return result;\n        }\n        for (StandardCredentials c : CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, new SchemeRequirement(GiteaAuth.REQUIRED_CREDENTIALS_SCHEME))) {\n            if (c instanceof GiteaAuth) {\n                GiteaAuth giteaAuth = (GiteaAuth) c;\n                if (giteaAuth.getServerUrl() != null && giteaAuth.getServerUrl().equals(serverUrl)) {\n                    result.add(c.getDisplayName(), c.getId());\n                }\n            }\n        }\n    }\n    return result;\n}", "CodeBleu_score": 42.339064372069316}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel result = new ListBoxModel();\n    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        result.add(new ListBoxModel.Option(Messages.GiteaSCMNavigator_EmptyCredentials(), \"\"));\n        if (serverUrl.startsWith(\"http://\") || serverUrl.startsWith(\"https://\")) {\n            for (GiteaAuth auth : GiteaAuth.getAll()) {\n                if (auth.getServerUrl().startsWith(serverUrl)) {\n                    result.add(new ListBoxModel.Option(auth.getDescription(), auth.getId()));\n                }\n            }\n        }\n    }\n    return result;\n}", "CodeBleu_score": 41.43286565736324}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new ListBoxModel();\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    List<Credentials> credentials = new ArrayList<>();\n    credentials.addAll(CredentialsMatchers.filter(CredentialsProvider.lookupCredentials(GiteaAuth.class, Jenkins.get(), ACL.SYSTEM, Collections.emptyList()), CredentialsMatchers.withId(serverUrl)));\n    credentials.addAll(CredentialsMatchers.filter(CredentialsProvider.lookupCredentials(GiteaAuth.class, Jenkins.get(), ACL.SYSTEM, Collections.emptyList()), CredentialsMatchers.always()));\n    return new ListBoxModel(credentials.stream().map(c -> new ListBoxModel.Option(c.getId(), c.getId())).collect(Collectors.toList()));\n}", "CodeBleu_score": 41.6618061547033}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t  if (serverUrl == null) {\n    return null;\n  }\n  try {\n    URI uri=new URI(serverUrl);\n    String scheme=uri.getScheme();\n    String host=uri.getHost();\n    int port=uri.getPort();\n    if (port == -1) {\n      port=uri.getScheme().equalsIgnoreCase(\"https\") ? 443 : 80;\n    }\n    String path=uri.getPath();\n    String query=uri.getQuery();\n    String fragment=uri.getFragment();\n    StringBuilder sb=new StringBuilder();\n    sb.append(scheme.toLowerCase());\n    sb.append(\"://\");\n    sb.append(host.toLowerCase());\n    if (port != 80 && port != 443) {\n      sb.append(\":\");\n      sb.append(port);\n    }\n    if (path != null) {\n      sb.append(path);\n    }\n    if (query != null) {\n      sb.append(\"?\");\n      sb.append(query);\n    }\n    if (fragment != null) {\n      sb.append(\"#\");\n      sb.append(fragment);\n    }\n    return removeTrailingSlash(sb.toString());\n  }\n catch (  URISyntaxException e) {\n    return serverUrl;\n  }\n}", "CodeBleu_score": 34.91705271231526}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t  try {\n    URI uri=new URI(serverUrl);\n    String scheme=uri.getScheme();\n    if (scheme == null) {\n      scheme=\"http\";\n    }\n    int port=uri.getPort();\n    if (port == -1) {\n      if (scheme.equals(\"http\")) {\n        port=80;\n      }\n else       if (scheme.equals(\"https\")) {\n        port=443;\n      }\n    }\n    String path=uri.getPath();\n    if (path == null || path.isEmpty() || path.equals(\"/\")) {\n      path=\"/\";\n    }\n else {\n      if (!path.endsWith(\"/\")) {\n        path=path + \"/\";\n      }\n    }\n    return scheme + \"://\" + uri.getHost() + \":\" + port + path;\n  }\n catch (  URISyntaxException e) {\n    return serverUrl;\n  }\n}", "CodeBleu_score": 28.814486961597968}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t  if (serverUrl == null) {\n    return null;\n  }\n  try {\n    URI uri=new URI(serverUrl);\n    StringBuilder sb=new StringBuilder();\n    sb.append(uri.getScheme().toLowerCase());\n    sb.append(\"://\");\n    sb.append(uri.getHost().toLowerCase());\n    if (uri.getPort() != -1) {\n      sb.append(\":\");\n      sb.append(uri.getPort());\n    }\n    if (uri.getPath() != null) {\n      sb.append(uri.getPath());\n    }\n    String url=sb.toString();\n    if (url.endsWith(\"/\")) {\n      url=url.substring(0,url.length() - 1);\n    }\n    return url;\n  }\n catch (  URISyntaxException e) {\n    return serverUrl;\n  }\n}", "CodeBleu_score": 27.54214133659028}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t        ListBoxModel model = new DefaultListModel();\n        for (GiteaServer server : getServers()) {\n            String displayName = server.getDisplayName();\n            if (displayName == null || displayName.isEmpty()) {\n                model.addElement(server.getUrl());\n            } else {\n                model.addElement(server.getUrl() + \" (\" + displayName + \")\");\n            }\n        }\n        return model;\n    }", "CodeBleu_score": 46.41559469981493}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName.isEmpty()) {\n            model.add(server.getUrl(), server.getUrl());\n        } else {\n            model.add(displayName, server.getUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 49.0580083065128}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (displayName == null || displayName.isEmpty()) {\n            model.add(server.getUrl(), server.getUrl());\n        } else {\n            model.add(server.getUrl(), displayName);\n        }\n    }\n    return model;\n}", "CodeBleu_score": 49.09902835667614}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t        Jenkins.checkPermission(Jenkins.ADMINISTER);\n        if (servers != null) {\n            // remove duplicates and empty URLs\n            servers = new ArrayList<>(new LinkedHashSet<>(servers));\n            servers.removeIf(server -> server.getServerUrl() == null || server.getServerUrl().isEmpty());\n        }\n        this.servers = servers;\n        save();\n    }", "CodeBleu_score": 28.75234336256524}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t        if (servers == null) {\n            servers = new ArrayList<>();\n        }\n        if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException();\n        }\n        List<GiteaServer> newServers = new ArrayList<>(servers);\n        newServers.removeIf(server -> server == null || server.getServerUrl() == null || server.getServerUrl().isEmpty());\n        newServers = newServers.stream().distinct().collect(Collectors.toList());\n        this.servers = newServers;\n        save();\n    }", "CodeBleu_score": 40.20487105572526}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t        if (servers == null) {\n            servers = new ArrayList<>();\n        }\n        if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException();\n        }\n        List<GiteaServer> newServers = new ArrayList<>();\n        for (GiteaServer server : servers) {\n            if (server == null) {\n                continue;\n            }\n            if (newServers.contains(server)) {\n                continue;\n            }\n            if (server.getUrl() == null) {\n                continue;\n            }\n            newServers.add(server);\n        }\n        this.servers = newServers;\n        save();\n    }", "CodeBleu_score": 36.47154262842268}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (servers != null) {\n        for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (serverUrl.equals(endpoint.getServerUrl())) {\n                iterator.remove();\n                save();\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 41.574747321011806}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    boolean removed = servers.removeIf(s -> serverUrl.equals(s.getServerUrl()));\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 35.599980688920446}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 49.59119805890618}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = el.asType().toString();\n\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 53.6758831001658}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = el.asType().toString();\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 53.6758831001658}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = el.asType().toString();\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 53.6758831001658}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace(\"$\", \".\")\n                .equals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 50.37001087920694}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getName();\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n            return annotation;\n        }\n        if (annotation.getQualifiedName().toString().replace('$', '.').endsWith(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 44.86651394831335}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  String annotationClassName = annotationClass.getName();\n  for (TypeElement annotation : annotations) {\n    if (annotation.getQualifiedName().toString().replace('$', '.')\n        .equals(annotationClassName)) {\n      return annotation;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 49.57027294483956}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\"employee\": employee}\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n        else:\n            filters[\"status\"] = \"Pending Approval\"\n    else:\n        filters[\"status\"] = [\"not in\", [\"Canceled\"]]\n\n    return filters\n\n", "CodeBleu_score": 24.235760943617706}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"leave_type\": \"Leave\",\n        \"from_date\": [\"<=\", nowdate()],\n        \"to_date\": [\">=\", nowdate()],\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        if approver_id:\n            filters[\"approver\"] = approver_id\n        else:\n            filters[\"approver\"] = get_approvers(employee)\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\"]]\n\n    workflow = frappe.get_doc(\"Workflow\", \"Leave Approval\")\n    if workflow.workflow_state_field:\n        filters[workflow.workflow_state_field] = get_allowed_states_for_workflow(workflow, approver_id)\n    else:\n        filters[\"status\"] = \"Open\"\n\n    return filters\n\n", "CodeBleu_score": 35.02912050739362}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\"employee\": employee, \"docstatus\": 1}\n    if for_approval:\n        filters[\"approval_status\"] = \"Pending\"\n        filters[\"name\"] = [\"not in\", frappe.get_list(\"Leave Application\", filters={\"employee\": employee, \"docstatus\": 1, \"approval_status\": \"Approved\"}, pluck=\"name\")]\n    else:\n        filters[\"approval_status\"] = [\"not in\", [\"Approved\", \"Rejected\"]]\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    return filters\n\n", "CodeBleu_score": 33.89329567310102}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = datetime.date.today()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail[\"allocated\"],\n            \"balance\": leave_detail[\"balance\"],\n        }\n    return leave_balance_map\n\n\n\n", "CodeBleu_score": 41.85524376968037}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = date.today()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave in leave_details:\n        leave_type = leave.leave_type\n        allocated_leaves = leave.allocated_leaves\n        balance_leaves = leave.balance_leaves\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": allocated_leaves,\n            \"balance_leaves\": balance_leaves,\n        }\n    return leave_balance_map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.543060404020004}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = datetime.date.today()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": leave_details[\"allocated_leaves\"],\n            \"balance_leaves\": leave_details[\"balance_leaves\"],\n        }\n    return leave_balance_map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 42.19370041832978}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n\n    query = \"\"\"\n        SELECT\n            holiday_date,\n            holiday_description\n        FROM\n            holidays\n        WHERE\n            holiday_list = %s\n            AND holiday_type != 'weekly_off'\n        ORDER BY\n            holiday_date\n    \"\"\"\n    holidays = db.execute(query, (holiday_list,))\n\n    for holiday in holidays:\n        holiday[\"holiday_description\"] = strip_html(holiday[\"holiday_description\"])\n\n    return holidays\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 30.814043259443448}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = Holiday.objects.filter(holiday_list=holiday_list).exclude(type=\"Weekly off\").order_by('date')\n    for holiday in holidays:\n        holiday.description = strip_tags(holiday.description)\n    return holidays\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 28.76427311242511}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = Holiday.query.filter(\n        Holiday.holiday_list_id == holiday_list.id, Holiday.description != 'Weekly Off'\n    ).order_by(Holiday.date).all()\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n    return holidays\n\n\n\n\n", "CodeBleu_score": 31.81119656662184}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.378922231120049}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_reminders_in_advance(\"Weekly\")\n\n", "CodeBleu_score": 5.212575339468076}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.378922231120049}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n\n    self_ratings = self.self_ratings.all()\n    total_score = 0\n\n    for rating in self_ratings:\n        score = rating.rating * 5 * rating.percentage_weightage\n        total_score += score\n\n    self.self_appraisal_score = round(total_score, 2)\n    self.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 23.591397371643602}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_ratings = self.self_ratings\n    self_appraisal_score = 0\n    for self_rating in self_ratings:\n        self_appraisal_score += (self_rating.rating * 5) * (self_rating.percentage / 100)\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n    self.save()\n\n\n\n\n", "CodeBleu_score": 23.913728518047467}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for self_rating in self.self_ratings:\n        total_score += self_rating.rating * self_rating.percentage_weightage\n    self.self_appraisal_score = round(total_score, 2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 24.22694140035042}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.calculate_final_score_based_on_formula:\n        # Gather necessary data\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        # Sanitize the formula\n        formula = sanitize_expression(appraisal_cycle_doc.formula)\n\n        # Evaluate the formula\n        try:\n            final_score = eval(formula, {}, locals())\n        except Exception as e:\n            frappe.throw(f\"Error in formula: {e}\")\n\n        # Set the final score with the appropriate precision\n        self.final_score = round(final_score, appraisal_cycle_doc.final_score_precision)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n        # Set the final score with the appropriate precision\n        self.final_score = round(final_score, appraisal_cycle_doc.final_score_precision)", "CodeBleu_score": 35.57547176219923}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.calculate_final_score_with_formula:\n        # Gather necessary data\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        # Sanitize the formula\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate the formula\n        final_score = eval(formula, {}, locals())\n\n        # Set the final score with appropriate precision\n        self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n        # Set the final score with appropriate precision\n        self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n\n    # Save the changes\n    self.save()", "CodeBleu_score": 33.84075994482264}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_using_formula:\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        formula = appraisal_cycle.final_score_formula\n        formula = sanitize_expression(formula)\n        formula = formula.replace(\"total_score\", str(total_score))\n        formula = formula.replace(\"average_feedback_score\", str(average_feedback_score))\n        formula = formula.replace(\"self_appraisal_score\", str(self_appraisal_score))\n        try:\n            final_score = eval(formula)\n        except Exception as e:\n            frappe.throw(f\"Error in evaluating formula: {e}\")\n        self.final_score = final_score\n    else:\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n        self.final_score = round(final_score, 2)\n\n    self.final_score_precision = frappe.db.get_single_value(\"HRMGR Settings\", \"final_score_precision\")", "CodeBleu_score": 34.960417020534486}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > date.today():\n        if self.status != \"On Leave\":\n            frappe.throw(\n                \"Attendance cannot be marked for future dates unless the status is 'On Leave'\")\n        else:\n            leave_application = frappe.db.exists(\n                \"Leave Application\",\n                {\n                    \"employee\": self.employee,\n                    \"from_date\": [\"<=\", self.attendance_date],\n                    \"to_date\": [\">=\", self.attendance_date],\n                    \"docstatus\": 1,\n                    \"status\": [\"in\", [\"Approved\", \"Open\"]],\n                },\n            )\n            if not leave_application:\n                frappe.throw(\n                    \"Attendance cannot be marked for future dates unless there is a leave application\")\n    if self.attendance_date < self.employee_joining_date:\n        frappe.throw(\n            \"Attendance cannot be marked for dates earlier than the employee's date of joining\")\n\n\n\n\n", "CodeBleu_score": 34.48902761448043}, {"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date > date.today():\n        if self.status != \"On Leave\":\n            frappe.throw(\n                \"Attendance can only be marked for today or earlier.\")\n        else:\n            leave_application = frappe.db.exists(\n                \"Leave Application\",\n                {\n                    \"employee\": self.employee,\n                    \"from_date\": (\"<=\", self.attendance_date),\n                    \"to_date\": (\">=\", self.attendance_date),\n                    \"docstatus\": 1,\n                },\n            )\n            if not leave_application:\n                frappe.throw(\n                    \"Attendance can only be marked for today or earlier for On Leave employees.\")\n\n    if self.attendance_date < self.date_of_joining:\n        frappe.throw(\n            \"Attendance date cannot be earlier than employee's date of joining.\")\n\n", "CodeBleu_score": 34.45918314463834}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(self.now):\n        frappe.throw(\n            _(\"Attendance date can not be of future date.\"),\n            AttendanceInFuture,\n        )\n\n    if (\n        self.status == \"On Leave\"\n        and not self.leave_application\n        and self.attendance_date > self.joining_date\n    ):\n        frappe.throw(\n            _(\"Attendance date can not be of future date.\"),\n            AttendanceInFuture,\n        )\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 28.8830440350742}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n\n    # Check if a duplicate attendance record exists\n    duplicate = self.get_duplicate_attendance_record()\n\n    # If a duplicate record is found, raise an exception\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record for {0} already exists for {1}. Please edit the existing record or create a new one.\"\n            ).format(\n                frappe.bold(frappe.utils.get_link_to_form(\"Employee\", self.employee)),\n                frappe.bold(frappe.utils.format_date(self.attendance_date)),\n            ),\n            title=_(\"Duplicate Record\"),\n        )", "CodeBleu_score": 41.16248290352259}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            _(\n                \"Attendance record {0} already exists for Employee {1} on {2}. <br>Please edit the existing record instead.\"\n            ).format(\n                frappe.bold(frappe.utils.get_link_to_form(\"Attendance\", duplicate_record)),\n                frappe.bold(self.employee),\n                frappe.bold(frappe.utils.format_date(self.attendance_date)),\n            ),\n            title=_(\"Duplicate Record\"),\n        )\n\n", "CodeBleu_score": 37.29423602236531}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        attendance_link = frappe.utils.get_link_to_form(\"Attendance\", duplicate)\n        frappe.throw(\n            _(\n                \"Attendance record {0} already exists for Employee {1} on {2}. {3}\"\n            ).format(\n                attendance_link,\n                frappe.bold(self.employee),\n                frappe.bold(frappe.utils.format_date(self.attendance_date)),\n                frappe.bold(_(\"Please remove the existing record before creating a new one.\")),\n            )\n        )\n\n", "CodeBleu_score": 42.79815410671017}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = self.get_message_details()\n\n    # Get email addresses of users in the specified group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # Send email with summary\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details.get(\"title\"),\n        template=\"daily_work_summary\",\n        args=message_details,\n        now=True,\n    )\n\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 46.538323251395305}, {"code": "def send_summary(self)\n\t\n\n    # Get message details\n    message_details = self.get_message_details()\n\n    # Get email addresses of users in the specified group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # Send email with the summary\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details.get(\"title\"),\n        template=\"daily_work_summary\",\n        args=message_details,\n        now=True,\n    )\n\n    # Update status to \"Sent\"\n    self.status = \"Sent\"\n    self.save(ignore_permissions=True)\n\n", "CodeBleu_score": 44.829553003499925}, {"code": "def send_summary(self)\n\t\n    # Get message details\n    message_details = self.get_message_details()\n\n    # Get email addresses of users in the specified group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # Send email with the summary\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details.get(\"title\"),\n        template=\"daily_work_summary\",\n        args=message_details,\n        now=True,\n    )\n\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 46.538323251395305}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.env['hr.applicant'].search([('id', 'not in', [self.applicant_id.id]), ('job_id', '=', self.job_id.id), ('stage_id.sequence', '<=', self.stage_id.sequence), ('state', 'not in', ['cancel', 'refuse'])], limit=1):\n        raise ValidationError(_('Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record and the job applicant\\'s information.'))", "CodeBleu_score": 26.119342932284656}, {"code": "def validate_duplicate_interview(self)\n\t\n\n    # Check if the interview round already exists for the same job applicant\n    existing_interview = self.env['hr.applicant'].search([\n        ('job_id', '=', self.job_id.id),\n        ('partner_name', '=', self.partner_name.id),\n        ('stage_id.name', '=', 'Interview'),\n        ('interview_round', '=', self.interview_round)\n    ])\n\n    # If a duplicate is found, raise an exception with a message indicating that job applicants are not allowed to appear twice for the same interview round\n    if existing_interview:\n        raise ValidationError(_('Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record: %s.') % existing_interview.name)", "CodeBleu_score": 32.05787504762199}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.env['hr.applicant'].search([('partner_id', '=', self.partner_id.id), ('job_id', '=', self.job_id.id), ('stage_id.sequence', '=', self.stage_id.sequence)]):\n        raise ValidationError(_('Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record for this job applicant or create a new interview round for this job applicant.'))", "CodeBleu_score": 28.301083344298732}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessment_set.all():\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n    self.save()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 26.20554477209286}, {"code": "def calculate_average_rating(self)\n\t\n    total = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count > 0:\n        self.average_rating = total / count\n    else:\n        self.average_rating = 0\n\n\n\n\n", "CodeBleu_score": 24.825576851027407}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n\n", "CodeBleu_score": 25.20619845585856}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview_doc = frappe.new_doc(\"Interview\")\n    interview_doc.interview_round = doc.get(\"interview_round\")\n    interview_doc.designation = doc.get(\"designation\")\n    interview_doc.interviewers = doc.get(\"interviewers\")\n    interview_doc.save()\n    return interview_doc\n\n\n\n\n", "CodeBleu_score": 31.373324703646034}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    if doc.get(\"interviewers\"):\n        interview.append(\"interview_details\", {\n            \"interviewer\": doc.get(\"interviewers\")\n        })\n    interview.insert()\n    return interview\n\n\n\n\n\n", "CodeBleu_score": 38.16369435596984}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        interview.append(\"interview_details\", {\"interviewer\": doc.interviewers})\n    return interview\n\n\n\n", "CodeBleu_score": 43.11338885319248}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    # Get the company name from the document\n    company = self.company\n\n    # Get the designation from the document\n    designation = self.designation\n\n    # Create a dictionary to store the filters for the query\n    filters = {\"company\": company, \"designation\": designation, \"docstatus\": 1}\n\n    # If the from_date is provided, add it to the filters\n    if from_date:\n        filters[\"creation\"] = [\">=\", from_date]\n\n    # If the to_date is provided, add it to the filters\n    if to_date:\n        filters[\"creation\"] = [\"<=\", to_date]\n\n    # If both from_date and to_date are provided, add a range filter\n    if from_date and to_date:\n        filters[\"creation\"] = [\"between\", [from_date, to_date]]\n\n    # Get a list of job offers matching the filters\n    job_offers = frappe.get_list(\"Job Offer\", filters=filters, fields=[\"name\"])\n\n    # Return a list of job offer names\n    return [offer.name for offer in job_offers]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 47.041213228631364}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\n        \"\"\"\n            SELECT name\n            FROM `tabJob Offer`\n            WHERE designation = %s\n            AND company = %s\n            AND docstatus = 1\n            AND posting_date BETWEEN %s AND %s\n        \"\"\",\n        (self.designation, self.company, from_date, to_date),\n        as_dict=1,\n    )\n\n    return [offer.name for offer in job_offers]\n\n\n\n", "CodeBleu_score": 35.19964128920408}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    job_offer_list = frappe.db.sql(\n        \"\"\" SELECT name FROM `tabJob Offer` WHERE company = %s AND designation = %s AND docstatus = 1 AND creation BETWEEN %s AND %s\"\"\",\n        (self.company, self.designation, from_date, to_date),\n        as_dict=True,\n    )\n    for offer in job_offer_list:\n        job_offers.append(offer.name)\n    return job_offers\n\n\n", "CodeBleu_score": 35.79418704094943}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", filters={**filters, \"offer_status\": \"Accepted\"}\n    )\n    acceptance_rate = (\n        accepted_job_offers / total_job_offers * 100 if total_job_offers > 0 else 0\n    )\n    return acceptance_rate, \"Percent\"", "CodeBleu_score": 54.49619431413984}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\n        \"Job Offer\", filters={**filters, \"offer_status\": \"Accepted\"}\n    )\n\n    acceptance_rate = accepted_offers / total_offers * 100 if total_offers else 0\n\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 59.0134693523497}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\"docstatus\": 1, \"company\": company, \"department\": department},\n    )\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"company\": company,\n            \"department\": department,\n            \"status\": \"Accepted\",\n        },\n    )\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100 if total_job_offers else 0\n    return acceptance_rate, \"Percent\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 33.10649000177934}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess())\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 89.47653384283774}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess())\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 89.47653384283774}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Result result = BusinessRules.run(\n\t\t\t\tcheckIfPasswordMatches(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword())\n\t\t);\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfinal CompanyStaff companyStaff = this.companyStaffDao.getById(companyStaffForUpdateDto.getId());\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 46.66972943242102}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (!result.isSuccess())\n\t\t\treturn result;\n\n\t\tfinal CompanyStaff companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\t\tif (companyStaff == null)\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 49.85695951667826}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Result businessRules = BusinessRules.run(\n\t\t\t\tarePasswordsMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword())\n\t\t\t\t);\n\t\tif (!businessRules.isSuccess()) {\n\t\t\treturn businessRules;\n\t\t}\n\t\tfinal CompanyStaff companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId()).orElseThrow();\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 47.94374081756977}]}
