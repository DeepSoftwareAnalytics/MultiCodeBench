{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        raise MissingError(_('No attachment IDs provided.'))\n    attachment_ids = [int(x) for x in attachment_ids]\n\n    # Verify read access rights and rules for the attachments\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    if not attachments:\n        raise MissingError(_('No attachments found with the provided IDs.'))\n    if not attachments.filtered(lambda a: self.env.user.has_group('base.group_user')):\n        raise AccessError(_('You do not have access to these attachments.'))\n    if not attachments.filtered(lambda a: a.check_access_rights('read')):\n        raise AccessError(_('You do not have access to these attachments.'))\n    if not attachments.filtered(lambda a: a.check_access_rule('read')):\n        raise AccessError(_('You do not have access to these attachments.'))\n\n    # Build a zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zip_archive:\n        for attachment in attachments:\n            zip_archive.writestr(attachment.name, attachment.datas)\n\n    # Prepare HTTP headers for the zip file\n    zip_file.seek(0)\n    headers = _get_zip_headers(zip_file.read(), 'attachments.zip')\n\n    # Return the zip file as an HTTP response\n    return request.make_response(zip_file.read(), headers=headers)\n", "CodeBleu_score": 37.8040832279624}, {"code": "def export_zip_documents(self, **args)\n\t\n    # Retreive attachment IDs\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.make_response(\n            _('No attachments to export'),\n            status=400,\n        )\n    attachment_ids = [int(id) for id in attachment_ids.split(',')]\n    # Verify access rights\n    attachment_obj = self.env['ir.attachment']\n    if not attachment_obj.check_access_rights('read', raise_exception=True):\n        return request.make_response(\n            _('Insufficient permissions to download attachments'),\n            status=403,\n        )\n    # Check read access rights\n    if not attachment_obj.check_access_rule('read', attachment_ids, raise_exception=True):\n        return request.make_response(\n            _('Insufficient permissions to download attachments'),\n            status=403,\n        )\n    # Retrieve attachments\n    attachments = attachment_obj.browse(attachment_ids)\n    # Build zip file\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zip_archive:\n        for attachment in attachments:\n            zip_archive.writestr(attachment.name, attachment.datas)\n    zip_file.seek(0)\n    # Prepare HTTP headers\n    filename = 'attachments.zip'\n    headers = _get_zip_headers(zip_file.read(), filename)\n    # Return zip file as HTTP response\n    return request.make_response(\n        zip_file.read(),\n        headers=headers,\n    )\n", "CodeBleu_score": 34.193603111580316}, {"code": "def export_zip_documents(self, **args)\n\t\n    if not self.env.user.has_group('base.group_system'):\n        raise AccessError()\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        raise MissingError()\n    attachment_ids = [int(x) for x in attachment_ids]\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    if not attachments:\n        raise MissingError()\n    if not attachments.filtered(lambda a: a.check_access_rights('read')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.startswith('application/zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.endswith('zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.startswith('application/x-')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.endswith('zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.startswith('application/zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.endswith('zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.startswith('application/x-')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.endswith('zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.startswith('application/zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.endswith('zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.startswith('application/x-')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.endswith('zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.startswith('application/zip')):\n        raise AccessError()\n    if not attachments.filtered(lambda a: a.mimetype_encode.", "CodeBleu_score": 32.46268315648613}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    return request.render(self._template, values)\n", "CodeBleu_score": 18.941978690198084}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    request.session.history = request.session.history[-10:] + [values['invoices'].ids]\n    return request.render(\"account.portal_my_invoices\", values)\n", "CodeBleu_score": 33.76740256804601}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    return request.render(\"website_sale.portal_my_invoices\", values)\n", "CodeBleu_score": 23.422998550027412}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.access_invoice(access_token):\n        return request.redirect('/web/login')\n    if report_type == 'pdf':\n        return request.env['account.move'].sudo().with_context(lang=invoice.partner_id.lang).browse(int(invoice_id)).with_context(\n            access_token=access_token)._get_report_pdf(download)\n    if report_type == 'text':\n        return request.env['account.move'].sudo().with_context(lang=invoice.partner_id.lang).browse(int(invoice_id)).with_context(\n            access_token=access_token)._get_report_text(download)\n    if report_type == 'html':\n        return request.env['account.move'].sudo().with_context(lang=invoice.partner_id.lang).browse(int(invoice_id)).with_context(\n            access_token=access_token)._get_report_html(download)\n    return request.render('account.invoice_page_template', self._invoice_get_page_view_values(invoice, access_token, **kw))\n", "CodeBleu_score": 29.928448473228308}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = request.env['account.move'].browse(int(invoice_id))\n    if not invoice.access_invoice_details(access_token):\n        return request.redirect('/my/invoices')\n    if report_type == 'pdf' and invoice.state!= 'posted':\n        return request.redirect('/my/invoices')\n    if report_type == 'pdf' and not invoice.has_legal_documents():\n        return request.redirect('/my/invoices')\n    if report_type == 'pdf' and invoice.state == 'posted':\n        return self._invoice_get_page_view_values(invoice, access_token, **kw)\n    if report_type == 'html':\n        return self._invoice_get_page_view_values(invoice, access_token, **kw)\n    if report_type == 'text':\n        return self._invoice_get_page_view_values(invoice, access_token, **kw)\n    return request.render('account.invoice_page', self._invoice_get_page_view_values(invoice, access_token, **kw))\n\n", "CodeBleu_score": 28.504669620893523}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = request.env['account.move'].browse(int(invoice_id))\n    if not invoice.access_invoice_document(access_token):\n        return request.redirect('/my/invoices')\n    if download:\n        return self._invoice_get_page_view_values(invoice, access_token, report_type=report_type)\n    return request.render('my_invoices_history.invoice_page', self._invoice_get_page_view_values(invoice, access_token))\n\n", "CodeBleu_score": 15.362059483897028}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n    if company:\n        company = self.env['res.company'].browse(company)\n    else:\n        company = self.env.user.company_id\n    # Get all the product templates for the company\n    product_templates = self.env['product.template'].search([('company_id', '=', company.id)])\n    # Update the sale taxes\n    for product_template in product_templates:\n        if company.account_sale_tax_id:\n            product_template.taxes_id = [(4, company.account_sale_tax_id.id)]\n        else:\n            product_template.taxes_id = [(4, tax.id) for tax in product_template.taxes_id]\n    # Update the purchase taxes\n    for product_template in product_templates:\n        if company.account_purchase_tax_id:\n            product_template.supplier_taxes_id = [(4, company.account_purchase_tax_id.id)]\n        else:\n            product_template.supplier_taxes_id = [(4, tax.id) for tax in product_template.supplier_taxes_id]\n\n", "CodeBleu_score": 39.779675089624575}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.user.company_id\n    product_obj = self.env['product.template']\n    product_ids = product_obj.search([('company_id', '=', company.id)])\n    product_ids.write({'sale_tax_id': company.account_sale_tax_id.id, 'purchase_tax_id': company.account_purchase_tax_id.id})\n    return product_ids\n\n", "CodeBleu_score": 23.062618457036077}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        tax_ids = self.env['account.tax'].search([('company_id', '=', company.id)])\n        if tax_ids:\n            for product in self:\n                product.taxes_id = tax_ids\n    return self\n\n", "CodeBleu_score": 15.83430080846639}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not account_type:\n        return False\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.name', '=', account_type)], limit=1)\n    return account\n\n", "CodeBleu_score": 37.628728070340856}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id)\n    if not account_id:\n        account_id = self.env['account.account'].search([('company_id', '=', company.id), ('type', '=', account_type)], limit=1).id\n    return account_id\n\n", "CodeBleu_score": 33.354824271565505}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not company:\n        return False\n    account_id = self.env['ir.model.data'].xmlid_to_res_id(xml_id, raise_if_not_found=False)\n    if account_id:\n        return self.env['account.account'].search([('id', '=', account_id), ('company_id', '=', company.id)])\n    account_id = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if account_id:\n        return account_id\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 44.33520681493045}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    company_account_type_current_year_earning = self.env['account.account'].search([('company_id', '=', self.company_id.id), ('type', '=', 'other'), ('code', 'like', '3000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "CodeBleu_score": 12.37202243704541}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company, accounts in self.env['account.account'].read_group([('company_id', 'in', self.env.user.company_ids.ids), ('user_type_id.name', '=', 'Current Year Earnings')], ['company_id'], ['company_id']):\n        if len(accounts) > 1:\n            raise ValidationError(_('There can be only one account of type Current Year Earnings for each company.'))\n\n", "CodeBleu_score": 21.417165925318763}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for account_type in AccountType.objects.filter(name=\"Current Year Earnings\"):\n        if Account.objects.filter(account_type=account_type).count() > 1:\n            raise ValidationError(\"There can only be one account of type 'Current Year Earnings' for each company.\")\n\n", "CodeBleu_score": 17.545688891324268}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name:\n        if operator in ['=', 'ilike', 'like', 'not like']:\n            name = name.strip()\n            if operator in ['=', 'ilike']:\n                name = name.lower()\n            if operator == 'ilike':\n                name = name + '%'\n            if operator == 'not like':\n                name = '%' + name\n            domain = [('name', operator, name)]\n        elif operator == 'in':\n            domain = [('name', 'in', name)]\n        else:\n            domain = []\n    if not domain:\n        domain = []\n    if self._context.get('partner_id'):\n        domain += [('partner_id', '=', self._context['partner_id'])]\n    if self._context.get('partner_ids'):\n        domain += [('partner_id', 'in', self._context['partner_ids'])]\n    if self._context.get('partner_type'):\n        domain += [('partner_type', '=', self._context['partner_type'])]\n    if self._context.get('partner_parent_id'):\n        domain += [('parent_id', '=', self._context['partner_parent_id'])]\n    if self._context.get('partner_ref'):\n        domain += [('ref', '=', self._context['partner_ref'])]\n    if self._context.get('state'):\n        domain += [('state', '=', self._context['state'])]\n    if self._context.get('country_id'):\n        domain += [('country_id', '=', self._context['country_id'])]\n    if self._context.get('lang'):\n        domain += [('lang', '=', self._context['lang'])]\n    if self._context.get('zip'):\n        domain += [('zip', '=', self._context['zip'])]\n    if self._context.get('city'):\n        domain += [('city', 'ilike', self._context['city'])]\n    if self._context.get('street'):\n        domain += [('street', 'ilike', self._context['street'])]\n    if self._context.get('email'):\n        domain += [('email', 'ilike', self._context['email'])]\n    if self._context.get('phone'):\n        domain += [('phone', 'ilike', self._context['phone'])]\n    if self._context.get('mobile'):\n        domain += [('mobile', 'ilike', self._context['mobile'])]\n    if self._", "CodeBleu_score": 39.04052322770762}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('search_default_partner_id'):\n            domain = [('partner_id', '=', self._context['search_default_partner_id'])]\n        else:\n            domain = []\n    else:\n        if operator == 'ilike':\n            name = name + '%'\n        domain = [('name', operator, name)]\n    if domain:\n        if limit:\n            domain += [('id', 'in', self.search(domain, order=order, limit=limit))]\n        else:\n            domain += [('id', 'in', self.search(domain, order=order))]\n    return domain\n\n", "CodeBleu_score": 39.20855511895853}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self.env.context.get('search_default_partner_id'):\n            name = self.env.context['search_default_partner_id']\n        else:\n            return super(AccountInvoice, self)._name_search(name, domain, operator, limit, order)\n    if operator == 'ilike':\n        operator = 'like'\n    if operator == 'like':\n        name = name + '%'\n    if operator == 'like_and':\n        name = name + '%%%25'\n    if operator == 'not_like':\n        name = '%' + name\n    if operator == 'not_like_and':\n        name = '%' + name + '%%%25'\n    if operator == 'like_and':\n        name = name + '%%%25'\n    if operator == 'not_ilike':\n        name = '%' + name\n    if operator == 'not_ilike_and':\n        name = '%' + name + '%%%25'\n    if operator == 'ilike_and':\n        name = name + '%%%25'\n    if operator == 'not_like_and':\n        name = '%' + name + '%%%25'\n    if operator == 'not_ilike_and':\n        name = '%' + name + '%%%25'\n    if operator == 'not_ilike':\n        name = '%' + name\n    if operator == 'ilike_and':\n        name = name + '%%%25'\n    if operator == 'not_ilike_and':\n        name = '%' + name + '%%%25'\n    if operator == 'ilike_and':\n        name = name + '%%%25'\n    if operator == 'not_ilike_and':\n        name = '%' + name + '%%%25'\n    if operator == 'ilike_and':\n        name = name + '%%%25'\n    if operator == 'not_ilike_and':\n        name = '%' + name + '%%%25'\n    if operator == 'ilike_and':\n        name = name + '%%%25'\n    if operator == 'not_ilike_and':\n        name = '%' + name + '%%%25'\n    if operator == 'ilike_and':\n        name = name + '%%%25'\n    if operator == 'not_ilike_and':\n        name = '%' + name + '%%%25'", "CodeBleu_score": 23.853773427858638}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n   return self.env.cache.get_all(self, self._fields['name'], lang=lang)\n\n    def _get_stored_translations(self, record):\n        \"\"\"Return the stored translations for this record, indexed by language code.\"\"\"\n        return self.env.cache.get_all(record, self._fields['name'])\n\n    def _set_stored_translations(self, record, translations, dirty=False):\n        \"\"\"Set the stored translations for this record.\"\"\"\n        self.env.cache.update_raw(record, self._fields['name'], translations, dirty=dirty)\n\n    def _translate(self, record, lang, default=None):\n        \"\"\"Return the translation for the given language, or the default translation if none is available.\"\"\"\n        return self.env.cache.get(record, self._fields['name'], lang=lang, default=default)\n\n    def _translate_value(self, record, value, lang, default=None):\n        \"\"\"Return the translation for the given language, or the default translation if none is available.\"\"\"\n        return self.env.cache.get(record, self._fields['name'], value=value, lang=lang, default=default)\n\n    def _translate_value_or_id(self, record, value, lang, default=None):\n        \"\"\"Return the translation for the given language, or the default translation if none is available.\"\"\"\n        return self.env.cache.get(record, self._fields['name'], value=value, lang=lang, default=default)\n\n    def _translate_or_id(self, record, value, lang, default=None):\n        \"\"\"Return the translation for the given language, or the default translation if none is available.\"\"\"\n        return self.env.cache.get(record, self._fields['name'], value=value, lang=lang, default=default)\n\n    def _translate_or_id_or_", "CodeBleu_score": 62.23137475673002}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    if self.env.context.get('active_model') =='sale.order':\n        self.ensure_one()\n        domain = [('sale_order_id', '=', self.id)]\n        if self.env.context.get('active_id'):\n            domain.append(('analytic_account_id', '=', self.env.context.get('active_id')))\n        return {\n            'name': _('Customer Invoice'),\n            'domain': domain,\n           'res_model': 'account.move',\n            'type': 'ir.actions.act_window',\n            'view_id': False,\n            'view_mode': 'tree,form',\n            'view_type': 'form',\n            'help': _('''<p class=\"oe_view_nocontent_create\">Click to create a new Customer Invoice.</p>'''),\n            'limit': 80,\n            'context': \"{'type':'out_invoice','journal_type':'sale','default_type':'out_invoice','default_sale_order_id':%d}\" % self.id,\n        }\n\n", "CodeBleu_score": 32.35705764379448}, {"code": "def action_view_invoice(self)\n\t\n    context = self.env.context.copy()\n    if self.env.context.get('active_model') =='sale.order':\n        context['search_default_partner_id'] = self.partner_id.id\n        context['search_default_sale_type'] = 'out_invoice'\n        context['search_default_invoice_type'] = 'out_invoice'\n        context['search_default_date_from'] = self.date_order\n        context['search_default_date_to'] = self.date_order\n        context['search_default_state'] = 'posted'\n        context['search_default_partner_type'] = 'customer'\n        context['search_default_type'] = 'out_invoice'\n        context['search_default_partner_id'] = self.partner_id.id\n        context['search_default_partner_ids'] = [(6, 0, [self.partner_id.id])]\n        context['search_default_analytic_account_id'] = self.analytic_account_id.id\n        context['search_default_analytic_account_ids'] = [(6, 0, [self.analytic_account_id.id])]\n        context['search_default_sale_type'] = 'out_invoice'\n        context['search_default_invoice_type'] = 'out_invoice'\n        context['search_default_date_from'] = self.date_order\n        context['search_default_date_to'] = self.date_order\n        context['search_default_state'] = 'posted'\n        context['search_default_partner_type'] = 'customer'\n        context['search_default_type'] = 'out_invoice'\n        context['search_default_partner_id'] = self.partner_id.id\n        context['search_default_partner_ids'] = [(6, 0, [self.partner_id.id])]\n        context['search_default_analytic_account_id'] = self.analytic_account_id.id\n        context['search_default_analytic_account_ids'] = [(6, 0, [self.analytic_account_id.id])]\n        context['search_default_sale_type'] = 'out_invoice'\n        context['search_default_invoice_type'] = 'out_", "CodeBleu_score": 22.03881864378823}, {"code": "def action_view_invoice(self)\n\t\n    context = self.env.context.copy()\n    active_ids = self.env.context.get('active_ids', [])\n    active_model = self.env.context.get('active_model', False)\n    active_id = self.env.context.get('active_id', False)\n    if active_model == 'account.invoice' and active_id:\n        context['search_default_partner_id'] = active_id\n        context['search_default_type'] = 'out_invoice'\n        context['search_default_state'] = 'open'\n        context['search_default_type'] = 'out_invoice'\n        context['search_default_date_from'] = fields.Date.today()\n        context['search_default_date_to'] = fields.Date.today()\n        context['search_default_date_invoice'] = fields.Date.today()\n        context['search_default_date_due'] = fields.Date.today()\n        context['search_default_date_document'] = fields.Date.today()\n        context['search_default_date_payment'] = fields.Date.today()\n        context['search_default_date_open'] = fields.Date.today()\n        context['search_default_date_close'] = fields.Date.today()\n        context['search_default_date_cancel'] = fields.Date.today()\n        context['search_default_date_paid'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_date'] = fields.Date.today()\n        context['search_default_date_due_", "CodeBleu_score": 19.094041209130587}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', self.mapped('move_ids').ids)]\n    action['context'] = {'type': 'in_invoice'}\n    return action\n\n", "CodeBleu_score": 18.22725111609456}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('purchase.purchase_vendor_bill_action').read()[0]\n    action['context'] = {\n       'search_default_vendor_bill': 1,\n       'search_default_vendor_bill_type': 'in_invoice',\n       'search_default_purchase_type': 'purchase',\n       'search_default_purchase_type_id': self.id,\n       'search_default_purchase_type_id_in_invoice': self.id,\n       'search_default_purchase_type_id_in_invoice_type': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type_in_invoice': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type_in_invoice_type': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice_type': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice_type': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice': 'in_invoice',\n       'search_default_purchase_type_id_in_invoice_type_in_invoice_type_in_invoice_type_in_invoice", "CodeBleu_score": 16.668160692802015}, {"code": "def action_view_vendor_bill(self)\n\t\n    record_id = self.env.context.get('active_id')\n    if record_id:\n        action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n        action['domain'] = [('purchase_id.id', '=', record_id)]\n        action['context'] = {'type': 'in_invoice', 'default_purchase_id': record_id}\n    return action\n", "CodeBleu_score": 22.794558867156585}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.03869238361304}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.user.company_id.skip_bank_account_creation:\n        return self.env['res.partner.bank'].search([('partner_id', '=', self.partner_id.id), ('company_id', '=', self.env.user.company_id.id)], limit=1)\n    else:\n        return self.env['res.partner.bank'].search([('partner_id', '=', self.partner_id.id), ('company_id', '=', self.env.user.company_id.id), ('acc_number', '=', self.acc_number)], limit=1)\n\n", "CodeBleu_score": 23.81261509147496}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.skip_bank_account_creation:\n        return self.env['res.partner.bank'].search([('partner_id', '=', self.partner_id.id)])\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.partner_id.id), ('acc_number', '=', self.account_number)])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'partner_id': self.partner_id.id,\n            'acc_number': self.account_number,\n            'acc_holder_name': self.account_holder_name,\n            'bank_name': self.bank_name,\n            'bank_bic': self.bank_bic,\n            'bank_branch': self.bank_branch,\n            'bank_street': self.bank_street,\n            'bank_street2': self.bank_street2,\n            'bank_city': self.bank_city,\n            'bank_state': self.bank_state,\n            'bank_zip': self.bank_zip,\n            'bank_country_id': self.bank_country_id.id,\n            'bank_swift_code': self.bank_swift_code,\n            'bank_acc_type': self.bank_acc_type,\n            'bank_acc_type_iban': self.bank_acc_type_iban,\n            'bank_acc_type_bic': self.bank_acc_type_bic,\n            'bank_acc_type_iban_bban': self.bank_acc_type_iban_bban,\n            'bank_acc_type_iban_iban': self.bank_acc_type_iban_iban,\n            'bank_acc_type_iban_iban_bban': self.bank_acc_type_iban_iban_bban,\n            'bank_acc_type_iban_iban_bic': self.bank_acc_type_iban_iban_bic,\n            'bank_acc_type_iban_iban_bic_bban': self.bank_acc_type_iban_iban_bic_bban,\n            'bank_acc_type_iban_iban", "CodeBleu_score": 36.9509839280179}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    account_number = self.bank_account_number\n    partner = self.partner_id\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', account_number), ('partner_id', '=', partner.id)])\n    if bank_account:\n        return bank_account\n    return self.env['res.partner.bank'].create({'acc_number': account_number, 'partner_id': partner.id})\n\n", "CodeBleu_score": 36.83541286171345}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if currency == self.company_currency_id:\n        return {\n            'transaction_amount': balance,\n            'transaction_currency': self.company_currency_id,\n            'journal_amount': balance,\n            'journal_currency': self.company_currency_id,\n            'company_amount': balance,\n            'company_currency': self.company_currency_id,\n        }\n    # We use the standard currency rates to compute the amounts in the company currency.\n    # The standard currency rates are computed using the current company currency as the base currency.\n    # This means that we need to convert the amounts in the company currency to the standard currency before computing the exchange rate.\n    # We then use the standard currency rates to convert the amounts in the standard currency to the company currency.\n    # This ensures that the resulting amounts are in the company currency, regardless of the currency of the transaction.\n    # We use the standard currency rates to convert the amounts in the standard currency to the company currency.\n    # This ensures that the resulting amounts are in the company currency, regardless of the currency of the transaction.\n    company_amount = currency._convert(balance, self.company_currency_id, self.company_id, self.date)\n    company_currency = self.company_currency_id\n    if self.foreign_currency_id:\n        # We use the standard currency rates to convert the amounts in the foreign currency to the standard currency.\n        # This ensures that the resulting amounts are in the standard currency, regardless of the currency of the transaction.\n        standard_amount = currency._convert(amount_currency, self.foreign_currency_id, self.company_id, self.date)\n        standard_currency = self.foreign_currency_id\n        # We use the standard currency rates to convert the amounts in the standard currency to the company currency.\n        # This ensures that the resulting amounts are in the company currency, regardless of the currency of the transaction.\n        company_amount = currency._convert(standard_amount, standard_currency, self.company_id, self.date)\n        company_currency = self.company_currency_id\n    return {\n        'transaction_amount': balance,\n        'transaction_currency': self.company_currency_id,\n        'journal_amount': company_amount,\n        'journal_currency': company_currency,\n        'company_amount': company_amount,\n       ", "CodeBleu_score": 21.43044120180962}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if self.foreign_currency_id:\n        # Foreign currency statement line.\n        # The transaction amount is the balance amount in foreign currency.\n        transaction_amount = balance\n        transaction_currency = self.foreign_currency_id\n        # The journal amount is the amount in foreign currency.\n        journal_amount = amount_currency\n        journal_currency = self.foreign_currency_id\n        # The company amount is the balance amount in foreign currency.\n        company_amount = balance\n        company_currency = self.foreign_currency_id\n    else:\n        # Local currency statement line.\n        # The transaction amount is the amount in foreign currency.\n        transaction_amount = amount_currency\n        transaction_currency = currency\n        # The journal amount is the amount in foreign currency.\n        journal_amount = amount_currency\n        journal_currency = currency\n        # The company amount is the balance amount in foreign currency.\n        company_amount = balance\n        company_currency = currency\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': transaction_currency,\n        'journal_amount': journal_amount,\n        'journal_currency': journal_currency,\n        'company_amount': company_amount,\n        'company_currency': company_currency,\n    }\n\n", "CodeBleu_score": 18.804861452751318}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    if not self._context.get('check_move_validity'):\n        return {}\n    if not self.journal_id.currency_id:\n        raise UserError(_(\"You must define a default currency for the journal '%s'.\") % self.journal_id.name)\n    if not self.company_id:\n        raise UserError(_(\"You must define a company for the journal '%s'.\") % self.journal_id.name)\n    if self.company_id!= self.journal_id.company_id:\n        raise UserError(_(\"The company for the journal '%s' must be the same as the company for the statement line '%s'.\") % (self.journal_id.name, self.company_id.name))\n    if self.currency_id!= currency:\n        raise UserError(_(\"The currency for the journal '%s' must be the same as the currency for the statement line '%s'.\") % (self.journal_id.name, self.currency_id.name))\n    if self.journal_id.currency_id!= currency:\n        raise UserError(_(\"The currency for the journal '%s' must be the same as the currency for the statement line '%s'.\") % (self.journal_id.name, self.currency_id.name))\n    if self.currency_id!= currency:\n        raise UserError(_(\"The currency for the journal '%s' must be the same as the currency for the statement line '%s'.\") % (self.journal_id.name, self.currency_id.name))\n    if self.foreign_currency_id!= currency:\n        raise UserError(_(\"The currency for the journal '%s' must be the same as the currency for the statement line '%s'.\") % (self.journal_id.name, self.currency_id.name))\n    if self.currency_id!= currency:\n        raise UserError(_(\"The currency for the journal '%s' must be the same as the currency for the statement line '%s'.\") % (self.journal_id.name, self.currency_id.name))\n    if self.currency_id!= currency:\n        raise UserError(_(\"The currency for the journal '%s' must be the same as the currency for the statement line '%s'.\") % (self.journal_id.name, self.currency_id.name))\n    if self.currency_id!= currency:\n        raise User", "CodeBleu_score": 14.533021461536414}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            journal._default_outbound_payment_methods()\n            journal.outbound_payment_method_line_ids = self.env['account.payment.method.line'].search([('journal_id', '=', journal.id)])\n        else:\n            journal.outbound_payment_method_line_ids = False\n\n", "CodeBleu_score": 35.871649660995594}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ['bank', 'cash']:\n            for method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids.create({\n                    'journal_id': journal.id,\n                    'payment_method_id': method.id,\n                })\n\n", "CodeBleu_score": 34.82693197365837}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            for payment_method_line in journal.outbound_payment_method_line_ids:\n                payment_method_line.unlink()\n            default_outbound_payment_methods = journal._default_outbound_payment_methods()\n            for payment_method in default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids.create({\n                    'payment_method_id': payment_method.id,\n                    'journal_id': journal.id,\n                })\n        else:\n            for payment_method_line in journal.outbound_payment_method_line_ids:\n                payment_method_line.unlink()\n\n", "CodeBleu_score": 39.32351257941093}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t   for move in self:\n        if not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        else:\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            else:\n                move.date = move.invoice_date\n            if move.date!= fields.Date.context_today(move):\n                move.date = move.date\n                move._onchange_date()\n\n", "CodeBleu_score": 41.48264813974618}, {"code": "def _compute_date(self)\n\t   if self.invoice_date and not self.date:\n        self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n    elif not self.date:\n        self.date = fields.Date.context_today(self)\n    elif self.date!= self._get_accounting_date(self.invoice_date, self._affect_tax_report()):\n        self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n        self.env.cr.execute('UPDATE account_move SET date = %s WHERE id = %s', (self.date, self.id))\n        self.env.cr.commit()\n        self._onchange_date()\n        self.env.cr.execute('UPDATE account_move SET date = %s WHERE id = %s', (self.date, self.id))\n        self.env.cr.commit()", "CodeBleu_score": 33.13180078523472}, {"code": "def _compute_date(self)\n\t   if not self.invoice_date and not self.date:\n        self.date = fields.Date.context_today(self)\n    elif self.invoice_date and not self.date:\n        if not self.is_sale_document(include_receipts=True):\n            self.date = self._get_accounting_date(self.invoice_date, self._get_has_tax())\n        else:\n            self.date = self.invoice_date\n    if self.date!= fields.Date.context_today(self):\n        self.date = fields.Date.context_today(self)\n        self.env.cr.execute(\"\"\"UPDATE account_move SET date = %s WHERE id = %s\"\"\", (self.date, self.id))\n        self.env.cr.commit()\n        self.invalidate_cache()\n\n", "CodeBleu_score": 36.6773430974924}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id\n            elif move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.payment_term_id = False\n        elif move.is_purchase_document:\n            if move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id\n            else:\n                move.payment_term_id = False\n\n", "CodeBleu_score": 41.57065275216539}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document:\n            if move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.payment_term_id = False\n\n", "CodeBleu_score": 46.003799085905605}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id.id\n            elif move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        elif move.is_purchase_document:\n            if move.partner_id.property_supplier_payment_term_id:\n                move.payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n            elif move.partner_id.property_payment_term_id:\n                move.payment_term_id = move.partner_id.property_payment_term_id.id\n        else:\n            move.payment_term_id = False\n\n", "CodeBleu_score": 35.80058717602865}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_id = False\n        for tax_group in tax.company_id.tax_group_ids:\n            if tax.country_id == tax_group.country_id and tax.company_id == tax_group.company_id:\n                tax_group_id = tax_group.id\n                break\n        if not tax_group_id:\n            for tax_group in tax.company_id.tax_group_ids:\n                if tax.country_id == tax_group.country_id and not tax_group.company_id:\n                    tax_group_id = tax_group.id\n                    break\n        tax.tax_group_id = tax_group_id\n\n def _compute_tax_type_id(self):\n    \"\"\"This function computes the tax type based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax type with the same country and company. If no exact match is found, it searches for a tax type without a specified country but within the same company.\"\"\"\n    for tax in self:\n        tax_type_id = False\n        for tax_type in tax.company_id.tax_type_ids:\n            if tax.country_id == tax_type.country_id and tax.company_id == tax_type.company_id:\n                tax_type_id = tax_type.id\n                break\n        if not tax_type_id:\n            for tax_type in tax.company_id.tax_type_ids:\n                if tax.country_id == tax_type.country_id and not tax_type.company_id:\n                    tax_type_id = tax_type.id\n                    break\n        tax.tax_type_id = tax_type_id\n\n def _compute_tax_type_group_id(self):\n    \"\"\"This function computes the tax type group based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax type group with the same country and company. If no exact match is found, it searches for a tax type group without a specified country but within the same company.\"\"\"\n    for tax in self:\n        tax_type_group_id = False\n        for tax_type_group in tax", "CodeBleu_score": 19.8753798247462}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_ids = self.env['account.tax.group'].search([])\n    for tax in self:\n        if tax.company_id.country_id:\n            country = tax.company_id.country_id.id\n        else:\n            country = False\n        if tax.company_id:\n            company = tax.company_id.id\n        else:\n            company = False\n        tax_group = tax_group_ids.filtered(lambda r: r.country_id == country and r.company_id == company)\n        if tax_group:\n            tax.tax_group_id = tax_group[0].id\n        else:\n            tax_group = tax_group_ids.filtered(lambda r: r.country_id == country and not r.company_id)\n            if tax_group:\n                tax.tax_group_id = tax_group[0].id\n            else:\n                tax_group = tax_group_ids.filtered(lambda r: not r.country_id and r.company_id == company)\n                if tax_group:\n                    tax.tax_group_id = tax_group[0].id\n                else:\n                    tax_group = tax_group_ids.filtered(lambda r: not r.country_id and not r.company_id)\n                    if tax_group:\n                        tax.tax_group_id = tax_group[0].id\n                    else:\n                        tax.tax_group_id = False\n\n def _compute_tax_type(self):\n    \"\"\"This function computes the tax type of each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax type with the same country and company. If no exact match is found, it searches for a tax type without a specified country but within the same company.\"\"\"\n    tax_type_ids = self.env['account.tax.type'].search([])\n    for tax in self:\n        if tax.company_id.country_id:\n            country = tax.company_id.country_id.id\n        else:\n            country = False\n        if tax.company_id:\n            company = tax.company_id.id\n        else:\n            company = False\n        tax_type = tax_type_ids.filtered(lambda r: r.country_id == country and r.", "CodeBleu_score": 28.499926601714588}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = {}\n    for tax in self.tax_ids:\n        if tax.tax_group_id:\n            tax_groups.setdefault(tax.tax_group_id.id, []).append(tax)\n        else:\n            tax_groups.setdefault(tax.tax_group_id.id, [])\n            tax_groups[tax.tax_group_id.id].append(tax)\n    for tax_group_id, taxes in tax_groups.items():\n        tax_group = self.env['account.tax.group'].browse(tax_group_id)\n        for tax in taxes:\n            if not tax.tax_group_id:\n                for tax_group2 in self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)]):\n                    if tax_group2.id!= tax_group.id:\n                        tax.tax_group_id = tax_group2.id\n                        break\n\n def _compute_tax_amount(self):\n    \"\"\"This function computes the tax amount based on the tax rate and the tax base.\"\"\"\n    for tax in self:\n        tax.amount = tax.base_amount * (tax.amount_type == 'group' and tax.amount_base or 1.0) * (tax.amount_type == 'percent' and tax.amount_base or 1.0) * (tax.amount_type == 'fixed' and tax.amount_base or 1.0) * (tax.amount_type == 'group' and tax.amount_base or 1.0) * (tax.amount_type == 'percent' and tax.amount_base or 1.0) * (tax.amount_type == 'fixed' and tax.amount_base or 1.0) * (tax.amount_type == 'group' and tax.amount_base or 1.0) * (tax.amount_type == 'percent' and tax.amount_base or 1.0) * (tax.amount_type == 'fixed' and tax.amount_base or 1.0) * (tax.amount_type == 'group' and tax.amount_base or 1.0) * (tax.amount_type == 'percent'", "CodeBleu_score": 30.979525017963315}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    session = requests.Session()\n    session.headers.update({'Content-Type': 'application/json'})\n    session.post(url + 'login', data=json.dumps({'login': login, 'password': }))\n    data = {'database': db, 'force': force}\n    with open(module_file, 'rb') as f:\n        files = {'module_file': (module_file, f)}\n        response = session.post(url + 'base_import_module/login_upload', data=data, files=files)\n    return response.text\n\n", "CodeBleu_score": 37.02255350624386}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.login(url, login, password, db)\n\n    # Prepare the POST request data\n    post_data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n       'module_file': (module_file, open(module_file, 'rb'), 'application/octet-stream')\n    }\n\n    # Prepare the POST request\n    request = requests.Request('POST', url + '/base_import_module/login_upload', files=post_data)\n    prepared_request = request.prepare()\n\n    # Send the POST request\n    response = self.session.send(prepared_request)\n\n    # Return the response text\n    return response.text\n\n", "CodeBleu_score": 40.525665724505025}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    try:\n        self.login_to_server(url, login, password)\n    except Exception as e:\n        raise e\n\n    post_data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n       'module_file': (module_file, open(module_file, 'rb'))\n    }\n\n    response = requests.post(url + 'base_import_module/login_upload', files=post_data)\n    return response.text\n\n", "CodeBleu_score": 33.35399708594443}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    db_name = 'odoo_translation'\n    overwrite = True\n    registry = RegistryManager.get(db_name)\n    with registry.cursor() as cr:\n        TranslationImporter(cr, db_name, overwrite).import_module('translation')", "CodeBleu_score": 24.124995626920533}, {"code": "def import_translation()\n\t\n    # Get the database name and overwrite flag from the config file\n    database_name = config.get('database', 'database_name')\n    overwrite = config.getboolean('database', 'overwrite')\n\n    # Create a new registry for the database\n    registry = Registry(database_name, odoo_path=odoo_path)\n    # Create a new TranslationImporter\n    importer = TranslationImporter(registry, overwrite=overwrite)\n\n    # Load the translation files\n    importer.load_translations()\n\n    # Save the translations\n    importer.save_translations()\n\n", "CodeBleu_score": 32.48394831396097}, {"code": "def import_translation()\n\t\n    db_name = request.env['ir.config_parameter'].sudo().get_param('database.name')\n    overwrite = request.env['ir.config_parameter'].sudo().get_param('translation.overwrite')\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite=overwrite)\n        importer.import_module('base')\n        importer.import_module('web')\n        importer.import_module('website')\n        importer.import_module('website_sale')\n        importer.import_module('website_sale_delivery')\n        importer.import_module('website_sale_stock')\n        importer.import_module('website_sale_delivery_ups')\n        importer.import_module('website_sale_delivery_fedex')\n        importer.import_module('website_sale_delivery_ups_fedex')\n        importer.import_module('website_sale_delivery_ups_fedex_us')\n        importer.import_module('website_sale_delivery_ups_fedex_us_us')\n        importer.import_module('website_sale_delivery_ups_fedex_us_ca')\n        importer.import_module('website_sale_delivery_ups_fedex_us_mx')\n        importer.import_module('website_sale_delivery_ups_fedex_us_pr')\n        importer.import_module('website_sale_delivery_ups_fedex_us_vi')\n        importer.import_module('website_sale_delivery_ups_fedex_us_as')\n        importer.import_module('website_sale_delivery_ups_fedex_us_gu')\n        importer.import_module('website_sale_delivery_ups_fedex_us_mp')\n        importer.import_module('website_sale_delivery_ups_fedex_us_pr')\n        importer.import_module('website_sale_delivery_ups_fedex_us_vi')\n        importer.import_module('website_sale_delivery_ups_fedex_us_al')\n        importer.import_module('website_sale_delivery_ups_fedex_us_ak')\n        importer.import_module('website_sale_delivery_ups_fedex_us_az')\n        importer.import_module('website_sale_delivery_ups_", "CodeBleu_score": 32.414113470618354}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if self.children is not None:\n        for child in self.children:\n            if child.name == name:\n                return child\n        self.children.append(new_node)\n    else:\n        self.children = [new_node]\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 42.35605004010969}, {"code": "def add_child(self, name, info)\n\t\n    node = Node(name, info)\n    node.depth = self.depth + 1\n    if name not in self.children:\n        self.children.append(node)\n        if self.parent:\n            node.parent = self.parent\n            node.depth = self.depth + 1\n            node.is_root = self.is_root\n            node.is_leaf = self.is_leaf\n            node.is_branch = self.is_branch\n            node.is_internal = self.is_internal\n            node.is_external = self.is_external\n            node.is_internal = self.is_internal\n            node.is_external = self.is_external\n            node.is_branch = self.is_branch\n            node.is_leaf = self.is_leaf\n            node.is_root = self.is_root\n        return node\n    else:\n        return None\n\n", "CodeBleu_score": 35.03465482963687}, {"code": "def add_child(self, name, info)\n\t\n    new_node = Node(name, info, self.depth + 1)\n    if name not in [child.name for child in self.children]:\n        self.children.append(new_node)\n    if self.parent:\n        new_node.parent = self.parent\n        new_node.color = self.color\n        new_node.depth = self.depth + 1\n        new_node.parent.children.append(new_node)\n    self.children.sort(key=lambda x: x.name)\n    return new_node\n\n", "CodeBleu_score": 40.93906505940137}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n        \"root_type\": account.root_type,\n    }\n    for entry in gl_entries:\n        if entry.account == account:\n            for i, date in enumerate(dates):\n                if entry.date <= date:\n                    result[\"balances\"][i] += entry.amount\n    if result[\"root_type\"] not in [\"Asset\", \"Expense\"]:\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n    if result[\"root_type\"] in [\"Asset\", \"Liability\"]:\n        result[\"balances\"] = [sum(result[\"balances\"][i:]) for i in range(len(result[\"balances\"]))]\n    return result\n\n", "CodeBleu_score": 24.328334580358867}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        'dates': dates,\n        'balances': [0] * len(dates)\n    }\n\n    if account['root_type'] == 'Asset':\n        for i in range(len(dates)):\n            result['balances'][i] += gl_entries[i]['debit'] - gl_entries[i]['credit']\n    elif account['root_type'] == 'Liability':\n        for i in range(len(dates)):\n            result['balances'][i] += gl_entries[i]['credit'] - gl_entries[i]['debit']\n    elif account['root_type'] == 'Equity':\n        for i in range(len(dates)):\n            result['balances'][i] += gl_entries[i]['debit'] - gl_entries[i]['credit']\n    else:\n        for i in range(len(dates)):\n            result['balances'][i] += gl_entries[i]['debit'] - gl_entries[i]['credit']\n        result['balances'] = [-x for x in result['balances']]\n\n    return result\n\n", "CodeBleu_score": 17.73265634299977}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\"dates\": dates}\n    for date in dates:\n        result[date] = 0\n    root_type = account[\"root_type\"]\n    for entry in gl_entries:\n        if entry[\"account_id\"] == account[\"id\"]:\n            result[entry[\"date\"]] += entry[\"amount\"]\n            if root_type == \"Asset\":\n                result[entry[\"date\"]] -= entry[\"amount\"]\n            elif root_type == \"Liability\":\n                result[entry[\"date\"]] += entry[\"amount\"]\n            elif root_type == \"Equity\":\n                result[entry[\"date\"]] += entry[\"amount\"]\n    return result\n\n", "CodeBleu_score": 20.439916365473245}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= self.account_type_before_last_save:\n        if self.account_type in ['Receivable', 'Payable'] and self.general_ledger_entries:\n            self.warning_message = _(\"This account has general ledger entries and cannot be changed to a non-receivable/payable account type.\")\n            self.warning_message_comment = _(\"Please delete the general ledger entries for this account before changing the account type.\")\n        elif self.account_type not in ['Receivable', 'Payable'] and not self.general_ledger_entries:\n            self.warning_message = _(\"This account has no general ledger entries and cannot be changed to a receivable/payable account type.\")\n            self.warning_message_comment = _(\"Please add general ledger entries for this account before changing the account type.\")\n        else:\n            self.warning_message = _(\"This account has general ledger entries and cannot be changed to a non-receivable/payable account type.\")\n            self.warning_message_comment = _(\"Please delete the general ledger entries for this account before changing the account type.\")\n    else:\n        self.warning_message = False\n        self.warning_message_comment = False\n\n", "CodeBleu_score": 22.842127452129677}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.type!= self.type_before_last_save:\n        if self.type == \"receivable\" or self.type == \"payable\":\n            if self.general_ledger_entries:\n                self.env['account.account'].check_account_type_change(self)\n        else:\n            if self.general_ledger_entries:\n                self.env['account.account'].check_account_type_change(self)\n\n", "CodeBleu_score": 16.574449480711596}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.type_before!= self.type_after:\n        if self.type_before =='receivable' and self.type_after!='receivable':\n            if self.general_ledger_line_ids:\n                self.message_post(body=_(\"Account type changed from Receivable to a non-Receivable account. There are existing general ledger entries for this account. Please check the 'Accounts' report for potential issues.\"))\n        if self.type_before == 'payable' and self.type_after!= 'payable':\n            if self.general_ledger_line_ids:\n                self.message_post(body=_(\"Account type changed from Payable to a non-Payable account. There are existing general ledger entries for this account. Please check the 'Accounts' report for potential issues.\"))\n        if self.type_before!='receivable' and self.type_before!= 'payable' and self.type_after =='receivable':\n            if self.general_ledger_line_ids:\n                self.message_post(body=_(\"Account type changed from a non-Receivable/Payable account to Receivable. There are existing general ledger entries for this account. Please check the 'Accounts' report for potential issues.\"))\n        if self.type_before!='receivable' and self.type_before!= 'payable' and self.type_after == 'payable':\n            if self.general_ledger_line_ids:\n                self.message_post(body=_(\"Account type changed from a non-Receivable/Payable account to Payable. There are existing general ledger entries for this account. Please check the 'Accounts' report for potential issues.\"))\n\n", "CodeBleu_score": 21.44019384883685}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        self.currency_id.check_currency_match(self.id)\n        self.currency_id.check_currency_match(self.company_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company_id.currency_id.id)\n        self.currency_id.check_currency_match(self.company", "CodeBleu_score": 14.622921347717782}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        self.currency_id = self.currency_id.with_context(check_currency_id=True)\n        if self.currency_id.id!= self.company_id.currency_id.id:\n            self.currency_id = self.company_id.currency_id\n            raise UserError(_('The currency of the account %s must be the same as the company currency') % self.name)\n    else:\n        self.currency_id = self.company_id.currency_id\n\n", "CodeBleu_score": 25.51990209547942}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency_id and self.currency_id!= self.company_id.currency_id:\n        raise UserError(_(\"The currency of the account %s is different from the company's currency %s.\") % (self.code, self.company_id.currency_id.name))\n    if self.currency_id:\n        self.currency_id = self.currency_id\n    elif self.company_id.currency_id:\n        self.currency_id = self.company_id.currency_id\n    else:\n        self.currency_id = self.env.user.company_id.currency_id\n\n", "CodeBleu_score": 26.497928097519235}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = entry.copy()\n            aggregated_entries[key][\"debit\"] = 0\n            aggregated_entries[key][\"credit\"] = 0\n            aggregated_entries[key][\"debit_amount\"] = 0\n            aggregated_entries[key][\"credit_amount\"] = 0\n            aggregated_entries[key][\"account_currency_amount\"] = 0\n            aggregated_entries[key][\"account_currency_amount_debit\"] = 0\n            aggregated_entries[key][\"account_currency_amount_credit\"] = 0\n            aggregated_entries[key][\"key_values\"] = key_values\n        aggregated_entries[key][\"debit\"] += cint(entry.get(\"debit\"))\n        aggregated_entries[key][\"credit\"] += cint(entry.get(\"credit\"))\n        aggregated_entries[key][\"debit_amount\"] += cfloat(entry.get(\"debit_amount\"))\n        aggregated_entries[key][\"credit_amount\"] += cfloat(entry.get(\"credit_amount\"))\n        aggregated_entries[key][\"account_currency_amount\"] += cfloat(entry.get(\"account_currency_amount\"))\n        aggregated_entries[key][\"account_currency_amount_debit\"] += cfloat(entry.get(\"account_currency_amount_debit\"))\n        aggregated_entries[key][\"account_currency_amount_credit\"] += cfloat(entry.get(\"account_currency_amount_credit\"))\n\n    return aggregated_entries\n\n", "CodeBleu_score": 35.93514825466883}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += entry.get(\"debit\")\n            aggregated_entries[key][\"credit\"] += entry.get(\"credit\")\n            aggregated_entries[key][\"debit_amount\"] += entry.get(\"debit_amount\")\n            aggregated_entries[key][\"credit_amount\"] += entry.get(\"credit_amount\")\n        else:\n            aggregated_entries[key] = {\n                \"debit\": entry.get(\"debit\"),\n                \"credit\": entry.get(\"credit\"),\n                \"debit_amount\": entry.get(\"debit_amount\"),\n                \"credit_amount\": entry.get(\"credit_amount\"),\n                \"account\": key_values[\"account\"],\n                \"account_currency\": key_values[\"account_currency\"],\n                \"cost_center\": key_values[\"cost_center\"],\n                \"project\": key_values[\"project\"],\n                \"finance_book\": key_values[\"finance_book\"],\n                \"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n            }\n            for dimension in accounting_dimensions:\n                aggregated_entries[key][dimension] = key_values[dimension]\n\n    return aggregated_entries\n\n", "CodeBleu_score": 39.94652613646677}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_amount\": 0,\n                \"credit_amount\": 0,\n                \"account_currency\": entry.get(\"account_currency\"),\n                \"key_values\": key_values,\n            }\n        aggregated_entries[key][\"debit\"] += 1\n        aggregated_entries[key][\"credit\"] += 1\n        aggregated_entries[key][\"debit_amount\"] += entry.get(\"debit_amount\")\n        aggregated_entries[key][\"credit_amount\"] += entry.get(\"credit_amount\")\n\n    return aggregated_entries\n\n", "CodeBleu_score": 48.28414731538555}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    supplier_id = self.supplier_id\n    supplier = self.env['res.partner'].browse(supplier_id)\n    if supplier.is_blocked:\n        if supplier.hold_type == 'payment':\n            if supplier.payment_release_date:\n                if supplier.payment_release_date < fields.Date.today():\n                    raise ValidationError(_('The supplier is on hold and the release date has passed.'))\n        if supplier.hold_type == 'invoice':\n            if supplier.invoice_release_date:\n                if supplier.invoice_release_date < fields.Date.today():\n                    raise ValidationError(_('The supplier is on hold and the release date has passed.'))\n        raise ValidationError(_('The supplier is on hold.'))\n\n", "CodeBleu_score": 23.825232495120765}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier.is_blocked:\n        if self.supplier.block_type == 'hold':\n            if self.supplier.block_date <= date.today():\n                self.supplier.is_blocked = False\n                self.supplier.block_date = None\n                self.supplier.block_type = None\n                self.supplier.save()\n            else:\n                raise Exception(f'Supplier is still blocked. Release date: {self.supplier.block_date}')\n        else:\n            raise Exception(f'Supplier is still blocked. Block type: {self.supplier.block_type}')\n\n", "CodeBleu_score": 18.739383002098815}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_payment:\n        supplier = Supplier.objects.get(pk=self.supplier_id)\n        if supplier.is_blocked:\n            if supplier.hold_type == self.transaction_type:\n                if supplier.release_date:\n                    if supplier.release_date > datetime.now():\n                        raise Exception('Supplier is on hold. Please contact the supplier.')\n                else:\n                    raise Exception('Supplier is on hold. Please contact the supplier.')\n            else:\n                raise Exception('Supplier is on hold. Please contact the supplier.')\n        else:\n            raise Exception('Supplier is blocked. Please contact the supplier.')\n    else:\n        buyer = Buyer.objects.get(pk=self.buyer_id)\n        if buyer.is_blocked:\n            if buyer.hold_type == self.transaction_type:\n                if buyer.release_date:\n                    if buyer.release_date > datetime.now():\n                        raise Exception('Buyer is on hold. Please contact the buyer.')\n                else:\n                    raise Exception('Buyer is on hold. Please contact the buyer.')\n            else:\n                raise Exception('Buyer is on hold. Please contact the buyer.')\n        else:\n            raise Exception('Buyer is blocked. Please contact the buyer.')\n\n", "CodeBleu_score": 28.009632953979345}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    from frappe.model.naming import get_fullname\n    from frappe.utils import cstr\n    from frappe.model.document import get_mapped_doc\n    from frappe.utils import flt\n\n    def _get_doctype_and_parent(doctype, parent):\n        if doctype == \"Repost Voucher\":\n            return \"Repost Voucher\", parent\n        else:\n            return \"Voucher\", parent\n\n    def _get_voucher_map(doctype, parent):\n        return {\n            \"Repost Voucher\": \"repost_vouchers\",\n            \"Voucher\": \"vouchers\",\n        }[doctype]\n\n    def _get_voucher_field(doctype):\n        return {\n            \"Repost Voucher\": \"repost_voucher_type\",\n            \"Voucher\": \"voucher_type\",\n        }[doctype]\n\n    def _get_voucher_number_field(doctype):\n        return {\n            \"Repost Voucher\": \"repost_voucher_number\",\n            \"Voucher\": \"voucher_number\",\n        }[doctype]\n\n    def _get_voucher_field_value(doctype, parent):\n        return {\n            \"Repost Voucher\": cstr(parent.repost_voucher_type),\n            \"Voucher\": cstr(parent.voucher_type),\n        }[doctype]\n\n    def _get_voucher_number_field_value(doctype, parent):\n        return {\n            \"Repost Voucher\": cstr(parent.repost_voucher_number),\n            \"Voucher\": cstr(parent.voucher_number),\n        }[doctype]\n\n    def _get_voucher_doctype(doctype, parent):\n        return {\n            \"Repost Voucher\": parent.repost_voucher_type,\n            \"Voucher\": parent.voucher_type,\n        }[doctype]\n\n    def _get_voucher_number(doctype, parent):\n        return {\n            \"Repost Voucher\": parent.repost_voucher_number,\n            \"Voucher\": parent.voucher_number,\n        }[doctype]\n\n    def _get_voucher_row_map(doctype, parent):\n        return {\n            \"Repost Voucher\": parent.repost_vouchers,\n            \"Voucher\": parent.vouchers,\n        }[doctype]\n\n    def _get_voucher_row_map_key(doctype, parent):\n        return {\n            \"Repost Voucher\":", "CodeBleu_score": 14.350750593198065}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    voucher_type = self.doctype_obj.get_field(\"voucher_type\").options\n    voucher_type_map = {voucher_type: self.doctype_obj.name}\n    voucher_type_map.update(\n        {\n            self.get_field(\"voucher_type\").options[i]: self.get_field(\"voucher_type\").options[i]\n            for i in self.get_field(\"voucher_type\").options\n        }\n    )\n    voucher_number = self.get_field(\"voucher_number\").options\n    voucher_number_map = {voucher_number: self.doctype_obj.name}\n    voucher_number_map.update(\n        {\n            self.get_field(\"voucher_number\").options[i]: self.get_field(\"voucher_number\").options[i]\n            for i in self.get_field(\"voucher_number\").options\n        }\n    )\n    for repost_doctype in repost_doctypes:\n        if repost_doctype == \"Repost Vouchers\":\n            query = \"\"\"select parent, parenttype, parentfield, parentid, voucher_type, voucher_number, repost_vouchers from `tab{doctype}` where voucher_type = '{voucher_type}' and voucher_number = '{voucher_number}'\"\"\".format(\n                doctype=self.doctype_obj.name,\n                voucher_type=voucher_type_map[self.get_field(\"voucher_type\").options],\n                voucher_number=voucher_number_map[self.get_field(\"voucher_number\").options],\n            )\n        else:\n            query = \"\"\"select parent, parenttype, parentfield, parentid, voucher_type, voucher_number, vouchers from `tab{doctype}` where voucher_type = '{voucher_type}' and voucher_number = '{voucher_number}'\"\"\".format(\n                doctype=self.doctype_obj.name,\n                voucher_type=voucher_type_map[self.get_field(\"voucher_type\").options],\n                voucher_number=voucher_number_map[self.get_field(\"voucher_number\").options],\n            )\n        rows = frappe.db", "CodeBleu_score": 19.203875416651112}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # Get the relevant repost doctypes\n    repost_doctypes = get_repost_doctypes(self.doctype)\n    if not repost_doctypes:\n        return\n\n    # Get the relevant vouchers\n    vouchers = get_vouchers(self.doctype, self.name)\n    if not vouchers:\n        return\n\n    # Organize vouchers by parent\n    vouchers_by_parent = {}\n    for voucher in vouchers:\n        parent_doctype = voucher.get(\"parent_doctype\")\n        parent_name = voucher.get(\"parent\")\n        if parent_doctype and parent_name:\n            vouchers_by_parent.setdefault(parent_doctype, {})\n            vouchers_by_parent[parent_doctype].setdefault(parent_name, [])\n            vouchers_by_parent[parent_doctype][parent_name].append(voucher)\n\n    # Remove references from repost doctypes\n    for repost_doctype in repost_doctypes:\n        if repost_doctype not in vouchers_by_parent:\n            continue\n        for parent_name in vouchers_by_parent[repost_doctype]:\n            parent_doc = get_doc(repost_doctype, parent_name)\n            if not parent_doc:\n                continue\n            repost_vouchers = parent_doc.get(\"repost_vouchers\") or []\n            vouchers = parent_doc.get(\"vouchers\") or []\n            for voucher in vouchers_by_parent[repost_doctype][parent_name]:\n                if voucher.get(\"voucher_type\") == self.doctype and voucher.get(\"voucher_no\") == self.name:\n                    repost_vouchers.remove(voucher)\n                    vouchers.remove(voucher)\n            parent_doc.set(\"repost_vouchers\", repost_vouchers)\n            parent_doc.set(\"vouchers\", vouchers)\n            parent_doc.flags.ignore_validation = True\n            parent_doc.flags.ignore_links = True\n            parent_doc.save()\n\n", "CodeBleu_score": 23.706052778737785}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n\n    self.auth()\n    if account_id:\n        account_ids = [account_id]\n    else:\n        account_ids = self.get_account_ids()\n\n    for account_id in account_ids:\n        params = {\n            \"access_token\": self.access_token,\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"account_id\": account_id,\n        }\n\n        try:\n            response = self.client.Transactions.get(params=params)\n        except APIError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                self.auth()\n                response = self.client.Transactions.get(params=params)\n            elif e.code == \"INVALID_REQUEST\":\n                frappe.log_error(\"Plaid: Invalid request\")\n                frappe.throw(_(\"Invalid request\"), title=_(\"Plaid Error\"))\n            elif e.code == \"INVALID_INPUT\":\n                frappe.log_error(\"Plaid: Invalid input\")\n                frappe.throw(_(\"Invalid input\"), title=_(\"Plaid Error\"))\n            elif e.code == \"ITEM_NOT_READY\":\n                frappe.log_error(\"Plaid: Item not ready\")\n                frappe.throw(_(\"Item not ready\"), title=_(\"Plaid Error\"))\n            elif e.code == \"INVALID_ACCESS_TOKEN\":\n                frappe.log_error(\"Plaid: Invalid access token\")\n                frappe.throw(_(\"Invalid access token\"), title=_(\"Plaid Error\"))\n            elif e.code == \"INVALID_PRODUCT\":\n                frappe.log_error(\"Plaid: Invalid product\")\n                frappe.throw(_(\"Invalid product\"), title=_(\"Plaid Error\"))\n            elif e.code == \"INVALID_COUNTRY\":\n                frappe.log_error(\"Plaid: Invalid country\")\n                frappe.throw(_(\"Invalid country\"), title=_(\"Plaid Error\"))\n            elif e.code == \"INVALID_STATUS\":\n                frappe.log_error(\"Plaid: Invalid status\")\n                frappe.throw(_(\"Invalid status\"), title=_(\"Plaid Error\"))\n            elif e.code == \"INVALID_ACCOUNT_ID\":\n                frappe.log_error(\"Plaid: Invalid account ID\")\n                frappe.throw(_(\"Invalid account ID\"), title=_(\"Plaid Error\"))\n            elif e.code == \"INVALID_START_DATE\":\n                frappe.log_", "CodeBleu_score": 29.24185640448912}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    transactions = []\n    params = {\n        \"count\": 250,\n        \"offset\": 0,\n        \"gte\": start_date,\n        \"lte\": end_date,\n        \"account_ids\": [account_id],\n    }\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, **params)\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Error fetching transactions\")\n            frappe.throw(_(str(e)), title=_(\"Error Fetching Transactions\"))\n        else:\n            transactions.extend(response[\"transactions\"])\n            if len(response[\"transactions\"]) < params[\"count\"]:\n                break\n            params[\"offset\"] += params[\"count\"]\n    return transactions\n\n", "CodeBleu_score": 30.695100297064187}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    self.client.Transactions.get(self.access_token, start_date, end_date, account_id)\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, start_date, end_date, account_id)\n            if response.get(\"total_transactions\") > response.get(\"transactions\"):\n                start_date = response.get(\"transactions\")[-1].get(\"date\")\n            else:\n                break\n        except ItemError as e:\n            if e.code == \"ITEM_LOGIN_REQUIRED\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transactions retrieval error\")\n            frappe.throw(_(str(e)), title=_(\"Transactions Retrieval Failed\"))\n    return response.get(\"transactions\")\n\n", "CodeBleu_score": 35.76414879875101}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        bank_id = response[\"item\"][\"institution_id\"]\n        bank_name = response[\"item\"][\"institution\"][\"name\"]\n        bank_type = response[\"item\"][\"institution\"][\"type\"]\n        bank_logo = response[\"item\"][\"institution\"][\"logo\"]\n        bank_country = response[\"item\"][\"institution\"][\"country\"]\n        bank_mfa = response[\"item\"][\"institution\"][\"mfa\"]\n        bank_mfa_type = response[\"item\"][\"institution\"][\"mfa_type\"]\n        bank_mfa_required = response[\"item\"][\"institution\"][\"mfa_required\"]\n        bank_mfa_config = response[\"item\"][\"institution\"][\"mfa_config\"]\n        bank_mfa_config_type = response[\"item\"][\"institution\"][\"mfa_config_type\"]\n        bank_mfa_config_name = response[\"item\"][\"institution\"][\"mfa_config_name\"]\n        bank_mfa_config_value = response[\"item\"][\"institution\"][\"mfa_config_value\"]\n        bank_mfa_config_min_questions = response[\"item\"][\"institution\"][\"mfa_config_min_questions\"]\n        bank_mfa_config_min_time = response[\"item\"][\"institution\"][\"mfa_config_min_time\"]\n        bank_mfa_config_max_time = response[\"item\"][\"institution\"][\"mfa_config_max_time\"]\n        bank_mfa_config_questions = response[\"item\"][\"institution\"][\"mfa_config_questions\"]\n        bank_mfa_config_answers = response[\"item\"][\"institution\"][\"mfa_config_answers\"]\n        bank_mfa_config_message = response[\"item\"][\"institution\"][\"mfa_config_message\"]\n        bank_mfa_config_message_code = response[\"item\"][\"institution\"][\"mfa_config_message_code\"]\n        bank_mfa_config_message_link = response[\"item\"][\"institution\"][\"mfa_config_message_link\"]\n        bank_mfa_config_message_text = response[\"item\"][\"institution\"][\"mfa_config_message_text\"]\n        bank_mfa_config_message_type = response[\"item\"][\"institution\"][\"mfa_config_message_type\"]\n        bank_mfa_config_message_title = response[\"item\"][\"institution\"][\"mfa_config_message_title\"]\n        bank_mfa_config_message_secondary_text = response[\"item\"][\"", "CodeBleu_score": 17.82138726307918}, {"code": "def add_institution(token, response)\n\t\n    plaid_connector = PlaidConnector(token)\n    access_token = plaid_connector.get_access_token(response[\"public_token\"])\n    bank_record = frappe.get_doc(\"Bank\", response[\"institution_id\"])\n    if bank_record:\n        bank_record.access_token = access_token\n        bank_record.save()\n    else:\n        bank_record = frappe.new_doc(\"Bank\")\n        bank_record.bank_name = response[\"institution_name\"]\n        bank_record.bank_code = response[\"institution_id\"]\n        bank_record.access_token = access_token\n        bank_record.save()\n\n", "CodeBleu_score": 32.2622685467443}, {"code": "def add_institution(token, response)\n\t\n    plaid_connector = PlaidConnector()\n    access_token = plaid_connector.get_access_token(token)\n    if access_token is None:\n        frappe.log_error(\"Plaid: Access token is missing\")\n    institution_id = response[\"institution_id\"]\n    institution_name = response[\"institution_name\"]\n    institution_logo = response[\"institution_logo\"]\n    institution_url = response[\"institution_url\"]\n    institution_country_code = response[\"country_code\"]\n    institution_mfa = response[\"mfa\"]\n    institution_products = response[\"products\"]\n    institution_status = response[\"status\"]\n    institution_type = response[\"type\"]\n    institution_webhook = response[\"webhook\"]\n    institution_error = response[\"error\"]\n    if institution_error is not None:\n        frappe.log_error(\"Plaid: Error: \" + institution_error)\n    if frappe.db.exists(\"Plaid Institution\", {\"institution_id\": institution_id}):\n        frappe.log_error(\"Plaid: Institution already exists\")\n        plaid_institution = frappe.get_doc(\"Plaid Institution\", {\"institution_id\": institution_id})\n        plaid_institution.access_token = access_token\n        plaid_institution.save()\n    else:\n        frappe.log_error(\"Plaid: Institution does not exist\")\n        plaid_institution = frappe.get_doc({\n            \"doctype\": \"Plaid Institution\",\n            \"institution_id\": institution_id,\n            \"institution_name\": institution_name,\n            \"institution_logo\": institution_logo,\n            \"institution_url\": institution_url,\n            \"institution_country_code\": institution_country_code,\n            \"institution_mfa\": institution_mfa,\n            \"institution_products\": institution_products,\n            \"institution_status\": institution_status,\n            \"institution_type\": institution_type,\n            \"institution_webhook\": institution_webhook,\n            \"access_token\": access_token\n        })\n        plaid_institution.insert()\n", "CodeBleu_score": 31.197043360634304}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    start_date = frappe.db.get_value(\"Bank Integration\", bank, \"last_integration_date\")\n    end_date = frappe.utils.nowdate()\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n    if transactions:\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n        frappe.db.set_value(\"Bank Integration\", bank, \"last_integration_date\", transactions[-1][\"date\"])\n        frappe.db.commit()\n        if new_transactions:\n            frappe.msgprint(\n                _(\"Added {0} new transactions to {1}\").format(len(new_transactions), bank_account)\n            )\n        else:\n            frappe.msgprint(_(\"No new transactions to sync\"))\n    else:\n        frappe.msgprint(_(\"No transactions to sync\"))\n", "CodeBleu_score": 29.419382469977467}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n    if not last_integration_date:\n        last_integration_date = frappe.db.get_value(\"Bank\", bank, \"last_integration_date\")\n\n    if last_integration_date:\n        last_integration_date = getdate(last_integration_date)\n        start_date = last_integration_date + timedelta(days=1)\n    else:\n        start_date = None\n\n    end_date = datetime.now().date()\n\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    if transactions:\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if new_transactions:\n            frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", transactions[-1][\"date\"])\n            frappe.db.set_value(\"Bank\", bank, \"last_integration_date\", transactions[-1][\"date\"])\n            frappe.db.commit()\n\n            frappe.msgprint(_(\"Added {0} new transactions\").format(len(new_transactions)))\n\n    else:\n        frappe.msgprint(_(\"No new transactions found\"))\n\n", "CodeBleu_score": 41.072103815346836}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    start_date = frappe.db.get_value(\"Bank Integration\", dict(bank=bank, bank_account=bank_account), \"last_integration_date\")\n    end_date = getdate(datetime.now())\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    if len(transactions) > 0:\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        frappe.db.set_value(\"Bank Integration\", dict(bank=bank, bank_account=bank_account), \"last_integration_date\", transactions[0][\"date\"])\n        frappe.db.commit()\n\n        frappe.msgprint(_(\"{0} new bank transactions added.\").format(len(new_transactions)))\n    else:\n        frappe.msgprint(_(\"No new bank transactions to sync.\"))\n\n", "CodeBleu_score": 31.31029479654815}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    # Construct a query URI for the specified entity\n    query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/query\"\n    # Determine the total number of entries for the specified entity\n    query_params = {\n        \"query\": f\"select * from {entity} where SyncToken > 0\"\n    }\n    response = self._get(query_uri, params=query_params)\n    total_entries = response.json()[\"QueryResponse\"][\"totalCount\"]\n    # Process the entries in batches of 1000\n    batch_size = 1000\n    for batch_start in range(0, total_entries, batch_size):\n        # Construct a query URI for the specified entity\n        query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/query\"\n        # Determine the total number of entries for the specified entity\n        query_params = {\n            \"query\": f\"select * from {entity} where SyncToken > 0\",\n            \"start\": batch_start,\n            \"max\": batch_size,\n        }\n        response = self._get(query_uri, params=query_params)\n        entries = response.json()[\"QueryResponse\"][\"entities\"]\n        # Preprocess and save the entries\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n    # Return the total number of entries migrated\n    return total_entries", "CodeBleu_score": 38.56078837308895}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    total = self._get_total(query_uri)\n    self._publish(\n        {\n            \"event\": \"progress\",\n            \"message\": _(\"Fetching {0}\").format(entity),\n            \"count\": 0,\n            \"total\": total,\n        }\n    )\n    entries = []\n    while len(entries) < total:\n        self._publish(\n            {\n                \"event\": \"progress\",\n                \"message\": _(\"Fetching {0}\").format(entity),\n                \"count\": len(entries),\n                \"total\": total,\n            }\n        )\n        entries += self._get_entries(query_uri, len(entries))\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)", "CodeBleu_score": 28.241082660274557}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = f\"{self.base_uri}/{entity}?minorversion={self.minor_version}\"\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        entries = response.json()\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n    else:\n        self._log_error(\n            response.status_code,\n            f\"Error fetching {entity} from QuickBooks. Response: {response.text}\",\n        )\n\n", "CodeBleu_score": 16.76274226138457}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\"DocType\"] == \"Invoice\":\n        self._save_invoice_as_sales_invoice(invoice)\n    elif invoice[\"DocType\"] == \"Return\":\n        self._save_invoice_as_sales_invoice(invoice, is_return=True)\n    elif invoice[\"DocType\"] == \"SalesOrder\":\n        self._save_invoice_as_sales_invoice(invoice, is_pos=True)\n    elif invoice[\"DocType\"] == \"ReturnOrder\":\n        self._save_invoice_as_sales_invoice(invoice, is_return=True, is_pos=True)\n    elif invoice[\"DocType\"] == \"StatementCharge\":\n        self._save_invoice_as_journal_entry(invoice)\n    elif invoice[\"DocType\"] == \"ReimburseCharge\":\n        self._save_invoice_as_journal_entry(invoice)\n    else:\n        raise frappe.ValidationError(\"DocType not found\")\n\n", "CodeBleu_score": 26.011027582825623}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"Type\"] == \"Invoice\":\n            self._save_sales_invoice(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"CreditMemo\":\n            self._save_sales_invoice(invoice, invoice[\"Id\"], is_return=True)\n        elif invoice[\"Type\"] == \"CustomerPayment\":\n            self._save_customer_payment(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"CustomerDeposit\":\n            self._save_customer_deposit(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"CustomerCredit\":\n            self._save_customer_credit(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"CustomerRefund\":\n            self._save_customer_refund(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorPayment\":\n            self._save_vendor_payment(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorCredit\":\n            self._save_vendor_credit(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorCreditMemo\":\n            self._save_vendor_credit_memo(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorRefund\":\n            self._save_vendor_refund(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorBill\":\n            self._save_vendor_bill(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorCreditNote\":\n            self._save_vendor_credit_note(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorCreditMemo\":\n            self._save_vendor_credit_memo(invoice, invoice[\"Id\"], is_return=True)\n        elif invoice[\"Type\"] == \"VendorRefund\":\n            self._save_vendor_refund(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorBillPayment\":\n            self._save_vendor_bill_payment(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorBillCredit\":\n            self._save_vendor_bill_credit(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"VendorBillCreditMemo\":\n            self._save_vendor_bill_credit_memo(invoice, invoice[\"Id\"], is_return=True)\n        elif invoice[\"Type\"] == \"VendorBillRefund\":\n            self._save_vendor_bill_refund(invoice, invoice[\"Id\"])", "CodeBleu_score": 14.183488343142287}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"Type\"] == \"SalesInvoice\":\n            self._save_sales_invoice(invoice, invoice[\"Id\"], is_pos=False)\n        elif invoice[\"Type\"] == \"ReturnInvoice\":\n            self._save_sales_invoice(invoice, invoice[\"Id\"], is_return=True)\n        elif invoice[\"Type\"] == \"SalesOrder\":\n            self._save_sales_order(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"CreditMemo\":\n            self._save_credit_memo(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"Bill\":\n            self._save_bill(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"Payment\":\n            self._save_payment(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"Deposit\":\n            self._save_deposit(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"JournalEntry\":\n            self._save_journal_entry(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"StatementCharge\":\n            self._save_statement_charge(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"ReimburseCharge\":\n            self._save_reimburse_charge(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"DepositReturn\":\n            self._save_deposit_return(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"InvoiceLine\":\n            self._save_invoice_line(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"Estimate\":\n            self._save_estimate(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"EstimateLine\":\n            self._save_estimate_line(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"SalesReceipt\":\n            self._save_sales_receipt(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"SalesTax\":\n            self._save_sales_tax(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"BillPayment\":\n            self._save_bill_payment(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"BillPaymentLine\":\n            self._save_bill_payment_line(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"] == \"PurchaseOrder\":\n            self._save_purchase_order(invoice, invoice[\"Id\"])\n        elif invoice[\"Type\"]", "CodeBleu_score": 14.666160761194396}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Get the holiday list for the sales person\n    employee = frappe.db.get_value(\"Sales Person\", sales_person, \"employee\")\n    if employee:\n        holiday_list = get_holiday_list_for_employee(employee)\n    else:\n        holiday_list = frappe.get_cached_value(\"Company\", self.company, \"default_holiday_list\")\n\n    # Get the holiday dates from the holiday list\n    holidays = frappe.db.sql_list(\n        \"\"\"select holiday_date from `tabHoliday` where parent=%s\"\"\", holiday_list\n    )\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date) / no_of_visit\n\n    # Create the schedule list\n    schedule_list = []\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=i * interval)\n\n        # Adjust the schedule date to avoid holidays\n        if schedule_date in holidays:\n            schedule_date = add_days(schedule_date, 1)\n\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 38.06578662402509}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Get the holiday list for the company\n    holiday_list = frappe.get_cached_value(\"Company\", self.company, \"default_holiday_list\")\n\n    # Get the holiday list for the employee\n    employee = frappe.db.get_value(\"Sales Person\", sales_person, \"employee\")\n    if employee:\n        holiday_list = get_holiday_list_for_employee(employee)\n\n    # Get the holiday dates\n    holidays = frappe.db.sql_list(\n        \"\"\"select holiday_date from `tabHoliday` where parent=%s\"\"\", holiday_list\n    )\n\n    # Get the number of days between the start and end date\n    days_between = get_days_between(start_date, end_date)\n\n    # Calculate the number of days between visits\n    days_between_visits = days_between / no_of_visit\n\n    # Initialize the schedule list\n    schedule_list = []\n\n    # Iterate through the days between visits\n    for i in range(no_of_visit):\n        # Calculate the date for the current visit\n        current_date = add_days(start_date, i * days_between_visits)\n\n        # Iterate through the holidays\n        for _i in range(len(holidays)):\n            # Adjust the date to the next available date\n            current_date = validate_schedule_date_for_holiday_list(current_date, sales_person)\n\n        # Append the date to the schedule list\n        schedule_list.append(current_date)\n\n    # Return the schedule list\n    return schedule_list\n\n", "CodeBleu_score": 40.459251999324486}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    no_of_days = get_diff_in_days(start_date, end_date)\n\n    # get the holiday list\n    employee = frappe.db.get_value(\"Sales Person\", sales_person, \"employee\")\n    if employee:\n        holiday_list = get_holiday_list_for_employee(employee)\n    else:\n        holiday_list = frappe.get_cached_value(\"Company\", self.company, \"default_holiday_list\")\n\n    holidays = frappe.db.sql_list(\n        \"\"\"select holiday_date from `tabHoliday` where parent=%s\"\"\", holiday_list\n    )\n\n    # get the interval between visits\n    interval = get_interval(no_of_visit, no_of_days)\n\n    # create the schedule\n    for i in range(interval):\n        schedule_date = add_days(schedule_date, 1)\n        if not holidays or schedule_date not in holidays:\n            schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 37.724259112056174}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\ttermine the method to handle the request\n    $method = request()->get('handle', 'edit');\n\n// Construct a URL for bulk actions\n    $url = route('bulk-actions.action', $this->path);\n\n// Render HTML content for a modal using the specified view and data\n    $html = view('components.index.bulkaction.modal', [\n        'url' => $url,\n        'handle' => $method,\n       'selected' => $data['selected']?? $this->getSelectedInput(request()),\n        'html' => view($view, $data)->render(),\n    ])->render();\n\n// Return a JSON response with success status, message, data with title, path, handle, and the rendered HTML\n    return response()->json([\n       'success' => true,\n        'error' => false,\n       'message' => '',\n        'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $method,\n        ],\n        'html' => $html,\n    ]);\n}", "CodeBleu_score": 80.90258656848228}, {"code": "<?\n   public function response($view, $data = []){\n\tod = request()->get('handle', 'edit');\n$handle = $this->actions[$method]['handle']?? 'update';\n$url = route('bulk-actions.action', $this->path);\n$html = view('components.index.bulkaction.modal', [\n'url' => $url,\n'handle' => $handle,\n'selected' => $data['selected']?? $this->getSelectedInput(request()),\n'html' => view($view, $data)->render(),\n])->render();\nreturn response()->json([\n'success' => true,\n'error' => false,\n'message' => '',\n'data' => [\n'title' => $this->findTranslation($this->text),\n'path' => $url,\n'handle' => $handle,\n],\n'html' => $html,\n]);\n}", "CodeBleu_score": 78.58495304439079}, {"code": "<?\n   public function response($view, $data = []){\n\tod = request()->get('handle', 'edit');\n$handle = $this->actions[$method]['handle']?? 'update';\n$url = route('bulk-actions.action', $this->path);\n$html = view('components.index.bulkaction.modal', [\n'url' => $url,\n'handle' => $handle,\n'selected' => $data['selected']?? $this->getSelectedInput(request()),\n'html' => view($view, $data)->render(),\n])->render();\nreturn response()->json([\n'success' => true,\n'error' => false,\n'message' => '',\n'data' => [\n'title' => $this->findTranslation($this->text),\n'path' => $url,\n'handle' => $handle,\n],\n'html' => $html,\n]);\n}", "CodeBleu_score": 78.58495304439079}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\nforeach ($contacts as $contact) {\ntry {\n$contact->delete();\n} catch (Exception $e) {\n$request->session()->flash('error', 'There was an error deleting the selected contacts.');\n\nreturn redirect()->route('contacts.index');\n}\n}\n\n$request->session()->flash('success', 'The selected contacts were deleted.');\n\nreturn redirect()->route('contacts.index');\n}", "CodeBleu_score": 45.20106872801557}, {"code": "<?\npublic function deleteContacts($request){\n\t\n//    $contacts = $this->getSelectedRecords($request);\n\n//    foreach ($contacts as $contact) {\n//        try {\n//            $contact->delete();\n//        } catch (Exception $e) {\n//            $this->setError('delete_error', $e->getMessage());\n//        }\n//    }\n\n//    $this->setMessage('delete_success', 'contacts_deleted');\n}", "CodeBleu_score": 7.036858643032399}, {"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getSelectedRecords($request, 'user');\n\t\t$contacts->each(function ($contact) {\n\t\t\t$contact->delete();\n\t\t});\n\t\t$this->flashSuccess('contacts.deleted');\n\t} catch (Exception $e) {\n\t\t$this->flashError('contacts.delete_failed');\n\t}\n}", "CodeBleu_score": 50.82146689747816}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\t$deleted = [];\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t\t$deleted[] = $transaction->id;\n\t\t} catch (Exception $e) {\n\t\t\t$this->flashMessage('error', 'An error occurred while deleting the transaction.');\n\t\t}\n\t}\n\n\tif (count($deleted)) {\n\t\t$this->flashMessage('success', 'The transaction has been deleted.');\n\t}\n\n\treturn redirect()->route('transactions.index');\n}", "CodeBleu_score": 50.498224917094035}, {"code": "<?\npublic function deleteTransactions($request){\n\ttry {\n$this->deleteSelectedRecords($request);\n\n$this->flashSuccessMessage('The transactions have been deleted successfully.');\n} catch (Exception $e) {\n$this->flashErrorMessage($e->getMessage());\n}\n\nreturn redirect()->route('transactions.index');\n}", "CodeBleu_score": 27.732117164008642}, {"code": "<?\npublic function deleteTransactions($request){\n\t\ttry {\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\t\t$this->dispatch(new DeleteTransactionsJob($transactions));\n\n\t\t$request->session()->flash('success', 'Transactions deleted successfully!');\n\t} catch (\\Exception $e) {\n\t\t$request->session()->flash('error', 'Unable to delete transactions. Please try again.');\n\t}\n}", "CodeBleu_score": 47.8799669098082}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\t$this->validator = $validator;\n\treturn $this;\n}", "CodeBleu_score": 9.920681625560933}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (! $this->has($this->validationRules)) {\n\t\tthrow new \\InvalidArgumentException(\"No validation rules defined for {$this->validationRules}\");\n\t}\n\n\t$validator = $this->prepareValidator($validator);\n\n\t$validator->setRules($this->prepareRules($this->get($this->validationRules)));\n\n\t$this->validateWith($validator);\n\n\treturn $validator;\n}", "CodeBleu_score": 20.91128879628813}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (! $validator instanceof Validator) {\n\t\tthrow new InvalidArgumentException(\n\t\t\"The validator must be an instance of \".Validator::class);\n\t}\n\n\t$this->validator = $validator;\n\n\t$this->validator->setData($this->all());\n\n\t$this->validator->setRules($this->prepareRules($this->rules()));\n\n\t$this->validator->setMessages($this->messages());\n\n\t$this->validator->setFilters($this->filters());\n\n\t$this->validator->setLabels($this->labels());\n\n\t$this->validator->setPresenceVerifier($this->getPresenceVerifier());\n\n\t$this->validator->setSessionStore($this->getSessionStore());\n\n\t$this->validator->setTranslator($this->getTranslator());\n\n\t$this->validator->setContainer($this->container);\n\n\t$this->validator->after(function ($validator) {\n\t\tif (method_exists($this, 'withValidator')) {\n\t\t\t$this->withValidator($validator);\n\t\t}\n\t});\n\n\treturn $this;\n}", "CodeBleu_score": 22.992660317955675}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->shouldUpdate(...$arguments)) {\n\t\t$this->update(...$arguments);\n\t}\n}", "CodeBleu_score": 10.126554954469974}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->shouldUpdate(...$arguments);\n}", "CodeBleu_score": 8.69128631521816}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->initializeUpdate(...$arguments);\n}", "CodeBleu_score": 8.71152145332135}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$limit = request('limit', 10);\n\t$order = request('order', 'asc');\n\t$query->orderBy($sort, $order);\n\tif (request('json')) {\n\t\treturn $query->get();\n\t} else {\n\t\treturn $query->paginate($limit);\n\t}\n}", "CodeBleu_score": 34.486166806864354}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t-    $request = \\Request::instance();\n-    $search = $request->input('search');\n-    $limit = $request->input('limit');\n-    $offset = $request->input('offset');\n-    $sort = $request->input('sort');\n-    $order = $request->input('order');\n-    $filter = $request->input('filter');\n-    $filter = json_decode($filter);\n-    $query = $this->applySearch($query, $search);\n-    $query = $this->applyFilter($query, $filter);\n-    $query = $this->applySort($query, $sort, $order);\n-    $query = $this->applyPagination($query, $limit, $offset);\n-    if ($request->expectsJson()) {\n-        return $query->get();\n-    }\n-    return $query;\n+    $request = Request::instance();\n+    $search = $request->input('search');\n+    $limit = $request->input('limit');\n+    $offset = $request->input('offset');\n+    $sort = $request->input('sort');\n+    $order = $request->input('order');\n+    $filter = $request->input('filter');\n+    $filter = json_decode($filter);\n+    $query = $this->applySearch($query, $search);\n+    $query = $this->applyFilter($query, $filter);\n+    $query = $this->applySort($query, $sort, $order);\n+    $query = $this->applyPagination($query, $limit, $offset);\n+    if ($request->expectsJson()) {\n+        return $query->get();\n+    }\n+    return $query;\n }", "CodeBleu_score": 33.601650733335894}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t", "CodeBleu_score": 10.364635364635365}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\n\tif ($model->status == 'paid') {\n\t\t$open = 0;\n\t\t$overdue = 0;\n\t} else if ($model->status == 'partial') {\n\t\t$open = $model->total;\n\t\t$overdue = 0;\n\n\t\tforeach ($model->transactions as $transaction) {\n\t\t\t$open = $open - $transaction->amount;\n\t\t}\n\t} else if ($model->status == 'open') {\n\t\tif (strtotime($model->due_date) > time()) {\n\t\t\t$open = $model->total;\n\t\t} else {\n\t\t\t$open = $model->total;\n\t\t\t$overdue = $model->total;\n\t\t}\n\t}\n\n\treturn array(\n\t\t'open' => $open,\n\t\t'overdue' => $overdue\n\t);\n}", "CodeBleu_score": 39.94686832242372}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\t$totalAmount = 0;\n\t$totalPaid = 0;\n\n\tif ($model->status == 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\t$totalAmount = $model->amount;\n\t\t$totalPaid = $model->paid;\n\t\t$openAmount = $totalAmount - $totalPaid;\n\t\t$overdueAmount = 0;\n\t\tif ($model->due_date) {\n\t\t\t$now = new \\DateTime();\n\t\t\t$dueDate = new \\DateTime($model->due_date);\n\t\t\t$interval = $now->diff($dueDate);\n\t\t\tif ($interval->days > 0) {\n\t\t\t\t$overdueAmount = $totalAmount - $totalPaid;\n\t\t\t}\n\t\t}\n\t}\n\treturn [\n\t\t'openAmount' => $openAmount,\n\t\t'overdueAmount' => $overdueAmount,\n\t\t'totalAmount' => $totalAmount,\n\t\t'totalPaid' => $totalPaid,\n\t];\n}", "CodeBleu_score": 35.032265127832616}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\tif ($model->status == 'paid') {\n\t\t$openAmount = 0;\n\t\t$overdueAmount = 0;\n\t} else {\n\t\t$openAmount = $model->total;\n\t\t$overdueAmount = $model->total;\n\n\t\tif ($model->due_date) {\n\t\t\t$dueDate = new DateTime($model->due_date);\n\t\t\t$now = new DateTime();\n\n\t\t\tif ($dueDate < $now) {\n\t\t\t\t$overdueAmount = $model->total - $model->paid;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [\n\t\t'open_amount' => $openAmount,\n\t\t'overdue_amount' => $overdueAmount\n\t];\n}", "CodeBleu_score": 35.24093086321814}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: (Paginator::resolveCurrentPage($pageName)?: 1);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->model->forPage($page, $perPage)->get($columns);\n\t$total = $this->model->toBase()->getCountForPagination();\n\treturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 65.58787807187028}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: (Paginator::resolveCurrentPage($pageName)?: 1);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->model->forPage($page, $perPage)->get($columns);\n\t$total = $this->model->toBase()->getCountForPagination();\n\treturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 65.58787807187028}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: (Paginator::resolveCurrentPage()?: 1);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$this->setCount($perPage, $page);\n\t$results = $this->model->forPage($page, $perPage)->get($columns);\n\t$paginator = new Paginator($results, $this->getCount(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n\treturn $paginator;\n}", "CodeBleu_score": 63.27979684603221}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\tglobal $db;\n\t$db->beginTransaction();\n\t$reconciliations = $this->getReconciliations($request);\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$this->reconcileReconciliation($reconciliation);\n\t}\n\t$db->commit();\n}", "CodeBleu_score": 27.62674791186323}, {"code": "<?\npublic function reconcile($request){\n\t\t$this->load->model('reconciliation_model');\n\n\t$this->db->trans_start();\n\n\t$reconciliations = $this->reconciliation_model->get_reconciliations($request);\n\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$this->reconciliation_model->reconcile($reconciliation);\n\t}\n\n\t$this->db->trans_complete();\n}", "CodeBleu_score": 29.607664592531435}, {"code": "<?\npublic function reconcile($request){\n\t\t$this->validateRequest($request);\n\t$this->validateDateRange($request);\n\t$this->validateAccountID($request);\n\t$this->validateReconciliationType($request);\n\t$this->validateReconciliationStatus($request);\n\t$this->validateReconciliationID($request);\n\t$this->validateReconciliationAmount($request);\n\n\t$reconciliation = Reconciliation::find($request->reconciliation_id);\n\t$reconciliation->status = $request->reconciliation_status;\n\t$reconciliation->amount = $request->reconciliation_amount;\n\t$reconciliation->save();\n\n\t$reconciliations = Reconciliation::where('reconciliation_id', $request->reconciliation_id)->get();\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$reconciliation->status = $request->reconciliation_status;\n\t\t$reconciliation->save();\n\t}\n\n\t$transactions = Transaction::where('account_id', $request->account_id)\n\t\t->where('date', '>=', $request->start_date)\n\t\t->where('date', '<=', $request->end_date)\n\t\t->get();\n\tforeach ($transactions as $transaction) {\n\t\t$transaction->status = $request->reconciliation_status;\n\t\t$transaction->save();\n\t}\n\n\treturn $reconciliation;\n}", "CodeBleu_score": 36.92011160227354}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\t$this->deleteExistingInvitations();\n\t$token = $this->generateToken();\n\t$invitation = $this->createInvitation($token);\n\t$this->dispatchNotification($invitation);\n\treturn $invitation;\n}", "CodeBleu_score": 11.679572846655661}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t// Get all existing invitations for the user\n\t$invitations = $this->invitationRepository->findBy(['user' => $this->user]);\n\n\t// Delete all existing invitations\n\tforeach ($invitations as $invitation) {\n\t\t$this->invitationRepository->delete($invitation);\n\t}\n\n\t// Generate a new invitation token\n\t$invitationToken = $this->invitationTokenGenerator->generate();\n\n\t// Create a new invitation\n\t$invitation = new UserInvitation();\n\t$invitation->setToken($invitationToken);\n\t$invitation->setUser($this->user);\n\t$this->invitationRepository->save($invitation);\n\n\t// Attempt to dispatch a notification job to notify the user\n\ttry {\n\t\t$this->notificationDispatcher->dispatch(new UserInvitationNotification($this->user, $invitationToken));\n\t} catch (NotificationException $exception) {\n\t\tthrow new \\Exception('Failed to dispatch notification job: '. $exception->getMessage());\n\t}\n\n\t// Return the newly created invitation\n\treturn $invitation;\n}", "CodeBleu_score": 32.9531951518589}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->user;\n\t$token = $this->token;\n\n\t$this->deleteExistingInvitations($user);\n\n\t$invitation = $this->createInvitation($user, $token);\n\n\t$this->dispatchNotificationJob($invitation);\n\n\treturn $invitation;\n}", "CodeBleu_score": 12.484251990272433}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled()) {\n\t\tthrow new \\Exception(\"This transaction is already reconciled. Please check the reconciliation status of this transaction.\", 1611701688);\n\t}\n\tif ($this->isTransfer()) {\n\t\tthrow new \\Exception(\"This transaction is a transfer transaction and cannot be authorized.\", 1611701689);\n\t}\n}", "CodeBleu_score": 20.446294424909244}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled()) {\n\t\tthrow new Exception(\"Transaction is reconciled. Cannot authorize.\");\n\t}\n\n\tif ($this->isTransfer()) {\n\t\tthrow new Exception(\"Transfer transactions cannot be authorized.\");\n\t}\n}", "CodeBleu_score": 19.454559509320028}, {"code": "<?\npublic function authorize(): void{\n\t\tif ($this->isReconciled()) {\n\t\tthrow new Exception(\"This transaction is already reconciled. It cannot be authorized again.\", 1613030547);\n\t}\n\tif ($this->isTransfer()) {\n\t\tthrow new UnauthorizedException(\"This transaction is a transfer transaction and cannot be authorized.\", 1613030548);\n\t}\n}", "CodeBleu_score": 18.318675428871593}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (this.tenantId == 0) {\n\t\treturn false;\n\t}\n\tif (tableName.equals(\"users\") || tableName.equals(\"roles\") || tableName.equals(\"role_permissions\") || tableName.equals(\"permissions\") || tableName.equals(\"tenant_roles\") || tableName.equals(\"tenant_permissions\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 16.239125221153635}, {"code": "public boolean doTableFilter(String tableName){\n\t", "CodeBleu_score": 1.5687583116229795}, {"code": "public boolean doTableFilter(String tableName){\n\t", "CodeBleu_score": 1.5687583116229795}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.32520802003512}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 89.60914056154388}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\nBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.51528973403983}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tres.code = 200;\n\t\tres.data = platformConfig;\n\t} catch(Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 91.87901279384765}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 91.68885436739134}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 91.68885436739134}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(systemService.getSystemConfig());\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error retrieving current system configuration information\", e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseData(\"An error occurred while retrieving the current system configuration information\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 27.678488235870685}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setResponseData(configService.getCurrentInfo());\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception while getting current system configuration\", e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setErrorMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 28.256657250349605}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(SystemConfig.getInstance().get());\n\t} catch (Exception e) {\n\t\tresponse.setCode(500);\n\t\tresponse.setData(e.getMessage());\n\t\tlog.error(\"Error retrieving current system configuration.\", e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 28.21084998526735}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tAccount account=new Account();\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountSubType(obj.getString(\"accountSubType\"));\n\t\taccount.setAccountName(obj.getString(\"accountName\"));\n\t\taccount.setAccountDescription(obj.getString(\"accountDescription\"));\n\t\taccount.setAccountNumber(obj.getString(\"accountNumber\"));\n\t\taccount.setAccountSerialNo(obj.getString(\"accountSerialNo\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountBalance(obj.getString(\"accountBalance\"));\n\t\taccount.setAccountDefault(obj.getString(\"accountDefault\"));\n\t\taccount.setAccountEnabled(obj.getString(\"accountEnabled\"));\n\t\taccount.setAccountCreatedBy(request.getSession().getAttribute(\"username\").toString());\n\t\taccount.setAccountCreatedDate(new Date());\n\t\taccount.setAccountModifiedBy(request.getSession().getAttribute(\"username\").toString());\n\t\taccount.setAccountModifiedDate(new Date());\n\t\tresult=accountMapperEx.insertAccount(account);\n\t}catch(Exception e){\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 32.5137940515618}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\t// get the user id from the request\n\t\tString userId = request.getHeader(\"userId\");\n\t\tString userName = request.getHeader(\"userName\");\n\t\tString ipAddress = request.getHeader(\"ipAddress\");\n\t\tString userAgent = request.getHeader(\"userAgent\");\n\t\t// get the account from the JSON object\n\t\tAccount account = new Account();\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\t\taccount.setAmount(obj.getDouble(\"amount\"));\n\t\taccount.setCurrency(obj.getString(\"currency\"));\n\t\taccount.setUserId(userId);\n\t\taccount.setUserName(userName);\n\t\taccount.setIpAddress(ipAddress);\n\t\taccount.setUserAgent(userAgent);\n\t\t// set the default flag to false\n\t\taccount.setDefaultFlag(false);\n\t\t// determine if the account should be set as the default based on existing accounts\n\t\tif (accountMapperEx.getAccountCount(userId) == 0) {\n\t\t\taccount.setDefaultFlag(true);\n\t\t}\n\t\t// set the enabled flag to true\n\t\taccount.setEnabled(true);\n\t\t// insert the account into the database\n\t\tresult = accountMapperEx.insertAccount(account);\n\t\t// log the operation\n\t\tif (result > 0) {\n\t\t\tlogger.info(\"Account inserted successfully.\");\n\t\t} else {\n\t\t\tlogger.error(\"Account insert failed.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 40.91545162880322}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tAccount account=new Account();\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\t\taccount.setAmount(0.0);\n\t\taccount.setDefault(0);\n\t\taccount.setEnabled(1);\n\t\taccount.setCreatedBy(request.getSession().getAttribute(\"username\").toString());\n\t\taccount.setCreatedDate(new Date());\n\t\taccount.setUpdatedBy(request.getSession().getAttribute(\"username\").toString());\n\t\taccount.setUpdatedDate(new Date());\n\t\tresult=accountMapperEx.insertAccount(account);\n\t\tlogger.info(\"Account inserted successfully\");\n\t}catch(Exception e){\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 37.72429972128171}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error occurred while counting accounts with name {} and serial number {}: {}\", name, serialNo, e.getMessage());\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.121630042634713}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error while counting accounts with name and serial number\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.4099001665964}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceMapper.call(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception occurred while counting accounts with the specified name and serial number.\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.67195444595182}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting depot item with id \" + id, e);\n\t\tthrow new Exception(\"Error deleting depot item with id \" + id, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 55.76283541400235}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.65264944504468}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while deleting depot item with ID: \" + id + \" from the database\", e);\n\t\tthrow new Exception(\"Error while deleting depot item with ID: \" + id + \" from the database\", e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 57.37444415768347}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 37.75015085717685}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = HttpClientBuilder.create().build();\n\tString url = getProtocol() + getHost() + getPort() + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\tHttpGet request = new HttpGet(url);\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpResponse = httpClient.execute(request);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\treturn true;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 41.18790014708481}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\treturn true;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 36.86687177866156}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"edge\";\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpGet.addHeader(\"Content-Type\", \"application/json\");\n\t\thttpGet.addHeader(\"Accept\", \"application/json\");\n\t\thttpGet.addHeader(\"Authorization\", \"Basic \" + getAuth());\n\t\tList<NameValuePair> urlParameters = new ArrayList<NameValuePair>();\n\t\turlParameters.add(new BasicNameValuePair(\"edgeType\", edgeType));\n\t\turlParameters.add(new BasicNameValuePair(\"fromType\", fromType));\n\t\turlParameters.add(new BasicNameValuePair(\"toType\", toType));\n\t\turlParameters.add(new BasicNameValuePair(\"from\", from));\n\t\turlParameters.add(new BasicNameValuePair(\"to\", to));\n\t\thttpGet.setEntity(new UrlEncodedFormEntity(urlParameters));\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\tif (statusCode!= 200) {\n\t\t\tthrow new RuntimeException(\"Failed : HTTP error code : \" + statusCode);\n\t\t}\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tString response = EntityUtils.toString(entity);\n\t\tJSONObject json = new JSONObject(response);\n\t\tif (json.has(\"key\")) {\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.28674554806554}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tString url = getUrl(projectName, edgeType, fromType, toType, from, to);\n\t\thttpClient = HttpClientBuilder.create().build();\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tJSONObject json = new JSONObject(response);\n\t\t\tif (json.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 46.29165605196337}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"edges\";\n\t\tHttpUriRequest request = new HttpGet(url);\n\t\trequest.addHeader(\"Content-Type\", \"application/json\");\n\t\trequest.addHeader(\"Accept\", \"application/json\");\n\t\trequest.addHeader(\"Authorization\", getAuthorization());\n\t\trequest.addHeader(\"X-Stream-ID\", getStreamId());\n\t\tList<NameValuePair> params = new ArrayList<NameValuePair>();\n\t\tparams.add(new BasicNameValuePair(\"edgeType\", edgeType));\n\t\tparams.add(new BasicNameValuePair(\"fromType\", fromType));\n\t\tparams.add(new BasicNameValuePair(\"toType\", toType));\n\t\tparams.add(new BasicNameValuePair(\"from\", from));\n\t\tparams.add(new BasicNameValuePair(\"to\", to));\n\t\trequest.setEntity(new UrlEncodedFormEntity(params, \"UTF-8\"));\n\t\thttpResponse = httpClient.execute(request);\n\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\tif (statusCode == 200) {\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject json = new JSONObject(response);\n\t\t\tif (json.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 47.68355220417912}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"event and message cannot be null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(new Date());\n\tString json = gson.toJson(event);\n\tString topic = \"test\";\n\tif (event.getTarget()!= null) {\n\t\ttopic = event.getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 44.585166014872044}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tSystem.out.println(\"Event or message is null\");\n\t\treturn;\n\t}\n\tLocation location = event.getLocation();\n\tif (location == null) {\n\t\tlocation = acquireTestingLocation();\n\t}\n\tevent.setTime(new Date());\n\tString json = gson.toJson(event);\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 38.53153258543889}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tSystem.out.println(\"Event or message is null.\");\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = event.toJson();\n\tString topic = \"test\";\n\tif (event.getTarget()!= null) {\n\t\ttopic = event.getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 43.487112749227755}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// 1. Initialize OSSClient.\n\tOSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\t// 2. Create the object.\n\tossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\t// 3. Shut down OSSClient.\n\tossClient.shutdown();\n\t// 4. Get the URL of the uploaded object.\n\treturn ossClient.generatePresignedUrl(config.getBucketName(), objName, new Date(System.currentTimeMillis() + 3600 * 1000)).toString();\n}", "CodeBleu_score": 32.35931752932747}, {"code": "public String upload(String objName, byte[] content){\n\t// 1. Create an OSSClient instance.\nOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n// 2. Create a PutObjectRequest instance.\nPutObjectRequest putObjectRequest = new PutObjectRequest(config.getBucketName(), objName, new ByteArrayInputStream(content));\n// 3. Call the OSSClient instance's putObject method to upload the file.\nPutObjectResult putObjectResult = ossClient.putObject(putObjectRequest);\n// 4. Get the URL of the uploaded object.\nString url = putObjectResult.getETag();\n// 5. Shut down the OSSClient instance.\nossClient.shutdown();\nreturn url;\n}", "CodeBleu_score": 33.35252295318174}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Create an OSS client to upload a file.\n\tOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\t// Create the object with the specified name.\n\tPutObjectResult putResult = ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\treturn putResult.getETag();\n}", "CodeBleu_score": 32.75685868666006}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\toLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\nreturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n}\nreturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 24.92352020191435}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\toLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\nreturn new LocationInfo();\n}\nreturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 23.525642612415666}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\toLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\nreturn new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n}\nreturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 25.061650063542956}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (esClient == null) {\n\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tif (hosts.isEmpty()) {\n\t\t\t\tthrow new IllegalArgumentException(\"No hosts specified for Elasticsearch cluster\");\n\t\t\t}\n\t\t\tesClient = new RestClientBuilder().setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t\t@Override\n\t\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\t\treturn httpClientBuilder.setSSLHostnameVerifier(NoopHostnameVerifier.INSTANCE);\n\t\t\t\t}\n\t\t\t}).setFailureListener(new RestClient.FailureListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onFailure(Node node) {\n\t\t\t\t\tlog.error(\"Failed to connect to Elasticsearch node: \" + node.getAddress());\n\t\t\t\t}\n\t\t\t}).build().add(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t\tesClient.setFailureListener(new RestClient.FailureListener() {\n\t\t\t\t@Override\n\t\t\t\tpublic void onFailure(Node node) {\n\t\t\t\t\tlog.error(\"Failed to connect to Elasticsearch node: \" + node.getAddress());\n\t\t\t\t}\n\t\t\t});\n\t\t\tesClient.performRequest(new Request(\"GET\", \"/\"));\n\t\t\tesClient.performRequest(new Request(\"GET\", \"/_cluster/health\"));\n\t\t\tesClient.performRequest(new Request(\"GET\", \"/_cluster/state\"));\n\t\t}\n\t\tif (esClientHighLevel == null) {\n\t\t\tesClientHighLevel = new RestHighLevelClient(esClient);\n\t\t}\n\t}\n}", "CodeBleu_score": 37.84315205466584}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t", "CodeBleu_score": 1.633890747576084}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\tesClient = new ElasticsearchClient(parseHosts(clusterHostList, clusterHostPort), clusterUsername, clusterPassword);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 21.458190888192004}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostsAndPorts = clusterHostList.split(\",\");\n\tfor (String hostAndPort : hostsAndPorts) {\n\t\tString[] hostAndPortParts = hostAndPort.split(\":\");\n\t\tString host = hostAndPortParts[0];\n\t\tint port = clusterPort;\n\t\tif (hostAndPortParts.length > 1) {\n\t\t\tport = Integer.parseInt(hostAndPortParts[1]);\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.184036463455236}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> clusterHosts = new ArrayList<HttpHost>();\n\tString[] hosts = clusterHostList.split(\",\");\n\tfor (String host : hosts) {\n\t\tString[] hostAndPort = host.split(\":\");\n\t\tif (hostAndPort.length == 1) {\n\t\t\tclusterHosts.add(new HttpHost(hostAndPort[0], clusterPort));\n\t\t} else {\n\t\t\tclusterHosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n\t\t}\n\t}\n\treturn clusterHosts;\n}", "CodeBleu_score": 50.669643117520835}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostArray = clusterHostList.split(\",\");\n\tfor (String host : hostArray) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0];\n\t\tint port = (hostParts.length > 1)? Integer.parseInt(hostParts[1]) : clusterPort;\n\t\thosts.add(new HttpHost(hostName, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 42.75087440409149}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\ttry {\n\t\t\t// Get the next task from the queue.\n\t\t\tTask task = this.taskQueue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task!= null) {\n\t\t\t\t// Process the task.\n\t\t\t\tif (task.getType() == Task.Type.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\t\t// Extract the recipient number and message data.\n\t\t\t\t\tString toNumber = plainTextMessageTask.getToNumber();\n\t\t\t\t\tString message = plainTextMessageTask.getMessage();\n\t\t\t\t\t// Validate the data.\n\t\t\t\t\tif (toNumber == null || toNumber.length() == 0) {\n\t\t\t\t\t\tSystem.out.println(\"SMS to \" + toNumber + \" failed.\\t toNumber is null\");\n\t\t\t\t\t} else if (message == null || message.length() == 0) {\n\t\t\t\t\t\tSystem.out.println(\"SMS to \" + toNumber + \" failed.\\t message is null\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Send the message.\n\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"SMS to \" + task.getToNumber() + \" failed.\\t task type is not plain text message\");\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\tSystem.out.println(\"SMS polling interrupted.\");\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 27.473948075859767}, {"code": "protected void pollingWork() throws InterruptedException{\n\t", "CodeBleu_score": 0.9021038230038907}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\ttry {\n\t\t\tString task = getTask();\n\t\t\tif (task!= null) {\n\t\t\t\tString taskType = getTaskType(task);\n\t\t\t\tif (taskType.equals(TASK_TYPE_PLAIN_TEXT_MESSAGE)) {\n\t\t\t\t\tString toNumber = getTaskToNumber(task);\n\t\t\t\t\tString message = getTaskMessage(task);\n\t\t\t\t\tif (toNumber!= null && message!= null) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tSystem.out.println(\"Failed to send message to \" + toNumber + \".\");\n\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tThread.sleep(30000);\n\t}\n}", "CodeBleu_score": 31.967149966335217}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseContent = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.info(\"Response Content: \" + responseContent);\n\t\treturn responseContent;\n\t} finally {\n\t\tresponse.close();\n\t}\n}", "CodeBleu_score": 64.93681196192611}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpResponse response = null;\n\tString responseContent = null;\n\ttry {\n\t\tHttpGet get = new HttpGet(uri);\n\t\tresponse = getHttpClient().execute(get);\n\t\tHttpEntity entity = response.getEntity();\n\t\tresponseContent = EntityUtils.toString(entity, \"UTF-8\");\n\t\tSystem.out.println(responseContent);\n\t} finally {\n\t\tif (response!= null) {\n\t\t\tresponse.close();\n\t\t}\n\t}\n\treturn responseContent;\n}", "CodeBleu_score": 48.164348346884736}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tresponse = getHttpClient().execute(httpget);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.info(content);\n\t\treturn content;\n\t} finally {\n\t\tif (response!= null) {\n\t\t\tresponse.close();\n\t\t}\n\t}\n}", "CodeBleu_score": 56.082518073000834}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tfactory.setNamespaceAware(true);\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode root = doc.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(root, doTrim);\n\tif (rootValue == null){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) rootValue[1];\n}", "CodeBleu_score": 47.43329542971643}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tif (StringUtils.isBlank(messageXmlStr)){\n\t\treturn null;\n\t}\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument document = db.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode root = document.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(root, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootValue[0].toString(), rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 56.80726687635339}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode rootNode = doc.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put((String) rootValue[0], rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 63.47572282665145}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t", "CodeBleu_score": 3.839633916411321}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tlog.info(\"Order #{} is eligible for auto-processing\", orderRecord.getDocumentNo());\n\t\t//dev-note: enqueue the order to be processed by the async batch observer\n\t\tasyncBatchObserver.observeAsyncBatch(AsyncBatchId.ofRepoId(orderRecord.getC_Async_Batch_ID()));\n\t\t//dev-note: log the action\n\t\tlog.info(\"Enqueued order #{} for automatic shipping and invoicing\", orderRecord.getDocumentNo());\n\t}\n\telse\n\t{\n\t\tlog.info(\"Order #{} is not eligible for auto-processing\", orderRecord.getDocumentNo());\n\t\t//dev-note: check to see if the order is not already involved in another async job\n\t\tfinal AsyncBatchId asyncBatchId = AsyncBatchId.ofRepoIdOrNull(orderRecord.getC_Async_Batch_ID());\n\t\tif (asyncBatchId!= null)\n\t\t{\n\t\t\tlog.info(\"Order #{} is already involved in another async job\", orderRecord.getDocumentNo());\n\t\t\treturn;\n\t\t}\n\t\t//dev-note: log the action\n\t\tlog.info(\"Scheduling creation of missing shipment schedules for order #{}\", orderRecord.getDocumentNo());\n\t\t//dev-note: schedule the creation of missing shipment schedules\n\t\tscheduleCreateMissingShipmentSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 39.71088470978462}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tfinal String transactionName = generateTransactionName(orderRecord);\n\n\t\tlog.info(\"Order {} is eligible for auto-processing. Enqueueing transaction {}.\", orderRecord.get_ID(), transactionName);\n\n\t\tasyncBatchObserver.observeAsyncBatch(AsyncBatchId.ofRepoId(orderRecord.getC_Async_Batch_ID()));\n\n\t\tasyncBatchObserver.enqueueTransaction(transactionName, () -> {\n\t\t\tlog.info(\"Executing transaction {}.\", transactionName);\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tgenerateSchedules(orderRecord);\n\t\t\t}\n\t\t\tcatch (final Exception e)\n\t\t\t{\n\t\t\t\tlog.error(\"Error while generating schedules for order {}.\", orderRecord.get_ID(), e);\n\t\t\t}\n\t\t});\n\t}\n\telse\n\t{\n\t\tlog.info(\"Order {} is not eligible for auto-processing. Scheduling missing shipment schedules.\", orderRecord.get_ID());\n\n\t\tscheduleMissingShipmentSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 36.636052986259074}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = $this->findForPassport($request->email);\nif ($user && $user->password && $this->hasher->check($request->password, $user->password)) {\n    return $user;\n}\n\n$this->fireFailedEvent($request, $user);\n\n$this->throwFailedAuthenticationException($request);\n\nreturn null;\n}", "CodeBleu_score": 31.897100880810665}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\this->getUserByCredentials: protected function getUserByCredentials(Request $request):?User {\n$this->user: protected?User $user = null;\n$this->user: protected?User $user = null;\n        $user = $this->findUser($request);\n\n        if (! $user ||! $this->validateCredentials($user, $request)) {\n            return null;\n        }\n\n        return $user;\n    }\n$this->findUser: protected function findUser(Request $request):?User {\n$this->user: protected?User $user = null;\n$this->user: protected?User $user = null;\n        $user = $this->userProvider->retrieveByCredentials($request);\n\n        if (! $user) {\n            return null;\n        }\n\n        if (! $this->user->hasVerifiedEmail()) {\n            return null;\n        }\n\n        return $user;\n    }\n$this->userProvider: protected UserProviderContract $userProvider;\n$this->userProvider: protected UserProviderContract $userProvider;\n        return Hash::check($request->password, $user->getAuthPassword());\n    }", "CodeBleu_score": 41.52514830060342}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementRequestLimit($request);\n\n\t$message = $this->getFailedAuthenticationMessage($request);\n\n\tthrow new ValidationException(\n\t\t[\n\t\t\t$this->usernameParameter => $message,\n\t\t],\n\t\t$message\n\t);\n}", "CodeBleu_score": 44.870360562158965}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->requestLimit->increment();\n\n\tthrow new ValidationException(\n\t\t[\n\t\t\t'username' => [\n\t\t\t\t'Authentication failed.',\n\t\t\t],\n\t\t],\n\t\t'Invalid credentials.'\n\t);\n}", "CodeBleu_score": 21.84810630020429}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->authRequestLimit->increment();\n\n\t$message = sprintf(\n\t\t'Authentication failed. Please check your credentials and try again. If this problem persists, contact the site administrator.',\n\t\t$request->getUri()\n\t);\n\n\tthrow new ValidationException($message);\n}", "CodeBleu_score": 45.13200263372508}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t\t$userId = $this->session->get(self::SESSION_USER_ID);\n\t$user = $this->userRepository->getUserById($userId);\n\t$response = new WebAuthnAssertionResponse($user);\n\t$response->setRememberMe($this->session->get(self::SESSION_REMEMBER_ME));\n\treturn $response;\n}", "CodeBleu_score": 25.811783190747928}, {"code": "<?\npublic function toResponse($request){\n\t\t$session = $this->session;\n\t$user_id = $session->get('user_id');\n\t$user = $this->userRepository->getUserById($user_id);\n\tif ($user) {\n\t\t$authenticator = $this->authenticator;\n\t\t$authenticator->prepareChallenge($user);\n\t\t$response = $authenticator->getResponse();\n\t\t$response->data = [\n\t\t\t'is_two_factor_auth_enabled' => $user->isTwoFactorAuthEnabled(),\n\t\t\t'remember_me_enabled' => $session->get('remember_me')\n\t\t];\n\t\treturn $response;\n\t} else {\n\t\treturn new Response(400, 'No user found');\n\t}\n}", "CodeBleu_score": 37.09164070996265}, {"code": "<?\npublic function toResponse($request){\n\t\t$response = new \\Symfony\\Component\\HttpFoundation\\JsonResponse();\n\t$response->headers->set('Content-Type', 'application/json');\n\n\t$session = $this->session->get('webauthn');\n\tif ($session == null) {\n\t\t$response->setData(array('status' => 'error','message' => 'Session not found'));\n\t\treturn $response;\n\t}\n\n\t$user = $this->userRepository->find($session['user_id']);\n\tif ($user == null) {\n\t\t$response->setData(array('status' => 'error','message' => 'User not found'));\n\t\treturn $response;\n\t}\n\n\t$challenge = $this->webauthn->generateChallenge();\n\t$response->setData(array(\n\t\t'status' => 'ok',\n\t\t'challenge' => $challenge,\n\t\t'user_id' => $user->getId(),\n\t\t'webauthn' => $user->getWebauthn()\n\t));\n\n\treturn $response;\n}", "CodeBleu_score": 33.64036932218834}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuser = $this->getUserOrCreate($socialite);\n$this->checkUserAssociation($request, $user, $driver);\n$token = $this->createUserToken($user, $driver, $socialite);\n$this->loginUser($request, $token);\nreturn $user;\n}", "CodeBleu_score": 30.30943809725094}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuserToken = $this->getUserToken($driver, $socialite->getId());\n$user = $this->getUserOrCreate($socialite);\n$this->checkUserAssociation($request, $user, $driver);\n$this->createUserToken($user, $driver, $socialite);\nreturn $user;\n}", "CodeBleu_score": 32.6480384043469}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tuserToken = $this->getUserToken($request, $driver, $socialite->getId());\n$user = $userToken? $this->getUserOrCreate($userToken) : $this->createUser($socialite);\n$this->checkUserAssociation($request, $user, $driver);\n$this->createUserToken($user, $driver, $socialite);\nreturn $user;\n}", "CodeBleu_score": 38.83412514557817}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\ts->user: $user = $this->retrieveUser($request);\n\nif ($user === null) {\n    return false;\n}\n\n$this->filterCredentials($request);\n\nif (!$this->validateAssertion($request, $user)) {\n    $this->fireFailedEvent($request, $user);\n    $this->throwFailedAuthenticationException($request);\n\n    return false;\n}\n\nreturn true;\n}", "CodeBleu_score": 55.849469455361266}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\ter = $this->retrieveUser($request);\n\n\tif ($user === null) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->filterCredentials($request);\n\n\tif (!$this->validateAssertion($user, $credentials)) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\t$this->throwFailedAuthenticationException($request);\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 54.17494205339472}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\ttry {\n\t\t$user = $this->userRepository->findByEmail($this->email);\n\t} catch (UserNotFoundException $e) {\n\t\t$this->logger->error('User not found for email address '. $this->email);\n\t\treturn null;\n\t}\n\treturn $user;\n}", "CodeBleu_score": 36.90860496408193}, {"code": "<?\nprivate function user(): ?User{\n\ttry {\n\t\t$user = User::findByEmail($this->email);\n\t\treturn $user;\n\t} catch (Exception $e) {\n\t\t$this->logger->error(\"Error retrieving user: \". $e->getMessage());\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 34.066162118235994}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->email)) {\n\t\t$this->logger->error('No email provided');\n\t\treturn null;\n\t}\n\ttry {\n\t\t$user = $this->userRepository->findByEmail($this->email);\n\t} catch (Exception $e) {\n\t\t$this->logger->error('Error retrieving user by email', ['email' => $this->email]);\n\t\treturn null;\n\t}\n\treturn $user;\n}", "CodeBleu_score": 46.633239139966726}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tf (config('scout.driver') ==='meilisearch') {\n    $this->artisan('scout:flush', [\n        '--force' => true,\n    ]);\n    $this->info('Meilisearch indexes flushed.');\n}\n}", "CodeBleu_score": 21.311785415412082}, {"code": "<?\nprotected function scoutFlush(): void{\n\tf (config('scout.driver') ==='meilisearch') {\n$indexes = config('scout.indexes');\nforeach ($indexes as $index => $options) {\n$table = $options['meilisearch']['index']?? $index;\n$this->artisan('scout:flush', ['model' => $table]);\n}\n$this->info('Scout indexes flushed.');\n}\n}", "CodeBleu_score": 44.07053167708498}, {"code": "<?\nprotected function scoutFlush(): void{\n\tf (config('scout.driver') ==='meilisearch') {\n$indexes = config('scout.indexes');\nforeach ($indexes as $index) {\n$table = $index['meilisearch']['table'];\n$this->artisan(\"scout:flush\", \"scout:flush {$table}\");\n}\n$this->info('Scout indexes flushed.');\n}\n}", "CodeBleu_score": 36.46734541167237}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$this->vcard: $vcard = $resource->getVCard();\n$this->uid: $uid = $vcard->getUid()?? Uid::generate();\n$this->vcard->setUid($uid);\n$this->exporters: $exporters = $this->exporters($resource::class);\n$this->exporters: $exporters->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\nreturn $vcard;\n}", "CodeBleu_score": 25.45221439346247}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$card = $this->retrieveCard($addressBookId, $cardUri);\n\tif ($card) {\n\t\tif ($card instanceof Contact) {\n\t\t\t$this->jobQueue->addJob(new DestroyContactJob($card), Job::PRIORITY_HIGH);\n\t\t} else if ($card instanceof Group) {\n\t\t\t$this->jobQueue->addJob(new DestroyGroupJob($card), Job::PRIORITY_HIGH);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.837596486103465}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$addressBook = $this->addressBookRepository->find($addressBookId);\n\tif ($addressBook == null) {\n\t\treturn false;\n\t}\n\t$card = $this->cardRepository->find($cardUri);\n\tif ($card == null) {\n\t\treturn false;\n\t}\n\tif ($card instanceof Contact) {\n\t\t$this->dispatch(new DeleteContactJob($card));\n\t} elseif ($card instanceof Group) {\n\t\t$this->dispatch(new DeleteGroupJob($card));\n\t}\n\treturn true;\n}", "CodeBleu_score": 30.94280257837526}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t// TODO: Implement deleteCard() method.\n}", "CodeBleu_score": 6.450974931308237}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\t$file = $this->request->getUploadedFile('file');\n\tif (!$file) {\n\t\tthrow new \\Exception('No file uploaded', 400);\n\t}\n\t$leadActivity = new \\App\\Models\\LeadActivity();\n\t$leadActivity->set('leadid', $data['leadid']);\n\t$leadActivity->set('activitytype', $data['activitytype']);\n\t$leadActivity->set('subject', $data['subject']);\n\t$leadActivity->set('description', $data['description']);\n\t$leadActivity->set('activitytype', $data['activitytype']);\n\t$leadActivity->set('assigned_user_id', $data['assigned_user_id']);\n\t$leadActivity->set('createdtime', $data['createdtime']);\n\t$leadActivity->set('createdby', $data['createdby']);\n\t$leadActivity->set('modifiedtime', $data['modifiedtime']);\n\t$leadActivity->set('modifiedby', $data['modifiedby']);\n\t$leadActivity->save();\n\n\t$fileStorage = new \\App\\Models\\FileStorage();\n\t$fileStorage->set('name', $file->getClientFilename());\n\t$fileStorage->set('storage', $file->getStream()->getMetadata('uri'));\n\t$fileStorage->save();\n\n\t$leadActivityFile = new \\App\\Models\\LeadActivityFile();\n\t$leadActivityFile->set('leadactivityid', $leadActivity->get('id'));\n\t$leadActivityFile->set('fileid', $fileStorage->get('id'));\n\t$leadActivityFile->save();\n\n\treturn $leadActivityFile;\n}", "CodeBleu_score": 33.56650527756525}, {"code": "<?\npublic function upload(array $data){\n\t\tif (empty($data['file'])) {\n\t\treturn;\n\t}\n\t$file = $data['file'];\n\t$activity = new LeadActivities();\n\t$activity->set('leadid', $data['leadid']);\n\t$activity->set('activitytype', 'File Uploaded');\n\t$activity->set('subject', $file->getFileName());\n\t$activity->set('activitytype', 'File Uploaded');\n\t$activity->set('description', $file->getFileName());\n\t$activity->set('createdtime', date('Y-m-d H:i:s'));\n\t$activity->set('createdby', $this->currentUser->id);\n\t$activity->save();\n\t$file->move(CRM_Utils_System::crm_get('upload_dir'), $activity->id. '_'. $file->getFileName());\n\t$file->set('activityid', $activity->id);\n\t$file->save();\n}", "CodeBleu_score": 27.319018487995873}, {"code": "<?\npublic function upload(array $data){\n\t\t$lead_activity = $this->createLeadActivity($data);\n\tif ($lead_activity) {\n\t\t$file = $this->uploadFile($lead_activity, $data);\n\t\tif ($file) {\n\t\t\t$file_record = $this->createFileRecord($file, $lead_activity);\n\t\t\treturn $file_record;\n\t\t}\n\t}\n}", "CodeBleu_score": 20.43644515321804}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\ttatusCode = 500;\n$path = 'admin';\n\nif ($exception instanceof ModelNotFoundException) {\n    $statusCode = 404;\n    $path = 'admin';\n} elseif ($exception instanceof PDOException) {\n    $statusCode = 500;\n    $path = 'admin';\n} elseif ($exception instanceof ParseError) {\n    $statusCode = 500;\n    $path = 'admin';\n}\n\nif ($exception instanceof HttpException) {\n    $statusCode = $exception->getStatusCode();\n    $path = 'admin';\n}\n\nreturn $this->response(\"{$path}::errors.{$statusCode}\", $statusCode);\n}", "CodeBleu_score": 37.277903128265585}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t ($exception instanceof ModelNotFoundException) {\nreturn $this->response('admin::errors.404', 404);\n}\n\nif ($exception instanceof PDOException) {\nreturn $this->response('admin::errors.500', 500);\n}\n\nif ($exception instanceof ParseError) {\nreturn $this->response('admin::errors.500', 500);\n}\n\nif ($exception instanceof HttpException) {\nreturn $this->response('admin::errors.'.$exception->getStatusCode(), $exception->getStatusCode());\n}\n\nreturn $this->response('admin::errors.500', 500);\n}", "CodeBleu_score": 33.43827441126968}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tstatusCode = 500;\n\t$path = 'admin';\n\n\tif (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'message' => isset($this->jsonErrorMessages[$statusCode])\n\t\t\t\t? $this->jsonErrorMessages[$statusCode]\n\t\t\t\t: trans('admin::app.common.something-went-wrong')\n\t\t], $statusCode);\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\t$statusCode = 404;\n\t} elseif ($exception instanceof PDOException) {\n\t\t$statusCode = 500;\n\t} elseif ($exception instanceof ParseError) {\n\t\t$statusCode = 500;\n\t}\n\n\treturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 32.99956137135329}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 82.65535839686906}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 82.65535839686906}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 82.65535839686906}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t\t$ids = $this->request->get('ids');\n\t$data = $this->request->get('data');\n\t$count = 0;\n\n\tforeach ($ids as $id) {\n\t\t$activity = $this->Activity->findById($id);\n\t\tif ($activity) {\n\t\t\t$this->Activity->id = $id;\n\t\t\t$this->Activity->save($data);\n\t\t\t$count++;\n\t\t}\n\t}\n\n\t$response = array(\n\t\t'success' => ($count > 0),\n\t\t'count' => $count,\n\t);\n\n\t$this->set(array(\n\t\t'json' => $response,\n\t\t'_serialize' => 'json',\n\t));\n}", "CodeBleu_score": 29.334026914060797}, {"code": "<?\npublic function massUpdate(){\n\t\t// Get the request data\n\t$activityIds = $this->request->getArray('activity_ids');\n\t$isDone = $this->request->getBool('is_done');\n\n\t// If no IDs were specified, return an error\n\tif (!count($activityIds)) {\n\t\treturn $this->returnError('No activity IDs were specified');\n\t}\n\n\t// If the user doesn't have permission to mass update activities, return an error\n\tif (!App::get_module_instance('Activities')->has_permission('mass_update', 'edit')) {\n\t\treturn $this->returnError('You do not have permission to mass update activities');\n\t}\n\n\t// Get the activities\n\t$activities = App::get_module_instance('Activities')->get_activities($activityIds);\n\n\t// If no activities were found, return an error\n\tif (!count($activities)) {\n\t\treturn $this->returnError('No activities were found');\n\t}\n\n\t// Dispatch the 'before_mass_update' event\n\tApp::trigger('before_mass_update', array('activities' => $activities));\n\n\t// Iterate over the activities\n\t$numUpdates = 0;\n\tforeach ($activities as $activity) {\n\t\t// If the activity is done, skip it\n\t\tif ($activity->is_done) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Update the activity\n\t\t$activity->is_done = $isDone;\n\t\t$activity->save();\n\n\t\t// Increment the update count\n\t\t$numUpdates++;\n\t}\n\n\t// Dispatch the 'after_mass_update' event\n\tApp::trigger('after_mass_update', array('activities' => $activities));\n\n\t// Return a JSON response indicating success or failure\n\tif ($numUpdates) {\n\t\treturn $this->returnSuccess('Activities were updated');\n\t} else {\n\t\treturn $this->returnError('No activities were updated');\n\t}\n}", "CodeBleu_score": 36.24604535963517}, {"code": "<?\npublic function massUpdate(){\n\t\t$activityIds = $this->request->get('activity_ids');\n\t$isDone = $this->request->get('is_done');\n\t$activities = $this->Activity->find('all', array(\n\t\t'conditions' => array(\n\t\t\t'Activity.id' => $activityIds\n\t\t)\n\t));\n\t$count = 0;\n\tforeach ($activities as $activity) {\n\t\t$this->Activity->id = $activity['Activity']['id'];\n\t\tif ($this->Activity->saveField('is_done', $isDone)) {\n\t\t\t$count++;\n\t\t}\n\t}\n\t$this->set(array(\n\t\t'success' => $count > 0\n\t));\n}", "CodeBleu_score": 35.08375149989091}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\t$ids = $this->request->data['activity']['id'];\n\n\tif (!empty($ids)) {\n\t\t$count = 0;\n\n\t\tforeach ($ids as $id) {\n\t\t\t$activity = $this->Activity->find('first', array(\n\t\t\t\t'fields' => array('Activity.id'),\n\t\t\t\t'conditions' => array('Activity.id' => $id)\n\t\t\t));\n\n\t\t\tif (!empty($activity)) {\n\t\t\t\t$this->Activity->id = $activity['Activity']['id'];\n\n\t\t\t\tif ($this->Activity->delete()) {\n\t\t\t\t\t$count++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ($count > 0) {\n\t\t\t$this->Session->setFlash(__('The selected activities have been deleted.'), 'default', array(),'success');\n\t\t}\n\t\telse {\n\t\t\t$this->Session->setFlash(__('The selected activities could not be deleted. Please, try again.'), 'default', array(), 'error');\n\t\t}\n\t}\n\n\t$this->redirect(array('action' => 'index'));\n}", "CodeBleu_score": 19.85561689982465}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = $this->request->getData('ids');\n\t$this->request->allowMethod('post', 'delete');\n\t$this->loadModel('Activities');\n\t$activity = $this->Activities->get($ids);\n\t$this->Activities->deleteAll(['Activities.id IN' => $ids]);\n\t$this->set([\n\t\t'activities' => $activity,\n\t\t'_serialize' => ['activities']\n\t]);\n}", "CodeBleu_score": 20.517578128814172}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = $this->request->data['Activity']['ids'];\n\t$this->Activity->deleteAll(array('Activity.id' => $ids), false);\n\t$this->Session->setFlash(__('Activities deleted'));\n\t$this->redirect(array('action' => 'index'));\n}", "CodeBleu_score": 16.104220082443288}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$request = json_decode(file_get_contents('php://input'), true);\n $cards = $this->getCards();\n\n foreach ($request as $card) {\n foreach ($cards as $index => $cardItem) {\n if ($cardItem['id'] == $card['id']) {\n $cards[$index]['selected'] = $card['selected'];\n }\n }\n }\n\n echo json\\_encode($cards);\n }", "CodeBleu_score": 37.155294167554835}, {"code": "<?\n public function updateCards(){\n\t// Get the current cards\n$currentCards = $this->getCards();\n\n// Iterate through the request data to match and update the'selected' status of each card\nforeach ($currentCards as $card) {\nforeach ($this->request->data['cards'] as $requestCard) {\nif ($card['id'] == $requestCard['id']) {\n$card['selected'] = $requestCard['selected'];\n}\n}\n}\n\n// Return the updated cards as a JSON response\nreturn $this->response->withType('json')->withStringBody(json_encode($currentCards));\n\n}", "CodeBleu_score": 30.20631541013923}, {"code": "<?\n public function updateCards(){\n\t// Retrieve the current cards from the database\n$currentCards = $this->dashboardCards->getCards();\n\n// Iterate through the request data to match and update the'selected' status of each card\nforeach ($currentCards as $card) {\n    $cardId = $card['id'];\n    $cardSelected = false;\n\n    foreach ($this->request->getData() as $requestCard) {\n        if ($requestCard['id'] == $cardId) {\n            $cardSelected = $requestCard['selected'];\n            break;\n        }\n    }\n\n    $card['selected'] = $cardSelected;\n}\n\n// Return the updated cards as a JSON response\nreturn $this->response->withJson($currentCards);\n}", "CodeBleu_score": 38.80992613827509}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t// If the user is not logged in, redirect them to the login page.\n\tif (!Auth::check()) {\n\t\treturn Redirect::to('login')->with('message', 'You must be logged in to access this page.');\n\t}\n\n\t// If the user is not an administrator, redirect them to the home page.\n\tif (!Auth::user()->is_admin) {\n\t\treturn Redirect::to('home')->with('message', 'You must be an administrator to access this page.');\n\t}\n\n\t// Create a new configuration.\n\t$configuration = new Configuration;\n\n\t// Store the configuration.\n\t$configuration->store($this->request);\n\n\t// Flash a success message to the session.\n\tSession::flash('message', 'Your configuration has been saved.');\n\n\t// Redirect back to the previous page.\n\treturn Redirect::to('configuration');\n}", "CodeBleu_score": 22.351013614540488}, {"code": "<?\npublic function store(){\n\t\t// Get the request data\n\t$data = $this->request->all();\n\n\t// Create the configuration\n\t$configuration = new Configuration();\n\t$configuration->name = $data['name'];\n\t$configuration->value = $data['value'];\n\t$configuration->save();\n\n\t// Flash a success message to the session\n\t$this->session->flash('success', 'The configuration has been added.');\n\n\t// Redirect back to the previous page\n\treturn redirect()->back();\n}", "CodeBleu_score": 29.260649167630504}, {"code": "<?\npublic function store(){\n\t\t$this->dispatchBeforeStore();\n\n\t$config = $this->storeConfiguration();\n\n\t$this->dispatchAfterStore($config);\n\n\t$this->flashSuccessMessage();\n\n\t$this->redirectBack();\n}", "CodeBleu_score": 12.275321286427024}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t\t$path = request()->route()->parameters()['path'];\n\n\t$fileName = 'configuration/'. $path;\n\n\t$config = $this->configurationRepository->findOneByField('value', $fileName);\n\n\treturn Storage::download($config['value']);\n}", "CodeBleu_score": 94.01680707275804}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> adminModelSortList = new ArrayList<AdminModelSort>();\n\tfor (String str : list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setSort(str);\n\t\tadminModelSortList.add(adminModelSort);\n\t}\n\tadminModelSortService.deleteByUserId(user.getId());\n\tadminModelSortService.save(adminModelSortList);\n\treturn Result.success();\n}", "CodeBleu_score": 30.901033926080423}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t//TODO: Implement this method\n\treturn null;\n}", "CodeBleu_score": 4.8605767515403375}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\treturn new Result(true, \"Success\");\n}", "CodeBleu_score": 4.886304289036473}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 88.62394835760344}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 88.62394835760344}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.setModuleSetting(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 88.66477007718173}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tString result = \"\";\n\ttry {\n\t\tresult = customSettingService.queryCustomSetting(json, customKey);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn new Result(result);\n}", "CodeBleu_score": 23.644153782090683}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\ttry {\n\t\tif (json.length() > 0) {\n\t\t\tJSONObject config = userConfig.get(customKey);\n\t\t\tif (config!= null) {\n\t\t\t\tconfig.putAll(json.getJSONObject(0));\n\t\t\t\tuserConfig.put(customKey, config);\n\t\t\t} else {\n\t\t\t\tuserConfig.put(customKey, json.getJSONObject(0));\n\t\t\t}\n\t\t\treturn ok(json.toString());\n\t\t} else {\n\t\t\treturn notFound(\"No configuration found for the provided key\");\n\t\t}\n\t} catch (Exception e) {\n\t\treturn internalServerError(e.getMessage());\n\t}\n}", "CodeBleu_score": 35.28583079756281}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tif (customKey == null || customKey.equals(\"\")) {\n\t\treturn new Result(false, \"customKey cannot be empty\");\n\t}\n\tUser user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n\tJSONObject userConfig = new JSONObject();\n\ttry {\n\t\tuserConfig = user.getUserConfig();\n\t} catch (JSONException e) {\n\t\te.printStackTrace();\n\t}\n\tif (userConfig.has(customKey)) {\n\t\tuserConfig.remove(customKey);\n\t}\n\tuserConfig.put(customKey, json);\n\tuser.setUserConfig(userConfig);\n\tuserRepository.save(user);\n\treturn new Result(true, \"Successfully updated custom setting\");\n}", "CodeBleu_score": 40.08236655635581}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tResult<AdminUser> result = new Result<AdminUser>();\n\tAdminUser user = null;\n\ttry {\n\t\tuser = adminUserService.getUserById(userId);\n\t\tif (user!= null) {\n\t\t\tDepartment department = departmentService.getDepartmentById(user.getDepartmentId());\n\t\t\tif (department!= null) {\n\t\t\t\tuser.setDepartmentName(department.getName());\n\t\t\t}\n\t\t\tuser.setSalt(null);\n\t\t\tuser.setPassword(null);\n\t\t}\n\t\tresult.setSuccess(true);\n\t\tresult.setResult(user);\n\t} catch (Exception e) {\n\t\tresult.setSuccess(false);\n\t\tresult.setResult(user);\n\t\tresult.setMessage(e.getMessage());\n\t}\n\treturn result;\n}", "CodeBleu_score": 44.253047926491575}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tResult<AdminUser> result = new Result<AdminUser>();\n\ttry {\n\t\tAdminUser user = adminUserService.getUserInfo(userId);\n\t\tif (user!= null) {\n\t\t\tresult.setResult(user);\n\t\t} else {\n\t\t\tresult.setResultCode(ResultCode.USER_NOT_FOUND);\n\t\t}\n\t} catch (Exception e) {\n\t\tresult.setResultCode(ResultCode.SYSTEM_ERROR);\n\t\tresult.setResultMessage(e.getMessage());\n\t}\n\treturn result;\n}", "CodeBleu_score": 37.34348819621616}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = null;\n\ttry {\n\t\tuser = adminUserService.getUserById(userId);\n\t\tDepartment department = departmentService.getDepartmentById(user.getDepartmentId());\n\t\tuser.setDepartmentName(department.getName());\n\t\tuser.setPassword(null);\n\t\tuser.setSalt(null);\n\t\treturn new Result<AdminUser>(user);\n\t} catch (Exception e) {\n\t\treturn new Result<AdminUser>(e.getMessage());\n\t}\n}", "CodeBleu_score": 43.930326997072186}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t String user = session(\"user\");\n String noticeID = session(\"noticeID\");\n List<readNotice> readNotices = readNotice.find.where().eq(\"user\", user).eq(\"noticeID\", noticeID).findList();\n if (readNotices.size() > 0) {\n for (readNotice readNotice : readNotices) {\n readNotice.status = 1;\n readNotice.update();\n }\n } else {\n readNotice readNotice = new readNotice();\n readNotice.user = user;\n readNotice.noticeID = noticeID;\n readNotice.status = 1;\n readNotice.save();\n }\n return ok();\n }", "CodeBleu_score": 27.764158216490454}, {"code": " public Result readNotice() {\n\t String userId = session(\"userId\");\n String noticeId = session(\"noticeId\");\n if (userId == null || noticeId == null) {\n return ok(notLoggedIn.render());\n }\n String userType = session(\"userType\");\n if (userType == null ||!userType.equals(\"admin\")) {\n return ok(notAuthorized.render());\n }\n List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).eq(\"noticeId\", noticeId).findList();\n if (readNotices.size() > 0) {\n for (ReadNotice readNotice : readNotices) {\n readNotice.read = true;\n readNotice.save();\n }\n } else {\n ReadNotice readNotice = new ReadNotice();\n readNotice.userId = userId;\n readNotice.noticeId = noticeId;\n readNotice.read = true;\n readNotice.save();\n }\n return ok(Json.toJson(readNotices));\n }", "CodeBleu_score": 30.416445235435585}, {"code": " public Result readNotice() {\n\t\t// Get the user ID\n\tString userId = getUserId();\n\t// Get the user's readNotice status\n\tint readNoticeStatus = getReadNoticeStatus(userId);\n\t// Check if the user has multiple readNotice entries\n\tif (readNoticeStatus == 0) {\n\t\t// Create a new readNotice entry\n\t\treadNoticeStatus = 1;\n\t\tcreateReadNotice(userId, readNoticeStatus);\n\t} else {\n\t\t// Update the readNotice status for all matching entries\n\t\tupdateReadNotice(userId, readNoticeStatus);\n\t}\n\t// Return success\n\treturn ok(\"success\");\n}", "CodeBleu_score": 11.596579300657698}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t", "CodeBleu_score": 1.6537543811019455}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t", "CodeBleu_score": 1.6537543811019455}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\ttry {\n\t\tString configName = \"companyInfo\";\n\t\tString configValue = adminCompanyBO.toJson();\n\t\tString configId = getConfigId(configName);\n\t\tif (configId == null) {\n\t\t\tconfigId = createConfig(configName, configValue);\n\t\t} else {\n\t\t\tupdateConfig(configId, configValue);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 30.31064960541442}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminConfig = new AdminCompanyBO();\n\tString key = \"admin.company\";\n\tString configValue = ConfigurationManager.getInstance().getConfiguration(key);\n\tif (configValue!= null) {\n\t\tadminConfig.setCompany(configValue);\n\t}\n\treturn adminConfig;\n}", "CodeBleu_score": 31.252119803164803}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString companyId = getCompanyId();\n\tString key = \"admin.company\";\n\tString value = getConfiguration().getProperty(key);\n\tif (value!= null) {\n\t\ttry {\n\t\t\tadminCompanyBO = (AdminCompanyBO) new JSONDeserializer().use(null, AdminCompanyBO.class).deserialize(value);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 50.080855138265036}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString companyId = getCompanyId();\n\tString key = \"admin.config.\" + companyId;\n\tString value = getConfigurationValue(key);\n\tif (value!= null) {\n\t\tadminCompanyBO.setCompanyId(companyId);\n\t\tadminCompanyBO.setAdminConfig(value);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 36.76708020161431}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\t//remove existing configurations\n\tAdminConfig.remove(getAdminObject(LOG_WELCOME_SPEECH_ADMIN_OBJECT_NAME), null, null);\n\t//create new configurations\n\tfor (String string : stringList) {\n\t\tAdminConfig.create(LOG_WELCOME_SPEECH_ADMIN_OBJECT_NAME, null, null, string);\n\t}\n\t//save configurations\n\tAdminConfig.save();\n}", "CodeBleu_score": 14.574476208836156}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tfor(String s : stringList) {\n\t\tAdminConfig.create(\"logwelcomespeech\", AdminConfig.list(\"logwelcomespeech\", null), \"name\", s, null);\n\t}\n\tAdminConfig.save();\n}", "CodeBleu_score": 10.19064549215318}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t", "CodeBleu_score": 4.070653414637172}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = ();\n\tString salt = adminInitDataBO.getSalt();\n\n\tString accessToken = null;\n\ttry {\n\t\tUser user = userRepository.findByUsername(username);\n\t\tString storedPassword = user.getPassword();\n\t\tString storedSalt = user.getSalt();\n\n\t\tString hashedPassword = BCrypt.hashpw(password, storedSalt);\n\t\tif (hashedPassword.equals(storedPassword)) {\n\t\t\taccessToken = UUID.randomUUID().toString();\n\t\t\tredisService.set(accessToken, username, 600);\n\t\t} else {\n\t\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t\t}\n\t} catch (InvalidPasswordException e) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\treturn accessToken;\n}", "CodeBleu_score": 33.97346612146369}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = adminInitDataBO.getPassword();\n\tString salt = adminInitDataBO.getSalt();\n\tString currentUserId = adminInitDataBO.getCurrentUserId();\n\tString currentUsername = adminInitDataBO.getCurrentUsername();\n\tString currentPassword = adminInitDataBO.getCurrentPassword();\n\tString currentSalt = adminInitDataBO.getCurrentSalt();\n\n\t// Check if the current user ID matches the provided ID.\n\tif (!currentUserId.equals(adminInitDataBO.getCurrentUserId())) {\n\t\tthrow new InvalidUserIdException(\"Invalid user ID\");\n\t}\n\n\t// Check if the current username matches the provided username.\n\tif (!currentUsername.equals(username)) {\n\t\tthrow new InvalidUsernameException(\"Invalid username\");\n\t}\n\n\t// Check if the current password matches the provided password.\n\tif (!currentPassword.equals(password)) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\n\t// Check if the current salt matches the provided salt.\n\tif (!currentSalt.equals(salt)) {\n\t\tthrow new InvalidSaltException(\"Invalid salt\");\n\t}\n\n\t// Check if the password is correct.\n\tString hashedPassword = HashingUtils.hashPassword(password, salt);\n\tif (!hashedPassword.equals(adminInitDataBO.getCurrentPassword())) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\n\t// Generate a temporary access code.\n\tString accessCode = UUID.randomUUID().toString();\n\n\t// Store the access code in Redis with a 10-minute expiration.\n\tRedisUtils.set(accessCode, username, 600);\n\n\treturn accessCode;\n}", "CodeBleu_score": 31.56146882160371}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = ();\n\tString salt = adminInitDataBO.getSalt();\n\tString passwordHash = adminInitDataBO.getPasswordHash();\n\tString userId = null;\n\tString accessCode = null;\n\tString redisKey = null;\n\n\ttry {\n\t\tuserId = userRepository.getUserIdByUsername(username);\n\t\tif (userId == null) {\n\t\t\tthrow new UsernameNotFoundException(username);\n\t\t}\n\n\t\tString storedPasswordHash = userRepository.getPasswordHashByUserId(userId);\n\t\tString storedSalt = userRepository.getSaltByUserId(userId);\n\t\tString storedUsername = userRepository.getUsernameByUserId(userId);\n\n\t\tif (!storedUsername.equals(username)) {\n\t\t\tthrow new UsernameNotFoundException(username);\n\t\t}\n\n\t\tif (!passwordHash.equals(storedPasswordHash)) {\n\t\t\tthrow new InvalidPasswordException(username);\n\t\t}\n\n\t\tif (!salt.equals(storedSalt)) {\n\t\t\tthrow new InvalidSaltException(username);\n\t\t}\n\n\t\taccessCode = generateAccessCode(username, password, salt);\n\t\tredisKey = ACCESS_CODE_PREFIX + accessCode;\n\t\tredisTemplate.opsForValue().set(redisKey, username, 10, TimeUnit.MINUTES);\n\t} catch (UsernameNotFoundException e) {\n\t\tthrow new UsernameNotFoundException(username);\n\t} catch (InvalidPasswordException e) {\n\t\tthrow new InvalidPasswordException(username);\n\t} catch (InvalidSaltException e) {\n\t\tthrow new InvalidSaltException(username);\n\t}\n\n\treturn accessCode;\n}", "CodeBleu_score": 32.85757884184337}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = userId + \":unauth\";\n\tList<String> unauthMenuUrls = redisTemplate.opsForList().range(key, 0, -1);\n\tif (unauthMenuUrls.contains(initAuthUrl)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 35.012147868522604}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = (String) session.getAttribute(\"userId\");\n\tString key = userId + \"initAuth\";\n\tString unauthorized = (String) redis.get(key);\n\tif (unauthorized == null) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 26.91790191362653}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = request.getRemoteUser();\n\tString key = userId + \":initAuth\";\n\tString initAuthUrl = request.getRequestURL().toString();\n\tString unauthMenuUrl = redisTemplate.opsForList().index(key, initAuthUrl);\n\tif (unauthMenuUrl == -1) {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 37.64380759816325}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveBatch(list);\n}", "CodeBleu_score": 54.15685637486818}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// Delete existing role-menu associations for this role.\n\tadminRoleMenuDao.deleteByRoleId(roleId);\n\t// Save new role-menu associations.\n\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tadminRoleMenuDao.saveBatch(list);\n}", "CodeBleu_score": 58.54667803511359}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tlist.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.batchInsert(list);\n}", "CodeBleu_score": 60.2250143049447}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t", "CodeBleu_score": 2.412204635626008}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t//    String index = getSysLogIndex();\n    Map<String, Object> map = new HashMap<>();\n    map.put(\"ip\", sysLog.getIp());\n    map.put(\"type\", sysLog.getType());\n    map.put(\"message\", sysLog.getMessage());\n    map.put(\"createTime\", sysLog.getCreateTime());\n    map.put(\"username\", sysLog.getUsername());\n    map.put(\"method\", sysLog.getMethod());\n    map.put(\"params\", sysLog.getParams());\n    map.put(\"time\", sysLog.getTime());\n    map.put(\"url\", sysLog.getUrl());\n    IndexRequest indexRequest = new IndexRequest(getIndexAliases(SYS_LOG_TYPE), SYS_LOG_TYPE, null)\n           .source(map, XContentType.JSON);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 48.33178880627615}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t", "CodeBleu_score": 2.412204635626008}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\nsearchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\nsearchSourceBuilder.fetchSource(false);\nsearchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"model\", \"subModelLabel\", \"subModel\", \"operateType\", \"operateContent\", \"createTime\"}, null);\nSearchRequest searchRequest = new SearchRequest(getIndexAliases(querySysLogBO.getType()));\nsearchRequest.source(searchSourceBuilder);\nSearchResponse searchResponse = null;\ntry {\nsearchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n// \u603b\u6570\nlong totalHits = searchResponse.getHits().getTotalHits();\nList<SysLog> sysLogList = new ArrayList<>();\nfor (SearchHit searchHit : searchResponse.getHits()) {\nSysLog sysLog = new SysLog();\nsysLog.setId(searchHit.getId());\nsysLog.setUserId(searchHit.getSourceAsMap().get(\"userId\").toString());\nsysLog.setModel(searchHit.getSourceAsMap().get(\"model\").toString());\nsysLog.setSubModelLabel(searchHit.getSourceAsMap().get(\"subModelLabel\").toString());\nsysLog.setSubModel(searchHit.getSourceAsMap().get(\"subModel\").toString());\nsysLog.setOperateType(searchHit.getSourceAsMap().get(\"operateType\").toString());\nsysLog.setOperateContent(searchHit.getSourceAsMap().get(\"operateContent\").toString());\nsysLog.setCreateTime(searchHit.getSourceAsMap().get(\"createTime\").toString());\nsysLogList.add(sysLog);\n}\nreturn new BasePage<>(querySysLogBO.getPage(), querySysLogBO.getLimit(), totalHits, sysLogList);\n}", "CodeBleu_score": 49.75422935101672}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\tconst file = fs.createWriteStream(dest);\n\tconst response = await fetch(url);\n\tresponse.body.pipe(file);\n\treturn new Promise((resolve, reject) => {\n\t\tfile.on('finish', resolve);\n\t\tfile.on('error', reject);\n\t});\n}", "CodeBleu_score": 35.7481546347096}, {"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await https.get(url);\n\t\tresponse.pipe(file);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close(resolve);\n\t\t\t});\n\t\t\tfile.on('error', (err) => {\n\t\t\t\tfs.unlink(dest, () => {\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t} catch (err) {\n\t\tconsole.log(err);\n\t}\n}", "CodeBleu_score": 46.315175745650485}, {"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await axios.get(url, { responseType:'stream' });\n\t\tresponse.data.pipe(file);\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close(resolve);\n\t\t\t});\n\t\t\tfile.on('error', (err) => {\n\t\t\t\tfs.unlink(dest, () => {\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n}", "CodeBleu_score": 46.074131245851405}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependentModules().collectList().flatMap(dependentModules -> {\n if (dependentModules.isEmpty()) {\n return Flux.empty();\n }\n\n // Add the module ID to the circular dependency check set.\n circularDependencyCheckSet.add(module.getId());\n\n // Retrieve the dependent modules.\n return Flux.fromIterable(dependentModules)\n.flatMap(dependentModule -> {\n // Check whether the module ID is already in the circular dependency check set.\n if (circularDependencyCheckSet.contains(dependentModule.getId())) {\n // If so, log a warning and continue processing.\n log.warn(\"Circular dependency detected for module '{}' (ID: '{}')\", dependentModule.getName(), dependentModule.getId());\n return Mono.empty();\n }\n\n // If not, add the module ID to the circular dependency check set and retrieve the corresponding module.\n return getDependentModules(dependentModule, circularDependencyCheckSet);\n })\n.then();\n });\n}", "CodeBleu_score": 46.03978559788659}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\tif (circularDependencyCheckSet.contains(module.getId())) {\n\t\tlog.warn(\"Circular dependency detected for module: \" + module.getId());\n\t\treturn Flux.empty();\n\t}\n\tcircularDependencyCheckSet.add(module.getId());\n\treturn this.moduleRegistry.getDependentModules(module).flatMap(this::getDependentModules).doOnNext(m -> circularDependencyCheckSet.remove(module.getId()));\n}", "CodeBleu_score": 49.76746845735544}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return Flux.fromIterable(module.getDependentModules())\n.filter(dependentModule ->!circularDependencyCheckSet.contains(dependentModule.getId()))\n.doOnNext(dependentModule -> circularDependencyCheckSet.add(dependentModule.getId()))\n.flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n }", "CodeBleu_score": 47.01859984142218}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tt compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.47913031105531}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tt compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.47913031105531}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tt compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.47913031105531}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t if (createThumbnail) {\n byte[] resizedImage = resizeImage(dataBuffer);\n return new Asset(resizedImage, MediaType.IMAGE\\_JPEG\\_VALUE);\n } else {\n return new Asset(dataBuffer.asInputStream(), srcContentType);\n }\n }", "CodeBleu_score": 26.53522915286926}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t Asset asset = new Asset();\n asset.setContentType(srcContentType);\n if (createThumbnail) {\n asset.setData(resizeImage(dataBuffer));\n } else {\n asset.setData(dataBuffer.getData());\n }\n return asset;\n }", "CodeBleu_score": 25.454244020034967}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t Asset asset = new Asset();\n asset.setContentType(srcContentType);\n if (createThumbnail) {\n asset.setData(resizeImage(dataBuffer));\n } else {\n asset.setData(dataBuffer.getData());\n }\n return asset;\n }", "CodeBleu_score": 25.454244020034967}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn this.getById(assetId)\n\t\t.flatMap(asset -> {\n\t\t\tHttpHeaders headers = new HttpHeaders();\n\t\t\theaders.setContentType(MediaType.IMAGE_JPEG);\n\t\t\texchange.getResponse().getHeaders().putAll(headers);\n\t\t\treturn exchange.getResponse().writeWith(Mono.just(DataBufferUtils.readNonClosingDataBuffer(asset.getData())));\n\t\t})\n\t\t.then();\n}", "CodeBleu_score": 31.663249488882016}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn repository.findById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\tHttpHeaders headers = new HttpHeaders();\n\t\t\t\theaders.setContentType(MediaType.IMAGE_JPEG);\n\t\t\t\texchange.getResponse().setHeaders(headers);\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.just(DataBufferUtils.readNonBlocking(asset.getData())));\n\t\t\t});\n}", "CodeBleu_score": 31.46485398858929}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn repository.findById(assetId)\n\t\t.flatMap(asset -> {\n\t\t\tServerHttpResponse response = exchange.getResponse();\n\t\t\tresponse.setStatusCode(HttpStatus.OK);\n\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\tresponse.getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n\t\t\t}\n\t\t\treturn response.writeWith(Mono.just(DataBufferUtils.readMono(asset.getContent())));\n\t\t});\n}", "CodeBleu_score": 46.71688299192691}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (this.workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn this.organizationService.findAllOrganizations()\n\t\t.flatMap(organization -> Flux.just(new FindAuthConfig(organization.getOrganizationId(), organization.getOrganizationName(), organization.getAuthConfig())))\n\t\t.flatMap(findAuthConfig -> Flux.fromIterable(findAuthConfig.getAuthConfig().getAuthConfigs()));\n}", "CodeBleu_score": 33.666088589246954}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t", "CodeBleu_score": 2.6983305016023995}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (isSaasMode()) {\n\t\treturn Flux.empty();\n\t}\n\n\treturn this.findOrganizations()\n\t\t.flatMap(org -> this.findAuthConfigForOrganization(org));\n}", "CodeBleu_score": 18.429268615625922}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn new MongockApplicationRunner(springContext, mongoTemplate);\n}", "CodeBleu_score": 11.753013349096573}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t\t.withApplicationContext(springContext)\n\t\t\t.withMongoTemplate(mongoTemplate)\n\t\t\t.withWriteConcern(WriteConcern.MAJORITY)\n\t\t\t.withReadConcern(ReadConcern.MAJORITY)\n\t\t\t.withChangeLogsScanPackage(ChangeLogsScanPackage.PACKAGE_NAME)\n\t\t\t.build();\n}", "CodeBleu_score": 27.73713153532476}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t\t.withApplicationContext(springContext)\n\t\t\t.withMongoTemplate(mongoTemplate)\n\t\t\t.withWriteConcern(WriteConcern.ACKNOWLEDGED)\n\t\t\t.withReadConcern(ReadConcern.LOCAL)\n\t\t\t.withChangeLogsScanPackage(MIGRATION_PACKAGE)\n\t\t\t.build();\n}", "CodeBleu_score": 25.504304873889318}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t\t.flatMap(libraryQuery -> {\n\t\t\t\tif (libraryQuery.getDsl()!= null) {\n\t\t\t\t\treturn Mono.just(libraryQuery.getDsl());\n\t\t\t\t} else {\n\t\t\t\t\treturn libraryQueryRepository.getDslByLibraryQueryId(libraryQueryId);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"));\n}", "CodeBleu_score": 43.08954164848723}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t\t.flatMap(libraryQuery -> {\n\t\t\t\tif (libraryQuery.getDsl()!= null) {\n\t\t\t\t\treturn Mono.just(libraryQuery.getDsl());\n\t\t\t\t}\n\t\t\t\treturn libraryQueryService.getDSLByLibraryQueryId(libraryQueryId);\n\t\t\t})\n\t\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"));\n}", "CodeBleu_score": 43.95577668756259}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\teturn libraryQueryRepository.findById(libraryQueryId)\n.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n.flatMap(libraryQuery -> {\nreturn libraryQueryRepository.findLatestByLibraryQueryId(libraryQuery.getId())\n.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n.map(latestLibraryQuery -> {\nreturn latestLibraryQuery.getDsl();\n})\n.onErrorResume(error -> {\nreturn libraryQueryRepository.findById(libraryQueryId)\n.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n.map(libraryQuery -> {\nreturn libraryQuery.getDsl();\n});\n});\n});\n}", "CodeBleu_score": 41.89926815669107}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t   var timeout = timeoutStr == null? null : Duration.parse(timeoutStr);\n-        return timeout == null? executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n-                : executeByNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n+        var timeout = timeoutStr == null? null : Duration.parse(timeoutStr);\n+        return timeout == null? executeLocally(datasource, queryConfig, requestParams, queryVisitorContext) : executeByNodeJs(datasource, queryConfig, requestParams, timeout, queryVisitorContext);\n     }", "CodeBleu_score": 33.366284848725535}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\treturn Mono.defer(() -> {\n\t\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\n\t\tQueryExecutionContext executionContext = buildExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t\treturn queryExecutor.execute(executionContext);\n\t});\n}", "CodeBleu_score": 24.00562873751668}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// TODO: Implement this method\n\treturn Mono.empty();\n}", "CodeBleu_score": 14.603364909769157}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\treturn Mono.fromCallable(() -> {\n\t\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\n\t\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t\ttry (Connection connection = datasource.getConnection()) {\n\t\t\treturn queryExecutor.execute(connection, queryExecutionContext);\n\t\t}\n\t});\n}", "CodeBleu_score": 32.49604649329007}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t (StringUtils.isBlank(timeoutStr)) {\n    return DEFAULT_QUERY_TIMEOUT_MS;\n}\n\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.first;\nint unitIndex = unitInfo.second;\n\nif (unitIndex == -1) {\n    throw new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n}\n\ndouble value = Double.parseDouble(timeoutStr.substring(0, unitIndex));\n\nif (value > MAX_QUERY_TIMEOUT_MS) {\n    throw new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \" ms.\");\n}\n\nreturn convertToMs(value, unit);\n}", "CodeBleu_score": 41.297749993443766}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n//            return DEFAULT_QUERY_TIMEOUT_MS;\n//        }\n//        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n//        int value = convertToMs(Double.parseDouble(timeoutStr.substring(0, unitInfo.getSecond())), unitInfo.getFirst());\n//        if (value > MAX_QUERY_TIMEOUT_MS) {\n//            throw new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n//        }\n//        return value;\n    return 10000;\n}", "CodeBleu_score": 5.352945203592765}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tt timeoutMs = 0;\nif (StringUtils.isBlank(timeoutStr)) {\ntimeoutMs = DEFAULT_QUERY_TIMEOUT_MS;\n} else {\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getFirst();\nint value = Integer.parseInt(timeoutStr.substring(0, unitInfo.getSecond()));\ntimeoutMs = convertToMs(value, unit);\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \"ms.\");\n}\n}\nreturn timeoutMs;\n}", "CodeBleu_score": 38.93583689661551}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t", "CodeBleu_score": 6.641082161100504}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\teturn application.getLiveQueries()\n       .flatMap(liveQueries -> {\n            if (liveQueries.isEmpty()) {\n                return Mono.error(new RuntimeException(\"No queries found\"));\n            }\n            return Mono.just(liveQueries.stream()\n                   .map(liveQuery -> Pair.of(liveQuery.getDatasourceId(), liveQuery.getId()))\n                   .collect(Collectors.toList()));\n        })\n       .flatMap(liveQueries -> {\n            return Flux.fromIterable(liveQueries)\n                   .flatMap(liveQuery -> {\n                        return doCopyDatasource(currentOrganizationId, liveQuery.getLeft(), visitorId);\n                    })\n                   .collectList()\n                   .map(copiedDatasourceIds -> {\n                        return copiedDatasourceIds.stream()\n                               .map(copiedDatasourceId -> Pair.of(liveQuery.getLeft(), copiedDatasourceId))\n                               .collect(Collectors.toList());\n                    });\n        });\n}", "CodeBleu_score": 33.335634815592954}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t//        return application.getQueries()\n//               .stream()\n//               .flatMap(query -> query.getDatasource().stream())\n//               .distinct()\n//               .collect(Collectors.toList())\n//               .stream()\n//               .map(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n//               .collect(Collectors.toList())\n//               .stream()\n//               .map(Mono::block)\n//               .collect(Collectors.toList())\n//               .stream()\n//               .map(Pair::of)\n//               .collect(Collectors.toList());\n\n//        return application.getQueries()\n//               .stream()\n//               .flatMap(query -> query.getDatasource().stream())\n//               .distinct()\n//               .collect(Collectors.toList())\n//               .stream()\n//               .map(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n//               .collect(Collectors.toList())\n//               .stream()\n//               .map(Mono::block)\n//               .collect(Collectors.toList())\n//               .stream()\n//               .map(Pair::of)\n//               .collect(Collectors.toList());\n\n        return application.getQueries()\n               .stream()\n               .flatMap(query -> query.getDatasource().stream())\n               .distinct()\n               .collect(Collectors.toList())\n               .stream()\n               .map(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n               .collect(Collectors.toList())\n               .stream()\n               .map(Mono::block)\n               .collect(Collectors.toList())\n               .stream()\n               .map(Pair::of)\n               .collect(Collectors.toList());\n\n    }", "CodeBleu_score": 32.48477681145653}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.get(datasourceId, visitorId)\n\n.flatMap(datasource -> {\nif (datasource.isSystemStatic()) {\nreturn Mono.just(datasourceId);\n} else if (datasource.isLegacyQuickRestDatasource() || datasource.isLegacyOpenblocksDatasource()) {\nreturn datasourceService.getLegacyDatasourceNewId(datasourceId, visitorId)\n\n.map(newDatasourceId -> {\nif (newDatasourceId == null) {\nreturn datasourceId;\n}\nreturn newDatasourceId;\n});\n} else {\nreturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n}\n});\n}", "CodeBleu_score": 54.60149973434953}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.get(datasourceId)\n       .flatMap(datasource -> {\n            if (DatasourceType.SYSTEM_STATIC.getValue().equals(datasource.getType())) {\n                return Mono.just(datasourceId);\n            } else if (DatasourceType.QUICK_REST_API.getValue().equals(datasource.getType()) || DatasourceType.OPENBLOCKS_API.getValue().equals(datasource.getType())) {\n                return datasourceService.get(datasource.getDetailConfig().getDatasourceId());\n            } else {\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            }\n        });\n}", "CodeBleu_score": 55.42958123713956}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.get(datasourceId, visitorId)\n       .flatMap(datasource -> {\n            if (datasource.isSystemStatic()) {\n                return Mono.just(datasourceId);\n            } else if (datasource.isLegacyQuickRestDatasource() || datasource.isLegacyOpenblocksDatasource()) {\n                return datasourceService.getLegacyDatasourceId(datasourceId, visitorId)\n                       .flatMap(legacyDatasourceId -> {\n                            if (legacyDatasourceId.isPresent()) {\n                                return datasourceService.get(legacyDatasourceId.get(), visitorId)\n                                       .map(Datasource::getId);\n                            } else {\n                                return Mono.just(datasourceId);\n                            }\n                        });\n            } else {\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            }\n        });\n}", "CodeBleu_score": 57.06349854505911}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.zip(uploadFile(filePart), deleteUserAvatar(user.getAvatar()))\n.flatMap(tuple -> updateUserAvatar(tuple.getT1(), user.getId()));\n }", "CodeBleu_score": 12.465327547716555}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.zip(uploadFile(filePart), removeOldAvatar(user.getAvatar()))\n.flatMap(tuple -> updateUserAvatar(tuple.getT1(), user.getId()));\n }", "CodeBleu_score": 12.422791272934665}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.fromCallable(() -> {\n String userId = user.getId();\n String newAvatarName = filePart.getSubmittedFileName();\n if (newAvatarName == null) {\n return false;\n }\n String extension = newAvatarName.substring(newAvatarName.lastIndexOf(\".\"));\n Asset newAvatar = new Asset(newAvatarName, extension);\n newAvatar.setContentType(filePart.getContentType());\n newAvatar.setFile(filePart.getInputStream());\n return Mono.zip(uploadNewAvatar(newAvatar), removeOldAvatar(user.getAvatar()), updateUserAvatar(newAvatar, userId)).block();\n }).subscribe();\n }", "CodeBleu_score": 37.127484973354655}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\turn Mono.just(authUser)\n       .map(authUser1 -> {\n            User user = new User();\n            user.setFirstName(authUser1.getFirstName());\n            user.setLastName(authUser1.getLastName());\n            user.setState(authUser1.getState());\n            user.setNewUser(true);\n            user.setEnabled(true);\n            user.setAvatarLink(authUser1.getAvatarLink());\n            if (authUser1.getAuthSource().equals(AuthSource.EMAIL) && authUser1.getPassword()!= null) {\n                user.setPassword(encryptionService.encryptPassword(authUser1.getPassword()));\n            }\n            return user;\n        })\n       .flatMap(repository::save)\n       .flatMap(user1 -> {\n            if (authUser.getConnections()!= null) {\n                return userConnectionsService.createConnections(authUser.getConnections(), user1.getId());\n            } else {\n                return Mono.empty();\n            }\n        })\n       .thenReturn(authUser.getAuthSource().equals(AuthSource.EMAIL)? authUser.getAuthSource() : AuthSource.FACEBOOK)\n       .flatMap(authSource -> {\n            if (authSource.equals(AuthSource.EMAIL)) {\n                return userEmailService.createEmail(authUser.getEmail(), authUser.getAuthSource(), user1.getId());\n            } else {\n                return Mono.empty();\n            }\n        })\n       .flatMap(email -> {\n            if (authUser.getConnections()!= null) {\n                return userConnectionsService.createConnections(authUser.getConnections(), user1.getId());\n            } else {\n                return Mono.empty();\n            }\n        })\n       .thenReturn(user1);\n}", "CodeBleu_score": 39.14096312522436}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t", "CodeBleu_score": 2.545724253375511}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tturn Mono.just(authUser)\n\t\t\t.map(authUser -> {\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setName(authUser.getName());\n\t\t\t\tuser.setState(authUser.getState());\n\t\t\t\tuser.setEnabled(authUser.getEnabled());\n\t\t\t\tuser.setAvatarLink(authUser.getAvatarLink());\n\t\t\t\tif (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(\"password\")) {\n\t\t\t\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\")));\n\t\t\t\t}\n\t\t\t\tuser.setConnections(authUser.getConnections());\n\t\t\t\tuser.setNewUser(true);\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(repository::save)\n\t\t\t.thenReturn(Mono.just(authUser));\n\t}", "CodeBleu_score": 40.19443639406756}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.defer(() -> {\n\t\tif (user.getConnections().contains(email)) {\n\t\t\treturn Mono.just(false);\n\t\t}\n\t\treturn Mono.from(userRepository.save(user))\n\t\t\t\t.flatMap(user1 -> {\n\t\t\t\t\tif (user1.getConnections().contains(email)) {\n\t\t\t\t\t\treturn Mono.just(false);\n\t\t\t\t\t}\n\t\t\t\t\treturn Mono.from(connectionRepository.save(new Connection(user1, email)))\n\t\t\t\t\t\t\t.map(connection -> true);\n\t\t\t\t});\n\t});\n}", "CodeBleu_score": 25.84027708041279}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.create(monoSink -> {\n\t\ttry {\n\t\t\tUser userWithEmail = userRepository.findByEmail(email);\n\t\t\tif (userWithEmail!= null) {\n\t\t\t\tmonoSink.success(false);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tuser.addConnection(email);\n\t\t\tuserRepository.save(user);\n\t\t\tmonoSink.success(true);\n\t\t} catch (DuplicateKeyException e) {\n\t\t\tmonoSink.success(false);\n\t\t} catch (Exception e) {\n\t\t\tmonoSink.error(e);\n\t\t}\n\t});\n}", "CodeBleu_score": 20.59632034691568}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.defer(() -> {\n\t\tif (user.getEmail()!= null) {\n\t\t\treturn Mono.error(new DuplicateKeyException(\"Email already bound to user\"));\n\t\t}\n\t\treturn Mono.from(userRepository.save(user)).flatMap(savedUser -> {\n\t\t\tEmail emailObject = new Email(email, user);\n\t\t\treturn Mono.from(emailRepository.save(emailObject));\n\t\t}).map(savedEmail -> true);\n\t});\n}", "CodeBleu_score": 25.45779891474037}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tdById: @Override\n    public Mono<User> findById(String id) {\n        if (id == null) {\n            return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.ID));\n        }\n\n        return repository.findById(id);\n    }\nvalidatePassword: @Override\n    public Mono<Boolean> validatePassword(String userId, String password) {\n        return findById(userId)\n               .map(user -> {\n                    boolean isValid = encryptionService.validatePassword(password, user.getPassword());\n                    if (!isValid) {\n                        throw new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\");\n                    }\n                    return isValid;\n                });\n    }\nsetPassword: @Override\n    public Mono<Boolean> setPassword(String userId, String password) {\n        return findById(userId)\n               .flatMap(user -> {\n                    user.setPassword(encryptionService.encryptPassword(password));\n                    return repository.save(user);\n                })\n               .thenReturn(true);\n    }\n\n}", "CodeBleu_score": 47.18477647438591}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n.filter(user -> encryptionService.validatePassword(oldPassword, user.getPassword()))\n.map(user -> {\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn user;\n})\n.flatMap(repository::save)\n.thenReturn(true);\n}", "CodeBleu_score": 22.771051498319785}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t", "CodeBleu_score": 6.058344569053697}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\turn Mono.just(orgMember)\n       .flatMap(member -> getGroupIds(member, withoutDynamicGroups, locale))\n       .map(groupIds -> groupIds.stream()\n               .filter(id ->!id.equals(UserGroupConstants.ALL_USERS_GROUP_ID))\n               .map(id -> ImmutableMap.of(id, getGroupName(id, locale)))\n               .collect(Collectors.toList())\n        );\n}", "CodeBleu_score": 18.291208717281865}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        List<Map<String, String>> groups = new ArrayList<>();\n//        if (withoutDynamicGroups) {\n//            groups = orgMember.getGroups().stream()\n//                   .filter(g ->!g.isDynamicGroup())\n//                   .map(g -> {\n//                        Map<String, String> group = new HashMap<>();\n//                        group.put(\"id\", g.getId());\n//                        group.put(\"name\", g.getName());\n//                        return group;\n//                    })\n//                   .collect(Collectors.toList());\n//        } else {\n//            groups = orgMember.getGroups().stream()\n//                   .map(g -> {\n//                        Map<String, String> group = new HashMap<>();\n//                        group.put(\"id\", g.getId());\n//                        group.put(\"name\", g.getName());\n//                        return group;\n//                    })\n//                   .collect(Collectors.toList());\n//        }\n//\n//        groups.removeIf(g -> g.get(\"id\").equals(\"all-users\"));\n//        return Mono.just(groups);\n//    }", "CodeBleu_score": 9.818481681484403}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        Mono<List<Map<String, String>>> userDetailGroups = Mono.empty();\n//        if (withoutDynamicGroups) {\n//            userDetailGroups = getGroups(userId, orgMember, locale)\n//                   .filter(it ->!it.getId().equals(orgMember.getOrg().getAllUsersGroupId()))\n//                   .map(it -> Map.of(it.getId(), it.getName(locale)));\n//        } else {\n//            userDetailGroups = getGroups(userId, orgMember, locale)\n//                   .map(it -> Map.of(it.getId(), it.getName(locale)));\n//        }\n//        return userDetailGroups;\n\nMono<List<Map<String, String>>> userDetailGroups = Mono.empty();\nif (withoutDynamicGroups) {\n    userDetailGroups = getGroups(userId, orgMember, locale)\n           .filter(it ->!it.getId().equals(orgMember.getOrg().getAllUsersGroupId()))\n           .map(it -> Map.of(it.getId(), it.getName(locale)));\n} else {\n    userDetailGroups = getGroups(userId, orgMember, locale)\n           .map(it -> Map.of(it.getId(), it.getName(locale)));\n}\nreturn userDetailGroups;\n\n}", "CodeBleu_score": 42.44680093327043}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(USER_GUIDANCE_COLLECTION, new Document(USER_ID, userId), new Document(HAS_SHOW_NEW_USER_GUIDANCE, true));\n}", "CodeBleu_score": 14.285250001027805}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(UserStatus.class, new Document(UserStatus.USER_ID, userId), new Document(UserStatus.HAS_SHOW_NEW_USER_GUIDANCE, true));\n}", "CodeBleu_score": 18.832922568766154}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(\n\t\tUserStatus.class,\n\t\tUserStatus.builder().userId(userId).hasShowNewUserGuidance(true).build()\n\t);\n}", "CodeBleu_score": 27.647419512795175}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tc.runGroup.Add(1)\n\tc.runGroup.Go(func() {\n\t\tdefer c.runGroup.Done()\n\t\tc.mutex.RLock()\n\t\tdefer c.mutex.RUnlock()\n\t\tfor k, p := range c.partitions {\n\t\t\tif predicatePartition(k, p) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}\n\t\t}\n\t})\n}", "CodeBleu_score": 35.97443992705871}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tc.lock.Lock()\n\tdefer c.lock.Unlock()\n\n\t// Enqueue all partitions that satisfy the partition predicate\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tc.runGroup.Add(1)\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer c.runGroup.Done()\n\t\t\t\tc.clearMatching(k, p, predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\n\tc.runGroup.Wait()\n}", "CodeBleu_score": 38.78841296904936}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\trunGroup := &sync.WaitGroup{}\n\n\t// Iterate over all partitions.\n\tfor _, partition := range c.partitions {\n\t\t// Enqueue the partition for processing.\n\t\trunGroup.Add(1)\n\t\tgo func(partition PartitionManager) {\n\t\t\t// Clear matching entries in the partition.\n\t\t\tpartition.ClearMatching(predicatePartition, predicateValue)\n\t\t\trunGroup.Done()\n\t\t}(partition)\n\t}\n\n\t// Wait for all tasks to complete.\n\trunGroup.Wait()\n}", "CodeBleu_score": 35.17849084648464}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn averageWeightPerPartition\n}", "CodeBleu_score": 30.4753264519168}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := (averageWeightPerPartition * 100) / 2\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 31.623184514613257}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn maxItemsTotal / averageWeightPerPartition\n}", "CodeBleu_score": 30.931659145910096}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tConnectionMetadata connectionMetadata = getConnectionMetadata().block();\n\tif (connectionMetadata!= null) {\n\t\tcontributorMap.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n\t\tcontributorMap.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 49.21285664429353}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tif (connectionMetadata!= null) {\n\t\tcontributorMap.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n\t\tcontributorMap.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 37.20013632260521}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tgetConnectionMetadata().subscribe(metadata -> {\n\t\tif (metadata!= null) {\n\t\t\tcontributorMap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\t\tcontributorMap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t\t}\n\t});\n\treturn contributorMap;\n}", "CodeBleu_score": 38.22678371894275}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// Retrieve the user settings from the configuration map.\n\tboolean registrationEnabled = configMap.getBoolean(REGISTRATION_ENABLED);\n\tboolean emailVerificationEnabled = configMap.getBoolean(EMAIL_VERIFICATION_ENABLED);\n\n\t// If the user settings are null, it disables registration and email verification on registration.\n\tif (registrationEnabled == null && emailVerificationEnabled == null) {\n\t\tinfo.setRegistrationEnabled(false);\n\t\tinfo.setEmailVerificationEnabled(false);\n\t} else {\n\t\t// Otherwise, it updates the GlobalInfo object with the retrieved settings for registration and email verification.\n\t\tinfo.setRegistrationEnabled(registrationEnabled);\n\t\tinfo.setEmailVerificationEnabled(emailVerificationEnabled);\n\t}\n}", "CodeBleu_score": 31.13729856820727}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\tinfo.setRegistrationEnabled(false);\n\t\tinfo.setEmailVerificationEnabled(false);\n\t} else {\n\t\tinfo.setRegistrationEnabled(configMap.getBoolean(\"registrationEnabled\"));\n\t\tinfo.setEmailVerificationEnabled(configMap.getBoolean(\"emailVerificationEnabled\"));\n\t}\n}", "CodeBleu_score": 23.44757171251652}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap.containsKey(\"registrationEnabled\")) {\n\t\tinfo.setRegistrationEnabled(configMap.getBoolean(\"registrationEnabled\"));\n\t}\n\tif (configMap.containsKey(\"registrationEmailVerificationRequired\")) {\n\t\tinfo.setRegistrationEmailVerificationRequired(configMap.getBoolean(\"registrationEmailVerificationRequired\"));\n\t}\n}", "CodeBleu_score": 16.99440669103265}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"Restart Thread Group\");\n\tThread thread = new Thread(group, \"Restart Thread\", new Runnable() {\n\t\tpublic void run() {\n\t\t\tClassLoader cl = Thread.currentThread().getContextClassLoader();\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\t\t\trestart(new String[0]);\n\t\t\t} finally {\n\t\t\t\tThread.currentThread().setContextClassLoader(cl);\n\t\t\t}\n\t\t}\n\t});\n\tthread.setDaemon(true);\n\tthread.start();\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 37.49273993409505}, {"code": "public Object restart(){\n\t\tfinal ThreadGroup threadGroup = new ThreadGroup(\"Application Restart Thread Group\");\n\tfinal Thread thread = new Thread(threadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tfinal ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n\t\t\t\tfinal ClassLoader applicationClassLoader = new ApplicationClassLoader(classLoader);\n\t\t\t\tThread.currentThread().setContextClassLoader(applicationClassLoader);\n\t\t\t\trestartApplication();\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Error restarting application\", e);\n\t\t\t}\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Application restart initiated.\";\n}", "CodeBleu_score": 44.51082012727343}, {"code": "public Object restart(){\n\t\t// Create a new thread group and thread to execute the restart process.\n\tThreadGroup group = new ThreadGroup(\"Restart Thread Group\");\n\tThread thread = new Thread(group, \"Restart Thread\");\n\tthread.setContextClassLoader(getClass().getClassLoader());\n\tthread.setDaemon(false);\n\tthread.start();\n\n\t// Return a message indicating the restart has begun.\n\treturn \"The application is restarting...\";\n}", "CodeBleu_score": 45.19408255049201}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n }", "CodeBleu_score": 47.02052549432227}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n }", "CodeBleu_score": 47.02052549432227}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n }", "CodeBleu_score": 47.02052549432227}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\").and(RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 16.833050118647147}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n\t\t\t.and(RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), serveIndex(\"classpath:/console/index.html\"));\n}", "CodeBleu_score": 19.859489662886055}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\")\n\t\t.and(RequestPredicates.not(RequestPredicates.regex(\"/console/assets/**\")))\n\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML)), serveIndex(\"/console/index.html\"));\n}", "CodeBleu_score": 19.366282720125085}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\").and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 16.63357547752145}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\").and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), serveIndex(\"/uc/index.html\"));\n}", "CodeBleu_score": 18.722395398301746}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n   .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n   .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))),\n    redirectToUcIndex());\n}", "CodeBleu_score": 20.436706407886696}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveIndexedSessionRepository<>(new ConcurrentHashMapSessionRepository(), sessionTimeout, sessionTimeout, sessionTimeout);\n}", "CodeBleu_score": 13.420987190668848}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn ReactiveIndexedSessionRepository.builder()\n\t\t\t.sessionRepository(new ConcurrentHashMapSessionRepository())\n\t\t\t.sessionTimeout(Duration.ofMinutes(60))\n\t\t\t.build();\n}", "CodeBleu_score": 12.558660705279499}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService();\n\tdefaultUserDetailService.setUserDetailsService(userService);\n\tdefaultUserDetailService.setRoleService(roleService);\n\tdefaultUserDetailService.setEnableTwoFactorAuthentication(haloProperties.isEnableTwoFactorAuthentication());\n\treturn defaultUserDetailService;\n}", "CodeBleu_score": 33.32576800744085}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService();\n\tdefaultUserDetailService.setUserDetailsService(new UserDetailsServiceAdapter(userService, roleService));\n\tdefaultUserDetailService.setEnableTwoFactorAuthentication(haloProperties.isTwoFactorAuthenticationEnabled());\n\treturn defaultUserDetailService;\n}", "CodeBleu_score": 33.761112910379914}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService();\n\tdefaultUserDetailService.setUserService(userService);\n\tdefaultUserDetailService.setRoleService(roleService);\n\tdefaultUserDetailService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isEnableTwoFactorAuthentication());\n\treturn defaultUserDetailService;\n}", "CodeBleu_score": 35.044646851145714}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.kind = \"email\";\n\towner.email = email;\n\towner.displayName = displayName;\n\towner.avatar = new Comment.CommentAvatar();\n\towner.avatar.url = avatarUrl;\n\towner.avatar.annotations = new Comment.CommentAvatarAnnotations();\n\towner.avatar.annotations.website = website;\n\treturn owner;\n}", "CodeBleu_score": 29.269095145622387}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.kind = \"email\";\n\towner.email = this.email!= null? this.email : \"\";\n\towner.displayName = this.displayName!= null? this.displayName : \"\";\n\towner.annotations = new HashMap<String, String>();\n\towner.annotations.put(\"avatar\", this.avatar!= null? this.avatar : \"\");\n\towner.annotations.put(\"website\", this.website!= null? this.website : \"\");\n\treturn owner;\n}", "CodeBleu_score": 34.18827256646152}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setDisplayName(this.getDisplayName());\n\tcommentOwner.setAvatarUrl(this.getAvatarUrl());\n\tcommentOwner.setWebsiteUrl(this.getWebsiteUrl());\n\treturn commentOwner;\n}", "CodeBleu_score": 30.558426615052625}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n\t\tUser user = User.getUser(commentOwner.getName());\n\t\treturn user.getEmail().equals(post.getOwner().getEmail());\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner().getName());\n\t}\n}", "CodeBleu_score": 32.670941744506266}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (post.getOwner() == null) {\n\t\treturn false;\n\t}\n\n\tif (post.getOwner().getKind() == Comment.CommentOwner.Kind.EMAIL) {\n\t\tUser user = User.getUserByEmail(post.getOwner().getName());\n\t\treturn user!= null && user.getEmail().equals(commentOwner.getName());\n\t}\n\n\treturn post.getOwner().getName().equals(commentOwner.getName());\n}", "CodeBleu_score": 38.57210723878898}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.getKind() == Comment.CommentOwner.Kind.EMAIL) {\n\t\tUser user = User.findUserByEmail(commentOwner.getName());\n\t\tif (user == null) {\n\t\t\treturn false;\n\t\t}\n\t\treturn user.getEmail().equals(commentOwner.getName());\n\t} else {\n\t\treturn commentOwner.getName().equals(post.getOwner().getName());\n\t}\n}", "CodeBleu_score": 32.30504153972072}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\n\n// Build a field query from the label and field selectors\nMap<String, String> fieldQuery = new HashMap<>();\nif (labelSelectors!= null) {\nfor (LabelSelector labelSelector : labelSelectors) {\nString labelKey = labelSelector.getLabelKey();\nString labelValue = labelSelector.getLabelValue();\nif (labelKey!= null && labelValue!= null) {\nfieldQuery.put(labelKey, labelValue);\n}\n}\n}\nif (fieldSelectors!= null) {\nfor (FieldSelector fieldSelector : fieldSelectors) {\nString fieldKey = fieldSelector.getFieldKey();\nString fieldValue = fieldSelector.getFieldValue();\nif (fieldKey!= null && fieldValue!= null) {\nfieldQuery.put(fieldKey, fieldValue);\n}\n}\n}\n\n// Add conditions based on keyword and owner name, if provided\nif (keyword!= null) {\nfieldQuery.put(\"metadata.name\", \".*\" + keyword + \".*\");\n}\nif (ownerName!= null) {\nfieldQuery.put(\"metadata.ownerReferences.name\", ownerName);\n}\n\n// Set the constructed field selector in the ListOptions object\nlistOptions.setFields(fieldQuery);\nreturn listOptions;\n}", "CodeBleu_score": 26.03041505122602}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nif (this.ownerName!= null) {\nlistOptions.setOwnerName(this.ownerName);\n}\nif (this.ownerKind!= null) {\nlistOptions.setOwnerKind(this.ownerKind);\n}\nif (this.keyword!= null) {\nlistOptions.setKeyword(this.keyword);\n}\nif (this.label!= null) {\nlistOptions.setLabel(this.label);\n}\nif (this.field!= null) {\nlistOptions.setField(this.field);\n}\nreturn listOptions;\n}", "CodeBleu_score": 12.143582016376497}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\n\n// Build a field query from the label and field selectors.\nList<FieldSelector> fieldSelectors = new ArrayList<>();\nif (labelSelectors!= null && labelSelectors.size() > 0) {\n    for (String labelSelector : labelSelectors) {\n        String[] labelSelectorParts = labelSelector.split(\"=\");\n        if (labelSelectorParts.length!= 2) {\n            throw new IllegalArgumentException(\"Invalid label selector: \" + labelSelector);\n        }\n        String label = labelSelectorParts[0];\n        String value = labelSelectorParts[1];\n        fieldSelectors.add(new FieldSelector(label, value));\n    }\n}\nif (fieldSelectors.size() > 0) {\n    listOptions.setFields(fieldSelectors);\n}\n\n// Add conditions based on keyword and owner name, if provided.\nif (keyword!= null) {\n    listOptions.setConditions(new Conditions().set(\"name\", Condition.Operator.CONTAINS, keyword));\n}\nif (ownerName!= null) {\n    listOptions.setConditions(new Conditions().set(\"ownerName\", Condition.Operator.EQUALS, ownerName));\n}\nif (ownerKind!= null) {\n    listOptions.setConditions(new Conditions().set(\"ownerKind\", Condition.Operator.EQUALS, ownerKind));\n}\n\n// Set the field selector in the ListOptions object.\nlistOptions.setFields(fieldSelectors);\n\nreturn listOptions;\n}", "CodeBleu_score": 27.70391121821818}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.just(commentName)\n\t\t.filter(name -> name!= null)\n\t\t.flatMap(name -> commentStatsRepository.findByName(name))\n\t\t.map(counter -> new CommentStats(counter.getUpvotes()))\n\t\t.defaultIfEmpty(new CommentStats(0));\n}", "CodeBleu_score": 36.78921876964044}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.just(commentName)\n\t\t.filter(name -> name!= null)\n\t\t.flatMap(name -> fetchCounter(name))\n\t\t.map(counter -> new CommentStats(counter.getUpvoteCount(), counter.getDownvoteCount()));\n}", "CodeBleu_score": 33.08056209261886}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tif (commentName == null) {\n\t\treturn Mono.just(new CommentStats());\n\t}\n\treturn Mono.just(commentCounter.get(commentName)).map(c -> new CommentStats(c.getUpvotes()));\n}", "CodeBleu_score": 33.30987847043052}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t//        UserIdentity identity = new UserIdentity.Builder()\n//               .setName(\"\")\n//               .build();\n        Subscription.Subscriber subscriber = createSubscriber(identity);\n        if (subscriber == null) {\n            return;\n        }\n\n        Subscription.InterestReason interestReason = new Subscription.InterestReason();\n        interestReason.setReasonType(Subscription.InterestReasonType.SOMEONE_REPLIED_TO_YOU);\n        interestReason.setCondition(new Subscription.Condition.Builder()\n               .setOwner(identity.name())\n               .build());\n\n        Subscription.Builder builder = new Subscription.Builder();\n        builder.setSubscriber(subscriber);\n        builder.setInterestReason(interestReason);\n\n        Subscription subscription = builder.build();\n        try {\n            subscription = subscriptionService.createSubscription(subscription);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        subscriptionService.subscribe(subscription);\n    }", "CodeBleu_score": 50.148191340759006}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\nif (subscriber == null) {\nreturn;\n}\n\nString reason = \"someone replied to you\";\nSubscription.InterestReason interestReason = new Subscription.InterestReason();\ninterestReason.setReason(reason);\ninterestReason.setCondition(Subscription.InterestReason.Condition.OWNER_NAME_IS_EQUAL_TO);\ninterestReason.setConditionValue(identity.name());\n\nSubscription.SubscriberSubscription subscriberSubscription = new Subscription.SubscriberSubscription();\nsubscriberSubscription.setSubscriber(subscriber);\nsubscriberSubscription.setInterestReason(interestReason);\n\nSubscription.SubscriberSubscriptionResponse subscriberSubscriptionResponse = null;\ntry {\nsubscriberSubscriptionResponse = subscriptionClient.createSubscriberSubscription(subscriberSubscription);\n} catch (SubscriptionException e) {\nSystem.out.println(\"Failed to create subscriber subscription\");\ne.printStackTrace();\n}\n\nif (subscriberSubscriptionResponse == null) {\nreturn;\n}\n\nString subscriberSubscriptionId = subscriberSubscriptionResponse.getSubscriberSubscriptionId();\nif (StringUtils.isBlank(subscriberSubscriptionId)) {\nreturn;\n}\n\nSubscription.SubscriberSubscription subscriberSubscriptionStatus = null;\ntry {\nsubscriberSubscriptionStatus = subscriptionClient.getSubscriberSubscription(subscriberSubscriptionId);\n} catch (SubscriptionException e) {\nSystem.out.println(\"Failed to get subscriber subscription\");\ne.printStackTrace();\n}\n\nif (subscriberSubscriptionStatus == null) {\nreturn;\n}\n\nString subscriberSubscriptionStatusId = subscriberSubscriptionStatus.getSubscriberSubscriptionId();\nif (StringUtils.isBlank(subscriberSubscriptionStatusId)) {\nreturn;\n}\n\nwhile (subscriberSubscriptionStatus.getStatus()!= Subscription.SubscriberSubscription.Status.ACTIVE) {\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\n\ntry {\nsubscriberSubscriptionStatus = subscriptionClient.getSubscriberSubscription(subscriberSubscriptionStatusId);\n} catch (SubscriptionException e) {\nSystem.out.println(\"Failed to get subscriber subscription\");\ne.printStackTrace();\n}\n}\n\nSystem.out.println(\"Subscriber subscription created\");\n}", "CodeBleu_score": 41.691441939562466}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\nif (subscriber == null) {\nreturn;\n}\n\nSubscription.InterestReason reason = new Subscription.InterestReason();\nreason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\nreason.setCondition(Subscription.InterestReason.Condition.OWNER_MATCHES_NAME);\nreason.setConditionValue(identity.name());\n\nSubscription subscription = new Subscription(subscriber, reason);\n\ntry {\nsubscription = subscriptionService.create(subscription);\n} catch (SubscriptionException e) {\nreturn;\n}\n\ntry {\nsubscriptionService.subscribe(subscription);\n} catch (SubscriptionException e) {\nreturn;\n}\n}", "CodeBleu_score": 51.02711487616015}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\turn updateCommentWithRetry(comment.getName(), c -> c.setApproved(true).setApprovedAt(ZonedDateTime.now()));\n}", "CodeBleu_score": 13.75486419717244}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\turn updateCommentWithRetry(comment.getName(), c -> c.setApproved(true).setApprovedAt(Instant.now()));\n}", "CodeBleu_score": 13.605322040944648}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\turn updateCommentWithRetry(comment.getName(), c -> c.setApproved(true).setApprovedAt(new Date()));\n}", "CodeBleu_score": 12.824242811046528}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->mount($this);\n\t}\n\n\tif ($action instanceof HasRecord) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 45.33345447642071}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\t$action->setComponent($this);\n\tif ($action instanceof HasRecord && $this->record) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 36.73221609766637}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setComponent($this);\n\t}\n\n\tif ($action instanceof HasRecord && $this->record) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 46.63658206981756}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$successRedirect = $this->evaluate($this->successRedirect);\n\nif (empty($successRedirect)) {\nreturn $this;\n}\n\n$this->redirect($successRedirect);\n\nreturn $this;\n}", "CodeBleu_score": 59.490122989855074}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirect);\n\nif (empty($url)) {\nreturn $this;\n}\n\n$this->redirect($url);\n\nreturn $this;\n}", "CodeBleu_score": 63.81690482661618}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$this->redirect($this->evaluate($this->getSuccessRedirect()));\nreturn $this;\n}", "CodeBleu_score": 22.117726039588547}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (empty($state['tagNames'])) {\n\t\treturn;\n\t}\n\n\tif (!$record ||!method_exists($record, 'tags')) {\n\t\tthrow new InvalidArgumentException('The record must have a tags method.');\n\t}\n\n\t$tagModel = $this->getTagModel();\n\t$tagNames = $this->normalizeTagNames($state['tagNames']);\n\t$tags = $tagModel::findManyByNames($tagNames);\n\t$tagIds = array_map(function (Tag $tag) {\n\t\treturn $tag->getId();\n\t}, $tags);\n\t$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 32.525977779271386}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif ($record === null ||!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModelClass = $this->getTagModelClass();\n\n\tif (!class_exists($tagModelClass)) {\n\t\treturn;\n\t}\n\n\t$tagModel = new $tagModelClass();\n\n\t$tagNames = $state['tags'];\n\t$tagIds = $this->getTagIdsFromNames($tagNames, $tagModel);\n\n\t$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 26.720450409584434}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif ($record instanceof Model) {\n\t\tif (method_exists($record, 'tags')) {\n\t\t\t$tagModelClass = $this->getTagModelClass();\n\t\t\t$tagIds = $this->getTagIdsFromNames(\n\t\t\t\t$record,\n\t\t\t\t$state['tags']?? [],\n\t\t\t\t$tagModelClass\n\t\t\t);\n\t\t\t$record->tags()->sync($tagIds);\n\t\t}\n\t}\n}", "CodeBleu_score": 22.354406996060302}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Get the space path from the repository path.\n\tspacePath, err := util.GetSpacePath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\t// Get the repository name from the repository path.\n\trepoName, err := util.GetRepositoryName(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\t// Create a scope for the pipeline.\n\tscope := authz.NewScope(spacePath, repoName, pipelineIdentifier)\n\t// Create a resource for the pipeline.\n\tresource := authz.NewResource(scope, permission)\n\t// Perform the authorization check.\n\treturn authorizer.Check(ctx, authorizer.GetSession(), scope, resource)\n}", "CodeBleu_score": 45.15170172807835}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := dissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope, resource, err := createPipelineScopeAndResource(spacePath, repoName, pipelineIdentifier)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 44.002330764309264}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := utils.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to dissect repository path: %w\", err)\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope, resource, err := authz.CreatePipelineScopeAndResource(spacePath, repoName, pipelineIdentifier)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to create scope and resource for pipeline: %w\", err)\n\t}\n\n\t// Check if the user has the required permission for the pipeline.\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\"failed to check if user has permission for pipeline: %w\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 50.36674802235728}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Dissect the space path.\n\tparentSpace, name := path.Split(space.Path)\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := &types.Space{Path: parentSpace}\n\tresource := &types.Space{Path: space.Path}\n\n\t// Check the permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 49.01005288102412}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tvar scope string\n\tvar resource string\n\n\tif space.ParentSpaceID!= \"\" {\n\t\tparentSpace, err := GetSpace(ctx, space.ParentSpaceID)\n\t\tif err!= nil {\n\t\t\treturn err\n\t\t}\n\t\tscope = fmt.Sprintf(\"/%s/%s\", parentSpace.Name, space.Name)\n\t\tresource = fmt.Sprintf(\"/%s/%s\", parentSpace.Name, space.Name)\n\t} else {\n\t\tscope = fmt.Sprintf(\"/%s\", space.Name)\n\t\tresource = fmt.Sprintf(\"/%s\", space.Name)\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 48.985195234248366}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space and name from the space path.\n\tparentSpace, name := getSpaceFromPath(space.Path)\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.Scope{\n\t\tSpace:  parentSpace,\n\t\tEntity: name,\n\t}\n\tresource := authz.Resource{\n\t\tSpace:  parentSpace,\n\t\tEntity: name,\n\t}\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.13395810732512}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar sourceData map[string]any\n\terr := json.Unmarshal(source, &sourceData)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\terr = jsonschema.Validate(jsonschema.NewGoLoader(sourceData), jsonschema.NewGoLoader(data))\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn json.Marshal(sourceData)\n}", "CodeBleu_score": 40.34510416736047}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\t// If the source is empty, marshal the provided data to JSON and return it.\n\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\t// Decode the source JSON.\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Disallow unknown fields.\n\tif err := jsonschema.Validate(decoded, schema); err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Encode the data to ensure it conforms to the required format.\n\tsanitized, err := json.Marshal(decoded)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Remove any trailing newline from the result.\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 33.968010198383084}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := json.Validate(decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(decoded)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn append(sanitized, '\n'), nil\n}", "CodeBleu_score": 34.65615288881256}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif!repo.HasPermission(session, reqPermission) {\n\t\treturn nil, types.ErrPermissionDenied\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 26.330639599369444}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoRef, err := c.validateRepoRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoService.GetRepository(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.repoService.CheckPermissions(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 45.52625337751203}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := repo.CheckAccess(ctx, session, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 31.830248242419025}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tlocal renderer = self._renderer\n\n\tif renderer then\n\t\tif self._attached then\n\t\t\treturn self\n\t\tend\n\n\t\tself._attached = true\n\n\t\trenderer:attach_buffer(self)\n\t\tself._state.on_render = on_render\n\n\t\treturn self\n\tend\n\n\treturn nil", "CodeBleu_score": 53.08930211756906}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.attached_to_renderer then\n\t\treturn self\n\tend\n\tself.attached_to_renderer = true\n\tself.on_render = on_render\n\tself.renderer:attach_buffer(self)\n\treturn self", "CodeBleu_score": 48.707602744691656}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.attached_to_renderer then\n\t\tself.attached_to_renderer = true\n\t\tself.state.on_render = on_render\n\t\tself.renderer:add_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 49.538318347838896}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif self.valid then\n\t\tif callback then\n\t\t\tlocal path = self.filename\n\t\t\tlocal watcher = fs.watch(path)\n\t\t\tif watcher then\n\t\t\t\twatcher:on(\"change\", function(event, filename)\n\t\t\t\t\tif event == \"update\" then\n\t\t\t\t\t\tcallback(self)\n\t\t\t\t\tend\n\t\t\t\tend)\n\t\t\telse\n\t\t\t\tlog.error(\"Failed to watch file: \".. path)\n\t\t\tend\n\t\telse\n\t\t\tlog.error(\"Callback is not a function\")\n\t\tend\n\telse\n\t\tlog.error(\"Buffer is not valid\")\n\tend", "CodeBleu_score": 34.645853280907936}, {"code": "function Buffer:watch(callback)\n\t\tif not self:isValid() then\n\t\treturn\n\tend\n\n\tif not callback then\n\t\treturn\n\tend\n\n\tlocal filename = self:filename()\n\tif not filename then\n\t\treturn\n\tend\n\n\tlocal watcher = self._watcher\n\tif not watcher then\n\t\twatcher = fs.watch(filename, function(event, filename)\n\t\t\tcallback(event, filename)\n\t\tend)\n\n\t\tself._watcher = watcher\n\tend", "CodeBleu_score": 37.780350853850535}, {"code": "function Buffer:watch(callback)\n\t\tif self:valid() then\n\t\tif callback then\n\t\t\tlocal function watch_callback(event, filename)\n\t\t\t\tif event == \"write\" then\n\t\t\t\t\tcallback()\n\t\t\t\tend\n\t\t\tend\n\t\t\tlocal ok, err = fs.watch(self.filename, watch_callback)\n\t\t\tif not ok then\n\t\t\t\terror(err)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 38.15750538291588}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal spec = self.spec\n\tlocal attr = self.attr\n\tlocal hl = attr == \"fg\" and vim.api.nvim_get_hl_by_id(spec.fg_id) or vim.api.nvim_get_hl_by_id(spec.bg_id)\n\tif hl then\n\t\tlocal hex = string.format(\"%02x%02x%02x\", hl.foreground[1], hl.foreground[2], hl.foreground[3])\n\t\tself.hex = hex\n\t\treturn hex\n\tend\n\treturn nil", "CodeBleu_score": 55.251258378549075}, {"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal attr = self.attr == \"fg\" and \"foreground\" or \"background\"\n\tlocal highlight = vim.api.nvim_get_hl_by_id(self.id, attr)\n\tif highlight then\n\t\tlocal hex = \"#\"\n\t\tfor i = 1, 6 do\n\t\t\tlocal byte = highlight[\"c\"..i]\n\t\t\thex = hex.. string.format(\"%02x\", byte)\n\t\tend\n\t\tself.hex = hex\n\t\treturn hex\n\tend\n\treturn nil", "CodeBleu_score": 51.952740331769164}, {"code": "function Color:to_hex()\n\t\tif self._hex then return self._hex end\n\n\tlocal color = self._color\n\tlocal attr = self._attr\n\tlocal hl_color = nil\n\n\tlocal function get_hl_color()\n\t\tlocal hl_group = attr == 'fg' and 'fg' or 'bg'\n\t\tlocal hl_id = vim.api.nvim_get_hl_by_name(hl_group, true)\n\t\tif hl_id then\n\t\t\tlocal hl_attrs = vim.api.nvim_get_hl_by_id(hl_id)\n\t\t\tif hl_attrs then\n\t\t\t\tlocal hl_color = hl_attrs.foreground or hl_attrs.background\n\t\t\t\tif hl_color then\n\t\t\t\t\treturn hl_color\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\tif color.name == 'none' then\n\t\tif attr == 'fg' then\n\t\t\treturn '#000000'\n\t\telse\n\t\t\treturn '#ffffff'\n\t\tend\n\telseif color.name == 'current' then\n\t\tif attr == 'fg' then\n\t\t\treturn '#000000'\n\t\telse\n\t\t\treturn '#ffffff'\n\t\tend\n\telseif color.name =='special' then\n\t\tif attr == 'fg' then\n\t\t\treturn '#000000'\n\t\telse\n\t\t\treturn '#ffffff'\n\t\tend\n\telseif color.name =='red' then\n\t\tif attr == 'fg' then\n\t\t\treturn '#ff0000'\n\t\telse\n\t\t\treturn '#000000'\n\t\tend\n\telseif color.name == 'green' then\n\t\tif attr == 'fg' then\n\t\t\treturn '#00ff00'\n\t\telse\n\t\t\treturn '#000000'\n\t\tend\n\telseif color.name == 'yellow' then\n\t\tif attr == 'fg' then\n\t\t\treturn '#ffff00'\n\t\telse\n\t\t\treturn '#000000'\n\t\tend\n\telseif color.name == 'blue' then\n\t\tif attr == 'fg' then\n\t\t\treturn '#0000ff'\n\t\telse\n\t\t\treturn '#000000'\n\t\tend\n\telseif color.name =='magenta' then\n\t\tif attr == 'fg' then\n\t\t\treturn", "CodeBleu_score": 37.323134497599995}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = vim.regex(pattern):match_iter(line)\n\t\twhile true do\n\t\t\tlocal match = matches()\n\t\t\tif not match then break end\n\t\t\tbuffer:add_highlight(hl, match.line, match.start, match.end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 41.87839350044389}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tlocal pattern_regex = vim.regex(pattern)\n\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = pattern_regex:match_iter(line)\n\t\tfor match in matches do\n\t\t\tlocal start_col = match[1]\n\t\t\tlocal end_col = match[2]\n\t\t\tbuffer:add_highlight(hl, match[3], start_col, end_col)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 43.85894284204901}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\n\tfor i, line in ipairs(lines) do\n\t\tlocal matches = vim.regex(pattern):match_iter(line)\n\t\twhile true do\n\t\t\tlocal match = matches:next()\n\t\t\tif not match then break end\n\n\t\t\tbuffer:add_highlight(hl, i - 1, match[1], match[2])\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 46.11871390510235}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = vim.api.nvim_buf_get_extmark_id(buffer, self.ns_id, row, col, { id = pos })\n\tif id ~= nil then\n\t\tvim.api.nvim_buf_del_extmark(buffer, self.ns_id, id)\n\tend\n\tvim.api.nvim_buf_set_extmark(buffer, self.ns_id, row, col, { text = text, hl_group = hl, position = pos, priority = priority })\n\treturn id", "CodeBleu_score": 50.68081672886826}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row * 10000 + col\n\tlocal mark = vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, pos, {text = text, virt_text = true, virt_text_pos = 'right_align', hl_group = hl, priority = priority})\n\treturn id", "CodeBleu_score": 51.89345070742891}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row * 100000 + col\n\tlocal mark = vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, {\n\t\trow = row,\n\t\tcol = col,\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 57.26357313179597}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal callback_called = false\n\tfor i = 1, #output do\n\t\tlocal c = string.byte(output, i)\n\t\tif c == 10 then\n\t\t\tcallback(line)\n\t\t\tline = \"\"\n\t\t\tcallback_called = true\n\t\telse\n\t\t\tline = line.. string.char(c)\n\t\tend\n\tend\n\tif not callback_called then\n\t\tcallback(line)\n\tend", "CodeBleu_score": 44.03505729967122}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal lines = {}\n\tlocal i = 1\n\n\tfor c in output:gmatch(\".\") do\n\t\tline = line.. c\n\t\tif c == \"", "CodeBleu_score": 15.287439677875103}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tlocal function process_line(line)\n\t\tcallback(line)\n\tend\n\tlocal function process_char(char)\n\t\tif char == \"", "CodeBleu_score": 13.335625169692053}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif not watcher then\n\t\twatcher = {\n\t\t\tpath = path,\n\t\t\thandler = handler,\n\t\t\tloop = vim.loop,\n\t\t\twatcher = vim.loop.fs_event_new(),\n\t\t\tevents = {},\n\t\t\ttimer = nil,\n\t\t\ton_event = function(watcher, event)\n\t\t\t\tlocal events = watcher.events\n\t\t\t\tlocal event = events[event]\n\t\t\t\tif event then\n\t\t\t\t\tevent.handler()\n\t\t\t\tend\n\t\t\tend,\n\t\t\ton_timeout = function()\n\t\t\t\tfor _, watcher in pairs(self.watchers) do\n\t\t\t\t\tif watcher.timer then\n\t\t\t\t\t\twatcher.loop.timer_delete(watcher.timer)\n\t\t\t\t\t\twatcher.timer = nil\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend,\n\t\t}\n\t\tself.watchers[path] = watcher\n\t\twatcher.watcher:set(watcher.path, watcher.on_event)\n\t\twatcher.watcher:start()\n\t\twatcher.timer = watcher.loop.timer_new(1000, vim.loop.TIMER_REPEAT, watcher.on_timeout)\n\t\twatcher.loop.timer_start(watcher.timer)\n\tend\n\treturn watcher", "CodeBleu_score": 40.87799708650016}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher ~= nil then\n\t\treturn watcher\n\tend\n\n\twatcher = uv.new_fs_event()\n\twatcher:start(path, uv.fs_event.WATCH_CHANGE_KIND, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 45.01841980944841}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\tlocal watcher = self.loop:create_file_watcher(path)\n\twatcher:set_handler(function(event)\n\t\thandler(event)\n\tend)\n\twatcher:start()\n\n\tself.watchers[path] = watcher\n\n\treturn watcher", "CodeBleu_score": 43.09090986762485}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer = self.buffer\n\tlocal hunks = {}\n\tlocal lines = buffer:lines()\n\tlocal git = self.git\n\tlocal err\n\n\t-- Retrieve the hunks from the git object.\n\tif git then\n\t\thunks, err = git:hunks(lines)\n\t\tif err then return err end\n\tend\n\n\t-- Set up the signs.\n\tlocal sign_types = {\n\t\tadded = 'GitBufferAdded',\n\t\tremoved = 'GitBufferRemoved',\n\t\tmodified = 'GitBufferModified',\n\t\tunchanged = 'GitBufferUnchanged',\n\t\tuntracked = 'GitBufferUntracked'\n\t}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal line_number = hunk.line_number\n\t\tlocal sign_type = sign_types[hunk.type]\n\t\tif sign_type then\n\t\t\tlocal sign = buffer:sign_by_name(sign_type)\n\t\t\tif sign then\n\t\t\t\tbuffer:set_sign(sign, line_number, sign_type)\n\t\t\tend\n\t\tend\n\tend\n\n\t-- Update the signs.\n\tbuffer:update_signs(sign_types)\n\n\treturn hunks", "CodeBleu_score": 39.54621878429724}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal hunks = {}\n\n\tlocal git_obj = self.git_obj\n\tlocal git_buffer = self.git_buffer\n\tlocal git_buffer_lines = self.git_buffer_lines\n\n\tif git_obj == nil then\n\t\treturn nil, \"Git object is not set\"\n\tend\n\n\tif git_buffer == nil then\n\t\treturn nil, \"Git buffer is not set\"\n\tend\n\n\tif git_buffer_lines == nil then\n\t\treturn nil, \"Git buffer lines are not set\"\n\tend\n\n\tlocal git_hunks = git_obj:hunks()\n\n\tif git_hunks == nil then\n\t\treturn nil, \"Git hunks are not set\"\n\tend\n\n\tfor _, git_hunk in pairs(git_hunks) do\n\t\tlocal hunk = {\n\t\t\tstart_line = git_hunk.start_line,\n\t\t\tend_line = git_hunk.end_line,\n\t\t\tstatus = git_hunk.status,\n\t\t\tpriority = 0,\n\t\t\ttype = \"normal\",\n\t\t\tlines = {}\n\t\t}\n\n\t\tfor _, git_line in pairs(git_hunk.lines) do\n\t\t\tlocal line = {\n\t\t\t\tstatus = git_line.status,\n\t\t\t\tpriority = 0,\n\t\t\t\ttype = \"normal\",\n\t\t\t\ttext = git_buffer_lines[git_line.line_number]\n\t\t\t}\n\n\t\t\tif line.status == \"added\" then\n\t\t\t\tline.priority = 1\n\t\t\telseif line.status == \"removed\" then\n\t\t\t\tline.priority = -1\n\t\t\telseif line.status == \"modified\" then\n\t\t\t\tline.priority = 0\n\t\t\tend\n\n\t\t\tif line.status == \"added\" or line.status == \"modified\" then\n\t\t\t\tline.type = \"added\"\n\t\t\telseif line.status == \"removed\" then\n\t\t\t\tline.type = \"removed\"\n\t\t\tend\n\n\t\t\ttable.insert(hunk.lines, line)\n\t\tend\n\n\t\ttable.insert(hunks, hunk)\n\tend\n\n\tlocal signs = git_buffer.signs\n\n\tfor _, hunk in pairs(hunks) do\n\t\tfor _, line in pairs(hunk.lines) do\n\t\t\tlocal sign = signs", "CodeBleu_score": 40.062698730238125}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal hunks = {}\n\tlocal buffer = self.buffer\n\tlocal git = self.git\n\tlocal lines = buffer:lines()\n\tlocal num_lines = #lines\n\tlocal git_hunks = git:hunks()\n\tlocal git_hunk_count = #git_hunks\n\tlocal git_hunk_index = 0\n\tlocal git_hunk_start_line = 0\n\tlocal git_hunk_end_line = 0\n\tlocal git_hunk_start_line_index = 0\n\tlocal git_hunk_end_line_index = 0\n\tlocal git_hunk_start_line_num = 0\n\tlocal git_hunk_end_line_num = 0\n\tlocal git_hunk_start_line_num_index = 0\n\tlocal git_hunk_end_line_num_index = 0\n\tlocal git_hunk_start_line_num_index_offset = 0\n\tlocal git_hunk_end_line_num_index_offset = 0\n\tlocal git_hunk_start_line_num_offset = 0\n\tlocal git_hunk_end_line_num_offset = 0\n\tlocal git_hunk_start_line_num_offset_offset = 0\n\tlocal git_hunk_end_line_num_offset_offset = 0\n\tlocal git_hunk_start_line_offset = 0\n\tlocal git_hunk_end_line_offset = 0\n\tlocal git_hunk_start_line_offset_offset = 0\n\tlocal git_hunk_end_line_offset_offset = 0\n\tlocal git_hunk_start_line_offset_offset_offset = 0\n\tlocal git_hunk_end_line_offset_offset_offset = 0\n\tlocal git_hunk_start_line_offset_offset_offset_offset = 0\n\tlocal git_hunk_end_line_offset_offset_offset_offset = 0\n\tlocal git_hunk_start_line_offset_offset_offset_offset_offset = 0\n\tlocal git_hunk_", "CodeBleu_score": 19.39272182545921}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file = os.tmpname()\n\tlocal f = io.open(temp_file, 'w')\n\tf:write(patch)\n\tf:close()\n\tlocal result, err = self.git:call('add', '-p', temp_file)\n\tos.remove(temp_file)\n\treturn result, err", "CodeBleu_score": 44.16713694398502}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = os.tmpname()\n\tlocal f = io.open(tmp_file, 'wb')\n\tf:write(patch)\n\tf:close()\n\tlocal result = self.git_command:execute('apply', tmp_file)\n\tos.remove(tmp_file)\n\treturn result", "CodeBleu_score": 41.77217719762535}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tempfile = self.git.temp_file()\n\tlocal patch_file = tempfile:write_file(patch)\n\tlocal result = self.git.cmd('apply --cached', patch_file)\n\ttempfile:remove_file()\n\treturn result", "CodeBleu_score": 37.99018205134779}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n// Create the request to the access token endpoint\nRequest request = new Request(Verb.POST, config.getAccessTokenEndpoint());\n\n// Add the authentication header and body parameters\nrequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\nrequest.addBodyParameter(\"oauth_token\", requestToken.getToken());\nrequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n// Send the request and extract the access token from the response body\nResponse response = request.send();\n\n// Extract the access token from the response body using the API's access token extractor\nToken accessToken = (Token) response.getBody().get(config.getAccessTokenExtractor());\n\n// Return the access token\nreturn accessToken;\n}", "CodeBleu_score": 51.63582776290192}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\ttry {\n\t\tString url = config.getAccessTokenUrl();\n\t\tMap<String, String> params = new HashMap<>();\n\t\tparams.put(\"oauth_token\", requestToken.getToken());\n\t\tparams.put(\"oauth_verifier\", verifier.getValue());\n\t\tparams.put(\"oauth_consumer_key\", config.getApiKey());\n\n\t\tString response = sendRequest(url, params, \"POST\", null, getHttpBasicAuthHeaderValue());\n\n\t\treturn extractAccessToken(response);\n\t} catch (Exception e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 39.90387430436322}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tString tokenUrl = config.getAccessTokenUrl();\n\tString token = requestToken.getToken();\n\tString tokenSecret = requestToken.getTokenSecret();\n\tString verifierStr = verifier.getValue();\n\n\tString authStr = getHttpBasicAuthHeaderValue();\n\tString authHeader = \"Authorization: \" + authStr;\n\n\tMap<String, String> bodyParams = new HashMap<String, String>();\n\tbodyParams.put(\"oauth_token\", token);\n\tbodyParams.put(\"oauth_token_secret\", tokenSecret);\n\tbodyParams.put(\"oauth_verifier\", verifierStr);\n\n\tMap<String, String> headers = new HashMap<String, String>();\n\theaders.put(\"Authorization\", authHeader);\n\n\tString responseBody = requester.post(tokenUrl, bodyParams, headers);\n\n\tString accessToken = extractAccessToken(responseBody);\n\tString accessTokenSecret = extractAccessTokenSecret(responseBody);\n\n\treturn new Token(accessToken, accessTokenSecret);\n}", "CodeBleu_score": 36.39356262357458}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\tlog.info(\"Added host \" + host + \" to the authentication cache.\");\n}", "CodeBleu_score": 51.854660592277625}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\tAuthCache authCache = context.getAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tLOG.info(\"Added \" + host.getHostName() + \" to the auth cache\");\n}", "CodeBleu_score": 47.12492575355536}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\tlogger.info(\"Configured authentication details for \" + host.getHostName());\n}", "CodeBleu_score": 37.658308264929424}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t (cache == null) {\n    throw new IllegalStateException(\"Avatar cache is not configured\");\n}\n\n// generate cache key\nString key = source.getCacheKey();\nif (key == null) {\n    throw new IllegalStateException(\"Source does not have a cache key\");\n}\n\n// seed cache\ncache.put(key, new CacheEntry(source, null));\n\n// construct URL\ntry {\n    String url = Jenkins.getInstance().getRootUrl() + \"plugin/avatar-cache/avatar?key=\" + URLEncoder.encode(key, \"UTF-8\") + \"&size=\" + size;\n    return url;\n} catch (UnsupportedEncodingException e) {\n    throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n}\n}", "CodeBleu_score": 44.41391410386647}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tring key = null;\ntry {\nkey = URLEncoder.encode(source.getAvatarUrl(size), \"UTF-8\");\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(\"UTF-8 encoding not supported\", e);\n}\nAvatarCache cache = Jenkins.getInstance().getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\"AvatarCache instance is null\");\n}\nreturn Jenkins.getInstance().getRootUrl() + \"/plugin/avatar-cache/avatar?key=\" + key;\n}", "CodeBleu_score": 46.642977674727334}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\ty {\nJenkins jenkins = Jenkins.getInstance();\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\"AvatarCache not found\");\n}\nString key = cache.generateKey(source);\ncache.seed(key);\nString url = jenkins.getRootUrl() + \"images/avatar-cache/\" + key + \"/\" + size + \".png\";\nreturn url;\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(e);\n}\n}", "CodeBleu_score": 44.12347988999955}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 35.625797817948275}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nif (lastModified < 0) {\nlastModified = System.currentTimeMillis();\n}\nthis.lastModified = lastModified;\n}", "CodeBleu_score": 33.34541256573052}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = image;\n\tthis.lastModified = lastModified < 0? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 35.625797817948275}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tlastModified = cacheEntry.lastModified;\n\t\t\timage = cacheEntry.image;\n\t\t\tfuture = null;\n\t\t} catch (Exception e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 43.307630159285246}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tCacheEntry entry = future.get();\n\t\t\timage = entry.image;\n\t\t\tlastModified = entry.lastModified;\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\tfuture = null;\n\t}\n\treturn true;\n}", "CodeBleu_score": 45.45239852418024}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tImage image = future.get();\n\t\tif (image!= null) {\n\t\t\tthis.image = image;\n\t\t\tthis.lastModified = System.currentTimeMillis();\n\t\t\tfuture = null;\n\t\t}\n\t} catch (InterruptedException e) {\n\t\tfuture = null;\n\t} catch (ExecutionException e) {\n\t\tfuture = null;\n\t}\n\treturn true;\n}", "CodeBleu_score": 38.03730646029181}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tString imageName = req.getParameter(\"imageName\");\n\tif (imageName == null) {\n\t\tthrow new ServletException(\"Missing imageName parameter\");\n\t}\n\ttry {\n\t\tImage image = getImage(imageName);\n\t\tif (image == null) {\n\t\t\tthrow new ServletException(\"Image not found\");\n\t\t}\n\t\tif (image.isFlushed()) {\n\t\t\t// We don't need to write the image to the output stream, so we just\n\t\t\t// flush the response\n\t\t\trsp.flushBuffer();\n\t\t} else {\n\t\t\t// Write the image to the output stream\n\t\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\t\t\tImageIO.write(image.getBufferedImage(), \"png\", baos);\n\t\t\tbaos.flush();\n\t\t\tbyte[] imageData = baos.toByteArray();\n\t\t\tbaos.close();\n\t\t\trsp.setContentType(\"image/png\");\n\t\t\trsp.setContentLength(imageData.length);\n\t\t\trsp.getOutputStream().write(imageData);\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new ServletException(e);\n\t}\n}", "CodeBleu_score": 40.322318885228256}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\t// set headers\n\trsp.setContentType(\"image/png\");\n\trsp.setHeader(\"Cache-Control\", \"max-age=31536000\");\n\trsp.setDateHeader(\"Expires\", System.currentTimeMillis() + 31536000000L);\n\n\t// generate image\n\tbyte[] image = generateImage(req, node);\n\n\t// write image\n\trsp.getOutputStream().write(image);\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 29.11400268243163}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\t// Get the image\n\tBufferedImage image = getImage();\n\n\t// Set the cache headers\n\trsp.setHeader(\"Cache-Control\", \"public, max-age=\" + CACHE_TIME);\n\trsp.setDateHeader(\"Expires\", System.currentTimeMillis() + CACHE_TIME);\n\n\t// Set the content type\n\trsp.setContentType(\"image/png\");\n\n\t// Write the image to the response output stream\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tImageIO.write(image, \"png\", baos);\n\tbaos.flush();\n\trsp.getOutputStream().write(baos.toByteArray());\n\tbaos.close();\n}", "CodeBleu_score": 39.543599446904246}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t  if (enableCache) {\n//        this.enableCache = enableCache;\n//        this.teamCacheDuration = teamCacheDuration;\n//        this.repositoriesCacheDuration = repositoriesCacheDuration;\n//        this.teamCache = new SoftReferenceCache<BitbucketTeam>(teamCacheDuration);\n//        this.repositoriesCache = new SoftReferenceCache<BitbucketRepositories>(repositoriesCacheDuration);\n//    }\n//    if (authenticator!= null) {\n//        this.authenticator = authenticator;\n//        this.authenticator.configureContext(context, BitbucketCloudApiClient.this.getHost());\n//    }\n//    this.setClientProxyParams(BitbucketCloudApiClient.this.getHost(), this.httpClientBuilder);\n//    this.httpClient = this.httpClientBuilder.build();\n//    this.httpClient.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n//    this.httpClient.setConnectionManager(new PoolingHttpClientConnectionManager());\n//    this.httpClient.setRetryHandler(new BitbucketRetryHandler());\n//    this.setClientProxyParams(BitbucketCloudApiClient.this.getHost(), this.httpClientBuilder);\n//    this.httpClient = this.httpClientBuilder.build();\n//    this.httpClient.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n//    this.httpClient.setConnectionManager(new PoolingHttpClientConnectionManager());\n//    this.httpClient.setRetryHandler(new BitbucketRetryHandler());\n}", "CodeBleu_score": 8.257010860658273}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t      if (enableCache) {\n//            teamCache = CacheBuilder.newBuilder().expireAfterWrite(teamCacheDuration, TimeUnit.MINUTES).build(new CacheLoader<String, BitbucketTeam>() {\n//                public BitbucketTeam load(String key) throws Exception {\n//                    return getTeam(key);\n//                }\n//            });\n//            repositoriesCache = CacheBuilder.newBuilder().expireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES).build(new CacheLoader<String, BitbucketRepositories>() {\n//                public BitbucketRepositories load(String key) throws Exception {\n//                    return getRepositories(key);\n//                }\n//            });\n//        }\n//\n//        if (authenticator!= null) {\n//            authenticator.configureContext(context, host);\n//        }\n//\n//        setClientProxyParams(host, builder);\n//\n//        client = builder.build();\n//\n//        if (authenticator!= null) {\n//            authenticator.configureClient(client);\n//        }\n//\n//        if (enableCache) {\n//            if (owner!= null && projectKey!= null) {\n//                teamCache.put(owner + \"/\" + projectKey, getTeam(owner, projectKey));\n//            }\n//            if (owner!= null && projectKey!= null && repositoryName!= null) {\n//                repositoriesCache.put(owner + \"/\" + projectKey + \"/\" + repositoryName, getRepositories(owner, projectKey, repositoryName));\n//            }\n//        }\n//    }", "CodeBleu_score": 8.241546134245601}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t", "CodeBleu_score": 7.452943353488384}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t * The source branch is the branch that the pull request is being merged from.\n */\nString sourceBranchName = pullRequest.getSource().getBranch().getName();\n/**\n * The destination branch is the branch that the pull request is being merged to.\n */\nString destinationBranchName = pullRequest.getDestination().getBranch().getName();\n/**\n * The source branch is the branch that the pull request is being merged from.\n */\nBitbucketCloudBranch sourceBranch = getBranch(sourceBranchName);\n/**\n * The destination branch is the branch that the pull request is being merged to.\n */\nBitbucketCloudBranch destinationBranch = getBranch(destinationBranchName);\n/**\n * The source branch is the branch that the pull request is being merged from.\n */\nString sourceBranchHash = sourceBranch.getHash();\n/**\n * The destination branch is the branch that the pull request is being merged to.\n */\nString destinationBranchHash = destinationBranch.getHash();\n/**\n * The source branch is the branch that the pull request is being merged from.\n */\nString sourceBranchRawNode = sourceBranch.getRawNode();\n/**\n * The destination branch is the branch that the pull request is being merged to.\n */\nString destinationBranchRawNode = destinationBranch.getRawNode();\n/**\n * The source branch is the branch that the pull request is being merged from.\n */\nCommitClosure sourceClosure = new CommitClosure(sourceBranchHash, sourceBranchRawNode);\n/**\n * The destination branch is the branch that the pull request is being merged to.\n */\nCommitClosure destinationClosure = new CommitClosure(destinationBranchHash, destinationBranchRawNode);\n/**\n * The source branch is the branch that the pull request is being merged from.\n */\npullRequest.getSource().setCommitClosure(sourceClosure);\n/**\n * The destination branch is the branch that the pull request is being merged to.\n */\npullRequest.getDestination().setCommitClosure(destinationClosure);\n}", "CodeBleu_score": 33.90075958344993}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t", "CodeBleu_score": 1.9400019824609211}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t", "CodeBleu_score": 1.9400019824609211}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tfinal Jenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is null\");\n\t}\n\tfinal String rootURL = jenkins.getRootUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins root URL is null\");\n\t}\n\tfinal String buildURL = build.getUrl();\n\tif (buildURL == null) {\n\t\tthrow new IllegalStateException(\"Build URL is null\");\n\t}\n\tfinal String displayURL = DisplayURLProvider.get().getBuildURL(buildURL, jenkins);\n\tif (displayURL == null) {\n\t\tthrow new IllegalStateException(\"Display URL is null\");\n\t}\n\treturn rootURL + displayURL;\n}", "CodeBleu_score": 42.386554352229595}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tString rootURL = null;\n\tString jenkinsURL = Jenkins.getInstance().getRootUrl();\n\tif (jenkinsURL!= null) {\n\t\tString jenkinsLocationConfig = build.getParent().getJenkinsLocationConfiguration();\n\t\tif (jenkinsLocationConfig!= null) {\n\t\t\trootURL = DisplayURLProvider.get().getURL(build.getParent(), jenkinsLocationConfig);\n\t\t} else {\n\t\t\tthrow new IllegalStateException(\"No Jenkins Location Configuration found for \" + build.getParent().getDisplayName());\n\t\t}\n\t} else {\n\t\tthrow new IllegalStateException(\"No Jenkins URL found\");\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 40.28423257993922}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkins jenkins = Jenkins.getInstance();\n\tJenkinsLocationConfiguration locationConfig = jenkins.getDescriptorByType(JenkinsLocationConfiguration.class);\n\tif (locationConfig == null) {\n\t\tthrow new IllegalStateException(\"No JenkinsLocationConfiguration found\");\n\t}\n\tString rootURL = locationConfig.getUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"No Jenkins URL found\");\n\t}\n\tDisplayURLProvider provider = jenkins.getDescriptorByType(DisplayURLProvider.class);\n\tif (provider == null) {\n\t\tthrow new IllegalStateException(\"No DisplayURLProvider found\");\n\t}\n\treturn provider.getBuildURL(build, rootURL);\n}", "CodeBleu_score": 44.22677980723345}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url == null) {\n\t\tthrow new IllegalStateException(\"URL cannot be null\");\n\t}\n\tif (!url.startsWith(\"http://\") &&!url.startsWith(\"https://\")) {\n\t\tthrow new IllegalStateException(\"URL must start with http:// or https://\");\n\t}\n\tif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"URL cannot contain localhost or unconfigured-jenkins-location\");\n\t}\n\tif (bitbucket.isCloud() &&!url.contains(\".\")) {\n\t\tthrow new IllegalStateException(\"URL must be fully qualified for Bitbucket Cloud\");\n\t}\n\treturn url;\n}", "CodeBleu_score": 38.608266678453795}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t", "CodeBleu_score": 7.399760459247054}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url == null) {\n\t\tthrow new IllegalStateException(\"URL cannot be null\");\n\t}\n\tif (url.isEmpty()) {\n\t\tthrow new IllegalStateException(\"URL cannot be empty\");\n\t}\n\tif (!url.matches(BITBUCKET_URL_PATTERN)) {\n\t\tthrow new IllegalStateException(\"URL is malformed: \" + url);\n\t}\n\tif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"URL cannot use localhost or unconfigured-jenkins-location: \" + url);\n\t}\n\tif (url.startsWith(\"https://bitbucket.org\") &&!url.endsWith(\".bitbucket.org\")) {\n\t\tthrow new IllegalStateException(\"URL must be fully qualified: \" + url);\n\t}\n\tif (url.startsWith(\"http://bitbucket.org\") &&!url.endsWith(\".bitbucket.org\")) {\n\t\tthrow new IllegalStateException(\"URL must be fully qualified: \" + url);\n\t}\n\treturn url;\n}", "CodeBleu_score": 44.70710996502213}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tInitialize the Bitbucket context and check if notifications are disabled.\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\nif (context.disableNotificationForNotBuildJobs()) {\n    listener.getLogger().println(\"[Bitbucket] Build notifications are disabled for this job\");\n    return;\n}\n\n// 2. Retrieve the SCM revision and its hash.\nSCMRevision revision = build.getRevision();\nString hash = getHash(revision);\nif (hash == null) {\n    listener.getLogger().println(\"[Bitbucket] Failed to retrieve SCM revision hash\");\n    return;\n}\n\n// 3. Determine whether to share the build key between branch and PR.\nboolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n// 4. Log the notification type.\nlistener.getLogger().println(\"[Bitbucket] Build notifications are enabled for this job\");\nlistener.getLogger().println(\"[Bitbucket] Notification type: \" + context.getNotificationType());\n\n// 5. Construct the build key.\nString key = getBuildKey(build, source.getBranch(), shareBuildKeyBetweenBranchAndPR);\n\n// 6. Initialize the Bitbucket client.\nBitbucketApi bitbucket = context.getBitbucketApi();\n\n// 7. Create and send the build status notification.\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 45.839564965342994}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key;\n-    if (shareBuildKeyBetweenBranchAndPR) {\n-        key = String.format(\"%s-%s\", build.getParent().getFullName(), branch);\n-    } else {\n-        key = build.getParent().getFullName();\n-    }\n-    return key;\n+    return shareBuildKeyBetweenBranchAndPR? String.format(\"%s-%s\", build.getParent().getFullName(), branch) : build.getParent().getFullName();\n }", "CodeBleu_score": 50.800620668449966}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = shareBuildKeyBetweenBranchAndPR? branch : build.getParent().getFullName();\n+    String key = shareBuildKeyBetweenBranchAndPR? branch : build.getParent().getFullName().replace('/', '-');\n     return key;\n }", "CodeBleu_score": 41.50211632296753}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String key = build.getDisplayName();\n+    String key = build.getDisplayName(); // TODO: getDisplayName() is deprecated\n     if (shareBuildKeyBetweenBranchAndPR) {\n         key = key + \"-\" + branch;\n     }\n     return key;\n }", "CodeBleu_score": 41.96758445561248}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (server == null) {\n\t\t// This is a legacy object, so we need to reconstruct the legacy traits\n\t\tserver = new Server(null);\n\t\tif (traits == null) {\n\t\t\ttraits = new Traits();\n\t\t}\n\t\ttraits.setServer(server);\n\t}\n\tif (server == null) {\n\t\tLOGGER.log(Level.WARNING, \"BitbucketSCMNavigator is missing server URL and traits, falling back to legacy behavior\");\n\t\treturn new BitbucketSCMNavigator(null, null, null);\n\t}\n\treturn this;\n}", "CodeBleu_score": 16.004323894777812}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (server == null) {\n\t\tserver = Jenkins.getInstance().getURL();\n\t\tLOGGER.log(Level.WARNING, \"BitbucketSCMNavigator was deserialized without a server URL. Resetting to {0}\", server);\n\t}\n\tif (traits == null) {\n\t\t// Reconstruct legacy traits\n\t\ttraits = new ArrayList<SCMNavigatorTrait>();\n\t\ttraits.add(new CredentialsBindingTrait());\n\t\ttraits.add(new ExcludeByDefaultTrait());\n\t\ttraits.add(new ExcludeTagsTrait());\n\t\ttraits.add(new IncludeTagsTrait());\n\t\ttraits.add(new IncludeBranchesTrait());\n\t\ttraits.add(new ExcludeBranchesTrait());\n\t}\n\treturn this;\n}", "CodeBleu_score": 16.607473050632528}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (this.server == null) {\n\t\tthis.server = Jenkins.getInstance().getURL();\n\t\tLOGGER.log(Level.WARNING, \"No Bitbucket server URL is set for the BitbucketSCMNavigator. The server URL will be set to {0}\", this.server);\n\t}\n\tif (this.traits == null) {\n\t\tthis.traits = new BitbucketSCMNavigatorTraits();\n\t}\n\treturn this;\n}", "CodeBleu_score": 10.845449918835167}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\ttry {\n\t\tRepository repository = getRepository(name);\n\t\tif (isMatch) {\n\t\t\tlogger.info(\"Repository {} is proposed\", repository.getName());\n\t\t\tproposedRepositoryCount++;\n\t\t} else {\n\t\t\tlogger.info(\"Repository {} is ignored\", repository.getName());\n\t\t\tignoredRepositoryCount++;\n\t\t}\n\t} catch (IOException e) {\n\t\tlogger.error(\"Could not retrieve repository {}: {}\", name, e.getMessage());\n\t}\n}", "CodeBleu_score": 42.154262476460815}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getRepository(name);\n\tif (repository == null) {\n\t\treturn;\n\t}\n\tif (isMatch) {\n\t\trepository.setProposed(true);\n\t\tproposedCount++;\n\t} else {\n\t\trepository.setIgnored(true);\n\t\tignoredCount++;\n\t}\n\tlog.info(\"Repository {} is {}.\", name, isMatch? \"proposed\" : \"ignored\");\n}", "CodeBleu_score": 37.992854849129415}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tlogger.info(\"Proposed repository: {}\", name);\n\t\tproposedRepositoryCount++;\n\t}\n\telse {\n\t\tlogger.info(\"Ignored repository: {}\", name);\n\t\tignoredRepositoryCount++;\n\t}\n}", "CodeBleu_score": 23.89292593766116}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t/        if (scm.getBranches() == null) {\n//            return rev;\n//        }\n//        List<String> missingBranches = new ArrayList<>();\n//        for (String branch : scm.getBranches()) {\n//            if (branch.startsWith(\"origin/\")) {\n//                String sha1 = branch.substring(7);\n//                if (!commitExists(git, sha1)) {\n//                    missingBranches.add(branch);\n//                }\n//            }\n//        }\n//        if (missingBranches.size() == 0) {\n//            return rev;\n//        }\n//        List<RefSpec> refSpecs = new ArrayList<>();\n//        for (String branch : missingBranches) {\n//            refSpecs.add(new RefSpec(\"+\" + branch + \":refs/remotes/origin/\" + branch));\n//        }\n//        if (refSpecs.size() == 0) {\n//            return rev;\n//        }\n//        try {\n//            git.fetch(scm.getRemote(), refSpecs);\n//        } catch (GitException e) {\n//            throw new RuntimeException(e);\n//        }\n//        return rev;\n        return rev;\n    }", "CodeBleu_score": 12.406994126765424}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        if (scm.getBranches() == null || scm.getBranches().isEmpty()) {\n//            return rev;\n//        }\n\n        String sha1 = rev.getSha1();\n\n        if (sha1 == null) {\n            return rev;\n        }\n\n        if (commitExists(git, sha1)) {\n            return rev;\n        }\n\n        List<String> branches = scm.getBranches();\n        List<String> branchsWithHashes = branches.stream()\n               .filter(b -> b.startsWith(\"refs/heads/\") &&!b.contains(\":\"))\n               .collect(Collectors.toList());\n\n        if (branchsWithHashes.isEmpty()) {\n            return rev;\n        }\n\n        List<String> branchsWithoutHashes = branches.stream()\n               .filter(b -> b.startsWith(\"refs/heads/\") && b.contains(\":\"))\n               .collect(Collectors.toList());\n\n        if (branchsWithoutHashes.isEmpty()) {\n            return rev;\n        }\n\n        List<String> missingHashes = branchsWithHashes.stream()\n               .filter(b ->!commitExists(git, b.substring(11)))\n               .collect(Collectors.toList());\n\n        if (missingHashes.isEmpty()) {\n            return rev;\n        }\n\n        List<String> missingBranches = missingHashes.stream()\n               .map(b -> \"refs/heads/\" + b)\n               .collect(Collectors.toList());\n\n        List<String> refSpecs = missingBranches.stream()\n               .map(b -> \"+\" + b + \":\" + b)\n               .collect(Collectors.toList());\n\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n\n        String cloneUrl = scm.getCloneUrl();\n        if (cloneUrl == null) {\n            return rev;\n        }\n\n        String cloneDir = scm.getExtensions().get(CloneOption.class).getRemote();\n        if (cloneDir == null) {\n            return rev;\n        }\n\n        String cloneDirWithSlash = cloneDir.endsWith(\"/\")? cloneDir : cloneDir + \"/\";\n\n        listener.getLogger().println(\"Fetching missing branches from \" + cloneUrl);\n\n        try {\n            git.fetch(cloneUrl, cloneDirWithSlash, refSpecs);\n            listener.getLogger().println(\"Finished fetching missing branches\");\n        } catch (GitException e) {\n            throw new RuntimeException(e);\n        }\n\n        return rev;\n    }", "CodeBleu_score": 46.29162546524746}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t/        if (scm.getBranches().isEmpty()) {\n//            return rev;\n//        }\n\n        String sha1 = rev.getSha1();\n        if (sha1 == null) {\n            return rev;\n        }\n        if (scm.getBranches().isEmpty()) {\n            return rev;\n        }\n        if (commitExists(git, sha1)) {\n            return rev;\n        }\n        for (BranchSpec branchSpec : scm.getBranches()) {\n            String branch = branchSpec.getName();\n            if (branch.equals(sha1)) {\n                return rev;\n            }\n        }\n\n        List<RefSpec> refSpecs = new ArrayList<>();\n        for (BranchSpec branchSpec : scm.getBranches()) {\n            String branch = branchSpec.getName();\n            if (branch.equals(sha1)) {\n                continue;\n            }\n            if (!commitExists(git, branch)) {\n                refSpecs.add(new RefSpec(branch + \":\" + branch));\n            }\n        }\n        if (!refSpecs.isEmpty()) {\n            try {\n                git.fetch(refSpecs, null, null, null, null, null, null, listener);\n            } catch (GitException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 39.467769174467534}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> links = new HashMap<String, BitbucketHref>();\n\tif (this.links == null) {\n\t\treturn null;\n\t}\n\tfor (String key : this.links.keySet()) {\n\t\tlinks.put(key, this.links.get(key).getFirst());\n\t}\n\treturn links;\n}", "CodeBleu_score": 41.831360527162424}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tnewLinks.put(entry.getKey(), entry.getValue());\n\t}\n\treturn newLinks;\n}", "CodeBleu_score": 50.43918771582441}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t} else {\n\t\tMap<String, BitbucketHref> newLinks = new HashMap<>();\n\t\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\t\tnewLinks.put(entry.getKey(), entry.getValue());\n\t\t}\n\t\treturn newLinks;\n\t}\n}", "CodeBleu_score": 51.37562473684456}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t", "CodeBleu_score": 2.2664046881289432}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t", "CodeBleu_score": 2.2664046881289432}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourceUris = resourceStates.map(resourceState => resourceState.resource.uri);\n\tconst resourcePaths = await Promise.all(resourceUris.map(uri => this.fileService.resolvePath(uri)));\n\tconst repository = await this.sourceControlService.getRepository(resourcePaths[0]);\n\n\tif (!repository) {\n\t\treturn;\n\t}\n\n\tconst filePaths = await Promise.all(resourcePaths.map(resourcePath => repository.toLocalResource(resourcePath)));\n\n\ttry {\n\t\tawait repository.add(filePaths);\n\t\tthis.sourceControlService.refresh(repository);\n\t} catch (error) {\n\t\tthis.logService.error(error);\n\t\tthis.messageService.show(Severity.Error, nls.localize('addFiles.error', \"Unable to add files to repository '{0}'\", repository.name));\n\t}\n}", "CodeBleu_score": 47.866023257710054}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tlet resourceStates: ResourceState[] = [];\n\tlet resourceState: ResourceState;\n\tlet resource: Resource;\n\tlet resourceUri: Uri;\n\tlet resourceUriString: string;\n\tlet resourceUriArray: string[];\n\tlet resourceUriLength: number;\n\tlet resourceUriIndex: number;\n\n\t// Check if resource states are empty or if the first resource URI is not an instance of Uri.\n\tif (this._resourceStates.length === 0 ||!(this._resourceStates[0] instanceof Uri)) {\n\t\t// Get a single SCM resource.\n\t\tresource = await this.getResource();\n\t\t// Update resource states.\n\t\tthis._resourceStates = [resource.resourceState];\n\t}\n\n\t// Filter and return resource states that are instances of Resource.\n\tfor (resourceState of this._resourceStates) {\n\t\tif (resourceState instanceof Resource) {\n\t\t\tresourceStates.push(resourceState);\n\t\t}\n\t}\n\n\treturn resourceStates;\n}", "CodeBleu_score": 28.247885318406595}, {"code": "protected async getResourceStates{\n\tlet resourceStates = new Map<string, ResourceState>();\n\n// If the resource states are empty or the first resource URI is not an instance of Uri, then get a single SCM resource.\nif (resourceStates.size === 0 ||!isUri(resourceStates.keys().next().value)) {\nconst scmResource = await this.scmProvider.getScmResource(this.resourceUri);\nif (scmResource) {\nresourceStates.set(scmResource.resourceUri, scmResource);\n}\n}\n\n// Filter and return the resource states that are instances of Resource.\nreturn Array.from(resourceStates.values()).filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 34.33960715416303}, {"code": "protected async getResourceStates{\n\t\tlet resourceStates: IResourceState[] = [];\n\n\tif (this.resourceStates.length === 0 ||!this.resourceStates[0].uri ||!(this.resourceStates[0].uri instanceof Uri)) {\n\t\tconst resource = await this.getResource();\n\t\tif (resource) {\n\t\t\tresourceStates.push(resource);\n\t\t}\n\t} else {\n\t\tresourceStates = this.resourceStates;\n\t}\n\n\treturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 42.7704195985271}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi) {\n\t\turi = window.activeTextEditor?.document.uri;\n\t}\n\n\tif (uri.scheme!== 'file') {\n\t\turi = Uri.parse(uri.toString().replace('svn', 'file'));\n\t}\n\n\tconst repository = await this.repository.getResourceFromFile(uri);\n\tif (repository) {\n\t\treturn repository.getResource(uri);\n\t}\n\n\treturn undefined;\n  }", "CodeBleu_score": 22.790243815533135}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t activeEditor = window.activeTextEditor;\n\tif (!activeEditor) {\n\t\treturn undefined;\n\t}\n\n\tconst activeUri = uri || activeEditor.document.uri;\n\tif (!activeUri) {\n\t\treturn undefined;\n\t}\n\n\tif (activeUri.scheme ==='svn') {\n\t\tconst fileUri = Uri.file(activeUri.path);\n\t\tconst repository = await this.sourceControlManager.getRepository(fileUri);\n\t\treturn repository?.getResource(fileUri);\n\t}\n\n\treturn this.sourceControlManager.getRepository(activeUri)?.getResource(activeUri);\n  }", "CodeBleu_score": 42.524920909362976}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t activeTextEditor = window.activeTextEditor;\n\tif (!activeTextEditor) {\n\t\treturn undefined;\n\t}\n\n\tlet resource: Resource | undefined;\n\tconst uriToUse = uri || activeTextEditor.document.uri;\n\n\tif (uriToUse.scheme === \"svn\") {\n\t\tconst fileUri = Uri.file(uriToUse.fsPath);\n\t\tresource = await this.repository.getResourceFromFile(fileUri);\n\t} else {\n\t\tconst repository = await this.sourceControlManager.getRepository(uriToUse);\n\t\tif (repository) {\n\t\t\tresource = await repository.getResource(uriToUse);\n\t\t}\n\t}\n\n\treturn resource;\n}", "CodeBleu_score": 44.021233567440035}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet remoteRepo = await this.model.getRemoteRepository(element.path);\nif (element.action === \"M\") {\nlet oldRev = element.oldRev;\nlet newRev = element.newRev;\nlet oldPath = element.oldPath;\nlet newPath = element.newPath;\nlet oldFile = await remoteRepo.getFile(oldPath, oldRev);\nlet newFile = await remoteRepo.getFile(newPath, newRev);\nlet oldFileContents = await oldFile.getContent();\nlet newFileContents = await newFile.getContent();\nlet diff = await this.model.diff(oldFileContents, newFileContents);\nlet diffEditor = await this.model.openDiffEditor(diff, oldFileContents, newFileContents);\n} else if (element.action === \"A\") {\nlet newPath = element.newPath;\nlet newRev = element.newRev;\nlet newFile = await remoteRepo.getFile(newPath, newRev);\nlet newFileContents = await newFile.getContent();\nlet diff = await this.model.diff(newFileContents, \"\");\nlet diffEditor = await this.model.openDiffEditor(diff, newFileContents, \"\");\n}\n}", "CodeBleu_score": 32.84424161020255}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet remoteRepository = this.model.getRemoteRepository(element);\nif (!remoteRepository) {\nreturn;\n}\nlet remotePath = element.path;\nlet remoteRevision = element.revision;\nif (element.action === SvnAction.ADD) {\nremotePath = element.path + '@' + remoteRevision;\n}\nlet remoteFile = await remoteRepository.getFile(remotePath);\nif (remoteFile) {\nlet remoteFileUrl = remoteFile.getUrl();\nlet diffCmd = this.model.getDiffCmd(remoteFileUrl);\nif (diffCmd) {\ndiffCmd.open();\n}\n}\n}", "CodeBleu_score": 37.96654055826837}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t", "CodeBleu_score": 2.6796502104451685}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Clipboard is not supported on this platform');\n\t\treturn;\n\t}\n\n\tlet message: string;\n\tswitch (what) {\n\t\tcase 'commit':\n\t\t\tmessage = item.commit.message;\n\t\t\tbreak;\n\t\tcase'revision':\n\t\t\tmessage = item.revision;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn;\n\t}\n\n\tawait clipboard.writeText(message);\n}", "CodeBleu_score": 30.00064636053078}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!isClipboardSupported()) {\n\t\twindow.showErrorMessage(localize('clipboardNotSupported', \"The clipboard is not supported on this platform. Please copy the commit message to the clipboard manually.\"));\n\t\treturn;\n\t}\n\n\tif (item instanceof Commit) {\n\t\tawait window.clipboard.writeText(what ==='message'? item.message : item.revision);\n\t}\n}", "CodeBleu_score": 29.18282943002558}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!item.logItem) {\n\t\treturn;\n\t}\n\n\tif (item.logItem.type === LogItemType.Commit) {\n\t\tif (what ==='message') {\n\t\t\tawait vscode.env.clipboard.writeText(item.logItem.message);\n\t\t} else if (what ==='revision') {\n\t\t\tawait vscode.env.clipboard.writeText(item.logItem.revision);\n\t\t} else {\n\t\t\tthrow new Error('Invalid argument');\n\t\t}\n\t} else {\n\t\tvscode.window.showErrorMessage('The item is not a commit.');\n\t}\n}", "CodeBleu_score": 28.205515973532393}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n\tlong priority = 0L;\n\tGiteaConnectionFactory best = null;\n\tfor (GiteaConnectionFactory factory : loader) {\n\t\tif (factory.canOpen(this)) {\n\t\t\tlong p = factory.priority(this);\n\t\t\tif (best == null || p > priority) {\n\t\t\t\tbest = factory;\n\t\t\t\tpriority = p;\n\t\t\t}\n\t\t}\n\t}\n\tif (best!= null) {\n\t\treturn best.open(this);\n\t}\n\tthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 91.40853531201444}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n\tlong priority = 0L;\n\tGiteaConnectionFactory best = null;\n\tfor (GiteaConnectionFactory factory : loader) {\n\t\tif (factory.canOpen(this)) {\n\t\t\tlong p = factory.priority(this);\n\t\t\tif (best == null || p > priority) {\n\t\t\t\tbest = factory;\n\t\t\t\tpriority = p;\n\t\t\t}\n\t\t}\n\t}\n\tif (best!= null) {\n\t\treturn best.open(this);\n\t}\n\tthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 91.40853531201444}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\ttry {\n\t\tJenkins jenkins = Jenkins.getInstance();\n\t\tif (jenkins!= null) {\n\t\t\tPluginManager pluginManager = jenkins.getPluginManager();\n\t\t\tif (pluginManager!= null) {\n\t\t\t\treturn Gitea.getGitea(pluginManager.uberClassLoader);\n\t\t\t}\n\t\t}\n\t} catch (Throwable t) {\n\t\tLOGGER.log(Level.SEVERE, \"Failed to get Jenkins instance\", t);\n\t}\n\treturn Gitea.getGitea(Gitea.class.getClassLoader());\n}", "CodeBleu_score": 34.91857584833106}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = null;\n\ttry {\n\t\tJenkins jenkins = Jenkins.getInstance();\n\t\tif (jenkins!= null) {\n\t\t\tPluginManager pluginManager = jenkins.getPluginManager();\n\t\t\tif (pluginManager!= null) {\n\t\t\t\tgitea = pluginManager.getPlugin(\"gitea-plugin\");\n\t\t\t\tif (gitea!= null) {\n\t\t\t\t\treturn gitea;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLOGGER.log(Level.WARNING, \"Error getting Jenkins instance\", e);\n\t}\n\n\treturn Jenkins.getInstance().getPluginManager().getPlugin(\"gitea-plugin\");\n}", "CodeBleu_score": 35.674903060466704}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tJenkins jenkins = Jenkins.getInstance();\n\tif (jenkins!= null) {\n\t\treturn jenkins.getPluginManager().uberClassLoader;\n\t}\n\treturn getClass().getClassLoader();\n}", "CodeBleu_score": 39.04035717318305}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName == null? serverUrl : displayName;\n\tthis.serverUrl = serverUrl.trim();\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = aliasUrl == null? serverUrl : aliasUrl.trim();\n}", "CodeBleu_score": 26.841837248015242}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = StringUtils.trimToNull(displayName);\n\tthis.serverUrl = StringUtils.trimToNull(serverUrl);\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = StringUtils.trimToNull(aliasUrl);\n\tthis.manageHooks = manageHooks;\n}", "CodeBleu_score": 33.98969494685247}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tsuper(displayName, serverUrl, credentialsId);\n\tthis.manageHooks = manageHooks;\n\tthis.aliasUrl = aliasUrl;\n\tthis.displayName = displayName;\n\tif (displayName == null) {\n\t\tthis.displayName = getDisplayNameFromUrl(serverUrl);\n\t}\n\tthis.displayName = StringUtils.trimToNull(displayName);\n\tthis.aliasUrl = StringUtils.trimToNull(aliasUrl);\n}", "CodeBleu_score": 37.94404056407594}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t", "CodeBleu_score": 3.45979953399745}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<String> items = new ArrayList<>();\n\titems.add(Messages.GiteaAuth_Credentials_None());\n\tif (GiteaAuth.hasAdminPermissions(serverUrl)) {\n\t\titems.add(Messages.GiteaAuth_Credentials_All());\n\t}\n\titems.addAll(GiteaAuth.getCredentialsForServer(serverUrl));\n\treturn new ListBoxModel(items.toArray(new String[0]));\n}", "CodeBleu_score": 28.748123111773406}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t", "CodeBleu_score": 3.45979953399745}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (uri.getScheme().equals(\"http\")) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), \"/\", null);\n\t\t\t} else if (uri.getScheme().equals(\"https\")) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getHost(), \"/\", null);\n\t\t\t}\n\t\t}\n\t\treturn uri.toString();\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 23.9194136092855}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tif (scheme == null) {\n\t\t\tscheme = \"http\";\n\t\t}\n\t\tif (host == null) {\n\t\t\thost = \"\";\n\t\t}\n\t\tif (port == -1) {\n\t\t\tif (scheme.equals(\"http\")) {\n\t\t\t\tport = 80;\n\t\t\t} else if (scheme.equals(\"https\")) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\tif (host.isEmpty() && port == 80) {\n\t\t\tscheme = scheme.toLowerCase();\n\t\t} else if (host.isEmpty() && port == 443) {\n\t\t\tscheme = scheme.toLowerCase() + \"s\";\n\t\t} else {\n\t\t\tscheme = scheme.toLowerCase() + \"://\" + host;\n\t\t\tif (port!= 80 && port!= 443) {\n\t\t\t\tscheme = scheme + \":\" + port;\n\t\t\t}\n\t\t}\n\t\treturn scheme + \"/\";\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 38.261448915214785}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tif (uri.getScheme() == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (uri.getScheme().equalsIgnoreCase(\"http\")) {\n\t\t\tif (uri.getPort() == -1) {\n\t\t\t\turi = uri.normalize().resolve(\"://www.example.com/\");\n\t\t\t} else if (uri.getPort() == 80) {\n\t\t\t\turi = uri.normalize().resolve(\"://www.example.com\");\n\t\t\t}\n\t\t} else if (uri.getScheme().equalsIgnoreCase(\"https\")) {\n\t\t\tif (uri.getPort() == -1) {\n\t\t\t\turi = uri.normalize().resolve(\"://www.example.com/\");\n\t\t\t} else if (uri.getPort() == 443) {\n\t\t\t\turi = uri.normalize().resolve(\"://www.example.com\");\n\t\t\t}\n\t\t}\n\t\treturn uri.normalize().toString();\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 27.417904121430265}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n for (GiteaServer server : getServers()) {\n if (server.getDisplayName().isEmpty()) {\n items.add(server.getUrl());\n } else {\n items.add(server.getUrl(), server.getDisplayName());\n }\n }\n return items;\n}", "CodeBleu_score": 35.785100285125786}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\titems.add(server.getUrl(), server.getDisplayName());\n\t}\n\treturn items;\n}", "CodeBleu_score": 29.567202068038846}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tif (server.getDisplayName().isEmpty()) {\n\t\t\tmodel.add(server.getUrl());\n\t\t} else {\n\t\t\tmodel.add(server.getDisplayName(), server.getUrl());\n\t\t}\n\t}\n\treturn model;\n}", "CodeBleu_score": 35.31921400944242}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\t// Check for admin permissions\n\tif (!isAuthorized()) {\n\t\tthrow new PermissionException();\n\t}\n\n\t// Remove duplicates and empty URLs\n\tList<GiteaServer> filteredServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (!filteredServers.contains(server) &&!server.getUrl().isEmpty()) {\n\t\t\tfilteredServers.add(server);\n\t\t}\n\t}\n\n\t// Update the servers\n\tthis.servers = filteredServers;\n\n\t// Save the configuration\n\tsave();\n}", "CodeBleu_score": 27.460971369479182}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\nif (servers == null) {\n    servers = new ArrayList<>();\n}\n\nList<GiteaServer> giteaServers = new ArrayList<>();\n\nfor (GiteaServer server : servers) {\n    if (server!= null) {\n        giteaServers.add(server);\n    }\n}\n\nfor (GiteaServer server : giteaServers) {\n    if (server.getUrl() == null || server.getUrl().trim().isEmpty()) {\n        giteaServers.remove(server);\n    }\n}\n\nif (giteaServers.size() > 0) {\n    for (int i = 0; i < giteaServers.size(); i++) {\n        for (int j = i + 1; j < giteaServers.size(); j++) {\n            if (giteaServers.get(i).getUrl().equals(giteaServers.get(j).getUrl())) {\n                giteaServers.remove(j);\n                j--;\n            }\n        }\n    }\n}\n\nif (giteaServers.size() > 0) {\n    for (GiteaServer server : giteaServers) {\n        if (server.getAdminUsername() == null || server.getAdminUsername().trim().isEmpty()) {\n            server.setAdminUsername(Jenkins.get().getSecurityRealm().getName());\n        }\n\n        if (server.getAdminPassword() == null || server.getAdminPassword().trim().isEmpty()) {\n            server.setAdminPassword(Jenkins.get().getSecurityRealm().getPassword().getPlainText());\n        }\n    }\n}\n\nthis.giteaServers = giteaServers;\n\nsave();\n}", "CodeBleu_score": 33.80545129281616}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\t// Check for admin permissions\n\tif (!ExtensionList.lookup(GlobalConfiguration.class).get(GiteaServers.class).hasAdminPermission()) {\n\t\tthrow new PermissionException();\n\t}\n\n\t// Remove duplicates and empty URLs\n\tSet<String> urls = new HashSet<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null &&!urls.contains(server.getUrl())) {\n\t\t\turls.add(server.getUrl());\n\t\t}\n\t}\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (String url : urls) {\n\t\tnewServers.add(new GiteaServer(url));\n\t}\n\n\t// Update the list of servers\n\tthis.servers = newServers;\n\n\t// Save the configuration\n\tsave();\n}", "CodeBleu_score": 32.704829336433214}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tnkins.get().checkPermission(Jenkins.ADMINISTER);\nserverUrl = normalizeServerUrl(serverUrl);\nList<GiteaServer> eps = new ArrayList<>(servers);\nboolean removed = false;\nfor (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nif (serverUrl.equals(endpoint.getServerUrl())) {\niterator.remove();\nremoved = true;\n}\n}\nif (removed) {\nsave();\n}\nreturn removed;\n}", "CodeBleu_score": 53.22516066608722}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t", "CodeBleu_score": 2.448699069943134}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tnkins.get().checkPermission(Jenkins.ADMINISTER);\nserverUrl = normalizeServerUrl(serverUrl);\nfor (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nif (endpoint.getServerUrl().equals(serverUrl)) {\niterator.remove();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 35.49391554004165}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t(Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\t\tString type = el.asType().toString();\n\t\tdescriptorElements.add(new DescriptorElement(type, attributes));\n\t}\n}", "CodeBleu_score": 41.58014191083178}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t(Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n\nMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\nString type = el.asType().toString();\n\ndescriptorElements.add(new DescriptorElement(type, attributes));\n}\n}", "CodeBleu_score": 41.40223393337274}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n//    Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n//    String type = getType(el);\n//    descriptorElements.add(new ConfigElement(type, attributes));\n//  }\n}", "CodeBleu_score": 12.592059940615977}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotationClass.getName().replace(\"$\", \".\").equals(annotation.getQualifiedName().toString())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 48.84551187976493}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString targetName = annotationClass.getName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(targetName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.03293439157611}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (qualifiedName.equals(annotationClass.getName().replace('$', '.')) || qualifiedName.endsWith(\".\" + annotationClass.getSimpleName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 40.07490977122681}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {}\n\n    if employee:\n        filters[\"employee\"] = employee\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n        filters[\"status\"] = [\"!=\", \"Draft\"]\n        filters[\"status\"] = [\"!=\", \"Rejected\"]\n        filters[\"status\"] = [\"!=\", \"Approved\"]\n        filters[\"status\"] = [\"!=\", \"Pending\"]\n        filters[\"status\"] = [\"!=\", \"Rejected\"]\n        filters[\"status\"] = [\"!=\", \"Approved\"]\n        filters[\"status\"] = [\"!=\", \"Pending\"]\n    else:\n        filters[\"status\"] = [\"Open\", \"Pending\", \"Approved\"]\n\n    return filters\n\n", "CodeBleu_score": 23.935590157745}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {}\n    if approver_id:\n        filters[\"approver\"] = approver_id\n    if employee:\n        filters[\"employee\"] = employee\n    if for_approval:\n        filters.update(\n            get_leave_application_filters(employee, None, False),\n            get_workflow_filters(\n                frappe.get_doc(\"Workflow\", \"Leave Application\"),\n                \"Leave Application\",\n                employee,\n                None,\n                for_approval,\n            ),\n        )\n    else:\n        filters.update(\n            get_workflow_filters(\n                frappe.get_doc(\"Workflow\", \"Leave Application\"),\n                \"Leave Application\",\n                employee,\n                None,\n                for_approval,\n            )\n        )\n        filters.update({\"status\": [\"!=\", \"Canceled\"]})\n    return filters\n\n", "CodeBleu_score": 24.743469424988522}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"docstatus\": 1,\n        \"workflow_state\": \"Open\",\n    }\n\n    if approver_id:\n        filters[\"approver\"] = approver_id\n\n    if for_approval:\n        filters[\"workflow_state\"] = get_allowed_states_for_workflow(\n            frappe.get_doc(\"Workflow\", \"Leave Application\"), approver_id\n        )\n        filters[\"workflow_state\"] = [\"Open\"] + filters[\"workflow_state\"]\n        filters[\"docstatus\"] = [0, 1]\n    else:\n        filters[\"workflow_state\"] = \"Open\"\n        filters[\"docstatus\"] = 1\n\n    return filters\n\n", "CodeBleu_score": 32.98087778631759}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated\"] = leave_details[leave_type][\"allocated\"]\n        leave_balance_map[leave_type][\"balance\"] = leave_details[leave_type][\"balance\"]\n    return leave_balance_map\n\n", "CodeBleu_score": 29.582694753897393}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    current_date = datetime.datetime.now()\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": leave_details[leave_type][\"allocated_leave\"],\n            \"balance_leave\": leave_details[leave_type][\"balance_leave\"]\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 38.27980652034889}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = datetime.now().date()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {'allocated': leave_details[leave_type]['allocated'], 'balance': leave_details[leave_type]['balance']}\n    return leave_balance_map\n\n", "CodeBleu_score": 39.03133484525132}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list(employee)\n    if holiday_list is None:\n        return []\n    holidays = []\n    for holiday in holiday_list:\n        if holiday.get('type') == 'Holiday':\n            holiday_description = holiday.get('description')\n            holiday_description = re.sub('<.*?>', '', holiday_description)\n            holiday_description = re.sub('&nbsp;', '', holiday_description)\n            holidays.append({\n                'date': holiday.get('date'),\n                'description': holiday_description\n            })\n    return holidays\n\n", "CodeBleu_score": 25.114435594956987}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holidays = get_holiday_list_for_employee(employee)\n    if not holidays:\n        return []\n\n    holidays = [h for h in holidays if h['type']!= 'Weekend']\n    holidays = sorted(holidays, key=lambda h: h['date'])\n    holidays = [\n        {\n            'date': h['date'].strftime('%Y-%m-%d'),\n            'description': h['description'].replace('<p>', '').replace('</p>', ''),\n        }\n        for h in holidays\n    ]\n    return holidays\n\n", "CodeBleu_score": 25.467813151292496}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = get_holidays(holiday_list)\n    holidays = [holiday for holiday in holidays if holiday['date'] not in get_weekly_offs()]\n    holidays = sorted(holidays, key=lambda holiday: holiday['date'])\n    holidays = [holiday for holiday in holidays if holiday['description']]\n    holidays = [holiday for holiday in holidays if holiday['date'] >= datetime.now().date()]\n    holidays = [holiday for holiday in holidays if holiday['date'] <= datetime.now().date() + timedelta(days=30)]\n    holidays = [holiday for holiday in holidays if holiday['date'] >= datetime.now().date() - timedelta(days=14)]\n    holidays = [holiday for holiday in holidays if holiday['date'] <= datetime.now().date() + timedelta(days=14)]\n    holidays = [holiday for holiday in holidays if holiday['date'] >= datetime.now().date() - timedelta(days=7)]\n    holidays = [holiday for holiday in holidays if holiday['date'] <= datetime.now().date() + timedelta(days=7)]\n    holidays = [holiday for holiday in holidays if holiday['date'] >= datetime.now().date() - timedelta(days=1)]\n    holidays = [holiday for holiday in holidays if holiday['date'] <= datetime.now().date() + timedelta(days=1)]\n    holidays = [holiday for holiday in holidays if holiday['date'] >= datetime.now().date() - timedelta(days=0)]\n    holidays = [holiday for holiday in holidays if holiday['date'] <= datetime.now().date() + timedelta(days=0)]\n    holidays = [holiday for holiday in holidays if holiday['date'] >= datetime.now().date() - timedelta(days=-1)]\n    holidays = [holiday for holiday in holidays if holiday['date'] <= datetime.now().date() + timedelta(days=-1)]\n    holidays = [holiday for holiday in holidays if holiday['date'] >= datetime.now().date() -", "CodeBleu_score": 31.441243640005002}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_holidays_reminders\"):\n        return\n\n    if frappe.db.get_single_value(\"HR Settings\", \"send_holidays_reminders_weekly_frequency\")!= \"Weekly\":\n        return\n\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 36.15698278890856}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_single(\"Holiday Reminder Settings\")\n    if settings.send_reminders_in_advance and settings.frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 19.65844084971994}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_single(\"HR Settings\")\n    if settings.send_advance_holiday_reminders and settings.advance_holiday_reminder_frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 21.150454776846882}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n\n    self_appraisal_score = 0\n    for rating in self_ratings:\n        self_appraisal_score += rating[1] * 5 * rating[2]\n    self_appraisal_score = round(self_appraisal_score, 2)\n    return self_appraisal_score\n\n", "CodeBleu_score": 17.566678131181018}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self_ratings:\n        self_appraisal_score += (self_rating.rating * 5) * self_rating.percentage_weightage\n    return round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 22.574708644826313}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self_ratings:\n        self_appraisal_score += (self_rating['rating'] * 5) * (self_rating['weightage'] / 100)\n    self_appraisal_score = round(self_appraisal_score, 2)\n    return self_appraisal_score\n\n", "CodeBleu_score": 18.836348729733906}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    # Get the appraisal cycle document\n    appraisal_cycle_doc = self.get_appraisal_cycle_doc()\n\n    # Check if the final score should be calculated based on a formula\n    if \"formula\" in appraisal_cycle_doc:\n        # Get the formula\n        formula = appraisal_cycle_doc[\"formula\"]\n\n        # Sanitize the formula\n        sanitized_formula = sanitize_expression(formula)\n\n        # Evaluate the formula\n        final_score = eval(sanitized_formula)\n\n        # Set the final score with the appropriate precision\n        final_score = round(final_score, self.precision)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = round((self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3, self.precision)\n\n    # Set the final score\n    self.final_score = final_score\n\n    return self.final_score\n\n", "CodeBleu_score": 26.04674113858217}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = self.get_appraisal_cycle_document()\n    if appraisal_cycle_doc:\n        formula = appraisal_cycle_doc.get(\"final_score_formula\")\n        if formula:\n            formula = sanitize_expression(formula)\n            if formula:\n                try:\n                    total_score = self.get_total_score()\n                    average_feedback_score = self.get_average_feedback_score()\n                    self_appraisal_score = self.get_self_appraisal_score()\n                    final_score = eval(formula)\n                    final_score = round(final_score, 2)\n                    self.set_final_score(final_score)\n                    self.set_final_score_formula(formula)\n                    self.set_final_score_calculation_date(datetime.now())\n                    self.set_final_score_calculation_user(self.get_user())\n                    self.set_final_score_calculation_type(\"Formula\")\n                    self.set_final_score_calculation_comment(f\"Final score calculated based on formula: {formula}\")\n                    self.set_final_score_calculation_status(\"Success\")\n                except Exception as e:\n                    self.set_final_score_calculation_status(\"Error\")\n                    self.set_final_score_calculation_comment(f\"Error calculating final score: {str(e)}\")\n            else:\n                self.set_final_score_calculation_status(\"Error\")\n                self.set_final_score_calculation_comment(\"Error calculating final score: Final score formula is empty.\")\n        else:\n            total_score = self.get_total_score()\n            average_feedback_score = self.get_average_feedback_score()\n            self_appraisal_score = self.get_self_appraisal_score()\n            final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n            final_score = round(final_score, 2)\n            self.set_final_score(final_score)\n            self.set_final_score_calculation_date(datetime.now())\n            self.set_final_score_calculation_user(self.get_user())\n            self.set_final_score_", "CodeBleu_score": 26.93268241935982}, {"code": "def calculate_final_score(self)\n\t\n    # Retrieve the appraisal cycle document\n    appraisal_cycle_doc = self.get_appraisal_cycle_doc()\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle_doc.get(\"formula\"):\n        # Gather necessary data\n        formula = appraisal_cycle_doc.get(\"formula\")\n        employee_id = self.get_employee_id()\n        appraisal_cycle_id = appraisal_cycle_doc.get(\"_id\")\n\n        # Sanitize the formula\n        formula = sanitize_expression(formula)\n\n        # Evaluate the formula\n        try:\n            final_score = eval(formula)\n        except Exception as e:\n            # Set the final score to None if the formula is invalid\n            final_score = None\n            print(f\"Invalid formula: {e}\")\n\n        # Set the final score with the appropriate precision\n        final_score = round(final_score, 2)\n\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        total_score = self.get_total_score()\n        average_feedback_score = self.get_average_feedback_score()\n        self_appraisal_score = self.get_self_appraisal_score()\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n    # Set the final score\n    self.set_final_score(final_score)\n\n", "CodeBleu_score": 32.40227905596258}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date < self.employee.date_of_joining:\n        raise ValidationError(\"Attendance date cannot be earlier than the employee's date of joining.\")\n    if self.attendance_date > date.today():\n        if self.status!= \"On Leave\":\n            raise ValidationError(\"Attendance date cannot be in the future unless the status is 'On Leave'.\")\n        elif self.status == \"On Leave\":\n            leave_applications = self.employee.leave_applications.all()\n            for leave_application in leave_applications:\n                if leave_application.status == \"Pending\" and leave_application.end_date >= self.attendance_date:\n                    raise ValidationError(\"Attendance date cannot be in the future if there is a pending leave application for the employee.\")\n    return True\n\n", "CodeBleu_score": 32.550836980303494}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status!= \"On Leave\" and self.attendance_date > datetime.date.today():\n        raise ValidationError(\"Attendance date cannot be in the future unless the status is 'On Leave'.\")\n    if self.attendance_date < self.employee.date_of_joining:\n        raise ValidationError(\"Attendance date cannot be earlier than the date of joining.\")\n\n", "CodeBleu_score": 18.3635965614648}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date < datetime.date.today():\n        raise ValidationError(\"Attendance date cannot be earlier than today's date.\")\n    if self.attendance_date > datetime.date.today():\n        if self.status!= \"On Leave\":\n            raise ValidationError(\"Attendance date cannot be for future dates unless the status is 'On Leave'.\")\n        if self.leave_application:\n            raise ValidationError(\"Attendance date cannot be for future dates if there is a leave application.\")\n    if self.attendance_date < self.employee.date_of_joining:\n        raise ValidationError(\"Attendance date cannot be earlier than the employee's date of joining.\")\n\n", "CodeBleu_score": 27.38936453148874}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t   duplicate_attendance_record = self.get_duplicate_attendance_record()\n    if duplicate_attendance_record:\n        frappe.throw(\n            f\"Duplicate attendance record found for {self.employee} on {self.attendance_date}. \"\n            f\"Click <a href='{frappe.utils.get_url_to_form('Attendance', duplicate_attendance_record)}'>here</a> to view the existing attendance record.\"\n        )\n\n", "CodeBleu_score": 10.368911747220414}, {"code": "def validate_duplicate_record(self)\n\t   duplicate = self.get_duplicate_attendance_record()\n\n    if duplicate:\n        frappe.throw(\n            f\"Duplicate attendance record found for employee {self.employee} on {self.attendance_date}. Please check the existing attendance record at {frappe.utils.get_url_to_form('Attendance', duplicate)}\"\n        )\n\n", "CodeBleu_score": 13.289794927951359}, {"code": "def validate_duplicate_record(self)\n\t   duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Duplicate attendance record found for {0} on {1}. Please check the existing attendance record {2}\"\n            ).format(self.employee, self.attendance_date, frappe.utils.get_url_to_form(\"Attendance\", duplicate))\n        )\n\n", "CodeBleu_score": 34.43821871859289}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if not self.message:\n        return\n\n    if not self.email_sent_to:\n        return\n\n    # get user emails from group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # send email\n    send_email(\n        self.message,\n        self.email_sent_to,\n        self.name,\n        _(\"Work Summary\"),\n        \"Daily Work Summary\",\n        emails,\n        self.daily_work_summary_group,\n    )\n\n    # update status\n    self.status = \"Sent\"\n    self.save()\n", "CodeBleu_score": 45.45828072952249}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Sent\":\n        return\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Daily Work Summary Group is mandatory\"))\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Email Sent To is mandatory\"))\n\n    if not self.message:\n        frappe.throw(_(\"Message is mandatory\"))\n\n    message = self.message\n\n    if not message.startswith(\"<p>\"):\n        message = f\"<p>{message}</p>\"\n\n    if not message.endswith(\"</p>\"):\n        message = f\"{message}</p>\"\n\n    message = frappe.safe_decode(message)\n\n    if not message:\n        frappe.throw(_(\"Message is empty\"))\n\n    if not self.get_message_details():\n        frappe.throw(_(\"Message details are empty\"))\n\n    message_details = self.get_message_details()\n\n    message_details[\"message\"] = message\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Email Sent To is mandatory\"))\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Daily Work Summary Group is mandatory\"))\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Email Sent To is mandatory\"))\n\n    if not self.message:\n        frappe.throw(_(\"Message is mandatory\"))\n\n    if not self.get_message_details():\n        frappe.throw(_(\"Message details are empty\"))\n\n    message_details = self.get_message_details()\n\n    message_details[\"message\"] = message\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Email Sent To is mandatory\"))\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Daily Work Summary Group is mandatory\"))\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Email Sent To is mandatory\"))\n\n    if not self.message:\n        frappe.throw(_(\"Message is mandatory\"))\n\n    if not self.get_message_details():\n        frappe.throw(_(\"Message details are empty\"))\n\n    message_details = self.get_message_details()\n\n    message_details[\"message\"] = message\n\n    if not self.email_sent_to:\n        frappe.throw(_(\"Email Sent To is mandatory\"))\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Daily Work Summary Group is mandatory\"))\n\n    if not", "CodeBleu_score": 31.634273383800178}, {"code": "def send_summary(self)\n\t\n    if not self.email_sent_to:\n        return\n\n    group_emails = get_user_emails_from_group(self.daily_work_summary_group)\n    if not group_emails:\n        return\n\n    # get message details\n    message_details = self.get_message_details()\n\n    # send email\n    if message_details:\n        subject = _(\"Work Summary for {0}\").format(global_date_format(self.creation))\n        message = render_template(\n            \"templates/daily_work_summary.html\", message_details\n        )\n        sendmail(\n            subject=subject,\n            message=message,\n            recipients=group_emails,\n            cc=self.email_cc,\n            sender=self.email_from,\n            reference_doctype=self.doctype,\n            reference_name=self.name,\n            communication_type=\"Communication\",\n            send_email=True,\n        )\n\n        # update status\n        self.status = \"Sent\"\n        self.save()\n", "CodeBleu_score": 45.439287709358034}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_application_id in self.job_application.interview_rounds.all():\n        raise ValidationError(\n            'Job applicant is already scheduled for this interview round. Please check the existing interview record: %s' %\n            (self.job_application.interview_rounds.get(id=self.job_application_id).id),\n            code='duplicate_interview',\n        )\n\n", "CodeBleu_score": 24.338554434530636}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round.job_application.interview_records.filter(interview_round=self.interview_round).count() > 1:\n        raise ValidationError(\"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record for this applicant.\")\n\n", "CodeBleu_score": 26.261985810816192}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_interview.interview_round.interview_round_number == 1:\n        if self.job_interview.interview_round.job_application.job_applicant.interviews.filter(interview_round__interview_round_number=self.job_interview.interview_round.interview_round_number).exclude(id=self.id).exists():\n            raise ValidationError(\"Job applicants are not allowed to appear twice for the same interview round. Please see the existing interview record for more details.\")\n    else:\n        if self.job_interview.interview_round.job_application.job_applicant.interviews.filter(interview_round__interview_round_number=self.job_interview.interview_round.interview_round_number).exclude(id=self.id).exists():\n            raise ValidationError(\"Job applicants are not allowed to appear twice for the same interview round. Please see the existing interview record for more details.\")\n\n", "CodeBleu_score": 27.1998723343157}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    if self.assessments:\n        ratings = [assessment.rating for assessment in self.assessments if assessment.rating]\n        self.average_rating = sum(ratings) / len(ratings)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 27.89787871859875}, {"code": "def calculate_average_rating(self)\n\t\n    total = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total / count\n\n", "CodeBleu_score": 25.515191917218182}, {"code": "def calculate_average_rating(self)\n\t\n    self.average_rating = 0\n    if len(self.assessments) > 0:\n        total = 0\n        for assessment in self.assessments:\n            if assessment.rating:\n                total += assessment.rating\n        self.average_rating = total / len(self.assessments)\n\n", "CodeBleu_score": 34.170803961200505}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if type(doc) == str:\n        doc = json.loads(doc)\n    interview_round = doc['interview_round']\n    designation = doc['designation']\n    interviewers = doc.get('interviewers', None)\n    interview = Interview(interview_round=interview_round, designation=designation, interviewers=interviewers)\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 39.56479389079913}, {"code": "def create_interview(doc):\n\t\n\n    # Create a new interview document\n    interview = Interview(round=doc.get('round'), designation=doc.get('designation'))\n\n    # Add interviewers to the interview document\n    if doc.get('interviewers'):\n        for interviewer in doc.get('interviewers'):\n            interview.interviewers.append(interviewer)\n\n    # Return the created interview document\n    return interview\n\n", "CodeBleu_score": 31.131817828768828}, {"code": "def create_interview(doc):\n\t\n    interview = Interview()\n    interview.interview_round = doc['interview_round']\n    interview.designation = doc['designation']\n    if 'interviewers' in doc:\n        interview.interviewers = doc['interviewers']\n    return interview\n\n", "CodeBleu_score": 24.81373410704426}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    job_offer_names = self.driver.find_elements_by_xpath(\"//a[@class='list-group-item']\")\n    for job_offer in job_offer_names:\n        if job_offer.text == \"Job Offer\":\n            job_offer_list.append(job_offer.text)\n    return job_offer_list\n\n", "CodeBleu_score": 37.626026696173824}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n\n    job_offers = []\n    for job_offer in self.job_offers:\n        if job_offer.status == 1 and job_offer.designation == self.designation and job_offer.company == self.company and from_date <= job_offer.date <= to_date:\n            job_offers.append(job_offer.name)\n    return job_offers\n\n", "CodeBleu_score": 34.420971855079785}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    for job_offer in self.job_offers:\n        if job_offer.date_created >= from_date and job_offer.date_created <= to_date:\n            job_offers.append(job_offer.name)\n    return job_offers\n\n", "CodeBleu_score": 32.73150519067508}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company is None:\n        company = \"\"\n    if department is None:\n        department = \"\"\n    query = f\"\"\"SELECT COUNT(job_offer) AS total_offers, COUNT(job_offer) AS accepted_offers FROM job_offer WHERE docstatus = 1 AND company = '{company}' AND department = '{department}';\"\"\"\n    result = frappe.db.sql(query)\n    total_offers = result[0][0]\n    accepted_offers = result[0][1]\n    if total_offers == 0:\n        return 0\n    else:\n        return round(accepted_offers / total_offers * 100, 2)\n\n", "CodeBleu_score": 24.331659429527754}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company is not None:\n        company_filter = \"AND company = '{}'\".format(company)\n    else:\n        company_filter = \"\"\n    if department is not None:\n        department_filter = \"AND department = '{}'\".format(department)\n    else:\n        department_filter = \"\"\n    query = \"\"\"SELECT COUNT(joboffer) FROM joboffer WHERE docstatus = 1 {} {}\"\"\".format(company_filter, department_filter)\n    total_offers = db.get_value(query)\n    query = \"\"\"SELECT COUNT(joboffer) FROM joboffer WHERE docstatus = 1 AND accepted = 1 {} {}\"\"\".format(company_filter, department_filter)\n    accepted_offers = db.get_value(query)\n    return accepted_offers / total_offers * 100, \"Percent\"\n\n", "CodeBleu_score": 26.463019002296363}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        job_offers = frappe.get_list(\"Job Offer\", filters=[[\"company\", \"=\", company]])\n    else:\n        job_offers = frappe.get_list(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1]])\n    if department:\n        job_offers = [x for x in job_offers if x.department == department]\n    accepted_job_offers = frappe.get_list(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1], [\"status\", \"=\", \"Accepted\"]])\n    if department:\n        accepted_job_offers = [x for x in accepted_job_offers if x.department == department]\n    return {\n        \"fieldtype\": \"Percent\",\n        \"data\": round(len(accepted_job_offers) / len(job_offers) * 100, 2)\n    }\n\n", "CodeBleu_score": 32.32130023058738}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\treturn this.companyStaffRepository.findById(companyStaffForUpdateDto.getId())\n\t\t\t.map(staff -> {\n\t\t\t\tif (staff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\t\t\t\tstaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\t\t\tstaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\t\t\tthis.companyStaffRepository.save(staff);\n\t\t\t\t\treturn new SuccessResult(Messages.staffUpdated);\n\t\t\t\t} else {\n\t\t\t\t\treturn new ErrorResult(Messages.passwordNotMatch);\n\t\t\t\t}\n\t\t\t}).orElse(new ErrorResult(Messages.staffNotFound));\n}", "CodeBleu_score": 31.95735661835082}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\n\tfinal Result arePasswordMatch = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n\tif (!arePasswordMatch.isSuccess()) {\n\t\treturn arePasswordMatch;\n\t}\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\tthis.companyStaffRepository.save(companyStaff);\n\treturn new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 46.4620034674899}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\n\tif (!this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword()).isSuccess()) {\n\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t}\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\n\tthis.companyStaffRepository.save(companyStaff);\n\treturn new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 41.328198553127805}]}
