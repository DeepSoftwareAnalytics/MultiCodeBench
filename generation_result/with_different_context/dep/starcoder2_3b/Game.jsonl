{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t// Get the directory of the current executable\nvar localPath = Process.GetCurrentProcess().MainModule.FileName;\nvar localDir = Path.GetDirectoryName(localPath);\n\n// Get the sub directory name based on the platform\nvar subDir = Environment.Is64BitProcess? \"x64\" : \"x86\";\n\n// Get the full path to the DLL\nvar dllPath = Path.Combine(localDir, subDir, dllName);\n\n// Check the OS platform\nif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n{\n// Use the Win32 method to load the DLL\nDllLoader.LoadLibrary(dllPath);\n}\nelse\n{\n// Use the Posix method to load the DLL\nDllLoader.LoadLibrary(dllPath);\n}\n\n}", "CodeBleu_score": 24.80042617852368}, {"code": "public static void PreloadDll(string dllName){\n\t", "CodeBleu_score": 3.033744540365542}, {"code": "public static void PreloadDll(string dllName){\n\tvar dllPath = GetDirectedDllDirectory();\n\nif (Environment.OSVersion.Platform == PlatformID.Win32NT) {\n\n// Use the Win32 method to load the DLL.\n\nvar result = NativeMethods.LoadLibrary(dllPath);\n\nif (result == IntPtr.Zero) {\n\n// Handle the error.\n\n}\n\n} else {\n\n// Use the Posix method to load the DLL.\n\nvar result = NativeMethods.dlopen(dllPath, NativeMethods.RTLD_NOW);\n\nif (result == IntPtr.Zero) {\n\n// Handle the error.\n\n}\n\n}\n\n}", "CodeBleu_score": 24.900580997575048}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t", "CodeBleu_score": 5.693069074890999}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (m_AssetFileMap.ContainsKey(originalPath)) {\n\t\treturn;\n\t}\n\tSerializedFile assetsFile = new SerializedFile(originalPath, reader, unityVersion);\n\tCheckStrippedVersion(assetsFile);\n\tm_AssetFileMap.Add(originalPath, assetsFile);\n}", "CodeBleu_score": 16.50385797948067}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (unityVersion == null) {\n\t\tunityVersion = GetUnityVersion(reader);\n\t}\n\tif (unityVersion == null) {\n\t\treturn;\n\t}\n\tif (unityVersion!= null && unityVersion!= \"Unknown\") {\n\t\tif (unityVersion!= \"Unknown\" &&!unityVersion.StartsWith(\"2018\")) {\n\t\t\tConsole.WriteLine(\"Skipping file \" + originalPath + \" because it is not compatible with Unity \" + unityVersion);\n\t\t\treturn;\n\t\t}\n\t}\n\tif (assetsFile == null) {\n\t\tassetsFile = new SerializedFile(reader, originalPath, unityVersion);\n\t} else {\n\t\tassetsFile.AddFile(reader, originalPath, unityVersion);\n\t}\n}", "CodeBleu_score": 33.88591093094999}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tif (Path == path) {\n\t\treturn this;\n\t}\n\tforeach (ImportedFrame child in children) {\n\t\tImportedFrame frame = child.FindFrameByPath(path);\n\t\tif (frame!= null) {\n\t\t\treturn frame;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 50.962609904471414}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring name = Path.GetFileNameWithoutExtension(path);\n\tforeach (ImportedFrame child in children) {\n\t\tif (child.Name == name) {\n\t\t\tif (child.Path == path) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tImportedFrame frame = child.FindFrameByPath(path);\n\t\t\t\tif (frame!= null) {\n\t\t\t\t\treturn frame;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 50.16595551225763}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tstring name = Path.GetFileNameWithoutExtension(path);\nforeach (ImportedFrame child in children) {\nif (child.Name == name) {\nreturn child;\n}\n}\nreturn null;\n}", "CodeBleu_score": 46.00634085838417}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream memStream = new MemoryStream();\n\tGZipStream gZipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n\tgZipStream.CopyTo(memStream);\n\tgZipStream.Close();\n\tmemStream.Position = 0;\n\treturn new FileReader(memStream);\n}", "CodeBleu_score": 43.12212738913001}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream();\n\treader.BaseStream.CopyTo(ms);\n\tms.Position = 0;\n\tGZipStream gs = new GZipStream(ms, CompressionMode.Decompress);\n\tms = new MemoryStream();\n\tgs.CopyTo(ms);\n\tms.Position = 0;\n\treturn new FileReader(ms);\n}", "CodeBleu_score": 40.609273756910554}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream();\n\tGZipStream gs = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n\tbyte[] buffer = new byte[1024];\n\tint numRead;\n\twhile ((numRead = gs.Read(buffer, 0, buffer.Length)) > 0) {\n\t\tms.Write(buffer, 0, numRead);\n\t}\n\tms.Position = 0;\n\treturn new FileReader(ms);\n}", "CodeBleu_score": 39.201131186617886}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tParseStrings(switchForms, commandStrings, null);\n}", "CodeBleu_score": 16.93988777593802}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tParseStrings(switchForms, commandStrings, null);\n}", "CodeBleu_score": 16.93988777593802}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tParseStrings(switchForms, commandStrings, null);\n}", "CodeBleu_score": 16.93988777593802}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\t// Extract image data\n\tm_ImageData = m_Texture2D.GetRawTextureData();\n\n\t// Extract width\n\tm_Width = m_Texture2D.width;\n\n\t// Extract height\n\tm_Height = m_Texture2D.height;\n\n\t// Extract texture format\n\tm_TextureFormat = m_Texture2D.format;\n\n\t// Extract version\n\tm_Version = m_Texture2D.version;\n\n\t// Extract platform\n\tm_Platform = m_Texture2D.platform;\n\n\t// Extract output size\n\tm_OutputSize = m_Texture2D.outputSize;\n}", "CodeBleu_score": 45.620284450704155}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\t// Set the texture2D property to the given Texture2D object.\n\ttexture2D = m_Texture2D;\n\n\t// Get the image data from the given Texture2D object.\n\timageData = texture2D.GetRawTextureData();\n\n\t// Set the width property to the width of the given Texture2D object.\n\twidth = texture2D.width;\n\n\t// Set the height property to the height of the given Texture2D object.\n\theight = texture2D.height;\n\n\t// Set the texture format property to the texture format of the given Texture2D object.\n\ttextureFormat = texture2D.format;\n\n\t// Set the version property to the version of the given Texture2D object.\n\tversion = texture2D.version;\n\n\t// Set the platform property to the platform of the given Texture2D object.\n\tplatform = texture2D.platform;\n\n\t// Set the output size property to the output size of the given Texture2D object.\n\toutputSize = texture2D.outputSize;\n}", "CodeBleu_score": 43.850736219224004}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tm_Texture2D = m_Texture2D;\n\tm_Width = m_Texture2D.width;\n\tm_Height = m_Texture2D.height;\n\tm_Format = m_Texture2D.format;\n\tm_Version = m_Texture2D.version;\n\tm_Platform = m_Texture2D.platform;\n\tm_OutputSize = m_Texture2D.outputSize;\n\tm_Texture2D.Apply(false, true);\n\tm_Texture2D.Apply(true, false);\n}", "CodeBleu_score": 43.8827970446942}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tresult.Add(sp.GetArrayElementAtIndex(i).stringValue);\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\treturn string.Join(\", \", result.ToArray());\n}", "CodeBleu_score": 28.288734767953205}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty sp2 = sp.GetArrayElementAtIndex(i);\n\t\tif (sp2.isExpanded) {\n\t\t\tresult.Add(sp2.displayName);\n\t\t}\n\t}\n\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\n\tstring s = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\ts += result[i];\n\t\tif (i < result.Count - 1) {\n\t\t\ts += \", \";\n\t\t}\n\t}\n\n\treturn s;\n}", "CodeBleu_score": 36.653717226834395}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tresult.Add(sp.GetArrayElementAtIndex(i).stringValue);\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\treturn string.Join(\", \", result.ToArray());\n}", "CodeBleu_score": 28.288734767953205}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t", "CodeBleu_score": 4.975552625378207}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t", "CodeBleu_score": 4.975552625378207}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add && sp.FindPropertyRelative(prop.name).isArray)\n\t\treturn;\n\tstring name = prop.name;\n\tif (prop.type == ShaderPropertyType.Range)\n\t\tname = name + \" (\" + prop.range.x + \" - \" + prop.range.y + \")\";\n\tmenu.AddItem(new GUIContent(name), false, () => {\n\t\tif (add) {\n\t\t\tsp.FindPropertyRelative(prop.name).arraySize++;\n\t\t\tsp.FindPropertyRelative(prop.name).GetArrayElementAtIndex(sp.FindPropertyRelative(prop.name).arraySize - 1).FindPropertyRelative(prop.name).floatValue = prop.floatValue;\n\t\t} else {\n\t\t\tsp.FindPropertyRelative(prop.name).arraySize--;\n\t\t}\n\t\tsp.serializedObject.ApplyModifiedProperties();\n\t});\n}", "CodeBleu_score": 39.22352118425245}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tbool isVector3 = false;\n\tif (sp.propertyType == SerializedPropertyType.Vector3) {\n\t\tisVector3 = true;\n\t}\n\telse if (sp.propertyType == SerializedPropertyType.Float) {\n\t\tisVector3 = false;\n\t}\n\telse {\n\t\tDebug.LogError(\"DrawFloatOrVector3Field: property must be a float or Vector3!\");\n\t\treturn false;\n\t}\n\n\tbool isSingleFloat = sp.propertyType == SerializedPropertyType.Float;\n\tif (isSingleFloat) {\n\t\tif (isVector3) {\n\t\t\tDebug.LogError(\"DrawFloatOrVector3Field: property cannot be both a float and a Vector3!\");\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\tif (!isVector3) {\n\t\t\tDebug.LogError(\"DrawFloatOrVector3Field: property cannot be both a float and a Vector3!\");\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tbool isXyz = showXyz ||!isSingleFloat;\n\n\tbool isSingleFloatOrXyz = isSingleFloat || isXyz;\n\tbool isVector3OrXyz = isVector3 || isXyz;\n\n\tif (isSingleFloatOrXyz) {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tfloat val = EditorGUILayout.FloatField(sp.displayName, sp.floatValue);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.floatValue = val;\n\t\t}\n\t}\n\telse {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tVector3 val = EditorGUILayout.Vector3Field(sp.displayName, sp.vector3Value);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.vector3Value = val;\n\t\t}\n\t}\n\n\tif (isVector3OrXyz) {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tbool showToggle = GUILayout.Toggle(isXyz, \"Xyz\", \"Button\");\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tshowXyz = showToggle;\n\t\t}\n\t}\n\n\treturn isSingleFloatOrXyz;\n}", "CodeBleu_score": 29.692430531602316}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tif (sp.propertyType == SerializedPropertyType.Vector3) {\n\t\tif (showXyz) {\n\t\t\tEditorGUI.BeginChangeCheck();\n\t\t\tEditorGUILayout.Vector3Field(sp.displayName, sp.vector3Value);\n\t\t\treturn EditorGUI.EndChangeCheck();\n\t\t}\n\t\telse {\n\t\t\tEditorGUI.BeginChangeCheck();\n\t\t\tEditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName + \" X\"), GUILayout.Width(100));\n\t\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\t\tsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\telse {\n\t\tEditorGUI.BeginChangeCheck();\n\t\tEditorGUILayout.PropertyField(sp, new GUIContent(sp.displayName), GUILayout.Width(100));\n\t\treturn EditorGUI.EndChangeCheck();\n\t}\n}", "CodeBleu_score": 28.84206505461428}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tif (sp == null)\n\t\treturn false;\n\n\t// Draw the toggle button.\n\tEditorGUILayout.BeginHorizontal();\n\tif (showXyz) {\n\t\tEditorGUILayout.LabelField(\"Vector3\", GUILayout.Width(100));\n\t} else {\n\t\tEditorGUILayout.LabelField(\"Float\", GUILayout.Width(100));\n\t}\n\tshowXyz = EditorGUILayout.Toggle(showXyz, GUILayout.Width(30));\n\tEditorGUILayout.EndHorizontal();\n\n\t// Draw the property.\n\tif (showXyz) {\n\t\treturn EditorGUILayout.Vector3Field(sp.displayName, sp.vector3Value);\n\t} else {\n\t\treturn EditorGUILayout.FloatField(sp.displayName, sp.floatValue);\n\t}\n}", "CodeBleu_score": 26.70748242358326}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn default(Material);\n}", "CodeBleu_score": 4.156134333683576}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial mat = null;\n\tif (baseMat!= null) {\n\t\tmat = new Material(baseMat);\n\t\tmat.SetTexture(Shader.PropertyToID(\"_BaseMap\"), texture);\n\t\tmat.SetInt(Shader.PropertyToID(\"_BaseMapID\"), id);\n\t\tmat.SetInt(Shader.PropertyToID(\"_BaseMapProps\"), props);\n\t}\n\treturn mat;\n}", "CodeBleu_score": 15.785112907716382}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn default;\n}", "CodeBleu_score": 4.156134324507196}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\treturn;\n\t}\n\tint index = customMaterials.FindIndex(x => x.material == customMat);\n\tif (index!= -1) {\n\t\tcustomMaterials[index].count--;\n\t\tif (customMaterials[index].count <= 0) {\n\t\t\tcustomMaterials[index].material.Destroy();\n\t\t\tcustomMaterials[index].material = null;\n\t\t\tcustomMaterials[index].texture = null;\n\t\t\tcustomMaterials.RemoveAt(index);\n\t\t}\n\t}\n}", "CodeBleu_score": 23.66842583967488}, {"code": "public static void Remove(Material customMat){\n\t", "CodeBleu_score": 1.8215476104057635}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\treturn;\n\t}\n\tfor (int i = 0; i < customMaterials.Count; i++) {\n\t\tif (customMaterials[i].material == customMat) {\n\t\t\tcustomMaterials[i].count--;\n\t\t\tif (customMaterials[i].count <= 0) {\n\t\t\t\tDestroyImmediate(customMaterials[i].material);\n\t\t\t\tcustomMaterials.RemoveAt(i);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.063809500685352}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\tParticleSystem[] particles = root.GetComponentsInChildren<ParticleSystem>();\n\tfor (int i = 0; i < particles.Length; i++) {\n\t\tif (particles[i].gameObject.GetComponent<UIParticle>()!= this) {\n\t\t\tparticles[i].gameObject.SetActive(false);\n\t\t\tparticles[i].gameObject.SetActive(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 24.03106386833235}, {"code": "private void RefreshParticles(GameObject root){\n\t\tParticleSystem[] particleSystems = root.GetComponentsInChildren<ParticleSystem>();\n\tfor (int i = 0; i < particleSystems.Length; i++) {\n\t\tParticleSystem ps = particleSystems[i];\n\t\tif (ps.GetComponent<UIParticle>()!= this) {\n\t\t\tDestroyImmediate(ps);\n\t\t}\n\t\telse {\n\t\t\tif (ps.textureSheetAnimation!= null) {\n\t\t\t\tps.textureSheetAnimation.Update();\n\t\t\t}\n\t\t}\n\t}\n\tRefreshParticles(particleSystems);\n}", "CodeBleu_score": 25.639953362443418}, {"code": "private void RefreshParticles(GameObject root){\n\t\tParticleSystem[] particles = root.GetComponentsInChildren<ParticleSystem>();\n\tfor (int i = 0; i < particles.Length; i++) {\n\t\tParticleSystem particle = particles[i];\n\t\tif (particle.GetComponent<UIParticle>() == null) {\n\t\t\tparticles[i] = null;\n\t\t} else {\n\t\t\tUIParticle particleScript = particle.GetComponent<UIParticle>();\n\t\t\tif (particleScript.material == null) {\n\t\t\t\tparticleScript.material = UIParticle.defaultMaterial;\n\t\t\t}\n\t\t\tif (particleScript.texture!= null) {\n\t\t\t\tparticle.renderer.material.mainTexture = particleScript.texture;\n\t\t\t}\n\t\t\tif (particleScript.offsetX!= 0 || particleScript.offsetY!= 0) {\n\t\t\t\tparticle.renderer.material.mainTextureOffset = new Vector2(particleScript.offsetX, particleScript.offsetY);\n\t\t\t}\n\t\t\tif (particleScript.scaleX!= 1 || particleScript.scaleY!= 1) {\n\t\t\t\tparticle.renderer.material.mainTextureScale = new Vector2(particleScript.scaleX, particleScript.scaleY);\n\t\t\t}\n\t\t\tif (particleScript.color!= Color.white) {\n\t\t\t\tparticle.renderer.material.color = particleScript.color;\n\t\t\t}\n\t\t}\n\t}\n\tparticles = root.GetComponentsInChildren<ParticleSystem>();\n\tfor (int i = 0; i < particles.Length; i++) {\n\t\tParticleSystem particle = particles[i];\n\t\tif (particle!= null) {\n\t\t\tRefreshParticles(particle.gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 30.185567069924645}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tcontainerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly())\n\t\t.AssignableTo<IColorSwapManager>()\n\t\t.As<IColorSwapManager>()\n\t\t.SingleInstance();\n}", "CodeBleu_score": 51.5952386428398}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tcontainerBuilder.RegisterAssemblyTypes(this.GetType().Assembly)\n\t\t.Where(t => t.IsAssignableTo<IColorSwapManager>())\n\t\t.AsImplementedInterfaces()\n\t\t.SingleInstance();\n}", "CodeBleu_score": 27.796115663170077}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tvar types = Assembly.GetExecutingAssembly().GetTypes().Where(x => typeof(IColorSwapManager).IsAssignableFrom(x) &&!x.IsInterface &&!x.IsAbstract);\n\tforeach (var type in types) {\n\t\tcontainerBuilder.RegisterType(type).As<IColorSwapManager>().SingleInstance();\n\t}\n}", "CodeBleu_score": 39.965636047399975}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\t// Set the IP address and port\n\tthis.ipAddress = ipAddress;\n\tthis.port = port;\n\n\t// Wait for the serializer to initialize\n\tawait this.serializer.InitializeAsync();\n\n\t// Send a reservation request\n\tawait this.SendReservationRequestAsync();\n}", "CodeBleu_score": 32.69942141957679}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\tawait this.ConnectAsync(ipAddress, port, CancellationToken.None).ConfigureAwait(false);\n}", "CodeBleu_score": 21.980336930220908}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\t// Set the IP address and port\n\t_ipAddress = ipAddress;\n\t_port = port;\n\n\t// Wait for the serializer to be initialized\n\tawait _serializerTask;\n}", "CodeBleu_score": 30.93120009837059}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\t// Validate input\n\tif (sessionConnectionState == null) {\n\t\tthrow new System.ArgumentNullException(\"sessionConnectionState\");\n\t}\n\n\t// Log the transition\n\tLogConnectionStateTransition(sessionConnectionState);\n\n\t// Invoke the ConnectionStateChanged event\n\tConnectionStateChanged?.Invoke(sessionConnectionState);\n\n\t// Update the player name if the connection state is SESSION_RESERVED\n\tif (sessionConnectionState == IMultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\tPlayerName = GetPlayerName();\n\t}\n}", "CodeBleu_score": 31.994566022709346}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(\"sessionConnectionState\");\n\t}\n\tif (sessionConnectionState.State!= m_connectionState) {\n\t\tm_connectionState = sessionConnectionState.State;\n\t\tif (m_connectionState == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\t\tm_playerName = sessionConnectionState.PlayerName;\n\t\t}\n\t\tDebug.Log(\"Connection state changed to \" + m_connectionState);\n\t\tif (ConnectionStateChanged!= null) {\n\t\t\tConnectionStateChanged(this, EventArgs.Empty);\n\t\t}\n\t}\n}", "CodeBleu_score": 33.878766163570916}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\t// Validate the input\n\tif (sessionConnectionState == null) {\n\t\tthrow new System.ArgumentNullException(\"sessionConnectionState\");\n\t}\n\n\t// Log the transition from the previous state to the new state\n\tif (this.m_sessionConnectionState!= null) {\n\t\tDebug.Log(string.Format(\"MultiplayerSession.UpdateConnectionState: Session connection state changed from {0} to {1}\", this.m_sessionConnectionState, sessionConnectionState));\n\t} else {\n\t\tDebug.Log(string.Format(\"MultiplayerSession.UpdateConnectionState: Session connection state changed from null to {0}\", sessionConnectionState));\n\t}\n\n\t// Invoke the ConnectionStateChanged event\n\tif (this.ConnectionStateChanged!= null) {\n\t\tthis.ConnectionStateChanged(sessionConnectionState);\n\t}\n\n\t// Update the player name in the log\n\tif (sessionConnectionState == IMultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\tthis.m_log.PlayerName = this.m_playerName;\n\t}\n\n\t// Update the session connection state\n\tthis.m_sessionConnectionState = sessionConnectionState;\n}", "CodeBleu_score": 31.428463099335026}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\t_client = new LiteNetLibClient();\n\t_client.Connect(ipAddress, serverPort);\n\tawait _client.WaitForConnectionAsync(2000);\n\t_client.ResetConnectionEvent();\n}", "CodeBleu_score": 36.43276180997551}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tif (IsStarted) {\n\t\tthrow new InvalidOperationException(\"This client is already started\");\n\t}\n\tif (string.IsNullOrEmpty(ipAddress)) {\n\t\tthrow new ArgumentException(\"Invalid IP address\");\n\t}\n\tif (serverPort < 1 || serverPort > 65535) {\n\t\tthrow new ArgumentException(\"Invalid port\");\n\t}\n\n\t// Initialize and start the client\n\tvar client = new LiteNetLibClient();\n\tclient.Start();\n\n\t// Attempt to connect to the server\n\tclient.Connect(ipAddress, serverPort);\n\n\t// Wait for the connection event\n\tvar timeout = DateTime.Now.AddMilliseconds(2000);\n\twhile (client.ConnectionState!= ConnectionState.Connected && DateTime.Now < timeout) {\n\t\tawait Task.Delay(10);\n\t}\n\n\t// Reset the event\n\tclient.ConnectionState = ConnectionState.Disconnected;\n\n\t// Set the client\n\t_client = client;\n}", "CodeBleu_score": 42.941341650745215}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait Task.Run(() => {\n\t\tLiteNetLibClient.Instance.Start(ipAddress, serverPort);\n\t});\n}", "CodeBleu_score": 26.309063800240178}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = Cyclops.GetCyclops(id);\n\tif (cyclops!= null) {\n\t\tSubFire fire = cyclops.GetComponent<SubFire>();\n\t\tif (fire!= null) {\n\t\t\tStartCoroutine(StartFireSuppressionSystem(fire));\n\t\t}\n\t}\n}", "CodeBleu_score": 21.12323571183611}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tStartCoroutine(StartFireSuppression(id));\n}", "CodeBleu_score": 3.262439207957684}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = CyclopsManager.GetCyclops(id);\n\tif (cyclops!= null) {\n\t\tFireSuppressionButton button = cyclops.GetComponentInChildren<FireSuppressionButton>();\n\t\tif (button!= null) {\n\t\t\tbutton.StartFireSuppression();\n\t\t}\n\t}\n}", "CodeBleu_score": 24.205718373069697}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.ID!= this.subRootID) {\n\t\treturn;\n\t}\n\n\tif (damagePoint.ID!= this.damagePointID) {\n\t\treturn;\n\t}\n\n\t// create repair packet\n\tCyclopsRepairPacket packet = new CyclopsRepairPacket(damagePoint.ID, repairAmount);\n\n\t// send repair packet\n\tCyclopsNetwork.SendPacket(packet, this.connection);\n}", "CodeBleu_score": 28.055899596998135}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\t// Get the subRoot ID\n\tstring subRootID = subRoot.gameObject.name;\n\t// Get the damage point ID\n\tstring damagePointID = damagePoint.gameObject.name;\n\t// Create the repair packet\n\tPacket repairPacket = new Packet(PacketType.Repair);\n\trepairPacket.Add(subRootID);\n\trepairPacket.Add(damagePointID);\n\trepairPacket.Add(repairAmount);\n\t// Send the repair packet\n\tPacketSender.SendPacket(repairPacket);\n}", "CodeBleu_score": 31.86915955280098}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (damagePoint.subRoot == subRoot) {\n\t\tCyclopsDamagePointPacket packet = new CyclopsDamagePointPacket(subRoot.ID, damagePoint.ID, repairAmount);\n\t\tPacketSender.SendPacket(packet, subRoot.network);\n\t}\n}", "CodeBleu_score": 24.983806920498147}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n\t\treturn;\n\t}\n\n\tif (subRoot.damageManager.health < 0.01f) {\n\t\treturn;\n\t}\n\n\tCyclopsDamageInfoData data = new CyclopsDamageInfoData(subRootId, info);\n\tList<int> activeDamagePoints = new List<int>(GetActiveDamagePoints(subRoot));\n\tList<CyclopsFireData> activeFires = new List<CyclopsFireData>(GetActiveRoomFires(subRoot.subFire));\n\n\tCyclopsDamage packet = new CyclopsDamage(data, activeDamagePoints, activeFires);\n\tpacket.Send();\n}", "CodeBleu_score": 25.003880814838464}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\nif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\nreturn;\n}\n\nif (subRoot.health <= 0) {\nreturn;\n}\n\nCyclopsDamageInfoData damageInfoData = null;\n\nif (info.hasValue) {\ndamageInfoData = new CyclopsDamageInfoData(info.value.damage, info.value.damageType, info.value.damagePoint, info.value.damageSource);\n}\n\nList<int> activeDamagePoints = new List<int>(GetActiveDamagePoints(subRoot));\nList<CyclopsFireData> activeRoomFires = new List<CyclopsFireData>(GetActiveRoomFires(subRoot.subFire));\n\nCyclopsDamage packet = new CyclopsDamage(subRootId, activeDamagePoints.ToArray(), activeRoomFires.ToArray(), damageInfoData);\n\nNitroxNetwork.Broadcast(packet);\n}", "CodeBleu_score": 47.18780852296936}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\nreturn;\n}\n\nif (subRoot.healthManager.health.currentHealth <= 0) {\nreturn;\n}\n\nCyclopsDamageInfoData infoData = null;\nif (info.hasValue) {\ninfoData = new CyclopsDamageInfoData(info.value.damage, info.value.damageType, info.value.damagePoint, info.value.source, info.value.sourceId, info.value.sourceName, info.value.sourceSubRootId);\n}\n\nList<int> activeDamagePoints = new List<int>(GetActiveDamagePoints(subRoot));\nList<CyclopsFireData> activeRoomFires = new List<CyclopsFireData>(GetActiveRoomFires(subRoot.fire));\n\nCyclopsDamagePacket packet = new CyclopsDamagePacket(subRootId, activeDamagePoints.ToArray(), activeRoomFires.ToArray(), infoData);\n\nNetworkServer.SendToAll(CyclopsPacketType.Damage, packet);\n}", "CodeBleu_score": 48.9044529507313}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject gameObject = GetGameObject(entity.Id);\n\t\tif (gameObject!= null) {\n\t\t\tGameObject.Destroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.36984512797026}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject gameObject = GetGameObject(entity.Id);\n\t\tif (gameObject!= null) {\n\t\t\tDestroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.4687006262773}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject gameObject = GetGameObject(entity.Id);\n\t\tif (gameObject!= null) {\n\t\t\tDestroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.4687006262773}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntities.ContainsKey(entity.parentID)) {\n\t\tpendingParentEntities.Add(entity.parentID, new List<Entity>());\n\t}\n\tpendingParentEntities[entity.parentID].Add(entity);\n}", "CodeBleu_score": 30.29139558500498}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntities.ContainsKey(entity.ParentId)) {\n\t\tpendingParentEntities.Add(entity.ParentId, new List<Entity>());\n\t}\n\n\tpendingParentEntities[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 31.21589252548035}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (pendingParentEntities.ContainsKey(entity.parentID)) {\n\t\tpendingParentEntities[entity.parentID].Add(entity);\n\t} else {\n\t\tpendingParentEntities.Add(entity.parentID, new List<Entity>() { entity });\n\t}\n}", "CodeBleu_score": 24.956611228662094}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown < ExosuitClawArm.pickupCooldown) {\n\t\tBroadcastArmAction(clawArm.GetTechType(), clawArm, ExosuitArmAction.START_USE_TOOL, null, null);\n\t} else if (cooldown < ExosuitClawArm.punchCooldown) {\n\t\tBroadcastArmAction(clawArm.GetTechType(), clawArm, ExosuitArmAction.ALT_HIT, null, null);\n\t} else {\n\t\tDebug.LogError($\"Cooldown is not within the expected range for ExosuitClawArm {clawArm.GetTechType()}\");\n\t}\n}", "CodeBleu_score": 29.739121116041122}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\n\t\tif (cooldown <= ExosuitClawArm.PickupCooldown) {\n\t\t\tBroadcastArmAction(clawArm.TechType, id, ExosuitArmAction.START_USE_TOOL, null, null);\n\t\t}\n\t\telse if (cooldown <= ExosuitClawArm.PunchCooldown) {\n\t\t\tBroadcastArmAction(clawArm.TechType, id, ExosuitArmAction.ALT_HIT, null, null);\n\t\t}\n\t\telse {\n\t\t\tDebug.LogError(\"ExosuitClawArm cooldown is invalid for BroadcastClawUse\");\n\t\t}\n\t}\n}", "CodeBleu_score": 35.48086711000071}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\nif (cooldown == ExosuitClawArm.pickupCooldown) {\nBroadcastArmAction(TechType.None, id, ExosuitArmAction.START_USE_TOOL, null, null);\n} else if (cooldown == ExosuitClawArm.punchCooldown) {\nBroadcastArmAction(TechType.None, id, ExosuitArmAction.ALT_HIT, null, null);\n} else {\nLog.LogError($\"The cooldown {cooldown} is not a valid pickup or punch cooldown.\");\n}\n}\n}", "CodeBleu_score": 32.412024699811134}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tvar entity = new InstalledBatteryEntity(gameObject, parent, techType);\n\tEntitySpawnedByClient(entity);\n}", "CodeBleu_score": 16.010788169495765}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tvar entityID = gameObject.GetComponent<EntityID>();\n\tvar parentID = parent.GetComponent<EntityID>();\n\tif (entityID == null || parentID == null) return;\n\tvar entity = new InstalledBatteryEntity(entityID.id, parentID.id, techType);\n\tvar packet = new EntitySpawnedByClient(entity);\n\tpacket.SendToAllClients();\n}", "CodeBleu_score": 34.942585265072154}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t", "CodeBleu_score": 11.969764320593383}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (PickingUpObject!= null) {\n\t\tRemoveAnyRemoteControl(PickingUpObject);\n\t}\n\tif (!gameObject.TryGetComponent<NitroxId>(out NitroxId nitroxId)) {\n\t\tnitroxId = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\t}\n\tif (!nitroxId.HasValue) {\n\t\tnitroxId = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\t}\n\tif (nitroxId.HasValue) {\n\t\tStopEntityPositionBroadcasting(nitroxId.Value);\n\t}\n\tInventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, entityMetadataManager);\n\tinventoryItemEntity.Spawned = true;\n\tLog.Info($\"Picked up {inventoryItemEntity.ClassId} with id {inventoryItemEntity.Id}\");\n\tPickupItemPacket packet = new(inventoryItemEntity);\n\tNetworkManager.Send(packet);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 49.58949929637602}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\t// Stop entity position broadcasting\n\tif (this.IsEntity(gameObject)) {\n\t\tthis.entityManager.StopBroadcasting(gameObject);\n\t}\n\n\t// Convert to inventory item\n\tInventoryItemEntity inventoryItemEntity = Items.ConvertToInventoryItemEntity(gameObject, this.entityMetadataManager);\n\tinventoryItemEntity.SetSpawned(true);\n\tinventoryItemEntity.SetPickupTime(DateTime.UtcNow);\n\tinventoryItemEntity.SetTechType(techType);\n\tthis.entityManager.AddEntity(inventoryItemEntity);\n\n\t// Log pickup event\n\tthis.LogPickupEvent(inventoryItemEntity);\n\n\t// Create packet\n\tPickupItem packet = new PickupItem(inventoryItemEntity.Id, inventoryItemEntity.TechType.ToTechType());\n\tthis.networkManager.SendPacket(packet);\n\n\t// Reset PickingUpObject\n\tthis.PickingUpObject = null;\n}", "CodeBleu_score": 35.67746871844895}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\n// If the object is already picked up, don't do anything.\nif (PickingUpObject == gameObject) {\nreturn;\n}\n\n// Remove any remote control.\nRemoveAnyRemoteControl(gameObject);\n\n// If the object lacks an ID, generate a new one.\nif (!Player.main.TryGetNitroxId(out NitroxId ownerId)) {\nthrow new InvalidOperationException(\"[Items] Player has no id! Couldn't parent InventoryItem.\");\n}\n\n// Stop entity position broadcasting.\nEntity.BroadcastPosition = false;\n\n// Convert to an inventory item.\nInventoryItemEntity inventoryItem = ConvertToInventoryItemEntity(gameObject, EntityMetadataManager);\n\n// Mark as spawned.\ninventoryItem.Spawned = true;\n\n// Log the pickup event.\nLog.Info($\"Picked up {techType.AsString()} {inventoryItem.Id.AsString()}\");\n\n// Create a pickup item packet.\nvar packet = new PickupItem(inventoryItem);\n\n// Send the packet.\nNetworkManager.Send(packet);\n\n// Reset the picking up object.\nPickingUpObject = null;\n\n// If the object is a battery, try to populate its child entities.\nBatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, inventoryItem.ChildEntities, inventoryItem.Id);\n\n}", "CodeBleu_score": 42.054539792014154}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\troxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tTechTag techTag = gameObject.GetComponent<TechTag>();\n\tTechType techType = (techTag)? techTag.type : TechType.None;\n\tEntityMetadata metadata = entityMetadataManager.Extract(gameObject).Value;\n\tList<Entity> children = new List<Entity>();\n\tforeach (Entity child in GetPrefabChildren(gameObject, id, entityMetadataManager)) {\n\t\tchildren.Add(child);\n\t}\n\treturn new InventoryItemEntity(id, techType.ToDto(), metadata, children);\n}", "CodeBleu_score": 41.42674441374689}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tWe need to get the NitroxId for the GameObject, as it is needed to construct the InventoryItemEntity.\nNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\n// We need to get the class ID and TechType for the GameObject, as they are needed to construct the InventoryItemEntity.\nstring classId = gameObject.GetComponent<PrefabIdentifier>().classId;\nTechType techType = gameObject.GetComponent<TechTag>().type;\n\n// We need to get the metadata for the GameObject, as it is needed to construct the InventoryItemEntity.\nOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n// We need to get the player's ID, as it is needed to construct the InventoryItemEntity.\nNitroxId playerId = NitroxEntity.GetIdOrGenerateNew(Game.Instance.playerController.gameObject);\n\n// We need to get the battery data, if applicable, as it is needed to construct the InventoryItemEntity.\nOptional<BatteryData> batteryData = BatteryData.FromGameObject(gameObject);\n\n// We construct the InventoryItemEntity using the information we have gathered.\nreturn new InventoryItemEntity(id, classId, techType.ToDto(), metadata.Value, playerId, batteryData.Value);\n}", "CodeBleu_score": 47.39711191950422}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t <summary>\n/// The player's ID.\n/// </summary>\nNitroxId playerId = Player.main.GetPlayerID();\n\n/// <summary>\n/// The NitroxId of the GameObject.\n/// </summary>\nNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\n/// <summary>\n/// The class ID of the GameObject.\n/// </summary>\nstring classId = gameObject.GetComponent<PrefabIdentifier>().classId;\n\n/// <summary>\n/// The TechType of the GameObject.\n/// </summary>\nTechType techType = gameObject.GetComponent<TechTag>().type;\n\n/// <summary>\n/// The metadata of the GameObject.\n/// </summary>\nOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n/// <summary>\n/// The battery data of the GameObject.\n/// </summary>\nOptional<BatteryData> batteryData = gameObject.GetComponent<BatteryData>()? Optional<BatteryData>.Some(gameObject.GetComponent<BatteryData>().GetBatteryData()) : Optional<BatteryData>.None();\n\n/// <summary>\n/// The child entities of the GameObject.\n/// </summary>\nIEnumerable<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager);\n\n/// <summary>\n/// The InventoryItemEntity to be returned.\n/// </summary>\nInventoryItemEntity inventoryItemEntity = new InventoryItemEntity(id, classId, techType.ToDto(), metadata.Value, batteryData.Value, children, playerId);\n\nreturn inventoryItemEntity;\n}", "CodeBleu_score": 59.93140894652447}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.playerModel = new PlayerModel(this);\n\tthis.bodyPrototype = new BodyPrototype(this);\n\tthis.permissions = new Permissions(this);\n}", "CodeBleu_score": 38.224813160862055}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\t// Ensure the player's head is visible.\n\t\tif (Player.GetComponent<PlayerController>().Head.activeSelf == false) {\n\t\t\tPlayer.GetComponent<PlayerController>().Head.SetActive(true);\n\t\t}\n\n\t\t// Instantiate a clone of the body prototype.\n\t\tGameObject BodyPrototype = Instantiate(Player.GetComponent<PlayerController>().BodyPrototype, Player.transform.position, Player.transform.rotation);\n\n\t\t// Reset the head's shadow casting mode.\n\t\tBodyPrototype.GetComponent<PlayerController>().Head.GetComponent<MeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\n\t\t// Deactivate the clone and rename it to \"RemotePlayerPrototype\".\n\t\tBodyPrototype.SetActive(false);\n\t\tBodyPrototype.name = \"RemotePlayerPrototype\";\n\n\t\t// Remove items from the clone.\n\t\tforeach (Transform Child in BodyPrototype.transform) {\n\t\t\tif (Child.GetComponent<Item>()!= null) {\n\t\t\t\tDestroy(Child.gameObject);\n\t\t\t}\n\t\t}\n\n\t\t// Return the clone.\n\t\treturn BodyPrototype;\n\t}\n}", "CodeBleu_score": 33.66248657050792}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif(this.head.activeSelf) {\n\t\t\tthis.head.SetActive(false);\n\t\t}\n\t\tGameObject clone = Instantiate(this.bodyPrototype);\n\t\tclone.GetComponent<MeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\t\tclone.SetActive(false);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 25.00931722684814}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (player.GetComponent<PlayerController>().head.activeSelf == false) {\n\t\t\tplayer.GetComponent<PlayerController>().head.SetActive(true);\n\t\t}\n\t\tGameObject clone = Instantiate(player.GetComponent<PlayerController>().bodyPrototype);\n\t\tclone.GetComponent<PlayerController>().head.GetComponent<MeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\t\tclone.SetActive(false);\n\t\tclone.name = \"RemotePlayerPrototype\";\n\t\treturn clone;\n\t}\n}", "CodeBleu_score": 30.12429444022122}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(this.GetType().FullName);\n\tbw.Write(this.Location);\n\tbw.Write(this.Metadata);\n\tbw.Write(this.Processes);\n\tbw.Write(this.Dependencies);\n\tbw.Write(this.Incompatibilities);\n\tbw.Write(this.TargetVersion);\n}", "CodeBleu_score": 14.236126799714652}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().FullName);\n\tbw.Write(Location);\n\tbw.Write(Metadata);\n\tbw.Write(Processes);\n\tbw.Write(Dependencies);\n\tbw.Write(Incompatibilities);\n\tbw.Write(TargetVersion);\n}", "CodeBleu_score": 16.28423363080371}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t", "CodeBleu_score": 1.8398687168104124}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tPluginType pluginType = pluginInfo.PluginType;\n\tBasePlugin plugin = null;\n\ttry {\n\t\tplugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\t\tplugin.PluginInfo = pluginInfo;\n\t\tplugin.PluginAssembly = pluginAssembly;\n\t\tplugin.PluginLoad += new PluginLoadEventHandler(OnPluginLoad);\n\t\tplugin.Load();\n\t} catch (Exception ex) {\n\t\tthrow new Exception(\"Error loading plugin \" + pluginInfo.Name + \": \" + ex.Message, ex);\n\t}\n\treturn plugin;\n}", "CodeBleu_score": 39.11568881662409}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\t// create the plugin instance\n\tBasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginInfo.PluginType, new object[] { pluginInfo, pluginAssembly });\n\n\t// invoke the PluginLoad event\n\tOnPluginLoad(plugin);\n\n\t// call the Load method on the plugin instance\n\tplugin.Load();\n\n\t// return the plugin instance\n\treturn plugin;\n}", "CodeBleu_score": 41.077436945224505}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tBasePlugin plugin = null;\n\n\t// Create an instance of the plugin\n\tplugin = (BasePlugin)Activator.CreateInstance(pluginInfo.PluginType, pluginInfo.PluginName, pluginInfo.PluginVersion, pluginInfo.PluginDescription);\n\n\t// Set the plugin's assembly\n\tplugin.PluginAssembly = pluginAssembly;\n\n\t// Set the plugin's pluginInfo\n\tplugin.PluginInfo = pluginInfo;\n\n\t// Set the plugin's pluginManager\n\tplugin.PluginManager = this;\n\n\t// Invoke the PluginLoad event\n\tPluginLoad(plugin);\n\n\t// Call the Load method on the plugin\n\tplugin.Load();\n\n\treturn plugin;\n}", "CodeBleu_score": 40.669468568460445}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\nPrepare();\nif (signature == null) {\nTrampolineMethod = NativeTrampoline.Create(TrampolinePtr);\n} else {\nTrampolineMethod = NativeTrampoline.Create(TrampolinePtr, signature);\n}\n}\nreturn TrampolineMethod;\n}", "CodeBleu_score": 64.82113464992867}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod!= null) return TrampolineMethod;\nPrepare();\nif (signature == null) {\nreturn new NativeProxy(TrampolinePtr);\n}\nreturn new NativeProxy(TrampolinePtr, signature);\n}", "CodeBleu_score": 36.50937227269248}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod!= null) {\nreturn TrampolineMethod;\n}\n\nPrepare();\n\nreturn GenerateTrampolineImpl(signature);\n}", "CodeBleu_score": 27.519242254700227}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\n// Get the assembly\nAssembly assembly = Assembly.GetExecutingAssembly();\n\n// Get the resource name\nstring resourceName = $\"Language.{code}.json\";\n\n// Get the resource stream\nStream stream = assembly.GetManifestResourceStream(resourceName);\n\n// Check if the stream is null\nif (stream == null)\nthrow new NullReferenceException($\"The resource '{resourceName}' could not be found.\");\n\n// Deserialize the stream into a dictionary\nDictionary<string, string> dictionary = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\n// Return the dictionary\nreturn dictionary;\n}", "CodeBleu_score": 49.81733323194555}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tstring resourceName = $\"Languages.{code}.json\";\n\tusing (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName)) {\n\t\tif (stream == null) {\n\t\t\tthrow new NullReferenceException($\"Language file not found: {resourceName}\");\n\t\t}\n\n\t\tusing (StreamReader reader = new StreamReader(stream)) {\n\t\t\ttry {\n\t\t\t\treturn JsonConvert.DeserializeObject<Dictionary<string, string>>(reader.ReadToEnd());\n\t\t\t} catch (JsonException) {\n\t\t\t\tthrow;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 19.513463515229258}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tAssembly assembly = Assembly.GetExecutingAssembly();\n\tstring resourceName = \"Lang.json\";\n\tvar resourceStream = assembly.GetManifestResourceStream(resourceName);\n\tif (resourceStream == null) {\n\t\tthrow new NullReferenceException(\"The resource file \" + resourceName + \" was not found.\");\n\t}\n\tvar serializer = new DataContractJsonSerializer(typeof(Dictionary<string, string>));\n\treturn (Dictionary<string, string>)serializer.ReadObject(resourceStream);\n}", "CodeBleu_score": 42.594290150398315}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint count = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tcount++;\n\t\t\t((ParserRuleContext)node).Accept(this);\n\t\t}\n\t}\n\treturn count;\n}", "CodeBleu_score": 31.442514156111155}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\texpressionCount += ((ParserRuleContext)node).ChildCount;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 46.104443305312394}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint count = 0;\n\tforeach (var node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tcount++;\n\t\t\tVisit(node);\n\t\t}\n\t}\n\treturn count;\n}", "CodeBleu_score": 34.027634365589336}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\t// Retrieve the line ID tag\n\tvar lineId = context.line_id().GetText();\n\n\t// Retrieve the expressions in the line\n\tvar expressions = context.expression();\n\n\t// Retrieve the expression count\n\tvar expressionCount = expressions.Length;\n\n\t// Emit the RunLine opcode\n\tEmit(new RunLine(lineId, expressionCount));\n\n\t// Generate code for any expressions in the line\n\tfor (var i = 0; i < expressionCount; i++) {\n\t\tVisit(expressions[i]);\n\t}\n\n\treturn 0;\n}", "CodeBleu_score": 39.95461813284142}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar line = context.line_id().GetText();\n\tvar expressions = context.expression().Count;\n\tif (line == null) {\n\t\tthrow new InvalidOperationException(\"Line statement must have a line ID\");\n\t}\n\tif (expressions == 0) {\n\t\tthrow new InvalidOperationException(\"Line statement must have at least one expression\");\n\t}\n\tvar lineID = GetLineID(line);\n\tEmit(new RunLine(lineID, expressions));\n\treturn base.VisitLine_statement(context);\n}", "CodeBleu_score": 41.072497136053684}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\t// get the line ID\n\tvar lineID = context.line_id().GetText();\n\tif (lineID == null) {\n\t\tthrow new InvalidOperationException(\"Line ID not found in line statement.\");\n\t}\n\n\t// get the number of expressions in the formatted text\n\tvar expressions = context.expression().Count;\n\n\t// emit a RunLine opcode\n\tEmit(new RunLine(lineID, expressions));\n\treturn 0;\n}", "CodeBleu_score": 22.03518046304961}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar diagnostics = new List<Diagnostic>();\n\tvar commandReferences = yarnFile.CommandReferences;\n\tvar knownCommands = yarnFile.KnownCommands;\n\n\tforeach (var commandReference in commandReferences) {\n\t\tif (!knownCommands.Contains(commandReference.Command)) {\n\t\t\tdiagnostics.Add(Diagnostic.Create(\n\t\t\t\tUnknownCommandRule,\n\t\t\t\tcommandReference.Location,\n\t\t\t\tcommandReference.Command,\n\t\t\t\tcommandReference.Line,\n\t\t\t\tcommandReference.Column));\n\t\t}\n\t}\n\n\treturn diagnostics;\n}", "CodeBleu_score": 21.16735781862378}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar unknownCommands = new List<string>();\n\tforeach (var command in yarnFile.Commands) {\n\t\tif (!yarnFile.KnownCommands.Contains(command.Name)) {\n\t\t\tunknownCommands.Add(command.Name);\n\t\t}\n\t}\n\n\treturn unknownCommands.Select(commandName => Diagnostic.Create(\n\t\tnew DiagnosticDescriptor(\n\t\t\tid: \"Yarn.UnknownCommand\",\n\t\t\ttitle: \"Unknown command\",\n\t\t\tmessageFormat: \"Unknown command '{0}'.\",\n\t\t\tcategory: \"Yarn\",\n\t\t\tdefaultSeverity: DiagnosticSeverity.Warning,\n\t\t\tisEnabledByDefault: true,\n\t\t\tdescription: \"This command is not defined in the project's known commands.\",\n\t\t\thelpLinkUri: \"https://github.com/YarnSpinnerTool/YarnSpinner/wiki/Command-Reference\"),\n\t\tLocation.None,\n\t\tcommandName));\n}", "CodeBleu_score": 25.772994656816067}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar diagnostics = new List<Diagnostic>();\n\n\t// For each command reference in the YarnFileData object...\n\tforeach (var commandReference in yarnFile.CommandReferences) {\n\t\t// If the command is not in the project's known commands...\n\t\tif (!KnownCommands.Contains(commandReference.Command)) {\n\t\t\t//...generate a diagnostic for it.\n\t\t\tdiagnostics.Add(\n\t\t\t\tDiagnostic.Create(\n\t\t\t\t\tUnknownCommandRule,\n\t\t\t\t\tcommandReference.Location,\n\t\t\t\t\tcommandReference.Command,\n\t\t\t\t\tcommandReference.Line,\n\t\t\t\t\tcommandReference.Column\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\n\t// Return the diagnostics.\n\treturn diagnostics;\n}", "CodeBleu_score": 19.99370355716252}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions {\n\t\tDocumentSelector = new DocumentSelector(new[] { new DocumentFilter { Scheme = \"file\", Language = \"yarn\" } }),\n\t\tProviderRegistrationOptions = new CodeActionOptions {\n\t\t\t// Disable the resolve provider. We handle code action resolution locally.\n\t\t\tResolveProvider = false,\n\t\t\t// Only support quick fix code actions.\n\t\t\tActions = new[] { CodeActionKind.QuickFix }\n\t\t}\n\t};\n}", "CodeBleu_score": 48.388100615933325}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = new DocumentSelector(new[] { new DocumentFilter() {\n\t\t\tLanguage = \"yarn\",\n\t\t\tScheme = \"file\"\n\t\t} }),\n\t\tProviderRegistrationOptions = new CodeActionOptions() {\n\t\t\tResolveProvider = false,\n\t\t\tCodeActionKinds = new Container<string>(new[] { CodeActionKind.QuickFix })\n\t\t}\n\t};\n}", "CodeBleu_score": 46.925007096632896}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar selector = new DocumentSelector(new [] {\n\t\tnew DocumentFilter {\n\t\t\tLanguage = \"yarn\",\n\t\t\tScheme = \"file\",\n\t\t},\n\t});\n\n\treturn new CodeActionRegistrationOptions {\n\t\tTitle = \"Yarn: Register Code Actions\",\n\t\tId = \"yarn.registerCodeActions\",\n\t\tDocumentSelector = selector,\n\t\tKind = CodeActionKind.QuickFix,\n\t\t// Disable the resolve provider so that we can call resolve on the code actions\n\t\t// without getting an error.\n\t\tResolveProvider = false,\n\t};\n}", "CodeBleu_score": 39.29886363645735}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (this.Variables.TryGetValue(variableName, out var variable)) {\n\t\tif (variable is Variable<T> typedVariable) {\n\t\t\tresult = typedVariable.Value;\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tthrow new ArgumentException($\"Variable '{variableName}' is of type '{variable.GetType().Name}' but was expected to be of type '{typeof(T).Name}'\");\n\t\t}\n\t}\n\telse {\n\t\tresult = default;\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 57.230599019817916}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variables.TryGetValue(variableName, out var variable)) {\n\t\tif (variable.Type == typeof(T)) {\n\t\t\tresult = (T)variable.Value;\n\t\t\treturn true;\n\t\t}\n\t\tthrow new ArgumentException($\"Variable {variableName} has type {variable.Type} but is being assigned to type {typeof(T)}\");\n\t}\n\tresult = default;\n\treturn false;\n}", "CodeBleu_score": 48.58359314251706}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variables.TryGetValue(variableName, out var variable)) {\n\t\tif (variable.Type == typeof(T)) {\n\t\t\tresult = (T)variable.Value;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException($\"Variable {variableName} has type {variable.Type.Name} but was expected to have type {typeof(T).Name}.\");\n\t\t}\n\t} else {\n\t\tresult = default;\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 51.11289347633405}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.VariableStorage = variableStorage;\n\tthis.Library = new Library();\n\tthis.VirtualMachine = new VirtualMachine(this.Library);\n\tthis.VirtualMachine.RegisterFunction(\"GetNodeVisitCount\", new GetNodeVisitCount(this));\n\tthis.VirtualMachine.RegisterFunction(\"IsNodeVisited\", new IsNodeVisited(this));\n\tthis.LineParser = new LineParser();\n\tthis.LineParser.RegisterMarkerProcessor(new SelectMarkerProcessor(this));\n\tthis.LineParser.RegisterMarkerProcessor(new PluralMarkerProcessor(this));\n\tthis.LineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor(this));\n}", "CodeBleu_score": 30.88970082270731}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.VariableStorage = variableStorage;\n\tthis.Library = new Yarn.Library();\n\tthis.VirtualMachine = new Yarn.VirtualMachine(this.Library);\n\tthis.VirtualMachine.ImportStandardLibrary();\n\tthis.VirtualMachine.RegisterFunction(\"GetNodeVisitCount\", new Yarn.Function(this.GetNodeVisitCount));\n\tthis.VirtualMachine.RegisterFunction(\"IsNodeVisited\", new Yarn.Function(this.IsNodeVisited));\n\tthis.LineParser = new Yarn.LineParser();\n\tthis.LineParser.RegisterMarkerProcessor(new Yarn.LineParser.SelectMarkerProcessor());\n\tthis.LineParser.RegisterMarkerProcessor(new Yarn.LineParser.PluralMarkerProcessor());\n\tthis.LineParser.RegisterMarkerProcessor(new Yarn.LineParser.OrdinalMarkerProcessor());\n}", "CodeBleu_score": 30.801409882093267}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.VariableStorage = variableStorage;\n\tthis.Library = new Yarn.Library();\n\tthis.VirtualMachine = new Yarn.VirtualMachine(this.Library);\n\tthis.VirtualMachine.ImportStandardLibrary();\n\tthis.VirtualMachine.RegisterFunction(\"GetNodeVisitCount\", new Func<string, float>(GetNodeVisitCount));\n\tthis.VirtualMachine.RegisterFunction(\"IsNodeVisited\", new Func<string, bool>(IsNodeVisited));\n\tthis.LineParser = new Yarn.LineParser();\n\tthis.LineParser.RegisterMarkerProcessor(\"select\", new Func<string, string>(SelectProcessor));\n\tthis.LineParser.RegisterMarkerProcessor(\"plural\", new Func<string, string>(PluralProcessor));\n\tthis.LineParser.RegisterMarkerProcessor(\"ordinal\", new Func<string, string>(OrdinalProcessor));\n}", "CodeBleu_score": 32.82709393133547}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tfor (int i = 0; i < m_LoopListBankData.Count; i++) {\n\t\tif (m_LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 53.7893501601572}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 53.03738284040691}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tint i = 0;\n\tfor (i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 54.586925959590715}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.m_Content = newContent;\n\tnewLoopListBankData.m_ID = m_LoopListBankDataList.Count;\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 37.85398893915398}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.Content = newContent;\n\tnewLoopListBankData.ID = GetUniqueID();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 38.64158734502725}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.m_Content = newContent;\n\tnewLoopListBankData.m_ID = GenerateUniqueID();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 38.595640565964324}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tif (m_Content!= null) {\n\t\t\tif (m_Content is GameObject) {\n\t\t\t\tif (m_Content.name!= \"ScrollCell\") {\n\t\t\t\t\tm_Content.name = \"ScrollCell\";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.75292283303455}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_PrefabName + \" \" + idx;\n\t}\n\tif (m_IsUpdateClickID) {\n\t\tm_ClickUniqueID = ClickUniqueID;\n\t\tm_ClickObject = ClickObject;\n\t}\n}", "CodeBleu_score": 53.921482378718856}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_Prefab.name + \" \" + idx;\n\t}\n}", "CodeBleu_score": 53.4576333235435}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t\t// Get the number of items to add from the input field\n\tint itemCount = int.Parse(inputField.text);\n\n\t// If the number of items to add is less than 1, do nothing\n\tif (itemCount < 1) {\n\t\treturn;\n\t}\n\n\t// Add the random numbers to the list\n\tfor (int i = 0; i < itemCount; i++) {\n\t\tlistBank.Add(Random.Range(0, 10));\n\t}\n\n\t// Update the total count of the scroll rect\n\tscrollRect.totalCount = listBank.Count;\n\n\t// Refresh the cells\n\tscrollRect.RefreshCells();\n}", "CodeBleu_score": 31.558776809880385}, {"code": "private void OnButtonAddDataClickk(){\n\t\n// Parse the input field text to determine the number of items to add.\nint numberOfItemsToAdd = 0;\nint.TryParse(inputField.text, out numberOfItemsToAdd);\n\n// Ensure at least one item is added.\nif (numberOfItemsToAdd <= 0) {\nnumberOfItemsToAdd = 1;\n}\n\n// Add random integers between 0 and 10 to the list bank.\nfor (int i = 0; i < numberOfItemsToAdd; i++) {\nlistBank.Add(Random.Range(0, 11));\n}\n\n// Update the total count of the scroll rect.\nscrollRect.totalCount = listBank.Count;\n\n// Refresh the displayed cells.\nscrollRect.RefreshCells();\n}", "CodeBleu_score": 38.27968420096101}, {"code": "private void OnButtonAddDataClickk(){\n\t\t// Parse the text field input to determine the number of items to add\n\tint itemCount = 0;\n\tint.TryParse(m_InputFieldAddData.text, out itemCount);\n\tif (itemCount <= 0) {\n\t\treturn;\n\t}\n\n\t// Add random integers between 0 and 10 to the list bank\n\tfor (int i = 0; i < itemCount; i++) {\n\t\tm_ListBank.Add(Random.Range(0, 10));\n\t}\n\n\t// Update the total count of the scroll rect\n\tm_ScrollRect.totalCount = m_ListBank.Count;\n\n\t// Refresh the displayed cells\n\tm_ScrollRect.RefreshCells();\n}", "CodeBleu_score": 37.823489440767304}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\tbase.ClearTempPool();\n\tif (m_start > 0) {\n\t\tfor (int i = 0; i < m_start; i++) {\n\t\t\tm_prefabSource.Add(m_pool[i]);\n\t\t}\n\t\tm_start = 0;\n\t}\n\tif (m_end < m_pool.Count) {\n\t\tfor (int i = m_end; i < m_pool.Count; i++) {\n\t\t\tm_prefabSource.Add(m_pool[i]);\n\t\t}\n\t\tm_end = m_pool.Count;\n\t}\n}", "CodeBleu_score": 40.211488421926255}, {"code": "protected override void ClearTempPool(){\n\t\tbase.ClearTempPool();\n\tif (m_content.childCount!= m_prefab.childCount) {\n\t\tDebug.LogError(\"The content and prefab have a different number of children. This is not supported.\");\n\t}\n\tif (m_start >= m_content.childCount) {\n\t\tm_start = 0;\n\t}\n\tif (m_end >= m_content.childCount) {\n\t\tm_end = m_content.childCount - 1;\n\t}\n\tif (m_start > 0) {\n\t\tfor (int i = 0; i < m_start; i++) {\n\t\t\tm_prefab.AddChild(m_content.GetChild(i));\n\t\t}\n\t\tm_start = 0;\n\t}\n\tif (m_end < m_content.childCount - 1) {\n\t\tfor (int i = m_end + 1; i < m_content.childCount; i++) {\n\t\t\tm_prefab.AddChild(m_content.GetChild(i));\n\t\t}\n\t\tm_end = m_content.childCount - 1;\n\t}\n}", "CodeBleu_score": 45.54196342887214}, {"code": "protected override void ClearTempPool(){\n\t\tbase.ClearTempPool();\n\tif (this.m_TempPool.Count > 0) {\n\t\tif (this.m_TempPool.Count!= this.m_NumChildElements) {\n\t\t\tDebug.LogWarning(\"Temp pool count does not match the number of child elements. This may cause issues with the prefab pool.\");\n\t\t}\n\t\tthis.m_TempPool.Clear();\n\t}\n}", "CodeBleu_score": 10.061341586790737}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t\t#if UNITY_EDITOR\n\tif (!Application.isPlaying) {\n\t\tDebug.Log(\"AnticipateScale is only available in Play Mode\");\n\t\treturn;\n\t}\n\t#endif\n\tif (NetworkManager.IsNetworkActive() && NetworkManager.IsListening()) {\n\t\tif (m_NetworkTransform.m_IsClient) {\n\t\t\tm_NetworkTransform.m_LocalScale = newScale;\n\t\t\tm_NetworkTransform.m_AnticipatedScale = newScale;\n\t\t}\n\t\tif (m_NetworkTransform.m_IsServer && m_NetworkTransform.m_IsOwner) {\n\t\t\tm_NetworkTransform.m_Scale = newScale;\n\t\t}\n\t\tm_NetworkTransform.m_ScaleAnticipation = newScale;\n\t\tm_NetworkTransform.m_ScaleAnticipationCounter = m_NetworkTransform.m_ScaleAnticipationCounter + 1;\n\t\tm_NetworkTransform.m_ScaleAnticipationTime = m_NetworkTransform.m_ScaleAnticipationTime + Time.deltaTime;\n\t\tm_NetworkTransform.m_ScaleSmoothTime = 0.0f;\n\t\tm_NetworkTransform.m_ScaleSmoothVelocity = 0.0f;\n\t}\n}", "CodeBleu_score": 39.5669535726362}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\n}", "CodeBleu_score": 2.0649604624249824}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\n}", "CodeBleu_score": 2.0649604624249824}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}, {"code": "private void FlushMessages(){\n\t\tif (m_PendingAnimationMessages.Count > 0) {\n\t\tif (m_Animator.isHuman) {\n\t\t\tm_Animator.SendMessages(m_PendingAnimationMessages.ToArray());\n\t\t}\n\t\telse {\n\t\t\tm_Animator.SendMessages(m_PendingAnimationMessages.ToArray(), SendMessageOptions.DontRequireReceiver);\n\t\t}\n\t\tm_PendingAnimationMessages.Clear();\n\t}\n\tif (m_PendingParameterMessages.Count > 0) {\n\t\tif (m_Animator.isHuman) {\n\t\t\tm_Animator.SetParameters(m_PendingParameterMessages.ToArray());\n\t\t}\n\t\telse {\n\t\t\tm_Animator.SetParameters(m_PendingParameterMessages.ToArray(), SendMessageOptions.DontRequireReceiver);\n\t\t}\n\t\tm_PendingParameterMessages.Clear();\n\t}\n\tif (m_PendingTriggerMessages.Count > 0) {\n\t\tif (m_Animator.isHuman) {\n\t\t\tm_Animator.SendTriggerMessages(m_PendingTriggerMessages.ToArray());\n\t\t}\n\t\telse {\n\t\t\tm_Animator.SendTriggerMessages(m_PendingTriggerMessages.ToArray(), SendMessageOptions.DontRequireReceiver);\n\t\t}\n\t\tm_PendingTriggerMessages.Clear();\n\t}\n}", "CodeBleu_score": 47.19497633719979}, {"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (isServer || isOwner) {\n\t\t\tFlushMessages();\n\t\t}\n\n\t\tif (isServer) {\n\t\t\tProcessParameterUpdates();\n\t\t\tCheckForAnimatorChanges();\n\t\t}\n\t} else if (updateStage == NetworkUpdateStage.PostUpdate) {\n\t\tif (isServer) {\n\t\t\tProcessParameterUpdates();\n\t\t\tCheckForAnimatorChanges();\n\t\t}\n\t}\n}", "CodeBleu_score": 18.91277580030728}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_NetworkAnimator.IsOwnerOrServer) {\n\t\t\tFlushMessages();\n\t\t}\n\t\tProcessParameterUpdates();\n\t\tif (m_NetworkAnimator.IsOwnerOrServer) {\n\t\t\tCheckForAnimatorChanges();\n\t\t}\n\t}\n}", "CodeBleu_score": 16.85186415051359}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate)\n{\nif (m_NetworkAnimator.IsOwner || m_NetworkAnimator.IsServer)\n{\nFlushMessages();\n}\n\nif (m_NetworkAnimator.IsOwner)\n{\nProcessParameterUpdates();\n}\n\nif (m_NetworkAnimator.IsServer)\n{\nProcessAnimatorChanges();\n}\n}\nelse if (updateStage == NetworkUpdateStage.PostUpdate)\n{\nif (m_NetworkAnimator.IsOwner)\n{\nProcessParameterUpdates();\n}\n}\n}", "CodeBleu_score": 23.989766042324646}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t\n}", "CodeBleu_score": 2.3840384578957123}, {"code": "private void UpdateOwnershipAuthority(){\n\t\n}", "CodeBleu_score": 2.3840384578957123}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (IsServer) {\n\t\tif (IsOwner) {\n\t\t\tif (IsOwnerClient) {\n\t\t\t\tSetAuthority(true);\n\t\t\t} else {\n\t\t\t\tSetAuthority(false);\n\t\t\t}\n\t\t} else {\n\t\t\tif (IsOwnerClient) {\n\t\t\t\tSetAuthority(false);\n\t\t\t} else {\n\t\t\t\tSetAuthority(true);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (IsOwner) {\n\t\t\tSetAuthority(true);\n\t\t} else {\n\t\t\tSetAuthority(false);\n\t\t}\n\t}\n}", "CodeBleu_score": 9.427150620838615}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\t// Determine which quaternion component to skip\n\tbool skipX = (compressed & 0x00000002)!= 0;\n\tbool skipY = (compressed & 0x00000004)!= 0;\n\tbool skipZ = (compressed & 0x00000008)!= 0;\n\n\t// Decompress the remaining components\n\tfloat x = DecompressFloat(compressed & 0x00000001);\n\tfloat y = DecompressFloat(compressed & 0x00000001);\n\tfloat z = DecompressFloat(compressed & 0x00000001);\n\n\t// Calculate the sum of squared magnitudes\n\tfloat sum = x * x + y * y + z * z;\n\n\t// Compute the skipped component to ensure unit length\n\tfloat skipped = 1.0f - sum;\n\n\t// Set the quaternion components\n\tif (!skipX) {\n\t\tquaternion.x = x;\n\t}\n\tif (!skipY) {\n\t\tquaternion.y = y;\n\t}\n\tif (!skipZ) {\n\t\tquaternion.z = z;\n\t}\n\tquaternion.w = skipped;\n}", "CodeBleu_score": 17.642807499739067}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\t// Get the highest two bits of the compressed value\n\tuint bits = (compressed >> 30) & 0x3;\n\n\t// Decompress the x component\n\tif ((bits & 0x1) == 0) {\n\t\tquaternion.x = (float)(compressed & 0x3FFFFFFF) * 2.0f / 0x3FFFFFFF;\n\t}\n\t// Decompress the y component\n\telse if ((bits & 0x2) == 0) {\n\t\tquaternion.y = (float)(compressed & 0x3FFFFFFF) * 2.0f / 0x3FFFFFFF;\n\t}\n\t// Decompress the z component\n\telse if ((bits & 0x4) == 0) {\n\t\tquaternion.z = (float)(compressed & 0x3FFFFFFF) * 2.0f / 0x3FFFFFFF;\n\t}\n\t// Decompress the w component\n\telse {\n\t\tquaternion.w = (float)(compressed & 0x3FFFFFFF) * 2.0f / 0x3FFFFFFF;\n\t}\n\n\t// Calculate the sum of squared magnitudes\n\tfloat sumOfSquares = quaternion.x * quaternion.x + quaternion.y * quaternion.y + quaternion.z * quaternion.z + quaternion.w * quaternion.w;\n\n\t// Calculate the skipped component to ensure unit length\n\tif (sumOfSquares > 1.0f) {\n\t\tfloat scale = 1.0f / Mathf.Sqrt(sumOfSquares);\n\t\tquaternion.x *= scale;\n\t\tquaternion.y *= scale;\n\t\tquaternion.z *= scale;\n\t\tquaternion.w *= scale;\n\t}\n}", "CodeBleu_score": 19.002800390454816}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\t// Get the path of the file\n\tstring filePath = EditorUtility.OpenFilePanel(\"Select CLR binding file\", Application.dataPath, \"dll\");\n\tif (filePath.Length == 0) {\n\t\treturn;\n\t}\n\t// Get the path of the file without the extension\n\tstring dllName = filePath.Substring(0, filePath.LastIndexOf(\".\"));\n\tdllName = dllName.Substring(dllName.LastIndexOf(\"/\") + 1);\n\tstring bindingCode = ILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(filePath, dllName);\n\t// Create a new AppDomain\n\tvar appdomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n\t// Load the assembly\n\tbyte[] dllBytes = File.ReadAllBytes(filePath);\n\t// Initialize ILRuntime\n\tappdomain.LoadAssembly(dllBytes, null, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n\t// Generate binding code\n\tFile.WriteAllText(dllName + \".cs\", bindingCode);\n\t// Refresh the AssetDatabase\n\tAssetDatabase.Refresh();\n}", "CodeBleu_score": 20.556542018961945}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying);\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigCount\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedBytesSize\"));\n\n\tEditorGUI.EndDisabledGroup();\n\n\tserializedObject.ApplyModifiedProperties();\n\tEditorUtility.SetDirty(target);\n}", "CodeBleu_score": 37.42475448621002}, {"code": "public override void OnInspectorGUI(){\n\t", "CodeBleu_score": 0.925914944286159}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUILayout.BeginDisabledGroup(Application.isPlaying);\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_ConfigCount\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_CachedBytesSize\"));\n\tEditorGUILayout.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tEditorUtility.SetDirty(target);\n\tEditorUtility.SetDirty(serializedObject.targetObject);\n\tRepaint();\n}", "CodeBleu_score": 44.15779445761616}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t\t// Create a HashSet of default scene names\n\tHashSet<string> defaultScenes = new HashSet<string> {\n\t\t\"Assets/Scenes/MainScene.unity\",\n\t\t\"Assets/Scenes/MenuScene.unity\",\n\t\t\"Assets/Scenes/EndScene.unity\",\n\t\t\"Assets/Scenes/GameOverScene.unity\",\n\t\t\"Assets/Scenes/GameScene.unity\"\n\t};\n\n\t// Convert the HashSet to a list of EditorBuildSettingsScene objects\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string scene in defaultScenes) {\n\t\tscenes.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\n\t// Update the EditorBuildSettings with the list of scenes\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\n\t// Log that the scenes have been set to the default\n\tDebug.Log(\"Scenes have been set to default.\");\n}", "CodeBleu_score": 53.024952930022614}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultScenes = new HashSet<string> {\n\t\t\"Assets/Scenes/Menu.unity\",\n\t\t\"Assets/Scenes/Game.unity\",\n\t\t\"Assets/Scenes/GameOver.unity\",\n\t\t\"Assets/Scenes/Options.unity\"\n\t};\n\tList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\tforeach (string scene in defaultScenes) {\n\t\tscenes.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 53.805509064289794}, {"code": "public static void DefaultScenes(){\n\t\n}", "CodeBleu_score": 1.456845337689002}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\n}", "CodeBleu_score": 0.8386193950343431}, {"code": "public void Draw(){\n\t\n}", "CodeBleu_score": 0.8386193950343431}, {"code": "public void Draw(){\n\t\n}", "CodeBleu_score": 0.8386193950343431}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t#if UNITY_EDITOR\n\t// Remove the general logging symbol\n\tif (PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Contains(LOG_GENERAL_DEFINE_SYMBOL)) {\n\t\tPlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(LOG_GENERAL_DEFINE_SYMBOL, string.Empty));\n\t}\n\n\t// Remove the logging symbols for specific logs and logs above a certain level\n\tforeach (var log in Enum.GetValues(typeof(LogType))) {\n\t\tif (log == LogType.Log) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Contains(LOG_DEFINE_SYMBOL_PREFIX + log.ToString())) {\n\t\t\tPlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(LOG_DEFINE_SYMBOL_PREFIX + log.ToString(), string.Empty));\n\t\t}\n\t}\n#endif\n}", "CodeBleu_score": 41.216457942828896}, {"code": "public static void DisableAllLogs(){\n\t", "CodeBleu_score": 2.9649991162360623}, {"code": "public static void DisableAllLogs(){\n\t", "CodeBleu_score": 2.9649991162360623}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tfor (GameFrameworkComponent c = firstComponent; c!= null; c = c.nextComponent) {\n\t\tif (c.GetType() == type) {\n\t\t\tcomponent = c;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn component;\n}", "CodeBleu_score": 29.729781283931306}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tGameFrameworkComponent currentComponent = null;\n\tif (m_components!= null) {\n\t\tcurrentComponent = m_components;\n\t\twhile (currentComponent!= null) {\n\t\t\tif (currentComponent.GetType() == type) {\n\t\t\t\tcomponent = currentComponent;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrentComponent = currentComponent.m_next;\n\t\t}\n\t}\n\treturn component;\n}", "CodeBleu_score": 38.26890451649834}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tGameFrameworkComponent current = null;\n\tif (m_components!= null) {\n\t\tcurrent = m_components;\n\t\twhile (current!= null) {\n\t\t\tif (current.GetType() == type) {\n\t\t\t\tcomponent = current;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcurrent = current.m_next;\n\t\t}\n\t}\n\treturn component;\n}", "CodeBleu_score": 41.065181472268684}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\t//Log.LogInfo(\"ShutdownType: \" + shutdownType);\n\tif (BaseComponent.Instance!= null) {\n\t\tBaseComponent.Instance.Shutdown();\n\t}\n\tif (shutdownType == ShutdownType.Restart) {\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 19.825137518944697}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 15.929995145499795}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tif (GameFramework.GameScene!= null) {\n\t\t\tGameFramework.GameScene.Restart();\n\t\t}\n\t}\n\telse if (shutdownType == ShutdownType.Quit) {\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 17.403682566480004}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\tbase.Awake();\n\n_configManager = GameFrameworkEntry.GetModule<IConfigManager>();\nif (_configManager == null)\n{\nLog.Fatal(\"Config manager is invalid.\");\nreturn;\n}\n\n_configManager.OnConfigReadSuccess += OnConfigReadSuccess;\n_configManager.OnConfigReadFailure += OnConfigReadFailure;\n\nif (_enableUpdate)\n{\n_configManager.OnConfigUpdateSuccess += OnConfigUpdateSuccess;\n_configManager.OnConfigUpdateFailure += OnConfigUpdateFailure;\n}\n\nif (_enableDependency)\n{\n_configManager.OnConfigDependencyAssetUpdateSuccess += OnConfigDependencyAssetUpdateSuccess;\n_configManager.OnConfigDependencyAssetUpdateFailure += OnConfigDependencyAssetUpdateFailure;\n}\n}", "CodeBleu_score": 67.24153106508972}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tif (this.m_ConfigManager == null) {\n\t\tthis.m_ConfigManager = GameFrameworkEntry.GetConfigManager();\n\t}\n\tif (this.m_ConfigManager == null) {\n\t\tLog.Fatal(\"Config manager is invalid.\");\n\t\treturn;\n\t}\n\tthis.m_ConfigManager.UpdateAssetEvent += this.OnUpdateAsset;\n\tthis.m_ConfigManager.DependencyAssetEvent += this.OnDependencyAsset;\n\tif (this.m_IsAutoLoadConfig) {\n\t\tthis.LoadConfig();\n\t}\n}", "CodeBleu_score": 36.1375318023252}, {"code": "protected override void Awake(){\n\t", "CodeBleu_score": 1.7466776600490854}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tTextAsset textAsset = configAsset as TextAsset;\n\tif (textAsset == null) {\n\t\tDebug.LogWarningFormat(\"Config asset {0} is not a TextAsset.\", configAssetName);\n\t\treturn false;\n\t}\n\tstring text = textAsset.text;\n\tif (text.EndsWith(\".bytes\")) {\n\t\treturn ReadBytes(textAsset, configManager, userData);\n\t}\n\treturn ReadText(textAsset, configManager, userData);\n}", "CodeBleu_score": 55.36328359704105}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset is TextAsset) {\n\t\tTextAsset textAsset = configAsset as TextAsset;\n\t\tif (textAsset!= null) {\n\t\t\tif (configAssetName.EndsWith(\".bytes\")) {\n\t\t\t\treturn ReadBytes(configManager, textAsset.bytes, userData);\n\t\t\t}\n\t\t\treturn ReadText(configManager, textAsset.text, userData);\n\t\t}\n\t}\n\tDebug.LogWarning(\"Config asset is not a TextAsset. Cannot read config data.\");\n\treturn false;\n}", "CodeBleu_score": 56.566374024374696}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\treturn false;\n\t}\n\n\tif (configAsset is TextAsset) {\n\t\treturn ReadDataFromTextAsset(configManager, configAssetName, configAsset as TextAsset, userData);\n\t} else if (configAsset is byte[]) {\n\t\treturn ReadDataFromBytes(configManager, configAssetName, configAsset as byte[], userData);\n\t}\n\n\tDebug.LogWarning(\"ConfigManager: Failed to read config data from asset \" + configAssetName + \".\");\n\treturn false;\n}", "CodeBleu_score": 49.12109206493479}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configManager == null) {\n\t\treturn false;\n\t}\n\tif (configBytes == null) {\n\t\treturn false;\n\t}\n\tif (configBytes.Length < length) {\n\t\treturn false;\n\t}\n\tif (startIndex < 0) {\n\t\treturn false;\n\t}\n\tif (startIndex >= configBytes.Length) {\n\t\treturn false;\n\t}\n\tif (length < 0) {\n\t\treturn false;\n\t}\n\tif (length > configBytes.Length) {\n\t\treturn false;\n\t}\n\tif (userData!= null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tusing (MemoryStream stream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader reader = new BinaryReader(stream)) {\n\t\t\t\twhile (reader.BaseStream.Position < reader.BaseStream.Length) {\n\t\t\t\t\tstring name = reader.ReadString();\n\t\t\t\t\tif (string.IsNullOrEmpty(name)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (name.Length > 255) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (!configManager.AddConfig(name, reader.ReadUInt32())) {\n\t\t\t\t\t\tDebug.LogWarning(\"ConfigManager: ParseData: Failed to add config \" + name + \" with value \" + reader.ReadUInt32());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tDebug.LogWarning(\"ConfigManager: ParseData: Exception occurred while parsing config data: \" + ex);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 51.33851490836868}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configManager == null) {\n\t\tthrow new ArgumentNullException(\"configManager\");\n\t}\n\tif (configBytes == null) {\n\t\tthrow new ArgumentNullException(\"configBytes\");\n\t}\n\tif (startIndex < 0) {\n\t\tthrow new ArgumentOutOfRangeException(\"startIndex\");\n\t}\n\tif (length < 0) {\n\t\tthrow new ArgumentOutOfRangeException(\"length\");\n\t}\n\tif (startIndex + length > configBytes.Length) {\n\t\tthrow new ArgumentOutOfRangeException(\"length\");\n\t}\n\tif (userData == null) {\n\t\tthrow new ArgumentNullException(\"userData\");\n\t}\n\n\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader reader = new BinaryReader(memoryStream)) {\n\t\t\t\tint numConfigs = reader.ReadInt32();\n\t\t\t\tfor (int i = 0; i < numConfigs; i++) {\n\t\t\t\t\tstring name = reader.ReadString();\n\t\t\t\t\tstring value = reader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(name, value)) {\n\t\t\t\t\t\tLogger.LogWarning(\"Could not add config: \" + name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tLogger.LogException(e);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.81511434471032}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream stream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader reader = new BinaryReader(stream)) {\n\t\t\t\twhile (reader.BaseStream.Position < reader.BaseStream.Length) {\n\t\t\t\t\tstring name = reader.ReadString();\n\t\t\t\t\tif (name.Length == 0) {\n\t\t\t\t\t\tthrow new Exception(\"Config name cannot be empty.\");\n\t\t\t\t\t}\n\t\t\t\t\tstring value = reader.ReadString();\n\t\t\t\t\tif (value.Length == 0) {\n\t\t\t\t\t\tthrow new Exception(\"Config value cannot be empty.\");\n\t\t\t\t\t}\n\t\t\t\t\tif (!configManager.AddConfig(name, value)) {\n\t\t\t\t\t\tLogger.LogWarning(\"Failed to add config: \" + name + \" = \" + value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} catch (Exception e) {\n\t\tLogger.LogException(e);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 53.282980706304016}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tvar resourceComponent = configAsset as IResourceComponent;\n\tif (resourceComponent!= null) {\n\t\tresourceComponent.UnloadAsset();\n\t}\n}", "CodeBleu_score": 34.00129555926662}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configAsset is ResourceComponent) {\n\t\tResourceComponent resourceComponent = (ResourceComponent)configAsset;\n\t\tresourceComponent.UnloadAsset();\n\t}\n}", "CodeBleu_score": 45.654483360036316}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configAsset!= null) {\n\t\tResourceComponent resourceComponent = configAsset as ResourceComponent;\n\t\tif (resourceComponent!= null) {\n\t\t\tresourceComponent.UnloadAsset();\n\t\t}\n\t}\n}", "CodeBleu_score": 32.07906349908602}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t ActiveSceneChangedEventArgs ret = new ActiveSceneChangedEventArgs();\n ret.lastActiveScene = lastActiveScene;\n ret.activeScene = activeScene;\n return ret;\n }", "CodeBleu_score": 34.163129582368214}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs ret = new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\nreturn ret;\n}", "CodeBleu_score": 20.05053241876678}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t ActiveSceneChangedEventArgs ret = new ActiveSceneChangedEventArgs();\n ret.LastActiveScene = lastActiveScene;\n ret.ActiveScene = activeScene;\n return ret;\n}", "CodeBleu_score": 34.293346514246544}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (sceneAssetName == null) {\n\t\tDebug.LogError(\"LoadScene: sceneAssetName cannot be null\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\") ||!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"LoadScene: sceneAssetName must start with \\\"Assets/\\\" and end with \\\".unity\\\"\");\n\t\treturn;\n\t}\n\tSceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 48.681095522168235}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (sceneAssetName == null) {\n\t\tDebug.LogError(\"Scene name cannot be null.\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tDebug.LogError(\"Scene name must start with \\\"Assets/\\\".\");\n\t\treturn;\n\t}\n\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"Scene name must end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\n\tSceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 48.957691048600424}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (sceneAssetName == null) {\n\t\tDebug.LogError(\"LoadScene: sceneAssetName cannot be null.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tDebug.LogError(\"LoadScene: sceneAssetName must start with \\\"Assets/\\\".\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"LoadScene: sceneAssetName must end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\tSceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 49.10609048719932}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register the feature implementations\n\tFBinariesPatchFeatureModule::RegisterFeatureImplementations();\n}", "CodeBleu_score": 6.393102428560443}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register the feature implementations\n\tRegisterFeatureImplementations();\n\n\t// Set up callbacks for when modular features are registered or unregistered\n\tFModularFeatures::OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tFModularFeatures::OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 29.30874514143053}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register the feature implementations\n\tTArray<FName> FeatureNames;\n\tfor (const TSharedRef<FBinariesPatchFeature>& Feature : RegisteredFeatures) {\n\t\tFeatureNames.Add(Feature->GetFeatureName());\n\t}\n\t// Add the feature names to the enumerations\n\tEBinariesPatchFeature::AddEnumNames(FeatureNames);\n\t// Set up callbacks for when modular features are registered or unregistered\n\tFBinariesPatchFeatureModule::OnModularFeatureRegistered.AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tFBinariesPatchFeatureModule::OnModularFeatureUnregistered.AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 45.441494960642146}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t", "CodeBleu_score": 9.464279801391635}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString TokenValue;\n\tif (Commandline.Split(Token, &TokenValue, ESearchCase::IgnoreCase, ESearchDir::FromStart)) {\n\t\tTArray<FString> Tokens;\n\t\tTokenValue.ParseIntoArray(Tokens, TEXT(\",\"), true);\n\t\tResult = Tokens;\n\t}\n\treturn Result;\n}", "CodeBleu_score": 48.7674015953711}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString CommandlineLower = Commandline.ToLower();\n\tFString TokenLower = Token.ToLower();\n\tFString Value;\n\tbool bFound = false;\n\tint32 Index = 0;\n\tint32 StartIndex = 0;\n\tint32 EndIndex = 0;\n\tint32 Length = CommandlineLower.Len();\n\twhile (Index < Length) {\n\t\tif (CommandlineLower.Mid(Index, TokenLower.Len()) == TokenLower) {\n\t\t\tbFound = true;\n\t\t\tStartIndex = Index + TokenLower.Len();\n\t\t\tbreak;\n\t\t}\n\t\tIndex++;\n\t}\n\tif (bFound) {\n\t\tStartIndex++;\n\t\tEndIndex = CommandlineLower.Find(TEXT(\",\"), ESearchCase::IgnoreCase, ESearchDir::FromStart, StartIndex);\n\t\tif (EndIndex == INDEX_NONE) {\n\t\t\tEndIndex = Length;\n\t\t}\n\t\tValue = Commandline.Mid(StartIndex, EndIndex - StartIndex);\n\t\tResult = Value.ParseIntoArray(TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 42.30776945965758}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = FCommandLine::Get();\n\tif (CommandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\treturn CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 22.999584905561267}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tbool isCookCommandlet = false;\n\tFString commandletName = GetRunningCommandletName();\n\tif (!commandletName.IsEmpty() && commandletName.Equals(\"cook\", ESearchCase::IgnoreCase)) {\n\t\tisCookCommandlet = true;\n\t}\n\treturn isCookCommandlet;\n}", "CodeBleu_score": 33.136076083087055}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tconst char* commandletName = GetRunningCommandletName();\n\tif (commandletName!= NULL) {\n\t\tif (stricmp(commandletName, \"cook\") == 0) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 16.737114956740395}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\t// Get the commandlet name from the command line\n\tFString CommandletName;\n\tif (FParse::Value(FCommandLine::Get(), TEXT(\"Commandlet=\"), CommandletName)) {\n\t\t// Get the settings for the current project\n\t\tFHotPatcherSettings* HotPatcherSettings = GetMutableDefault<FHotPatcherSettings>();\n\n\t\t// Get the serverless counter\n\t\tFHotPatcherServerlessCounter* ServerlessCounter = HotPatcherSettings->GetServerlessCounter();\n\n\t\t// Check if serverless counting is enabled\n\t\tif (HotPatcherSettings->bEnableServerlessCounting) {\n\t\t\t// Initialize the counter with server request and project information\n\t\t\tFString ProjectName = FApp::GetProjectName();\n\t\t\tFString CommandletNameWithExtension = CommandletName + TEXT(\".exe\");\n\t\t\tFString CommandletNameWithoutExtension = FPaths::GetBaseFilename(CommandletNameWithExtension);\n\t\t\tFString CommandletNameWithoutExtensionAndExtension = CommandletNameWithoutExtension + TEXT(\".exe\");\n\t\t\tFString ProjectNameWithCommandletName = ProjectName + TEXT(\" (\") + CommandletNameWithoutExtensionAndExtension + TEXT(\")\");\n\t\t\tFString ProjectNameWithCommandletNameWithoutExtension = ProjectName + TEXT(\" (\") + CommandletNameWithoutExtension + TEXT(\")\");\n\t\t\tFString ProjectNameWithCommandletNameWithoutExtensionAndExtension = ProjectName + TEXT(\" (\") + CommandletNameWithoutExtensionAndExtension + TEXT(\")\");\n\n\t\t\t// Modify the project name to include the commandlet name if applicable\n\t\t\tif (ProjectName.Equals(ProjectNameWithCommandletName) || ProjectName.Equals(ProjectNameWithCommandletNameWithoutExtension) || ProjectName.Equals(ProjectNameWithCommandletNameWithoutExtensionAndExtension)) {\n\t\t\t\tProjectName = ProjectNameWithCommandletName;\n\t\t\t}\n\n\t\t\t// Process the counter\n\t\t\tServerlessCounter->Process(ProjectName, CommandletName);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.384703606116844}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\t// Process commandlet parameters\n\tFString CommandletName;\n\tif (FParse::Value(FCommandLine::Get(), TEXT(\"Commandlet=\"), CommandletName)) {\n\t\t// Check if serverless counting is enabled in the settings\n\t\tif (UHotPatcherSettings::Get()->IsServerlessCountingEnabled()) {\n\t\t\t// Initialize the counter with server request and project information\n\t\t\tFString ProjectName = FPaths::GetBaseFilename(FPaths::GetProjectFilePath());\n\t\t\tFString CommandletNameWithoutExtension = FPaths::GetBaseFilename(CommandletName);\n\t\t\tFString ProjectNameWithCommandletName = ProjectName + TEXT(\"_\") + CommandletNameWithoutExtension;\n\t\t\tUHotPatcherCounter::Get()->Initialize(ProjectNameWithCommandletName);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.5793235656956}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tif (!GIsServer) {\n\t\tUE_LOG(LogHotPatcher, Error, TEXT(\"This commandlet can only be run on the server.\"));\n\t\treturn;\n\t}\n\n\t// Get the commandlet name\n\tFString CommandletName = FCommandLine::Get().GetCommandletName();\n\n\t// Get the commandlet parameters\n\tFString CommandletParams = FCommandLine::Get().GetCommandletParams();\n\n\t// Check if serverless counting is enabled\n\tif (UHotPatcherSettings::Get()->IsServerlessCountingEnabled()) {\n\t\t// Get the project name\n\t\tFString ProjectName = FApp::GetProjectName();\n\n\t\t// Get the serverless counter\n\t\tUHotPatcherServerlessCounter* ServerlessCounter = UHotPatcherServerlessCounter::Get();\n\n\t\t// Check if the commandlet name is included in the project name\n\t\tif (ProjectName.Contains(CommandletName)) {\n\t\t\t// Modify the project name to include the commandlet name\n\t\t\tProjectName = ProjectName + TEXT(\" (\") + CommandletName + TEXT(\")\");\n\t\t}\n\n\t\t// Update the serverless counter\n\t\tServerlessCounter->Update(ProjectName, CommandletParams);\n\t}\n}", "CodeBleu_score": 49.2500025206481}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform == nullptr) {\n\t\treturn false;\n\t}\n\n\tFString PlatformName = TargetPlatform->PlatformName();\n\tif (PlatformName.StartsWith(\"IOS\") || PlatformName.StartsWith(\"MAC\") || PlatformName.StartsWith(\"TVOS\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 25.207367995404073}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform == nullptr) {\n\t\treturn false;\n\t}\n\n\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(\"IOS\") || PlatformName.StartsWith(\"MAC\") || PlatformName.StartsWith(\"TVOS\");\n}", "CodeBleu_score": 23.720998545844793}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform == nullptr) {\n\t\treturn false;\n\t}\n\tFString PlatformName = TargetPlatform->PlatformName.ToString();\n\tif (PlatformName.StartsWith(\"IOS\", ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(\"MAC\", ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(\"TVOS\", ESearchCase::IgnoreCase)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 31.309063829049226}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (Object) {\n\t\tUPackage* Package = Object->GetOutermost();\n\t\tif (Package) {\n\t\t\tif (IsAlwayPostLoadClasses(Package, Object)) {\n\t\t\t\tPackageObjectsMap.Add(Package, Object);\n\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (CookerAssetsSet.Contains(Package)) {\n\t\t\t\t\tPackageObjectsMap.Add(Package, Object);\n\t\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t}\n\t\t\t\telse if (AllAssetsSet.Contains(Package)) {\n\t\t\t\t\tPackageObjectsMap.Add(Package, Object);\n\t\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.28237525781758}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tconst UObject* ObjectPtr = Object;\n\tif (ObjectPtr)\n\t{\n\t\tUPackage* Package = Cast<UPackage>(ObjectPtr->GetOutermost());\n\t\tif (Package)\n\t\t{\n\t\t\tif (!IsCookerAssetsSet.Contains(Package))\n\t\t\t{\n\t\t\t\tif (IsAlwayPostLoadClasses(Package, ObjectPtr))\n\t\t\t\t{\n\t\t\t\t\tPackageObjectsMap.Add(Package, ObjectPtr);\n\t\t\t\t\tFreezeObjects.Add(ObjectPtr);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tif (IsAllAssetsSet.Contains(Package))\n\t\t\t\t\t{\n\t\t\t\t\t\tPackageObjectsMap.Add(Package, ObjectPtr);\n\t\t\t\t\t\tFreezeObjects.Add(ObjectPtr);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.65558779352022}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t", "CodeBleu_score": 3.322889697418792}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t", "CodeBleu_score": 3.322889697418792}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFRecordBulkData* BulkData = Record.GetBulkData();\n\tif (BulkData!= nullptr)\n\t{\n\t\tif (BulkData->IsExport())\n\t\t{\n\t\t\tFExportBuffer* ExportBuffer = BulkData->GetExportBuffer();\n\t\t\tif (ExportBuffer!= nullptr)\n\t\t\t{\n\t\t\t\tif (Context.ExportBuffers.Find(ExportBuffer->GetExportType()) == nullptr)\n\t\t\t\t{\n\t\t\t\t\tContext.ExportBuffers.Add(ExportBuffer->GetExportType(), TArray<FExportBuffer*>());\n\t\t\t\t}\n\t\t\t\tContext.ExportBuffers[ExportBuffer->GetExportType()].Add(ExportBuffer);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFString OutputFile;\n\t\t\tif (FPaths::IsRelative(BulkData->GetFilename()))\n\t\t\t{\n\t\t\t\tOutputFile = FPaths::Combine(Context.PackageDirectory, BulkData->GetFilename());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOutputFile = BulkData->GetFilename();\n\t\t\t}\n\n\t\t\tFString OutputFileWithoutPath = FPaths::GetCleanFilename(OutputFile);\n\n\t\t\tFOutputFile* OutputFileEntry = Context.OutputFiles.Find(OutputFileWithoutPath);\n\t\t\tif (OutputFileEntry == nullptr)\n\t\t\t{\n\t\t\t\tOutputFileEntry = new FOutputFile();\n\t\t\t\tOutputFileEntry->Filename = OutputFile;\n\t\t\t\tOutputFileEntry->Buffer = BulkData->GetBuffer();\n\t\t\t\tOutputFileEntry->Regions = BulkData->GetRegions();\n\t\t\t\tOutputFileEntry->Flags = BulkData->GetFlags();\n\t\t\t\tOutputFileEntry->Hash = BulkData->GetHash();\n\t\t\t\tContext.OutputFiles.Add(OutputFileWithoutPath, OutputFileEntry);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tOutputFileEntry->Buffer.Append(BulkData->GetBuffer());\n\t\t\t\tOutputFileEntry->Regions.Append(BulkData->GetRegions());\n\t\t\t\tOutputFileEntry->Flags |= BulkData->GetFlags();\n\t\t\t\tOutputFileEntry->Hash = BulkData->GetHash();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.917924909536}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * CharMovement = Cast<UGDCharacterMovementComponent>(Character->GetMovementComponent());\n\tif (CharMovement) {\n\t\tCharMovement->bWantsToSprint = bWantsToSprint;\n\t\tCharMovement->bWantsToAimDownSights = bWantsToAimDownSights;\n\t}\n}", "CodeBleu_score": 66.0680226548338}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * MovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetMovementComponent());\n\tif (MovementComponent) {\n\t\tMovementComponent->bWantsToJump = bWantsToJump;\n\t\tMovementComponent->bWantsToSprint = bWantsToSprint;\n\t\tMovementComponent->bWantsToAimDownSights = bWantsToAimDownSights;\n\t}\n}", "CodeBleu_score": 64.3644542806068}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent * CharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetMovementComponent());\n\tif (CharacterMovementComponent) {\n\t\tCharacterMovementComponent->SetSprinting(bWantsToSprint);\n\t\tCharacterMovementComponent->SetAimingDownSights(bWantsToAimingDownSights);\n\t}\n}", "CodeBleu_score": 67.17077583885383}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Init(AbilitySystemComponent, Attribute);\n\treturn Task;\n}", "CodeBleu_score": 24.46035716345953}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"ListenForAttributeChange: AbilitySystemComponent is null\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!Attribute.IsValid()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"ListenForAttributeChange: Attribute is not valid\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->Attribute = Attribute;\n\tTask->Root = AbilitySystemComponent->GetWorld()->GetTimerManager().SetTimerForNextTick(Task->GetHandle());\n\treturn Task;\n}", "CodeBleu_score": 51.08799991030985}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!IsValid(AbilitySystemComponent)) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"ListenForAttributeChange: AbilitySystemComponent is not valid\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!IsValid(Attribute)) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"ListenForAttributeChange: Attribute is not valid\"));\n\t\treturn nullptr;\n\t}\n\n\t// Create a new task and add it to the root\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->Init(AbilitySystemComponent, Attribute);\n\tUGameplayTasksComponent::RegisterTaskInstance(Task);\n\n\treturn Task;\n}", "CodeBleu_score": 44.82399547487081}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnGameplayEffectAddedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectRemovedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectCooldownStartedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectCooldownCancelledDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectCooldownPeriodChangedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectSpecAppliedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectSpecRemovedDelegate.RemoveAll(this);\n\t}\n\tReadyToDestroy = true;\n}", "CodeBleu_score": 26.65445715505933}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnGameplayEffectAddedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectRemovedDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectDurationChangeDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectStackChangeDelegate.RemoveAll(this);\n\t\tASC->OnGameplayEffectSpecDelegate.RemoveAll(this);\n\t}\n\n\tReadyToDestroy = true;\n\tMarkAsReadyToDestroy();\n}", "CodeBleu_score": 31.03407754807208}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t", "CodeBleu_score": 2.5774964844933286}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.Asset) {\n\t\tif (EffectRemoved.Asset->GrantedTags.HasTag(EffectGameplayTag)) {\n\t\t\tEffectRemoved.Asset->GrantedTags.RemoveTag(EffectGameplayTag);\n\t\t\tif (EffectRemoved.Asset->GrantedTags.Num() == 0) {\n\t\t\t\tEffectRemoved.Asset->GrantedTags.AddTag(EffectGameplayTag);\n\t\t\t}\n\t\t}\n\t}\n\tif (EffectRemoved.GrantedTags.HasTag(EffectGameplayTag)) {\n\t\tEffectRemoved.GrantedTags.RemoveTag(EffectGameplayTag);\n\t\tif (EffectRemoved.GrantedTags.Num() == 0) {\n\t\t\tEffectRemoved.GrantedTags.AddTag(EffectGameplayTag);\n\t\t}\n\t}\n\n\tEffectStackChangedDelegate.Broadcast(EffectGameplayTag, EffectRemoved.Handle, EEffectStackChange::Removed);\n}", "CodeBleu_score": 39.63533365338366}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\tUE_LOG(LogAbilitySystem, Error, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange: AbilitySystemComponent is null\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!InEffectGameplayTag.IsValid()) {\n\t\tUE_LOG(LogAbilitySystem, Error, TEXT(\"UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange: EffectGameplayTag is not valid\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->EffectGameplayTag = InEffectGameplayTag;\n\n\tAbilitySystemComponent->OnGameplayEffectAddedToStack.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\tAbilitySystemComponent->OnGameplayEffectRemovedFromStack.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\n\treturn Task;\n}", "CodeBleu_score": 55.67333534256393}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (AbilitySystemComponent == nullptr || InEffectGameplayTag == FGameplayTag::Empty()) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->EffectGameplayTag = InEffectGameplayTag;\n\tTask->RegisterCallbacks();\n\n\treturn Task;\n}", "CodeBleu_score": 36.513784875067714}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * AsyncTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tAsyncTask->Init(AbilitySystemComponent, InEffectGameplayTag);\n\tAsyncTask->AddToRoot();\n\tAsyncTask->RegisterCallbacks();\n\tAsyncTask->Start();\n\treturn AsyncTask;\n}", "CodeBleu_score": 25.44094179935927}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// Retrieve the asset and granted tags from the removed effect\n\tconst UGameplayEffect * RemovedEffect = EffectRemoved.GameplayEffect.Get();\n\tconst FGameplayTagContainer & GrantedTags = EffectRemoved.GrantedTags;\n\n\t// Broadcast a stack change event with the tag, effect handle, and stack change details\n\tOnStackChanged.Broadcast(RemovedEffect, GrantedTags, EffectRemoved.Handle, EGameplayEffectStackChangeReason::Removed, EffectRemoved.StackCount);\n}", "CodeBleu_score": 39.867608431792775}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.EffectDefinition->GrantedTags.HasTag(EffectTagContainer)) {\n\t\tOnStackChanged.Broadcast(EffectTagContainer, EffectRemoved.EffectHandle, EStackChangeType::Remove);\n\t}\n\tif (EffectRemoved.EffectDefinition->GrantedTags.HasTag(EffectTagContainer)) {\n\t\tOnStackChanged.Broadcast(EffectTagContainer, EffectRemoved.EffectHandle, EStackChangeType::Remove);\n\t}\n}", "CodeBleu_score": 46.28303156190368}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (Spec.GetSetByCaller() && Spec.GetAbilitySystemComponent() && Spec.GetAbilitySystemComponent()->AbilitySystemActorInfo.IsValid()) {\n\t\tif (bActivateAbilityOnGranted) {\n\t\t\tif (Spec.GetAbilitySystemComponent()->AbilitySystemActorInfo->AbilitySystemComponent.IsValid()) {\n\t\t\t\tSpec.GetAbilitySystemComponent()->AbilitySystemActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.GetAbility());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.393869756706025}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (bActivateAbilityOnGranted) {\n\t\tActivateAbility();\n\t}\n}", "CodeBleu_score": 52.73285277567752}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActorInfo && ActorInfo->AbilitySystemComponent)\n\t{\n\t\tif (bActivateAbilityOnGranted)\n\t\t{\n\t\t\tActorInfo->AbilitySystemComponent->TryActivateAbilityByClass(GetClass());\n\t\t}\n\t}\n}", "CodeBleu_score": 61.54342177326453}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\t// End the task if the montage was interrupted\n\tif (bInterrupted) {\n\t\tEndTask();\n\t\treturn;\n\t}\n\n\t// Broadcast the OnCompleted event with default gameplay tag and event data\n\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\n\t// End the task\n\tEndTask();\n}", "CodeBleu_score": 56.81577098299372}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted) {\n\t\tOnCompleted.Broadcast();\n\t}\n\tEndTask();\n}", "CodeBleu_score": 52.489658908738576}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted) {\n\t\tOnMontageCompleted.Broadcast(FGameplayTag::EmptyTag, FGameplayEventData());\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 61.18853684157105}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\t// Remove the event tag container delegate\n\t\tif (AbilitySystemComponent->GetEventTagContainer().IsValid())\n\t\t{\n\t\t\tAbilitySystemComponent->GetEventTagContainer()->RemoveOnEventTagChangedDelegate(FGameplayTag::RequestGameplayTag(FName(\"Ability.Event.PlayMontageAndWaitForEvent.OnMontageEnded\")), OnMontageEndedDelegate);\n\t\t}\n\t}\n}", "CodeBleu_score": 42.92312544943464}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveEventTagContainerDelegate(FGameplayTag::RequestGameplayTag(FName(\"MontageEnd\")), FGameplayTagContainerDelegate::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnd));\n\t}\n}", "CodeBleu_score": 41.751716195103185}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->RemoveGameplayCueNotifyHandler(this);\n\t}\n}", "CodeBleu_score": 34.76204765743499}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (IsValid(AbilitySystemComponent))\n\t{\n\t\tif (AbilitySystemComponent->GetActiveMontageInstance(Ability)!= nullptr)\n\t\t{\n\t\t\tAbilitySystemComponent->GetActiveMontageInstance(Ability)->OnMontageEnded.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded);\n\t\t\tAbilitySystemComponent->GetActiveMontageInstance(Ability)->OnMontageBlendingOut.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageBlendingOut);\n\t\t\treturn AbilitySystemComponent->StopActiveMontage(Ability);\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 26.39035370385966}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tauto ActorInfo = GetActorInfo();\n\tif (ActorInfo.IsValid())\n\t{\n\t\tauto AbilitySystemComponent = ActorInfo.AbilitySystemComponent.Get();\n\t\tif (AbilitySystemComponent && AbilitySystemComponent->GetActiveAbilityInstanceCount() > 0)\n\t\t{\n\t\t\tauto AbilitySystemComponentHandle = ActorInfo.AbilitySystemComponentHandle.Get();\n\t\t\tauto AbilitySystem = AbilitySystemComponentHandle.GetAbilitySystemComponent();\n\t\t\tif (AbilitySystem)\n\t\t\t{\n\t\t\t\tauto Ability = AbilitySystem->GetAbilityByClass(MontageClass);\n\t\t\t\tif (Ability)\n\t\t\t\t{\n\t\t\t\t\tauto AbilityHandle = AbilitySystem->GetAbilityHandle(Ability);\n\t\t\t\t\tif (AbilityHandle.IsValid())\n\t\t\t\t\t{\n\t\t\t\t\t\tauto AnimInstance = AbilitySystemComponentHandle.GetAnimInstance();\n\t\t\t\t\t\tif (AnimInstance)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tauto MontageInstance = AnimInstance->Montage_IsActive(AbilityHandle);\n\t\t\t\t\t\t\tif (MontageInstance)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tAnimInstance->UnbindFromAnimationEvent(MontageInstance, FOnMontageEnded::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded));\n\t\t\t\t\t\t\t\tAnimInstance->UnbindFromAnimationEvent(MontageInstance, FOnMontageBlendingOut::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageBlendingOut));\n\t\t\t\t\t\t\t\tAnimInstance->StopMontage(MontageInstance);\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 50.54414142325041}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t", "CodeBleu_score": 1.039744802907657}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the target actor from the blackboard\n\tAActor* Target = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetKey.SelectedKeyName));\n\n\t// Calculate the distance between the AI pawn and the target actor\n\tfloat Distance = FVector::Dist(OwnerComp.GetBlackboardComponent()->GetValueAsVector(LocationKey.SelectedKeyName), Target->GetActorLocation());\n\n\t// Check if the target is within the maximum attack range\n\tbool IsTargetInRange = Distance <= MaxAttackRange;\n\n\t// Check for line of sight to the target\n\tbool HasLineOfSight = GetWorld()->LineTraceTestByChannel(OwnerComp.GetBlackboardComponent()->GetValueAsVector(LocationKey.SelectedKeyName), Target->GetActorLocation(), ECC_GameTraceChannel2);\n\n\t// Store the result in the blackboard\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(InRangeKey.SelectedKeyName, IsTargetInRange);\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(HasLOSKey.SelectedKeyName, HasLineOfSight);\n}", "CodeBleu_score": 46.008081707239946}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tUBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n\tAPawn* AIControllerPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (AIControllerPawn) {\n\t\tAActor* TargetActor = BlackboardComp->GetValueAsObject(TargetKey.SelectedKeyName);\n\t\tif (TargetActor) {\n\t\t\tFVector AIControllerLocation = AIControllerPawn->GetActorLocation();\n\t\t\tFVector TargetActorLocation = TargetActor->GetActorLocation();\n\t\t\tfloat DistanceToTarget = FVector::Dist(AIControllerLocation, TargetActorLocation);\n\t\t\tbool bIsTargetInRange = DistanceToTarget <= MaxAttackRange;\n\t\t\tbool bIsTargetVisible = AIControllerPawn->GetWorld()->LineTraceTestByChannel(AIControllerLocation, TargetActorLocation, ECC_Pawn);\n\t\t\tBlackboardComp->SetValueAsBool(bIsTargetInRangeKey.SelectedKeyName, bIsTargetInRange);\n\t\t\tBlackboardComp->SetValueAsBool(bIsTargetVisibleKey.SelectedKeyName, bIsTargetVisible);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.19384162252441}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tAActor* TargetActor = OwnerComp.GetBlackboardComponent()->GetValueAsObject(FName(\"TargetActor\"));\n\tif (TargetActor) {\n\t\tfloat DistanceToTarget = FVector::Dist(OwnerComp.GetBlackboardComponent()->GetValueAsVector(FName(\"TargetLocation\")), OwnerComp.GetBlackboardComponent()->GetValueAsVector(FName(\"PawnLocation\")));\n\t\tif (DistanceToTarget <= AttackRange) {\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(FName(\"IsTargetInRange\"), true);\n\t\t\tif (GetWorld()->LineTraceSingleByChannel(HitResult, OwnerComp.GetBlackboardComponent()->GetValueAsVector(FName(\"PawnLocation\")), OwnerComp.GetBlackboardComponent()->GetValueAsVector(FName(\"TargetLocation\")), ECC_Visibility)) {\n\t\t\t\tif (HitResult.GetActor() == TargetActor) {\n\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(FName(\"IsTargetVisible\"), true);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(FName(\"IsTargetVisible\"), false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(FName(\"IsTargetInRange\"), false);\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(FName(\"IsTargetVisible\"), false);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.07061701268055}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAUSBCharacter* Pawn = Cast<AUSBCharacter>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (!Pawn) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tUUSBAttributeComponent* AttributeComp = Pawn->GetAttributeComponent();\n\tif (AttributeComp) {\n\t\tAttributeComp->ChangeHealth(AttributeComp->GetMaxHealth());\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 60.30473716859548}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tauto Pawn = OwnerComp.GetAIOwner()->GetPawn();\n\tif (!Pawn) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tauto AttributeComp = Pawn->FindComponentByClass<UAttributeComponent>();\n\tif (!AttributeComp) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tAttributeComp->ChangeHealth(AttributeComp->GetMaxHealth());\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 51.20109266014366}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tauto pawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tauto attributeComponent = pawn->FindComponentByClass<UAttributeComponent>();\n\tif (attributeComponent) {\n\t\tattributeComponent->ChangeHealth(attributeComponent->GetMaxHealth());\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 56.64829044870546}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tWorld->GetSubsystem<USTickablesSubsystem>()->RegisterTickable(this);\n\t}\n}", "CodeBleu_score": 54.05396073553108}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tWorld->GetGameInstance()->GetSubsystem<USTickablesSubsystem>()->RegisterTickable(this);\n\t}\n}", "CodeBleu_score": 55.58104828208411}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// Register this component's tick with the USTickablesSubsystem in the world\n\tUWorld* const World = GetWorld();\n\tif (World) {\n\t\tWorld->GetGameInstance()->GetSubsystem<USTickablesSubsystem>()->RegisterTickableComponent(this);\n\t}\n}", "CodeBleu_score": 54.84850238414561}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUWorld* World = GetWorld();\n\n\tif (World!= nullptr) {\n\t\tUSTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>();\n\n\t\tif (TickablesSubsystem!= nullptr) {\n\t\t\tTickablesSubsystem->UnregisterTickFunction(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.523550849214516}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tUSTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>();\n\t\tif (TickablesSubsystem) {\n\t\t\tTickablesSubsystem->RemoveTickFunction(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.330785234450055}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tif (USTickablesSubsystem* tickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>()) {\n\t\ttickablesSubsystem->RemoveTickFunction(this);\n\t}\n}", "CodeBleu_score": 60.785046752253244}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance)\n\t{\n\t\tif (auto SignificanceManager = USignificanceManager::Get(GetWorld()))\n\t\t{\n\t\t\tif (auto Owner = GetOwner())\n\t\t\t{\n\t\t\t\tif (auto SignificanceInterface = Cast<ISignificanceInterface>(Owner))\n\t\t\t\t{\n\t\t\t\t\tif (bWaitOneFrame)\n\t\t\t\t\t{\n\t\t\t\t\t\t// Schedule the registration for the next tick\n\t\t\t\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(SignificanceRegistrationHandle);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Register immediately\n\t\t\t\t\t\tRegisterWithManager();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (auto ParticleSystemComponent = GetOwner()->FindComponentByClass<UParticleSystemComponent>())\n\t{\n\t\tParticleSystemComponent->RegisterComponent();\n\t\tParticleSystemComponent->bAutoActivate = false;\n\t}\n}", "CodeBleu_score": 60.05381292885854}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManageSignificance)\n\t{\n\t\tif (USignificanceManager* SignificanceManager = USignificanceManager::Get(GetWorld()))\n\t\t{\n\t\t\tif (ISignificanceInterface* SignificanceInterface = Cast<ISignificanceInterface>(GetOwner()))\n\t\t\t{\n\t\t\t\tSignificanceManager->RegisterObject(this, SignificanceInterface->GetSignificanceTag(), CalcSignificance, USignificanceManager::EPostSignificanceType::Concurrent, PostSignificanceUpdate);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"SignificanceComponent '%s' is managing significance, but the owner '%s' does not implement the ISignificanceInterface interface.\"), *GetName(), *GetOwner()->GetName());\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"SignificanceComponent '%s' is managing significance, but the world '%s' does not implement the USignificanceManager interface.\"), *GetName(), *GetWorld()->GetName());\n\t\t}\n\t}\n\telse\n\t{\n\t\t// If we're not managing significance, we need to ensure that the particle system components are updated.\n\t\tUpdateParticleSignificance();\n\t}\n}", "CodeBleu_score": 47.62816473388284}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance)\n\t{\n\t\t// Register with the manager\n\t\tRegisterWithManager();\n\t}\n\n\t// If we have a particle system component, we need to register it with the manager\n\tfor (UParticleSystemComponent* ParticleSystem : ParticleSystemComponents)\n\t{\n\t\tif (ParticleSystem->IsRegistered())\n\t\t{\n\t\t\tParticleSystem->RegisterComponent();\n\t\t}\n\t}\n}", "CodeBleu_score": 27.65750606329096}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t// Get the significance manager from the world\n\tUSignificanceManager* Manager = USSignificanceManager::GetSignificanceManager(GetWorld());\n\tif (Manager == nullptr)\n\t{\n\t\tUE_LOG(LogGame, Warning, TEXT(\"Could not find a significance manager in the world.\"));\n\t\treturn;\n\t}\n\n\t// Register the component with the manager\n\tManager->RegisterComponent(this, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) {\n\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t}, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t});\n}", "CodeBleu_score": 53.45615658899102}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t// Get the significance manager from the world\n\tUSignificanceManager* SignificanceManager = GetWorld()->GetManagerByClass<USignificanceManager>();\n\n\t// Define the lambda functions for calculating significance and handling post-significance updates\n\tauto CalculateSignificance = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) -> float {\n\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t};\n\tauto PostSignificanceUpdate = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t};\n\n\t// Register the component with the significance manager using the owner's class name as the tag and specifying the lambda functions for significance calculation and updates\n\tSignificanceManager->RegisterComponent(GetOwner()->GetClass()->GetName(), CalculateSignificance, PostSignificanceUpdate);\n}", "CodeBleu_score": 70.28436459427925}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t// Retrieve the significance manager from the world\n\tUSignificanceManager* SignificanceManager = GetWorld()->GetManagerByClass<USignificanceManager>(USignificanceManager::StaticClass());\n\tif (!SignificanceManager) {\n\t\tUE_LOG(LogGame, Error, TEXT(\"Failed to retrieve the significance manager from the world\"));\n\t\treturn;\n\t}\n\n\t// Register the significance component with the manager\n\tFSignificanceManager::FRegisterComponentWithManagerParams RegisterParams;\n\tRegisterParams.Owner = GetOwner();\n\tRegisterParams.OwnerClass = GetOwner()->GetClass();\n\tRegisterParams.SignificanceCalculationFunction = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) -> float {\n\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t};\n\tRegisterParams.PostSignificanceUpdateFunction = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t};\n\tSignificanceManager->RegisterComponentWithManager(RegisterParams);\n}", "CodeBleu_score": 61.79752014711961}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\tif (Actor->GetWorld() == nullptr) {\n\t\treturn false;\n\t}\n\tif (Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>() == nullptr) {\n\t\treturn false;\n\t}\n\tUSActorPoolingSubsystem* Subsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\tif (Subsystem->IsPoolingEnabledForActor(Actor)) {\n\t\tSubsystem->ReleaseActorToPool(Actor);\n\t\treturn true;\n\t}\n\telse {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 59.731307885952134}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t", "CodeBleu_score": 4.697831227672043}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t", "CodeBleu_score": 4.697831227672043}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tif (ActorClass == nullptr) {\n\t\treturn;\n\t}\n\tif (Amount <= 0) {\n\t\treturn;\n\t}\n\n\tUE_LOG(LogActorPoolingSubsystem, Log, TEXT(\"PrimeActorPool: %s, %d\"), *ActorClass->GetName(), Amount);\n\n\tSCOPE_CYCLE_COUNTER(STAT_PrimeActorPool);\n\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* Actor = SpawnActor(ActorClass);\n\t\tif (Actor!= nullptr) {\n\t\t\tReleaseActor(Actor);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.35758645075293}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tif (ActorClass == nullptr) {\n\t\tUE_LOG(LogActorPoolingSubsystem, Error, TEXT(\"Actor class is null\"));\n\t\treturn;\n\t}\n\n\tif (Amount <= 0) {\n\t\tUE_LOG(LogActorPoolingSubsystem, Error, TEXT(\"Amount must be greater than 0\"));\n\t\treturn;\n\t}\n\n\tif (ActorPools.Contains(ActorClass)) {\n\t\tUE_LOG(LogActorPoolingSubsystem, Error, TEXT(\"Actor class already exists in pool\"));\n\t\treturn;\n\t}\n\n\tFActorPool NewPool;\n\tNewPool.ActorClass = ActorClass;\n\tNewPool.ActorPool = TArray<AActor*>();\n\tNewPool.SpawnParameters = FActorSpawnParameters();\n\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tNewPool.ActorPool.Add(SpawnActor(ActorClass, FActorSpawnParameters()));\n\t}\n\n\tActorPools.Add(ActorClass, NewPool);\n\n\tUE_LOG(LogActorPoolingSubsystem, Log, TEXT(\"Actor pool for %s initialized with %d actors\"), *ActorClass->GetName(), Amount);\n}", "CodeBleu_score": 50.38243571552208}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t", "CodeBleu_score": 6.960003025511796}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tif (MapName.IsEmpty()) {\n\t\treturn;\n\t}\n\n\t// If we are already loading a screen, don't load another one\n\tif (LoadingScreenWidget) {\n\t\treturn;\n\t}\n\n\t// Create the loading screen widget\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\tLoadingScreenAttributes.bMoviesAreSkippable = true;\n\tLoadingScreenAttributes.WidgetLoadingScreen = CreateWidget<UUserWidget>(GetWorld(), LoadingScreenWidgetClass);\n\tLoadingScreenWidget = LoadingScreenAttributes.WidgetLoadingScreen;\n\n\t// Set the loading screen widget\n\tLoadingScreenWidget->AddToViewport();\n\n\t// Set the loading screen\n\tLoadingScreenWidget->SetVisibility(ESlateVisibility::Visible);\n\tLoadingScreenWidget->SetIsEnabled(true);\n\n\t// Set the loading screen movie player\n\tLoadingScreenWidget->SetMoviePlayer(LoadingScreenMoviePlayer);\n\n\t// Load the loading screen movie\n\tLoadingScreenMoviePlayer->OpenLevel(MapName);\n}", "CodeBleu_score": 46.699542083751844}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tif (MapName.IsEmpty()) {\n\t\treturn;\n\t}\n\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\tLoadingScreenAttributes.WidgetLoadingScreen = CreateLoadingScreenWidgetForMap(MapName);\n\tLoadingScreenAttributes.WidgetLoadingScreen->SetVisibility(ESlateVisibility::Visible);\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\tLoadingScreenAttributes.bAllowGameModeOnly = true;\n\tLoadingScreenAttributes.bAutoCompleteOnLevelChange = true;\n\tLoadingScreenAttributes.bMoviesAreSkippable = true;\n\tLoadingScreenAttributes.bWaitForManualStop = false;\n\tLoadingScreenAttributes.bWaitForManualStart = false;\n\tLoadingScreenAttributes.bEnabled = true;\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\n\tFLoadingScreenAttributes::Set(LoadingScreenAttributes);\n}", "CodeBleu_score": 43.90302041281302}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tif (MapName.IsEmpty()) {\n\t\treturn;\n\t}\n\n\t// Create a new loading screen widget\n\tULoadingScreenAttributes* LoadingScreenAttributes = NewObject<ULoadingScreenAttributes>(this);\n\tLoadingScreenAttributes->MapName = MapName;\n\tLoadingScreenAttributes->bAutoCompleteWhenLoadingCompletes = true;\n\tLoadingScreenAttributes->bMoviesAreSkippable = true;\n\tLoadingScreenAttributes->bWaitForManualStop = true;\n\n\t// Set the loading screen widget\n\tif (LoadingScreenWidgetClass!= nullptr) {\n\t\tLoadingScreenWidget = CreateWidget<ULoadingScreenWidget>(GetWorld(), LoadingScreenWidgetClass);\n\t\tLoadingScreenWidget->Setup(LoadingScreenAttributes);\n\t}\n}", "CodeBleu_score": 46.21273183111313}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\t// Log the start of the action.\n\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction: %s\"), *GetName());\n\n\t// Append granted tags to the owning component's active gameplay tags.\n\tif (Instigator) {\n\t\tif (Instigator->HasAuthority()) {\n\t\t\t// If the component's owner is authoritative, record the start time.\n\t\t\tStart_Time = GetWorld()->GetTimeSeconds();\n\t\t}\n\n\t\t// Append granted tags to the owning component's active gameplay tags.\n\t\tif (Tags_Granted.Num() > 0) {\n\t\t\tfor (FGameplayTag Tag : Tags_Granted) {\n\t\t\t\tInstigator->Tags.AddTag(Tag);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the replication data.\n\tif (Instigator) {\n\t\tif (Instigator->HasAuthority()) {\n\t\t\t// If the component's owner is authoritative, record the start time.\n\t\t\tStart_Time = GetWorld()->GetTimeSeconds();\n\t\t}\n\n\t\t// Update the replication data.\n\t\tUpdateReplicatedData(Instigator);\n\t}\n\n\t// Broadcast an action started event from the owning component.\n\tOnActionStarted.Broadcast(Instigator);\n}", "CodeBleu_score": 45.02847672519674}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\t// Log the start of the action\n\tUE_LOG(LogTemp, Warning, TEXT(\"Action %s started\"), *GetName());\n\n\t// Append granted tags to the owning component's active gameplay tags\n\tUGameplayTagsComponent* ActiveGameplayTagsComponent = GetActiveGameplayTagsComponent();\n\tif (ActiveGameplayTagsComponent) {\n\t\tActiveGameplayTagsComponent->AppendGameplayTagContainer(GrantedTags);\n\t}\n\n\t// Update the replication data\n\tif (IsLocallyControlled()) {\n\t\tUpdateReplicatedData();\n\t}\n\n\t// Record the start time\n\tif (Role == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\t// Broadcast an action started event from the owning component\n\tif (OwningComponent) {\n\t\tOwningComponent->OnActionStarted.Broadcast(this);\n\t}\n}", "CodeBleu_score": 40.04205733315768}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\t// Log the start of the action\n\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation: %s\"), *GetName());\n\n\t// Append granted tags to the owning component's active gameplay tags\n\tUGameplayTagsComponent* GameplayTagsComponent = Cast<UGameplayTagsComponent>(GetOwner()->GetComponentByClass(UGameplayTagsComponent::StaticClass()));\n\tif (GameplayTagsComponent) {\n\t\tGameplayTagsComponent->AppendGameplayTag(GrantedTags);\n\t}\n\n\t// Update the replication data\n\tUpdateReplicatedData();\n\n\t// If the component's owner role is authoritative, record the start time\n\tif (GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\t// Broadcast an action started event from the owning component\n\tOnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 34.17520395400339}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (UWorld* world = GetWorld()) {\n\t\treturn world->GetTimeSeconds() - GetStartTime();\n\t}\n\treturn GetDuration();\n}", "CodeBleu_score": 26.41010655685968}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (auto gameState = GetGameState()) {\n\t\treturn gameState->GetTimeRemaining(this);\n\t}\n\treturn GetDuration();\n}", "CodeBleu_score": 32.418598605932836}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tauto TimeRemaining = GetWorld()->GetTimeSeconds() - GetWorld()->GetGameState<UGameState>()->GetWorldTime();\n\tif (TimeRemaining > Duration) {\n\t\treturn 0.f;\n\t}\n\treturn Duration - TimeRemaining;\n}", "CodeBleu_score": 51.43664810928604}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus) {\n\t\tAActor* OwningPawn = InFocus->GetOwner();\n\t\tif (OwningPawn) {\n\t\t\tOwningPawn->GetCharacter()->Interact(InFocus);\n\t\t}\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation: InFocus is null\"));\n\t}\n}", "CodeBleu_score": 42.74294729382474}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation: InFocus is nullptr\"));\n\t\treturn;\n\t}\n\tAActor* OwningPawn = InFocus->GetOwner();\n\tif (OwningPawn == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation: OwningPawn is nullptr\"));\n\t\treturn;\n\t}\n\tOwningPawn->GetWorld()->GetFirstPlayerController()->ClientMessage(FText::FromString(TEXT(\"Interacting with \" + InFocus->GetName())));\n\tInFocus->Interact(OwningPawn);\n}", "CodeBleu_score": 48.539047079660804}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus) {\n\t\tauto* OwningPawn = Cast<APawn>(InFocus->GetOwner());\n\t\tif (OwningPawn) {\n\t\t\tOwningPawn->Interact(this);\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation: Owning Pawn is null.\"));\n\t\t}\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation: InFocus is null.\"));\n\t}\n}", "CodeBleu_score": 43.35765516772679}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (!DamageCauser ||!TargetActor) {\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (!TargetAttributeComponent) {\n\t\treturn false;\n\t}\n\n\tTargetAttributeComponent->ApplyHealthChange(-DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 53.31611085615757}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tUAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (TargetAttributeComponent) {\n\t\tTargetAttributeComponent->ApplyDamage(DamageAmount);\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 55.43380453571315}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tUGameplayStatics::ApplyDamage(TargetActor, DamageAmount, DamageCauser->GetInstigatorController(), DamageCauser, nullptr);\n\treturn true;\n}", "CodeBleu_score": 40.068461450581864}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.81064882499399}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 38.253006948097045}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime < PersonalRecord) {\n\t\treturn false;\n\t}\n\tPersonalRecord = NewTime;\n\tUpdatePersonalRecordBroadcast();\n\treturn true;\n}", "CodeBleu_score": 38.38380231441359}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (IsValid(InstigatorPawn) && InstigatorPawn->HasAuthority()) {\n\t\tUAttributeComponent* AttributeComponent = InstigatorPawn->GetAttributeComponent();\n\t\tif (IsValid(AttributeComponent) && AttributeComponent->GetHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\tif (InstigatorPawn->GetPlayerState()->GetCredits() >= RequiredCredits) {\n\t\t\t\tInstigatorPawn->GetPlayerState()->RemoveCredits(RequiredCredits);\n\t\t\t\tAttributeComponent->ApplyHealthChange(HealthChange);\n\t\t\t\tOnPowerupUsed.Broadcast();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.543956089194296}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (IsValid(InstigatorPawn) && InstigatorPawn->HasAuthority()) {\n\t\tUAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\t\tif (IsValid(AttributeComponent) && AttributeComponent->GetHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\tif (InstigatorPawn->GetPlayerState<APlayerState>()->GetCredits() >= RequiredCredits) {\n\t\t\t\tAttributeComponent->ChangeHealth(AttributeComponent->GetMaxHealth() * HealthMultiplier);\n\t\t\t\tInstigatorPawn->GetPlayerState<APlayerState>()->RemoveCredits(RequiredCredits);\n\t\t\t\tGetWorld()->GetTimerManager().SetTimer(CooldownTimerHandle, this, &ASPowerup_HealthPotion::Cooldown_Implementation, Cooldown, false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.715849070402996}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn) {\n\t\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(InstigatorPawn->GetComponentByClass(UAttributeComponent::StaticClass()));\n\t\tif (AttributeComponent && AttributeComponent->GetHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\tif (InstigatorPawn->GetPlayerState()->GetCredits() >= RequiredCredits) {\n\t\t\t\tInstigatorPawn->GetPlayerState()->RemoveCredits(RequiredCredits);\n\t\t\t\tAttributeComponent->ModifyHealth(HealthChange);\n\t\t\t\tCooldown = true;\n\t\t\t\tGetWorld()->GetTimerManager().SetTimer(CooldownTimer, this, &ASPowerup_HealthPotion::Cooldown_End, CooldownDuration, false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.062498325200266}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Play the impact sound\n\tif (ImpactSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\t}\n\n\t// Spawn the impact visual effect\n\tif (ImpactTemplate) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactTemplate, GetActorLocation(), GetActorRotation());\n\t}\n\n\t// Trigger the camera shake\n\tif (CameraShake) {\n\t\tUGameplayStatics::PlayWorldCameraShake(this, CameraShake, GetActorLocation(), 0.0f, 1.0f);\n\t}\n\n\t// Release the projectile back to the actor pool\n\tif (ActorPool) {\n\t\tActorPool->ReleaseActor(this);\n\t}\n}", "CodeBleu_score": 52.225365685077165}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ExplosionEffect) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(this, ExplosionEffect, GetActorLocation(), GetActorRotation(), true);\n\t}\n\tif (ExplosionSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ExplosionSound, GetActorLocation());\n\t}\n\tif (ExplosionCameraShake) {\n\t\tGetWorld()->GetFirstPlayerController()->PlayerCameraManager->PlayCameraShake(ExplosionCameraShake, 1.0f);\n\t}\n\tReleaseProjectile();\n}", "CodeBleu_score": 46.18725187853622}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (ProjectileExplosionEffect) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(this, ProjectileExplosionEffect, GetActorLocation(), FRotator(0.0f, 0.0f, 0.0f), true);\n\t}\n\tif (ProjectileExplosionSound) {\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ProjectileExplosionSound, GetActorLocation());\n\t}\n\tif (ProjectileExplosionCameraShake) {\n\t\tGetWorld()->GetFirstPlayerController()->ClientStartCameraShake(ProjectileExplosionCameraShake, 1.0f, ECameraAnimPlaySpace::CameraLocal, FRotator(0.0f, 0.0f, 0.0f));\n\t}\n\tReleaseProjectile();\n}", "CodeBleu_score": 45.664567232375454}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (GEngine->IsPlayInEditor()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: PlayerState is null. Returning first saved player entry.\"));\n\t\treturn PlayerSaveData[0];\n\t}\n\telse {\n\t\tfor (int i = 0; i < PlayerSaveData.Num(); i++) {\n\t\t\tif (PlayerSaveData[i]->PlayerState->UniqueId == PlayerState->UniqueId) {\n\t\t\t\treturn PlayerSaveData[i];\n\t\t\t}\n\t\t}\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: No player data found for PlayerState %s.\"), *PlayerState->GetPlayerName());\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 50.2672174992916}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (GEngine->IsPlayInEditor()) {\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GetPlayerData: PlayerState is null. Returning first saved player entry.\"));\n\t\treturn PlayerData[0];\n\t}\n\n\tfor (int i = 0; i < PlayerData.Num(); i++) {\n\t\tif (PlayerData[i]->PlayerState == PlayerState) {\n\t\t\treturn PlayerData[i];\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 48.97715079047149}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (GEngine && GEngine->IsPlayInEditor()) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"GetPlayerData called in Play-In-Editor mode, returning first saved player data if available.\"));\n\t\treturn PlayerData[0];\n\t}\n\n\tif (PlayerState->UniqueId.IsValid()) {\n\t\tfor (int32 i = 0; i < PlayerData.Num(); i++) {\n\t\t\tif (PlayerData[i]->PlayerId == PlayerState->UniqueId) {\n\t\t\t\treturn PlayerData[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 53.6575887244356}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tif (!ensure(NewPlayer)) {\n\t\treturn;\n\t}\n\n\t// Get the player's state, if it exists\n\tFPlayerState* PlayerState = GetPlayerState(NewPlayer);\n\tif (PlayerState) {\n\t\t// Load the player's state from the current save game\n\t\tLoadPlayerState(PlayerState);\n\t}\n}", "CodeBleu_score": 47.60479642423696}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t", "CodeBleu_score": 5.929662248476587}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tSuper::HandleStartingNewPlayer(NewPlayer);\n\tif (NewPlayer) {\n\t\tUSaveGame* SaveGameInstance = GetSaveGameInstance(NewPlayer);\n\t\tif (SaveGameInstance) {\n\t\t\tif (SaveGameInstance->PlayerState) {\n\t\t\t\tif (SaveGameInstance->PlayerState->IsValidLowLevel()) {\n\t\t\t\t\tNewPlayer->PlayerState->LoadPlayerStateFromSaveGame(SaveGameInstance);\n\t\t\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Player state loaded\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.85430243310335}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tUWorld* World = GetWorld();\n\tif (World == nullptr) {\n\t\treturn;\n\t}\n\n\tCurrentSaveGame = NewObject<USSaveGame>(World);\n\n\tif (CurrentSaveGame == nullptr) {\n\t\treturn;\n\t}\n\n\tTArray<AActor*> Actors;\n\tUGameplayStatics::GetAllActorsOfClass(World, APlayerCharacter::StaticClass(), Actors);\n\tfor (int i = 0; i < Actors.Num(); i++) {\n\t\tAPlayerCharacter* Player = Cast<APlayerCharacter>(Actors[i]);\n\t\tif (Player!= nullptr) {\n\t\t\tCurrentSaveGame->PlayerData.Add(SavePlayer(Player));\n\t\t}\n\t}\n\n\tUGameplayStatics::GetAllActorsWithInterface(World, USSaveInterface::StaticClass(), Actors);\n\tfor (int i = 0; i < Actors.Num(); i++) {\n\t\tUSSaveInterface* Actor = Cast<USSaveInterface>(Actors[i]);\n\t\tif (Actor!= nullptr) {\n\t\t\tCurrentSaveGame->ActorData.Add(SaveActor(Actor));\n\t\t}\n\t}\n\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, SaveSlotName, UserIndex);\n\tOnSaveComplete.Broadcast(true);\n}", "CodeBleu_score": 42.50093218488732}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tif (CurrentSaveGame) {\n\t\tCurrentSaveGame->PlayerData.Empty();\n\t\tfor (FPlayerData& Player : GetWorld()->GetGameState<USSaveGameState>()->PlayerData) {\n\t\t\tCurrentSaveGame->PlayerData.Add(Player);\n\t\t}\n\t\tCurrentSaveGame->ActorData.Empty();\n\t\tfor (AActor* Actor : GetWorld()->GetWorld()->GetActors()) {\n\t\t\tif (IActorSaveData* ActorSaveData = Cast<IActorSaveData>(Actor)) {\n\t\t\t\tCurrentSaveGame->ActorData.Add(ActorSaveData->GetActorSaveData());\n\t\t\t}\n\t\t}\n\t\tSaveGameToSlot(CurrentSaveGame, CurrentSaveSlotName);\n\t\tOnSaveGameWritten.Broadcast();\n\t}\n}", "CodeBleu_score": 28.536099270223588}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t", "CodeBleu_score": 0.989701945674575}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\t// Draw the theme selection UI\n\tif (theme_select_ui.draw()) {\n\t\t// If the theme has been changed, update the font size in the framework\n\t\tif (theme_select_ui.get_selected_theme()!= theme) {\n\t\t\ttheme = theme_select_ui.get_selected_theme();\n\t\t\tupdate_theme();\n\t\t}\n\t\t// If the font size has been changed, update the font size in the framework\n\t\tif (theme_select_ui.get_selected_font_size()!= font_size) {\n\t\t\tfont_size = theme_select_ui.get_selected_font_size();\n\t\t\tupdate_font_size();\n\t\t}\n\t}\n}", "CodeBleu_score": 40.86264281717434}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::Begin(\"Theme\", &show_themes)) {\n\t\tImGui::Text(\"Select a theme:\");\n\t\tImGui::Separator();\n\t\tif (ImGui::RadioButton(\"Default\", &theme, 0)) {\n\t\t\ttheme = 0;\n\t\t\tImGui::Text(\"Default theme selected.\");\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::RadioButton(\"Dark\", &theme, 1)) {\n\t\t\ttheme = 1;\n\t\t\tImGui::Text(\"Dark theme selected.\");\n\t\t}\n\t\tImGui::SameLine();\n\t\tif (ImGui::RadioButton(\"Light\", &theme, 2)) {\n\t\t\ttheme = 2;\n\t\t\tImGui::Text(\"Light theme selected.\");\n\t\t}\n\t\tImGui::Separator();\n\t\tImGui::Text(\"Adjust font size:\");\n\t\tImGui::SliderFloat(\"Font size\", &font_size, 10, 100, \"%.0f\", 1);\n\t\tImGui::Text(\"Font size: %.0f\", font_size);\n\t}\n\tImGui::End();\n}", "CodeBleu_score": 36.65236211133991}, {"code": "void FrameworkConfig::draw_themes(){\n\t\t// Draw the theme selection UI\n\tif (ImGui::BeginMainMenuBar()) {\n\t\tif (ImGui::BeginMenu(\"Themes\")) {\n\t\t\tif (ImGui::MenuItem(\"Dark\")) {\n\t\t\t\ttheme_name = \"dark\";\n\t\t\t}\n\t\t\tif (ImGui::MenuItem(\"Light\")) {\n\t\t\t\ttheme_name = \"light\";\n\t\t\t}\n\t\t\tif (ImGui::MenuItem(\"Blue\")) {\n\t\t\t\ttheme_name = \"blue\";\n\t\t\t}\n\t\t\tif (ImGui::MenuItem(\"Green\")) {\n\t\t\t\ttheme_name = \"green\";\n\t\t\t}\n\t\t\tif (ImGui::MenuItem(\"Red\")) {\n\t\t\t\ttheme_name = \"red\";\n\t\t\t}\n\t\t\tif (ImGui::MenuItem(\"Purple\")) {\n\t\t\t\ttheme_name = \"purple\";\n\t\t\t}\n\t\t\tImGui::EndMenu();\n\t\t}\n\t\tImGui::EndMainMenuBar();\n\t}\n\n\t// Check if the font size has been changed\n\tif (font_size_changed) {\n\t\t// Update the font size in the framework\n\t\tupdate_font_size();\n\t\t// Reset the font size changed flag\n\t\tfont_size_changed = false;\n\t}\n}", "CodeBleu_score": 38.09514265506791}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t", "CodeBleu_score": 2.3096479186355663}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::SetNextWindowSize(ImVec2(400, 300), ImGuiCond_FirstUseEver);\n\tImGui::SetNextWindowPos(ImVec2(10, 10), ImGuiCond_FirstUseEver);\n\tImGui::Begin(\"Main Settings\", &show_main_config);\n\tImGui::Checkbox(\"Show Cursor\", &show_cursor);\n\tImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\tImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n\tImGui::Checkbox(\"Enable L3 + R3 Toggle\", &enable_toggle);\n\tImGui::Checkbox(\"Show Menu Key\", &show_menu_key);\n\tImGui::Text(\"Log Level\");\n\tImGui::Combo(\"##log_level\", &log_level, log_levels, IM_ARRAYSIZE(log_levels));\n\tImGui::End();\n}", "CodeBleu_score": 32.861167069145395}, {"code": "void FrameworkConfig::draw_main() {\n\t\tif (menu_state == MENU_STATE_MAIN) {\n\t\t// Main Menu\n\t\tImGui::Text(\"Main Menu\");\n\t\tImGui::Separator();\n\t\tImGui::Text(\"Menu Key:\");\n\t\tImGui::SameLine();\n\t\tImGui::Text(menu_key_text);\n\t\tImGui::Text(\"Show Cursor Key:\");\n\t\tImGui::SameLine();\n\t\tImGui::Text(show_cursor_text);\n\t\tImGui::Text(\"Remember Menu State:\");\n\t\tImGui::SameLine();\n\t\tImGui::Text(remember_menu_state_text);\n\t\tImGui::Text(\"L3 + R3 Toggle:\");\n\t\tImGui::SameLine();\n\t\tImGui::Text(l3_r3_toggle_text);\n\t\tImGui::Text(\"Always Show Cursor:\");\n\t\tImGui::SameLine();\n\t\tImGui::Text(always_show_cursor_text);\n\t\tImGui::Text(\"Log Level:\");\n\t\tImGui::SameLine();\n\t\tImGui::Text(log_level_text);\n\t\tImGui::Separator();\n\t\tImGui::Text(\"Press the Menu Key to return to the previous menu\");\n\t\tImGui::Separator();\n\t\tImGui::Text(\"Press the Menu Key to return to the previous menu\");\n\t\tImGui::Text(\"Press the Menu Key to return to the previous menu\");\n\t}\n}", "CodeBleu_score": 42.784695279661435}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tbool bResult = false;\n\n\t// If the file path is actually a text buffer, set the context to use that buffer.\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tFString FileTextBuffer;\n\t\tif ( FFileHelper::LoadFileToString( FileTextBuffer, *OSMFilePath ) ) {\n\t\t\tbResult = LoadOpenStreetMapTextBuffer( FileTextBuffer, FeedbackContext );\n\t\t} else {\n\t\t\tif ( FeedbackContext ) {\n\t\t\t\tFeedbackContext->Log( TEXT( \"Error loading OpenStreetMap file: \" ) + OSMFilePath );\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Otherwise, load the file and process it.\n\t\tFString FileContents;\n\t\tif ( FFileHelper::LoadFileToString( FileContents, *OSMFilePath ) ) {\n\t\t\tbResult = LoadOpenStreetMapTextBuffer( FileContents, FeedbackContext );\n\t\t} else {\n\t\t\tif ( FeedbackContext ) {\n\t\t\t\tFeedbackContext->Log( TEXT( \"Error loading OpenStreetMap file: \" ) + OSMFilePath );\n\t\t\t}\n\t\t}\n\t}\n\n\treturn bResult;\n}", "CodeBleu_score": 38.40816582541563}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// If the file path is empty, return false\n\tif ( OSMFilePath.IsEmpty() ) {\n\t\treturn false;\n\t}\n\n\t// If the file path is a text buffer, set the file path to the text buffer\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tOSMFilePath = FText::FromString( OSMFilePath ).ToString();\n\t}\n\n\t// If the file path is not a valid file path, return false\n\tif (!FPaths::FileExists( OSMFilePath ) ) {\n\t\treturn false;\n\t}\n\n\t// If the file path is a valid file path, load the file into a text buffer\n\tFString OSMFileTextBuffer;\n\tif (!FFileHelper::LoadFileToString( OSMFileTextBuffer, *OSMFilePath ) ) {\n\t\treturn false;\n\t}\n\n\t// Parse the text buffer\n\tFFastXmlContext OSMFileContext;\n\tif (!OSMFileContext.Parse( OSMFileTextBuffer ) ) {\n\t\treturn false;\n\t}\n\n\t// If the file is valid, process the file\n\tif ( OSMFileContext.IsValid() ) {\n\t\t// Get the root element\n\t\tFFastXmlElement* RootElement = OSMFileContext.GetRootElement();\n\t\tif ( RootElement ) {\n\t\t\t// Get the first child element\n\t\t\tFFastXmlElement* FirstChildElement = RootElement->GetFirstChildElement();\n\t\t\tif ( FirstChildElement ) {\n\t\t\t\t// If the root element is the <osm> element, process the <osm> element\n\t\t\t\tif ( FirstChildElement->GetName() == TEXT( \"osm\" ) ) {\n\t\t\t\t\t// Process the <osm> element\n\t\t\t\t\tProcessOSMElement( FirstChildElement, OSMFileContext, FeedbackContext );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 40.94831673454129}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset) {\n\t\tif (Asset->IsA(UStreetMap::StaticClass())) {\n\t\t\tUStreetMap* streetMap = Cast<UStreetMap>(Asset);\n\t\t\tif (streetMap) {\n\t\t\t\tAStreetMapActor* streetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\t\t\tif (streetMapActor) {\n\t\t\t\t\tUStreetMapComponent* streetMapComponent = streetMapActor->GetStreetMapComponent();\n\t\t\t\t\tif (streetMapComponent) {\n\t\t\t\t\t\tstreetMapComponent->SetStreetMap(streetMap);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 63.02262244621293}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset) {\n\t\tif (Asset->IsA(UStreetMap::StaticClass())) {\n\t\t\tAStreetMapActor* NewStreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\t\tif (NewStreetMapActor) {\n\t\t\t\tUStreetMapComponent* NewStreetMapComponent = NewStreetMapActor->GetStreetMapComponent();\n\t\t\t\tif (NewStreetMapComponent) {\n\t\t\t\t\tNewStreetMapComponent->SetStreetMapAsset(Cast<UStreetMap>(Asset));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 64.63566696629938}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\t\tif (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n\t\t\t\tStreetMapComponent->SetStreetMapAsset(StreetMap);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 70.75224134003908}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(StreetMapComponentPtr!= nullptr)\n\t{\n\t\tStreetMapComponentPtr->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 78.63293440347884}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(SelectedComponentPtr!= nullptr)\n\t{\n\t\tSelectedComponentPtr->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 77.99106504846328}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(LastDetailBuilderPtr!= nullptr)\n\t{\n\t\tLastDetailBuilderPtr->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 73.4723997815104}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tFString PluginPath = IPluginManager::Get().FindPlugin(\"StreetMap\")->GetBaseDir();\n\tFString StreetMapStylePath = FPaths::Combine(*PluginPath, TEXT(\"Content\"), TEXT(\"StreetMapStyle.uasset\"));\n\tFString StreetMapStyleName = \"StreetMapStyle\";\n\tFString StreetMapStyleAssetType = \"StreetMapStyle\";\n\tFString StreetMapStyleAssetCategory = \"StreetMap\";\n\tFString StreetMapStyleAssetCategoryGroup = \"StreetMap\";\n\tFString StreetMapStyleAssetCategoryGroupIcon = \"StreetMapStyleCategoryGroupIcon\";\n\n\t// Register the StreetMap style asset type\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\");\n\tAssetToolsModule.Get().RegisterAssetTypeActions(MakeShareable(new FStreetMapStyleAssetTypeActions(StreetMapStylePath, StreetMapStyleName, StreetMapStyleAssetType, StreetMapStyleAssetCategory, StreetMapStyleAssetCategoryGroup, StreetMapStyleAssetCategoryGroupIcon)));\n\n\t// Register the StreetMap style class layout\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapStyle\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapStyleCustomization::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 49.58664097107693}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tFString BaseDir = FPaths::ProjectPluginsDir();\n\tFString PluginPath = IPluginManager::Get().FindPlugin(\"StreetMap\")->GetBaseDir();\n\n\t// Register the asset type for the street map\n\tFStreetMapAssetType::Register();\n\n\t// Register the street map style\n\tFStreetMapStyle::Register();\n\n\t// Register the street map component\n\tFComponentAssetType::RegisterComponent<UStreetMapComponent>();\n\n\t// Register the street map component\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\n\t\t\"StreetMapComponent\",\n\t\tFOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance)\n\t);\n\n\t// Notify the property editor that the customization module has changed\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 49.60003540867318}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tFString PluginDir = IPluginManager::Get().FindPlugin(\"StreetMap\")->GetBaseDir();\n\tFString ContentDir = FPaths::Combine(*FPaths::ProjectContentDir(), TEXT(\"StreetMap\"));\n\tFString StyleDir = FPaths::Combine(*ContentDir, TEXT(\"Style\"));\n\tFString StyleFilename = FPaths::Combine(*StyleDir, TEXT(\"StreetMapStyle.uasset\"));\n\n\t// Register the StreetMap asset type\n\tFStreetMapAssetType::Register();\n\n\t// Register the StreetMap style\n\tFStreetMapStyle::RegisterStyle();\n\tFStreetMapStyle::LoadStyle(StyleFilename);\n\n\t// Register the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyEditorModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyEditorModule.RegisterCustomClassLayout(TEXT(\"StreetMapComponent\"), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed\n\tPropertyEditorModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 53.505225340553444}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMapMesh.IsValid()) {\n\t\treturn new FStreetMapSceneProxy(this);\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 13.719069156665231}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tFPrimitiveSceneProxy* Proxy = nullptr;\n\n\tif (Mesh) {\n\t\tProxy = new FStreetMapSceneProxy(this);\n\t}\n\n\treturn Proxy;\n}", "CodeBleu_score": 39.2306219862858}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (IsValid()) {\n\t\tFStreetMapSceneProxy* SceneProxy = new FStreetMapSceneProxy(this);\n\t\tSceneProxy->Init(Vertices, Indices);\n\t\treturn SceneProxy;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 46.08259615799869}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t", "CodeBleu_score": 6.2285882815553455}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tFInputID InputIDs[1] = { FInputID(0) };\n\tInputIDs[0].SetAbility(TestAbility01Handle);\n\tTestAbility01Handle.BindInputs(InputIDs, 1);\n}", "CodeBleu_score": 50.23860607169777}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t", "CodeBleu_score": 6.2285882815553455}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller!= NULL) {\n\t\tFRotator Rotation = Controller->GetControlRotation();\n\t\tFRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\tif (Value!= 0.0f) {\n\t\t\tAddMovementInput(YawRotation.Vector(), Value);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.267661538822175}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Value!= 0.0f && Controller) {\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 82.99857917634479}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tFVector ReturnValue;\n\tstatic UFunction* fn = UObject::FindObject<UFunction>(\"Function AR.ARCharacter.GetMainWeaponSocket\");\n\n\tAARCharacter_GetMainWeaponSocket_Params params;\n\tparams.Socket = Socket;\n\n\tauto flags = fn->FunctionFlags;\n\tfn->FunctionFlags |= 0x400;\n\n\tUObject::ProcessEvent(fn, &params);\n\n\tfn->FunctionFlags = flags;\n\n\treturn params.ReturnValue;\n}", "CodeBleu_score": 34.32342693296228}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMesh) {\n\t\treturn MainWeaponMesh->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.75629000212732}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tauto MainWeaponMeshComponent = GetMainWeaponMeshComponent();\n\tif (MainWeaponMeshComponent) {\n\t\treturn MainWeaponMeshComponent->GetSocketLocation(Socket);\n\t}\n\treturn GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 55.451471166086385}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tif (SpawnedEnemies.Contains(InEnemy)) {\n\t\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\t\tif (SpawnedEnemies.Num() < MinEnemies) {\n\t\t\t\tSetupSpawner();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 64.52068924585326}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() < MinNumEnemies) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 59.7106731266402}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() < MinEnemies) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 59.318569443678946}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\" \"), true);\n\n\tfor (int32 i = 0; i < Params.Num(); i++) {\n\t\tif (Params[i].Equals(\"PlayerId\", ESearchCase::IgnoreCase)) {\n\t\t\tPlayerId = Params[i + 1];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 50.14479978323675}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tParams.ParseIntoArray(Options, TEXT(\",\"), false);\n\tfor (int32 i = 0; i < Params.Num(); i++) {\n\t\tif (Params[i].Split(TEXT(\"=\"), &Params[i], nullptr, ESearchCase::IgnoreCase, ESearchDir::FromEnd)) {\n\t\t\tif (Params[i][0] == TEXT('\"')) {\n\t\t\t\tParams[i] = Params[i].RightChop(1);\n\t\t\t}\n\t\t\tif (Params[i].Right(1) == TEXT('\"')) {\n\t\t\t\tParams[i] = Params[i].LeftChop(1);\n\t\t\t}\n\t\t\tif (Params[i].Contains(TEXT(\"PlayerId\"))) {\n\t\t\t\tPlayerId = Params[i].RightChop(10);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 46.94141898077016}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(Params, TEXT(\" \"), true);\n\n\tfor (auto Param : Params) {\n\t\tif (Param.Split(\"=\")[0] == \"PlayerId\") {\n\t\t\tPlayerId = FCString::Atoi(*Param.Split(\"=\")[1]);\n\t\t}\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 47.82480394834102}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tRegisterWarning->SetText(FText::FromString(\"Please fill in all fields.\"));\n\t\treturn;\n\t}\n\n\tif (Password.Len() < 8) {\n\t\tRegisterWarning->SetText(FText::FromString(\"Password must be at least 8 characters long.\"));\n\t\treturn;\n\t}\n\n\tif (DisplayName.Len() < 3) {\n\t\tRegisterWarning->SetText(FText::FromString(\"Display name must be at least 3 characters long.\"));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tRegisterWarning->SetText(FText::FromString(\"Registering...\"));\n\n\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 63.00851584392849}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tif (IsValid(GameInstance)) {\n\t\tFString Username = RegisterUsernameInput->GetText().ToString();\n\t\tFString DisplayName = RegisterDisplayNameInput->GetText().ToString();\n\t\tFString Password = RegisterPasswordInput->GetText().ToString();\n\n\t\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\t\tRegisterWarningText->SetText(FText::FromString(\"Please fill in all fields.\"));\n\t\t\treturn;\n\t\t}\n\n\t\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 47.60065331654631}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\t// Retrieve the username, display name, and password from input fields\n\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\t// Check if any of these fields are empty\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\t// Display a warning message\n\t\tFText WarningMessage = FText::FromString(\"Please fill in all fields.\");\n\t\tRegisterWarning->SetText(WarningMessage);\n\t\tRegisterWarning->SetVisibility(ESlateVisibility::Visible);\n\t}\n\telse {\n\t\t// Hide the register button\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t\t// Call the RegisterNewPlayer method from the game instance to register the new player\n\t\tUGameInstance* GameInstance = GetWorld()->GetGameInstance();\n\t\tif (GameInstance!= nullptr) {\n\t\t\tUARGameInstance* ARGameInstance = Cast<UARGameInstance>(GameInstance);\n\t\t\tif (ARGameInstance!= nullptr) {\n\t\t\t\tARGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 56.038553551529965}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t", "CodeBleu_score": 4.601458837271866}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (!InMod.GetTargetActor()) {\n\t\treturn;\n\t}\n\n\tFVector2D ScreenCoords;\n\tif (InMod.GetTargetActor()->GetActorLocation().ProjectOnToScreen(ScreenCoords)) {\n\t\tif (InMod.GetTargetActor()->GetActorLocation().Z > 1000.0f) {\n\t\t\tScreenCoords.Y += 100.0f;\n\t\t}\n\n\t\tif (InMod.GetAttribute() == FAFAttribute::Health) {\n\t\t\tif (InMod.GetDelta() < 0) {\n\t\t\t\tFloatingCombatText.Add(FCombatText(FText::AsNumber(InMod.GetDelta()), ScreenCoords));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.688743076039767}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\t// Get the actor that is being damaged.\n\tAActor* TargetActor = InMod.GetTarget();\n\tif (TargetActor == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the damage value.\n\tint32 DamageValue = InMod.GetAttributeChange();\n\n\t// Get the damage location.\n\tFVector DamageLocation = TargetActor->GetActorLocation();\n\n\t// Project the damage location to screen coordinates.\n\tFVector2D ScreenLocation = FVector2D(0, 0);\n\tUGameplayStatics::ProjectWorldToScreen(this, DamageLocation, ScreenLocation);\n\n\t// Set the floating combat text with the damage value and screen location.\n\tFloatingCombatText->SetText(FText::AsNumber(DamageValue));\n\tFloatingCombatText->SetWorldLocation(ScreenLocation);\n}", "CodeBleu_score": 40.591333173676034}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t", "CodeBleu_score": 3.400341160727512}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tcheck(0 && \"Do not directly call Event functions in Blueprints! Use ExecuteUbergraph() to invoke Ubergraphs instead!\");\n}", "CodeBleu_score": 3.5859710012614885}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t}", "CodeBleu_score": 3.4944055265683636}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (!OwnerCharacter)\n\t\treturn;\n\n\tUARAbilityComponent* AbilityComponent = OwnerCharacter->GetAbilityComponent();\n\tif (!AbilityComponent)\n\t\treturn;\n\n\tUARItemWeapon* ItemWeapon = GetItem<UARItemWeapon>(LocalIndex);\n\tif (!ItemWeapon)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilityComponent->GetAbility<UARWeaponAbilityBase>(InAbilityTag);\n\tif (!Ability)\n\t\treturn;\n\n\tItemWeapon->SetAbility(Ability);\n}", "CodeBleu_score": 51.281745579080685}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (!Character)\n\t\treturn;\n\n\tUARAbilityComponent* AbilityComponent = Character->GetAbilityComponent();\n\tif (!AbilityComponent)\n\t\treturn;\n\n\tUARItemWeapon* ItemWeapon = GetItem<UARItemWeapon>(LocalIndex);\n\tif (!ItemWeapon)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilityComponent->GetAbilityByTag<UARWeaponAbilityBase>(InAbilityTag);\n\tif (!Ability)\n\t\treturn;\n\n\tItemWeapon->SetAbility(Ability);\n}", "CodeBleu_score": 56.4617265701895}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(GetOwner());\n\tif (!Character)\n\t\treturn;\n\n\tUARAbilityComponent* AbilityComponent = Character->GetAbilityComponent();\n\tif (!AbilityComponent)\n\t\treturn;\n\n\tUARItemWeapon* ItemWeapon = GetItem<UARItemWeapon>(LocalIndex);\n\tif (!ItemWeapon)\n\t\treturn;\n\n\tItemWeapon->SetAbility(AbilityComponent->GetAbility(InAbilityTag));\n}", "CodeBleu_score": 57.093546030314315}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = \"\";\n\t\tData.Position = FVector(0, 0, 0);\n\t\tData.Rotation = FRotator(0, 0, 0);\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t}\n}", "CodeBleu_score": 77.30500728128156}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = \"\";\n\t\t//Data.SocketName = \"\";\n\t\tData.Position = FVector(0, 0, 0);\n\t\tData.Rotation = FRotator(0, 0, 0);\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t}\n}", "CodeBleu_score": 77.30500728128156}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = \"\";\n\t\tData.Position = FVector::ZeroVector;\n\t\tData.Rotation = FRotator::ZeroRotator;\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tServerHolster(Data);\n\t\t\tCurrentWeaponIndex = -1;\n\t\t}\n\t}\n}", "CodeBleu_score": 77.72765293552492}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (GIsServer) {\n\t\treturn;\n\t}\n\n\t// Remove all handlers associated with this module\n\tfor (int32 i = 0; i < LoadingScreenHandlers.Num(); ++i) {\n\t\tif (LoadingScreenHandlers[i].Get() == this) {\n\t\t\tLoadingScreenHandlers.RemoveAt(i);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Remove the module from the movie player\n\tif (FModuleManager::Get().IsModuleLoaded(\"MoviePlayer\")) {\n\t\tFModuleManager::Get().GetModuleChecked<IMoviePlayerModule>(\"MoviePlayer\").OnLoadingScreenPreparing().RemoveAll(this);\n\t\tFModuleManager::Get().GetModuleChecked<IMoviePlayerModule>(\"MoviePlayer\").OnLoadingScreenPrepared().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 14.43548064880219}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (GIsServer) {\n\t\t// Remove all handlers from the movie player.\n\t\tUMoviePlayer::OnPreLoadMovies().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 21.542897002856677}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (GEngine) {\n\t\tGEngine->OnScreenMessageChanged().RemoveAll(this);\n\t\tGEngine->OnScreenMessageAdded().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 18.816721874729307}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen()\"));\n\n\t// Check if the loading screen is enabled\n\tif (GetLoadingScreenSettings().bEnabled) {\n\t\t// Retrieve the default loading screen settings\n\t\tFLoadingScreenAttributes LoadingScreen = GetDefault<ULoadingScreenSettings>()->GetLoadingScreen();\n\n\t\t// Set the startup flag to false\n\t\tLoadingScreen.bAllowInEarlyStartup = false;\n\n\t\t// Set up the loading screen using the default settings\n\t\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n\t}\n}", "CodeBleu_score": 36.94778463693283}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\t// Log start of setup\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"AsyncLoadingScreen: PreSetupLoadingScreen()\"));\n\n\t// Check if loading screen is enabled\n\tif (GetMoviePlayer()->IsLoadingScreenEnabled()) {\n\t\t// Get default loading screen settings\n\t\tFLoadingScreenAttributes LoadingScreen = GetDefault<ULoadingScreenSettings>()->GetLoadingScreenAttributes();\n\n\t\t// Set startup flag to false\n\t\tLoadingScreen.bAutoCompleteWhenLoadingCompletes = false;\n\n\t\t// Set up loading screen\n\t\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n\t}\n}", "CodeBleu_score": 44.5927155484742}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (UAsyncLoadingScreenLibrary::IsLoadingScreenEnabled()) {\n\t\tUAsyncLoadingScreenLibrary::SetStartup(false);\n\t\tSetupLoadingScreen();\n\t}\n}", "CodeBleu_score": 26.678601260712888}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t//Remove all existing background images\n\tRemoveAllBackgroundImages();\n\n\t//Retrieve the loading screen settings\n\tFLoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t//Add the startup background images\n\tfor (int32 i = 0; i < LoadingScreenSettings->StartupImages.Num(); i++) {\n\t\tStartupBackgroundImages.Add(LoadingScreenSettings->StartupImages[i]);\n\t}\n\n\t//Add the default background images\n\tfor (int32 i = 0; i < LoadingScreenSettings->DefaultImages.Num(); i++) {\n\t\tDefaultBackgroundImages.Add(LoadingScreenSettings->DefaultImages[i]);\n\t}\n}", "CodeBleu_score": 35.58433579094892}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Retrieve the loading screen settings from the config file\n\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\t// Add the startup background images to the list\n\tfor (int i = 0; i < LoadingScreenSettings->StartupBackgroundImages.Num(); i++) {\n\t\tStartupBackgroundImages.Add(LoadingScreenSettings->StartupBackgroundImages[i]);\n\t}\n\n\t// Add the default background images to the list\n\tfor (int i = 0; i < LoadingScreenSettings->DefaultBackgroundImages.Num(); i++) {\n\t\tDefaultBackgroundImages.Add(LoadingScreenSettings->DefaultBackgroundImages[i]);\n\t}\n}", "CodeBleu_score": 49.02731496863982}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\tTSharedPtr<ISettings> Settings = ISettingsModule::Get().GetSettings(TEXT(\"AsyncLoadingScreen\"));\n\tif (Settings.IsValid()) {\n\t\tTArray<FString> StartupBackgroundImagePaths;\n\t\tTArray<FString> DefaultBackgroundImagePaths;\n\t\tSettings->GetArray(TEXT(\"StartupBackgroundImages\"), StartupBackgroundImagePaths);\n\t\tSettings->GetArray(TEXT(\"DefaultBackgroundImages\"), DefaultBackgroundImagePaths);\n\t\tfor (int32 i = 0; i < StartupBackgroundImagePaths.Num(); i++) {\n\t\t\tStartupBackgroundImages.Add(FBackgroundImage(StartupBackgroundImagePaths[i]));\n\t\t}\n\t\tfor (int32 i = 0; i < DefaultBackgroundImagePaths.Num(); i++) {\n\t\t\tDefaultBackgroundImages.Add(FBackgroundImage(DefaultBackgroundImagePaths[i]));\n\t\t}\n\t}\n}", "CodeBleu_score": 37.581145043245776}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Adjust the text's alpha value based on the elapsed time and animation speed.\n\tif (m_AnimationDirection == EAnimationDirection::Forward) {\n\t\tm_TextAlpha = FMath::Clamp(m_TextAlpha + InDeltaTime * m_AnimationSpeed, m_MinAlpha, m_MaxAlpha);\n\t}\n\telse {\n\t\tm_TextAlpha = FMath::Clamp(m_TextAlpha - InDeltaTime * m_AnimationSpeed, m_MinAlpha, m_MaxAlpha);\n\t}\n\n\t// Check if the text's alpha value has reached either extreme.\n\tif (m_TextAlpha == m_MinAlpha || m_TextAlpha == m_MaxAlpha) {\n\t\t// Reverse the animation direction.\n\t\tm_AnimationDirection = m_AnimationDirection == EAnimationDirection::Forward? EAnimationDirection::Backward : EAnimationDirection::Forward;\n\t}\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 41.35301893188787}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (InCurrentTime < 0) {\n\t\treturn EActiveTimerReturnType::Continue;\n\t}\n\n\t// Calculate the new alpha value based on the elapsed time and animation speed.\n\tfloat NewAlpha = FMath::Clamp(FMath::Sin(InCurrentTime * AnimationSpeed) * 0.5f + 0.5f, 0.0f, 1.0f);\n\n\t// Set the new alpha value on the text.\n\tText->SetAlpha(NewAlpha);\n\n\t// Return the status indicating the animation should continue.\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 20.63383523236383}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tfloat Alpha = FMath::Clamp(FMath::Sin((InCurrentTime / AnimationSpeed) * 3.14f) * 0.5f + 0.5f, 0.0f, 1.0f);\n\tText->SetRenderOpacity(Alpha);\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 14.971457661937182}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::lock_guard<std::mutex> lock(data->mtx);\n\tif (data->index!= -1) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 38.764478191741205}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::lock_guard<std::mutex> lock(m_mutex);\n\tif (m_index!= -1) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 15.711696702904351}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> lock(data->mutex);\n\treturn data->index!= -1;\n}", "CodeBleu_score": 28.340920027354912}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\t// TODO: Implement this function\n\treturn false;\n}", "CodeBleu_score": 3.434497572760552}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (State == nullptr) {\n\t\treturn true;\n\t}\n\n\tif (bCleanup) {\n\t\tdelete static_cast<FindPathState*>(State);\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 17.35026080362391}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\treturn true;\n}", "CodeBleu_score": 3.4344976466915123}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current &&!is_inside_tree()) {\n\t\t\t\t\tcurrent = false;\n\t\t\t\t}\n\t\t\t\tif (!current && is_inside_tree()) {\n\t\t\t\t\tget_viewport()->_audio_listener_2d_set(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current && is_inside_tree()) {\n\t\t\t\t\tget_viewport()->_audio_listener_2d_remove(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 64.18229022563597}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tif (get_viewport()->get_audio_listener_2d()!= this) {\n\t\t\t\t\t\tcurrent = false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (get_viewport()->get_audio_listener_2d() == nullptr) {\n\t\t\t\t\t\tcurrent = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tcurrent = false;\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 68.42134507132056}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_inside_tree() &&!is_part_of_edited_scene() && get_viewport()->get_audio_listener_2d()!= this) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_inside_tree() &&!is_part_of_edited_scene() && current) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 60.19461326977245}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->_driver_mix(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 11.31532304233574}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (AudioServer::get_singleton() && AudioServer::get_singleton()->_is_active()) {\n\t\t// If the driver is active, we can just process the audio frames directly.\n\t\tAudioServer::get_singleton()->_driver_process(p_frames, p_buffer);\n\t} else {\n\t\t// Otherwise, we need to lock and unlock around the processing.\n\t\tmutex.lock();\n\t\t// Process the audio frames in chunks.\n\t\tfor (int i = 0; i < p_frames; i += AUDIO_PROCESS_CHUNK_SIZE) {\n\t\t\t// Process the chunk.\n\t\t\tint32_t *buf = p_buffer + i;\n\t\t\tfor (int j = 0; j < MIN(AUDIO_PROCESS_CHUNK_SIZE, p_frames - i); j++) {\n\t\t\t\tbuf[j] = 0;\n\t\t\t}\n\t\t\t// Copy the chunk into the output buffer.\n\t\t\tfor (int j = 0; j < MIN(AUDIO_PROCESS_CHUNK_SIZE, p_frames - i); j++) {\n\t\t\t\tp_buffer[i + j] = buf[j];\n\t\t\t}\n\t\t}\n\t\tmutex.unlock();\n\t}\n}", "CodeBleu_score": 43.990246418567956}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (p_frames > 0) {\n\t\tif (is_active() &&!is_threaded()) {\n\t\t\tmutex.lock();\n\t\t\tmix_audio_internal(p_frames, p_buffer);\n\t\t\tmutex.unlock();\n\t\t} else {\n\t\t\tmix_audio_internal(p_frames, p_buffer);\n\t\t}\n\t}\n}", "CodeBleu_score": 19.769742143526976}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tERR_FAIL_COND(gravity.is_point());\n\n\tr_gravity = gravity.vec;\n\n\tif (gravity.point.is_valid()) {\n\t\tr_gravity = gravity.point->get_global_transform().xform(r_gravity);\n\t\tr_gravity -= p_position;\n\t\tr_gravity.normalize();\n\t\tr_gravity *= gravity.strength / (r_gravity.length_squared() + 1);\n\t}\n}", "CodeBleu_score": 26.462566383975417}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_mode == GODOT_AREA_GRAVITY_MODE_POINT) {\n\t\tfloat dist_squared = p_position.distance_squared_to(gravity_point);\n\t\tif (dist_squared > 0.0) {\n\t\t\tfloat strength = gravity_strength / (dist_squared * 0.01);\n\t\t\tr_gravity = (p_position - gravity_point).normalized() * strength;\n\t\t} else {\n\t\t\tr_gravity.set(0, 0);\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 32.861409933174286}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_mode == GRAVITY_MODE_POINT) {\n\t\tr_gravity = gravity_vector * (1.0 / (p_position - gravity_point).length_squared());\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 17.67312338053191}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tConstraint2D *constraint = constraints[i];\n\t\tif (constraint->get_enabled() && constraint->get_active()) {\n\t\t\tBody2D *body = constraint->get_other_body();\n\t\t\tif (body!= NULL && body->get_mode() == Body2D::MODE_RIGID) {\n\t\t\t\tif (!body->get_active()) {\n\t\t\t\t\tbody->set_active(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.303758377461726}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotBody2D *body = (GodotBody2D *)constraints[i]->get_other_body(this);\n\t\tif (body->get_mode() == RigidBody2D::MODE_RIGID) {\n\t\t\tif (body->get_active() == false) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.127188840556975}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotBody2D *body = constraints[i]->get_other_body();\n\t\tif (body->get_mode() == RigidBody2D::MODE_RIGID) {\n\t\t\tif (!body->get_active()) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 32.60080154759892}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (is_inside_tree()) {\n\t\tif (space_monitor_query.is_valid()) {\n\t\t\tif (space_monitor_query->get_space()->get_monitor_query_list().find(this) == -1) {\n\t\t\t\tspace_monitor_query->get_space()->get_monitor_query_list().add(this);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.70440338886067}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tERR_FAIL_COND(space == nullptr);\n\n\tif (space->is_space_valid()) {\n\t\tif (space->get_monitor_query_list() == nullptr) {\n\t\t\tspace->set_monitor_query_list(memnew(SpaceQueryMonitor));\n\t\t}\n\n\t\tspace->get_monitor_query_list()->add_area(this);\n\t}\n}", "CodeBleu_score": 32.620294347404936}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space == nullptr || space->space_type!= Space3D::SPACE_3D) {\n\t\treturn;\n\t}\n\tif (!is_inside_tree()) {\n\t\treturn;\n\t}\n\tif (is_inside_tree()) {\n\t\tif (space->area_monitor_query_list.find(this) == space->area_monitor_query_list.end()) {\n\t\t\tspace->area_monitor_query_list.insert(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.39428131153921}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tERR_FAIL_COND(!is_inside_tree());\n\tERR_FAIL_COND(body == nullptr);\n\n\tif (body->get_physics_process_internal()) {\n\t\tif (body->get_transform_changed()) {\n\t\t\tbody->set_transform_changed(false);\n\t\t\tbody->update_center_of_mass();\n\t\t\tbody->update_principal_inertia_axes();\n\t\t\tbody->update_inertia();\n\t\t}\n\t}\n}", "CodeBleu_score": 24.226352890138532}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\t// Transform the center of mass\n\t_transform_dependent.center = _transform.xform(_transform_dependent.center);\n\n\t// Transform the inertia tensor\n\t_transform_dependent.inertia = _transform.xform(_transform_dependent.inertia);\n\t_transform_dependent.inertia.invert();\n}", "CodeBleu_score": 20.057786090960054}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tAudioServer *as = AudioServer::get_singleton();\n\tif (as) {\n\t\tas->process_audio(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 73.12345560074702}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tAudioServer *as = AudioServer::get_singleton();\n\tif (as) {\n\t\tas->process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 73.21157573422143}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\tif (!audio_server) {\n\t\treturn;\n\t}\n\taudio_server->process_audio(p_frames, p_buffer);\n}", "CodeBleu_score": 66.95142407742483}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(p_feed.is_null());\n\n\t// Remove the feed from the list of feeds.\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tfeeds.remove_at(i);\n\t\t\temit_signal(SNAME(\"feed_removed\"), p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 49.24959349976008}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tfeeds.remove_at(i);\n\t\t\temit_signal(SNAME(\"feed_removed\"), p_feed);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 45.93024762125031}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(!p_feed.is_valid());\n\tERR_FAIL_COND(!p_feed->is_valid());\n\n\tif (p_feed->get_feed_id() == 0) {\n\t\treturn;\n\t}\n\n\tfor (uint32_t i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i]->get_feed_id() == p_feed->get_feed_id()) {\n\t\t\tfeeds.remove(i);\n\t\t\temit_signal(SNAME(\"feed_removed\"), p_feed->get_feed_id());\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 50.057676529154946}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* ret = new EaseRateAction();\n\tif (ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}", "CodeBleu_score": 42.741815296576604}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* pRet = new EaseRateAction();\n\tif (pRet && pRet->initWithAction(action, rate)) {\n\t\tpRet->autorelease();\n\t} else {\n\t\tCC_SAFE_DELETE(pRet);\n\t}\n\treturn pRet;\n}", "CodeBleu_score": 43.978465538404556}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* pRet = new EaseRateAction();\n\tif (pRet && pRet->initWithAction(action, rate)) {\n\t\tpRet->autorelease();\n\t} else {\n\t\tCC_SAFE_DELETE(pRet);\n\t}\n\treturn pRet;\n}", "CodeBleu_score": 43.978465538404556}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (Node* child : node->getChildren()) {\n\t\tNode* foundChild = findChildByNameRecursively(child, childName);\n\t\tif (foundChild!= nullptr) {\n\t\t\treturn foundChild;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 49.163102050652164}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tfor (auto &child : node->getChildren()) {\n\t\tNode *foundChild = findChildByNameRecursively(child, childName);\n\t\tif (foundChild!= nullptr) {\n\t\t\treturn foundChild;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 49.13173513581912}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (auto child : node->getChildren()) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode!= nullptr) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 50.129032297671486}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\tif (target) {\n\t\tif (target->is_a(Character3D::get_type())) {\n\t\t\tCharacter3D* character = static_cast<Character3D*>(target);\n\t\t\tif (character->is_a(Character3D::get_type())) {\n\t\t\t\tif (character->get_running_animation() == this) {\n\t\t\t\t\tcharacter->set_running_animation(NULL);\n\t\t\t\t}\n\t\t\t\tif (character->get_fade_in_animation() == this) {\n\t\t\t\t\tcharacter->set_fade_in_animation(NULL);\n\t\t\t\t}\n\t\t\t\tif (character->get_fade_out_animation() == this) {\n\t\t\t\t\tcharacter->set_fade_out_animation(NULL);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 26.362198467762404}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (target) {\n\t\tif (target->isFadingIn()) {\n\t\t\ttarget->removeFadeIn(this);\n\t\t}\n\t\tif (target->isFadingOut()) {\n\t\t\ttarget->removeFadeOut(this);\n\t\t}\n\t\tif (target->isAnimating()) {\n\t\t\ttarget->removeRunning(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 15.41649051912507}, {"code": "void Animate3D::removeFromMap(){\n\t\t//remove from fade in map\n\tfor (auto it = fadeinMap.begin(); it!= fadeinMap.end(); ++it) {\n\t\tif (it->second == this) {\n\t\t\tfadeinMap.erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n\t//remove from fade out map\n\tfor (auto it = fadeoutMap.begin(); it!= fadeoutMap.end(); ++it) {\n\t\tif (it->second == this) {\n\t\t\tfadeoutMap.erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n\t//remove from running map\n\tfor (auto it = runningMap.begin(); it!= runningMap.end(); ++it) {\n\t\tif (it->second == this) {\n\t\t\trunningMap.erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 39.44670133798024}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\t// TODO: implement this\n\treturn nullptr;\n}", "CodeBleu_score": 6.985255115657214}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\t// TODO: Implement this function\n\tstd::string key = fileName + animationName;\n\tif (cache.find(key)!= cache.end()) {\n\t\treturn cache[key];\n\t}\n\tAnimation3D* animation = new Animation3D();\n\tif (!animation->initialize(fileName, animationName)) {\n\t\tdelete animation;\n\t\treturn nullptr;\n\t}\n\tcache[key] = animation;\n\treturn animation;\n}", "CodeBleu_score": 36.957355671293016}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* animation3D = nullptr;\n\tif (s_animationCache.find(key)!= s_animationCache.end()) {\n\t\tanimation3D = s_animationCache[key];\n\t}\n\telse {\n\t\tanimation3D = new Animation3D();\n\t\tif (animation3D && animation3D->initWithFile(fileName, animationName)) {\n\t\t\ts_animationCache[key] = animation3D;\n\t\t}\n\t\telse {\n\t\t\tdelete animation3D;\n\t\t\tanimation3D = nullptr;\n\t\t}\n\t}\n\treturn animation3D;\n}", "CodeBleu_score": 40.35741772148494}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\t// TODO:\n}", "CodeBleu_score": 2.1272773458620904}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto it = _animationCache.begin(); it!= _animationCache.end();) {\n\t\tif (it->second.refCount == 1) {\n\t\t\tit = _animationCache.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 50.1975289713321}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\t// TODO: Implement\n}", "CodeBleu_score": 2.1272773458620904}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *pRet = new (std::nothrow) BillBoard();\n\tif (pRet && pRet->initWithTexture(texture, mode)) {\n\t\tpRet->autorelease();\n\t\treturn pRet;\n\t}\n\tCC_SAFE_DELETE(pRet);\n\treturn nullptr;\n}", "CodeBleu_score": 58.440025575355826}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *ret = new (std::nothrow) BillBoard();\n\tif (ret && ret->initWithTexture(texture, mode)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 58.506668946381794}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *ret = new (std::nothrow) BillBoard();\n\tif (ret && ret->initWithTexture(texture, mode)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 58.506668946381794}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\tth.empty()) {\n\t\tCCLOG(\"warning: Invalid path: %s\", path.c_str());\n\t\treturn false;\n\t}\n\tif (_path == path) {\n\t\treturn true;\n\t}\n\t_path = path;\n\tstd::string extension = FileUtils::getInstance()->getFileExtension(path);\n\tif (extension == \"c3t\") {\n\t\tif (loadJson(path)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tCCLOG(\"warning: Failed to load file: %s\", path.c_str());\n\t\t\treturn false;\n\t\t}\n\t} else if (extension == \"c3b\") {\n\t\tif (loadBinary(path)) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tCCLOG(\"warning: Failed to load file: %s\", path.c_str());\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tCCLOG(\"warning: Invalid extension: %s\", extension.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 49.336016655586604}, {"code": "bool Bundle3D::load(const std::string& path){\n\tth.empty() || _loaded) {\n\t\treturn false;\n\t}\n\n\t_path = path;\n\n\t// Determine file extension\n\tconst std::string& extension = path.substr(path.find_last_of('.') + 1);\n\tif (extension == \"c3t\") {\n\t\treturn loadJson(path);\n\t} else if (extension == \"c3b\") {\n\t\treturn loadBinary(path);\n\t} else {\n\t\tCCLOG(\"warning: Invalid file format: %s\", path.c_str());\n\t\tclear();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 34.945404339539174}, {"code": "bool Bundle3D::load(const std::string& path){\n\tth.empty()) {\n\t\treturn false;\n\t}\n\n\tif (_path == path) {\n\t\treturn true;\n\t}\n\n\tclear();\n\n\tstd::string extension = FileUtils::getInstance()->getFileExtension(path);\n\n\tif (extension == \"c3t\") {\n\t\treturn loadJson(path);\n\t}\n\telse if (extension == \"c3b\") {\n\t\treturn loadBinary(path);\n\t}\n\n\tCCLOG(\"warning: Unknown file extension '%s' for bundle '%s'.\", extension.c_str(), path.c_str());\n\n\treturn false;\n}", "CodeBleu_score": 37.081308685306134}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\t// Reset the skin data\n\tskindata->reset();\n\n\t// Load the skin data\n\tif (_binaryReader.isLoaded()) {\n\t\treturn loadSkinDataBinary(skindata);\n\t} else if (_jsonReader.HasMember(SKIN)) {\n\t\treturn loadSkinDataJson(skindata);\n\t} else {\n\t\tCCLOG(\"warning: Failed to load SkinData: '%s'.\", _path.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 67.99984239121092}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (skindata == NULL)\n\t\treturn false;\n\n\tskindata->reset();\n\n\tif (isBinary()) {\n\t\treturn loadSkinDataBinary(skindata);\n\t} else {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 78.90331059928421}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (skindata == nullptr)\n\t\treturn false;\n\n\t// reset\n\tskindata->reset();\n\n\t// load skin data\n\tif (isBinary())\n\t{\n\t\treturn loadSkinDataBinary(skindata);\n\t}\n\telse\n\t{\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 78.32319903191049}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tsize_t bytesRead = 0;\n\tif (bytesToRead > decoder->remainingBytes) {\n\t\tbytesToRead = decoder->remainingBytes;\n\t}\n\tmemcpy(ptr, decoder->currentFilePosition, bytesToRead);\n\tdecoder->currentFilePosition += bytesToRead;\n\tbytesRead = bytesToRead;\n\tdecoder->remainingBytes -= bytesRead;\n\treturn bytesRead;\n}", "CodeBleu_score": 46.521101644783656}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*) datasource;\n\tsize_t bytesRead = 0;\n\tif (decoder->fileSize > 0) {\n\t\tsize_t bytesToRead = size * nmemb;\n\t\tif (bytesToRead > decoder->fileSize) {\n\t\t\tbytesToRead = decoder->fileSize;\n\t\t}\n\t\tif (bytesToRead > 0) {\n\t\t\tmemcpy(ptr, decoder->fileData + decoder->filePosition, bytesToRead);\n\t\t\tdecoder->filePosition += bytesToRead;\n\t\t\tdecoder->fileSize -= bytesToRead;\n\t\t\tbytesRead = bytesToRead;\n\t\t}\n\t}\n\treturn bytesRead;\n}", "CodeBleu_score": 46.322129230777456}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tif (size * nmemb!= 0) {\n\t\tsize_t bytesToRead = size * nmemb;\n\t\tsize_t bytesRead = 0;\n\t\tsize_t bytesRemaining = filesize - currentPosition;\n\t\tif (bytesToRead > bytesRemaining) {\n\t\t\tbytesToRead = bytesRemaining;\n\t\t}\n\t\tif (bytesToRead > 0) {\n\t\t\tmemcpy(ptr, (char*) datasource + currentPosition, bytesToRead);\n\t\t\tcurrentPosition += bytesToRead;\n\t\t\tbytesRead = bytesToRead;\n\t\t}\n\t\treturn bytesRead;\n\t}\n\treturn 0;\n}", "CodeBleu_score": 40.4617279440453}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t}", "CodeBleu_score": 7.8349078318895735}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t}", "CodeBleu_score": 7.8349078318895735}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t}", "CodeBleu_score": 7.8349078318895735}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> lock(s_downloaderAndroidMapMutex);\n\tauto it = s_downloaderAndroidMap.find(id);\n\tif (it == s_downloaderAndroidMap.end()) {\n\t\treturn nullptr;\n\t}\n\treturn it->second;\n}", "CodeBleu_score": 63.591503007332065}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tcocos2d::network::DownloaderAndroid* downloader = nullptr;\n\tstd::lock_guard<std::mutex> lock(_downloaderMapMutex);\n\tauto it = _downloaderMap.find(id);\n\tif (it!= _downloaderMap.end()) {\n\t\tdownloader = it->second;\n\t}\n\treturn downloader;\n}", "CodeBleu_score": 56.400026259723845}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tcocos2d::network::DownloaderAndroid* result = nullptr;\n\tstd::lock_guard<std::mutex> lock(s_downloaderAndroidMutex);\n\tauto it = s_downloaderAndroidMap.find(id);\n\tif (it!= s_downloaderAndroidMap.end()) {\n\t\tresult = it->second;\n\t}\n\treturn result;\n}", "CodeBleu_score": 55.636190705456976}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then\n\t\tisLoop = false\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 45.76908614789447}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then\n\t\tisLoop = false\n\tend\n\taudio.playMusic(filename, isLoop)", "CodeBleu_score": 33.76095624765188}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then\n\t\tisLoop = false\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)", "CodeBleu_score": 45.76908614789447}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\tif not self.enabled then\n\t\treturn false\n\tend\n\n\tif #self.conditions == 0 then\n\t\treturn true\n\tend\n\n\tfor i = 1, #self.conditions do\n\t\tif not self.conditions[i]:detect() then\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true", "CodeBleu_score": 26.97457858412283}, {"code": "function ccs.TriggerObj:detect()\n\t\tif not self.enabled then\n\t\treturn false\n\tend\n\tif not self.conditions then\n\t\treturn true\n\tend\n\tfor _, condition in ipairs(self.conditions) do\n\t\tif not condition:detect() then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true", "CodeBleu_score": 26.433343175480978}, {"code": "function ccs.TriggerObj:detect()\n\t\tif not self.enabled then\n\t\treturn false\n\tend\n\n\tif self.conditions == nil or #self.conditions == 0 then\n\t\treturn true\n\tend\n\n\tfor i, condition in ipairs(self.conditions) do\n\t\tif not condition:detect() then\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true", "CodeBleu_score": 28.88204547394414}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\tif self.conditions then\n\t\tfor i=1,#self.conditions do\n\t\t\tif self.conditions[i] then\n\t\t\t\tself.conditions[i]:removeAll()\n\t\t\tend\n\t\tend\n\tend\n\tif self.actions then\n\t\tfor i=1,#self.actions do\n\t\t\tif self.actions[i] then\n\t\t\t\tself.actions[i]:removeAll()\n\t\t\tend\n\t\tend\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 34.3478043949801}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tif self._conditions then\n\t\tfor i,v in ipairs(self._conditions) do\n\t\t\tif v.removeAll then\n\t\t\t\tv:removeAll()\n\t\t\tend\n\t\tend\n\tend\n\tif self._actions then\n\t\tfor i,v in ipairs(self._actions) do\n\t\t\tif v.removeAll then\n\t\t\t\tv:removeAll()\n\t\t\tend\n\t\tend\n\tend\n\tself._conditions = {}\n\tself._actions = {}", "CodeBleu_score": 40.42639926594256}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tif self.conditions then\n\t\tfor i,v in ipairs(self.conditions) do\n\t\t\tv:removeAll()\n\t\tend\n\tend\n\tif self.actions then\n\t\tfor i,v in ipairs(self.actions) do\n\t\t\tv:removeAll()\n\t\tend\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 38.062346377588}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal effect = self.hurtAnimation:clone()\n\teffect.scale = Vector3.new(0.5, 0.5, 0.5)\n\teffect.CFrame = CFrame.new(target.Position)\n\teffect.Parent = target\n\teffect:Play()\n\twait(0.5)\n\teffect:Destroy()", "CodeBleu_score": 30.12660233429531}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal effect = self.hurtAnimation:clone()\n\teffect.position = target.position\n\teffect.scale = Vector3.new(1,1,1)\n\teffect.Parent = target\n\teffect:Play()\n\twait(self.hurtAnimation.Length)\n\teffect:Destroy()", "CodeBleu_score": 32.77307098138781}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = self.hurtAnimation\n\tlocal hurtEffect = hurtAnimation:clone()\n\thurtEffect.scale = Vector3(1, 1, 1)\n\thurtEffect.position = target.position\n\thurtEffect.rotation = target.rotation\n\thurtEffect.run()\n\thurtEffect.parent = target\n\thurtEffect.cameraMask = 1 << 4\n\thurtEffect.destroy()", "CodeBleu_score": 39.72832656339482}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\tself.particleSystem:stopSystem()\n\tself.particleSystem2:stopSystem()\n\tself:runAction(cc.Sequence:create(cc.DelayTime:create(0.5), cc.CallFunc:create(function()\n\t\tself.particleSystem = cc.ParticleSystemQuad:create(\"particle/particle_normal_attack.plist\")\n\t\tself.particleSystem:setPosition(self.sprite:getContentSize().width/2, self.sprite:getContentSize().height/2)\n\t\tself.particleSystem:setScale(0.6)\n\t\tself.sprite:addChild(self.particleSystem, 2)\n\t\tself.particleSystem:setTexture(cc.Director:getInstance():getTextureCache():addImage(\"particle/particle_normal_attack.png\"))\n\t\tself.particleSystem:runAction(cc.FadeOut:create(0.5))\n\t\tself.sprite:setScale(0.6)\n\tend)))", "CodeBleu_score": 46.26313572603733}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.particleSystem:stopSystem()\n\tself.particleSystem2:stopSystem()\n\tlocal sequence = CCSequence:createWithTwoActions(CCDelayTime:create(0.5), CCCallFunc:create(function()\n\t\tself.particleSystem = CCEmitter:create(\"particle/fire.plist\")\n\t\tself.particleSystem:setPosition(self:getPositionX(), self:getPositionY())\n\t\tself:addChild(self.particleSystem)\n\t\tself.particleSystem:setTexture(CCTextureCache:sharedTextureCache():addImage(\"particle/fire.png\"))\n\t\tself.particleSystem:setBlendAdditive(true)\n\t\tself.particleSystem:setDuration(-1)\n\t\tself.particleSystem:setEmissionRate(30)\n\t\tself.particleSystem:setLife(0.5)\n\t\tself.particleSystem:setLifeVar(0.1)\n\t\tself.particleSystem:setStartSize(50)\n\t\tself.particleSystem:setStartSizeVar(10)\n\t\tself.particleSystem:setEndSize(0)\n\t\tself.particleSystem:setEndSizeVar(0)\n\t\tself.particleSystem:setStartColor(ccc4f(1, 1, 0, 1))\n\t\tself.particleSystem:setStartColorVar(ccc4f(0, 0, 0, 0))\n\t\tself.particleSystem:setEndColor(ccc4f(1, 1, 0, 0))\n\t\tself.particleSystem:setEndColorVar(ccc4f(0, 0, 0, 0))\n\t\tself.particleSystem:setAngle(180)\n\t\tself.particleSystem:setAngleVar(10)\n\t\tself.particleSystem:setGravity(ccp(0, 0))\n\t\tself.particleSystem:setRadialAccel(0)\n\t\tself.particleSystem:setRadialAccelVar(0)\n\t\tself.particleSystem:setSpeed(50)\n\t\tself.particleSystem:setSpeedVar(10)\n\t\tself.particleSystem:setTangentialAccel(0)\n\t\tself.particleSystem:setTangentialAccelVar(0)\n\t\tself.particleSystem:setTotalParticles(200)\n\t\tself.", "CodeBleu_score": 35.586467555708104}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.particleSystem:stopSystem()\n\tself.particleSystem2:stopSystem()\n\tself.particleSystem3:stopSystem()\n\tself.particleSystem4:stopSystem()\n\tself.particleSystem5:stopSystem()\n\tself.particleSystem6:stopSystem()\n\tself.particleSystem7:stopSystem()\n\tself.particleSystem8:stopSystem()\n\tself.particleSystem9:stopSystem()\n\tself.particleSystem10:stopSystem()\n\tself.particleSystem11:stopSystem()\n\tself.particleSystem12:stopSystem()\n\tself.particleSystem13:stopSystem()\n\tself.particleSystem14:stopSystem()\n\tself.particleSystem15:stopSystem()\n\tself.particleSystem16:stopSystem()\n\tself.particleSystem17:stopSystem()\n\tself.particleSystem18:stopSystem()\n\tself.particleSystem19:stopSystem()\n\tself.particleSystem20:stopSystem()\n\tself.particleSystem21:stopSystem()\n\tself.particleSystem22:stopSystem()\n\tself.particleSystem23:stopSystem()\n\tself.particleSystem24:stopSystem()\n\tself.particleSystem25:stopSystem()\n\tself.particleSystem26:stopSystem()\n\tself.particleSystem27:stopSystem()\n\tself.particleSystem28:stopSystem()\n\tself.particleSystem29:stopSystem()\n\tself.particleSystem30:stopSystem()\n\tself.particleSystem31:stopSystem()\n\tself.particleSystem32:stopSystem()\n\tself.particleSystem33:stopSystem()\n\tself.particleSystem34:stopSystem()\n\tself.particleSystem35:stopSystem()\n\tself.particleSystem36:stopSystem()\n\tself.particleSystem37:stopSystem()\n\tself.particleSystem38:stopSystem()\n\tself.particleSystem39:stopSystem()\n\tself.particleSystem40:stopSystem()\n\tself.particleSystem41:stopSystem()\n\tself.particleSystem42:stopSystem()\n\tself.particleSystem43:stopSystem()\n\tself.particleSystem4", "CodeBleu_score": 20.994419542117313}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tlocal heroName = hero:getName()\n\tlocal heroImage = hero:getImage()\n\tlocal heroFrame = hero:getFrame()\n\tlocal heroAngerFull = hero:getAngerFull()\n\tlocal heroAngerClone = hero:getAngerClone()\n\tlocal heroAngerFullFrame = hero:getAngerFullFrame()\n\tlocal heroAngerCloneFrame = hero:getAngerCloneFrame()\n\tlocal heroAngerFullImage = hero:getAngerFullImage()\n\tlocal heroAngerCloneImage = hero:getAngerCloneImage()\n\n\theroImage:setShader(self.greyShader)\n\theroFrame:setShader(self.greyShader)\n\theroAngerFull:setVisible(false)\n\theroAngerClone:setVisible(false)\n\theroAngerFullFrame:setVisible(false)\n\theroAngerCloneFrame:setVisible(false)\n\theroAngerFullImage:setVisible(false)\n\theroAngerCloneImage:setVisible(false)", "CodeBleu_score": 29.532516400273494}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tlocal heroName = hero:getName()\n\tlocal heroUI = self:getHeroUI(hero)\n\tlocal heroFrame = heroUI:getChildByName(\"Frame\")\n\tlocal heroImage = heroUI:getChildByName(\"Image\")\n\tlocal heroAngerFull = heroUI:getChildByName(\"AngerFull\")\n\tlocal heroAngerClone = heroUI:getChildByName(\"AngerClone\")\n\n\theroFrame:setShader(greyShader)\n\theroImage:setShader(greyShader)\n\theroAngerFull:setVisible(false)\n\theroAngerClone:setVisible(false)", "CodeBleu_score": 18.568261039257404}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tlocal heroName = hero:getName()\n\tlocal heroImage = hero:getImage()\n\tlocal heroFrame = hero:getFrame()\n\tlocal heroAngerFull = hero:getAngerFull()\n\tlocal heroAngerClone = hero:getAngerClone()\n\tlocal heroAngerFullUI = hero:getAngerFullUI()\n\tlocal heroAngerCloneUI = hero:getAngerCloneUI()\n\tlocal heroHealth = hero:getHealth()\n\tlocal heroHealthUI = hero:getHealthUI()\n\n\t-- Hide the hero's anger full signal and anger clone UI elements\n\theroAngerFull:setVisible(false)\n\theroAngerClone:setVisible(false)\n\theroAngerFullUI:setVisible(false)\n\theroAngerCloneUI:setVisible(false)\n\n\t-- Apply a grey shader to the hero's image and frame\n\theroImage:setShader(greyShader)\n\theroFrame:setShader(greyShader)\n\n\t-- Update the hero's health UI\n\theroHealthUI:setText(\"Health: \".. heroHealth)", "CodeBleu_score": 19.894204559404443}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tif specialCameraActive then\n\t\tif specialCameraTarget ~= nil then\n\t\t\tlocal x, y = specialCameraTarget.x, specialCameraTarget.y\n\t\t\tlocal dx, dy = x - camera.x, y - camera.y\n\t\t\tlocal dist = math.sqrt(dx * dx + dy * dy)\n\t\t\tlocal speed = math.min(dist / 1000, 100)\n\t\t\tcamera.x = camera.x + dx * speed * dt\n\t\t\tcamera.y = camera.y + dy * speed * dt\n\t\t\tcamera.angle = math.atan2(dy, dx)\n\t\tend\n\telse\n\t\tlocal focusPoint = getFocusPointOfHeros()\n\t\tlocal dx, dy = focusPoint.x - camera.x, focusPoint.y - camera.y\n\t\tlocal dist = math.sqrt(dx * dx + dy * dy)\n\t\tlocal speed = math.min(dist / 1000, 100)\n\t\tcamera.x = camera.x + dx * speed * dt\n\t\tcamera.y = camera.y + dy * speed * dt\n\t\tcamera.angle = math.atan2(dy, dx)\n\tend", "CodeBleu_score": 37.086337919364574}, {"code": "local function moveCamera(dt)\n\t\tif (camera.specialCameraActive) then\n\t\tif (camera.specialCameraTarget == \"focusPoint\") then\n\t\t\tcamera.pos = {camera.pos[1] + (camera.specialCameraTargetPos[1] - camera.pos[1]) * dt * 10, camera.pos[2] + (camera.specialCameraTargetPos[2] - camera.pos[2]) * dt * 10, camera.pos[3] + (camera.specialCameraTargetPos[3] - camera.pos[3]) * dt * 10}\n\t\t\tcamera.target = {camera.target[1] + (camera.specialCameraTargetPos[1] - camera.target[1]) * dt * 10, camera.target[2] + (camera.specialCameraTargetPos[2] - camera.target[2]) * dt * 10, camera.target[3] + (camera.specialCameraTargetPos[3] - camera.target[3]) * dt * 10}\n\t\telseif (camera.specialCameraTarget == \"focusHero\") then\n\t\t\tcamera.pos = {camera.pos[1] + (camera.specialCameraTargetPos[1] - camera.pos[1]) * dt * 10, camera.pos[2] + (camera.specialCameraTargetPos[2] - camera.pos[2]) * dt * 10, camera.pos[3] + (camera.specialCameraTargetPos[3] - camera.pos[3]) * dt * 10}\n\t\t\tcamera.target = {camera.target[1] + (camera.specialCameraTargetPos[1] - camera.target[1]) * dt * 10, camera.target[2] + (camera.specialCameraTargetPos[2] - camera.target[2]) * dt * 10, camera.target[3] + (camera.specialCameraTargetPos[3] - camera.target[3]) * dt * 10}\n\t\tend\n\telseif (camera.activeHeroes) then\n\t\tcamera.pos = {camera.pos[1] + (camera.focusPoint[1] - camera.pos[1]) * dt * 10, camera.pos[2] + (camera.focusPoint[2] - camera.pos[2])", "CodeBleu_score": 21.173512450292165}, {"code": "local function moveCamera(dt)\n\t\tlocal camera = camera\n\tlocal cameraMode = camera.mode\n\tlocal cameraTarget = camera.target\n\tlocal cameraTargetPoint = camera.targetPoint\n\tlocal cameraTargetPointOffset = camera.targetPointOffset\n\tlocal cameraTargetPointOffset2 = camera.targetPointOffset2\n\tlocal cameraTargetPointOffset3 = camera.targetPointOffset3\n\tlocal cameraTargetPointOffset4 = camera.targetPointOffset4\n\tlocal cameraTargetPointOffset5 = camera.targetPointOffset5\n\tlocal cameraTargetPointOffset6 = camera.targetPointOffset6\n\tlocal cameraTargetPointOffset7 = camera.targetPointOffset7\n\tlocal cameraTargetPointOffset8 = camera.targetPointOffset8\n\tlocal cameraTargetPointOffset9 = camera.targetPointOffset9\n\tlocal cameraTargetPointOffset10 = camera.targetPointOffset10\n\tlocal cameraTargetPointOffset11 = camera.targetPointOffset11\n\tlocal cameraTargetPointOffset12 = camera.targetPointOffset12\n\tlocal cameraTargetPointOffset13 = camera.targetPointOffset13\n\tlocal cameraTargetPointOffset14 = camera.targetPointOffset14\n\tlocal cameraTargetPointOffset15 = camera.targetPointOffset15\n\tlocal cameraTargetPointOffset16 = camera.targetPointOffset16\n\tlocal cameraTargetPointOffset17 = camera.targetPointOffset17\n\tlocal cameraTargetPointOffset18 = camera.targetPointOffset18\n\tlocal cameraTargetPointOffset19 = camera.targetPointOffset19\n\tlocal cameraTargetPointOffset20 = camera.targetPointOffset20\n\tlocal cameraTargetPointOffset21 = camera.targetPointOffset21\n\tlocal cameraTargetPointOffset22 = camera.targetPointOffset22\n\tlocal cameraTargetPointOffset23 = camera.targetPointOffset23\n\tlocal cameraTargetPointOffset24 = camera.targetPointOffset24\n\tlocal cameraTargetPointOffset25 = camera.targetPointOffset25\n\tlocal cameraTargetPointOffset26 = camera.targetPointOffset26\n\tlocal cameraTargetPointOffset27 = camera.targetPointOffset27\n\tlocal cameraTargetPointOffset28 = camera.targetPointOffset28\n\tlocal cameraTargetPointOffset29 = camera.targetPointOffset29\n\tlocal cameraTarget", "CodeBleu_score": 11.813129675408465}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor _, hero in pairs(HeroManager.heroes) do\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:setPosition(hero.object:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 22.829852402890584}, {"code": "local function updateParticlePos()\n\t\tfor _, hero in pairs(HeroManager.heroes) do\n\t\tif hero.particle then\n\t\t\thero.particle:SetAbsOrigin(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 19.49284471069444}, {"code": "local function updateParticlePos()\n\t\tfor _, hero in pairs(HeroManager.heroes) do\n\t\tif hero.effectNode then\n\t\t\tlocal pos = hero.object:GetAbsOrigin()\n\t\t\thero.effectNode:SetAbsOrigin(pos)\n\t\tend\n\tend", "CodeBleu_score": 29.11864125216759}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.heroes[self.selectedHero]\n\tlocal race = hero:getRaceType()\n\tif race == \"Knight\" then\n\t\tself.audioPlayer:play(\"Knight_Rotate\")\n\telseif race == \"Archer\" then\n\t\tself.audioPlayer:play(\"Archer_Rotate\")\n\telseif race == \"Mage\" then\n\t\tself.audioPlayer:play(\"Mage_Rotate\")\n\tend", "CodeBleu_score": 45.461898192297205}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.heroes[self.selectedHero]\n\tlocal race = hero:getRace()\n\tif race == \"knight\" then\n\t\taudio.playSound(\"audio/choose_role/knight_rotate.mp3\", false)\n\telseif race == \"archer\" then\n\t\taudio.playSound(\"audio/choose_role/archer_rotate.mp3\", false)\n\telseif race == \"mage\" then\n\t\taudio.playSound(\"audio/choose_role/mage_rotate.mp3\", false)\n\tend", "CodeBleu_score": 40.8668165505857}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.heroes[self.currentHero]\n\tlocal raceType = hero:getRaceType()\n\tif raceType == \"knight\" then\n\t\taudio.playSound(\"audio/knight_rotate.mp3\", false)\n\telseif raceType == \"archer\" then\n\t\taudio.playSound(\"audio/archer_rotate.mp3\", false)\n\telseif raceType == \"mage\" then\n\t\taudio.playSound(\"audio/mage_rotate.mp3\", false)\n\tend", "CodeBleu_score": 41.71806561784715}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\t-- Create and add three heroes to the game\n\tlocal knight = Hero:new(\"Knight\", self.currentLayer, self.knightImage)\n\tknight:setPosition(100, 100)\n\tknight:setIdle()\n\tknight:addToHeroManager()\n\n\tlocal mage = Hero:new(\"Mage\", self.currentLayer, self.mageImage)\n\tmage:setPosition(200, 200)\n\tmage:setIdle()\n\tmage:addToHeroManager()\n\n\tlocal archer = Hero:new(\"Archer\", self.currentLayer, self.archerImage)\n\tarcher:setPosition(300, 300)\n\tarcher:setIdle()\n\tarcher:addToHeroManager()", "CodeBleu_score": 44.50561249902621}, {"code": "function GameMaster:AddHeros()\n\t\t-- Create the heroes\n\tlocal knight = Hero:new{\n\t\tname = \"Knight\",\n\t\tlevel = 1,\n\t\thealth = 100,\n\t\tdamage = 10,\n\t\tspeed = 10,\n\t\tsprite = \"knight\",\n\t\tsprite_width = 16,\n\t\tsprite_height = 16,\n\t\tsprite_offset_x = 0,\n\t\tsprite_offset_y = 0,\n\t\tsprite_sheet = \"sprites.png\",\n\t\tsprite_sheet_width = 16,\n\t\tsprite_sheet_height = 16,\n\t\tsprite_sheet_offset_x = 0,\n\t\tsprite_sheet_offset_y = 0,\n\t\tsprite_sheet_columns = 1,\n\t\tsprite_sheet_rows = 1,\n\t\tsprite_sheet_frames = 1,\n\t\tsprite_sheet_frame_width = 16,\n\t\tsprite_sheet_frame_height = 16,\n\t\tsprite_sheet_frame_offset_x = 0,\n\t\tsprite_sheet_frame_offset_y = 0,\n\t\tsprite_sheet_frame_columns = 1,\n\t\tsprite_sheet_frame_rows = 1,\n\t\tsprite_sheet_frame_frames = 1,\n\t\tsprite_sheet_frame_frame_width = 16,\n\t\tsprite_sheet_frame_frame_height = 16,\n\t\tsprite_sheet_frame_frame_offset_x = 0,\n\t\tsprite_sheet_frame_frame_offset_y = 0,\n\t\tsprite_sheet_frame_frame_columns = 1,\n\t\tsprite_sheet_frame_frame_rows = 1,\n\t\tsprite_sheet_frame_frame_frames = 1,\n\t\tsprite_sheet_frame_frame_frame_width = 16,\n\t\tsprite_sheet_frame_frame_frame_height = 16,\n\t\tsprite_sheet_frame_frame_frame_offset_x = 0,\n\t\tsprite_sheet_frame_frame_frame_offset_y = 0,\n\t\tsprite_sheet_frame_frame_frame_columns = 1,\n\t\tsprite_sheet_frame_frame_frame_rows", "CodeBleu_score": 10.149158376188371}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = HeroManager:CreateHero(\"knight\")\n\tknight:SetPosition(100, 100)\n\tknight:AddToLayer(self.currentLayer)\n\tknight:SetState(HeroState.Idle)\n\tself.heroList:Push(knight)\n\n\tlocal mage = HeroManager:CreateHero(\"mage\")\n\tmage:SetPosition(200, 200)\n\tmage:AddToLayer(self.currentLayer)\n\tmage:SetState(HeroState.Idle)\n\tself.heroList:Push(mage)\n\n\tlocal archer = HeroManager:CreateHero(\"archer\")\n\tarcher:SetPosition(300, 300)\n\tarcher:AddToLayer(self.currentLayer)\n\tarcher:SetState(HeroState.Idle)\n\tself.heroList:Push(archer)", "CodeBleu_score": 45.77971498490666}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new()\n\tboss.position = Vector2(self.camera.position.x + 100, self.camera.position.y + 100)\n\tboss.facing = Vector2(1, 0)\n\tboss.AI = false\n\tboss.layer = self.layer\n\tself.layer:insert(boss)\n\tboss:bounceOut()\n\tboss.AI = true\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 37.91264067099461}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new()\n\tboss:setCameraMask(2)\n\tself.currentLayer:add(boss)\n\tboss.x = 200\n\tboss.y = 200\n\tboss.facing = 1\n\tboss.aiEnabled = false\n\tboss:performBounceOut()\n\tboss.aiEnabled = true\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 29.849944714053166}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat.new(self.layer)\n\tboss:setCameraMask(2)\n\tboss:setPosition(self.game.world:getWidth()/2, self.game.world:getHeight()/2)\n\tboss:setFacingDirection(FacingDirection.DOWN)\n\tboss:setAI(false)\n\tboss:performBounceOut()\n\tboss:setAI(true)\n\tself.monsters:add(boss)", "CodeBleu_score": 31.680215603908835}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tlocal animate3d = Animate3D(animation, begin, finish)\n\tanimate3d.speed = speed\n\treturn animate3d", "CodeBleu_score": 36.22606359655329}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tlocal animate = Animate3D(animation, begin, finish)\n\tanimate.speed = speed\n\treturn animate", "CodeBleu_score": 33.17100108991521}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tlocal animate3d = Animate3D(animation, begin, finish)\n\tanimate3d:setSpeed(speed)\n\treturn animate3d", "CodeBleu_score": 38.12522769650265}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do\n\t\ttable[k] = nil\n\tend", "CodeBleu_score": 37.457832536187205}, {"code": "function removeAll(table)\n\t\tfor i = #table, 1, -1 do \n\t\ttable[i] = nil \n\tend ", "CodeBleu_score": 33.03433980106853}, {"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do \n\t\ttable[k] = nil \n\tend ", "CodeBleu_score": 37.5225396286282}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callFunc = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delayAction, callFunc)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.61998106460733}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal seq = cc.Sequence:create(delayAction, cc.CallFunc:create(func))\n\ttarget:runAction(seq)", "CodeBleu_score": 63.34622796470596}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callFunc = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delayAction, callFunc)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.61998106460733}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = display.newText(\"Loading...\", 0, 0, native.systemFontBold, 30)\n\tloadingText:setFillColor(0, 0, 0)\n\tloadingText.x = display.contentCenterX\n\tloadingText.y = display.contentCenterY\n\tlayer:insert(loadingText)\n\tself._loading = loadingText", "CodeBleu_score": 17.6213640451777}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = display.newText( \"Loading...\", 0, 0, native.systemFontBold, 18 )\n\tloadingText:setFillColor( 0.5, 0.5, 0.5 )\n\tloadingText.x = display.contentWidth / 2\n\tloadingText.y = display.contentHeight / 2\n\tlayer:insert( loadingText )\n\tself._loading = loadingText", "CodeBleu_score": 18.190391453614012}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = display.newText( \"Loading...\", 0, 0, native.systemFontBold, 20 )\n\tloadingText.x = display.contentCenterX\n\tloadingText.y = display.contentCenterY\n\tloadingText.anchorX = 0.5\n\tloadingText.anchorY = 0.5\n\tlayer:insert(loadingText)\n\tself._loading = loadingText", "CodeBleu_score": 17.83599643138408}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\t-- Create a scene object\n\tlocal scene = display.newGroup()\n\n\t-- Create a layer to hold the background image\n\tlocal background = display.newImageRect( \"images/background.png\", 320, 480 )\n\tbackground.x = display.contentCenterX\n\tbackground.y = display.contentCenterY\n\tscene:insert( background )\n\n\t-- Create a layer to hold the title\n\tlocal title = display.newImageRect( \"images/title.png\", 320, 100 )\n\ttitle.x = display.contentCenterX\n\ttitle.y = 50\n\tscene:insert( title )\n\n\t-- Create a layer to hold the play button\n\tlocal playButton = display.newImageRect( \"images/playButton.png\", 100, 50 )\n\tplayButton.x = display.contentCenterX\n\tplayButton.y = display.contentCenterY\n\tscene:insert( playButton )\n\n\t-- Create a layer to hold the quit button\n\tlocal quitButton = display.newImageRect( \"images/quitButton.png\", 100, 50 )\n\tquitButton.x = display.contentCenterX\n\tquitButton.y = display.contentCenterY + 70\n\tscene:insert( quitButton )\n\n\t-- Create a layer to hold the high score label\n\tlocal highScoreLabel = display.newText( \"High Score: \".. HighScore, 0, 0, native.systemFontBold, 20 )\n\thighScoreLabel.x = display.contentCenterX\n\thighScoreLabel.y = display.contentCenterY + 140\n\tscene:insert( highScoreLabel )\n\n\t-- Create a layer to hold the high score label\n\tlocal highScoreLabel = display.newText( \"High Score: \".. HighScore, 0, 0, native.systemFontBold, 20 )\n\thighScoreLabel.x = display.contentCenterX\n\thighScoreLabel.y = display.contentCenterY + 140\n\tscene:insert( highScoreLabel )\n\n\t-- Create a layer to hold the high score label\n\tlocal highScoreLabel = display.newText( \"High Score: \".. High", "CodeBleu_score": 44.13008526304052}, {"code": "function MainMenuScene.create()\n\t\t-- Create a new scene object\n\tlocal scene = display.newScene()\n\n\t-- Add a background image\n\tlocal background = display.newImage(\"images/background.png\")\n\tbackground:setReferencePoint( display.TopLeftReferencePoint )\n\tbackground.x = 0\n\tbackground.y = 0\n\tscene:insert(background)\n\n\t-- Add a title image\n\tlocal title = display.newImage(\"images/title.png\")\n\ttitle:setReferencePoint( display.TopLeftReferencePoint )\n\ttitle.x = 0\n\ttitle.y = 0\n\tscene:insert(title)\n\n\t-- Add a play button\n\tlocal playButton = widget.newButton{\n\t\tlabel = \"Play\",\n\t\tlabelColor = { default={255}, over={128} },\n\t\tdefaultFile = \"images/button.png\",\n\t\toverFile = \"images/button-over.png\",\n\t\twidth = 154, height = 40,\n\t\tonRelease = function()\n\t\t\t-- Go to the game scene\n\t\t\tdirector:changeScene(\"game\")\n\t\tend\n\t}\n\tplayButton:setReferencePoint( display.CenterReferencePoint )\n\tplayButton.x = display.contentWidth/2\n\tplayButton.y = display.contentHeight/2 + 50\n\tscene:insert(playButton)\n\n\t-- Add a high scores button\n\tlocal highScoresButton = widget.newButton{\n\t\tlabel = \"High Scores\",\n\t\tlabelColor = { default={255}, over={128} },\n\t\tdefaultFile = \"images/button.png\",\n\t\toverFile = \"images/button-over.png\",\n\t\twidth = 154, height = 40,\n\t\tonRelease = function()\n\t\t\t-- Go to the high scores scene\n\t\t\tdirector:changeScene(\"highScores\")\n\t\tend\n\t}\n\thighScoresButton:setReferencePoint( display.CenterReferencePoint )\n\thighScoresButton.x = display.contentWidth/2\n\thighScoresButton.y = display.contentHeight/2 + 100\n\tscene:insert(highScoresButton)\n\n\t-- Add a quit button\n\tlocal quitButton = widget.newButton{\n\t\tlabel =", "CodeBleu_score": 44.29804159688902}, {"code": "function MainMenuScene.create()\n\t\tlocal sceneGroup = display.newGroup()\n\tlocal scene = composer.newScene()\n\tlocal title\n\tlocal button1\n\tlocal button2\n\tlocal button3\n\tlocal button4\n\tlocal button5\n\tlocal button6\n\tlocal button7\n\tlocal button8\n\tlocal button9\n\tlocal button10\n\tlocal button11\n\tlocal button12\n\tlocal button13\n\tlocal button14\n\tlocal button15\n\tlocal button16\n\tlocal button17\n\tlocal button18\n\tlocal button19\n\tlocal button20\n\tlocal button21\n\tlocal button22\n\tlocal button23\n\tlocal button24\n\tlocal button25\n\tlocal button26\n\tlocal button27\n\tlocal button28\n\tlocal button29\n\tlocal button30\n\tlocal button31\n\tlocal button32\n\tlocal button33\n\tlocal button34\n\tlocal button35\n\tlocal button36\n\tlocal button37\n\tlocal button38\n\tlocal button39\n\tlocal button40\n\tlocal button41\n\tlocal button42\n\tlocal button43\n\tlocal button44\n\tlocal button45\n\tlocal button46\n\tlocal button47\n\tlocal button48\n\tlocal button49\n\tlocal button50\n\tlocal button51\n\tlocal button52\n\tlocal button53\n\tlocal button54\n\tlocal button55\n\tlocal button56\n\tlocal button57\n\tlocal button58\n\tlocal button59\n\tlocal button60\n\tlocal button61\n\tlocal button62\n\tlocal button63\n\tlocal button64\n\tlocal button65\n\tlocal button66\n\tlocal button67\n\tlocal button68\n\tlocal button69\n\tlocal button70\n\tlocal button71\n\tlocal button72\n\tlocal button73\n\tlocal button74\n\tlocal button75\n\tlocal button76\n\tlocal button77\n\tlocal button78\n\tlocal button79\n\tlocal button80\n\tlocal button81\n\tlocal button82\n\tlocal button8", "CodeBleu_score": 20.871075873692075}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\t-- Check for collision between object and heroes\n\tfor i, hero in ipairs(HeroManager:getHeroes()) do\n\t\tif hero.dead == false then\n\t\t\tif object.x + object.width > hero.x and object.x < hero.x + hero.width and object.y + object.height > hero.y and object.y < hero.y + hero.height then\n\t\t\t\tsolveCollision(object, hero)\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- Check for collision between object and monsters\n\tfor i, monster in ipairs(MonsterManager:getMonsters()) do\n\t\tif monster.dead == false then\n\t\t\tif object.x + object.width > monster.x and object.x < monster.x + monster.width and object.y + object.height > monster.y and object.y < monster.y + monster.height then\n\t\t\t\tsolveCollision(object, monster)\n\t\t\tend\n\t\tend\n\tend\n", "CodeBleu_score": 39.79234051234079}, {"code": "local function collision(object)\n\n\t\t-- HeroManager and MonsterManager are the managers of all alive heroes and monsters, respectively.\n\tfor _, hero in pairs(HeroManager:getHeroes()) do\n\t\tif hero.dead == false then\n\t\t\tif object.collision(object, hero) then\n\t\t\t\tsolveCollision(object, hero)\n\t\t\tend\n\t\tend\n\tend\n\t\n\tfor _, monster in pairs(MonsterManager:getMonsters()) do\n\t\tif monster.dead == false then\n\t\t\tif object.collision(object, monster) then\n\t\t\t\tsolveCollision(object, monster)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 32.291638032926905}, {"code": "local function collision(object)\n\n\t\tfor i, hero in ipairs(HeroManager.heroes) do\n\t\tif object.name == \"Hero\" and hero.name ~= object.name then\n\t\t\tif object.x + object.width > hero.x and object.x < hero.x + hero.width and object.y + object.height > hero.y and object.y < hero.y + hero.height then\n\t\t\t\tsolveCollision(object, hero)\n\t\t\tend\n\t\tend\n\tend\n\n\tfor i, monster in ipairs(MonsterManager.monsters) do\n\t\tif object.name == \"Monster\" and monster.name ~= object.name then\n\t\t\tif object.x + object.width > monster.x and object.x < monster.x + monster.width and object.y + object.height > monster.y and object.y < monster.y + monster.height then\n\t\t\t\tsolveCollision(object, monster)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 39.641466480369864}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].alive then\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif MonsterManager[j].alive then\n\t\t\t\t\tif checkCollision(HeroManager[i].x, HeroManager[i].y, HeroManager[i].width, HeroManager[i].height, MonsterManager[j].x, MonsterManager[j].y, MonsterManager[j].width, MonsterManager[j].height) then\n\t\t\t\t\t\tHeroManager[i].alive = false\n\t\t\t\t\t\tMonsterManager[j].alive = false\n\t\t\t\t\t\tHeroManager[i].score = HeroManager[i].score + 1\n\t\t\t\t\t\tHeroManager[i].scoreText = display.newText(HeroManager[i].score, HeroManager[i].x, HeroManager[i].y, native.systemFont, 100)\n\t\t\t\t\t\tHeroManager[i].scoreText:setFillColor(0,0,0)\n\t\t\t\t\t\tHeroManager[i].scoreText.isVisible = true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\tfor i=#MonsterManager,1,-1 do\n\t\tif MonsterManager[i].alive then\n\t\t\tif checkCollision(HeroManager[1].x, HeroManager[1].y, HeroManager[1].width, HeroManager[1].height, MonsterManager[i].x, MonsterManager[i].y, MonsterManager[i].width, MonsterManager[i].height) then\n\t\t\t\tMonsterManager[i].alive = false\n\t\t\t\tHeroManager[1].alive = false\n\t\t\t\tHeroManager[1].score = HeroManager[1].score - 1\n\t\t\t\tHeroManager[1].scoreText = display.newText(HeroManager[1].score, HeroManager[1].x, HeroManager[1].y, native.systemFont, 100)\n\t\t\t\tHeroManager[1].scoreText:setFillColor(0,0,0)\n\t\t\t\tHeroManager[1].scoreText.isVisible = true\n\t\t\tend\n\t\tend\n\tend\n\n\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].alive then\n\t\t\tif checkCollision(HeroManager[i].x, HeroManager[i].y, HeroManager[i].width, HeroManager[i].height", "CodeBleu_score": 36.81064068884682}, {"code": "function collisionDetect(dt)\n\t\tfor i = #HeroManager, 1, -1 do\n\t\tif HeroManager[i].alive then\n\t\t\tfor j = #MonsterManager, 1, -1 do\n\t\t\t\tif MonsterManager[j].alive then\n\t\t\t\t\tif collision(HeroManager[i], MonsterManager[j]) then\n\t\t\t\t\t\tHeroManager[i]:collision(MonsterManager[j])\n\t\t\t\t\t\tMonsterManager[j]:collision(HeroManager[i])\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 21.66742392540354}, {"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].isAlive then\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif MonsterManager[j].isAlive then\n\t\t\t\t\tif (HeroManager[i].collision(MonsterManager[j])) then\n\t\t\t\t\t\tHeroManager[i].isAlive = false\n\t\t\t\t\t\tMonsterManager[j].isAlive = false\n\t\t\t\t\t\tHeroManager[i].score = HeroManager[i].score + 1\n\t\t\t\t\t\tHeroManager[i].numOfMonsterKilled = HeroManager[i].numOfMonsterKilled + 1\n\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = HeroManager[i].numOfMonsterKilledThisRound + 1\n\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = HeroManager[i].numOfMonsterKilledThisRound % 10\n\t\t\t\t\t\tif (HeroManager[i].numOfMonsterKilledThisRound == 0) then\n\t\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = 10\n\t\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = HeroManager[i].numOfMonsterKilledThisRound % 10\n\t\t\t\t\t\t\tHeroManager[i].score = HeroManager[i].score + 10\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif (HeroManager[i].numOfMonsterKilledThisRound == 0) then\n\t\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = 10\n\t\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = HeroManager[i].numOfMonsterKilledThisRound % 10\n\t\t\t\t\t\t\tHeroManager[i].score = HeroManager[i].score + 100\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif (HeroManager[i].numOfMonsterKilledThisRound == 0) then\n\t\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = 10\n\t\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = HeroManager[i].numOfMonsterKilledThisRound % 10\n\t\t\t\t\t\t\tHeroManager[i].score = HeroManager[i].score + 1000\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif (HeroManager[i].numOfMonsterKilledThisRound == 0) then\n\t\t\t\t\t\t\tHeroManager[i].numOfMonsterKilledThisRound = 10\n\t\t\t\t\t\t\tHeroManager", "CodeBleu_score": 21.64394859854489}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tif self.specialAttackTimer > 0 then\n\t\treturn\n\tend\n\n\tself.specialAttackTimer = 0.5\n\n\tlocal x, y = self.x, self.y\n\tlocal dir = self.direction\n\tlocal specialAttack = self.specialAttack\n\tlocal specialAttackSound = self.specialAttackSound\n\tlocal specialAttackCollider = self.specialAttackCollider\n\n\tlocal attackProperties = specialAttack[specialAttackSound]\n\n\tlocal attack = {\n\t\tx = x,\n\t\ty = y,\n\t\twidth = attackProperties.width,\n\t\theight = attackProperties.height,\n\t\tdirection = dir,\n\t\tdamage = attackProperties.damage,\n\t\tspeed = attackProperties.speed,\n\t\tduration = attackProperties.duration,\n\t\tsound = attackProperties.sound,\n\t\tsoundVolume = attackProperties.soundVolume,\n\t\tsoundPitch = attackProperties.soundPitch,\n\t\tsoundPan = attackProperties.soundPan\n\t}\n\n\tlocal attackCollider = Collider:new(attack)\n\n\tattackCollider:update(self.x, self.y)\n\tattackCollider:draw()\n\n\tself.specialAttackColliders[specialAttackSound] = attackCollider", "CodeBleu_score": 44.66273362568442}, {"code": "function Actor:specialAttack()\n\t\t--Create a collider at the actor's current position and facing direction\n\tlocal collider = Collider:new(self.x, self.y, self.facing, self.attackProperties)\n\t--Play the associated sound effect\n\tif self.attackProperties.sound then\n\t\tlove.audio.play(self.attackProperties.sound)\n\tend\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to the list of colliders\n\ttable.insert(colliders, collider)\n\t--Add the collider to", "CodeBleu_score": 40.9178790963886}, {"code": "function Actor:specialAttack()\n\t\tlocal attackCollider = self:createCollider(self.specialAttackProperties.colliderType, self.specialAttackProperties.colliderProperties, self.specialAttackProperties.colliderProperties.x, self.specialAttackProperties.colliderProperties.y)\n\tself:playSpecialAttackSound()\n\tattackCollider.onCollide = function(collider, otherCollider)\n\t\tif otherCollider.tag == \"Enemy\" then\n\t\t\totherCollider.health = otherCollider.health - self.specialAttackProperties.damage\n\t\tend\n\tend", "CodeBleu_score": 34.08811778752081}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif self.angry == trueFalse then return end\n\tself.angry = trueFalse\n\tself.sprite:setTexture(self.angry and \"angry\" or \"normal\")", "CodeBleu_score": 34.955741897916226}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true and self.angryFace == false then\n\t\tself.angryFace = true\n\t\tself.sprite:setTexture(self.angryTexture)\n\telseif trueFalse == false and self.angryFace == true then\n\t\tself.angryFace = false\n\t\tself.sprite:setTexture(self.normalTexture)\n\tend", "CodeBleu_score": 43.395428845871784}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true and self.state ~= \"angry\" then\n\t\tself.state = \"angry\"\n\t\tself.sprite:setTexture(self.angryTexture)\n\telseif trueFalse == false and self.state ~= \"normal\" then\n\t\tself.state = \"normal\"\n\t\tself.sprite:setTexture(self.normalTexture)\n\tend", "CodeBleu_score": 44.2940342450428}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\nvar width = paint.measureText(symbolString).toInt()\nvar height = ceil(metric.height).toInt()\nif (width == 0) {\nheight = getFontSize()\nwidth = height\n}\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(symbolString, 0f, metric.leading + metric.ascent + 1f, paint)\n\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\nval data = IntArray(width * height)\nbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\nfor (x in 0 until width) {\nfor (y in 0 until height) {\npixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n}\n}\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 95.24192958119274}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\nvar width = paint.measureText(char.toString()).toInt()\nvar height = ceil(metric.height).toInt()\nif (width == 0) {\nheight = getFontSize()\nwidth = height\n}\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\nval data = IntArray(width * height)\nbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\nfor (x in 0 until width) {\nfor (y in 0 until height) {\npixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n}\n}\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 85.1719151294859}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\nvar width = paint.measureText(symbolString).toInt()\nvar height = ceil(metric.height).toInt()\nif (width == 0) {\nheight = getFontSize()\nwidth = height\n}\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(symbolString, 0f, metric.leading + metric.ascent + 1f, paint)\n\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\nval data = IntArray(width * height)\nbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\nfor (x in 0 until width) {\nfor (y in 0 until height) {\npixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n}\n}\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 95.24192958119274}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t", "CodeBleu_score": 19.371400902165885}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n/**\n * The function loadGame(onLoaded: (data: String, location: String) -> Unit, onError: (ex: Exception) -> Unit) loads game data from a user-selected file. It defines a callback to handle file selection, attempts to read the file's content, and invokes onLoaded with the data and file location if successful, or onError if an exception occurs. The function opens a file chooser for the user to select the file to load.\n */\n        val onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.03406591579981}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\nval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.34809681996134}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\nintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.75518805287992}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\nintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.75518805287992}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\nintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.75518805287992}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t\n}", "CodeBleu_score": 1.1719733888811363}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t\tpackImagesPerMod(workingPath, \"$workingPath/assets/\", getDefaultSettings())\n\tval modDirectory = File(\"mods\")\n\tif (!modDirectory.exists())\n\t\treturn\n\tfor (mod in modDirectory.listFiles()!!) {\n\t\tif (mod.isHidden)\n\t\t\tcontinue\n\t\ttry {\n\t\t\tpackImagesPerMod(mod.path, mod.path, getDefaultSettings())\n\t\t} catch (ex: Throwable) {\n\t\t\tex.printStackTrace()\n\t\t}\n\t}\n}", "CodeBleu_score": 74.02665413616121}, {"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}, {"code": "fun packImages(workingPath: String){\n\t\tval defaultSettings = getDefaultSettings()\n\tpackImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\tval modDirectory = File(\"mods\")\n\tif (!modDirectory.exists())\n\t\treturn\n\tfor (mod in modDirectory.listFiles()!!) {\n\t\tif (mod.isHidden)\n\t\t\tcontinue\n\t\ttry {\n\t\t\tpackImagesPerMod(mod.path, mod.path, defaultSettings)\n\t\t} catch (ex: Throwable) {\n\t\t\tex.printStackTrace()\n\t\t}\n\t}\n}", "CodeBleu_score": 93.13749024180771}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t   val workingPath = File(System.getProperty(\"user.dir\"))\n//    packImages(workingPath.absolutePath)\n\n    if (worldScreen!= null) {\n        worldScreen!!.dispose()\n        worldScreen = null\n    }\n\n    val worldScreen = loadGame(gameInfo!!, AutoPlay(settings.autoPlay))\n    screenStack.addLast(worldScreen)\n    setScreen(worldScreen)\n}", "CodeBleu_score": 35.49552050948359}, {"code": "suspend fun reloadWorldscreen(){\n\t", "CodeBleu_score": 3.349436022099892}, {"code": "suspend fun reloadWorldscreen(){\n\t   val worldScreen = worldScreen?: throw UncivShowableException(\"No world screen to reload!\")\n    val worldScreen = worldScreen?: throw UncivShowableException(\"No world screen to reload!\")\n    worldScreen.reload()\n}", "CodeBleu_score": 28.224779574567826}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t   if (deepLinkedMultiplayerGame!= null) {\n//        setAsRootScreen(MainMenuScreen())\n//        return\n//    }\n\n    // If we're in a multiplayer game, we don't want to go to the main menu, we want to go back to the game\n    if (deepLinkedMultiplayerGame!= null) {\n        deepLinkedMultiplayerGame.goToMainMenu()\n        return MainMenuScreen()\n    }\n\n    if (Gdx.app.type!= Application.ApplicationType.Desktop) {\n        return MainMenuScreen()\n    }\n\n    if (Gdx.app.type == Application.ApplicationType.Desktop) {\n        // If we're in a game, we want to go to the main menu, so we can start a new game.\n        // If we're in a multiplayer game, we don't want to go to the main menu, we want to go back to the game\n        setAsRootScreen(MainMenuScreen())\n    }\n    return MainMenuScreen()\n}", "CodeBleu_score": 30.79349436020547}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tl mainMenuScreen = MainMenuScreen()\n\tsetAsRootScreen(mainMenuScreen)\n\treturn mainMenuScreen\n}", "CodeBleu_score": 26.86142790000107}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tl mainMenuScreen = MainMenuScreen()\n\tpushScreen(mainMenuScreen)\n\treturn mainMenuScreen\n}", "CodeBleu_score": 32.10704512968437}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t // Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n // *for the primary monitor* - no saving window sizes that span over several monitors\n val maximumWindowBounds = getMaximumWindowBounds()\n\n // Make sure an inappropriate saved size doesn't make the window unusable\n val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n isAccessible = true\n get(Gdx.app) as Lwjgl3ApplicationConfiguration\n }.setWindowedMode(width, height)\n\n Gdx.graphics.setWindowedMode(width, height)\n\n return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n }", "CodeBleu_score": 97.83517440925759}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n    isAccessible = true\n    get(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.7092336475477}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n    isAccessible = true\n    get(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.7092336475477}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\tRelease: Map<String,String> = try {\n\t\tFileHandle(\"/etc/os-release\")\n\t\t\t.readString()\n\t\t\t.split('\n')\n\t\t\t.map { it.split('=') }\n\t\t\t.filter { it.size == 2 }\n\t\t\t.associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n\t} catch (_: Throwable) { mapOf() }\n\tif (\"NAME\"!in osRelease) return \"\"\n\treturn osRelease[\"PRETTY_NAME\"]?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 81.65665497767039}, {"code": "private fun getLinuxDistro(): String{\n\tRelease: Map<String, String> = try {\n\t\tFileHandle(\"/etc/os-release\").readString().split('\n').map { it.split('=') }.filter { it.size == 2 }.associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n\t} catch (_: Throwable) {\n\t\tmapOf()\n\t}\n\tif (\"NAME\"!in osRelease) return \"\"\n\treturn osRelease[\"PRETTY_NAME\"]?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 74.36604018459032}, {"code": "private fun getLinuxDistro(): String{\n\tRelease: Map<String,String> = try {\n\t\tFileHandle(\"/etc/os-release\")\n\t\t\t.readString()\n\t\t\t.split('\n')\n\t\t\t.map { it.split('=') }\n\t\t\t.filter { it.size == 2 }\n\t\t\t.associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n\t} catch (_: Throwable) { mapOf() }\n\tif (\"NAME\"!in osRelease) return \"\"\n\treturn osRelease[\"PRETTY_NAME\"]?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 81.65665497767039}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t\tif (isWindows) {\n\t\tval hwnd = getWindowHandle()\n\t\tif (hwnd!= 0L) {\n\t\t\tval flashWindow = getFlashWindow()\n\t\t\tif (flashWindow!= null) {\n\t\t\t\tflashWindow(hwnd)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 15.758429788158889}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\tif (System.getProperty(\"os.name\").toLowerCase(Locale.ROOT).contains(\"win\")) {\n\t\t\t// Windows\n\t\t\tval hwnd = getWindowHandle()\n\t\t\tif (hwnd!= 0) {\n\t\t\t\tval flashCount = 3\n\t\t\t\tval flashFlags = FLASHW_ALL or FLASHW_TIMERNOFG\n\t\t\t\tval flashResult = FlashWindowEx(\n\t\t\t\t\tFLASHWINFO().apply {\n\t\t\t\t\t\tcbSize = sizeOf<FLASHWINFO>().toInt()\n\t\t\t\t\t\thwnd = hwnd\n\t\t\t\t\t\tdwFlags = flashFlags\n\t\t\t\t\t\tuCount = flashCount\n\t\t\t\t\t\tdwTimeout = 0\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t\tif (flashResult == 0) {\n\t\t\t\t\tval errorCode = GetLastError()\n\t\t\t\t\tlog.error(\"FlashWindowEx failed with error code $errorCode\")\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.error(\"Failed to get window handle for flashing\")\n\t\t\t}\n\t\t} else if (System.getProperty(\"os.name\").toLowerCase(Locale.ROOT).contains(\"mac\")) {\n\t\t\t// MacOS\n\t\t\tval app = NSApplication.sharedApplication()\n\t\t\tapp.activateIgnoringOtherApps(true)\n\t\t\tapp.requestUserAttention(.critical)\n\t\t} else if (System.getProperty(\"os.name\").toLowerCase(Locale.ROOT).contains(\"linux\")) {\n\t\t\t// Linux\n\t\t\tval window = windowManager.primaryWindow\n\t\t\tif (window!= null) {\n\t\t\t\twindow.flash()\n\t\t\t}\n\t\t}\n\t} catch (e: Throwable) {\n\t\tlog.error(\"Error while flashing window\", e)\n\t}\n}", "CodeBleu_score": 48.54127872607807}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\tval window = getWindow()\n\t\tif (window!= null) {\n\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t\t\t\twindow.flashlight()\n\t\t\t} else {\n\t\t\t\twindow.flash()\n\t\t\t}\n\t\t}\n\t} catch (e: Exception) {\n\t\tLog.e(TAG, \"Failed to flash window: $e\")\n\t}\n}", "CodeBleu_score": 22.22763450193381}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t//Log.d(TAG, \"onFullBackup\");\n\tFile file = getFile(mBackupDir, mBackupFileName);\n\tif (file!= null){\n\t\t//Log.d(TAG, \"onFullBackup: file exists\");\n\t\ttry {\n\t\t\tdata.openFileOutput(file);\n\t\t\tdata.write(mBackupData);\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 16.030892751151033}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\tFile base = new File(getFilesDir(), \"data\");\n\tFile file = getFile(base, \"sharedprefs.xml\");\n\tif (file!= null){\n\t\tdata.write(file);\n\t}\n\tfile = getFile(base, \"rankings.xml\");\n\tif (file!= null){\n\t\tdata.write(file);\n\t}\n\tfile = getFile(base, \"badges.xml\");\n\tif (file!= null){\n\t\tdata.write(file);\n\t}\n\tfile = getFile(base, \"journal.xml\");\n\tif (file!= null){\n\t\tdata.write(file);\n\t}\n}", "CodeBleu_score": 28.792688415721834}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n\treturn activeNetwork!= null && activeNetwork.isConnected() &&!activeNetwork.isRoaming();\n}", "CodeBleu_score": 31.47997097232923}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tboolean connectedToUnmeteredNetwork = false;\n\n\tConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n\n\tif (activeNetworkInfo!= null && activeNetworkInfo.isConnected()) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\t\tconnectedToUnmeteredNetwork = connectivityManager.isActiveNetworkMetered();\n\t\t} else {\n\t\t\tif (activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI || activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIMAX || activeNetworkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET) {\n\t\t\t\tconnectedToUnmeteredNetwork = true;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn connectedToUnmeteredNetwork;\n}", "CodeBleu_score": 53.21434502566541}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\treturn cm.isActiveNetworkMetered();\n\t} else {\n\t\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\t\tif (activeNetwork!= null && activeNetwork.isConnected()) {\n\t\t\tint type = activeNetwork.getType();\n\t\t\tif (type == ConnectivityManager.TYPE_WIFI || type == ConnectivityManager.TYPE_WIMAX || type == ConnectivityManager.TYPE_BLUETOOTH || type == ConnectivityManager.TYPE_ETHERNET) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 60.26622113853222}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\thero.heal( 100 );\n\t\thero.playSound( \"heal\" );\n\t\thero.cureAilments();\n\t\thero.removeCurses();\n\t\thero.satisfyHunger();\n\t\thero.heal( 100 );\n\t\thero.displayVisualEffect( \"heal\" );\n\t\thero.interruptAction();\n\t\thero.log( \"You have been healed.\" );\n\t\treturn true;\n\t}\n\telse {\n\t\thero.log( \"You are already dead.\" );\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 18.74006399316375}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif( item.isIdentified() &&!item.isCursed() ) {\n\t\tif( item.isWaterskin() ) {\n\t\t\tif( item.getQuantity() < item.getMaxQuantity() ) {\n\t\t\t\titem.setQuantity( item.getQuantity() + 1 );\n\t\t\t\treturn item;\n\t\t\t}\n\t\t} else if( item.isAnkh() ) {\n\t\t\tif(!item.isBlessed() ) {\n\t\t\t\titem.setBlessed( true );\n\t\t\t\treturn item;\n\t\t\t}\n\t\t} else if( item.isUncursed() ) {\n\t\t\titem.setCursed( false );\n\t\t\treturn item;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 31.265857542066716}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif( item == null ) {\n\t\treturn null;\n\t}\n\tif( item.isWaterskin() ) {\n\t\tif( item.isFull() ) {\n\t\t\treturn null;\n\t\t}\n\t\titem.setFull( true );\n\t\treturn item;\n\t}\n\tif( item.isAnkh() ) {\n\t\tif( item.isBlessed() ) {\n\t\t\treturn null;\n\t\t}\n\t\titem.setBlessed( true );\n\t\treturn item;\n\t}\n\tif( item.isCursed() ) {\n\t\tif(!item.isUncurable() ) {\n\t\t\treturn null;\n\t\t}\n\t\titem.setCursed( false );\n\t\treturn item;\n\t}\n\treturn null;\n}", "CodeBleu_score": 22.78872657249657}, {"code": "protected Item affectItem( Item item, int pos ){\n\t", "CodeBleu_score": 5.531172364104125}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.isEnemy()) {\n\t\thero.getHeroStats().getKills().increment();\n\t\tif (buffCls!= null) {\n\t\t\ttry {\n\t\t\t\tenemy.addBuff(buffCls.newInstance());\n\t\t\t} catch (InstantiationException | IllegalAccessException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tint exp = enemy.getLevel() - hero.getLevel();\n\t\tif (exp < 0) {\n\t\t\texp = 0;\n\t\t}\n\t\thero.getHeroStats().getExp().add(exp);\n\t\tif (hero instanceof Monk) {\n\t\t\thero.getHeroStats().getEnergy().add(exp);\n\t\t}\n\t\tint loot = enemy.getLevel();\n\t\tif (loot > 10) {\n\t\t\tloot = 10;\n\t\t}\n\t\thero.getHeroStats().getLoot().add(loot);\n\t\tif (hero instanceof Monk) {\n\t\t\thero.getHeroStats().getAscensionChallenges().increment();\n\t\t}\n\t}\n}", "CodeBleu_score": 28.275967935318274}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.isEnemy()) {\n\t\tif (hero.getAlignment().equals(enemy.getAlignment())) {\n\t\t\tint loot = hero.rollLoot(enemy);\n\t\t\thero.updateKills(enemy);\n\t\t\thero.updateAscension(enemy);\n\t\t\thero.updateBuff(buffCls);\n\t\t\thero.addExp(enemy.getLevel());\n\t\t}\n\t}\n}", "CodeBleu_score": 16.613947665345258}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\tif (AscensionChallenge.isAscensionChallengeActive()) {\n\t\tif (AscensionChallenge.isAscensionChallengeBuffActive(hero)) {\n\t\t\tif (AscensionChallenge.isAscensionChallengeEnemy(enemy)) {\n\t\t\t\tif (!AscensionChallenge.isAscensionChallengeEnemyBoosted(enemy)) {\n\t\t\t\t\tif (AscensionChallenge.isAscensionChallengeEnemyType(enemy)) {\n\t\t\t\t\t\tAscensionChallenge.reduceAscensionChallengeStacks(AscensionChallenge.getAscensionChallengeEnemyType(enemy));\n\t\t\t\t\t\tAscensionChallenge.logAscensionChallengeWeakening(AscensionChallenge.getAscensionChallengeEnemyType(enemy));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 7.873887321867707}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (AscensionChallenge.isAscensionChallengeActive()) {\n\t\tif (AscensionChallenge.isAscensionChallengeBuffActive()) {\n\t\t\tif (AscensionChallenge.isAscensionChallengeEnemyType(enemy)) {\n\t\t\t\tif (!AscensionChallenge.isAscensionChallengeEnemyBoosted(enemy)) {\n\t\t\t\t\tAscensionChallenge.reduceChallengeStacks(AscensionChallenge.getAscensionChallengeEnemyType(enemy));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tAscensionChallenge.revertAscensionChallengeEnemyType(enemy);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 6.514365134840274}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (m == null)\n\t\treturn 0;\n\tif (m.getAscensionChallenge()!= null) {\n\t\tif (m.getAscensionChallenge().isChallengeActive())\n\t\t\treturn m.getAscensionChallenge().getChallenge().getCorruptionResistance();\n\t\telse\n\t\t\treturn m.getCorruptionResistance();\n\t}\n\tif (m.getAscensionChallenge() == null)\n\t\treturn m.getCorruptionResistance();\n\treturn 0;\n}", "CodeBleu_score": 16.70618314353458}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t", "CodeBleu_score": 2.676826499359523}, {"code": "public void hit( Char enemy ){\n\t", "CodeBleu_score": 2.676826499359523}, {"code": "public void hit( Char enemy ){\n\t", "CodeBleu_score": 2.676826499359523}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\tnt cap = super.capacity();\n\tfor (Item item : items){\n\t\tif (item instanceof Bag){\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero!= null && Dungeon.hero.belongings.secondWep!= null){\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 84.73382461458368}, {"code": "public int capacity(){\n\tnt cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero!= null && Dungeon.hero.belongings.secondWep!= null) {\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 78.4373679809383}, {"code": "public int capacity(){\n\tnt cap = super.capacity();\n\tfor (Item item : items){\n\t\tif (item instanceof Bag){\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero!= null && Dungeon.hero.belongings.secondWep!= null){\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 84.73382461458368}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\tint ht = (int) ( ( ( 100 + ( level - 1 ) ) * 20 ) * ( 1 + ( ( level - 1 ) * 0.05 ) ) );\n\tif ( ht < 1 ) {\n\t\tht = 1;\n\t}\n\tif ( boostHP ) {\n\t\thp = Math.min( hp + ( ( ht - hp ) / 2 ), ht );\n\t}\n\tht = Math.max( 1, ht );\n\tif ( ringOfMight!= null ) {\n\t\tht += ringOfMight.getHTBonus();\n\t}\n\tif ( elixirOfMight!= null ) {\n\t\tht += elixirOfMight.getHTBonus();\n\t}\n\tht = Math.max( 1, ht );\n\tthis.ht = ht;\n}", "CodeBleu_score": 26.20054121305892}, {"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}, {"code": "public void updateHT( boolean boostHP ){\n\t\tint HT = 0;\n\tint level = 0;\n\tint boost = 0;\n\tint boostMultiplier = 0;\n\tint ringOfMight = 0;\n\tint elixirOfMight = 0;\n\tint currentHP = 0;\n\tint maxHP = 0;\n\tint newHP = 0;\n\t\n\tlevel = this.getLevel();\n\tboost = this.getBoost();\n\tboostMultiplier = this.getBoostMultiplier();\n\tringOfMight = this.getRingOfMight();\n\telixirOfMight = this.getElixirOfMight();\n\tcurrentHP = this.getHP();\n\tmaxHP = this.getHT();\n\t\n\t// Base formula\n\tHT = (int)(level * 10 + 10 * boost + 10 * boostMultiplier);\n\t\n\t// Apply RingOfMight and ElixirOfMight buffs\n\tHT += ringOfMight;\n\tHT += elixirOfMight;\n\t\n\t// Apply boost\n\tHT *= boostMultiplier;\n\t\n\t// Apply boost to HP if boostHP is true\n\tif (boostHP) {\n\t\tcurrentHP += HT;\n\t\tcurrentHP = Math.min(currentHP, HT);\n\t}\n\t\n\t// Ensure HP does not exceed the new HT value\n\tif (currentHP > HT) {\n\t\tcurrentHP = HT;\n\t}\n\t\n\t// Update the character's HP and HT\n\tthis.setHP(currentHP);\n\tthis.setHT(HT);\n}", "CodeBleu_score": 29.529662923509193}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tboolean success = false;\n\tif( wep.getAlignment() == Alignment.ENEMY ) {\n\t\tif( wep.attack( enemy ) ) {\n\t\t\tif( this.getClass().equals( Gladiator.class ) || this.getClass().equals( Duelist.class ) ) {\n\t\t\t\twep.setThrown( false );\n\t\t\t\tif( this.getClass().equals( Gladiator.class ) ) {\n\t\t\t\t\tthis.buff( Gladiator.class, 10, 2 );\n\t\t\t\t}\n\t\t\t\telse if( this.getClass().equals( Duelist.class ) ) {\n\t\t\t\t\tthis.buff( Duelist.class, 10, 2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\tsuccess = true;\n\t\t}\n\t}\n\telse if( wep.getAlignment() == Alignment.NEUTRAL ) {\n\t\tif( wep.attack( this ) ) {\n\t\t\tif( this.getClass().equals( Gladiator.class ) || this.getClass().equals( Duelist.class ) ) {\n\t\t\t\twep.setThrown( false );\n\t\t\t\tif( this.getClass().equals( Gladiator.class ) ) {\n\t\t\t\t\tthis.buff( Gladiator.class, 10, 2 );\n\t\t\t\t}\n\t\t\t\telse if( this.getClass().equals( Duelist.class ) ) {\n\t\t\t\t\tthis.buff( Duelist.class, 10, 2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\tsuccess = true;\n\t\t}\n\t}\n\treturn success;\n}", "CodeBleu_score": 16.0098128751957}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif(!wep.isThrown() ) {\n\t\tif(!wep.isAligned() ) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tif( wep.isEnemyAligned() ) {\n\t\t\t\tif( enemy.getCharClass() == CharacterClass.Gladiator || enemy.getCharClass() == CharacterClass.Duelist ) {\n\t\t\t\t\tenemy.setBuff( new MissileWeaponBuff( enemy, wep ) );\n\t\t\t\t\twep.setThrown( true );\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif( enemy.getCharClass() == CharacterClass.Mimic ) {\n\t\t\t\t\tenemy.setBuff( new MissileWeaponBuff( enemy, wep ) );\n\t\t\t\t\twep.setThrown( true );\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 15.6542658730173}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = 0;\n\tif (weapon!= null) {\n\t\tattackSkill = weapon.attackSkill(target);\n\t}\n\tif (attackSkill < 0) {\n\t\tattackSkill = 0;\n\t}\n\treturn attackSkill;\n}", "CodeBleu_score": 9.814359805320217}, {"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = 0;\n\tattackSkill += weapon.attackSkill();\n\tattackSkill += accuracyModifier( target );\n\tattackSkill += accuracyBuffs( target );\n\tattackSkill += buffs( target, \"attackSkill\" );\n\tattackSkill += baseAttackSkill;\n\treturn attackSkill;\n}", "CodeBleu_score": 17.787684431458487}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tthis.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 92.42761213086841}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t", "CodeBleu_score": 29.691457752773907}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.sprites.forEach((sprite) => {\n  if (sprite.visible) sprite.setTint(0xaa0000);\n});\n\nthis.related.forEach((cell) => {\n  cell.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n});\n\nif (this.tiles.heightmap) {\n  if (this.tiles.heightmap.polygon.top){\n    this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n  }\n  if (this.tiles.heightmap.polygon.slope){\n    this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n  }\n}\n}", "CodeBleu_score": 97.86477945955943}, {"code": "onPointerOver (){\n\t\n}", "CodeBleu_score": 0.9163461821476669}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.sprites.forEach((sprite) => {\nif (sprite.visible) sprite.setTint(0xaa0000);\n});\n\nthis.related.forEach((cell) => {\ncell.tiles.sprites.forEach((sprite) => {\nif (sprite.visible) sprite.setTint(0xaa0000);\n});\n});\n\nif (this.tiles.heightmap) {\nif (this.tiles.heightmap.polygon.top){\nthis.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n}\nif (this.tiles.heightmap.polygon.slope){\nthis.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n}\n}\n}", "CodeBleu_score": 96.06928284575314}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn null;\n\nif (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\nreturn 'light';\n\nif (this.current >= this.heavyThreshold)\nreturn 'heavy';\n}", "CodeBleu_score": 71.84387096017457}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold) {\n  return null;\n}\n\nif (this.current >= this.lightThreshold && this.current < this.heavyThreshold) {\n  return 'light';\n}\n\nif (this.current >= this.heavyThreshold) {\n  return 'heavy';\n}\n}", "CodeBleu_score": 59.27221931446716}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn null;\n\nif (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\nreturn 'light';\n\nif (this.current >= this.heavyThreshold)\nreturn 'heavy';\n}", "CodeBleu_score": 71.84387096017457}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t", "CodeBleu_score": 25.419227090064833}, {"code": "restart: function (){\n\t\tvar currentValue = this.getValue();\n\tif (currentValue < this.lightThreshold) {\n\t\treturn null;\n\t}\n\telse if (currentValue >= this.lightThreshold && currentValue < this.heavyThreshold) {\n\t\treturn \"light\";\n\t}\n\telse {\n\t\treturn \"heavy\";\n\t}\n}", "CodeBleu_score": 23.026757623059087}, {"code": "restart: function (){\n\t\t// TODO: implement\n\treturn null;\n}", "CodeBleu_score": 0.498427444928975}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\t// TODO: Implement\n}", "CodeBleu_score": 8.102085899177318}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (color === undefined) {\n\t\tcolor = 0xFFFFFF;\n\t}\n\tif (duration === undefined) {\n\t\tduration = 1000;\n\t}\n\tif (force === undefined) {\n\t\tforce = 0;\n\t}\n\tif (alpha === undefined) {\n\t\talpha = 1;\n\t}\n\tif (this.effect) {\n\t\treturn false;\n\t}\n\tthis.effect = {\n\t\tcolor: color,\n\t\tduration: duration,\n\t\tforce: force,\n\t\talpha: alpha,\n\t\ttime: 0,\n\t\tdraw: function (ctx) {\n\t\t\tctx.fillStyle = \"rgba(\" + (this.color >> 16) + \", \" + ((this.color >> 8) & 0xFF) + \", \" + (this.color & 0xFF) + \", \" + this.alpha + \")\";\n\t\t\tctx.fillRect(0, 0, this.width, this.height);\n\t\t}\n\t};\n\treturn true;\n}", "CodeBleu_score": 57.719616927975814}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (typeof color == 'undefined') color = 0;\n\tif (typeof duration == 'undefined') duration = 0;\n\tif (typeof force == 'undefined') force = 0;\n\tif (typeof alpha == 'undefined') alpha = 0;\n\tif (this.effects.length > 0) {\n\t\tthis.effects[0].color = color;\n\t\tthis.effects[0].duration = duration;\n\t\tthis.effects[0].force = force;\n\t\tthis.effects[0].alpha = alpha;\n\t\treturn true;\n\t}\n\telse {\n\t\tthis.effects.push({\n\t\t\ttype: 'flash',\n\t\t\tcolor: color,\n\t\t\tduration: duration,\n\t\t\tforce: force,\n\t\t\talpha: alpha\n\t\t});\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 44.141064723137205}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new FlexLayer();\n\tlayer.fluid = true;\n\tlayer.fluidProperties = {\n\t\tdensity: 1,\n\t\tviscosity: 1,\n\t\trestitution: 1,\n\t\tfriction: 1\n\t};\n\tlayer.addToWorld = addToWorld;\n\tif (addToWorld) {\n\t\tthis.layers.push(layer);\n\t}\n\tif (children) {\n\t\tlayer.addChild(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 37.1663303023226}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new FlexLayer(children, addToWorld);\n\tlayer.fluid = true;\n\tlayer.fluidProperties = {};\n\treturn layer;\n}", "CodeBleu_score": 15.675721525825326}, {"code": "createFluidLayer: function (children, addToWorld){\n\t", "CodeBleu_score": 2.218908958697607}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, 0, 0, this.game.world.bounds.width, this.game.world.bounds.height, this.game.world.scale);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tlayer.add(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 52.99877940784228}, {"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.x, this.y, this.width, this.height, this.scale);\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\tif (children) {\n\t\tlayer.addChildren(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 55.037702919255494}, {"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.x, this.y, this.width, this.height, this.scaleX, this.scaleY);\n\tif (children) {\n\t\tlayer.add(children);\n\t}\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\treturn layer;\n}", "CodeBleu_score": 54.397587493711065}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tthis.updateCrop(rect, copy);\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 12.478551779185526}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tthis.updateCrop(rect, copy);\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 12.478551779185526}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect = rect;\n\t\t} else {\n\t\t\tthis.cropRect = {\n\t\t\t\tx: rect.x,\n\t\t\t\ty: rect.y,\n\t\t\t\twidth: rect.width,\n\t\t\t\theight: rect.height\n\t\t\t};\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 30.7538671030617}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.framesFrozen)\n\t{\n\t\treturn false;\n\t}\n\n\tvar frame = this.frameName(state);\n\n\tif (frame === null)\n\t{\n\t\treturn false;\n\t}\n\n\tthis.setFrame(frame);\n\n\treturn true;\n}", "CodeBleu_score": 23.45517969853263}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.framesFrozen) {\n\t\treturn false;\n\t}\n\tif (typeof state === 'number') {\n\t\tthis.frame = state;\n\t\tthis.updateFrame();\n\t\treturn true;\n\t}\n\tif (typeof state ==='string') {\n\t\tvar frame = this.frameNameLookup[state];\n\t\tif (frame!== undefined) {\n\t\t\tthis.frame = frame;\n\t\t\tthis.updateFrame();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 45.73520664367897}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.framesFrozen) {\n\t\treturn false;\n\t}\n\n\tvar key = this.frameName + '_' + state;\n\n\tif (typeof this.frames[key] === 'undefined') {\n\t\treturn false;\n\t}\n\n\tthis.frame = this.frames[key];\n\n\treturn true;\n}", "CodeBleu_score": 29.473293930243056}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\tif (arguments.length === 1) {\n\t\treturn this.weapon(1, null, null, null, Phaser.Bullet);\n\t}\n\telse if (arguments.length === 2) {\n\t\treturn this.weapon(1, key, null, null, Phaser.Bullet);\n\t}\n\telse if (arguments.length === 3) {\n\t\treturn this.weapon(1, key, frame, null, Phaser.Bullet);\n\t}\n\telse if (arguments.length === 4) {\n\t\treturn this.weapon(1, key, frame, group, Phaser.Bullet);\n\t}\n\telse if (arguments.length === 5) {\n\t\treturn this.weapon(1, key, frame, group, bulletClass);\n\t}\n\telse if (arguments.length === 6) {\n\t\treturn this.weapon(quantity, key, frame, group, bulletClass);\n\t}\n\n\treturn this.weapon(quantity, key, frame, group, bulletClass);\n}", "CodeBleu_score": 23.18874360676598}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\treturn this.bullets.weapon(quantity, key, frame, group, bulletClass);\n}", "CodeBleu_score": 17.03810194633067}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar a = points[0];\n\t\tvar b = points[1];\n\t\tvar c = points[2];\n\n\t\tvar normal = this.getNormal(a, b, c);\n\n\t\tif (normal.dot(this.camera.position) > 0) {\n\t\t\tthis.drawPolygon(points);\n\t\t}\n\t} else {\n\t\tthis.drawPolygon(points);\n\t}\n}", "CodeBleu_score": 21.156094270763177}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar normal = Phaser.Math.Vector3.Cross(points[1].subtract(points[0]), points[2].subtract(points[0]));\n\t\tif (normal.dot(this.camera.position.subtract(points[0])) > 0) {\n\t\t\tthis.drawPolygon(points);\n\t\t}\n\t} else {\n\t\tthis.drawPolygon(points);\n\t}\n}", "CodeBleu_score": 26.35817307529418}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tvar context = this.context;\n\n\tif (cull) {\n\t\tvar normal = Phaser.Math.Vector3.NormalFromPoints(points[0], points[1], points[2]);\n\t\tvar camera = this.camera;\n\n\t\tif (camera.normal.dot(normal) > 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tcontext.beginPath();\n\tcontext.moveTo(points[0].x, points[0].y);\n\tcontext.lineTo(points[1].x, points[1].y);\n\tcontext.lineTo(points[2].x, points[2].y);\n\tcontext.lineTo(points[0].x, points[0].y);\n\tcontext.closePath();\n\tcontext.fill();\n}", "CodeBleu_score": 27.336189012106328}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\tvar _this = this;\n\tvar video = this.video;\n\tvar retryCount = this.retryCount;\n\tvar retryTimeout = this.retryTimeout;\n\tvar retryWarning = this.retryWarning;\n\n\tif (video.readyState > 0) {\n\t\tthis.stopPendingSourceChanges();\n\t\tthis.updateTexture();\n\t\tthis.setTexture(this.texture);\n\t\tthis.setVideo(video);\n\t} else if (retryCount > 0) {\n\t\tretryCount--;\n\t\tthis.retryCount = retryCount;\n\t\tthis.setTexture(this.retryTexture);\n\t\tthis.setVideo(video);\n\t\tif (retryCount === 0) {\n\t\t\tthis.setTexture(this.retryWarningTexture);\n\t\t\tthis.setVideo(video);\n\t\t}\n\t\tthis.retryTimeout = setTimeout(function () {\n\t\t\t_this.checkVideoProgress();\n\t\t}, retryTimeout);\n\t} else {\n\t\tthis.setTexture(this.retryErrorTexture);\n\t\tthis.setVideo(video);\n\t}\n}", "CodeBleu_score": 19.170873608859033}, {"code": "checkVideoProgress: function (){\n\t", "CodeBleu_score": 5.572246494525378}, {"code": "checkVideoProgress: function (){\n\t", "CodeBleu_score": 5.572246494525378}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t\tif (this.state!== \"down\") {\n\t\tthis.state = \"down\";\n\t\tthis.timing = new Date().getTime();\n\t\tthis.repeat = 0;\n\t\tthis.event = event;\n\t\tthis.value = value;\n\t\tif (event) {\n\t\t\tthis.alt = event.altKey;\n\t\t\tthis.shift = event.shiftKey;\n\t\t\tthis.ctrl = event.ctrlKey;\n\t\t}\n\t\tthis.dispatch(\"onDown\");\n\t}\n}", "CodeBleu_score": 47.70795571902795}, {"code": "start: function (event, value){\n\t\tif (this.state!= \"down\") {\n\t\tthis.state = \"down\";\n\t\tthis.start = this.now();\n\t\tthis.repeat = 0;\n\t\tthis.event = event;\n\t\tthis.value = value;\n\t\tthis.dispatch(\"onDown\", this.state, this.value);\n\t\tif (event) {\n\t\t\tthis.alt = event.altKey;\n\t\t\tthis.ctrl = event.ctrlKey;\n\t\t\tthis.shift = event.shiftKey;\n\t\t}\n\t}\n}", "CodeBleu_score": 46.77803385900631}, {"code": "start: function (event, value){\n\t\tif (this.state!== \"down\") {\n\t\tthis.state = \"down\";\n\t\tthis.initTime = Date.now();\n\t\tthis.initRepeat = this.repeat;\n\t\tthis.repeat = 0;\n\t\tthis.initEvent = event;\n\t\tthis.initValue = value;\n\t\tif (this.initEvent) {\n\t\t\tthis.initEvent.altKey = event.altKey;\n\t\t\tthis.initEvent.ctrlKey = event.ctrlKey;\n\t\t\tthis.initEvent.shiftKey = event.shiftKey;\n\t\t}\n\t\tthis.dispatch(this.state, this.initValue);\n\t}\n}", "CodeBleu_score": 39.247671970713945}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\tif (this.input) {\n\t\tthis.input.onMouseDown(event);\n\t}\n\n\tif (this.onMouseDownCallback) {\n\t\tevent.preventDefault();\n\t\tthis.onMouseDownCallback(event);\n\t}\n}", "CodeBleu_score": 23.198874440168638}, {"code": "onMouseDown: function (event){\n\t", "CodeBleu_score": 6.864115172258767}, {"code": "onMouseDown: function (event){\n\t\tvar self = this;\n\tif (self.inputEnabled) {\n\t\tif (self.input.enabled) {\n\t\t\tself.input.startPointer(event);\n\t\t}\n\t\tif (self.input.enabled && self.input.initialize) {\n\t\t\tself.input.initialize(event);\n\t\t}\n\t}\n\tif (self.input.enabled && self.input.preventDefault) {\n\t\tevent.preventDefault();\n\t}\n\tif (self.input.onDown) {\n\t\tself.input.onDown.call(self, event);\n\t}\n}", "CodeBleu_score": 32.478518925317005}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t\tif (this.mouseDown) {\n\t\tthis.mouseDown = false;\n\t\tthis.mouseDownGlobal = false;\n\t\tthis.mouseDownGlobalEvent = null;\n\t\tthis.mouseDownGlobalX = 0;\n\t\tthis.mouseDownGlobalY = 0;\n\t\tthis.mouseDownGlobalTarget = null;\n\t\tthis.mouseDownGlobalTargetEvent = null;\n\t\tthis.mouseDownGlobalTargetX = 0;\n\t\tthis.mouseDownGlobalTargetY = 0;\n\t\tthis.mouseDownGlobalTargetId = null;\n\t\tthis.mouseDownGlobalTargetTarget = null;\n\t\tthis.mouseDownGlobalTargetTargetEvent = null;\n\t\tthis.mouseDownGlobalTargetTargetX = 0;\n\t\tthis.mouseDownGlobalTargetTargetY = 0;\n\t\tthis.mouseDownGlobalTargetTargetId = null;\n\t\tif (this.mouseDownCallback) {\n\t\t\tthis.mouseDownCallback(event);\n\t\t}\n\t\tif (this.mouseUpCallback) {\n\t\t\tthis.mouseUpCallback(event);\n\t\t}\n\t}\n}", "CodeBleu_score": 25.41952284967276}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (this.mouseUp) {\n\t\tthis.mouseUp(event);\n\t}\n\n\tif (this.mouseUpGlobal) {\n\t\tthis.mouseUpGlobal(event);\n\t}\n}", "CodeBleu_score": 23.907315750407793}, {"code": "onMouseUpGlobal: function (event){\n\t\t// Prevent default behavior.\n\tevent.preventDefault();\n\n\t// If the mouse is down, invoke the mouse up callback.\n\tif (this.mouseDown) {\n\t\tif (this.mouseUpCallback) {\n\t\t\tthis.mouseUpCallback(event);\n\t\t}\n\n\t\t// Reset the mouse state.\n\t\tthis.mouseDown = false;\n\t\tthis.mouseX = null;\n\t\tthis.mouseY = null;\n\t}\n}", "CodeBleu_score": 33.52883156857246}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.input.enabled) {\n\t\tthis.touchEnterCallback(event);\n\t\tif (this.game.input.touchEnabled) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 32.3231416176722}, {"code": "onTouchEnter: function (event){\n\t\tif (this.game.input.enabled && this.enabled) {\n\t\tthis.touchEnterCallback(event);\n\t\tif (this.touchEnterPreventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 35.30838093940455}, {"code": "onTouchEnter: function (event){\n\t\tif (this.touchEnterCallback) {\n\t\tthis.touchEnterCallback(event);\n\t}\n\tif (this.touchEnterPreventDefault) {\n\t\tevent.preventDefault();\n\t}\n\tif (this.touchEnterEnabled) {\n\t\tthis.touchEnter = event;\n\t}\n}", "CodeBleu_score": 50.33278714121441}]}
