{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    if not args.get('ids'):\n        return\n    # Retrieve the attachment IDs from the request arguments.\n    attachment_ids = args.get('ids').split(',')\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    # Retrieve the attachments from the database.\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    # Verify the read access rights for the attachments.\n    attachments.check_access_rights('read')\n    # Verify the rules for the attachments.\n    attachments.check_access_rule('read')\n    # Create a zip file from the attachments' content.\n    zip_file = io.BytesIO()\n    with zipfile.ZipFile(zip_file, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for attachment in attachments:\n            # Retrieve the attachment's content.\n            attachment_content = base64.b64decode(attachment.datas)\n            # Write the attachment's content to the zip file.\n            zip_file.writestr(attachment.name, attachment_content)\n    # Prepare HTTP headers for the zip file.\n    headers = _get_zip_headers(zip_file.getvalue(), 'attachment.zip')\n    # Return the zip file as an HTTP response.\n    return request.make_response(zip_file.getvalue(), headers)\n", "CodeBleu_score": 41.118318337148054}, {"code": "def export_zip_documents(self, **args)\n\t\n    # TODO: check if the current user has access to the attachments\n    # TODO: check if the current user has access to the attachments' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents\n    # TODO: check if the current user has access to the attachments' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent documents' parent", "CodeBleu_score": 0.8928571428571428}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachments = self.env['ir.attachment'].browse(args.get('ids'))\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    content = b''\n    for attachment in attachments:\n        content += attachment.datas\n    return request.make_response(content, headers=_get_zip_headers(content, 'attachment.zip'), status=200)\n", "CodeBleu_score": 31.88790804238965}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = request.env['account.move'].search([('id', 'in', values['invoices'])]).ids\n    return request.render(\"account.portal_my_invoices\", values)\n", "CodeBleu_score": 35.33627710815349}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    self.values = values\n    return request.render(\"account_portal.portal_my_invoices\", values)\n", "CodeBleu_score": 27.47198945029585}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = values['invoices'].ids\n    return request.render('account.portal_my_invoices_page', values)\n", "CodeBleu_score": 30.80786251912986}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    self.ensure_db()\n    invoice = self.env['account.invoice'].browse(int(invoice_id))\n    if not invoice.exists():\n        raise NotFound()\n    if not invoice.is_mine():\n        raise Forbidden()\n    if invoice.state not in ('open', 'paid'):\n        raise Forbidden()\n    if report_type == 'pdf':\n        return self._invoice_get_pdf_view_values(invoice, access_token, download=download)\n    elif report_type in ('html', 'text'):\n        return self._invoice_get_page_view_values(invoice, access_token, report_type=report_type)\n    return self._invoice_get_page_view_values(invoice, access_token)\n", "CodeBleu_score": 22.137585290607724}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    try:\n        invoice_id = int(invoice_id)\n    except ValueError:\n        return request.not_found()\n    invoice = request.env['account.move'].sudo().browse(invoice_id)\n    if invoice.state not in ('posted', 'invoiced'):\n        return request.not_found()\n    if not invoice.company_id.partner_id.can_access_from_portal(request.env.user):\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_type:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_template:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_format:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_layout:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_header:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_footer:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment_format:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment_layout:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment_header:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment_footer:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment_attachment:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment_attachment_format:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment_attachment_layout:\n        return request.not_found()\n    if not invoice.company_id.invoice_print_report_attachment_attachment", "CodeBleu_score": 24.24647425488771}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    invoice = request.env['account.invoice'].sudo().browse(invoice_id)\n    if not invoice.exists():\n        return request.not_found()\n    if not invoice.is_portal_invoice(access_token):\n        return request.not_found()\n    if report_type == 'pdf' and invoice.is_posted():\n        return self.invoice_download_pdf(invoice, access_token, download=download)\n    if report_type in ('html', 'pdf', 'text'):\n        return self.invoice_download_report(invoice, access_token, report_type, download=download)\n    return self.invoice_get_page_view(invoice, access_token, download=download)\n", "CodeBleu_score": 23.63970382125833}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    company_domain = company.get('domain', '')\n    company_account_sale_tax_id = company.get('account_sale_tax_id', False)\n    company_account_purchase_tax_id = company.get('account_purchase_tax_id', False)\n    product_templates = self.env['product.template'].search([('company_id', '=', company.get('id')), ('type', '=','service')])\n    for product_template in product_templates:\n        if company_domain in product_template.name:\n            product_template.update({\n                'taxes_id': [(6, 0, [company_account_sale_tax_id.id])] if company_account_sale_tax_id else False,\n                'purchase_taxes_id': [(6, 0, [company_account_purchase_tax_id.id])] if company_account_purchase_tax_id else False,\n            })\n\n", "CodeBleu_score": 31.694207991198457}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    for template in self.env['product.template'].search([('company_id', '=', company.id)]):\n        if company.account_sale_tax_id:\n            template.update({\n                'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]\n            })\n        if company.account_purchase_tax_id:\n            template.update({\n                'purchase_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]\n            })\n    return True\n\n", "CodeBleu_score": 19.903935093966602}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    # TODO: This function is not used anywhere. Remove it.\n    product_template_obj = self.pool.get('product.template')\n    product_obj = self.pool.get('product.product')\n    company_obj = self.pool.get('res.company')\n    account_tax_obj = self.pool.get('account.tax')\n\n    company_id = self.pool.get('res.users')._get_company(self._cr, self._uid)\n    if company:\n        company_id = company_obj.search(self._cr, self._uid, [('name', '=', company)], context=self._context)[0]\n\n    product_template_ids = product_template_obj.search(self._cr, self._uid, [('company_id', '=', company_id)], context=self._context)\n    for product_template in product_template_obj.browse(self._cr, self._uid, product_template_ids, context=self._context):\n        if product_template.type =='service':\n            continue\n        if product_template.company_id.account_sale_tax_id:\n            tax_ids = account_tax_obj.search(self._cr, self._uid, [('company_id', '=', company_id), ('type_tax_use', '=','sale'), ('amount', '=', product_template.company_id.account_sale_tax_id.amount)], context=self._context)\n            if tax_ids:\n                tax_id = tax_ids[0]\n                product_ids = product_obj.search(self._cr, self._uid, [('product_tmpl_id', '=', product_template.id)], context=self._context)\n                for product in product_obj.browse(self._cr, self._uid, product_ids, context=self._context):\n                    product.taxes_id = [(6, 0, tax_id)]\n        if product_template.company_id.account_purchase_tax_id:\n            tax_ids = account_tax_obj.search(self._cr, self._uid, [('company_id', '=', company_id), ('type_tax_use', '=', 'purchase'), ('amount', '=', product_template.company_id.account_purchase_tax_id.amount)], context=self._context)\n            if tax_ids", "CodeBleu_score": 30.786457188572676}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id), ('xml_id', '=', xml_id)])\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)])\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id)])\n    return demo_account\n\n", "CodeBleu_score": 44.67042089900624}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Get the demo account using the company's ID and the xml_id in the 'ir.model.data' model\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)])\n    if demo_account:\n        return demo_account[0]\n\n    # If not found, search for an account matching the account_type within the company's domain\n    demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)])\n    if demo_account:\n        return demo_account[0]\n\n    # If still not found, return the first account within the company's domain\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n\n", "CodeBleu_score": 46.53733732513305}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_obj = self.env['account.account']\n    domain = [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)]\n    if xml_id:\n        domain.append(('xml_id', '=', xml_id))\n    account = account_obj.search(domain, limit=1)\n    if not account:\n        domain = [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)]\n        account = account_obj.search(domain)\n    if not account:\n        domain = [('company_id', '=', company.id)]\n        account = account_obj.search(domain)\n    return account[0] if account else False\n\n", "CodeBleu_score": 42.579895929546765}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('type', '=', 'other'), ('company_id', '!=', False), ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    for company in self.env['res.company'].search([]):\n        accounts_for_company = accounts.filtered(lambda account: account.company_id == company)\n        if len(accounts_for_company) > 1:\n            raise ValidationError(_(\"There is more than one account with the 'Current Year Earnings' type for company '%s'.\") % company.name)\n\n", "CodeBleu_score": 28.634091411705338}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company in self.env['res.company'].search([]):\n        accounts = self.search([('company_id', '=', company.id), ('account_type', '=', 'current_year_earnings')])\n        if len(accounts) > 1:\n            raise ValidationError(_('There is more than one account with the \"Current Year Earnings\" type for the company %s.') % company.name)\n\n", "CodeBleu_score": 34.258590799090996}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_type_unique_current_year_earning_list = self.env['account.account'].search([('company_id', '=', self.company_id.id), ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    if len(account_type_unique_current_year_earning_list) > 1:\n        raise ValidationError(_(\"There is more than one account with the 'Current Year Earnings' type for this company. Please delete or rename one of these accounts.\"))\n\n", "CodeBleu_score": 23.417890445140596}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('default_partner_id'):\n        # Search for the partner with the most recent orders\n        order = 'order_id desc'\n    domain = domain or []\n    if operator in ('=', '!=', 'ilike', '=ilike', 'like', '=like'):\n        domain = ['|', ('name', operator, name), ('name', operator, name.capitalize())] + domain\n    else:\n        domain = ['|', ('name', operator, name), ('name', operator, name.capitalize()), ('name', operator, name.lower()), ('name', operator, name.lower().capitalize())] + domain\n    return self._search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 44.23697312692039}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('active_model') =='res.partner':\n        return self._search_by_frequency(domain, limit, order)\n    name = name.strip()\n    if operator not in ('=', '=', 'ilike', '=ilike', 'like', '=like'):\n        raise ValueError('operator must be one of =, =like, like, ilike or =ilike')\n    if operator in ('ilike', '=ilike', 'like', '=like'):\n        name = '%' + name + '%'\n    return self._search(expression.AND([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression.OR([expression", "CodeBleu_score": 23.27976293961793}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('default_partner_id'):\n        # Search by frequency\n        partner = self.env['res.partner'].browse(self.env.context['default_partner_id'])\n        domain = self._name_get_domain(partner.name, partner.company_id.id)\n        order = 'frequency desc'\n    else:\n        domain = self._name_get_domain(name, domain=domain)\n    return self._search(domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 31.970012193124862}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    self.ensure_invoice()\n    invoice = self.env['account.move'].browse(self.invoice_id)\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n    action['res_id'] = invoice.id\n    action['context'] = {\n        'default_partner_id': invoice.partner_id.id,\n        'default_invoice_type': 'out_invoice',\n        'default_invoice_origin': invoice.name,\n        'default_invoice_date': invoice.invoice_date,\n        'default_invoice_user_id': invoice.user_id.id,\n        'default_invoice_currency_id': invoice.currency_id.id,\n        'default_invoice_journal_id': invoice.journal_id.id,\n        'default_invoice_payment_term_id': invoice.payment_term_id.id,\n        'default_invoice_company_id': invoice.company_id.id,\n        'default_invoice_fiscal_position_id': invoice.fiscal_position_id.id,\n        'default_invoice_payment_ref': invoice.payment_ref,\n        'default_invoice_team_id': invoice.team_id.id,\n        'default_invoice_analytic_account_id': invoice.analytic_account_id.id,\n        'default_invoice_analytic_tag_ids': invoice.analytic_tag_ids.ids,\n        'default_invoice_ref': invoice.ref,\n        'default_invoice_message_ids': invoice.message_ids.ids,\n    }\n    action['domain'] = [('id', 'in', self.env['account.move'].search([('id', 'in', invoice.line_ids.mapped('move_id').ids)]).ids)]\n    return action\n\n", "CodeBleu_score": 39.99539436635992}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    res = self.env['account.move'].search([('partner_id', '=', self.id), ('type', '=', 'out_invoice'), ('state', '=', 'posted')])\n    action = self.env.ref('account.action_move_out_invoice').read()[0]\n    action['context'] = {\n        'default_partner_id': self.id,\n        'default_invoice_type': 'out_invoice',\n    }\n    action['domain'] = [('id', 'in', res.ids)]\n    return action\n\n", "CodeBleu_score": 22.16930660486527}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n        'default_partner_id': self.id,\n        'default_invoice_type': 'out_invoice',\n        'default_type': 'out_invoice',\n    }\n    action['domain'] = ['|', ('partner_id', '=', self.id), ('account_id.user_type_id.name', '=', 'Receivable'), ('account_id.user_type_id.name', '=', 'Payable')]\n    action['views'] = [(self.env.ref('account.view_move_form').id, 'tree'), (False, 'form')]\n    action['res_id'] = self.env['account.move'].search([('partner_id', '=', self.id), ('account_id.user_type_id.name', '=', 'Receivable'), ('account_id.user_type_id.name', '=', 'Payable')], limit=1).ids\n    return action\n\n", "CodeBleu_score": 39.13536942456687}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    self.check_access_rights('read')\n    self.check_access_rule('read')\n    context = dict(self.env.context)\n    context.update({\n        'default_type': 'in_invoice',\n        'default_move_type': 'in_invoice',\n        'default_purchase_id': self.id,\n        'default_partner_id': self.partner_id.id,\n        'default_currency_id': self.currency_id.id,\n        'default_journal_id': self.journal_id.id,\n        'default_date': self.date,\n        'default_amount': self.amount,\n        'default_amount_currency': self.amount_currency,\n        'default_ref': self.ref,\n        'default_payment_term_id': self.payment_term_id.id,\n        'default_fiscal_position_id': self.fiscal_position_id.id,\n        'default_company_id': self.company_id.id,\n        'default_purchase_type': 'purchase',\n    })\n    return {\n        'name': _('Vendor Bill'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n       'res_model': 'account.move',\n        'views': [(False, 'tree'), (False, 'form')],\n        'domain': [('id', 'in', self.env['account.move'].search([('purchase_id', '=', self.id)]).ids)],\n        'context': context,\n    }\n\n", "CodeBleu_score": 28.097402117906334}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    account_move_lines = self.env['account.move.line'].search([('move_id', 'in', self.env['account.move'].search([('purchase_id', '=', self.id)]).ids), ('account_id', '=', self.env['account.account'].search([('code', '=', '2000')]).id)])\n    move_ids = self.env['account.move'].search([('purchase_id', '=', self.id)]).ids\n    action = self.env.ref('account.action_move_tree1').read()[0]\n    action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n    action['context'] = {'search_default_purchase': 1,'search_default_purchase_type': 'in_invoice','search_default_move_id': move_ids}\n    return action\n\n", "CodeBleu_score": 32.780194551329934}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    move_ids = self.env['account.move.line'].search([('purchase_id', '=', self.id), ('move_id.type', '=', 'in_invoice')])\n    action = self.env.ref('account.action_move_in_invoice_tree1').read()[0]\n    action['context'] = {'default_purchase_id': self.id, 'default_type': 'in_invoice'}\n    action['domain'] = [('id', 'in', move_ids.ids)]\n    return action\n\n", "CodeBleu_score": 22.13225094470406}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t\n    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.11836716414241}, {"code": "def write(self, values)\n\t\n    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.11836716414241}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('company_id', '=', self.company_id.id), ('account_number', '=', self.account_number)])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'partner_id': self.id,\n            'company_id': self.company_id.id,\n            'account_number': self.account_number,\n            'bank_name': self.bank_name,\n            'bank_bic': self.bank_bic,\n            'bank_id': self.bank_id.id,\n            'bank_city': self.bank_city,\n            'bank_country_id': self.bank_country_id.id,\n            'bank_street': self.bank_street,\n            'bank_street2': self.bank_street2,\n            'bank_zip': self.bank_zip,\n        })\n    return bank_account\n\n", "CodeBleu_score": 52.2681204452923}, {"code": "def _find_or_create_bank_account(self)\n\t\n    # skip creation of bank accounts\n    if self.env['ir.config_parameter'].sudo().get_param('account_bank_skip_creation'):\n        return self.env['res.partner.bank'].create({'partner_id': self.id})\n    # search for existing bank account\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('acc_number', '=', self.bank_account_number)], limit=1)\n    # create new bank account if none is found\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({'partner_id': self.id, 'acc_number': self.bank_account_number})\n    return bank_account\n\n", "CodeBleu_score": 45.771059320755484}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env['res.config.settings'].get_param('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].create({})\n    bank_account = self.env['res.partner.bank'].search([('partner_id', '=', self.id), ('company_id', '=', self.env.company.id)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({'partner_id': self.id, 'company_id': self.env.company.id})\n    return bank_account\n\n", "CodeBleu_score": 43.69718992095104}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if currency.is_zero(amount_currency):\n        return {}\n    if currency.is_zero(balance):\n        return {'amount_currency': -amount_currency, 'balance': -amount_currency}\n    if currency.is_zero(balance) and currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': 0}\n    if currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': balance}\n    if currency.is_zero(balance):\n        return {'amount_currency': amount_currency, 'balance': amount_currency}\n    if currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': balance}\n    if currency.is_zero(balance):\n        return {'amount_currency': amount_currency, 'balance': amount_currency}\n    if currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': balance}\n    if currency.is_zero(balance):\n        return {'amount_currency': amount_currency, 'balance': amount_currency}\n    if currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': balance}\n    if currency.is_zero(balance):\n        return {'amount_currency': amount_currency, 'balance': amount_currency}\n    if currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': balance}\n    if currency.is_zero(balance):\n        return {'amount_currency': amount_currency, 'balance': amount_currency}\n    if currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': balance}\n    if currency.is_zero(balance):\n        return {'amount_currency': amount_currency, 'balance': amount_currency}\n    if currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': balance}\n    if currency.is_zero(balance):\n        return {'amount_currency': amount_currency, 'balance': amount_currency}\n    if currency.is_zero(amount_currency):\n        return {'amount_currency': 0, 'balance': balance}\n    if currency.is_zero(balance):\n       ", "CodeBleu_score": 17.622884131325335}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Retrieve the transaction amount, journal amount, and company amount with their corresponding currencies from the statement line.\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n\n    # Ensure a single record context, and retrieve the relevant exchange rates.\n    with currency.with_context(self._context.copy()):\n        if self.foreign_currency_id:\n            transaction_rate = currency.with_context(date=self.date).compute(transaction_currency, self.foreign_currency_id)\n            journal_rate = currency.with_context(date=self.date).compute(journal_currency, self.foreign_currency_id)\n            company_rate = currency.with_context(date=self.date).compute(company_currency, self.foreign_currency_id)\n        else:\n            transaction_rate = 1.0\n            journal_rate = 1.0\n            company_rate = 1.0\n\n    # Adjust the transaction amount and balance depending on the currency type.\n    if self.currency_id.is_zero(transaction_amount):\n        transaction_amount = 0.0\n    elif self.currency_id.is_zero(balance):\n        balance = 0.0\n    elif self.currency_id.is_zero(amount_currency):\n        amount_currency = 0.0\n\n    # Compute the transaction amount in the company currency, journal amount in the journal currency, and company amount in the company currency.\n    transaction_amount_company_currency = transaction_amount * transaction_rate\n    journal_amount_journal_currency = journal_amount * journal_rate\n    company_amount_company_currency = company_amount * company_rate\n\n    # Return the calculated amounts in a dictionary.\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_amount_company_currency': transaction_amount_company_currency,\n        'balance': balance,\n        'amount_currency': amount_currency,\n        'journal_amount': journal_amount,\n        'journal_amount_journal_currency': journal_amount_journal_currency,\n        'company_amount': company_amount,\n        'company_amount_company_currency': company_amount_company_currency,\n    }", "CodeBleu_score": 36.18997700148314}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    amount_currency, balance, currency = self._get_accounting_amounts_and_currencies()\n    if currency.is_zero(amount_currency) and currency.is_zero(balance):\n        return {}\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency == currency.base_currency_id:\n        return {\n            'amount_currency': amount_currency,\n            'balance': balance,\n        }\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance\n    if currency.is_zero(balance):\n        balance = amount_currency\n    if currency.is_zero(amount_currency):\n        amount_currency = balance", "CodeBleu_score": 19.44436586600247}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ['bank', 'cash']:\n            for payment_method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids.create({\n                    'journal_id': journal.id,\n                    'payment_method_id': payment_method.id,\n                })\n\n", "CodeBleu_score": 35.00002336425463}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ['bank', 'cash']:\n            for method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids.create({\n                    'journal_id': journal.id,\n                    'payment_method_id': method.id,\n                    'name': method.name,\n                   'sequence': method.sequence,\n                })\n\n", "CodeBleu_score": 35.905597344636085}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            for payment_method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids.create({'payment_method_id': payment_method.id})", "CodeBleu_score": 33.12063836462579}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t   if self.invoice_date:\n        if self.is_sale_document(include_receipts=True):\n            self.date = self.invoice_date\n        else:\n            self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n    elif not self.date:\n        self.date = fields.Date.context_today(self)", "CodeBleu_score": 23.751513576313997}, {"code": "def _compute_date(self)\n\t   for move in self:\n        if not move.invoice_date and not move.date:\n            move.date = fields.Date.context_today(self)\n        if move.invoice_date and not move.date:\n            move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        if move.date!= fields.Date.context_today(self):\n            move.date = fields.Date.context_today(self)\n            move._recompute_tax_lock_date()\n\n", "CodeBleu_score": 40.644544527814595}, {"code": "def _compute_date(self)\n\t   if self.invoice_date:\n        self.date = self.invoice_date\n        return\n    today = fields.Date.context_today(self)\n    if self.is_sale_document(include_receipts=True):\n        self.date = today\n    else:\n        self.date = self._get_accounting_date(today, has_tax=self._affect_tax_report())\n        if self.date!= today:\n            self.env.context = dict(self.env.context, force_date=self.date)\n            self.with_context(force_date=self.date)._recompute_tax_lines()\n\n", "CodeBleu_score": 32.48982855763074}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document:\n        if self.partner_id.property_payment_term_id:\n            self.payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.payment_term_id = False\n    elif self.is_purchase_document:\n        if self.partner_id.property_supplier_payment_term_id:\n            self.payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.payment_term_id = False\n\n", "CodeBleu_score": 31.569757211521004}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            move.payment_term_id = move.partner_id.property_payment_term_id.id\n        elif move.is_purchase_document:\n            move.payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        else:\n            move.payment_term_id = False\n\n", "CodeBleu_score": 33.59376370694202}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document:\n            if move.customer_payment_term_id:\n                move.invoice_payment_term_id = move.customer_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document:\n            if move.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.supplier_payment_term_id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n", "CodeBleu_score": 35.635043920073656}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n        if tax_group:\n            tax.tax_group_id = tax_group.id\n        else:\n            tax.tax_group_id = False\n\n def _compute_tax_code_id(self):\n    \"\"\"This function assigns the appropriate tax code to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax code with the same country and company. If no exact match is found, it searches for a tax code without a specified country but within the same company.\"\"\"\n    for tax in self:\n        tax_code = self.env['account.tax.code'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_code:\n            tax_code = self.env['account.tax.code'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n        if tax_code:\n            tax.tax_code_id = tax_code.id\n        else:\n            tax.tax_code_id = False\n\n def _compute_tax_type_id(self):\n    \"\"\"This function assigns the appropriate tax type to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax type with the same country and company. If no exact match is found, it searches for a tax type without a specified country but within the same company.\"\"\"\n    for tax in self:\n        tax_type = self.env['account.tax.type'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not", "CodeBleu_score": 32.17942619484575}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_id = False\n        if tax.country_id and tax.company_id:\n            tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group_id:\n            tax_group_id = self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id)], limit=1)\n        if tax_group_id:\n            tax.tax_group_id = tax_group_id.id\n\n def _compute_tax_group_name(self):\n    \"\"\"This function computes the name of the tax group based on the name of the tax group and the name of the tax.\"\"\"\n    for tax in self:\n        if tax.tax_group_id:\n            tax.tax_group_name = tax.tax_group_id.name +'-'+ tax.name\n\n def _compute_tax_group_tax_ids(self):\n    \"\"\"This function computes the list of taxes in the tax group based on the list of taxes in the tax group and the list of taxes.\"\"\"\n    for tax in self:\n        if tax.tax_group_id:\n            tax.tax_group_tax_ids = tax.tax_group_id.tax_ids.ids\n\n def _compute_tax_group_tax_ids_count(self):\n    \"\"\"This function computes the number of taxes in the tax group based on the number of taxes in the tax group and the number of taxes.\"\"\"\n    for tax in self:\n        if tax.tax_group_id:\n            tax.tax_group_tax_ids_count = len(tax.tax_group_id.tax_ids.ids)\n\n def _compute_tax_group_country_ids(self):\n    \"\"\"This function computes the list of countries in the tax group based on the list of countries in the tax group and the list of countries.\"\"\"\n    for tax in self:\n        if tax.tax_group_id:\n            tax.tax_group_country_ids = tax.tax_group_id.country_ids.ids\n\n def _compute_tax_group_country_ids_count(self):", "CodeBleu_score": 32.311918980431855}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        if tax.country_id and tax.company_id:\n            tax.tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        elif tax.country_id:\n            tax.tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', False)], limit=1)\n        else:\n            tax.tax_group_id = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', False)], limit=1)\n\n def _compute_tax_group_name(self):\n    \"\"\"This function assigns the appropriate tax group name to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found, it searches for a tax group without a specified country but within the same company.\"\"\"\n    for tax in self:\n        if tax.country_id and tax.company_id:\n            tax.tax_group_name = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1).name\n        elif tax.country_id:\n            tax.tax_group_name = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', False)], limit=1).name\n        else:\n            tax.tax_group_name = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', False)], limit=1).name\n\n def _compute_tax_group_country_id(self):\n    \"\"\"This function assigns the appropriate tax group country to each tax based on the tax's country and company. It first categorizes taxes by their country and company. For each group, it searches for a matching tax group with the same country and company. If no exact match is found", "CodeBleu_score": 30.26075962895623}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    if not os.path.isfile(module_file):\n        raise Exception('File does not exist: %s' % module_file)\n    if not url.endswith('/'):\n        url += '/'\n    if not url.startswith('http'):\n        url = 'http://' + url\n    if not url.endswith('/'):\n        url += '/'\n    if not url.startswith('https'):\n        url += 'https://'\n    if not url.endswith('/'):\n        url += '/'\n    if not url.endswith('base_import_module/login_upload'):\n        url += 'base_import_module/login_upload'\n    if not url.endswith('/'):\n        url += '/'\n    if not db:\n        db = 'base'\n    if not login:\n        login = 'admin'\n    if not password:\n        password = ''\n    if not force:\n        force = 'false'\n    else:\n        force = 'true'\n    data = {'login': login, 'password':, 'db': db, 'force': force}\n    files = {'file': open(module_file, 'rb')}\n    r = requests.post(url, data=data, files=files)\n    return r.text\n\n", "CodeBleu_score": 41.56329478735711}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session\n    self.set_database(url, login, password, db)\n\n    # Prepare the POST request data\n    data = {'login': login, 'password':, 'db': db, 'force': force}\n    files = {'file': open(module_file, 'rb')}\n\n    # Send the POST request\n    response = requests.post(url + 'base_import_module/login_upload', data=data, files=files)\n\n    # Raise an exception if the server does not have the required module installed or is outdated\n    if 'error' in response.text:\n        raise Exception(response.text)\n\n    # Return the server's response text\n    return response.text\n\n", "CodeBleu_score": 33.427391576894365}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Get the database name from the URL\n    db_name = urlparse(url).path.split('/')[-1]\n\n    # Set the database in the session\n    self.set_database(db, url)\n\n    # Prepare the POST request data\n    data = {\n        'db': db_name,\n        'login': login,\n        'password':,\n       'module_file': (module_file, open(module_file, 'rb'), 'text/plain')\n    }\n\n    # Upload the module file\n    response = requests.post(url + 'base_import_module/login_upload', files=data, verify=self.verify_ssl_certificate)\n\n    # Raise an exception if the server does not have the required module installed or is outdated\n    if response.status_code == 400:\n        raise Exception(response.text)\n\n    return response.text\n\n", "CodeBleu_score": 38.77118504458893}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    db_name = settings.DATABASE_NAME\n    overwrite = settings.OVERWRITE_TRANSLATIONS\n    registry = DatabaseRegistry(db_name)\n    cursor = registry.cursor()\n    importer = TranslationImporter(cursor)\n    importer.load_translations(overwrite)\n\n", "CodeBleu_score": 10.009043661321277}, {"code": "def import_translation()\n\t\n    # Retrieve configuration settings\n    db_name = config['database_name']\n    overwrite = config['overwrite_translations']\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = DatabaseRegistry()\n    importer = TranslationImporter(registry, db_name)\n\n    # Load translation files and save the translations\n    importer.load_translations(overwrite)\n    importer.save_translations()\n\n    # Print a message to confirm that the translations have been imported\n    print(\"Translations imported successfully.\")\n\n", "CodeBleu_score": 17.95473634966511}, {"code": "def import_translation()\n\t\n    import psycopg2\n    import psycopg2.extras\n    import psycopg2.extensions\n    import psycopg2.pool\n    import psycopg2.sql\n    import psycopg2.tz\n    import psycopg2.version\n    import psycopg2.xtypes\n    import os\n    import sys\n    import time\n    import traceback\n    import xmlrpc.client\n    import xmlrpc.server\n\n    # Retrieve configuration settings\n    database_name = os.environ.get('DATABASE_NAME')\n    overwrite_translations = os.environ.get('OVERWRITE_TRANSLATIONS')\n\n    # Create a new database registry and use a cursor to initialize a TranslationImporter\n    registry = xmlrpc.client.ServerProxy(os.environ.get('RPC_URL'))\n    registry.init(database_name)\n    importer = TranslationImporter(registry, database_name)\n\n    # Load translation files based on the specified configuration\n    if overwrite_translations == 'True':\n        importer.import_translations(overwrite=True)\n    else:\n        importer.import_translations()\n\n    # Commit the changes and close the connection to the database\n    importer.commit()\n    importer.close()\n\n", "CodeBleu_score": 32.81259946117435}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n    self.children = sorted(self.children, key=lambda x: x.name)\n    return child\n\n", "CodeBleu_score": 38.680926776842774}, {"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if child not in self.children:\n        self.children.append(child)\n    self.children.sort(key=lambda x: x.name)\n    return child\n\n", "CodeBleu_score": 36.70406580809764}, {"code": "def add_child(self, name, info)\n\t\n    new_child = Node(name, info)\n    new_child.depth = self.depth + 1\n    if new_child not in self.children:\n        self.children.append(new_child)\n    self.children = sorted(self.children, key=lambda child: child.name)\n    return new_child\n\n", "CodeBleu_score": 38.766633212022136}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = pd.DataFrame(0, index=dates, columns=[\"Balance\"])\n    result.index.name = \"Date\"\n    result.Balance = result.Balance.astype(float)\n    root_type = gl_entries.loc[gl_entries.Account == account, \"Type\"].iloc[0]\n    if root_type == \"Asset\":\n        result.Balance = result.Balance.cumsum()\n    elif root_type == \"Expense\":\n        result.Balance = -result.Balance.cumsum()\n    elif root_type!= \"Liability\" and root_type!= \"Equity\":\n        result.Balance = -result.Balance\n    for i in range(len(gl_entries)):\n        if gl_entries.iloc[i, 1] == account:\n            date = gl_entries.iloc[i, 0]\n            if date in dates:\n                result.loc[date, \"Balance\"] += gl_entries.iloc[i, 4]\n    return result\n\n", "CodeBleu_score": 21.093247081101055}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = pd.DataFrame(index=dates, columns=['balance'])\n    result.balance.fillna(0, inplace=True)\n    root_type = account.root_type()\n    if root_type!= 'Asset' and root_type!= 'Expense':\n        result.balance *= -1\n    for entry in gl_entries:\n        if entry.account_id == account.id:\n            if entry.date in dates:\n                result.loc[entry.date, 'balance'] += entry.amount\n    if root_type == 'Asset' or root_type == 'Liability' or root_type == 'Equity':\n        result.balance = result.balance.cumsum()\n    return result\n\n", "CodeBleu_score": 22.525170562281026}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = pd.DataFrame(index=dates, columns=[\"Balance\"], data=0)\n    root_type = account.root_type\n    for entry in gl_entries:\n        date = entry.date\n        if date in result.index:\n            if root_type == \"Asset\" or root_type == \"Expense\":\n                result.loc[date, \"Balance\"] += entry.amount\n            elif root_type == \"Liability\" or root_type == \"Equity\":\n                result.loc[date, \"Balance\"] -= entry.amount\n    if root_type!= \"Asset\" and root_type!= \"Expense\":\n        result[\"Balance\"] *= -1\n    return result\n\n", "CodeBleu_score": 22.346128496264555}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    # get the account type before the save operation\n    before_save_account_type = self.account_type\n    # get the account type after the save operation\n    after_save_account_type = self.account_type\n\n    # check if the account type before and after the save operation are different\n    if before_save_account_type!= after_save_account_type:\n        # check if the account type before the save operation is \"Receivable\" or \"Payable\"\n        if before_save_account_type in [\"Receivable\", \"Payable\"]:\n            # check if there are existing general ledger entries for the account\n            if self.gl_entries:\n                # generate a warning message indicating potential issues in the \"Accounts\" report\n                frappe.msgprint(\n                    _(\n                        \"Warning: Changing the account type from '{0}' to '{1}' may result in issues in the 'Accounts' report. Please ensure that the account type is correctly set and any existing general ledger entries are correctly accounted for.\").format(\n                        before_save_account_type, after_save_account_type),\n                    title=\"Account Type Change Warning\",\n                    indicator=\"orange\",\n                    alert=True,\n                )\n                # add a comment to the account record\n                comment = _(\n                    \"Account type changed from '{0}' to '{1}'.\").format(\n                    before_save_account_type, after_save_account_type\n                )\n                self.add_comment(comment=comment)\n\n", "CodeBleu_score": 27.277846855339405}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= self.old_account_type and (self.old_account_type == \"Receivable\" or self.old_account_type == \"Payable\") and self.gl_entries:\n        self.add_comment(\n            \"Account type changed from \" + self.old_account_type + \" to \" + self.account_type + \" and there are existing general ledger entries for this account. Potential issues in the Accounts report may be encountered.\")\n\n", "CodeBleu_score": 19.110797774189024}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type!= self.old_account_type:\n        if self.account_type not in ['Receivable', 'Payable']:\n            if self.account_type in ['Bank', 'Cash', 'Asset', 'Liability', 'Equity', 'Income', 'Expense']:\n                if self.balance!= 0:\n                    self.add_comment(\"The account type has been changed from '%s' to '%s'. This may cause issues in the 'Accounts' report.\" % (self.old_account_type, self.account_type))\n\n", "CodeBleu_score": 19.114936463681776}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        self.currency_id.check_company_currency(self.company_id.currency_id)\n        if self.currency_id!= self.company_id.currency_id:\n            if self.env['account.move.line'].search([('account_id', '=', self.id), ('currency_id', '!=', self.currency_id.id)]):\n                raise ValidationError(_('You cannot change the currency of this account after having created general ledger entries with a different currency.'))\n            else:\n                self.currency_id = self.company_id.currency_id\n        self.currency_id.check_company_currency(self.company_id.currency_id)\n    else:\n        self.currency_id = self.company_id.currency_id\n    self.currency_id.check_company_currency(self.company_id.currency_id)\n\n", "CodeBleu_score": 25.24903134985094}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        self.currency_id.explicit_currency = True\n        if self.currency_id.name!= self.company_id.currency_id.name:\n            raise ValidationError(_(\"The account currency must be the same as the company's default currency.\"))\n        if self.move_id:\n            for line in self.move_id.line_id:\n                if line.currency_id and line.currency_id.name!= self.currency_id.name:\n                    raise ValidationError(_(\"The account currency must be the same as the company's default currency.\"))\n\n", "CodeBleu_score": 30.727977610058876}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        self.currency_id.check_company_currency(self.company_id.currency_id)\n        if self.currency_id!= self.company_id.currency_id:\n            if self.env['account.move.line'].search([('account_id', '=', self.id), ('currency_id', '!=', self.company_id.currency_id)]):\n                raise UserError(_(\"You cannot change the currency of an account that has already been used in a journal entry.\"))\n    else:\n        self.currency_id = self.company_id.currency_id\n    self.currency_id.check_company_currency(self.company_id.currency_id)\n\n", "CodeBleu_score": 25.998417542019546}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = key_values\n            aggregated_entries[key][\"debit\"] = 0\n            aggregated_entries[key][\"credit\"] = 0\n            aggregated_entries[key][\"debit_amount\"] = 0\n            aggregated_entries[key][\"credit_amount\"] = 0\n\n        aggregated_entries[key][\"debit\"] += cint(entry.get(\"debit\"))\n        aggregated_entries[key][\"credit\"] += cint(entry.get(\"credit\"))\n        aggregated_entries[key][\"debit_amount\"] += cfloat(entry.get(\"debit_amount\"))\n        aggregated_entries[key][\"credit_amount\"] += cfloat(entry.get(\"credit_amount\"))\n\n    return aggregated_entries\n\n", "CodeBleu_score": 40.20928954212265}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += entry.get(\"debit\")\n            aggregated_entries[key][\"credit\"] += entry.get(\"credit\")\n            aggregated_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n            aggregated_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n        else:\n            aggregated_entries[key] = {\n                \"company\": key_values[\"company\"],\n                \"account\": key_values[\"account\"],\n                \"account_currency\": key_values[\"account_currency\"],\n                \"cost_center\": key_values[\"cost_center\"],\n                \"project\": key_values[\"project\"],\n                \"finance_book\": key_values[\"finance_book\"],\n                \"is_period_closing_voucher_entry\": key_values[\"is_period_closing_voucher_entry\"],\n                \"debit\": entry.get(\"debit\"),\n                \"credit\": entry.get(\"credit\"),\n                \"debit_in_account_currency\": entry.get(\"debit_in_account_currency\"),\n                \"credit_in_account_currency\": entry.get(\"credit_in_account_currency\"),\n            }\n            for dimension in accounting_dimensions:\n                aggregated_entries[key][dimension] = key_values[dimension]\n    return aggregated_entries\n\n", "CodeBleu_score": 40.44593939520224}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_amount_in_account_currency\": 0,\n                \"credit_amount_in_account_currency\": 0,\n                \"account_closing_balance\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_currency\": 0,\n                \"account_closing_balance_in_account_currency\": 0,\n                \"account_closing_balance_amount_in_account_", "CodeBleu_score": 26.742455815831978}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    # Get the supplier's information\n    supplier_info = self.env['res.partner'].search([('id', '=', self.partner_id.id)])\n    # Check if the supplier is blocked\n    if supplier_info.is_blocked:\n        # Check if the supplier is on hold\n        if supplier_info.on_hold:\n            # Check if the supplier is blocked for a supplier payment\n            if self.type =='supplier_payment':\n                # Check if the supplier is blocked for a supplier payment and the hold type matches the transaction type\n                if supplier_info.on_hold =='supplier_payment':\n                    # Check if the release date has passed\n                    if supplier_info.release_date <= datetime.now():\n                        # Unblock the supplier\n                        supplier_info.is_blocked = False\n                        # Reset the hold type\n                        supplier_info.on_hold = False\n                        # Reset the release date\n                        supplier_info.release_date = None\n                        # Display a message indicating that the supplier has been unblocked\n                        self.env['message.wizard'].create({'message': 'The supplier has been unblocked.'})\n                    else:\n                        # Raise an exception and display a message indicating that the transaction cannot proceed\n                        raise UserError('The supplier is still blocked for a supplier payment.')\n            # Check if the supplier is blocked for a buying invoice\n            elif self.type == 'buying_invoice':\n                # Check if the supplier is blocked for a buying invoice and the hold type matches the transaction type\n                if supplier_info.on_hold == 'buying_invoice':\n                    # Check if the release date has passed\n                    if supplier_info.release_date <= datetime.now():\n                        # Unblock the supplier\n                        supplier_info.is_blocked = False\n                        # Reset the hold type\n                        supplier_info.on_hold = False\n                        # Reset the release date\n                        supplier_info.release_date = None\n                        # Display a message indicating that the supplier has been unblocked\n                        self.env['message.wizard'].create({'message': 'The supplier has been unblocked.'})\n                    else:\n                        # Raise an exception and display a message indicating that the transaction cannot proceed\n                        raise UserError('The supplier is still blocked for a buying invoice.')\n        else:\n            # Raise an exception and display a message indicating that the transaction cannot proceed\n            raise UserError('The supplier is blocked.')\n\n", "CodeBleu_score": 21.386091108832737}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_id:\n        supplier = self.env['res.partner'].browse(self.supplier_id)\n        if supplier.on_hold and self.type == 'in_invoice':\n            if supplier.hold_type =='supplier_payment' and supplier.date_release:\n                if datetime.strptime(supplier.date_release, '%Y-%m-%d') < datetime.now():\n                    raise UserError(_(\"Supplier is still blocked. Please contact your administrator.\"))\n            elif supplier.hold_type == 'buying_invoice' and supplier.date_release:\n                if datetime.strptime(supplier.date_release, '%Y-%m-%d') < datetime.now():\n                    raise UserError(_(\"Supplier is still blocked. Please contact your administrator.\"))\n        elif supplier.on_hold and self.type == 'out_invoice':\n            if supplier.hold_type =='supplier_payment' and supplier.date_release:\n                if datetime.strptime(supplier.date_release, '%Y-%m-%d') < datetime.now():\n                    raise UserError(_(\"Supplier is still blocked. Please contact your administrator.\"))\n            elif supplier.hold_type == 'buying_invoice' and supplier.date_release:\n                if datetime.strptime(supplier.date_release, '%Y-%m-%d') < datetime.now():\n                    raise UserError(_(\"Supplier is still blocked. Please contact your administrator.\"))\n\n", "CodeBleu_score": 24.25357623279511}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.type =='supplier_payment':\n        supplier = Supplier.objects.get(id=self.supplier_id)\n        if supplier.is_blocked:\n            if supplier.hold_type == 'on_hold':\n                if supplier.release_date is not None:\n                    if supplier.release_date < timezone.now():\n                        raise ValidationError('This supplier is blocked and cannot be used for this transaction.')\n                else:\n                    raise ValidationError('This supplier is blocked and cannot be used for this transaction.')\n            else:\n                raise ValidationError('This supplier is blocked and cannot be used for this transaction.')\n        else:\n            raise ValidationError('This supplier is not blocked and cannot be used for this transaction.')\n    elif self.type == 'buying_invoice':\n        supplier = Supplier.objects.get(id=self.supplier_id)\n        if supplier.is_blocked:\n            if supplier.hold_type == 'on_hold':\n                if supplier.release_date is not None:\n                    if supplier.release_date < timezone.now():\n                        raise ValidationError('This supplier is blocked and cannot be used for this transaction.')\n                else:\n                    raise ValidationError('This supplier is blocked and cannot be used for this transaction.')\n            else:\n                raise ValidationError('This supplier is blocked and cannot be used for this transaction.')\n        else:\n            raise ValidationError('This supplier is not blocked and cannot be used for this transaction.')\n\n", "CodeBleu_score": 25.903367980501248}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\"Repost Voucher\", \"Repost Voucher - Reversal\"]\n    repost_voucher_types = [\"Repost Voucher\", \"Repost Voucher - Reversal\"]\n    repost_voucher_type_map = {\"Repost Voucher\": \"repost_vouchers\", \"Repost Voucher - Reversal\": \"vouchers\"}\n    repost_voucher_type_map_reverse = {v: k for k, v in repost_voucher_type_map.items()}\n    repost_voucher_type_map_reverse_list = [v for k, v in repost_voucher_type_map.items()]\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher - Reversal\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher_type_map_reverse_list.append(\"Repost Voucher\")\n    repost_voucher", "CodeBleu_score": 15.624311605999777}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = [\"Sales Invoice\", \"Purchase Invoice\", \"Sales Order\", \"Purchase Order\", \"Delivery Note\", \"Purchase Receipt\"]\n    repost_vouchers = []\n    vouchers = []\n    for repost_doctype in repost_doctypes:\n        repost_vouchers.extend(frappe.get_all(\"Repost Voucher\", filters={\"parent_voucher_type\": repost_doctype, \"parent_voucher_no\": self.name}, fields=[\"parent_voucher_type\", \"parent_voucher_no\", \"voucher_type\", \"voucher_no\"]))\n        vouchers.extend(frappe.get_all(\"Voucher\", filters={\"parent_voucher_type\": repost_doctype, \"parent_voucher_no\": self.name}, fields=[\"parent_voucher_type\", \"parent_voucher_no\", \"voucher_type\", \"voucher_no\"]))\n\n    if repost_vouchers:\n        repost_vouchers_map = {}\n        for repost_voucher in repost_vouchers:\n            if repost_voucher.parent_voucher_no in repost_vouchers_map:\n                repost_vouchers_map[repost_voucher.parent_voucher_no].append(repost_voucher)\n            else:\n                repost_vouchers_map[repost_voucher.parent_voucher_no] = [repost_voucher]\n\n        for parent_voucher_no in repost_vouchers_map:\n            parent_voucher = frappe.get_doc(repost_vouchers_map[parent_voucher_no][0].parent_voucher_type, parent_voucher_no)\n            for repost_voucher in repost_vouchers_map[parent_voucher_no]:\n                parent_voucher.flags.ignore_validate = True\n                parent_voucher.flags.ignore_links = True\n                if repost_voucher.voucher_type in [\"Repost Voucher\", \"Voucher\"]:\n                    parent_voucher.remove(\"repost_vouchers\", repost_voucher.voucher_type, repost_voucher.voucher_no)\n                else:\n                    parent_voucher.remove(\"vouchers\", repost_voucher.voucher_type, repost_voucher.voucher_no)\n                parent_voucher.save()\n\n    if vouchers:", "CodeBleu_score": 21.30988125159229}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\"Repost Voucher\", \"Repost Voucher (Credit)\"]\n    repost_voucher_types = [\"Repost Voucher\", \"Repost Voucher (Credit)\"]\n    repost_vouchers = []\n    vouchers = []\n    for repost_doctype in repost_doctypes:\n        repost_voucher_types.append(repost_doctype)\n    repost_voucher_types.append(\"Repost Voucher (Debit)\")\n    for repost_voucher_type in repost_voucher_types:\n        repost_vouchers += frappe.get_all(\"Repost Voucher\", filters={\"voucher_type\": repost_voucher_type, \"voucher_no\": self.voucher_no})\n        vouchers += frappe.get_all(\"Voucher\", filters={\"voucher_type\": repost_voucher_type, \"voucher_no\": self.voucher_no})\n    repost_vouchers_map = {}\n    vouchers_map = {}\n    for repost_voucher in repost_vouchers:\n        if repost_voucher.parent_voucher_type not in repost_vouchers_map:\n            repost_vouchers_map[repost_voucher.parent_voucher_type] = {}\n        if repost_voucher.parent not in repost_vouchers_map[repost_voucher.parent_voucher_type]:\n            repost_vouchers_map[repost_voucher.parent_voucher_type][repost_voucher.parent] = []\n        repost_vouchers_map[repost_voucher.parent_voucher_type][repost_voucher.parent].append(repost_voucher.name)\n    for voucher in vouchers:\n        if voucher.parent_voucher_type not in vouchers_map:\n            vouchers_map[voucher.parent_voucher_type] = {}\n        if voucher.parent not in vouchers_map[voucher.parent_voucher_type]:\n            vouchers_map[voucher.parent_voucher_type][voucher.parent] = []\n        vouchers_map[voucher.parent_voucher_type][voucher.parent].append(voucher.name)\n    for parent_voucher_type in repost_vouchers_map:\n        for parent", "CodeBleu_score": 20.423617861293938}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n    except Exception as e:\n        frappe.log_error(e)\n        raise e\n\n    if account_id:\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"account_ids\": account_id,\n        }\n    else:\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n        }\n\n    # Fetch the first batch of transactions\n    response = self.client.Transactions.get(self.access_token, **query_params)\n\n    # Check if there are more transactions to fetch\n    if response[\"total_transactions\"] > len(response[\"transactions\"]):\n        # Set the offset to the number of transactions fetched\n        offset = len(response[\"transactions\"])\n\n        # Continue fetching transactions until all transactions are fetched\n        while offset < response[\"total_transactions\"]:\n            # Update the offset to fetch the next batch of transactions\n            offset += 100\n\n            # Add the offset to the query parameters\n            query_params[\"offset\"] = offset\n\n            # Fetch the next batch of transactions\n            response = self.client.Transactions.get(self.access_token, **query_params)\n\n            # Append the transactions to the list\n            transactions.extend(response[\"transactions\"])\n\n    # Return the list of transactions\n    return transactions", "CodeBleu_score": 40.93855022641225}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n\n    params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\n            \"account_ids\": [account_id] if account_id else None,\n        },\n    }\n\n    response = self.client.Transactions.get(self.access_token, params)\n    transactions = response[\"transactions\"]\n    total_transactions = response[\"total_transactions\"]\n\n    while len(transactions) < total_transactions:\n        response = self.client.Transactions.get(self.access_token, params)\n        transactions.extend(response[\"transactions\"])\n\n    return transactions", "CodeBleu_score": 43.96080250492744}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        # Authenticate the client\n        self.auth()\n\n        # Construct the query parameters\n        params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"account\": account_id},\n        }\n\n        # Fetch the transactions\n        transactions = self.client.Transactions.get(self.access_token, params)\n\n        # Return the transactions\n        return transactions\n\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(\n                _(\"Plaid: The item is not yet connected. Please connect the item and try again.\"),\n                title=_(\"Item Login Required\"),\n            )\n        elif e.code == \"ITEM_LOGIN_REQUIRED_FOR_USER\":\n            frappe.throw(\n                _(\"Plaid: The item is not yet connected. Please connect the item and try again.\"),\n                title=_(\"Item Login Required for User\"),\n            )\n        else:\n            raise e\n\n    except APIError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(\n                _(\"Plaid: The item is not yet connected. Please connect the item and try again.\"),\n                title=_(\"Item Login Required\"),\n            )\n        elif e.code == \"ITEM_LOGIN_REQUIRED_FOR_USER\":\n            frappe.throw(\n                _(\"Plaid: The item is not yet connected. Please connect the item and try again.\"),\n                title=_(\"Item Login Required for User\"),\n            )\n        elif e.code == \"INVALID_ACCESS_TOKEN\":\n            frappe.throw(\n                _(\"Plaid: The access token is invalid. Please re-authenticate the item and try again.\"),\n                title=_(\"Invalid Access Token\"),\n            )\n        elif e.code == \"INVALID_ITEM_ID\":\n            frappe.throw(\n                _(\"Plaid: The item ID is invalid. Please check the item ID and try again.\"),\n                title=_(\"Invalid Item ID\"),\n            )\n        elif e.code == \"INVALID_OPTIONS\":\n            frappe.throw(\n                _(\"Plaid: The options are invalid. Please check the options and try again.\"),\n                title=_(\"Invalid Options\"),\n            )\n        elif e.code == \"INVALID_START_DATE\":\n            frappe.throw(\n                _(\"Plaid: The start date is invalid. Please check the start date and try again.\"),\n                title=_(\"Invalid Start Date\"),\n            )\n        elif e", "CodeBleu_score": 29.458004268761893}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response[\"institution\"]\n        name = institution[\"name\"]\n        bank_id = institution[\"institution_id\"]\n        access_token = token.get_access_token(response[\"public_token\"])\n        if frappe.db.exists(\"Bank\", {\"bank_id\": bank_id}):\n            frappe.db.set_value(\"Bank\", {\"bank_id\": bank_id}, \"access_token\", access_token)\n            frappe.msgprint(\"Bank institution updated\")\n        else:\n            frappe.get_doc({\n                \"doctype\": \"Bank\",\n                \"bank_id\": bank_id,\n                \"name\": name,\n                \"access_token\": access_token,\n            }).insert(ignore_permissions=True)\n            frappe.msgprint(\"Bank institution added\")\n    except Exception as e:\n        frappe.log_error(e)\n        frappe.msgprint(\"Error adding bank institution\")\n\n", "CodeBleu_score": 33.28992690117671}, {"code": "def add_institution(token, response)\n\t\n    if response[\"status\"] == \"ok\":\n        institution = response[\"institution\"]\n        access_token = PlaidConnector().get_access_token(token)\n        if not frappe.db.exists(\"Bank\", institution[\"institution_id\"]):\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = institution[\"name\"]\n            bank.bank_id = institution[\"institution_id\"]\n            bank.access_token = access_token\n            bank.save()\n            frappe.msgprint(\n                f\"Bank {institution['name']} has been added to your account.\"\n            )\n        else:\n            bank = frappe.get_doc(\"Bank\", institution[\"institution_id\"])\n            bank.access_token = access_token\n            bank.save()\n            frappe.msgprint(\n                f\"Bank {institution['name']} has been updated in your account.\"\n            )\n    else:\n        frappe.log_error(\n            f\"Plaid: Unable to add bank. Status: {response['status']}, Message: {response['message']}\"\n        )", "CodeBleu_score": 36.22069062947473}, {"code": "def add_institution(token, response)\n\t\n    institution = response[\"institution\"]\n    bank_name = institution[\"name\"]\n    bank_code = institution[\"institution_code\"]\n    bank_id = institution[\"institution_id\"]\n    bank_url = institution[\"institution_url\"]\n    bank_primary_color = institution[\"primary_color\"]\n    bank_secondary_color = institution[\"secondary_color\"]\n    bank_logo = institution[\"logo\"]\n    access_token = PlaidConnector().get_access_token(token)\n    if not frappe.db.exists(\"Bank\", bank_id):\n        bank = frappe.get_doc(dict(\n            doctype=\"Bank\",\n            bank_name=bank_name,\n            bank_code=bank_code,\n            bank_id=bank_id,\n            bank_url=bank_url,\n            bank_primary_color=bank_primary_color,\n            bank_secondary_color=bank_secondary_color,\n            bank_logo=bank_logo,\n            access_token=access_token\n        )).insert()\n        frappe.msgprint(\"Bank added successfully\")\n    else:\n        frappe.db.set_value(\"Bank\", bank_id, \"access_token\", access_token)\n        frappe.msgprint(\"Bank updated successfully\")\n\n", "CodeBleu_score": 33.612739311226605}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get the last integration date for the bank and bank account\n    last_integration_date = frappe.db.get_value(\"Bank\", bank, \"last_integration_date\")\n    if bank_account:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n\n    # Get the start and end dates for the transaction retrieval\n    start_date = last_integration_date or getdate()\n    end_date = getdate()\n\n    # Fetch the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    if new_transactions:\n        last_integration_date = min(\n            [\n                getdate(transaction[\"date\"])\n                for transaction in transactions\n                if not sbool(transaction[\"pending\"])\n            ]\n        )\n        if bank_account:\n            frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", last_integration_date)\n        else:\n            frappe.db.set_value(\"Bank\", bank, \"last_integration_date\", last_integration_date)\n\n    # Log the number of new transactions added\n    if new_transactions:\n        frappe.log_error(\n            message=f\"New transactions added for {bank} and {bank_account}:\",\n            title=\"Bank Transaction Sync\",\n            extra=new_transactions,\n        )\n\n    # Handle any exceptions by logging an error message\n    except Exception as e:\n        frappe.log_error(\n            message=f\"Error syncing transactions for {bank} and {bank_account}: {e}\",\n            title=\"Bank Transaction Sync\",\n        )\n\n", "CodeBleu_score": 38.17562975157127}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get the last integration date for the bank and bank account\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    # Get the start and end dates for the transaction retrieval based on the last integration date\n    start_date = getdate(last_integration_date) if last_integration_date else None\n    end_date = getdate()\n\n    # Fetch the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    if new_transactions:\n        last_integration_date = getdate(min(new_transactions))\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", last_integration_date)\n\n    # Log the number of new transactions added\n    frappe.log_info(\n        f\"Synced {len(new_transactions)} transactions for Bank {bank} and Bank Account {bank_account}.\"\n    )\n\n    # Handle any exceptions by logging an error message\n    except_message = None\n    if \"error\" in transactions:\n        except_message = transactions[\"error\"][\"display_message\"]\n    if except_message:\n        frappe.log_error(message=except_message, title=\"Plaid Sync Error\")\n\n", "CodeBleu_score": 32.823282550488564}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    last_integration_date = frappe.db.get_value(\"Bank\", bank, \"last_integration_date\")\n    if not last_integration_date:\n        last_integration_date = frappe.utils.getdate()\n\n    start_date = last_integration_date\n    end_date = frappe.utils.get_datetime()\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n    new_transactions = []\n\n    if transactions:\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        if new_transactions:\n            frappe.db.set_value(\"Bank\", bank, \"last_integration_date\", start_date)\n            frappe.log_error(\n                _(\"Bank {0} - Bank Account {1} - New Transactions: {2}\").format(\n                    bank, bank_account, len(new_transactions)\n                ),\n                _(\"Plaid Sync\"),\n            )\n\n", "CodeBleu_score": 35.610197404136144}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = f\"/{entity}?minorversion={self.minor_version}\"\n    total_entries = self._get_total_entries(query_uri)\n    entries = self._get_entries(query_uri, total_entries)\n    entries = self._preprocess_entries(entity, entries)\n    self._save_entries(entity, entries)\n\n", "CodeBleu_score": 7.334890835495781}, {"code": "def _migrate_entries(self, entity)\n\t\n    total_entries = self._get_total_entries(entity)\n    if not total_entries:\n        return\n    total_batches = math.ceil(total_entries / 1000)\n    for batch_number in range(1, total_batches + 1):\n        self._publish(\n            {\n                \"event\": \"progress\",\n                \"message\": _(\"Fetching {0} entries\").format(entity),\n                \"count\": batch_number,\n                \"total\": total_batches,\n            }\n        )\n        query_uri = self._build_query_uri(entity, batch_number)\n        entries = self._get_entries(query_uri)\n        if not entries:\n            continue\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)", "CodeBleu_score": 28.123589783745086}, {"code": "def _migrate_entries(self, entity)\n\t\n    # Construct a query URI\n    query_uri = f\"{self.base_url}/v3/company/{self.company_id}/{entity.lower()}?limit=1000\"\n    # Determine the total number of entries\n    total_entries = self._get_total_entries(query_uri)\n    # Retrieve entries in batches of 1000\n    for offset in range(0, total_entries, 1000):\n        # Construct a query URI with an offset\n        query_uri = f\"{self.base_url}/v3/company/{self.company_id}/{entity.lower()}?limit=1000&offset={offset}\"\n        # Fetch the entries\n        entries = self._get_entries(query_uri)\n        # Preprocess the entries\n        entries = self._preprocess_entries(entity, entries)\n        # Save the entries\n        self._save_entries(entity, entries)\n    # Log any errors\n    if self._error_log:\n        self._log_error(self._error_log)\n", "CodeBleu_score": 23.73214288908476}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists({\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}):\n            invoice_type = invoice[\"TxnType\"]\n            if invoice_type == \"SalesOrder\":\n                self._save_sales_invoice(invoice, invoice[\"Id\"])\n            elif invoice_type == \"SalesInvoice\":\n                self._save_sales_invoice(invoice, invoice[\"Id\"])\n            elif invoice_type == \"CreditMemo\":\n                self._save_sales_invoice(invoice, invoice[\"Id\"], is_return=True)\n            elif invoice_type == \"Check\":\n                self._save_check(invoice, invoice[\"Id\"])\n            elif invoice_type == \"JournalEntry\":\n                self._save_journal_entry(invoice, invoice[\"Id\"])\n            elif invoice_type == \"Estimate\":\n                self._save_sales_invoice(invoice, invoice[\"Id\"], is_pos=True)\n            else:\n                self._save_invoice_as_journal_entry(invoice, invoice[\"Id\"])\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 22.92351108382997}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = self._get_quickbooks_id(invoice[\"Id\"], self.general_ledger[\"Invoice\"][invoice[\"Id\"]])\n        if invoice[\"DocNumber\"] == \"Return\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"DocNumber\"] == \"POS\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        else:\n            linked_transactions = self._get_linked_transactions(invoice)\n            if any(transaction[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"] for transaction in linked_transactions):\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n            else:\n                self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 45.145071915424026}, {"code": "def _save_invoice(self, invoice)\n\t\n    if invoice[\"DocNumber\"]:\n        quickbooks_id = invoice[\"Id\"]\n        if invoice[\"TxnType\"] == \"SalesInvoice\":\n            self._save_sales_invoice(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"Invoice\":\n            self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"CreditMemo\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"TxnType\"] == \"SalesOrder\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        elif invoice[\"TxnType\"] == \"Estimate\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        elif invoice[\"TxnType\"] == \"Bill\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        elif invoice[\"TxnType\"] == \"Payment\":\n            self._save_payment_as_journal_entry(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"JournalEntry\":\n            self._save_journal_entry(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"Check\":\n            self._save_check(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"Deposit\":\n            self._save_deposit(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"PurchaseOrder\":\n            self._save_purchase_order(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"PurchaseInvoice\":\n            self._save_purchase_invoice(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"PurchaseCreditMemo\":\n            self._save_purchase_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"TxnType\"] == \"ReceivePayment\":\n            self._save_receive_payment(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"ReceivePaymentCheck\":\n            self._save_receive_payment_check(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"ReceivePaymentCreditCard\":\n            self._save_receive_payment_credit_card(invoice, quickbooks_id)\n        elif invoice[\"TxnType\"] == \"Receive", "CodeBleu_score": 29.39218846754139}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # Create a list of scheduled visit dates\n    schedule_list = [start_date]\n    for i in range(1, no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n        schedule_list.append(schedule_date)\n\n    # Adjust the schedule dates to avoid holidays\n    schedule_list = [self.validate_schedule_date_for_holiday_list(schedule_date, sales_person) for schedule_date in schedule_list]\n\n    return schedule_list\n", "CodeBleu_score": 25.8852580888004}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n\n    # Create the schedule list\n    schedule_list = [start_date]\n    for i in range(1, no_of_visit):\n        schedule_date = start_date + timedelta(days=interval * i)\n        schedule_list.append(schedule_date)\n\n    # Adjust the schedule list to avoid holidays\n    schedule_list = [self.validate_schedule_date_for_holiday_list(schedule_date, sales_person) for schedule_date in schedule_list]\n\n    return schedule_list\n\n", "CodeBleu_score": 25.918829245288123}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # calculate the interval between visits\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n\n    # create the schedule list\n    schedule_list = [start_date]\n    for i in range(no_of_visit - 1):\n        schedule_list.append(schedule_list[i] + timedelta(days=interval))\n\n    # adjust the schedule list to avoid holidays\n    for i in range(len(schedule_list)):\n        schedule_list[i] = self.validate_schedule_date_for_holiday_list(schedule_list[i], sales_person)\n\n    return schedule_list\n", "CodeBleu_score": 27.326683802841504}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\thod = request()->get('handle', 'edit');\n\n$handle = $this->actions[$method]['handle']?? 'update';\n$url = route('bulk-actions.action', $this->path);\n\n$html = view('components.index.bulkaction.modal', [\n    'url' => $url,\n    'handle' => $handle,\n   'selected' => $data['selected']?? $this->getSelectedInput(request()),\n    'html' => view($view, $data)->render(),\n])->render();\n\nreturn response()->json([\n   'success' => true,\n    'error' => false,\n   'message' => '',\n    'data' => [\n        'title' => $this->findTranslation($this->text),\n        'path' => $url,\n        'handle' => $handle,\n    ],\n    'html' => $html,\n]);\n}", "CodeBleu_score": 82.07345694249575}, {"code": "<?\n   public function response($view, $data = []){\n\tod = request()->get('handle', 'edit');\n\n$handle = $this->actions[$method]['handle']?? 'update';\n$url = route('bulk-actions.action', $this->path);\n\n$html = view('components.index.bulkaction.modal', [\n    'url' => $url,\n    'handle' => $handle,\n   'selected' => $data['selected']?? $this->getSelectedInput(request()),\n    'html' => view($view, $data)->render(),\n])->render();\n\nreturn response()->json([\n   'success' => true,\n    'error' => false,\n   'message' => '',\n    'data' => [\n        'title' => $this->findTranslation($this->text),\n        'path' => $url,\n        'handle' => $handle,\n    ],\n    'html' => $html,\n]);\n}", "CodeBleu_score": 82.03402517503129}, {"code": "<?\n   public function response($view, $data = []){\n\thod = request()->get('handle', 'edit');\n\n$handle = $this->actions[$method]['handle']?? 'update';\n$url = route('bulk-actions.action', $this->path);\n\n$html = view('components.index.bulkaction.modal', [\n    'url' => $url,\n    'handle' => $handle,\n   'selected' => $data['selected']?? $this->getSelectedInput(request()),\n    'html' => view($view, $data)->render(),\n])->render();\n\nreturn response()->json([\n   'success' => true,\n    'error' => false,\n   'message' => '',\n    'data' => [\n        'title' => $this->findTranslation($this->text),\n        'path' => $url,\n        'handle' => $handle,\n    ],\n    'html' => $html,\n]);\n}", "CodeBleu_score": 82.07345694249575}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getSelectedRecords($request);\n\n\t\tforeach ($contacts as $contact) {\n\t\t\t$contact->delete();\n\t\t}\n\n\t\treturn $this->response->success(trans('core::messages.resource deleted', ['name' => $this->getModuleName()]), $this->getModuleName());\n\t} catch (Exception $e) {\n\t\treturn $this->response->error($e->getMessage(), $this->getModuleName());\n\t}\n}", "CodeBleu_score": 45.29203553107979}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$selectedContacts = $this->getSelectedRecords($request);\n\t$deleted = 0;\n\tforeach($selectedContacts as $contact) {\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t\t$deleted++;\n\t\t} catch (Exception $e) {\n\t\t\t$this->setAlert($e->getMessage(), 'danger');\n\t\t}\n\t}\n\t$this->setAlert(trans('crudbooster.alert_delete_success', ['total' => count($selectedContacts), 'deleted' => $deleted]),'success');\n}", "CodeBleu_score": 44.50628543472752}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$selectedContacts = $this->getSelectedRecords($request);\n\tforeach ($selectedContacts as $contact) {\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t} catch (Exception $e) {\n\t\t\t$this->alert($e->getMessage(), 'danger');\n\t\t}\n\t}\n}", "CodeBleu_score": 46.18647216282304}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\tforeach($transactions as $transaction) {\n\t\ttry {\n\t\t\t$transaction->delete();\n\t\t} catch (Exception $e) {\n\t\t\tflash('Unable to delete transaction: '. $e->getMessage())->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 46.56509001987536}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\t$this->deleteSelectedRecords($transactions);\n}", "CodeBleu_score": 24.029138954633094}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$transaction->delete();\n\t\t} catch (Exception $e) {\n\t\t\tflash()->error('An error occurred while deleting the transaction: '. $e->getMessage());\n\t\t}\n\t}\n\n\tflash()->success('Transactions successfully deleted.');\n}", "CodeBleu_score": 50.266640127766095}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t$validator->after(function($validator) {\n$request = $this->request;\nif (class_exists($request) && $request instanceof FormRequest) {\n$request = new $request;\nforeach ($this->data as $data) {\n$request->setInstance($data);\n$request->prepareForValidation();\n$request->prepareRules();\n$request->validate();\n$validator->errors()->merge($request->getValidator()->errors());\n}\n}\n});\n}", "CodeBleu_score": 19.459053170759756}, {"code": "<?\npublic function withValidator($validator){\n\t$validator->after(function ($validator) {\nif (class_exists($this->requestClass) && is_subclass_of($this->requestClass, FormRequest::class)) {\n$request = app($this->requestClass);\n$rules = $this->prepareRules($request->rules());\nforeach ($this->data as $key => $value) {\n$request->replace($this->data[$key]);\n$request->setValidator($validator->make($this->data[$key], $rules));\n$request->failedValidation($validator);\n}\n}\n});\n}", "CodeBleu_score": 32.22323352636409}, {"code": "<?\npublic function withValidator($validator){\n\t\n$validator->after(function ($validator) {\n    if ($this->shouldFail()) {\n        $validator->errors()->add('email', 'The email has already been taken.');\n    }\n});\n\nreturn $validator;\n}", "CodeBleu_score": 10.269217627113997}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->instance instanceof ShouldUpdate) {\n\t\t$this->setModel($arguments[0]?? null);\n\t\t$this->setRequest($arguments[1]?? null);\n\t}\n}", "CodeBleu_score": 18.02004925757514}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->shouldUpdate()) {\n\t\t$this->update(...$arguments);\n\t}\n}", "CodeBleu_score": 9.5355358275699}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif ($this->instance->shouldUpdate()) {\n\t\tif ($this->instance instanceof Model) {\n\t\t\t$this->instance->set($this->getRequestInstance($arguments[0])->toArray());\n\t\t} else {\n\t\t\t$this->instance->set($arguments[0]->toArray());\n\t\t}\n\n\t\t$this->instance->set($arguments[1]->toArray());\n\t}\n}", "CodeBleu_score": 26.12288951135443}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$sort = in_array($sort, ['name', 'date'])? $sort : 'name';\n\t$sort = request('sort')?: $sort;\n\t$sort = $sort == 'name'? 'asc' : 'desc';\n\n\t$query->orderBy($sort);\n\n\tif (request('search')) {\n\t\t$query->where(function ($query) {\n\t\t\t$query->where('name', 'like', '%'. request('search'). '%')\n\t\t\t\t->orWhere('description', 'like', '%'. request('search'). '%');\n\t\t});\n\t}\n\n\tif (request()->expectsJson()) {\n\t\treturn $query->get();\n\t}\n\n\t$limit = request('limit')?: config('app.pagination');\n\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 44.371128178928224}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\t$limit = $request->get('limit')?: 100;\n\t$sort = $request->get('sort')?: $sort;\n\t$sort = $sort == 'name'? 'asc' : 'desc';\n\t$search = $request->get('search');\n\t$search = $search? $search : '';\n\t$query->where(function($query) use ($search) {\n\t\t$query->where('name', 'like', '%'.$search.'%');\n\t});\n\t$query->orderBy($sort, $sort);\n\tif ($request->expectsJson()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 53.690297614301805}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$sort = $this->getSort($sort);\n\t$query->orderBy($sort, $this->getDirection());\n\treturn $this->getJson()? $query->get() : $query->paginate($this->getLimit());\n}", "CodeBleu_score": 23.779592517648965}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\n\tif ($model->status == 'paid') {\n\t\t$open = 0;\n\t\t$overdue = 0;\n\t} else {\n\t\t$transactions = $model->transactions;\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$open += $transaction->open;\n\t\t\t$overdue += $transaction->overdue;\n\t\t}\n\n\t\t$today = new DateTime('now');\n\t\t$dueDate = new DateTime($model->due_date);\n\n\t\tif ($today > $dueDate) {\n\t\t\t$overdue += $model->amount;\n\t\t} else {\n\t\t\t$open += $model->amount;\n\t\t}\n\t}\n\n\treturn [$open, $overdue];\n}", "CodeBleu_score": 41.49884500905821}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\t$payments = 0;\n\t$due_date = $model->due_date;\n\t$now = date('Y-m-d');\n\tif ($model->status == 'paid') {\n\t\treturn array(\n\t\t\t'open' => 0,\n\t\t\t'overdue' => 0,\n\t\t);\n\t}\n\tif ($model->status == 'partial') {\n\t\tforeach ($model->transactions as $transaction) {\n\t\t\tif ($transaction->status == 'paid') {\n\t\t\t\t$payments += $transaction->amount;\n\t\t\t}\n\t\t}\n\t\tif ($payments < $model->amount) {\n\t\t\t$open = $model->amount - $payments;\n\t\t}\n\t}\n\tif ($due_date < $now) {\n\t\t$overdue = $model->amount - $payments;\n\t}\n\treturn array(\n\t\t'open' => $open,\n\t\t'overdue' => $overdue,\n\t);\n}", "CodeBleu_score": 44.675824595113255}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\t$paid = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn ['open' => 0, 'overdue' => 0];\n\t}\n\n\t$payments = Transaction::find()\n\t\t->where(['document_id' => $model->id])\n\t\t->all();\n\n\tforeach ($payments as $payment) {\n\t\tif ($payment->status == 'paid') {\n\t\t\t$paid += $payment->amount;\n\t\t} else {\n\t\t\t$open += $payment->amount;\n\t\t}\n\t}\n\n\t$overdue = $model->amount - $paid;\n\n\tif ($model->due_date < date('Y-m-d')) {\n\t\t$overdue = $model->amount - $paid;\n\t}\n\n\treturn ['open' => $open, 'overdue' => $overdue];\n}", "CodeBleu_score": 42.70278121324875}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->perPage;\n\t$results = $this->forPage($page, $perPage, $columns)->get();\n\treturn new LengthAwarePaginator($results, $this->count(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 56.57536431640515}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t// Get the current page and items per page from the request\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->perPage;\n\n\t// Get the total count of records from the database\n\t$total = $this->count();\n\n\t// Paginate the results\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\n\t// Return the paginator instance\n\treturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 60.901853311243094}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\n\t$perPage = $perPage?: $this->perPage;\n\n\t$results = $this->forPage($page, $perPage, $columns);\n\n\treturn new LengthAwarePaginator($results, $this->count(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 55.29691341782284}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\t$this->load->model('reconciliation_model');\n\t$this->load->model('transaction_model');\n\t$this->load->model('account_model');\n\t$this->load->model('transaction_type_model');\n\t$this->load->model('transaction_status_model');\n\t$this->load->model('transaction_category_model');\n\n\t$reconciliations = $this->reconciliation_model->get_reconciliations_by_ids($request->reconciliation_ids);\n\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$reconciliation->status_id = $this->transaction_status_model->get_status_id_by_name('reconciled');\n\t\t$reconciliation->save();\n\n\t\t$transactions = $this->transaction_model->get_transactions_by_reconciliation_id($reconciliation->id);\n\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$transaction->status_id = $this->transaction_status_model->get_status_id_by_name('reconciled');\n\t\t\t$transaction->save();\n\n\t\t\t$transaction_type = $this->transaction_type_model->get_transaction_type_by_id($transaction->transaction_type_id);\n\t\t\t$transaction_category = $this->transaction_category_model->get_transaction_category_by_id($transaction->transaction_category_id);\n\t\t\t$account = $this->account_model->get_account_by_id($transaction->account_id);\n\n\t\t\t$this->transaction_model->reconcile_transaction($transaction, $transaction_type, $transaction_category, $account);\n\t\t}\n\t}\n}", "CodeBleu_score": 29.47800440524604}, {"code": "<?\npublic function reconcile($request){\n\t\t$this->validate($request, [\n\t\t'account_id' =>'required',\n\t\t'date_from' =>'required',\n\t\t'date_to' =>'required',\n\t]);\n\n\t$account = Account::findOrFail($request->account_id);\n\t$reconciliations = Reconciliation::where('account_id', $account->id)\n\t\t->where('date_from', '<=', $request->date_from)\n\t\t->where('date_to', '>=', $request->date_to)\n\t\t->get();\n\n\tDB::transaction(function () use ($reconciliations, $account) {\n\t\tforeach ($reconciliations as $reconciliation) {\n\t\t\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t\t\t$reconciliation->save();\n\n\t\t\t$transactions = Transaction::where('account_id', $account->id)\n\t\t\t\t->where('date', '>=', $reconciliation->date_from)\n\t\t\t\t->where('date', '<=', $reconciliation->date_to)\n\t\t\t\t->get();\n\n\t\t\tforeach ($transactions as $transaction) {\n\t\t\t\t$transaction->status = Transaction::STATUS_RECONCILED;\n\t\t\t\t$transaction->save();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => 'Reconciliation completed successfully.',\n\t]);\n}", "CodeBleu_score": 34.297347883258624}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliation = $this->find($request->id);\n\t$reconciliation->status ='reconciled';\n\t$reconciliation->save();\n\n\t$transactions = Transaction::where('reconciliation_id', $request->id)->get();\n\tforeach ($transactions as $transaction) {\n\t\t$transaction->status ='reconciled';\n\t\t$transaction->save();\n\n\t\t$transaction->account->transactions()->where('date', '>=', $reconciliation->start_date)->where('date', '<=', $reconciliation->end_date)->where('id', '!=', $transaction->id)->update(['status' =>'reconciled']);\n\t}\n}", "CodeBleu_score": 34.30406571917737}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->user;\n\t$user->load('invitations');\n\t$user->invitations->each->delete();\n\t$invitation = UserInvitation::create([\n\t\t'user_id' => $user->id,\n\t\t'token' => Str::random(60),\n\t]);\n\tif (! $invitation->notify()) {\n\t\tthrow new Exception('Unable to send invitation notification.');\n\t}\n\treturn $invitation;\n}", "CodeBleu_score": 21.752840812642383}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$this->retrieveInvitations();\n\t$this->createInvitation();\n\t$this->notify();\n\n\treturn $this->invitation;\n}", "CodeBleu_score": 8.87729812176884}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t// Retrieve and delete existing invitations for the user\n\t$this->user->invitations()->delete();\n\n\t// Create a new invitation with a unique token\n\t$invitation = $this->user->invitations()->create([\n\t\t'invitation_token' => Str::random(60),\n\t]);\n\n\t// Attempt to dispatch a notification job to notify the user\n\ttry {\n\t\tdispatch(new NotifyUser($invitation));\n\t} catch (Exception $e) {\n\t\t// If the notification fails, throw an exception with an error message\n\t\tthrow new Exception('Failed to send invitation notification: '. $e->getMessage());\n\t}\n\n\t// Return the newly created invitation\n\treturn $invitation;\n}", "CodeBleu_score": 20.564940226369135}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif ($this->reconciled) {\n\t\tthrow new Exception(\"This transaction has already been reconciled.\");\n\t}\n\tif ($this->type === Transaction::TYPE_TRANSFER) {\n\t\tthrow new Exception(\"This transaction is a transfer transaction. Please use the transfer() function instead.\");\n\t}\n}", "CodeBleu_score": 19.03153591085654}, {"code": "<?\npublic function authorize(): void{\n\t\tif ( $this->isReconciled() ) {\n\t\tthrow new Exception( 'Transaction already reconciled' );\n\t}\n\tif ( $this->isTransfer() ) {\n\t\tthrow new Exception( 'Unauthorized transfer' );\n\t}\n}", "CodeBleu_score": 22.109245464065907}, {"code": "<?\npublic function authorize(): void{\n\t\tif($this->isReconciled()) {\n\t\tthrow new Exception(\"This transaction has been reconciled, it cannot be authorized.\");\n\t}\n\n\tif($this->isTransfer()) {\n\t\tthrow new Exception(\"This transaction is a transfer transaction, it cannot be authorized.\");\n\t}\n}", "CodeBleu_score": 19.128651017817656}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.equals(\"Tenant\") || tableName.equals(\"Tenant_User\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 7.687781469553697}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.equals(\"users\") || tableName.equals(\"user_profiles\") || tableName.equals(\"user_roles\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 9.569142207749179}, {"code": "public boolean doTableFilter(String tableName){\n\t", "CodeBleu_score": 1.5687583116229795}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer configurer = new MapperScannerConfigurer();\n\tconfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn configurer;\n}", "CodeBleu_score": 72.52943502113251}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\ttring res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 88.49015445524337}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null!= dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 89.31643500286685}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\nres.code = 200;\nres.data = platformConfig;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.8061543375957}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tSystemConfigurationService service = new SystemConfigurationService();\n\t\tList<SystemConfiguration> systemConfigurationList = service.getSystemConfigurationList();\n\t\tif (systemConfigurationList.size() > 0) {\n\t\t\tresponse.setResponseCode(200);\n\t\t\tresponse.setData(systemConfigurationList.get(0));\n\t\t} else {\n\t\t\tresponse.setResponseCode(500);\n\t\t\tresponse.setData(\"No system configuration information found.\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setData(\"Error retrieving system configuration information.\");\n\t\tlog.error(\"Error retrieving system configuration information.\", e);\n\t}\n\treturn response;\n}", "CodeBleu_score": 32.15059332612332}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tSystemConfigService service = new SystemConfigService();\n\t\tList<SystemConfig> configList = service.getSystemConfigList();\n\t\tresponse.setResponseCode(200);\n\t\tresponse.setData(configList.get(0));\n\t} catch (Exception e) {\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setData(\"Error retrieving system configuration information: \" + e.getMessage());\n\t\tlog.error(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 34.82090633478535}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\tresponse.setCode(200);\n\ttry {\n\t\tList<SystemConfiguration> systemConfigurationList = systemConfigurationService.getAllSystemConfigurations();\n\t\tif (systemConfigurationList.size() > 0) {\n\t\t\tresponse.setData(systemConfigurationList.get(0));\n\t\t} else {\n\t\t\tresponse.setData(new SystemConfiguration());\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception in getCurrentInfo: \", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setData(\"Error in getCurrentInfo: \" + e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.05650180779771}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\ttry {\n\t\t// Retrieve the business path and file from the request\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tFile file = (File) request.getAttribute(\"file\");\n\n\t\t// Retrieve the file upload type from the request\n\t\tString type = request.getParameter(\"type\");\n\n\t\t// Determine the file upload type\n\t\tif (type.equals(\"local\")) {\n\t\t\t// Save the file locally\n\t\t\tsaveFileLocally(businessPath, file);\n\t\t} else if (type.equals(\"aliyun\")) {\n\t\t\t// Save the file to AliOss\n\t\t\tsaveFileToAliOss(businessPath, file);\n\t\t}\n\n\t\t// Return a success response\n\t\treturn new BaseResponseInfo(true, \"File uploaded successfully.\");\n\t} catch (Exception e) {\n\t\t// Log any exceptions and return a failure response\n\t\tlogger.error(\"Error uploading file: \" + e.getMessage());\n\t\treturn new BaseResponseInfo(false, \"Error uploading file: \" + e.getMessage());\n\t}\n}", "CodeBleu_score": 20.662982543704544}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\t// retrieve the business path and the uploaded file from the request\n\tString businessPath = request.getParameter(\"businessPath\");\n\tPart filePart = request.getPart(\"file\");\n\tString fileName = getFileName(filePart);\n\n\t// save the file to the local file system\n\tString localFilePath = saveFile(filePart, fileName);\n\n\t// save the file to AliOss\n\tString aliOssFilePath = \"\";\n\ttry {\n\t\taliOssFilePath = saveFileToAliOss(fileName, localFilePath);\n\t} catch (Exception e) {\n\t\t// log any exceptions\n\t\te.printStackTrace();\n\t}\n\n\t// set the response code and data\n\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tresponseInfo.setCode(ResponseCode.SUCCESS);\n\tresponseInfo.setData(aliOssFilePath);\n\n\treturn responseInfo;\n}", "CodeBleu_score": 28.462538720424046}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t", "CodeBleu_score": 3.3888212609146513}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccountName(obj.getString(\"accountName\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountSerialNo(obj.getString(\"accountSerialNo\"));\n\t\taccount.setAccountDescription(obj.getString(\"accountDescription\"));\n\t\taccount.setAccountCurrency(obj.getString(\"accountCurrency\"));\n\t\taccount.setAccountAmount(obj.getDouble(\"accountAmount\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountEnabled(obj.getString(\"accountEnabled\"));\n\t\taccount.setAccountDefault(obj.getString(\"accountDefault\"));\n\t\taccount.setAccountCreatedBy(obj.getString(\"accountCreatedBy\"));\n\t\taccount.setAccountCreatedOn(new Date());\n\t\taccount.setAccountModifiedBy(obj.getString(\"accountModifiedBy\"));\n\t\taccount.setAccountModifiedOn(new Date());\n\t\taccount.setAccountDeletedBy(obj.getString(\"accountDeletedBy\"));\n\t\taccount.setAccountDeletedOn(new Date());\n\t\taccount.setAccountDeleted(obj.getString(\"accountDeleted\"));\n\t\tresult = accountMapper.insert(account);\n\t\tlogger.info(\"insert account result: \" + result);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 29.91875167230433}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t", "CodeBleu_score": 3.3888212609146513}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 40.364664009615986}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while getting count of accounts with the specified name and serial number\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.54979491444588}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn mapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error while retrieving account count with name \" + name + \" and serial number \" + serialNo, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.147389269618078}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\treturn depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting depot item with id \" + id, e);\n\t\tthrow e;\n\t}\n}", "CodeBleu_score": 25.664488572109885}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting depot item with id: \" + id, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.317614483163084}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting depot item with ID \" + id, e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 60.2059346022932}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\tboolean result = false;\n\ttry {\n\t\t// Create an HTTP client\n\t\thttpClient = HttpClients.createDefault();\n\n\t\t// Construct the request URL\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"api/v1/nodes/\" + nodeType + \"/\" + nodeKey;\n\n\t\t// Create an HTTP request\n\t\tHttpUriRequest request = RequestBuilder.get().setUri(new URI(url)).build();\n\n\t\t// Execute the request\n\t\thttpResponse = httpClient.execute(request);\n\n\t\t// Process the response\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tresult = true;\n\t\t} else {\n\t\t\tSystem.out.println(\"Error: \" + httpResponse.getStatusLine().getStatusCode());\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close the HTTP client and response\n\t\tclose(httpClient, httpResponse);\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 43.20208002863774}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"node/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.22535595744607}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\t// Create an HTTP client\n\t\thttpClient = HttpClients.createDefault();\n\t\t// Construct the request URL\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"node/\" + nodeType + \"/\" + nodeKey;\n\t\t// Send an HTTP GET request to the endpoint\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\t// Process the response\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t// Get the response body as a string\n\t\t\tString responseBody = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t// Parse the response body as a JSON object\n\t\t\tJSONObject jsonObject = new JSONObject(responseBody);\n\t\t\t// Check if the response contains a key\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\t// Get the key from the response\n\t\t\t\tString key = jsonObject.getString(\"key\");\n\t\t\t\t// Print the key\n\t\t\t\tSystem.out.println(\"Node key: \" + key);\n\t\t\t\t// Return true\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\t// Print any exceptions\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close resources\n\t\tclose(httpClient, httpResponse);\n\t}\n\t// Return false if the response does not contain a key\n\treturn false;\n}", "CodeBleu_score": 49.675358511322365}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tHttpPost httpPost = new HttpPost(protocol + host + \":\" + port + withProjectName(projectName) + \"edge\");\n\t\thttpPost.addHeader(\"Accept\", \"application/json\");\n\t\thttpPost.addHeader(\"Content-Type\", \"application/json\");\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"type\", edgeType);\n\t\tjsonObject.put(\"from\", fromType + \":\" + from);\n\t\tjsonObject.put(\"to\", toType + \":\" + to);\n\t\tStringEntity stringEntity = new StringEntity(jsonObject.toString());\n\t\thttpPost.setEntity(stringEntity);\n\t\thttpResponse = httpClient.execute(httpPost);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tString jsonString = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject json = new JSONObject(jsonString);\n\t\t\tif (json.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 50.34904759312715}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\t// Create a CloseableHttpClient\n\t\thttpClient = HttpClients.createDefault();\n\n\t\t// Create a HttpGet request\n\t\tHttpGet httpGet = new HttpGet(protocol + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\n\t\t// Execute the request\n\t\thttpResponse = httpClient.execute(httpGet);\n\n\t\t// Process the response\n\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\tString responseBody = EntityUtils.toString(httpResponse.getEntity());\n\t\tif (statusCode == 200) {\n\t\t\tJSONObject jsonObject = new JSONObject(responseBody);\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tSystem.out.println(\"Status code: \" + statusCode);\n\t\t\tSystem.out.println(\"Response body: \" + responseBody);\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 53.43388664680503}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\tboolean success = false;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = \"http://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n\t\tHttpGet request = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(request);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tBufferedReader reader = new BufferedReader(new InputStreamReader(httpResponse.getEntity().getContent()));\n\t\t\tString line = reader.readLine();\n\t\t\tif (line.contains(\"key\")) {\n\t\t\t\tsuccess = true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn success;\n}", "CodeBleu_score": 52.18185660789243}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString json = gson.toJson(event);\n\t\tif (event.getTarget()!= null) {\n\t\t\tproducer.send(new ProducerRecord<>(event.getTarget(), json));\n\t\t} else {\n\t\t\tproducer.send(new ProducerRecord<>(\"test\", json));\n\t\t}\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 26.54157947983593}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString json = gson.toJson(event);\n\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(\n\t\t\t\tevent.getLocation().getTopic(), json);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 32.67094685095445}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\tthrow new IllegalArgumentException(\"Event or message cannot be null\");\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString jsonEvent = event.toJson();\n\tString topic = event.getTopic();\n\tif (topic == null) {\n\t\ttopic = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonEvent);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 38.562044532323235}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client.\n\tOSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n\t// Upload the file content to the specified object.\n\tPutObjectResult result = ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\n\t// Close the OSS client.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn result.getURL().toString();\n}", "CodeBleu_score": 33.733588992827464}, {"code": "public String upload(String objName, byte[] content){\n\t\tOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\ttry {\n\t\tossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tossClient.shutdown();\n\t}\n\treturn config.getBucketName() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 36.00980749160318}, {"code": "public String upload(String objName, byte[] content){\n\t// 1. Create a OSS client instance.\nOSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n// 2. Upload a file to an OSS bucket.\ntry {\n    PutObjectResult putObjectResult = ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n    System.out.println(\"Put object result: \" + putObjectResult.getETag());\n} catch (OSSException e) {\n    System.out.println(\"Failed to upload file to OSS: \" + e.getMessage());\n    e.printStackTrace();\n} catch (ClientException e) {\n    System.out.println(\"Failed to upload file to OSS: \" + e.getMessage());\n    e.printStackTrace();\n} finally {\n    // 3. Close the OSS client.\n    ossClient.shutdown();\n}\n\n// 4. Return the URL of the uploaded object.\nreturn config.getEndpoint() + \"/\" + config.getBucketName() + \"/\" + objName;\n}", "CodeBleu_score": 43.10123363421995}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tureIpToLocationWorker();\nIpToLocationWorker worker = getIpToLocationWorker();\nreturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 16.758698031003778}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tureIpToLocationWorker();\nIpToLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\n    return new LocationInfo(\"unknown\", \"unknown\");\n}\nreturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.639541923925044}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tureIpToLocationWorker();\nIpToLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\n    return new LocationInfo(\"unknown\", \"unknown\");\n}\nreturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.639541923925044}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (this.esClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.esClient = new TransportClient();\n\t\tfor (HttpHost host : parseHosts(clusterHostList, clusterHostPort)) {\n\t\t\tthis.esClient.addTransportAddress(host);\n\t\t}\n\t}\n}", "CodeBleu_score": 20.38983907082566}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelClient!= null && highLevelClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (lowLevelClient!= null && highLevelClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tif (clusterHostList == null) {\n\t\t\tthrow new Exception(\"Cluster host list is not set\");\n\t\t}\n\t\tif (clusterHostPort == 0) {\n\t\t\tthrow new Exception(\"Cluster host port is not set\");\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\tif (hosts.isEmpty()) {\n\t\t\tthrow new Exception(\"Cluster host list is empty\");\n\t\t}\n\t\tlowLevelClient = new TransportClient().addTransportAddresses(hosts.toArray(new HttpHost[hosts.size()]));\n\t\thighLevelClient = new RestClient.Builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t}\n}", "CodeBleu_score": 52.88682815080355}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (esClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tif (lowLevelClient!= null && highLevelClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tif (clusterHostList == null) {\n\t\t\tthrow new Exception(\"Cluster host list is not set\");\n\t\t}\n\t\tif (clusterHostPort == 0) {\n\t\t\tthrow new Exception(\"Cluster host port is not set\");\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\tlowLevelClient = new TransportClient(settings).addTransportAddresses(hosts.toArray(new HttpHost[hosts.size()]));\n\t\thighLevelClient = new RestClient(settings).addTransportAddresses(hosts.toArray(new HttpHost[hosts.size()]));\n\t}\n}", "CodeBleu_score": 52.16412156505359}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tif (host.contains(\":\")) {\n\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\thosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 50.07923043889738}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tString[] hosts = clusterHostList.split(\",\");\n\tList<HttpHost> httpHosts = new ArrayList<HttpHost>();\n\tfor (String host : hosts) {\n\t\thttpHosts.add(new HttpHost(host, clusterPort));\n\t}\n\treturn httpHosts;\n}", "CodeBleu_score": 38.94196810438032}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tif (host.contains(\":\")) {\n\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\thosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 50.07923043889738}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t// TODO Auto-generated method stub\n\twhile (true) {\n\t\ttry {\n\t\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task!= null) {\n\t\t\t\tswitch (task.getTaskType()) {\n\t\t\t\tcase PLAIN_TEXT_MESSAGE:\n\t\t\t\t\tsendPlainTextMessage(task.getToNumber(), task.getMessage());\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tSystem.out.println(\"Unknown task type \" + task.getTaskType());\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 21.08650996371299}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task!= null) {\n\t\t\tif (task.getType().equals(\"plainTextMessage\")) {\n\t\t\t\ttry {\n\t\t\t\t\tPlainTextMessage plainTextMessage = (PlainTextMessage) task.getData();\n\t\t\t\t\tString toNumber = plainTextMessage.getToNumber();\n\t\t\t\t\tString message = plainTextMessage.getMessage();\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tSystem.out.println(\"Error processing task \" + task.getId() + \": \" + e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 29.642777289111876}, {"code": "protected void pollingWork() throws InterruptedException{\n\t// TODO Auto-generated method stub\n\twhile(true){\n\t\ttry {\n\t\t\tTask task = this.getTaskQueue().take();\n\t\t\tif (task!=null){\n\t\t\t\tif (task.getTaskType().equals(TaskType.PLAIN_TEXT_MESSAGE)){\n\t\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t\tThread.sleep(30000);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 21.591615811351982}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tHttpGet request = new HttpGet(uri);\n\t\tresponse = getHttpClient().execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.info(content);\n\t\treturn content;\n\t} finally {\n\t\tif (response!= null) {\n\t\t\tresponse.close();\n\t\t}\n\t}\n}", "CodeBleu_score": 53.516434056696106}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tif (entity!= null) {\n\t\tString result = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlog.info(result);\n\t\treturn result;\n\t}\n\treturn null;\n}", "CodeBleu_score": 63.90732652678723}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity!= null) {\n\t\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tlog.info(responseString);\n\t\t\treturn responseString;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 62.124270686344495}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\tNode root = doc.getFirstChild();\n\tObject[] result = decodeNodeToMap(root, doTrim);\n\tif (result == null || result.length < 2){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) result[1];\n}", "CodeBleu_score": 46.402871654831415}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode rootNode = doc.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tString rootName = (String) rootValue[0];\n\tObject rootValueObj = rootValue[1];\n\tif (rootValueObj instanceof Map){\n\t\treturn (Map<String, Object>) rootValueObj;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootName, rootValueObj);\n\treturn result;\n}", "CodeBleu_score": 66.12881917751918}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode root = doc.getFirstChild();\n\tif (root == null){\n\t\treturn null;\n\t}\n\tObject[] result = decodeNodeToMap(root, doTrim);\n\tif (result == null || result.length < 2){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) result[1];\n}", "CodeBleu_score": 46.07713433168284}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t//dev-note: check to see if the order is eligible for auto-processing\n\tif (!isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\tlog.fine(orderRecord.toString() + \" is not eligible for auto-processing\");\n\t\treturn;\n\t}\n\n\t//dev-note: log the action\n\tlog.config(orderRecord.toString() + \" is eligible for auto-processing\");\n\n\t//dev-note: enqueue the order for auto-processing\n\tenqueueGenerateSchedulesAfterCommit(orderRecord, orderRecord.get_ID());\n}", "CodeBleu_score": 19.267716108821226}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tlog.info(\"Enqueueing Generate Schedules after commit for order \" + orderRecord.getDocumentNo());\n\t\tenqueueGenerateSchedules(orderRecord);\n\t} else {\n\t\tlog.info(\"Order \" + orderRecord.getDocumentNo() + \" is not eligible for auto-processing. Scheduling missing shipment schedules.\");\n\t\tscheduleMissingShipmentSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 21.168213305097456}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tlog.info(\"enqueueGenerateSchedulesAfterCommit: order {} is eligible for auto-processing\", orderRecord.get_ID());\n\t\tenqueueGenerateSchedules(orderRecord);\n\t}\n\telse\n\t{\n\t\tlog.info(\"enqueueGenerateSchedulesAfterCommit: order {} is not eligible for auto-processing\", orderRecord.get_ID());\n\t\tif (orderRecord.isPostponedShipmentScheduleCreation())\n\t\t{\n\t\t\tlog.info(\"enqueueGenerateSchedulesAfterCommit: order {} is not eligible for auto-processing, but postponed shipment schedule creation is enabled\", orderRecord.get_ID());\n\t\t\tenqueueCreateShipmentSchedules(orderRecord);\n\t\t}\n\t}\n}", "CodeBleu_score": 30.481102038128576}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t/ get user by email\n\t$user = User::where('email', $request->email)->first();\n\n\t// check if user exists and if the provided password matches the user's password\n\tif (!$user ||!Hash::check($request->password, $user->password)) {\n\t\t// trigger a failed authentication event\n\t\t$this->fireFailedEvent($request, $user);\n\n\t\t// throw an authentication exception\n\t\t$this->throwFailedAuthenticationException($request);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 48.88769769186481}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = $this->guard()->validate($credentials = $request->only('email', 'password'));\n\tif ($user) {\n\t\tif ($this->hasTooManyLoginAttempts($request)) {\n\t\t\t$this->fireLockoutEvent($request);\n\t\t\t$this->throwLockoutException($request);\n\t\t}\n\t\tif ($this->attemptLogin($request, $user)) {\n\t\t\treturn $user;\n\t\t}\n\t\t$this->incrementLoginAttempts($request);\n\t}\n\t$this->fireFailedEvent($request, $user);\n\t$this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 46.20031172648919}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = $this->users->where('email', $request->email)->first();\n\n\tif (! $user ||! Hash::check($request->password, $user->password)) {\n\t\t$this->fireFailedEvent($request, $user);\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t'email' => [trans('auth.failed')],\n\t\t]);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 33.6642360185143}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t", "CodeBleu_score": 6.451612903225811}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementRequestLimit($request);\n\tthrow new ValidationException(\n\t\t\"Invalid username or password. Please try again.\",\n\t\t\"Invalid credentials\"\n\t);\n}", "CodeBleu_score": 44.95079500008961}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementRequestLimit($request);\n\n\tthrow new ValidationException(\n\t\t'Invalid credentials',\n\t\t['password' => ['']]\n\t);\n}", "CodeBleu_score": 48.856035880927024}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t\t$userId = $request->session()->get('userId');\n\t$user = User::find($userId);\n\n\tif($user) {\n\t\t$response = $this->webAuthn->getAssertionResponse($user->webauthn_public_key, $user->webauthn_attestation_object);\n\n\t\treturn view('TwoFactorChallenge', [\n\t\t\t'userId' => $userId,\n\t\t\t'webauthn_enabled' => $user->webauthn_enabled,\n\t\t\t'remember_me' => $user->remember_me\n\t\t])->with('response', $response);\n\t} else {\n\t\treturn response()->view('TwoFactorChallenge', [\n\t\t\t'userId' => $userId,\n\t\t\t'webauthn_enabled' => false,\n\t\t\t'remember_me' => false\n\t\t]);\n\t}\n}", "CodeBleu_score": 41.939680604490626}, {"code": "<?\npublic function toResponse($request){\n\t\t$userId = $request->session()->get('userId');\n\t$user = User::find($userId);\n\tif ($user) {\n\t\t$assertion = $this->generateAssertion($user);\n\t\treturn view('TwoFactorChallenge', ['user' => $user, 'assertion' => $assertion,'rememberMe' => $request->session()->get('rememberMe')]);\n\t}\n\telse {\n\t\treturn redirect('/');\n\t}\n}", "CodeBleu_score": 39.786905224925455}, {"code": "<?\npublic function toResponse($request){\n\t\t$user = $this->guard->user();\n\tif ($user) {\n\t\t$webAuthn = new WebAuthn();\n\t\t$publicKey = $webAuthn->generatePublicKey();\n\t\t$user->webAuthnPublicKey = $publicKey;\n\t\t$user->save();\n\t\t$response = $webAuthn->generateResponse($publicKey, $user->id);\n\t\treturn view('TwoFactorChallenge', [\n\t\t\t'enabled' => $user->two_factor_auth,\n\t\t\t'rememberMe' => $user->remember_me\n\t\t])->withResponse($response);\n\t}\n\treturn redirect()->route('login');\n}", "CodeBleu_score": 35.58329154581497}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t/ Get the user token for the given driver and socialite user ID.\n$userToken = UserToken::where('driver', $driver)->where('driver_id', $socialite->getId())->first();\n\n// If a user token is found, retrieve the associated user and verify the user association.\nif ($userToken) {\n    $user = $userToken->user;\n    $this->checkUserAssociation($request, $user, $driver);\n} else {\n    // If no user token is found, create a new user or associate the socialite token with an existing user.\n    $user = $this->getUserOrCreate($socialite);\n    $userToken = $this->createUserToken($user, $driver, $socialite);\n}\n\n// Return the authenticated user.\nreturn $user;\n}", "CodeBleu_score": 60.09898065664311}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tthis->checkUserToken: private function checkUserToken(UserToken $userToken): void\n    {\n        if (!$userToken->token ||!$userToken->refresh_token) {\n            $this->throwFailedAuthenticationException($request, $driver, trans('This provider is already associated with another account'));\n        }\n    }\n$this->checkUserAssociation: private function checkUserAssociation(Request $request, User $user, string $driver): void\n    {\n        if (($userId = Auth::id()) && $userId!== $user->id) {\n            $this->throwFailedAuthenticationException($request, $driver, trans('This provider is already associated with another account'));\n        }\n    }\n$this->createUserToken: private function createUserToken(User $user, string $driver, SocialiteUser $socialite): UserToken\n    {\n        $token = [\n            'driver' => $driver,\n            'driver_id' => $socialite->getId(),\n            'user_id' => $user->id,\n            'email' => $socialite->getEmail(),\n        ];\n\n        if ($socialite instanceof OAuth1User) {\n            $token['token'] = $socialite->token;\n            $token['token_secret'] = $socialite->tokenSecret;\n            $token['format'] = 'oauth1';\n        } elseif ($socialite instanceof OAuth2User) {\n            $token['token'] = $socialite->token;\n            $token['refresh_token'] = $socialite->refreshToken;\n            $token['expires_in'] = $socialite->expiresIn;\n            $token['format'] = 'oauth2';\n        } else {\n            throw new \\UnexpectedValueException('authentication format not supported');\n        }\n\n        return UserToken::create($token);\n    }\n}", "CodeBleu_score": 37.55000627210261}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t/ Check if there is an existing user token for the given driver and socialite user ID\n$userToken = UserToken::where('driver', $driver)->where('driver_id', $socialite->getId())->first();\n\nif ($userToken) {\n// If found, retrieve the associated user and verify the user association\n$user = $userToken->user;\n$this->checkUserAssociation($request, $user, $driver);\n} else {\n// If not, create a new user or associate the socialite token with an existing user\n$user = $this->getUserOrCreate($socialite);\n}\n\n// Create a new user token for the given driver and socialite user ID\n$userToken = $this->createUserToken($user, $driver, $socialite);\n\n// Associate the user token with the authenticated user\n$user->tokens()->save($userToken);\n\n// Return the authenticated user\nreturn $user;\n}", "CodeBleu_score": 58.02323863423542}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tGet the user from the request.\n\t$user = $this->guard->user();\n\n\t// If no user was found, return false.\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t// Get the filtered credentials from the request.\n\t$credentials = $this->filterCredentials($request);\n\n\t// Validate the assertion.\n\tif (!$this->webauthn->validateAssertion($user, $credentials)) {\n\t\t// If validation fails, trigger a failed authentication event, throw an authentication exception, and return false.\n\t\t$this->fireFailedEvent($request, $user);\n\t\t$this->throwFailedAuthenticationException($request);\n\t\treturn false;\n\t}\n\n\t// If validation is successful, return true.\n\treturn true;\n}", "CodeBleu_score": 55.982285841022374}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\ter = $this->getUser($request);\n\n\tif (!$user) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->filterCredentials($request);\n\n\ttry {\n\t\t$this->guard->validate($credentials, $user);\n\t} catch (AuthenticationException $e) {\n\t\t$this->fireFailedEvent($request, $user);\n\n\t\tthrow $e;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 40.940803424641295}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t$email = $this->email;\n\tif (empty($email)) {\n\t\t$this->logger->error(\"No email address provided\");\n\t\treturn null;\n\t}\n\n\ttry {\n\t\t$user = $this->userRepository->findByEmail($email);\n\t\treturn $user;\n\t} catch (Exception $e) {\n\t\t$this->logger->error(\"Failed to find user by email: \". $e->getMessage());\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 41.260423805171634}, {"code": "<?\nprivate function user(): ?User{\n\tif ($this->email === null) {\n\t\t$this->log->error('Email not provided');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\t$user = $this->userRepository->findByEmail($this->email);\n\t} catch (Exception $e) {\n\t\t$this->log->error('Unable to find user by email: '. $this->email);\n\t\treturn null;\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 47.929501556268825}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $this->email;\n\tif (empty($email)) {\n\t\t$this->logError(\"No email provided\");\n\t\treturn null;\n\t}\n\ttry {\n\t\t$user = User::where(\"email\", $email)->first();\n\t\treturn $user;\n\t} catch (Exception $e) {\n\t\t$this->logError(\"Failed to find user by email: \". $email);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 41.327697689789964}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif ($this->option('flush')) {\n\t\tif ($this->option('scout-driver') ==='meilisearch') {\n\t\t\t$this->info('Flushing Meilisearch indexes...');\n\t\t\t$indexes = config('scout.meilisearch.indexes');\n\t\t\tforeach ($indexes as $index => $settings) {\n\t\t\t\t$tableName = $settings['table']?? $index;\n\t\t\t\t$this->artisan(\"scout:flush {$tableName}\");\n\t\t\t}\n\t\t\t$this->info('Meilisearch indexes flushed.');\n\t\t}\n\t}\n}", "CodeBleu_score": 47.5200995270342}, {"code": "<?\nprotected function scoutFlush(): void{\n\t$scoutDriver = config('scout.driver');\n\t$flush = config('scout.flush');\n\tif ($scoutDriver ==='meilisearch' && $flush) {\n\t\t$this->info('Flushing Meilisearch indexes...');\n\t\t$indexSettings = config('scout.meilisearch.index_settings');\n\t\tforeach ($indexSettings as $indexName => $indexSettings) {\n\t\t\t$tableName = $indexSettings['table'];\n\t\t\t$this->artisan(\"scout:flush {$tableName}\", [], ['--force' => true]);\n\t\t}\n\t\t$this->info('Meilisearch indexes flushed.');\n\t}\n}", "CodeBleu_score": 43.975907340576356}, {"code": "<?\nprotected function scoutFlush(): void{\n\tf ($this->option('flush')) {\n$scoutDriver = config('scout.driver');\nif ($scoutDriver ==='meilisearch') {\n$indexes = config('scout.indexes');\nforeach ($indexes as $indexName => $indexSettings) {\n$tableName = $indexSettings['model']::getScoutModelName();\n$this->artisan(\"scout:flush {$tableName}\", [], $this->output);\n}\n$this->info('Scout indexes flushed successfully.');\n}\n}\n}", "CodeBleu_score": 45.712489000234754}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$this->readExisting: private function readExisting(VCardResource $resource): VCard\n    {\n        $vcard = $resource->vcard();\n\n        if ($vcard === null) {\n            $vcard = VCard::create();\n        }\n\n        if ($vcard->uid === null) {\n            $vcard->uid = $resource->uid();\n        }\n\n        return $vcard;\n    }\n$this->addBasicInformation: private function addBasicInformation(VCard $vcard, VCardResource $resource): void\n    {\n        $vcard->fn = $resource->fn();\n        $vcard->n = $resource->n();\n        $vcard->org = $resource->org();\n        $vcard->title = $resource->title();\n        $vcard->url = $resource->url();\n        $vcard->note = $resource->note();\n        $vcard->bday = $resource->bday();\n        $vcard->email = $resource->email();\n        $vcard->tel = $resource->tel();\n        $vcard->adr = $resource->adr();\n        $vcard->photo = $resource->photo();\n    }\n$this->addAdditionalInformation: private function addAdditionalInformation(VCard $vcard, VCardResource $resource): void\n    {\n        $this->exporters($resource::class)\n            ->each(fn (ExportVCardResource $exporter): void => $exporter->export($vcard, $resource));\n    }\n$this->save: private function save(VCard $vcard): void\n    {\n        $vcard->save();\n    }\n}", "CodeBleu_score": 36.00433309418229}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$card = $this->getCard($addressBookId, $cardUri);\n\tif($card === false) {\n\t\treturn false;\n\t}\n\tif($card instanceof \\OCA\\Contacts\\VObject\\Contact) {\n\t\t$this->deleteContact($card->id);\n\t} elseif($card instanceof \\OCA\\Contacts\\VObject\\Group) {\n\t\t$this->deleteGroup($card->id);\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 32.49945014119591}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$this->logger->debug(\n\t\t'Deleting card {cardUri} from address book {addressBookId}',\n\t\t[\n\t\t\t'cardUri' => $cardUri,\n\t\t\t'addressBookId' => $addressBookId\n\t\t]\n\t);\n\n\t$object = $this->objectStorage->getObjectByUri($cardUri);\n\tif ($object === null) {\n\t\t$this->logger->debug(\n\t\t\t'Could not find object for card URI {cardUri}',\n\t\t\t[\n\t\t\t\t'cardUri' => $cardUri\n\t\t\t]\n\t\t);\n\n\t\treturn false;\n\t}\n\n\tif ($object instanceof Contact) {\n\t\t$this->logger->debug(\n\t\t\t'Deleting contact {contactId}',\n\t\t\t[\n\t\t\t\t'contactId' => $object->getId()\n\t\t\t]\n\t\t);\n\n\t\t$this->jobDispatcher->dispatch(\n\t\t\tnew DestroyContactJob($object->getId()),\n\t\t\tJobQueue::PRIORITY_HIGH\n\t\t);\n\t} elseif ($object instanceof Group) {\n\t\t$this->logger->debug(\n\t\t\t'Deleting group {groupId}',\n\t\t\t[\n\t\t\t\t'groupId' => $object->getId()\n\t\t\t]\n\t\t);\n\n\t\t$this->jobDispatcher->dispatch(\n\t\t\tnew DestroyGroupJob($object->getId()),\n\t\t\tJobQueue::PRIORITY_HIGH\n\t\t);\n\t} else {\n\t\t$this->logger->debug(\n\t\t\t'Object {objectId} is neither a contact nor a group',\n\t\t\t[\n\t\t\t\t'objectId' => $object->getId()\n\t\t\t]\n\t\t);\n\n\t\treturn false;\n\t}\n\n\t$this->logger->debug(\n\t\t'Deleting object {objectId}',\n\t\t[\n\t\t\t'objectId' => $object->getId()\n\t\t]\n\t);\n\n\t$this->objectStorage->deleteObject($object);\n\n\treturn true;\n}", "CodeBleu_score": 40.89119742900686}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$this->logger->debug(\"Deleting card with URI $cardUri from address book $addressBookId\");\n\t$object = $this->getObject($addressBookId, $cardUri);\n\tif ($object instanceof Contact) {\n\t\t$this->logger->debug(\"Deleting contact with URI $cardUri\");\n\t\t$this->jobQueue->enqueueJob(new DeleteContactJob($object->getId()));\n\t\treturn true;\n\t}\n\tif ($object instanceof Group) {\n\t\t$this->logger->debug(\"Deleting group with URI $cardUri\");\n\t\t$this->jobQueue->enqueueJob(new DeleteGroupJob($object->getId()));\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 41.55553367001834}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\t$file = $data['file'];\n\t$lead_activity_id = $data['lead_activity_id'];\n\t$lead_activity = $this->get($lead_activity_id);\n\n\tif (empty($file)) {\n\t\treturn;\n\t}\n\n\t$file_name = $file->getClientOriginalName();\n\t$file_path = $file->storeAs('lead_activities', $file_name);\n\t$file_size = $file->getSize();\n\n\t$file_record = new File;\n\t$file_record->name = $file_name;\n\t$file_record->path = $file_path;\n\t$file_record->size = $file_size;\n\t$file_record->save();\n\n\t$lead_activity->files()->attach($file_record->id);\n\n\treturn $file_record;\n}", "CodeBleu_score": 39.30425738591262}, {"code": "<?\npublic function upload(array $data){\n\t", "CodeBleu_score": 3.1609195402298855}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!isset($data['file']) ||!$data['file']) {\n\t\treturn null;\n\t}\n\t$file = $data['file'];\n\t$leadActivity = $this->create($data);\n\t$leadActivity->set('file_name', $file->getOriginalName());\n\t$leadActivity->set('file_path', $file->getPath());\n\t$leadActivity->save();\n\treturn $leadActivity;\n}", "CodeBleu_score": 24.95879105087253}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t", "CodeBleu_score": 5.526315789473684}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tf (request()->is('admin/*')) {\n\t\treturn $this->response('admin', $exception->getStatusCode());\n\t}\n\n\tif (request()->is('front/*')) {\n\t\treturn $this->response('front', 404);\n\t}\n\n\treturn $this->response('front', 500);\n}", "CodeBleu_score": 15.64352051069836}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t**\n * If the exception is a ModelNotFoundException, it checks if the route is for admin or front. If it is for admin, it returns a response with a 404 status code. If it is for front, it redirects to the admin session creation.\n */\nif ($exception instanceof ModelNotFoundException) {\n\n$route = request()->route();\n\nif ($route->getName() == 'admin.session.create') {\nreturn $this->response('admin::errors.404', 404);\n}\n\nreturn redirect()->route('admin.session.create');\n}\n\n/**\n * If the exception is a PDOException, it checks if the route is for admin or front. If it is for admin, it returns a response with a 500 status code. If it is for front, it redirects to the admin session creation.\n */\nif ($exception instanceof PDOException) {\n\n$route = request()->route();\n\nif ($route->getName() == 'admin.session.create') {\nreturn $this->response('admin::errors.500', 500);\n}\n\nreturn redirect()->route('admin.session.create');\n}\n\n/**\n * If the exception is a ParseError, it checks if the route is for admin or front. If it is for admin, it returns a response with a 500 status code. If it is for front, it redirects to the admin session creation.\n */\nif ($exception instanceof ParseError) {\n\n$route = request()->route();\n\nif ($route->getName() == 'admin.session.create') {\nreturn $this->response('admin::errors.500', 500);\n}\n\nreturn redirect()->route('admin.session.create');\n}\n\n/**\n * If the exception is an HttpException, it sets the status code to a specified value or 500.\n */\nif ($exception instanceof HttpException) {\nreturn $this->response('admin::errors.500', $exception->getStatusCode());\n}\n\n/**\n * If the exception is not an HttpException, it returns a response with a 500 status code.\n */\nreturn $this->response('admin::errors.500', 500);\n}", "CodeBleu_score": 36.13025024510607}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.95236850860614}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.95236850860614}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.95236850860614}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t\t$activities = $this->request->data('activity_id');\n\t$is_done = $this->request->data('is_done');\n\t$user_id = $this->request->session()->read('Auth.User.id');\n\t$count = 0;\n\n\tforeach ($activities as $activity_id) {\n\t\t$this->Events->dispatch('Activity.beforeMassUpdate', $activity_id, $is_done, $user_id);\n\n\t\t$activity = $this->Activities->get($activity_id);\n\t\t$activity->is_done = $is_done;\n\t\t$this->Activities->save($activity);\n\n\t\t$this->Events->dispatch('Activity.afterMassUpdate', $activity_id, $is_done, $user_id);\n\n\t\t$count++;\n\t}\n\n\t$this->set('success', $count > 0);\n\t$this->set('_serialize', ['success']);\n}", "CodeBleu_score": 36.92702100765319}, {"code": "<?\npublic function massUpdate(){\n\t\t$activity_ids = $_POST['activity_ids'];\n\t$is_done = $_POST['is_done'];\n\n\t$updated_count = 0;\n\t$error_count = 0;\n\n\tforeach ($activity_ids as $activity_id) {\n\t\t$activity = $this->Activity->findById($activity_id);\n\t\tif ($activity) {\n\t\t\t$this->Activity->id = $activity_id;\n\t\t\t$this->Activity->set('is_done', $is_done);\n\t\t\tif ($this->Activity->save()) {\n\t\t\t\t$updated_count++;\n\t\t\t} else {\n\t\t\t\t$error_count++;\n\t\t\t}\n\t\t} else {\n\t\t\t$error_count++;\n\t\t}\n\t}\n\n\t$response = array('updated_count' => $updated_count, 'error_count' => $error_count);\n\t$this->set(compact('response'));\n\t$this->set('_serialize','response');\n}", "CodeBleu_score": 31.281324658466215}, {"code": "<?\npublic function massUpdate(){\n\t\t$activity_ids = $this->request->data('activity_ids');\n\t$is_done = $this->request->data('is_done');\n\n\tif (empty($activity_ids)) {\n\t\treturn $this->response->error('No activity IDs specified', 400);\n\t}\n\n\tif (empty($is_done)) {\n\t\treturn $this->response->error('No is_done value specified', 400);\n\t}\n\n\t$success_count = 0;\n\t$failure_count = 0;\n\t$failure_ids = array();\n\n\tforeach ($activity_ids as $activity_id) {\n\t\t$activity = $this->Activity->find('first', array(\n\t\t\t'conditions' => array(\n\t\t\t\t'Activity.id' => $activity_id\n\t\t\t)\n\t\t));\n\n\t\tif (empty($activity)) {\n\t\t\t$failure_ids[] = $activity_id;\n\t\t\t$failure_count++;\n\t\t\tcontinue;\n\t\t}\n\n\t\t$activity['Activity']['is_done'] = $is_done;\n\t\t$activity['Activity']['updated_by'] = $this->request->user('id');\n\n\t\t$this->Activity->create();\n\t\t$this->Activity->save($activity);\n\n\t\t$success_count++;\n\t}\n\n\treturn $this->response->success(array(\n\t\t'success_count' => $success_count,\n\t\t'failure_count' => $failure_count,\n\t\t'failure_ids' => $failure_ids\n\t));\n}", "CodeBleu_score": 32.778923591970766}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\t$this->dispatch(new ActivityMassDeleteEvent($this->request));\n\n\t$ids = $this->request->get('ids');\n\t$ids = explode(',', $ids);\n\n\tforeach($ids as $id) {\n\t\t$this->dispatch(new ActivityDeleteEvent($id));\n\t}\n\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => 'Activities deleted successfully!'\n\t]);\n}", "CodeBleu_score": 25.200309060285953}, {"code": "<?\n public function massDestroy(){\n\t\t// Check if the user has permission to delete activities\n\tif (!auth()->user()->can('delete_activities')) {\n\t\treturn response()->json([\n\t\t\t'success' => false,\n\t\t\t'message' => 'You do not have permission to delete activities.'\n\t\t], 403);\n\t}\n\n\t// Get the activity IDs from the request data\n\t$ids = request()->input('ids');\n\n\t// If there are no activity IDs, return an error message\n\tif (empty($ids)) {\n\t\treturn response()->json([\n\t\t\t'success' => false,\n\t\t\t'message' => 'No activity IDs were specified.'\n\t\t], 400);\n\t}\n\n\t// Iterate over the activity IDs and delete each activity\n\tforeach ($ids as $id) {\n\t\t// Dispatch an event before deleting the activity\n\t\tevent(new ActivityDeleting($id));\n\n\t\t// Delete the activity\n\t\tActivity::destroy($id);\n\n\t\t// Dispatch an event after deleting the activity\n\t\tevent(new ActivityDeleted($id));\n\t}\n\n\t// Return a JSON response indicating a successful deletion\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => 'Activities deleted successfully.'\n\t]);\n}", "CodeBleu_score": 22.532385151691024}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = explode(',', $this->input->get('ids'));\n\tif (empty($ids)) {\n\t\t$this->response(array(\n\t\t\t'success' => FALSE,\n\t\t\t'message' => 'No IDs were specified.'\n\t\t), 400);\n\t}\n\n\tforeach ($ids as $id) {\n\t\t$this->dispatch_events('before_delete', $id);\n\t\t$this->delete($id);\n\t\t$this->dispatch_events('after_delete', $id);\n\t}\n\n\t$this->response(array(\n\t\t'success' => TRUE,\n\t\t'message' => 'Delete successful.'\n\t));\n}", "CodeBleu_score": 22.570950125420502}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$request = $_POST;\n\t$cards = json_decode($request['cards']);\n\t$updatedCards = array();\n\n\tforeach($cards as $card) {\n\t\tforeach($request['selected'] as $selected) {\n\t\t\tif($card->id == $selected) {\n\t\t\t\t$card->selected = true;\n\t\t\t}\n\t\t}\n\t\tarray_push($updatedCards, $card);\n\t}\n\n\techo json_encode($updatedCards);\n }", "CodeBleu_score": 30.884388596433165}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n\t$selectedCards = array();\n\tforeach ($cards as $card) {\n\t\tif (isset($_POST[$card['id']])) {\n\t\t\t$selectedCards[] = $card['id'];\n\t\t}\n\t}\n\t$json = json_encode($selectedCards);\n\techo $json;\n}", "CodeBleu_score": 26.664428962824218}, {"code": "<?\n public function updateCards(){\n\t// Get current cards\n\t$cards = $this->getCards();\n\t// Iterate through request data\n\tforeach ($cards as $card) {\n\t\t$card['selected'] = false;\n\t\tforeach ($this->requestData as $request) {\n\t\t\tif ($card['id'] == $request['id']) {\n\t\t\t\t$card['selected'] = true;\n\t\t\t}\n\t\t}\n\t}\n\t// Return updated cards as JSON response\n\treturn json_encode($cards);\n }", "CodeBleu_score": 27.682161594742254}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t// Dispatch an event before saving.\n\tevent(new \\App\\Events\\Configuration\\Saving($this->request->all()));\n\n\t// Create the configuration.\n\t$configuration = $this->configuration->create($this->request->all());\n\n\t// Dispatch an event after saving.\n\tevent(new \\App\\Events\\Configuration\\Saved($configuration));\n\n\t// Flash a success message.\n\tsession()->flash('success', trans('configuration.messages.success.create'));\n\n\t// Redirect back to the previous page.\n\treturn redirect()->back();\n}", "CodeBleu_score": 35.74438521430546}, {"code": "<?\npublic function store(){\n\t\t// Dispatch an event before saving.\n\tEvent::dispatch('start.saving.configuration');\n\n\t// Create the configuration.\n\t$configuration = Configuration::create(Input::all());\n\n\t// Dispatch an event after saving.\n\tEvent::dispatch('stop.saving.configuration');\n\n\t// Flash a success message to the session.\n\tSession::flash('success', 'Configuration successfully saved.');\n\n\t// Redirect back to the previous page.\n\treturn Redirect::back();\n}", "CodeBleu_score": 27.975188699511467}, {"code": "<?\npublic function store(){\n\t\t$this->before();\n\n\t$configuration = new Configuration;\n\n\t$configuration->fill(Input::all());\n\n\t$configuration->save();\n\n\t$this->after();\n\n\tSession::flash('success', 'Configuration saved successfully.');\n\n\treturn Redirect::back();\n}", "CodeBleu_score": 21.750698916624238}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n$fileName = 'configuration/'. $path;\n$config = $this->configurationRepository->findOneByField('value', $fileName);\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n$fileName = 'configuration/'. $path;\n$config = $this->configurationRepository->findOneByField('value', $fileName);\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> adminModelSortList = new ArrayList<AdminModelSort>();\n\tfor(String s: list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setModelName(s);\n\t\tadminModelSort.setSortOrder(1);\n\t\tadminModelSortList.add(adminModelSort);\n\t}\n\tUser user = userService.getUser(SecurityUtils.getCurrentUserLogin());\n\tuser.setAdminModelSorts(adminModelSortList);\n\tuserService.saveUser(user);\n\treturn ok();\n}", "CodeBleu_score": 33.288884919524676}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> modelSortList = new ArrayList<AdminModelSort>();\n\tfor (String modelName : list) {\n\t\tAdminModelSort adminModelSort = new AdminModelSort();\n\t\tadminModelSort.setModelName(modelName);\n\t\tadminModelSort.setSortOrder(\"ASC\");\n\t\tmodelSortList.add(adminModelSort);\n\t}\n\tAdminModelSort adminModelSort = new AdminModelSort();\n\tadminModelSort.setModelName(\"all\");\n\tadminModelSort.setSortOrder(\"ASC\");\n\tmodelSortList.add(adminModelSort);\n\tadminModelSortService.deleteAll();\n\tadminModelSortService.saveAll(modelSortList);\n\treturn ok();\n}", "CodeBleu_score": 36.095710823176226}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\tList<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n\tfor(String model: list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setModel(model);\n\t\tsort.setSortOrder(1);\n\t\tsortList.add(sort);\n\t}\n\tAdminModelSort.remove(AdminModelSort.find.where().eq(\"user\", Security.connected()).findList());\n\tAdminModelSort.save(sortList);\n\treturn ok();\n}", "CodeBleu_score": 26.78832962634157}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 90.29061502427011}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 90.29061502427011}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 90.29061502427011}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tResult result = new Result();\n\ttry {\n\t\tUser user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n\t\tUserConfig userConfig = userConfigService.findByUserAndKey(user, customKey);\n\t\tif (userConfig == null) {\n\t\t\tuserConfig = new UserConfig();\n\t\t\tuserConfig.setUser(user);\n\t\t\tuserConfig.setKey(customKey);\n\t\t\tuserConfig.setValue(json.toString());\n\t\t\tuserConfigService.save(userConfig);\n\t\t} else {\n\t\t\tuserConfig.setValue(json.toString());\n\t\t\tuserConfigService.save(userConfig);\n\t\t}\n\t\tresult.setSuccess(true);\n\t\tresult.setMessage(\"User configuration updated successfully.\");\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(\"Failed to update user configuration.\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 48.668604898253264}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\ttry {\n\t\tif (json == null) {\n\t\t\treturn new Result(false, \"No data provided\");\n\t\t}\n\t\tUser user = (User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n\t\tUserConfiguration userConfiguration = userConfigurationRepository.findByUserAndCustomKey(user, customKey);\n\t\tif (userConfiguration == null) {\n\t\t\tuserConfiguration = new UserConfiguration();\n\t\t\tuserConfiguration.setUser(user);\n\t\t\tuserConfiguration.setCustomKey(customKey);\n\t\t}\n\t\tuserConfiguration.setCustomValue(json.toString());\n\t\tuserConfigurationRepository.save(userConfiguration);\n\t\treturn new Result(true, \"Success\");\n\t} catch (Exception e) {\n\t\treturn new Result(false, \"Failed to save user configuration\");\n\t}\n}", "CodeBleu_score": 43.347396961615985}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\ttry {\n\t\t//Retrieve the user configuration by the custom key\n\t\tUserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n\t\t//If the configuration exists, update its value with the provided JSON\n\t\tif(userConfiguration!=null) {\n\t\t\tuserConfiguration.setValue(json.toString());\n\t\t\tuserConfigurationRepository.save(userConfiguration);\n\t\t}\n\t\t//If not, create a new user configuration with the provided JSON and save it\n\t\telse {\n\t\t\tUserConfiguration newUserConfiguration = new UserConfiguration();\n\t\t\tnewUserConfiguration.setCustomKey(customKey);\n\t\t\tnewUserConfiguration.setValue(json.toString());\n\t\t\tuserConfigurationRepository.save(newUserConfiguration);\n\t\t}\n\t\t//Return a successful result\n\t\treturn new Result(true, \"User configuration updated successfully\");\n\t}\n\t//Return an error result if something goes wrong\n\tcatch (Exception e) {\n\t\treturn new Result(false, \"An error occurred while updating the user configuration\");\n\t}\n}", "CodeBleu_score": 44.3886187635254}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.queryUserInfo(userId);\n\tif(user == null) {\n\t\treturn new Result<>(false, \"User not found\");\n\t}\n\tuser.setPassword(null);\n\tuser.setSalt(null);\n\treturn new Result<>(true, user);\n}", "CodeBleu_score": 32.44809887630377}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tResult<AdminUser> result = new Result<>();\n\ttry {\n\t\tAdminUser user = adminUserService.queryUserInfo(userId);\n\t\tif (user!= null) {\n\t\t\tresult.setCode(1);\n\t\t\tresult.setMessage(\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u6210\u529f\");\n\t\t\tresult.setData(user);\n\t\t} else {\n\t\t\tresult.setCode(0);\n\t\t\tresult.setMessage(\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\n\t\t}\n\t} catch (Exception e) {\n\t\tresult.setCode(0);\n\t\tresult.setMessage(\"\u83b7\u53d6\u7528\u6237\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 35.33763079640091}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tResult<AdminUser> result = new Result<>();\n\tAdminUser user = adminUserDao.queryUserInfo(userId);\n\tif (user!= null) {\n\t\tDepartment department = departmentDao.queryDepartmentById(user.getDepartmentId());\n\t\tif (department!= null) {\n\t\t\tuser.setDepartmentName(department.getDepartmentName());\n\t\t}\n\t\tuser.setPassword();\n\t\tuser.setSalt(null);\n\t\tresult.setSuccess(true);\n\t\tresult.setData(user);\n\t} else {\n\t\tresult.setSuccess(false);\n\t\tresult.setMessage(\"User not found\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 47.96725447233832}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tString userId = getSession().get(\"userId\");\n\tList<Notice> noticeList = Notice.find.where().eq(\"userId\", userId).findList();\n\tif (noticeList.size() > 1) {\n\t\tfor (Notice notice : noticeList) {\n\t\t\tnotice.setStatus(1);\n\t\t\tnotice.save();\n\t\t}\n\t} else {\n\t\tNotice notice = new Notice();\n\t\tnotice.setUserId(userId);\n\t\tnotice.setStatus(1);\n\t\tnotice.save();\n\t}\n\treturn ok();\n}", "CodeBleu_score": 28.26629783816571}, {"code": " public Result readNotice() {\n\t\tString userId = getRequest().getSession().getAttribute(\"userId\").toString();\n\tString query = \"SELECT * FROM readNotice WHERE userId =?\";\n\tList<ReadNotice> readNotices = jdbcTemplate.query(query, new Object[] {userId}, new ReadNoticeMapper());\n\tif (readNotices.size() > 1) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.setStatus(1);\n\t\t\tjdbcTemplate.update(\"UPDATE readNotice SET status =? WHERE id =?\", readNotice.getStatus(), readNotice.getId());\n\t\t}\n\t} else if (readNotices.size() == 1) {\n\t\tReadNotice readNotice = readNotices.get(0);\n\t\treadNotice.setStatus(1);\n\t\tjdbcTemplate.update(\"UPDATE readNotice SET status =? WHERE id =?\", readNotice.getStatus(), readNotice.getId());\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.setStatus(1);\n\t\treadNotice.setUserId(userId);\n\t\tjdbcTemplate.update(\"INSERT INTO readNotice (status, userId) VALUES (?,?)\", readNotice.getStatus(), readNotice.getUserId());\n\t}\n\treturn new Result(true, \"Success\");\n}", "CodeBleu_score": 33.341884605621104}, {"code": " public Result readNotice() {\n\t\t// Get the user ID from the session\n\tString userId = session().get(\"userId\");\n\t// Retrieve all \"readNotice\" entries for the user\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\t// If there are multiple \"readNotice\" entries for the user, update the status to 1 for all matching entries\n\tif (readNotices.size() > 1) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.readNotice = 1;\n\t\t\treadNotice.save();\n\t\t}\n\t}\n\t// If there is only one \"readNotice\" entry for the user, create a new \"readNotice\" entry with status 1 and save it\n\telse {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.userId = userId;\n\t\treadNotice.readNotice = 1;\n\t\treadNotice.save();\n\t}\n\t// Return a success result\n\treturn ok(Json.toJson(new Result(\"success\")));\n}", "CodeBleu_score": 23.77559145286281}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tConfiguration companyInfoConfig = configurationService.getConfiguration(\"companyInfo\");\n\tif (companyInfoConfig == null) {\n\t\tcompanyInfoConfig = new Configuration();\n\t\tcompanyInfoConfig.setName(\"companyInfo\");\n\t\tcompanyInfoConfig.setConfigurationType(ConfigurationType.SYSTEM);\n\t\tcompanyInfoConfig.setConfigurationValue(JsonUtil.toJson(adminCompanyBO));\n\t\tcompanyInfoConfig.setConfigurationScope(ConfigurationScope.SYSTEM);\n\t\tconfigurationService.addConfiguration(companyInfoConfig);\n\t} else {\n\t\tcompanyInfoConfig.setConfigurationValue(JsonUtil.toJson(adminCompanyBO));\n\t\tconfigurationService.updateConfiguration(companyInfoConfig);\n\t}\n}", "CodeBleu_score": 30.886558874073387}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\ttry {\n\t\tConfiguration config = Configuration.getConfiguration(\"companyInfo\");\n\t\tif (config == null) {\n\t\t\tconfig = Configuration.createConfiguration(\"companyInfo\");\n\t\t}\n\t\tconfig.setValue(adminCompanyBO.getJsonString());\n\t\tconfig.save();\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 23.740109788786512}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// Create a new configuration if one does not exist\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(\"companyInfo\");\n\t\tadminConfig.setValue(new Gson().toJson(adminCompanyBO));\n\t}\n\n\t// Update the configuration's value with the provided company information\n\tadminConfig.setValue(new Gson().toJson(adminCompanyBO));\n\n\t// Save or update the configuration\n\tadminConfigRepository.save(adminConfig);\n}", "CodeBleu_score": 35.482003670812816}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\ttry {\n\t\tString adminConfig = getAdminConfig(AdminConfigKey.ADMIN_COMPANY_CONFIG.getKey());\n\t\tif (adminConfig!= null) {\n\t\t\tadminCompanyBO = parseAdminCompanyConfig(adminConfig);\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 41.3578142970559}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminConfig = new AdminCompanyBO();\n\tString configValue = queryAdminConfig(AdminCompanyBO.ADMIN_CONFIG_KEY);\n\tif (configValue!= null) {\n\t\ttry {\n\t\t\tadminConfig = new AdminCompanyBO(configValue);\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Failed to parse admin config value: \" + configValue);\n\t\t}\n\t}\n\treturn adminConfig;\n}", "CodeBleu_score": 30.879619566995675}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tString config = null;\n\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\ttry {\n\t\tconfig = adminConfigService.queryAdminConfig(AdminConfigService.ADMIN_CONFIG_KEY_COMPANY);\n\t\tif (config!= null) {\n\t\t\tadminCompanyBO = (AdminCompanyBO) JsonUtils.jsonToObject(config, AdminCompanyBO.class);\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error querying admin configuration for company\", e);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 45.90062702972495}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t", "CodeBleu_score": 4.070653414637172}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t", "CodeBleu_score": 4.070653414637172}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n\tfor(String string : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setName(logConfigName);\n\t\tconfig.setElement(\"welcomeSpeech\");\n\t\tconfig.setValue(string);\n\t\tconfigList.add(config);\n\t}\n\tAdminConfigUtil.removeAdminConfigs(configList);\n\tAdminConfigUtil.saveAdminConfig(configList);\n }", "CodeBleu_score": 41.488738417062386}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = adminInitDataBO.getPassword();\n\tString salt = adminInitDataBO.getSalt();\n\tString hashedPassword = adminInitDataBO.getHashedPassword();\n\tString userId = adminInitDataBO.getUserId();\n\tString tempAccessCode = null;\n\ttry {\n\t\tif (password!= null && password.length() > 0) {\n\t\t\tString hash = DigestUtils.sha256Hex(password + salt);\n\t\t\tif (hash.equals(hashedPassword)) {\n\t\t\t\ttempAccessCode = UUID.randomUUID().toString();\n\t\t\t\tredisTemplate.opsForValue().set(tempAccessCode, userId, 10, TimeUnit.MINUTES);\n\t\t\t} else {\n\t\t\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t\t\t}\n\t\t} else {\n\t\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\treturn tempAccessCode;\n}", "CodeBleu_score": 31.42244166941851}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t", "CodeBleu_score": 1.4766140476740475}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = adminInitDataBO.getPassword();\n\tString salt = adminInitDataBO.getSalt();\n\n\t// Retrieve the current user ID and user details\n\tString userId = adminInitDataBO.getUserId();\n\tString userDetails = adminInitDataBO.getUserDetails();\n\n\t// Check the password against the stored password using the username and salt\n\tString hashedPassword = PasswordUtils.hashPassword(password, salt);\n\tif (!hashedPassword.equals(userDetails)) {\n\t\tthrow new InvalidPasswordException();\n\t}\n\n\t// Generate a temporary access code and store it in Redis with a 10-minute expiration\n\tString code = UUID.randomUUID().toString();\n\tredisTemplate.opsForValue().set(code, userId, 10, TimeUnit.MINUTES);\n\n\treturn code;\n}", "CodeBleu_score": 34.013792563334604}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized:\" + userId;\n\tList<String> unauthorizedUrls = redisTemplate.opsForList().range(key, 0, -1);\n\tif (unauthorizedUrls.contains(initialAuthUrl)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 36.038603334566844}, {"code": "private boolean verifyInitAuth(){\n\t\tString userID = getParameter(\"user_id\");\n\tString key = \"unauthorized:\" + userID;\n\tString unauthorizedURLs = redis.get(key);\n\tif (unauthorizedURLs == null) {\n\t\treturn false;\n\t}\n\tString[] unauthorizedURLList = unauthorizedURLs.split(\";\");\n\tString initAuthURL = getParameter(\"init_auth_url\");\n\tfor (String unauthorizedURL : unauthorizedURLList) {\n\t\tif (unauthorizedURL.equals(initAuthURL)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 27.284257624189834}, {"code": "private boolean verifyInitAuth(){\n\t\tString userID = getParameter(\"userID\");\n\tString key = userID + \"unauthorized\";\n\tString unauthorized = redis.get(key);\n\tif (unauthorized == null) {\n\t\treturn false;\n\t}\n\tString[] unauthorizedURLs = unauthorized.split(\",\");\n\tString initAuthURL = getParameter(\"initAuthURL\");\n\tfor (String url : unauthorizedURLs) {\n\t\tif (url.equals(initAuthURL)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 28.16522478312339}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tadminRoleMenuRepository.saveAll(roleMenuList);\n}", "CodeBleu_score": 53.71338787613188}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuDao.saveRoleMenu(adminRoleMenuList);\n}", "CodeBleu_score": 57.283693246004795}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuDao.saveBatch(adminRoleMenuList);\n}", "CodeBleu_score": 57.72388322414813}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> source = new HashMap<>();\nsource.put(\"level\", sysLog.getLevel());\nsource.put(\"message\", sysLog.getMessage());\nsource.put(\"thread\", sysLog.getThread());\nsource.put(\"class\", sysLog.getClass());\nsource.put(\"method\", sysLog.getMethod());\nsource.put(\"line\", sysLog.getLine());\nsource.put(\"time\", sysLog.getTime());\nsource.put(\"type\", sysLog.getType());\nsource.put(\"ip\", sysLog.getIp());\nsource.put(\"user\", sysLog.getUser());\nsource.put(\"username\", sysLog.getUsername());\nsource.put(\"userId\", sysLog.getUserId());\nsource.put(\"createTime\", sysLog.getCreateTime());\nsource.put(\"updateTime\", sysLog.getUpdateTime());\nsource.put(\"deleted\", sysLog.getDeleted());\nsource.put(\"version\", sysLog.getVersion());\nsource.put(\"remark\", sysLog.getRemark());\nsource.put(\"params\", sysLog.getParams());\nsource.put(\"result\", sysLog.getResult());\nIndexRequest indexRequest = new IndexRequest(index)\n.id(sysLog.getId())\n.source(source);\ntry {\nrestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 50.774887113776025}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> source = new HashMap<>();\nsource.put(\"message\", sysLog.getMessage());\nsource.put(\"level\", sysLog.getLevel());\nsource.put(\"time\", sysLog.getTime());\nsource.put(\"thread\", sysLog.getThread());\nsource.put(\"class\", sysLog.getClass());\nsource.put(\"method\", sysLog.getMethod());\nsource.put(\"line\", sysLog.getLine());\nsource.put(\"logger\", sysLog.getLogger());\nsource.put(\"ip\", sysLog.getIp());\nsource.put(\"host\", sysLog.getHost());\nsource.put(\"username\", sysLog.getUsername());\nsource.put(\"request\", sysLog.getRequest());\nsource.put(\"response\", sysLog.getResponse());\nIndexRequest indexRequest = new IndexRequest(index).source(source);\ntry {\nrestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 46.89181170430265}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> logMap = new HashMap<>();\nlogMap.put(\"id\", sysLog.getId());\nlogMap.put(\"type\", sysLog.getType());\nlogMap.put(\"level\", sysLog.getLevel());\nlogMap.put(\"message\", sysLog.getMessage());\nlogMap.put(\"time\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\nlogMap.put(\"ip\", sysLog.getIp());\nlogMap.put(\"user\", sysLog.getUser());\nlogMap.put(\"method\", sysLog.getMethod());\nlogMap.put(\"params\", sysLog.getParams());\nlogMap.put(\"exception\", sysLog.getException());\ntry {\nIndexRequest request = new IndexRequest(index).source(logMap);\nrestHighLevelClient.index(request, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 45.59999896871839}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, response => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}).on('error', error => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 56.62277957471089}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close(() => {\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t}).on('error', (err) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err.message);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 57.103259625190304}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (error) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(error);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 54.748838834416546}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn getDependentModules(module.getId(), circularDependencyCheckSet);\n}", "CodeBleu_score": 34.326120499438915}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return getDependentModules(module.getId(), circularDependencyCheckSet)\n.onErrorContinue(error -> {\n logger.warn(\"Failed to retrieve dependent modules for module ID \" + module.getId() + \": \" + error.getMessage());\n return Mono.empty();\n });\n }", "CodeBleu_score": 43.743670876994464}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t-    return module.getDependentModules()\n-       .filter(dependentModule ->!circularDependencyCheckSet.contains(dependentModule.getId()))\n-       .flatMap(dependentModule -> getModule(dependentModule.getId(), circularDependencyCheckSet.add(dependentModule.getId())))\n-       .onErrorResume(throwable -> {\n-            log.warn(\"Could not retrieve dependent module {} for application module {}: {}\", module.getId(), module.getName(), throwable.getMessage());\n-            return Mono.empty();\n-        });\n+    return module.getDependentModules() //\n+       .filter(dependentModule ->!circularDependencyCheckSet.contains(dependentModule.getId())) //\n+       .flatMap(dependentModule -> getModule(dependentModule.getId(), circularDependencyCheckSet.add(dependentModule.getId()))) //\n+       .onErrorResume(throwable -> { //\n+            log.warn(\"Could not retrieve dependent module {} for application module {}: {}\", module.getId(), module.getName(), throwable.getMessage()); //\n+            return Mono.empty(); //\n+        }); //\n }", "CodeBleu_score": 42.04246500585691}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tt compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.47913031105531}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tt compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.47913031105531}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tt compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?,?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?,?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?,?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 86.47913031105531}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t byte[] imageData = resizeImage(dataBuffer);\n String contentType = createThumbnail? MediaType.IMAGE_JPEG_VALUE : srcContentType.getType();\n Asset asset = Asset.builder().name(assetName).contentType(contentType).data(imageData).build();\n return asset;\n }", "CodeBleu_score": 35.748909382380845}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t\tint dimension = thumbNailPhotoDimension.get();\n\tAsset asset = new Asset();\n\tasset.setData(dataBuffer.asInputStream());\n\tasset.setContentType(srcContentType.toString());\n\tif (createThumbnail) {\n\t\tbyte[] thumbnail = resizeImage(dataBuffer);\n\t\tasset.setData(new ByteArrayInputStream(thumbnail));\n\t\tasset.setContentType(\"image/jpeg\");\n\t}\n\tDataBufferUtils.release(dataBuffer);\n\treturn asset;\n}", "CodeBleu_score": 39.35539729480686}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t", "CodeBleu_score": 7.930396959171953}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n.flatMap(asset -> {\nexchange.getResponse().setStatusCode(HttpStatus.OK);\nif (asset.getContentType()!= null) {\nexchange.getResponse().getHeaders().setContentType(asset.getContentType());\n}\nreturn exchange.getResponse().writeWith(Flux.just(asset.getData()));\n})\n.then();\n}", "CodeBleu_score": 32.37662807052632}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n       .flatMap(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType()!= null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            return exchange.getResponse().writeWith(Flux.just(asset.getData()));\n        });\n}", "CodeBleu_score": 37.99138658137876}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n.flatMap(asset -> {\nexchange.getResponse().setStatusCode(HttpStatus.OK);\nexchange.getResponse().getHeaders().setContentType(asset.getContentType());\nreturn exchange.getResponse().writeWith(Flux.just(asset.getData()));\n});\n}", "CodeBleu_score": 27.687385237781324}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn Flux.fromIterable(this.enterpriseModeAuthConfigs);\n}", "CodeBleu_score": 3.177623297687749}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn getOrganizationClient().getOrganizations()\n\t\t.filter(o -> o.getWorkspaceMode().equals(WorkspaceMode.ENTERPRISE))\n\t\t.flatMap(o -> getAuthConfigClient(o.getId()).getAuthConfigs()\n\t\t\t.map(ac -> new FindAuthConfig(o.getId(), ac.getName(), ac.getAuthType(), ac.getAuthType().equals(AuthType.OAUTH2))))\n\t\t.collectList();\n}", "CodeBleu_score": 20.356498305436794}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\telse {\n\t\treturn orgService.getOrganizations()\n\t\t\t\t.map(org -> new FindAuthConfig(org.getName(), org.getAuthConfig()))\n\t\t\t\t.collectList()\n\t\t\t\t.map(authConfigs -> authConfigs.stream().flatMap(Flux::fromIterable).collect(Collectors.toList()));\n\t}\n}", "CodeBleu_score": 30.38454121374043}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tMongockApplicationRunner mongockApplicationRunner = new MongockApplicationRunner(springContext);\n\tmongockApplicationRunner.setMongoTemplate(mongoTemplate);\n\tmongockApplicationRunner.setChangeLogsScanPackage(\"com.example.demo.changelogs\");\n\tmongockApplicationRunner.setDatabaseName(mongoTemplate.getDb().getName());\n\tmongockApplicationRunner.setLockQuickConfig(new LockQuickConfig() {\n\t\t@Override\n\t\tpublic String getLockCollectionName() {\n\t\t\treturn \"mongock_lock\";\n\t\t}\n\n\t\t@Override\n\t\tpublic String getLockDatabaseName() {\n\t\t\treturn mongoTemplate.getDb().getName();\n\t\t}\n\t});\n\treturn mongockApplicationRunner;\n}", "CodeBleu_score": 36.0044048054425}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockApplicationRunner.builder()\n\t\t.setSpringContext(springContext)\n\t\t.setMongoTemplate(mongoTemplate)\n\t\t.setChangeLogsScanPackage(\"com.example.demo.db.changelog\")\n\t\t.build();\n}", "CodeBleu_score": 21.1106255186471}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tMongockApplicationRunner mongockApplicationRunner = MongockBuilder.builder()\n\t\t\t.setSpringContext(springContext)\n\t\t\t.setMongoTemplate(mongoTemplate)\n\t\t\t.setChangeLogsScanPackage(\"com.mongodb.mongock.examples.spring5.changelogs\")\n\t\t\t.setLockQuickConfig()\n\t\t\t.build();\n\treturn mongockApplicationRunner;\n}", "CodeBleu_score": 38.7234913113968}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\ttemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn template;\n}", "CodeBleu_score": 76.62547287398485}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\teturn libraryQueryRepository.findById(libraryQueryId)\n               .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n               .flatMap(libraryQuery -> libraryQuery.getLiveDSL().map(dsl -> {\n                    Map<String, Object> map = new HashMap<>();\n                    map.put(\"dsl\", dsl);\n                    return map;\n                }).orElseGet(() -> libraryQuery.getDSL().map(dsl -> {\n                    Map<String, Object> map = new HashMap<>();\n                    map.put(\"dsl\", dsl);\n                    return map;\n                })));\n    }", "CodeBleu_score": 35.882807895635224}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\teturn libraryQueryRepository.findLatestByLibraryQueryId(libraryQueryId)\n.switchIfEmpty(libraryQueryRepository.findById(libraryQueryId)\n.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\")))\n.map(LibraryQuery::getDsl);\n}", "CodeBleu_score": 46.693037625807946}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\teturn libraryQueryRepository.findById(libraryQueryId)\n               .flatMap(libraryQuery -> {\n                    if (libraryQuery.getLatest()) {\n                        return libraryQueryRepository.findLatestDSLByLibraryQueryId(libraryQueryId);\n                    } else {\n                        return Mono.just(libraryQuery.getDsl());\n                    }\n                })\n               .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"));\n}", "CodeBleu_score": 43.342707935725315}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t     if (datasource.getType().equals(DatasourceType.NODE_JS)) {\n//            return executeByNodeJs(datasource, queryConfig, requestParams);\n//        } else {\n//            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n//        }\n        return executeByNodeJs(datasource, queryConfig, requestParams);\n    }", "CodeBleu_score": 15.688408454762259}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t    var timeout = Duration.ofMillis(Long.parseLong(timeoutStr));\n        var timeout = Duration.ofMillis(1000);\n        return executeQuery(datasource, queryConfig, requestParams, timeout, queryVisitorContext)\n               .onErrorResume(e -> {\n                    if (e instanceof TimeoutException) {\n                        return Mono.error(new PluginException(e.getMessage(), e));\n                    } else if (e instanceof PluginException) {\n                        return Mono.error(e);\n                    } else {\n                        log.error(\"Error executing query\", e);\n                        return Mono.error(new PluginException(\"Error executing query\", e));\n                    }\n                });\n    }", "CodeBleu_score": 40.176423098449035}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\tString datasourceType = datasource.getType();\n\tQueryExecutor queryExecutor = queryExecutorMap.get(datasourceType);\n\tif (queryExecutor == null) {\n\t\tthrow new IllegalArgumentException(\"Unsupported datasource type: \" + datasourceType);\n\t}\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n\treturn queryExecutor.execute(datasource, queryExecutionContext);\n}", "CodeBleu_score": 38.65825852652892}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// get the appropriate query executor based on the datasource type\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource.getType());\n\n\t// build the query execution context\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n\t// acquire a connection from the datasource connection pool\n\treturn Mono.fromCallable(() -> {\n\t\ttry {\n\t\t\treturn datasource.getConnection();\n\t\t} catch (SQLException e) {\n\t\t\tthrow new QueryExecutionException(\"Error while acquiring a connection from the datasource connection pool\", e);\n\t\t}\n\t})\n\t// execute the query using the connection\n\t.flatMap(connection -> {\n\t\ttry {\n\t\t\treturn queryExecutor.execute(queryExecutionContext, connection);\n\t\t} catch (QueryExecutionException e) {\n\t\t\tthrow e;\n\t\t} catch (Exception e) {\n\t\t\tthrow new QueryExecutionException(\"Error while executing the query\", e);\n\t\t}\n\t})\n\t// handle any errors that occur during execution\n\t.onErrorMap(QueryExecutionException.class, e -> {\n\t\tlog.error(\"Error while executing the query\", e);\n\t\treturn new QueryExecutionResult(e.getMessage(), null, null);\n\t});\n}", "CodeBleu_score": 39.78243925910524}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// Get the appropriate query executor based on the datasource type\n\tQueryExecutor queryExecutor = queryExecutorFactory.getQueryExecutor(datasource.getType());\n\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryExecutor, datasource, queryConfig, requestParams, queryVisitorContext);\n\n\t// Acquire a connection from the datasource connection pool\n\treturn datasourceConnectionPool.acquireConnection(datasource.getId()).flatMap(connection -> {\n\t\t// Execute the query using the connection\n\t\treturn queryExecutor.execute(connection, queryExecutionContext);\n\t}).onErrorMap(e -> {\n\t\t// Handle any errors that occur during execution\n\t\treturn handleQueryExecutionError(e, queryExecutionContext);\n\t});\n}", "CodeBleu_score": 43.38823249938763}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t (timeoutStr == null || timeoutStr.isEmpty()) {\nthrow new IllegalArgumentException(\"Timeout string must not be blank\");\n}\n\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getFirst();\nint unitIndex = unitInfo.getSecond();\n\nString valueStr = StringUtils.substring(timeoutStr, 0, unitIndex);\ndouble value = Double.parseDouble(valueStr);\n\nint timeoutMs = convertToMs(value, unit);\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\nString.format(\"Timeout value must be less than %d %s\", MAX_QUERY_TIMEOUT_MS, unit));\n}\nreturn timeoutMs;\n}", "CodeBleu_score": 42.669355526314625}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t If the input string is blank, use the default timeout.\n        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n// Extract the numeric value and unit from the string.\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n        if (unitIndex == -1) {\n            throw new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n        }\n        String valueStr = timeoutStr.substring(0, unitIndex);\n// Convert the value to milliseconds.\n        int value = convertToMs(Double.parseDouble(valueStr), unit);\n// Ensure the value does not exceed the maximum allowed timeout.\n        if (value > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed value: \" + value);\n        }\n// Return the converted value.\n        return value;\n    }", "CodeBleu_score": 56.68463439034351}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t Check if the input string is blank. If so, use the default timeout.\nif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n// Extract the numeric value and unit from the string.\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getFirst();\nint unitIndex = unitInfo.getSecond();\nString valueStr = StringUtils.substring(timeoutStr, 0, unitIndex);\n// Convert the value to milliseconds.\nint value = convertToMs(Double.parseDouble(valueStr), unit);\n// Ensure the value does not exceed the maximum allowed timeout.\nif (value > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(String.format(\"Query timeout value %d exceeds the maximum allowed timeout of %d milliseconds.\", value, MAX_QUERY_TIMEOUT_MS));\n}\n// Return the converted value.\nreturn value;\n}", "CodeBleu_score": 46.825482432003504}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\teturn applicationService.getLiveQueries(application.getId())\n           .flatMap(liveQueries -> {\n                if (liveQueries.isEmpty()) {\n                    return Mono.error(new IllegalArgumentException(\"No live queries found in application\"));\n                }\n                return Mono.just(liveQueries.stream().map(LiveQuery::getDatasourceId).collect(Collectors.toList()));\n            })\n           .flatMap(datasourceIds -> {\n                return Flux.fromIterable(datasourceIds)\n                       .flatMap(datasourceId -> {\n                            return doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                   .map(copiedDatasourceId -> Pair.of(datasourceId, copiedDatasourceId));\n                        })\n                       .collectList();\n            });\n}", "CodeBleu_score": 41.38365370176798}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn Mono.just(application.getLiveQueries())\n\t\t\t.filter(liveQueries ->!liveQueries.isEmpty())\n\t\t\t.flatMap(liveQueries -> {\n\t\t\t\tList<String> datasourceIds = new ArrayList<>();\n\t\t\t\tfor (LiveQuery liveQuery : liveQueries) {\n\t\t\t\t\tdatasourceIds.add(liveQuery.getDatasourceId());\n\t\t\t\t}\n\t\t\t\treturn datasourceService.copyDatasources(currentOrganizationId, datasourceIds, visitorId);\n\t\t\t});\n}", "CodeBleu_score": 27.431973010466017}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t/        return applicationService.getLiveQueries(application.getId())\n//               .flatMap(liveQueries -> {\n//                    if (liveQueries.isEmpty()) {\n//                        return Mono.error(new Exception(\"No live queries found for application: \" + application.getId()));\n//                    }\n//\n//                    List<String> datasourceIds = liveQueries.stream()\n//                           .map(LiveQuery::getDatasourceId)\n//                           .collect(Collectors.toList());\n//\n//                    return copyDatasources(currentOrganizationId, datasourceIds, visitorId)\n//                           .collectList()\n//                           .map(copiedDatasourceIds -> {\n//                                List<Pair<String, String>> originalAndCopiedDatasourceIds = new ArrayList<>();\n//\n//                                for (int i = 0; i < datasourceIds.size(); i++) {\n//                                    originalAndCopiedDatasourceIds.add(Pair.of(datasourceIds.get(i), copiedDatasourceIds.get(i)));\n//                                }\n//\n//                                return originalAndCopiedDatasourceIds;\n//                            });\n//                });\nreturn Mono.empty();\n    }", "CodeBleu_score": 11.488931143959856}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.findById(datasourceId)\n\t\t\t.switchIfEmpty(Mono.just(datasourceId))\n\t\t\t.flatMap(datasource -> {\n\t\t\t\tif (DatasourceType.SYSTEM_STATIC.equals(datasource.getType())) {\n\t\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t\t}\n\t\t\t\tif (DatasourceType.LEGACY_QUICK_REST_API.equals(datasource.getType())) {\n\t\t\t\t\treturn Mono.just(generateCopyDatasourceName(datasourceId));\n\t\t\t\t}\n\t\t\t\tif (DatasourceType.LEGACY_OPENBLOCKS_API.equals(datasource.getType())) {\n\t\t\t\t\treturn Mono.just(generateCopyDatasourceName(datasourceId));\n\t\t\t\t}\n\t\t\t\treturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n\t\t\t});\n}", "CodeBleu_score": 58.72445623282878}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.get(datasourceId)\n\t\t.flatMap(datasource -> {\n\t\t\tif (DatasourceType.SYSTEM_STATIC.equals(datasource.getType())) {\n\t\t\t\treturn Mono.just(datasourceId);\n\t\t\t}\n\t\t\tif (DatasourceType.LEGACY_QUICK_REST_API.equals(datasource.getType()) || DatasourceType.LEGACY_OPENBLOCKS_API.equals(datasource.getType())) {\n\t\t\t\treturn Mono.just(datasource.getDetailConfig().get(\"id\"));\n\t\t\t}\n\t\t\treturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n\t\t});\n}", "CodeBleu_score": 53.82365854806771}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.get(datasourceId, visitorId)\n\t\t\t.map(datasource -> {\n\t\t\t\tif (datasource.isSystemStatic()) {\n\t\t\t\t\treturn datasourceId;\n\t\t\t\t} else if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API.getValue()\n\t\t\t\t\t\t|| datasource.getCreationSource() == DatasourceCreationSource.OPENBLOCKS_API.getValue()) {\n\t\t\t\t\treturn datasource.getId();\n\t\t\t\t} else {\n\t\t\t\t\treturn createNewDatasourceFrom(organizationId, visitorId, datasource).block();\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 50.7194364003812}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return Mono.just(filePart)\n.flatMap(part -> {\n String fileName = part.getSubmittedFileName();\n String fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n String newFileName = UUID.randomUUID().toString() + \".\" + fileType;\n return assetService.uploadAsset(part.getInputStream(), newFileName);\n })\n.flatMap(asset -> {\n if (user.getAvatar()!= null) {\n return assetService.deleteAsset(user.getAvatar())\n.then(updateUserAvatar(asset, user.getId()));\n } else {\n return updateUserAvatar(asset, user.getId());\n }\n });\n }", "CodeBleu_score": 40.357116936938944}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\t//Upload the new photo\n\treturn assetService.uploadAsset(filePart)\n\t.flatMap(newAsset -> {\n\t\t//If the user has a previous avatar, remove it\n\t\tif (user.getAvatar()!= null) {\n\t\t\treturn assetService.deleteAsset(user.getAvatar());\n\t\t}\n\t\t//Otherwise, return a Mono<Boolean> with the value true\n\t\telse {\n\t\t\treturn Mono.just(true);\n\t\t}\n\t})\n\t.flatMap(success -> {\n\t\t//Update the user's profile with the new avatar\n\t\treturn updateUserAvatar(newAsset, user.getId());\n\t});\n}", "CodeBleu_score": 22.252458560456056}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn uploadPhoto(filePart)\n.flatMap(asset -> {\nif (user.getAvatar()!= null) {\nreturn deletePhoto(user.getAvatar());\n}\nreturn Mono.just(true);\n})\n.flatMap(deleteResult -> updateUserAvatar(asset, user.getId()))\n.flatMap(updateResult -> {\nif (updateResult) {\nreturn Mono.just(true);\n}\nreturn Mono.error(new RuntimeException(\"Failed to update user avatar\"));\n});\n}", "CodeBleu_score": 23.87355771116256}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\ter user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(UserState.NEW);\n\tuser.setEnabled(true);\n\tuser.setAvatarLink(authUser.getAvatarLink());\n\tif (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\")));\n\t}\n\tuser.setConnections(authUser.getConnections());\n\tuser.setNew(true);\n\treturn repository.save(user);\n}", "CodeBleu_score": 37.14412588882545}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\ter user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(UserState.NEW);\n\tuser.setEnabled(false);\n\tuser.setAvatar(authUser.getAvatar());\n\tif (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n\t}\n\tuser.setConnections(authUser.getConnections());\n\tuser.setNewUser(true);\n\treturn repository.save(user);\n}", "CodeBleu_score": 41.25103428963919}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\turn Mono.just(new User())\n.map(user -> {\nuser.setName(authUser.getName());\nuser.setAvatarUrl(authUser.getAvatarUrl());\nuser.setState(UserState.NEW);\nuser.setEnabled(false);\nif (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(AuthContextKey.PASSWORD)) {\nuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContextKey.PASSWORD)));\n}\nreturn user;\n})\n.flatMap(user -> {\nuser.setConnections(authUser.getConnections());\nuser.setNewUser(true);\nreturn repository.save(user);\n});\n}", "CodeBleu_score": 35.11893556578301}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(user)\n\t\t\t.flatMap(u -> emailSource.get(email)\n\t\t\t\t\t.map(es -> new Connection(es.getId(), u.getId()))\n\t\t\t\t\t.flatMap(c -> connectionRepository.save(c))\n\t\t\t\t\t.map(c -> {\n\t\t\t\t\t\tu.getConnections().add(c);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t})\n\t\t\t\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n\t\t\t\t\t.flatMap(b -> userRepository.save(u))\n\t\t\t\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n\t\t\t\t\t.onErrorResume(Exception.class, e -> Mono.just(false))\n\t\t\t);\n}", "CodeBleu_score": 28.083992006627064}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn user.addConnection(email)\n\t\t.flatMap(result -> user.save())\n\t\t.map(result -> true)\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 13.869080956651885}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn this.userRepository.findById(user.getId()).flatMap(u -> {\n\t\tif (u.getConnections().stream().anyMatch(c -> c.getSource().equals(email))) {\n\t\t\treturn Mono.error(new DuplicateKeyException(\"Email already bound to user\"));\n\t\t}\n\t\telse {\n\t\t\tEmailConnection emailConnection = new EmailConnection();\n\t\t\temailConnection.setSource(email);\n\t\t\temailConnection.setDestination(user);\n\t\t\tuser.getConnections().add(emailConnection);\n\t\t\treturn this.userRepository.save(user).map(u1 -> true);\n\t\t}\n\t});\n}", "CodeBleu_score": 27.40600263828797}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n.flatMap(user -> {\nif (!encryptionService.isPasswordValid(oldPassword, user.getPassword())) {\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n}\n\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user)\n.thenReturn(true);\n});\n}", "CodeBleu_score": 22.62985994822863}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n.flatMap(user -> {\nif (!encryptionService.checkPassword(oldPassword, user.getPassword())) {\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n}\n\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn repository.save(user);\n})\n.thenReturn(true);\n}", "CodeBleu_score": 22.65242111438421}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\tFind the user by their ID\nMono<User> userMono = findById(userId);\n\n// Check if the current password is valid and matches the provided old password\nreturn userMono.flatMap(user -> {\nif (encryptionService.isValidPassword(oldPassword, user.getPassword())) {\n// Encrypt the new password\nString encryptedNewPassword = encryptionService.encryptPassword(newPassword);\n\n// Update the user record with the new password\nuser.setPassword(encryptedNewPassword);\nreturn repository.save(user);\n} else {\n// Return an error if the current password is invalid or does not match the old password\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n}\n});\n}", "CodeBleu_score": 32.88093824549054}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\turn getGroups(userId, orgMember, withoutDynamicGroups)\n.filter(it ->!it.getId().equals(ALL_USERS_GROUP_ID))\n.map(group -> Map.of(GROUP_ID_KEY, group.getId(), GROUP_NAME_KEY, group.getName(locale)))\n.collectList();\n}", "CodeBleu_score": 16.45676850721394}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\turn Mono.just(orgMember)\n.flatMap(member -> {\nif (member.isMemberOfAllUsersGroup()) {\nreturn Mono.just(Collections.emptyList());\n}\nreturn Mono.just(member)\n.flatMap(it -> getGroupsForUser(it.getOrgId(), userId, withoutDynamicGroups, locale));\n})\n.flatMap(it -> {\nif (it.isEmpty()) {\nreturn Mono.just(Collections.emptyList());\n}\nreturn Mono.just(it)\n.map(groups -> groups.stream()\n.filter(group ->!group.getGroupName().equals(ALL_USERS_GROUP))\n.map(group -> {\nMap<String, String> map = new HashMap<>();\nmap.put(GROUP_ID_KEY, group.getGroupId());\nmap.put(GROUP_NAME_KEY, group.getGroupName());\nreturn map;\n})\n.collect(Collectors.toList()));\n});\n}", "CodeBleu_score": 30.69168653639726}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t*\n * This function builds a list of user detail groups for a given user and organization member. Depending on whether the member is an admin or if dynamic groups should be excluded, it retrieves the appropriate groups. It filters out the \"all users\" group and maps the remaining groups to a list of maps containing group IDs and localized group names.\n */\nreturn Mono.just(orgMember.isAdmin())\n               .flatMap(it -> {\n                    if (it) {\n                        return groupService.getAllGroups(orgMember.getOrganizationId(), locale);\n                    } else {\n                        return groupService.getGroups(orgMember.getOrganizationId(), orgMember.getId(), locale);\n                    }\n                })\n               .map(it -> it.stream()\n                       .filter(group ->!group.getId().equals(Group.ALL_USERS_GROUP_ID))\n                       .collect(Collectors.toMap(Group::getId, group -> group.getName(locale))))\n               .map(it -> it.entrySet().stream()\n                       .map(entry -> {\n                            Map<String, String> group = new HashMap<>();\n                            group.put(\"id\", entry.getKey());\n                            group.put(\"name\", entry.getValue());\n                            return group;\n                        })\n                       .collect(Collectors.toList()));\n}", "CodeBleu_score": 37.280554523778484}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class, \"userId\");\n}", "CodeBleu_score": 30.866782354049516}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class, \"userId\");\n}", "CodeBleu_score": 30.866782354049516}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class);\n}", "CodeBleu_score": 28.631604009821704}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\t// Ensure the partition predicate is not nil.\n\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate cannot be nil\")\n\t}\n\n\t// Ensure the value predicate is not nil.\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate cannot be nil\")\n\t}\n\n\t// Create a run group to handle clearing matching entries across multiple partitions concurrently.\n\tvar runGroup sync.WaitGroup\n\t// Enqueue each partition that satisfies the partition predicate for processing.\n\tc.partitions.Range(func(k, v any) bool {\n\t\t// Increment the run group counter.\n\t\trunGroup.Add(1)\n\t\t// Create a new task to clear matching entries in the partition.\n\t\tgo func(partition PartitionManager) {\n\t\t\t// Decrement the run group counter.\n\t\t\tdefer runGroup.Done()\n\t\t\t// Clear matching entries in the partition based on the value predicate.\n\t\t\tpartition.ClearMatching(predicateValue)\n\t\t}(v.(PartitionManager))\n\t\treturn true\n\t})\n\t// Wait for all tasks to complete.\n\trunGroup.Wait()\n}", "CodeBleu_score": 35.50865634328243}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tc.runGroup.Add(1)\n\tdefer c.runGroup.Done()\n\n\tc.partitions.Range(func(k, v any) bool {\n\t\tif predicatePartition(k.(string), v.(PartitionManager)) {\n\t\t\tc.runGroup.Add(1)\n\t\t\tgo func(partitionName string, partition PartitionManager) {\n\t\t\t\tdefer c.runGroup.Done()\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t}(k.(string), v.(PartitionManager))\n\t\t}\n\n\t\treturn true\n\t})\n\n\tc.runGroup.Wait()\n}", "CodeBleu_score": 39.524746195406394}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Key(), p) {\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 38.12849279349296}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions > 0 && totalWeightQuantity > 0 {\n\t\treturn int(math.Ceil(float64(maxItemsTotal) / float64(numPartitions) * float64(totalWeightQuantity)))\n\t}\n\treturn 0\n}", "CodeBleu_score": 33.28838595123925}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(float64(maxItemsTotal) * avgWeightPerPartition))\n}", "CodeBleu_score": 38.66788414055421}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\treturn int(math.Floor(float64(maxItemsTotal) / float64(numPartitions) * float64(totalWeightQuantity)))\n}", "CodeBleu_score": 36.21749207701434}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\ttry {\n\t\tConnectionMetadata metadata = getConnectionMetadata().block();\n\t\tif (metadata!= null) {\n\t\t\tcontributorMap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\t\tcontributorMap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t\t}\n\t} catch (Exception e) {\n\t\t// Ignore\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 47.45864651863865}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tMono<ConnectionMetadata> metadata = getConnectionMetadata();\n\tmetadata.subscribe(md -> {\n\t\tif (md!= null) {\n\t\t\tmap.put(\"databaseProductName\", md.getDatabaseProductName());\n\t\t\tmap.put(\"databaseProductVersion\", md.getDatabaseProductVersion());\n\t\t}\n\t});\n\treturn map;\n}", "CodeBleu_score": 43.08244352197748}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\ttry {\n\t\tConnectionMetadata metadata = this.getConnectionMetadata().block();\n\t\tif (metadata!= null) {\n\t\t\tcontributorMap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n\t\t\tcontributorMap.put(\"databaseProductVersion\", metadata.getDatabaseProductVersion());\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while retrieving database metadata\", e);\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 45.6043300711699}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tUserSettings userSettings = configMap.getUserSettings();\n\tif (userSettings!= null) {\n\t\tinfo.setRegistrationEnabled(userSettings.isRegistrationEnabled());\n\t\tinfo.setEmailVerificationEnabled(userSettings.isEmailVerificationEnabled());\n\t}\n}", "CodeBleu_score": 25.507898037018283}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap!= null) {\n\t\tUserSettings userSettings = configMap.getUserSettings();\n\t\tif (userSettings!= null) {\n\t\t\tinfo.setRegistrationEnabled(userSettings.isRegistrationEnabled());\n\t\t\tinfo.setEmailVerificationRequired(userSettings.isEmailVerificationRequired());\n\t\t}\n\t}\n}", "CodeBleu_score": 26.81844074736217}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// Retrieve user settings from the configuration map\n\tBoolean enableRegistration = configMap.getBoolean(USER_SETTING_ENABLE_REGISTRATION, null);\n\tBoolean enableEmailVerification = configMap.getBoolean(USER_SETTING_ENABLE_EMAIL_VERIFICATION, null);\n\n\t// If the user settings are null, disable registration and email verification on registration\n\tif (enableRegistration == null || enableEmailVerification == null) {\n\t\tinfo.setEnableRegistration(false);\n\t\tinfo.setEnableEmailVerification(false);\n\t}\n\t// Otherwise, update the GlobalInfo object with the retrieved settings for registration and email verification\n\telse {\n\t\tinfo.setEnableRegistration(enableRegistration);\n\t\tinfo.setEnableEmailVerification(enableEmailVerification);\n\t}\n}", "CodeBleu_score": 34.673200814218305}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\t// Create a new thread group and thread to execute the restart process\n\tThreadGroup threadGroup = new ThreadGroup(\"restartThreadGroup\");\n\tThread thread = new Thread(threadGroup, new RestartThread(), \"restartThread\");\n\t// Set the thread as non-daemon and assign the application class loader as its context class loader\n\tthread.setContextClassLoader(this.getClass().getClassLoader());\n\tthread.setDaemon(false);\n\t// Start the thread and return a message indicating the restart has begun\n\tthread.start();\n\treturn \"Application restart has begun\";\n}", "CodeBleu_score": 58.821240766045726}, {"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"restart\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(Application.class.getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tSystem.out.println(\"Restarting application...\");\n\t\t\t\tThread.sleep(1000);\n\t\t\t\tSystem.exit(0);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.start();\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 44.91223841049574}, {"code": "public Object restart(){\n\t\tThreadGroup tg = new ThreadGroup(\"restart\");\n\tThread t = new Thread(tg, new RestartThread(), \"restart\");\n\tt.setContextClassLoader(this.getClass().getClassLoader());\n\tt.setDaemon(false);\n\tt.start();\n\treturn \"Application restart initiated. Restarting in 5 seconds.\";\n}", "CodeBleu_score": 50.691197945802834}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\t//  configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n\t//  configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 4.963729429268309}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t ObjectMapper objectMapper = new ObjectMapper();\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 53.30515566872087}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoderConfig(ObjectMapper::writeValueAsString);\n configurer.defaultCodecs().jackson2JsonDecoder(ObjectMapper::readValue);\n }", "CodeBleu_score": 44.931400868686}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\").and(RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 17.343254200279798}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\tturn RouterFunctions.route(RequestPredicates.and(RequestPredicates.GET(\"/console/**\"),\n    RequestPredicates.not(RequestPredicates.path(\"/console/assets/**\")),\n    RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 18.147069965659433}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\").and(not(RequestPredicates.GET(\"/console/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveConsoleIndex);\n}", "CodeBleu_score": 17.387276263608722}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn route(GET(\"/uc/**\").and(not(GET(\"/uc/assets/**\"))).and(accept(MediaType.TEXT_HTML)).and(not(webSocketRequest())), this::serveIndex);\n}", "CodeBleu_score": 19.915529121177663}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\").and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))).and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 17.049887684294582}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML)), this::serveIndex);\n}", "CodeBleu_score": 17.31712651132232}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\t// Create a concurrent hash map to store the sessions.\n\tlet sessionMap = ConcurrentHashMap<String, MapSession>()\n\n\t// Create the session repository.\n\tlet sessionRepository = ReactiveIndexedSessionRepository<MapSession>(sessionMap)\n\n\t// Set the default session timeout based on properties from the session and server configurations.\n\tsessionRepository.defaultSessionTimeout = sessionConfiguration.timeout.totalSeconds\n\n\t// Return the configured repository.\n\treturn sessionRepository\n}", "CodeBleu_score": 14.604643203937842}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tval repository = ReactiveIndexedSessionRepository<MapSession>(\n\t\t\tMapReactiveSessionRepository.create(\n\t\t\t\t\tConcurrentHashMap<String, MapSession>(),\n\t\t\t\t\tsessionManager.sessionTimeout,\n\t\t\t\t\tsessionManager.cookieName,\n\t\t\t\t\tsessionManager.cookiePath,\n\t\t\t\t\tsessionManager.cookieDomain,\n\t\t\t\t\tsessionManager.cookieSecure,\n\t\t\t\t\tsessionManager.cookieHttpOnly,\n\t\t\t\t\tsessionManager.cookieSameSite\n\t\t\t)\n\t)\n\trepository.setSessionManager(sessionManager)\n\treturn repository\n}", "CodeBleu_score": 32.26120297735654}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn ReactiveIndexedSessionRepository<MapSession>(\n\t\tsessionRepository: MapSessionRepository(),\n\t\ttimeout: sessionTimeout,\n\t\tcleanupInterval: sessionCleanupInterval\n\t)\n}", "CodeBleu_score": 11.766076595990196}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n\tuserDetailsService.setUserService(userService);\n\tuserDetailsService.setRoleService(roleService);\n\tuserDetailsService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isEnableTwoFactorAuthentication());\n\treturn userDetailsService;\n}", "CodeBleu_score": 37.166033030819214}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\n// Create an instance of DefaultUserDetailService\n    DefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n\n// Configure the userDetailsService with the provided user and role services\n    userDetailsService.setUserDetailsService(userService);\n    userDetailsService.setRoleService(roleService);\n\n// Configure two-factor authentication based on the security settings in HaloProperties\n    if (haloProperties.isTwoFactorAuthenticationEnabled()) {\n        userDetailsService.setTwoFactorAuthenticationProvider(new TwoFactorAuthenticationProvider(userService));\n    } else {\n        userDetailsService.setTwoFactorAuthenticationProvider(new DisabledTwoFactorAuthenticationProvider());\n    }\n\n// Return the configured DefaultUserDetailService instance\n    return userDetailsService;\n}", "CodeBleu_score": 32.111440932416905}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\treturn new DefaultUserDetailService(userService, roleService, haloProperties);\n}", "CodeBleu_score": 13.733270766072927}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setDisplayName(displayName);\n\tif (email!= null) {\n\t\tcommentOwner.setEmail(email);\n\t}\n\tcommentOwner.setAvatar(new Comment.CommentOwner.Avatar());\n\tcommentOwner.getAvatar().setUrl(avatarUrl);\n\tcommentOwner.setWebsite(new Comment.CommentOwner.Website());\n\tcommentOwner.getWebsite().setUrl(websiteUrl);\n\treturn commentOwner;\n}", "CodeBleu_score": 41.22339517615043}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setDisplayName(displayName);\n\tcommentOwner.setEmail(email);\n\tcommentOwner.setAvatarUrl(avatarUrl);\n\tcommentOwner.setWebsiteUrl(websiteUrl);\n\treturn commentOwner;\n}", "CodeBleu_score": 34.320622156193}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n\tcommentOwner.setKind(\"email\");\n\tcommentOwner.setDisplayName(this.displayName);\n\tcommentOwner.setEmail(this.email == null? \"\" : this.email);\n\tcommentOwner.setAvatar(new Comment.CommentOwner.Avatar());\n\tcommentOwner.setWebsite(new Comment.CommentOwner.Website());\n\treturn commentOwner;\n}", "CodeBleu_score": 34.659927481350394}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.kind == \"email\") {\n\t\tUser user = fetchUserByEmail(commentOwner.name);\n\t\treturn user.kind == post.owner.kind && user.name == post.owner.name;\n\t} else {\n\t\treturn commentOwner.name == post.owner.name;\n\t}\n}", "CodeBleu_score": 18.747305385292574}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.kind == 'email') {\n\t\tUser user = fetchUserByEmail(post.owner);\n\t\treturn user!= null && user.name == commentOwner.name;\n\t} else {\n\t\treturn post.owner == commentOwner.name;\n\t}\n}", "CodeBleu_score": 15.619047079065862}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.kind == Comment.CommentOwner.Kind.EMAIL) {\n\t\tUser user = userDao.getUserByEmail(commentOwner.name);\n\t\treturn user!= null && user.name.equals(post.owner.name);\n\t} else {\n\t\treturn commentOwner.name.equals(post.owner.name);\n\t}\n}", "CodeBleu_score": 20.730599445762827}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\n\n// Build the field query from the selectors\nString fieldQuery = \"\";\nfor (Map.Entry<String, String> entry : queryParams.entrySet()) {\n    if (entry.getKey().startsWith(\"field\")) {\n        fieldQuery += entry.getValue() + \" \";\n    }\n}\n\n// Add conditions based on keyword and owner name, if provided\nif (!StringUtils.isBlank(getKeyword())) {\n    fieldQuery += \"keyword:\" + getKeyword() + \" \";\n}\nif (!StringUtils.isBlank(getOwnerName())) {\n    fieldQuery += \"ownerName:\" + getOwnerName() + \" \";\n}\n\n// Set the constructed field selector in the ListOptions object\nlistOptions.setFields(fieldQuery);\nreturn listOptions;\n}", "CodeBleu_score": 26.62520304654943}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\n\n// Build the field selector\nString fieldSelector = \"\";\nif (!StringUtils.isBlank(ownerName)) {\n    fieldSelector += \"ownerName=\" + ownerName;\n}\nif (!StringUtils.isBlank(ownerKind)) {\n    fieldSelector += \",ownerKind=\" + ownerKind;\n}\nif (!StringUtils.isBlank(keyword)) {\n    fieldSelector += \",keyword=\" + keyword;\n}\nif (!StringUtils.isBlank(fieldSelector)) {\n    listOptions.setListOptionsFieldSelector(fieldSelector);\n}\n\nreturn listOptions;\n}", "CodeBleu_score": 21.936732170888515}, {"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\nlistOptions.setFields(buildFieldSelector());\nlistOptions.setConditions(buildConditions());\nreturn listOptions;\n}", "CodeBleu_score": 8.327157148332805}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.fromCallable(() -> {\n\t\tObjects.requireNonNull(commentName);\n\t\tCounter counter = counterService.getCounter(commentName);\n\t\treturn counter!= null? new CommentStats(counter.getUpvotes(), counter.getDownvotes()) : new CommentStats();\n\t});\n}", "CodeBleu_score": 35.41856620586772}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tif (commentName == null) {\n\t\treturn Mono.just(new CommentStats());\n\t}\n\treturn counterRepository.findById(commentName)\n\t\t\t.map(counter -> new CommentStats(counter.getUpvotes()))\n\t\t\t.defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 37.11203263668948}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tif (commentName == null) {\n\t\treturn Mono.just(new CommentStats());\n\t}\n\n\treturn counterRepository.findById(commentName)\n\t\t.map(counter -> new CommentStats(counter.getUpvoteCount()))\n\t\t.switchIfEmpty(Mono.just(new CommentStats()));\n}", "CodeBleu_score": 36.930606912117035}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\nif (subscriber == null) {\nreturn;\n}\n\n// Set up the interest reason.\nSubscription.InterestReason interestReason = new Subscription.InterestReason();\ninterestReason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\ninterestReason.setCondition(String.format(\"owner == \\\"%s\\\"\", identity.name()));\n\n// Subscribe the user to the notification center.\nSubscription subscription = new Subscription.Builder(\nSubscription.Type.NOTIFICATION_CENTER,\nsubscriber,\ninterestReason).build();\n\n// Subscribe the user to the notification center.\nmNotificationCenter.subscribe(subscription);\n}", "CodeBleu_score": 54.91991395361667}, {"code": "void subscribeReply(UserIdentity identity){\n\t// Create the subscriber from the user identity.\n    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n// Create the interest reason.\n    Subscription.InterestReason interestReason = new Subscription.InterestReason();\n    interestReason.setReasonType(\"someone replied to you\");\n    interestReason.setCondition(new Subscription.InterestReason.Condition(\"owner\", \"==\", identity.name()));\n\n// Create the subscription.\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(interestReason);\n\n// Subscribe to the notification center.\n    NotificationCenter.getInstance().subscribe(subscription, new NotificationCenter.OnSubscribeListener() {\n        @Override\n        public void onSubscribeSuccess() {\n            Log.d(TAG, \"Subscribed to reply notifications\");\n        }\n\n        @Override\n        public void onSubscribeFailure(int errorCode) {\n            Log.e(TAG, \"Failed to subscribe to reply notifications: \" + errorCode);\n        }\n    });\n}", "CodeBleu_score": 47.475797257639265}, {"code": "void subscribeReply(UserIdentity identity){\n\t\n// Create a subscriber from the given user identity.\nSubscription.Subscriber subscriber = createSubscriber(identity);\n\n// Create an interest reason for the subscription.\nSubscription.InterestReason interestReason = new Subscription.InterestReason();\ninterestReason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\ninterestReason.setCondition(String.format(\"owner = '%s'\", identity.name()));\n\n// Create a subscription for the subscriber and interest reason.\nSubscription subscription = new Subscription();\nsubscription.setSubscriber(subscriber);\nsubscription.setInterestReason(interestReason);\n\n// Subscribe the user to the notification center.\ntry {\n    NotificationCenter.getInstance().subscribe(subscription);\n} catch (Exception e) {\n    Log.e(TAG, \"Error subscribing to reply notifications\", e);\n}\n}", "CodeBleu_score": 39.96175307781079}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\trn updateCommentWithRetry(comment.getName(), comment -> {\ncomment.setApproved(true);\ncomment.setApprovedAt(OffsetDateTime.now());\nreturn comment;\n});\n}", "CodeBleu_score": 18.496515442026233}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\trn Mono.defer(() -> Mono.just(comment)\n.map(c -> c.toBuilder().setApproved(true).setApprovedTime(Instant.now()).build())\n.flatMap(client::update)\n.retryWhen(Retry.backoff(8, Duration.ofMillis(100))\n.filter(OptimisticLockingFailureException.class::isInstance)));\n}", "CodeBleu_score": 22.9236857079519}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\turn updateCommentWithRetry(comment.getName(), comment -> {\n\t\tcomment.setApproved(true);\n\t\tcomment.setApprovedAt(OffsetDateTime.now());\n\t\treturn comment;\n\t});\n}", "CodeBleu_score": 18.837437667015987}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setComponent($this);\n\t}\n\n\tif ($action instanceof HasRecord && $this->record) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 46.63658206981756}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->mount($this);\n\t}\n\n\tif ($this->hasRecord() && $action instanceof HasRecord) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 52.63837666385489}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setComponent($this);\n\t}\n\n\tif ($action instanceof HasRecord && $this->hasRecord()) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 49.25078218169687}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->redirect($this->successRedirectUrl());\n\n\treturn $this;\n}", "CodeBleu_score": 19.208133149226732}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\n$url = $this->evaluate($this->successRedirect);\n\nif ($url) {\n\n$this->redirect($url);\n\n}\n\nreturn $this;\n\n}", "CodeBleu_score": 72.30333408323332}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->redirect($this->successRedirectUrl());\n\n\treturn $this;\n}", "CodeBleu_score": 19.208133149226732}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (!$record ||!$record->hasMethod('tags')) {\n\t\treturn;\n\t}\n\n\t$tagModel = $this->getTagModel();\n\t$tags = $this->getTagsFromState($state);\n\n\tif (empty($tags)) {\n\t\treturn;\n\t}\n\n\t$tags = $this->getOrCreateTags($tags, $tagModel);\n\t$record->tags()->sync($tags);\n}", "CodeBleu_score": 23.27014634495445}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (!isset($record, $state['tags'])) {\n\t\treturn;\n\t}\n\n\t$tagModel = $this->tagModel;\n\t$tagIds = [];\n\n\tforeach ($state['tags'] as $tagName) {\n\t\t$tag = $tagModel::findByName($tagName);\n\t\tif ($tag === null) {\n\t\t\t$tag = new $tagModel;\n\t\t\t$tag->name = $tagName;\n\t\t\t$tag->save();\n\t\t}\n\n\t\t$tagIds[] = $tag->id;\n\t}\n\n\t$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 25.261093355692914}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif ($record === null) {\n\t\treturn;\n\t}\n\n\tif (!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModel = $this->getTagModel();\n\n\t$tags = [];\n\n\tforeach ($state as $tagName) {\n\t\t$tag = $tagModel::where('name', $tagName)->first();\n\n\t\tif ($tag === null) {\n\t\t\t$tag = $tagModel::create([\n\t\t\t\t'name' => $tagName,\n\t\t\t]);\n\t\t}\n\n\t\t$tags[] = $tag->id;\n\t}\n\n\t$record->tags()->sync($tags);\n}", "CodeBleu_score": 30.907100439359386}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := DissectRepositoryPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := fmt.Sprintf(\"%s:%s\", spacePath, repoName)\n\tresource := fmt.Sprintf(\"%s:%s\", scope, pipelineIdentifier)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check\n\tif err := authorizer.Check(ctx, authorizer.GetContext(session), scope, resource, permission); err!= nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 48.33533173202029}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Check if the path is valid\n\tif err := validate.ValidateRepositoryPath(repoPath); err!= nil {\n\t\treturn err\n\t}\n\t// Get the space path and repository name\n\tspacePath, repositoryName, err := getSpaceAndRepositoryName(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\t// Create a scope and resource for the pipeline\n\tscope := authz.Scope{\n\t\tType:   enum.ScopeTypeRepository,\n\t\tEntity: repositoryName,\n\t}\n\tresource := authz.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tID:   pipelineIdentifier,\n\t}\n\t// Check the permission\n\tif err := authorizer.Check(ctx, authorizer.WithSession(session), authorizer.WithScope(scope), authorizer.WithResource(resource), authorizer.WithPermission(permission)); err!= nil {\n\t\treturn err\n\t}\n\treturn nil\n}", "CodeBleu_score": 51.63469524565056}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := repo.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := authz.Scope{\n\t\tType:     enum.ScopeTypePipeline,\n\t\tSpace:    spacePath,\n\t\tRepo:     repoName,\n\t\tPipeline: pipelineIdentifier,\n\t}\n\tresource := authz.Resource{\n\t\tType: enum.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission to perform the authorization check\n\treturn authorizer.Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 65.99287581921541}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space and name.\n\tparentSpace, name, err := space.ParentSpace()\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create the scope and resource.\n\tscope := types.NewScope(parentSpace, name)\n\tresource := types.NewResource(parentSpace, name)\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 54.664695886248694}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\n\tif session == nil {\n\t\treturn nil\n\t}\n\n\tif authorizer == nil {\n\t\treturn nil\n\t}\n\n\tif space.Parent == nil {\n\t\treturn nil\n\t}\n\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\t&authz.Scope{\n\t\t\tType:  \"space\",\n\t\t\tSpace: space.Parent.ID,\n\t\t},\n\t\t&authz.Resource{\n\t\t\tType: \"space\",\n\t\t\tID:   space.ID,\n\t\t},\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 45.05070094158298}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\treturn check(ctx, authorizer, session, space, permission)\n}", "CodeBleu_score": 15.88168912759549}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource = json.RawMessage(marshalJSON(data))\n\t}\n\tvar err error\n\tvar sanitized json.RawMessage\n\tsanitized, err = json.Marshal(sanitizeJSON(source))\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\treturn sanitized, nil\n}", "CodeBleu_score": 29.589636775415972}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource = json.RawMessage(MustMarshalJSON(data))\n\t}\n\n\tvar result json.RawMessage\n\tif err := json.Unmarshal(source, &result); err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to decode JSON payload: %w\", err)\n\t}\n\n\tif err := json.Unmarshal(result, &result); err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to sanitize JSON payload: %w\", err)\n\t}\n\n\treturn json.RawMessage(bytes.TrimRight(result, \"\n\")), nil\n}", "CodeBleu_score": 39.83641379642043}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, fmt.Errorf(\"failed to marshal data: %w\", err)\n\t\t}\n\t\tsource = b\n\t}\n\n\tvar payload map[string]any\n\tif err := json.Unmarshal(source, &payload); err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal source: %w\", err)\n\t}\n\n\tb, err := json.Marshal(payload)\n\tif err!= nil {\n\t\treturn nil, fmt.Errorf(\"failed to marshal payload: %w\", err)\n\t}\n\n\treturn json.RawMessage(strings.TrimRight(string(b), \"\n\")), nil\n}", "CodeBleu_score": 40.667378589598606}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoRef = strings.TrimSpace(repoRef)\n\tif repoRef == \"\" {\n\t\treturn nil, errors.New(\"invalid repository reference\")\n\t}\n\tif!strings.HasPrefix(repoRef, \"ref/\") {\n\t\treturn nil, errors.New(\"invalid repository reference\")\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repo.Get(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif!session.IsAdmin() {\n\t\tif err := c.repo.CheckPermission(ctx, repo, session, reqPermission); err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 51.89177531743447}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoRef = strings.TrimSpace(repoRef)\n\tif repoRef == \"\" {\n\t\treturn nil, errors.New(\"empty repository reference\")\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.repoManager.Get(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the permissions.\n\tif err := c.checkRepoAccess(session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.45895739585002}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoRef = strings.TrimSpace(repoRef)\n\tif repoRef == \"\" {\n\t\treturn nil, errors.New(\"invalid repository reference\")\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.97980123982674}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tsanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tsanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\treturn sanitizers\n}", "CodeBleu_score": 62.41092259156814}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\teturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 29.82486602668074}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.renderer == nil then\n\t\tself:attach_to_screen()\n\tend\n\tself.state.on_render = on_render\n\treturn self", "CodeBleu_score": 32.01936635423215}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.attached_to_renderer then\n\t\tself.attached_to_renderer = true\n\t\tself.renderer.buffers[self.id] = self\n\t\tself.state.on_render = on_render\n\tend\n\treturn self", "CodeBleu_score": 48.93332678935734}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.attached_to_screen then\n\t\tself.state.attached_to_screen = true\n\t\tself.state.renderer:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 58.68931342837439}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif self.filename == nil then\n\t\tlog.error(\"Buffer:watch() - filename is nil\")\n\t\treturn\n\tend\n\n\tif callback == nil then\n\t\tlog.error(\"Buffer:watch() - callback is nil\")\n\t\treturn\n\tend\n\n\tlocal watcher = {}\n\twatcher.buffer = self\n\twatcher.callback = callback\n\n\tif self.watcher ~= nil then\n\t\tself.watcher:stop()\n\tend\n\n\tself.watcher = vim.loop.new_fs_event(self.filename, nil, 0)\n\n\tif self.watcher == nil then\n\t\tlog.error(\"Buffer:watch() - failed to create file watcher for \".. self.filename)\n\t\treturn\n\tend\n\n\tself.watcher:start(function(err, filename)\n\t\tif err ~= nil then\n\t\t\tlog.error(\"Buffer:watch() - failed to watch \".. self.filename.. \": \".. err)\n\t\t\treturn\n\t\tend\n\n\t\tif filename ~= nil then\n\t\t\twatcher.callback()\n\t\tend\n\tend)", "CodeBleu_score": 43.450012177361714}, {"code": "function Buffer:watch(callback)\n\t\tif not self.filename then\n\t\tprint(\"Error: Buffer does not have a filename.\")\n\t\treturn\n\tend\n\tif not callback then\n\t\tprint(\"Error: No callback provided.\")\n\t\treturn\n\tend\n\tif self.valid then\n\t\tself.callback = callback\n\telse\n\t\tprint(\"Error: Buffer is not valid.\")\n\tend", "CodeBleu_score": 28.722768621820094}, {"code": "function Buffer:watch(callback)\n\t\tif self.buffer then\n\t\tself.watcher = hs.fs.watch(self.filename, function(event, path)\n\t\t\tif event == \"change\" then\n\t\t\t\tcallback(self)\n\t\t\tend\n\t\tend)\n\telse\n\t\ths.alert.show(\"Buffer not valid\", 1)\n\tend", "CodeBleu_score": 29.978639771818894}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal color_spec = self:get_spec()\n\tlocal color_name = color_spec[self.attribute]\n\tlocal color_hex = self.nvim.api.nvim_get_hl_by_name(color_name, true)\n\tif color_hex then\n\t\tself.hex = color_hex.foreground\n\t\treturn self.hex\n\tend", "CodeBleu_score": 43.53943429498139}, {"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal color = self.spec\n\tlocal attr = self.attr\n\tlocal highlight = self.highlight\n\tlocal hex = self.hex\n\tlocal color_spec = color[attr]\n\tif highlight then\n\t\tlocal group = highlight:get_group()\n\t\tif group then\n\t\t\tcolor_spec = group:get_foreground() or group:get_background()\n\t\tend\n\tend\n\tif color_spec then\n\t\tlocal color_spec_type = type(color_spec)\n\t\tif color_spec_type == \"number\" then\n\t\t\thex = string.format(\"#%06x\", color_spec)\n\t\telseif color_spec_type == \"table\" then\n\t\t\thex = string.format(\"#%02x%02x%02x\", color_spec.r, color_spec.g, color_spec.b)\n\t\tend\n\tend\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 47.36423485060238}, {"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\n\tlocal spec = self.spec\n\tlocal color_attr = self.color_attr\n\tlocal color_highlight = self.color_highlight\n\n\tif color_highlight then\n\t\tlocal highlight = api.nvim_get_hl_by_name(color_highlight, true)\n\t\tif highlight then\n\t\t\tself.hex = string.format(\"#%02x%02x%02x\", highlight[color_attr].rgb.red, highlight[color_attr].rgb.green, highlight[color_attr].rgb.blue)\n\t\t\treturn self.hex\n\t\tend\n\tend\n\n\tself.hex = string.format(\"#%02x%02x%02x\", spec[color_attr].rgb.red, spec[color_attr].rgb.green, spec[color_attr].rgb.blue)\n\treturn self.hex", "CodeBleu_score": 54.362983284383404}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor _, line in ipairs(lines) do\n\t\tlocal matches = vim.fn.matchlist(line, pattern)\n\t\tfor _, match in ipairs(matches) do\n\t\t\tbuffer:add_highlight(hl, match.line - 1, match.col - 1, match.col + #match.str - 1)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 41.85428025047246}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\n-- Retrieve the buffer's lines.", "CodeBleu_score": 2.6064955318516247}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tlocal match = line:match(pattern)\n\t\tif match then\n\t\t\tbuffer:add_highlight(hl, i, match:find(pattern), match:len())\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 35.65248906908771}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = Namespace:get_unique_id(row, col)\n\tvim.api.nvim_buf_set_extmark(buffer, Namespace.namespace_id, id, row, col, {\n\t\tvirt_text = {{text, hl},},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 52.107222372862374}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = self:transpose_id(row, col)\n\tvim.api.nvim_buf_set_extmark(buffer, 0, id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 59.78339165390207}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\t-- Calculate the unique ID for the virtual text\n\tlocal id = row * 1000000 + col\n\t-- Set the virtual text\n\tvim.api.nvim_buf_set_extmark(buffer, Namespace.ext_id, id, row, col, {\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 54.106637341269746}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tlocal line_number = 0\n\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\n\t\tif char == \"", "CodeBleu_score": 27.466590494385184}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"", "CodeBleu_score": 10.982358467774171}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal lines = {}\n\tlocal line = \"\"\n\tfor i = 1, string.len(output) do\n\t\tlocal c = string.sub(output, i, i)\n\t\tif c == \"", "CodeBleu_score": 22.578462085139567}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif not watcher then\n\t\twatcher = {\n\t\t\tpath = path,\n\t\t\thandler = handler,\n\t\t\tevent_loop = self.event_loop,\n\t\t\twatcher = nil,\n\t\t}\n\t\tself.watchers[path] = watcher\n\tend\n\treturn watcher", "CodeBleu_score": 42.42451519771559}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\tlocal watcher = self.loop:new_file_watcher(path, handler)\n\tself.watchers[path] = watcher\n\twatcher:start()\n\n\treturn watcher", "CodeBleu_score": 39.456791876770765}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\tlocal watcher = self.loop:new_file_watcher(path, handler)\n\tself.watchers[path] = watcher\n\twatcher:start()\n\treturn watcher", "CodeBleu_score": 39.456791876770765}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\t-- Get the Git object for the buffer\n\tlocal git = self:git()\n\tif not git then return end\n\n\t-- Get the buffer lines\n\tlocal lines = self:lines()\n\tif not lines then return end\n\n\t-- Get the hunks\n\tlocal hunks, err = git:hunks(lines)\n\tif not hunks then return err end\n\n\t-- Set up signs\n\tself:clear_signs()\n\tfor _, hunk in ipairs(hunks) do\n\t\tself:set_sign(hunk)\n\tend\n\n\t-- Update the signs\n\tself:update_signs()\n\treturn hunks", "CodeBleu_score": 19.081980306381283}, {"code": "function GitBuffer:live_hunks()\n\t\t-- Get the buffer lines\n\tlocal lines = self:lines()\n\n\t-- Calculate the hunks\n\tlocal hunks = self:git_object():hunks(lines)\n\n\t-- If there's an error, return it\n\tif hunks.error then\n\t\treturn hunks\n\tend\n\n\t-- Set up the signs for each line in the hunks\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tself:sign_line(line)\n\t\tend\n\tend\n\n\t-- Update the buffer's signs and return the hunks\n\tself:update_signs()\n\treturn hunks", "CodeBleu_score": 20.89563132444708}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer_lines = self:buffer_lines()\n\tlocal hunks = self:git_object():hunks(buffer_lines)\n\tif hunks.error then\n\t\treturn hunks\n\tend\n\tlocal sign_categories = {\n\t\tadd = {\n\t\t\tsign = \"GitBufferSignAdd\",\n\t\t\tpriority = 1,\n\t\t},\n\t\tdel = {\n\t\t\tsign = \"GitBufferSignDelete\",\n\t\t\tpriority = 2,\n\t\t},\n\t\tmod = {\n\t\t\tsign = \"GitBufferSignModify\",\n\t\t\tpriority = 3,\n\t\t},\n\t\tunk = {\n\t\t\tsign = \"GitBufferSignUnknown\",\n\t\t\tpriority = 4,\n\t\t},\n\t}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk) do\n\t\t\tlocal category = sign_categories[line.type]\n\t\t\tif category then\n\t\t\t\tcategory.priority = category.priority + 1\n\t\t\t\tline.sign = category.sign\n\t\t\t\tline.priority = category.priority\n\t\t\tend\n\t\tend\n\tend\n\tself:update_signs(hunks)\n\treturn hunks", "CodeBleu_score": 34.61843461679531}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = os.tmpname()\n\tlocal f = io.open(tmp_file, 'wb')\n\tf:write(patch)\n\tf:close()\n\n\tlocal cmd = string.format('git --git-dir=%s --work-tree=%s add --patch %s', self.gitdir, self.workdir, tmp_file)\n\tlocal status, err = os.execute(cmd)\n\tos.remove(tmp_file)\n\tif status ~= 0 then\n\t\treturn err\n\tend", "CodeBleu_score": 50.317206755383225}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = os.tmpname()\n\tlocal f = io.open(tmp_file, 'wb')\n\tf:write(patch)\n\tf:close()\n\tlocal err = os.execute(self.git_cmd..'apply --cached --unidiff-zero '.. tmp_file)\n\tos.remove(tmp_file)\n\treturn err", "CodeBleu_score": 44.93955664371139}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal hunk_file = os.tmpname()\n\tlocal hunk_file_handle = io.open(hunk_file, 'w')\n\thunk_file_handle:write(patch)\n\thunk_file_handle:close()\n\n\tlocal cmd = ('git -c diff.mnemonicprefix=false -c core.quotepath=false -c core.ignorecase=true -c color.ui=false -c diff.compactionHeuristic=true -c diff.renames=copies -c diff.renameLimit=100000 -c diff.algorithm=patience -c diff.renameLimit=100000 diff --no-color --no-ext-diff --no-index --no-prefix --no-textconv --no-color-in-diff --no-color-in-diff-highlight --no-color-in-diff-index --no-color-in-diff-hunk --no-color-in-diff-header --no-color-in-diff-stats --no-color-in-diff-summary --no-color-in-merge-summary --no-color-in-merge-message --no-color-in-merge-output --no-color-in-merge-hunk --no-color-in-merge-index --no-color-in-merge-mode --no-color-in-merge-diff-highlight --no-color-in-merge-diff-highlight-removed --no-color-in-merge-diff-highlight-added --no-color-in-merge-diff-highlight-changed --no-color-in-merge-diff-header --no-color-in-merge-diff-summary --no-color-in-merge-message --no-color-in-merge-output --no-color-in-merge-hunk --no-color-in-merge-index --no-color-in-merge-mode --no-color-in-diff-highlight --no-color-in-diff-header --no-color-in-diff-stats --no-color-in-diff-summary --no-color-in-merge-summary --no-color-in-merge-message --no-color-in-merge-output --no-color-in-merge-", "CodeBleu_score": 27.811854286754638}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n// Create an OAuth request to the access token endpoint.\nOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\n// Add the necessary authentication header and body parameters.\nrequest.addHeader(OAuth.HeaderType.AUTHORIZATION, getHttpBasicAuthHeaderValue());\nrequest.addBodyParameter(OAuth.OAuthParameters.CONSUMER_KEY, config.getApiKey());\nrequest.addBodyParameter(OAuth.OAuthParameters.NONCE, requestToken.getNonce());\nrequest.addBodyParameter(OAuth.OAuthParameters.TIMESTAMP, String.valueOf(requestToken.getTimestamp()));\nrequest.addBodyParameter(OAuth.OAuthParameters.SIGNATURE_METHOD, config.getSignatureMethod());\nrequest.addBodyParameter(OAuth.OAuthParameters.SIGNATURE, getSignature(requestToken, verifier));\nrequest.addBodyParameter(OAuth.OAuthParameters.VERIFIER, verifier.getValue());\n\n// Send the request and extract the access token from the response body.\nOAuthResponse response = request.send();\nreturn config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 54.721083679487634}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n// Create an OAuth request to the access token endpoint\nOAuthRequest request = new OAuthRequest(Verb.POST, accessTokenEndpoint);\n\n// Add the necessary authentication header and body parameters\nrequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\nrequest.addBodyParameter(\"oauth_token\", requestToken.getToken());\nrequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n// Send the request and extract the access token from the response body\nOAuthResponse response = request.send();\nreturn accessTokenExtractor.extract(response.getBody());\n}", "CodeBleu_score": 53.45375117035973}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\trequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(\"oauth_token\", requestToken.getToken());\n\trequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\trequest.addBodyParameter(\"oauth_consumer_key\", config.getApiKey());\n\trequest.addBodyParameter(\"oauth_signature_method\", SignatureMethod.HMAC_SHA1.getName());\n\trequest.addBodyParameter(\"oauth_timestamp\", Long.toString(System.currentTimeMillis() / 1000L));\n\trequest.addBodyParameter(\"oauth_nonce\", Long.toString(System.nanoTime()));\n\trequest.addBodyParameter(\"oauth_version\", \"1.0\");\n\ttry {\n\t\tOAuthResponse response = request.send();\n\t\treturn extractor.extract(response.getBody());\n\t} catch (OAuthMessageSignerException | OAuthNotAuthorizedException | OAuthExpectationFailedException | OAuthCommunicationException e) {\n\t\tthrow new RuntimeException(e);\n\t}\n}", "CodeBleu_score": 49.32359354138377}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Create a credentials provider with the specified credentials\n\tCredentialsProvider provider = new BasicCredentialsProvider();\n\tprovider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\n\t// Add the host to an authentication cache using the Basic authentication scheme\n\tcontext.getCredentialsProvider().setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\n\t// Assign the credentials provider to the context\n\tcontext.setCredentialsProvider(provider);\n\n\t// Log the action of adding the host to the auth cache\n\tSystem.out.println(\"Added host \" + host + \" to authentication cache\");\n}", "CodeBleu_score": 44.75934010492308}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.getAuthCache().add(host, new BasicScheme());\n\tlogger.info(\"Added host {} to the auth cache\", host);\n}", "CodeBleu_score": 55.31324371286858}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Create a credentials provider\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\t// Set the credentials for the host\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\t// Add the credentials provider to the context\n\tcontext.setCredentialsProvider(credsProvider);\n\t// Add the host to the authentication cache\n\tcontext.getAuthCache().put(host, new BasicScheme());\n\t// Log the action of adding the host to the auth cache\n\tLOGGER.info(\"Added {} to auth cache\", host);\n}", "CodeBleu_score": 48.30085404791993}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tnkins jenkins = Jenkins.getInstance();\nAvatarCache cache = jenkins.getExtension(AvatarCache.class);\nif (cache == null) {\nthrow new IllegalStateException(\"No AvatarCache extension found\");\n}\nString key = cache.getKey(source);\ncache.seed(key, source);\ntry {\nreturn String.format(\"%s/avatar/%s/%s\", jenkins.getRootUrl(), URLEncoder.encode(key, \"UTF-8\"), size);\n} catch (UnsupportedEncodingException e) {\nthrow new IllegalStateException(e);\n}\n}", "CodeBleu_score": 43.66261889899388}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tnkins jenkins = Jenkins.getInstance();\nif (jenkins == null) {\nthrow new IllegalStateException(\"Jenkins instance is null\");\n}\nAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\nif (cache == null) {\nthrow new IllegalStateException(\"Avatar cache is null\");\n}\nString key = cache.getKey(source);\ncache.seed(key, source);\ntry {\nreturn new URL(jenkins.getRootUrl(), \"avatar/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size).toExternalForm();\n} catch (UnsupportedEncodingException | MalformedURLException e) {\nthrow new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n}\n}", "CodeBleu_score": 51.773972752137546}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t (source instanceof Jenkins) {\n    Jenkins instance = (Jenkins) source;\n    AvatarCache cache = instance.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"Avatar cache extension not found\");\n    }\n    String key = cache.getKey(source);\n    cache.seed(key, source);\n    try {\n        return instance.getRootUrl() + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n    }\n}\nreturn null;\n}", "CodeBleu_score": 51.89417497372523}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\n}", "CodeBleu_score": 17.434422944424384}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nthis.image = scaleImage(image, 128);\n}\nif (lastModified < 0) {\nthis.lastModified = System.currentTimeMillis();\n}\n}", "CodeBleu_score": 54.14860462678621}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\n}", "CodeBleu_score": 17.434422944424384}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tObject o = future.get();\n\t\t\tif (o instanceof Image) {\n\t\t\t\timage = (Image) o;\n\t\t\t\tlastModified = System.currentTimeMillis();\n\t\t\t}\n\t\t\tfuture = null;\n\t\t}\n\t} catch (Exception e) {\n\t\tfuture = null;\n\t}\n\treturn future!= null;\n}", "CodeBleu_score": 38.06880414839572}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\timage = cacheEntry.getImage();\n\t\t\tlastModified = cacheEntry.getLastModified();\n\t\t\tfuture = null;\n\t\t} catch (Exception e) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 43.62177555385842}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\timage = future.get();\n\t\t\tlastModified = System.currentTimeMillis();\n\t\t\tfuture = null;\n\t\t} catch (Exception e) {\n\t\t\tfuture = null;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 37.02608669995798}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tfinal ByteArrayOutputStream out = new ByteArrayOutputStream();\n\tfinal byte[] image = generateImage(req, node);\n\tout.write(image);\n\tout.flush();\n\trsp.setContentLength(image.length);\n\trsp.setContentType(\"image/png\");\n\trsp.getWriter().write(out.toString());\n}", "CodeBleu_score": 39.05090521740322}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\t// Get the image from the node and write it to the output stream\n\tBufferedImage image = null;\n\ttry {\n\t\timage = ((ImageNode) node).getImage();\n\t} catch (Exception e) {\n\t\t// This happens when the node is not an ImageNode\n\t\tthrow new ServletException(e);\n\t}\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tImageIO.write(image, \"png\", baos);\n\tbyte[] bytes = baos.toByteArray();\n\n\t// Write the image to the response\n\trsp.setContentLength(bytes.length);\n\trsp.setContentType(\"image/png\");\n\trsp.getOutputStream().write(bytes);\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 49.00152674593536}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t", "CodeBleu_score": 9.478070530273596}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t      this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        // Set up cache expiration for team and repositories\n        if (enableCache) {\n            teamCache = new CacheBuilder<Object, Object>().expireAfterWrite(teamCacheDuration, TimeUnit.MINUTES).build();\n            repositoriesCache = new CacheBuilder<Object, Object>().expireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES).build();\n        }\n\n        // Set up HTTP client\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        builder.setConnectionManager(new PoolingHttpClientConnectionManager(5, TimeUnit.MINUTES));\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n        builder.setRedirectStrategy(new DefaultRedirectStrategy() {\n            @Override\n            public boolean isRedirected(HttpRequest request, HttpResponse response, HttpContext context) throws ProtocolException {\n                if (response.getStatusLine().getStatusCode() == 301) {\n                    return false;\n                }\n                return super.isRedirected(request, response, context);\n            }\n        });\n\n        // Set up HTTP client authentication\n        if (authenticator!= null) {\n            authenticator.configureContext(context, builder);\n        }\n\n        // Set client proxy parameters\n        setClientProxyParams(BitbucketConstants.BITBUCKET_HOST, builder);\n        client = builder.build();\n    }", "CodeBleu_score": 44.412185386780735}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tenableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator, null);\n}", "CodeBleu_score": 8.90175375969161}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tenableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator, null);\n}", "CodeBleu_score": 8.90175375969161}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\ting sourceBranchName = pullRequest.getSource().getBranch().getName();\n\tString destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\ttry {\n\t\tBitbucketCloudBranch sourceBranch = getBranch(sourceBranchName);\n\t\tif (sourceBranch!= null) {\n\t\t\tsourceBranch.setClosure(new CommitClosure(sourceBranch.getCommit().getNode()));\n\t\t}\n\t} catch (IOException | InterruptedException e) {\n\t\tlog.log(Level.WARNING, \"Failed to get source branch for pull request \" + pullRequest.getId(), e);\n\t}\n\ttry {\n\t\tBitbucketCloudBranch destinationBranch = getBranch(destinationBranchName);\n\t\tif (destinationBranch!= null) {\n\t\t\tdestinationBranch.setClosure(new CommitClosure(destinationBranch.getCommit().getNode()));\n\t\t}\n\t} catch (IOException | InterruptedException e) {\n\t\tlog.log(Level.WARNING, \"Failed to get destination branch for pull request \" + pullRequest.getId(), e);\n\t}\n}", "CodeBleu_score": 34.9632015982679}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tGet the source branch\n\tBitbucketCloudBranch sourceBranch = null;\n\ttry {\n\t\tsourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n\t} catch (IOException | InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tif (sourceBranch!= null) {\n\t\t// Set up the source branch closure\n\t\tsourceBranchClosure = new CommitClosure(sourceBranch.getCommit());\n\t}\n\n\t// Get the destination branch\n\tBitbucketCloudBranch destinationBranch = null;\n\ttry {\n\t\tdestinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n\t} catch (IOException | InterruptedException e) {\n\t\te.printStackTrace();\n\t}\n\tif (destinationBranch!= null) {\n\t\t// Set up the destination branch closure\n\t\tdestinationBranchClosure = new CommitClosure(destinationBranch.getCommit());\n\t}\n}", "CodeBleu_score": 41.168357087221196}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tGet the source branch name\n\tString sourceBranch = pullRequest.getSource().getBranch().getName();\n\t// Get the source branch node\n\tString sourceNode = pullRequest.getSource().getCommit().getNode();\n\t// If the source branch exists, assign a new CommitClosure\n\tif (sourceBranch!= null && sourceNode!= null) {\n\t\tpullRequest.setSourceClosure(new CommitClosure(sourceNode));\n\t}\n\t// Get the destination branch name\n\tString destinationBranch = pullRequest.getDestination().getBranch().getName();\n\t// Get the destination branch node\n\tString destinationNode = pullRequest.getDestination().getCommit().getNode();\n\t// If the destination branch exists, assign a new CommitClosure\n\tif (destinationBranch!= null && destinationNode!= null) {\n\t\tpullRequest.setDestinationClosure(new CommitClosure(destinationNode));\n\t}\n}", "CodeBleu_score": 40.27437737280321}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tif (locationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\");\n\t}\n\tString url = locationConfiguration.getUrl();\n\tif (url == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location URL is null\");\n\t}\n\tDisplayURLProvider displayURLProvider = locationConfiguration.getProvider();\n\tif (displayURLProvider == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location DisplayURLProvider is null\");\n\t}\n\treturn displayURLProvider.getURL(build.getParent(), url, build.getDisplayName());\n}", "CodeBleu_score": 45.247885599665224}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tif (locationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration not found\");\n\t}\n\tif (locationConfiguration.getUrl() == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location URL not found\");\n\t}\n\treturn locationConfiguration.getUrl() + build.getUrl();\n}", "CodeBleu_score": 49.3102752573359}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get();\n\tString jenkinsURL = locationConfiguration.getUrl();\n\tif (jenkinsURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is null.\");\n\t}\n\tDisplayURLProvider displayURLProvider = locationConfiguration.getDisplayURLProvider();\n\tif (displayURLProvider == null) {\n\t\tthrow new IllegalStateException(\"Display URL provider is null.\");\n\t}\n\treturn displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 47.97162756585407}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url == null || url.isEmpty()) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is required\");\n\t}\n\n\tURL u;\n\ttry {\n\t\tu = new URL(url);\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed: \" + e.getMessage());\n\t}\n\n\tif (u.getHost().equals(\"localhost\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not allowed to use 'localhost' as the host. Please configure the Jenkins URL in Jenkins Global Configuration.\");\n\t}\n\n\tif (u.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not allowed to use 'unconfigured-jenkins-location' as the host. Please configure the Jenkins URL in Jenkins Global Configuration.\");\n\t}\n\n\tif (bitbucket!= null &&!bitbucket.isCloud()) {\n\t\ttry {\n\t\t\tInetAddress.getByName(u.getHost());\n\t\t} catch (UnknownHostException e) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL is not allowed to use an IP address as the host. Please configure the Jenkins URL in Jenkins Global Configuration.\");\n\t\t}\n\t}\n\n\treturn url;\n}", "CodeBleu_score": 56.13473428003361}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (!url.contains(\"://\")) {\n\t\turl = \"http://\" + url;\n\t}\n\tURL urlObj;\n\ttry {\n\t\turlObj = new URL(url);\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t}\n\tString host = urlObj.getHost();\n\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t}\n\tif (bitbucket.isCloud()) {\n\t\tif (!host.contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Bitbucket Cloud API clients must use a fully qualified host name for the Jenkins URL. For example, https://my-jenkins.my-domain.com\");\n\t\t}\n\t}\n\treturn url;\n}", "CodeBleu_score": 47.43320503101264}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\t// check if the URL is well-formed\n\tif (!URLUtil.isWellFormedUrl(url)) {\n\t\tthrow new IllegalStateException(\"URL is not well-formed: \" + url);\n\t}\n\n\t// check if the URL uses \"localhost\" or \"unconfigured-jenkins-location\" as the host\n\tif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"URL contains 'localhost' or 'unconfigured-jenkins-location': \" + url);\n\t}\n\n\t// check if the URL is for Bitbucket Cloud API clients\n\tif (bitbucket.isCloud()) {\n\t\t// check if the host is fully qualified\n\t\tString host = new URL(url).getHost();\n\t\tif (!host.contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Host is not fully qualified: \" + host);\n\t\t}\n\t}\n\n\treturn url;\n}", "CodeBleu_score": 37.388758387551114}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\nif (context.disableNotifications()) {\n    listener.getLogger().println(\"[Bitbucket] Skip build notification\");\n    return;\n}\n\nSCMRevision revision = build.getRevision();\nString hash = getHash(revision);\nif (hash == null) {\n    listener.getLogger().println(\"[Bitbucket] Skip build notification\");\n    return;\n}\n\nString key = getBuildKey(build, source.getBranch(), context.shareBuildKeyBetweenBranchAndPR());\nlistener.getLogger().println(String.format(\"[Bitbucket] Notify build %s (%s) with key %s\", build.getFullDisplayName(), hash, key));\n\nBitbucketApi bitbucket = source.getBitbucket();\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 41.20267505982689}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t    if (source.isDisableNotifications()) {\n//            listener.getLogger().println(\"[Bitbucket] Notifications are disabled for this job.\");\n//            return;\n//        }\n\n        // get the SCM revision and its hash\n        SCMRevision revision = build.getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Could not determine SCM revision hash.\");\n            return;\n        }\n\n        // determine whether to share the build key between branch and PR\n        boolean shareBuildKeyBetweenBranchAndPR = source.isShareBuildKeyBetweenBranchAndPR();\n        String branch = revision.getHead().getName();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        // initialize the Bitbucket client\n        BitbucketApi bitbucket = source.getBitbucket();\n        BitbucketChangesetCommentNotifier notifier = new BitbucketChangesetCommentNotifier(bitbucket);\n\n        // create and send the build status notification\n        notifier.buildStatus(new BitbucketBuildStatus(hash, \"This commit is being built...\", BitbucketBuildStatus.Status.INPROGRESS,\n                build.getAbsoluteUrl(), key, build.getDisplayName()));\n        listener.getLogger().println(\"[Bitbucket] Build status notification sent.\");\n    }", "CodeBleu_score": 39.10018838507393}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String folderName = build.getParent().getFullName();\n-    String buildKey = folderName + \"_\" + branch;\n+    String buildKey = build.getParent().getFullName();\n     if (shareBuildKeyBetweenBranchAndPR) {\n-        buildKey = folderName + \"_\" + branch;\n+        buildKey = buildKey + \"_\" + branch;\n     }\n     return buildKey;\n }", "CodeBleu_score": 48.45430734739682}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String folderName = build.getParent().getFullName();\n+    String folderName = build.getParent().getFullName().replaceAll(\"/\", \"-\");\n     if (shareBuildKeyBetweenBranchAndPR) {\n         return folderName + \"-\" + branch;\n     }\n     return build.getFullName();\n }", "CodeBleu_score": 47.92585763119542}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    String buildKey;\n+    String buildKey = null;\n \n     if (shareBuildKeyBetweenBranchAndPR) {\n         buildKey = build.getFullName() + \"-\" + branch;\n     } else {\n         buildKey = build.getFullName();\n     }\n \n     return buildKey;\n }", "CodeBleu_score": 41.34865757300899}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = getServerUrl();\n\t\tif (serverUrl == null) {\n\t\t\tLOGGER.log(Level.WARNING, \"The server URL is not set for BitbucketSCMNavigator. This may cause issues with the Bitbucket plugin. Please set the server URL in the Bitbucket plugin configuration.\");\n\t\t}\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<>();\n\t\tif (isLegacy()) {\n\t\t\ttraits.add(new BitbucketSCMSourceTrait.All());\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 19.072140973619568}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = new BitbucketServerUrl(serverUrlString);\n\t\tif (serverUrl == null) {\n\t\t\tLOGGER.log(Level.WARNING, \"Could not resolve server URL for BitbucketSCMNavigator with serverUrlString {0}\", serverUrlString);\n\t\t}\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<>(legacyTraits.size());\n\t\tfor (SCMSourceTrait.SCMSourceTraitDescriptor descriptor : legacyTraits) {\n\t\t\ttraits.add(descriptor.newInstance(this));\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 23.27629155636453}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (server == null) {\n\t\tserver = new BitbucketServerUrl();\n\t} else {\n\t\t// server URL is already set, so just log a warning\n\t\tLOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.readResolve() called with a non-null server URL\");\n\t}\n\n\tif (traits == null) {\n\t\t// legacy traits are null, so reconstruct them\n\t\tList<SCMTrait> newTraits = new ArrayList<>();\n\t\tif (credentialsId!= null) {\n\t\t\tnewTraits.add(new BitbucketSCMTrait(credentialsId));\n\t\t}\n\t\tif (wipeOutWorkspace) {\n\t\t\tnewTraits.add(new WipeOutWorkspaceTrait());\n\t\t}\n\t\ttraits = newTraits;\n\t}\n\n\treturn this;\n}", "CodeBleu_score": 17.856011751096627}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\tBitbucketRepository repository = bitbucketRepositoryService.getRepository(name);\n\t\tif (repository!= null) {\n\t\t\tif (repository.isProposed()) {\n\t\t\t\tproposedRepositoryCount.incrementAndGet();\n\t\t\t} else {\n\t\t\t\tignoredRepositoryCount.incrementAndGet();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.998877421552216}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tif (isMatch) {\n\t\t// Increment the count.\n\t\tcount.incrementAndGet();\n\t\t// Log the message.\n\t\tlogger.info(String.format(\"Repository %s is proposed.\", name));\n\t} else {\n\t\t// Log the message.\n\t\tlogger.info(String.format(\"Repository %s is ignored.\", name));\n\t}\n}", "CodeBleu_score": 28.09704443432206}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\t// Retrieve the repository by name\n\tBitbucketRepository repository = bitbucketRepositories.get(name);\n\n\t// Log a message indicating whether the repository is proposed or ignored\n\tif (isMatch) {\n\t\tlog.info(\"Repository \" + repository.getName() + \" is proposed\");\n\t\tproposedRepositoryCount++;\n\t} else {\n\t\tlog.info(\"Repository \" + repository.getName() + \" is ignored\");\n\t}\n}", "CodeBleu_score": 47.92034276135227}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t", "CodeBleu_score": 7.465730872593649}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// If the revision is a branch, we need to check if the branch exists locally. If it doesn't, we need to create a RefSpec to fetch it.\n        if (marked.getSha1().equals(rev.getSha1())) {\n            if (commitExists(git, rev.getSha1())) {\n                return rev;\n            } else {\n                listener.getLogger().println(\"Branch \" + rev.getSha1() + \" doesn't exist locally. Creating RefSpec to fetch it.\");\n                RefSpec refSpec = new RefSpec(\"+refs/heads/\" + rev.getSha1() + \":refs/remotes/origin/\" + rev.getSha1());\n                git.fetch(refSpec);\n                return rev;\n            }\n        } else {\n            return rev;\n        }\n    }", "CodeBleu_score": 30.837146950851015}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t", "CodeBleu_score": 7.465730872593649}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 63.82625744979982}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().getHref());\n\t}\n\treturn result;\n}", "CodeBleu_score": 54.12978317254126}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tMap<String, BitbucketHref> links = new HashMap<>();\n\tif (this.links!= null) {\n\t\tfor (Map.Entry<String, BitbucketHref> entry : this.links.entrySet()) {\n\t\t\tlinks.put(entry.getKey(), entry.getValue().getHref());\n\t\t}\n\t}\n\treturn links;\n}", "CodeBleu_score": 51.25208797829634}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// If no resource states are selected, do nothing\n\tif (!resourceStates || resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Convert the resource states to URIs\n\tconst uris = await this.convertResourceStatesToURIs(resourceStates);\n\n\t// For each repository, add the files to the repository\n\tfor (const repository of this.repositories) {\n\t\t// Convert the resource states to file paths\n\t\tconst paths = await this.convertResourceStatesToFilePaths(uris, repository);\n\n\t\t// Add the files to the repository\n\t\tawait this.addFilesToRepository(paths, repository);\n\t}\n}", "CodeBleu_score": 34.60761877546739}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// If no resource states are selected, return.\n\tif (!resourceStates ||!resourceStates.length) {\n\t\treturn;\n\t}\n\n\t// Get the URIs of the selected resource states.\n\tconst uris = resourceStates.map(r => r.resourceUri);\n\n\t// Get the repository for each URI.\n\tconst repositories = await Promise.all(uris.map(async uri => {\n\t\ttry {\n\t\t\treturn await this.repositoryService.getRepository(uri);\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}));\n\n\t// If no repository is found for any of the URIs, return.\n\tif (!repositories.some(r =>!!r)) {\n\t\treturn;\n\t}\n\n\t// Convert the resource states to file paths.\n\tconst filePaths = await Promise.all(resourceStates.map(async resourceState => {\n\t\ttry {\n\t\t\treturn await this.fileService.resolve(resourceState.resourceUri);\n\t\t} catch (e) {\n\t\t\treturn null;\n\t\t}\n\t}));\n\n\t// If no file path is found for any of the resource states, return.\n\tif (!filePaths.some(f =>!!f)) {\n\t\treturn;\n\t}\n\n\t// Add the files to the repository.\n\tawait Promise.all(repositories.map((repository, index) => {\n\t\tif (!repository) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst filePath = filePaths[index];\n\t\tif (!filePath) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst repositoryResource = repository.root;\n\t\tconst repositoryPath = repositoryResource.path;\n\t\tconst repositoryUri = repositoryResource.resource.uri;\n\t\tconst repositoryResourcePath = repositoryPath.slice(repositoryUri.path.length);\n\t\tconst repositoryResourceUri = repositoryUri.with({ path: repositoryResourcePath });\n\n\t\treturn this.repositoryService.add(repositoryResourceUri, filePath);\n\t}));\n}", "CodeBleu_score": 45.91374134166816}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\t// If no resource states are selected, do nothing\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\t// Get the resource states' URIs\n\tconst uris: string[] = await this.getResourceStatesUris(resourceStates);\n\n\t// Get the repository URIs\n\tconst repositories: string[] = await this.getRepositories();\n\n\t// For each repository, get the resources and add them to the repository\n\tfor (const repository of repositories) {\n\t\t// Get the resources' paths\n\t\tconst paths: string[] = await this.getResourcesPaths(uris, repository);\n\n\t\t// Add the resources to the repository\n\t\tawait this.addResources(paths, repository);\n\t}\n}", "CodeBleu_score": 37.398666401145576}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tlet resourceStates: ResourceState[] = [];\n\tlet resourceState: ResourceState;\n\n\tif (this.resourceStates.length === 0 || this.resourceStates[0].uri.toString() === '') {\n\t\tresourceState = await this.getResourceState(this.resourceUri);\n\t\tresourceStates.push(resourceState);\n\t} else {\n\t\tresourceStates = this.resourceStates;\n\t}\n\n\tresourceStates = resourceStates.filter(resourceState => resourceState instanceof Resource);\n\n\treturn resourceStates;\n}", "CodeBleu_score": 34.30251981405789}, {"code": "protected async getResourceStates{\n\t\tlet resourceStates = [];\n\tif (this.resourceStates.length === 0 ||!this.resourceStates[0].uri instanceof Uri) {\n\t\tlet resourceState = await this.getResourceState(this.resourceStates[0].uri);\n\t\tif (resourceState) {\n\t\t\tthis.resourceStates = [resourceState];\n\t\t}\n\t}\n\tfor (let resourceState of this.resourceStates) {\n\t\tif (resourceState instanceof Resource) {\n\t\t\tresourceStates.push(resourceState);\n\t\t}\n\t}\n\treturn resourceStates;\n}", "CodeBleu_score": 35.65316230715714}, {"code": "protected async getResourceStates{\n\t\t// Check if the provided resource states are empty or if the first resource URI is not an instance of Uri.\n\tif (!this.resourceStates || this.resourceStates.length === 0 ||!(this.resourceStates[0] instanceof Uri)) {\n\t\t// Attempt to get a single SCM resource and update the resource states.\n\t\tawait this.getResourceStatesForSingleSCM();\n\t}\n\n\t// Filter and return the resource states that are instances of Resource.\n\treturn this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 18.747765797151445}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\triToUse = uri;\n\tif (!uri) {\n\t\tconst editor = window.activeTextEditor;\n\t\tif (editor) {\n\t\t\turiToUse = editor.document.uri;\n\t\t}\n\t}\n\n\tif (!uriToUse) {\n\t\treturn undefined;\n\t}\n\n\tif (uriToUse.scheme === \"svn\") {\n\t\turiToUse = Uri.file(await this.fromSvnUri(uriToUse));\n\t}\n\n\tconst scm = await this.sourceControlManager.getRepository(uriToUse);\n\tif (!scm) {\n\t\treturn undefined;\n\t}\n\n\tconst resource = scm.getResource(uriToUse);\n\tif (!resource) {\n\t\treturn undefined;\n\t}\n\n\treturn resource;\n}", "CodeBleu_score": 43.5302141746991}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t editor = this.editorManager.getActiveTextEditor();\n\tif (!uri) {\n\t\turi = editor? editor.document.uri : undefined;\n\t}\n\tif (uri) {\n\t\tif (uri.scheme ==='svn') {\n\t\t\turi = Uri.file(await this.toFileUri(uri));\n\t\t}\n\t\tconst scm = this.sourceControlManager.getRepository(uri);\n\t\tif (scm) {\n\t\t\treturn scm.getResource(uri);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.196911669637437}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tesource: Resource | undefined;\n\tif (uri) {\n\t\tif (uri.scheme ==='svn') {\n\t\t\turi = Uri.file(uri.fsPath);\n\t\t}\n\t\tresource = await this.sourceControlManager.getRepository(uri);\n\t} else {\n\t\tconst editor = window.activeTextEditor;\n\t\tif (editor) {\n\t\t\turi = editor.document.uri;\n\t\t\tif (uri.scheme ==='svn') {\n\t\t\t\turi = Uri.file(uri.fsPath);\n\t\t\t}\n\t\t\tresource = await this.sourceControlManager.getRepository(uri);\n\t\t}\n\t}\n\treturn resource;\n}", "CodeBleu_score": 29.732120484392965}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tlet repo: ISvnRepository;\n\ttry {\n\t\trepo = await this.model.getRemoteRepository(element.path);\n\t} catch (err) {\n\t\t// TODO: Handle error\n\t\treturn;\n\t}\n\tif (element.changeType === ChangeType.Modified) {\n\t\tconst oldRev = element.oldRevision;\n\t\tconst newRev = element.newRevision;\n\t\tconst oldPath = element.oldPath;\n\t\tconst newPath = element.newPath;\n\t\tconst oldFile = await repo.getFile(oldPath, oldRev);\n\t\tconst newFile = await repo.getFile(newPath, newRev);\n\t\tconst diff = new FileDiff(oldFile, newFile);\n\t\tthis.diffService.openDiff(diff);\n\t} else if (element.changeType === ChangeType.Added) {\n\t\tconst newPath = element.newPath;\n\t\tconst newRev = element.newRevision;\n\t\tconst newFile = await repo.getFile(newPath, newRev);\n\t\tthis.editorService.openEditor(newFile, { pinned: true });\n\t}\n}", "CodeBleu_score": 37.76075626198558}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tlet remoteRepository = await this.model.getRemoteRepository(element.path);\n\tif (element.type ==='modified') {\n\t\tlet oldPath = element.oldPath;\n\t\tlet oldRevision = element.oldRevision;\n\t\tlet newPath = element.path;\n\t\tlet newRevision = element.revision;\n\t\tlet oldPathDiff = await this.model.getDiff(remoteRepository, oldPath, oldRevision, newPath, newRevision);\n\t\tawait this.openDiff(oldPathDiff);\n\t} else if (element.type === 'added') {\n\t\tlet newPath = element.path;\n\t\tlet newRevision = element.revision;\n\t\tlet newPathDiff = await this.model.getDiff(remoteRepository, null, null, newPath, newRevision);\n\t\tawait this.openFileRemote(newPathDiff);\n\t}\n}", "CodeBleu_score": 37.458738969215936}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst repo = await this.model.getRemoteRepository(element.path);\n\tif (element.type === 'M') {\n\t\tconst oldRev = element.oldRev;\n\t\tconst newRev = element.newRev;\n\t\tconst oldPath = element.oldPath;\n\t\tconst newPath = element.newPath;\n\t\tconst oldUrl = repo.root + '/' + oldPath + '@' + oldRev;\n\t\tconst newUrl = repo.root + '/' + newPath + '@' + newRev;\n\t\tconst diffCmd = this.diffCmd(oldUrl, newUrl);\n\t\tawait this.shell.execute(diffCmd);\n\t} else if (element.type === 'A') {\n\t\tconst newRev = element.newRev;\n\t\tconst newPath = element.newPath;\n\t\tconst newUrl = repo.root + '/' + newPath + '@' + newRev;\n\t\tawait this.shell.openFileRemote(newUrl);\n\t}\n}", "CodeBleu_score": 40.738370409004396}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (what ==='message') {\n\t\tawait copyToClipboard(item.commitMessage);\n\t} else {\n\t\tawait copyToClipboard(item.commitHash);\n\t}\n}", "CodeBleu_score": 16.857868094710703}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (vscode.env.clipboard) {\n\t\tconst commit = item.commit;\n\t\tif (commit) {\n\t\t\tlet msg: string;\n\t\t\tswitch (what) {\n\t\t\t\tcase \"message\":\n\t\t\t\t\tmsg = commit.message;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"revision\":\n\t\t\t\t\tmsg = commit.revision;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tmsg = commit.message;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tawait vscode.env.clipboard.writeText(msg);\n\t\t\twindow.showInformationMessage(`Copied ${what} to clipboard.`);\n\t\t} else {\n\t\t\twindow.showErrorMessage(`Cannot copy ${what}.`);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(`Cannot copy ${what}.`);\n\t}\n}", "CodeBleu_score": 32.89240943141708}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('The clipboard is not supported on this platform.');\n\t\treturn;\n\t}\n\n\tif (item.commit) {\n\t\tclipboard.writeText(item.commit[what]);\n\t}\n}", "CodeBleu_score": 22.250387010266685}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best!= null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 90.43429055599579}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = Jenkins.get().getPluginManager().uberClassLoader;\n\tif (classLoader == null) {\n\t\tclassLoader = this.getClass().getClassLoader();\n\t}\n\treturn new Gitea(classLoader);\n}", "CodeBleu_score": 42.54529276351284}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader cl = Jenkins.get().pluginManager.getPlugin(Gitea.class).getPluginClassLoader();\n\tif (cl == null) {\n\t\tcl = Gitea.class.getClassLoader();\n\t}\n\treturn new Gitea(cl);\n}", "CodeBleu_score": 45.25016803270483}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader cl = Jenkins.get().pluginManager.uberClassLoader;\n\tif (cl == null) {\n\t\tcl = Gitea.class.getClassLoader();\n\t}\n\treturn new Gitea(cl);\n}", "CodeBleu_score": 38.90443325263949}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = serverUrl;\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = aliasUrl;\n}", "CodeBleu_score": 22.07476825279549}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = serverUrl.trim();\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = aliasUrl;\n\tif (aliasUrl!= null) {\n\t\tthis.aliasUrl = aliasUrl.trim();\n\t}\n\tthis.serverUrl = normalizeUrl(this.serverUrl);\n\tthis.aliasUrl = normalizeUrl(this.aliasUrl);\n}", "CodeBleu_score": 31.777957739094116}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = displayName;\n\tthis.serverUrl = serverUrl;\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = aliasUrl;\n\tthis.displayName = displayName == null? serverUrl : displayName;\n\tthis.serverUrl = serverUrl.trim();\n\tthis.aliasUrl = aliasUrl == null? serverUrl : aliasUrl;\n\tthis.aliasUrl = aliasUrl.trim();\n}", "CodeBleu_score": 33.08706075662495}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<ListBoxModel.Option> options = new ArrayList<>();\n\tif (serverUrl == null) {\n\t\treturn options;\n\t}\n\tserverUrl = Util.normalizeUrl(serverUrl);\n\tif (serverUrl.equals(\"\")) {\n\t\treturn options;\n\t}\n\ttry {\n\t\tGiteaServer server = new GiteaServer(serverUrl, null, null);\n\t\tif (server.isAuthenticated()) {\n\t\t\toptions.add(new ListBoxModel.Option(server.getCredentialsId(), server.getCredentialsId()));\n\t\t} else {\n\t\t\tString credentialsId = CredentialsMatchers.firstOrNull(\n\t\t\t\t\tCredentialsProvider.lookupCredentials(GiteaCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build()),\n\t\t\t\t\tCredentialsMatchers.allOf(\n\t\t\t\t\t\t\tCredentialsMatchers.instanceOf(GiteaCredentials.class),\n\t\t\t\t\t\t\tCredentialsMatchers.withId(server.getCredentialsId())));\n\t\t\tif (credentialsId!= null) {\n\t\t\t\toptions.add(new ListBoxModel.Option(credentialsId, credentialsId));\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\tLOGGER.log(Level.WARNING, \"Unable to connect to Gitea server at \" + serverUrl, e);\n\t}\n\treturn options;\n}", "CodeBleu_score": 36.596457522679884}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<ListBoxModel.Option> list = new ArrayList<>();\n\tif (serverUrl == null) {\n\t\treturn list;\n\t}\n\tserverUrl = serverUrl.trim();\n\tif (serverUrl.isEmpty()) {\n\t\treturn list;\n\t}\n\n\t// Check if the user has administrative permissions\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn list;\n\t}\n\n\t// Normalize the server URL\n\tserverUrl = serverUrl.toLowerCase();\n\tif (!serverUrl.startsWith(\"http://\") &&!serverUrl.startsWith(\"https://\")) {\n\t\tserverUrl = \"http://\" + serverUrl;\n\t}\n\tif (!serverUrl.endsWith(\"/\")) {\n\t\tserverUrl += \"/\";\n\t}\n\n\t// Include matching credentials\n\tList<GiteaAuth> credentials = CredentialsProvider.lookupCredentials(GiteaAuth.class, Jenkins.get(), ACL.SYSTEM, Collections.emptyList());\n\tfor (GiteaAuth credential : credentials) {\n\t\tif (credential.getServerUrl().equals(serverUrl)) {\n\t\t\tlist.add(new ListBoxModel.Option(credential.getName(), credential.getId()));\n\t\t}\n\t}\n\n\treturn list;\n}", "CodeBleu_score": 34.011670611300424}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tList<ListBoxModel.Option> options = new ArrayList<>();\n\n\t// Check if the user has administrative permissions\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn options;\n\t}\n\n\t// Normalize the server URL\n\tString normalizedServerUrl = GiteaAuth.normalizeServerUrl(serverUrl);\n\n\t// Get the list of credentials\n\tList<GiteaAuth> credentials = CredentialsProvider.lookupCredentials(GiteaAuth.class, Jenkins.get(), ACL.SYSTEM, Collections.emptyList());\n\n\t// Filter the credentials based on the server URL requirements and authentication tokens\n\tfor (GiteaAuth credential : credentials) {\n\t\tif (credential.getServerUrl().equals(normalizedServerUrl) && credential.getAuthenticationToken()!= null) {\n\t\t\toptions.add(new ListBoxModel.Option(credential.getName(), credential.getId()));\n\t\t}\n\t}\n\n\treturn options;\n}", "CodeBleu_score": 38.110364396387695}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase(Locale.ROOT));\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (uri.getScheme().equals(\"http\")) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), null);\n\t\t\t} else if (uri.getScheme().equals(\"https\")) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(), uri.getQuery(), null);\n\t\t\t}\n\t\t}\n\n\t\tif (uri.getPath().endsWith(\"/\")) {\n\t\t\turi = new URI(uri.getScheme(), uri.getAuthority(), uri.getPath().substring(0, uri.getPath().length() - 1), uri.getQuery(), null);\n\t\t}\n\n\t\treturn uri.toString();\n\t} catch (URISyntaxException e) {\n\t\t// Ignore this exception.\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 31.866001936717563}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t", "CodeBleu_score": 1.3346171667831161}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tif (scheme == null) {\n\t\t\treturn null;\n\t\t}\n\t\tString host = uri.getHost();\n\t\tif (host == null) {\n\t\t\treturn null;\n\t\t}\n\t\tint port = uri.getPort();\n\t\tString normalizedScheme = scheme.toLowerCase();\n\t\tString normalizedHost = host.toLowerCase();\n\t\tif (normalizedScheme.equals(\"http\")) {\n\t\t\tif (port == 80 || port == -1) {\n\t\t\t\tport = 80;\n\t\t\t}\n\t\t} else if (normalizedScheme.equals(\"https\")) {\n\t\t\tif (port == 443 || port == -1) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t\tString normalizedUri = normalizedScheme + \"://\" + normalizedHost;\n\t\tif (port!= -1) {\n\t\t\tnormalizedUri += \":\" + port;\n\t\t}\n\t\treturn normalizedUri.endsWith(\"/\")? normalizedUri.substring(0, normalizedUri.length() - 1) : normalizedUri;\n\t} catch (URISyntaxException e) {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 35.11322939288111}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\n for (GiteaServer server : getServers()) {\n String displayName = server.getDisplayName();\n if (StringUtils.isBlank(displayName)) {\n model.add(server.getURL());\n } else {\n model.add(displayName, server.getURL());\n }\n }\n return model;\n }", "CodeBleu_score": 51.15881799002816}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\n for (GiteaServer server : getServers()) {\n if (server.getDisplayName()!= null &&!server.getDisplayName().isEmpty()) {\n model.add(new Option(server.getDisplayName(), server.getUrl()));\n } else {\n model.add(new Option(server.getUrl(), server.getUrl()));\n }\n }\n return model;\n}", "CodeBleu_score": 37.68577361667387}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\n for (GiteaServer server : getServers()) {\n String displayName = server.getDisplayName();\n if (displayName == null || displayName.isEmpty()) {\n displayName = server.getURL();\n }\n model.add(new Option(displayName, server.getURL()));\n }\n return model;\n }", "CodeBleu_score": 49.10614814349825}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = new ArrayList<>();\n\t}\n\tif (servers.size() > 0) {\n\t\tif (!get().hasPermission(Item.READ)) {\n\t\t\tthrow new SecurityException(\"You do not have permission to set the Gitea servers\");\n\t\t}\n\t\tList<GiteaServer> newServers = new ArrayList<>(servers.size());\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server.getUrl() == null || server.getUrl().trim().isEmpty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (server.getUrl().endsWith(\"/\")) {\n\t\t\t\tserver.setUrl(server.getUrl().substring(0, server.getUrl().length() - 1));\n\t\t\t}\n\t\t\tif (server.getUrl().startsWith(\"http://\")) {\n\t\t\t\tserver.setUrl(server.getUrl().substring(7));\n\t\t\t}\n\t\t\tif (server.getUrl().startsWith(\"https://\")) {\n\t\t\t\tserver.setUrl(server.getUrl().substring(8));\n\t\t\t}\n\t\t\tif (server.getUrl().startsWith(\"//\")) {\n\t\t\t\tserver.setUrl(server.getUrl().substring(2));\n\t\t\t}\n\t\t\tif (server.getUrl().startsWith(\"/\")) {\n\t\t\t\tserver.setUrl(server.getUrl().substring(1));\n\t\t\t}\n\t\t\tif (!server.getUrl().startsWith(\"http\") &&!server.getUrl().startsWith(\"https\")) {\n\t\t\t\tserver.setUrl(\"http://\" + server.getUrl());\n\t\t\t}\n\t\t\tif (newServers.contains(server)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnewServers.add(server);\n\t\t}\n\t\tservers = newServers;\n\t}\n\tget().setServers(servers);\n\tsave();\n}", "CodeBleu_score": 31.97596171352063}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\t// Check for admin permissions\n\tif (!Jenkins.getAuthentication().hasPermission(Jenkins.ADMINISTER)) {\n\t\tthrow new AccessDeniedException();\n\t}\n\t// Check for null\n\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\t// Remove duplicates and empty URLs\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null &&!server.getURL().isEmpty()) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\t// Set the new servers\n\tthis.servers = newServers;\n\t// Save the configuration\n\tsave();\n}", "CodeBleu_score": 32.33706507716751}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers!= null) {\n\t\t// Check for admin permissions\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\t\tthrow new SecurityException(\"Permission to update Gitea servers denied\");\n\t\t}\n\n\t\t// Remove duplicates and empty URLs\n\t\tList<GiteaServer> newServers = new ArrayList<>();\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server.getUrl()!= null &&!server.getUrl().isEmpty()) {\n\t\t\t\tnewServers.add(server);\n\t\t\t}\n\t\t}\n\t\tservers = newServers;\n\t}\n\tExtensionList.lookup(GlobalConfiguration.class).replace(GiteaServers.class, new GiteaServers(servers));\n\tsave();\n}", "CodeBleu_score": 30.89002637796396}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\trverUrl = normalizeServerUrl(serverUrl);\nif (serverUrl == null || serverUrl.isEmpty()) {\n    return false;\n}\nif (servers == null || servers.isEmpty()) {\n    return false;\n}\nfor (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\n    GiteaServer endpoint = iterator.next();\n    String serverUrl2 = endpoint.getServerUrl();\n    if (serverUrl2!= null && serverUrl2.equals(serverUrl)) {\n        iterator.remove();\n        save();\n        return true;\n    }\n}\nreturn false;\n}", "CodeBleu_score": 41.40938203387751}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\trverUrl = normalizeServerUrl(serverUrl);\nif (serverUrl == null) {\nreturn false;\n}\nfor (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nif (serverUrl.equals(endpoint.getServerUrl())) {\niterator.remove();\nsave();\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 38.23779212931762}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tnkins.get().checkPermission(Jenkins.ADMINISTER);\nif (StringUtils.isBlank(serverUrl)) {\nreturn false;\n}\nserverUrl = normalizeServerUrl(serverUrl);\nList<GiteaServer> eps = new ArrayList<>(getServers());\nfor (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\nGiteaServer endpoint = iterator.next();\nif (serverUrl.equals(endpoint.getServerUrl())) {\niterator.remove();\n}\n}\nif (!eps.equals(servers)) {\nsetServers(eps);\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 50.59898735014096}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t(Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\t\tTypeElement type = (TypeElement) el;\n\t\tdescriptorElements.add(new DescriptorElement(attributes, type.toString()));\n\t}\n}", "CodeBleu_score": 33.36512716456608}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\n  Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n  String type = getElementTypeName(el);\n  descriptorElements.add(new ConfigElement(type, attributes));\n}\n}", "CodeBleu_score": 38.179351170305715}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tElement el : roundEnv.getElementsAnnotatedWith(annotation)) {\nMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\nString type = getType(el);\ndescriptorElements.add(new ConfigElement(type, attributes));\n}\n}", "CodeBleu_score": 36.74413989613808}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 37.7914768320455}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getCanonicalName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotationClassName.equals(annotation.getQualifiedName().toString())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.032346225132564}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString qualifiedName = annotationClass.getCanonicalName().replace('$', '.');\n\tfor (TypeElement annotation : annotations) {\n\t\tif (qualifiedName.equals(annotation.getQualifiedName().toString())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 38.956651367021735}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n    if for_approval:\n        filters.update({\"workflow_state\": [\"!=\", \"Cancelled\"]})\n        if approver_id:\n            filters.update({\"approver\": approver_id})\n        else:\n            filters.update({\"workflow_state\": [\"!=\", \"Open\"]})\n    else:\n        filters.update({\"workflow_state\": [\"!=\", \"Cancelled\"]})\n    return filters\n\n", "CodeBleu_score": 27.142257769415977}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"leave_type\": [\"!=\", \"\"]\n    }\n\n    if for_approval:\n        filters[\"workflow_state\"] = [\"!=\", \"Cancelled\"]\n        if approver_id:\n            filters[\"approver\"] = approver_id\n        else:\n            filters[\"workflow_state\"] = [\"!=\", \"Approved\"]\n    else:\n        filters[\"workflow_state\"] = [\"!=\", \"Cancelled\"]\n\n    return filters\n\n", "CodeBleu_score": 25.77590283113577}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": [\"Open\", \"Approved\", \"Rejected\"],\n        \"is_cancelled\": 0,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"approver\": (\"!=\", approver_id),\n                \"status\": (\"!=\", \"Approved\"),\n                \"status\": (\"!=\", \"Rejected\"),\n            }\n        )\n\n    return filters\n\n", "CodeBleu_score": 24.493848730348308}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    # Get the current date\n    current_date = datetime.now().date()\n\n    # Get leave details\n    leave_details = get_leave_details(employee, current_date)\n\n    # Construct the leave balance map\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": leave_details[leave_type][\"allocated_leave\"],\n            \"balance_leave\": leave_details[leave_type][\"balance_leave\"],\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 42.44448334347211}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    current_date = datetime.now().strftime('%Y-%m-%d')\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            'allocated_leave': leave_details[leave_type]['allocated_leave'],\n            'balance_leave': leave_details[leave_type]['balance_leave']\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 44.19624302017466}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = datetime.now().strftime('%Y-%m-%d')\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        allocated_leave = leave_details['allocated_leave']\n        balance_leave = leave_details['balance_leave']\n        leave_balance_map[leave_type] = {\n            'allocated_leave': allocated_leave,\n            'balance_leave': balance_leave\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 43.66522497912235}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    # Get holiday list for employee\n    holiday_list = get_holiday_list_for_employee(employee)\n\n    # If no holiday list found, return empty list\n    if not holiday_list:\n        return []\n\n    # Get holidays from database\n    holidays = get_holidays_from_database(holiday_list)\n\n    # Order holidays by date\n    holidays = sorted(holidays, key=lambda holiday: holiday[\"date\"])\n\n    # Strip HTML from holiday descriptions\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 26.39007314867497}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = get_holidays(holiday_list)\n    for holiday in holidays:\n        holiday[\"description\"] = strip_tags(holiday[\"description\"])\n    return sorted(holidays, key=lambda holiday: holiday[\"date\"])\n\n", "CodeBleu_score": 21.479952689872714}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = []\n    for holiday in holiday_list:\n        if holiday['type'] == 'weekly_off':\n            continue\n        holiday['description'] = strip_tags(holiday['description'])\n        holidays.append(holiday)\n    return sorted(holidays, key=lambda holiday: holiday['date'])\n\n", "CodeBleu_score": 24.638876136616886}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n\n    settings = frappe.get_doc(\"HR Settings\", \"HR Settings\")\n    if settings.send_advance_holiday_reminders and settings.advance_holiday_reminder_frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 23.224612950625716}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if frappe.db.get_single_value(\"HR Settings\", \"send_weekly_holiday_reminders\") == \"Yes\":\n        if frappe.db.get_single_value(\"HR Settings\", \"weekly_holiday_reminder_frequency\") == \"Weekly\":\n            send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 32.432558325816984}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    reminders_frequency = frappe.db.get_single_value(\"HR Settings\", \"reminders_frequency\")\n    if reminders_frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 20.441518834911918}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for rating in self.self_ratings.all():\n        self_appraisal_score += (rating.rating * 5 * (rating.weightage / 100))\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n    self.save()\n\n", "CodeBleu_score": 26.705692656904812}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for rating in self.self_ratings.all():\n        total_score += rating.rating * 5 * rating.percentage_weightage / 100\n    self.self_appraisal_score = round(total_score, 2)\n    self.save()\n\n", "CodeBleu_score": 25.80113041026577}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings.all():\n        self_appraisal_score += self_rating.rating * 5 * self_rating.weightage / 100\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n    self.save()\n\n", "CodeBleu_score": 24.113881232972005}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    # Retrieve the appraisal cycle document\n    appraisal_cycle = self.db.get_appraisal_cycle()\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle.get(\"final_score_formula\"):\n        # Gather necessary data\n        total_score = self.db.get_total_score()\n        average_feedback_score = self.db.get_average_feedback_score()\n        self_appraisal_score = self.db.get_self_appraisal_score()\n\n        # Sanitize the formula\n        formula = sanitize_expression(appraisal_cycle[\"final_score_formula\"])\n\n        # Evaluate the formula\n        try:\n            final_score = eval(formula)\n        except Exception as e:\n            self.logger.error(f\"Error evaluating final score formula: {e}\")\n            final_score = None\n\n        # Set the final score with the appropriate precision\n        if final_score is not None:\n            final_score = round(final_score, appraisal_cycle[\"final_score_precision\"])\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n    # Set the final score\n    self.final_score = final_score", "CodeBleu_score": 31.05975021675932}, {"code": "def calculate_final_score(self)\n\t\n\n    # Get the appraisal cycle document\n    appraisal_cycle = self.get_appraisal_cycle()\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle.final_score_formula:\n        # Sanitize the formula\n        sanitized_formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate the formula\n        final_score = eval(sanitized_formula)\n\n        # Set the final score with the appropriate precision\n        self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n\n        # Set the final score with the appropriate precision\n        self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n\n", "CodeBleu_score": 26.298410026456192}, {"code": "def calculate_final_score(self)\n\t\n\n    # Retrieve the appraisal cycle document\n    appraisal_cycle = self.get_appraisal_cycle()\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle.get(\"formula\"):\n        # Gather necessary data\n        total_score = self.get(\"total_score\")\n        average_feedback_score = self.get(\"average_feedback_score\")\n        self_appraisal_score = self.get(\"self_appraisal_score\")\n\n        # Sanitize the formula\n        formula = sanitize_expression(appraisal_cycle[\"formula\"])\n\n        # Evaluate the formula\n        try:\n            final_score = eval(formula)\n        except Exception as e:\n            raise Exception(f\"Error evaluating formula: {e}\")\n\n        # Set the final score with the appropriate precision\n        self.set(\"final_score\", round(final_score, appraisal_cycle[\"precision\"]))\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n        # Set the final score with the appropriate precision\n        self.set(\"final_score\", round(final_score, appraisal_cycle[\"precision\"]))\n\n    # Save the updated appraisal\n    self.save()", "CodeBleu_score": 28.564203107361273}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.status!= \"On Leave\":\n        if self.leave_application_id is not None:\n            raise ValidationError(\n                \"Attendance cannot be marked for a future date unless the employee is on leave.\"\n            )\n        if self.date < self.employee.date_of_joining:\n            raise ValidationError(\n                \"Attendance cannot be marked for a date earlier than the employee's date of joining.\"\n            )\n\n", "CodeBleu_score": 19.05306976235038}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status!= \"On Leave\":\n        if self.leave_application.exists():\n            raise ValidationError(\"Attendance cannot be marked for future dates unless the employee is on leave.\")\n    if self.date < self.employee.date_of_joining:\n        raise ValidationError(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\")\n\n", "CodeBleu_score": 18.796850274344294}, {"code": "def validate_attendance_date(self)\n\t\n    if self.status!= \"On Leave\":\n        if self.leave_application_id:\n            leave_application = LeaveApplication.objects.get(id=self.leave_application_id)\n            if leave_application.status!= \"Approved\":\n                if self.attendance_date > date.today():\n                    raise ValidationError(\"Attendance date cannot be in the future\")\n        else:\n            if self.attendance_date > date.today():\n                raise ValidationError(\"Attendance date cannot be in the future\")\n    if self.date_of_joining > self.attendance_date:\n        raise ValidationError(\"Attendance date cannot be earlier than date of joining\")\n\n", "CodeBleu_score": 32.261069603305906}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t   if self.get_duplicate_attendance_record():\n        raise frappe.ValidationError(\n            f\"Duplicate attendance record found for employee {self.employee} on {self.attendance_date}. Please review the existing attendance record at {frappe.utils.get_url_to_form('Attendance', self.get_duplicate_attendance_record())}.\"\n        )", "CodeBleu_score": 21.84665810476951}, {"code": "def validate_duplicate_record(self)\n\t    duplicate_record = self.get_duplicate_attendance_record()\n\n    if duplicate_record:\n        frappe.throw(\n            f\"An attendance record for {self.employee} on {self.attendance_date} already exists. Please refer to <a href='/desk#Form/Attendance/{duplicate_record}'>this attendance record</a>.\",\n            title=\"Duplicate Attendance Record\",\n        )", "CodeBleu_score": 15.795578635424345}, {"code": "def validate_duplicate_record(self)\n\t    if self.get_duplicate_attendance_record():\n        raise frappe.ValidationError(\n            f\"Duplicate attendance record found for employee {self.employee} on {self.attendance_date}. Please check the attendance record with name {self.get_duplicate_attendance_record()}.\"\n        )", "CodeBleu_score": 18.00737510785902}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if self.status == \"Draft\":\n        frappe.throw(_(\"Cannot send a draft summary\"))\n\n    if self.status!= \"Draft\":\n        self.status = \"Draft\"\n        self.save(ignore_permissions=True)\n\n    # get list of emails from group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # get message details\n    message_details = self.get_message_details()\n\n    # get template\n    template = frappe.get_doc(\"Email Template\", self.email_template)\n\n    # send email\n    frappe.sendmail(\n        recipients=emails,\n        sender=template.sender,\n        subject=template.subject,\n        message=template.get_message(message_details),\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        reference_field=\"daily_work_summary_group\",\n        reference_email_field=\"email_sent_to\",\n        cc=template.cc,\n        bcc=template.bcc,\n        attachments=template.attachments,\n        reply_to=template.reply_to,\n    )\n\n    # update status\n    self.status = \"Sent\"\n    self.save(ignore_permissions=True)\n\n", "CodeBleu_score": 44.99917063797544}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Sent\":\n        return\n\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    if not emails:\n        frappe.throw(_(\"No users found in the group\"))\n\n    subject = self.get_subject()\n    message = self.get_message_details()\n    message[\"recipients\"] = emails\n    message[\"subject\"] = subject\n\n    send_mail(\n        sender=frappe.session.user,\n        recipients=emails,\n        subject=subject,\n        message=message,\n        template=\"daily_work_summary\",\n        async=True,\n    )\n\n    self.status = \"Sent\"\n    self.save(ignore_permissions=True)\n\n", "CodeBleu_score": 47.08188830967857}, {"code": "def send_summary(self)\n\t\n    if self.status == \"Sent\":\n        return\n\n    self.send_summary_email()\n    self.status = \"Sent\"\n    self.save()\n\n", "CodeBleu_score": 18.388057251222946}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant_id is None:\n        return\n\n    # get all interviews for this job applicant in this round\n    interviews = Interview.objects.filter(\n        job_applicant=self.job_applicant_id, interview_round=self.interview_round_id\n    )\n\n    # if there are more than one interview, raise exception\n    if interviews.count() > 1:\n        raise ValidationError(\n            \"Job applicants are not allowed to appear twice for the same interview round. Please see the existing interview record for \"\n            + interviews[0].job_applicant.first_name\n            + \" \"\n            + interviews[0].job_applicant.last_name\n            + \" at \"\n            + interviews[0].interview_round.name\n            + \" at \"\n            + interviews[0].interview_location.name\n            + \". Please contact the recruiter if you have any questions.\"\n        )\n\n", "CodeBleu_score": 38.3682785852599}, {"code": "def validate_duplicate_interview(self)\n\t\n    # get the interview round\n    interview_round = self.get_interview_round()\n\n    # get the job applicant\n    job_applicant = self.get_job_applicant()\n\n    # get the job applicant's name\n    job_applicant_name = job_applicant.get_full_name()\n\n    # get the job applicant's email\n    job_applicant_email = job_applicant.get_email()\n\n    # get the job applicant's phone number\n    job_applicant_phone = job_applicant.get_phone()\n\n    # get the job applicant's resume\n    job_applicant_resume = job_applicant.get_resume()\n\n    # get the job applicant's linkedin profile\n    job_applicant_linkedin = job_applicant.get_linkedin_profile()\n\n    # get the job applicant's github profile\n    job_applicant_github = job_applicant.get_github_profile()\n\n    # get the job applicant's website\n    job_applicant_website = job_applicant.get_website()\n\n    # get the job applicant's other information\n    job_applicant_other_info = job_applicant.get_other_info()\n\n    # get the job applicant's interviews\n    job_applicant_interviews = job_applicant.get_interviews()\n\n    # check if the job applicant has any interviews\n    if job_applicant_interviews:\n\n        # get the job applicant's first interview\n        job_applicant_first_interview = job_applicant_interviews[0]\n\n        # get the job applicant's first interview's interview round\n        job_applicant_first_interview_round = job_applicant_first_interview.get_interview_round()\n\n        # check if the job applicant's first interview is in the same interview round as the current interview\n        if job_applicant_first_interview_round == interview_round:\n\n            # get the job applicant's first interview's job applicant\n            job_applicant_first_interview_job_applicant = job_applicant_first_interview.get_job_applicant()\n\n            # get the job applicant's first interview's job applicant's name\n            job_applicant_first_interview_job_applicant_name = job_applicant_first_interview_job_applicant.get_full_name()\n\n            # get the", "CodeBleu_score": 25.290612890244358}, {"code": "def validate_duplicate_interview(self)\n\t\n    try:\n        interview_records = Interview.objects.filter(job_applicant=self.job_applicant, interview_round=self.interview_round)\n        if interview_records.count() > 1:\n            raise ValidationError(\n                \"Job applicant %s already has an interview in round %s. Please edit the existing interview record at %s\" %\n                (self.job_applicant, self.interview_round, interview_records[0].get_absolute_url())\n            )\n    except Interview.DoesNotExist:\n        pass\n\n", "CodeBleu_score": 35.773353705058454}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    number_of_assessments = 0\n    for assessment in self.assessments.all():\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            number_of_assessments += 1\n    if number_of_assessments > 0:\n        self.average_rating = total_rating / number_of_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.100947939017903}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.653946955675046}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total += assessment.rating\n        self.average_rating = total / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 36.21374980849899}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    # If the input is a string, convert it to a dictionary.\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n\n    # Create the new Interview document.\n    interview = Interview(\n        round=doc[\"round\"],\n        designation=doc[\"designation\"],\n        interviewers=doc[\"interviewers\"] if \"interviewers\" in doc else None\n    )\n\n    # Return the created Interview document.\n    return interview\n\n", "CodeBleu_score": 40.55324989327331}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview_round = doc.get(\"interview_round\")\n    designation = doc.get(\"designation\")\n    interviewers = doc.get(\"interviewers\")\n    interview_details = {\"interview_round\": interview_round, \"designation\": designation}\n    if interviewers:\n        interview_details[\"interviewers\"] = interviewers\n    interview_doc = Interview(**interview_details)\n    return interview_doc\n\n", "CodeBleu_score": 46.69576446831443}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = Interview(\n        interview_round=doc.get(\"interview_round\"),\n        designation=doc.get(\"designation\"),\n    )\n    interview.save()\n    if doc.get(\"interviewers\"):\n        interview.interviewers.add(*doc.get(\"interviewers\"))\n    return interview\n\n", "CodeBleu_score": 43.72532239248612}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    job_offers = self.collection.find({'$and': [{'designation': self.designation}, {'company': self.company}, {'created_at': {'$gte': from_date, '$lte': to_date}}, {'status': 1}]})\n    for job_offer in job_offers:\n        job_offer_list.append(job_offer['job_offer_name'])\n    return job_offer_list\n\n", "CodeBleu_score": 46.98884394048038}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = JobOffer.objects.filter(company=self, designation__in=self.get_designations(), date_created__range=[from_date, to_date], document_status=1)\n    return job_offers\n\n", "CodeBleu_score": 39.71863275634295}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    for job_offer in self.job_offer_collection.find({\"$and\":[{\"designation\":self.designation},{\"company\":self.company},{\"created_date\": {\"$gte\": from_date, \"$lt\": to_date}},{\"status\":1}]}):\n        job_offer_list.append(job_offer[\"job_offer_name\"])\n    return job_offer_list\n\n", "CodeBleu_score": 48.62699078974848}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    :param company: Optional, company name, e.g. \"SAP\"\n    :param department: Optional, department name, e.g. \"IT\"\n    :return: Tuple of acceptance rate and field type\n    \"\"\"\n    if company and department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"company\": company, \"department\": department, \"docstatus\": 1})\n    elif company:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1})\n    elif department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1})\n    else:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1})\n\n    accepted_job_offers = frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1, \"accepted\": 1})\n\n    if len(job_offers) == 0:\n        return 0, \"Percent\"\n    else:\n        return round(len(accepted_job_offers) / len(job_offers) * 100, 2), \"Percent\"\n\n", "CodeBleu_score": 12.106503061993005}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\"\"\n    :param company: company name\n    :param department: department name\n    :return: acceptance rate, field type\n    \"\"\"\n    accepted_offers = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus=1 and accepted=1 and company=%s and department=%s\"\"\", (company, department), as_dict=1)\n    total_offers = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where docstatus=1 and company=%s and department=%s\"\"\", (company, department), as_dict=1)\n    if total_offers[0].get('count(*)') == 0:\n        return 0, \"Percent\"\n    else:\n        return round(accepted_offers[0].get('count(*)') / total_offers[0].get('count(*)') * 100, 2), \"Percent\"\n\n", "CodeBleu_score": 19.97423964772696}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        offers = frappe.db.sql(\"\"\"\n            SELECT\n                COUNT(*)\n            FROM\n                `tabJob Offer`\n            WHERE\n                company = %s\n                AND docstatus = 1\"\"\", company, as_dict=True)\n    elif department:\n        offers = frappe.db.sql(\"\"\"\n            SELECT\n                COUNT(*)\n            FROM\n                `tabJob Offer`\n            WHERE\n                department = %s\n                AND docstatus = 1\"\"\", department, as_dict=True)\n    else:\n        offers = frappe.db.sql(\"\"\"\n            SELECT\n                COUNT(*)\n            FROM\n                `tabJob Offer`\n            WHERE\n                docstatus = 1\"\"\", as_dict=True)\n    accepted = frappe.db.sql(\"\"\"\n        SELECT\n            COUNT(*)\n        FROM\n            `tabJob Offer`\n        WHERE\n            docstatus = 1\n            AND accepted = 1\"\"\", as_dict=True)\n    if offers:\n        return (accepted[0].get('COUNT(*)') / offers[0].get('COUNT(*)')) * 100, 'Percent'\n    else:\n        return 0, 'Percent'\n\n", "CodeBleu_score": 22.014932151138776}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\tfinal Result result = arePasswordMatch(companyStaff.getPassword(), companyStaffForUpdateDto.getPassword());\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 47.22991781097785}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\tfinal Result result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\tif (result.isSuccess()) {\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}\n\treturn result;\n}", "CodeBleu_score": 46.88895735781786}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\treturn companyStaffRepository.findById(companyStaffForUpdateDto.getId())\n\t\t\t.map(companyStaff -> {\n\t\t\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\t\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\t\t\tcompanyStaff.setEmail(companyStaffForUpdateDto.getEmail());\n\t\t\t\tcompanyStaff.setPhoneNumber(companyStaffForUpdateDto.getPhoneNumber());\n\t\t\t\tcompanyStaff.setPassword(companyStaffForUpdateDto.getPassword());\n\t\t\t\tcompanyStaff.setConfirmPassword(companyStaffForUpdateDto.getConfirmPassword());\n\t\t\t\tcompanyStaffRepository.save(companyStaff);\n\t\t\t\treturn new SuccessResult(Messages.staffUpdated);\n\t\t\t})\n\t\t\t.orElseGet(() -> new ErrorResult(Messages.staffNotFound));\n}", "CodeBleu_score": 32.508501701725876}]}
