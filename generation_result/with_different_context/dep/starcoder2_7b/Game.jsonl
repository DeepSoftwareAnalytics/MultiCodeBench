{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\tvar localPath = Process.GetCurrentProcess().MainModule.FileName;\nvar localDir = Path.GetDirectoryName(localPath);\n\nvar subDir = Environment.Is64BitProcess? \"x64\" : \"x86\";\n\nvar directedDllDir = Path.Combine(localDir, subDir);\n\nvar dllPath = Path.Combine(directedDllDir, dllName);\n\nif (Environment.OSVersion.Platform == PlatformID.Win32NT)\n{\nLoadLibrary(dllPath);\n}\nelse\n{\nLoadLibrary(dllPath);\n}\n}", "CodeBleu_score": 22.65980245233196}, {"code": "public static void PreloadDll(string dllName){\n\t#if NETSTANDARD2_0\n            string dllDirectory = GetDirectedDllDirectory();\n            string dllPath = Path.Combine(dllDirectory, dllName);\n            if (PlatformID.Win32Windows == Environment.OSVersion.Platform)\n            {\n                //Windows\n                Win32LoadLibrary(dllPath);\n            }\n            else\n            {\n                //Posix\n                PosixLoadLibrary(dllPath);\n            }\n#endif\n}", "CodeBleu_score": 26.662030249216816}, {"code": "public static void PreloadDll(string dllName){\n\t// Get the DLL directory\nvar dllDirectory = GetDirectedDllDirectory();\n\n// Check the operating system platform\nif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n{\n// Load the DLL using Win32\nLoadLibrary(dllDirectory + \"\\\\\" + dllName);\n}\nelse\n{\n// Load the DLL using Posix\nLoadLibrary(dllDirectory + \"/\" + dllName);\n}\n\n}", "CodeBleu_score": 58.45239193552264}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t", "CodeBleu_score": 5.693069074890999}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\t//Check if the file is already loaded\n\tif (reader.IsLoaded) {\n\t\treturn;\n\t}\n\t//Create a SerializedFile object\n\tSerializedFile assetsFile = new SerializedFile();\n\t//Set the version of the file if needed\n\tCheckStrippedVersion(assetsFile);\n\t//Add the file to the list of assets\n\tassetsFile.AddFile(reader, originalPath, unityVersion);\n\t//Log any errors\n\tif (assetsFile.HasErrors) {\n\t\tLogErrors(assetsFile);\n\t}\n}", "CodeBleu_score": 18.129251223017395}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\n// Create a new SerializedFile instance and set its version.\nSerializedFile assetsFile = new SerializedFile();\n\n// Set the version of the SerializedFile instance.\nif (unityVersion!= null) {\nassetsFile.SetVersion(unityVersion);\n}\n\n// Load the SerializedFile instance from memory.\ntry {\nassetsFile.LoadFromMemory(reader);\n} catch (Exception e) {\nLogger.Log(\"Error loading file \" + originalPath + \" from memory: \" + e.Message);\nreturn;\n}\n\n// Check that the SerializedFile instance is not already loaded.\nif (loadedAssets.Contains(assetsFile)) {\nLogger.Log(\"Error loading file \" + originalPath + \": File already loaded\");\nreturn;\n}\n\n// Add the SerializedFile instance to the list of loaded assets.\nloadedAssets.Add(assetsFile);\n\n// Check the version of the SerializedFile instance.\nCheckStrippedVersion(assetsFile);\n\n// Log the file path and the number of assets in the SerializedFile instance.\nLogger.Log(\"Loaded file \" + originalPath + \" with \" + assetsFile.GetAssetCount() + \" assets\");\n}", "CodeBleu_score": 37.01766476391466}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring[] pathParts = path.Split('/');\n\tstring frameName = pathParts[pathParts.Length - 1];\n\tImportedFrame[] childFrames = FindChilds(frameName).ToArray();\n\tif (childFrames.Length == 0) {\n\t\treturn null;\n\t} else {\n\t\treturn childFrames[0];\n\t}\n}", "CodeBleu_score": 21.161891852295394}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring name = GetFrameName(path);\n\tif (name == null) {\n\t\treturn null;\n\t}\n\tforeach (ImportedFrame child in FindChilds(name)) {\n\t\tif (child.path == path) {\n\t\t\treturn child;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 50.78346600124415}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tif (path.StartsWith(Name)) {\n\t\treturn this;\n\t}\n\tforeach (ImportedFrame child in children) {\n\t\tImportedFrame result = child.FindFrameByPath(path);\n\t\tif (result!= null) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 47.14735536368487}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tif (reader == null) {\n\t\tthrow new ArgumentNullException(\"reader\");\n\t}\n\tif (reader.Length == 0) {\n\t\tthrow new ArgumentException(\"Cannot decompress empty FileReader.\", \"reader\");\n\t}\n\tif (reader.Length < 2) {\n\t\tthrow new ArgumentException(\"Cannot decompress FileReader with less than 2 bytes.\", \"reader\");\n\t}\n\tif (reader.ReadByte()!= 0x1F || reader.ReadByte()!= 0x8B) {\n\t\tthrow new ArgumentException(\"Cannot decompress FileReader that is not a GZip file.\", \"reader\");\n\t}\n\tusing (MemoryStream ms = new MemoryStream(reader.ToArray())) {\n\t\tusing (GZipStream gzs = new GZipStream(ms, CompressionMode.Decompress)) {\n\t\t\tusing (MemoryStream ms2 = new MemoryStream()) {\n\t\t\t\tbyte[] buffer = new byte[4096];\n\t\t\t\tint read;\n\t\t\t\twhile ((read = gzs.Read(buffer, 0, buffer.Length)) > 0) {\n\t\t\t\t\tms2.Write(buffer, 0, read);\n\t\t\t\t}\n\t\t\t\treturn new FileReader(ms2.ToArray());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.529684650846576}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tif (reader == null) {\n\t\tthrow new ArgumentNullException(\"reader\");\n\t}\n\tif (reader.Length == 0) {\n\t\treturn reader;\n\t}\n\tusing (MemoryStream ms = new MemoryStream()) {\n\t\tusing (GZipStream gzip = new GZipStream(reader.GetStream(), CompressionMode.Decompress)) {\n\t\t\tgzip.CopyTo(ms);\n\t\t}\n\t\treturn new FileReader(ms);\n\t}\n}", "CodeBleu_score": 37.06256776676911}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tusing (MemoryStream ms = new MemoryStream()) {\n\t\tusing (GZipStream gzip = new GZipStream(reader, CompressionMode.Decompress)) {\n\t\t\tgzip.CopyTo(ms);\n\t\t}\n\t\treturn new FileReader(ms);\n\t}\n}", "CodeBleu_score": 30.570775567189468}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t_switches = new SwitchResult[switchForms.Length];\n\tfor (int i = 0; i < _switches.Length; i++)\n\t\t_switches[i] = new SwitchResult();\n\t_nonSwitches = new List<string>();\n\tforeach (string commandString in commandStrings)\n\t{\n\t\tif (commandString.Length == 0)\n\t\t\tcontinue;\n\t\tif (ParseString(commandString, switchForms))\n\t\t\tcontinue;\n\t\t_nonSwitches.Add(commandString);\n\t}\n}", "CodeBleu_score": 43.336317025928885}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tint len = commandStrings.Length;\n\tif (len == 0)\n\t\treturn;\n\tint pos = 0;\n\twhile (pos < len) {\n\t\tstring srcString = commandStrings[pos];\n\t\tif (srcString.Length == 0)\n\t\t\tpos++;\n\t\telse {\n\t\t\tbool success = ParseString(srcString, switchForms);\n\t\t\tif (success)\n\t\t\t\tpos++;\n\t\t\telse {\n\t\t\t\t_nonSwitches.Add(srcString);\n\t\t\t\tpos++;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 38.35264700811973}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tif (switchForms == null)\n\t\tthrow new Exception(\"switchForms == null\");\n\tif (commandStrings == null)\n\t\tthrow new Exception(\"commandStrings == null\");\n\t_switches = new SwitchResult[switchForms.Length];\n\tfor (int i = 0; i < _switches.Length; i++)\n\t\t_switches[i] = new SwitchResult();\n\tfor (int i = 0; i < commandStrings.Length; i++)\n\t{\n\t\tstring commandString = commandStrings[i];\n\t\tif (commandString == null)\n\t\t\tthrow new Exception(\"commandString == null\");\n\t\tif (ParseString(commandString, switchForms))\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 39.959026076040246}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_ImageData = m_Texture2D.GetPixels();\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.platform;\n\tthis.m_OutputSize = m_Texture2D.outputTexture;\n}", "CodeBleu_score": 34.36967441732952}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.platform;\n\tthis.m_OutputSize = m_Texture2D.outputSize;\n\tthis.m_MipMap = m_Texture2D.mipmapCount;\n\tthis.m_Texture2D.GetPixels32(this.m_Pixels);\n}", "CodeBleu_score": 31.77520130764441}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_ImageData = m_Texture2D.GetRawTextureData();\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.platform;\n\tthis.m_OutputSize = m_Texture2D.outputSize;\n}", "CodeBleu_score": 34.14179016589688}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty p = sp.GetArrayElementAtIndex(i);\n\t\tif (p.objectReferenceValue!= null) {\n\t\t\tresult.Add(p.objectReferenceValue.name);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\treturn string.Join(\", \", result.ToArray());\n}", "CodeBleu_score": 31.157457006648603}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).isExpanded) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\tstring resultString = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tif (i == 0) {\n\t\t\tresultString += result[i];\n\t\t} else {\n\t\t\tresultString += \", \" + result[i];\n\t\t}\n\t}\n\treturn resultString;\n}", "CodeBleu_score": 41.19377874025927}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty sub = sp.GetArrayElementAtIndex(i);\n\t\tif (sub.objectReferenceValue!= null) {\n\t\t\tresult.Add(sub.objectReferenceValue.name);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\treturn string.Join(\", \", result.ToArray());\n}", "CodeBleu_score": 31.378258364171607}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add &&!prop.active) {\n\t\tmenu.AddItem(new GUIContent(prop.name), false, () => {\n\t\t\tprop.active = true;\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t} else if (!add && prop.active) {\n\t\tmenu.AddItem(new GUIContent(prop.name), true, () => {\n\t\t\tprop.active = false;\n\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t});\n\t}\n}", "CodeBleu_score": 19.988845138615677}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (prop.Addable &&!prop.Active) {\n\t\tmenu.AddItem(new GUIContent(prop.Name), false, () => {\n\t\t\tif (add) {\n\t\t\t\tsp.arraySize++;\n\t\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).objectReferenceValue = prop.Property;\n\t\t\t} else {\n\t\t\t\tsp.DeleteArrayElementAtIndex(sp.GetArrayElementAtIndex(sp.arraySize - 1).propertyPath.LastIndexOf('_'));\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 23.69898980481172}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (!add && prop.active) {\n\t\treturn;\n\t}\n\tmenu.AddItem(new GUIContent(prop.name), prop.active, () => {\n\t\tif (add) {\n\t\t\tsp.arraySize++;\n\t\t\tsp.GetArrayElementAtIndex(sp.arraySize - 1).objectReferenceValue = prop.prop;\n\t\t} else {\n\t\t\tsp.DeleteArrayElementAtIndex(sp.arraySize - 1);\n\t\t}\n\t\tsp.serializedObject.ApplyModifiedProperties();\n\t});\n}", "CodeBleu_score": 27.32606259676041}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tEditorGUI.BeginChangeCheck();\n\tEditorGUI.showMixedValue = sp.hasMultipleDifferentValues;\n\tif (showXyz) {\n\t\tVector3 v = EditorGUILayout.Vector3Field(sp.displayName, sp.vector3Value);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.vector3Value = v;\n\t\t}\n\t} else {\n\t\tfloat x = EditorGUILayout.FloatField(sp.displayName, sp.floatValue);\n\t\tif (EditorGUI.EndChangeCheck()) {\n\t\t\tsp.floatValue = x;\n\t\t}\n\t\tif (GUILayout.Button(new GUIContent(\"xyz\", \"Toggle between single float and Vector3 display modes\"), EditorStyles.miniButton, GUILayout.Width(30))) {\n\t\t\tshowXyz =!showXyz;\n\t\t}\n\t}\n\treturn showXyz;\n}", "CodeBleu_score": 26.919860501557917}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tbool changed = false;\n\tbool showFloat = false;\n\tbool showVector3 = false;\n\tbool showToggle = false;\n\tfloat x = sp.vector3Value.x;\n\tfloat y = sp.vector3Value.y;\n\tfloat z = sp.vector3Value.z;\n\tif (Mathf.Approximately(x, y) && Mathf.Approximately(y, z)) {\n\t\tshowFloat = true;\n\t} else {\n\t\tshowVector3 = true;\n\t}\n\tif (showFloat!= showXyz) {\n\t\tshowToggle = true;\n\t}\n\tif (showToggle) {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tshowXyz = EditorGUILayout.ToggleLeft(showXyz, GUILayout.Width(16));\n\t\tEditorGUILayout.LabelField(sp.displayName, GUILayout.ExpandWidth(true));\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\tif (showFloat) {\n\t\tfloat value = EditorGUILayout.FloatField(sp.displayName, x);\n\t\tif (value!= x) {\n\t\t\tsp.vector3Value = new Vector3(value, value, value);\n\t\t\tchanged = true;\n\t\t}\n\t} else {\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.LabelField(sp.displayName, GUILayout.ExpandWidth(true));\n\t\tEditorGUILayout.EndHorizontal();\n\t\tEditorGUI.indentLevel++;\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PrefixLabel(\"X\");\n\t\tx = EditorGUILayout.FloatField(x);\n\t\tEditorGUILayout.EndHorizontal();\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PrefixLabel(\"Y\");\n\t\ty = EditorGUILayout.FloatField(y);\n\t\tEditorGUILayout.EndHorizontal();\n\t\tEditorGUILayout.BeginHorizontal();\n\t\tEditorGUILayout.PrefixLabel(\"Z\");\n\t\tz = EditorGUILayout.FloatField(z);\n\t\tEditorGUILayout.EndHorizontal();\n\t\tEditorGUI.indentLevel--;\n\t\tif (x!= sp.vector3Value.x || y!= sp.vector3Value.y || z!= sp.vector3Value.z) {\n\t\t\tsp.vector3Value = new Vector3(x, y, z);\n\t\t\tchanged = true;\n\t\t}\n\t}\n\treturn changed;\n}", "CodeBleu_score": 38.168398927698256}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t\tbool isVector3 = false;\n\tbool isVector3Changed = false;\n\tfloat x = sp.floatValue;\n\tfloat y = sp.vector3Value.y;\n\tfloat z = sp.vector3Value.z;\n\tfloat[] xyz = new float[3] { x, y, z };\n\tif (showXyz) {\n\t\tisVector3 = true;\n\t\tisVector3Changed = EditorGUILayout.Vector3Field(sp.displayName, sp.vector3Value)!= sp.vector3Value;\n\t\txyz = new float[3] { sp.vector3Value.x, sp.vector3Value.y, sp.vector3Value.z };\n\t} else {\n\t\tisVector3 = false;\n\t\tisVector3Changed = EditorGUILayout.FloatField(sp.displayName, sp.floatValue)!= sp.floatValue;\n\t\txyz = new float[3] { sp.floatValue, sp.floatValue, sp.floatValue };\n\t}\n\tif (isVector3Changed) {\n\t\tsp.vector3Value = new Vector3(xyz[0], xyz[1], xyz[2]);\n\t}\n\tif (isVector3) {\n\t\treturn isVector3Changed;\n\t} else {\n\t\treturn EditorGUILayout.Toggle(sp.displayName, showXyz)!= showXyz;\n\t}\n}", "CodeBleu_score": 33.099454342490326}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial mat = null;\n\tint count = 0;\n\tfor (int i = 0; i < materials.Count; i++) {\n\t\tMaterial m = materials[i];\n\t\tif (m.baseMat == baseMat && m.texture == texture && m.id == id && m.props == props) {\n\t\t\tcount = m.count;\n\t\t\tmat = m;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (mat == null) {\n\t\tmat = new Material();\n\t\tmat.baseMat = baseMat;\n\t\tmat.texture = texture;\n\t\tmat.id = id;\n\t\tmat.props = props;\n\t\tmat.count = 1;\n\t\tmaterials.Add(mat);\n\t} else {\n\t\tmat.count++;\n\t}\n\treturn mat;\n}", "CodeBleu_score": 31.11195123246317}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial retMat = null;\n\tint i = 0;\n\twhile (i < mats.Count) {\n\t\tif (mats[i].baseMat == baseMat && mats[i].texture == texture && mats[i].id == id && mats[i].props == props) {\n\t\t\tmats[i].count++;\n\t\t\tretMat = mats[i].customMat;\n\t\t\tbreak;\n\t\t}\n\t\ti++;\n\t}\n\tif (retMat == null) {\n\t\tretMat = new Material(baseMat);\n\t\tretMat.mainTexture = texture;\n\t\tretMat.name = \"Custom \" + baseMat.name + \" \" + id.ToString() + \" \" + props.ToString();\n\t\tmats.Add(new CustomMaterial(baseMat, texture, id, props, retMat));\n\t}\n\treturn retMat;\n}", "CodeBleu_score": 29.82270264131485}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial customMat = null;\n\tint i = 0;\n\twhile (i < customMaterials.Count && customMaterials[i].baseMat!= baseMat) {\n\t\ti++;\n\t}\n\tif (i < customMaterials.Count) {\n\t\tcustomMat = customMaterials[i].customMat;\n\t\tcustomMat.SetTexture(\"_MainTex\", texture);\n\t\tcustomMaterials[i].count++;\n\t} else {\n\t\tcustomMat = new Material(baseMat);\n\t\tcustomMat.SetTexture(\"_MainTex\", texture);\n\t\tcustomMaterials.Add(new CustomMaterial(baseMat, customMat, 1, id, props));\n\t}\n\treturn customMat;\n}", "CodeBleu_score": 24.225217374544762}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\treturn;\n\t}\n\tfor (int i = 0; i < customMaterials.Count; i++) {\n\t\tif (customMaterials[i].mat == customMat) {\n\t\t\tcustomMaterials[i].count--;\n\t\t\tif (customMaterials[i].count <= 0) {\n\t\t\t\tcustomMaterials[i].mat = null;\n\t\t\t\tcustomMaterials[i].texture = null;\n\t\t\t\tcustomMaterials[i].count = 0;\n\t\t\t\tcustomMaterials.RemoveAt(i);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.44250546036016}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null)\n\t\treturn;\n\t\n\tfor (int i = 0; i < customMats.Count; i++) {\n\t\tif (customMats[i].mat == customMat) {\n\t\t\tif (--customMats[i].count <= 0) {\n\t\t\t\tDestroyImmediate(customMats[i].mat);\n\t\t\t\tcustomMats.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 29.31300711159246}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogError(\"Remove: Invalid material!\");\n\t\treturn;\n\t}\n\tfor (int i = 0; i < customMaterials.Count; i++) {\n\t\tif (customMaterials[i].material == customMat) {\n\t\t\tcustomMaterials[i].count--;\n\t\t\tif (customMaterials[i].count <= 0) {\n\t\t\t\tDestroy(customMaterials[i].material);\n\t\t\t\tcustomMaterials.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\tDebug.LogError(\"Remove: Material not found!\");\n}", "CodeBleu_score": 33.456707460914046}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t\t// Get all particle systems in the hierarchy\n\tList<ParticleSystem> particleSystems = new List<ParticleSystem>();\n\tGetParticleSystems(root, particleSystems);\n\n\t// Remove those that are not associated with the current UIParticle instance\n\tfor (int i = particleSystems.Count - 1; i >= 0; i--) {\n\t\tParticleSystem particleSystem = particleSystems[i];\n\t\tif (particleSystem.GetComponent<UIParticle>()!= this) {\n\t\t\tparticleSystems.RemoveAt(i);\n\t\t}\n\t}\n\n\t// Update particle system animation settings\n\tfor (int i = 0; i < particleSystems.Count; i++) {\n\t\tParticleSystem particleSystem = particleSystems[i];\n\t\tif (particleSystem.GetComponent<UIParticle>() == this) {\n\t\t\tparticleSystem.GetComponent<UIParticle>().RefreshAnimation();\n\t\t}\n\t}\n\n\t// Call RefreshParticles on each child\n\tfor (int i = 0; i < root.transform.childCount; i++) {\n\t\tRefreshParticles(root.transform.GetChild(i).gameObject);\n\t}\n}", "CodeBleu_score": 36.37473354840053}, {"code": "private void RefreshParticles(GameObject root){\n\t\tList<ParticleSystem> psList = new List<ParticleSystem>();\n\tParticleSystem[] ps = root.GetComponentsInChildren<ParticleSystem>();\n\tforeach (ParticleSystem p in ps) {\n\t\tif (p.GetComponent<UIParticle>() == null) {\n\t\t\tpsList.Add(p);\n\t\t}\n\t}\n\tforeach (ParticleSystem p in psList) {\n\t\tDestroyImmediate(p);\n\t}\n\tif (psList.Count > 0) {\n\t\tRefreshParticles(psList);\n\t}\n}", "CodeBleu_score": 25.58850889726277}, {"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\t// Get all types in the current assembly that implement the IColorSwapManager interface\n\tIEnumerable<Type> colorSwapManagerTypes = from type in Assembly.GetExecutingAssembly().GetTypes()\n\t\t\t\t\t\t\t\t\t\t\t  where type.GetInterfaces().Contains(typeof(IColorSwapManager))\n\t\t\t\t\t\t\t\t\t\t\t  select type;\n\n\t// Register each type as a single-instance component\n\tforeach (Type colorSwapManagerType in colorSwapManagerTypes) {\n\t\tcontainerBuilder.RegisterType(colorSwapManagerType).As<IColorSwapManager>().SingleInstance();\n\t}\n}", "CodeBleu_score": 36.963920992245804}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tType[] types = Assembly.GetExecutingAssembly().GetTypes();\n\tforeach (Type type in types) {\n\t\tif (type.GetInterfaces().Contains(typeof(IColorSwapManager))) {\n\t\t\tcontainerBuilder.RegisterType(type).SingleInstance();\n\t\t}\n\t}\n}", "CodeBleu_score": 32.81329159919048}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tvar assembly = typeof(ColorSwapManager).Assembly;\n\tvar types = assembly.GetTypes().Where(x => x.GetInterfaces().Contains(typeof(IColorSwapManager)));\n\tforeach (var type in types) {\n\t\tcontainerBuilder.RegisterType(type).As<IColorSwapManager>().SingleInstance();\n\t}\n}", "CodeBleu_score": 39.2557873917816}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\tawait ConnectAsync(ipAddress, port, new List<string> { \"default\" });\n}", "CodeBleu_score": 23.090471220269997}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\tif(serializer == null) {\n\t\tserializer = new Serializer();\n\t\tserializer.Init();\n\t}\n\tawait serializer.ConnectAsync(ipAddress, port);\n\tawait ReserveAsync();\n}", "CodeBleu_score": 28.677897283435556}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\t// Set the IP address and port\n\tthis.ipAddress = ipAddress;\n\tthis.port = port;\n\n\t// Create a socket and connect to the IP address and port\n\tsocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n\tsocket.Connect(ipAddress, port);\n\n\t// Create a new serializer task\n\tserializerTask = Task.Run(() => {\n\t\t// Create a new serializer\n\t\tserializer = new Serializer();\n\t});\n\n\t// Wait for the serializer task to complete\n\tawait serializerTask;\n\n\t// Initiate a reservation negotiation\n\tNegotiateReservation();\n}", "CodeBleu_score": 37.0339692486561}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tDebug.LogWarning(\"UpdateConnectionState: sessionConnectionState is null.\");\n\t\treturn;\n\t}\n\n\tif (m_sessionConnectionState == sessionConnectionState) {\n\t\tDebug.LogWarning(\"UpdateConnectionState: sessionConnectionState is the same as the current sessionConnectionState.\");\n\t\treturn;\n\t}\n\n\tDebug.Log(\"UpdateConnectionState: \" + m_sessionConnectionState + \" -> \" + sessionConnectionState);\n\n\tif (m_sessionConnectionState == IMultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\t// If we were in the SESSION_RESERVED state, we need to update the player name in the log.\n\t\tif (sessionConnectionState == IMultiplayerSessionConnectionState.SESSION_JOINING) {\n\t\t\t// If we are transitioning to the SESSION_JOINING state, we need to update the player name in the log.\n\t\t\tm_sessionManager.UpdatePlayerName(m_sessionManager.PlayerName);\n\t\t} else if (sessionConnectionState == IMultiplayerSessionConnectionState.SESSION_JOINED) {\n\t\t\t// If we are transitioning to the SESSION_JOINED state, we need to update the player name in the log.\n\t\t\tm_sessionManager.UpdatePlayerName(m_sessionManager.PlayerName);\n\t\t}\n\t}\n\n\tm_sessionConnectionState = sessionConnectionState;\n\n\tif (ConnectionStateChanged!= null) {\n\t\tConnectionStateChanged(m_sessionConnectionState);\n\t}\n}", "CodeBleu_score": 32.82610288803074}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\t// Validate input\n\tif (sessionConnectionState == null) {\n\t\tthrow new ArgumentNullException(\"sessionConnectionState\");\n\t}\n\n\t// Validate current state\n\tif (sessionConnectionState.State == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\tif (this.CurrentState!= MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\t\tthrow new InvalidOperationException(\"Cannot update session connection state from \" + this.CurrentState + \" to \" + sessionConnectionState.State + \".\");\n\t\t}\n\t}\n\n\t// Validate new state\n\tif (sessionConnectionState.State == MultiplayerSessionConnectionState.SESSION_ACTIVE) {\n\t\tif (this.CurrentState!= MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\t\tthrow new InvalidOperationException(\"Cannot update session connection state from \" + this.CurrentState + \" to \" + sessionConnectionState.State + \".\");\n\t\t}\n\t}\n\n\t// Update state\n\tthis.CurrentState = sessionConnectionState.State;\n\n\t// Log transition\n\tDebug.Log(\"Session connection state transition from \" + this.CurrentState + \" to \" + sessionConnectionState.State + \".\");\n\n\t// Invoke event\n\tif (this.ConnectionStateChanged!= null) {\n\t\tthis.ConnectionStateChanged(this, new MultiplayerSessionConnectionStateEventArgs(sessionConnectionState.State));\n\t}\n\n\t// Update player name\n\tif (sessionConnectionState.State == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\t// Set player name\n\t\tthis.PlayerName = sessionConnectionState.PlayerName;\n\n\t\t// Log player name\n\t\tDebug.Log(\"Session player name: \" + this.PlayerName);\n\t}\n}", "CodeBleu_score": 29.473535383884375}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tLog.Error(\"MultiplayerSessionConnectionState cannot be null\");\n\t\treturn;\n\t}\n\tif (sessionConnectionState == this.connectionState) {\n\t\treturn;\n\t}\n\tthis.connectionState = sessionConnectionState;\n\tif (this.connectionState == null) {\n\t\tLog.Error(\"MultiplayerSessionConnectionState cannot be null\");\n\t\treturn;\n\t}\n\tif (this.connectionState == this.sessionConnectionState) {\n\t\tLog.Error(\"MultiplayerSessionConnectionState cannot be the same as the sessionConnectionState\");\n\t\treturn;\n\t}\n\tLog.Info(\"MultiplayerSessionConnectionState changed from {0} to {1}\", this.connectionState.ToString(), sessionConnectionState.ToString());\n\tif (this.connectionState == SESSION_RESERVED) {\n\t\tthis.playerName = this.sessionConnectionState.GetPlayerName();\n\t\tLog.Info(\"MultiplayerSessionConnectionState changed to {0} for player {1}\", this.connectionState.ToString(), this.playerName);\n\t}\n\tthis.ConnectionStateChanged(this.connectionState);\n}", "CodeBleu_score": 30.87209065405354}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait StartAsync(ipAddress, serverPort, 2000);\n}", "CodeBleu_score": 18.52013538152466}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t", "CodeBleu_score": 7.1600438194900775}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait StartAsync(ipAddress, serverPort, 2000);\n}", "CodeBleu_score": 18.52013538152466}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = GetCyclops(id);\n\tif (cyclops!= null) {\n\t\tif (cyclops.fireSuppressionButton!= null) {\n\t\t\tStartCoroutine(StartFireSuppressionSystem(cyclops.fireSuppressionButton));\n\t\t}\n\t}\n}", "CodeBleu_score": 26.920541251583806}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = CyclopsManager.GetCyclops(id);\n\tif (cyclops == null) return;\n\tFireSuppressionButton fireSuppressionButton = cyclops.GetComponent<FireSuppressionButton>();\n\tif (fireSuppressionButton == null) return;\n\tfireSuppressionButton.StartFireSuppression(cyclops);\n}", "CodeBleu_score": 25.43286793553787}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tCyclops cyclops = Cyclops.GetCyclops(id);\n\tif (cyclops == null) {\n\t\tDebug.LogError(\"Cyclops with ID \" + id + \" not found.\");\n\t\treturn;\n\t}\n\tFireSuppressionButton button = cyclops.GetComponentInChildren<FireSuppressionButton>();\n\tif (button == null) {\n\t\tDebug.LogError(\"Fire suppression button not found on Cyclops with ID \" + id + \".\");\n\t\treturn;\n\t}\n\tbutton.StartFireSuppression();\n\tStartCoroutine(StartFireSuppression(button));\n}", "CodeBleu_score": 53.76766624154256}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.ID == SubRootID) {\n\t\tint damagePointID = 0;\n\t\tswitch (damagePoint) {\n\t\t\tcase CyclopsDamagePoint.LeftArm:\n\t\t\t\tdamagePointID = 1;\n\t\t\t\tbreak;\n\t\t\tcase CyclopsDamagePoint.RightArm:\n\t\t\t\tdamagePointID = 2;\n\t\t\t\tbreak;\n\t\t\tcase CyclopsDamagePoint.LeftLeg:\n\t\t\t\tdamagePointID = 3;\n\t\t\t\tbreak;\n\t\t\tcase CyclopsDamagePoint.RightLeg:\n\t\t\t\tdamagePointID = 4;\n\t\t\t\tbreak;\n\t\t}\n\t\tRepairDamagePoint repairDamagePoint = new RepairDamagePoint(subRoot.ID, damagePointID, repairAmount);\n\t\tPacketSender.SendPacket(repairDamagePoint);\n\t}\n}", "CodeBleu_score": 35.850475460119355}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.ID == SubRootID) {\n\t\t// Create a repair packet\n\t\tDamagePointRepairPacket repairPacket = new DamagePointRepairPacket(subRoot.ID, damagePoint.ID, repairAmount);\n\t\t// Send the repair packet using the packet sender\n\t\tPacketSender.Send(repairPacket);\n\t}\n}", "CodeBleu_score": 25.234525704821298}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.ID == 0) {\n\t\tCyclopsDamagePoint repairPacket = new CyclopsDamagePoint(damagePoint.ID, repairAmount);\n\t\tpacketSender.SendPacket(repairPacket);\n\t}\n}", "CodeBleu_score": 24.029338006045826}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n    return;\n}\n\nif (subRoot.health <= 0f) {\n    return;\n}\n\nif (info.HasValue) {\n    CyclopsDamageInfoData damageInfoData = new CyclopsDamageInfoData(subRootId, info.Value);\n    CyclopsDamage packet = new CyclopsDamage(subRootId, GetActiveDamagePoints(subRoot), GetActiveRoomFires(subRoot.subFire), damageInfoData);\n    SendPacket(packet);\n} else {\n    CyclopsDamage packet = new CyclopsDamage(subRootId, GetActiveDamagePoints(subRoot), GetActiveRoomFires(subRoot.subFire), null);\n    SendPacket(packet);\n}\n}", "CodeBleu_score": 23.689324368540447}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) return;\nif (subRoot.health <= 0) return;\n\nCyclopsDamageInfoData damageInfo = info.HasValue? new CyclopsDamageInfoData(subRootId, info.Value) : null;\nIEnumerable<int> damagePoints = GetActiveDamagePoints(subRoot);\nIEnumerable<CyclopsFireData> fires = GetActiveRoomFires(subRoot.subFire);\n\nCyclopsDamage packet = new CyclopsDamage(damageInfo, damagePoints, fires);\n\nCyclops.Instance.Send(packet);\n}", "CodeBleu_score": 22.14947120266358}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\nreturn;\n}\n\nif (subRoot.healthManager.health <= 0) {\nreturn;\n}\n\nif (info.IsPresent) {\nCyclopsDamageInfoData damageInfoData = new CyclopsDamageInfoData(info.Value);\n\nList<int> damagePoints = GetActiveDamagePoints(subRoot).ToList();\nList<CyclopsFireData> fires = GetActiveRoomFires(subRoot.subFire).ToList();\n\nCyclopsDamage packet = new CyclopsDamage(subRootId, damageInfoData, damagePoints, fires);\n\nSend(packet);\n}\n}", "CodeBleu_score": 26.806318364575066}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t}\n}", "CodeBleu_score": 32.44871230297255}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject go = GameObject.Find(entity.Name);\n\t\tif (go!= null) {\n\t\t\tDestroy(go);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.889063840548154}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity dirtyEntity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(dirtyEntity);\n\t\tGameObject go = null;\n\t\tif (EntityGameObjectMap.TryGetValue(dirtyEntity.Id, out go)) {\n\t\t\tEntityGameObjectMap.Remove(dirtyEntity.Id);\n\t\t\tDestroy(go);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.51555101173815}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (pendingParentEntities.ContainsKey(entity.id) == false) {\n\t\tpendingParentEntities.Add(entity.id, new List<Entity>());\n\t}\n\tpendingParentEntities[entity.id].Add(entity);\n}", "CodeBleu_score": 29.00257676989083}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (pendingParentEntities.ContainsKey(entity.Parent.Id)) {\n\t\tpendingParentEntities[entity.Parent.Id].Add(entity);\n\t} else {\n\t\tpendingParentEntities.Add(entity.Parent.Id, new List<Entity>());\n\t\tpendingParentEntities[entity.Parent.Id].Add(entity);\n\t}\n}", "CodeBleu_score": 30.617309948024126}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (pendingParentEntities.ContainsKey(entity.ParentID)) {\n\t\tpendingParentEntities[entity.ParentID].Add(entity);\n\t} else {\n\t\tpendingParentEntities.Add(entity.ParentID, new List<Entity>() { entity });\n\t}\n}", "CodeBleu_score": 25.483563099303296}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown == clawArm.PickupCooldown) {\n\t\tBroadcastArmAction(clawArm.TechType, clawArm, ExosuitArmAction.START_USE_TOOL, clawArm.transform.position, clawArm.transform.rotation);\n\t} else if (cooldown == clawArm.PunchCooldown) {\n\t\tBroadcastArmAction(clawArm.TechType, clawArm, ExosuitArmAction.ALT_HIT, clawArm.transform.position, clawArm.transform.rotation);\n\t} else {\n\t\tDebug.LogError(\"ClawArm.BroadcastClawUse: invalid cooldown\");\n\t}\n}", "CodeBleu_score": 37.7168290370241}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown > clawArm.GetPickupCooldown()) {\n\t\tBroadcastArmAction(clawArm.GetTechType(), clawArm, ExosuitArmAction.START_USE_TOOL, clawArm.GetTransform().position, clawArm.GetTransform().rotation);\n\t} else if (cooldown > clawArm.GetPunchCooldown()) {\n\t\tBroadcastArmAction(clawArm.GetTechType(), clawArm, ExosuitArmAction.ALT_HIT, clawArm.GetTransform().position, clawArm.GetTransform().rotation);\n\t} else {\n\t\tDebug.LogError(\"Invalid cooldown time for claw arm action.\");\n\t}\n}", "CodeBleu_score": 35.26663665770117}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (cooldown > clawArm.PickupCooldown) {\n\t\tBroadcastArmAction(clawArm.TechType, clawArm, ExosuitArmAction.START_USE_TOOL, null, null);\n\t} else if (cooldown > clawArm.PunchCooldown) {\n\t\tBroadcastArmAction(clawArm.TechType, clawArm, ExosuitArmAction.ALT_HIT, null, null);\n\t} else {\n\t\tDebug.LogError(\"Invalid cooldown value\");\n\t}\n}", "CodeBleu_score": 30.782889938045386}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null || parent == null) {\n\t\treturn;\n\t}\n\n\tstring gameObjectName = gameObject.name;\n\tstring parentName = parent.name;\n\n\tif (gameObjectName == null || parentName == null) {\n\t\treturn;\n\t}\n\n\tstring gameObjectID = GetGameObjectID(gameObject);\n\tstring parentID = GetGameObjectID(parent);\n\n\tif (gameObjectID == null || parentID == null) {\n\t\treturn;\n\t}\n\n\tInstalledBatteryEntity battery = new InstalledBatteryEntity(gameObjectID, parentID, techType);\n\tSendEntitySpawnedByClient(battery);\n}", "CodeBleu_score": 40.50829832709487}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (!gameObject ||!parent) {\n\t\treturn;\n\t}\n\t// get the IDs of the game object and its parent\n\tint gameObjectID = gameObject.GetInstanceID();\n\tint parentID = parent.GetInstanceID();\n\t// extract metadata for the entity\n\tstring entityName = gameObject.name;\n\tVector3 entityPosition = gameObject.transform.position;\n\tVector3 entityRotation = gameObject.transform.rotation.eulerAngles;\n\t// create an InstalledBatteryEntity with the collected information\n\tInstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity(gameObjectID, parentID, entityName, entityPosition, entityRotation, techType);\n\t// send an EntitySpawnedByClient packet\n\tSendEntitySpawnedByClient(installedBatteryEntity);\n}", "CodeBleu_score": 37.60448424182188}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t", "CodeBleu_score": 11.969764320593383}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\nPickingUpObject = gameObject;\n\nRemoveAnyRemoteControl(gameObject);\n\n// If the object has no ID, generate one.\nif (!NitroxEntity.GetIdOrGenerateNew(gameObject)) {\n\nDebug.LogWarning(\"[Items] Picked up object has no ID! Generating new one.\");\n\n}\n\nStopEntityPositionBroadcasting();\n\nInventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, entityMetadataManager);\n\ninventoryItemEntity.Spawned = true;\n\nLogPickupEvent(inventoryItemEntity);\n\nCreatePickupItemPacket(inventoryItemEntity);\n\nResetPickingUpObject();\n\n}", "CodeBleu_score": 39.06141990180907}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t\tif (PickingUpObject!= null) {\n\t\treturn;\n\t}\n\tPickingUpObject = gameObject;\n\tRemoveAnyRemoteControl(gameObject);\n\tif (!gameObject.TryGetComponent<NitroxId>(out NitroxId id)) {\n\t\tid = gameObject.AddComponent<NitroxId>();\n\t}\n\tStopEntityPositionBroadcasting(id.Value);\n\tInventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, entityMetadataManager);\n\tinventoryItemEntity.IsSpawned = true;\n\tLogPickupEvent(inventoryItemEntity);\n\tCreateAndSendPickupItemPacket(inventoryItemEntity);\n\tPickingUpObject = null;\n}", "CodeBleu_score": 47.3655376605046}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\troxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\tTechType techType = gameObject.GetComponent<TechType>();\n\n\tInventoryItemEntity entity = new InventoryItemEntity(id, gameObject.GetComponent<PrefabIdentifier>().classId, techType.ToDto(), metadata.Value);\n\n\tif (gameObject.GetComponent<BatteryItem>()!= null) {\n\t\tentity.battery = gameObject.GetComponent<BatteryItem>().charge;\n\t}\n\n\treturn entity;\n}", "CodeBleu_score": 46.325838717154255}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tGet the NitroxId\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\n\t// Get the class ID\n\tstring classId = gameObject.GetClassId();\n\n\t// Get the TechType\n\tTechTag techTag = gameObject.GetComponent<TechTag>();\n\tTechType techType = (techTag)? techTag.type : TechType.None;\n\n\t// Get the metadata\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n\t// Get the player's ID\n\tPlayer player = Player.main;\n\tNitroxId playerId = (player)? NitroxEntity.GetIdOrGenerateNew(player.gameObject) : null;\n\n\t// Construct the entity\n\tInventoryItemEntity entity = new InventoryItemEntity(id, classId, techType.ToDto(), metadata.Value, playerId);\n\n\t// Get the battery data\n\tBattery battery = gameObject.GetComponent<Battery>();\n\n\tif (battery) {\n\t\tentity.battery = new BatteryDto(battery.charge, battery.maxCharge);\n\t}\n\n\treturn entity;\n}", "CodeBleu_score": 44.639978971906736}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\troxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\nOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\nTechTag techTag = gameObject.GetComponent<TechTag>();\nTechType techType = (techTag)? techTag.type : TechType.None;\n\nInventoryItemEntity entity = new InventoryItemEntity(id, techType.ToDto(), metadata.Value);\n\nentity.Children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\nif (entity.Metadata.IsBattery) {\n    entity.Battery = gameObject.GetComponent<BatteryItem>().ToDto();\n}\n\nreturn entity;\n}", "CodeBleu_score": 49.959583223427096}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Lazy<PlayerBody>(() => new PlayerBody(this, multiplayerSession, packetSender, throttledPacketSender));\n\tthis.playerModel = new Lazy<PlayerModel>(() => new PlayerModel(this));\n\tthis.bodyPrototype = new Lazy<PlayerBody>(() => new PlayerBody(this, multiplayerSession, packetSender, throttledPacketSender));\n\tthis.permissions = new PlayerPermissions();\n}", "CodeBleu_score": 51.539011935989045}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Body(multiplayerSession, packetSender, throttledPacketSender);\n\tthis.playerModel = new PlayerModel(multiplayerSession, packetSender, throttledPacketSender);\n\tthis.bodyPrototype = new BodyPrototype(multiplayerSession, packetSender, throttledPacketSender);\n\tthis.permissions = new Permissions();\n}", "CodeBleu_score": 42.84743382222479}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (!head.activeSelf ) {\n\t\t\thead.SetActive( true );\n\t\t}\n\t\tGameObject body = Instantiate( bodyPrototype );\n\t\tbody.GetComponent<Renderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\t\tbody.SetActive( false );\n\t\tbody.name = \"RemotePlayerPrototype\";\n\t\tforeach ( Transform child in body.transform ) {\n\t\t\tif ( child.gameObject.GetComponent<Item>() ) {\n\t\t\t\tDestroy( child.gameObject );\n\t\t\t}\n\t\t}\n\t\treturn body;\n\t}\n}", "CodeBleu_score": 27.276348858207584}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (m_head.GetComponent<Renderer>().isVisible) {\n\t\t\tGameObject body = Instantiate(m_bodyPrototype);\n\t\t\tbody.GetComponent<Renderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\t\tbody.SetActive(false);\n\t\t\tbody.name = \"RemotePlayerPrototype\";\n\t\t\tforeach (Transform child in body.transform) {\n\t\t\t\tif (child.name.Contains(\"Item\")) {\n\t\t\t\t\tDestroy(child.gameObject);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn body;\n\t\t}\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 33.156826800037166}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\t// Ensure the player's head is visible.\n\t\tPlayerHead.GetComponent.<Renderer>().enabled = true;\n\t\t\n\t\t// Instantiate a clone of the body prototype.\n\t\tvar bodyPrototype = Instantiate(BodyPrototype, Vector3.zero, Quaternion.identity);\n\t\t\n\t\t// Reset the head's shadow casting mode.\n\t\tPlayerHead.GetComponent.<Renderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\t\n\t\t// Deactivate the clone and rename it to \"RemotePlayerPrototype\".\n\t\tbodyPrototype.SetActive(false);\n\t\tbodyPrototype.name = \"RemotePlayerPrototype\";\n\t\t\n\t\t// Remove items held in hand from the clone.\n\t\tvar itemsHeldInHand = bodyPrototype.GetComponentsInChildren.<Item>();\n\t\tfor (var i = 0; i < itemsHeldInHand.length; i++) {\n\t\t\tDestroy(itemsHeldInHand[i].gameObject);\n\t\t}\n\t\t\n\t\t// Return the clone.\n\t\treturn bodyPrototype;\n\t}\n}", "CodeBleu_score": 25.35595372646095}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\t// Write the type name\n\tbw.Write(this.GetType().Name);\n\n\t// Write the location\n\tbw.Write(this.Location);\n\n\t// Write the metadata\n\tbw.Write(this.Metadata);\n\n\t// Write the processes\n\tbw.Write(this.Processes);\n\n\t// Write the dependencies\n\tbw.Write(this.Dependencies.Count);\n\tforeach (ICacheable dependency in this.Dependencies) {\n\t\tdependency.Save(bw);\n\t}\n\n\t// Write the incompatibilities\n\tbw.Write(this.Incompatibilities.Count);\n\tforeach (ICacheable incompatibility in this.Incompatibilities) {\n\t\tincompatibility.Save(bw);\n\t}\n\n\t// Write the target version\n\tbw.Write(this.TargetVersion);\n}", "CodeBleu_score": 28.311070281271782}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(this.GetType().Name);\n\tbw.Write(this.Location);\n\tbw.Write(this.Metadata);\n\tbw.Write(this.Processes);\n\tbw.Write(this.Dependencies);\n\tbw.Write(this.Incompatibilities);\n\tbw.Write(this.TargetVersion);\n}", "CodeBleu_score": 14.170123056569766}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(this.GetType().Name);\n\tbw.Write(this.Location);\n\tbw.Write(this.Metadata);\n\tbw.Write(this.Processes);\n\tbw.Write(this.Dependencies.Count);\n\tforeach (ICacheable dep in this.Dependencies) {\n\t\tdep.Save(bw);\n\t}\n\tbw.Write(this.Incompatibilities.Count);\n\tforeach (ICacheable inc in this.Incompatibilities) {\n\t\tinc.Save(bw);\n\t}\n\tbw.Write(this.TargetVersion);\n}", "CodeBleu_score": 26.94185082034064}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\t// Get the plugin type\n\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginTypeName);\n\n\t// Create an instance of the plugin\n\tBasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\n\t// Invoke the PluginLoad event\n\tOnPluginLoad(plugin);\n\n\t// Call the Load method on the plugin\n\tplugin.Load(pluginInfo, pluginAssembly);\n\n\t// Return the plugin\n\treturn plugin;\n}", "CodeBleu_score": 52.196353206423616}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\t// Get the plugin type.\n\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\n\t// Create an instance of the plugin.\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\n\t// Invoke the PluginLoad event.\n\tPluginLoad?.Invoke(pluginInfo, pluginInstance);\n\n\t// Call the Load method on the plugin.\n\tpluginInstance.Load();\n\n\treturn pluginInstance;\n}", "CodeBleu_score": 59.361288253182806}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\t// Get the plugin type\n\tType pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\n\t// Create an instance of the plugin\n\tBasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\n\t// Call the PluginLoad event\n\tPluginLoad(plugin);\n\n\t// Call the Load method on the plugin\n\tplugin.Load();\n\n\t// Return the plugin instance\n\treturn plugin;\n}", "CodeBleu_score": 47.10795052387312}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tTrampolineMethod = CreateTrampoline(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 63.949268901856314}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tPrepare();\n\tif (TrampolineMethod == null) {\n\t\tTrampolineMethod = TrampolineGenerator.GenerateTrampoline(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 73.4770761866086}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tTrampolineMethod = GenerateTrampoline(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 64.5206515157258}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\t// Get the language file as a stream from the assembly's resources.\n\tStream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(code);\n\n\t// Deserialize the stream into a dictionary.\n\tDictionary<string, string> language = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\n\t// Return the dictionary.\n\treturn language;\n}", "CodeBleu_score": 37.852330426492564}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\t// Create a stream from the assembly's resources\n\tStream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream($\"Language.{code}.json\");\n\n\t// Deserialize the stream into a dictionary\n\tDictionary<string, string> dictionary = JsonConvert.DeserializeObject<Dictionary<string, string>>(new StreamReader(stream).ReadToEnd());\n\n\t// Return the dictionary\n\treturn dictionary;\n}", "CodeBleu_score": 44.19790482684997}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tif (!LanguageFiles.ContainsKey(code)) {\n\t\tusing (Stream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"Lang.\" + code + \".json\")) {\n\t\t\tif (stream == null) {\n\t\t\t\tthrow new NullReferenceException(\"Language file not found: \" + code);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tLanguageFiles.Add(code, JsonConvert.DeserializeObject<Dictionary<string, string>>(new StreamReader(stream).ReadToEnd()));\n\t\t\t} catch (JsonException e) {\n\t\t\t\tthrow new JsonException(\"Error deserializing language file: \" + code, e);\n\t\t\t}\n\t\t}\n\t}\n\treturn LanguageFiles[code];\n}", "CodeBleu_score": 43.38001207492469}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\texpressionCount += GenerateCodeForExpression((ParserRuleContext)node);\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 46.2925022015654}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\texpressionCount += GenerateCodeForExpressionsInFormattedText(node.Children);\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 46.55847699377361}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\texpressionCount += Visit(node);\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 47.004732641735345}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\t// Emit a RunLine opcode with the line ID and expression count.\n\tint lineID = GetLineID(context.lineID());\n\tint expressionCount = GetExpressionCount(context.expression());\n\tEmit(OpCode.RunLine, lineID, expressionCount);\n\n\treturn base.VisitLine_statement(context);\n}", "CodeBleu_score": 26.40646558095469}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\t// Visit the children of the line statement\n\tint lineID = Visit(context.line_id());\n\tint expressionCount = Visit(context.expression_list());\n\n\t// Emit the RunLine opcode\n\tEmit(OpCode.RunLine);\n\tEmit(lineID);\n\tEmit(expressionCount);\n\n\treturn 0;\n}", "CodeBleu_score": 25.083498400312955}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tint lineID = 0;\n\t// If the line statement has a line ID tag, get the line ID\n\tif (context.line_id_tag()!= null) {\n\t\tlineID = int.Parse(context.line_id_tag().GetText());\n\t}\n\t// If no line ID was found, throw an exception\n\tif (lineID == 0) {\n\t\tthrow new InvalidOperationException(\"Line statements must have a line ID tag\");\n\t}\n\t// Get the expression count\n\tint expressionCount = 0;\n\tif (context.expression()!= null) {\n\t\texpressionCount = context.expression().Length;\n\t}\n\t// Emit the RunLine opcode\n\tEmit(OpCode.RunLine, lineID, expressionCount);\n\treturn 0;\n}", "CodeBleu_score": 48.15299228641677}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\t// Create a set of known commands\n\tvar knownCommands = new HashSet<string>();\n\tforeach (var command in Project.KnownCommands) {\n\t\tknownCommands.Add(command.Name);\n\t}\n\n\t// Check each command reference\n\tforeach (var commandReference in yarnFile.CommandReferences) {\n\t\tif (!knownCommands.Contains(commandReference.Name)) {\n\t\t\t// The command is not known\n\t\t\tyield return new Diagnostic(\n\t\t\t\tcommandReference.Name,\n\t\t\t\t$\"Unknown command '{commandReference.Name}'.\",\n\t\t\t\tDiagnosticSeverity.Warning,\n\t\t\t\t\"YarnSpinner.UnknownCommand\",\n\t\t\t\tcommandReference.Name\n\t\t\t);\n\t\t}\n\t}\n}", "CodeBleu_score": 25.47531683702478}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\t// If the file has no commands, there are no unknown commands.\n\tif (yarnFile.Commands == null) {\n\t\tyield break;\n\t}\n\n\t// For each command in the file...\n\tforeach (var command in yarnFile.Commands) {\n\t\t// If the command has no reference, there is no unknown command.\n\t\tif (string.IsNullOrWhiteSpace(command.Reference)) {\n\t\t\tyield break;\n\t\t}\n\n\t\t// If the command has a reference, but no definition, it is unknown.\n\t\tif (!yarnFile.Commands.Any(c => c.Name == command.Reference)) {\n\t\t\t// Generate a diagnostic with a warning message, severity level, code, and additional data about the command.\n\t\t\tyield return Diagnostic.Create(\n\t\t\t\tnew DiagnosticDescriptor(\n\t\t\t\t\t\"YarnUnknownCommand\",\n\t\t\t\t\t\"Unknown Command\",\n\t\t\t\t\t$\"Unknown command '{command.Reference}' in file '{yarnFile.Name}'.\",\n\t\t\t\t\t\"Yarn\",\n\t\t\t\t\tDiagnosticSeverity.Warning,\n\t\t\t\t\ttrue\n\t\t\t\t),\n\t\t\t\tcommand.ReferenceLocation\n\t\t\t);\n\t\t}\n\t}\n}", "CodeBleu_score": 23.194162069550988}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\t// Create a new list of Diagnostics to store the results of the function.\n\tList<Diagnostic> unknownCommands = new List<Diagnostic>();\n\n\t// For each command reference in the YarnFileData object,\n\tforeach (CommandReference commandReference in yarnFile.Commands) {\n\t\t// If the command reference does not have a corresponding command definition in the project's known commands,\n\t\tif (!KnownCommands.ContainsKey(commandReference.Command)) {\n\t\t\t// Create a new Diagnostic object with a warning message, severity level, code, and additional data about the command.\n\t\t\tDiagnostic diagnostic = new Diagnostic(\n\t\t\t\t// The range of the command reference in the YarnFileData object.\n\t\t\t\tcommandReference.Range,\n\t\t\t\t// The warning message to display.\n\t\t\t\t$\"Unknown command '{commandReference.Command}'\",\n\t\t\t\t// The severity level of the warning.\n\t\t\t\tDiagnosticSeverity.Warning,\n\t\t\t\t// The code to associate with the warning.\n\t\t\t\t\"unknown-command\",\n\t\t\t\t// Additional data about the command.\n\t\t\t\tnew Dictionary<string, string> {\n\t\t\t\t\t{ \"command\", commandReference.Command }\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Add the Diagnostic object to the list of unknown commands.\n\t\t\tunknownCommands.Add(diagnostic);\n\t\t}\n\t}\n\n\t// Return the list of unknown commands as an enumerable collection.\n\treturn unknownCommands;\n}", "CodeBleu_score": 19.59871890793093}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar registrationOptions = new CodeActionRegistrationOptions {\n\t\tDocumentSelector = new DocumentSelector(new[] { new DocumentFilter { Language = \"yarn\" } }),\n\t\tCodeActionKinds = new CodeActionKind[] { CodeActionKind.QuickFix },\n\t};\n\n\treturn registrationOptions;\n}", "CodeBleu_score": 33.64838825812422}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar registrationOptions = new CodeActionRegistrationOptions {\n\t\tDocumentSelector = new DocumentSelector(new[] { new DocumentFilter { Language = Languages.Yarn, Pattern = \"**/*.{yarn,yarn.txt}\" } }),\n\t\tCodeActionKinds = new[] { CodeActionKind.QuickFix },\n\t};\n\tregistrationOptions.ResolveProvider = false;\n\treturn registrationOptions;\n}", "CodeBleu_score": 33.11095896641515}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tif (capability!= CodeActionCapability.Supported) {\n\t\treturn null;\n\t}\n\n\tvar options = new CodeActionRegistrationOptions();\n\toptions.DocumentSelector = new DocumentSelector(new[] { new DocumentFilter(\n\t\tscheme: \"yarn\",\n\t\tpattern: \"**/*.yarn\"\n\t) });\n\toptions.ResolveProvider = false;\n\toptions.CodeActionKinds = new CodeActionKind[] { CodeActionKind.QuickFix };\n\treturn options;\n}", "CodeBleu_score": 34.851049178967955}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variableName == null) {\n\t\tthrow new ArgumentNullException(\"variableName\");\n\t}\n\tif (variableName == \"\") {\n\t\tthrow new ArgumentException(\"variableName cannot be empty\", \"variableName\");\n\t}\n\n\tVariable variable = null;\n\tif (this.variables.TryGetValue(variableName, out variable)) {\n\t\tif (variable.Type == typeof(T)) {\n\t\t\tresult = (T)variable.Value;\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(string.Format(\"variable {0} is not of type {1}\", variableName, typeof(T).FullName), \"variableName\");\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 47.05937185915128}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variableName == null) throw new ArgumentNullException(nameof(variableName));\n\tif (variableName.Length == 0) throw new ArgumentException(\"The variable name cannot be empty\", nameof(variableName));\n\tif (!variableName.StartsWith(variablePrefix)) throw new ArgumentException(\"The variable name must start with the variable prefix\", nameof(variableName));\n\n\tif (variableName.Length > variablePrefix.Length) {\n\t\tstring variableNameWithoutPrefix = variableName.Substring(variablePrefix.Length);\n\t\tif (variableNameWithoutPrefix.Length > 0) {\n\t\t\tif (variables.TryGetValue(variableNameWithoutPrefix, out object variableValue)) {\n\t\t\t\tif (variableValue is T variableValueAsT) {\n\t\t\t\t\tresult = variableValueAsT;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tthrow new ArgumentException(\"The variable type is not compatible with the specified type T\", nameof(variableName));\n\t\t\t}\n\t\t\tresult = default(T);\n\t\t\treturn false;\n\t\t}\n\t}\n\tthrow new ArgumentException(\"The variable name must be at least 2 characters long\", nameof(variableName));\n}", "CodeBleu_score": 32.97848224347254}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variables.ContainsKey(variableName)) {\n\t\tif (variables[variableName].GetType() == typeof(T)) {\n\t\t\tresult = (T)variables[variableName];\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(\"The variable type is incompatible with the specified type T.\");\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 43.56711367547214}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tthis.library = new Library();\n\tthis.virtualMachine = new VirtualMachine(this.library);\n\tthis.library.Import(new StandardLibrary());\n\tthis.library.RegisterFunction(\"nodeVisitCount\", GetNodeVisitCount);\n\tthis.library.RegisterFunction(\"isNodeVisited\", IsNodeVisited);\n\tthis.lineParser = new LineParser(this.library);\n\tthis.lineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n\tthis.lineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n\tthis.lineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 32.35201123634383}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\t// Create the library and virtual machine\n\tLibrary = new Library();\n\tVirtualMachine = new VirtualMachine(Library);\n\n\t// Import the standard library\n\tLibrary.Import(new StandardLibrary());\n\n\t// Register functions for node visit tracking\n\tLibrary.RegisterFunction(\"GetNodeVisitCount\", GetNodeVisitCount);\n\tLibrary.RegisterFunction(\"IsNodeVisited\", IsNodeVisited);\n\n\t// Create the line parser\n\tLineParser = new LineParser();\n\tLineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n\tLineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n\tLineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 33.13935316155607}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tLibrary = new Library();\nVirtualMachine = new VirtualMachine(Library);\nLibrary.Import(StandardLibrary.GetStandardLibrary());\nLibrary.RegisterFunction(\"GetNodeVisitCount\", GetNodeVisitCount);\nLibrary.RegisterFunction(\"IsNodeVisited\", IsNodeVisited);\nLineParser = new LineParser(Library);\nLineParser.RegisterMarkerProcessor(\"select\", new SelectMarkerProcessor());\nLineParser.RegisterMarkerProcessor(\"plural\", new PluralMarkerProcessor());\nLineParser.RegisterMarkerProcessor(\"ordinal\", new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 33.38055342067118}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 53.03738284040691}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 53.03738284040691}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tint Index = -1;\n\tfor (int i=0; i<LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\tIndex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn Index;\n}", "CodeBleu_score": 31.751587358232}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.id = GetNextID();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 37.67753783041913}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.ID = GenerateNewID();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 37.89392355336286}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.id = GenerateID();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 37.743305533815615}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tm_ScrollCell.gameObject.name = m_PrefabName + \"_\" + idx;\n\t}\n\tif (m_IsUpdateCellContent) {\n\t\tUpdateCellContent();\n\t}\n\tif (m_IsUpdateCellContent && m_ClickEvent!= null) {\n\t\tm_ClickEvent(ClickUniqueID, ClickObject);\n\t}\n}", "CodeBleu_score": 48.552853806916254}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tUpdateGameObjectName();\n\t}\n\tif (ClickUniqueID!= \"\") {\n\t\tm_ClickUniqueID = ClickUniqueID;\n\t}\n\tif (ClickObject!= null) {\n\t\tm_ClickObject = ClickObject;\n\t}\n}", "CodeBleu_score": 44.55870268940926}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_PrefabName + \" \" + m_IndexID;\n\t}\n\tUpdateCell();\n}", "CodeBleu_score": 52.353458026470825}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t\t// Parse the input field text to determine how many items to add\n\tint itemsToAdd = 0;\n\tif (int.TryParse(InputFieldAddData.text, out itemsToAdd)) {\n\t\t// Add random integers between 0 and 10 to the list bank\n\t\tfor (int i = 0; i < itemsToAdd; i++) {\n\t\t\tlistBank.Add(Random.Range(0, 10));\n\t\t}\n\t\t// Update the total count of the scroll rect\n\t\ttotalCount = listBank.Count;\n\t\t// Refresh the displayed cells\n\t\tRefreshCells();\n\t}\n}", "CodeBleu_score": 33.6726999038739}, {"code": "private void OnButtonAddDataClickk(){\n\t\tif (InputFieldAddData.text.Length == 0) {\n\t\treturn;\n\t}\n\tint numToAdd = int.Parse(InputFieldAddData.text);\n\tif (numToAdd <= 0) {\n\t\treturn;\n\t}\n\tfor (int i = 0; i < numToAdd; i++) {\n\t\tbank.Add(Random.Range(0, 10));\n\t}\n\ttotalCount = bank.Count;\n\tUpdateScrollRect();\n}", "CodeBleu_score": 32.16081870872576}, {"code": "private void OnButtonAddDataClickk(){\n\t\t// Get the input field text\n\tstring inputText = InputFieldAddData.text;\n\t// If the input field is empty, do nothing\n\tif (inputText == \"\") {\n\t\treturn;\n\t}\n\t// Parse the input text to determine the number of items to add\n\tint numItemsToAdd = 0;\n\tif (int.TryParse(inputText, out numItemsToAdd) == false) {\n\t\treturn;\n\t}\n\t// Make sure at least one item is added\n\tif (numItemsToAdd <= 0) {\n\t\treturn;\n\t}\n\t// Add the items to the list bank\n\tfor (int i = 0; i < numItemsToAdd; i++) {\n\t\tlistBank.Add(Random.Range(0, 10));\n\t}\n\t// Update the total count of the scroll rect\n\ttotalCount = listBank.Count;\n\t// Refresh the displayed cells\n\tRefreshCells();\n}", "CodeBleu_score": 37.70190487367039}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\tif (m_TempPoolStartIndex > 0) {\n\t\tfor (int i = 0; i < m_TempPoolStartIndex; i++) {\n\t\t\tm_TempPool[i].ReturnToPool();\n\t\t}\n\t\tm_TempPoolStartIndex = 0;\n\t}\n\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\tif (m_TempPoolEndIndex < m_TempPool.Length - 1) {\n\t\tfor (int i = m_TempPoolEndIndex + 1; i < m_TempPool.Length; i++) {\n\t\t\tm_TempPool[i].ReturnToPool();\n\t\t}\n\t\tm_TempPoolEndIndex = m_TempPool.Length - 1;\n\t}\n}", "CodeBleu_score": 39.208238278297685}, {"code": "protected override void ClearTempPool(){\n\t\tif (tempPool.Count > 0) {\n\t\tfor (int i = 0; i < tempPool.Count; i++) {\n\t\t\tif (tempPool[i].isMarkedForDeletion) {\n\t\t\t\ttempPool[i].isMarkedForDeletion = false;\n\t\t\t\ttempPool[i].transform.SetParent(prefabSource);\n\t\t\t}\n\t\t}\n\t\ttempPool.RemoveAll(x => x.isMarkedForDeletion);\n\t}\n}", "CodeBleu_score": 24.136109189498374}, {"code": "protected override void ClearTempPool(){\n\t\tif (m_TempPool.Count > 0) {\n\t\tint count = m_TempPool.Count;\n\t\tfor (int i = 0; i < count; ++i) {\n\t\t\tm_TempPool[i].ReturnToPool(m_PrefabSource);\n\t\t}\n\t\tm_TempPool.Clear();\n\t\tm_StartIndex = 0;\n\t\tm_EndIndex = 0;\n\t}\n}", "CodeBleu_score": 18.180608668049086}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (Network.isClient && Network.isClientActive && Network.peerType == NetworkPeerType.Client) {\n\t\tif (Network.connection.isAuthoritative) {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.localScale = newScale;\n\t\t} else {\n\t\t\ttransform.localScale = newScale;\n\t\t\ttransform.localScale = newScale;\n\t\t}\n\t\tnetworkView.RPC(\"RPC_AnticipateScale\", RPCMode.Others, newScale);\n\t}\n}", "CodeBleu_score": 23.418070326089364}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (NetworkClient.isConnected && NetworkServer.active) {\n\t\tif (NetworkClient.active && NetworkServer.active) {\n\t\t\tlocalScale = newScale;\n\t\t\tanticipatedScale = newScale;\n\t\t\tauthoritativeScale = newScale;\n\t\t}\n\t\tRecordAnticipatedTransform(newScale);\n\t\tif (NetworkServer.active) {\n\t\t\tsmoothTransitionDuration = 0f;\n\t\t\tcurrentSmoothTime = 0f;\n\t\t}\n\t}\n}", "CodeBleu_score": 19.636365549139896}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t", "CodeBleu_score": 1.9669683836209269}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\t// Iterate over all animation updates\n\tfor (int i = 0; i < m_AnimationUpdates.Count; ++i) {\n\t\t// Send the update to the appropriate client or server\n\t\tif (isServer) {\n\t\t\t// Send the animation update to all clients\n\t\t\tRpcSendAnimationUpdate(m_AnimationUpdates[i].m_AnimationName, m_AnimationUpdates[i].m_NormalizedTime);\n\t\t} else {\n\t\t\t// Send the animation update to the server\n\t\t\tCmdSendAnimationUpdate(m_AnimationUpdates[i].m_AnimationName, m_AnimationUpdates[i].m_NormalizedTime);\n\t\t}\n\t}\n\n\t// Clear the animation update list\n\tm_AnimationUpdates.Clear();\n\n\t// Iterate over all parameter updates\n\tfor (int i = 0; i < m_ParameterUpdates.Count; ++i) {\n\t\t// Send the update to the appropriate client or server\n\t\tif (isServer) {\n\t\t\t// Send the parameter update to all clients\n\t\t\tRpcSendParameterUpdate(m_ParameterUpdates[i].m_Name, m_ParameterUpdates[i].m_Value);\n\t\t} else {\n\t\t\t// Send the parameter update to the server\n\t\t\tCmdSendParameterUpdate(m_ParameterUpdates[i].m_Name, m_ParameterUpdates[i].m_Value);\n\t\t}\n\t}\n\n\t// Clear the parameter update list\n\tm_ParameterUpdates.Clear();\n\n\t// Iterate over all trigger updates\n\tfor (int i = 0; i < m_TriggerUpdates.Count; ++i) {\n\t\t// Send the update to the appropriate client or server\n\t\tif (isServer) {\n\t\t\t// Send the trigger update to all clients\n\t\t\tRpcSendTriggerUpdate(m_TriggerUpdates[i].m_Name);\n\t\t} else {\n\t\t\t// Send the trigger update to the server\n\t\t\tCmdSendTriggerUpdate(m_TriggerUpdates[i].m_Name);\n\t\t}\n\t}\n\n\t// Clear the trigger update list\n\tm_TriggerUpdates.Clear();\n}", "CodeBleu_score": 45.16659242868579}, {"code": "private void FlushMessages(){\n\t\tif (isClient) {\n\t\tif (animator!= null) {\n\t\t\tif (animator.hasState) {\n\t\t\t\tanimator.SendAnimation(animator.state, animator.stateHash);\n\t\t\t}\n\t\t\tif (animator.hasParameters) {\n\t\t\t\tanimator.SendParameters(animator.parameters, animator.parameterHash);\n\t\t\t}\n\t\t\tif (animator.hasTriggers) {\n\t\t\t\tanimator.SendTriggers(animator.triggers, animator.triggerHash);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tif (animator!= null) {\n\t\t\tif (animator.hasState) {\n\t\t\t\tanimator.SendAnimation(animator.state, animator.stateHash);\n\t\t\t}\n\t\t\tif (animator.hasParameters) {\n\t\t\t\tanimator.SendParameters(animator.parameters, animator.parameterHash);\n\t\t\t}\n\t\t\tif (animator.hasTriggers) {\n\t\t\t\tanimator.SendTriggers(animator.triggers, animator.triggerHash);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 29.44967918901879}, {"code": "private void FlushMessages(){\n\t\t// Flush animation updates\n\tif (m_Animator.m_AnimationQueue.Count > 0) {\n\t\tif (m_IsServer) {\n\t\t\t// Send all animation updates to all clients\n\t\t\tforeach (var animator in m_Animators) {\n\t\t\t\tanimator.m_Animator.RpcSetAnimationQueue(m_Animator.m_AnimationQueue);\n\t\t\t}\n\t\t} else {\n\t\t\t// Send the first animation update to the server\n\t\t\tm_Animator.m_Animator.RpcSetAnimationQueue(m_Animator.m_AnimationQueue);\n\t\t}\n\t\tm_Animator.m_AnimationQueue.Clear();\n\t}\n\n\t// Flush parameter updates\n\tif (m_Animator.m_ParameterQueue.Count > 0) {\n\t\tif (m_IsServer) {\n\t\t\t// Send all parameter updates to all clients\n\t\t\tforeach (var animator in m_Animators) {\n\t\t\t\tanimator.m_Animator.RpcSetParameterQueue(m_Animator.m_ParameterQueue);\n\t\t\t}\n\t\t} else {\n\t\t\t// Send the first parameter update to the server\n\t\t\tm_Animator.m_Animator.RpcSetParameterQueue(m_Animator.m_ParameterQueue);\n\t\t}\n\t\tm_Animator.m_ParameterQueue.Clear();\n\t}\n\n\t// Flush trigger updates\n\tif (m_Animator.m_TriggerQueue.Count > 0) {\n\t\tif (m_IsServer) {\n\t\t\t// Send all trigger updates to all clients\n\t\t\tforeach (var animator in m_Animators) {\n\t\t\t\tanimator.m_Animator.RpcSetTriggerQueue(m_Animator.m_TriggerQueue);\n\t\t\t}\n\t\t} else {\n\t\t\t// Send the first trigger update to the server\n\t\t\tm_Animator.m_Animator.RpcSetTriggerQueue(m_Animator.m_TriggerQueue);\n\t\t}\n\t\tm_Animator.m_TriggerQueue.Clear();\n\t}\n}", "CodeBleu_score": 45.454912691994544}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\n/// <summary>\n/// If the animator is the owner, or the server, it will flush the pending messages.\n/// </summary>\nif (updateStage == NetworkUpdateStage.PreUpdate) {\n\nif (IsOwner) {\n\n/// <summary>\n/// Flush the pending messages.\n/// </summary>\nFlushMessages();\n}\n\n}\n\n/// <summary>\n/// If the animator is the server, it will process the pending parameter updates.\n/// </summary>\nif (updateStage == NetworkUpdateStage.PreUpdate) {\n\n/// <summary>\n/// Process the pending parameter updates.\n/// </summary>\nProcessParameterUpdates();\n}\n\n/// <summary>\n/// If the animator is the server, it will process the pending animator updates.\n/// </summary>\nif (updateStage == NetworkUpdateStage.PostUpdate) {\n\n/// <summary>\n/// Process the pending animator updates.\n/// </summary>\nProcessAnimatorUpdates();\n}\n}", "CodeBleu_score": 21.858051805045147}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tswitch (updateStage) {\n\t\tcase NetworkUpdateStage.PreUpdate:\n\t\t\tif (IsOwner) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\t\t\tif (IsServer) {\n\t\t\t\tProcessParameterUpdates();\n\t\t\t\tCheckAnimatorChanges();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NetworkUpdateStage.PostUpdate:\n\t\t\tif (IsServer) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 27.99937550872046}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tswitch (updateStage) {\n\t\tcase NetworkUpdateStage.PreUpdate:\n\t\t\tif (m_NetworkAnimator.IsOwner || m_NetworkAnimator.IsServer) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NetworkUpdateStage.FixedUpdate:\n\t\t\tif (m_NetworkAnimator.IsOwner || m_NetworkAnimator.IsServer) {\n\t\t\t\tProcessParameterUpdates();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NetworkUpdateStage.PostUpdate:\n\t\t\tif (m_NetworkAnimator.IsOwner || m_NetworkAnimator.IsServer) {\n\t\t\t\tProcessAnimatorChanges();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 33.34264910100542}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t", "CodeBleu_score": 2.2389150259391823}, {"code": "private void UpdateOwnershipAuthority(){\n\t\t// Check if we are the server\n\tif (!PhotonNetwork.IsMasterClient) {\n\t\t// If we are not the server, we don't need to do anything\n\t\treturn;\n\t}\n\n\t// Check if we are the owner\n\tif (PhotonNetwork.LocalPlayer.IsMasterClient) {\n\t\t// If we are the owner, we set the object to be kinematic and set interpolation to Off\n\t\trb.isKinematic = true;\n\t\trb.interpolation = RigidbodyInterpolation.Off;\n\t} else {\n\t\t// If we are not the owner, we set the object to be dynamic and set interpolation to Interpolate\n\t\trb.isKinematic = false;\n\t\trb.interpolation = RigidbodyInterpolation.Interpolate;\n\t}\n}", "CodeBleu_score": 24.9179049539125}, {"code": "private void UpdateOwnershipAuthority(){\n\t\t// If the authority is not the server, then set the authority state to AuthorityState.None\n\tif (m_Authority!= AuthorityType.Server) {\n\t\tm_AuthorityState = AuthorityState.None;\n\t\t// If the object is kinematic, then set the interpolation to None\n\t\tif (m_Rigidbody.isKinematic) {\n\t\t\tm_Rigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t}\n\t\t// If the object is not kinematic, then set the interpolation to Interpolate\n\t\telse {\n\t\t\tm_Rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t}\n\t}\n\t// If the authority is the server, then set the authority state to AuthorityState.Owner\n\telse if (m_Authority == AuthorityType.Server) {\n\t\tm_AuthorityState = AuthorityState.Owner;\n\t\t// If the object is kinematic, then set the interpolation to None\n\t\tif (m_Rigidbody.isKinematic) {\n\t\t\tm_Rigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t}\n\t\t// If the object is not kinematic, then set the interpolation to Interpolate\n\t\telse {\n\t\t\tm_Rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t}\n\t}\n\t// If the authority is the client, then set the authority state to AuthorityState.ClientOwner\n\telse if (m_Authority == AuthorityType.Client) {\n\t\tm_AuthorityState = AuthorityState.ClientOwner;\n\t\t// If the object is kinematic, then set the interpolation to None\n\t\tif (m_Rigidbody.isKinematic) {\n\t\t\tm_Rigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t}\n\t\t// If the object is not kinematic, then set the interpolation to Interpolate\n\t\telse {\n\t\t\tm_Rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t}\n\t}\n}", "CodeBleu_score": 28.529324530328275}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\t// Calculate the sum of squared magnitudes of the components to skip.\n\tfloat sumOfSquaredMagnitudes = 0.0f;\n\tif ((compressed & 0x80000000)!= 0) {\n\t\tsumOfSquaredMagnitudes += quaternion.x * quaternion.x;\n\t}\n\tif ((compressed & 0x40000000)!= 0) {\n\t\tsumOfSquaredMagnitudes += quaternion.y * quaternion.y;\n\t}\n\tif ((compressed & 0x20000000)!= 0) {\n\t\tsumOfSquaredMagnitudes += quaternion.z * quaternion.z;\n\t}\n\tif ((compressed & 0x10000000)!= 0) {\n\t\tsumOfSquaredMagnitudes += quaternion.w * quaternion.w;\n\t}\n\n\t// Calculate the skipped component.\n\tfloat skippedComponent = Mathf.Sqrt(1.0f - sumOfSquaredMagnitudes);\n\n\t// Decompress the remaining components.\n\tif ((compressed & 0x80000000) == 0) {\n\t\tquaternion.x = Decompress(compressed, 0, skippedComponent);\n\t}\n\tif ((compressed & 0x40000000) == 0) {\n\t\tquaternion.y = Decompress(compressed, 1, skippedComponent);\n\t}\n\tif ((compressed & 0x20000000) == 0) {\n\t\tquaternion.z = Decompress(compressed, 2, skippedComponent);\n\t}\n\tif ((compressed & 0x10000000) == 0) {\n\t\tquaternion.w = Decompress(compressed, 3, skippedComponent);\n\t}\n}", "CodeBleu_score": 26.53881253446698}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tuint x = compressed & 0x00000003;\n\tuint y = (compressed & 0x0000000C) >> 2;\n\tuint z = (compressed & 0x00000030) >> 4;\n\tuint w = (compressed & 0x000000C0) >> 6;\n\tfloat x2 = (x == 0)? 0 : (x == 1)? -1 : 1;\n\tfloat y2 = (y == 0)? 0 : (y == 1)? -1 : 1;\n\tfloat z2 = (z == 0)? 0 : (z == 1)? -1 : 1;\n\tfloat w2 = (w == 0)? 0 : (w == 1)? -1 : 1;\n\tfloat sum = x2 * x2 + y2 * y2 + z2 * z2 + w2 * w2;\n\tfloat scale = 1 / Mathf.Sqrt(sum);\n\tquaternion.x = x2 * scale;\n\tquaternion.y = y2 * scale;\n\tquaternion.z = z2 * scale;\n\tquaternion.w = w2 * scale;\n}", "CodeBleu_score": 19.305936136180865}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t\t//Create a new AppDomain to load the assembly\n\tAppDomain domain = AppDomain.CreateDomain(\"ILRuntimeCLRBinding\");\n\t//Load the assembly from a specified file\n\tAssembly assembly = domain.Load(AssemblyName.GetAssemblyName(AssemblyPath));\n\t//Initialize ILRuntime with the domain\n\tILRuntime.Runtime.Enviorment.AppDomain = new ILRuntime.Runtime.ILRuntimeDomain(domain);\n\t//Generate CLR binding code\n\tILRuntime.Runtime.CLRBinding.BindingCodeGenerator.GenerateBindingCode(assembly);\n\t//Refresh the AssetDatabase\n\tAssetDatabase.Refresh();\n\t//Unload the AppDomain\n\tAppDomain.Unload(domain);\n}", "CodeBleu_score": 24.536355654612812}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t", "CodeBleu_score": 0.925914944286159}, {"code": "public override void OnInspectorGUI(){\n\t\t// Update the serialized object\n\tserializedObject.Update();\n\n\t// Display the config count and cached bytes size if the application is playing and the target is a prefab in the hierarchy\n\tif (Application.isPlaying && target is ConfigComponent) {\n\t\tConfigComponent config = target as ConfigComponent;\n\t\tEditorGUILayout.LabelField(\"Config Count: \" + config.configCount);\n\t\tEditorGUILayout.LabelField(\"Cached Bytes Size: \" + config.cachedBytesSize);\n\t}\n\n\t// Display the properties\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configs\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configCount\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"cachedBytesSize\"));\n\n\t// Disable the group if the application is playing and the target is a prefab in the hierarchy\n\tif (Application.isPlaying && target is ConfigComponent) {\n\t\tEditorGUILayout.BeginDisabledGroup(true);\n\t}\n\n\t// Apply any modified properties\n\tserializedObject.ApplyModifiedProperties();\n\n\t// Repaint the inspector\n\tEditorUtility.SetDirty(target);\n\tSceneView.RepaintAll();\n}", "CodeBleu_score": 51.38779876626835}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\n\tif (Application.isPlaying) {\n\t\tif (target is ConfigComponent) {\n\t\t\tConfigComponent config = target as ConfigComponent;\n\t\t\tif (config.IsPrefab) {\n\t\t\t\tEditorGUILayout.BeginHorizontal();\n\t\t\t\tEditorGUILayout.LabelField(\"Config Count\", config.ConfigCount.ToString());\n\t\t\t\tEditorGUILayout.LabelField(\"Cached Bytes Size\", config.CachedBytesSize.ToString());\n\t\t\t\tEditorGUILayout.EndHorizontal();\n\t\t\t}\n\t\t}\n\t}\n\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying);\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"config\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configName\"));\n\n\tserializedObject.ApplyModifiedProperties();\n\n\tEditorGUI.EndDisabledGroup();\n\n\tEditorGUILayout.Space();\n\tEditorGUILayout.Space();\n\n\tbase.OnInspectorGUI();\n}", "CodeBleu_score": 56.195401337248796}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t\t// Create a HashSet of default scene names\n\tHashSet<string> defaultScenes = new HashSet<string>();\n\tdefaultScenes.Add(\"Assets/Scenes/Scene1.unity\");\n\tdefaultScenes.Add(\"Assets/Scenes/Scene2.unity\");\n\tdefaultScenes.Add(\"Assets/Scenes/Scene3.unity\");\n\n\t// Convert the HashSet into a list of EditorBuildSettingsScene objects\n\tList<EditorBuildSettingsScene> defaultSceneList = new List<EditorBuildSettingsScene>();\n\tforeach (string scene in defaultScenes) {\n\t\tdefaultSceneList.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\n\t// Update the EditorBuildSettings with the default scene list\n\tEditorBuildSettings.scenes = defaultSceneList.ToArray();\n\n\t// Log that the scenes have been set to the default\n\tDebug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 58.84734615030882}, {"code": "public static void DefaultScenes(){\n\t\tList<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n\tHashSet<string> defaultSceneNames = new HashSet<string>();\n\tdefaultSceneNames.Add(\"Assets/Scenes/TitleScreen.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/GameScene.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/GameOverScene.unity\");\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tdefaultScenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\tEditorBuildSettings.scenes = defaultScenes.ToArray();\n\tDebug.Log(\"Scenes have been set to default.\");\n}", "CodeBleu_score": 59.62644398157113}, {"code": "public static void DefaultScenes(){\n\t", "CodeBleu_score": 1.3756526078371607}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\t// Draw the helper type popup menu\n\tEditorGUILayout.BeginHorizontal();\n\tEditorGUILayout.LabelField(\"Helper Type\", GUILayout.Width(100));\n\tint selectedIndex = EditorGUILayout.Popup(m_selectedIndex, m_helperTypes.ToArray(), GUILayout.Width(200));\n\tif (selectedIndex!= m_selectedIndex) {\n\t\tm_selectedIndex = selectedIndex;\n\t\tm_helperType = m_helperTypes[selectedIndex];\n\t\tm_customHelper = string.Empty;\n\t\tm_customHelperError = string.Empty;\n\t\tm_customHelperError = string.Empty;\n\t}\n\tEditorGUILayout.EndHorizontal();\n\t\n\t// Draw the custom helper field\n\tEditorGUILayout.BeginHorizontal();\n\tEditorGUILayout.LabelField(\"Custom Helper\", GUILayout.Width(100));\n\tm_customHelper = EditorGUILayout.TextField(m_customHelper, GUILayout.Width(200));\n\tEditorGUILayout.EndHorizontal();\n\t\n\t// Display an error message if the custom helper is not set\n\tif (string.IsNullOrEmpty(m_customHelper)) {\n\t\tEditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n\t}\n}", "CodeBleu_score": 36.42372139671905}, {"code": "public void Draw(){\n\t\nEditorGUILayout.BeginHorizontal();\nEditorGUILayout.PrefixLabel(\"Helper Type\");\nif (GUILayout.Button(new GUIContent(HelperType.ToString(), \"Select a helper type\"))) {\nGenericMenu menu = new GenericMenu();\nforeach (HelperType type in Enum.GetValues(typeof(HelperType))) {\nmenu.AddItem(new GUIContent(type.ToString()), false, OnHelperTypeSelected, type);\n}\nmenu.ShowAsContext();\n}\nEditorGUILayout.EndHorizontal();\n\nif (HelperType == HelperType.Custom) {\nEditorGUILayout.PrefixLabel(\"Custom Helper\");\nCustomHelper = EditorGUILayout.TextField(CustomHelper);\nEditorGUILayout.HelpBox(\"If this field is empty, the helper will not be used.\", MessageType.Error);\n}\n}", "CodeBleu_score": 35.231647088827586}, {"code": "public void Draw(){\n\t\n//    if (EditorGUI.EndChangeCheck())\n//    {\n//        EditorUtility.SetDirty(this);\n//    }\n\n//    EditorGUI.BeginChangeCheck();\n\n    if (m_HelperType!= HelperType.Custom)\n    {\n        m_HelperType = (HelperType)EditorGUILayout.EnumPopup(FieldNameForDisplay(nameof(m_HelperType)), m_HelperType);\n    }\n\n    if (m_HelperType == HelperType.Custom)\n    {\n        m_CustomHelper = EditorGUILayout.TextField(FieldNameForDisplay(nameof(m_CustomHelper)), m_CustomHelper);\n        if (string.IsNullOrEmpty(m_CustomHelper))\n        {\n            EditorGUILayout.HelpBox(\"Please enter a custom helper type\", MessageType.Error);\n        }\n    }\n\n//    if (EditorGUI.EndChangeCheck())\n//    {\n//        EditorUtility.SetDirty(this);\n//    }\n}", "CodeBleu_score": 43.33346094375945}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\t#if UNITY_EDITOR\n\t\t// Remove general logging symbol\n\t\tPlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Replace(\"LOGGING\", \"\"));\n\n\t\t// Iterate through all logging symbols and remove them\n\t\tfor (int i = 0; i < Logging.LoggingLevels.Length; i++) {\n\t\t\tPlayerSettings.SetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup, PlayerSettings.GetScriptingDefineSymbolsForGroup(EditorUserBuildSettings.selectedBuildTargetGroup).Replace(\"LOGGING_\" + Logging.LoggingLevels[i], \"\"));\n\t\t}\n\t#endif\n}", "CodeBleu_score": 38.008559128591344}, {"code": "public static void DisableAllLogs(){\n\t\t// Remove general logging symbol.\n\tPlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(\"LOGGING\", \"\"));\n\n\t// Iterate through all logging levels and remove symbols.\n\tforeach(LoggingLevel level in Enum.GetValues(typeof(LoggingLevel))) {\n\t\tif(level!= LoggingLevel.Off) {\n\t\t\tPlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Replace(level.ToString(), \"\"));\n\t\t}\n\t}\n}", "CodeBleu_score": 36.7303155740115}, {"code": "public static void DisableAllLogs(){\n\t", "CodeBleu_score": 2.9649991162360623}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\treturn GetComponent(type, false);\n}", "CodeBleu_score": 6.971144137987794}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tGameFrameworkComponent current = first;\n\twhile (current!= null) {\n\t\tif (current.GetType() == type) {\n\t\t\tcomponent = current;\n\t\t\tbreak;\n\t\t}\n\t\tcurrent = current.next;\n\t}\n\treturn component;\n}", "CodeBleu_score": 41.70230152652237}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tGameFrameworkComponent current = first;\n\twhile (current!= null) {\n\t\tif (current.GetType() == type) {\n\t\t\tcomponent = current;\n\t\t\tbreak;\n\t\t}\n\t\tcurrent = current.next;\n\t}\n\treturn component;\n}", "CodeBleu_score": 41.70230152652237}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tif (BaseComponent) {\n\t\t\tBaseComponent.Shutdown();\n\t\t}\n\t\tif (GameScene) {\n\t\t\tGameScene.LoadScene(GameScene.name);\n\t\t}\n\t}\n\telse if (shutdownType == ShutdownType.Quit) {\n\t\tif (BaseComponent) {\n\t\t\tBaseComponent.Shutdown();\n\t\t}\n\t\tApplication.Quit();\n\t}\n\telse if (shutdownType == ShutdownType.None) {\n\t\tif (BaseComponent) {\n\t\t\tBaseComponent.Shutdown();\n\t\t}\n\t}\n\telse {\n\t\tthrow new System.Exception(\"Invalid shutdown type: \" + shutdownType.ToString());\n\t}\n}", "CodeBleu_score": 27.732341294519024}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tif (BaseComponent!= null) {\n\t\t\tBaseComponent.Shutdown();\n\t\t}\n\t\tRestart();\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tif (BaseComponent!= null) {\n\t\t\tBaseComponent.Shutdown();\n\t\t}\n\t\tQuit();\n\t} else if (shutdownType == ShutdownType.None) {\n\t\tif (BaseComponent!= null) {\n\t\t\tBaseComponent.Shutdown();\n\t\t}\n\t}\n}", "CodeBleu_score": 24.296909737826912}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tif (GameManager.gameScene!= null) {\n\t\t\tGameManager.gameScene.Restart();\n\t\t}\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 17.149406015370744}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_configManager = GameFrameworkEntry.GetModule<ConfigManager>();\n\tif (m_configManager == null) {\n\t\tLog.Fatal(\"ConfigManager is invalid.\");\n\t\treturn;\n\t}\n\tm_configManager.Subscribe(this);\n\tif (m_readDataSuccessEvent!= null) {\n\t\tm_configManager.Subscribe(m_readDataSuccessEvent, this);\n\t}\n\tif (m_readDataFailureEvent!= null) {\n\t\tm_configManager.Subscribe(m_readDataFailureEvent, this);\n\t}\n\tif (m_updateDependencyAssetEvent!= null && m_updateDependencyAsset) {\n\t\tm_configManager.Subscribe(m_updateDependencyAssetEvent, this);\n\t}\n}", "CodeBleu_score": 43.230429877472844}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_configManager = GameFrameworkEntry.GetModule<IConfigManager>();\n\tif (m_configManager == null) {\n\t\tLogFatal(\"Config manager is invalid.\");\n\t\treturn;\n\t}\n\n\tif (m_configAsset!= null) {\n\t\tm_configManager.Subscribe(m_configAsset, m_configAsset.GetInstanceID(), OnConfigAssetSuccess, OnConfigAssetFailure);\n\t}\n\n\tif (m_configAsset!= null && m_loadConfigOnAwake) {\n\t\tm_configManager.LoadConfig(m_configAsset);\n\t}\n\n\tif (m_configAsset!= null && m_loadConfigOnAwake && m_loadConfigOnUpdate) {\n\t\tm_configManager.Subscribe(m_configAsset, m_configAsset.GetInstanceID(), OnConfigAssetSuccess, OnConfigAssetFailure);\n\t}\n\n\tif (m_configAsset!= null && m_loadConfigOnAwake && m_loadConfigOnDependencyAsset) {\n\t\tm_configManager.Subscribe(m_configAsset, m_configAsset.GetInstanceID(), OnConfigAssetSuccess, OnConfigAssetFailure);\n\t}\n}", "CodeBleu_score": 42.704584902664024}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\n\t// Obtain the configuration manager from the Game Framework entry.\n\tm_ConfigurationManager = GameFrameworkEntry.GetModule<ConfigurationManager>();\n\tif (m_ConfigurationManager == null) {\n\t\tLog.Fatal(\"Configuration manager is invalid.\");\n\t\treturn;\n\t}\n\n\t// Subscribe to events for reading data success and failure.\n\tm_ConfigurationManager.OnReadDataSuccessEvent += OnReadDataSuccess;\n\tm_ConfigurationManager.OnReadDataFailureEvent += OnReadDataFailure;\n\n\t// Subscribe to events for updating and dependency asset events based on specific flags.\n\tif ((m_UpdateFlags & UpdateFlags.Update)!= 0) {\n\t\tm_ConfigurationManager.OnUpdateAssetEvent += OnUpdateAsset;\n\t}\n\tif ((m_UpdateFlags & UpdateFlags.DependencyAsset)!= 0) {\n\t\tm_ConfigurationManager.OnDependencyAssetEvent += OnDependencyAsset;\n\t}\n}", "CodeBleu_score": 60.847866828960626}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset is TextAsset) {\n\t\tTextAsset textAsset = (TextAsset)configAsset;\n\t\tif (textAsset.name.EndsWith(byteExtension)) {\n\t\t\treturn ParseBytes(configManager, configAssetName, textAsset.bytes, userData);\n\t\t} else {\n\t\t\treturn ParseText(configManager, configAssetName, textAsset.text, userData);\n\t\t}\n\t} else {\n\t\tDebug.LogWarning(\"Config asset is not a TextAsset!\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 53.69701329818049}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset is TextAsset) {\n\t\treturn ReadData(configManager, configAssetName, (TextAsset)configAsset, userData);\n\t} else if (configAsset is byte[]) {\n\t\treturn ReadData(configManager, configAssetName, (byte[])configAsset, userData);\n\t} else {\n\t\tDebug.LogWarning(\"Invalid config asset: \" + configAssetName);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 51.41357574270364}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tDebug.LogWarning(\"Config asset is null!\");\n\t\treturn false;\n\t}\n\tif (configAsset is TextAsset) {\n\t\tif (configAssetName.EndsWith(byteExtension)) {\n\t\t\treturn ReadData(configManager, configAssetName, configAsset as TextAsset, userData);\n\t\t} else {\n\t\t\treturn ReadData(configManager, configAssetName, configAsset as TextAsset, userData);\n\t\t}\n\t} else {\n\t\tDebug.LogWarning(\"Config asset is not a TextAsset!\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 51.78890056382757}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t", "CodeBleu_score": 10.06829306491241}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\tif (configBytes == null) {\n\t\treturn false;\n\t}\n\tif (length == 0) {\n\t\treturn true;\n\t}\n\tif (configManager == null) {\n\t\treturn false;\n\t}\n\tif (startIndex < 0 || startIndex >= configBytes.Length) {\n\t\treturn false;\n\t}\n\tif (length < 0 || startIndex + length > configBytes.Length) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tint num = binaryReader.ReadInt32();\n\t\t\t\tfor (int i = 0; i < num; i++) {\n\t\t\t\t\tstring text = binaryReader.ReadString();\n\t\t\t\t\tstring text2 = binaryReader.ReadString();\n\t\t\t\t\tif (configManager.AddConfig(text, text2, userData)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tLog.Warning(\"ConfigManager: Failed to add config \" + text + \" = \" + text2 + \" to config manager.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tLog.Warning(\"ConfigManager: Failed to parse config data. \" + ex);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 53.253948079226845}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (memoryStream.Position < memoryStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tobject configValue = binaryReader.ReadObject();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue, userData)) {\n\t\t\t\t\t\tLog.Warning(\"Failed to add config entry with name \" + configName + \" and value \" + configValue + \" to config manager.\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception exception) {\n\t\tLog.Exception(exception);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 58.09336616510885}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configManager == null || configAsset == null) {\n\t\treturn;\n\t}\n\tResourceComponent resourceComponent = configManager.GetResourceComponent();\n\tif (resourceComponent!= null) {\n\t\tresourceComponent.UnloadAsset(configAsset);\n\t}\n}", "CodeBleu_score": 40.062901408681256}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tvar resourceComponent = configManager.GetResourceComponent();\n\tresourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 43.58864884808928}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tvar resourceComponent = configManager.GetComponent<ResourceComponent>();\n\tresourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 42.65981426055484}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\tActiveSceneChangedEventArgs newActiveSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\n\tnewActiveSceneChangedEventArgs.lastActiveScene = lastActiveScene;\n\tnewActiveSceneChangedEventArgs.activeScene = activeScene;\n\treturn newActiveSceneChangedEventArgs;\n }", "CodeBleu_score": 44.8386235100213}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\tActiveSceneChangedEventArgs newActiveSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\n\tnewActiveSceneChangedEventArgs.lastActiveScene = lastActiveScene;\n\tnewActiveSceneChangedEventArgs.activeScene = activeScene;\n\treturn newActiveSceneChangedEventArgs;\n}", "CodeBleu_score": 44.83802383132705}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\tActiveSceneChangedEventArgs newActiveSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\n\tnewActiveSceneChangedEventArgs.lastActiveScene = lastActiveScene;\n\tnewActiveSceneChangedEventArgs.activeScene = activeScene;\n\treturn newActiveSceneChangedEventArgs;\n}", "CodeBleu_score": 44.83802383132705}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tDebug.LogError(\"Scene asset name is empty.\");\n\t\treturn;\n\t}\n\n\tif (sceneAssetName.StartsWith(\"Assets/\") && sceneAssetName.EndsWith(\".unity\")) {\n\t\tLoadScene(sceneAssetName, priority, userData);\n\t} else {\n\t\tDebug.LogError(\"Scene asset name is invalid.\");\n\t}\n}", "CodeBleu_score": 52.775528450017696}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (!sceneAssetName.StartsWith(\"Assets/\") ||!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"Invalid scene asset name: \" + sceneAssetName);\n\t\treturn;\n\t}\n\tSceneManager.LoadScene(sceneAssetName, LoadSceneMode.Additive, priority, userData);\n}", "CodeBleu_score": 38.49713389867048}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tDebug.LogError(\"The scene asset name must start with \\\"Assets/\\\".\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"The scene asset name must end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\tsceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 46.75060913556969}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t", "CodeBleu_score": 2.5123187502257656}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register callbacks for when modular features are registered or unregistered\n\tFModuleManager::Get().OnModulesChanged().AddRaw(this, &FBinariesPatchFeatureModule::OnModulesChanged);\n\n\t// Retrieve registered feature implementations\n\tTArray<FName> FeatureImplementations = GetRegisteredFeatureImplementations();\n\n\t// Append feature implementations to the binaries patch feature enumerations\n\tfor (FName FeatureImplementation : FeatureImplementations) {\n\t\t// Append the feature implementation to the binaries patch feature enumeration\n\t\tBinariesPatchFeatureImplementations.Add(FeatureImplementation);\n\t}\n}", "CodeBleu_score": 33.38092449320676}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Get the feature implementations\n\tTArray<TSharedRef<IBinariesPatchFeature>> FeatureImplementations = IBinariesPatchFeature::Get();\n\n\t// Append their names to the enumerations\n\tfor (const TSharedRef<IBinariesPatchFeature>& FeatureImplementation : FeatureImplementations) {\n\t\tFString FeatureName = FeatureImplementation->GetName();\n\t\tif (!FeatureName.IsEmpty()) {\n\t\t\tFeatureNames.Add(FeatureName);\n\t\t}\n\t}\n\n\t// Register callbacks for when modular features are registered or unregistered\n\tFCoreDelegates::OnRegisterModularFeature.AddRaw(this, &FBinariesPatchFeatureModule::OnRegisterModularFeature);\n\tFCoreDelegates::OnUnregisterModularFeature.AddRaw(this, &FBinariesPatchFeatureModule::OnUnregisterModularFeature);\n}", "CodeBleu_score": 46.797148331090554}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tTMap<FString, FString> ConfigMap;\n\tTArray<FString> Tokens;\n\tCommandline.ParseIntoArray(Tokens, TEXT(\" \"), true);\n\tfor (int i = 0; i < Tokens.Num(); i++) {\n\t\tTokens[i].Split(TEXT(\"=\"), &ConfigMap.FindOrAdd(Tokens[i]), nullptr);\n\t}\n\tif (ConfigMap.Contains(Token)) {\n\t\tConfigMap[Token].ParseIntoArray(Result, TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 53.254496412066096}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tTMap<FString, FString> Map;\n\tCommandletHelper::ParseCommandLine(Commandline,Map);\n\tif (Map.Contains(Token)) {\n\t\tFString Value = Map[Token];\n\t\tValue.ParseIntoArray(Result,TEXT(\",\"),true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 56.95791637346643}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t", "CodeBleu_score": 9.464279801391635}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString commandletName;\n\tif (GIsCookerRunning) {\n\t\tcommandletName = GEngine->Exec(nullptr, TEXT(\"getcookcommandlet\"));\n\t}\n\treturn!commandletName.IsEmpty() && commandletName.Equals(TEXT(\"Cook\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 31.00383797383424}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString commandletName;\n\tif (GIsCookerRunning) {\n\t\tcommandletName = FParse::Command();\n\t}\n\treturn!commandletName.IsEmpty() && commandletName.Equals(TEXT(\"cook\"), ESearchCase::CaseInsensitive);\n}", "CodeBleu_score": 24.942346718435928}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString commandletName = GetRunningCommandletName();\n\treturn!commandletName.IsEmpty() && commandletName.Equals(\"cook\", ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 18.42152188245282}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\tif (UHotPatcherSettings::Get()->bEnableServerlessCounter) {\n\t\t// Extract the commandlet name from the command line\n\t\tFString commandletName;\n\t\tif (Params.Split(TEXT(\" \"), &commandletName, NULL, ESearchCase::IgnoreCase, ESearchDir::FromStart)) {\n\t\t\t// Check if serverless counting is enabled in the settings\n\t\t\tif (UHotPatcherSettings::Get()->bEnableServerlessCounter) {\n\t\t\t\t// Initialize the counter with server request and project information\n\t\t\t\tUHotPatcherCounter::Get()->Initialize(commandletName, UHotPatcherSettings::Get()->GetProjectID(), UHotPatcherSettings::Get()->GetProjectName());\n\t\t\t\t// Modify the project name to include the commandlet name if applicable\n\t\t\t\tif (UHotPatcherSettings::Get()->bUseCommandletNameInProjectName) {\n\t\t\t\t\tUHotPatcherSettings::Get()->SetProjectName(UHotPatcherSettings::Get()->GetProjectName() + TEXT(\" - \") + commandletName);\n\t\t\t\t}\n\t\t\t\t// Process the counter\n\t\t\t\tUHotPatcherCounter::Get()->Process();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 32.73358685341882}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\t// check if serverless counting is enabled\n\tif (HotPatcherSettings::Get().bServerlessCounterEnabled) {\n\t\t// extract commandlet name from command line\n\t\tFString CommandletName;\n\t\tTArray<FString> CommandletParams;\n\t\tParams.ParseIntoArray(CommandletParams, TEXT(\" \"), true);\n\t\tif (CommandletParams.Num() > 0) {\n\t\t\tCommandletName = CommandletParams[0];\n\t\t}\n\n\t\t// initialize counter with server request and project information\n\t\tFCounterData CounterData;\n\t\tCounterData.Request = GetRequest();\n\t\tCounterData.Project = GetProject();\n\t\tCounterData.Commandlet = CommandletName;\n\t\tCounterData.CommandletParams = Params;\n\n\t\t// modify project name to include commandlet name if applicable\n\t\tif (!CommandletName.IsEmpty()) {\n\t\t\tCounterData.Project.Name += TEXT(\" - \") + CommandletName;\n\t\t}\n\n\t\t// process counter\n\t\tProcessCounter(CounterData);\n\t}\n}", "CodeBleu_score": 37.74682703479698}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t\t// Check if serverless counting is enabled\n\tif (!bEnableServerless) {\n\t\treturn;\n\t}\n\n\t// Extract the commandlet name from the command line\n\tFString CommandletName;\n\tif (Params.Split(TEXT(\" \"), &CommandletName, nullptr, ESearchCase::CaseSensitive, ESearchDir::FromStart)) {\n\t\t// Initialize the counter with server request and project information\n\t\tFCounterRequest Request;\n\t\tRequest.Init(GetProjectInfo(), GetRequestInfo());\n\n\t\t// Modify the project name to include the commandlet name if applicable\n\t\tFString ProjectName = Request.GetProjectName();\n\t\tif (!ProjectName.IsEmpty()) {\n\t\t\tProjectName.Append(TEXT(\" - \"));\n\t\t\tProjectName.Append(CommandletName);\n\t\t\tRequest.SetProjectName(ProjectName);\n\t\t}\n\n\t\t// Process the counter\n\t\tProcessCounter(Request);\n\t}\n}", "CodeBleu_score": 33.75812796481284}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\tPlatformName.ToLowerInline();\n\treturn PlatformName.StartsWith(\"ios\") || PlatformName.StartsWith(\"mac\") || PlatformName.StartsWith(\"tvos\");\n}", "CodeBleu_score": 22.022967222145194}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (!TargetPlatform) {\n\t\treturn false;\n\t}\n\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\")) || PlatformName.StartsWith(TEXT(\"Mac\")) || PlatformName.StartsWith(TEXT(\"TVOS\"));\n}", "CodeBleu_score": 31.65002730905058}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\treturn (TargetPlatform->PlatformName().StartsWith(\"IOS\", ESearchCase::IgnoreCase) || TargetPlatform->PlatformName().StartsWith(\"Mac\", ESearchCase::IgnoreCase) || TargetPlatform->PlatformName().StartsWith(\"TVOS\", ESearchCase::IgnoreCase));\n}", "CodeBleu_score": 24.161661023057604}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tUObject* ObjectPtr = (UObject*)Object;\n\tUPackage* Package = ObjectPtr->GetOutermost();\n\tif (Package) {\n\t\tif (IsAlwayPostLoadClasses(Package, ObjectPtr)) {\n\t\t\tif (PackageObjectsMap.Contains(Package)) {\n\t\t\t\tPackageObjectsMap[Package].Add(ObjectPtr);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tPackageObjectsMap.Add(Package, {ObjectPtr});\n\t\t\t}\n\t\t\tObjectPtr->ClearFlags(RF_NeedPostLoad);\n\t\t\tObjectPtr->ClearFlags(RF_NeedPostLoadSubobjects);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.674800203985555}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\tif (!Object) {\n\t\treturn;\n\t}\n\n\t// Get the package\n\tUPackage* Package = Object->GetOutermost();\n\n\t// If the package is not in CookerAssetsSet but is in AllAssetsSet and does not always require post-load processing,\n\t// add the object to the PackageObjectsMap and FreezeObjects list.\n\tif (!Package->IsCooked() &&!IsAlwayPostLoadClasses(Package, Object)) {\n\t\tif (Package->IsFullyLoaded()) {\n\t\t\t// If the package is fully loaded, we need to check if the object is already in the PackageObjectsMap.\n\t\t\tif (PackageObjectsMap.Contains(Package)) {\n\t\t\t\tTArray<UObject*>& Objects = PackageObjectsMap[Package];\n\t\t\t\tif (!Objects.Contains(Object)) {\n\t\t\t\t\tObjects.Add(Object);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Otherwise, we need to add the object to the PackageObjectsMap and FreezeObjects list.\n\t\t\t\tPackageObjectsMap.Add(Package, TArray<UObject*>({ Object }));\n\t\t\t\tFreezeObjects.Add(Object);\n\t\t\t}\n\t\t} else {\n\t\t\t// If the package is not fully loaded, we need to add the object to the PackageObjectsMap.\n\t\t\tif (PackageObjectsMap.Contains(Package)) {\n\t\t\t\tPackageObjectsMap[Package].Add(Object);\n\t\t\t} else {\n\t\t\t\tPackageObjectsMap.Add(Package, TArray<UObject*>({ Object }));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Also clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object.\n\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n}", "CodeBleu_score": 50.686433857611576}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFHotPatcherPackageWriter::CollectForSaveBulkData_Params Params;\n\tParams.Record = &Record;\n\tParams.Context = &Context;\n\tParams.ReturnValue = false;\n\tProcessEvent(FindFunctionChecked(GET_FUNCTION_NUMBER_CHECKED(FHotPatcherPackageWriter, CollectForSaveBulkData), GET_FUNCTION_NUMBER_CHECKED(FHotPatcherPackageWriter, CollectForSaveBulkData)),&Params);\n\tRecord = *(Params.Record);\n\tContext = *(Params.Context);\n\treturn *(Params.ReturnValue);\n}", "CodeBleu_score": 28.60172167246806}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\t// Iterate through each bulk data record in the record.\n\tfor (int32 BulkDataIndex = 0; BulkDataIndex < Record.BulkData.Num(); BulkDataIndex++)\n\t{\n\t\tFBulkData& BulkData = Record.BulkData[BulkDataIndex];\n\t\tif (BulkData.Type == EBulkDataType::AppendToExport)\n\t\t{\n\t\t\t// Add the export buffer to the corresponding export buffer list in the context.\n\t\t\tFExportBuffer& ExportBuffer = Context.ExportBuffers[BulkData.ExportBufferIndex];\n\t\t\tExportBuffer.Buffers.Add(BulkData.Buffer);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Create an output file entry in the context's output files.\n\t\t\tFOutputFile& OutputFile = Context.OutputFiles.AddDefaulted_GetRef();\n\t\t\tOutputFile.Filename = BulkData.Filename;\n\t\t\tOutputFile.Buffer = BulkData.Buffer;\n\t\t\tOutputFile.Regions = BulkData.Regions;\n\t\t\tOutputFile.Flags = BulkData.Flags;\n\t\t\tOutputFile.BulkDataIndex = BulkDataIndex;\n\t\t}\n\t}\n}", "CodeBleu_score": 43.37881335526781}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t", "CodeBleu_score": 3.322889697418792}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bFooterAdded) {\n\t\treturn;\n\t}\n\n\tContext.bFooterAdded = true;\n\n\t// Create a footer buffer for each package.\n\tfor (FPackageExportInfo& PackageInfo : Context.PackageExports) {\n\t\tFPackageExportInfo& ExportInfo = PackageInfo;\n\t\tFPackageExportInfo& ImportInfo = Context.PackageImports[ExportInfo.Index];\n\n\t\t// Create a footer buffer for the package.\n\t\tFBuffer& FooterBuffer = Context.FooterBuffers[ExportInfo.Index];\n\t\tFooterBuffer.Empty();\n\t\tFooterBuffer.AddUninitialized(sizeof(FPackageFileTag));\n\t\tFPackageFileTag* PackageFileTag = (FPackageFileTag*)FooterBuffer.GetData();\n\t\tPackageFileTag->FileTag = ImportInfo.PackageFileTag;\n\n\t\t// Add the footer to the export buffers.\n\t\tfor (FPackageExport& Export : ExportInfo.Exports) {\n\t\t\tExport.AddFooter(FooterBuffer);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.24985662634874}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bDiffArchiveCompleted) {\n\t\treturn;\n\t}\n\n\tFHotPatcherPackageWriter::AddFooter(Record, Context);\n\n\tContext.bDiffArchiveCompleted = true;\n}", "CodeBleu_score": 21.60478753825441}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bDiffExport) {\n\t\tif (Context.bDiffExportComplete) {\n\t\t\treturn;\n\t\t}\n\t\tContext.bDiffExportComplete = true;\n\t}\n\tFBuffer& FooterBuffer = Context.FooterBuffer;\n\tif (FooterBuffer.GetSize() == 0) {\n\t\tFBuffer& PackageBuffer = Context.PackageBuffer;\n\t\tPackageBuffer.Add(FString(TEXT(\"PACKAGEFILETAG\")));\n\t\tPackageBuffer.Add(FString(TEXT(\"PACKAGEFILETAG\")));\n\t\tFooterBuffer.Add(PackageBuffer);\n\t}\n\tfor (auto& ExportBuffer : Context.ExportBuffers) {\n\t\tExportBuffer.Add(FooterBuffer);\n\t}\n}", "CodeBleu_score": 45.00456339527093}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacterMovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovementComponent) {\n\t\tGDCharacterMovementComponent->SavedSprinting = bSprinting;\n\t\tGDCharacterMovementComponent->SavedAimingDownSights = bAimingDownSights;\n\t}\n}", "CodeBleu_score": 69.40238493976318}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\t// Cast the character's movement component to UGDCharacterMovementComponent.\n\tUGDCharacterMovementComponent * MovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\n\t// If the cast was successful, save the character's sprinting and aiming down sights (ADS) requests into the move.\n\tif (MovementComponent) {\n\t\tbSprinting = MovementComponent->bSprinting;\n\t\tbAimingDownSights = MovementComponent->bAimingDownSights;\n\t}\n}", "CodeBleu_score": 72.97033451933426}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * GDCharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (GDCharacterMovement) {\n\t\tGDCharacterMovement->SavedSprinting = Sprinting;\n\t\tGDCharacterMovement->SavedAimingDownSights = AimingDownSights;\n\t}\n}", "CodeBleu_score": 69.97320102825529}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent ||!AbilitySystemComponent->GetAbilitySystemComponentProperty() ||!AbilitySystemComponent->GetAbilitySystemComponentProperty()->IsValidLowLevelFast()) {\n\t\tUE_LOG(LogAbilitySystem, Error, TEXT(\"ListenForAttributeChange: AbilitySystemComponent is null or invalid\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!Attribute.IsValid()) {\n\t\tUE_LOG(LogAbilitySystem, Error, TEXT(\"ListenForAttributeChange: Attribute is not valid\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* ListenForAttributeChangeTask = NewObject<UAsyncTaskAttributeChanged>();\n\tListenForAttributeChangeTask->AbilitySystemComponent = AbilitySystemComponent;\n\tListenForAttributeChangeTask->Attribute = Attribute;\n\n\tListenForAttributeChangeTask->OnAttributeChanged.AddDynamic(this, &UAsyncTaskAttributeChanged::HandleAttributeChanged);\n\n\tListenForAttributeChangeTask->StartTask();\n\n\treturn ListenForAttributeChangeTask;\n}", "CodeBleu_score": 50.13294139783954}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tUAsyncTaskAttributeChanged* NewTask = NewObject<UAsyncTaskAttributeChanged>();\n\tNewTask->RegisterWithGameInstance(AbilitySystemComponent->GetGameplayAbilityWorld()->GetGameInstance());\n\tNewTask->SetTaskType(EGameplayTaskTypes::AttributeChange);\n\tNewTask->AbilitySystemComponent = AbilitySystemComponent;\n\tNewTask->Attribute = Attribute;\n\tNewTask->OnAttributeChangeDelegate.BindUObject(this, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\tNewTask->StartTask();\n\n\treturn NewTask;\n}", "CodeBleu_score": 50.805696634169514}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (!Attribute.IsValid()) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* NewTask = NewObject<UAsyncTaskAttributeChanged>();\n\tNewTask->AbilitySystemComponent = AbilitySystemComponent;\n\tNewTask->Attribute = Attribute;\n\n\tNewTask->OnAttributeChangeDelegate.BindUObject(this, &UAsyncTaskAttributeChanged::OnAttributeChange);\n\n\tNewTask->RegisterWithRoot();\n\n\treturn NewTask;\n}", "CodeBleu_score": 54.75672265839897}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnCooldownChanged.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnCooldownChanged);\n\t\tASC->OnCooldownTagAdded.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnCooldownTagAdded);\n\t\tASC->OnCooldownTagRemoved.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnCooldownTagRemoved);\n\t}\n\tReady = true;\n\tMarkAsGarbage();\n}", "CodeBleu_score": 27.621928282800273}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnGameplayEffectAdded.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnGameplayEffectAdded);\n\t\tASC->OnCooldownTagAdded.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnCooldownTagAdded);\n\t\tReady = true;\n\t\tMarkAsGarbage();\n\t}\n}", "CodeBleu_score": 26.232056180895867}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnCooldownChanged.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnCooldownChanged);\n\t\tASC->OnCooldownTagAdded.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnCooldownTagAdded);\n\t\tASC->OnCooldownTagRemoved.RemoveDynamic(this, &UAsyncTaskCooldownChanged::OnCooldownTagRemoved);\n\t\tASC = nullptr;\n\t}\n\tReady = true;\n\tMarkAsGarbage();\n}", "CodeBleu_score": 27.802477161870964}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.EffectSpec.GetAsset()) {\n\t\tFGameplayTagContainer AssetTags = EffectRemoved.EffectSpec.GetAsset()->Tags;\n\t\tFGameplayTagContainer GrantedTags = EffectRemoved.GrantedTags;\n\t\tif (AssetTags.HasTag(EffectGameplayTag) || GrantedTags.HasTag(EffectGameplayTag)) {\n\t\t\tUGameplayStatics::OnEffectStackChange(GetWorld(), EffectRemoved.Handle, AssetTags, GrantedTags);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.648823900518266}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// Retrieve asset and granted tags from the removed effect.\n\tconst FGameplayEffect* Asset = EffectRemoved.GetEffectTemplate();\n\tconst FGameplayTagContainer& GrantedTags = EffectRemoved.GetGrantedTags();\n\tconst FGameplayTagContainer& RemovedTags = EffectRemoved.GetRemovedTags();\n\n\t// If either tag container contains the specified EffectGameplayTag, broadcast an effect stack change event.\n\tif (GrantedTags.HasTagExact(EffectGameplayTag) || RemovedTags.HasTagExact(EffectGameplayTag)) {\n\t\tUE_LOG(LogTemp, Log, TEXT(\"UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback\"));\n\n\t\t// Create an effect stack change event.\n\t\tFGameplayEffectStackChangeParams Params;\n\t\tParams.EffectAsset = Asset;\n\t\tParams.EffectHandle = EffectRemoved.Handle;\n\t\tParams.StackChangeType = EGameplayEffectStackChangeType::Removed;\n\n\t\t// Broadcast the event.\n\t\tUGameplayEffectsComponent* Component = Cast<UGameplayEffectsComponent>(EffectRemoved.Target);\n\t\tif (Component) {\n\t\t\tComponent->OnGameplayEffectStackChange(Params);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.35650538908333}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\t// Get the effect asset\n\tFGameplayEffect * EffectAsset = EffectRemoved.GetEffectSpec().GetGameplayEffect();\n\tif (EffectAsset == nullptr) {\n\t\treturn;\n\t}\n\n\t// Get the granted tags\n\tTArray<FGameplayTag> GrantedTags = EffectRemoved.GetGrantedTags();\n\n\t// Iterate through the granted tags\n\tfor (FGameplayTag & GrantedTag : GrantedTags) {\n\t\t// Check if the tag container contains the specified tag\n\t\tif (GrantedTag.MatchesTagContainer(EffectGameplayTag)) {\n\t\t\t// Broadcast the effect stack change event\n\t\t\tOnEffectStackChanged.Broadcast(EffectAsset, EffectRemoved.Handle, EGameplayEffectStackChangeType::Removed, EffectRemoved.GetSourceTag());\n\t\t}\n\t}\n}", "CodeBleu_score": 47.93886053174168}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * NewTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tNewTask->AbilitySystemComponent = AbilitySystemComponent;\n\tNewTask->EffectGameplayTag = InEffectGameplayTag;\n\tif (NewTask->Validate()) {\n\t\tNewTask->OnGameplayEffectAdded.AddDynamic(NewTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\t\tNewTask->OnGameplayEffectRemoved.AddDynamic(NewTask, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\t\treturn NewTask;\n\t}\n\telse {\n\t\tNewTask->ConditionalBeginDestroy();\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 43.077355349480946}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * NewTask = NewObject<UAsyncTaskEffectStackChanged>();\n\tif (AbilitySystemComponent!= nullptr) {\n\t\tNewTask->AbilitySystemComponent = AbilitySystemComponent;\n\t\tNewTask->EffectGameplayTag = InEffectGameplayTag;\n\t\tNewTask->RegisterCallbacks();\n\t\treturn NewTask;\n\t}\n\telse {\n\t\tNewTask->EndTask();\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 35.263196197697766}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->EffectGameplayTag = InEffectGameplayTag;\n\n\tif (Task->Validate()) {\n\t\tTask->RegisterCallbacks();\n\t}\n\telse {\n\t\tTask->ConditionalBeginDestroy();\n\t\tTask = nullptr;\n\t}\n\n\treturn Task;\n}", "CodeBleu_score": 36.18173692617022}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (bActivateAbilityOnGranted) {\n\t\tif (ActorInfo) {\n\t\t\tif (ActorInfo->AbilitySystemComponent.IsValid()) {\n\t\t\t\tActorInfo->AbilitySystemComponent->TryActivateAbilityByClass(this->GetClass(), true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 59.85429175479887}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tif (ActorInfo) {\n\t\t\tUAbilitySystemComponent * AbilitySystem = ActorInfo->AbilitySystemComponent.Get();\n\t\t\tif (AbilitySystem) {\n\t\t\t\tAbilitySystem->TryActivateAbility(Spec.Handle, false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 72.48222205971567}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tif (ActorInfo) {\n\t\t\tUAbilitySystemComponent * ASC = ActorInfo->AbilitySystemComponent.Get();\n\t\t\tif (ASC) {\n\t\t\t\tASC->TryActivateAbility(Spec, false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 72.68335402368368}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (bInterrupted) {\n\t\tOnMontageInterrupted.Broadcast(Montage, bInterrupted);\n\t} else {\n\t\tOnCompleted.Broadcast(Montage, bInterrupted);\n\t}\n\tEndTask();\n}", "CodeBleu_score": 51.62943863227216}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (bInterrupted) {\n\t\treturn;\n\t}\n\tif (bBroadcastOnCompleted) {\n\t\tOnCompleted.Broadcast(DefaultGameplayTag, DefaultEventData);\n\t}\n\tEndTask();\n}", "CodeBleu_score": 54.71389005466841}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (bInterrupted) {\n\t\treturn;\n\t}\n\n\tif (bBroadcastOnCompleted) {\n\t\tOnCompleted.Broadcast(DefaultGameplayTag, DefaultEventData);\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 54.71389005466841}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopPlayingMontage)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\t// Remove the event tag container delegate\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->OnGameplayEvent.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnGameplayEvent);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 60.92720138953469}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (StopPlayingMontage())\n\t{\n\t\t// We're stopping the montage, so we don't need to do anything else\n\t\treturn;\n\t}\n\n\t// Remove the event tag container delegate from the ability system component\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->OnGameplayEvent.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnGameplayEvent);\n\t}\n\n\t// Call the base class' OnDestroy method\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 45.401956218090525}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && StopPlayingMontage)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->OnGameplayEvent.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnGameplayEvent);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 60.92720138953469}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t", "CodeBleu_score": 1.039744802907657}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\treturn UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage_Implementation();\n}", "CodeBleu_score": 3.926081774925288}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t}", "CodeBleu_score": 1.0983087819957045}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\t// Retrieve the target actor from the blackboard\n\tAActor* target = OwnerComp.GetBlackboardComponent()->GetValueAsObject(\"Target\");\n\tif (!target) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Target is null in CheckAttackRange\"));\n\t\treturn;\n\t}\n\n\t// Calculate the distance to the target\n\tfloat distance = (target->GetActorLocation() - OwnerComp.GetBlackboardComponent()->GetValueAsVector(\"PawnLocation\")).Size();\n\n\t// If the target is within the maximum attack range, check for line of sight\n\tif (distance <= OwnerComp.GetBlackboardComponent()->GetValueAsFloat(\"MaxAttackRange\")) {\n\t\t// Create a line trace from the AI pawn to the target\n\t\tFHitResult hit;\n\t\tFCollisionQueryParams params;\n\t\tparams.AddIgnoredActor(target);\n\t\tFVector start = OwnerComp.GetBlackboardComponent()->GetValueAsVector(\"PawnLocation\");\n\t\tFVector end = target->GetActorLocation();\n\t\tbool result = GetWorld()->LineTraceSingleByChannel(hit, start, end, ECC_Visibility, params);\n\n\t\t// Store the result in the blackboard\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(\"InAttackRange\", distance <= OwnerComp.GetBlackboardComponent()->GetValueAsFloat(\"MaxAttackRange\"));\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(\"Visible\", result);\n\t}\n\t// If the target is not within the maximum attack range, store false in the blackboard\n\telse {\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(\"InAttackRange\", false);\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(\"Visible\", false);\n\t}\n}", "CodeBleu_score": 35.01719868105917}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tAActor* targetActor = OwnerComp.GetBlackboardComponent()->GetValueAsObject(TEXT(\"TargetActor\"));\n\tif (targetActor!= nullptr) {\n\t\tfloat distance = FVector::Dist(targetActor->GetActorLocation(), OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation());\n\t\tif (distance <= AttackRange) {\n\t\t\tif (GetWorld()->LineTraceTest(OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), targetActor->GetActorLocation(), ECC_Pawn, FCollisionQueryParams(FName(TEXT(\"AttackRange\")), false, OwnerComp.GetAIOwner()->GetPawn()))) {\n\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TEXT(\"TargetWithinAttackRange\"), true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TEXT(\"TargetWithinAttackRange\"), false);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(TEXT(\"TargetWithinAttackRange\"), false);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.334212064387344}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t", "CodeBleu_score": 3.898671156880241}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAAIController* AIController = OwnerComp.GetAIOwner();\n\tAPawn* Pawn = AIController->GetPawn();\n\tUAttributeComponent* AttributeComponent = Pawn->FindComponentByClass<UAttributeComponent>();\n\n\tif (AttributeComponent) {\n\t\tAttributeComponent->Heal(AttributeComponent->GetMaxHealth());\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 49.4258541178905}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\t// Retrieve the pawn from the AI owner\n\tAPawn* pawn = OwnerComp.GetAIOwner()->GetPawn();\n\n\t// Get the attribute component from the pawn\n\tUAttributeSet* attributeSet = pawn->FindComponentByClass<UAttributeSet>();\n\n\t// Check if the attribute component is valid\n\tif (attributeSet) {\n\t\t// Apply a health change to restore the pawn's health to maximum\n\t\tattributeSet->ApplyHeal(pawn, attributeSet->GetMaxHealth());\n\t}\n\n\t// Return a success result\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 62.87611953792196}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\t// Retrieve the pawn from the AI owner.\n\tAPawn* pawn = OwnerComp.GetAIOwner()->GetPawn();\n\n\t// Check if the pawn is valid.\n\tif (pawn) {\n\t\t// Get the attribute component from the pawn.\n\t\tUAttributeComponent* attributeComponent = Cast<UAttributeComponent>(pawn->GetComponentByClass(UAttributeComponent::StaticClass()));\n\n\t\t// Check if the attribute component is valid.\n\t\tif (attributeComponent) {\n\t\t\t// Apply a health change to restore the pawn's health to maximum.\n\t\t\tattributeComponent->ApplyHealthChange(pawn, FGameplayAttribute::GetMaxHealth(attributeComponent->GetHealthAttribute()));\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 59.786425274575215}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (GetWorld() && GetWorld()->GetTickableManager()) {\n\t\tGetWorld()->GetTickableManager()->AddTickable(this);\n\t}\n}", "CodeBleu_score": 45.753455433800866}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// Register the component's primary tick function.\n\t// This is used to update the movement of the projectile.\n\tPrimaryComponentTick.bCanEverTick = true;\n\tPrimaryComponentTick.bStartWithTickEnabled = true;\n}", "CodeBleu_score": 45.54289254881596}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (GetWorld()) {\n\t\tGetWorld()->GetTickableManager().GetTickableObjectManager().RegisterTickableObject(this);\n\t}\n}", "CodeBleu_score": 46.46653930921796}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tif (GetWorld() && GetWorld()->GetSubsystem<USTickablesSubsystem>()) {\n\t\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->DeregisterPrimaryTickFunction(this);\n\t}\n}", "CodeBleu_score": 57.28480215345334}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tif (USTickablesSubsystem* TickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>()) {\n\t\tTickablesSubsystem->DeregisterTickable(this);\n\t}\n}", "CodeBleu_score": 61.7915831256401}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tif (GetWorld()) {\n\t\tUSTickablesSubsystem* tickablesSubsystem = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\t\tif (tickablesSubsystem) {\n\t\t\ttickablesSubsystem->DeregisterPrimaryTickFunction(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 60.25976324612849}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (USignificanceInterface* SignificanceInterface = Cast<USignificanceInterface>(GetOwner())) {\n\t\t\tSignificanceInterface->RegisterWithManager();\n\t\t}\n\t\telse {\n\t\t\tif (bWaitOneFrame) {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t}\n\t}\n\n\tif (UParticleSystemComponent* ParticleSystem = GetOwner()->FindComponentByClass<UParticleSystemComponent>()) {\n\t\tif (ParticleSystem->bAutoManageAttachment) {\n\t\t\tParticleSystem->RegisterComponentWithWorld(GetWorld());\n\t\t}\n\t}\n}", "CodeBleu_score": 58.13992284778744}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// Register with the manager\n\tif (bManageSignificance)\n\t{\n\t\tRegisterWithManager();\n\t}\n\n\t// Manage particle system significance\n\tif (bManageParticleSignificance)\n\t{\n\t\tfor (UParticleSystemComponent* ParticleSystem : GetOwner()->GetComponents<UParticleSystemComponent>())\n\t\t{\n\t\t\tParticleSystem->SetSignificanceManager(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 34.23733163339776}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// If we have a manager and we are not waiting to be registered, register ourselves\n\tif (USignificanceManager* SignificanceManager = USignificanceManager::Get(GetWorld()))\n\t{\n\t\tif (!bWaitingToRegister)\n\t\t{\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\t// If we have a manager and we are not waiting to be registered, register ourselves\n\tif (USignificanceManager* SignificanceManager = USignificanceManager::Get(GetWorld()))\n\t{\n\t\tif (!bWaitingToRegister)\n\t\t{\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\t// If we have a manager and we are not waiting to be registered, register ourselves\n\tif (USignificanceManager* SignificanceManager = USignificanceManager::Get(GetWorld()))\n\t{\n\t\tif (!bWaitingToRegister)\n\t\t{\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\t// If we have a manager and we are not waiting to be registered, register ourselves\n\tif (USignificanceManager* SignificanceManager = USignificanceManager::Get(GetWorld()))\n\t{\n\t\tif (!bWaitingToRegister)\n\t\t{\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n}", "CodeBleu_score": 43.321878921121034}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t// Get the significance manager from the world\n\tUSignificanceManager* SignificanceManager = GetWorld()->GetSignificanceManager();\n\tif (SignificanceManager)\n\t{\n\t\t// Define lambda functions for calculating significance and handling post-significance updates\n\t\tauto CalcSignificanceLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) -> float {\n\t\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t\t};\n\t\tauto PostSignificanceUpdateLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t\t};\n\n\t\t// Register the component with the manager\n\t\tSignificanceManager->RegisterComponent(GetOwner()->GetClass(), CalcSignificanceLambda, PostSignificanceUpdateLambda);\n\t}\n}", "CodeBleu_score": 70.59229489298733}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\tif (GSignificanceManager)\n\t{\n\t\tFString Tag = GetOwner()->GetClass()->GetName();\n\t\tGSignificanceManager->RegisterComponent(Tag, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) {\n\t\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t\t}, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t\t});\n\t}\n}", "CodeBleu_score": 57.65533854797597}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\tif (!HasSignificanceManager()) {\n\t\treturn;\n\t}\n\n\tUSignificanceManager* SignificanceManager = GetSignificanceManager();\n\tSignificanceManager->RegisterSignificanceComponent(GetOwner()->GetClass()->GetName(),\n\t\t[&](const FTransform& Viewpoint) { return CalcSignificance(Viewpoint); },\n\t\t[&](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) { PostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal); });\n}", "CodeBleu_score": 50.3622864187382}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>()->IsPoolingEnabled(Actor)) {\n\t\tUSActorPoolingSubsystem* PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\t\tPoolingSubsystem->ReleaseToPoolInternal(Actor);\n\t\treturn true;\n\t}\n\telse {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 70.78270828533928}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->IsPoolingEnabled()) {\n\t\tauto PoolingSubsystem = Actor->GetWorld()->GetSubsystem<USActorPoolingSubsystem>();\n\t\tif (PoolingSubsystem) {\n\t\t\treturn PoolingSubsystem->ReleaseToPoolInternal(Actor);\n\t\t}\n\t}\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 65.70781682808898}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->IsPoolable()) {\n\t\tUWorld* World = Actor->GetWorld();\n\t\tif (World) {\n\t\t\tUSActorPoolingSubsystem* PoolingSubsystem = World->GetSubsystem<USActorPoolingSubsystem>();\n\t\t\tif (PoolingSubsystem) {\n\t\t\t\treturn PoolingSubsystem->ReleaseToPool(Actor);\n\t\t\t}\n\t\t}\n\t}\n\n\tActor->Destroy();\n\treturn false;\n}", "CodeBleu_score": 55.79311122724937}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_CYCLE_COUNTER(STAT_PrimeActorPool);\n\tUE_LOG(LogActorPooling, Log, TEXT(\"Priming actor pool for class %s with %d actors\"), *ActorClass->GetName(), Amount);\n\tTArray<AActor*> SpawnedActors;\n\tSpawnedActors.Reserve(Amount);\n\tFActorSpawnParameters SpawnParams;\n\tSpawnParams.OverrideLevel = GetWorld()->GetCurrentLevel();\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* NewActor = GetWorld()->SpawnActor<AActor>(ActorClass, SpawnParams);\n\t\tif (NewActor) {\n\t\t\tSpawnedActors.Add(NewActor);\n\t\t\tNewActor->ReleaseToPool();\n\t\t}\n\t}\n\tSpawnedActors.Empty();\n}", "CodeBleu_score": 59.261129547879634}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t", "CodeBleu_score": 6.960003025511796}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_CYCLE_COUNTER(STAT_ActorPoolPriming);\n\n\tUE_LOG(LogActorPool, Display, TEXT(\"Priming actor pool for %s\"), *ActorClass->GetName());\n\tTArray<AActor*> SpawnedActors;\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* SpawnedActor = GetWorld()->SpawnActor(ActorClass);\n\t\tSpawnedActor->SetActorHiddenInGame(true);\n\t\tSpawnedActor->SetActorTickEnabled(false);\n\t\tSpawnedActors.Add(SpawnedActor);\n\t}\n\tfor (AActor* SpawnedActor : SpawnedActors) {\n\t\tSpawnedActor->Destroy();\n\t}\n}", "CodeBleu_score": 49.2502702576913}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tif (LoadingScreenAttributes.IsValid()) {\n\t\tLoadingScreenAttributes->LoadingScreenWidget->RemoveFromParent();\n\t\tLoadingScreenAttributes->LoadingScreenWidget = nullptr;\n\t}\n\n\tLoadingScreenAttributes = MakeShareable(new FLoadingScreenAttributes());\n\n\tLoadingScreenAttributes->LoadingScreenWidget = CreateWidget<ULoadingScreenWidget>(GetWorld(), LoadingScreenWidgetClass);\n\tLoadingScreenAttributes->LoadingScreenWidget->AddToViewport();\n\n\tLoadingScreenAttributes->LoadingScreenWidget->SetLoadingText(FText::FromString(MapName));\n\n\tif (LoadingScreenAttributes->LoadingScreenWidget->MoviePlayer) {\n\t\tLoadingScreenAttributes->LoadingScreenWidget->MoviePlayer->OnStop.AddUObject(this, &USLoadingScreenSubsystem::OnMovieStop);\n\t\tLoadingScreenAttributes->LoadingScreenWidget->MoviePlayer->OnPlay.AddUObject(this, &USLoadingScreenSubsystem::OnMoviePlay);\n\t\tLoadingScreenAttributes->LoadingScreenWidget->MoviePlayer->OnPause.AddUObject(this, &USLoadingScreenSubsystem::OnMoviePause);\n\t\tLoadingScreenAttributes->LoadingScreenWidget->MoviePlayer->OnFinishedLoading.AddUObject(this, &USLoadingScreenSubsystem::OnMovieFinishedLoading);\n\n\t\tLoadingScreenAttributes->LoadingScreenWidget->MoviePlayer->Play(LoadingScreenAttributes->LoadingScreenWidget->MoviePath);\n\t}\n}", "CodeBleu_score": 34.34047440553809}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t", "CodeBleu_score": 8.21000268905031}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.Widget = CreateWidget<UUserWidget>(GetWorld(), LoadingScreenWidgetClass);\n\tLoadingScreenAttributes.Widget->AddToViewport();\n\tLoadingScreenAttributes.Widget->SetVisibility(ESlateVisibility::Visible);\n\tLoadingScreenAttributes.MoviePlayer = CreateWidget<UMoviePlayer>(GetWorld(), MoviePlayerClass);\n\tLoadingScreenAttributes.MoviePlayer->AddToViewport();\n\tLoadingScreenAttributes.MoviePlayer->SetVisibility(ESlateVisibility::Hidden);\n\tLoadingScreenAttributes.MoviePlayer->SetMovie(MapName);\n\tLoadingScreenAttributes.MoviePlayer->Play();\n\tLoadingScreenAttributes.Widget->SetLoadingScreen(LoadingScreenAttributes.MoviePlayer);\n\tLoadingScreenAttributes.Widget->SetLoadingScreenAttributes(LoadingScreenAttributes);\n\tLoadingScreens.Add(MapName, LoadingScreenAttributes);\n}", "CodeBleu_score": 46.34858897171558}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator!= nullptr) {\n\t\t// Log start of action\n\t\tUE_LOG(LogAction, Log, TEXT(\"%s started by %s\"), *GetName(), *Instigator->GetName());\n\n\t\t// Append granted tags to owning component's active gameplay tags\n\t\tif (OwningComponent!= nullptr) {\n\t\t\tOwningComponent->AppendTags(GrantedTags);\n\t\t}\n\n\t\t// Update replication data\n\t\tif (HasAuthority()) {\n\t\t\t// Record start time\n\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t}\n\n\t\t// Broadcast action started event\n\t\tOnActionStarted.Broadcast(Instigator, this);\n\t}\n}", "CodeBleu_score": 41.06315349718959}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator) {\n\t\t// Log the start of the action\n\t\tUE_LOG(LogTemp, Log, TEXT(\"USAction::StartAction_Implementation\"));\n\n\t\t// Append granted tags to the owning component's active gameplay tags\n\t\tif (OwningComponent) {\n\t\t\tOwningComponent->AppendTags(GrantedTags);\n\t\t}\n\n\t\t// Update replication data\n\t\tif (bReplicateStartToOwner) {\n\t\t\t// If the component's owner role is authoritative, record the start time\n\t\t\tif (OwningComponent && OwningComponent->GetOwnerRole() == ROLE_Authority) {\n\t\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t\t}\n\n\t\t\t// Broadcast an action started event from the owning component\n\t\t\tif (OwningComponent) {\n\t\t\t\tOwningComponent->BroadcastActionStartedEvent(this);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.686210692076905}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator) {\n\t\tif (bReplicateStart) {\n\t\t\tif (bReplicateInstigator) {\n\t\t\t\tInstigator = Instigator->GetOwner();\n\t\t\t}\n\n\t\t\tif (Instigator) {\n\t\t\t\tif (Instigator->Role == ROLE_Authority) {\n\t\t\t\t\tbIsStarted = true;\n\t\t\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t\t\t}\n\n\t\t\t\tif (bReplicateTags) {\n\t\t\t\t\tif (Instigator) {\n\t\t\t\t\t\tInstigator->GetOwner()->AddOwnedComponentTags(this, Instigator);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (bReplicateInstigator) {\n\t\t\t\t\tInstigator = Instigator->GetOwner();\n\t\t\t\t}\n\n\t\t\t\tif (Instigator) {\n\t\t\t\t\tif (Instigator->Role == ROLE_Authority) {\n\t\t\t\t\t\tInstigator->GetOwner()->BroadcastEvent(EActionEventType::Started, Instigator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.883188436597095}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GameState == nullptr) {\n\t\treturn Duration;\n\t}\n\telse {\n\t\treturn Duration - (GameState->GetWorldTimeSeconds() - StartTime);\n\t}\n}", "CodeBleu_score": 37.18374117781775}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GameState!= nullptr) {\n\t\treturn Duration - (GameState->GetServerWorldTimeSeconds() - StartTime);\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 39.67059635698262}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GameState) {\n\t\treturn (Duration - (GameState->GetWorldTimeSeconds() - StartTime));\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 38.096880900035366}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus) {\n\t\tAPawn* Pawn = GetOwner();\n\t\tif (Pawn) {\n\t\t\tAActor* Focus = InFocus;\n\t\t\tif (Focus->ActorHasTag(FocusTag)) {\n\t\t\t\tFocus->Interact(Pawn);\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract: InFocus is null\"));\n\t}\n}", "CodeBleu_score": 43.815316513035505}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus) {\n\t\tAPawn* pawn = GetOwner();\n\t\tif (pawn) {\n\t\t\tInFocus->Interact(pawn);\n\t\t}\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interacting with null actor\"));\n\t}\n}", "CodeBleu_score": 41.690855500929416}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation: Focus actor is null.\"));\n\t\treturn;\n\t}\n\n\tAPawn* pawn = GetOwner();\n\tif (pawn == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation: Pawn is null.\"));\n\t\treturn;\n\t}\n\n\tAActor* owningActor = pawn->GetOwner();\n\tif (owningActor == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation: Owning actor is null.\"));\n\t\treturn;\n\t}\n\n\towningActor->Interact(InFocus);\n}", "CodeBleu_score": 48.979805367391236}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\t// Get the target actor's attribute component\n\tUAttributeComponent* TargetAttributeComponent = Cast<UAttributeComponent>(TargetActor->GetComponentByClass(UAttributeComponent::StaticClass()));\n\n\t// Check if the target actor has an attribute component\n\tif (TargetAttributeComponent) {\n\t\t// Apply a negative health change equal to the damage amount caused by the damage causer\n\t\tTargetAttributeComponent->ApplyHealthChange(-DamageAmount, DamageCauser);\n\n\t\t// Return true to indicate that the damage was successfully applied\n\t\treturn true;\n\t}\n\telse {\n\t\t// Return false to indicate that the damage was not applied\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 54.57452872644979}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr || TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\n\tUAttributeComponent* targetAttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (targetAttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\n\ttargetAttributeComponent->ModifyHealth(-DamageAmount);\n\n\treturn true;\n}", "CodeBleu_score": 51.469979645302075}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr || TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\tUAttributeComponent* TargetAttributeComponent = TargetActor->FindComponentByClass<UAttributeComponent>();\n\tif (TargetAttributeComponent == nullptr) {\n\t\treturn false;\n\t}\n\tTargetAttributeComponent->ChangeHealth(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 51.72024474911454}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tPersonalRecordTime = NewTime;\n\t\tBroadcastPersonalRecord();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 48.86288051837418}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tBroadcastPersonalRecord();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 44.540738253709904}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tPersonalRecordTime = NewTime;\n\t\tBroadcastPersonalRecord();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 48.86288051837418}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\tUAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComponent == nullptr) {\n\t\treturn;\n\t}\n\tif (AttributeComponent->GetHealth() == AttributeComponent->GetMaxHealth()) {\n\t\treturn;\n\t}\n\tif (PlayerState->GetCredits() < RequiredCredits) {\n\t\treturn;\n\t}\n\tAttributeComponent->ChangeHealth(HealthChange);\n\tPlayerState->RemoveCredits(RequiredCredits);\n\tCooldown();\n}", "CodeBleu_score": 46.22015136257809}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn) {\n\t\tUAttributeComponent* attributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\t\tif (attributeComponent) {\n\t\t\tif (attributeComponent->GetHealth() < attributeComponent->GetMaxHealth()) {\n\t\t\t\tif (InstigatorPawn->GetPlayerState()->GetCredits() >= GetCost()) {\n\t\t\t\t\tattributeComponent->SetHealth(attributeComponent->GetMaxHealth());\n\t\t\t\t\tInstigatorPawn->GetPlayerState()->RemoveCredits(GetCost());\n\t\t\t\t\tCooldown();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.90826160306484}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn == nullptr) {\n\t\treturn;\n\t}\n\n\tUAttributeComponent* InstigatorAttribute = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\tif (InstigatorAttribute == nullptr) {\n\t\treturn;\n\t}\n\n\tif (InstigatorAttribute->GetHealth() >= InstigatorAttribute->GetMaxHealth()) {\n\t\treturn;\n\t}\n\n\tif (InstigatorAttribute->GetCredits() < RequiredCredits) {\n\t\treturn;\n\t}\n\n\tInstigatorAttribute->AddHealth(HealthChange);\n\tInstigatorAttribute->RemoveCredits(RequiredCredits);\n\tCooldown();\n}", "CodeBleu_score": 40.68705298450406}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Play impact sound\n\tPlayImpactSound();\n\n\t// Spawn impact visual effect\n\tFVector spawnLocation = GetActorLocation();\n\tFVector spawnScale = FVector(1.0f, 1.0f, 1.0f);\n\tFRotator spawnRotation = GetActorRotation();\n\tFActorSpawnParameters spawnParams;\n\tspawnParams.Owner = this;\n\tspawnParams.Instigator = Instigator;\n\tspawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\tAActor* impactEffect = GetWorld()->SpawnActor<AActor>(ImpactEffectClass, spawnLocation, spawnRotation, spawnParams);\n\n\t// Trigger camera shake\n\tFVector cameraLocation = spawnLocation;\n\tcameraLocation.Z += 100.0f;\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), CameraShakeClass, cameraLocation, 1.0f);\n\n\t// Release projectile back to pool\n\tReleaseProjectile();\n}", "CodeBleu_score": 49.286405124471685}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn an impact visual effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation());\n\n\t// Play an impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactShake, GetActorLocation(), 1.0f, ImpactShake->GetFloatParameter(\"Radius\"));\n\n\t// Release the projectile back to the actor pool\n\tReleaseToPool();\n}", "CodeBleu_score": 47.97790637646518}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t//Spawn the impact visual effect\n\tFTransform SpawnTransform = GetActorTransform();\n\tSpawnTransform.SetLocation(SpawnTransform.GetLocation() + GetActorForwardVector() * 10.0f);\n\tFActorSpawnParameters SpawnParams;\n\tSpawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\tAImpactEffectBase* ImpactEffect = GetWorld()->SpawnActor<AImpactEffectBase>(ImpactEffectClass, SpawnTransform, SpawnParams);\n\tif (ImpactEffect) {\n\t\tImpactEffect->SetOwner(this);\n\t}\n\n\t//Play the impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t//Trigger the camera shake\n\tUGameplayStatics::PlayWorldCameraShake(GetWorld(), ImpactCameraShake, GetActorLocation(), 0.0f, ImpactCameraShakeIntensity);\n\n\t//Release the projectile back to the actor pool\n\tGetWorld()->GetFirstPlayerController()->GetPawn()->ReleaseActor();\n}", "CodeBleu_score": 55.24242862284018}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (GIsEditor &&!GIsPIE) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData called in PIE mode, returning first player entry\"));\n\t\treturn PlayerData.Num() > 0? PlayerData[0] : nullptr;\n\t}\n\tfor (FPlayerSaveData* Data : PlayerData) {\n\t\tif (Data->PlayerState == PlayerState) {\n\t\t\treturn Data;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 48.59664994145434}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (GEngine->GetNetMode(PlayerState->GetWorld()) == NM_Standalone) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData called in Standalone mode!\"));\n\t\tif (SavedPlayerData.Num() > 0) {\n\t\t\treturn SavedPlayerData[0];\n\t\t}\n\t\treturn nullptr;\n\t}\n\treturn GetPlayerDataByUniqueID(PlayerState->UniqueId.ToString());\n}", "CodeBleu_score": 39.72671889012876}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (PlayerState->IsA<APlayerStatePIE>()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData is being called in PIE mode. Returning the first player data.\"));\n\t\treturn GetPlayerData(0);\n\t}\n\treturn GetPlayerData(PlayerState->UniqueId);\n}", "CodeBleu_score": 34.68384382015749}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\t// Check if the player is valid\n\tif (NewPlayer!= nullptr) {\n\t\t// Get the player's state\n\t\tauto PlayerState = Cast<APlayerState>(NewPlayer->PlayerState);\n\t\t// Check if the player's state is valid\n\t\tif (PlayerState!= nullptr) {\n\t\t\t// Load the player's state from the current save game\n\t\t\tLoadPlayerState(PlayerState);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.773914907527065}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tUSSaveGameSubsystem::PlayerState = NewPlayer->PlayerState;\n\tUSSaveGameSubsystem::LoadPlayerState();\n}", "CodeBleu_score": 39.428761177925445}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\t// Retrieve the player's state\n\tFPlayerState* NewPlayerState = Cast<FPlayerState>(NewPlayer->PlayerState);\n\tif (NewPlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"HandleStartingNewPlayer: PlayerState is null.\"));\n\t\treturn;\n\t}\n\n\t// Ensure the player's state is valid\n\tif (NewPlayerState->IsStateValid() == false) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"HandleStartingNewPlayer: PlayerState is not valid.\"));\n\t\treturn;\n\t}\n\n\t// Load the player's state from the current save game\n\tif (LoadPlayerStateFromCurrentSaveGame(NewPlayerState) == false) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"HandleStartingNewPlayer: Failed to load player state from current save game.\"));\n\t\treturn;\n\t}\n}", "CodeBleu_score": 42.92613791195309}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Get the game state\n\tauto GameState = GetWorld()->GetGameState<ASaveGameState>();\n\tif (!GameState) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"WriteSaveGame: Could not get game state.\"));\n\t\treturn;\n\t}\n\n\t// Clear any existing save game data\n\tCurrentSaveGame->ClearSaveGameData();\n\n\t// Save player data for each player in the game state\n\tfor (int i = 0; i < GameState->PlayerArray.Num(); i++) {\n\t\tCurrentSaveGame->SavePlayerData(i, GameState->PlayerArray[i]);\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tauto Actor = *ActorItr;\n\t\tif (Actor->Implements<ISaveActor>()) {\n\t\t\tISaveActor::Execute_SaveActor(Actor, CurrentSaveGame);\n\t\t}\n\t}\n\n\t// Write the save game to a slot, and broadcast an event to signal the save is complete\n\tauto Slot = GetSaveSlotName();\n\tif (UGameplayStatics::SaveGameToSlot(CurrentSaveGame, Slot, 0)) {\n\t\tOnSaveGameComplete.Broadcast(Slot);\n\t}\n\telse {\n\t\tOnSaveGameFailed.Broadcast();\n\t}\n}", "CodeBleu_score": 40.41639143074767}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t//Clear the save game\n\tCurrentSaveGame->Clear();\n\n\t//Get the current game state\n\tFGameplaySaveActorInfo* GameState = GetGameState();\n\n\t//Get the current player state\n\tFPlayerSaveActorInfo* PlayerState = GetPlayerState();\n\n\t//Save the current player state\n\tCurrentSaveGame->PlayerState = PlayerState;\n\n\t//Save the current game state\n\tCurrentSaveGame->GameState = GameState;\n\n\t//Iterate through all actors in the world\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\t//Get the current actor\n\t\tAActor* CurrentActor = *ActorItr;\n\n\t\t//Check if the actor implements the ISaveable interface\n\t\tif (CurrentActor->GetClass()->ImplementsInterface(USaveable::StaticClass())) {\n\t\t\t//Get the save data\n\t\t\tUSaveable* SaveData = Cast<USaveable>(CurrentActor);\n\n\t\t\t//Create a new save actor info\n\t\t\tFActorSaveActorInfo* SaveActorInfo = new FActorSaveActorInfo();\n\n\t\t\t//Set the name of the actor\n\t\t\tSaveActorInfo->Name = CurrentActor->GetName();\n\n\t\t\t//Set the transform of the actor\n\t\t\tSaveActorInfo->Transform = CurrentActor->GetTransform();\n\n\t\t\t//Set the save data\n\t\t\tSaveActorInfo->SaveData = SaveData->Serialize();\n\n\t\t\t//Add the save actor info to the save game\n\t\t\tCurrentSaveGame->Actors.Add(SaveActorInfo);\n\t\t}\n\t}\n\n\t//Write the save game\n\tWriteSaveGameToSlot(CurrentSaveGame, SaveGameSlotName);\n\n\t//Broadcast the save game complete event\n\tOnSaveGameComplete.Broadcast(CurrentSaveGame);\n}", "CodeBleu_score": 43.681700798784576}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t//Clear the save game data\n\tCurrentSaveGame.Clear();\n\n\t//Get the game state\n\tUWorld* World = GetWorld();\n\tif (!World) {\n\t\treturn;\n\t}\n\tUSSaveGameManager* SaveGameManager = USSaveGameManager::Get(World);\n\tif (!SaveGameManager) {\n\t\treturn;\n\t}\n\tUSSaveGameState* SaveGameState = SaveGameManager->GetSaveGameState();\n\tif (!SaveGameState) {\n\t\treturn;\n\t}\n\n\t//Save player data for each player in the game state\n\tfor (int32 i = 0; i < SaveGameState->Players.Num(); i++) {\n\t\tUSSaveGamePlayer* SaveGamePlayer = SaveGameState->Players[i];\n\t\tif (!SaveGamePlayer) {\n\t\t\tcontinue;\n\t\t}\n\t\tCurrentSaveGame.AddPlayer(SaveGamePlayer);\n\t}\n\n\t//Save actor data for each actor in the world\n\tTArray<AActor*> Actors;\n\tUGameplayStatics::GetAllActorsOfClass(World, AActor::StaticClass(), Actors);\n\tfor (int32 i = 0; i < Actors.Num(); i++) {\n\t\tAActor* Actor = Actors[i];\n\t\tif (!Actor) {\n\t\t\tcontinue;\n\t\t}\n\t\tUSSaveGameActor* SaveGameActor = Cast<USSaveGameActor>(Actor);\n\t\tif (!SaveGameActor) {\n\t\t\tcontinue;\n\t\t}\n\t\tCurrentSaveGame.AddActor(SaveGameActor);\n\t}\n\n\t//Write the save game to a slot\n\tUSSaveGameManager::Get(World)->WriteSaveGame(CurrentSaveGame);\n\n\t//Broadcast an event to signal the save is complete\n\tOnSaveGameComplete.Broadcast();\n}", "CodeBleu_score": 49.38406766542086}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\tImGui::SetNextWindowPos(ImVec2(0, 0), ImGuiCond_FirstUseEver);\n\tImGui::SetNextWindowSize(ImVec2(250, 250), ImGuiCond_FirstUseEver);\n\tImGui::Begin(\"Themes\", NULL, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);\n\tImGui::Text(\"Select a theme\");\n\tImGui::Separator();\n\tImGui::Text(\"Font size\");\n\tImGui::SliderFloat(\"##font_size\", &font_size, 10.0f, 20.0f);\n\tImGui::Separator();\n\tImGui::Text(\"Themes\");\n\tImGui::Separator();\n\tif (ImGui::Button(\"Dark\", ImVec2(100, 20))) {\n\t\tImGui::StyleColorsDark();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Light\", ImVec2(100, 20))) {\n\t\tImGui::StyleColorsLight();\n\t}\n\tImGui::SameLine();\n\tif (ImGui::Button(\"Classic\", ImVec2(100, 20))) {\n\t\tImGui::StyleColorsClassic();\n\t}\n\tImGui::End();\n\tif (font_size!= ImGui::GetIO().FontGlobalScale) {\n\t\tfont_size = ImGui::GetIO().FontGlobalScale;\n\t\tImGui::GetIO().FontGlobalScale = font_size;\n\t}\n}", "CodeBleu_score": 36.85848287248699}, {"code": "void FrameworkConfig::draw_themes(){\n\t\t// Draw the theme selection UI\n\tImGui::Begin(\"Themes\", &show_themes, ImGuiWindowFlags_NoResize | ImGuiWindowFlags_NoCollapse);\n\tImGui::Text(\"Select a theme\");\n\tImGui::Text(\"Font size\");\n\tImGui::SliderFloat(\"##font_size\", &font_size, 0.5f, 3.0f, \"%.1f\");\n\tImGui::End();\n\n\t// Check if the font size has been changed\n\tif (font_size!= prev_font_size) {\n\t\t// Update the font size in the framework\n\t\tImGui::GetIO().Fonts->Fonts[0]->Scale = font_size;\n\t\tprev_font_size = font_size;\n\t}\n}", "CodeBleu_score": 39.671045666183616}, {"code": "void FrameworkConfig::draw_themes(){\n\t\tImGui::SetNextWindowSize(ImVec2(300, 300), ImGuiCond_FirstUseEver);\n\tImGui::Begin(\"Themes\");\n\tImGui::Text(\"Select a theme\");\n\tImGui::Separator();\n\tImGui::Combo(\"##theme\", &theme_index, themes, IM_ARRAYSIZE(themes));\n\tImGui::Separator();\n\tImGui::Text(\"Adjust font size\");\n\tImGui::SliderFloat(\"##font_size\", &font_size, 1.0f, 3.0f);\n\tImGui::Separator();\n\tImGui::Text(\"Theme: %s\", themes[theme_index]);\n\tImGui::Text(\"Font size: %.1f\", font_size);\n\tImGui::End();\n}", "CodeBleu_score": 37.449968017256346}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t", "CodeBleu_score": 2.3096479186355663}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::Text(\"Main Settings\");\n\tImGui::Separator();\n\tImGui::Checkbox(\"Show Cursor\", &show_cursor);\n\tImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n\tImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\tImGui::Checkbox(\"L3 + R3 Toggle\", &l3_r3_toggle);\n\tImGui::Checkbox(\"Show Menu Key\", &show_menu_key);\n\tImGui::Combo(\"Log Level\", &log_level, \"Error\\0Warning\\0Info\\0Debug\\0Trace\");\n\tif (log_level!= last_log_level) {\n\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n\t\tlast_log_level = log_level;\n\t}\n}", "CodeBleu_score": 47.938516624674754}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::Text(\"Main Settings\");\n\tImGui::Checkbox(\"Menu Key\", &menu_key);\n\tImGui::Checkbox(\"Show Cursor\", &show_cursor);\n\tImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n\tImGui::Checkbox(\"L3 + R3 Toggle\", &l3_r3_toggle);\n\tImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\tImGui::Text(\"Log Level\");\n\tImGui::Combo(\"Log Level\", &log_level, log_level_names, IM_ARRAYSIZE(log_level_names));\n\tif (log_level!= spdlog::get_level()) {\n\t\tspdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n\t}\n}", "CodeBleu_score": 34.61694944213842}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tif (!FeedbackContext ) {\n\t\tUE_LOG( LogOSMFile, Error, TEXT( \"No feedback context was provided to LoadOpenStreetMapFile.\" ) );\n\t\treturn false;\n\t}\n\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tif (!FeedbackContext->IsCanceled() ) {\n\t\t\tFFastXmlReader Reader( *OSMFilePath );\n\t\t\tif (!Reader.IsValid() ) {\n\t\t\t\tUE_LOG( LogOSMFile, Error, TEXT( \"Failed to create FastXmlReader from text buffer.\" ) );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn LoadOpenStreetMapFile( Reader, FeedbackContext );\n\t\t}\n\t}\n\telse {\n\t\tif (!FeedbackContext->IsCanceled() ) {\n\t\t\tFFastXmlReader Reader( *OSMFilePath );\n\t\t\tif (!Reader.IsValid() ) {\n\t\t\t\tUE_LOG( LogOSMFile, Error, TEXT( \"Failed to create FastXmlReader from file path.\" ) );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn LoadOpenStreetMapFile( Reader, FeedbackContext );\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 45.54378007157972}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Check if the file exists\n\tif (!FPaths::FileExists( OSMFilePath ) ) {\n\t\tUE_LOG( LogOSM, Error, TEXT( \"OSM file not found: %s\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// Open the file\n\tTSharedPtr<FArchive> File = IFileManager::Get().CreateFileReader( *OSMFilePath );\n\tif (!File.IsValid() ) {\n\t\tUE_LOG( LogOSM, Error, TEXT( \"Could not open OSM file: %s\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// Create a parser for the file\n\tFFastXmlParser Parser( File.Get(), FeedbackContext );\n\n\t// Create a context for the parser\n\tFFastXmlParserContext Context;\n\tContext.SetTagHandler( this );\n\tContext.SetCommentHandler( this );\n\tContext.SetCharacterDataHandler( this );\n\n\t// Parse the file\n\tif (!Parser.Parse( Context ) ) {\n\t\tUE_LOG( LogOSM, Error, TEXT( \"Error parsing OSM file: %s\" ), *OSMFilePath );\n\t\treturn false;\n\t}\n\n\t// Calculate the average latitude and longitude from the node data\n\tCalculateAverageLatLon();\n\n\treturn true;\n}", "CodeBleu_score": 43.51309055939168}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (Asset->IsA(UStreetMap::StaticClass())) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\t\tif (StreetMapComponent) {\n\t\t\t\tStreetMapComponent->SetStreetMapAsset(Cast<UStreetMap>(Asset));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 71.5756455108762}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tUStreetMapActorFactory::Super::PostSpawnActor(Asset, NewActor);\n\n\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\tif (StreetMapActor) {\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->StreetMapComponent;\n\t\tif (StreetMapComponent) {\n\t\t\tStreetMapComponent->StreetMapAsset = Cast<UStreetMap>(Asset);\n\t\t}\n\t}\n}", "CodeBleu_score": 62.803128644060344}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMapAsset(Cast<UStreetMap>(Asset));\n\t}\n}", "CodeBleu_score": 68.81686107981338}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif (LastDetailBuilderPtr!= nullptr) {\n\t\tLastDetailBuilderPtr->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 73.35991789060576}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(LastDetailBuilderPtr!= nullptr)\n\t{\n\t\tLastDetailBuilderPtr->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 73.4723997815104}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(LastDetailBuilderPtr!= nullptr)\n\t{\n\t\tLastDetailBuilderPtr->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 73.4723997815104}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the asset type with the asset tools.\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions);\n\n\t// Initialize the StreetMap style.\n\tStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent.\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed.\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 70.70234892789063}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the asset tools\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\");\n\tAssetToolsModule.RegisterAssetTypeActions(StreetMapAssetTypeActions);\n\n\t// Initialize the StreetMap style\n\tStreetMapStyle = MakeShareable(new FStreetMapStyle());\n\tStreetMapStyle->Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyEditorModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyEditorModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed\n\tPropertyEditorModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 59.92949613151457}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the asset type with the asset tools\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\");\n\tAssetToolsModule.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions(MapAssetCategory)));\n\n\t// Initialize the StreetMap style\n\tFStreetMapStyle::Initialize();\n\n\t// Register the custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyEditorModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyEditorModule.RegisterCustomClassLayout(UStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Notify the property editor module that the customization module has changed\n\tPropertyEditorModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 60.49708303578909}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// Check if the mesh is valid\n\tif (Mesh->GetNumSections() == 0 || Mesh->GetNumVertices() == 0) {\n\t\treturn nullptr;\n\t}\n\n\t// Create a new scene proxy\n\tFStreetMapSceneProxy* SceneProxy = new FStreetMapSceneProxy(this);\n\n\t// Initialize the scene proxy with the mesh's vertices and indices\n\tSceneProxy->InitResources();\n\n\t// Return the scene proxy\n\treturn SceneProxy;\n}", "CodeBleu_score": 37.76974709307442}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (IsValid(Mesh)) {\n\t\treturn new FStreetMapSceneProxy(this);\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 10.674431088188044}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// If the mesh is valid, create a new FStreetMapSceneProxy and initialize it with the component's vertices and indices.\n\tif (IsValidMesh()) {\n\t\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\t\tStreetMapSceneProxy->InitResource();\n\t\treturn StreetMapSceneProxy;\n\t}\n\t// If the mesh is not valid, return nullptr.\n\treturn nullptr;\n}", "CodeBleu_score": 52.62449317609214}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FInputActionKeyMapping> InputActionKeyMappings;\n\tInputActionKeyMappings.Add(FInputActionKeyMapping(\"Ability01\", EKeys::SpaceBar));\n\tInputBindingSpec->InputActionKeys.Add(InputActionKeyMappings);\n\tInputBindingSpec->Bind(ServerHandle, ClientHandle, InputActionKeyMappings);\n}", "CodeBleu_score": 50.981918342776446}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FString> InputIDs;\n\tInputIDs.Add(Ability01InputID);\n\tFAFAbilityInputSpecHandle InputSpecHandle = FAFAbilityInputSpecHandle::Create(InputIDs);\n\tFAFAbilityInputSpecHandle::Bind(ServerHandle, InputSpecHandle);\n}", "CodeBleu_score": 59.758407116635595}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FAFAbilityInputID> AbilityInputIDs;\n\tAbilityInputIDs.Add(FAFAbilityInputID(EFAFAction::Ability01));\n\tFAFAbilityInputBinding::BindAbilityToInput(ServerHandle, AbilityInputIDs);\n}", "CodeBleu_score": 62.81468520439844}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller && Value!= 0.0f) {\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 83.08730105517732}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller && Value!= 0.0f) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 83.08730105517732}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller && Value!= 0.0f) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 83.08730105517732}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMeshComponent) {\n\t\treturn MainWeaponMeshComponent->GetSocketLocation(Socket);\n\t} else {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 49.154890686562744}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (MainWeaponMeshComponent.IsValid()) {\n\t\treturn MainWeaponMeshComponent->GetSocketLocation(Socket);\n\t}\n\telse {\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t}\n}", "CodeBleu_score": 49.39464557373212}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\t// Get the main weapon mesh component\n\tUStaticMeshComponent* MainWeaponMesh = GetMainWeaponMeshComponent();\n\tif (MainWeaponMesh) {\n\t\t// Return the location of the specified socket on the main weapon mesh component\n\t\treturn MainWeaponMesh->GetSocketLocation(Socket);\n\t} else {\n\t\t// Return the location of the \"headSocket\" on the character's mesh\n\t\treturn GetMesh()->GetSocketLocation(\"headSocket\");\n\t}\n}", "CodeBleu_score": 58.39857040588996}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority)\n\t{\n\t\t// Remove the enemy from the list of spawned enemies.\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\t// If the number of spawned enemies falls below a minimum threshold, set up the spawner to respawn enemies.\n\t\tif (SpawnedEnemies.Num() < MinEnemies)\n\t\t{\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 61.77068533029574}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() <= MinEnemiesToSpawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 59.18871707867238}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinNumEnemies)\n\t{\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 59.66977584462463}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tParseOptions(Options, Params);\n\tfor (FString& Param : Params) {\n\t\tFString Key, Value;\n\t\tif (Param.Split(\"=\", &Key, &Value)) {\n\t\t\tif (Key == \"PlayerId\") {\n\t\t\t\tPlayerId = FCString::Atoi(*Value);\n\t\t\t}\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 56.08021407847043}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\n\tTArray<FString> OptionsArray;\n\tOptions.ParseIntoArray(OptionsArray, TEXT(\"&\"), true);\n\n\tint32 PlayerId = -1;\n\tfor (FString& Option : OptionsArray) {\n\t\tif (Option.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tOption.ReplaceInline(TEXT(\"PlayerId=\"), TEXT(\"\"));\n\t\t\tPlayerId = FCString::Atoi(*Option);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (PlayerId!= -1) {\n\t\tPlayerIdToPlayerState.Add(PlayerId, nullptr);\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 53.84445585956321}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tOptions.ParseIntoArray(&Params, TEXT(\" \"), true);\n\tint32 PlayerId = -1;\n\tfor (FString Param : Params) {\n\t\tif (Param.StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\tParam.Split(TEXT(\"=\"), &Param, &PlayerId);\n\t\t\tPlayerId = FCString::Atoi(*Param);\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 56.90399473093799}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = usernameField->GetText().ToString();\n\tFString displayName = displayNameField->GetText().ToString();\n\tFString password = passwordField->GetText().ToString();\n\n\tif (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty()) {\n\t\tUARGameInstance* gameInstance = Cast<UARGameInstance>(GetWorld()->GetGameInstance());\n\t\tgameInstance->ShowWarning(\"All fields must be filled out.\");\n\t} else {\n\t\tregisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t\tUARGameInstance* gameInstance = Cast<UARGameInstance>(GetWorld()->GetGameInstance());\n\t\tgameInstance->RegisterNewPlayer(username, displayName, password);\n\t}\n}", "CodeBleu_score": 53.09864319855957}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\t// Get the username and password from the input fields\n\tFString username = UsernameField->GetText().ToString();\n\tFString displayName = DisplayNameField->GetText().ToString();\n\tFString password = PasswordField->GetText().ToString();\n\n\t// Check if any of the fields are empty\n\tif (username.IsEmpty()) {\n\t\tDisplayErrorMessage(FString(TEXT(\"Please enter a username\")));\n\t\treturn;\n\t}\n\tif (displayName.IsEmpty()) {\n\t\tDisplayErrorMessage(FString(TEXT(\"Please enter a display name\")));\n\t\treturn;\n\t}\n\tif (password.IsEmpty()) {\n\t\tDisplayErrorMessage(FString(TEXT(\"Please enter a password\")));\n\t\treturn;\n\t}\n\n\t// Hide the register button and show the loading spinner\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tLoadingSpinner->SetVisibility(ESlateVisibility::Visible);\n\n\t// Register the new player\n\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n\tGameInstance->RegisterNewPlayer(username, displayName, password);\n}", "CodeBleu_score": 57.0216422198073}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tif (UsernameField->GetText().ToString().IsEmpty()) {\n\t\tFText WarningText = FText::FromString(\"Please enter a username.\");\n\t\tWarningBox->SetText(WarningText);\n\t\tWarningBox->SetVisibility(ESlateVisibility::Visible);\n\t\treturn;\n\t}\n\tif (DisplayNameField->GetText().ToString().IsEmpty()) {\n\t\tFText WarningText = FText::FromString(\"Please enter a display name.\");\n\t\tWarningBox->SetText(WarningText);\n\t\tWarningBox->SetVisibility(ESlateVisibility::Visible);\n\t\treturn;\n\t}\n\tif (PasswordField->GetText().ToString().IsEmpty()) {\n\t\tFText WarningText = FText::FromString(\"Please enter a password.\");\n\t\tWarningBox->SetText(WarningText);\n\t\tWarningBox->SetVisibility(ESlateVisibility::Visible);\n\t\treturn;\n\t}\n\tif (PasswordField->GetText().ToString()!= ConfirmPasswordField->GetText().ToString()) {\n\t\tFText WarningText = FText::FromString(\"Passwords do not match.\");\n\t\tWarningBox->SetText(WarningText);\n\t\tWarningBox->SetVisibility(ESlateVisibility::Visible);\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tRegisterButton->SetIsEnabled(false);\n\tRegisterButton->SetIsEnabled(false);\n\tRegisterButton->SetIsEnabled(false);\n\n\tFString username = UsernameField->GetText().ToString();\n\tFString displayname = DisplayNameField->GetText().ToString();\n\tFString password = PasswordField->GetText().ToString();\n\n\tUARGameInstance* gameInstance = Cast<UARGameInstance>(GetWorld()->GetGameInstance());\n\tif (gameInstance) {\n\t\tgameInstance->RegisterNewPlayer(username, displayname, password);\n\t}\n}", "CodeBleu_score": 51.970315881539776}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (!InMod.TargetActor) return;\n\n\t// Get the damage amount\n\tfloat DamageAmount = InMod.NewValue;\n\n\t// Get the screen location of the enemy\n\tFVector2D ScreenLocation = GetScreenLocation(InMod.TargetActor->GetActorLocation());\n\n\t// Set the floating combat text\n\tFloatingCombatText->SetText(FText::AsNumber(DamageAmount));\n\tFloatingCombatText->SetLocation(ScreenLocation);\n}", "CodeBleu_score": 31.1561127935628}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Attribute == FAFAttribute::Health) {\n\t\tif (InMod.TargetActor) {\n\t\t\t// Get the location of the enemy\n\t\t\tFVector2D EnemyLocation = GetWorld()->GetFirstPlayerController()->ProjectWorldLocationToScreen(InMod.TargetActor->GetActorLocation());\n\n\t\t\t// Set the text to the floating combat text\n\t\t\tFloatingCombatText->SetText(FText::FromString(FString::FromInt(InMod.NewValue)));\n\n\t\t\t// Set the location of the floating combat text\n\t\t\tFloatingCombatText->SetLocation(EnemyLocation);\n\n\t\t\t// Set the floating combat text to be visible\n\t\t\tFloatingCombatText->SetVisibility(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.56708539444385}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (!InMod.TargetActor.IsValid()) {\n\t\treturn;\n\t}\n\n\t// Get the damage value.\n\tconst float DamageValue = InMod.NewValue;\n\tif (DamageValue <= 0.0f) {\n\t\treturn;\n\t}\n\n\t// Get the location of the damage.\n\tconst FVector DamageLocation = InMod.TargetActor->GetActorLocation();\n\tconst FVector2D ScreenLocation = ProjectWorldLocationToScreen(DamageLocation);\n\n\t// Set the floating combat text.\n\tFloatingCombatText->SetDamageValue(DamageValue);\n\tFloatingCombatText->SetScreenLocation(ScreenLocation);\n\tFloatingCombatText->SetVisibility(true);\n}", "CodeBleu_score": 36.42059253399452}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponComponent* WeaponComponent = Cast<UARWeaponComponent>(AbilityInstance->GetOwningComponent());\n\t\tif (WeaponComponent && WeaponComponent->GetCharacterOwner()) {\n\t\t\tUARMagazineUpgradeItem* NewMagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\t\tif (WeaponComponent->GetCharacterOwner()->HasAuthority()) {\n\t\t\t\tNewMagazineUpgrade->MagazineUpgradeValue = NewMagazineUpgrade->MagazineUpgradeValue + WeaponComponent->GetCharacterOwner()->GetMagazineUpgradeValue();\n\t\t\t\tNewMagazineUpgrade->ApplyUpgradeEffect(AbilityInstance);\n\t\t\t}\n\t\t\tOnMagazineUpdateAdded();\n\t\t}\n\t}\n}", "CodeBleu_score": 46.42551028972722}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance.IsValid()) {\n\t\tUARWeaponComponent* WeaponComponent = GetWeaponComponent();\n\t\tif (WeaponComponent && WeaponComponent->GetOwningCharacter()) {\n\t\t\tUARMagazineUpgradeItem* NewMagazineUpgrade = DuplicateObject(InMagazineUpgrade, WeaponComponent->GetOwningCharacter());\n\t\t\tif (NewMagazineUpgrade) {\n\t\t\t\tif (WeaponComponent->GetOwningCharacter()->HasAuthority()) {\n\t\t\t\t\tWeaponComponent->GetOwningCharacter()->Server_AddMagazineUpgrade(NewMagazineUpgrade);\n\t\t\t\t}\n\t\t\t\tOnMagazineUpdateAdded();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 32.49740101267322}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (IsValid(AbilityInstance)) {\n\t\tUARWeaponComponent* WeaponComponent = GetWeaponComponent();\n\t\tUARCharacter* Character = GetCharacter();\n\t\tif (IsValid(WeaponComponent) && IsValid(Character)) {\n\t\t\tif (Character->HasAuthority()) {\n\t\t\t\tUARMagazineUpgradeItem* NewMagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, this);\n\t\t\t\tif (IsValid(NewMagazineUpgrade)) {\n\t\t\t\t\tNewMagazineUpgrade->UpgradeValue = NewMagazineUpgrade->UpgradeValue + WeaponComponent->MagazineUpgradeValue;\n\t\t\t\t\tAbilityInstance->ApplyUpgrade(NewMagazineUpgrade);\n\t\t\t\t}\n\t\t\t}\n\t\t\tOnMagazineUpdateAdded();\n\t\t}\n\t}\n}", "CodeBleu_score": 53.25838523582266}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (AARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner())) {\n\t\tUARAbilitySystemComponent* AbilitySystemComponent = OwnerCharacter->GetAbilitySystemComponent();\n\t\tif (AbilitySystemComponent) {\n\t\t\tUARWeaponAbilityBase* WeaponAbility = Cast<UARWeaponAbilityBase>(AbilitySystemComponent->GetAbilityByHandle(InAbilityTag));\n\t\t\tif (WeaponAbility) {\n\t\t\t\tSetAbilityToItem(LocalIndex, WeaponAbility);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.63266998475383}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\n\tif (!OwnerCharacter)\n\t\treturn;\n\n\tUARAbilitySystemComponent* AbilitySystemComponent = OwnerCharacter->GetAbilitySystemComponent();\n\n\tif (!AbilitySystemComponent)\n\t\treturn;\n\n\tUGAWeaponAbility* ServerAbility = AbilitySystemComponent->GetAbilityByHandle(InAbilityTag);\n\n\tif (!ServerAbility)\n\t\treturn;\n\n\tUGAAbilityBase* Ability = Cast<UGAAbilityBase>(ServerAbility);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 55.21703146735124}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (!AbilityTag.IsValid())\n\t\treturn;\n\n\tAARCharacter* OwnerCharacter = Cast<AARCharacter>(GetOwner());\n\tif (!OwnerCharacter)\n\t\treturn;\n\n\tUAbilitySystemComponent* AbilitySystem = OwnerCharacter->GetAbilitySystemComponent();\n\tif (!AbilitySystem)\n\t\treturn;\n\n\tUARItemWeapon* ItemWeapon = GetItem<UARItemWeapon>(LocalIndex);\n\tif (!ItemWeapon)\n\t\treturn;\n\n\tUARWeaponAbilityBase* WeaponAbility = AbilitySystem->GetAbilityFromHandle(InAbilityTag);\n\tif (!WeaponAbility)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, WeaponAbility);\n}", "CodeBleu_score": 53.36148813614797}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tif (CurrentWeaponIndex == LocalIndex)\n\t\t{\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFARWeaponRPC Data;\n\t\t\tData.Weapon = nullptr;\n\t\t\t//Data.SocketName = InWeapon->Socket;\n\t\t\tData.Position = FVector(0, 0, 0);\n\t\t\tData.Rotation = FRotator(0, 0, 0);\n\t\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\t}\n\t}\n}", "CodeBleu_score": 67.79352683223728}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tif (CurrentWeaponIndex == LocalIndex) {\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = nullptr;\n\t\t//Data.SocketName = InWeapon->Socket;\n\t\tData.Position = GroupToComponent[LocalIndex]->GetRelativeLocation();\n\t\tData.Rotation = GroupToComponent[LocalIndex]->GetRelativeRotation();\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t}\n}", "CodeBleu_score": 65.86357133785579}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tif (CurrentWeaponIndex == LocalIndex)\n\t\t{\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFARWeaponRPC Data;\n\t\t\tData.Weapon = FString();\n\t\t\tData.SocketName = FString();\n\t\t\tData.Position = FVector(0, 0, 0);\n\t\t\tData.Rotation = FRotator(0, 0, 0);\n\t\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\t\tServerHolster(Data);\n\t\t}\n\t}\n}", "CodeBleu_score": 66.23785939885356}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tFAsyncLoadingScreenModule::AsyncLoadingScreenModuleHandle = nullptr;\n\tFAsyncLoadingScreenModule::AsyncLoadingScreenModuleHandle = nullptr;\n}", "CodeBleu_score": 8.059864722209753}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tFAsyncLoadingScreenModule::UnregisterAll();\n}", "CodeBleu_score": 11.31868026775733}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t// This function needs to be implemented\n}", "CodeBleu_score": 4.448538495338253}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen:\"));\n\n\tif (GetDefault<ULoadingScreenSettings>()->bEnableLoadingScreen == true)\n\t{\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen: Loading screen is enabled, setting up the loading screen.\"));\n\t\tGetDefault<ULoadingScreenSettings>()->bStartup = false;\n\t\tSetupLoadingScreen(GetDefault<ULoadingScreenSettings>()->DefaultSettings);\n\t}\n}", "CodeBleu_score": 52.22410705371588}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\t// If the loading screen is disabled, don't setup the loading screen\n\tif (!GetDefault<ULoadingScreenSettings>()->bEnableLoadingScreen)\n\t{\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Loading screen is disabled\"));\n\t\treturn;\n\t}\n\n\t// If the startup flag is true, don't setup the loading screen\n\tif (StartupLoadingScreen)\n\t{\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Startup flag is true\"));\n\t\treturn;\n\t}\n\n\t// Get the default loading screen settings\n\tFALoadingScreenSettings LoadingScreenSettings;\n\tGetDefault<ULoadingScreenSettings>()->GetSettings(LoadingScreenSettings);\n\n\t// Set the startup flag to true\n\tStartupLoadingScreen = true;\n\n\t// Set the loading screen\n\tSetupLoadingScreen(LoadingScreenSettings);\n}", "CodeBleu_score": 49.11005990853886}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen()\"));\n\n\tif (UAsyncLoadingScreenLibrary::IsLoadingScreenEnabled() == true)\n\t{\n\t\t// Retrieve the default loading screen settings\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t\t// Set the startup flag to false\n\t\tUAsyncLoadingScreenLibrary::SetStartupFlag(false);\n\n\t\t// Set up the loading screen\n\t\tSetupLoadingScreen(Settings->LoadingScreen);\n\t}\n}", "CodeBleu_score": 49.85381335416194}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tRemoveAllBackgroundImages();\n\n\t// Load the loading screen settings\n\tUAsyncLoadingScreenSettings* LoadingScreenSettings = GetDefault<UAsyncLoadingScreenSettings>();\n\tif (!LoadingScreenSettings) {\n\t\tUE_LOG(LogAsyncLoadingScreen, Error, TEXT(\"Failed to load loading screen settings\"));\n\t\treturn;\n\t}\n\n\t// Load the startup background image\n\tif (LoadingScreenSettings->StartupBackgroundImage.IsSet()) {\n\t\tFSoftObjectPath StartupBackgroundImagePath = LoadingScreenSettings->StartupBackgroundImage.ToSoftObjectPath();\n\t\tif (StartupBackgroundImagePath.IsValid()) {\n\t\t\tUTexture2D* StartupBackgroundImage = StartupBackgroundImagePath.TryLoad();\n\t\t\tif (StartupBackgroundImage) {\n\t\t\t\tStartupBackgroundImages.Add(StartupBackgroundImage);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Load the default background image\n\tif (LoadingScreenSettings->DefaultBackgroundImage.IsSet()) {\n\t\tFSoftObjectPath DefaultBackgroundImagePath = LoadingScreenSettings->DefaultBackgroundImage.ToSoftObjectPath();\n\t\tif (DefaultBackgroundImagePath.IsValid()) {\n\t\t\tUTexture2D* DefaultBackgroundImage = DefaultBackgroundImagePath.TryLoad();\n\t\t\tif (DefaultBackgroundImage) {\n\t\t\t\tDefaultBackgroundImages.Add(DefaultBackgroundImage);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.025760791424716}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tRemoveAllBackgroundImages();\n\tFLoadingScreenSettings& LoadingScreenSettings = FLoadingScreenSettings::Get();\n\n\t// Load the startup background image\n\tif (LoadingScreenSettings.StartupImage.IsSet())\n\t{\n\t\tStartupBackgroundImages.Add(LoadBackgroundImage(LoadingScreenSettings.StartupImage.GetValue()));\n\t}\n\n\t// Load the default background image\n\tif (LoadingScreenSettings.DefaultImage.IsSet())\n\t{\n\t\tDefaultBackgroundImages.Add(LoadBackgroundImage(LoadingScreenSettings.DefaultImage.GetValue()));\n\t}\n}", "CodeBleu_score": 28.1475576422696}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tRemoveAllBackgroundImages();\n\n\t// Retrieve the loading screen settings\n\tFLoadingScreenSettings LoadingScreenSettings = FLoadingScreenSettings::Get();\n\n\t// Load and add images for the startup loading screen\n\tif (LoadingScreenSettings.StartupBackgroundImage.IsSet()) {\n\t\tStartupBackgroundImages.Add(LoadingScreenSettings.StartupBackgroundImage.GetValue());\n\t}\n\telse {\n\t\tStartupBackgroundImages.Add(FLoadingScreenSettings::Get().DefaultBackgroundImage);\n\t}\n\n\t// Load and add images for the default loading screen\n\tif (LoadingScreenSettings.DefaultBackgroundImage.IsSet()) {\n\t\tDefaultBackgroundImages.Add(LoadingScreenSettings.DefaultBackgroundImage.GetValue());\n\t}\n\telse {\n\t\tDefaultBackgroundImages.Add(FLoadingScreenSettings::Get().DefaultBackgroundImage);\n\t}\n}", "CodeBleu_score": 35.98762086947494}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Update the alpha value based on the elapsed time and animation speed\n\tfloat Alpha = FMath::Lerp(MinAlpha, MaxAlpha, FMath::Sin(FMath::DegreesToRadians(360.0f) * (InCurrentTime / AnimationDuration)));\n\n\t// Set the text's alpha\n\tLoadingCompleteText->SetOpacity(Alpha);\n\n\t// Return whether the animation should continue or not\n\treturn Alpha < MinAlpha || Alpha > MaxAlpha? EActiveTimerReturnType::Stop : EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 22.83047710634371}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (CurrentTextAlpha < MinAlpha) {\n\t\tAnimationDirection = ETextAnimationDirection::ETextAnimationDirection_Increasing;\n\t}\n\telse if (CurrentTextAlpha > MaxAlpha) {\n\t\tAnimationDirection = ETextAnimationDirection::ETextAnimationDirection_Decreasing;\n\t}\n\n\tif (AnimationDirection == ETextAnimationDirection::ETextAnimationDirection_Increasing) {\n\t\tCurrentTextAlpha += InDeltaTime * AnimationSpeed;\n\t}\n\telse if (AnimationDirection == ETextAnimationDirection::ETextAnimationDirection_Decreasing) {\n\t\tCurrentTextAlpha -= InDeltaTime * AnimationSpeed;\n\t}\n\n\tLoadingCompleteText->SetOpacity(CurrentTextAlpha);\n\n\tif (CurrentTextAlpha >= MaxAlpha) {\n\t\treturn EActiveTimerReturnType::EActiveTimerReturn_Stop;\n\t}\n\telse if (CurrentTextAlpha <= MinAlpha) {\n\t\treturn EActiveTimerReturnType::EActiveTimerReturn_Restart;\n\t}\n\n\treturn EActiveTimerReturnType::EActiveTimerReturn_Continue;\n}", "CodeBleu_score": 42.386927848924806}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Calculate the current alpha value based on the elapsed time and animation speed\n\tfloat CurrentAlpha = FMath::Lerp(MinAlpha, MaxAlpha, FMath::Abs(FMath::Sin(InCurrentTime * AnimationSpeed)));\n\n\t// Update the text's alpha value\n\tLoadingCompleteText->SetOpacity(CurrentAlpha);\n\n\t// Return whether the animation should continue\n\treturn (CurrentAlpha < MinAlpha || CurrentAlpha > MaxAlpha)? EActiveTimerReturnType::Stop : EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 23.130499172975387}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> lock(data->mutex);\n\tif (data->index == -1) {\n\t\tlock.unlock();\n\t\treturn true;\n\t}\n\tlock.unlock();\n\treturn false;\n}", "CodeBleu_score": 52.09469108390044}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::lock_guard<std::mutex> lock(m_mutex);\n\treturn m_index!= -1;\n}", "CodeBleu_score": 6.203897899718931}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> lock(m_mutex);\n\tif (m_index!= -1) {\n\t\tlock.unlock();\n\t\treturn true;\n\t}\n\telse {\n\t\tlock.unlock();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 52.91713604683088}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\treturn true;\n}", "CodeBleu_score": 3.4344976466915123}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (State == nullptr) {\n\t\treturn true;\n\t}\n\n\tif (bCleanup) {\n\t\tFindPathState* pState = (FindPathState*)State;\n\t\tif (pState->QueryID!= FIND_PATH_INVALID_QUERY_ID) {\n\t\t\tpState->pNavQuery->removeQuery(pState->QueryID);\n\t\t\tpState->QueryID = FIND_PATH_INVALID_QUERY_ID;\n\t\t}\n\t\tdelete pState;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 34.007346578975316}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tbool bResult = false;\n\tif (State) {\n\t\tif (bCleanup) {\n\t\t\t// abort the async request\n\t\t\t// delete the state\n\t\t\tbResult = true;\n\t\t} else {\n\t\t\t// resume the async request\n\t\t\tbResult = false;\n\t\t}\n\t}\n\treturn bResult;\n}", "CodeBleu_score": 18.483779823751984}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tget_viewport()->_audio_listener_2d_set(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tget_viewport()->_audio_listener_2d_remove(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tdefault: break;\n\t}\n}", "CodeBleu_score": 57.93701743991314}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && get_viewport() && get_viewport()->get_audio_listener_2d() && get_viewport()->get_audio_listener_2d()!= this) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 65.67545006265694}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && get_viewport()->get_audio_listener_2d()) {\n\t\t\t\tcurrent = true;\n\t\t\t\tget_viewport()->_audio_listener_2d_set(this);\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tcurrent = false;\n\t\t\t\t\tget_viewport()->_audio_listener_2d_remove(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 67.35981181081401}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tERR_FAIL_COND_MSG(p_frames <= 0, \"Invalid number of frames.\");\n\tERR_FAIL_COND_MSG(p_buffer == nullptr, \"Invalid buffer.\");\n\n\tif (!active) {\n\t\treturn;\n\t}\n\n\tif (use_threads) {\n\t\treturn;\n\t}\n\n\tint frames_to_mix = p_frames;\n\tint32_t *buffer_ptr = p_buffer;\n\n\twhile (frames_to_mix > 0) {\n\t\tint frames_to_mix_in_chunk = MIN(frames_to_mix, chunk_size);\n\n\t\tlock();\n\t\taudio_server_process(frames_to_mix_in_chunk, buffer_ptr, false);\n\t\tunlock();\n\n\t\tframes_to_mix -= frames_to_mix_in_chunk;\n\t\tbuffer_ptr += frames_to_mix_in_chunk * channels;\n\t}\n}", "CodeBleu_score": 39.033730465643416}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (!active) {\n\t\treturn;\n\t}\n\n\tif (use_threads) {\n\t\treturn;\n\t}\n\n\tif (p_frames < 1) {\n\t\treturn;\n\t}\n\n\tlock();\n\n\tint frames = p_frames;\n\tint32_t *buffer = p_buffer;\n\n\twhile (frames > 0) {\n\t\tint to_mix = MIN(frames, 1024);\n\n\t\tfor (int i = 0; i < to_mix; i++) {\n\t\t\tbuffer[i] = 0;\n\t\t}\n\n\t\taudio_server_process(to_mix, buffer, false);\n\n\t\tframes -= to_mix;\n\t\tbuffer += to_mix;\n\t}\n\n\tunlock();\n}", "CodeBleu_score": 41.83546815549243}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tERR_FAIL_COND(active);\n\tERR_FAIL_COND(!mix_thread.is_null());\n\n\tint frames_left = p_frames;\n\twhile (frames_left > 0) {\n\t\tint frames_to_mix = MIN(frames_left, mix_chunk_size);\n\t\tlock();\n\t\taudio_server_process(frames_to_mix, p_buffer, false);\n\t\tunlock();\n\t\tframes_left -= frames_to_mix;\n\t\tp_buffer += frames_to_mix * channels;\n\t}\n}", "CodeBleu_score": 39.152014250276125}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tERR_FAIL_COND_MSG(gravity_type!= AREA_GRAVITY_POINT, \"Area2D gravity type must be AREA_GRAVITY_POINT.\");\n\tr_gravity = gravity_vector;\n\tif (gravity_type == AREA_GRAVITY_POINT) {\n\t\tr_gravity /= p_position.distance_squared_to(gravity_point);\n\t}\n}", "CodeBleu_score": 16.5386104858046}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tERR_FAIL_COND(gravity_type == AREA_2D_GRAVITY_TYPE_NONE);\n\tERR_FAIL_COND(gravity_type == AREA_2D_GRAVITY_TYPE_POINT &&!gravity_point.is_valid());\n\tERR_FAIL_COND(gravity_type == AREA_2D_GRAVITY_TYPE_VECTOR && gravity_vector.length() == 0);\n\n\tVector2 gravity;\n\n\tif (gravity_type == AREA_2D_GRAVITY_TYPE_POINT) {\n\t\tVector2 diff = p_position - gravity_point->get_global_position();\n\t\tfloat distance = diff.length();\n\t\tif (distance > 0) {\n\t\t\tgravity = diff.normalized() * (gravity_strength / (distance * distance));\n\t\t}\n\t} else {\n\t\tgravity = gravity_vector.normalized() * gravity_strength;\n\t}\n\n\tr_gravity = gravity;\n}", "CodeBleu_score": 44.66138958293908}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tERR_FAIL_COND(gravity_mode == AREA_2D_GRAVITY_MODE_NONE);\n\tERR_FAIL_COND(gravity_mode == AREA_2D_GRAVITY_MODE_POINT);\n\tERR_FAIL_COND(gravity_mode == AREA_2D_GRAVITY_MODE_SURFACE);\n\n\tr_gravity = gravity;\n\n\tif (gravity_mode == AREA_2D_GRAVITY_MODE_POINT) {\n\t\tfloat distance = p_position.distance_to(gravity_point);\n\t\tr_gravity *= 1.0 / (distance * distance);\n\t}\n}", "CodeBleu_score": 26.198041731443215}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t// First, we iterate through the list of constraints\n\tfor (int i = 0; i < constraint_count; i++) {\n\t\t// We get the constraint\n\t\tGodotConstraint2D *constraint = constraint_list[i];\n\t\t// We get the body connected to this constraint\n\t\tGodotBody2D *body = constraint->get_body();\n\t\t// If the body is in rigid mode and not active\n\t\tif (body->get_mode() == BODY_MODE_RIGID &&!body->is_active()) {\n\t\t\t// We set it to active\n\t\t\tbody->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 34.453718281576364}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t// Make sure the body is in a valid state\n\tif (!is_active()) {\n\t\treturn;\n\t}\n\n\t// Iterate through the list of constraints\n\tfor (int i = 0; i < constraints.size(); i++) {\n\t\t// Get the constraint\n\t\tGodotConstraint2D *constraint = constraints[i];\n\n\t\t// Get the connected body\n\t\tGodotBody2D *body = constraint->get_body_b();\n\n\t\t// If the body is in rigid mode and not active, activate it\n\t\tif (body->get_mode() == GodotBody2D::RIGID &&!body->is_active()) {\n\t\t\tbody->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.23066162956869}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\t// Make sure the body is in a valid state\n\tERR_FAIL_COND(!is_active());\n\tERR_FAIL_COND(is_sleeping());\n\n\t// Iterate through all constraints\n\tfor (int i = 0; i < _constraints.size(); i++) {\n\t\t// Get the constraint\n\t\tGodotConstraint2D *constraint = _constraints[i];\n\n\t\t// Get the body\n\t\tGodotBody2D *body = constraint->get_body();\n\n\t\t// Make sure the body is valid\n\t\tERR_FAIL_COND(!body);\n\n\t\t// If the body is in rigid mode and not currently active\n\t\tif (body->is_rigid() &&!body->is_active()) {\n\t\t\t// Set the body to active\n\t\t\tbody->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.559688256105325}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (is_inside_tree()) {\n\t\tif (monitor_query_list.find(this) == -1) {\n\t\t\tmonitor_query_list.push_back(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.66995629691347}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (monitor_query_list.find(this) == -1) {\n\t\tmonitor_query_list.push_back(this);\n\t}\n}", "CodeBleu_score": 25.79111053657143}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (space) {\n\t\tif (!space->is_in_list(this)) {\n\t\t\tspace->add_to_list(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 24.085289387716806}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\t// Update center of mass\n\t_update_center_of_mass();\n\t// Update principal inertia axes\n\t_update_principal_inertia_axes();\n\t// Update inertia tensor\n\t_update_inertia_tensor();\n}", "CodeBleu_score": 7.4357201060280635}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (get_mode() == MODE_STATIC) {\n\t\treturn;\n\t}\n\n\tif (get_mode() == MODE_KINEMATIC) {\n\t\t_set_transform_dependent(get_transform());\n\t\treturn;\n\t}\n\n\t// TODO: Update this to use the current transform, not the previous one.\n\t// This is currently broken due to the fact that the transform is not updated when the body is sleeping.\n\t// This is a problem because the inertia tensor is updated using the previous transform, which is not updated when the body is sleeping.\n\t// The solution is to update the transform in the _integrate_forces function.\n\t// The transform will be updated to the current one when the body is awake.\n\n\t// Transform the center of mass.\n\tVector3 center_of_mass_local = get_center_of_mass_local();\n\tVector3 center_of_mass_global = get_transform().xform(center_of_mass_local);\n\t_set_center_of_mass(center_of_mass_global);\n\n\t// Transform the principal inertia axes.\n\tBasis inertia_local = get_inertia_local();\n\tBasis inertia_global = get_transform().basis.xform(inertia_local);\n\t_set_inertia(inertia_global);\n}", "CodeBleu_score": 39.6427968869497}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\t// Update the center of mass.\n\t_update_center_of_mass();\n\n\t// Update the principal inertia axes.\n\t_update_principal_inertia_axes();\n\n\t// Update the inertia tensor.\n\t_update_inertia_tensor();\n}", "CodeBleu_score": 7.4357201060280635}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->audio_server_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 87.48735383021885}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 90.14566834641015}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (!AudioServer::get_singleton()) {\n\t\treturn;\n\t}\n\n\tAudioServer::get_singleton()->process(p_frames, p_buffer);\n}", "CodeBleu_score": 79.31184411263476}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND_MSG(!p_feed.is_valid(), \"Invalid feed reference.\");\n\n\tint feed_id = p_feed->get_id();\n\tint index = -1;\n\tfor (int i = 0; i < _feeds.size(); i++) {\n\t\tif (_feeds[i]->get_id() == feed_id) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tERR_FAIL_COND_MSG(index == -1, \"Feed not found.\");\n\n\t_feeds.remove(index);\n\n\temit_signal(SNAME(\"feed_removed\"), feed_id);\n}", "CodeBleu_score": 52.54265276862131}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tif (p_feed.is_null()) {\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < _feeds.size(); i++) {\n\t\tif (_feeds[i] == p_feed) {\n\t\t\tCameraFeed *feed = _feeds[i];\n\t\t\t_feeds.remove(i);\n\t\t\tfeed->stop();\n\t\t\tfeed->unref();\n\t\t\temit_signal(SNAME(\"feed_removed\"), feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 50.97281747804463}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t// Check if the feed is in the list of feeds\n\tfor (uint32_t i = 0; i < _feeds.size(); i++) {\n\t\tif (_feeds[i] == p_feed) {\n\t\t\t// Remove the feed from the list\n\t\t\t_feeds.remove(i);\n\n\t\t\t// Emit a signal indicating the feed has been removed\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\n\t\t\t// Log the removal of the feed\n\t\t\tprint_line(String(\"Removed feed with ID {0}\").format(varray(p_feed->get_id())));\n\n\t\t\t// Exit the loop\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Log that the feed was not found\n\tprint_line(String(\"Feed with ID {0} not found\").format(varray(p_feed->get_id())));\n}", "CodeBleu_score": 56.53734866262459}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t} else {\n\t\tCC_SAFE_DELETE(ret);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 43.843708707028064}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 48.70458256955082}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tEaseRateAction* ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t} else {\n\t\tCC_SAFE_DELETE(ret);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 43.843708707028064}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (auto child : node->getChildren()) {\n\t\tNode* childNode = findChildByNameRecursively(child, childName);\n\t\tif (childNode!= nullptr) {\n\t\t\treturn childNode;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 50.22772961042594}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tfor (auto &child : node->getChildren()) {\n\t\tNode* result = findChildByNameRecursively(child, childName);\n\t\tif (result!= nullptr) {\n\t\t\treturn result;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 49.99379661596354}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tfor (auto child : node->getChildren()) {\n\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\tif (foundNode!= nullptr) {\n\t\t\treturn foundNode;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 50.129032297671486}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\tif (m_target) {\n\t\tm_target->removeFadeInAnimation(this);\n\t\tm_target->removeFadeOutAnimation(this);\n\t\tm_target->removeRunningAnimation(this);\n\t}\n}", "CodeBleu_score": 11.82507220411958}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (target) {\n\t\t//Erase the action from the fade-in, fade-out, and running animation maps if it matches the current instance\n\t\tif (target->fade_in_animations.count(this)) {\n\t\t\ttarget->fade_in_animations.erase(this);\n\t\t}\n\t\tif (target->fade_out_animations.count(this)) {\n\t\t\ttarget->fade_out_animations.erase(this);\n\t\t}\n\t\tif (target->running_animations.count(this)) {\n\t\t\ttarget->running_animations.erase(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 15.92137787838184}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (target) {\n\t\ttarget->removeFadeInAnimation(this);\n\t\ttarget->removeFadeOutAnimation(this);\n\t\ttarget->removeRunningAnimation(this);\n\t}\n}", "CodeBleu_score": 11.605680870730545}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* animation = nullptr;\n\n\t// Generate a unique key for the animation\n\tstd::string key = fileName + animationName;\n\n\t// Check if the animation is already in the cache\n\tauto it = s_animations.find(key);\n\tif (it!= s_animations.end()) {\n\t\t// Return the animation from the cache\n\t\tanimation = it->second;\n\t} else {\n\t\t// Create a new animation\n\t\tanimation = new Animation3D();\n\n\t\t// Initialize the animation\n\t\tif (animation->init(fileName, animationName)) {\n\t\t\t// Add the animation to the cache\n\t\t\ts_animations[key] = animation;\n\t\t} else {\n\t\t\t// The initialization failed, so delete the animation\n\t\t\tdelete animation;\n\t\t\tanimation = nullptr;\n\t\t}\n\t}\n\n\treturn animation;\n}", "CodeBleu_score": 47.62253740727516}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = nullptr;\n\tauto iter = s_AnimationCache.find(key);\n\tif (iter == s_AnimationCache.end()) {\n\t\tanimation = new Animation3D();\n\t\tif (animation->init(fileName, animationName)) {\n\t\t\ts_AnimationCache.insert(std::make_pair(key, animation));\n\t\t}\n\t\telse {\n\t\t\tdelete animation;\n\t\t\tanimation = nullptr;\n\t\t}\n\t}\n\telse {\n\t\tanimation = iter->second;\n\t}\n\treturn animation;\n}", "CodeBleu_score": 48.289247823571806}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = nullptr;\n\tif (m_cache.find(key)!= m_cache.end()) {\n\t\tanimation = m_cache[key];\n\t}\n\telse {\n\t\tanimation = new Animation3D();\n\t\tif (animation->init(fileName, animationName)) {\n\t\t\tm_cache[key] = animation;\n\t\t}\n\t\telse {\n\t\t\tdelete animation;\n\t\t\tanimation = nullptr;\n\t\t}\n\t}\n\treturn animation;\n}", "CodeBleu_score": 42.135422411449}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tAnimation3D* animation = NULL;\n\tfor (int i = 0; i < _animations.size(); i++) {\n\t\tanimation = _animations[i];\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\t_animations.erase(_animations.begin() + i);\n\t\t\ti--;\n\t\t}\n\t}\n}", "CodeBleu_score": 40.639781794752864}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\t// Iterate through the animation cache\n\tfor (auto it = _animationCache.begin(); it!= _animationCache.end(); ) {\n\t\t// Get the animation\n\t\tAnimation3D* animation = it->second;\n\n\t\t// If the animation's reference count is 1, release the animation and remove it from the cache\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\tit = _animationCache.erase(it);\n\t\t}\n\t\t// Otherwise, increment the iterator\n\t\telse {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 52.844308336056876}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tAnimation3D* anim = NULL;\n\tAnimation3D* next = NULL;\n\tAnimation3D* prev = NULL;\n\tAnimation3D* first = NULL;\n\tAnimation3D* last = NULL;\n\n\tif (m_pAnimation3DCache == NULL) {\n\t\treturn;\n\t}\n\n\tfirst = m_pAnimation3DCache;\n\tlast = m_pAnimation3DCache->m_pNext;\n\n\twhile (last!= NULL) {\n\t\tnext = last->m_pNext;\n\t\tanim = last;\n\n\t\tif (anim->m_nReferenceCount == 1) {\n\t\t\tif (first == last) {\n\t\t\t\tm_pAnimation3DCache = NULL;\n\t\t\t\tlast = NULL;\n\t\t\t\tfirst = NULL;\n\t\t\t} else {\n\t\t\t\tif (prev!= NULL) {\n\t\t\t\t\tprev->m_pNext = next;\n\t\t\t\t} else {\n\t\t\t\t\tm_pAnimation3DCache = next;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tanim->m_pNext = NULL;\n\t\t\tanim->m_pPrev = NULL;\n\t\t\tanim->m_nReferenceCount = 0;\n\n\t\t\tdelete anim;\n\t\t\tanim = NULL;\n\t\t} else {\n\t\t\tprev = anim;\n\t\t}\n\n\t\tlast = next;\n\t}\n}", "CodeBleu_score": 34.52282818367301}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *ret = new (std::nothrow) BillBoard();\n\tif (ret && ret->initWithTexture(texture, mode)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 58.506668946381794}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *pRet = new(std::nothrow) BillBoard();\n\tif (pRet && pRet->initWithTexture(texture, mode)) {\n\t\tpRet->autorelease();\n\t\treturn pRet;\n\t}\n\telse {\n\t\tdelete pRet;\n\t\tpRet = nullptr;\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 52.628150359763346}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *ret = new (std::nothrow) BillBoard();\n\tif (ret && ret->initWithTexture(texture, mode)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 58.506668946381794}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\tth.empty() || _path == path)\n\t\treturn true;\n\n\t// Load binary or json\n\tif (path.find(\".c3b\")!= std::string::npos)\n\t\treturn loadBinary(path);\n\telse if (path.find(\".c3t\")!= std::string::npos)\n\t\treturn loadJson(path);\n\n\t// Log warning\n\tCCLOG(\"warning: Invalid file format: %s\", path.c_str());\n\treturn false;\n}", "CodeBleu_score": 28.47037440024992}, {"code": "bool Bundle3D::load(const std::string& path){\n\tth.empty() || _path == path)\n\t\treturn false;\n\n\t// Clear the previous bundle\n\tclear();\n\n\t// Set the path\n\t_path = path;\n\n\t// Get the file extension\n\tssize_t index = path.find_last_of('.');\n\tstd::string extension = path.substr(index + 1);\n\n\t// Load the bundle\n\tif (extension == \"c3t\") {\n\t\tif (!loadJson(path)) {\n\t\t\tclear();\n\t\t\treturn false;\n\t\t}\n\t} else if (extension == \"c3b\") {\n\t\tif (!loadBinary(path)) {\n\t\t\tclear();\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tclear();\n\t\tCCLOG(\"warning: Invalid file extension: %s\", path.c_str());\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 45.21296296488303}, {"code": "bool Bundle3D::load(const std::string& path){\n\tth.empty() || _path == path)\n\t\treturn false;\n\n\t// Clear old data\n\tclear();\n\n\t// Load from binary\n\tif (path.find(\".c3b\")!= std::string::npos) {\n\t\tif (loadBinary(path)) {\n\t\t\t_path = path;\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Load from JSON\n\tif (path.find(\".c3t\")!= std::string::npos) {\n\t\tif (loadJson(path)) {\n\t\t\t_path = path;\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// Log warning\n\tCCLOG(\"warning: Invalid file format: %s\", path.c_str());\n\treturn false;\n}", "CodeBleu_score": 36.5797914655871}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tresetSkinData(skindata);\n    if (_binary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 60.993121592753184}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (skindata == nullptr)\n\t\treturn false;\n\tskindata->reset();\n\tif (isBinary())\n\t\treturn loadSkinDataBinary(skindata);\n\telse\n\t\treturn loadSkinDataJson(skindata);\n}", "CodeBleu_score": 60.2129760324091}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\t// reset skin data\n    skindata->reset();\n    \n    // load skin data\n    if (_binary)\n    {\n        return loadSkinDataBinary(skindata);\n    }\n    else\n    {\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 91.30855599315882}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t toRead = size * nmemb;\n\tsize_t bytesRead = 0;\n\tif (toRead > decoder->remaining) {\n\t\ttoRead = decoder->remaining;\n\t}\n\tif (toRead > 0) {\n\t\tmemcpy(ptr, decoder->fileBuffer + decoder->currentPos, toRead);\n\t\tdecoder->currentPos += toRead;\n\t\tbytesRead = toRead;\n\t}\n\tdecoder->remaining -= bytesRead;\n\treturn bytesRead;\n}", "CodeBleu_score": 50.66315794687162}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t bytesRead = 0;\n\tif (decoder->m_fileSize > 0) {\n\t\tif (decoder->m_fileSize < size * nmemb) {\n\t\t\tbytesRead = decoder->m_fileSize;\n\t\t}\n\t\telse {\n\t\t\tbytesRead = size * nmemb;\n\t\t}\n\t\tfread(ptr, 1, bytesRead, decoder->m_file);\n\t\tdecoder->m_filePosition += bytesRead;\n\t\tdecoder->m_fileSize -= bytesRead;\n\t}\n\treturn bytesRead;\n}", "CodeBleu_score": 47.345187199998556}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tsize_t bytesRead = 0;\n\tsize_t bytesToRead = size * nmemb;\n\tsize_t bytesRemaining = m_fileSize - m_filePosition;\n\tif (bytesToRead > bytesRemaining) {\n\t\tbytesToRead = bytesRemaining;\n\t}\n\tif (bytesToRead > 0) {\n\t\tmemcpy(ptr, m_fileBuffer + m_filePosition, bytesToRead);\n\t\tm_filePosition += bytesToRead;\n\t\tbytesRead = bytesToRead;\n\t}\n\treturn bytesRead;\n}", "CodeBleu_score": 39.78034505698446}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\t_pcmBuffer = std::make_shared<std::vector<int16_t>>(4096);\n}", "CodeBleu_score": 21.481548552071423}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\t_PCMBuffer = std::shared_ptr<std::vector<uint8_t>>(new std::vector<uint8_t>(4096));\n}", "CodeBleu_score": 21.644062508840097}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t#ifdef _WIN32\n    _decoder = new AudioDecoder_Win32();\n#else\n    _decoder = new AudioDecoder_Linux();\n#endif\n    _pcmBuffer = std::shared_ptr<uint8_t>(new uint8_t[4096], std::default_delete<uint8_t[]>());\n}", "CodeBleu_score": 29.3597509921058}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> lock(_mutex);\n\tauto it = _downloaderMap.find(id);\n\tif (it!= _downloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 59.72630496869908}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> lock(mutex);\n\treturn downloaderAndroidMap[id];\n}", "CodeBleu_score": 21.292900144978425}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tcocos2d::network::DownloaderAndroid* downloader = nullptr;\n\tstd::lock_guard<std::mutex> lock(downloaderMapMutex);\n\tdownloaderMap::iterator it = downloaderMap.find(id);\n\tif (it!= downloaderMap.end()) {\n\t\tdownloader = it->second;\n\t}\n\treturn downloader;\n}", "CodeBleu_score": 54.032423589775405}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tif(isLoop) then\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, true)\n\telse\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, false)\n\tend", "CodeBleu_score": 40.39693302210846}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif(isLoop == nil) then\n\t\tisLoop = false\n\tend\n\taudio.playMusic(filename, isLoop)", "CodeBleu_score": 33.48642115282512}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then isLoop = false end\n\taudio.playMusic(filename, isLoop)", "CodeBleu_score": 33.4795223371124}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\tif not self:isEnabled() then return false end\n\tlocal result = false\n\tfor i, cond in ipairs(self._conditions) do\n\t\tresult = result or cond:detect()\n\tend\n\treturn result", "CodeBleu_score": 24.96629760171133}, {"code": "function ccs.TriggerObj:detect()\n\t\tif not self:isEnabled() then\n\t\treturn false\n\tend\n\t\n\tif self.conditions == nil then\n\t\treturn true\n\tend\n\t\n\tlocal result = true\n\t\n\tfor i, condition in ipairs(self.conditions) do\n\t\tresult = result and condition:detect()\n\tend\n\t\n\treturn result", "CodeBleu_score": 36.35419917724245}, {"code": "function ccs.TriggerObj:detect()\n\t\tif not self:isEnabled() then\n\t\treturn false\n\tend\n\tif #self._conditions == 0 then\n\t\treturn true\n\tend\n\tlocal result = false\n\tfor i, cond in ipairs(self._conditions) do\n\t\tresult = result or cond:detect()\n\tend\n\treturn result", "CodeBleu_score": 34.846358015431925}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\tif self.conditions then\n\t\tfor i = 1, #self.conditions do\n\t\t\tif self.conditions[i].removeAll then\n\t\t\t\tself.conditions[i]:removeAll()\n\t\t\tend\n\t\tend\n\tend\n\tif self.actions then\n\t\tfor i = 1, #self.actions do\n\t\t\tif self.actions[i].removeAll then\n\t\t\t\tself.actions[i]:removeAll()\n\t\t\tend\n\t\tend\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 34.34195885125169}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 10.422059020442871}, {"code": "function ccs.TriggerObj:removeAll()\n\t\tif self.conditions ~= nil then\n\t\tfor i,v in ipairs(self.conditions) do\n\t\t\tif v.removeAll ~= nil then\n\t\t\t\tv:removeAll()\n\t\t\tend\n\t\tend\n\tend\n\tif self.actions ~= nil then\n\t\tfor i,v in ipairs(self.actions) do\n\t\t\tif v.removeAll ~= nil then\n\t\t\t\tv:removeAll()\n\t\t\tend\n\t\tend\n\tend\n\tself.conditions = {}\n\tself.actions = {}", "CodeBleu_score": 40.33649524695592}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = self.hurtAnimation\n\tif hurtAnimation then\n\t\tlocal hurtEffect = hurtAnimation:clone()\n\t\thurtEffect:setScale(self.hurtEffectScale)\n\t\thurtEffect:setPosition(target:getCenter())\n\t\thurtEffect:setCameraMask(self.hurtEffectCameraMask)\n\t\thurtEffect:playAnimation()\n\t\thurtEffect:runAction(cc.Sequence:create(cc.DelayTime:create(self.hurtEffectDuration), cc.RemoveSelf:create()))\n\t\ttarget:addChild(hurtEffect)\n\tend", "CodeBleu_score": 53.5822474085521}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = self.hurtAnimation\n\tlocal hurtEffect = self.hurtEffect\n\tlocal hurtEffectSize = self.hurtEffectSize\n\tlocal hurtEffectOffset = self.hurtEffectOffset\n\tlocal hurtEffectCameraMask = self.hurtEffectCameraMask\n\t\n\tif hurtAnimation and hurtEffect and hurtEffectSize and hurtEffectOffset and hurtEffectCameraMask then\n\t\tlocal hurtAnimationInstance = hurtAnimation:play()\n\t\tlocal hurtEffectInstance = hurtEffect:play()\n\t\thurtEffectInstance:setScale(hurtEffectSize)\n\t\thurtEffectInstance:setPosition(hurtEffectOffset)\n\t\thurtEffectInstance:runAction(CCSequence:createWithTwoActions(CCDelayTime:create(hurtAnimationInstance:getDuration()), CCRemoveSelf:create()))\n\t\ttarget:addChild(hurtEffectInstance, 1000, hurtEffectCameraMask)\n\tend", "CodeBleu_score": 43.51648548953043}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtAnimation = self.hurtAnimation\n\tif hurtAnimation then\n\t\tlocal hurtEffect = hurtAnimation:createInstance()\n\t\thurtEffect:setCameraMask(self.cameraMask)\n\t\thurtEffect:setScale(self.hurtEffectScale)\n\t\thurtEffect:setPosition(self.hurtEffectPosition)\n\t\thurtEffect:runAction(hurtAnimation)\n\t\ttarget:addChild(hurtEffect)\n\t\thurtEffect:runAction(cc.Sequence:create(cc.DelayTime:create(self.hurtEffectDuration), cc.RemoveSelf:create()))\n\tend", "CodeBleu_score": 52.97394490761166}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\t-- Stop the two particle systems\n\tself.particleSystem1:stop()\n\tself.particleSystem2:stop()\n\t\n\t-- Initiate a sequence to remove the object after a delay\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(0.5), cc.CallFunc:create(function() self:removeFromParent() end))\n\tself:runAction(sequence)\n\t\n\t-- Create and configure a new particle system\n\tlocal particleSystem3 = cc.ParticleSystemQuad:create(\"particle/fire_ball.plist\")\n\tparticleSystem3:setPosition(self.position)\n\tparticleSystem3:setScale(1.5)\n\tparticleSystem3:setTexture(cc.Director:getInstance():getTextureCache():addImage(\"particle/fire_ball.png\"))\n\tparticleSystem3:setBlendAdditive(true)\n\tparticleSystem3:setDuration(0.5)\n\tparticleSystem3:setEmitterMode(cc.MODE_GRAVITY)\n\tparticleSystem3:setEmissionRate(100)\n\tparticleSystem3:setSpeed(100)\n\tparticleSystem3:setSpeedVar(50)\n\tparticleSystem3:setLife(0.5)\n\tparticleSystem3:setLifeVar(0.1)\n\tparticleSystem3:setStartSize(5)\n\tparticleSystem3:setStartSizeVar(0)\n\tparticleSystem3:setEndSize(20)\n\tparticleSystem3:setEndSizeVar(10)\n\tparticleSystem3:setStartColor(cc.c4f(1.0, 1.0, 1.0, 1.0))\n\tparticleSystem3:setStartColorVar(cc.c4f(0.0, 0.0, 0.0, 0.0))\n\tparticleSystem3:setEndColor(cc.c4f(1.0, 0.0, 0.0, 1.0))\n\tparticleSystem3:setEndColorVar(cc.c4f(0.0, 0.0, 0.0, 0.0))\n\tparticleSystem3:setGravity(cc.p(0, 0))\n\tparticleSystem3:setRadialAccel(", "CodeBleu_score": 43.81327228766498}, {"code": "function MageNormalAttack:onTimeOut()\n\t\t-- Stop the particle systems.\n\tself.particleSystem:stop()\n\tself.particleSystem2:stop()\n\t\n\t-- Create a sequence to remove the object after a delay.\n\tlocal seq = Sequence:create({\n\t\tDelayTime:create(1.0),\n\t\tRemoveSelf:create()\n\t})\n\t\n\t-- Create a new particle system.\n\tself.particleSystem = ParticleSystem:create(\"particles/fire.plist\")\n\tself.particleSystem:setAutoRemoveOnFinish(true)\n\tself.particleSystem:setTexture(self.texture)\n\tself.particleSystem:setBlendFunc(BlendFunc:create(GL_SRC_ALPHA, GL_ONE))\n\tself.particleSystem:setScale(1.0)\n\tself.particleSystem:setAnchorPoint(ccp(0.5, 0.5))\n\tself.particleSystem:setPosition(ccp(self.sprite:getContentSize().width / 2, self.sprite:getContentSize().height / 2))\n\tself.particleSystem:setStartColor(ccc4f(1.0, 0.0, 0.0, 1.0))\n\tself.particleSystem:setEndColor(ccc4f(1.0, 0.0, 0.0, 0.0))\n\tself.particleSystem:setStartSize(10.0)\n\tself.particleSystem:setEndSize(10.0)\n\tself.particleSystem:setEmissionRate(100.0)\n\tself.particleSystem:setTotalParticles(1000)\n\tself.particleSystem:setLife(0.5)\n\tself.particleSystem:setStartSpin(0.0)\n\tself.particleSystem:setEndSpin(0.0)\n\tself.particleSystem:setStartSpinVar(0.0)\n\tself.particleSystem:setEndSpinVar(0.0)\n\tself.particleSystem:setSpeed(200.0)\n\tself.particleSystem:setSpeedVar(0.0)\n\tself.particleSystem:setTangentialAccel(0.0)\n\tself.particleSystem:setTangentialAccelVar(0.0)\n\tself.particleSystem:setRadialAccel(0.", "CodeBleu_score": 38.57979526999211}, {"code": "function MageNormalAttack:onTimeOut()\n\t\t--Stop the particle systems\n\tself.particleSystem1:stop()\n\tself.particleSystem2:stop()\n\t\n\t--Start the sequence to remove the object\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(2), cc.CallFunc:create(function() self:removeFromParent() end))\n\tself:runAction(sequence)\n\t\n\t--Create and configure a new particle system\n\tself.particleSystem3 = cc.ParticleSystemQuad:create(\"particle/fire.plist\")\n\tself.particleSystem3:setTexture(cc.Director:getInstance():getTextureCache():addImage(\"particle/fire.png\"))\n\tself.particleSystem3:setStartColor(cc.c4f(1, 0, 0, 1))\n\tself.particleSystem3:setEndColor(cc.c4f(1, 0, 0, 0))\n\tself.particleSystem3:setStartColorVar(cc.c4f(0, 0, 0, 0))\n\tself.particleSystem3:setEndColorVar(cc.c4f(0, 0, 0, 0))\n\tself.particleSystem3:setLife(1)\n\tself.particleSystem3:setLifeVar(0)\n\tself.particleSystem3:setStartSize(100)\n\tself.particleSystem3:setStartSizeVar(0)\n\tself.particleSystem3:setEndSize(100)\n\tself.particleSystem3:setEndSizeVar(0)\n\tself.particleSystem3:setEmissionRate(1000)\n\tself.particleSystem3:setPosition(cc.p(self:getContentSize().width/2, self:getContentSize().height/2))\n\tself.particleSystem3:setBlendAdditive(true)\n\tself.particleSystem3:setScale(0.5)\n\tself:addChild(self.particleSystem3)\n\t\n\t--Update the sprite texture, run a fade-out action, and adjust the sprite scale\n\tself:setTexture(\"mage_attack.png\")\n\tself:runAction(cc.FadeOut:create(1))\n\tself:setScale(0.5)", "CodeBleu_score": 46.85581175257052}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\t--print(\"Hero dead\")\n\t--print(hero.name)\n\tif hero.name == \"Knight\" then\n\t\t--print(\"Knight dead\")\n\t\tself.knightDead = true\n\t\tself.knightImage:setShader(\"grey\")\n\t\tself.knightFrame:setShader(\"grey\")\n\t\tself.knightAnger:hide()\n\t\tself.knightCloneAnger:hide()\n\telseif hero.name == \"Mage\" then\n\t\t--print(\"Mage dead\")\n\t\tself.mageDead = true\n\t\tself.mageImage:setShader(\"grey\")\n\t\tself.mageFrame:setShader(\"grey\")\n\t\tself.mageAnger:hide()\n\t\tself.mageCloneAnger:hide()\n\telseif hero.name == \"Archer\" then\n\t\t--print(\"Archer dead\")\n\t\tself.archerDead = true\n\t\tself.archerImage:setShader(\"grey\")\n\t\tself.archerFrame:setShader(\"grey\")\n\t\tself.archerAnger:hide()\n\t\tself.archerCloneAnger:hide()\n\tend", "CodeBleu_score": 37.28229850422251}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\tself.knightDead = true\n\t\tself.knightImage:setShader(\"grey\")\n\t\tself.knightFrame:setShader(\"grey\")\n\t\tself.knightAngerFullSignal:hide()\n\t\tself.knightAngerClone:hide()\n\telseif hero.name == \"Mage\" then\n\t\tself.mageDead = true\n\t\tself.mageImage:setShader(\"grey\")\n\t\tself.mageFrame:setShader(\"grey\")\n\t\tself.mageAngerFullSignal:hide()\n\t\tself.mageAngerClone:hide()\n\telseif hero.name == \"Archer\" then\n\t\tself.archerDead = true\n\t\tself.archerImage:setShader(\"grey\")\n\t\tself.archerFrame:setShader(\"grey\")\n\t\tself.archerAngerFullSignal:hide()\n\t\tself.archerAngerClone:hide()\n\tend", "CodeBleu_score": 38.447123610906075}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\t--print(\"heroDead\")\n\t--print(hero)\n\t--print(hero.name)\n\t--print(hero.frame)\n\t--print(hero.image)\n\t--print(hero.angerFull)\n\t--print(hero.angerClone)\n\t\n\tif hero.name == \"Knight\" then\n\t\thero.frame:setShader(\"grey\")\n\t\thero.image:setShader(\"grey\")\n\telseif hero.name == \"Mage\" then\n\t\thero.frame:setShader(\"grey\")\n\t\thero.image:setShader(\"grey\")\n\telseif hero.name == \"Archer\" then\n\t\thero.frame:setShader(\"grey\")\n\t\thero.image:setShader(\"grey\")\n\tend\n\t\n\thero.angerFull:hide()\n\thero.angerClone:hide()", "CodeBleu_score": 30.10123626734818}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tif camera_special_target then\n\t\tlocal target = camera_special_target\n\t\tlocal pos = camera_pos\n\t\tlocal target_pos = target.pos\n\t\tlocal target_rot = target.rot\n\t\tlocal target_fov = target.fov\n\t\tlocal target_near_clip = target.near_clip\n\t\tlocal target_far_clip = target.far_clip\n\t\tlocal target_aspect = target.aspect\n\t\tlocal target_roll = target.roll\n\t\tlocal target_fov = target.fov\n\t\tlocal target_near_clip = target.near_clip\n\t\tlocal target_far_clip = target.far_clip\n\t\tlocal target_aspect = target.aspect\n\t\tlocal target_roll = target.roll\n\t\tlocal target_fov = target.fov\n\t\tlocal target_near_clip = target.near_clip\n\t\tlocal target_far_clip = target.far_clip\n\t\tlocal target_aspect = target.aspect\n\t\tlocal target_roll = target.roll\n\t\tlocal target_fov = target.fov\n\t\tlocal target_near_clip = target.near_clip\n\t\tlocal target_far_clip = target.far_clip\n\t\tlocal target_aspect = target.aspect\n\t\tlocal target_roll = target.roll\n\t\tlocal target_fov = target.fov\n\t\tlocal target_near_clip = target.near_clip\n\t\tlocal target_far_clip = target.far_clip\n\t\tlocal target_aspect = target.aspect\n\t\tlocal target_roll = target.roll\n\t\tlocal target_fov = target.fov\n\t\tlocal target_near_clip = target.near_clip\n\t\tlocal target_far_clip = target.far_clip\n\t\tlocal target_aspect = target.aspect\n\t\tlocal target_roll = target.roll\n\t\tlocal target_fov = target.fov\n\t\tlocal target_near_clip = target.near_clip\n\t\tlocal target_far_clip = target.far_clip\n\t\tlocal target_aspect = target.aspect\n\t\tlocal target_roll = target.roll\n\t\tlocal target_fov = target.fov\n\t\tlocal target_near_clip = target.near_clip\n\t\tlocal target_far_clip = target.far_clip\n\t\tlocal target_aspect", "CodeBleu_score": 29.087822146283877}, {"code": "local function moveCamera(dt)\n\t\tlocal cam = Camera.getCamera()\n\tlocal camPos = cam:getPosition()\n\tlocal camTarget = cam:getTarget()\n\tlocal camUp = cam:getUp()\n\tlocal camRight = cam:getRight()\n\tlocal camForward = cam:getForward()\n\tlocal camSpeed = cam:getSpeed()\n\tlocal camFOV = cam:getFOV()\n\tlocal camNear = cam:getNear()\n\tlocal camFar = cam:getFar()\n\tlocal camMode = cam:getMode()\n\tlocal camActive = cam:isActive()\n\tlocal camActiveHeroes = cam:isActiveHeroes()\n\tlocal camActiveSpecial = cam:isActiveSpecial()\n\tlocal camSpecialTarget = cam:getSpecialTarget()\n\tlocal camSpecialFocusPoint = cam:getSpecialFocusPoint()\n\tlocal camSpecialFOV = cam:getSpecialFOV()\n\tlocal camSpecialSpeed = cam:getSpecialSpeed()\n\tlocal camSpecialNear = cam:getSpecialNear()\n\tlocal camSpecialFar = cam:getSpecialFar()\n\tlocal camSpecialFOV = cam:getSpecialFOV()\n\tlocal camSpecialUp = cam:getSpecialUp()\n\tlocal camSpecialRight = cam:getSpecialRight()\n\tlocal camSpecialForward = cam:getSpecialForward()\n\tlocal camSpecialTime = cam:getSpecialTime()\n\tlocal camSpecialElapsed = cam:getSpecialElapsed()\n\tlocal camSpecialDuration = cam:getSpecialDuration()\n\tlocal camSpecialType = cam:getSpecialType()\n\tlocal camSpecialTypeValue = cam:getSpecialTypeValue()\n\tlocal camSpecialTypeValue2 = cam:getSpecialTypeValue2()\n\tlocal camSpecialTypeValue3 = cam:getSpecialTypeValue3()\n\tlocal camSpecialTypeValue4 = cam:getSpecialTypeValue4()\n\tlocal camSpecialTypeValue5 = cam:getSpecialTypeValue5()\n\tlocal camSpecialTypeValue6 = cam:getSpecialTypeValue6()\n\tlocal camSpecialTypeValue7 = cam:getSpecialTypeValue7()\n\tlocal camSpecialTypeValue8 = cam:getSpecialTypeValue8()\n\tlocal camSpecialTypeValue9 = cam:getSpecialTypeValue9()\n\tlocal camSpecialTypeValue10 = cam:getSpecialTypeValue10", "CodeBleu_score": 13.70534232681323}, {"code": "local function moveCamera(dt)\n\t\t-- If a special camera is active, move the camera towards the special target\n\tif specialCamera then\n\t\tlocal cameraPos = camera:getPosition()\n\t\tlocal cameraTarget = specialCameraTarget\n\t\tlocal cameraUp = specialCameraUp\n\t\tlocal cameraLookAt = specialCameraLookAt\n\t\tlocal cameraDistance = specialCameraDistance\n\t\tlocal cameraFOV = specialCameraFOV\n\t\tlocal cameraNear = specialCameraNear\n\t\tlocal cameraFar = specialCameraFar\n\t\tlocal cameraSpeed = specialCameraSpeed\n\t\tlocal cameraRotationSpeed = specialCameraRotationSpeed\n\t\tlocal cameraZoomSpeed = specialCameraZoomSpeed\n\t\tlocal cameraZoomMin = specialCameraZoomMin\n\t\tlocal cameraZoomMax = specialCameraZoomMax\n\t\tlocal cameraZoom = specialCameraZoom\n\t\tlocal cameraRotation = specialCameraRotation\n\t\tlocal cameraRotationX = specialCameraRotationX\n\t\tlocal cameraRotationY = specialCameraRotationY\n\t\tlocal cameraRotationZ = specialCameraRotationZ\n\t\tlocal cameraRotationXSpeed = specialCameraRotationXSpeed\n\t\tlocal cameraRotationYSpeed = specialCameraRotationYSpeed\n\t\tlocal cameraRotationZSpeed = specialCameraRotationZSpeed\n\t\tlocal cameraRotationXMin = specialCameraRotationXMin\n\t\tlocal cameraRotationXMax = specialCameraRotationXMax\n\t\tlocal cameraRotationYMin = specialCameraRotationYMin\n\t\tlocal cameraRotationYMax = specialCameraRotationYMax\n\t\tlocal cameraRotationZMin = specialCameraRotationZMin\n\t\tlocal cameraRotationZMax = specialCameraRotationZMax\n\t\tlocal cameraRotationXSpeedMin = specialCameraRotationXSpeedMin\n\t\tlocal cameraRotationXSpeedMax = specialCameraRotationXSpeedMax\n\t\tlocal cameraRotationYSpeedMin = specialCameraRotationYSpeedMin\n\t\tlocal cameraRotationYSpeedMax = specialCameraRotationYSpeedMax\n\t\tlocal cameraRotationZSpeedMin = specialCameraRotationZSpeedMin\n\t\tlocal cameraRotationZSpeedMax = specialCameraRotationZSpeedMax\n\t\tlocal cameraRotationXMin = specialCameraRotationXMin\n\t\tlocal cameraRotationXMax = specialCameraRotationXMax\n\t\tlocal cameraRotationYMin = specialCameraRotationYMin\n\t\tlocal cameraRotationYMax = specialCameraRotationYMax\n\t\tlocal cameraRotationZMin = specialCameraRotationZMin\n\t\tlocal cameraRotationZMax = specialCameraRotationZMax\n\t\tlocal cameraRotationXSpeedMin = specialCameraRotationXSpeedMin\n\t\tlocal cameraRotationXSpeedMax =", "CodeBleu_score": 15.86140757563254}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor hero, heroData in pairs(heroes) do\n\t\tif heroData.particle then\n\t\t\theroData.particle:SetAbsOrigin(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 27.301380241628564}, {"code": "local function updateParticlePos()\n\t\tlocal heroes = HeroManager:getHeroes()\n\tfor i, hero in pairs(heroes) do\n\t\tif hero.particleNode then\n\t\t\tlocal pos = hero:getPos()\n\t\t\thero.particleNode:setPosition(pos)\n\t\tend\n\tend", "CodeBleu_score": 38.08762654416193}, {"code": "local function updateParticlePos()\n\t\tfor i, hero in pairs(heroes) do\n\t\tif hero.particleNode then\n\t\t\thero.particleNode:SetAbsOrigin(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 20.995353920983153}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self:getChildByTag(self.selectedHeroTag)\n\tlocal heroRace = hero:getRace()\n\tif heroRace == \"Knight\" then\n\t\taudio.play(audio.loadSound(\"sounds/knight_select.mp3\"))\n\telseif heroRace == \"Archer\" then\n\t\taudio.play(audio.loadSound(\"sounds/archer_select.mp3\"))\n\telseif heroRace == \"Mage\" then\n\t\taudio.play(audio.loadSound(\"sounds/mage_select.mp3\"))\n\tend", "CodeBleu_score": 43.22296952271484}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self:getHero()\n\tlocal race = hero:getRace()\n\n\tif race == \"Knight\" then\n\t\tself:playAudio(audio_knight)\n\telseif race == \"Archer\" then\n\t\tself:playAudio(audio_archer)\n\telseif race == \"Mage\" then\n\t\tself:playAudio(audio_mage)\n\tend", "CodeBleu_score": 32.25137872768437}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self:getHeroByTag(self.selectedHeroTag)\n\tlocal heroRace = hero:getRace()\n\tlocal audioClip = nil\n\tif heroRace == \"Knight\" then\n\t\taudioClip = self.knightAudio\n\telseif heroRace == \"Archer\" then\n\t\taudioClip = self.archerAudio\n\telseif heroRace == \"Mage\" then\n\t\taudioClip = self.mageAudio\n\tend\n\tif audioClip ~= nil then\n\t\taudio.playSound(audioClip)\n\tend", "CodeBleu_score": 40.0447016284312}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\t--Create the Knight hero and add it to the HeroManager\n\tlocal knight = Hero:new(\"Knight\", \"knight\", \"idle\", 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 10", "CodeBleu_score": 10.520822834140091}, {"code": "function GameMaster:AddHeros()\n\t\tself.knight = Knight.new(self.game, 100, 100, \"knight\")\n\tself.knight.x = 100\n\tself.knight.y = 100\n\tself.knight:setAnimation(\"idle\")\n\tself.knight.state = \"idle\"\n\tself.knight.facing = \"right\"\n\tself.knight.direction = \"right\"\n\tself.knight.facing = \"right\"\n\tself.knight.isHero = true\n\tself.knight.isAlive = true\n\tself.knight.isDead = false\n\tself.knight.isAttacking = false\n\tself.knight.isMoving = false\n\tself.knight.isIdle = true\n\tself.knight.isDead = false\n\tself.knight.isAttacking = false\n\tself.knight.isMoving = false\n\tself.knight.isIdle = true\n\tself.knight.isDead = false\n\tself.knight.isAttacking = false\n\tself.knight.isMoving = false\n\tself.knight.isIdle = true\n\tself.knight.isDead = false\n\tself.knight.isAttacking = false\n\tself.knight.isMoving = false\n\tself.knight.isIdle = true\n\tself.knight.isDead = false\n\tself.knight.isAttacking = false\n\tself.knight.isMoving = false\n\tself.knight.isIdle = true\n\tself.knight.isDead = false\n\tself.knight.isAttacking = false\n\tself.knight.isMoving = false\n\tself.knight.isIdle = true\n\tself.knight.isDead = false\n\tself.knight.isAttacking = false\n\tself.knight.isMoving = false\n\tself.knight.isIdle = true\n\tself.knight.isDead = false\n\tself.knight.isAttacking = false\n\tself.knight.isMoving = false\n\tself.knight.isIdle = true\n\tself.knight.isDead = false\n\tself.", "CodeBleu_score": 21.58809070851547}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight(self.heroLayer, self.map)\n\tknight:setPosition(100, 100)\n\tknight:setIdleMode()\n\ttable.insert(self.heroManager, knight)\n\t\n\tlocal mage = Mage(self.heroLayer, self.map)\n\tmage:setPosition(200, 200)\n\tmage:setIdleMode()\n\ttable.insert(self.heroManager, mage)\n\t\n\tlocal archer = Archer(self.heroLayer, self.map)\n\tarcher:setPosition(300, 300)\n\tarcher:setIdleMode()\n\ttable.insert(self.heroManager, archer)", "CodeBleu_score": 49.420790962457616}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss.mask = CAMERA_MASK_BOSS\n\tself.currentLayer:add(boss)\n\tboss.x = 200\n\tboss.y = 100\n\tboss.facing = FACING_RIGHT\n\tboss.ai = false\n\tboss.move = function(self)\n\t\tself.x = self.x + 1\n\t\tif self.x > 400 then\n\t\t\tself.x = 400\n\t\t\tself.y = self.y + 1\n\t\t\tif self.y > 200 then\n\t\t\t\tself.y = 200\n\t\t\t\tself.ai = true\n\t\t\tend\n\t\tend\n\tend\n\tself.monsterManager:add(boss)", "CodeBleu_score": 37.376327881972486}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new()\n\tboss:setMask(1)\n\tboss.x = 0\n\tboss.y = 0\n\tboss.facing = \"left\"\n\tboss.ai = false\n\tboss.move = \"bounce\"\n\tboss.bounce = 1\n\tboss.bounce_speed = 10\n\tboss.bounce_time = 1\n\tboss.bounce_delay = 1\n\tboss.bounce_start = 1\n\tboss.bounce_end = 1\n\tboss.bounce_max = 1\n\tboss.bounce_min = 1\n\tboss.bounce_direction = \"up\"\n\tboss.bounce_move = \"bounce\"\n\tboss.bounce_time_move = 1\n\tboss.bounce_delay_move = 1\n\tboss.bounce_start_move = 1\n\tboss.bounce_end_move = 1\n\tboss.bounce_max_move = 1\n\tboss.bounce_min_move = 1\n\tboss.bounce_direction_move = \"up\"\n\tboss.bounce_time_move = 1\n\tboss.bounce_delay_move = 1\n\tboss.bounce_start_move = 1\n\tboss.bounce_end_move = 1\n\tboss.bounce_max_move = 1\n\tboss.bounce_min_move = 1\n\tboss.bounce_direction_move = \"up\"\n\tboss.bounce_time_move = 1\n\tboss.bounce_delay_move = 1\n\tboss.bounce_start_move = 1\n\tboss.bounce_end_move = 1\n\tboss.bounce_max_move = 1\n\tboss.bounce_min_move = 1\n\tboss.bounce_direction_move = \"up\"\n\tboss.bounce_time_move = 1\n\tboss.bounce_delay_move = 1\n\tboss.bounce_start_move = 1\n\tboss.bounce_end_move = 1\n\tboss.bounce_max_move = 1\n\tboss.bounce_min_move = 1\n\tboss.bounce_direction_move = \"up\"\n\tboss.bounce_time_move = 1", "CodeBleu_score": 36.763860813301484}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:new(self.game, self.layer, self.game.camera)\n\tboss.x = self.game.width / 2\n\tboss.y = self.game.height / 2\n\tboss.facing = \"left\"\n\tboss.aiEnabled = false\n\tboss:move(0, 0, 0, 1000, \"bounceOut\")\n\tboss.aiEnabled = true\n\ttable.insert(self.game.monsterManager, boss)", "CodeBleu_score": 28.17137468688864}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D:new(file)\n\tlocal animate = Animate3D:new(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\treturn animate", "CodeBleu_score": 38.14329035011595}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tlocal animate3d = Animate3D(animation, begin, finish)\n\tanimate3d:setSpeed(speed)\n\treturn animate3d", "CodeBleu_score": 38.12522769650265}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D:new(file)\n\tlocal animate = Animate3D:new(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\treturn animate", "CodeBleu_score": 38.14329035011595}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor k, v in pairs(table) do\n\t\ttable[k] = nil\n\tend", "CodeBleu_score": 37.567300370186686}, {"code": "function removeAll(table)\n\t\tfor i = #table, 1, -1 do\n\t\ttable[i] = nil\n\tend", "CodeBleu_score": 33.041855007320585}, {"code": "function removeAll(table)\n\t\tfor i = 1, #table do\n\t\ttable[i] = nil\n\tend", "CodeBleu_score": 32.87132602391901}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal seq = cc.Sequence:create(delayAction, cc.CallFunc:create(func))\n\ttarget:runAction(seq)", "CodeBleu_score": 63.34622796470596}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal callFunc = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delayAction, callFunc)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.61998106460733}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delayAction = cc.DelayTime:create(delay)\n\tlocal sequence = cc.Sequence:create(delayAction, cc.CallFunc:create(func))\n\ttarget:runAction(sequence)", "CodeBleu_score": 62.27795333601072}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText1 = cc.Label:createWithSystemFont(\"Loading\", \"fonts/Marker Felt.ttf\", 24)\n\tloadingText1:setColor(cc.c3b(0, 0, 0))\n\tloadingText1:setPosition(cc.p(display.cx, display.cy + 200))\n\tlayer:addChild(loadingText1)\n\n\tlocal loadingText2 = cc.Label:createWithSystemFont(\"Please wait...\", \"fonts/Marker Felt.ttf\", 24)\n\tloadingText2:setColor(cc.c3b(0, 0, 0))\n\tloadingText2:setPosition(cc.p(display.cx, display.cy + 170))\n\tlayer:addChild(loadingText2)\n\n\tself._loading = {\n\t\tloadingText1,\n\t\tloadingText2\n\t}", "CodeBleu_score": 33.39793573404087}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = cc.Label:createWithTTF(\"Loading...\", \"fonts/Marker Felt.ttf\", 30)\n\tloadingText:setTextColor(cc.c3b(255, 255, 255))\n\tloadingText:enableOutline(cc.c4b(0, 0, 0, 255), 2)\n\tloadingText:setAnchorPoint(cc.p(0.5, 0.5))\n\tloadingText:setPosition(cc.p(display.cx, display.cy))\n\tlayer:addChild(loadingText)\n\tself._loading = loadingText", "CodeBleu_score": 27.97058479698843}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingText = display.newText(\"Loading\", 0, 0, native.systemFont, 24)\n\tloadingText:setTextColor(0, 0, 0)\n\tloadingText:setReferencePoint(display.CenterReferencePoint)\n\tloadingText.x = display.contentWidth / 2\n\tloadingText.y = display.contentHeight / 2\n\tlayer:insert(loadingText)\n\tself._loading = loadingText", "CodeBleu_score": 19.45746159377001}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = display.newScene( \"MainMenuScene\" )\n\tlocal layer = display.newGroup()\n\tscene:addChild( layer )\n\n\t-- Add the background image\n\tlocal background = display.newImage( \"images/background.png\" )\n\tbackground.x = display.contentCenterX\n\tbackground.y = display.contentCenterY\n\tlayer:insert( background )\n\n\t-- Add the title image\n\tlocal title = display.newImage( \"images/title.png\" )\n\ttitle.x = display.contentCenterX\n\ttitle.y = display.contentCenterY - 100\n\tlayer:insert( title )\n\n\t-- Add the play button\n\tlocal playButton = widget.newButton{\n\t\tlabel = \"Play\",\n\t\tlabelColor = { default = { 255 }, over = { 128 } },\n\t\tdefaultFile = \"images/button.png\",\n\t\toverFile = \"images/button-over.png\",\n\t\twidth = 154, height = 40,\n\t\tonRelease = function()\n\t\t\t-- Go to the game scene\n\t\t\tdirector:changeScene( \"GameScene\", \"moveFromLeft\" )\n\t\tend\n\t}\n\tplayButton.x = display.contentCenterX\n\tplayButton.y = display.contentCenterY + 100\n\tlayer:insert( playButton )\n\n\t-- Add the options button\n\tlocal optionsButton = widget.newButton{\n\t\tlabel = \"Options\",\n\t\tlabelColor = { default = { 255 }, over = { 128 } },\n\t\tdefaultFile = \"images/button.png\",\n\t\toverFile = \"images/button-over.png\",\n\t\twidth = 154, height = 40,\n\t\tonRelease = function()\n\t\t\t-- Go to the options scene\n\t\t\tdirector:changeScene( \"OptionsScene\", \"moveFromRight\" )\n\t\tend\n\t}\n\toptionsButton.x = display.contentCenterX\n\toptionsButton.y = display.contentCenterY + 150\n\tlayer:insert( optionsButton )\n\n\t-- Add the credits button\n\tlocal creditsButton = widget.newButton{\n\t\tlabel = \"Credits\",\n\t\tlabelColor = { default = { ", "CodeBleu_score": 39.595321651803395}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = display.newScene( \"MainMenuScene\" )\n\n\t-- Create a layer to hold the main menu scene.\n\tlocal mainMenuLayer = display.newGroup()\n\tscene:insert( mainMenuLayer )\n\n\t-- Create the background.\n\tlocal background = display.newImageRect( mainMenuLayer, \"images/background.png\", 320, 480 )\n\tbackground.x = display.contentCenterX\n\tbackground.y = display.contentCenterY\n\n\t-- Create the title.\n\tlocal title = display.newImageRect( mainMenuLayer, \"images/title.png\", 160, 106 )\n\ttitle.x = display.contentCenterX\n\ttitle.y = display.contentCenterY - 100\n\n\t-- Create the play button.\n\tlocal playButton = display.newImageRect( mainMenuLayer, \"images/playButton.png\", 160, 60 )\n\tplayButton.x = display.contentCenterX\n\tplayButton.y = display.contentCenterY + 50\n\n\t-- Create the sound button.\n\tlocal soundButton = display.newImageRect( mainMenuLayer, \"images/soundButton.png\", 160, 60 )\n\tsoundButton.x = display.contentCenterX\n\tsoundButton.y = display.contentCenterY + 150\n\n\t-- Create the about button.\n\tlocal aboutButton = display.newImageRect( mainMenuLayer, \"images/aboutButton.png\", 160, 60 )\n\taboutButton.x = display.contentCenterX\n\taboutButton.y = display.contentCenterY + 250\n\n\t-- Create the exit button.\n\tlocal exitButton = display.newImageRect( mainMenuLayer, \"images/exitButton.png\", 160, 60 )\n\texitButton.x = display.contentCenterX\n\texitButton.y = display.contentCenterY + 350\n\n\t-- Add the buttons to the main menu layer.\n\tmainMenuLayer:insert( playButton )\n\tmainMenuLayer:insert( soundButton )\n\tmainMenuLayer:insert( aboutButton )\n\tmainMenuLayer:insert( exitButton )\n\n", "CodeBleu_score": 38.027116320113144}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = display.newScene( MainMenuScene.name )\n\tscene.view = display.newGroup()\n\tscene:insert( scene.view )\n\tscene:addEventListener( \"create\", MainMenuScene )\n\treturn scene", "CodeBleu_score": 44.59933561564253}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\t-- check for collisions with heroes\n\tfor i, hero in ipairs(HeroManager.heroes) do\n\t\tif hero.alive then\n\t\t\tif object.x + object.width > hero.x and object.x < hero.x + hero.width then\n\t\t\t\tif object.y + object.height > hero.y and object.y < hero.y + hero.height then\n\t\t\t\t\tsolveCollision(object, hero)\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\t-- check for collisions with monsters\n\tfor i, monster in ipairs(MonsterManager.monsters) do\n\t\tif monster.alive then\n\t\t\tif object.x + object.width > monster.x and object.x < monster.x + monster.width then\n\t\t\t\tif object.y + object.height > monster.y and object.y < monster.y + monster.height then\n\t\t\t\t\tsolveCollision(object, monster)\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 38.20572088376768}, {"code": "local function collision(object)\n\n\t\tlocal heroes = HeroManager:getAliveHeroes()\n\tlocal monsters = MonsterManager:getAliveMonsters()\n\n\tfor i = 1, #heroes do\n\t\tif heroes[i]:getCollisionBox():collidesWith(object:getCollisionBox()) then\n\t\t\tsolveCollision(heroes[i], object)\n\t\tend\n\tend\n\n\tfor i = 1, #monsters do\n\t\tif monsters[i]:getCollisionBox():collidesWith(object:getCollisionBox()) then\n\t\t\tsolveCollision(monsters[i], object)\n\t\tend\n\tend", "CodeBleu_score": 30.387462695707825}, {"code": "local function collision(object)\n\n\t\t-- Iterate over all alive heroes\n\tfor i, hero in pairs(HeroManager:getAliveHeroes()) do\n\t\t\n\t\t-- Check for collision\n\t\tif hero:collidesWith(object) then\n\t\t\t\n\t\t\t-- Resolve collision\n\t\t\tsolveCollision(object, hero)\n\t\tend\n\tend\n\t\n\t-- Iterate over all alive monsters\n\tfor i, monster in pairs(MonsterManager:getAliveMonsters()) do\n\t\t\n\t\t-- Check for collision\n\t\tif monster:collidesWith(object) then\n\t\t\t\n\t\t\t-- Resolve collision\n\t\t\tsolveCollision(object, monster)\n\t\tend\n\tend", "CodeBleu_score": 26.1576535536453}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\t--collision detection\n\tfor i, monster in ipairs(MonsterManager) do\n\t\tif monster.isAlive then\n\t\t\tif isOutOfBound(monster) then\n\t\t\t\tmonster.isAlive = false\n\t\t\tend\n\t\t\tfor j, hero in ipairs(HeroManager) do\n\t\t\t\tif hero.isAlive then\n\t\t\t\t\tif collision(hero, monster) then\n\t\t\t\t\t\thero.isAlive = false\n\t\t\t\t\t\tmonster.isAlive = false\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\t--boundary check\n\tfor i, hero in ipairs(HeroManager) do\n\t\tif hero.isAlive then\n\t\t\tif isOutOfBound(hero) then\n\t\t\t\thero.isAlive = false\n\t\t\tend\n\t\tend\n\tend\n\n\t--remove dead sprites\n\tfor i = #HeroManager, 1, -1 do\n\t\tif not HeroManager[i].isAlive then\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend\n\tfor i = #MonsterManager, 1, -1 do\n\t\tif not MonsterManager[i].isAlive then\n\t\t\ttable.remove(MonsterManager, i)\n\t\tend\n\tend", "CodeBleu_score": 44.55088838274739}, {"code": "function collisionDetect(dt)\n\t\tfor i = #HeroManager, 1, -1 do\n\t\tlocal hero = HeroManager[i]\n\t\tif hero.isAlive then\n\t\t\tfor j = #MonsterManager, 1, -1 do\n\t\t\t\tlocal monster = MonsterManager[j]\n\t\t\t\tif monster.isAlive then\n\t\t\t\t\tif collision(hero, monster) then\n\t\t\t\t\t\tif monster.isBoss then\n\t\t\t\t\t\t\t--boss is hit\n\t\t\t\t\t\t\thero.isAlive = false\n\t\t\t\t\t\t\thero.isInvincible = true\n\t\t\t\t\t\t\thero.invincibleTimer = 0\n\t\t\t\t\t\t\thero.invincibleTime = 0.5\n\t\t\t\t\t\t\thero.health = hero.health - monster.damage\n\t\t\t\t\t\t\thero.sprite.x = hero.sprite.x - 50\n\t\t\t\t\t\t\thero.sprite.y = hero.sprite.y - 50\n\t\t\t\t\t\t\thero.sprite.xScale = 0.5\n\t\t\t\t\t\t\thero.sprite.yScale = 0.5\n\t\t\t\t\t\t\thero.sprite.rotation = 0\n\t\t\t\t\t\t\thero.sprite.alpha = 0.5\n\t\t\t\t\t\t\thero.sprite.x = hero.sprite.x + 50\n\t\t\t\t\t\t\thero.sprite.y = hero.sprite.y + 50\n\t\t\t\t\t\t\thero.sprite.xScale = 1\n\t\t\t\t\t\t\thero.sprite.yScale = 1\n\t\t\t\t\t\t\thero.sprite.rotation = 0\n\t\t\t\t\t\t\thero.sprite.alpha = 1\n\t\t\t\t\t\t\thero.sprite.x = hero.sprite.x - 50\n\t\t\t\t\t\t\thero.sprite.y = hero.sprite.y - 50\n\t\t\t\t\t\t\thero.sprite.xScale = 0.5\n\t\t\t\t\t\t\thero.sprite.yScale = 0.5\n\t\t\t\t\t\t\thero.sprite.rotation = 0\n\t\t\t\t\t\t\thero.sprite.alpha = 0.5\n\t\t\t\t\t\t\thero.sprite.x = hero.sprite.x + 50\n\t\t\t\t\t\t\thero.sprite.y = hero.sprite.y + 50\n\t\t\t\t\t\t\thero.sprite.xScale = 1\n\t\t\t\t\t\t\thero.sprite.yScale = 1\n\t\t\t\t\t\t\thero.sprite.rotation = 0\n\t\t\t\t\t\t\thero.sprite.alpha = 1\n\t\t\t\t\t\t\thero.sprite.x = hero.sprite.x - 50\n\t\t\t\t\t\t\thero.sprite.y = hero.sprite.y - 50\n\t\t\t\t\t\t\thero.sprite.xScale = 0.5\n\t\t\t\t\t\t\thero.", "CodeBleu_score": 32.089622491825665}, {"code": "function collisionDetect(dt)\n\t\tfor i = #HeroManager, 1, -1 do\n\t\tlocal hero = HeroManager[i]\n\t\tif hero.isAlive then\n\t\t\tfor j = #MonsterManager, 1, -1 do\n\t\t\t\tlocal monster = MonsterManager[j]\n\t\t\t\tif monster.isAlive then\n\t\t\t\t\tif collision(hero, monster) then\n\t\t\t\t\t\thero.isAlive = false\n\t\t\t\t\t\tmonster.isAlive = false\n\t\t\t\t\t\tscore = score + 100\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tif isOutOfBound(hero) then\n\t\t\t\thero.isAlive = false\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 32.85896772184261}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tlocal x = self.x\n\tlocal y = self.y\n\tlocal dir = self.direction\n\tlocal collider = Collider(x, y, self.specialAttackRange, self.specialAttackDamage, self.specialAttackKnockback, self.specialAttackStun, self.specialAttackKnockback, self.specialAttackKnockback, self.specialAttackKnockback)\n\tcollider.actor = self\n\tcollider.type = self.specialAttackType\n\tcollider.specialAttack = true\n\tcollider.sound = self.specialAttackSound\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.specialAttack = true\n\tcollider.", "CodeBleu_score": 38.333062830859575}, {"code": "function Actor:specialAttack()\n\t\t-- create the collider for the special attack\n\tlocal specialAttackCollider = Collider:new(self.x, self.y, self.width, self.height, self.colliderType, self.colliderLayer, self.colliderGroup, self.colliderMask, self.colliderCallback)\n\t-- play the associated sound effects\n\tself:playSpecialAttackSound()\n\t-- return the special attack collider\n\treturn specialAttackCollider", "CodeBleu_score": 35.26641669514808}, {"code": "function Actor:specialAttack()\n\t\t-- Create a collider at the actor's current position and facing direction with specified attack properties.\n\tlocal specialAttackCollider = Collider.new(self.position, self.facingDirection, self.specialAttackProperties.width, self.specialAttackProperties.height, self.specialAttackProperties.damage, self.specialAttackProperties.knockback, self.specialAttackProperties.hitStun)\n\t-- Play the associated sound effects for the special attack.\n\tself.specialAttackProperties.soundEffect:play()\n\t-- Add the collider to the list of colliders.\n\ttable.insert(colliders, specialAttackCollider)", "CodeBleu_score": 31.56806875133413}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif self.angryFace ~= trueFalse then\n\t\tself.angryFace = trueFalse\n\t\tif self.angryFace then\n\t\t\tself.sprite:setTexture(\"slime_angry.png\")\n\t\telse\n\t\t\tself.sprite:setTexture(\"slime_normal.png\")\n\t\tend\n\tend", "CodeBleu_score": 57.03849220075106}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif self.angry ~= trueFalse then\n\t\tself.angry = trueFalse\n\t\tif self.angry then\n\t\t\tself.sprite.texture = love.graphics.newImage(\"slime_angry.png\")\n\t\telse\n\t\t\tself.sprite.texture = love.graphics.newImage(\"slime_normal.png\")\n\t\tend\n\tend", "CodeBleu_score": 49.06067573479127}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true and self.angry == false then\n\t\tself.angry = true\n\t\tself.sprite:setTexture(\"images/slime_angry.png\")\n\telseif trueFalse == false and self.angry == true then\n\t\tself.angry = false\n\t\tself.sprite:setTexture(\"images/slime.png\")\n\tend", "CodeBleu_score": 49.35319433603053}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\nvar width = paint.measureText(char.toString()).toInt()\nvar height = ceil(metric.height).toInt()\nif (width == 0) {\nheight = getFontSize()\nwidth = height\n}\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\nval data = IntArray(width * height)\nbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\nfor (x in 0 until width) {\nfor (y in 0 until height) {\npixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n}\n}\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 85.1719151294859}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\nvar width = paint.measureText(char.toString()).toInt()\nvar height = ceil(metric.height).toInt()\nif (width == 0) {\nheight = getFontSize()\nwidth = height\n}\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\nval data = IntArray(width * height)\nbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\nfor (x in 0 until width) {\nfor (y in 0 until height) {\npixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n}\n}\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 85.1719151294859}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n\tvar width = paint.measureText(char.toString()).toInt()\n\tvar height = ceil(metric.height).toInt()\n\tif (width == 0) {\n\t\theight = getFontSize()\n\t\twidth = height\n\t}\n\n\tval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n\tval canvas = Canvas(bitmap)\n\tcanvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n\tval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n\tval data = IntArray(width * height)\n\tbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n\tfor (x in 0 until width) {\n\t\tfor (y in 0 until height) {\n\t\t\tpixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n\t\t}\n\t}\n\tbitmap.recycle()\n\treturn pixmap\n}", "CodeBleu_score": 85.24847800398743}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\nval suggestedUri = Uri.parse(suggestedLocation)\nval fileName = getFilename(suggestedUri, suggestedLocation)\n\nval onFileChosen = { uri: Uri ->\nvar stream: OutputStream? = null\ntry {\nstream = contentResolver.openOutputStream(uri, \"rwt\")\nstream!!.writer().use { it.write(data) }\nonSaved(uri.toString())\n} catch (ex: Exception) {\nonError(ex)\n} finally {\nstream?.close()\n}\n}\n\nrequests[requestCode] = Request(onFileChosen, onError)\nopenSaveFileChooser(fileName, suggestedUri, requestCode)\nrequestCode += 1\n}", "CodeBleu_score": 93.08680962566996}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n/**\n * The function saveGame(data: String, suggestedLocation: String, onSaved: (location: String) -> Unit, onError: (ex: Exception) -> Unit) saves game data to a specified location. It parses the suggested location URI, determines the filename, and defines a callback for file selection. Upon file selection, it attempts to write data to the chosen URI and invokes the onSaved callback if successful or onError in case of an exception. The function also opens a file chooser for user to select save location.\n */\n        // When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n/**\n * The function loadGame(onLoaded: (data: String, location: String) -> Unit, onError: (ex: Exception) -> Unit) loads game data from a user-selected file. It defines a callback to handle file selection, attempts to read the file's content, and invokes onLoaded with the data and file location if successful, or onError if an exception occurs. The function opens a file chooser for the user to select the file to load.\n */\n        val onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.03406591579981}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t", "CodeBleu_score": 19.371400902165885}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t", "CodeBleu_score": 19.371400902165885}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\nintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.75518805287992}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\nintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.75518805287992}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\nintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.75518805287992}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t//    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n//    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n//    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n//    val importance = NotificationManager.IMPORTANCE_HIGH\n//    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n//    mChannel.description = descriptionText\n//    mChannel.setShowBadge(true)\n//    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n//\n//    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n//    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 1.1719733888811363}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\nval name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\nval descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\nval importance = NotificationManager.IMPORTANCE_HIGH\nval mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\nmChannel.description = descriptionText\nmChannel.setShowBadge(true)\nmChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\nval notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\nnotificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 97.99820659160187}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t//    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n//    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n//    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n//    val importance = NotificationManager.IMPORTANCE_HIGH\n//    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n//    mChannel.description = descriptionText\n//    mChannel.setShowBadge(true)\n//    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n//\n//    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n//    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 1.1719733888811363}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t//    val defaultSettings = getDefaultSettings()\n//\n//    // Scan for Image folders and build one atlas each\n//    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n//\n//    // pack for mods\n//    val modDirectory = File(\"mods\")\n//    if (!modDirectory.exists())\n//        return\n//    for (mod in modDirectory.listFiles()!!) {\n//        if (mod.isHidden)\n//            continue\n//        try {\n//            packImagesPerMod(mod.path, mod.path, defaultSettings)\n//        } catch (ex: Throwable) {\n//            ex.printStackTrace()\n//        }\n//    }\n}", "CodeBleu_score": 1.537888354575527}, {"code": "fun packImages(workingPath: String){\n\t//    val defaultSettings = getDefaultSettings()\n//\n//    // Scan for Image folders and build one atlas each\n//    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n//\n//    // pack for mods\n//    val modDirectory = File(\"mods\")\n//    if (!modDirectory.exists())\n//        return\n//    for (mod in modDirectory.listFiles()!!) {\n//        if (mod.isHidden)\n//            continue\n//        try {\n//            packImagesPerMod(mod.path, mod.path, defaultSettings)\n//        } catch (ex: Throwable) {\n//            ex.printStackTrace()\n//        }\n//    }\n}", "CodeBleu_score": 1.537888354575527}, {"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t", "CodeBleu_score": 3.349436022099892}, {"code": "suspend fun reloadWorldscreen(){\n\t   val workingPath = File(workingDir, \"working\")\n//    val modsPath = File(workingDir, \"mods\")\n//    val assetsPath = File(workingDir, \"assets\")\n//    val mods = modsPath.listFiles { file -> file.isDirectory &&!file.name.startsWith(\".\") }\n//       ?.filter { it.name!= \"base\" }\n//       ?: emptyList()\n//\n//    val atlas = packImages(workingPath)\n//    val modAtlases = mods.map { mod ->\n//        val modWorkingPath = File(workingPath, mod.name)\n//        val modAssetsPath = File(modWorkingPath, \"assets\")\n//        val modAtlas = packImages(modWorkingPath)\n//        mod.name to modAtlas\n//    }.toMap()\n//\n//    withGLContext {\n//        for (screen in screenStack) screen.dispose()\n//        screenStack.clear()\n//\n//        val gameInfo = gameInfo?: throw UncivShowableException(\"Cannot reload worldscreen because gameInfo is null\")\n//        val worldScreen = WorldScreen(gameInfo, AutoPlay(settings.autoPlay), gameInfo.getPlayerToViewAs())\n//        screenStack.addLast(worldScreen)\n//        setScreen(worldScreen)\n//\n//        worldScreen.reloadWorldscreen(atlas, modAtlases)\n//    }\n}", "CodeBleu_score": 10.120014474240149}, {"code": "suspend fun reloadWorldscreen(){\n\t   val workingPath = getWorkingPath()\n//    val modsPath = workingPath.resolve(\"mods\")\n//    val assetsPath = workingPath.resolve(\"assets\")\n//    val mods = getMods(modsPath)\n//    val modsImages = mutableListOf<Image>()\n//    val modsExceptions = mutableListOf<Throwable>()\n//\n//    val atlas = packImages(assetsPath)\n//    modsImages.add(atlas)\n//\n//    for (mod in mods) {\n//        val modPath = modsPath.resolve(mod.name)\n//        val modAssetsPath = modPath.resolve(\"assets\")\n//        val modAtlas = packImages(modAssetsPath)\n//        modsImages.add(modAtlas)\n//    }\n//\n//    val atlas = TexturePacker.process(modsImages, \"assets\", \"images\")\n//    val atlasFile = workingPath.resolve(\"assets/images/atlas.atlas\")\n//    atlas.save(atlasFile)\n//\n//    val atlasJson = TexturePacker.process(modsImages, \"assets\", \"images\")\n//    val atlasJsonFile = workingPath.resolve(\"assets/images/atlas.json\")\n//    atlasJson.save(atlasJsonFile)\n//\n//    if (modsExceptions.isNotEmpty()) {\n//        for (exception in modsExceptions) {\n//            exception.printStackTrace()\n//        }\n//    }\n}", "CodeBleu_score": 8.725209149226176}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t   if (screenStack.size > 1) {\n//        while (screenStack.size > 1) {\n//            popScreen()\n//        }\n//    }\n    val mainMenuScreen = MainMenuScreen()\n    pushScreen(mainMenuScreen)\n    return mainMenuScreen\n}", "CodeBleu_score": 56.53378354522604}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t   if (!isInitialized) {\n//        throw RuntimeException(\"You cannot call this function before the screen has been initialized\")\n//    }\n    if (screenStack.size > 1) {\n        // If we're not at the main menu, then we go back to the main menu\n        while (screenStack.size > 1) {\n            popScreen()\n        }\n    }\n    return MainMenuScreen()\n}", "CodeBleu_score": 25.18894181802463}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t   val screen = MainMenuScreen()\n//    setAsRootScreen(screen)\n//    return screen\n    setAsRootScreen(MainMenuScreen())\n    return MainMenuScreen()\n}", "CodeBleu_score": 23.488381282645474}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n    isAccessible = true\n    get(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.7092336475477}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n    isAccessible = true\n    get(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.7092336475477}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n    isAccessible = true\n    get(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.7092336475477}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\telease: Map<String,String> = try {\nFileHandle(\"/etc/os-release\")\n.readString()\n.split('\n')\n.map { it.split('=') }\n.filter { it.size == 2 }\n.associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n} catch (_: Throwable) { mapOf() }\nif (\"NAME\"!in osRelease) return \"\"\nreturn osRelease[\"PRETTY_NAME\"]?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 81.37536720460197}, {"code": "private fun getLinuxDistro(): String{\n\telease: Map<String,String> = try {\n    FileHandle(\"/etc/os-release\")\n       .readString()\n       .split('\n')\n       .map { it.split('=') }\n       .filter { it.size == 2 }\n       .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n} catch (_: Throwable) { mapOf() }\nif (\"NAME\"!in osRelease) return \"\"\nreturn osRelease[\"PRETTY_NAME\"]?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 84.37009444488162}, {"code": "private fun getLinuxDistro(): String{\n\tRelease: Map<String,String> = try {\n\t\tFileHandle(\"/etc/os-release\")\n\t\t\t.readString()\n\t\t\t.split('\n')\n\t\t\t.map { it.split('=') }\n\t\t\t.filter { it.size == 2 }\n\t\t\t.associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n\t} catch (_: Throwable) { mapOf() }\n\tif (\"NAME\"!in osRelease) return \"\"\n\treturn osRelease[\"PRETTY_NAME\"]?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 81.65665497767039}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t\ttry {\n\t\t// Attempt to flash the window using platform-specific APIs\n\t\twhen (Platform.get()) {\n\t\t\tPlatform.MAC -> {\n\t\t\t\t// On macOS, flash the application window using the NSApplication.activateIgnoringOtherApps: method\n\t\t\t\tval nsApplication = NSApplication.sharedApplication()\n\t\t\t\tnsApplication.activateIgnoringOtherApps(true)\n\t\t\t}\n\t\t\tPlatform.LINUX -> {\n\t\t\t\t// On Linux, flash the window using the X11 XSetInputFocus method\n\t\t\t\tval rootWindow = X11.XDefaultRootWindow(X11.display)\n\t\t\t\tX11.XSetInputFocus(X11.display, rootWindow, X11.RevertToParent, X11.CurrentTime)\n\t\t\t}\n\t\t\tPlatform.WINDOWS -> {\n\t\t\t\t// On Windows, flash the window using the Win32 SetForegroundWindow method\n\t\t\t\tval hwnd = Win32.GetForegroundWindow()\n\t\t\t\tWin32.SetForegroundWindow(hwnd)\n\t\t\t}\n\t\t\telse -> {\n\t\t\t\t// If the platform is not supported, use the fallback method\n\t\t\t\t// This will not flash the window, but it will notify the user if the window is not focused\n\t\t\t\tfallbackFlashWindow()\n\t\t\t}\n\t\t}\n\t} catch (e: Exception) {\n\t\t// Catch any errors during flashing and log them\n\t\tlogger.error(\"Error flashing window: ${e.message}\")\n\t}\n}", "CodeBleu_score": 45.16833772492637}, {"code": "private fun flashWindow(){\n\t\tval window: Window? = Application.get().activeWindow\n\tif (window == null) {\n\t\treturn\n\t}\n\n\tval toolkit = Toolkit.getDefaultToolkit()\n\tval platform: Platform = when {\n\t\ttoolkit is WindowsToolkit -> Platform.Windows\n\t\ttoolkit is UnixToolkit -> Platform.Unix\n\t\telse -> Platform.Unknown\n\t}\n\n\twhen (platform) {\n\t\tPlatform.Windows -> {\n\t\t\ttry {\n\t\t\t\tval user32 = Native.loadLibrary(\"user32\", User32.class)\n\t\t\t\tval hwnd = window.handle\n\t\t\t\tval flash = User32.FLASHWINFO()\n\t\t\t\tflash.hwnd = hwnd\n\t\t\t\tflash.dwFlags = User32.FLASHW_ALL\n\t\t\t\tflash.uCount = 3\n\t\t\t\tUser32.INSTANCE.FlashWindowEx(flash)\n\t\t\t} catch (e: Exception) {\n\t\t\t\tlog.error(\"Failed to flash window: $e\")\n\t\t\t}\n\t\t}\n\t\tPlatform.Unix -> {\n\t\t\ttry {\n\t\t\t\tval xlib = Native.loadLibrary(\"X11\", Xlib.class)\n\t\t\t\tval display = Xlib.INSTANCE.XOpenDisplay(null)\n\t\t\t\tval windowId = Xlib.INSTANCE.XGetInputFocus(display, 0)\n\t\t\t\tif (windowId!= 0) {\n\t\t\t\t\tval event = Xlib.INSTANCE.XEventsQueued(display, 0)\n\t\t\t\t\tif (event!= 0) {\n\t\t\t\t\t\tXlib.INSTANCE.XNextEvent(display, event)\n\t\t\t\t\t}\n\t\t\t\t\tXlib.INSTANCE.XSetInputFocus(display, windowId, 1, 0)\n\t\t\t\t\tXlib.INSTANCE.XSync(display, 0)\n\t\t\t\t}\n\t\t\t} catch (e: Exception) {\n\t\t\t\tlog.error(\"Failed to flash window: $e\")\n\t\t\t}\n\t\t}\n\t\telse -> {\n\t\t\tlog.error(\"Failed to flash window: unsupported platform\")\n\t\t}\n\t}\n}", "CodeBleu_score": 42.82870231300397}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\twhen (Platform.get()) {\n\t\t\tPlatform.MAC -> {\n\t\t\t\tval application = NSRunningApplication.currentApplication()\n\t\t\t\tapplication.activateWithOptions(NSApplicationActivationOptions.ActivateIgnoringOtherApps)\n\t\t\t\tapplication.activateWithOptions(NSApplicationActivationOptions.ActivateIgnoringOtherApps)\n\t\t\t}\n\t\t\tPlatform.WINDOWS -> {\n\t\t\t\tval window = Window.getWindows().firstOrNull()\n\t\t\t\tif (window!= null) {\n\t\t\t\t\twindow.flash()\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (e: Exception) {\n\t\tlogger.warn(\"Failed to flash window\", e)\n\t}\n}", "CodeBleu_score": 41.93850273955206}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t// TODO Auto-generated method stub\n\t// Backup the shared preferences file\n\tSharedPreferences sharedPreferences = getSharedPreferences(\"myPrefsFile\", MODE_PRIVATE);\n\tSharedPreferences.Editor editor = sharedPreferences.edit();\n\teditor.putString(\"myString\", \"This is a test string\");\n\teditor.commit();\n\tdata.writeEntity(\"myPrefsFile\", \"myPrefsFile\");\n\t\n\t// Backup the rankings file\n\tFile rankingsFile = new File(getFilesDir(), \"rankings\");\n\tif (rankingsFile.exists() && rankingsFile.isDirectory()) {\n\t\tdata.writeEntity(\"rankings\", \"rankings\");\n\t}\n\t\n\t// Backup the badges file\n\tFile badgesFile = new File(getFilesDir(), \"badges\");\n\tif (badgesFile.exists() && badgesFile.isDirectory()) {\n\t\tdata.writeEntity(\"badges\", \"badges\");\n\t}\n\t\n\t// Backup the journal entries file\n\tFile journalEntriesFile = new File(getFilesDir(), \"journalEntries\");\n\tif (journalEntriesFile.exists() && journalEntriesFile.isDirectory()) {\n\t\tdata.writeEntity(\"journalEntries\", \"journalEntries\");\n\t}\n}", "CodeBleu_score": 18.52526224556474}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n\t\treturn activeNetworkInfo!= null && activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI && activeNetworkInfo.isAvailable() && activeNetworkInfo.isConnected() &&!activeNetworkInfo.isMetered();\n\t} else {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n\t\treturn activeNetworkInfo!= null && activeNetworkInfo.isConnected() && activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI;\n\t}\n}", "CodeBleu_score": 46.815793439694986}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (activeNetwork!= null) { // connected to the network\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\t\treturn cm.isActiveNetworkMetered();\n\t\t} else {\n\t\t\treturn activeNetwork.getType() == ConnectivityManager.TYPE_WIFI\n\t\t\t\t\t|| activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX\n\t\t\t\t\t|| activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH\n\t\t\t\t\t|| activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 63.318086558404495}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n\t\treturn activeNetworkInfo!= null &&!activeNetworkInfo.isAvailable() &&!activeNetworkInfo.isConnectedOrConnecting() &&!activeNetworkInfo.isFailover() &&!activeNetworkInfo.isRoaming() &&!activeNetworkInfo.isDefault() &&!activeNetworkInfo.isMetered();\n\t} else {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();\n\t\treturn activeNetworkInfo!= null && activeNetworkInfo.isConnected() && activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI &&!activeNetworkInfo.isAvailable() &&!activeNetworkInfo.isConnectedOrConnecting() &&!activeNetworkInfo.isFailover() &&!activeNetworkInfo.isRoaming() &&!activeNetworkInfo.isDefault();\n\t}\n}", "CodeBleu_score": 44.79084077550121}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t\tif( hero.isAlive() ) {\n\t\thero.heal( 100 );\n\t\thero.cureAilments();\n\t\thero.removeCurses();\n\t\thero.satisfyHunger();\n\t\thero.restoreHealth();\n\t\thero.displayVisualEffects();\n\t\thero.interruptAction();\n\t\tlog( hero.getName() + \" is healed and restored.\" );\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 16.995172727444903}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif(!hero.isAlive() )\n\t\treturn false;\n\n\thero.restoreHealth();\n\thero.cureAilments();\n\thero.removeCurses();\n\thero.satisfyHunger();\n\thero.restoreHealth();\n\n\tif( hero.isAlive() )\n\t\thero.playSound( \"heal\" );\n\n\thero.displayVisualEffects();\n\n\treturn true;\n}", "CodeBleu_score": 21.309253486441108}, {"code": "protected boolean affectHero( Hero hero ){\n\t\tif ( hero.isAlive() ) {\n\t\t// Restore health\n\t\thero.setHealth( hero.getMaxHealth() );\n\n\t\t// Cure any ailments\n\t\thero.cureAilments();\n\n\t\t// Remove curses from equipped items\n\t\thero.removeCurses();\n\n\t\t// Satisfy hunger\n\t\thero.satisfyHunger();\n\n\t\t// Display visual effects\n\t\thero.displayVisualEffects();\n\n\t\t// Play sound\n\t\thero.playSound( \"affectHero\" );\n\n\t\t// Log message\n\t\thero.logMessage( \"You feel better.\" );\n\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 15.2070666296862}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif ( item.getType() == ItemType.WATER ) {\n\t\tif ( item.getWater() < item.getMaxWater() ) {\n\t\t\tif ( item.getWater() + 10 > item.getMaxWater() ) {\n\t\t\t\titem.setWater( item.getMaxWater() );\n\t\t\t} else {\n\t\t\t\titem.setWater( item.getWater() + 10 );\n\t\t\t}\n\t\t\treturn item;\n\t\t}\n\t} else if ( item.getType() == ItemType.ANKH ) {\n\t\tif (!item.isBlessed() ) {\n\t\t\titem.setBlessed( true );\n\t\t\treturn item;\n\t\t}\n\t} else if ( item.getType() == ItemType.CURSE ) {\n\t\tif (!item.isCursed() ) {\n\t\t\titem.setCursed( true );\n\t\t\treturn item;\n\t\t}\n\t} else if ( item.getType() == ItemType.POTION ) {\n\t\tif ( item.isCursed() ) {\n\t\t\titem.setCursed( false );\n\t\t\treturn item;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 37.48386970780187}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif ( item == null ) {\n\t\treturn null;\n\t}\n\tif ( item.isFull() ) {\n\t\treturn null;\n\t}\n\tif ( item.isBlessed() ) {\n\t\treturn null;\n\t}\n\tif ( item.isCursed() ) {\n\t\tif ( item.isUncurseable() ) {\n\t\t\treturn null;\n\t\t}\n\t\titem.removeCurse();\n\t\tif ( item.isCursed() ) {\n\t\t\treturn null;\n\t\t}\n\t}\n\tif ( item.isWater() ) {\n\t\tif ( item.isFull() ) {\n\t\t\treturn null;\n\t\t}\n\t\titem.fill();\n\t\treturn item;\n\t}\n\tif ( item.isAnkh() ) {\n\t\tif ( item.isBlessed() ) {\n\t\t\treturn null;\n\t\t}\n\t\titem.blessed();\n\t\treturn item;\n\t}\n\treturn null;\n}", "CodeBleu_score": 29.70810511866859}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\tif( item == null ) return null;\n\tif( item.type == Item.TYPE_ANKH ) {\n\t\tif( item.state == Item.STATE_BLESSED ) return null;\n\t\tif( item.state == Item.STATE_CURSED ) {\n\t\t\titem.state = Item.STATE_BLESSED;\n\t\t\titem.update();\n\t\t\treturn item;\n\t\t}\n\t\tif( item.state == Item.STATE_UNCURSED ) {\n\t\t\titem.state = Item.STATE_BLESSED;\n\t\t\titem.update();\n\t\t\treturn item;\n\t\t}\n\t}\n\tif( item.type == Item.TYPE_WATERSKIN ) {\n\t\tif( item.state == Item.STATE_FULL ) return null;\n\t\titem.state = Item.STATE_FULL;\n\t\titem.update();\n\t\treturn item;\n\t}\n\tif( item.type == Item.TYPE_CURSE ) {\n\t\tif( item.state == Item.STATE_UNCURSEABLE ) return null;\n\t\titem.state = Item.STATE_UNCURSEABLE;\n\t\titem.update();\n\t\treturn item;\n\t}\n\treturn null;\n}", "CodeBleu_score": 35.137638643899294}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\t// Check if enemy is aligned as an enemy\n\tif (enemy.alignment == Alignment.NEUTRAL) {\n\t\treturn;\n\t}\n\n\t// Apply buff\n\tenemy.buffs.add(buffCls);\n\n\t// Roll for loot\n\tLoot loot = enemy.loot.get(enemy.loot.size() - 1);\n\tloot.roll(hero);\n\n\t// Update kill statistics\n\thero.kills.add(enemy);\n\n\t// Process ascension challenges\n\thero.ascension.processChallenges(enemy);\n\n\t// Grant experience\n\tint exp = enemy.level * 10;\n\texp = (int) (exp * hero.level / (hero.level + 1));\n\thero.exp += exp;\n\n\t// Buff hero with additional energy if they are a Monk subclass\n\tif (hero.getClass() == Monk.class) {\n\t\t((Monk) hero).energy += 10;\n\t}\n}", "CodeBleu_score": 31.86694173212259}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (isChallengeBuffActive(hero)) {\n\t\tif (enemy.isEnemy()) {\n\t\t\tif (!enemy.isBoosted()) {\n\t\t\t\tif (enemy.isBoss()) {\n\t\t\t\t\tif (hero.isMaxLevel()) {\n\t\t\t\t\t\thero.addExperience(enemy.getExperience());\n\t\t\t\t\t}\n\t\t\t\t\tif (hero.getChallengeStacks() > 0) {\n\t\t\t\t\t\thero.setChallengeStacks(hero.getChallengeStacks() - 1);\n\t\t\t\t\t\tif (hero.getChallengeStacks() < 10) {\n\t\t\t\t\t\t\thero.log(hero.getName() + \" weakened!\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\trefreshChallengeBuff(hero);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (hero.getChallengeStacks() > 0) {\n\t\t\t\t\t\thero.setChallengeStacks(hero.getChallengeStacks() - 1);\n\t\t\t\t\t\tif (hero.getChallengeStacks() < 10) {\n\t\t\t\t\t\t\thero.log(hero.getName() + \" weakened!\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\trefreshChallengeBuff(hero);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 11.321613528093444}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t", "CodeBleu_score": 2.676826499359523}, {"code": "public void hit( Char enemy ){\n\t", "CodeBleu_score": 2.676826499359523}, {"code": "public void hit( Char enemy ){\n\t\tcount++;\n\tif (enemy.isDead()) {\n\t\tcount = 0;\n\t} else if (enemy.hasBuff(Buff.Corruption)) {\n\t\tcount = 0;\n\t} else {\n\t\tcomboTimer = comboTime;\n\t\tif (enemy.hasBuff(Buff.Cleave)) {\n\t\t\tcomboTimer += enemy.getBuff(Buff.Cleave).getDuration();\n\t\t}\n\t\tif (count >= 3) {\n\t\t\tcomboTimer = 0;\n\t\t}\n\t}\n\tactionIndicators.set(0, true);\n\tactionIndicators.set(1, true);\n\tactionIndicators.set(2, true);\n\tactionIndicators.set(3, true);\n\tif (count >= 3) {\n\t\tactionIndicators.set(3, false);\n\t}\n\tif (count >= 4) {\n\t\tactionIndicators.set(2, false);\n\t}\n\tif (count >= 5) {\n\t\tactionIndicators.set(1, false);\n\t}\n\tif (count >= 6) {\n\t\tactionIndicators.set(0, false);\n\t}\n\tif (count >= 3) {\n\t\tlogCombo(count);\n\t}\n\trefreshBuffIndicators();\n}", "CodeBleu_score": 31.058593687812653}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\tnt cap = super.capacity();\n\tfor (Item item : items){\n\t\tif (item instanceof Bag){\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero!= null && Dungeon.hero.belongings.secondWep!= null){\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 84.73382461458368}, {"code": "public int capacity(){\n\tnt cap = super.capacity();\n\tfor (Item item : items){\n\t\tif (item instanceof Bag){\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero!= null && Dungeon.hero.belongings.secondWep!= null){\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 84.73382461458368}, {"code": "public int capacity(){\n\tnt cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero!= null && Dungeon.hero.belongings.secondWep!= null) {\n\t\t// secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 78.4373679809383}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}, {"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}, {"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\t//Check if the enemy is an enemy or a neutral mimic\n\tif( enemy.isEnemy() ) {\n\t\t//Attempt the attack\n\t\tboolean hit = wep.attack( enemy );\n\t\t//Check if the attack was successful\n\t\tif( hit ) {\n\t\t\t//If the enemy is a gladiator, apply the appropriate buff\n\t\t\tif( enemy instanceof Gladiator ) {\n\t\t\t\t//Apply the buff\n\t\t\t\t((Gladiator) enemy).applyBuff( wep.getBuff() );\n\t\t\t}\n\t\t\t//If the enemy is a duelist, apply the appropriate buff\n\t\t\telse if( enemy instanceof Duelist ) {\n\t\t\t\t//Apply the buff\n\t\t\t\t((Duelist) enemy).applyBuff( wep.getBuff() );\n\t\t\t}\n\t\t}\n\t\t//Set the thrown weapon\n\t\twep.setThrown( true );\n\t\t//Return whether the attack was successful\n\t\treturn hit;\n\t}\n\t//Return false if the enemy is a neutral mimic\n\treturn false;\n}", "CodeBleu_score": 14.892336878884082}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif ( enemy.getAlignment() == enemy.getAlignment() ) {\n\t\tenemy.setThrownWeapon( wep );\n\t\tboolean result = enemy.attack( this );\n\t\tif ( result && ( enemy instanceof Gladiator || enemy instanceof Duelist ) ) {\n\t\t\tif ( enemy instanceof Gladiator ) {\n\t\t\t\tGladiator g = (Gladiator)enemy;\n\t\t\t\tg.setCombo( g.getCombo() + 1 );\n\t\t\t\tg.setComboTimer( 5 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tDuelist d = (Duelist)enemy;\n\t\t\t\td.setCombo( d.getCombo() + 1 );\n\t\t\t\td.setComboTimer( 5 );\n\t\t\t}\n\t\t}\n\t\tenemy.clearThrownWeapon();\n\t\treturn result;\n\t}\n\treturn false;\n}", "CodeBleu_score": 23.409828962908087}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = 0;\n\tif (weapon!= null) attackSkill += weapon.attackSkill;\n\tif (target!= null) {\n\t\tif (weapon!= null) {\n\t\t\tattackSkill += weapon.accuracy;\n\t\t\tif (weapon.type == WeaponType.MELEE) {\n\t\t\t\tif (target.distance(this) <= weapon.reach) attackSkill += 10;\n\t\t\t\telse attackSkill -= 10;\n\t\t\t}\n\t\t\telse if (weapon.type == WeaponType.RANGED) {\n\t\t\t\tif (target.distance(this) <= weapon.reach) attackSkill += 10;\n\t\t\t\telse attackSkill -= 10;\n\t\t\t}\n\t\t\telse if (weapon.type == WeaponType.MAGIC) {\n\t\t\t\tif (target.distance(this) <= weapon.reach) attackSkill += 10;\n\t\t\t\telse attackSkill -= 10;\n\t\t\t}\n\t\t}\n\t\tif (buffs.containsKey(Buff.BLIND)) attackSkill += 10;\n\t\tif (buffs.containsKey(Buff.CONFUSED)) attackSkill -= 10;\n\t\tif (buffs.containsKey(Buff.SLOW)) attackSkill -= 10;\n\t\tif (buffs.containsKey(Buff.FAST)) attackSkill += 10;\n\t}\n\treturn attackSkill;\n}", "CodeBleu_score": 19.64423998579451}, {"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = baseAttackSkill;\n\tif (weapon!= null) {\n\t\tswitch (weapon.weaponType) {\n\t\t\tcase SWORD:\n\t\t\t\tattackSkill += 3;\n\t\t\t\tbreak;\n\t\t\tcase AXE:\n\t\t\t\tattackSkill += 2;\n\t\t\t\tbreak;\n\t\t\tcase STAFF:\n\t\t\t\tattackSkill += 1;\n\t\t\t\tbreak;\n\t\t\tcase BOW:\n\t\t\t\tattackSkill += 2;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tif (buffs.containsKey(Buff.BuffType.PROXIMITY)) {\n\t\tattackSkill += 2;\n\t}\n\tif (buffs.containsKey(Buff.BuffType.CRITICAL)) {\n\t\tattackSkill += 2;\n\t}\n\tif (buffs.containsKey(Buff.BuffType.SHIELD)) {\n\t\tattackSkill += 2;\n\t}\n\tif (buffs.containsKey(Buff.BuffType.STUN)) {\n\t\tattackSkill += 2;\n\t}\n\tif (buffs.containsKey(Buff.BuffType.DODGE)) {\n\t\tattackSkill += 2;\n\t}\n\tif (buffs.containsKey(Buff.BuffType.BLOCK)) {\n\t\tattackSkill += 2;\n\t}\n\treturn attackSkill;\n}", "CodeBleu_score": 18.53593054017121}, {"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = baseAttackSkill;\n\tif (weapon!= null) {\n\t\tif (weapon.getType() == Weapon.WeaponType.MELEE) {\n\t\t\tattackSkill += meleeAccuracyBonus;\n\t\t}\n\t\telse if (weapon.getType() == Weapon.WeaponType.RANGED) {\n\t\t\tattackSkill += rangedAccuracyBonus;\n\t\t}\n\t\telse if (weapon.getType() == Weapon.WeaponType.MAGIC) {\n\t\t\tattackSkill += magicAccuracyBonus;\n\t\t}\n\t}\n\tif (target!= null) {\n\t\tint distance = 0;\n\t\tif (target.getRoom()!= null) {\n\t\t\tdistance = Math.abs(target.getRoom().getX() - getRoom().getX()) + Math.abs(target.getRoom().getY() - getRoom().getY());\n\t\t}\n\t\tif (distance <= 1) {\n\t\t\tattackSkill += 10;\n\t\t}\n\t\telse if (distance <= 2) {\n\t\t\tattackSkill += 5;\n\t\t}\n\t\telse if (distance <= 3) {\n\t\t\tattackSkill += 2;\n\t\t}\n\t}\n\tif (buffs.containsKey(Buff.BuffType.ATTACK_SKILL)) {\n\t\tattackSkill += buffs.get(Buff.BuffType.ATTACK_SKILL);\n\t}\n\treturn attackSkill;\n}", "CodeBleu_score": 28.23814745776479}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t", "CodeBleu_score": 34.553107085871765}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\n}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t//  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 72.33620634971936}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.tiles.sprites.forEach((sprite) => {\n\t\tif (sprite.visible) sprite.setTint(0xaa0000);\n\t});\n\n\tthis.related.forEach((cell) => {\n\t\tcell.tiles.sprites.forEach((sprite) => {\n\t\t\tif (sprite.visible) sprite.setTint(0xaa0000);\n\t\t});\n\t});\n\n\tif (this.tiles.heightmap) {\n\t\tif (this.tiles.heightmap.polygon.top){\n\t\t\tthis.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n\t\t}\n\t\tif (this.tiles.heightmap.polygon.slope){\n\t\t\tthis.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n\t\t}\n\t}\n}", "CodeBleu_score": 96.16936989131777}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.sprites.forEach((sprite) => {\nif (sprite.visible) sprite.setTint(0xaa0000);\n});\n\nthis.related.forEach((cell) => {\ncell.tiles.sprites.forEach((sprite) => {\nif (sprite.visible) sprite.setTint(0xaa0000);\n});\n});\n\nif (this.tiles.heightmap) {\nif (this.tiles.heightmap.polygon.top){\nthis.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n}\nif (this.tiles.heightmap.polygon.slope){\nthis.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n}\n}\n}", "CodeBleu_score": 96.06928284575314}, {"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.tiles.sprites.forEach((sprite) => {\n\t\tif (sprite.visible) sprite.setTint(0xaa0000);\n\t});\n\n\tthis.related.forEach((cell) => {\n\t\tcell.tiles.sprites.forEach((sprite) => {\n\t\t\tif (sprite.visible) sprite.setTint(0xaa0000);\n\t\t});\n\t});\n\n\tif (this.tiles.heightmap) {\n\t\tif (this.tiles.heightmap.polygon.top){\n\t\t\tthis.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n\t\t}\n\t\tif (this.tiles.heightmap.polygon.slope){\n\t\t\tthis.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n\t\t}\n\t}\n}", "CodeBleu_score": 96.16936989131777}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn null;\n\nif (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\nreturn 'light';\n\nif (this.current >= this.heavyThreshold)\nreturn 'heavy';\n}", "CodeBleu_score": 71.84387096017457}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn null;\n\nif (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\nreturn 'light';\n\nif (this.current >= this.heavyThreshold)\nreturn 'heavy';\n}", "CodeBleu_score": 71.84387096017457}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn null;\n\nif (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\nreturn 'light';\n\nif (this.current >= this.heavyThreshold)\nreturn 'heavy';\n}", "CodeBleu_score": 71.84387096017457}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t\tvar currentValue = this.getCurrentValue();\n\tif (currentValue < this.lightThreshold) {\n\t\treturn null;\n\t} else if (currentValue < this.heavyThreshold) {\n\t\treturn 'light';\n\t} else {\n\t\treturn 'heavy';\n\t}\n}", "CodeBleu_score": 22.388548447581975}, {"code": "restart: function (){\n\t\tthis.currentValue = 0;\n\tthis.currentValue = this.currentValue + Math.floor(Math.random() * 1000);\n\tif (this.currentValue < this.lightThreshold) {\n\t\tthis.trafficDensity = 'light';\n\t} else if (this.currentValue >= this.lightThreshold && this.currentValue < this.heavyThreshold) {\n\t\tthis.trafficDensity ='medium';\n\t} else {\n\t\tthis.trafficDensity = 'heavy';\n\t}\n\treturn this.trafficDensity;\n}", "CodeBleu_score": 16.353352209091348}, {"code": "restart: function (){\n\t\tvar currentValue = this.getValue();\n\tif (currentValue < this.lightThreshold) {\n\t\treturn null;\n\t} else if (currentValue >= this.lightThreshold && currentValue < this.heavyThreshold) {\n\t\treturn 'light';\n\t} else {\n\t\treturn 'heavy';\n\t}\n}", "CodeBleu_score": 23.003868507699384}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\tif (this.flashing) {\n\t\tthis.flashing = false;\n\t\tthis.flashingColor = null;\n\t\tthis.flashingAlpha = null;\n\t\tthis.flashingDuration = null;\n\t\tthis.flashingForce = null;\n\t\tthis.flashingStartTime = null;\n\t\tthis.flashingEndTime = null;\n\t\tthis.flashingInterval = null;\n\t}\n\n\tif (typeof color === 'undefined' || typeof duration === 'undefined' || typeof force === 'undefined' || typeof alpha === 'undefined') {\n\t\treturn false;\n\t}\n\n\tif (typeof color!=='string') {\n\t\treturn false;\n\t}\n\n\tif (typeof duration!== 'number' || duration <= 0) {\n\t\treturn false;\n\t}\n\n\tif (typeof force!== 'number' || force < 0 || force > 1) {\n\t\treturn false;\n\t}\n\n\tif (typeof alpha!== 'number' || alpha < 0 || alpha > 1) {\n\t\treturn false;\n\t}\n\n\tthis.flashing = true;\n\tthis.flashingColor = color;\n\tthis.flashingAlpha = alpha;\n\tthis.flashingDuration = duration;\n\tthis.flashingForce = force;\n\tthis.flashingStartTime = Date.now();\n\tthis.flashingEndTime = this.flashingStartTime + this.flashingDuration;\n\tthis.flashingInterval = setInterval(this.flashingIntervalFunc.bind(this), 1000 / 60);\n\n\treturn true;\n}", "CodeBleu_score": 42.51709740545873}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (this.flashing) {\n\t\treturn false;\n\t}\n\tif (typeof color === \"undefined\") {\n\t\tcolor = \"white\";\n\t}\n\tif (typeof duration === \"undefined\") {\n\t\tduration = 1000;\n\t}\n\tif (typeof force === \"undefined\") {\n\t\tforce = 0;\n\t}\n\tif (typeof alpha === \"undefined\") {\n\t\talpha = 1;\n\t}\n\tthis.flashing = true;\n\tthis.flashColor = color;\n\tthis.flashDuration = duration;\n\tthis.flashForce = force;\n\tthis.flashAlpha = alpha;\n\tthis.flashStart = new Date().getTime();\n\treturn true;\n}", "CodeBleu_score": 49.38846142205598}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (typeof color === 'undefined') {\n\t\tcolor = 'rgba(255, 255, 255, 1)';\n\t}\n\tif (typeof duration === 'undefined') {\n\t\tduration = 1000;\n\t}\n\tif (typeof force === 'undefined') {\n\t\tforce = 1;\n\t}\n\tif (typeof alpha === 'undefined') {\n\t\talpha = 1;\n\t}\n\tif (typeof duration!== 'number' || typeof force!== 'number' || typeof alpha!== 'number') {\n\t\treturn false;\n\t}\n\tif (force > 1 || force < 0 || alpha > 1 || alpha < 0) {\n\t\treturn false;\n\t}\n\tif (this.flashing) {\n\t\tthis.flashing.clear();\n\t}\n\tthis.flashing = this.context.createRect(0, 0, this.width, this.height);\n\tthis.flashing.setFillStyle(color);\n\tthis.flashing.setAlpha(alpha);\n\tthis.flashing.draw();\n\tthis.flashing.setEffect(new Effect.Fade(force, duration));\n\treturn true;\n}", "CodeBleu_score": 54.5299505027373}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new FlexLayer(this.game, children);\n\tif (addToWorld) {\n\t\tthis.addLayer(layer);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 21.52899054929987}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new FLEX.FlexLayer();\n\tlayer.setFluid(true);\n\tlayer.setFluidDensity(1);\n\tlayer.setFluidViscosity(1);\n\tlayer.setFluidFriction(0.5);\n\tlayer.setFluidDrag(0.5);\n\tif (addToWorld) {\n\t\tthis.addLayer(layer);\n\t}\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.addChild(children[i]);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 30.65101477175568}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new FlexLayer(children);\n\tif (addToWorld) {\n\t\tthis.addLayer(layer);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 18.45573480169843}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\tvar layer = this.game.add.flexLayer(this.game.world.centerX, this.game.world.centerY, this.game.world.width, this.game.world.height, this.game.world.scale.x, this.game.world.scale.y);\n\n\tif (children) {\n\t\tlayer.add(children);\n\t}\n\n\tthis.layers.push(layer);\n\n\treturn layer;\n}", "CodeBleu_score": 50.38649310008147}, {"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this, 0, 0, this.width, this.height, 1, 1);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tlayer.add(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 50.87921388598333}, {"code": "createFullLayer: function (children){\n\t\tvar layer = this.add.flexLayer(this.game.world.centerX, this.game.world.centerY, this.game.world.width, this.game.world.height, 1, 1);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.add(children[i]);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 48.720602132200696}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect = rect.clone();\n\t\t} else {\n\t\t\tthis.cropRect = rect;\n\t\t}\n\t} else {\n\t\tthis.cropRect = null;\n\t}\n\tif (this.cropRect) {\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 27.590510586312355}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect = rect.copy();\n\t\t} else {\n\t\t\tthis.cropRect = rect;\n\t\t}\n\t} else {\n\t\tthis.cropRect = null;\n\t}\n\tthis.updateCrop();\n}", "CodeBleu_score": 24.702422001885537}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tthis.cropRect = rect;\n\t} else {\n\t\tthis.cropRect = null;\n\t}\n\tif (copy) {\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 20.385468262700012}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x!== 0) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y!== 0) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 65.46791330289714}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.state.current!== state) {\n\t\treturn false;\n\t}\n\n\tvar frame = this.state.change(state);\n\n\tif (frame!== null) {\n\t\tthis.setFrames(frame);\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 25.11877438514635}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.frozen) {\n\t\treturn false;\n\t}\n\n\tif (this.state.current === state) {\n\t\treturn false;\n\t}\n\n\tif (this.state.current!== state) {\n\t\tthis.state.current = state;\n\n\t\tif (this.state.current === Phaser.Button.UP) {\n\t\t\tthis.frame = this.state.upFrame;\n\t\t}\n\t\telse if (this.state.current === Phaser.Button.OVER) {\n\t\t\tthis.frame = this.state.overFrame;\n\t\t}\n\t\telse if (this.state.current === Phaser.Button.DOWN) {\n\t\t\tthis.frame = this.state.downFrame;\n\t\t}\n\t\telse if (this.state.current === Phaser.Button.DISABLED) {\n\t\t\tthis.frame = this.state.disabledFrame;\n\t\t}\n\t\telse {\n\t\t\tthis.frame = this.state.upFrame;\n\t\t}\n\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 24.366002052078954}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tif (this.state.current === state) {\n\t\treturn false;\n\t}\n\n\tif (this.state.current === 'up') {\n\t\tthis.state.current = state;\n\n\t\tif (this.state.current === 'up') {\n\t\t\tthis.frame = this.state.upFrame;\n\t\t}\n\t\telse if (this.state.current === 'over') {\n\t\t\tthis.frame = this.state.overFrame;\n\t\t}\n\t\telse if (this.state.current === 'down') {\n\t\t\tthis.frame = this.state.downFrame;\n\t\t}\n\t\telse if (this.state.current === 'out') {\n\t\t\tthis.frame = this.state.outFrame;\n\t\t}\n\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 27.622492511352814}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\tif (typeof bulletClass === 'undefined') {\n\t\tbulletClass = Phaser.Bullet;\n\t}\n\n\tvar weapon = new Phaser.Weapon(this.game, quantity, bulletClass);\n\n\tif (key) {\n\t\tweapon.bulletKey = key;\n\t}\n\n\tif (frame) {\n\t\tweapon.bulletFrame = frame;\n\t}\n\n\tif (group) {\n\t\tweapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;\n\t\tweapon.bulletKillBottom = 100;\n\t\tweapon.bulletKillTop = -100;\n\t\tweapon.bulletKillLeft = -100;\n\t\tweapon.bulletKillRight = 100;\n\n\t\tweapon.bulletSpeed = 300;\n\t\tweapon.bulletGravity = 0;\n\t\tweapon.fireRate = 100;\n\n\t\tweapon.trackSprite(group, 0, 0);\n\t}\n\n\treturn weapon;\n}", "CodeBleu_score": 38.89981906425082}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\tif (typeof bulletClass === 'undefined') {\n\t\tbulletClass = Phaser.Bullet;\n\t}\n\n\tvar weapon = this.add.weapon(quantity, key, frame);\n\tweapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;\n\tweapon.bulletClass = bulletClass;\n\tweapon.bulletSpeed = 600;\n\tweapon.fireRate = 100;\n\tweapon.trackSprite(group, 0, 0, true);\n\n\treturn weapon;\n}", "CodeBleu_score": 39.14689183285886}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\tif (typeof group === 'undefined') { group = this.game.physics.arcade.group(); }\n\tif (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\n\tvar weapon = this.game.add.weapon(quantity, key, frame);\n\tweapon.bulletKillType = Phaser.Weapon.KILL_WORLD_BOUNDS;\n\tweapon.bulletClass = bulletClass;\n\tweapon.bulletSpeed = 200;\n\tweapon.fireRate = 100;\n\tweapon.trackSprite(group, 0, 0, true);\n\tweapon.onFire.add(this.onFire, this);\n\n\treturn weapon;\n}", "CodeBleu_score": 42.84896593953516}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar a = points[0];\n\t\tvar b = points[1];\n\t\tvar c = points[2];\n\n\t\tvar v0 = new Phaser.Point(b.x - a.x, b.y - a.y);\n\t\tvar v1 = new Phaser.Point(c.x - a.x, c.y - a.y);\n\n\t\tvar normal = new Phaser.Point(v0.y, -v0.x);\n\t\tnormal.normalize();\n\n\t\tvar dot = normal.x * v1.x + normal.y * v1.y;\n\n\t\tif (dot > 0) {\n\t\t\treturn this.drawPolygon(points);\n\t\t}\n\t} else {\n\t\treturn this.drawPolygon(points);\n\t}\n}", "CodeBleu_score": 32.612043866206186}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull)\n\t{\n\t\tvar v1 = new Phaser.Point();\n\t\tvar v2 = new Phaser.Point();\n\t\tvar v3 = new Phaser.Point();\n\n\t\tv1.setTo(points[0].x, points[0].y);\n\t\tv2.setTo(points[1].x, points[1].y);\n\t\tv3.setTo(points[2].x, points[2].y);\n\n\t\tvar normal = Phaser.Point.subtract(v2, v1);\n\t\tnormal = Phaser.Point.subtract(normal, v3);\n\t\tnormal.normalize();\n\n\t\tvar dot = Phaser.Point.dot(normal, this.camera.x);\n\n\t\tif (dot < 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.moveTo(points[0].x, points[0].y);\n\tthis.lineTo(points[1].x, points[1].y);\n\tthis.lineTo(points[2].x, points[2].y);\n\tthis.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 30.103559143456625}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull) {\n\t\tvar v1 = new Phaser.Point(points[0].x, points[0].y);\n\t\tvar v2 = new Phaser.Point(points[1].x, points[1].y);\n\t\tvar v3 = new Phaser.Point(points[2].x, points[2].y);\n\t\tvar normal = Phaser.Point.subtract(v2, v1);\n\t\tnormal = Phaser.Point.subtract(normal, v3);\n\t\tnormal = Phaser.Point.normalize(normal);\n\t\tvar dot = Phaser.Point.dot(normal, this.game.camera.x);\n\t\tif (dot > 0) {\n\t\t\tthis.drawPolygon(points);\n\t\t}\n\t} else {\n\t\tthis.drawPolygon(points);\n\t}\n}", "CodeBleu_score": 40.546966073196586}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t", "CodeBleu_score": 5.572246494525378}, {"code": "checkVideoProgress: function (){\n\t", "CodeBleu_score": 5.572246494525378}, {"code": "checkVideoProgress: function (){\n\t", "CodeBleu_score": 5.572246494525378}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t\tvar state = this.state;\n\n\tif (state.down) {\n\t\treturn;\n\t}\n\n\tstate.down = true;\n\tstate.time = Date.now();\n\tstate.repeat = 0;\n\tstate.event = event;\n\tstate.value = value;\n\n\tif (event) {\n\t\tstate.alt = event.altKey;\n\t\tstate.ctrl = event.ctrlKey;\n\t\tstate.shift = event.shiftKey;\n\t}\n\n\tthis.emit('down', state);\n}", "CodeBleu_score": 36.78795243972377}, {"code": "start: function (event, value){\n\t\tif (this.state!== \"down\") {\n\t\tthis.state = \"down\";\n\t\tthis.timing = 0;\n\t\tthis.repeat = 0;\n\t\tif (event) {\n\t\t\tthis.event = event;\n\t\t\tthis.value = value;\n\t\t\tthis.alt = event.altKey;\n\t\t\tthis.shift = event.shiftKey;\n\t\t\tthis.ctrl = event.ctrlKey;\n\t\t}\n\t\tthis.dispatch(\"onDown\", this.state, this.value);\n\t}\n}", "CodeBleu_score": 44.58545557898018}, {"code": "start: function (event, value){\n\t\tif (this.state!== \"down\") {\n\t\tthis.state = \"down\";\n\t\tthis.timing = 0;\n\t\tthis.repeat = 0;\n\t\tthis.modifiers = {};\n\t\tif (event) {\n\t\t\tthis.modifiers.alt = event.altKey;\n\t\t\tthis.modifiers.shift = event.shiftKey;\n\t\t\tthis.modifiers.ctrl = event.ctrlKey;\n\t\t}\n\t\tthis.event = event;\n\t\tthis.value = value;\n\t\tthis.emit(\"down\", this.state, this.value);\n\t}\n}", "CodeBleu_score": 42.89202151026981}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\tif (this.enabled) {\n\t\tif (this.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t\tthis.mouseDown = true;\n\t\tthis.mouseDownX = event.pageX;\n\t\tthis.mouseDownY = event.pageY;\n\t\tif (this.callback) {\n\t\t\tthis.callback(event);\n\t\t}\n\t\tif (this.input) {\n\t\t\tthis.input.onMouseDown(event);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.057004215441395}, {"code": "onMouseDown: function (event){\n\t\t// prevent default behavior\n\tif (this.options.preventDefault) {\n\t\tevent.preventDefault();\n\t}\n\n\t// invoke callback\n\tif (this.options.onMouseDown) {\n\t\tthis.options.onMouseDown.call(this, event);\n\t}\n\n\t// initialize mouse pointer\n\tif (this.options.inputEnabled) {\n\t\tthis.mousePointer.initialize(event);\n\t}\n}", "CodeBleu_score": 29.760233168970927}, {"code": "onMouseDown: function (event){\n\t\tif (this.inputEnabled) {\n\t\tthis.pointer = event;\n\t\tif (this.pointer.originalEvent) {\n\t\t\tthis.pointer.originalEvent.preventDefault();\n\t\t}\n\t}\n\tif (this.callbacks.onMouseDown) {\n\t\tthis.callbacks.onMouseDown(event);\n\t}\n}", "CodeBleu_score": 33.16682096370916}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t", "CodeBleu_score": 13.408675420784958}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (event.target.id == \"canvas\") {\n\t\tif (this.isMousePressed) {\n\t\t\tthis.isMousePressed = false;\n\t\t\tthis.mouseUpCallback(event);\n\t\t}\n\t}\n}", "CodeBleu_score": 26.09376412317629}, {"code": "onMouseUpGlobal: function (event){\n\t\tvar e = event || window.event;\n\tvar target = e.target || e.srcElement;\n\tif (this.mouseDownTarget === target) {\n\t\tif (this.mouseDownCallback) {\n\t\t\tthis.mouseDownCallback(event);\n\t\t}\n\t\tthis.mouseDownTarget = null;\n\t\tif (this.inputEnabled) {\n\t\t\tthis.mouseDownIdentifier = null;\n\t\t\tthis.mouseDownPointerId = null;\n\t\t\tthis.mouseDownPointerType = null;\n\t\t\tthis.mouseDownPointerX = null;\n\t\t\tthis.mouseDownPointerY = null;\n\t\t\tthis.mouseDownPointerTime = null;\n\t\t}\n\t}\n}", "CodeBleu_score": 27.198143630631606}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\tif (this.game.input.enabled && this.game.input.touch.callback && this.enabled) {\n\t\tthis.game.input.touch.callback.onTouchEnter(this, event);\n\t}\n\n\tif (this.game.input.touch.preventDefault) {\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 24.560366174949053}, {"code": "onTouchEnter: function (event){\n\t\tif (this.game.input.enabled && this.input.enabled) {\n\t\tif (this.touchEnterCallback) {\n\t\t\tthis.touchEnterCallback(event);\n\t\t}\n\t\tif (this.input.useHandCursor) {\n\t\t\tthis.game.input.setHandCursor();\n\t\t}\n\t\tif (this.input.stopOnTouchEnd) {\n\t\t\tthis.game.input.onTouchEnd.remove(this.onTouchLeave, this);\n\t\t}\n\t\tif (this.input.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 37.92461025667618}, {"code": "onTouchEnter: function (event){\n\t\tif (!this.game.input.enabled) {\n\t\treturn;\n\t}\n\tif (!this.enabled) {\n\t\treturn;\n\t}\n\tthis.game.input.touchEnterCallback(event);\n\tif (this.touchEnterCallback) {\n\t\tthis.touchEnterCallback.call(this.touchEnterContext, event);\n\t}\n\tif (this.preventDefault) {\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 57.871640571614606}]}
