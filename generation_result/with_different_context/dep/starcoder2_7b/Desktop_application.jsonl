{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t\treturn template.map(item => {\n\t\tif (!item.metadata) {\n\t\t\titem.metadata = {};\n\t\t}\n\t\tif (item.submenu) {\n\t\t\titem.submenu = this.translateTemplate(item.submenu, keystrokesByCommand);\n\t\t}\n\t\tif (item.command) {\n\t\t\tlet command = item.command;\n\t\t\tif (command.startsWith(\"application:\")) {\n\t\t\t\titem.windowSpecific = false;\n\t\t\t} else {\n\t\t\t\titem.windowSpecific = true;\n\t\t\t}\n\t\t\tlet keystrokes = keystrokesByCommand[command];\n\t\t\tif (keystrokes) {\n\t\t\t\tif (item.label.includes(\" \")) {\n\t\t\t\t\titem.label = keystrokes[0];\n\t\t\t\t} else {\n\t\t\t\t\titem.accelerator = keystrokes[0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn item;\n\t});\n}", "CodeBleu_score": 38.61671785660466}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\treturn template.map(item => {\n\t\tif (item.type ==='separator') {\n\t\t\treturn item;\n\t\t}\n\n\t\tlet label = item.label;\n\t\tlet accelerator = item.accelerator;\n\n\t\tif (item.submenu) {\n\t\t\titem.submenu = this.translateTemplate(item.submenu, keystrokesByCommand);\n\t\t}\n\n\t\tif (item.command) {\n\t\t\tconst keystrokes = keystrokesByCommand[item.command];\n\t\t\tif (keystrokes) {\n\t\t\t\tif (label.includes(' ')) {\n\t\t\t\t\tlabel = keystrokes[0];\n\t\t\t\t} else {\n\t\t\t\t\taccelerator = keystrokes[0];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titem.click = () => atomApplication.send('atom:dispatch', {\n\t\t\t\tcommand: item.command,\n\t\t\t\targs: item.args\n\t\t\t});\n\n\t\t\tif (item.command.startsWith('application:')) {\n\t\t\t\titem.window = 'never';\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\t...item,\n\t\t\tlabel,\n\t\t\taccelerator\n\t\t};\n\t});\n}", "CodeBleu_score": 43.7892823681891}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\t// Iterate through each item in the template\n\ttemplate.forEach(item => {\n\t\t// Initialize metadata if missing\n\t\tif (!item.metadata) {\n\t\t\titem.metadata = {};\n\t\t}\n\t\t// Process commands\n\t\tif (item.command) {\n\t\t\t// Retrieve associated keystrokes\n\t\t\tconst keystrokes = keystrokesByCommand[item.command];\n\t\t\t// Assign the first keystroke to the item's label if it includes a space, or to its accelerator otherwise\n\t\t\tif (item.label.includes(\" \")) {\n\t\t\t\titem.label = keystrokes[0];\n\t\t\t} else {\n\t\t\t\titem.accelerator = keystrokes[0];\n\t\t\t}\n\t\t\t// Set a click event to send the command via the global atomApplication\n\t\t\titem.click = () => {\n\t\t\t\tatomApplication.send(item.command);\n\t\t\t};\n\t\t\t// Mark the item as window-specific if the command does not start with \"application:\"\n\t\t\tif (!item.command.startsWith(\"application:\")) {\n\t\t\t\titem.window = \"when-focused\";\n\t\t\t}\n\t\t}\n\t\t// Recursively process submenus\n\t\tif (item.submenu) {\n\t\t\tthis.translateTemplate(item.submenu, keystrokesByCommand);\n\t\t}\n\t});\n\treturn template;\n}", "CodeBleu_score": 43.93801821524643}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\nlet items = [];\nfor (let index in object) {\n  const item = object[index];\n  items.push(item);\n  if (item.submenu)\n    items = items.concat(this.flattenMenuItems(item.submenu));\n}\nreturn items;\n}", "CodeBleu_score": 97.24802033803455}, {"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\nlet items = [];\nfor (let index in object) {\n  const item = object[index];\n  items.push(item);\n  if (item.submenu)\n    items = items.concat(this.flattenMenuItems(item.submenu));\n}\nreturn items;\n}", "CodeBleu_score": 97.24802033803455}, {"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\nlet items = [];\nfor (let index in object) {\nconst item = object[index];\nitems.push(item);\nif (item.submenu)\nitems = items.concat(this.flattenMenuItems(item.submenu));\n}\nreturn items;\n}", "CodeBleu_score": 95.57498943568349}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tlet encrypted = cipher.update(JSON.stringify(options), 'utf8', 'hex');\n\tencrypted += cipher.final('hex');\n\tconst authTag = cipher.getAuthTag().toString('hex');\n\treturn JSON.stringify({ iv: iv.toString('hex'), encrypted, authTag });\n}", "CodeBleu_score": 57.91582792199917}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tlet encrypted = cipher.update(JSON.stringify(options));\n\tencrypted = Buffer.concat([encrypted, cipher.final()]);\n\tconst tag = cipher.getAuthTag();\n\tconst ivHex = iv.toString('hex');\n\tconst tagHex = tag.toString('hex');\n\treturn {\n\t\tivHex,\n\t\ttagHex,\n\t\tencrypted: encrypted.toString('hex')\n\t};\n}", "CodeBleu_score": 53.02193932828999}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst optionsString = JSON.stringify(options);\n\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tcipher.setAAD(Buffer.from(''));\n\tconst encrypted = cipher.update(optionsString, 'utf8', 'hex');\n\tconst tag = cipher.getAuthTag();\n\treturn {\n\t\tiv: iv.toString('hex'),\n\t\ttag: tag.toString('hex'),\n\t\tencrypted: encrypted,\n\t};\n}", "CodeBleu_score": 53.400133498737425}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t\tif (template.items) {\n\t\tfor (let item of template.items) {\n\t\t\tif (item.commandDetail) {\n\t\t\t\titem.contextCommand = true;\n\t\t\t}\n\t\t\tif (item.submenu) {\n\t\t\t\tthis.createClickHandlers(item.submenu);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.97898631192043}, {"code": "createClickHandlers(template){\n\t\tif (template.items) {\n\t\tfor (var i = 0; i < template.items.length; i++) {\n\t\t\tvar item = template.items[i];\n\t\t\tif (item.command) {\n\t\t\t\titem.commandDetail = item.command;\n\t\t\t\titem.contextCommand = true;\n\t\t\t\titem.click = function(event) {\n\t\t\t\t\tatomApplication.sendCommand(this.commandDetail);\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (item.submenu) {\n\t\t\t\tthis.createClickHandlers(item.submenu);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.04993840060062}, {"code": "createClickHandlers(template){\n\t\ttemplate.forEach(item => {\n\t\tif (item.commandDetail) {\n\t\t\titem.contextCommand = true;\n\t\t}\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t});\n}", "CodeBleu_score": 36.558094109853066}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\t\tconst recoveryFile = this.get(path);\n\tif (recoveryFile) {\n\t\ttry {\n\t\t\tawait recoveryFile.release();\n\t\t} catch (error) {\n\t\t\tconsole.error(`Error releasing recovery file for ${path}: ${error}`);\n\t\t}\n\t\tthis.remove(path);\n\t\tthis.remove(window);\n\t\tthis.remove(recoveryFile);\n\t}\n}", "CodeBleu_score": 35.39468965434839}, {"code": "async didSavePath(window, path){\n\t// Get the recovery file associated with the path.\n    const recoveryFile = this.recoveryFilesByPath.get(path);\n// Attempt to release the recovery file.\n    try {\n        await recoveryFile.release();\n    } catch (error) {\n        console.error(error);\n    }\n// Remove the file from the maps.\n    this.recoveryFilesByPath.delete(path);\n    this.recoveryFilesByWindow.delete(window);\n    this.recoveryFilesByRecoveryFile.delete(recoveryFile);\n  }", "CodeBleu_score": 50.23917959794295}, {"code": "async didSavePath(window, path){\n\tconst recoveryFile = this.getRecoveryFile(path);\nif (recoveryFile) {\n    try {\n        await recoveryFile.release();\n    } catch (e) {\n        console.error(`Error releasing recovery file: ${e.message}`);\n    } finally {\n        this.removeRecoveryFile(path);\n        this.removeRecoveryFileByWindow(window);\n        this.removeRecoveryFileByRecoveryFile(recoveryFile);\n    }\n}\n}", "CodeBleu_score": 43.776925507710466}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\tfor (let i = 0; i < window.recoveryFiles.length; i++) {\n\t\tlet recoveryFile = window.recoveryFiles[i];\n\t\ttry {\n\t\t\tawait recoveryFile.recover();\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t\tdialog.showErrorBox(\n\t\t\t\t\"Error in recovery\",\n\t\t\t\t`The file ${recoveryFile.originalPath} has been corrupted and could not be recovered.\n\nDetails: ${error.message}\n\nRecovery file: ${recoveryFile.recoveryPath}`\n\t\t\t);\n\t\t}\n\t\tthis.removeRecoveryFile(recoveryFile);\n\t\trecoveryFile.remove();\n\t}\n}", "CodeBleu_score": 19.100330378557977}, {"code": "async didCrashWindow(window){\n\t", "CodeBleu_score": 2.7930095370516357}, {"code": "async didCrashWindow(window){\n\tconst { id } = window;\n\tconst windowRecoveryFile = this.windowRecoveryFiles.get(id);\n\tif (!windowRecoveryFile) {\n\t\treturn;\n\t}\n\tconst { recoveryPath, originalPath, fileMode } = windowRecoveryFile;\n\tconst recoveryFile = new RecoveryFile(recoveryPath, originalPath, fileMode);\n\ttry {\n\t\tawait recoveryFile.recover();\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\tawait showErrorDialog(\n\t\t\t`An error occurred while recovering the file: ${originalPath}.\nThe recovery file can be found at: ${recoveryPath}.\nPlease try to recover the file manually.`,\n\t\t\t`Error while recovering file: ${originalPath}`,\n\t\t\terror\n\t\t);\n\t}\n\tthis.windowRecoveryFiles.delete(id);\n\tthis.recoveryFiles.delete(recoveryPath);\n\tthis.originalFiles.delete(originalPath);\n\tthis.fileModeMap.delete(originalPath);\n\tawait recoveryFile.remove();\n}", "CodeBleu_score": 32.5839257578845}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t\ttry {\n\t\tawait fs.promises.mkdir(path.dirname(destination), { recursive: true });\n\t\tconst readStream = fs.createReadStream(source);\n\t\tconst writeStream = fs.createWriteStream(destination, { mode });\n\t\treturn new Promise((resolve, reject) => {\n\t\t\treadStream.on('error', reject);\n\t\t\twriteStream.on('error', reject);\n\t\t\twriteStream.on('close', resolve);\n\t\t\treadStream.pipe(writeStream);\n\t\t});\n\t} catch (err) {\n\t\tthrow err;\n\t}\n}", "CodeBleu_score": 49.841514100052905}, {"code": "async function copyFile(source, destination, mode){\n\t\treturn new Promise((resolve, reject) => {\n\t\tfs.mkdir(path.dirname(destination), { mode }, (err) => {\n\t\t\tif (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfs.copyFile(source, destination, { mode }, (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(err);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n}", "CodeBleu_score": 28.60689162442769}, {"code": "async function copyFile(source, destination, mode){\n\t\t// Check if the source file exists\n\tif (!fs.existsSync(source)) {\n\t\tthrow new Error(`Source file \"${source}\" does not exist`);\n\t}\n\n\t// Check if the destination directory exists\n\tconst destinationDirectory = path.dirname(destination);\n\tif (!fs.existsSync(destinationDirectory)) {\n\t\t// Create the destination directory if it doesn't exist\n\t\tawait fs.promises.mkdir(destinationDirectory, { recursive: true });\n\t}\n\n\t// Create a read stream from the source file\n\tconst readStream = fs.createReadStream(source);\n\n\t// Create a write stream to the destination file\n\tconst writeStream = fs.createWriteStream(destination, { mode });\n\n\t// Pipe the read stream to the write stream\n\treadStream.pipe(writeStream);\n\n\t// Return a Promise that resolves when the writing is complete\n\treturn new Promise((resolve, reject) => {\n\t\twriteStream.on('close', resolve);\n\t\twriteStream.on('error', reject);\n\t});\n}", "CodeBleu_score": 49.52624838329459}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform!== 'win32') {\n\t\treturn false;\n\t}\n\n\tconst SquirrelUpdate = require('squirrel-windows-update');\n\tconst squirrelCommand = process.argv[1];\n\n\tif (squirrelCommand === '--squirrel-install') {\n\t\tSquirrelUpdate.install(app.quit);\n\t} else if (squirrelCommand === '--squirrel-updated') {\n\t\tSquirrelUpdate.updated(app.quit);\n\t} else if (squirrelCommand === '--squirrel-obsolete') {\n\t\tSquirrelUpdate.obsolete(app.quit);\n\t} else {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 66.55866606052079}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform!== 'win32') {\n\t\treturn false;\n\t}\n\n\tconst SquirrelUpdate = require('squirrel-updates');\n\tconst squirrelCommand = process.argv[1];\n\n\tif (squirrelCommand === '--squirrel-install') {\n\t\treturn SquirrelUpdate.handleSquirrelEvent();\n\t}\n\n\treturn SquirrelUpdate.handleStartupEvent();\n}", "CodeBleu_score": 73.11250322031701}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform!== 'win32') {\n\t\treturn false;\n\t}\n\n\tconst squirrelCommand = require('electron-squirrel-startup');\n\tif (squirrelCommand) {\n\t\thandleStartupEvent(squirrelCommand);\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 53.97758223181843}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32') {\n\t\tif (filePath) {\n\t\t\treturn filePath.replace(/^[a-z]:/, function (match) {\n\t\t\t\treturn match.toUpperCase();\n\t\t\t});\n\t\t}\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 53.30847451794487}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32' && filePath) {\n\t\treturn filePath.replace(/^[a-z]:/, function (match) {\n\t\t\treturn match.toUpperCase();\n\t\t});\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 61.22472719246481}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32') {\n\t\tif (filePath) {\n\t\t\treturn filePath.replace(/^([a-z]):/, function (match, p1) {\n\t\t\t\treturn p1.toUpperCase();\n\t\t\t});\n\t\t}\n\t}\n\n\treturn filePath;\n}", "CodeBleu_score": 53.92284890066465}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\tt doneCount = this.parts.length;\nthis.parts.forEach(part => {\nlet reg = new Registry({\nhive: 'HKCU',\nkey: part.key!= null? `${this.key}\\\\${part.key}` : this.key\n});\nreturn reg.create(() =>\nreg.set(part.name, Registry.REG_SZ, part.value, () => {\nif (--doneCount === 0) return callback();\n})\n);\n});\n}", "CodeBleu_score": 76.73636105587316}, {"code": "register(callback){\n\tt doneCount = this.parts.length;\nthis.parts.forEach(part => {\nlet reg = new Registry({\nhive: 'HKCU',\nkey: part.key!= null? `${this.key}\\\\${part.key}` : this.key\n});\nreturn reg.create(() =>\nreg.set(part.name, Registry.REG_SZ, part.value, () => {\nif (--doneCount === 0) return callback();\n})\n);\n});\n}", "CodeBleu_score": 76.73636105587316}, {"code": "register(callback){\n\tt doneCount = this.parts.length;\nthis.parts.forEach(part => {\nlet reg = new Registry({\nhive: 'HKCU',\nkey: part.key!= null? `${this.key}\\\\${part.key}` : this.key\n});\nreturn reg.create(() =>\nreg.set(part.name, Registry.REG_SZ, part.value, () => {\nif (--doneCount === 0) return callback();\n})\n);\n});\n}", "CodeBleu_score": 76.73636105587316}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\t (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options ==='string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n}", "CodeBleu_score": 86.31865445491479}, {"code": "showSaveDialog(options, callback){\n\t (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options ==='string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 86.15018871355713}, {"code": "showSaveDialog(options, callback){\n\t (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options ==='string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 86.15018871355713}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\t.setWindowDimensions(this.getDefaultWindowDimensions());\n}", "CodeBleu_score": 10.44972751165215}, {"code": "async restoreWindowDimensions(){\n\t", "CodeBleu_score": 2.5925680697773066}, {"code": "async restoreWindowDimensions(){\n\t.setWindowDimensions(this.getDefaultWindowDimensions());\n}", "CodeBleu_score": 10.44972751165215}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t\tlocal installResult\n\tlocal installMessage\n\n\t# Install the Atom command interactively.\n\tinstallResult=$(installAtomCommandInteractively)\n\tif [ \"$installResult\"!= \"success\" ]; then\n\t\t# Installation failed.\n\t\tshowErrorDialog \"$installResult\"\n\t\treturn 1\n\tfi\n\n\t# Install the APM command.\n\tinstallResult=$(installAPMCommand)\n\tif [ \"$installResult\"!= \"success\" ]; then\n\t\t# Installation failed.\n\t\tshowErrorDialog \"$installResult\"\n\t\treturn 1\n\tfi\n\n\t# Show a confirmation dialog indicating the commands were installed.\n\tinstallMessage=\"The Atom and APM commands were installed successfully.\"\n\tshowConfirmationDialog \"$installMessage\"\n\n\treturn 0\n}", "CodeBleu_score": 19.698726192740427}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t(process.platform!== 'darwin') return callback();\n\nconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\nfs.readlink(destinationPath, (error, realpath) => {\n  if (error && error.code!== 'ENOENT') return callback(error);\n  if (realpath === commandPath) return callback(null, commandName);\n  this.createSymlink(fs, commandPath, destinationPath, error => {\n    if (error && error.code === 'EACCES' && askForPrivilege) {\n      const fsAdmin = require('fs-admin');\n      this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n        callback(error, commandName);\n      });\n    } else {\n      callback(error);\n    }\n  });\n});\n}", "CodeBleu_score": 93.81994537631297}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t(process.platform!== 'darwin') return callback();\n\nconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\nfs.readlink(destinationPath, (error, realpath) => {\n  if (error && error.code!== 'ENOENT') return callback(error);\n  if (realpath === commandPath) return callback(null, commandName);\n  this.createSymlink(fs, commandPath, destinationPath, error => {\n    if (error && error.code === 'EACCES' && askForPrivilege) {\n      const fsAdmin = require('fs-admin');\n      this.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n        callback(error, commandName);\n      });\n    } else {\n      callback(error);\n    }\n  });\n});\n}", "CodeBleu_score": 93.81994537631297}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t (process.platform!== 'darwin') return callback();\n\n\tconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n\tfs.readlink(destinationPath, (error, realpath) => {\n\t\tif (error && error.code!== 'ENOENT') return callback(error);\n\t\tif (realpath === commandPath) return callback(null, commandName);\n\t\tthis.createSymlink(fs, commandPath, destinationPath, error => {\n\t\t\tif (error && error.code === 'EACCES' && askForPrivilege) {\n\t\t\t\tconst fsAdmin = require('fs-admin');\n\t\t\t\tthis.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n\t\t\t\t\tcallback(error, commandName);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(error);\n\t\t\t}\n\t\t});\n\t});\n}", "CodeBleu_score": 91.3391972171113}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t", "CodeBleu_score": 2.5713054481529873}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t", "CodeBleu_score": 2.5713054481529873}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tt row, column;\nconst range = this.marker.getScreenRange();\nif (moveToEndOfSelection &&!range.isEmpty()) {\n({ row, column } = range.start);\n} else {\n({ row, column } = this.getScreenPosition());\n}\n\nif (this.goalColumn!= null) column = this.goalColumn;\nthis.setScreenPosition(\n{ row: row - rowCount, column },\n{ skipSoftWrapIndentation: true }\n);\nthis.goalColumn = column;\n}", "CodeBleu_score": 89.5960079114864}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\nfor (const layer of this.decorationCountsByLayer.keys()) {\nfor (const marker of layer.findMarkers({\nintersectsScreenRowRange: [startScreenRow, endScreenRow]\n})) {\nconst decorations = this.decorationsByMarker.get(marker);\nif (decorations) {\ndecorationsByMarkerId[marker.id] = Array.from(decorations);\n}\n}\n}\nreturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.68935133939671}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\nfor (const layer of this.decorationCountsByLayer.keys()) {\nfor (const marker of layer.findMarkers({\nintersectsScreenRowRange: [startScreenRow, endScreenRow]\n})) {\nconst decorations = this.decorationsByMarker.get(marker);\nif (decorations) {\ndecorationsByMarkerId[marker.id] = Array.from(decorations);\n}\n}\n}\nreturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.68935133939671}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\nfor (const layer of this.decorationCountsByLayer.keys()) {\nfor (const marker of layer.findMarkers({\nintersectsScreenRowRange: [startScreenRow, endScreenRow]\n})) {\nconst decorations = this.decorationsByMarker.get(marker);\nif (decorations) {\ndecorationsByMarkerId[marker.id] = Array.from(decorations);\n}\n}\n}\nreturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.68935133939671}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\nthrow new Error('Cannot decorate a destroyed marker layer');\n}\nmarkerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\nconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\nlet layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\nif (layerDecorations == null) {\nlayerDecorations = new Set();\nthis.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n}\nlayerDecorations.add(decoration);\nthis.observeDecoratedLayer(markerLayer, false);\nthis.emitDidUpdateDecorations();\nreturn decoration;\n}", "CodeBleu_score": 97.72423113370415}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\tif (markerLayer.isDestroyed()) {\n\t\tthrow new Error('Cannot decorate a destroyed marker layer');\n\t}\n\tmarkerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n\tconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\n\tlet layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n\tif (layerDecorations == null) {\n\t\tlayerDecorations = new Set();\n\t\tthis.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n\t}\n\tlayerDecorations.add(decoration);\n\tthis.observeDecoratedLayer(markerLayer, false);\n\tthis.emitDidUpdateDecorations();\n\treturn decoration;\n}", "CodeBleu_score": 97.75056672056172}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\tif (markerLayer.isDestroyed()) {\nthrow new Error('Cannot decorate a destroyed marker layer');\n}\nmarkerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\nconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\nlet layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\nif (layerDecorations == null) {\nlayerDecorations = new Set();\nthis.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n}\nlayerDecorations.add(decoration);\nthis.observeDecoratedLayer(markerLayer, false);\nthis.emitDidUpdateDecorations();\nreturn decoration;\n}", "CodeBleu_score": 97.72423113370415}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t/**\n * The function observeDecoratedLayer(layer, isMarkerDecoration) tracks the decoration counts for a given layer.\nIt increments the count of decorations for the layer and stores it in a map.\nIf this is the first decoration for the layer, it sets up an event listener for updates to the layer and stores the disposable in another map.\nIf the decoration is a marker decoration, it also increments and stores the count of marker decorations for the layer in a separate map.\n */\n    const newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n    this.decorationCountsByLayer.set(layer, newCount);\n    if (newCount === 1) {\n      this.layerUpdateDisposablesByLayer.set(\n        layer,\n        layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n      );\n    }\n    if (isMarkerDecoration) {\n      this.markerDecorationCountsByLayer.set(\n        layer,\n        (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n      );\n    }\n  }", "CodeBleu_score": 98.31937698265635}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t/**\n * The function observeDecoratedLayer(layer, isMarkerDecoration) tracks the decoration counts for a given layer.\nIt increments the count of decorations for the layer and stores it in a map.\nIf this is the first decoration for the layer, it sets up an event listener for updates to the layer and stores the disposable in another map.\nIf the decoration is a marker decoration, it also increments and stores the count of marker decorations for the layer in a separate map.\n */\n    const newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n    this.decorationCountsByLayer.set(layer, newCount);\n    if (newCount === 1) {\n      this.layerUpdateDisposablesByLayer.set(\n        layer,\n        layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n      );\n    }\n    if (isMarkerDecoration) {\n      this.markerDecorationCountsByLayer.set(\n        layer,\n        (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n      );\n    }\n  }", "CodeBleu_score": 98.31937698265635}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n\tthis.decorationCountsByLayer.set(layer, newCount);\n\tif (newCount === 1) {\n\t\tthis.layerUpdateDisposablesByLayer.set(\n\t\t\tlayer,\n\t\t\tlayer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n\t\t);\n\t}\n\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(\n\t\t\tlayer,\n\t\t\t(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n\t\t);\n\t}\n}", "CodeBleu_score": 95.80301962795797}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t", "CodeBleu_score": 2.8993430574334047}, {"code": "finishLoading(){\n\ts.measure('loadTime', () => {\n  this.path = path.join(this.packageManager.resourcePath, this.path);\n  ModuleCache.add(this.path, this.metadata);\n\n  this.loadStylesheets();\n  // Unfortunately some packages are accessing `@mainModulePath`, so we need\n  // to compute that variable eagerly also for preloaded packages.\n  this.getMainModulePath();\n});\n}", "CodeBleu_score": 66.62724061234813}, {"code": "finishLoading(){\n\ts.measure('loadTime', () => {\nthis.path = path.join(this.packageManager.resourcePath, this.path);\nModuleCache.add(this.path, this.metadata);\n\nthis.loadStylesheets();\n// Unfortunately some packages are accessing `@mainModulePath`, so we need\n// to compute that variable eagerly also for preloaded packages.\nthis.getMainModulePath();\n});\n}", "CodeBleu_score": 65.04355839970819}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t/ User preference deciding which action to take on a title bar double-click\nswitch (\n  this.applicationDelegate.getUserDefault(\n    'AppleActionOnDoubleClick',\n   'string'\n  )\n) {\n  case 'Minimize':\n    this.applicationDelegate.minimizeWindow();\n    break;\n  case 'Maximize':\n    if (this.applicationDelegate.isWindowMaximized()) {\n      this.applicationDelegate.unmaximizeWindow();\n    } else {\n      this.applicationDelegate.maximizeWindow();\n    }\n    break;\n}\n}", "CodeBleu_score": 68.30087597820899}, {"code": "dblclickHandler(){\n\t/ User preference deciding which action to take on a title bar double-click\nswitch (\n  this.applicationDelegate.getUserDefault(\n    'AppleActionOnDoubleClick',\n   'string'\n  )\n) {\n  case 'Minimize':\n    this.applicationDelegate.minimizeWindow();\n    break;\n  case 'Maximize':\n    if (this.applicationDelegate.isWindowMaximized()) {\n      this.applicationDelegate.unmaximizeWindow();\n    } else {\n      this.applicationDelegate.maximizeWindow();\n    }\n    break;\n}\n}", "CodeBleu_score": 68.30087597820899}, {"code": "dblclickHandler(){\n\t/ User preference deciding which action to take on a title bar double-click\nswitch (\n  this.applicationDelegate.getUserDefault(\n    'AppleActionOnDoubleClick',\n   'string'\n  )\n) {\n  case 'Minimize':\n    this.applicationDelegate.minimizeWindow();\n    break;\n  case 'Maximize':\n    if (this.applicationDelegate.isWindowMaximized()) {\n      this.applicationDelegate.unmaximizeWindow();\n    } else {\n      this.applicationDelegate.maximizeWindow();\n    }\n    break;\n}\n}", "CodeBleu_score": 68.30087597820899}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\nif (settingWins.length >= 1) {\n// A setting window is already created\nconst browserSettingWindow = settingWins[0].win.browserWindow\nbrowserSettingWindow.webContents.send('settings::change-tab', category)\nif (isLinux) {\nbrowserSettingWindow.focus()\n} else {\nbrowserSettingWindow.moveTop()\n}\nreturn\n}\nthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.15924676665757}, {"code": "_openSettingsWindow (category){\n\t\n}", "CodeBleu_score": 2.3393965650481676}, {"code": "_openSettingsWindow (category){\n\t\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\n\tif (settingWins.length >= 1) {\n\t\t// A setting window is already created\n\t\tconst browserSettingWindow = settingWins[0].win.browserWindow\n\t\tbrowserSettingWindow.webContents.send('settings::change-tab', category)\n\t\tif (isLinux) {\n\t\t\tbrowserSettingWindow.focus()\n\t\t} else {\n\t\t\tbrowserSettingWindow.moveTop()\n\t\t}\n\t\treturn\n\t}\n\tthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.25706267515326}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t!fileList ||!Array.isArray(fileList) ||!fileList.length) return []\nconst { windows } = this\nconst lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\nif (this.windowCount <= 1) {\n  return [{ windowId: lastActiveEditorId, fileList }]\n}\n\n// Array of scores, same order like fileList.\nlet filePathScores = null\nfor (const window of windows.values()) {\n  if (window.type === WindowType.EDITOR) {\n    const scores = window.getCandidateScores(fileList)\n    if (!filePathScores) {\n      filePathScores = scores\n    } else {\n      const len = filePathScores.length\n      for (let i = 0; i < len; ++i) {\n        // Update score only if the file is not already opened.\n        if (filePathScores[i].score!== -1 && filePathScores[i].score < scores[i].score) {\n          filePathScores[i] = scores[i]\n        }\n      }\n    }\n  }\n}\n\nconst buf = []\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\n  let { id: windowId, score } = filePathScores[i]\n\n  if (score === -1) {\n    // Skip files that already opened.\n    continue\n  } else if (score === 0) {\n    // There is no best window to open the file(s) in.\n    windowId = lastActiveEditorId\n  }\n\n  let item = buf.find(w => w.windowId === windowId)\n  if (!item) {\n    item = { windowId, fileList: [] }\n    buf.push(item)\n  }\n  item.fileList.push(fileList[i])\n}\nreturn buf\n}", "CodeBleu_score": 79.1877426199665}, {"code": "findBestWindowToOpenIn (fileList){\n\t!fileList ||!Array.isArray(fileList) ||!fileList.length) return []\nconst { windows } = this\nconst lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\nif (this.windowCount <= 1) {\n  return [{ windowId: lastActiveEditorId, fileList }]\n}\n\n// Array of scores, same order like fileList.\nlet filePathScores = null\nfor (const window of windows.values()) {\n  if (window.type === WindowType.EDITOR) {\n    const scores = window.getCandidateScores(fileList)\n    if (!filePathScores) {\n      filePathScores = scores\n    } else {\n      const len = filePathScores.length\n      for (let i = 0; i < len; ++i) {\n        // Update score only if the file is not already opened.\n        if (filePathScores[i].score!== -1 && filePathScores[i].score < scores[i].score) {\n          filePathScores[i] = scores[i]\n        }\n      }\n    }\n  }\n}\n\nconst buf = []\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\n  let { id: windowId, score } = filePathScores[i]\n\n  if (score === -1) {\n    // Skip files that already opened.\n    continue\n  } else if (score === 0) {\n    // There is no best window to open the file(s) in.\n    windowId = lastActiveEditorId\n  }\n\n  let item = buf.find(w => w.windowId === windowId)\n  if (!item) {\n    item = { windowId, fileList: [] }\n    buf.push(item)\n  }\n  item.fileList.push(fileList[i])\n}\nreturn buf\n}", "CodeBleu_score": 79.1877426199665}, {"code": "findBestWindowToOpenIn (fileList){\n\t!fileList ||!Array.isArray(fileList) ||!fileList.length) return []\nconst { windows } = this\nconst lastActiveEditorId = this.getActiveEditorId() // editor id or null\n\nif (this.windowCount <= 1) {\n  return [{ windowId: lastActiveEditorId, fileList }]\n}\n\n// Array of scores, same order like fileList.\nlet filePathScores = null\nfor (const window of windows.values()) {\n  if (window.type === WindowType.EDITOR) {\n    const scores = window.getCandidateScores(fileList)\n    if (!filePathScores) {\n      filePathScores = scores\n    } else {\n      const len = filePathScores.length\n      for (let i = 0; i < len; ++i) {\n        // Update score only if the file is not already opened.\n        if (filePathScores[i].score!== -1 && filePathScores[i].score < scores[i].score) {\n          filePathScores[i] = scores[i]\n        }\n      }\n    }\n  }\n}\n\nconst buf = []\nconst len = filePathScores.length\nfor (let i = 0; i < len; ++i) {\n  let { id: windowId, score } = filePathScores[i]\n\n  if (score === -1) {\n    // Skip files that already opened.\n    continue\n  } else if (score === 0) {\n    // There is no best window to open the file(s) in.\n    windowId = lastActiveEditorId\n  }\n\n  let item = buf.find(w => w.windowId === windowId)\n  if (!item) {\n    item = { windowId, fileList: [] }\n    buf.push(item)\n  }\n  item.fileList.push(fileList[i])\n}\nreturn buf\n}", "CodeBleu_score": 79.1877426199665}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8';\n\tlet isBom = false;\n\n\tfor (const bom of BOM_ENCODINGS) {\n\t\tif (buffer.slice(0, bom.length).equals(bom)) {\n\t\t\tencoding = bom.encoding;\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced(buffer);\n\t\tif (guessedEncoding!== encoding) {\n\t\t\tencoding = guessedEncoding;\n\t\t\tisBom = false;\n\t\t}\n\t}\n\n\tif (encoding.toLowerCase()!== 'utf8') {\n\t\tencoding = encoding.toLowerCase();\n\t}\n\n\treturn { encoding, isBom };\n}", "CodeBleu_score": 43.86572511174942}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8';\n\tlet isBom = false;\n\n\t// Check for BOM encodings\n\tfor (let i = 0; i < BOM_ENCODINGS.length; i++) {\n\t\tif (buffer.slice(0, BOM_ENCODINGS[i].length).equals(BOM_ENCODINGS[i])) {\n\t\t\tencoding = BOM_ENCODINGS[i].encoding;\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Guess encoding if autoGuessEncoding is enabled\n\tif (autoGuessEncoding) {\n\t\tencoding = ced(buffer);\n\n\t\t// Adjust encoding based on predefined map\n\t\tif (ENCODING_MAP[encoding]) {\n\t\t\tencoding = ENCODING_MAP[encoding];\n\t\t}\n\n\t\t// Format encoding to lowercase\n\t\tencoding = encoding.toLowerCase();\n\t}\n\n\treturn { encoding, isBom };\n}", "CodeBleu_score": 48.31914811406087}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8';\n\tlet isBom = false;\n\tfor (let i = 0; i < BOM_ENCODINGS.length; i++) {\n\t\tif (buffer.slice(0, BOM_ENCODINGS[i].length).equals(BOM_ENCODINGS[i])) {\n\t\t\tencoding = BOM_ENCODINGS[i].encoding;\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (autoGuessEncoding) {\n\t\tlet encodingGuess = ced(buffer);\n\t\tif (encodingGuess) {\n\t\t\tif (ENCODING_MAP[encodingGuess]) {\n\t\t\t\tencoding = ENCODING_MAP[encodingGuess];\n\t\t\t} else {\n\t\t\t\tencoding = encodingGuess.toLowerCase();\n\t\t\t}\n\t\t}\n\t}\n\treturn { encoding, isBom };\n}", "CodeBleu_score": 45.67492932898675}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\toptions = options || {};\n\toptions.lineEnding = options.lineEnding || 'auto';\n\toptions.encoding = options.encoding || 'utf8';\n\toptions.bom = options.bom || false;\n\toptions.extension = options.extension || '.md';\n\toptions.pathname = pathname;\n\toptions.content = content;\n\toptions.buffer = new Buffer(content, options.encoding);\n\toptions.buffer = convertLineEndings(options.buffer, options.lineEnding);\n\tif (options.bom) {\n\t\toptions.buffer = new Buffer(Buffer.concat([new Buffer([0xEF, 0xBB, 0xBF]), options.buffer]), options.encoding);\n\t}\n\tfs.writeFileSync(pathname, options.buffer);\n}", "CodeBleu_score": 25.851126230406507}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\toptions = options || {};\n\tconst encoding = options.encoding || 'utf8';\n\tconst lineEnding = options.lineEnding || 'auto';\n\tconst bom = options.bom || false;\n\tconst ext = path.extname(pathname) || '.md';\n\tconst newPathname = pathname.replace(ext, '.md');\n\tconst newContent = content.replace(/\\r\n/g, '\n');\n\tconst buffer = Buffer.from(newContent, encoding);\n\tif (lineEnding === 'auto') {\n\t\tif (newContent.includes('\\r\n')) {\n\t\t\toptions.lineEnding = '\\r\n';\n\t\t} else {\n\t\t\toptions.lineEnding = '\n';\n\t\t}\n\t}\n\tif (bom) {\n\t\tbuffer.writeUInt8(0xEF, 0);\n\t\tbuffer.writeUInt8(0xBB, 1);\n\t\tbuffer.writeUInt8(0xBF, 2);\n\t}\n\tfs.writeFileSync(newPathname, buffer, options);\n}", "CodeBleu_score": 30.013731112170085}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\toptions = options || {};\n\n\tlet lineEnding = options.lineEnding || 'auto';\n\tlet encoding = options.encoding || 'utf8';\n\tlet bom = options.bom || false;\n\n\tlet buffer = new Buffer(content, encoding);\n\n\tif (lineEnding === 'auto') {\n\t\tlineEnding = detectLineEnding(buffer);\n\t}\n\n\tif (lineEnding!== 'auto') {\n\t\tbuffer = convertLineEnding(buffer, lineEnding);\n\t}\n\n\tif (bom) {\n\t\tbuffer = addBOM(buffer);\n\t}\n\n\tfs.writeFileSync(pathname, buffer);\n}", "CodeBleu_score": 31.78079940498211}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.handle(\n\t\t'get-keyboard-info',\n\t\tasync (): Promise<KeyboardInfo> => {\n\t\t\treturn await getKeyboardInfo();\n\t\t}\n\t);\n\n\tipcMain.handle(\n\t\t'dump-keyboard-info',\n\t\tasync (event: Event, filePath: string): Promise<boolean> => {\n\t\t\tconst keyboardInfo = await getKeyboardInfo();\n\t\t\tconst keyboardInfoJSON = JSON.stringify(keyboardInfo);\n\t\t\tconst file = await writeFile(filePath, keyboardInfoJSON);\n\n\t\t\tif (file) {\n\t\t\t\tshell.openPath(filePath);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t);\n}", "CodeBleu_score": 34.200028776833015}, {"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.handle(ipcEvents.GET_KEYBOARD_INFO, async () => {\n\t\tconst keyboardInfo = await getKeyboardInfo();\n\t\treturn keyboardInfo;\n\t});\n\n\tipcMain.handle(ipcEvents.DUMP_KEYBOARD_INFO, async () => {\n\t\tconst keyboardInfo = await getKeyboardInfo();\n\t\tconst tempFile = await writeKeyboardInfo(keyboardInfo);\n\t\tconst result = await openFile(tempFile);\n\t\treturn result;\n\t});\n}", "CodeBleu_score": 24.176991846749406}, {"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.handle(IPC_GET_KEYBOARD_INFO, () => {\n\t\treturn Keyboard.getKeyboardInfo();\n\t});\n\n\tipcMain.handle(IPC_DUMP_KEYBOARD_INFO, async (event, args) => {\n\t\tconst { path } = args;\n\t\tconst json = Keyboard.getKeyboardInfo();\n\n\t\ttry {\n\t\t\tawait writeFile(path, JSON.stringify(json, null, 2));\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t});\n\n\tipcMain.handle(IPC_OPEN_KEYBOARD_INFO, async (event, args) => {\n\t\tconst { path } = args;\n\n\t\ttry {\n\t\t\tawait open(path);\n\t\t} catch (error) {\n\t\t\tconsole.log(error);\n\t\t}\n\t});\n}", "CodeBleu_score": 31.532573869546233}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\nif (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\nconsole.log('[DEBUG] Keyboard layout changed:\n', layout)\n}\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 86.44524569209217}, {"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\nif (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\nconsole.log('[DEBUG] Keyboard layout changed:\n', layout)\n}\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 86.44524569209217}, {"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\nif (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\nconsole.log('[DEBUG] Keyboard layout changed:\n', layout)\n}\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 86.44524569209217}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t/ Remove aria2c unrecognized options\nconst { others } = separateConfig(this.systemConfig.store)\nif (others && Object.keys(others).length > 0) {\n  Object.keys(others).forEach(key => {\n    this.systemConfig.delete(key)\n  })\n}\n\nconst proxy = this.getUserConfig('proxy', { enable: false })\nconst { enable, server, bypass, scope = [] } = proxy\nif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n  this.setSystemConfig('all-proxy', server)\n  this.setSystemConfig('no-proxy', bypass)\n}\n\n// Fix spawn ENAMETOOLONG on Windows\nconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\nthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 96.67863977450804}, {"code": "fixSystemConfig (){\n\t/ Remove aria2c unrecognized options\nconst { others } = separateConfig(this.systemConfig.store)\nif (others && Object.keys(others).length > 0) {\n  Object.keys(others).forEach(key => {\n    this.systemConfig.delete(key)\n  })\n}\n\nconst proxy = this.getUserConfig('proxy', { enable: false })\nconst { enable, server, bypass, scope = [] } = proxy\nif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n  this.setSystemConfig('all-proxy', server)\n  this.setSystemConfig('no-proxy', bypass)\n}\n\n// Fix spawn ENAMETOOLONG on Windows\nconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\nthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 96.67863977450804}, {"code": "fixSystemConfig (){\n\t/ Remove aria2c unrecognized options\nconst { others } = separateConfig(this.systemConfig.store)\nif (others && Object.keys(others).length > 0) {\nObject.keys(others).forEach(key => {\nthis.systemConfig.delete(key)\n})\n}\n\nconst proxy = this.getUserConfig('proxy', { enable: false })\nconst { enable, server, bypass, scope = [] } = proxy\nif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\nthis.setSystemConfig('all-proxy', server)\nthis.setSystemConfig('no-proxy', bypass)\n}\n\n// Fix spawn ENAMETOOLONG on Windows\nconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\nthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 96.22720534670547}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\t\n/**\n * The function closeClient() checks if a client exists and attempts to close it.\n */\nif (!client) {\n\n/**\n * The function closeClient() checks if a client exists and attempts to close it.\n */\nreturn\n\n}\n\n/**\n * The function closeClient() checks if a client exists and attempts to close it.\n */\ntry {\n\n/**\n * The function closeClient() checks if a client exists and attempts to close it.\n */\nclient.destroy(() => {\n\n/**\n * The function closeClient() checks if a client exists and attempts to close it.\n */\nclient = null\n\n})\n\n/**\n * The function closeClient() checks if a client exists and attempts to close it.\n */\n} catch (err) {\n\n/**\n * The function closeClient() checks if a client exists and attempts to close it.\n */\nlogger.warn('[Motrix] close UPnP client fail', err)\n\n}\n\n}", "CodeBleu_score": 92.74000194146402}, {"code": "closeClient (){\n\t", "CodeBleu_score": 1.8416050325262772}, {"code": "closeClient (){\n\tif (!client) {\nreturn\n}\n\ntry {\nclient.destroy(() => {\nclient = null\n})\n} catch (err) {\nlogger.warn('[Motrix] close UPnP client fail', err)\n}\n}", "CodeBleu_score": 92.76670811853336}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\t", "CodeBleu_score": 1.3214943682368832}, {"code": "getTouchBarByPage (page){\n\t", "CodeBleu_score": 1.3214943682368832}, {"code": "getTouchBarByPage (page){\n\tet bar = this.bars[page] || null\n\tif (!bar) {\n\t\ttry {\n\t\t\tconst items = this.build(this.template)\n\t\t\tbar = new TouchBar({ items })\n\t\t\tthis.bars[page] = bar\n\t\t} catch (e) {\n\t\t\tlogger.info('getTouchBarByPage fail', e)\n\t\t}\n\t}\n\treturn bar\n}", "CodeBleu_score": 73.56341715006238}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\tindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide &&!this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 92.51806400869373}, {"code": "handleWindowClose (pageOptions, page, window){\n\tindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide &&!this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 92.51806400869373}, {"code": "handleWindowClose (pageOptions, page, window){\n\tindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide &&!this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 92.51806400869373}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = path.join(process.env.HOME, 'Applications', path.basename(process.execPath));\n\t\tconst appDir = path.dirname(process.execPath);\n\t\tconst appFile = path.basename(process.execPath);\n\n\t\tif (fs.existsSync(appPath)) {\n\t\t\treject(errorMsg + 'Application already exists in Applications folder.');\n\t\t\treturn;\n\t\t}\n\n\t\tfs.rename(appDir, appPath, (err) => {\n\t\t\tif (err) {\n\t\t\t\treject(errorMsg + err.message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfs.chmod(appPath, 0o755, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(errorMsg + err.message);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfs.rename(path.join(appPath, appFile), path.join(appPath, 'Electron'), (err) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treject(errorMsg + err.message);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 34.58984913511024}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = getAppPath();\n\t\tconst appFolder = getAppFolder();\n\t\tconst appFile = getAppFile();\n\t\tconst appPathToAppFile = path.join(appPath, appFile);\n\t\tconst appPathToAppFolder = path.join(appPath, appFolder);\n\n\t\ttry {\n\t\t\tif (fs.existsSync(appPathToAppFile)) {\n\t\t\t\t// move the application to the Applications folder\n\t\t\t\tfs.renameSync(appPathToAppFile, appPathToAppFolder);\n\t\t\t\tresolve();\n\t\t\t} else {\n\t\t\t\t// the application does not exist\n\t\t\t\treject(errorMsg);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// an error occurred during the process\n\t\t\treject(err);\n\t\t}\n\t});\n}", "CodeBleu_score": 42.18111269054554}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = path.join(app.getPath('appData'), 'Electron');\n\t\tconst appPathNew = path.join(app.getPath('appData'), 'Electron', 'Applications');\n\t\tconst appPathOld = path.join(app.getPath('appData'), 'Electron', 'app');\n\n\t\tif (fs.existsSync(appPathNew)) {\n\t\t\t// If the Applications folder already exists, just resolve the Promise\n\t\t\tresolve();\n\t\t} else {\n\t\t\t// If the Applications folder does not exist, try to move the app to it\n\t\t\tfs.rename(appPathOld, appPathNew, (err) => {\n\t\t\t\tif (err) {\n\t\t\t\t\t// If the move fails, reject the Promise with the error message\n\t\t\t\t\treject(errorMsg);\n\t\t\t\t} else {\n\t\t\t\t\t// If the move is successful, resolve the Promise\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 39.42543203082376}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t", "CodeBleu_score": 4.689580994804317}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\tog.debug('Copying icons if necessary');\n\nif (!options.icon) {\nlog.debug('No icon specified, skipping icon copying');\nreturn;\n}\n\nconst platform = process.platform;\n\nif (platform === 'darwin' || platform ==='mas') {\nif (options.tray!== 'false') {\nconst trayIconPath = path.join(\nappPath,\n'Contents',\n'Resources',\n'app.icns',\n);\n\nlog.debug(`Copying tray icon to ${trayIconPath}`);\nawait fs.copy(options.icon, trayIconPath);\n}\n} else if (platform === 'win32') {\nconst iconPath = path.join(\nappPath,\n'app.ico',\n);\n\nlog.debug(`Copying icon to ${iconPath}`);\nawait fs.copy(options.icon, iconPath);\n} else if (platform === 'linux') {\nconst iconPath = path.join(\nappPath,\n'app.png',\n);\n\nlog.debug(`Copying icon to ${iconPath}`);\nawait fs.copy(options.icon, iconPath);\n}\n}", "CodeBleu_score": 40.62578386793535}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t", "CodeBleu_score": 4.689580994804317}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\t\tconst hash = md5(url);\n\tconst hashString = hash.substring(0, 6);\n\tconst normalizedAppName = appName\n\t\t.toLowerCase()\n\t\t.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, \"\")\n\t\t.replace(/\\s/g, \"-\")\n\t\t.replace(/_/g, \"-\");\n\n\treturn `${normalizedAppName}-nativefier-${hashString}`;\n}", "CodeBleu_score": 53.13519570564323}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t\tconst hash = md5(url);\n\tconst hashSubstring = hash.slice(0, 6);\n\tconst normalizedAppName = appName\n\t\t.toLowerCase()\n\t\t.replace(/[^\\w\\s-]/g, '')\n\t\t.replace(/[\\s_-]+/g, '-')\n\t\t.replace(/^-+|-+$/g, '');\n\treturn `${normalizedAppName}-nativefier-${hashSubstring}`;\n}", "CodeBleu_score": 54.4507742310713}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t\tconst hash = crypto.createHash('md5').update(url).digest('hex');\n\tconst hashSubString = hash.substring(0, 6);\n\tconst normalizedAppName = appName\n\t\t.toLowerCase()\n\t\t.replace(/[^a-z0-9]/g, '')\n\t\t.replace(/_/g, '-')\n\t\t.replace(/ /g, '-');\n\treturn `${normalizedAppName}-nativefier-${hashSubString}`;\n}", "CodeBleu_score": 59.67926570693114}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t\t// Log the copy operation\n\tconsole.log(`Copying ${src} to ${dest}...`);\n\n\t// Attempt to copy the app\n\ttry {\n\t\tawait copyDir(src, dest);\n\t} catch (e) {\n\t\t// Log any errors that occur\n\t\tconsole.error(`Error copying app: ${e.message}`);\n\t\treturn;\n\t}\n\n\t// Write the app configuration to a JSON file at the destination\n\ttry {\n\t\tawait writeJsonFile(path.join(dest, 'app.json'), {\n\t\t\tname: options.name,\n\t\t\tversion: options.version,\n\t\t\tmain: options.main,\n\t\t\tscripts: options.scripts,\n\t\t\telectronVersion: options.electronVersion,\n\t\t\tbuildOptions: options.buildOptions,\n\t\t\tappPath: options.appPath,\n\t\t});\n\t} catch (e) {\n\t\t// Log any errors that occur\n\t\tconsole.error(`Error writing app configuration: ${e.message}`);\n\t\treturn;\n\t}\n\n\t// Copy the bookmarks menu if specified in the options\n\tif (options.bookmarks) {\n\t\ttry {\n\t\t\tawait copyDir(options.bookmarks, path.join(dest, 'app'));\n\t\t} catch (e) {\n\t\t\t// Log any errors that occur\n\t\t\tconsole.error(`Error copying bookmarks: ${e.message}`);\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Try to copy injection scripts and log errors if they occur\n\tif (options.injectionScripts) {\n\t\ttry {\n\t\t\tawait copyDir(options.injectionScripts, path.join(dest, 'app'));\n\t\t} catch (e) {\n\t\t\tconsole.error(`Error copying injection scripts: ${e.message}`);\n\t\t}\n\t}\n\n\t// Change the app's package JSON name and set the app bundle ID using the normalized app name\n\ttry {\n\t\tawait changeAppPackageJsonName(dest, options.name);\n\t\tawait setAppBundleId(dest, options.name);\n\t} catch (e) {\n\t\t// Log any errors that occur\n\t\tconsole.error(`Error setting app bundle ID: ${e.message}`);\n\t\treturn;\n\t}\n}", "CodeBleu_score": 33.44266174368702}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t", "CodeBleu_score": 6.555677126020833}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t", "CodeBleu_score": 6.555677126020833}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconsole.log(`Downloading file from ${fileUrl}`);\n\t\tfetch(fileUrl, { method: 'GET' })\n\t\t\t.then(response => {\n\t\t\t\tif (response.status === 200) {\n\t\t\t\t\treturn response.arrayBuffer();\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(`Download failed with status ${response.status}`);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(buffer => {\n\t\t\t\tconst data = new Uint8Array(buffer);\n\t\t\t\tconst extension = getExtension(fileUrl);\n\t\t\t\treturn { data, extension };\n\t\t\t})\n\t\t\t.then(resolve)\n\t\t\t.catch(reject);\n\t});\n}", "CodeBleu_score": 47.45143384077153}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst logger = new Logger(\n\t\t\t'Download file',\n\t\t\t`Downloading file ${fileUrl}`,\n\t\t);\n\t\tlogger.log();\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.open('GET', fileUrl, true);\n\t\trequest.responseType = 'arraybuffer';\n\t\trequest.onload = () => {\n\t\t\tconst data = request.response;\n\t\t\tconst extension = getExtension(fileUrl);\n\t\t\tif (data) {\n\t\t\t\tresolve({\n\t\t\t\t\tdata,\n\t\t\t\t\textension,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tresolve(undefined);\n\t\t\t}\n\t\t};\n\t\trequest.onerror = () => {\n\t\t\tlogger.logError();\n\t\t\treject();\n\t\t};\n\t\trequest.send();\n\t});\n}", "CodeBleu_score": 41.926959716151494}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst fileExtension = getFileExtension(fileUrl);\n\t\tconst fileName = getFileName(fileUrl);\n\t\tconst downloadAttempt = `Downloading ${fileName}...`;\n\t\tconsole.log(downloadAttempt);\n\t\tconst xhr = new XMLHttpRequest();\n\t\txhr.open(\"GET\", fileUrl);\n\t\txhr.responseType = \"arraybuffer\";\n\t\txhr.onload = () => {\n\t\t\tif (xhr.status === 200) {\n\t\t\t\tconst data = new Uint8Array(xhr.response);\n\t\t\t\tresolve({ data, fileExtension });\n\t\t\t} else {\n\t\t\t\tresolve(undefined);\n\t\t\t}\n\t\t};\n\t\txhr.onerror = () => {\n\t\t\tconsole.log(\"An error occurred while downloading the file.\");\n\t\t\treject(new Error(\"An error occurred while downloading the file.\"));\n\t\t};\n\t\txhr.send();\n\t});\n}", "CodeBleu_score": 41.376466455654615}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t\tconst words = str.split('-').filter(word => word.length > 0);\n\tconst camelCased = words.map(word => word[0].toUpperCase() + word.substring(1)).join('');\n\treturn camelCased;\n}", "CodeBleu_score": 42.849116663246875}, {"code": "export function camelCased(str: string): string{\n\t\treturn str.split('-').filter(Boolean).map(word => word[0].toUpperCase() + word.substring(1)).join('');\n}", "CodeBleu_score": 18.882962086752208}, {"code": "export function camelCased(str: string): string{\n\t\treturn str\n\t\t.split('-')\n\t\t.filter(Boolean)\n\t\t.map((word, i) => (i > 0? word[0].toUpperCase() : word) + word.substring(1))\n\t\t.join('');\n}", "CodeBleu_score": 53.38101446641046}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tif (platform === 'linux' || platform === 'darwin') {\n\t\tconst sanitizedFilename = filenameToSanitize.replace(/[^a-zA-Z0-9._-]/g, '-');\n\t\tif (sanitizedFilename.length === 0) {\n\t\t\tconsole.warn(\n\t\t\t\t`The given filename ${filenameToSanitize} is invalid. Using the default application name instead.`,\n\t\t\t);\n\t\t\treturn 'app';\n\t\t}\n\t\treturn sanitizedFilename;\n\t}\n\treturn filenameToSanitize;\n}", "CodeBleu_score": 39.737653089055904}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tconst sanitizedFilename = filenameToSanitize.replace(/[<>:\"/\\\\|?*]/g, '_');\n\tif (platform === 'linux') {\n\t\tconst sanitizedFilenameWithoutSpaces = sanitizedFilename.replace(/\\s/g, '_');\n\t\tconst sanitizedFilenameWithoutUnicode = sanitizedFilenameWithoutSpaces.replace(\n\t\t\t/[\\u0000-\\u001F\\u007F-\\u009F]/g,\n\t\t\t'_',\n\t\t);\n\t\tif (sanitizedFilenameWithoutUnicode.length === 0) {\n\t\t\tconsole.warn(\n\t\t\t\t`The sanitized filename is empty. Using default application name.`,\n\t\t\t);\n\t\t\treturn DEFAULT_APPLICATION_NAME;\n\t\t}\n\t\treturn sanitizedFilenameWithoutUnicode;\n\t}\n\treturn sanitizedFilename;\n}", "CodeBleu_score": 38.69728913569316}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\t// Sanitize the filename\n\tconst sanitizedFilename = sanitize(filenameToSanitize);\n\n\t// Remove spaces and certain Unicode characters if the platform is Linux\n\tif (platform === 'linux') {\n\t\tconst regex = /[\\\\\\/\\:\\*\\?\\\"\\<\\>\\|]/g;\n\t\tsanitizedFilename.replace(regex, '');\n\t}\n\n\t// If the sanitized filename is empty, assign a default application name and log a warning\n\tif (sanitizedFilename.length === 0) {\n\t\tconsole.warn('The sanitized filename is empty. Assigning a default application name.');\n\t\tsanitizedFilename = 'Application';\n\t}\n\n\t// Log the sanitized filename\n\tconsole.log('Sanitized filename:', sanitizedFilename);\n\n\t// Return the sanitized filename\n\treturn sanitizedFilename;\n}", "CodeBleu_score": 46.729956026654804}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tconst duration: number = typeof savedCache.duration ==='string'? parseInt(savedCache.duration) : savedCache.duration;\n\tconst expirationTime: number = savedCache.time + duration;\n\treturn expirationTime < new Date().getTime();\n}", "CodeBleu_score": 38.434898065129325}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tlet cacheTime = parseInt(savedCache.cacheTime);\n\tlet duration = parseInt(savedCache.duration);\n\tlet currentTime = new Date().getTime();\n\tlet cacheDuration = cacheTime + duration;\n\tif (cacheDuration < currentTime) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 31.16421710614674}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tlet cacheTime: number = parseInt(savedCache.cacheTime);\n\tlet duration: number = parseInt(savedCache.duration);\n\tlet isExpired: boolean = false;\n\tif (cacheTime + duration < new Date().getTime()) {\n\t\tisExpired = true;\n\t}\n\treturn isExpired;\n}", "CodeBleu_score": 35.27907378965842}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (typeof timestampOptionArgument === 'number') {\n\t\tif (timestampOptionArgument < 0) {\n\t\t\tthrow new TypeORMError(`Invalid timestamp option argument: ${timestampOptionArgument}`);\n\t\t}\n\t\treturn timestampOptionArgument;\n\t}\n\tif (typeof timestampOptionArgument ==='string') {\n\t\tif (timestampOptionArgument.length === 0) {\n\t\t\treturn new Date().getTime();\n\t\t}\n\t\treturn new Date(timestampOptionArgument).getTime();\n\t}\n\treturn new Date().getTime();\n}", "CodeBleu_score": 48.80135580785997}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (typeof timestampOptionArgument === 'number' && timestampOptionArgument >= 0) {\n\t\treturn timestampOptionArgument;\n\t}\n\n\tif (typeof timestampOptionArgument === 'number' && timestampOptionArgument < 0) {\n\t\tthrow new TypeORMError('Timestamp argument must be a positive number or undefined.');\n\t}\n\n\tif (typeof timestampOptionArgument === 'undefined') {\n\t\treturn Date.now();\n\t}\n\n\tif (typeof timestampOptionArgument ==='string') {\n\t\tconst timestamp = Number(timestampOptionArgument);\n\n\t\tif (isNaN(timestamp)) {\n\t\t\tthrow new TypeORMError('Timestamp argument must be a number or undefined.');\n\t\t}\n\n\t\treturn timestamp;\n\t}\n\n\tif (typeof timestampOptionArgument === 'object') {\n\t\tif (timestampOptionArgument instanceof Date) {\n\t\t\treturn timestampOptionArgument.getTime();\n\t\t}\n\n\t\tthrow new TypeORMError('Timestamp argument must be a number, Date or undefined.');\n\t}\n\n\tthrow new TypeORMError('Timestamp argument must be a number, Date or undefined.');\n}", "CodeBleu_score": 44.05760712913944}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (typeof timestampOptionArgument === 'number' && timestampOptionArgument >= 0) {\n\t\treturn timestampOptionArgument;\n\t} else if (typeof timestampOptionArgument ==='string') {\n\t\tconst timestamp = Number(timestampOptionArgument);\n\t\tif (timestamp >= 0) {\n\t\t\treturn timestamp;\n\t\t}\n\t} else if (timestampOptionArgument instanceof Date) {\n\t\treturn timestampOptionArgument.getTime();\n\t} else if (timestampOptionArgument === undefined) {\n\t\treturn Date.now();\n\t} else {\n\t\tthrow new TypeORMError(\n\t\t\t`Invalid timestamp option argument: ${timestampOptionArgument}. Argument must be a number or a string representing a valid number.`,\n\t\t);\n\t}\n}", "CodeBleu_score": 45.42618397145346}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\tconst queryRunner = this.createQueryRunner();\nconst driver = this.driver;\nconst database = this.options.database;\nconst entities = this.entities;\n\nif (database) {\nawait queryRunner.dropDatabase(database);\n} else if (driver.options.type === 'postgres' && entities.length) {\nconst databases = await queryRunner.query(`SELECT datname FROM pg_database WHERE datistemplate = false`);\nconst databasesNames = databases.map(m => m.datname);\n\nfor (const name of databasesNames) {\nawait queryRunner.dropDatabase(name);\n}\n} else {\nawait queryRunner.dropDatabase();\n}\n\nawait queryRunner.release();\n}", "CodeBleu_score": 35.33094395649678}, {"code": " async dropDatabase(): Promise<void>{\n\t\nconst queryRunner = this.createQueryRunner();\nconst databaseType = this.connection.driver.type;\n\nif (databaseType === \"postgres\") {\nconst databaseNames = await this.connection.driver.getDatabaseNames();\nif (databaseNames.length > 1) {\nfor (const databaseName of databaseNames) {\nawait queryRunner.query(`DROP DATABASE \"${databaseName}\"`);\n}\n} else {\nawait queryRunner.query(`DROP DATABASE \"${this.connection.database}\"`);\n}\n} else {\nawait queryRunner.query(`DROP DATABASE \"${this.connection.database}\"`);\n}\n\nawait queryRunner.release();\n}", "CodeBleu_score": 33.23513959272435}, {"code": " async dropDatabase(): Promise<void>{\n\tconst queryRunner = this.connection.createQueryRunner();\nconst driver = this.connection.driver;\n\nif (driver.options.type === \"mysql\") {\nconst databaseNames = await queryRunner.query(\n\"SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME NOT IN ('information_schema','mysql', 'performance_schema')\"\n);\n\nif (databaseNames.length > 1) {\nfor (const databaseName of databaseNames) {\nawait queryRunner.query(`DROP DATABASE ${databaseName}`);\n}\n} else {\nawait queryRunner.query(`DROP DATABASE ${driver.options.database}`);\n}\n} else {\nawait queryRunner.query(`DROP DATABASE ${driver.options.database}`);\n}\n\nawait queryRunner.release();\n}", "CodeBleu_score": 31.109023564020205}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t\n}", "CodeBleu_score": 5.777452253928204}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t\n}", "CodeBleu_score": 5.777452253928204}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t\n}", "CodeBleu_score": 5.777452253928204}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\treturn (\n\t\t<div className=\"compression-input\">\n\t\t\t<div className=\"compression-input__label\">\n\t\t\t\t<label htmlFor=\"compression-input\">Compression</label>\n\t\t\t</div>\n\t\t\t<div className=\"compression-input__slider\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tid=\"compression-input\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"100\"\n\t\t\t\t\tvalue={compression}\n\t\t\t\t\tonChange={handleCompressionChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div className=\"compression-input__value\">\n\t\t\t\t<span>{compression}</span>\n\t\t\t</div>\n\t\t\t{compression > 0 && (\n\t\t\t\t<div className=\"compression-input__note\">\n\t\t\t\t\t<p>\n\t\t\t\t\t\tNote: PNG, JPG, and WebP compression is lossy. The higher the compression, the less\n\t\t\t\t\t\tquality the image will have.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t)}\n\t\t</div>\n\t);\n}", "CodeBleu_score": 52.80540484547935}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\tconst { t } = useTranslation();\n\tconst {\n\t\tformatMessage,\n\t\tformatHTMLMessage,\n\t} = useIntl();\n\n\tconst [isWebpEnabled, setIsWebpEnabled] = useState(false);\n\n\tuseEffect(() => {\n\t\tsetIsWebpEnabled(\n\t\t\tisWebpEnabled ||\n\t\t\t(typeof window!== 'undefined' && window.navigator.userAgent.includes('Safari'))\n\t\t);\n\t}, []);\n\n\tconst handleCompressionChangeWrapper = (e: React.ChangeEvent<HTMLInputElement>) => {\n\t\tconst value = parseInt(e.target.value, 10);\n\n\t\thandleCompressionChange(value);\n\t};\n\n\tconst renderWebpNote = () => {\n\t\tif (!isWebpEnabled) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"note\">\n\t\t\t\t{formatHTMLMessage({\n\t\t\t\t\tid: 'image-editor.compression-input.webp-note',\n\t\t\t\t\tdefaultMessage: 'WebP is lossy, and the compression percentage is only approximate.',\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t};\n\n\treturn (\n\t\t<div className=\"compression-input\">\n\t\t\t<div className=\"compression-input__label\">\n\t\t\t\t{formatMessage({\n\t\t\t\t\tid: 'image-editor.compression-input.label',\n\t\t\t\t\tdefaultMessage: 'Compression',\n\t\t\t\t})}\n\t\t\t</div>\n\t\t\t<div className=\"compression-input__slider\">\n\t\t\t\t<input\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"100\"\n\t\t\t\t\tstep=\"1\"\n\t\t\t\t\tvalue={compression}\n\t\t\t\t\tonChange={handleCompressionChangeWrapper}\n\t\t\t\t\tclassName=\"compression-input__slider-input\"\n\t\t\t\t/>\n\t\t\t\t<div className=\"compression-input__slider-value\">\n\t\t\t\t\t{compression}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{renderWebpNote()}\n\t\t</div>\n\t);\n}", "CodeBleu_score": 24.664984963975066}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\n/**\n * The handleCompressionChange function is called when the slider value changes.\n */\n  function handleCompressionChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const value = event.target.value;\n    handleCompressionChange(value);\n  }\n\n  return (\n    <div className={styles.inputContainer}>\n      <div className={styles.inputLabel}>\n        <div className={styles.labelText}>\n          Compression\n        </div>\n        <div className={styles.labelText}>\n          {compression}%\n        </div>\n      </div>\n      <div className={styles.inputSliderContainer}>\n        <input\n          className={styles.inputSlider}\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          step=\"1\"\n          value={compression}\n          onChange={handleCompressionChange}\n        />\n      </div>\n      {compression > 0 && (\n        <div className={styles.compressionNote}>\n          Note: PNG, JPG, and WebP compression is lossy.\n        </div>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 38.81973610970185}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\nconst key = `${type}-${name}`;\n\nfor (const idx in this.attributeIndex) {\n    if (idx.startsWith(key)) {\n        resArr.push(this.attributeIndex[idx]);\n    }\n}\n\nreturn resArr.flat();\n}", "CodeBleu_score": 95.49651034850106}, {"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\nconst key = `${type}-${name}`;\n\nfor (const idx in this.attributeIndex) {\n    if (idx.startsWith(key)) {\n        resArr.push(this.attributeIndex[idx]);\n    }\n}\n\nreturn resArr.flat();\n}", "CodeBleu_score": 95.49651034850106}, {"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\nconst key = `${type}-${name}`;\n\nfor (const idx in this.attributeIndex) {\n    if (idx.startsWith(key)) {\n        resArr.push(this.attributeIndex[idx]);\n    }\n}\n\nreturn resArr.flat();\n}", "CodeBleu_score": 95.49651034850106}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.findOne({_id: branchRow.noteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = null;\n\t\tchildNote.parents = _.sortBy(childNote.parents, function(parentNoteId) {\n\t\t\treturn becca.notes.findOne({_id: parentNoteId}).sortOrder;\n\t\t});\n\t\tbecca.notes.update({_id: branchRow.noteId}, {$set: {flatTextCache: null}});\n\t\tbecca.notes.update({_id: branchRow.noteId}, {$set: {subtreeInvalidated: true}});\n\t\tvar parentNote = becca.notes.findOne({_id: branchRow.parentNoteId});\n\t\tif (parentNote) {\n\t\t\tparentNote.children = _.sortBy(parentNote.children, function(childNoteId) {\n\t\t\t\treturn becca.notes.findOne({_id: childNoteId}).sortOrder;\n\t\t\t});\n\t\t\tbecca.notes.update({_id: branchRow.parentNoteId}, {$set: {children: parentNote.children}});\n\t\t}\n\t}\n}", "CodeBleu_score": 41.875095546402044}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.findOne(branchRow.noteId);\n\tif (childNote) {\n\t\tchildNote.flatTextCache = null;\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubtree();\n\t}\n\tvar parentNote = becca.notes.findOne(branchRow.parentNoteId);\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 64.55928807233876}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.findOne({_id: branchRow.noteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = null;\n\t\tchildNote.sortParents();\n\t\tchildNote.invalidateSubtree();\n\t}\n\tvar parentNote = becca.notes.findOne({_id: branchRow.parentNoteId});\n\tif (parentNote) {\n\t\tparentNote.sortChildren();\n\t}\n}", "CodeBleu_score": 65.85305130539855}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t\tif (mime == null || mime == 'text/html') return mime;\n\tif (mime in _mimeCache) return _mimeCache[mime];\n\tvar mimeParts = mime.split('/');\n\tvar mimeBase = mimeParts[0];\n\tif (mimeBase == 'text' || mimeBase == 'application') mimeBase = mimeParts[1];\n\tif (mimeBase == 'x-' || mimeBase == 'x') mimeBase = mimeParts[2];\n\t_mimeCache[mime] = mimeBase;\n\treturn mimeBase;\n}", "CodeBleu_score": 34.64838291756183}, {"code": "function trimMime(mime){\n\t\tif (mime === null || mime === 'text/html') {\n\t\treturn mime;\n\t}\n\n\tvar mimeParts = mime.split('/');\n\tvar mimePrefix = mimeParts[0];\n\tvar mimeSuffix = mimeParts[1];\n\tvar mimeSimple = mimeSuffix;\n\n\tif (mimePrefix === 'text' || mimePrefix === 'application') {\n\t\tmimeSimple = mimeSuffix.substring(1);\n\t}\n\n\tif (mimeSimple.startsWith('-')) {\n\t\tmimeSimple = mimeSimple.substring(1);\n\t}\n\n\tif (mimeSimple!== mime) {\n\t\tmimeSimple = mimePrefix + '/' + mimeSimple;\n\t}\n\n\tmimeSimpleCache[mime] = mimeSimple;\n\treturn mimeSimple;\n}", "CodeBleu_score": 39.078619881323625}, {"code": "function trimMime(mime){\n\t\tif (mime == null || mime == 'text/html') {\n\t\treturn mime;\n\t}\n\tif (mime in trimMime.cache) {\n\t\treturn trimMime.cache[mime];\n\t}\n\tvar parts = mime.split('/');\n\tvar type = parts[0];\n\tvar subtype = parts[1];\n\tif (type == 'text' || type == 'application') {\n\t\tsubtype = parts[1];\n\t}\n\tsubtype = subtype.replace(/-x/g, '');\n\ttrimMime.cache[mime] = type + '/' + subtype;\n\treturn trimMime.cache[mime];\n}", "CodeBleu_score": 33.139250926084806}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t\tconst baseNoteDate = new Date(baseNote.created);\n\tconst baseNoteTimestamp = baseNoteDate.getTime();\n\tconst minDate = new Date(baseNoteTimestamp - 1000 * 60 * 60 * 24 * 7);\n\tconst minExcludedDate = new Date(baseNoteTimestamp - 1000 * 60 * 60 * 24 * 7 * 2);\n\tconst maxExcludedDate = new Date(baseNoteTimestamp + 1000 * 60 * 60 * 24 * 7 * 2);\n\tconst maxDate = new Date(baseNoteTimestamp + 1000 * 60 * 60 * 24 * 7);\n\treturn {\n\t\tminDate: formatDate(minDate),\n\t\tminExcludedDate: formatDate(minExcludedDate),\n\t\tmaxExcludedDate: formatDate(maxExcludedDate),\n\t\tmaxDate: formatDate(maxDate),\n\t};\n}", "CodeBleu_score": 28.537374164042067}, {"code": "function buildDateLimits(baseNote){\n\t\t// Parse creation date from baseNote\n\tvar baseNoteCreationDate = baseNote.creationDate;\n\tvar baseNoteCreationDateParsed = moment(baseNoteCreationDate, \"YYYY-MM-DDTHH:mm:ss.SSSZ\");\n\tvar baseNoteCreationDateParsedTimestamp = baseNoteCreationDateParsed.valueOf();\n\n\t// Calculate date limits\n\tvar minDate = baseNoteCreationDateParsed.subtract(1, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ');\n\tvar minExcludedDate = baseNoteCreationDateParsed.subtract(2, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ');\n\tvar maxExcludedDate = baseNoteCreationDateParsed.add(1, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ');\n\tvar maxDate = baseNoteCreationDateParsed.add(2, 'days').format('YYYY-MM-DDTHH:mm:ss.SSSZ');\n\n\t// Return date limits\n\treturn {\n\t\tminDate: minDate,\n\t\tminExcludedDate: minExcludedDate,\n\t\tmaxExcludedDate: maxExcludedDate,\n\t\tmaxDate: maxDate\n\t};\n}", "CodeBleu_score": 22.99850984983178}, {"code": "function buildDateLimits(baseNote){\n\t\tconst creationDate = new Date(baseNote.creationDate);\n\tconst minDate = new Date(creationDate.getTime() - 1000 * 60 * 60 * 24 * 30 * 3);\n\tconst minExcludedDate = new Date(creationDate.getTime() - 1000 * 60 * 60 * 24 * 30 * 3);\n\tconst maxExcludedDate = new Date(creationDate.getTime() + 1000 * 60 * 60 * 24 * 30 * 3);\n\tconst maxDate = new Date(creationDate.getTime() + 1000 * 60 * 60 * 24 * 30 * 3);\n\treturn {\n\t\tminDate: minDate.toISOString(),\n\t\tminExcludedDate: minExcludedDate.toISOString(),\n\t\tmaxExcludedDate: maxExcludedDate.toISOString(),\n\t\tmaxDate: maxDate.toISOString(),\n\t};\n}", "CodeBleu_score": 31.43648778177927}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t", "CodeBleu_score": 0.8467755637509736}, {"code": "_setContent(content, opts = {}){\n\t", "CodeBleu_score": 0.8467755637509736}, {"code": "_setContent(content, opts = {}){\n\t", "CodeBleu_score": 0.8467755637509736}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t\t// get the inbox note\n\tconst inboxNote = await dateNoteService.getInboxNote();\n\n\t// create a new note in the inbox\n\tconst newNote = await dateNoteService.createNote(inboxNote, {\n\t\tcontent: \"New note\",\n\t\ttype: \"text\",\n\t\tprotection: {\n\t\t\tstatus: \"public\"\n\t\t}\n\t});\n\n\t// open the new note in a new tab\n\tawait dateNoteService.openNote(newNote, {\n\t\ttab: true,\n\t\thoist: true\n\t});\n\n\t// trigger an event to focus and select the title of the new note\n\tawait dateNoteService.triggerEvent(\"focus\", newNote);\n\tawait dateNoteService.triggerEvent(\"select\", newNote);\n}", "CodeBleu_score": 42.29082037553267}, {"code": "async createNoteIntoInboxCommand(){\n\t\t// get the inbox note\n\tlet inboxNote = await dateNoteService.getInboxNote();\n\t// create a new note\n\tlet note = await dateNoteService.createNote(inboxNote, {\n\t\ttype: \"note\",\n\t\tcontent: \"New Note\",\n\t\tprotectionStatus: \"unprotected\",\n\t});\n\t// open the new note in a tab with hoisting\n\tawait dateNoteService.openNoteInTab(note, {\n\t\thoist: true,\n\t});\n\t// trigger an event to focus and select the title of the new note\n\tawait dateNoteService.triggerEvent(\"focusAndSelectTitle\", note);\n}", "CodeBleu_score": 35.40582295484137}, {"code": "async createNoteIntoInboxCommand(){\n\t\t//Retrieve the inbox note\n\tconst inboxNote = await dateNoteService.retrieveNoteByTitle(INBOX_NOTE_TITLE);\n\n\t//Create a new note under the inbox note\n\tconst newNote = await dateNoteService.createNote(inboxNote, {\n\t\ttitle: 'New Note',\n\t\tcontent: 'New Note Content',\n\t\ttype: 'note',\n\t\tprotection: 'public',\n\t\ttags: [],\n\t\tpermissions: [],\n\t\tparent: inboxNote.id\n\t});\n\n\t//Ensure the entity change is known\n\tawait dateNoteService.ensureNoteChange(newNote.id);\n\n\t//Open the new note in a new tab\n\tawait dateNoteService.openNoteInNewTab(newNote.id, { hoist: true });\n\n\t//Trigger an event to focus and select the title of the new note\n\tawait dateNoteService.triggerEvent('focus', newNote.id);\n\tawait dateNoteService.triggerEvent('select', newNote.id);\n}", "CodeBleu_score": 41.93812403673468}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tconst note = await this.noteManager.getNote(noteId);\n\tconst activeNote = await this.noteManager.getNote(appContext.tabManager.getActiveContextNoteId());\n\tif (note.type!== \"search\") {\n\t\tthis.noteManager.hoistNote(noteId);\n\t\tthis.noteManager.setHoistedNote(noteId);\n\t} else {\n\t\tif (note.id!== activeNote.id) {\n\t\t\tthis.noteManager.hoistNote(noteId);\n\t\t\tthis.noteManager.setHoistedNote(noteId);\n\t\t} else {\n\t\t\tthis.noteManager.unhoistNote();\n\t\t\tthis.noteManager.setHoistedNote(null);\n\t\t}\n\t}\n}", "CodeBleu_score": 42.409911582672834}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\t// Get the note to be hoisted\n\tlet note = await appContext.noteManager.getNoteById(noteId);\n\t// Get the active note context\n\tlet activeContext = appContext.tabManager.getActiveContext();\n\t// If the note is already hoisted\n\tif (note.hoisted) {\n\t\t// Unhoist the note\n\t\tawait appContext.noteManager.unhoistNote(noteId, activeContext);\n\t}\n\t// If the note is not a search type\n\telse if (!note.search) {\n\t\t// Set the note as the hoisted note\n\t\tawait appContext.noteManager.setHoistedNote(noteId, activeContext);\n\t}\n}", "CodeBleu_score": 46.12955673517365}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tif (noteId) {\n\t\tconst note = await appContext.noteManager.getNote(noteId);\n\t\tif (note.isSearch) {\n\t\t\tappContext.noteManager.unhoistNote(noteId);\n\t\t} else {\n\t\t\tappContext.noteManager.hoistNote(noteId);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.870405420633915}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await generateHash({notePath, hoistedNoteId, viewScope});\n\n\tif (process.env.NODE_ENV === 'electron') {\n\t\tipcRenderer.send('open-in-window', {hash});\n\t} else {\n\t\tconst url = `${window.location.origin}/#/view/${hash}`;\n\t\twindow.open(url, '_blank', 'width=1000,height=700');\n\t}\n}", "CodeBleu_score": 37.78572914695319}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await generateHash({notePath, hoistedNoteId, viewScope});\n\tif (isElectron()) {\n\t\tipcRenderer.send('open-window', hash);\n\t} else {\n\t\tconst {width, height} = getWindowDimensions();\n\t\tconst url = `${window.location.origin}/#${hash}`;\n\t\tconst windowName = 'hoist';\n\t\twindow.open(url, windowName, `width=${width},height=${height}`);\n\t}\n}", "CodeBleu_score": 38.867571203400566}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await generateHash({notePath, hoistedNoteId, viewScope});\n\tconst url = `${window.location.origin}/?${hash}`;\n\tif (isElectron()) {\n\t\tipcRenderer.send('open-new-window', url);\n\t} else {\n\t\tconst {width, height} = getWindowDimensions();\n\t\twindow.open(url, '_blank', `width=${width},height=${height}`);\n\t}\n}", "CodeBleu_score": 36.5159162303327}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t\tconst activeContext = await this.tabManager.getActiveContext();\n\tconst note = activeContext.note;\n\tconst ntxId = activeContext.ntxId;\n\n\tif (!note || note.type!== 'code') {\n\t\treturn;\n\t}\n\n\tconst mimeType = note.mimeType;\n\n\tif (mimeType === 'application/x-sqlite-schema') {\n\t\tconst query = note.text;\n\t\tconst result = await this.runSQLQuery(query);\n\t\tif (result.error) {\n\t\t\tthis.showError(result.error);\n\t\t} else {\n\t\t\tthis.showSuccess(result.message);\n\t\t\tthis.trigger('sql-query-executed', { query, result });\n\t\t}\n\t} else if (mimeType === 'application/x-sqlite-script') {\n\t\tconst script = note.text;\n\t\tconst result = await this.runSQLScript(script);\n\t\tif (result.error) {\n\t\t\tthis.showError(result.error);\n\t\t} else {\n\t\t\tthis.showSuccess(result.message);\n\t\t\tthis.trigger('sql-script-executed', { script, result });\n\t\t}\n\t} else {\n\t\tconst bundle = await this.getBundle(ntxId);\n\t\tconst result = await this.runBundle(bundle);\n\t\tif (result.error) {\n\t\t\tthis.showError(result.error);\n\t\t} else {\n\t\t\tthis.showSuccess(result.message);\n\t\t\tthis.trigger('bundle-executed', { bundle, result });\n\t\t}\n\t}\n}", "CodeBleu_score": 33.73529160583277}, {"code": "async runActiveNoteCommand(){\n\t", "CodeBleu_score": 0.8131870016062366}, {"code": "async runActiveNoteCommand(){\n\t", "CodeBleu_score": 0.8131870016062366}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t.note.isReadOnly: async function () {\n        if (this.isReadOnlyTemporarilyDisabled) {\n            return false;\n        }\n\n        if (!this.noteId ||!(this.noteId in froca.notes)) {\n            return false;\n        }\n\n        const note = froca.notes[this.noteId];\n        if (note.type === 'text' || note.type === 'code') {\n            return note.hasLabel('readOnly') || this.viewMode ==='source';\n        }\n\n        const blob = await this.getBlob();\n        const contentLength = blob.size;\n\n        if (contentLength > 10000000) {\n            return true;\n        }\n\n        if (note.hasLabel('autoReadOnlyDisabled')) {\n            return false;\n        }\n\n        return true;\n    }\n}", "CodeBleu_score": 50.603726951641704}, {"code": "async isReadOnly(){\n\t(!this.autoReadOnlyDisabled) {\n\t\tif (this.note.isLabelTruthy('readOnly')) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this.viewMode ==='source') {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\tif (this.note.type!== 'text' && this.note.type!== 'code') {\n\t\treturn false;\n\t}\n\n\tif (this.note.getBlob().content.length > (this.note.type === 'text'? froca.config.maxTextSize : froca.config.maxCodeSize)) {\n\t\tif (!this.note.isLabelTruthy('autoReadOnlyDisabled')) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 38.20431140656837}, {"code": "async isReadOnly(){\n\t(this.isReadOnlyDisabled) {\n\t\treturn false;\n\t}\n\n\tif (!this.note) {\n\t\treturn false;\n\t}\n\n\tif (this.note.type === 'text' || this.note.type === 'code') {\n\t\tif (this.note.isLabelTruthy('readOnly') || this.viewMode ==='source') {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst blob = await this.note.getBlob();\n\t\tif (blob.size > this.note.type === 'text'? 1024 : 1024 * 1024) {\n\t\t\treturn!this.note.isLabelTruthy('autoReadOnlyDisabled');\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 45.38455843012245}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t// If a note context is provided, it checks if it already exists.\nif (ntxId) {\n\n// If a note context with the provided id already exists, it returns it.\nif (this.getNoteContextById(ntxId)) {\nreturn this.getNoteContextById(ntxId);\n}\n\n// If a note context with the provided id does not exist, it creates a new note context with the provided id.\nthis.addNoteContext(ntxId, hoistedNoteId, mainNtxId);\nreturn this.getNoteContextById(ntxId);\n}\n\n// If no note context is provided, it creates a new note context.\nthis.addNoteContext(ntxId, hoistedNoteId, mainNtxId);\nreturn this.getActiveContext();\n}", "CodeBleu_score": 22.623177114824696}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t", "CodeBleu_score": 3.3675088390567347}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t// check if a similar note context already exists, either by getting the active context on mobile or searching among existing children\nvar existingContext = this.getActiveContext();\n\n// if an existing context is found, update the hoistedNoteId and return the existing context\nif (existingContext) {\n    existingContext.hoistedNoteId = hoistedNoteId;\n    return existingContext;\n}\n\n// if no existing context is found, add the new context as a child, trigger a 'newNoteContextCreated' event, and return the new context\nvar newContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\nthis.addChild(newContext);\nthis.trigger('newNoteContextCreated', newContext);\nreturn newContext;\n}", "CodeBleu_score": 37.06553625197162}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\tconst branchIdPos = {};\n\nfor (const branchId of Object.values(this.childToBranch)) {\n    branchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n}\n\nthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.6154106222131}, {"code": "sortChildren(){\n\tconst branchIdPos = {};\n\nfor (const branchId of Object.values(this.childToBranch)) {\nbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n}\n\nthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.10497917881968}, {"code": "sortChildren(){\n\tconst branchIdPos = {};\n\nfor (const branchId of Object.values(this.childToBranch)) {\n    branchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n}\n\nthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.6154106222131}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tnst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (newParentBranch.noteType ==='search') {\n\t\treturn;\n\t}\n\n\tconst hoistedNoteId = hoistedNoteService.getHoistedNoteId();\n\n\tfor (const branchId of branchIdsToMove) {\n\t\tconst branch = froca.getBranch(branchId);\n\n\t\tif (branch.noteId === 'root' || branch.noteId === hoistedNoteId) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (branch.parentNoteId === newParentBranchId) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst newParentNoteId = newParentBranch.noteId;\n\t\tconst newParentNoteType = newParentBranch.noteType;\n\n\t\tconst requestData = {\n\t\t\tbranchId,\n\t\t\tnewParentNoteId,\n\t\t\tnewParentNoteType\n\t\t};\n\n\t\tconst response = await froca.moveBranch(requestData);\n\n\t\tif (!response.success) {\n\t\t\tconst error = response.error;\n\t\t\tconst errorMessage = error.message;\n\t\t\tconst errorData = error.data;\n\n\t\t\tconst message = `Failed to move branch to parent note. ${errorMessage}`;\n\n\t\t\tif (errorData) {\n\t\t\t\tconst { noteId, noteType } = errorData;\n\n\t\t\t\tmessage += `\nNote ID: ${noteId}\nNote Type: ${noteType}`;\n\t\t\t}\n\n\t\t\tfroca.showError(message);\n\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.6354232853382}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t", "CodeBleu_score": 0.3848797983923092}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\tnst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (newParentBranch.type ==='search') {\n\t\treturn;\n\t}\n\n\tconst hoistedNoteId = hoistedNoteService.getHoistedNoteId();\n\n\tbranchIdsToMove = branchIdsToMove.filter(branchId => {\n\t\tconst branch = froca.getBranch(branchId);\n\n\t\treturn branch.noteId!== 'root'\n\t\t\t&& branch.noteId!== hoistedNoteId;\n\t});\n\n\tfor (let i = 0; i < branchIdsToMove.length; i++) {\n\t\tconst branchId = branchIdsToMove[i];\n\t\tconst branch = froca.getBranch(branchId);\n\n\t\tif (branch.noteId === newParentBranch.noteId) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (branch.parentNoteId === newParentBranch.noteId) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst moveBranchRequest = {\n\t\t\tbranchId: branch.id,\n\t\t\tparentBranchId: newParentBranch.id\n\t\t};\n\n\t\tconst moveBranchResponse = await moveBranch(moveBranchRequest);\n\n\t\tif (moveBranchResponse.success) {\n\t\t\tconst newBranch = froca.getBranch(branch.id);\n\n\t\t\tif (newBranch.parentNoteId!== newParentBranch.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tawait branchService.updateBranch(newBranch);\n\t\t} else {\n\t\t\tconst error = new Error('Failed to move branch');\n\t\t\terror.response = moveBranchResponse;\n\t\t\tthrow error;\n\t\t}\n\t}\n}", "CodeBleu_score": 43.75142478838603}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t\tlet notePath = await getActiveContext();\n\tnotePath = notePath.slice(0, notePath.length - 1);\n\tawait setActiveContext(notePath);\n}", "CodeBleu_score": 17.78661106943046}, {"code": "async function activateParentNotePath(){\n\t\tconst activeContext = await getActiveContext();\n\tconst notePath = activeContext.notePath;\n\tconst parentNotePath = notePath.slice(0, notePath.length - 1);\n\tif (parentNotePath.length > 0) {\n\t\tawait setActiveContext(parentNotePath);\n\t}\n}", "CodeBleu_score": 44.74060421541078}, {"code": "async function activateParentNotePath(){\n\t\tconst context = await getActiveContext();\n\tconst parentNotePath = context.notePath.slice(0, context.notePath.length - 1);\n\tif (parentNotePath.length > 0) {\n\t\tsetActiveNotePath(parentNotePath);\n\t}\n}", "CodeBleu_score": 40.53467404744252}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t", "CodeBleu_score": 0.4431612227274808}, {"code": "async function copy(branchIds){\n\t\ttry {\n\t\t// If running in an Electron environment, use the Electron clipboard module\n\t\tif (isElectron) {\n\t\t\tconst clipboard = electron.clipboard;\n\t\t\tconst text = await createBranchLinks(branchIds);\n\t\t\tclipboard.writeText(text);\n\t\t\tconst message = branchIds.length === 1? 'Branch copied to clipboard' : `${branchIds.length} branches copied to clipboard`;\n\t\t\tshowSuccessMessage(message);\n\t\t\treturn;\n\t\t}\n\n\t\t// If running in a web browser, use the browser's native copy function\n\t\tconst text = await createBranchLinks(branchIds);\n\t\tnavigator.clipboard.writeText(text);\n\t\tconst message = branchIds.length === 1? 'Branch copied to clipboard' : `${branchIds.length} branches copied to clipboard`;\n\t\tshowSuccessMessage(message);\n\t} catch (error) {\n\t\tshowErrorMessage(error.message);\n\t}\n}", "CodeBleu_score": 31.633009008181645}, {"code": "async function copy(branchIds){\n\t\tconst branchLinks = await createBranchLinks(branchIds);\n\tconst html = branchLinks.map(link => `<a href=\"${link}\">${link}</a>`).join('<br>');\n\tconst message = `Copied ${branchLinks.length} branch${branchLinks.length > 1? 'es' : ''} to the clipboard.`;\n\n\tif (isElectron()) {\n\t\tclipboard.writeHTML(html);\n\t\tshowNotification(message);\n\t} else {\n\t\tconst textarea = document.createElement('textarea');\n\t\ttextarea.style.position = 'fixed';\n\t\ttextarea.style.top = '0';\n\t\ttextarea.style.left = '0';\n\t\ttextarea.style.width = '2em';\n\t\ttextarea.style.height = '2em';\n\t\ttextarea.style.padding = '0';\n\t\ttextarea.style.border = 'none';\n\t\ttextarea.style.outline = 'none';\n\t\ttextarea.style.boxShadow = 'none';\n\t\ttextarea.style.background = 'transparent';\n\t\ttextarea.value = html;\n\t\tdocument.body.appendChild(textarea);\n\t\ttextarea.select();\n\t\tdocument.execCommand('copy');\n\t\tdocument.body.removeChild(textarea);\n\t\tshowNotification(message);\n\t}\n}", "CodeBleu_score": 35.50298277856911}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tlet hosts: IHostsBasicData = [];\n\n\tif (data.length > 0) {\n\t\thosts = data.map(item => {\n\t\t\tif (item.type === 'folder') {\n\t\t\t\tif (item.children === undefined) {\n\t\t\t\t\titem.children = [];\n\t\t\t\t}\n\t\t\t} else if (item.type === 'group') {\n\t\t\t\tif (item.include === undefined) {\n\t\t\t\t\titem.include = [];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (item.type === 'folder' || item.type === 'group') {\n\t\t\t\titem.content = '';\n\t\t\t}\n\n\t\t\treturn item;\n\t\t});\n\t}\n\n\treturn hosts;\n}", "CodeBleu_score": 45.98904934563481}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\treturn data.reduce((acc, item) => {\n\t\tif (item.type === 'folder') {\n\t\t\tif (!Array.isArray(item.children)) {\n\t\t\t\titem.children = [];\n\t\t\t}\n\t\t} else if (item.type === 'group') {\n\t\t\tif (!Array.isArray(item.include)) {\n\t\t\t\titem.include = [];\n\t\t\t}\n\t\t} else {\n\t\t\titem.content = '';\n\t\t}\n\t\treturn acc.concat(item);\n\t}, []);\n}", "CodeBleu_score": 45.41226880194722}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tif (!data) {\n\t\treturn data;\n\t}\n\n\tconst flattened = flatten(data);\n\n\tflattened.forEach((item) => {\n\t\tif (item.type === 'folder') {\n\t\t\tif (!item.children) {\n\t\t\t\titem.children = [];\n\t\t\t}\n\t\t} else if (item.type === 'group') {\n\t\t\tif (!item.include) {\n\t\t\t\titem.include = [];\n\t\t\t}\n\t\t} else {\n\t\t\titem.content = '';\n\t\t}\n\t});\n\n\treturn flattened;\n}", "CodeBleu_score": 41.48961094415854}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t\tif (content.length > 0) {\n\t\tconst historyLimit = await configGet(\"historyLimit\");\n\t\tif (historyLimit > 0) {\n\t\t\tconst history = await swhdb.collection.history.all;\n\t\t\tif (history.length >= historyLimit) {\n\t\t\t\tawait deleteHistory(history[0]._id);\n\t\t\t}\n\t\t\tconst newHistory = {\n\t\t\t\t_id: uuid4(),\n\t\t\t\tcontent: content,\n\t\t\t\ttimestamp: new Date().getTime()\n\t\t\t};\n\t\t\tawait swhdb.collection.history.insert(newHistory);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.613159465703795}, {"code": "const addHistory = async (content: string) =>{\n\t\tconst historyLimit = await configGet('historyLimit');\n\tif (historyLimit > 0) {\n\t\tconst history = await swhdb.collection.history.all;\n\t\tif (history.length >= historyLimit) {\n\t\t\tawait swhdb.collection.history.delete(history[0].id);\n\t\t}\n\t}\n\tconst id = uuid4();\n\tawait swhdb.collection.history.insert({\n\t\tid,\n\t\tcontent,\n\t\ttimestamp: new Date().getTime(),\n\t});\n}", "CodeBleu_score": 33.10347369360139}, {"code": "const addHistory = async (content: string) =>{\n\t\tconst historyLimit = await configGet('historyLimit');\n\tif (typeof historyLimit!== 'number' || historyLimit <= 0) {\n\t\treturn;\n\t}\n\tconst history = await swhdb.collection.history.all;\n\tif (history.length >= historyLimit) {\n\t\tawait deleteHistory(history[0]._id);\n\t}\n\tconst newHistory = {\n\t\t_id: uuidv4(),\n\t\tcontent,\n\t\ttimestamp: new Date().getTime(),\n\t};\n\tawait swhdb.collection.history.insert(newHistory);\n}", "CodeBleu_score": 38.69722293994734}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder = await getDataFolder();\n\tconst dataFile = path.join(dataFolder, DATA_FILENAME);\n\tconst defaultData = {\n\t\thosts: [],\n\t\tdomains: [],\n\t\tips: [],\n\t};\n\ttry {\n\t\tconst fileContent = await fs.promises.readFile(dataFile, { encoding: 'utf8' });\n\t\tconst data = JSON.parse(fileContent);\n\t\treturn cleanHostsList(data);\n\t} catch (error) {\n\t\tconsole.error(`Error reading old data from ${dataFile}:`, error);\n\t\treturn defaultData;\n\t}\n}", "CodeBleu_score": 44.11623066100327}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolderPath = getDataFolder();\n\tconst dataFileName = 'hosts.json';\n\tconst dataFilePath = path.join(dataFolderPath, dataFileName);\n\tconst defaultData = {\n\t\thosts: [],\n\t\tlastUpdate: new Date(),\n\t};\n\ttry {\n\t\tconst dataFileExists = fs.existsSync(dataFilePath);\n\t\tif (dataFileExists) {\n\t\t\tconst dataFileContent = await fs.promises.readFile(dataFilePath, 'utf8');\n\t\t\tconst data = JSON.parse(dataFileContent);\n\t\t\treturn cleanHostsList(data);\n\t\t} else {\n\t\t\treturn defaultData;\n\t\t}\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn defaultData;\n\t}\n}", "CodeBleu_score": 43.9082520889508}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolderPath: string = getDataFolder();\n\tconst dataFilePath: string = path.join(dataFolderPath, 'hosts.json');\n\tconst defaultData: IHostsBasicData = {\n\t\thosts: [],\n\t\tlastUpdated: new Date(0),\n\t\tlastChecked: new Date(0),\n\t};\n\n\ttry {\n\t\tconst fileContent: string = await fs.promises.readFile(dataFilePath, 'utf-8');\n\t\tconst data: IHostsBasicData = JSON.parse(fileContent);\n\t\treturn cleanHostsList(data);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn defaultData;\n\t}\n}", "CodeBleu_score": 46.242669909871616}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) return swhdb;\n\tconst data_dir = await LocalStorage.get('data_dir');\n\tif (!data_dir) throw new Error('Unable to retrieve data directory path from local storage.');\n\tdata_dir_path = data_dir;\n\tswhdb = new PotDb(path.join(data_dir_path,'swhdb'));\n\tswhdb.log('swhdb initialized.');\n\treturn swhdb;\n}", "CodeBleu_score": 35.12404912219137}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) {\n\t\treturn swhdb;\n\t}\n\n\tconst data_dir = await getStorageDataDir();\n\tdata_dir && (globalThis.data_dir = data_dir);\n\n\tconst swhdb_dir = path.join(data_dir,'swhdb');\n\tswhdb = new PotDb(swhdb_dir);\n\tswhdb.log('swhdb directory path:'+ swhdb_dir);\n\n\treturn swhdb;\n}", "CodeBleu_score": 41.69974898206123}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) {\n\t\treturn swhdb;\n\t}\n\tconst data_dir = await LocalStorage.get('data_dir');\n\tif (data_dir) {\n\t\tdata_dir_path = data_dir;\n\t}\n\tconst swhdb_dir = path.join(data_dir_path,'swhdb');\n\tswhdb = new PotDb(swhdb_dir, {\n\t\tlog: console.log,\n\t\tlog_dir: path.join(swhdb_dir, 'log'),\n\t\tlog_file: path.join(swhdb_dir, 'log','swhdb.log'),\n\t});\n\treturn swhdb;\n}", "CodeBleu_score": 39.553745911096236}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\t// if there is no last refresh timestamp, it returns true\n\tif (!hosts.lastRefreshTimestamp) {\n\t\treturn true;\n\t}\n\n\t// calculate the time elapsed since the last refresh\n\tconst timeElapsed = new Date().getTime() - hosts.lastRefreshTimestamp;\n\n\t// if the time elapsed exceeds the refresh interval, return true\n\tif (timeElapsed >= hosts.refreshInterval) {\n\t\treturn true;\n\t}\n\n\t// otherwise, return false\n\treturn false;\n}", "CodeBleu_score": 25.416790077521824}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tif (hosts.refresh_interval === null || hosts.refresh_interval === undefined || hosts.url === null || hosts.url === undefined) {\n\t\treturn false;\n\t}\n\n\tif (hosts.last_refresh === null || hosts.last_refresh === undefined) {\n\t\treturn true;\n\t}\n\n\tconst now = new Date().getTime();\n\tconst last_refresh = new Date(hosts.last_refresh).getTime();\n\tconst elapsed_time = now - last_refresh;\n\n\treturn elapsed_time > hosts.refresh_interval * 1000;\n}", "CodeBleu_score": 31.70356318793085}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tif (hosts.refreshInterval == null || hosts.url == null) {\n\t\treturn false;\n\t}\n\n\tif (hosts.lastRefresh == null) {\n\t\treturn true;\n\t}\n\n\tconst timeElapsed = Date.now() - hosts.lastRefresh;\n\tif (timeElapsed >= hosts.refreshInterval) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 24.485735341044414}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\teturn new Promise((resolve, reject) => {\n\t\tconst id = generateId()\n\t\tconst message = {\n\t\t\taction,\n\t\t\tparams,\n\t\t\tid\n\t\t}\n\t\tipcRenderer.send('action', message)\n\t\tipcRenderer.once(`action-response-${id}`, (event, response) => {\n\t\t\tif (response.success) {\n\t\t\t\tresolve(response.data)\n\t\t\t} else {\n\t\t\t\treject(response.error)\n\t\t\t}\n\t\t})\n\t})\n}", "CodeBleu_score": 40.06339868647577}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\tonst id = generateId();\n\tconst promise = new Promise<any>((resolve, reject) => {\n\t\tipcRenderer.once(id, (event, response) => {\n\t\t\tif (response.success) {\n\t\t\t\tresolve(response.data);\n\t\t\t} else {\n\t\t\t\treject(response.error);\n\t\t\t}\n\t\t});\n\t});\n\tipcRenderer.send(action, { id, params });\n\treturn promise;\n}", "CodeBleu_score": 33.45925321403547}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\teturn new Promise((resolve, reject) => {\n\t\tconst callbackId = generateCallbackId();\n\t\tipcRenderer.once(callbackId, (event, response) => {\n\t\t\tif (response.success) {\n\t\t\t\tresolve(response.data);\n\t\t\t} else {\n\t\t\t\treject(response.error);\n\t\t\t}\n\t\t});\n\t\tipcRenderer.send(action, {\n\t\t\tcallbackId,\n\t\t\tparams,\n\t\t});\n\t});\n}", "CodeBleu_score": 37.67358760120477}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t\tif (editor) {\n\t\ttry {\n\t\t\tlet content = await getHostsContent(hosts_id);\n\t\t\tif (is_new) {\n\t\t\t\teditor.getDoc().clearHistory();\n\t\t\t}\n\t\t\teditor.getDoc().setValue(content);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\t} else {\n\t\tsetTimeout(() => {\n\t\t\tloadContent(is_new);\n\t\t}, 500);\n\t}\n}", "CodeBleu_score": 39.69344456096005}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tlet content = '';\n\tlet editor = CodeMirror.fromTextArea(document.getElementById('code'), {\n\t\tmode: 'python',\n\t\tlineNumbers: true,\n\t\tindentUnit: 4,\n\t\tindentWithTabs: true,\n\t\tlineWrapping: true,\n\t\ttheme:'material',\n\t\textraKeys: {\n\t\t\t'Ctrl-Space': 'autocomplete',\n\t\t\t'Ctrl-Enter': () => {\n\t\t\t\trun();\n\t\t\t},\n\t\t},\n\t});\n\tif (editor === undefined) {\n\t\tsetTimeout(() => {\n\t\t\tloadContent(is_new);\n\t\t}, 100);\n\t} else {\n\t\tif (is_new) {\n\t\t\teditor.clearHistory();\n\t\t}\n\t\tif (hosts_id!== undefined) {\n\t\t\tcontent = await getHostsContent(hosts_id);\n\t\t} else {\n\t\t\tcontent = await getSystemHostsContent();\n\t\t}\n\t\teditor.setValue(content);\n\t}\n}", "CodeBleu_score": 40.85764004730742}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (editor) {\n\t\tif (is_new) {\n\t\t\teditor.clearHistory();\n\t\t}\n\t\ttry {\n\t\t\tconst content = await getContent(hosts_id);\n\t\t\teditor.setValue(content);\n\t\t} catch (err) {\n\t\t\tconsole.log(err);\n\t\t\tsetTimeout(loadContent, 1000);\n\t\t}\n\t} else {\n\t\tsetTimeout(loadContent, 1000);\n\t}\n}", "CodeBleu_score": 42.130749755583665}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\t", "CodeBleu_score": 2.108879695466823}, {"code": "const onGutterClick = (n: number) =>{\n\t", "CodeBleu_score": 2.108879695466823}, {"code": "const onGutterClick = (n: number) =>{\n\t", "CodeBleu_score": 2.108879695466823}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\tvious values\n    m_foundOptions.clear();\n    m_foundArgs.clear();\n    m_withHelp = false;\n// initialize variables for parsing\n    Node* actualNode = &m_rootNode;\n    QStringList::const_iterator actualIt = args.cbegin();\n// if a version option is detected, print the version and exit if there are no additional arguments, otherwise it returns an error.\n    if (actualIt!= args.cend() && versionOption.names().contains(*actualIt)) {\n        ++actualIt;\n        if (actualIt == args.cend()) {\n            printVersion();\n            return false;\n        } else {\n            err << QStringLiteral(\"Invalid arguments after the version option.\");\n            return false;\n        }\n    }\n// check for the help option and process other arguments, distinguishing between options (starting with a dash) and regular arguments.\n    if (actualIt!= args.cend() && helpOption.names().contains(*actualIt)) {\n        m_withHelp = true;\n        ++actualIt;\n    }\n    while (actualIt!= args.cend()) {\n        QString arg = *actualIt;\n        // check if option\n        if (arg.startsWith(QLatin1Char('-'))) {\n            if (!processOptions(args, actualIt, actualNode)) {\n                return false;\n            }\n        } else {\n            if (!processArgs(args, actualIt, actualNode)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "CodeBleu_score": 46.43547090802432}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t", "CodeBleu_score": 1.6015576757374008}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\tvious arguments and options.\nm_foundArgs.clear();\nm_foundOptions.clear();\n// Initialize variables for parsing.\nm_withHelp = false;\nm_withVersion = false;\n// Check for the version option.\nfor (const QString& arg : args) {\n    if (arg == QLatin1String(\"--version\") || arg == QLatin1String(\"-v\")) {\n        printVersion();\n        return true;\n    }\n}\n// Check for the help option.\nfor (const QString& arg : args) {\n    if (arg == QLatin1String(\"--help\") || arg == QLatin1String(\"-h\")) {\n        m_withHelp = true;\n        break;\n    }\n}\n// Process other arguments, distinguishing between options (starting with a dash) and regular arguments.\nNode* actualNode = &m_rootNode;\nfor (QStringList::const_iterator actualIt = args.cbegin(); actualIt!= args.cend(); ++actualIt) {\n    if (actualIt->startsWith(QLatin1Char('-'))) {\n        ok = processOptions(args, actualIt, actualNode);\n        if (!ok) {\n            break;\n        }\n    } else {\n        ok = processArgs(args, actualIt, actualNode);\n        if (!ok) {\n            break;\n        }\n    }\n}\n// If any errors occur during processing, output a general error message.\nif (!ok) {\n    err << QStringLiteral(\"Invalid arguments.\");\n}\n// Finally, return a boolean indicating the success or failure of the parsing process.\nreturn ok;\n}", "CodeBleu_score": 47.57247369287549}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t\t// Get the list of button types from the configuration.\n\tQStringList buttonTypes = m_settings.value(ConfigHandler::BUTTON_TYPES_KEY).toStringList();\n\n\t// Iterate through the list of button types.\n\tfor (int i = 0; i < buttonTypes.size(); i++) {\n\t\t// Get the button type from the list.\n\t\tQString buttonType = buttonTypes[i];\n\n\t\t// Get the corresponding button type from CaptureToolButton.\n\t\tQString buttonTypeName = CaptureToolButton::buttonTypeToString(CaptureToolButton::stringToButtonType(buttonType));\n\n\t\t// Check if the button type is in the configuration list.\n\t\tbool inConfigList = false;\n\t\tfor (int j = 0; j < m_buttonTypes.size(); j++) {\n\t\t\tif (buttonTypeName == m_buttonTypes[j]) {\n\t\t\t\tinConfigList = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Set the check state of the list item.\n\t\tm_list->item(i)->setCheckState(inConfigList? Qt::Checked : Qt::Unchecked);\n\t}\n}", "CodeBleu_score": 41.30181185402908}, {"code": "void ButtonListView::updateComponents(){\n\t\t// Get the list of button types from the configuration\n\tQStringList buttonTypes = m_settings.value(\"ButtonTypes\", QStringList()).toStringList();\n\n\t// Get the list of button types from the CaptureToolButton\n\tQList<CaptureToolButton::ButtonType> buttonTypesFromButtons = CaptureToolButton::getButtonTypes();\n\n\t// Iterate through the list of button types from the CaptureToolButton\n\tfor (CaptureToolButton::ButtonType buttonType : buttonTypesFromButtons) {\n\t\t// Check if the button type is in the list of button types from the configuration\n\t\tif (buttonTypes.contains(buttonType)) {\n\t\t\t// If it is, set the check state of the corresponding list item to checked\n\t\t\tlistWidget->item(buttonTypesFromButtons.indexOf(buttonType))->setCheckState(Qt::Checked);\n\t\t} else {\n\t\t\t// If it is not, set the check state of the corresponding list item to unchecked\n\t\t\tlistWidget->item(buttonTypesFromButtons.indexOf(buttonType))->setCheckState(Qt::Unchecked);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.07002237664575}, {"code": "void ButtonListView::updateComponents(){\n\t\t// get list of button types from config\n\tQStringList buttonTypes = getButtonTypes();\n\t// get list of button types from CaptureToolButton\n\tQList<CaptureToolButton*> buttons = CaptureToolButton::getButtons();\n\n\t// iterate through button types\n\tfor (int i = 0; i < buttons.size(); i++) {\n\t\t// get button type\n\t\tQString buttonType = buttons[i]->getButtonType();\n\n\t\t// check if button type is in config list\n\t\tif (buttonTypes.contains(buttonType)) {\n\t\t\t// if so, set item's check state to checked\n\t\t\tbuttons[i]->setChecked(true);\n\t\t} else {\n\t\t\t// if not, set item's check state to unchecked\n\t\t\tbuttons[i]->setChecked(false);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.44444714207864}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t\tif (presetList.contains(userColor)) {\n\t\treturn;\n\t}\n\n\tif (presetList.size() >= 17) {\n\t\tQMessageBox::warning(this, \"Error\", \"Maximum number of presets reached\");\n\t\treturn;\n\t}\n\n\tpresetList.append(userColor);\n\tpresetList.sort();\n\tupdatePresetList();\n\tupdateUserColor();\n}", "CodeBleu_score": 37.545976202810415}, {"code": "void ColorPickerEditor::addPreset(){\n\t\tif (colorList.contains(color)) {\n\t\treturn;\n\t}\n\tif (colorList.size() >= 17) {\n\t\tQMessageBox::warning(this, tr(\"Color Picker\"), tr(\"Maximum number of presets reached.\"));\n\t\treturn;\n\t}\n\tcolorList.append(color);\n\tupdateUserColor();\n}", "CodeBleu_score": 45.45480227034251}, {"code": "void ColorPickerEditor::addPreset(){\n\t\tif (colorList.contains(userColor)) {\n\t\treturn;\n\t}\n\tif (colorList.size() >= 17) {\n\t\tQMessageBox::warning(this, tr(\"Warning\"), tr(\"Maximum number of presets reached\"));\n\t\treturn;\n\t}\n\tcolorList.append(userColor);\n\tupdateUserColor();\n}", "CodeBleu_score": 44.755902790264415}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t#ifdef Q_OS_ANDROID\n    setWindowFlags(Qt::FramelessWindowHint);\n#endif\n    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n    m_hLayout = new QHBoxLayout(this);\n    m_vLayout = new QVBoxLayout(this);\n    m_vLayout->setAlignment(Qt::AlignCenter);\n    m_vLayout->setSpacing(fontMetrics().height());\n\n    initButtons();\n    initColorWheel();\n    m_hLayout->addLayout(m_vLayout);\n    m_hLayout->addStretch();\n\n    updateComponents();\n}", "CodeBleu_score": 48.49459159304234}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t#ifdef DEBUG\n    qDebug() << \"UIcolorEditor::UIcolorEditor\";\n#endif\n    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout(this);\n    m_vLayout = new QVBoxLayout(this);\n    m_hLayout->addLayout(m_vLayout);\n    m_hLayout->setAlignment(Qt::AlignCenter);\n    m_hLayout->setSpacing(fontMetrics().height());\n    m_vLayout->addStretch();\n    initButtons();\n    initColorWheel();\n    m_vLayout->addStretch();\n    updateComponents();\n}", "CodeBleu_score": 50.54180412681999}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t#ifdef DEBUG_UI_COLOR_EDITOR\n    qDebug() << \"UIcolorEditor constructor\";\n#endif\n    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_hLayout = new QHBoxLayout();\n    m_vLayout = new QVBoxLayout();\n    m_vLayout->setAlignment(Qt::AlignCenter);\n    m_hLayout->setSpacing(fontMetrics().height() / 2);\n    m_hLayout->addLayout(m_vLayout);\n    initButtons();\n    initColorWheel();\n    m_hLayout->addStretch();\n    setLayout(m_hLayout);\n    updateComponents();\n}", "CodeBleu_score": 51.95867246574335}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\tifdef Q_OS_WIN\n    QScreen* screen = QGuiApplication::primaryScreen();\n    if (screen == nullptr) {\n        emit captureFailed(tr(\"Could not capture the screen\"));\n        return;\n    }\n    QPixmap capture = screen->grabWindow(0);\n#else\n    QPixmap capture = QGuiApplication::primaryScreen()->grabWindow(0);\n#endif\n    if (capture.isNull()) {\n        emit captureFailed(tr(\"Could not capture the screen\"));\n        return;\n    }\n    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n    QRect selection = req.selection();\n    if (selection.isNull()) {\n        selection = capture.rect();\n    } else {\n        selection = capture.rect().intersected(selection);\n    }\n    exportCapture(capture, selection, req);\n}", "CodeBleu_score": 49.26602617911714}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\tifdef Q_OS_WIN\n    QScreen* screen = QGuiApplication::primaryScreen();\n    QPixmap pixmap = screen->grabWindow(0);\n#else\n    QPixmap pixmap = QGuiApplication::primaryScreen()->grabWindow(0);\n#endif\n    QRect selection = req.selection();\n    if (!selection.isNull()) {\n        QPixmap croppedPixmap = pixmap.copy(selection);\n        exportCapture(croppedPixmap, selection, req);\n    } else {\n        exportCapture(pixmap, selection, req);\n    }\n}", "CodeBleu_score": 46.691926513621944}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\tifdef Q_OS_WIN\n    if (req.captureMode() == CaptureRequest::CAPTURE_MODE_WINDOW) {\n        QMessageBox::warning(\n          nullptr,\n          tr(\"Unsupported\"),\n          tr(\"Window mode is not supported on Windows.\"));\n        return;\n    }\n#endif\n    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n    QScreen* screen = QGuiApplication::primaryScreen();\n    QPixmap capture = screen->grabWindow(0);\n    if (req.selection().isNull()) {\n        exportCapture(capture, req);\n    } else {\n        exportCapture(capture.copy(req.selection()), req);\n    }\n}", "CodeBleu_score": 47.96300288602055}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#ifdef Q_OS_LINUX\n    if (instance) {\n        instance->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n        QByteArray data;\n        QDataStream stream(&data, QIODevice::WriteOnly);\n        stream << capture;\n        m.setArguments({data});\n        call(m);\n    }\n#endif\n}", "CodeBleu_score": 74.9763836675501}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t\tif (instance) {\n\t\tinstance->attachScreenshotToClipboard(capture);\n\t} else {\n\t\tQDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n\t\tQByteArray ba;\n\t\tQDataStream ds(&ba, QIODevice::WriteOnly);\n\t\tds << capture;\n\t\tm.setArguments({QVariant::fromValue(ba)});\n\t\tcall(m);\n\t}\n}", "CodeBleu_score": 63.426037681646406}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#ifdef Q_OS_WIN\n    if (capture.isNull()) {\n        return;\n    }\n    if (instance) {\n        instance->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n        QByteArray data;\n        QDataStream stream(&data, QIODevice::WriteOnly);\n        stream << capture;\n        m.setArguments({data});\n        call(m);\n    }\n#else\n    Q_UNUSED(capture);\n#endif\n}", "CodeBleu_score": 74.31275631672712}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#ifdef Q_OS_LINUX\n    if (!notification.isEmpty()) {\n        QProcess::execute(QString(\"notify-send \\\"%1\\\"\").arg(notification));\n    }\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->setText(text);\n#else\n    Q_UNUSED(notification)\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->setText(text);\n#endif\n}", "CodeBleu_score": 60.78084277967316}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#ifdef Q_OS_WIN\n    if (notification.size() > 0) {\n        qDebug() << notification;\n    }\n    QApplication::clipboard()->setText(text);\n#elif defined(Q_OS_LINUX)\n    if (notification.size() > 0) {\n        qDebug() << notification;\n    }\n    QApplication::clipboard()->setText(text, QClipboard::Clipboard);\n#elif defined(Q_OS_MACOS)\n    if (notification.size() > 0) {\n        qDebug() << notification;\n    }\n    QApplication::clipboard()->setText(text, QClipboard::Clipboard);\n#endif\n}", "CodeBleu_score": 43.00703876736522}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#ifdef Q_OS_WIN\n    if (!notification.isEmpty()) {\n        qDebug() << notification;\n    }\n    QApplication::clipboard()->setText(text);\n#else\n    if (!notification.isEmpty()) {\n        qDebug() << notification;\n    }\n    QApplication::clipboard()->setText(text, QClipboard::Clipboard);\n    if (m_clipboardIsHosted) {\n        m_clipboard->blockSignals(true);\n        m_clipboard->setText(text, QClipboard::Clipboard);\n        m_clipboard->blockSignals(false);\n    }\n#endif\n}", "CodeBleu_score": 49.27339328183263}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tif (context.getCaptureRequest().hasPinTask()) {\n\t\tauto pinTask = context.getCaptureRequest().getPinTask();\n\t\tauto widgetOffset = context.getWidgetOffset();\n\t\tpinTask->setGeometry(pinTask->getGeometry().translated(widgetOffset));\n\t\tcontext.getCaptureRequest().addTask(pinTask);\n\t}\n\tcontext.getCaptureRequest().setAccept(true);\n\temit close();\n}", "CodeBleu_score": 38.04640716710025}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tif (context.request) {\n\t\tif (context.request->hasPinTask()) {\n\t\t\tauto pinTask = context.request->getPinTask();\n\t\t\tauto selection = context.selection;\n\t\t\tauto offset = context.offset;\n\t\t\tauto widget = context.widget;\n\t\t\tif (widget) {\n\t\t\t\tauto widgetOffset = widget->getOffset();\n\t\t\t\tselection.x += widgetOffset.x;\n\t\t\t\tselection.y += widgetOffset.y;\n\t\t\t}\n\t\t\tpinTask->setGeometry(selection);\n\t\t\tcontext.request->addTask(pinTask);\n\t\t}\n\t\tcontext.request->setCaptureDone(true);\n\t\tcontext.request->setCloseGui(true);\n\t\temit request(context.request);\n\t}\n}", "CodeBleu_score": 42.26736367560941}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tif (context.captureRequest.has_value()) {\n\t\tcontext.captureRequest->done = true;\n\t\tif (context.captureRequest->hasPinTask()) {\n\t\t\tauto& pinTask = context.captureRequest->pinTask;\n\t\t\tauto widgetOffset = context.widgetOffset;\n\t\t\tauto& selection = context.captureRequest->selection;\n\t\t\tselection.x -= widgetOffset.x;\n\t\t\tselection.y -= widgetOffset.y;\n\t\t}\n\t\tcontext.captureRequest.reset();\n\t}\n\temit close();\n}", "CodeBleu_score": 45.54892095793214}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t QT_VERSION < QT_VERSION_CHECK(5, 15, 0)\n    const QStringList files = dir.entryList(QStringList(QStringLiteral(\"*.desktop\")),\n                                            QDir::Files | QDir::NoDotAndDotDot);\n#else\n    const QStringList files = dir.entryList(QStringList(QStringLiteral(\"*.desktop\")),\n                                            QDir::Files | QDir::NoDotAndDotDot | QDir::NoSymLinks);\n#endif\n    int newEntries = 0;\n    for (const QString& file : files) {\n        bool ok = true;\n        DesktopAppData data = parseDesktopFile(dir.absoluteFilePath(file), ok);\n        if (ok) {\n            m_applicationList.append(data);\n            newEntries++;\n        }\n    }\n    return newEntries;\n}", "CodeBleu_score": 53.56166747031974}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t QT_VERSION >= QT_VERSION_CHECK(5, 0, 0)\n    QStringList filters;\n    filters << QStringLiteral(\"*.desktop\");\n    QFileInfoList list = dir.entryInfoList(filters, QDir::Files);\n#else\n    QFileInfoList list = dir.entryInfoList(QStringList() << QStringLiteral(\"*.desktop\"), QDir::Files);\n#endif\n    int initialSize = m_appList.size();\n    foreach (const QFileInfo& fileInfo, list) {\n        bool ok;\n        DesktopAppData data = parseDesktopFile(fileInfo.absoluteFilePath(), ok);\n        if (ok) {\n            m_appList.append(data);\n        }\n    }\n    return m_appList.size() - initialSize;\n}", "CodeBleu_score": 52.81383808486828}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t QT_VERSION >= QT_VERSION_CHECK(5, 15, 0)\n    QDirIterator it(dir, QDirIterator::Subdirectories);\n#else\n    QDirIterator it(dir, QDirIterator::NoIteratorFlags);\n#endif\n    int added = 0;\n    while (it.hasNext()) {\n        it.next();\n        if (it.fileInfo().isDir() ||!it.fileInfo().fileName().endsWith(QLatin1String(\".desktop\"))) {\n            continue;\n        }\n        bool ok;\n        DesktopAppData data = parseDesktopFile(it.filePath(), ok);\n        if (ok) {\n            m_appList.append(data);\n            ++added;\n        }\n    }\n    return added;\n}", "CodeBleu_score": 40.97726928446272}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> groupedApps;\n\tfor (const DesktopAppData& app : m_apps) {\n\t\tfor (const QString& category : app.categories) {\n\t\t\tif (categories.contains(category)) {\n\t\t\t\tgroupedApps[category].append(app);\n\t\t\t}\n\t\t}\n\t}\n\treturn groupedApps;\n}", "CodeBleu_score": 70.77655764639695}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> groupedApps;\n\n\tfor (const DesktopAppData& app : m_apps) {\n\t\tfor (const QString& category : app.categories) {\n\t\t\tif (categories.contains(category)) {\n\t\t\t\tgroupedApps[category].push_back(app);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn groupedApps;\n}", "CodeBleu_score": 70.30691142726133}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t\tQMap<QString, QVector<DesktopAppData>> result;\n\n\tfor (const DesktopAppData& app : m_appList) {\n\t\tfor (const QString& category : app.categories) {\n\t\t\tif (categories.contains(category)) {\n\t\t\t\tif (!result.contains(category)) {\n\t\t\t\t\tresult[category] = QVector<DesktopAppData>();\n\t\t\t\t}\n\t\t\t\tresult[category].append(app);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 69.01305315042974}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t#ifdef QT_DEBUG\n    Q_ASSERT(path.contains(QLatin1String(\".\")));\n#endif\n\n    QFile file(path);\n    if (!file.open(QIODevice::WriteOnly)) {\n        AbstractLogger::error(AbstractLogger::Stderr)\n            << messagePrefix << \"Could not open file for writing: \" << path;\n        return false;\n    }\n\n    const QString extension = path.section(QLatin1Char('.'), -1, -1);\n    const QString saveMessage =\n        messagePrefix + \"Saved screenshot to \" + path + \" (\" + extension + \")\";\n    const bool success =\n        extension == QLatin1String(\"jpg\") || extension == QLatin1String(\"jpeg\")\n           ? capture.save(&file, \"JPG\", 90)\n            : capture.save(&file, extension.toUtf8());\n    if (success) {\n        AbstractLogger::info(AbstractLogger::Stderr) << saveMessage;\n    } else {\n        AbstractLogger::error(AbstractLogger::Stderr)\n            << saveMessage << \" (error: \" << file.errorString() << \")\";\n    }\n\n    return success;\n}", "CodeBleu_score": 38.882780244668325}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t//    QFile file(path);\n//    if (!file.open(QIODevice::WriteOnly)) {\n//        return false;\n//    }\n//    const QImage image = capture.toImage();\n//    const QByteArray data = image.save(path, \"JPG\", 75);\n//    if (data.isEmpty()) {\n//        return false;\n//    }\n//    const QString message = QString(\"%1: %2\").arg(messagePrefix).arg(path);\n//    if (data.isEmpty()) {\n//        AbstractLogger::error(AbstractLogger::Stderr) << message\n//                                                      << \" (error saving file)\";\n//    } else {\n//        AbstractLogger::info(AbstractLogger::Stderr) << message;\n//    }\n//    return true;\n    return false;\n}", "CodeBleu_score": 2.0019954696273876}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t//    QString saveMessage = messagePrefix + \" \" + path;\n//    if (capture.save(path, \"PNG\")) {\n//        AbstractLogger::info(AbstractLogger::Stdout) << saveMessage;\n//        return true;\n//    }\n//    AbstractLogger::error(AbstractLogger::Stdout) << saveMessage;\n//    return false;\n}", "CodeBleu_score": 1.9844166129941796}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tstd::vector<std::string> active_modpacks;\n\tactive_modpacks.clear();\n\tfor (const std::string &modpack_id : load_order) {\n\t\tif (modpack_id == \"none\") {\n\t\t\tcontinue;\n\t\t}\n\t\tModpack *modpack = Modpack::get_modpack(modpack_id);\n\t\tif (modpack == nullptr) {\n\t\t\tstd::string message = \"Could not find modpack with ID \" + modpack_id;\n\t\t\tlogger->log(message, LogLevel::WARNING);\n\t\t\tcontinue;\n\t\t}\n\t\tactive_modpacks.push_back(modpack_id);\n\t\tmodpack->activate();\n\t}\n\tthis->active_modpacks = active_modpacks;\n\tstd::string message = \"Activated modpacks: \";\n\tfor (const std::string &modpack_id : active_modpacks) {\n\t\tmessage += modpack_id + \", \";\n\t}\n\tlogger->log(message, LogLevel::DEBUG);\n}", "CodeBleu_score": 43.171331819259095}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\t// Clear the currently active modpacks\n\tactive_modpacks.clear();\n\n\t// Iterate through the provided load order\n\tfor (const auto &modpack_id : load_order) {\n\t\t// Retrieve the corresponding modpack from the available modpacks\n\t\tauto modpack = available_modpacks.find(modpack_id);\n\n\t\t// If the modpack was found\n\t\tif (modpack!= available_modpacks.end()) {\n\t\t\t// Activate the modpack by adding it to the active modpacks\n\t\t\tactive_modpacks.push_back(modpack->second);\n\n\t\t\t// Generate a log message for the activated modpack\n\t\t\tstd::string log_message = \"Activated modpack \" + modpack->second->id;\n\t\t\tlog_message += \": \" + modpack->second->name;\n\t\t\tlog_message += \" (\" + modpack->second->version + \")\";\n\t\t\tlog_message += \" by \" + modpack->second->author;\n\t\t\tlog_message += \" (\" + modpack->second->author_url + \")\";\n\t\t\tlog_message += \" from \" + modpack->second->url;\n\t\t\tlog_message += \".\";\n\n\t\t\t// Log the log message\n\t\t\tlog(log_message);\n\t\t}\n\t\t// If the modpack was not found\n\t\telse {\n\t\t\t// Generate a log message for the missing modpack\n\t\t\tstd::string log_message = \"Failed to activate modpack \" + modpack_id + \": Modpack not found.\";\n\n\t\t\t// Log the log message\n\t\t\tlog(log_message);\n\t\t}\n\t}\n}", "CodeBleu_score": 42.04550945550142}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\t// Clear the active modpacks\n\tactive_modpacks.clear();\n\n\t// Iterate through the load order\n\tfor (const auto &modpack_id : load_order) {\n\t\t// Retrieve the modpack\n\t\tauto modpack = available_modpacks.find(modpack_id);\n\t\tif (modpack == available_modpacks.end()) {\n\t\t\t// Modpack not found\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack_id + \" not found\");\n\t\t}\n\n\t\t// Activate the modpack\n\t\tactive_modpacks.push_back(modpack->second);\n\t\tlog_message(\"Activated modpack \" + modpack->second->id);\n\t}\n}", "CodeBleu_score": 47.65153783780266}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\t//check if all modpacks are available\n\tfor (auto &modpack : load_order) {\n\t\tif (!is_modpack_available(modpack)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" is not available\");\n\t\t}\n\t}\n\n\t//check if all dependencies are satisfied\n\tfor (auto &modpack : load_order) {\n\t\tif (!are_dependencies_satisfied(modpack)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" has unsatisfied dependencies\");\n\t\t}\n\t}\n\n\t//check if no conflicts exist\n\tfor (auto &modpack : load_order) {\n\t\tif (!are_conflicts_resolved(modpack)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" has conflicts\");\n\t\t}\n\t}\n\n\t//update load order\n\t_load_order = load_order;\n}", "CodeBleu_score": 28.865449717124964}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> requested_modpacks;\n\tfor (auto modpack_name : load_order) {\n\t\trequested_modpacks.insert(modpack_name);\n\t}\n\n\t// Check if all requested modpacks are available\n\tfor (auto modpack_name : requested_modpacks) {\n\t\tif (!is_modpack_available(modpack_name)) {\n\t\t\tthrow std::runtime_error(\"Requested modpack is not available: \" + modpack_name);\n\t\t}\n\t}\n\n\t// Check if all requested modpacks satisfy their dependencies\n\tfor (auto modpack_name : requested_modpacks) {\n\t\tif (!satisfies_dependencies(modpack_name, requested_modpacks)) {\n\t\t\tthrow std::runtime_error(\"Requested modpack does not satisfy its dependencies: \" + modpack_name);\n\t\t}\n\t}\n\n\t// Check if no conflicts exist between requested modpacks\n\tfor (auto modpack_name : requested_modpacks) {\n\t\tif (!no_conflicts(modpack_name, requested_modpacks)) {\n\t\t\tthrow std::runtime_error(\"Requested modpack conflicts with another modpack: \" + modpack_name);\n\t\t}\n\t}\n\n\t// Update the load order\n\tthis->load_order = requested_modpacks;\n}", "CodeBleu_score": 37.96370187524472}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t", "CodeBleu_score": 5.103679706177208}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (const auto &file : sound_files) {\n\t\tstd::string key = file.category + \"_\" + file.id;\n\t\tif (resources.find(key) == resources.end()) {\n\t\t\tresources[key] = al_load_sample(file.path.c_str());\n\t\t}\n\t}\n}", "CodeBleu_score": 42.62626261894124}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (const auto &sound_file : sound_files) {\n\t\tauto key = sound_file.category + std::to_string(sound_file.id);\n\t\tif (resources.find(key)!= resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tresources.insert(std::make_pair(key, sound_file));\n\t}\n}", "CodeBleu_score": 52.94020364315097}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (auto &sound_file : sound_files) {\n\t\tif (resources.count(sound_file.category) == 0) {\n\t\t\tresources[sound_file.category] = std::map<std::string, sf::SoundBuffer *>();\n\t\t}\n\t\tif (resources[sound_file.category].count(sound_file.id) == 0) {\n\t\t\tauto sound_buffer = new sf::SoundBuffer();\n\t\t\tif (sound_buffer->loadFromFile(sound_file.path)) {\n\t\t\t\tresources[sound_file.category][sound_file.id] = sound_buffer;\n\t\t\t} else {\n\t\t\t\tdelete sound_buffer;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.21998616284829}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (audio_manager_ == nullptr) {\n\t\tthrow std::runtime_error(\"Audio manager is not available\");\n\t}\n\tauto resource = resources_.find(std::make_pair(category, id));\n\tif (resource == resources_.end()) {\n\t\tthrow std::runtime_error(\"Sound resource does not exist\");\n\t}\n\treturn Sound(audio_manager_, resource->second);\n}", "CodeBleu_score": 40.349983232487006}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (!is_available()) {\n\t\tthrow std::runtime_error(\"AudioManager is not available.\");\n\t}\n\n\tauto it = resources.find({category, id});\n\tif (it == resources.end()) {\n\t\tthrow std::runtime_error(\"Sound resource does not exist.\");\n\t}\n\n\treturn Sound(this, it->second);\n}", "CodeBleu_score": 28.481571509847868}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (!is_available()) {\n\t\tthrow std::runtime_error(\"AudioManager is not available\");\n\t}\n\n\tauto resource = resources.find(std::make_pair(category, id));\n\tif (resource == resources.end()) {\n\t\tthrow std::runtime_error(\"Sound resource does not exist\");\n\t}\n\n\treturn Sound(this, resource->second);\n}", "CodeBleu_score": 35.42746456490369}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\t// TODO: Check if sound already exists in playing list\n\tauto category = sound->get_category();\n\tif (category == \"background\") {\n\t\tplaying_sounds_background.push_back(sound);\n\t} else if (category == \"effects\") {\n\t\tplaying_sounds_effects.push_back(sound);\n\t} else if (category == \"voice\") {\n\t\tplaying_sounds_voice.push_back(sound);\n\t} else if (category == \"music\") {\n\t\tplaying_sounds_music.push_back(sound);\n\t}\n}", "CodeBleu_score": 51.89571202368559}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tstd::string category = sound->get_category();\n\tauto it = playing_sounds.find(category);\n\tif (it!= playing_sounds.end()) {\n\t\tit->second.push_back(sound);\n\t}\n\telse {\n\t\tstd::vector<std::shared_ptr<SoundImpl>> new_list;\n\t\tnew_list.push_back(sound);\n\t\tplaying_sounds.insert(std::pair<std::string, std::vector<std::shared_ptr<SoundImpl>>>(category, new_list));\n\t}\n}", "CodeBleu_score": 56.920354151389986}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tstd::lock_guard<std::mutex> lock(mutex);\n\tif (sound->get_category() == \"music\") {\n\t\tmusic_list.push_back(sound);\n\t} else {\n\t\tsound_list.push_back(sound);\n\t}\n}", "CodeBleu_score": 35.75127415736325}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\t// Acquire the mutex\n\tpthread_mutex_lock(&mutex);\n\n\t// Calculate the elapsed time since the last check\n\tdouble elapsed_time = get_time() - last_check_time;\n\n\t// If no time has passed, sleep briefly to prevent stalling\n\tif (elapsed_time < 0.0000001) {\n\t\tusleep(1000);\n\t}\n\n\t// If the elapsed time exceeds the maximum tick time, update the simulated time and real time by the maximum tick time adjusted by the clock's speed\n\telse if (elapsed_time > max_tick_time / speed) {\n\t\tsimulated_time += max_tick_time / speed;\n\t\treal_time += max_tick_time;\n\t\tlast_check_time = get_time();\n\t}\n\n\t// Otherwise, update these times by the actual elapsed time\n\telse {\n\t\tsimulated_time += elapsed_time;\n\t\treal_time += elapsed_time;\n\t\tlast_check_time = get_time();\n\t}\n\n\t// Release the mutex\n\tpthread_mutex_unlock(&mutex);\n}", "CodeBleu_score": 31.485513268868804}, {"code": "void Clock::update_time(){\n\t\tif (state == RUNNING) {\n\t\tpthread_mutex_lock(&mutex);\n\t\tdouble elapsed = get_time() - last_check;\n\t\tif (elapsed < max_tick) {\n\t\t\tusleep((max_tick - elapsed) * 1000000);\n\t\t}\n\t\tif (elapsed > max_tick) {\n\t\t\tsim_time += max_tick * speed;\n\t\t\treal_time += max_tick;\n\t\t} else {\n\t\t\tsim_time += elapsed * speed;\n\t\t\treal_time += elapsed;\n\t\t}\n\t\tlast_check = get_time();\n\t\tpthread_mutex_unlock(&mutex);\n\t}\n}", "CodeBleu_score": 31.071355686812485}, {"code": "void Clock::update_time(){\n\t\t// Acquire the mutex\n\tpthread_mutex_lock(&mutex);\n\t// Check if the clock is in the RUNNING state\n\tif (state == RUNNING) {\n\t\t// Get the current time\n\t\tstruct timespec current_time;\n\t\tclock_gettime(CLOCK_REALTIME, &current_time);\n\t\t// Calculate the elapsed time since the last check\n\t\tdouble elapsed_time = (current_time.tv_sec - last_check.tv_sec) + (current_time.tv_nsec - last_check.tv_nsec) / 1000000000.0;\n\t\t// If no time has passed, sleep briefly to prevent stalling\n\t\tif (elapsed_time == 0) {\n\t\t\tusleep(1000);\n\t\t}\n\t\t// If the elapsed time exceeds the maximum tick time, update the simulated time and real time by the maximum tick time adjusted by the clock's speed\n\t\telse if (elapsed_time > max_tick_time) {\n\t\t\tsimulated_time += max_tick_time * speed;\n\t\t\treal_time += max_tick_time;\n\t\t\tlast_check = current_time;\n\t\t}\n\t\t// Otherwise, update these times by the actual elapsed time\n\t\telse {\n\t\t\tsimulated_time += elapsed_time * speed;\n\t\t\treal_time += elapsed_time;\n\t\t\tlast_check = current_time;\n\t\t}\n\t}\n\t// Release the mutex\n\tpthread_mutex_unlock(&mutex);\n}", "CodeBleu_score": 33.538352245622875}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat xz_distance = sqrt(pow(scene_pos[0] - position[0], 2) + pow(scene_pos[2] - position[2], 2));\n\tfloat y_delta = scene_pos[1] - position[1];\n\tfloat theta = atan2(y_delta, xz_distance);\n\tfloat x_new = position[0] + xz_distance * cos(theta);\n\tfloat z_new = position[2] + xz_distance * sin(theta);\n\tposition[0] = x_new;\n\tposition[2] = z_new;\n}", "CodeBleu_score": 34.8265956574714}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\t// Calculate the vertical distance between the current and target scene positions.\n\tfloat y_delta = scene_pos.y() - this->pos.y();\n\n\t// Calculate the horizontal distance based on a trigonometric relationship.\n\tfloat xz_distance = sqrt(pow(scene_pos.x() - this->pos.x(), 2) + pow(scene_pos.z() - this->pos.z(), 2));\n\n\t// Determine the new camera position by adjusting the x and z coordinates while keeping the height unchanged.\n\tfloat x = this->pos.x() + (xz_distance * cos(this->yaw));\n\tfloat z = this->pos.z() + (xz_distance * sin(this->yaw));\n\n\t// Move the camera to the new position.\n\tthis->pos.x() = x;\n\tthis->pos.y() = this->pos.y() + y_delta;\n\tthis->pos.z() = z;\n}", "CodeBleu_score": 29.66804024538625}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = scene_pos[1] - position[1];\n\tfloat xz_distance = sqrt(pow(scene_pos[0] - position[0], 2) + pow(scene_pos[2] - position[2], 2));\n\tfloat x_delta = xz_distance * sin(y_delta / xz_distance);\n\tfloat z_delta = xz_distance * cos(y_delta / xz_distance);\n\tposition[0] += x_delta;\n\tposition[2] += z_delta;\n}", "CodeBleu_score": 34.03294654587686}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (url.scheme() == \"file\") {\n\t\tif (url.toLocalFile().endsWith(\".sf2\", Qt::CaseInsensitive)) {\n\t\t\treturn DragTarget::SoundFont;\n\t\t} else if (url.toLocalFile().endsWith(\".zip\", Qt::CaseInsensitive)) {\n\t\t\treturn DragTarget::Extension;\n\t\t}\n\t}\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 51.62841536538901}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t", "CodeBleu_score": 6.078294666521647}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (url.isEmpty()) {\n\t\treturn DragTarget::Unknown;\n\t}\n\n\tif (url.scheme() == \"file\") {\n\t\tconst QString filePath = url.toLocalFile();\n\t\tif (QFileInfo(filePath).exists()) {\n\t\t\tif (QFileInfo(filePath).isDir()) {\n\t\t\t\treturn DragTarget::Directory;\n\t\t\t} else {\n\t\t\t\tif (filePath.endsWith(\".sf2\", Qt::CaseInsensitive)) {\n\t\t\t\t\treturn DragTarget::SoundFont;\n\t\t\t\t} else {\n\t\t\t\t\tconst QString extension = QFileInfo(filePath).suffix();\n\t\t\t\t\tif (extension.isEmpty()) {\n\t\t\t\t\t\treturn DragTarget::Unknown;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (extension.compare(\"sf2\", Qt::CaseInsensitive) == 0) {\n\t\t\t\t\t\treturn DragTarget::SoundFont;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (extension.compare(\"zip\", Qt::CaseInsensitive) == 0) {\n\t\t\t\t\t\treturn DragTarget::Extension;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn DragTarget::Unknown;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn DragTarget::Unknown;\n}", "CodeBleu_score": 58.40976180717371}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tmuse::io::path_t sessionConfigPath = muse::io::path_t(muse::io::path_t::join(muse::io::path_t::get_home_dir(), \".muse\"));\n\tmuse::io::path_t sessionConfigFilePath = muse::io::path_t(muse::io::path_t::join(sessionConfigPath, \"config.json\"));\n\tstd::vector<muse::io::path_t> projectPaths;\n\tif (muse::io::path_t::exists(sessionConfigFilePath)) {\n\t\tnlohmann::json sessionConfig = nlohmann::json::parse(muse::io::path_t::read_file(sessionConfigFilePath));\n\t\tprojectPaths = sessionConfig[\"projects\"].get<std::vector<muse::io::path_t>>();\n\t}\n\tstd::vector<muse::io::path_t>::iterator it = std::find(projectPaths.begin(), projectPaths.end(), projectPath);\n\tif (it!= projectPaths.end()) {\n\t\tprojectPaths.erase(it);\n\t}\n\tsessionConfig[\"projects\"] = projectPaths;\n\tmuse::io::path_t::write_file(sessionConfigFilePath, sessionConfig.dump(4));\n}", "CodeBleu_score": 34.326072948393225}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tstd::vector<muse::io::path_t> projectPaths = muse::session::getProjectsPaths();\n\tauto it = std::find(projectPaths.begin(), projectPaths.end(), projectPath);\n\tif (it!= projectPaths.end()) {\n\t\tprojectPaths.erase(it);\n\t\tmuse::session::setProjectsPaths(projectPaths);\n\t}\n}", "CodeBleu_score": 52.39398588386344}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tmuse::io::path_t sessionPath = muse::io::path_t::join(muse::io::path_t::join(muse::io::path_t::home(), \".muse\"), \"session.json\");\n\tif (muse::io::path_t::exists(sessionPath)) {\n\t\tmuse::io::json::json_t session = muse::io::json::load(sessionPath);\n\t\tmuse::io::json::json_t projects = session[\"projects\"];\n\t\tstd::vector<muse::io::path_t> projectPaths;\n\t\tfor (auto project : projects) {\n\t\t\tprojectPaths.push_back(project.get<std::string>());\n\t\t}\n\t\tfor (auto projectPathIterator = projectPaths.begin(); projectPathIterator!= projectPaths.end(); ++projectPathIterator) {\n\t\t\tif (*projectPathIterator == projectPath) {\n\t\t\t\tprojectPaths.erase(projectPathIterator);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tsession[\"projects\"] = projectPaths;\n\t\tmuse::io::json::save(session, sessionPath);\n\t}\n}", "CodeBleu_score": 38.45212347131339}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t\tQVariantList result;\n\tfor (auto theme : uiConfiguration()->themes()) {\n\t\tQVariantMap map = theme.toMap();\n\t\tif (map[\"code\"].toString() == \"high-contrast-white\" || map[\"code\"].toString() == \"high-contrast-black\") {\n\t\t\tresult.append(map);\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 44.99833422892298}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t\tQVariantList result;\n\n\tfor (const ThemeList::Theme &theme : uiConfiguration()->themes()) {\n\t\tif (theme.code() == \"high-contrast-white\" || theme.code() == \"high-contrast-black\") {\n\t\t\tresult.append(QVariant::fromValue(QVariantMap{\n\t\t\t\t{ \"name\", theme.name() },\n\t\t\t\t{ \"code\", theme.code() },\n\t\t\t\t{ \"colorScheme\", theme.colorScheme() }\n\t\t\t}));\n\t\t}\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 52.92011087162764}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t\tQVariantList result;\n\tconst QVariantList themes = allThemes();\n\tfor (int i = 0; i < themes.size(); ++i) {\n\t\tconst QVariantMap theme = themes.at(i).toMap();\n\t\tif (theme.contains(\"code\") && (theme[\"code\"].toString() == \"high-contrast-white\" || theme[\"code\"].toString() == \"high-contrast-black\")) {\n\t\t\tresult.append(theme);\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 47.13024995860599}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tQVariantList pages;\n\tauto childPages = [&](const QStandardItem *item) {\n\t\tfor (int i = 0; i < item->rowCount(); i++) {\n\t\t\tQVariantMap page;\n\t\t\tpage.insert(\"id\", item->child(i)->data(Qt::UserRole));\n\t\t\tpage.insert(\"path\", item->child(i)->data(Qt::DisplayRole));\n\t\t\tpages.append(page);\n\t\t\tchildPages(item->child(i));\n\t\t}\n\t};\n\tchildPages(rootItem());\n\treturn pages;\n}", "CodeBleu_score": 36.946775032434566}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tauto childPages = [&](QStandardItem *item) -> QVariantList {\n\t\tQVariantList result;\n\t\tfor (int i = 0; i < item->rowCount(); ++i) {\n\t\t\tauto child = item->child(i);\n\t\t\tauto page = QVariantMap();\n\t\t\tpage.insert(\"id\", child->data(Qt::UserRole));\n\t\t\tpage.insert(\"path\", child->data(Qt::UserRole + 1));\n\t\t\tresult.append(page);\n\t\t\tresult.append(childPages(child));\n\t\t}\n\t\treturn result;\n\t};\n\treturn childPages(m_rootItem);\n}", "CodeBleu_score": 48.6291318459904}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tQVariantList pages;\n\tauto childPages = [this, &pages](const QStandardItem* item) {\n\t\tfor (int i = 0; i < item->rowCount(); i++) {\n\t\t\tQVariantMap page;\n\t\t\tpage.insert(\"id\", item->child(i)->data(Qt::UserRole + 1).toString());\n\t\t\tpage.insert(\"path\", item->child(i)->data(Qt::UserRole + 2).toString());\n\t\t\tpages.append(page);\n\t\t\tchildPages(item->child(i));\n\t\t}\n\t};\n\tchildPages(rootItem());\n\treturn pages;\n}", "CodeBleu_score": 40.87692203339877}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList recentScoresItems;\n\tQStringList recentScores = settings->value(RECENT_SCORES_KEY).toStringList();\n\tfor (int i = 0; i < recentScores.size(); i++) {\n\t\tMenuItem recentScoresItem;\n\t\trecentScoresItem.actionCode = \"file-open\";\n\t\trecentScoresItem.displayName = recentScores[i];\n\t\trecentScoresItem.icon = \"cloud\";\n\t\trecentScoresItem.id = makeId(\"file-open\", i);\n\t\trecentScoresItem.selectable = true;\n\t\trecentScoresItem.arguments.push_back(recentScores[i]);\n\t\trecentScoresItem.arguments.push_back(recentScores[i]);\n\t\trecentScoresItems.push_back(recentScoresItem);\n\t}\n\treturn recentScoresItems;\n}", "CodeBleu_score": 26.47370490508073}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList recentScoresItems;\n\tfor (int i = 0; i < m_recentScores.size(); i++) {\n\t\tQString displayName = m_recentScores.at(i).displayName();\n\t\tQString url = m_recentScores.at(i).url();\n\t\tQString icon = m_recentScores.at(i).isCloud()? \":/images/cloud.png\" : \":/images/file.png\";\n\n\t\tMenuItem item;\n\t\titem.setDisplayName(displayName);\n\t\titem.setUrl(url);\n\t\titem.setIcon(icon);\n\t\titem.setActionCode(ActionCode::fileOpen);\n\t\titem.setArguments(QStringList() << url << displayName);\n\t\titem.setSelectable(true);\n\t\titem.setUniqueID(makeId(ActionCode::fileOpen, i));\n\t\titem.setEnabled(true);\n\t\trecentScoresItems.append(item);\n\t}\n\treturn recentScoresItems;\n}", "CodeBleu_score": 36.096139235536384}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList recentScores;\n\tQStringList recentFiles = QSettings().value(\"recentFileList\").toStringList();\n\n\tfor (int i = 0; i < recentFiles.size(); ++i) {\n\t\tMenuItem recentFile;\n\t\trecentFile.actionCode = \"file-open\";\n\t\trecentFile.text = recentFiles.at(i);\n\t\trecentFile.icon = QIcon(QString::fromStdString(cloudIcon));\n\t\trecentFile.id = makeId(\"file-open\", i);\n\t\trecentFile.enabled = true;\n\t\trecentFile.selectable = true;\n\t\trecentFile.arguments.append(recentFiles.at(i));\n\t\trecentFile.arguments.append(recentFiles.at(i));\n\t\trecentScores.append(recentFile);\n\t}\n\n\treturn recentScores;\n}", "CodeBleu_score": 28.25913928855427}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tf DEBUG_NAVIGATION_MODEL\n    qDebug() << \"NavigableAppMenuModel::openMenu\" << menuId << byHover;\n#endif\n\n    if (isNavigationStarted()) {\n        setHighlightedMenuId(menuId);\n        return;\n    }\n\n    if (!byHover && isMenuOpened()) {\n        saveMUNavigationSystemState();\n    }\n\n    emit openMenuRequested(menuId, byHover);\n}", "CodeBleu_score": 44.50972583167317}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\tisNavigationStarted()) {\n\t\tsetHighlightedMenuId(menuId);\n\t} else {\n\t\tif (!isMenuOpened() &&!byHover) {\n\t\t\tsaveMUNavigationSystemState();\n\t\t}\n\t\tif (byHover) {\n\t\t\trestoreMUNavigationSystemState();\n\t\t}\n\t}\n\n\temit openMenu(menuId, byHover);\n}", "CodeBleu_score": 48.52102397574721}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t qDebug() << \"NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover)\";\n    if (!isNavigationStarted()) {\n        return;\n    }\n\n    if (!isMenuOpened() &&!byHover) {\n        saveMUNavigationSystemState();\n    }\n\n    if (isMenuOpened()) {\n        setHighlightedMenuId(menuId);\n    } else {\n        setHighlightedMenuId(QString());\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 53.66800627734275}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t/    if (!notation()) {\n//        return {};\n//    }\n\n//    ViewMode currentViewMode = notation()->viewMode();\n\n//    for (const ViewMode& viewMode: ALL_MODE_MAP.keys()) {\n//        ActionCode code = ALL_MODE_MAP[viewMode];\n//        if (viewMode == ViewMode::FLOAT &&!globalConfiguration()->devModeEnabled()) {\n//            continue;\n//        }\n//        UiAction action = actionsRegister()->action(code);\n//        if (currentViewMode == viewMode) {\n//            if (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM) {\n//                setText(tr(\"Continuous view\"));\n//            }\n//            return action.data();\n//        }\n//    }\n\n//    return {};\n    return QVariant();\n}", "CodeBleu_score": 9.237604230248646}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t/    if (!notation()) {\n//        return {};\n//    }\n\n//    ViewMode currentViewMode = notation()->viewMode();\n\n//    for (const ViewMode& viewMode: ALL_MODE_MAP.keys()) {\n//        if (viewMode == currentViewMode) {\n//            if (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM) {\n//                return QVariant::fromValue(QStringLiteral(\"Continuous view\"));\n//            } else {\n//                return QVariant::fromValue(QStringLiteral(\"Page view\"));\n//            }\n//        }\n//    }\n\n//    return {};\n}", "CodeBleu_score": 8.226403153283792}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t//    if (!notation()) {\n//        return {};\n//    }\n\n    ViewMode currentViewMode = notation()->viewMode();\n\n    for (const ViewMode& viewMode: ALL_MODE_MAP.keys()) {\n        if (viewMode == currentViewMode) {\n            return QVariant::fromValue(viewMode);\n        }\n    }\n\n    return {};\n}", "CodeBleu_score": 34.71926476402618}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tif (notation == nullptr) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\tif (notation->getScore() == nullptr) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\tif (notation->getScore()->getStaves().size() == 0) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\tif (notation->getScore()->getStaves()[0]->getParts().size() == 0) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\tif (notation->getScore()->getStaves()[0]->getParts()[0]->getMeasures().size() == 0) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\tif (notation->getScore()->getStaves()[0]->getParts()[0]->getMeasures()[0]->getVoices().size() == 0) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\tif (notation->getScore()->getStaves()[0]->getParts()[0]->getMeasures()[0]->getVoices()[0]->getNotes().size() == 0) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\tmuse::ByteArray buffer;\n\tif (write(notation, buffer)!= muse::Ret::Ok) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\tif (destinationDevice.write(buffer)!= muse::Ret::Ok) {\n\t\treturn muse::Ret::Error;\n\t}\n\n\treturn muse::Ret::Ok;\n}", "CodeBleu_score": 28.88676303190464}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tmuse::Ret ret;\n\tif (notation) {\n\t\tif (notation->isValid()) {\n\t\t\tmuse::ByteArray buffer;\n\t\t\tif ((ret = write(notation, buffer)) == muse::Ret::OK) {\n\t\t\t\tif (destinationDevice.write(buffer) == muse::Ret::OK) {\n\t\t\t\t\tret = muse::Ret::OK;\n\t\t\t\t} else {\n\t\t\t\t\tret = muse::Ret::IO_ERROR;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tret = muse::Ret::INVALID_NOTATION;\n\t\t}\n\t} else {\n\t\tret = muse::Ret::INVALID_NOTATION;\n\t}\n\treturn ret;\n}", "CodeBleu_score": 34.548740227051745}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tif (!notation) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\n\tif (!notation->isValid()) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\n\tif (!destinationDevice.isOpen()) {\n\t\treturn muse::Ret::INVALID_ARGUMENT;\n\t}\n\n\tif (destinationDevice.isWritable()) {\n\t\tmuse::ByteArray ba;\n\t\tif (write(notation, ba)) {\n\t\t\treturn destinationDevice.write(ba);\n\t\t}\n\t}\n\n\treturn muse::Ret::FAILED;\n}", "CodeBleu_score": 28.201408712997306}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::vector<std::string> lines = split_string(txt, 256);\n\tstd::string ret = \"\";\n\tfor (std::string line : lines) {\n\t\tstd::string line_braille = braille_translate(table_name, line);\n\t\tif (ret.length() > 0) {\n\t\t\tret += \" \";\n\t\t}\n\t\tret += line_braille;\n\t}\n\treturn ret;\n}", "CodeBleu_score": 46.50179287123262}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::vector<std::string> lines = split_string(txt, 256);\n\tif (lines.size() == 0) {\n\t\treturn \"\";\n\t}\n\n\tstd::string result = braille_translate(table_name, lines[0]);\n\tfor (int i = 1; i < lines.size(); i++) {\n\t\tresult += \" \" + braille_translate(table_name, lines[i]);\n\t}\n\treturn result;\n}", "CodeBleu_score": 69.49274497427929}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tuint8_t* outputbuf = nullptr;\n\tsize_t outlen = 0;\n\twidechar inbuf[MAXSTRING];\n\twidechar transbuf[MAXSTRING];\n\tint inlen = 0;\n\tint translen = 0;\n\n\tinlen = _lou_extParseChars(txt.c_str(), inbuf);\n\n\ttranslen = MAXSTRING;\n\tlou_translateString(\n\t\ttable_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n#ifdef WIDECHARS_ARE_UCS4\n\t//outputbuf = (uint8_t *) malloc (translen * sizeof(widechar) * sizeof (uint8_t));\n\toutputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n#else\n\toutputbuf = u16_to_u8(transbuf, translen, NULL, &outlen);\n#endif\n\n\tif (!outputbuf) {\n\t\treturn std::string();\n\t}\n\n\tstd::string ret = std::string(outputbuf, outputbuf + outlen);\n\tfree(outputbuf);\n\n\treturn ret;\n}", "CodeBleu_score": 38.790714232095006}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\t// Load a ProxyEntity from the given JSON path\n\tstd::shared_ptr<ProxyEntity> proxyEntity;\n\ttry {\n\t\t// Create a temporary ProxyEntity to check the validity and type of the JSON\n\t\tstd::shared_ptr<ProxyEntity> tempProxyEntity = std::make_shared<ProxyEntity>(jsonPath);\n\t\t// If the JSON is valid, create a new ProxyEntity of the determined type\n\t\tif (tempProxyEntity->IsValid()) {\n\t\t\tif (tempProxyEntity->GetType() == ProxyEntity::EntityType::PROFILE) {\n\t\t\t\tproxyEntity = std::make_shared<Profile>(jsonPath);\n\t\t\t} else if (tempProxyEntity->GetType() == ProxyEntity::EntityType::PROFILE_GROUP) {\n\t\t\t\tproxyEntity = std::make_shared<ProfileGroup>(jsonPath);\n\t\t\t}\n\t\t}\n\t\t// Check the version of the entity and, if valid, set the load control flag, assign the JSON path, and load the entity\n\t\tif (proxyEntity!= nullptr) {\n\t\t\tif (proxyEntity->GetVersion() == tempProxyEntity->GetVersion()) {\n\t\t\t\tproxyEntity->SetLoadControl(true);\n\t\t\t\tproxyEntity->SetJsonPath(jsonPath);\n\t\t\t\tproxyEntity->Load();\n\t\t\t} else {\n\t\t\t\tthrow std::runtime_error(\"The version of the entity is invalid.\");\n\t\t\t}\n\t\t} else {\n\t\t\tthrow std::runtime_error(\"The type of the entity is invalid.\");\n\t\t}\n\t} catch (std::exception &e) {\n\t\t// If an error occurs, set the error message and return a null pointer\n\t\tthis->SetErrorMessage(e.what());\n\t\tproxyEntity = nullptr;\n\t}\n\treturn proxyEntity;\n}", "CodeBleu_score": 34.978450719850926}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t", "CodeBleu_score": 5.501182108488154}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t", "CodeBleu_score": 5.501182108488154}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tQUrl url(link);\n\n\tif (!url.isValid()) {\n\t\treturn false;\n\t}\n\n\tQString protocol = url.scheme();\n\tif (protocol!= \"https\" && protocol!= \"quic\") {\n\t\treturn false;\n\t}\n\n\tQString name = url.path();\n\tQString server = url.host();\n\tQString port = url.port();\n\tQString username = url.userName();\n\tQString password = url.password();\n\n\tif (username.isEmpty() || password.isEmpty() || server.isEmpty()) {\n\t\treturn false;\n\t}\n\n\tm_name = name;\n\tm_server = server;\n\tm_port = port;\n\tm_username = username;\n\tm_password = ;\n\n\treturn true;\n}", "CodeBleu_score": 51.34532334043759}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tQUrl url(link);\n\tif (!url.isValid()) {\n\t\treturn false;\n\t}\n\n\tQString protocol = url.scheme();\n\tif (protocol!= \"https\" && protocol!= \"quic\") {\n\t\treturn false;\n\t}\n\n\tQString name = url.host();\n\tQString server = url.host();\n\tQString port = url.port();\n\tQString username = url.userName();\n\tQString password = url.password();\n\n\tif (!username.isEmpty() &&!password.isEmpty() &&!server.isEmpty()) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 47.44481937011135}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tQUrl url(link);\n\tif (!url.isValid())\n\t\treturn false;\n\n\tif (url.scheme()!= \"https\" && url.scheme()!= \"quic\")\n\t\treturn false;\n\n\tQString name = url.host();\n\tif (name.isEmpty())\n\t\treturn false;\n\n\tQString server = url.host();\n\tif (server.isEmpty())\n\t\treturn false;\n\n\tQString port = url.port();\n\tif (port.isEmpty())\n\t\treturn false;\n\n\tQString username = url.userName();\n\tif (username.isEmpty())\n\t\treturn false;\n\n\tQString password = url.password();\n\tif (password.isEmpty())\n\t\treturn false;\n\n\treturn true;\n}", "CodeBleu_score": 45.5435090830669}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t\tif (m_preSaveCallback) {\n\t\tm_preSaveCallback(this);\n\t}\n\tif (!m_allowSave) {\n\t\treturn false;\n\t}\n\tstd::string json = m_state.ToJson();\n\tif (json == m_lastSavedContent) {\n\t\treturn false;\n\t}\n\tm_lastSavedContent = json;\n\tstd::ofstream file(m_path);\n\tfile << json;\n\tfile.close();\n\treturn true;\n}", "CodeBleu_score": 33.67838032219939}, {"code": "bool JsonStore::Save(){\n\t\tif (m_preSaveCallback!= nullptr) {\n\t\tm_preSaveCallback();\n\t}\n\tif (!m_allowSave) {\n\t\treturn false;\n\t}\n\tstd::string jsonString = m_state.toJsonString();\n\tif (jsonString == m_lastSavedContent) {\n\t\treturn false;\n\t}\n\tm_lastSavedContent = jsonString;\n\tstd::ofstream file(m_fileName);\n\tif (file.is_open()) {\n\t\tfile << jsonString;\n\t\tfile.close();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 38.38669456432153}, {"code": "bool JsonStore::Save(){\n\t\tif (m_preSaveCallback) {\n\t\tm_preSaveCallback();\n\t}\n\tif (!m_saveAllowed) {\n\t\treturn false;\n\t}\n\tstd::string json = m_state.toJson();\n\tif (json!= m_lastSavedJson) {\n\t\tm_lastSavedJson = json;\n\t\tstd::ofstream file(m_filePath);\n\t\tfile << json;\n\t\tfile.close();\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 34.72570543132299}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\ttimer->setInterval(timeout);\n\tconnect(timer, &QTimer::timeout, callback);\n\ttimer->start();\n}", "CodeBleu_score": 53.27263560141906}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\ttimer->setInterval(timeout);\n\tconnect(timer, SIGNAL(timeout()), callback);\n\ttimer->start();\n}", "CodeBleu_score": 51.470340286498505}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\ttimer->setInterval(timeout);\n\ttimer->start();\n\tconnect(timer, &QTimer::timeout, callback);\n}", "CodeBleu_score": 53.27263560141906}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\t// Check for network errors\n\tif (networkReply->error()!= QNetworkReply::NoError) {\n\t\tstatusCode = networkReply->error();\n\t\treturn QByteArray();\n\t}\n\n\t// Check for server-side gRPC errors\n\tif (networkReply->hasRawHeader(\"grpc-status\")) {\n\t\tQString error = QString::fromUtf8(networkReply->rawHeader(\"grpc-message\"));\n\t\tqDebug() << \"Server-side gRPC error: \" << error;\n\t\tstatusCode = ProtocolUnknownError;\n\t\treturn QByteArray();\n\t}\n\n\t// Set status code to NoError\n\tstatusCode = NoError;\n\n\t// Return response data, excluding the gRPC message size header\n\treturn networkReply->readAll().mid(4);\n}", "CodeBleu_score": 47.657895796209914}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tif (networkReply->error()!= QNetworkReply::NoError) {\n\t\tstatusCode = networkReply->error();\n\t\treturn QByteArray();\n\t}\n\n\tQByteArray responseData = networkReply->readAll();\n\tif (responseData.size() < 12) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn QByteArray();\n\t}\n\n\tQByteArray header = responseData.left(12);\n\tQByteArray data = responseData.mid(12);\n\tif (header.size()!= 12) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn QByteArray();\n\t}\n\n\tQByteArray status = header.mid(0, 4);\n\tif (status.size()!= 4) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn QByteArray();\n\t}\n\n\tQByteArray code = header.mid(4, 4);\n\tif (code.size()!= 4) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn QByteArray();\n\t}\n\n\tQByteArray message = header.mid(8);\n\tif (message.size()!= 4) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn QByteArray();\n\t}\n\n\tif (message!= QByteArray::fromHex(\"00000000\")) {\n\t\tqDebug() << \"Error: \" << message;\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn QByteArray();\n\t}\n\n\tstatusCode = QNetworkReply::NoError;\n\treturn data;\n}", "CodeBleu_score": 44.936178725760854}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tif (networkReply->error()!= QNetworkReply::NoError) {\n\t\tstatusCode = networkReply->error();\n\t\treturn QByteArray();\n\t}\n\n\tQByteArray reply = networkReply->readAll();\n\n\t// Check for gRPC errors\n\tif (reply.startsWith(\"grpc-status:\")) {\n\t\t// Extract the gRPC status code from the header\n\t\tint grpcStatusCode = reply.mid(12).toInt();\n\t\t// Set the status code to the appropriate gRPC error\n\t\tstatusCode = grpcStatusCodeToNetworkError(grpcStatusCode);\n\t\t// Log the error message\n\t\tqDebug() << \"gRPC error:\" << reply.mid(12);\n\t\t// Return an empty QByteArray\n\t\treturn QByteArray();\n\t}\n\n\t// Remove the gRPC message size header\n\treply.remove(0, 10);\n\n\t// Set the status code to NoError\n\tstatusCode = QNetworkReply::NoError;\n\n\t// Return the response data\n\treturn reply;\n}", "CodeBleu_score": 48.218350131697775}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tlibcore::LoadConfigResp response;\n\tQString errorMsg;\n\t*rpcOK = false;\n\ttry {\n\t\tm_stub->Start(&m_context, request, &response);\n\t\t*rpcOK = true;\n\t} catch (grpc::RpcException e) {\n\t\terrorMsg = e.what();\n\t}\n\treturn errorMsg;\n}", "CodeBleu_score": 43.89273630101409}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\t// Prepare the request\n\tlibcore::StartReq *req = new libcore::StartReq();\n\treq->set_config(request.config());\n\t// Send the request\n\tlibcore::StartResp *resp = stub_->Start(req);\n\t// Process the response\n\tif (resp->has_error()) {\n\t\t*rpcOK = false;\n\t\treturn resp->error();\n\t}\n\t*rpcOK = true;\n\treturn \"\";\n}", "CodeBleu_score": 49.55358462710243}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\t*rpcOK = false;\n\tlibcore::LoadConfigResp response;\n\tQByteArray requestData = request.SerializeAsString().toUtf8();\n\tQByteArray responseData;\n\tif (grpcChannel->SendRequest(requestData, responseData)) {\n\t\tif (response.ParseFromArray(responseData.data(), responseData.size())) {\n\t\t\t*rpcOK = true;\n\t\t\treturn response.error_msg();\n\t\t} else {\n\t\t\treturn \"Invalid response\";\n\t\t}\n\t} else {\n\t\treturn \"RPC error\";\n\t}\n}", "CodeBleu_score": 48.318322957519776}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t\t// Clear the text of the inbound_auth UI element.\n\tui->inbound_auth->clear();\n\n\t// Query the inbound_auth data store.\n\tbool auth_needed = false;\n\ttry {\n\t\tauth_needed = (bool)data_store->get_value(\"inbound_auth\");\n\t} catch (std::exception& e) {\n\t\t// If there is an exception, authentication is not needed.\n\t\tauth_needed = false;\n\t}\n\n\t// Set the icon to a locked icon if authentication is needed, or an unlocked icon if not.\n\tif (auth_needed) {\n\t\tui->inbound_auth->setPixmap(QPixmap(\":/images/locked.png\"));\n\t} else {\n\t\tui->inbound_auth->setPixmap(QPixmap(\":/images/unlocked.png\"));\n\t}\n}", "CodeBleu_score": 47.496830947258516}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t\tui.inbound_auth->clear();\n\tif (m_settings.value(\"inbound_auth\", false).toBool()) {\n\t\tui.inbound_auth->setPixmap(QPixmap(\":/icons/locked.png\"));\n\t} else {\n\t\tui.inbound_auth->setPixmap(QPixmap(\":/icons/unlocked.png\"));\n\t}\n}", "CodeBleu_score": 47.82148946005851}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t\tui->inbound_auth->clear();\n\n\tif (settings->value(\"inbound_auth\", false).toBool()) {\n\t\tui->inbound_auth->setText(\"<img src=\\\":/icons/locked.png\\\" width=16 height=16>\");\n\t} else {\n\t\tui->inbound_auth->setText(\"<img src=\\\":/icons/unlocked.png\\\" width=16 height=16>\");\n\t}\n}", "CodeBleu_score": 38.04356037632131}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t\tGroup *group = new Group();\n\tDialogEditGroup dialog(group, this);\n\tdialog.exec();\n\tdelete group;\n\tif (dialog.result() == QDialog::Accepted) {\n\t\tProfileManager::getInstance()->addGroup(group);\n\t\tupdateGroupList();\n\t\temit refresh();\n\t}\n}", "CodeBleu_score": 35.96339898246356}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tGroup* group = new Group();\n\tDialogEditGroup dialog(group, this);\n\tdialog.exec();\n\tdelete group;\n\tif (dialog.result() == QDialog::Accepted) {\n\t\tProfileManager::getInstance()->add(group);\n\t\tupdateGroupList();\n\t\temit refresh();\n\t}\n}", "CodeBleu_score": 35.629061443782675}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tGroup* group = new Group();\n\tDialogEditGroup dialog(group, this);\n\tdialog.exec();\n\tdelete group;\n\tif (dialog.result() == QDialog::Accepted) {\n\t\tProfileManager::instance()->addGroup(group);\n\t\tupdateGroupList();\n\t\temit refresh();\n\t}\n}", "CodeBleu_score": 35.84506473613624}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t#ifdef QT_DEBUG\n    qDebug() << \"DialogManageRoutes::accept()\";\n#endif\n    //\n    SaveDisplayRouting(&CACHE.routing);\n    //\n    if (CACHE.routing.custom!= CACHE.custom_route) {\n        //\n        CACHE.custom_route = CACHE.routing.custom;\n        //\n        ui->info->setText(tr(\"Route has been changed.\"));\n        //\n        emit updateDataStore();\n        //\n        emit updateRouting();\n    }\n    //\n    SaveRouting();\n    //\n    close();\n}", "CodeBleu_score": 16.23668672338626}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tclearErrors();\n\tm_path = path;\n\tm_device = device;\n\tm_isExternalTileset = true;\n\tm_xml.setDevice(m_device);\n\tm_xml.readNextStartElement();\n\tif (m_xml.name()!= \"tileset\") {\n\t\traiseError(MapReader::InvalidDataError, tr(\"The file is not a tileset.\"));\n\t\treturn SharedTileset();\n\t}\n\tSharedTileset tileset = readTileset();\n\tm_isExternalTileset = false;\n\tm_xml.clear();\n\treturn tileset;\n}", "CodeBleu_score": 57.36214393509258}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tclearErrors();\n\tm_path = path;\n\tm_device = device;\n\tm_external = true;\n\tm_tileset = SharedTileset();\n\tm_tileset->setPath(path);\n\tm_tileset->setDevice(device);\n\tif (m_xmlReader->readNextStartElement()) {\n\t\tif (m_xmlReader->name() == \"tileset\") {\n\t\t\treadTileset();\n\t\t} else {\n\t\t\traiseError(tr(\"The file is not a tileset.\"));\n\t\t}\n\t}\n\tm_external = false;\n\tm_tileset->setDevice(nullptr);\n\tm_tileset->setPath(\"\");\n\treturn m_tileset;\n}", "CodeBleu_score": 51.856341987529284}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tclearErrors();\n\tm_path = path;\n\tm_xmlReader.setDevice(device);\n\tm_xmlReader.setNamespaceProcessing(false);\n\tm_xmlReader.raiseError(QObject::tr(\"The XML file is not a tileset.\"));\n\tif (m_xmlReader.readNextStartElement()) {\n\t\tif (m_xmlReader.name() == \"tileset\") {\n\t\t\tm_xmlReader.raiseError(QObject::tr(\"The XML file is not a tileset.\"));\n\t\t\treturn readTileset();\n\t\t} else {\n\t\t\tm_xmlReader.raiseError(QObject::tr(\"The XML file is not a tileset.\"));\n\t\t}\n\t}\n\tm_xmlReader.raiseError(QObject::tr(\"The XML file is not a tileset.\"));\n\treturn SharedTileset();\n}", "CodeBleu_score": 43.0615648816774}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tHMODULE hModule = NULL;\n\tBOOL isBlacklisted = FALSE;\n\n\t// Check if the library file name is provided\n\tif (lpLibFileName!= NULL) {\n\t\t// Check if the library is blacklisted\n\t\tisBlacklisted = CheckIfLibraryIsBlacklisted(lpLibFileName);\n\t}\n\n\t// If the library is blacklisted, set an error indicating access is disabled by policy and return null\n\tif (isBlacklisted) {\n\t\tSetLastError(ERROR_ACCESS_DENIED);\n\t\treturn NULL;\n\t}\n\n\t// Call the original LoadLibraryExW function to load the library\n\thModule = LoadLibraryExW(lpLibFileName, hFile, dwFlags);\n\n\treturn hModule;\n}", "CodeBleu_score": 55.10437713213351}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tHMODULE result = NULL;\n\tif (lpLibFileName!= NULL) {\n\t\tif (blacklisted_library(lpLibFileName)) {\n\t\t\tSetLastError(ERROR_ACCESS_DENIED);\n\t\t\treturn NULL;\n\t\t}\n\t\tresult = LoadLibraryExW(lpLibFileName, hFile, dwFlags);\n\t}\n\treturn result;\n}", "CodeBleu_score": 59.83677967657596}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\tHMODULE hModule;\n\n\tif (lpLibFileName!= NULL) {\n\t\tif (IsBlacklisted(lpLibFileName)) {\n\t\t\tSetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\n\thModule = LoadLibraryExW(lpLibFileName, hFile, dwFlags);\n\n\treturn hModule;\n}", "CodeBleu_score": 61.51456603743986}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t\n#ifdef DEBUG\n    qDebug() << \"BoxArtManager::loadBoxArtFromNetwork: \" << computer->uuid << \" \" << appId;\n#endif\n\n    // Create an HTTP client for the specified computer\n    NvHttpClient* client = new NvHttpClient(computer, this);\n\n    // Determine the cache path for the box art\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n\n    // Attempt to download the box art image\n    QUrl url = client->getBoxArt(appId);\n\n    // If the image is successfully downloaded and is not null, save it to the cache path\n    if (!url.isEmpty()) {\n        QFile file(cachePath);\n        if (file.open(QIODevice::WriteOnly)) {\n            file.write(client->getResponse());\n            file.close();\n        } else {\n            // Ensure any zero-byte file is removed\n            QFile::remove(cachePath);\n        }\n    }\n\n    // Return the local file URL of the cached image\n    return QUrl::fromLocalFile(cachePath);\n}", "CodeBleu_score": 53.53629059122351}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t", "CodeBleu_score": 3.16607573165284}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t\tQNetworkAccessManager *manager = new QNetworkAccessManager();\n\tQNetworkRequest request;\n\tQUrl url;\n\tQUrl boxArtUrl;\n\tQFile file;\n\tQString cachePath;\n\tQByteArray response;\n\tQImage image;\n\tQImageReader imageReader;\n\n\t// Create the cache directory if it did not already exist\n\tif (!m_BoxArtDir.exists(computer->uuid)) {\n\t\tm_BoxArtDir.mkdir(computer->uuid);\n\t}\n\n\t// Change to this computer's box art cache folder\n\tm_BoxArtDir.cd(computer->uuid);\n\n\t// Try to open the cached file\n\tcachePath = m_BoxArtDir.filePath(QString::number(appId) + \".png\");\n\n\t// Create the HTTP client\n\trequest.setUrl(computer->boxArtUrl);\n\trequest.setRawHeader(\"User-Agent\", \"NVIDIA Shield\");\n\n\t// Download the box art image\n\tresponse = manager->get(request).readAll();\n\n\t// If the response is empty, return an empty URL\n\tif (response.isEmpty()) {\n\t\treturn QUrl();\n\t}\n\n\t// Create the image reader\n\timageReader.setFormat(\"PNG\");\n\timageReader.addData(response);\n\n\t// Read the image\n\timage = imageReader.read();\n\n\t// If the image is null, return an empty URL\n\tif (image.isNull()) {\n\t\treturn QUrl();\n\t}\n\n\t// Save the image to the cache path\n\tfile.setFileName(cachePath);\n\tif (!file.open(QIODevice::WriteOnly)) {\n\t\treturn QUrl();\n\t}\n\timage.save(&file, \"PNG\");\n\n\t// Return the local file URL of the cached image\n\treturn QUrl::fromLocalFile(cachePath);\n}", "CodeBleu_score": 39.211980699029986}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\tqInfo() << \"ComputerManager::handleMdnsServiceResolved\";\n    QHostAddress bestGlobalAddress = getBestGlobalAddressV6(addresses);\n    if (bestGlobalAddress.isNull()) {\n        qInfo() << \"No best global IPv6 address found\";\n        removePendingComputer(computer);\n        return;\n    }\n\n    bool ipv4Added = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            addNewHost(computer->address(), true, bestGlobalAddress);\n            ipv4Added = true;\n            break;\n        }\n    }\n\n    if (!ipv4Added) {\n        addNewHost(computer->address(), true, bestGlobalAddress);\n    }\n\n    removePendingComputer(computer);\n}", "CodeBleu_score": 50.41572668569144}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t#if 0\n    qInfo() << \"handleMdnsServiceResolved\";\n#endif\n    QHostAddress bestGlobalAddress = getBestGlobalAddressV6(addresses);\n    if (bestGlobalAddress.isNull()) {\n        // No global IPv6 address found.\n        // Fall back to IPv4.\n        for (const QHostAddress& address : addresses) {\n            if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n                // Add new host using IPv4 address.\n                addNewHost(address, false);\n                computer->setAdded(true);\n                break;\n            }\n        }\n    } else {\n        // Add new host using IPv6 address.\n        addNewHost(bestGlobalAddress, false);\n        computer->setAdded(true);\n    }\n\n    // Remove computer from pending resolution list.\n    m_pendingMdnsResolutionList.removeOne(computer);\n\n    // Schedule computer for deletion.\n    QTimer::singleShot(0, computer, &MdnsPendingComputer::deleteLater);\n}", "CodeBleu_score": 42.51707585464155}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\tqInfo() << \"ComputerManager::handleMdnsServiceResolved\";\n    QHostAddress ipv6Address = getBestGlobalAddressV6(addresses);\n\n    if (ipv6Address.isNull()) {\n        qInfo() << \"No IPv6 address found for\" << computer->address;\n        computer->remove();\n        return;\n    }\n\n    if (!computer->mdnsIpv6Address.isNull()) {\n        if (computer->mdnsIpv6Address == ipv6Address) {\n            qInfo() << \"IPv6 address matches for\" << computer->address;\n            computer->remove();\n            return;\n        }\n    }\n\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            qInfo() << \"Adding IPv4 host:\" << computer->address << \"address:\" << address;\n            addNewHost(computer->address, true, ipv6Address);\n            computer->remove();\n            return;\n        }\n    }\n\n    qInfo() << \"Adding IPv6 host:\" << computer->address << \"address:\" << ipv6Address;\n    addNewHost(computer->address, true, ipv6Address);\n    computer->remove();\n}", "CodeBleu_score": 51.59487977263461}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t/    QMutexLocker locker(&m_SaveMutex);\n//    if (m_SaveCondition.wait(&m_SaveMutex, 1000)) {\n//        m_SaveCondition.wakeOne();\n//        return;\n//    }\n//    QSettings settings;\n//    settings.beginGroup(m_SettingsGroup);\n//    settings.beginGroup(computer->serial());\n//    settings.setValue(m_SettingsKey, computer->serialize());\n//    settings.endGroup();\n//    settings.endGroup();\n//    m_SaveCondition.wakeOne();\n}", "CodeBleu_score": 7.489775909853797}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQ_ASSERT(computer!= nullptr);\n\n\t// If the computer's name hasn't changed, we don't need to save it.\n\tif (computer->name() == m_Hosts[computer->id()]->name()) {\n\t\treturn;\n\t}\n\n\t// Lock the mutex and read the computer's data.\n\tQMutexLocker locker(&m_HostsMutex);\n\tQString oldName = m_Hosts[computer->id()]->name();\n\tQString newName = computer->name();\n\n\t// If the computer's name has changed, save it.\n\tif (newName!= oldName) {\n\t\tm_Hosts[computer->id()]->setName(newName);\n\t\tsaveHosts();\n\t}\n}", "CodeBleu_score": 50.17218638305917}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t/    QMutexLocker locker(&m_Mutex);\n//    QSettings settings;\n\n//    // If the current serialized data differs from the last saved state,\n//    // unlock the mutexes and queue a request to save the hosts to QSettings.\n//    if (computer->serializableProperties()!= settings.value(QStringLiteral(\"host_serializable_properties\")).toStringList()) {\n//        m_Mutex.unlock();\n//        m_DelayedFlushMutex.lock();\n//        m_DelayedFlushCondition.wakeOne();\n//    }\n}", "CodeBleu_score": 7.432379390076038}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t//    qDebug() << \"updateAppList()\";\n\n    // If the app lists are identical, do nothing\n    if (appList == newAppList) {\n        return false;\n    }\n\n    // Update the app list\n    appList = newAppList;\n\n    // Sort the app list\n    sortAppList();\n\n    // Return true\n    return true;\n}", "CodeBleu_score": 30.095341594957816}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tif (appList == newAppList) {\n\t\treturn false;\n\t}\n\tfor (auto& app : newAppList) {\n\t\tfor (auto& oldApp : appList) {\n\t\t\tif (app.id == oldApp.id) {\n\t\t\t\tapp.hidden = oldApp.hidden;\n\t\t\t\tapp.directLaunch = oldApp.directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tappList = newAppList;\n\tsortAppList();\n\treturn true;\n}", "CodeBleu_score": 68.89361516706481}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tif (appList == newAppList) {\n\t\treturn false;\n\t}\n\telse {\n\t\tfor (auto& app : appList) {\n\t\t\tfor (auto& newApp : newAppList) {\n\t\t\t\tif (app.id == newApp.id) {\n\t\t\t\t\tapp.hidden = newApp.hidden;\n\t\t\t\t\tapp.directLaunch = newApp.directLaunch;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tappList = newAppList;\n\t\tsortAppList();\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 72.6178126520444}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setDescription(\"Quit an app on a specified host\");\n\tparser.addPositionalArgument(\"quit\", \"Quit the app on the specified host\");\n\tparser.addPositionalArgument(\"host\", \"Host to quit the app on\");\n\tparser.parse(args);\n\tif (parser.hasError()) {\n\t\tparser.showError();\n\t\treturn;\n\t}\n\tif (parser.hasUnknownOptions()) {\n\t\tparser.showUnknownOptions();\n\t\treturn;\n\t}\n\tif (parser.hasHelp()) {\n\t\tparser.showHelp();\n\t\treturn;\n\t}\n\tif (parser.hasVersion()) {\n\t\tparser.showVersion();\n\t\treturn;\n\t}\n\tif (parser.hasPositionalArgument(\"host\")) {\n\t\tm_Host = parser.positionalArgument(\"host\");\n\t}\n\telse {\n\t\tparser.showError(\"Host is required\");\n\t\treturn;\n\t}\n}", "CodeBleu_score": 53.624756695692774}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setDescription(tr(\"Quit an app on a specified host\"));\n\tparser.addPositionalArgument(\"quit\", tr(\"Quit\"));\n\tparser.addPositionalArgument(\"host\", tr(\"Host\"));\n\tparser.addOption(\"help\", tr(\"Show this help and exit\"));\n\tparser.addOption(\"version\", tr(\"Show version and exit\"));\n\n\tif (!parser.parse(args)) {\n\t\tqDebug() << parser.errorString();\n\t\treturn;\n\t}\n\n\tif (parser.isSet(\"help\")) {\n\t\tparser.showHelp();\n\t\treturn;\n\t}\n\n\tif (parser.isSet(\"version\")) {\n\t\tparser.showVersion();\n\t\treturn;\n\t}\n\n\tif (parser.positionalArguments().size() < 2) {\n\t\tqDebug() << tr(\"Host is missing\");\n\t\treturn;\n\t}\n\n\tm_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 58.99513159057614}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setApplicationDescription(\"Quit an app on a specified host\");\n\tparser.addPositionalArgument(\"quit\", \"The app to quit\");\n\tparser.addPositionalArgument(\"host\", \"The host to quit the app on\");\n\tparser.addHelpOption();\n\tparser.addVersionOption();\n\tparser.addUnknownOption();\n\tparser.parse(args);\n\n\tif (parser.isSet(\"help\")) {\n\t\tparser.showHelp();\n\t\treturn;\n\t}\n\n\tif (parser.isSet(\"version\")) {\n\t\tparser.showVersion();\n\t\treturn;\n\t}\n\n\tif (parser.isSet(\"unknown\")) {\n\t\tparser.showUnknown();\n\t\treturn;\n\t}\n\n\tif (parser.positionalArguments().size()!= 2) {\n\t\tparser.showError(\"Missing required arguments\");\n\t\treturn;\n\t}\n\n\tm_Quit = parser.positionalArguments()[0];\n\tm_Host = parser.positionalArguments()[1];\n}", "CodeBleu_score": 53.166789105350176}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\n\tif (info.Length() < 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\")\n\t\t\t.ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\tNapi::Number year = info[0].As<Napi::Number>();\n\tint years = year.Int32Value();\n\n\tQDate date = this->instance->addYears(years);\n\n\tQDateWrap* instance = new QDateWrap(&date);\n\tinstance->Wrap(info.This());\n\n\treturn info.This();\n}", "CodeBleu_score": 55.68788657222634}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tint years = info[0].As<Napi::Number>().Int32Value();\n\n\tQDateWrap* dateWrap = new QDateWrap(env, this->instance->addYears(years));\n\treturn Napi::External<QDateWrap>::New(env, dateWrap);\n}", "CodeBleu_score": 56.49934562208797}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tif (info.Length() < 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\tint years = info[0].As<Napi::Number>().Int32Value();\n\n\tQDateWrap* wrap = new QDateWrap(this->instance->addYears(years));\n\n\treturn wrap->getJSObject();\n}", "CodeBleu_score": 51.7128065426215}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDateWrap* instance = new QDateWrap(env);\n\tinstance->instance = QDate::currentDate();\n\treturn instance->Value();\n}", "CodeBleu_score": 50.699718845055784}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tQDateWrap* dateWrap = new QDateWrap();\n\tdateWrap->instance = QDate::currentDate();\n\tdateWrap->Wrap(info.This());\n\n\treturn info.This();\n}", "CodeBleu_score": 43.92029089601143}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDateWrap* instance = new QDateWrap(QDate::currentDate());\n\tNapi::Object instanceObject = QDateWrap::constructor.New( { Napi::External<QDateWrap>::New(env, instance) } );\n\treturn instanceObject;\n}", "CodeBleu_score": 60.05796769523275}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tif (info.Length() < 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\tQDate date(year, 1, 1);\n\tbool leapYear = date.isLeapYear();\n\treturn Napi::Boolean::New(env, leapYear);\n}", "CodeBleu_score": 64.3353588297158}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\n\tif (info.Length() < 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\treturn Napi::Boolean::New(env, QDate::isLeapYear(year));\n}", "CodeBleu_score": 71.4502180803116}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::String year = info[0].As<Napi::String>();\n\tint year_int = year.Utf8Value().toInt();\n\tbool isLeapYear = QDate::isLeapYear(year_int);\n\treturn Napi::Boolean::New(env, isLeapYear);\n}", "CodeBleu_score": 65.62409888641942}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::Object obj = info[0].As<Napi::Object>();\n\tQDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(obj);\n\tint daysTo = this->instance->daysTo(*other->instance);\n\treturn Napi::Value::From(env, daysTo);\n}", "CodeBleu_score": 67.67636390984819}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\tQDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tint days = this->instance->daysTo(*other->instance);\n\treturn Napi::Number::New(env, days);\n}", "CodeBleu_score": 60.21932106003799}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tQDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\treturn Napi::Value::From(env, QDateTime::daysTo(*this->instance, *other->instance));\n}", "CodeBleu_score": 54.91320304998859}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tQDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\n\tqint64 msecs = this->instance->msecsTo(*other->instance);\n\n\treturn Napi::Number::New(env, msecs);\n}", "CodeBleu_score": 60.75458971497124}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tQDateTime* otherInternal = other->getInternalInstance();\n\tint result = this->instance->msecsTo(*otherInternal);\n\treturn Napi::Value::From(env, result);\n}", "CodeBleu_score": 71.05223934192084}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\tQDateTimeWrap* other = Unwrap(info[0]);\n\treturn Napi::Number::New(env, QDateTimeWrap::msecsTo(this, other));\n}", "CodeBleu_score": 42.26917894876462}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\t\tQItemSelectionModel* theWrappedObject = ObjectWrap::Unwrap<QItemSelectionModel>(info.This());\n\n\t\tint row = info[0].As<Napi::Number>().Int32Value();\n\t\tQModelIndex parent = ObjectWrap::Unwrap<QModelIndex>(info[1].As<Napi::Object>());\n\n\t\tbool theWrappedResult = theWrappedObject->rowIntersectsSelection(row, parent);\n\n\t\treturn Napi::Boolean::New(env, theWrappedResult);\n\t})\n}", "CodeBleu_score": 64.22155091509005}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\t\tNapi::Object modelWrap = info[0].As<Napi::Object>();\n\t\tQItemSelectionModelWrap* model = Napi::ObjectWrap<QItemSelectionModelWrap>::Unwrap(modelWrap);\n\t\tint row = info[1].As<Napi::Number>().Int32Value();\n\t\tQModelIndexWrap* parent = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[2].As<Napi::Object>());\n\t\tbool result = model->instance->rowIntersectsSelection(row, *parent->getInternalInstance());\n\t\treturn Napi::Boolean::New(env, result);\n\t}\n}", "CodeBleu_score": 67.57795494222165}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\t\tNapi::Object wrap = info[0].As<Napi::Object>();\n\t\tQItemSelectionModelWrap* instance;\n\t\tNapi::Value result;\n\t\tinstance = Napi::ObjectWrap<QItemSelectionModelWrap>::Unwrap(wrap);\n\t\tint row = info[1].As<Napi::Number>().Int32Value();\n\t\tQModelIndex parent = instance->getInternalInstance()->parent();\n\t\tbool value = instance->getInternalInstance()->rowIntersectsSelection(row, parent);\n\t\tresult = Napi::Boolean::New(env, value);\n\t\treturn result;\n\t}\n}", "CodeBleu_score": 62.655940685387314}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nNapi::Object other = info[0].As<Napi::Object>();\n\nQSizeWrap* otherWrapped = Napi::ObjectWrap<QSizeWrap>::Unwrap(other);\n\nQSize* otherWrappedInternal = otherWrapped->getInternalInstance();\n\nQSize* result = new QSize(m_internalInstance->expandedTo(*otherWrappedInternal));\n\nreturn wrap(env, new QSizeWrap(result));\n\n}", "CodeBleu_score": 62.54958065737204}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQSizeWrap* otherWrapped = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherObject);\nQSize* otherWrappedInternal = otherWrapped->getInternalInstance();\nQSize* internalInstance = this->getInternalInstance();\nQSize result = internalInstance->expandedTo(*otherWrappedInternal);\nreturn wrapInstance(env, new QSizeWrap(result));}", "CodeBleu_score": 64.25458595138022}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\nNapi::Object otherObject = info[0].As<Napi::Object>();\nQSizeWrap* other = Napi::ObjectWrap<QSizeWrap>::Unwrap(otherObject);\nQSize* otherInternal = other->getInternalInstance();\nQSize result = this->instance->expandedTo(*otherInternal);\nQSizeWrap* resultWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0]);\nresultWrap->setInternalInstance(result);\nreturn resultWrap->getJSObject();\n}", "CodeBleu_score": 64.72854400050862}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) -> Napi::Value {\n\t\tNapi::Env env = info.Env();\n\n\t\tNapi::String returnValue = Napi::String::New(env, QApplication::desktopFileName());\n\n\t\treturn returnValue;\n\t})\n}", "CodeBleu_score": 64.44147945179384}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\t\tQApplicationWrap* wrapInstance = QApplicationWrap::nodeObjectToPointer(info[0].As<Napi::Object>());\n\t\tQString result = wrapInstance->instance->desktopFileName();\n\t\tNapi::String napiResult = Napi::String::New(env, result);\n\t\treturn napiResult;\n\t})\n}", "CodeBleu_score": 63.73203308403512}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t\tNapi::Function::New(env, [](const Napi::CallbackInfo& info) -> Napi::Value {\n\t\tNapi::Env env = info.Env();\n\t\tNapi::HandleScope scope(env);\n\n\t\tNapi::String returnValue = Napi::String::New(env, QApplication::desktopFileName());\n\t\treturn returnValue;\n\t})\n}", "CodeBleu_score": 62.665049422117626}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\tQClipboardWrap* wrap = Napi::ObjectWrap<QClipboardWrap>::Unwrap(info.This());\n\tQClipboard* clipboard = wrap->getInternalInstance();\n\tQClipboard::Mode mode = QClipboard::Clipboard;\n\tif (info.Length() > 0) {\n\t\tmode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\n\t}\n\tQMimeData* mimeData = clipboard->mimeData(mode);\n\tQMimeDataWrap* wrap_mimeData = new QMimeDataWrap(mimeData);\n\tNapi::Object obj = wrap_mimeData->constructor.New({});\n\treturn scope.Close(obj);\n}", "CodeBleu_score": 54.61979520861973}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\n\t// Get mode\n\tNapi::Number mode = info[0].As<Napi::Number>();\n\n\t// Get MIME data from clipboard\n\tQMimeData* mimeData = QApplication::clipboard()->mimeData(mode.Int32Value());\n\n\t// Clone MIME data\n\tQMimeData* clonedMimeData = new QMimeData(*mimeData);\n\n\t// Create new JavaScript instance of QMimeDataWrap\n\tQMimeDataWrap* wrappedMimeData = new QMimeDataWrap(env, Napi::External<QMimeData>::New(env, clonedMimeData));\n\n\treturn wrappedMimeData->getJSObject();\n}", "CodeBleu_score": 63.686551548978635}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\n\tQClipboard::Mode mode = QClipboard::Mode::Clipboard;\n\tif (info.Length() > 0 && info[0].IsNumber()) {\n\t\tmode = static_cast<QClipboard::Mode>(info[0].As<Napi::Number>().Int32Value());\n\t}\n\n\tQMimeData* mimeData = qobject_cast<QMimeData*>(QGuiApplication::clipboard()->mimeData(mode));\n\tif (mimeData) {\n\t\tQMimeData* mimeDataCopy = new QMimeData(*mimeData);\n\t\treturn wrap(env, new QMimeDataWrap(mimeDataCopy));\n\t}\n\n\treturn env.Null();\n}", "CodeBleu_score": 53.39842138715041}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQObjectWrap* source = this->instance->source();\n\treturn source->getInternalInstance();\n}", "CodeBleu_score": 46.83649801170229}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQObjectWrap* sourceWrap = new QObjectWrap(env, this->instance->source());\n\treturn sourceWrap->getQObjectWrap();\n}", "CodeBleu_score": 50.91771431120428}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQDragWrap* qDragWrap = Napi::ObjectWrap<QDragWrap>::Unwrap(info[0].As<Napi::Object>());\n\tQObjectWrap* qObjectWrap = new QObjectWrap(qDragWrap->qDrag->source(), env);\n\treturn qObjectWrap->getQObjectWrap();\n}", "CodeBleu_score": 49.151183972268214}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\ttry {\n\t\tif (this.tooltip!= null) {\n\t\t\tif (this.tooltip.Visible) {\n\t\t\t\tif (this.tooltip.Bounds.Contains(e.Location)) {\n\t\t\t\t\tif (this.bars.Count > 0) {\n\t\t\t\t\t\tthis.CalculateSelectIndex(e.Location);\n\t\t\t\t\t\tif (this.selectIndex >= 0 && this.selectIndex < this.bars.Count) {\n\t\t\t\t\t\t\tthis.UpdateTooltipText();\n\t\t\t\t\t\t\tthis.UpdateTooltipSize();\n\t\t\t\t\t\t\tthis.CalculateTooltipPosition(e.Location);\n\t\t\t\t\t\t\tthis.UpdateTooltipVisibility();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tLogging.Log(ex, \"Grid\", \"OnMouseMove\");\n\t}\n}", "CodeBleu_score": 12.874903644563082}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\ttry {\n\t\tbase.OnMouseMove(e);\n\t\tif (this.Visible) {\n\t\t\tif (this.GridBounds.Contains(e.Location)) {\n\t\t\t\tint index = this.CalculateSelectIndex(e.Location);\n\t\t\t\tif (index!= -1) {\n\t\t\t\t\tif (this.Bars.Count > 0) {\n\t\t\t\t\t\tthis.UpdateToolTipText(index);\n\t\t\t\t\t\tthis.UpdateToolTipSize(index);\n\t\t\t\t\t\tthis.UpdateToolTipPosition(index);\n\t\t\t\t\t\tthis.UpdateToolTipVisibility();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tthis.LogException(ex);\n\t}\n}", "CodeBleu_score": 9.783211792417552}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\ttry {\n\t\tif (this.ToolTipVisible) {\n\t\t\tif (this.GridBounds.Contains(e.Location)) {\n\t\t\t\tthis.SelectIndex = this.GetSelectIndex(e.Location);\n\t\t\t\tif (this.SelectIndex > -1 && this.Bars.Count > 0) {\n\t\t\t\t\tthis.UpdateToolTip(this.SelectIndex);\n\t\t\t\t\tthis.UpdateToolTipSize();\n\t\t\t\t\tthis.UpdateToolTipPosition(e.Location);\n\t\t\t\t\tthis.UpdateToolTipVisibility();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tthis.LogException(ex);\n\t}\n}", "CodeBleu_score": 13.056035541029553}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null) return;\nif (!Option.Show) return;\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\nDrawToolTip(g);\n}\nDrawSeries(g, Bars);\nDrawAxis(g);\nDrawTitle(g);\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nDrawToolTip(g);\n}\nDrawLegend(g);\nDrawAxisScales(g);\n}", "CodeBleu_score": 49.795226027536586}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null) return;\nif (!Option.Show) return;\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow)\n{\nDrawToolTip(g);\n}\nDrawSeries(g, Bars);\nDrawAxis(g);\nDrawTitle(g);\nif (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line)\n{\nDrawToolTip(g);\n}\nDrawLegend(g);\nDrawAxisScales(g);\n}", "CodeBleu_score": 49.72623687904447}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null ||!Option.Show) return;\nif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\nDrawToolTip(g);\n}\nif (Option.Series.Count > 0) {\nDrawSeries(g, Bars);\n}\nif (Option.XAxis.Data.Count > 0) {\nDrawAxis(g);\n}\nif (Option.Title.IsValid()) {\nDrawTitle(g);\n}\nif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nDrawToolTip(g);\n}\nif (Option.Legend.Show) {\nDrawLegend(g);\n}\nif (Option.YAxisScaleLines.Count > 0) {\nDrawAxisScales(g);\n}\n}", "CodeBleu_score": 59.276097072701496}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (this.SelectedIndex == -1)\n\t\treturn;\n\tif (this.ToolTipType == ChartToolTipType.Line) {\n\t\tDrawLineToolTip(g);\n\t}\n\telse if (this.ToolTipType == ChartToolTipType.Shadow) {\n\t\tDrawShadowToolTip(g);\n\t}\n}", "CodeBleu_score": 11.428331790001787}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t", "CodeBleu_score": 1.4578924388861296}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (this.selectedIndex < 0) {\n\t\treturn;\n\t}\n\tif (this.tooltipType == ChartToolTipType.Line) {\n\t\tthis.DrawLineToolTip(g);\n\t}\n\telse if (this.tooltipType == ChartToolTipType.Shadow) {\n\t\tthis.DrawShadowToolTip(g);\n\t}\n}", "CodeBleu_score": 11.834592124013277}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\tif (title.Text!= null && title.Font!= null && title.TextColor!= null) {\nSizeF size = g.MeasureString(title.Text, title.Font);\nif (title.Alignment == UITitleAlignment.Center) {\ng.DrawString(title.Text, title.Font, new SolidBrush(title.TextColor), new PointF(Width / 2 - size.Width / 2, title.Y));\n} else if (title.Alignment == UITitleAlignment.Right) {\ng.DrawString(title.Text, title.Font, new SolidBrush(title.TextColor), new PointF(Width - size.Width, title.Y));\n} else {\ng.DrawString(title.Text, title.Font, new SolidBrush(title.TextColor), new PointF(0, title.Y));\n}\nif (title.Subtitle!= null && title.Subtitle.Text!= null && title.Subtitle.Font!= null && title.Subtitle.TextColor!= null) {\nSizeF subtitleSize = g.MeasureString(title.Subtitle.Text, title.Subtitle.Font);\nif (title.Alignment == UITitleAlignment.Center) {\ng.DrawString(title.Subtitle.Text, title.Subtitle.Font, new SolidBrush(title.Subtitle.TextColor), new PointF(Width / 2 - subtitleSize.Width / 2, title.Y + title.Font.Height + 5));\n} else if (title.Alignment == UITitleAlignment.Right) {\ng.DrawString(title.Subtitle.Text, title.Subtitle.Font, new SolidBrush(title.Subtitle.TextColor), new PointF(Width - subtitleSize.Width, title.Y + title.Font.Height + 5));\n} else {\ng.DrawString(title.Subtitle.Text, title.Subtitle.Font, new SolidBrush(title.Subtitle.TextColor), new PointF(0, title.Y + title.Font.Height + 5));\n}\n}\n}\n}", "CodeBleu_score": 40.086454274824376}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t if (title.Text!= null && title.Font!= null && title.Color!= null) {\n SizeF textSize = g.MeasureString(title.Text, title.Font);\n if (title.Alignment == UITitleAlignment.Center) {\n g.DrawString(title.Text, title.Font, new SolidBrush(title.Color), new PointF(this.Width / 2 - textSize.Width / 2, 0));\n } else if (title.Alignment == UITitleAlignment.Left) {\n g.DrawString(title.Text, title.Font, new SolidBrush(title.Color), new PointF(0, 0));\n } else if (title.Alignment == UITitleAlignment.Right) {\n g.DrawString(title.Text, title.Font, new SolidBrush(title.Color), new PointF(this.Width - textSize.Width, 0));\n }\n if (title.SubtitleText!= null && title.SubtitleFont!= null && title.SubtitleColor!= null) {\n SizeF subtitleSize = g.MeasureString(title.SubtitleText, title.SubtitleFont);\n if (title.SubtitleAlignment == UITitleAlignment.Center) {\n g.DrawString(title.SubtitleText, title.SubtitleFont, new SolidBrush(title.SubtitleColor), new PointF(this.Width / 2 - subtitleSize.Width / 2, textSize.Height));\n } else if (title.SubtitleAlignment == UITitleAlignment.Left) {\n g.DrawString(title.SubtitleText, title.SubtitleFont, new SolidBrush(title.SubtitleColor), new PointF(0, textSize.Height));\n } else if (title.SubtitleAlignment == UITitleAlignment.Right) {\n g.DrawString(title.SubtitleText, title.SubtitleFont, new SolidBrush(title.SubtitleColor), new PointF(this.Width - subtitleSize.Width, textSize.Height));\n }\n }\n }\n }", "CodeBleu_score": 29.51945423538682}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\t\temptyOption = new DoughnutChartOptions();\n\temptyOption.title = new Title() {\n\t\ttext = \"Doughnut chart\"\n\t};\n\temptyOption.subtitle = new Subtitle() {\n\t\ttext = \"Doughnut chart subtitle\"\n\t};\n\temptyOption.series = new List<Series>();\n\tSeries series = new Series() {\n\t\tname = \"Doughnut chart series\",\n\t\tcenter = new List<string>() {\n\t\t\t\"50%\",\n\t\t\t\"50%\"\n\t\t},\n\t\tsize = \"80%\",\n\t\tdata = new List<object>() {\n\t\t\tnew List<object>() {\n\t\t\t\t\"Point 1\",\n\t\t\t\t10\n\t\t\t},\n\t\t\tnew List<object>() {\n\t\t\t\t\"Point 2\",\n\t\t\t\t20\n\t\t\t},\n\t\t\tnew List<object>() {\n\t\t\t\t\"Point 3\",\n\t\t\t\t30\n\t\t\t},\n\t\t\tnew List<object>() {\n\t\t\t\t\"Point 4\",\n\t\t\t\t40\n\t\t\t},\n\t\t\tnew List<object>() {\n\t\t\t\t\"Point 5\",\n\t\t\t\t50\n\t\t\t}\n\t\t}\n\t};\n\temptyOption.series.Add(series);\n}", "CodeBleu_score": 23.283877201915942}, {"code": "protected override void CreateEmptyOption(){\n\t\t// Create the chart option if it hasn't been created yet.\n\tif (emptyOption == null) {\n\t\temptyOption = new DoughnutChartOption();\n\n\t\t// Set the chart title and subtitle.\n\t\temptyOption.Title = \"Doughnut Chart\";\n\t\temptyOption.Subtitle = \"Subtitle\";\n\n\t\t// Create the doughnut series.\n\t\tDoughnutSeries series = new DoughnutSeries();\n\t\tseries.Name = \"Doughnut Series\";\n\t\tseries.Center = new List<string>() { \"50%\", \"50%\" };\n\t\tseries.Radius = \"75%\";\n\n\t\t// Add five data points to the series.\n\t\tseries.Data = new List<DoughnutDataPoint>() {\n\t\t\tnew DoughnutDataPoint() { Value = 50 },\n\t\t\tnew DoughnutDataPoint() { Value = 50 },\n\t\t\tnew DoughnutDataPoint() { Value = 50 },\n\t\t\tnew DoughnutDataPoint() { Value = 50 },\n\t\t\tnew DoughnutDataPoint() { Value = 50 }\n\t\t};\n\n\t\t// Add the series to the chart option.\n\t\temptyOption.Series = new List<DoughnutSeries>() { series };\n\t}\n}", "CodeBleu_score": 25.861142969630013}, {"code": "protected override void CreateEmptyOption(){\n\t\temptyOption = new DoughnutChartOptions();\n\temptyOption.Title = new Title(\"Doughnut Chart\");\n\temptyOption.Subtitle = new Subtitle(\"Doughnut Chart Subtitle\");\n\temptyOption.Series = new List<Series> {\n\t\tnew Series {\n\t\t\tName = \"Doughnut Series\",\n\t\t\tCenter = new Center(\"50%\", \"50%\"),\n\t\t\tRadius = 100,\n\t\t\tData = new List<Data> {\n\t\t\t\tnew Data {\n\t\t\t\t\tName = \"Data Point 1\",\n\t\t\t\t\tY = 50\n\t\t\t\t},\n\t\t\t\tnew Data {\n\t\t\t\t\tName = \"Data Point 2\",\n\t\t\t\t\tY = 25\n\t\t\t\t},\n\t\t\t\tnew Data {\n\t\t\t\t\tName = \"Data Point 3\",\n\t\t\t\t\tY = 10\n\t\t\t\t},\n\t\t\t\tnew Data {\n\t\t\t\t\tName = \"Data Point 4\",\n\t\t\t\t\tY = 20\n\t\t\t\t},\n\t\t\t\tnew Data {\n\t\t\t\t\tName = \"Data Point 5\",\n\t\t\t\t\tY = 15\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}", "CodeBleu_score": 22.18916726859905}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\t\tdouble[] values = new double[Count + 1];\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 start = new DateTimeInt64(Start);\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = start.DateTime.Ticks;\n\t\t\tstart.AddMilliseconds(Interval);\n\t\t}\n\t} else {\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = Start + Interval * i;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 52.69900924516183}, {"code": "public double[] LabelValues(){\n\t\tdouble[] labelValues = new double[Count + 1];\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 start = new DateTimeInt64(Start);\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tlabelValues[i] = start.ToDateTime().AddMilliseconds(Interval * i).Ticks;\n\t\t}\n\t} else {\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tlabelValues[i] = Start + Interval * i;\n\t\t}\n\t}\n\treturn labelValues;\n}", "CodeBleu_score": 52.88358822505044}, {"code": "public double[] LabelValues(){\n\t\tdouble[] values = new double[Count + 1];\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 start = new DateTimeInt64(Start);\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = start.ToDateTime().ToOADate();\n\t\t\tstart.AddMilliseconds(Interval);\n\t\t}\n\t}\n\telse {\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = Start + Interval * i;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 54.77479938018877}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tPen pen = new Pen(color, width);\n\tIntPtr dc = GetDC(m.HWnd);\n\tif (dc!= IntPtr.Zero) {\n\t\tGraphics g = Graphics.FromHdc(dc);\n\t\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\t\tRectangle rect = new Rectangle(0, 0, control.Width, control.Height);\n\t\tg.DrawRectangle(pen, rect);\n\t\tReleaseDC(m.HWnd, dc);\n\t}\n}", "CodeBleu_score": 43.44397179142658}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tif (m.HWnd!= IntPtr.Zero) {\n\t\tIntPtr hDC = GetDC(m.HWnd);\n\t\tif (hDC!= IntPtr.Zero) {\n\t\t\tGraphics g = Graphics.FromHdc(hDC);\n\t\t\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\t\t\tPen pen = new Pen(color, width);\n\t\t\tg.DrawRectangle(pen, control.Left, control.Top, control.Width - 1, control.Height - 1);\n\t\t\tReleaseDC(m.HWnd, hDC);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.79389402555115}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tPen pen = new Pen(color, width);\n\tGraphics g = Graphics.FromHwnd(m.HWnd);\n\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\tg.DrawRectangle(pen, control.ClientRectangle);\n\tg.Dispose();\n}", "CodeBleu_score": 34.63606015278786}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t\tBitmap bmp = new Bitmap(ctrl.Width, ctrl.Height);\n\tGraphics g = Graphics.FromImage(bmp);\n\tIntPtr dc = g.GetHdc();\n\tIntPtr h = g.GetHdc();\n\tWin32.SendMessage(ctrl.Handle, Win32.WM_PRINT, h, Win32.PRF_CLIENT | Win32.PRF_CHILDREN | Win32.PRF_OWNED);\n\tg.ReleaseHdc(dc);\n\tg.ReleaseHdc(h);\n\tg.Dispose();\n\treturn bmp;\n}", "CodeBleu_score": 35.73377636747966}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t\tif (ctrl == null)\n\t\treturn null;\n\tIntPtr hDC = GetWindowDC(ctrl.Handle);\n\tif (hDC == IntPtr.Zero)\n\t\treturn null;\n\tIntPtr hMemDC = CreateCompatibleDC(hDC);\n\tif (hMemDC == IntPtr.Zero) {\n\t\tReleaseDC(ctrl.Handle, hDC);\n\t\treturn null;\n\t}\n\tIntPtr hBitmap = CreateCompatibleBitmap(hDC, ctrl.Width, ctrl.Height);\n\tif (hBitmap == IntPtr.Zero) {\n\t\tDeleteDC(hMemDC);\n\t\tReleaseDC(ctrl.Handle, hDC);\n\t\treturn null;\n\t}\n\tIntPtr hOld = SelectObject(hMemDC, hBitmap);\n\tif (hOld == IntPtr.Zero) {\n\t\tDeleteObject(hBitmap);\n\t\tDeleteDC(hMemDC);\n\t\tReleaseDC(ctrl.Handle, hDC);\n\t\treturn null;\n\t}\n\tPrintWindow(ctrl.Handle, hMemDC, 0);\n\tSelectObject(hMemDC, hOld);\n\tDeleteDC(hMemDC);\n\tReleaseDC(ctrl.Handle, hDC);\n\tBitmap bmp = Bitmap.FromHbitmap(hBitmap);\n\tDeleteObject(hBitmap);\n\treturn bmp;\n}", "CodeBleu_score": 47.572171236562056}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t\t// get the device context of the control\n\tIntPtr deviceContext = GetWindowDC(ctrl.Handle);\n\n\t// create a bitmap compatible with the control's device context\n\tBitmap bitmap = new Bitmap(ctrl.Width, ctrl.Height);\n\n\t// create a graphics object from the bitmap\n\tusing (Graphics graphics = Graphics.FromImage(bitmap)) {\n\t\t// copy the control's window content into the bitmap\n\t\tgraphics.CopyFromScreen(ctrl.PointToScreen(new Point(0, 0)), new Point(0, 0), ctrl.Size);\n\t}\n\n\t// delete the device context\n\tReleaseDC(ctrl.Handle, deviceContext);\n\n\t// return the bitmap\n\treturn bitmap;\n}", "CodeBleu_score": 26.889877392150368}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t\tif (button == null) return;\n\tvar type = typeof(Control);\n\tvar field = type.GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\tif (field!= null) {\n\t\tvar key = field.GetValue(null);\n\t\tif (key!= null) {\n\t\t\tvar events = button.Events;\n\t\t\tif (events!= null) {\n\t\t\t\tevents.RemoveHandler(key, button.Click);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 23.45115482241257}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\tif (button!= null) {\n\t\tvar field = typeof(Control).GetField(\"EventClick\", BindingFlags.NonPublic | BindingFlags.Instance);\n\t\tif (field!= null) {\n\t\t\tvar key = field.GetValue(button);\n\t\t\tif (key!= null) {\n\t\t\t\tvar events = button.Events;\n\t\t\t\tif (events!= null) {\n\t\t\t\t\tevents.RemoveHandler(key, new EventHandler(button.OnClick));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 25.140188599339158}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\tif (button == null)\n\t\treturn;\n\ttry {\n\t\tvar eventClick = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n\t\tif (eventClick == null)\n\t\t\treturn;\n\t\tvar eventKey = eventClick.GetValue(button);\n\t\tif (eventKey == null)\n\t\t\treturn;\n\t\tvar events = button.GetType().GetProperty(\"Events\", BindingFlags.Instance | BindingFlags.NonPublic);\n\t\tif (events == null)\n\t\t\treturn;\n\t\tvar eventList = events.GetValue(button, null) as EventHandlerList;\n\t\tif (eventList == null)\n\t\t\treturn;\n\t\teventList.RemoveHandler(eventKey, eventList[eventKey]);\n\t}\n\tcatch {\n\t\treturn;\n\t}\n}", "CodeBleu_score": 34.81411909362485}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\teck the version using >= 4.5.\nint releaseKey = GetRegistryKeyValue(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\");\nif (releaseKey!= 0)\n{\nreturn CheckFor45PlusVersion(releaseKey);\n}\n// If the version does not exist, check for version >= 4.0.\nreleaseKey = GetRegistryKeyValue(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\");\nif (releaseKey == 0)\n{\nreleaseKey = GetRegistryKeyValue(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3.5\");\nif (releaseKey!= 0)\n{\nreturn CheckFor40Version();\n}\n}\n// If all else fails, look for the key using >= 3.5.\nreleaseKey = GetRegistryKeyValue(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3.5\");\nif (releaseKey!= 0)\n{\nreturn CheckFor35Version();\n}\n// If all else fails, look for the key using >= 3.0.\nreleaseKey = GetRegistryKeyValue(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v3\");\nif (releaseKey!= 0)\n{\nreturn CheckFor30Version();\n}\n// If all else fails, look for the key using >= 2.0.\nreleaseKey = GetRegistryKeyValue(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v2\");\nif (releaseKey!= 0)\n{\nreturn CheckFor20Version();\n}\n// If all else fails, look for the key using >= 1.1.\nreleaseKey = GetRegistryKeyValue(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v1\");\nif (releaseKey!= 0)\n{\nreturn CheckFor11Version();\n}\n// If all else fails, look for the key using >= 1.0.\nreleaseKey = GetRegistryKeyValue(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v1\");\nif (releaseKey!= 0)\n{\nreturn CheckFor10Version();\n}\n// If all else fails, return a not found message.\nreturn \"No 4.5 or later version detected\";\n}", "CodeBleu_score": 36.16626069431156}, {"code": "public static string CheckVersion(){\n\t", "CodeBleu_score": 1.9555468765587507}, {"code": "public static string CheckVersion(){\n\teck the version using >= 4.5.\nint releaseKey = GetReleaseNumberFromRegistry();\nif (releaseKey!= 0)\n    return CheckFor45PlusVersion(releaseKey);\n\n// If the version does not start with \"4.5\", check for \"4.0.\"\nif (System.Environment.Version.ToString().StartsWith(\"4.0.\"))\n{\n    releaseKey = GetReleaseNumberFromRegistry();\n    if (releaseKey!= 0)\n        return CheckFor45PlusVersion(releaseKey);\n}\n\n// If the version does not start with \"4.0.\", return a string indicating that no 4.5 or later version is detected.\nreturn \"No 4.5 or later version detected\";\n}", "CodeBleu_score": 43.35935529622319}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new Exception(\"Source and target cannot be the same bitmap.\");\n\t}\n\tif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\n\t\treturn false;\n\t}\n\tFastLock sourceLock = source.LockBits(new Rectangle(0, 0, source.Width, source.Height), ImageLockMode.ReadOnly, source.PixelFormat);\n\tFastLock targetLock = target.LockBits(new Rectangle(0, 0, target.Width, target.Height), ImageLockMode.WriteOnly, target.PixelFormat);\n\ttry {\n\t\tMarshal.Copy(sourceLock.Scan0, targetLock.Scan0, 0, sourceLock.Stride * source.Height);\n\t} finally {\n\t\tsource.UnlockBits(sourceLock);\n\t\ttarget.UnlockBits(targetLock);\n\t}\n\treturn true;\n}", "CodeBleu_score": 50.79677365656345}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new ArgumentException(\"The source and target cannot be the same bitmap\");\n\t}\n\tif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\n\t\treturn false;\n\t}\n\tFastLock sourceLock = new FastLock(source);\n\tFastLock targetLock = new FastLock(target);\n\ttry {\n\t\tMarshal.Copy(sourceLock.Data, 0, targetLock.Data, sourceLock.Data.Length);\n\t} finally {\n\t\tsourceLock.Dispose();\n\t\ttargetLock.Dispose();\n\t}\n\treturn true;\n}", "CodeBleu_score": 55.81663028060482}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) {\n\t\tthrow new ArgumentException(\"Source and target bitmaps are the same.\");\n\t}\n\tif (source.Width!= target.Width || source.Height!= target.Height || source.PixelFormat!= target.PixelFormat) {\n\t\treturn false;\n\t}\n\tFastLock sourceLock = source.LockBits(new Rectangle(0, 0, source.Width, source.Height), ImageLockMode.ReadOnly, source.PixelFormat);\n\tFastLock targetLock = target.LockBits(new Rectangle(0, 0, target.Width, target.Height), ImageLockMode.WriteOnly, target.PixelFormat);\n\tif (sourceLock.Stride!= targetLock.Stride) {\n\t\tthrow new ArgumentException(\"Source and target bitmaps have different strides.\");\n\t}\n\tif (sourceLock.Stride * sourceLock.Height!= targetLock.Stride * targetLock.Height) {\n\t\tthrow new ArgumentException(\"Source and target bitmaps have different sizes.\");\n\t}\n\tif (sourceLock.Stride < 0 || targetLock.Stride < 0) {\n\t\tthrow new ArgumentException(\"Source and target bitmaps have negative strides.\");\n\t}\n\tunsafe {\n\t\tbyte* sourcePtr = (byte*) sourceLock.Scan0;\n\t\tbyte* targetPtr = (byte*) targetLock.Scan0;\n\t\tfor (int i = 0; i < sourceLock.Height; i++) {\n\t\t\tmemcpy(targetPtr, sourcePtr, sourceLock.Stride);\n\t\t\tsourcePtr += sourceLock.Stride;\n\t\t\ttargetPtr += targetLock.Stride;\n\t\t}\n\t}\n\tsource.UnlockBits(sourceLock);\n\ttarget.UnlockBits(targetLock);\n\treturn true;\n}", "CodeBleu_score": 47.702507073987064}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF mousePosition = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(mousePosition);\n}\n}", "CodeBleu_score": 55.09950210516256}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tPointF mousePosition = new PointF(e.X, e.Y);\n\tif (e.Button == MouseButtons.Left) {\n\t\tSetPercent(mousePosition);\n\t}\n}", "CodeBleu_score": 55.03611455054832}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF mousePosition = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(mousePosition);\n}\n}", "CodeBleu_score": 55.09950210516256}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t\tRectangleF r = new RectangleF(0, 0, m_width, m_height);\n\tdc.FillRectangle(Brushes.White, r);\n\tif (m_colors.Count == 2) {\n\t\tdc.FillRectangle(new SolidBrush(m_colors[0]), r);\n\t\tdc.FillRectangle(new SolidBrush(m_colors[1]), r);\n\t}\n\telse if (m_colors.Count > 2) {\n\t\tfloat percent = m_percentSet;\n\t\tfloat percent2 = 1 - percent;\n\t\tfloat percent3 = 1 - percent2;\n\t\tdc.FillRectangle(new SolidBrush(m_colors[0]), r);\n\t\tdc.FillRectangle(new SolidBrush(m_colors[1]), r);\n\t\tdc.FillRectangle(new SolidBrush(m_colors[2]), r);\n\t\tif (m_valueOrientation == eValueOrientation.MaxToMin) {\n\t\t\tpercent = 1 - m_percentSet;\n\t\t\tpercent2 = 1 - percent;\n\t\t\tpercent3 = 1 - percent2;\n\t\t}\n\t\tRectangleF r2 = new RectangleF(r.Left, r.Top, r.Width * percent, r.Height);\n\t\tRectangleF r3 = new RectangleF(r.Left + (r.Width * percent), r.Top, r.Width * percent2, r.Height);\n\t\tRectangleF r4 = new RectangleF(r.Left + (r.Width * percent2), r.Top, r.Width * percent3, r.Height);\n\t\tdc.FillRectangle(new SolidBrush(m_colors[0]), r2);\n\t\tdc.FillRectangle(new SolidBrush(m_colors[1]), r3);\n\t\tdc.FillRectangle(new SolidBrush(m_colors[2]), r4);\n\t}\n\tDrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 39.766354302029086}, {"code": "protected void DrawColorBar(Graphics dc){\n\t\t// calculate rectangle area for bar\n\tRectangleF r = new RectangleF(0, 0, m_width, m_height);\n\tif (m_orientation == Orientation.Vertical) {\n\t\tr.X = m_width - m_width * m_percentSet;\n\t\tr.Width = m_width * m_percentSet;\n\t}\n\tif (m_orientation == Orientation.Horizontal) {\n\t\tr.Y = m_height * m_percentSet;\n\t\tr.Height = m_height - m_height * m_percentSet;\n\t}\n\t// draw bar\n\tif (m_colors.Length == 2) {\n\t\t// two color bar\n\t\tusing SolidBrush brush = new SolidBrush(m_colors[0]);\n\t\tdc.FillRectangle(brush, r);\n\t\tbrush.Dispose();\n\t\tr.X += r.Width;\n\t\tr.Width = 1;\n\t\tusing SolidBrush brush2 = new SolidBrush(m_colors[1]);\n\t\tdc.FillRectangle(brush2, r);\n\t\tbrush2.Dispose();\n\t}\n\tif (m_colors.Length > 2) {\n\t\t// three color bar\n\t\tusing LinearGradientBrush brush = new LinearGradientBrush(r, m_colors[0], m_colors[1], LinearGradientMode.Horizontal);\n\t\tdc.FillRectangle(brush, r);\n\t\tbrush.Dispose();\n\t\tr.X += r.Width;\n\t\tr.Width = 1;\n\t\tusing SolidBrush brush2 = new SolidBrush(m_colors[2]);\n\t\tdc.FillRectangle(brush2, r);\n\t\tbrush2.Dispose();\n\t}\n\t// draw selector\n\tDrawSelector(dc, r, m_orientation, m_percentSet);\n}", "CodeBleu_score": 30.804438500869214}, {"code": "protected void DrawColorBar(Graphics dc){\n\t//\tRectangleF r = new RectangleF(m_rect.Left, m_rect.Top, m_rect.Width, m_rect.Height);\n\tRectangleF r = m_rect;\n\tif (m_colorBarOrientation == eOrientation.Vertical) {\n\t\tr.Width = 10;\n\t}\n\tif (m_colorBarOrientation == eOrientation.Horizontal) {\n\t\tr.Height = 10;\n\t}\n\tif (m_colors.Count == 2) {\n\t\tDrawTwoColorBar(dc, r);\n\t}\n\tif (m_colors.Count > 2) {\n\t\tDrawThreeColorBar(dc, r);\n\t}\n\tif (m_colors.Count > 0) {\n\t\tDrawSelector(dc, r, m_colorBarOrientation, m_percentSet);\n\t}\n}", "CodeBleu_score": 32.64332937392036}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (this.Visible) {\n\t\tthis.dropSymbol = SymbolNormal;\n\t} else {\n\t\tthis.dropSymbol = SymbolDropDown;\n\t}\n\tthis.Invalidate();\n}", "CodeBleu_score": 37.0939624536087}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (this.Visible) {\n\t\tthis.dropSymbol = SymbolNormal;\n\t} else {\n\t\tthis.dropSymbol = SymbolDropDown;\n\t}\n\tthis.Invalidate();\n}", "CodeBleu_score": 37.0939624536087}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (this.Visible) {\n\t\tthis.dropSymbol = SymbolNormal;\n\t} else {\n\t\tthis.dropSymbol = SymbolDropDown;\n\t}\n\tthis.Invalidate();\n}", "CodeBleu_score": 37.0939624536087}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t", "CodeBleu_score": 2.203698489335641}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tbase.OnPaintFore(g, path);\n\tSizeChange();\n\tif (!edit.Visible) {\n\t\tif (string.IsNullOrEmpty(Text)) {\n\t\t\tif (Watermark!= null) {\n\t\t\t\tTextRenderer.DrawText(g, Watermark, Font, new Rectangle(0, 0, Width, Height), WatermarkColor, TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);\n\t\t\t}\n\t\t} else {\n\t\t\tTextRenderer.DrawText(g, Text, Font, new Rectangle(0, 0, Width, Height), ForeColor, TextFormatFlags.EndEllipsis | TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);\n\t\t}\n\t\tif (ShowClearButton) {\n\t\t\tg.DrawImage(ClearButtonImage, Width - Padding.Right - ClearButtonImage.Width, (Height - ClearButtonImage.Height) / 2, ClearButtonImage.Width, ClearButtonImage.Height);\n\t\t} else {\n\t\t\tg.DrawImage(DropDownButtonImage, Width - Padding.Right - DropDownButtonImage.Width, (Height - DropDownButtonImage.Height) / 2, DropDownButtonImage.Width, DropDownButtonImage.Height);\n\t\t}\n\t} else {\n\t\tif (ShowClearButton) {\n\t\t\tg.DrawImage(ClearButtonImage, Width - Padding.Right - ClearButtonImage.Width, (Height - ClearButtonImage.Height) / 2, ClearButtonImage.Width, ClearButtonImage.Height);\n\t\t} else {\n\t\t\tg.DrawImage(DropDownButtonImage, Width - Padding.Right - DropDownButtonImage.Width, (Height - DropDownButtonImage.Height) / 2, DropDownButtonImage.Width, DropDownButtonImage.Height);\n\t\t}\n\t}\n\tg.FillRectangle(new SolidBrush(BackColor), Width - Padding.Right - 1, 0, 1, Height);\n}", "CodeBleu_score": 40.80421058232714}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\n\tif (!edit.Visible) {\n\t\tif (Watermark!= null) {\n\t\t\tg.DrawString(Watermark, Font, new SolidBrush(ForeColor), new Rectangle(4, (Height - Font.Height) / 2, Width - Padding.Left - Padding.Right - 4, Font.Height), new StringFormat() { Alignment = StringAlignment.Near, LineAlignment = StringAlignment.Center });\n\t\t} else {\n\t\t\tg.DrawString(Text, Font, new SolidBrush(ForeColor), new Rectangle(4, (Height - Font.Height) / 2, Width - Padding.Left - Padding.Right - 4, Font.Height), new StringFormat() { Alignment = StringAlignment.Near, LineAlignment = StringAlignment.Center });\n\t\t}\n\t\tg.FillRectangle(new SolidBrush(Color.FromArgb(255, 255, 255, 255)), Width - Padding.Right - 1, 1, Padding.Right, Height - 2);\n\t} else {\n\t\tg.FillRectangle(new SolidBrush(Color.FromArgb(255, 255, 255, 255)), Width - Padding.Right - 1, 1, Padding.Right, Height - 2);\n\t\tif (ClearButton) {\n\t\t\tg.DrawImage(Clear, Width - Padding.Right - 1, (Height - Clear.Height) / 2, Clear.Width, Clear.Height);\n\t\t} else {\n\t\t\tg.DrawImage(DropDown, Width - Padding.Right - 1, (Height - DropDown.Height) / 2, DropDown.Width, DropDown.Height);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.03150076453194}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!ShowClearButton) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (e.X > Width - ControlBoxWidth) {\n\t\tif (NeedDrawClearButton!= Text.Length > 0) {\n\t\t\tNeedDrawClearButton = Text.Length > 0;\n\t\t\tInvalidate();\n\t\t}\n\t} else {\n\t\tNeedDrawClearButton = false;\n\t}\n}", "CodeBleu_score": 48.092169942857886}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!ShowClearButton) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (e.X < this.Width - ClearButtonWidth - 2) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (NeedDrawClearButton!= (e.X > this.Width - ClearButtonWidth - 1)) {\n\t\tNeedDrawClearButton = e.X > this.Width - ClearButtonWidth - 1;\n\t\tInvalidate();\n\t}\n}", "CodeBleu_score": 45.5799134735354}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!ShowClearButton) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (e.X >= (Width - 10)) {\n\t\tif (NeedDrawClearButton!= (Text.Length > 0)) {\n\t\t\tNeedDrawClearButton = Text.Length > 0;\n\t\t\tInvalidate();\n\t\t}\n\t}\n}", "CodeBleu_score": 41.758906295530686}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\tif (this.AutoSize) {\n\t\tthis.Width = this.PreferredSize.Width;\n\t\tthis.Height = this.PreferredSize.Height;\n\t}\n\tbase.OnLayout(e);\n}", "CodeBleu_score": 21.844548171843687}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\t// Call the OnLayout event.\n\tbase.OnLayout(e);\n\t// If the component is not visible, return.\n\tif (!Visible)\n\t\treturn;\n\t// Calculate the preferred size of the component.\n\tSize preferredSize = GetPreferredSize(Size.Empty);\n\t// If the preferred size is different from the current size, and AutoSize is enabled, adjust the size.\n\tif (AutoSize && preferredSize!= Size) {\n\t\tSize = preferredSize;\n\t}\n\t// If the component is not a list, return.\n\tif (Items.Count == 0)\n\t\treturn;\n\t// Set the items to be displayed.\n\tSetItemsToDisplay();\n\t// If the items to be displayed are not the same as the items displayed, refresh the display.\n\tif (ItemsToDisplay!= DisplayedItems) {\n\t\tRefresh();\n\t}\n\t// Call the OnLayoutCompleted event.\n\tOnLayoutCompleted(new LayoutEventArgs(this, LayoutCompleted));\n}", "CodeBleu_score": 56.15078049923642}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\t// Calculate the preferred size of the component\n\tSize preferredSize = GetPreferredSize(Size.Empty);\n\n\t// Adjust the size if AutoSize is enabled and the suggested size differs from the current size\n\tif (AutoSize && preferredSize!= Size) {\n\t\tSize = preferredSize;\n\t}\n\n\t// Set the items to be displayed\n\tSetItemsToDisplay();\n\n\t// Trigger the layout completed event\n\tif (LayoutCompleted!= null) {\n\t\tLayoutCompleted(this, e);\n\t}\n\n\t// Invalidate the component to refresh its display\n\tInvalidate();\n}", "CodeBleu_score": 69.37705631832564}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.fillColor = Color.white;\n\tthis.foregroundColor = uiColor.panelForegroundColor;\n\tthis.rectangleColor = uiColor.symbolButtonColor;\n\tforeach (UISymbolButton uiSymbolButton in this.symbolButtons) {\n\t\tuiSymbolButton.SetStyleColor(uiColor);\n\t}\n}", "CodeBleu_score": 41.48597298097966}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.fillColor = Color.white;\n\tthis.foregroundColor = uiColor.panelForegroundColor;\n\tthis.rectangleColor = uiColor.panelColor;\n\tforeach (UISymbolButton symbolButton in this.symbolButtons) {\n\t\tsymbolButton.SetStyleColor(uiColor);\n\t}\n}", "CodeBleu_score": 42.10369726519727}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.fillColor = Color.white;\n\tthis.foregroundColor = uiColor.panelForegroundColor;\n\tthis.rectangleColor = uiColor.rectangleColor;\n\tfor (int i = 0; i < this.symbolButtons.Count; i++) {\n\t\tthis.symbolButtons[i].SetStyleColor(uiColor);\n\t}\n}", "CodeBleu_score": 39.14646155530673}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (this.Meter == null) return false;\n\tColor BodyColor = this.Meter.BodyColor;\n\tColor DarkerColor = Color.FromArgb(BodyColor.R - 50, BodyColor.G - 50, BodyColor.B - 50);\n\tLinearGradientBrush BodyBrush = new LinearGradientBrush(rc, BodyColor, DarkerColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(BodyBrush, rc);\n\trc.Width = rc.Width * this.Meter.DrawRatio;\n\trc.Height = rc.Height * this.Meter.DrawRatio;\n\trc.X = rc.X + rc.Width;\n\trc.Y = rc.Y + rc.Height;\n\tBodyBrush.Dispose();\n\tBodyBrush = new LinearGradientBrush(rc, DarkerColor, BodyColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(BodyBrush, rc);\n\tBodyBrush.Dispose();\n\treturn true;\n}", "CodeBleu_score": 41.36121640030886}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (this.m_pAnalogMeter == null) return false;\n\tColor c = this.m_pAnalogMeter.BodyColor;\n\tColor c2 = Color.FromArgb(c.A, (c.R + 128) / 2, (c.G + 128) / 2, (c.B + 128) / 2);\n\tLinearGradientBrush br = new LinearGradientBrush(rc, c, c2, 45, true);\n\tGr.FillEllipse(br, rc);\n\trc.Width *= this.m_pAnalogMeter.DrawRatio;\n\trc.Height *= this.m_pAnalogMeter.DrawRatio;\n\trc.X += (rc.Width - rc.Width / this.m_pAnalogMeter.DrawRatio) / 2;\n\trc.Y += (rc.Height - rc.Height / this.m_pAnalogMeter.DrawRatio) / 2;\n\tbr.Dispose();\n\tbr = new LinearGradientBrush(rc, c2, c, 45, true);\n\tGr.FillEllipse(br, rc);\n\tbr.Dispose();\n\treturn true;\n}", "CodeBleu_score": 39.87071317554023}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (AnalogMeter == null) return false;\n\tColor BodyColor = AnalogMeter.BodyColor;\n\tColor DarkerBodyColor = Color.FromArgb(BodyColor.R, BodyColor.G, BodyColor.B);\n\tLinearGradientBrush BodyBrush = new LinearGradientBrush(rc, BodyColor, DarkerBodyColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(BodyBrush, rc);\n\trc.Inflate(-AnalogMeter.DrawRatio, -AnalogMeter.DrawRatio);\n\tBodyBrush.Dispose();\n\tBodyBrush = new LinearGradientBrush(rc, DarkerBodyColor, BodyColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(BodyBrush, rc);\n\tBodyBrush.Dispose();\n\treturn true;\n}", "CodeBleu_score": 36.31212137357889}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\t", "CodeBleu_score": 5.566949455588934}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t\tbase.OnMouseEnter(e);\n\tif (Meter!= null) {\n\t\tif (Meter.BodyColor!= null) {\n\t\t\tColor darker = Color.FromArgb(Meter.BodyColor.R / 2, Meter.BodyColor.G / 2, Meter.BodyColor.B / 2);\n\t\t\tBrush bodyBrush = new LinearGradientBrush(new PointF(0, 0), new PointF(0, Meter.Height), Meter.BodyColor, darker);\n\t\t\tGraphicsPath path = new GraphicsPath();\n\t\t\tRectangleF rc = new RectangleF(0, 0, Meter.Width, Meter.Height);\n\t\t\tpath.AddEllipse(rc);\n\t\t\tGr.FillPath(bodyBrush, path);\n\t\t\trc.X += Meter.Width * Meter.DrawRatio;\n\t\t\trc.Width -= Meter.Width * Meter.DrawRatio;\n\t\t\tpath.Reset();\n\t\t\tpath.AddEllipse(rc);\n\t\t\tbodyBrush.Dispose();\n\t\t\tbodyBrush = new LinearGradientBrush(new PointF(0, 0), new PointF(0, Meter.Height), darker, Meter.BodyColor);\n\t\t\tGr.FillPath(bodyBrush, path);\n\t\t\tpath.Dispose();\n\t\t\tbodyBrush.Dispose();\n\t\t}\n\t\treturn;\n\t}\n}", "CodeBleu_score": 35.043195441356126}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t\tbase.OnMouseEnter(e);\n\tif (this.AnalogMeter == null) {\n\t\treturn;\n\t}\n\tthis.BackColor = this.AnalogMeter.BodyColor;\n\tColor darker = Color.FromArgb(255, (int)(this.BackColor.R * 0.65), (int)(this.BackColor.G * 0.65), (int)(this.BackColor.B * 0.65));\n\tLinearGradientBrush brush = new LinearGradientBrush(this.ClientRectangle, this.BackColor, darker, LinearGradientMode.Vertical);\n\tGraphics Gr = this.CreateGraphics();\n\tGr.FillEllipse(brush, this.ClientRectangle);\n\tRectangleF rc = this.ClientRectangle;\n\trc.Width *= this.AnalogMeter.DrawRatio;\n\trc.Height *= this.AnalogMeter.DrawRatio;\n\trc.X += (this.ClientRectangle.Width - rc.Width) / 2;\n\trc.Y += (this.ClientRectangle.Height - rc.Height) / 2;\n\tbrush = new LinearGradientBrush(rc, darker, this.BackColor, LinearGradientMode.Vertical);\n\tGr.FillEllipse(brush, rc);\n\tGr.Dispose();\n\tbrush.Dispose();\n\tthis.Refresh();\n}", "CodeBleu_score": 28.824326912286484}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\tlock (Lock) {\n\t\tLoadAddresses();\n\t\tLoadOverrides();\n\t\tIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnabled\")?.ToString() == \"1\";\n\t}\n}", "CodeBleu_score": 60.825856480915505}, {"code": "public static void Load(){\n\tock (lockObject) {\nLoadAddresses();\nLoadOverrides();\nIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnabled\")?.ToString() == \"1\";\n}\n}", "CodeBleu_score": 59.16642326623197}, {"code": "public static void Load(){\n\tlock (_lock) {\n\nLoadAddresses();\nLoadOverrides();\n\nIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnabled\")?.ToString() == \"1\";\n\n}\n\n}", "CodeBleu_score": 60.619686707993935}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t", "CodeBleu_score": 1.3814577611629388}, {"code": "private static void LoadOverrides(){\n\t\t// Get the proxy override string from the registry.\n\tstring proxyOverride = (string)Registry.GetValue(RegistryPath, \"ProxyOverride\", null);\n\n\t// If the proxy override string is not null or empty, process it.\n\tif (proxyOverride!= null && proxyOverride.Length > 0) {\n\t\t// Split the override string into an array of individual overrides.\n\t\tstring[] overrides = proxyOverride.Split(';');\n\n\t\t// Iterate through each override.\n\t\tforeach (string overrideString in overrides) {\n\t\t\t// If the override is not null or empty, process it.\n\t\t\tif (overrideString!= null && overrideString.Length > 0) {\n\t\t\t\t// If the override is a local address, set the local flag.\n\t\t\t\tif (overrideString == \"localhost\" || overrideString == \"127.0.0.1\") {\n\t\t\t\t\tLocal = true;\n\t\t\t\t}\n\t\t\t\t// Otherwise, add the override to the list of overrides.\n\t\t\t\telse {\n\t\t\t\t\tOverrides.Add(overrideString);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 54.72375761034187}, {"code": "private static void LoadOverrides(){\n\t", "CodeBleu_score": 1.3814577611629388}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\tstring method = null;\nList<string> headers = new List<string>();\nUri requestUri = null;\n\nstring commandLine = await ReadNonBufferedLineAsync();\n\nif (commandLine.StartsWith(\"CONNECT\"))\n{\n    string[] parts = commandLine.Split(' ');\n    if (parts.Length < 2) throw new WebException(\"Invalid CONNECT request\");\n\n    string host = parts[1].Split(':')[0];\n    if (host.StartsWith(\"[\") && host.EndsWith(\"]\"))\n    {\n        host = host.Substring(1, host.Length - 2);\n    }\n    if (host.Contains(\":\"))\n    {\n        int port = int.Parse(host.Split(':')[1]);\n        host = host.Split(':')[0];\n\n        baseUri = new UriBuilder(baseUri)\n        {\n            Host = host,\n            Port = port\n        }.Uri;\n    }\n    else\n    {\n        baseUri = new UriBuilder(baseUri)\n        {\n            Host = host\n        }.Uri;\n    }\n\n    await SendResponseAsync(HttpStatusCode.OK, \"OK\");\n\n    if (!SecureTunnel(host)) throw new WebException(\"Failed to establish a secure tunnel\");\n\n    return await ReadRequestAsync(baseUri);\n}\n\nstring[] parts = commandLine.Split(' ');\nif (parts.Length < 2) throw new WebException(\"Invalid request\");\n\nmethod = parts[0];\n\nif (method == \"GET\" || method == \"HEAD\")\n{\n    string path = parts[1];\n    if (path.StartsWith(\"http://\"))\n    {\n        requestUri = new Uri(path);\n    }\n    else\n    {\n        requestUri = new UriBuilder(baseUri)\n        {\n            Path = path\n        }.Uri;\n    }\n}\nelse\n{\n    requestUri = baseUri;\n}\n\nstring line;\nwhile ((line = await ReadNonBufferedLineAsync())!= \"\\r\n\")\n{\n    headers.Add(line);\n}\n\nreturn CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 45.61865352166053}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t// Initialize the method, headers list, and request URL based on the provided base URI.\nstring method = \"GET\";\nList<string> headers = new List<string>();\nUri requestUri = baseUri?? new Uri(\"http://127.0.0.1/\");\n\n// Read the first command line and split it to extract the HTTP method and request path.\nstring commandLine = await ReadNonBufferedLineAsync();\nif (commandLine.Length == 0) return null;\n\nstring[] commandParts = commandLine.Split(' ');\nmethod = commandParts[0];\nstring requestPath = commandParts[1];\n\n// While the client is connected, continue to read and collect HTTP headers.\nwhile (true)\n{\n    string headerLine = await ReadNonBufferedLineAsync();\n    if (headerLine.Length == 0) break;\n    headers.Add(headerLine);\n}\n\n// If the method is \"CONNECT\", update the base URI, send an OK response, and attempt to establish a secure tunnel.\nif (method == \"CONNECT\")\n{\n    requestUri = new Uri(\"https://\" + requestPath);\n    await SendResponseAsync(HttpStatusCode.OK, \"OK\");\n    if (!SecureTunnel(requestPath))\n    {\n        await SendResponseAsync(HttpStatusCode.Forbidden, \"Forbidden\");\n        return null;\n    }\n    return await ReadRequestAsync(requestUri);\n}\n\n// Create and return an HttpWebRequest with the specified method, headers, and request URL.\nreturn CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 44.2100212799116}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\teadRequestAsync:\n            string method = \"GET\";\n            List<string> headers = new List<string>();\n            Uri requestUri = baseUri;\n\n            string requestLine = await ReadNonBufferedLineAsync();\n            if (requestLine.StartsWith(\"CONNECT\", StringComparison.OrdinalIgnoreCase))\n            {\n                string[] parts = requestLine.Split(' ');\n                requestUri = new Uri($\"https://{parts[1]}\");\n                method = \"CONNECT\";\n            }\n            else\n            {\n                string[] parts = requestLine.Split(' ');\n                method = parts[0];\n                requestUri = new Uri(baseUri, parts[1]);\n            }\n\n            while (true)\n            {\n                string header = await ReadNonBufferedLineAsync();\n                if (header.Length == 0) break;\n\n                headers.Add(header);\n            }\n            return CreateRequest(method, headers, requestUri);\n        }", "CodeBleu_score": 43.0637011808221}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\tstring description = \"OK\";\nvar status = HttpStatusCode.OK;\nif (response is HttpWebResponse httpResponse)\n{\nstatus = httpResponse.StatusCode;\ndescription = httpResponse.StatusDescription;\n}\nreturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.24053688949616}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\tstring description = \"OK\";\nvar status = HttpStatusCode.OK;\nif (response is HttpWebResponse httpResponse)\n{\nstatus = httpResponse.StatusCode;\ndescription = httpResponse.StatusDescription;\n}\nreturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.24053688949616}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\tstring description = \"OK\";\nvar status = HttpStatusCode.OK;\nif (response is HttpWebResponse httpResponse)\n{\nstatus = httpResponse.StatusCode;\ndescription = httpResponse.StatusDescription;\n}\nreturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.24053688949616}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\try {\n// Create the certificate request.\nX509Certificate2 certificate = new X509Certificate2(certFile, certPass);\nX509Certificate2Collection certificateCollection = new X509Certificate2Collection(certificate);\n\n// Create the SSL stream.\nSslStream sslStream = new SslStream(GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);\n\n// Authenticate the SSL stream as a server.\nsslStream.AuthenticateAsServer(certificateCollection, false, SslProtocols.Tls, false);\n\n// Assign the stream to the private field.\n_secureStream = sslStream;\n\n// Return true if the process succeeds.\nreturn true;\n}\ncatch (Exception) {\n// Return false if an exception occurs.\nreturn false;\n}\n}", "CodeBleu_score": 37.24784494178676}, {"code": "private bool SecureTunnel(string host){\n\try {\n// Generate a new certificate for the host\nX509Certificate2 certificate = CertificateGenerator.Generate(host);\n\n// Create a new SSL stream\n_secureStream = new SslStream(GetStream());\n\n// Authenticate the SSL stream as a server\n_secureStream.AuthenticateAsServer(certificate, false, SslProtocols.Tls, false);\n\n// Set the client's stream to the secure stream\n_client.SetStream(_secureStream);\n\n// Return true if the process succeeds\nreturn true;\n}\ncatch (Exception) {\n// Return false if an exception occurs\nreturn false;\n}\n}", "CodeBleu_score": 56.39381136423774}, {"code": "private bool SecureTunnel(string host){\n\t/ Create a new SSL stream that will wrap the current stream.\ntry {\n// Create a new SSL stream that will wrap the current stream.\n_secureStream = new SslStream(GetStream());\n\n// Create an X509Certificate object with the specified certificate file and password.\nX509Certificate certificate = new X509Certificate(certificateFile, certificatePassword);\n\n// Set the client certificate option to require the server to authenticate.\n_secureStream.AuthenticateAsServer(certificate, true, SslProtocols.Tls, false);\n}\ncatch (Exception ex) {\nConsole.WriteLine(ex.Message);\nreturn false;\n}\nreturn true;\n}", "CodeBleu_score": 44.25765430265105}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response.ContentLength == 0) {\n\t\tresponse.Close();\n\t\treturn null;\n\t}\n\tStream stream = response.GetResponseStream();\n\tint bufferSize = (int) response.ContentLength;\n\tif (bufferSize == 0) {\n\t\tbufferSize = 4096;\n\t}\n\treturn new StreamContent(stream, bufferSize);\n}", "CodeBleu_score": 42.53959508938987}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tStream stream = response.GetResponseStream();\n\tif (stream == null) {\n\t\tresponse.Dispose();\n\t\treturn null;\n\t}\n\tif (response.ContentLength == -1) {\n\t\treturn new StreamContent(stream);\n\t}\n\treturn new StreamContent(stream, (int)response.ContentLength);\n}", "CodeBleu_score": 38.77155257276753}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response.ContentLength == 0) {\n\t\tresponse.Dispose();\n\t\treturn null;\n\t}\n\tStream stream = response.GetResponseStream();\n\tint bufferSize = response.ContentLength > 0? (int)response.ContentLength : 4096;\n\treturn new StreamContent(stream, bufferSize);\n}", "CodeBleu_score": 43.1756049739915}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\ttry {\n\t\t// Retrieve and trim the text from ActivityConfigJsonPath\n\t\tstring jsonPath = ActivityConfigJsonPath.Text.Trim();\n\t\t// If the path is empty, open a file dialog to select a JSON file\n\t\tif (jsonPath.Length == 0) {\n\t\t\tusing (OpenFileDialog ofd = new OpenFileDialog()) {\n\t\t\t\tofd.Filter = \"JSON Files (*.json)|*.json\";\n\t\t\t\tif (ofd.ShowDialog() == DialogResult.OK) {\n\t\t\t\t\t// Update the path\n\t\t\t\t\tjsonPath = ofd.FileName;\n\t\t\t\t\tActivityConfigJsonPath.Text = jsonPath;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Load the activity configuration from the specified path\n\t\tActivityConfig ac = ActivityConfig.Load(jsonPath);\n\t\t// Show a success message\n\t\tMessageBox.Show(\"Activity configuration loaded successfully from \" + jsonPath, \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t} catch (Exception ex) {\n\t\t// Display an error message with the exception details\n\t\tMessageBox.Show(\"Error loading activity configuration: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 43.40886202753983}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\t// Get the text from the textbox.\n\tstring path = ActivityConfigJsonPath.Text.Trim();\n\n\t// If the textbox is empty, open a file dialog.\n\tif (string.IsNullOrEmpty(path)) {\n\t\t// Open a file dialog.\n\t\tOpenFileDialog dialog = new OpenFileDialog();\n\n\t\t// Set the file dialog filter.\n\t\tdialog.Filter = \"JSON Files (*.json)|*.json\";\n\n\t\t// If the file dialog returns OK, set the path.\n\t\tif (dialog.ShowDialog() == DialogResult.OK) {\n\t\t\tpath = dialog.FileName;\n\t\t}\n\t}\n\n\t// If the path is not empty, try to load the activity configuration.\n\tif (!string.IsNullOrEmpty(path)) {\n\t\t// Try to load the activity configuration.\n\t\ttry {\n\t\t\t// Load the activity configuration.\n\t\t\tActivityConfig = ActivityConfiguration.Load(path);\n\n\t\t\t// If the activity configuration was loaded, show a success message.\n\t\t\tMessageBox.Show(\"Activity configuration loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t}\n\t\t// If an exception occurs, display an error message.\n\t\tcatch (Exception ex) {\n\t\t\tMessageBox.Show(\"An error occurred while loading the activity configuration: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.47644740698877}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tstring path = ActivityConfigJsonPath.Text.Trim();\n\tif (path == \"\") {\n\t\tif (ActivityConfigJsonFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\tActivityConfigJsonPath.Text = ActivityConfigJsonFileDialog.FileName;\n\t\t\tpath = ActivityConfigJsonPath.Text.Trim();\n\t\t}\n\t}\n\ttry {\n\t\tActivityConfig = JsonConvert.DeserializeObject<ActivityConfig>(File.ReadAllText(path));\n\t\tActivityConfigJsonPath.Text = path;\n\t\tMessageBox.Show(\"Activity configuration loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(\"Error loading activity configuration:\n\" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 39.09437522889234}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t\tstring json = File.ReadAllText(path);\n\tActivityConfigItems.Clear();\n\tActivityConfigItems.AddRange(JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json));\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 27.476780775246922}, {"code": "private void LoadActivityConfig(string path){\n\t\tstring json = File.ReadAllText(path);\n\tActivityConfigItems.Clear();\n\tActivityConfigItems.AddRange(JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json));\n\tListActivityConfigItems.Items.Clear();\n\tListActivityConfigItems.Items.AddRange(ActivityConfigItems.ToArray());\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 40.873414853252136}, {"code": "private void LoadActivityConfig(string path){\n\t\t// Load the JSON file content into a string\n\tstring json = File.ReadAllText(path);\n\n\t// Deserialize the JSON content into a list of ActivityConfigItem objects\n\tList<ActivityConfigItem> items = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n\n\t// Clear the existing items in the ListActivityConfigItems control\n\tListActivityConfigItems.Items.Clear();\n\n\t// Add the newly loaded items to the ListActivityConfigItems control\n\tforeach (ActivityConfigItem item in items) {\n\t\tListActivityConfigItems.Items.Add(item);\n\t}\n\n\t// End the update to refresh the display\n\tListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 37.76410057609997}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t\ttry {\n\t\tstring filePath = ActivityConfigJsonPath.Text.Trim();\n\t\tif (filePath == \"\") {\n\t\t\tSaveFileDialog saveFileDialog = new SaveFileDialog();\n\t\t\tsaveFileDialog.Filter = \"JSON Files (*.json)|*.json\";\n\t\t\tif (saveFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\t\tfilePath = saveFileDialog.FileName;\n\t\t\t\tActivityConfigJsonPath.Text = filePath;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tstring json = JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented);\n\t\tFile.WriteAllText(filePath, json);\n\t\tMessageBox.Show(\"Configuration saved successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t} catch (Exception ex) {\n\t\tMessageBox.Show($\"An error occurred while saving the configuration:\n{ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 45.838090533961925}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t\ttry {\n\t\tstring path = ActivityConfigJsonPath.Text.Trim();\n\t\tif (path == \"\") {\n\t\t\tSaveFileDialog sfd = new SaveFileDialog();\n\t\t\tsfd.Filter = \"JSON Files (*.json)|*.json\";\n\t\t\tsfd.Title = \"Select a file\";\n\t\t\tif (sfd.ShowDialog() == DialogResult.OK) {\n\t\t\t\tActivityConfigJsonPath.Text = sfd.FileName;\n\t\t\t\tpath = ActivityConfigJsonPath.Text.Trim();\n\t\t\t}\n\t\t}\n\t\tif (path == \"\") {\n\t\t\treturn;\n\t\t}\n\t\tstring json = JsonConvert.SerializeObject(ActivityConfigItems);\n\t\tFile.WriteAllText(path, json);\n\t\tMessageBox.Show(\"Configuration data saved successfully!\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 42.53901699371704}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t\tstring filePath = ActivityConfigJsonPath.Text.Trim();\n\tif (filePath == \"\") {\n\t\tSaveFileDialog saveFileDialog = new SaveFileDialog();\n\t\tsaveFileDialog.Title = \"Save Activity Configuration File\";\n\t\tsaveFileDialog.Filter = \"JSON file (*.json)|*.json\";\n\t\tsaveFileDialog.RestoreDirectory = true;\n\t\tif (saveFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\tActivityConfigJsonPath.Text = saveFileDialog.FileName;\n\t\t\tfilePath = ActivityConfigJsonPath.Text.Trim();\n\t\t}\n\t}\n\tif (filePath == \"\") {\n\t\treturn;\n\t}\n\ttry {\n\t\tstring json = JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented);\n\t\tFile.WriteAllText(filePath, json);\n\t\tMessageBox.Show(\"Activity configuration data saved successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(\"An error occurred while saving the activity configuration data.\n\n\" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 41.01329530692829}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\t\t// Disable updates to the ListView while we populate it\n\tm_activityListView.BeginUpdate();\n\n\t// Iterate through each activity group\n\tforeach (ActivityGroup group in GameData.Activity) {\n\t\t// Create a new group control\n\t\tListViewGroup groupControl = new ListViewGroup(group.Name);\n\n\t\t// Add items representing the activity IDs and names to this group\n\t\tforeach (Activity activity in group.Activities) {\n\t\t\tListViewItem item = new ListViewItem(activity.ID.ToString());\n\t\t\titem.SubItems.Add(activity.Name);\n\t\t\tgroupControl.Items.Add(item);\n\t\t}\n\n\t\t// Add the group control to the ListView\n\t\tm_activityListView.Groups.Add(groupControl);\n\t}\n\n\t// Re-enable updates to the ListView\n\tm_activityListView.EndUpdate();\n}", "CodeBleu_score": 31.691383637993187}, {"code": "private void LoadAllActivity(){\n\t\t// Disable updates to the ListView while populating it.\n\tthis.listViewActivity.BeginUpdate();\n\n\t// Iterate through each activity group in the GameData.Activity collection.\n\tforeach (KeyValuePair<string, ActivityGroup> activityGroup in GameData.Activity) {\n\t\t// Create a new group control in the ListView and add it to the ListView.\n\t\tListViewGroup listViewGroup = new ListViewGroup(activityGroup.Key);\n\t\tthis.listViewActivity.Groups.Add(listViewGroup);\n\n\t\t// Iterate through each activity ID and name in the activity group.\n\t\tforeach (KeyValuePair<string, string> activity in activityGroup.Value.Activity) {\n\t\t\t// Create a new item control in the ListView and add it to the group.\n\t\t\tListViewItem listViewItem = new ListViewItem(activity.Key);\n\t\t\tlistViewItem.SubItems.Add(activity.Value);\n\t\t\tlistViewGroup.Items.Add(listViewItem);\n\t\t}\n\t}\n\n\t// Re-enable updates to the ListView.\n\tthis.listViewActivity.EndUpdate();\n}", "CodeBleu_score": 34.88864469693678}, {"code": "private void LoadAllActivity(){\n\t\t// Disable updates to the ListView to improve efficiency\n\tthis.listViewActivity.BeginUpdate();\n\n\t// Clear existing items from the ListView\n\tthis.listViewActivity.Items.Clear();\n\n\t// Iterate through each activity group\n\tforeach (ActivityGroup activityGroup in GameData.Activity) {\n\t\t// Create a new group control for the activity group\n\t\tListViewGroup listViewGroup = new ListViewGroup(activityGroup.Name);\n\n\t\t// Iterate through each activity in the activity group\n\t\tforeach (Activity activity in activityGroup.Activities) {\n\t\t\t// Create a new list item for the activity\n\t\t\tListViewItem listViewItem = new ListViewItem(activity.ID.ToString());\n\t\t\tlistViewItem.SubItems.Add(activity.Name);\n\n\t\t\t// Add the list item to the group control\n\t\t\tlistViewGroup.Items.Add(listViewItem);\n\t\t}\n\n\t\t// Add the group control to the ListView\n\t\tthis.listViewActivity.Groups.Add(listViewGroup);\n\t}\n\n\t// Re-enable updates to the ListView\n\tthis.listViewActivity.EndUpdate();\n}", "CodeBleu_score": 32.671498225734894}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\ttry {\n\t\tif (ListAllActivity.SelectedItems.Count == 0) {\n\t\t\treturn;\n\t\t}\n\t\tNUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 64.4278049966795}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\ttry {\n\t\tif (ListAllActivity.SelectedItems.Count == 0)\n\t\t\treturn;\n\t\tNUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 68.813715402685}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\ttry {\n\t\tif (ListAllActivity.SelectedItems.Count == 0) {\n\t\t\treturn;\n\t\t}\n\t\tNUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 64.47796616259906}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\ttry {\n\t\tstring filePath = txtLoad.Text;\n\t\tif (string.IsNullOrWhiteSpace(filePath)) {\n\t\t\tif (openFileDialog1.ShowDialog() == DialogResult.OK) {\n\t\t\t\tfilePath = openFileDialog1.FileName;\n\t\t\t\ttxtLoad.Text = filePath;\n\t\t\t}\n\t\t}\n\t\tBanner[] banners = Banner.Load(filePath);\n\t\tlblLoad.Text = $\"Loaded {banners.Length} banners\";\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 31.988950768328163}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\ttry {\n\t\t// Retrieve the file path from the text box.\n\t\tstring filePath = TxtFilePath.Text;\n\n\t\t// Check if the file path is empty.\n\t\tif (string.IsNullOrEmpty(filePath)) {\n\t\t\t// Open a file dialog to select a JSON file.\n\t\t\tOpenFileDialog openFileDialog = new OpenFileDialog();\n\t\t\topenFileDialog.Filter = \"JSON Files (*.json)|*.json\";\n\t\t\topenFileDialog.Title = \"Select a JSON File\";\n\t\t\topenFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\n\n\t\t\t// Show the file dialog and check if a file is selected.\n\t\t\tif (openFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\t\t// Update the text box with the selected file path.\n\t\t\t\tfilePath = openFileDialog.FileName;\n\t\t\t\tTxtFilePath.Text = filePath;\n\t\t\t}\n\t\t}\n\n\t\t// Attempt to deserialize and load the banners from the specified file path.\n\t\tif (!string.IsNullOrEmpty(filePath)) {\n\t\t\t// Deserialize the banners from the JSON file.\n\t\t\tList<Banner> banners = DeserializeBanners(filePath);\n\n\t\t\t// Check if the banners were successfully deserialized.\n\t\t\tif (banners!= null) {\n\t\t\t\t// Update the banner list with the deserialized banners.\n\t\t\t\tBannerList = banners;\n\n\t\t\t\t// Show a success message.\n\t\t\t\tMessageBox.Show(\"Banners loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\t// Display an error message with the exception details.\n\t\tMessageBox.Show(\"An error occurred while loading the banners: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 38.1392633753194}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tstring filePath = TxtFilePath.Text;\n\tif (filePath == \"\") {\n\t\tif (openFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\tfilePath = openFileDialog.FileName;\n\t\t\tTxtFilePath.Text = filePath;\n\t\t}\n\t\telse {\n\t\t\treturn;\n\t\t}\n\t}\n\ttry {\n\t\tbanners = Banner.LoadBanners(filePath);\n\t\tMessageBox.Show(\"Banners loaded from \" + filePath + \" successfully!\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(\"Error loading banners from \" + filePath + \":\n\" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 36.010636105322966}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t\t// Update the list with the new drop data\n\tdropList.Clear();\n\tdropList.AddRange(dropData);\n\n\t// If the list contains elements, add them to the list\n\tif (dropList.Count > 0) {\n\t\t// Clear the list\n\t\tdropListUI.ClearItems();\n\n\t\t// Add the items to the list\n\t\tfor (int i = 0; i < dropList.Count; i++) {\n\t\t\tdropListUI.AddItem(dropList[i].name);\n\t\t}\n\n\t\t// Select the first item\n\t\tdropListUI.SelectItem(0);\n\t}\n\n\t// End the update process for the list\n\tdropListUI.EndUpdate();\n}", "CodeBleu_score": 44.29777828722777}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t\t// Update the list\n\tdropListUI.UpdateList(dropList);\n\t\n\t// Clear any existing items\n\tdropListUI.ClearItems();\n\t\n\t// Check if the drop list contains elements\n\tif (dropList.Count > 0) {\n\t\t// Add each item to the list\n\t\tforeach (DropData dropData in dropList) {\n\t\t\tdropListUI.AddItem(dropData);\n\t\t}\n\t\t\n\t\t// Set the first item as selected\n\t\tdropListUI.SelectItem(0);\n\t}\n\t\n\t// End the update process for the list\n\tdropListUI.EndUpdate();\n}", "CodeBleu_score": 39.58228569567883}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t\t// Update the list\n\tdropList.Clear();\n\tdropList.AddRange(dropDataList);\n\t// Clear the list\n\tdropListUI.ClearList();\n\t// Check if the list contains elements\n\tif (dropList.Count > 0) {\n\t\t// Add the list items\n\t\tforeach (DropData dropData in dropList) {\n\t\t\tdropListUI.AddItem(dropData.name, dropData.item);\n\t\t}\n\t\t// Set the first item as selected\n\t\tdropListUI.SelectItem(0);\n\t}\n\t// End the update process\n\tdropListUI.EndUpdate();\n}", "CodeBleu_score": 41.505745962848444}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t", "CodeBleu_score": 1.580193456861919}, {"code": "private void RemoveDrop(DropData data){\n\t\t//Stop updates to the list\n\tListDrops.BeginUpdate();\n\t//Clear existing items\n\tListDrops.Items.Clear();\n\t//Check if the drop list contains items\n\tif (data.Drops.Count > 0) {\n\t\t//Add each item to the list\n\t\tforeach (DropData drop in data.Drops)\n\t\t\tListDrops.Items.Add(drop.ToString());\n\t\t//Select the first item\n\t\tListDrops.SelectedIndex = 0;\n\t}\n\t//Resume updates to the list\n\tListDrops.EndUpdate();\n}", "CodeBleu_score": 18.177801478321847}, {"code": "private void RemoveDrop(DropData data){\n\t\tif (data == null)\n\t\treturn;\n\tif (data.Id == -1)\n\t\treturn;\n\n\tListDrops.BeginUpdate();\n\tListDrops.Items.Remove(data);\n\tListDrops.EndUpdate();\n}", "CodeBleu_score": 16.143229863626114}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t\t// Log the entry into the form closed event\n\tLog.LogEvent(\"FormMain_FormClosed\", \"Entry\");\n\t// Iterate through each page, logging the start and completion of their OnClosed method\n\tforeach (Form page in _pages) {\n\t\tpage.OnClosed(e);\n\t\tLog.LogEvent(page.Name + \"_OnClosed\", \"Entry\");\n\t\tLog.LogEvent(page.Name + \"_OnClosed\", \"Exit\");\n\t}\n\t// Save the current settings\n\tSettings.SaveSettings();\n\t// Log the completion of the form closed event\n\tLog.LogEvent(\"FormMain_FormClosed\", \"Exit\");\n}", "CodeBleu_score": 38.39651615656761}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t\t// Log the form closed event\n\tLog.LogEvent(Log.LogType.FormClosed, \"FormMain\", \"FormMain_FormClosed\", \"FormMain\", \"FormMain\");\n\n\t// Iterate through each page and log the start and completion of their OnClosed method\n\tforeach (FormPage page in pages) {\n\t\t// Log the start of the OnClosed method\n\t\tLog.LogEvent(Log.LogType.OnClosedStart, \"FormMain\", \"FormMain_FormClosed\", \"FormMain\", page.Name);\n\n\t\t// Call the OnClosed method\n\t\tpage.OnClosed();\n\n\t\t// Log the completion of the OnClosed method\n\t\tLog.LogEvent(Log.LogType.OnClosedEnd, \"FormMain\", \"FormMain_FormClosed\", \"FormMain\", page.Name);\n\t}\n\n\t// Save the current settings\n\tSettings.Save();\n\n\t// Log the form closed event\n\tLog.LogEvent(Log.LogType.FormClosed, \"FormMain\", \"FormMain_FormClosed\", \"FormMain\", \"FormMain\");\n}", "CodeBleu_score": 42.92003139922396}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t", "CodeBleu_score": 4.520949790988226}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\t", "CodeBleu_score": 0.7898236434181539}, {"code": " private void SaveSettings(){\n\t\ttry {\n\t\t// Save the state of the UI\n\t\tSettings.Default.AutoCopy = AutoCopy.Checked;\n\t\tSettings.Default.WindowState = this.WindowState;\n\t\tSettings.Default.WindowLeft = this.Left;\n\t\tSettings.Default.WindowTop = this.Top;\n\t\tSettings.Default.WindowWidth = this.Width;\n\t\tSettings.Default.WindowHeight = this.Height;\n\t\tSettings.Default.SplitterDistance = NavigationContainer.SplitterDistance;\n\t\tSettings.Default.Save();\n\t} catch (Exception ex) {\n\t\t// Log the error\n\t\tLog.Error(ex);\n\t\t// Display the error\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 38.18131741851896}, {"code": " private void SaveSettings(){\n\t\ttry {\n\t\t// Save the state of the UI\n\t\tSettings.Default.AutoCopy = AutoCopy;\n\t\tSettings.Default.WindowState = WindowState;\n\t\tSettings.Default.WindowLeft = Left;\n\t\tSettings.Default.WindowTop = Top;\n\t\tSettings.Default.WindowWidth = Width;\n\t\tSettings.Default.WindowHeight = Height;\n\t\tSettings.Default.SplitterDistance = splitContainer1.SplitterDistance;\n\t\t// Save the state of the main form\n\t\tSettings.Default.MainFormHeight = splitContainer1.Panel1.Height;\n\t\t// Save the settings\n\t\tSettings.Default.Save();\n\t} catch (Exception ex) {\n\t\t// Log the error\n\t\tLog.Error(ex);\n\t\t// Display the error message\n\t\tMessageBox.Show(\"An error occurred while saving the settings.  The error has been logged, and the application will now close.\", \"Error Saving Settings\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t// Close the application\n\t\tClose();\n\t}\n}", "CodeBleu_score": 38.40103998370178}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tif (PageTabOrders!= null) {\n\t\treturn PageTabOrders;\n\t}\n\n\tPageTabOrders = new List<Tuple<string, bool>>();\n\n\tif (Settings.GetSetting(\"PageTabOrders\", out string pageTabOrders)) {\n\t\tvar pageTabOrdersList = pageTabOrders.Split(';');\n\n\t\tforeach (var pageTabOrder in pageTabOrdersList) {\n\t\t\tvar pageTabOrderParts = pageTabOrder.Split(':');\n\t\t\tvar pageName = pageTabOrderParts[0];\n\t\t\tvar isVisible = bool.Parse(pageTabOrderParts[1]);\n\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n\t\t}\n\t} else {\n\t\tforeach (var page in Pages) {\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n\t\t}\n\t}\n\n\treturn PageTabOrders;\n}", "CodeBleu_score": 31.1251654605804}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tif (PageTabOrders!= null) {\n\t\treturn PageTabOrders;\n\t}\n\tList<Tuple<string, bool>> pageTabOrders = new List<Tuple<string, bool>>();\n\tif (PlayerPrefs.HasKey(\"PageTabOrders\")) {\n\t\tstring[] pageTabOrdersString = PlayerPrefs.GetString(\"PageTabOrders\").Split(new string[] { \"|\" }, StringSplitOptions.RemoveEmptyEntries);\n\t\tforeach (string pageTabOrderString in pageTabOrdersString) {\n\t\t\tstring[] pageTabOrder = pageTabOrderString.Split(new string[] { \",\" }, StringSplitOptions.RemoveEmptyEntries);\n\t\t\tpageTabOrders.Add(new Tuple<string, bool>(pageTabOrder[0], pageTabOrder[1] == \"1\"));\n\t\t}\n\t} else {\n\t\tforeach (string pageName in PageNames) {\n\t\t\tpageTabOrders.Add(new Tuple<string, bool>(pageName, true));\n\t\t}\n\t}\n\tPageTabOrders = pageTabOrders;\n\treturn PageTabOrders;\n}", "CodeBleu_score": 23.998682504599913}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tif (PageTabOrders!= null) {\n\t\treturn PageTabOrders;\n\t}\n\n\tPageTabOrders = new List<Tuple<string, bool>>();\n\n\tstring[] pageTabOrders = Settings.GetSetting(\"PageTabOrders\", \"\").Split(';');\n\n\tif (pageTabOrders.Length == 0) {\n\t\tforeach (string page in Pages) {\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page, true));\n\t\t}\n\t} else {\n\t\tforeach (string pageTabOrder in pageTabOrders) {\n\t\t\tstring[] pageTabOrderParts = pageTabOrder.Split('|');\n\t\t\tstring page = pageTabOrderParts[0];\n\t\t\tbool visible = pageTabOrderParts[1] == \"1\";\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page, visible));\n\t\t}\n\t}\n\n\treturn PageTabOrders;\n}", "CodeBleu_score": 27.191262055353388}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t\t// Log the length of the frame data\n\tDebug.Log(\"Frame data length: \" + info.frameData.Length);\n\t// Log the current file stream length\n\tDebug.Log(\"Current file stream length: \" + stream.Length);\n\t// Write the frame data to the compression stream\n\tstream.Write(info.frameData, 0, info.frameData.Length);\n\t// Flush the stream\n\tstream.Flush();\n\t// Set the frame data to null\n\tinfo.frameData = null;\n\t// Add the frame information to the project's frames collection\n\tproject.frames.Add(info);\n}", "CodeBleu_score": 46.29476091584345}, {"code": "public override void Save(FrameInfo info){\n\t\tif (info.frameData!= null) {\n\t\t// Write the length of the frame data to the stream\n\t\tstream.Write(BitConverter.GetBytes(info.frameData.Length), 0, 4);\n\n\t\t// Write the frame data to the stream\n\t\tstream.Write(info.frameData, 0, info.frameData.Length);\n\n\t\t// Flush the stream\n\t\tstream.Flush();\n\n\t\t// Set the frame data to null\n\t\tinfo.frameData = null;\n\n\t\t// Add the frame information to the project's frames collection\n\t\tproject.frames.Add(info);\n\t}\n}", "CodeBleu_score": 43.462292890146486}, {"code": "public override void Save(FrameInfo info){\n\t\t//log the length of the frame data\n\tLog.LogLength(info.frameData.Length);\n\t//log the current file stream length\n\tLog.LogCurrentLength();\n\t//write the frame data to the compression stream\n\tstream.Write(info.frameData, 0, info.frameData.Length);\n\t//flush the stream\n\tstream.Flush();\n\t//set the frame data to null\n\tinfo.frameData = null;\n\t//add the frame information to the project's frames collection\n\tproject.frames.Add(info);\n}", "CodeBleu_score": 42.79433722739146}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t the texture dimensions.\n\tint width = texture.Description.Width;\n\tint height = texture.Description.Height;\n\tint pitch = texture.Description.Pitch;\n\n\t//Maps the texture for CPU access.\n\tDataRectangle rect = texture.Map(0, MapMode.WriteDiscard);\n\n\t//Draws the cursor based on the type.\n\tif (info.Type == OutputDuplicatePointerShapeType.Monochrome) {\n\t\tDrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer, height);\n\t} else if (info.Type == OutputDuplicatePointerShapeType.Color) {\n\t\tDrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer);\n\t} else if (info.Type == OutputDuplicatePointerShapeType.MaskedColor) {\n\t\tDrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, pitch, buffer);\n\t}\n\n\t//Unmaps the surface to release the CPU access.\n\ttexture.Unmap(0);\n}", "CodeBleu_score": 52.82369684793778}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\ttes a surface to map the texture for CPU access.\n\tSurfaceDescription desc = new SurfaceDescription();\n\ttexture.GetLevelDescription(0, out desc);\n\tSurface surface = new Surface(texture, 0);\n\tDataRectangle rect = surface.LockRectangle(LockFlags.None);\n\n\t//Draws the cursor based on the cursor type.\n\tswitch (info.Type) {\n\t\tcase OutputDuplicatePointerShapeType.Monochrome:\n\t\t\tDrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, desc.Width, buffer, desc.Height);\n\t\t\tbreak;\n\t\tcase OutputDuplicatePointerShapeType.Color:\n\t\t\tDrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, desc.Width, buffer);\n\t\t\tbreak;\n\t\tcase OutputDuplicatePointerShapeType.MaskedColor:\n\t\t\tDrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, rect, desc.Width, buffer);\n\t\t\tbreak;\n\t}\n\n\t//Releases the CPU access to the surface.\n\tsurface.UnlockRectangle();\n}", "CodeBleu_score": 62.44241668189584}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\tthe texture surface.\nvar surface = texture.Lock();\n\n//Draws the cursor based on the type.\nif (info.Shape.Type == ShapeType.Monochrome)\n{\n    DrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, surface, info.Shape.Surface.Pitch, buffer, info.Shape.Surface.Height);\n}\nelse if (info.Shape.Type == ShapeType.Color)\n{\n    DrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, surface, info.Shape.Surface.Pitch, buffer);\n}\nelse if (info.Shape.Type == ShapeType.MaskedColor)\n{\n    DrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, surface, info.Shape.Surface.Pitch, buffer);\n}\n\n//Unmaps the surface.\ntexture.Unlock();\n}", "CodeBleu_score": 49.852481047911354}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDiskUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 72.27642249746378}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDiskUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 72.27642249746378}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 71.80852813415206}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t#pragma warning disable CS0618 // Type or member is obsolete\n        if (preset is null)\n        {\n            throw new ArgumentNullException(nameof(preset));\n        }\n\n        if (path is null)\n        {\n            throw new ArgumentNullException(nameof(path));\n        }\n\n        if (preset.UploadPreset is null)\n        {\n            throw new ArgumentException(\"The preset must have a valid upload preset.\", nameof(preset));\n        }\n\n        if (!File.Exists(path))\n        {\n            throw new FileNotFoundException(\"The file does not exist.\", path);\n        }\n\n        var fileInfo = new FileInfo(path);\n        if (fileInfo.Length > preset.MaxFileSize)\n        {\n            throw new FileTooLargeException(\"The file is too large.\", fileInfo.Length, preset.MaxFileSize);\n        }\n\n        var uploadLink = await GetUploadLinkAsync(preset, fileInfo.Name, cancellationToken);\n        if (uploadLink is null)\n        {\n            throw new UploadException(\"The upload link is invalid.\", preset);\n        }\n\n        using (var stream = File.OpenRead(path))\n        {\n            await PutAsync(preset, uploadLink.Href, stream, cancellationToken, progressCallback);\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset, uploadLink.Href, cancellationToken);\n        if (downloadLink is null)\n        {\n            throw new DownloadException(\"The download link is invalid.\", preset);\n        }\n\n        return new History(preset, fileInfo.Name, fileInfo.Length, uploadLink.Href, downloadLink.Href);\n#pragma warning restore CS0618 // Type or member is obsolete\n    }", "CodeBleu_score": 49.47196291889164}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t// Check if the file exists\n        if (!File.Exists(path))\n        {\n            throw new FileNotFoundException(\"File not found\", path);\n        }\n\n// Check if the preset is valid\n        if (preset == null)\n        {\n            throw new ArgumentNullException(nameof(preset));\n        }\n\n// Get an upload link for the file\n        var uploadLink = await GetUploadLinkAsync(preset, cancellationToken);\n\n// Check if the link is valid\n        if (string.IsNullOrEmpty(uploadLink))\n        {\n            throw new UploadException(\"Upload link is invalid\");\n        }\n\n// Open a file stream\n        using (var fileStream = new FileStream(path, FileMode.Open, FileAccess.Read, FileShare.Read))\n        {\n// Upload the file to the link\n            await UploadFileAsync(uploadLink, fileStream, cancellationToken, progressCallback);\n        }\n\n// Get a download link for the file\n        var downloadLink = await GetDownloadLinkAsync(preset, cancellationToken);\n\n// Create a history record\n        return new History\n        {\n            UploadDate = DateTime.UtcNow,\n            UploadLink = uploadLink,\n            DownloadLink = downloadLink,\n            FileName = Path.GetFileName(path),\n            FileSize = new FileInfo(path).Length,\n            Preset = preset,\n            Status = UploadStatus.Completed\n        };\n    }", "CodeBleu_score": 55.60380138139826}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t//Check if the provided file path is valid.\n        if (!File.Exists(path))\n        {\n            throw new UploadException(\"File not found: \" + path);\n        }\n\n//Retrieve an upload link for the file using a preset.\n        var uploadLink = await GetUploadLinkAsync(preset, cancellationToken);\n\n//If the link is invalid, it throws an upload exception.\n        if (string.IsNullOrEmpty(uploadLink))\n        {\n            throw new UploadException(\"Upload link not found\");\n        }\n\n//Open a file stream and upload the file to the provided link.\n        using (var fileStream = File.OpenRead(path))\n        {\n            await UploadFileAsync(uploadLink, fileStream, progressCallback, cancellationToken);\n        }\n\n//Retrieve a download link for the file.\n        var downloadLink = await GetDownloadLinkAsync(preset, cancellationToken);\n\n//Create a history record with upload details and return it.\n        var history = new History(preset, path, uploadLink, downloadLink);\n        return history;\n    }", "CodeBleu_score": 53.119756352366544}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\ttartCapture: Dispatcher.Invoke(() =>\n    {\n        if (IsCapturing)\n            return;\n\n        IsCapturing = true;\n        HasImpreciseCapture = false;\n\n        if (UserSettings.All.ForceGarbageCollection)\n            StartGarbageCollectionTimer();\n\n        UserSettings.Lock();\n        CancellationTokenSource = new CancellationTokenSource();\n        Task.Run(() => CaptureLoop(CancellationTokenSource.Token), CancellationTokenSource.Token);\n    });\n}", "CodeBleu_score": 52.85244382865155}, {"code": "internal virtual void StartCapture(){\n\t", "CodeBleu_score": 2.1549930480169595}, {"code": "internal virtual void StartCapture(){\n\t//Start the frame rate with either a fixed or variable delay.\n    if (HasFixedDelay())\n        StartCaptureWithFixedDelay(GetFixedDelay());\n    else\n        StartCaptureWithVariableDelay(GetCaptureInterval());\n\n//If forced garbage collection is enabled in the user settings, start the garbage collection timer.\n    if (UserSettings.All.ForceGarbageCollection)\n        StartGarbageCollectionTimer();\n\n//Lock the user settings, create a cancellation token for the capture process, and run the capture loop in a new task using the specified capture interval.\n    lock (UserSettings.All)\n    {\n        Cancellation = new CancellationTokenSource();\n        Task.Run(() => CaptureLoop(GetCaptureInterval()), Cancellation.Token);\n    }\n}", "CodeBleu_score": 51.3502121088324}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\t\t// Create a new stopwatch to measure elapsed time.\n\tStopwatch stopwatch = new Stopwatch();\n\tstopwatch.Start();\n\n\t// Create a new frame with cursor data.\n\tFrame frame = new Frame(Cursor.position, KeyList);\n\tKeyList.Clear();\n\n\t// Create a new token to cancel the capture loop.\n\tCancellationTokenSource tokenSource = new CancellationTokenSource();\n\tCancellationToken token = tokenSource.Token;\n\n\t// Create a new task to capture frames with cursor data.\n\tTask task = new Task(() => {\n\t\twhile (!token.IsCancellationRequested) {\n\t\t\t// Restart the stopwatch.\n\t\t\tstopwatch.Restart();\n\n\t\t\t// Create a new frame with cursor data.\n\t\t\tframe.CursorPosition = Cursor.position;\n\t\t\tframe.KeyList = KeyList;\n\t\t\tKeyList.Clear();\n\n\t\t\t// Capture the frame.\n\t\t\tCapture(frame);\n\n\t\t\t// Update the frame count.\n\t\t\tframeCount++;\n\n\t\t\t// Wait until the interval is reached.\n\t\t\twhile (stopwatch.ElapsedMilliseconds < interval) {\n\t\t\t\tThread.Sleep(1);\n\t\t\t}\n\t\t}\n\t}, token);\n\n\t// Start the task.\n\ttask.Start();\n\n\t// Wait for the task to complete.\n\ttask.Wait();\n\n\t// Stop the stopwatch.\n\tstopwatch.Stop();\n}", "CodeBleu_score": 28.488516871020476}, {"code": "private void CaptureWithCursor(int interval){\n\t\tStopwatch stopwatch = new Stopwatch();\n\tstopwatch.Start();\n\twhile (!captureToken.IsCancellationRequested) {\n\t\tstopwatch.Restart();\n\t\tFrame frame = new Frame(cursor.Position, cursor.Size, cursor.Color, cursor.Keys);\n\t\tcursor.ClearKeyList();\n\t\tframe.Capture();\n\t\tframeCount++;\n\t\tif (stopwatch.ElapsedMilliseconds < interval) {\n\t\t\tint sleepTime = (int)(interval - stopwatch.ElapsedMilliseconds);\n\t\t\tfor (int i = 0; i < sleepTime; i++) {\n\t\t\t\tThread.Sleep(1);\n\t\t\t}\n\t\t}\n\t}\n\tstopwatch.Stop();\n}", "CodeBleu_score": 40.78045129442653}, {"code": "private void CaptureWithCursor(int interval){\n\t\tStopwatch stopwatch = new Stopwatch();\n\tstopwatch.Start();\n\twhile (!token.IsCancellationRequested) {\n\t\tstopwatch.Restart();\n\t\tFrame frame = new Frame();\n\t\tframe.Cursor = Cursor.Position;\n\t\tframe.Keys = keyList;\n\t\tkeyList.Clear();\n\t\tframe.Capture();\n\t\tframeCount++;\n\t\tif (stopwatch.ElapsedMilliseconds < interval) {\n\t\t\tint sleepTime = interval - (int)stopwatch.ElapsedMilliseconds;\n\t\t\tfor (int i = 0; i < sleepTime; i++) {\n\t\t\t\tThread.Sleep(1);\n\t\t\t}\n\t\t}\n\t}\n\tstopwatch.Stop();\n}", "CodeBleu_score": 40.978392063813985}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t}\n\n\tvar child = this.GetVisualChild(0);\n\n\tif (child!= null) {\n\t\tvar padding = Padding;\n\n\t\tvar width = arrangeSize.Width;\n\t\tvar height = arrangeSize.Height;\n\n\t\tif (padding!= null) {\n\t\t\twidth -= padding.Left + padding.Right;\n\t\t\theight -= padding.Top + padding.Bottom;\n\t\t}\n\n\t\tchild.Arrange(new Rect(padding.Left, padding.Top, width, height));\n\t}\n\n\treturn arrangeSize;\n}", "CodeBleu_score": 48.95243521300502}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation)\n\t\treturn base.ArrangeOverride(arrangeSize);\n\n\tvar child = Child;\n\tif (child == null)\n\t\treturn arrangeSize;\n\n\tvar padding = Padding;\n\tvar width = arrangeSize.Width;\n\tvar height = arrangeSize.Height;\n\n\tif (padding.Left > 0 || padding.Right > 0)\n\t\twidth -= padding.Left + padding.Right;\n\tif (padding.Top > 0 || padding.Bottom > 0)\n\t\theight -= padding.Top + padding.Bottom;\n\n\tchild.Arrange(new Rect(padding.Left, padding.Top, width, height));\n\n\treturn arrangeSize;\n}", "CodeBleu_score": 52.83551528422061}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t}\n\tvar child = Child;\n\tif (child == null) {\n\t\treturn arrangeSize;\n\t}\n\tvar padding = Padding;\n\tvar width = arrangeSize.Width - (padding.Left + padding.Right);\n\tvar height = arrangeSize.Height - (padding.Top + padding.Bottom);\n\tchild.Arrange(new Rect(padding.Left, padding.Top, width, height));\n\treturn arrangeSize;\n}", "CodeBleu_score": 46.767118423318955}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\nif (!UpdateOnInput) {\nif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\nValue = DefaultValue;\nreturn;\n}\n}\nif (IsTextAllowed(Text)) {\nValue = Convert.ToDecimal(Text);\n}\nif (UpdateOnInput) {\nText = Format(Value);\n}\n}", "CodeBleu_score": 27.9792306396931}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\nif (!UpdateOnInput) {\nif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\nValue = DefaultValue;\nreturn;\n}\n}\n\nif (UpdateOnInput) {\nText = FormatValue(Value);\n}\n\nIsUpdating = true;\n}", "CodeBleu_score": 25.1707955701952}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\n\nif (!UpdateOnInput) {\nif (string.IsNullOrEmpty(Text) ||!IsTextAllowed(Text)) {\nValue = DefaultValue;\nreturn;\n}\n}\n\nif (UpdateOnInput) {\nText = Value.ToString(CultureInfo.CurrentCulture);\n} else {\nTemporarilyIgnoreChanges = true;\nText = Value.ToString(CultureInfo.CurrentCulture);\nTemporarilyIgnoreChanges = false;\n}\n\nif (IsTextAllowed(Text)) {\nText = Value.ToString(CultureInfo.CurrentCulture);\n}\n}", "CodeBleu_score": 39.53035040460208}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.KeyCode == Keys.Return || e.KeyCode == Keys.Enter) {\n\t\te.Handled = true;\n\t\tSelectNextControl(this, true, true, true, true);\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 44.94760973003964}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\t// If the Enter or Return key is pressed, it marks the event as handled and moves the focus to the next focusable element.\n\tif (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Return) {\n\t\te.Handled = true;\n\t\tSelectNextControl(this, true, true, true, true);\n\t}\n\t// Finally, it calls the base class's OnKeyDown method to ensure standard key handling behavior.\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 45.29333378813245}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.KeyCode == Keys.Enter || e.KeyCode == Keys.Return) {\n\t\te.Handled = true;\n\t\tSelectNextControl(ActiveControl, true, true, true, true);\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 45.601068265402205}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\te.OnMouseMove(e);\n\n\tif (e.LeftButton == MouseButtonState.Pressed && _isCaptured) {\n\t\tif (CurrentShape == Shapes.None) {\n\t\t\tif (SelectionMode && (SelectedShapes.Count == 0 || Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))) {\n\t\t\t\tRenderRegion = new Rect(GetBoundedCoordinates(e), new Size(0, 0));\n\t\t\t}\n\t\t} else {\n\t\t\tvar current = GetBoundedCoordinates(e);\n\t\t\tCalculateOrientation(RenderRegion.TopLeft, current);\n\t\t\tRenderRegion = new Rect(RenderRegion.TopLeft, current);\n\t\t\tRenderShape();\n\t\t}\n\t}\n}", "CodeBleu_score": 28.6631660340784}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t!IsMouseCaptured)\nreturn;\n\nif (IsSelectionMode && (SelectedShapes.Count == 0 || ModifierKeys.HasFlag(ModifierKeys.Control))) {\nRenderRegion = new Rect(GetBoundedCoordinates(e), RenderRegion.Size);\n}\n\nif (IsShapeDrawingMode) {\nCalculateOrientation(StartPoint, GetBoundedCoordinates(e));\nRenderRegion = new Rect(GetBoundedCoordinates(e), RenderRegion.Size);\nRenderShape();\n}\n\nbase.OnMouseMove(e);\n}", "CodeBleu_score": 21.257347728607527}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tIsMouseCaptured) {\nif (IsSelectionMode) {\nif (SelectedShapes.Count == 0 || ModifierKeys.HasFlag(ModifierKeys.Control)) {\nUpdateSelectionRectangle(e);\n}\n} else {\nvar current = GetBoundedCoordinates(e);\n\nif (current.X == _currentPoint.X && current.Y == _currentPoint.Y)\nreturn;\n\nCalculateOrientation(_currentPoint, current);\n\nRenderRegion = new Rect(Math.Min(_currentPoint.X, current.X), Math.Min(_currentPoint.Y, current.Y), Math.Abs(current.X - _currentPoint.X), Math.Abs(current.Y - _currentPoint.Y));\n\nRenderShape();\n}\n}\n\nbase.OnMouseMove(e);\n}", "CodeBleu_score": 42.43296889350694}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (!(sender is Thumb))\n    return;\n\n// Get the drag amount\ndouble deltaV = e.VerticalChange;\ndouble deltaH = e.HorizontalChange;\n\n// Calculate new dimensions\ndouble newWidth = Math.Max(10, adornedElement.Width + deltaH);\ndouble newHeight = Math.Max(10, adornedElement.Height + deltaV);\n\n// Adjust new dimensions if they exceed our parent's bounds\nif (newWidth > adornedElement.Parent.RenderSize.Width)\n    newWidth = adornedElement.Parent.RenderSize.Width;\nif (newHeight > adornedElement.Parent.RenderSize.Height)\n    newHeight = adornedElement.Parent.RenderSize.Height;\n\n// Raise the event\nRaiseManipulatedEvent(deltaV);\n\n// Update the adorned element\nadornedElement.Width = newWidth;\nadornedElement.Height = newHeight;\n\n// Finalize the resize\nAfterManipulation();\n}", "CodeBleu_score": 35.49665929589067}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (!(sender is Thumb))\nreturn;\n\ne.Handled = true;\n\ndouble width = Math.Max(10, ActualWidth + e.HorizontalChange);\ndouble height = Math.Max(10, ActualHeight + e.VerticalChange);\n\nwidth = Math.Min(width, Parent.DesiredSize.Width - AdornedElement.Margin.Left - AdornedElement.Margin.Right);\nheight = Math.Min(height, Parent.DesiredSize.Height - AdornedElement.Margin.Top - AdornedElement.Margin.Bottom);\n\ndouble widthDiff = width - ActualWidth;\ndouble heightDiff = height - ActualHeight;\n\nRaiseManipulatedEvent(widthDiff, heightDiff);\n\nAdornedElement.Width = width;\nAdornedElement.Height = height;\n\nAfterManipulation();\n}", "CodeBleu_score": 43.0513891947001}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (sender is Thumb == false)\nreturn;\n\n// Get the current size of the adorned element.\ndouble width = AdornedElement.Width;\ndouble height = AdornedElement.Height;\n\n// Calculate the new size of the adorned element.\nwidth += e.HorizontalChange;\nheight += e.VerticalChange;\n\n// Set the new size of the adorned element.\nwidth = Math.Max(width, 10);\nheight = Math.Max(height, 10);\nwidth = Math.Min(width, AdornedElement.Parent.ActualWidth - AdornedElement.Margin.Left - AdornedElement.Margin.Right);\nheight = Math.Min(height, AdornedElement.Parent.ActualHeight - AdornedElement.Margin.Top - AdornedElement.Margin.Bottom);\n\nAdornedElement.Width = width;\nAdornedElement.Height = height;\n\n// Raise the event.\nRaiseManipulatedEvent(0);\n\n// Update the layout.\nAfterManipulation();\n}", "CodeBleu_score": 35.62578330310657}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t\t// Create a list of integers ranging from 0 to 999\n\tIntegerList = new ObservableCollection<int>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tIntegerList.Add(i);\n\t}\n\t// Set the selected value\n\tSelectedValue = 100;\n\t// Create a list of string items\n\tStringList = new ObservableCollection<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tStringList.Add(Path.GetRandomFileName());\n\t}\n\t// Set the selected text\n\tSelectedText = null;\n\t// Create a list of random string values\n\tRandomStringList = new ObservableCollection<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tRandomStringList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 40.19558315355625}, {"code": "public ComboBoxesViewModel(){\n\t\tintList = new List<int>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tintList.Add(i);\n\t}\n\tselectedValue = intList[0];\n\tselectedText = null;\n\tstringList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tstringList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 40.80279418831818}, {"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = new List<int>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tIntegerList.Add(i);\n\t}\n\tSelectedValue = IntegerList[0];\n\tSelectedText = null;\n\tStringList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tStringList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 42.12487578658554}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t\tvar view = new SampleDialog();\n\tvar vm = new SampleDialogViewModel();\n\tview.DataContext = vm;\n\n\tDialogHost.Show(view, \"RootDialog\", async (sender, args) => {\n\t\tvar result = args.Parameter;\n\t\tif (result!= null) {\n\t\t\t// do something with result\n\t\t}\n\t\tawait Task.Delay(1000);\n\t\tDialogHost.CloseDialogCommand.Execute(null, null);\n\t});\n}", "CodeBleu_score": 23.583857553769217}, {"code": "private async Task RunDialog() {\n\t\tSampleDialog dialog = new SampleDialog();\n\tdialog.DataContext = new SampleDialogViewModel();\n\tDialogHost.Show(dialog, \"RootDialog\", ClosingEventHandler, ClosedEventHandler);\n\tawait Task.Delay(1000);\n\tvar result = (dialog.DataContext as SampleDialogViewModel).Result;\n\tConsole.WriteLine(result);\n}", "CodeBleu_score": 23.474551298236545}, {"code": "private async Task RunDialog() {\n\t\t// Create a new instance of SampleDialog.\n\tSampleDialog view = new SampleDialog();\n\t// Create a new instance of SampleDialogViewModel.\n\tSampleDialogViewModel vm = new SampleDialogViewModel();\n\t// Assign the SampleDialogViewModel as the view's DataContext.\n\tview.DataContext = vm;\n\t// Show the dialog using DialogHost.Show.\n\tDialogHost.Show(view, \"RootDialog\", async (sender, dialogResult) => {\n\t\t// Get the CommandParameter used to close the dialog.\n\t\tvar result = dialogResult.Parameter;\n\t\t// Log the result.\n\t\tSystem.Diagnostics.Debug.WriteLine(\"Dialog result: \" + result);\n\t});\n}", "CodeBleu_score": 23.343632375219634}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tif (modificationAction == null)\n\t\treturn;\n\tvar helper = new PaletteHelper();\n\tvar theme = helper.GetTheme();\n\tmodificationAction(theme);\n\thelper.SetTheme(theme);\n}", "CodeBleu_score": 48.64965612825092}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tif (modificationAction!= null) {\n\t\tvar paletteHelper = new PaletteHelper();\n\t\tvar theme = paletteHelper.GetTheme();\n\t\tmodificationAction(theme);\n\t\tpaletteHelper.SetTheme(theme);\n\t}\n}", "CodeBleu_score": 60.84543541345035}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tif (modificationAction == null) {\n\t\treturn;\n\t}\n\tvar paletteHelper = new PaletteHelper();\n\tvar theme = paletteHelper.GetTheme();\n\tmodificationAction(theme);\n\tpaletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 58.009467827681995}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t\tif (Content is null) {\n\t\tif (string.IsNullOrEmpty(ContentTypeName))\n\t\t\treturn null;\n\n\t\tType? type = Type.GetType(ContentTypeName);\n\t\tif (type is null)\n\t\t\tthrow new ArgumentException(\"The specified content type is not found.\", nameof(ContentTypeName));\n\n\t\tif (type.IsSubclassOf(typeof(FrameworkElement))) {\n\t\t\tif (DataContext is not null)\n\t\t\t\t(type.GetProperty(\"DataContext\")?.SetValue(Content, DataContext)?? throw new InvalidOperationException(\"The DataContext property is not found.\"));\n\t\t}\n\n\t\tContent = Activator.CreateInstance(type);\n\t}\n\n\treturn Content;\n}", "CodeBleu_score": 32.67752512364226}, {"code": "private object? CreateContent(){\n\t\tif (Content!= null) {\n\t\treturn Content;\n\t}\n\tif (string.IsNullOrEmpty(ContentTypeName)) {\n\t\treturn null;\n\t}\n\tvar content = Activator.CreateInstance(ContentTypeName);\n\tif (content is FrameworkElement element) {\n\t\telement.DataContext = DataContext;\n\t}\n\treturn content;\n}", "CodeBleu_score": 67.54403997409847}, {"code": "private object? CreateContent(){\n\t\t// If the content type is not a string, return null.\n\tif (string.IsNullOrEmpty(this.ContentType)) {\n\t\treturn null;\n\t}\n\n\t// If the content type is a string, try to create an instance of the specified content type.\n\tvar content = Activator.CreateInstance(this.ContentType);\n\n\t// If the created content is a FrameworkElement, set the element's DataContext to the provided data context.\n\tif (content is FrameworkElement element) {\n\t\telement.DataContext = this.DataContext;\n\t}\n\n\t// Return the created content.\n\treturn content;\n}", "CodeBleu_score": 43.588950954055875}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\t\t// Initialize the Sample4Content with a new SampleProgressDialog.\n\tSample4Content.Content = new SampleProgressDialog();\n\n\t// Wait for 3 seconds before setting IsSample4DialogOpen to false, using the current synchronization context to ensure it runs on the UI thread.\n\tTask.Delay(3000).ContinueWith(_ => {\n\t\t// Set IsSample4DialogOpen to false.\n\t\tDispatcher.Invoke(() => IsSample4DialogOpen = false);\n\t}, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 37.63166089166185}, {"code": "private void AcceptSample4Dialog(object? _){\n\t\tSample4Content.Content = new SampleProgressDialog();\n\tTask.Delay(3000).ContinueWith(\n\t\t_ => {\n\t\t\tIsSample4DialogOpen = false;\n\t\t\tSynchronizationContext.Current?.Post(_ => IsSample4DialogOpen = false, null);\n\t\t},\n\t\tCancellationToken.None,\n\t\tTaskContinuationOptions.None,\n\t\tTaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 36.82205397550548}, {"code": "private void AcceptSample4Dialog(object? _){\n\t\tvar dialog = new SampleProgressDialog();\n\tSample4Content.Content = dialog;\n\tdialog.Show();\n\tTask.Delay(3000).ContinueWith(t => {\n\t\tif (SynchronizationContext.Current is { } synchronizationContext) {\n\t\t\tsynchronizationContext.Post(state => {\n\t\t\t\tIsSample4DialogOpen = false;\n\t\t\t}, null);\n\t\t}\n\t});\n}", "CodeBleu_score": 33.30525897544482}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (Trigger trigger in _deviceTriggers) {\n\t\tif (trigger.deviceID == device.ID && trigger.eventKind == option) {\n\t\t\ttrigger.Triggered();\n\t\t}\n\t}\n}", "CodeBleu_score": 46.568252382411565}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.deviceID == device.ID && trigger.eventOption == option) {\n\t\t\ttrigger.Triggered?.Invoke();\n\t\t}\n\t}\n}", "CodeBleu_score": 53.895388353021744}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\t// Iterate through the device triggers\n\tforeach (var trigger in _deviceTriggers) {\n\t\t// Check if the device ID matches the given device ID\n\t\tif (trigger.DeviceID == device.ID) {\n\t\t\t// Invoke the Triggered event for the trigger\n\t\t\ttrigger.Triggered?.Invoke(this, new TriggeredEventArgs(trigger));\n\t\t}\n\t}\n}", "CodeBleu_score": 40.54351234582016}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t\t// Clear the trigger manager.\n\tTriggerManager.Clear();\n\n\t// Load the actions from settings using the specified key.\n\tAction[] actions = Settings.GetActions(key);\n\n\t// Register each trigger from the loaded actions with the trigger manager.\n\tforeach (Action action in actions) {\n\t\tTriggerManager.Register(action.trigger, action.action);\n\t}\n}", "CodeBleu_score": 29.159634911274495}, {"code": "private void LoadAndRegister(){\n\t\t// Clear the trigger manager.\n\ttriggerManager.Clear();\n\n\t// Retrieve the actions from settings.\n\tList<Action> actions = settings.GetActions(actionsKey);\n\n\t// Register each trigger from the loaded actions with the trigger manager.\n\tforeach (Action action in actions) {\n\t\ttriggerManager.RegisterTrigger(action.trigger, action.action);\n\t}\n}", "CodeBleu_score": 28.02232493225103}, {"code": "private void LoadAndRegister(){\n\t\tif (triggerManager!= null) {\n\t\ttriggerManager.Clear();\n\t}\n\tif (settings == null) {\n\t\treturn;\n\t}\n\tif (!settings.ContainsKey(key)) {\n\t\treturn;\n\t}\n\tList<Action> actions = settings[key] as List<Action>;\n\tif (actions == null) {\n\t\treturn;\n\t}\n\tforeach (Action action in actions) {\n\t\tif (action.trigger == null) {\n\t\t\tcontinue;\n\t\t}\n\t\ttriggerManager.Register(action.trigger, action.action);\n\t}\n}", "CodeBleu_score": 23.964383456904923}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\t", "CodeBleu_score": 2.0059368891280465}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tif (trigger.IsActivated) {\n\t\treturn;\n\t}\n\tvar action = ActionProcessor.FindAction(trigger);\n\tif (action!= null) {\n\t\tif (action.Conditions.All(c => c.IsMet(trigger))) {\n\t\t\tTriggerAction(action);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.07471357732589}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tBaseAction action = actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n\tif (action!= null) {\n\t\tif (action.Conditions.All(c => c.ConditionMet())) {\n\t\t\tTriggerAction(action);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.93118674788477}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t\tlet mut vars_mentioning = self.scope_graph.get_variables_mentioning(name);\n\tlet mut vars_mentioning_to_remove = vec![];\n\tfor var in &mut vars_mentioning {\n\t\tif let Some(expr) = self.scope_graph.get_run_while_expression(&var) {\n\t\t\tif let Some(value) = self.scope_graph.evaluate_expression(expr, &mut self.error_context) {\n\t\t\t\tif value.is_true() {\n\t\t\t\t\tself.script_handler.add_variable(var);\n\t\t\t\t} else {\n\t\t\t\t\tvars_mentioning_to_remove.push(var);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfor var in vars_mentioning_to_remove {\n\t\tself.scope_graph.remove_variable(&var);\n\t}\n}", "CodeBleu_score": 24.818796714664686}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t\tlet mut vars = self.scope_graph.get_variables_mentioning(name);\n\tfor var in vars.drain(..) {\n\t\tif let Some(expr) = var.get_run_while_expression() {\n\t\t\tlet mut ctx = self.error_handling_ctx.clone();\n\t\t\tctx.set_var_name(var.get_name());\n\t\t\tlet result = expr.eval(&mut ctx);\n\t\t\tif result.is_error() {\n\t\t\t\tself.error_handling_ctx.add_error(result.unwrap_err());\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif result.unwrap() {\n\t\t\t\tself.script_handler.add_variable(var);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 21.0539273395694}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t\tlet mut poll_vars = self.scope_graph.get_vars_mentioning(name);\n\tpoll_vars.retain(|v| v.is_poll());\n\tfor v in poll_vars {\n\t\tlet var_name = v.get_name();\n\t\tlet expr = self.scope_graph.get_var_expr(var_name);\n\t\tlet expr_type = expr.get_type();\n\t\tif let VarExprType::RunWhile(expr) = expr_type {\n\t\t\tlet eval_result = self.scope_graph.eval_expr(expr);\n\t\t\tmatch eval_result {\n\t\t\t\tOk(true) => {\n\t\t\t\t\tself.script_handler.insert(var_name);\n\t\t\t\t}\n\t\t\t\tOk(false) => {\n\t\t\t\t\tself.script_handler.remove(var_name);\n\t\t\t\t}\n\t\t\t\tErr(err) => {\n\t\t\t\t\tself.error_handler.report_error(err);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.649119853382366}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t", "CodeBleu_score": 14.586088025188115}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t\tlet mut scope_id = self.instance_id_to_scope_id.get(instance_id).unwrap();\n\tself.instance_id_to_scope_id.remove(instance_id);\n\tlet mut window = self.scope_id_to_window.remove(scope_id).unwrap();\n\twindow.close();\n\tlet mut scope = self.scope_id_to_scope.remove(scope_id).unwrap();\n\tscope.close();\n\tself.scope_id_to_scope.remove(scope_id);\n\tOk(())\n}", "CodeBleu_score": 30.784196342869745}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t\tlet mut result = Ok(());\n\tlet mut scope = self.scope_graph.get_mut(instance_id);\n\tif scope.is_none() {\n\t\treturn Err(Error::new(ErrorKind::NotFound, format!(\"Scope not found for instance_id: {}\", instance_id)));\n\t}\n\tlet scope = scope.unwrap();\n\tif scope.is_open {\n\t\tlet window = self.windows.get_mut(instance_id);\n\t\tif window.is_none() {\n\t\t\treturn Err(Error::new(ErrorKind::NotFound, format!(\"Window not found for instance_id: {}\", instance_id)));\n\t\t}\n\t\tlet window = window.unwrap();\n\t\tif window.is_open {\n\t\t\twindow.close();\n\t\t\tself.windows.remove(instance_id);\n\t\t\tscope.close();\n\t\t\tself.scope_graph.remove(instance_id);\n\t\t\tself.remove_unused_global_variables();\n\t\t}\n\t}\n\tself.arguments.remove(instance_id);\n\treturn result;\n}", "CodeBleu_score": 50.92671371925024}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t\tself.log.info(\"Reloading configuration\");\n\tself.stop_handlers()?;\n\tself.script_variable_handler = Some(ScriptVariableHandler::new(self.log.clone(), self.eww_config.clone(), self.scope_graph.clone(), config)?);\n\tself.wait_for_handler_termination()?;\n\tself.log.info(\"Reloaded configuration\");\n\tself.eww_config = config;\n\tself.scope_graph.clear(self.eww_config.initial_state.clone());\n\tlet mut open_windows = Vec::new();\n\tlet mut failed_windows = Vec::new();\n\tfor window in &self.windows {\n\t\tif window.is_open() {\n\t\t\topen_windows.push(window.id());\n\t\t}\n\t\tif window.is_failed() {\n\t\t\tfailed_windows.push(window.id());\n\t\t}\n\t}\n\tself.open_windows(open_windows, self.eww_config.initial_state.clone())?;\n\tself.open_windows(failed_windows, self.eww_config.initial_state.clone())?;\n\tOk(())\n}", "CodeBleu_score": 50.48512007242045}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t", "CodeBleu_score": 10.07331619203318}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t\t// log the reload process\n\tself.log_info(\"Reloading config...\");\n\n\t// stop all script variable handlers\n\tself.stop_script_variable_handlers();\n\n\t// replace the old script variable handler with a new one\n\tself.script_variable_handler = ScriptVariableHandler::new(config.clone());\n\n\t// wait for the old handler to terminate\n\tself.script_variable_handler.join().unwrap();\n\n\t// log the new configuration\n\tself.log_info(\"New config: {:?}\", config);\n\n\t// update the eww_config\n\tself.eww_config = config;\n\n\t// clear the scope graph with the initial state from the new configuration\n\tself.scope_graph.clear();\n\tself.scope_graph.init_state(&self.eww_config);\n\n\t// gather all open and failed window IDs\n\tlet mut open_window_ids = Vec::new();\n\tlet mut failed_window_ids = Vec::new();\n\tfor window in self.windows.values() {\n\t\tif window.is_open() {\n\t\t\topen_window_ids.push(window.id());\n\t\t} else {\n\t\t\tfailed_window_ids.push(window.id());\n\t\t}\n\t}\n\n\t// retrieve their initial arguments\n\tlet mut initial_arguments = Vec::new();\n\tfor window_id in open_window_ids {\n\t\tinitial_arguments.push(self.windows[&window_id].initial_arguments());\n\t}\n\n\t// reopen each window with these arguments\n\tfor (window_id, initial_argument) in open_window_ids.iter().zip(initial_arguments.iter()) {\n\t\tself.open_window(initial_argument.clone(), *window_id)?;\n\t}\n\n\t// return success\n\tOk(())\n}", "CodeBleu_score": 54.502611727007555}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t//    let display = gdk::Display::default();\n    let display = gdk::Display::open_default()?;\n    let monitor = match identifier {\n        Some(identifier) => {\n            match get_monitor_from_display(&display, &identifier) {\n                Some(monitor) => monitor,\n                None => {\n                    let mut monitors = Vec::new();\n                    for m in 0..display.n_monitors() {\n                        monitors.push(display.monitor(m).and_then(|x| x.model()));\n                    }\n                    return Err(Error::MonitorNotFound(monitors));\n                }\n            }\n        }\n        None => display.primary_monitor(),\n    };\n    Ok(Monitor {\n        display,\n        monitor,\n    })\n}", "CodeBleu_score": 31.262036619791495}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t\tlet display = gdk::Display::default();\n\tmatch identifier {\n\t\tSome(identifier) => {\n\t\t\tmatch get_monitor_from_display(&display, &identifier) {\n\t\t\t\tSome(monitor) => Ok(monitor),\n\t\t\t\tNone => Err(format!(\"No monitor found for identifier: {:?}\", identifier))\n\t\t\t}\n\t\t},\n\t\tNone => {\n\t\t\tmatch display.primary_monitor() {\n\t\t\t\tSome(monitor) => Ok(monitor),\n\t\t\t\tNone => Err(format!(\"No primary monitor found\"))\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 16.61801620713445}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t\tlet display = gdk::Display::default();\n\tmatch identifier {\n\t\tSome(ident) => {\n\t\t\tif let Some(monitor) = get_monitor_from_display(&display, &ident) {\n\t\t\t\treturn Ok(monitor);\n\t\t\t}\n\t\t\tErr(format!(\"Could not find monitor with identifier {:?}\", ident).into())\n\t\t},\n\t\tNone => {\n\t\t\tif let Some(monitor) = display.primary_monitor() {\n\t\t\t\treturn Ok(monitor);\n\t\t\t}\n\t\t\tErr(format!(\"Could not find primary monitor.\").into())\n\t\t}\n\t}\n}", "CodeBleu_score": 18.792561365946504}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\tunsafe {\n\t\tfrom_glib(ffi::gtk_window_get_window_rectangle(geometry.to_glib(), screen_rect.to_glib_none().0))\n\t}\n}", "CodeBleu_score": 23.132167493920537}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\tunsafe {\n\t\tfrom_glib_full(ffi::gtk_get_window_rectangle(geometry.to_glib(), screen_rect.to_glib_none().0))\n\t}\n}", "CodeBleu_score": 23.10204142708455}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\tunsafe {\n\t\tfrom_glib_none(ffi::gtk_get_window_rectangle(geometry.to_glib(), screen_rect.to_glib_none().0))\n\t}\n}", "CodeBleu_score": 23.103042015154447}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t\t//let mut window = Window::new(window_init);\n\tlet mut window = Window::new(window_init);\n\twindow.set_resizable(window_init.resizable);\n\twindow.set_stack_mode(window_init.stack_mode);\n\twindow.set_sticky(window_init.sticky);\n\twindow.move(x, y);\n\tSome(window)\n}", "CodeBleu_score": 36.54795416459546}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(msg) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"{}\", msg);\n\t\t}\n\t} else {\n\t\teprintln!(\"{}\", err);\n\t}\n}", "CodeBleu_score": 27.54135104189229}, {"code": "pub fn print_error(err: anyhow::Error){\n\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(msg) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"{}\", msg);\n\t\t} else {\n\t\t\teprintln!(\"{:?}\", err);\n\t\t}\n\t} else {\n\t\teprintln!(\"{:?}\", err);\n\t}\n}", "CodeBleu_score": 29.658020022984832}, {"code": "pub fn print_error(err: anyhow::Error){\n\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(message) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"{}\", message);\n\t\t} else {\n\t\t\teprintln!(\"{}\", err);\n\t\t}\n\t} else {\n\t\teprintln!(\"{}\", err);\n\t}\n}", "CodeBleu_score": 28.928986923349964}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\tlet socket_path = socket_path.as_ref();\n\tlet listener = UnixListener::bind(socket_path)?;\n\tlet mut listener = listener.incoming();\n\tlog::info!(\"IPC server initialized at {}\", socket_path.display());\n\twhile let Ok(stream) = listener.next().await {\n\t\tlet evt_send = evt_send.clone();\n\t\ttokio::spawn(async move {\n\t\t\tif let Err(e) = handle_connection(evt_send, stream).await {\n\t\t\t\tlog::error!(\"Error handling connection: {}\", e);\n\t\t\t}\n\t\t});\n\t}\n\tOk(())\n}", "CodeBleu_score": 49.036675121290216}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\tlet socket_path = socket_path.as_ref();\n\tlet listener = match std::os::unix::net::UnixListener::bind(socket_path) {\n\t\tOk(listener) => listener,\n\t\tErr(e) => {\n\t\t\tlog::error!(\"Could not bind to socket path {:?}: {}\", socket_path, e);\n\t\t\treturn Err(e.into());\n\t\t}\n\t};\n\tlog::info!(\"Listening on {}\", socket_path.display());\n\tloop {\n\t\tmatch listener.accept() {\n\t\t\tOk((stream, _)) => {\n\t\t\t\tlet evt_send = evt_send.clone();\n\t\t\t\ttokio::spawn(async move {\n\t\t\t\t\thandle_connection(evt_send, stream).await;\n\t\t\t\t});\n\t\t\t}\n\t\t\tErr(e) => {\n\t\t\t\tlog::error!(\"Could not accept connection: {}\", e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.181337891519014}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\tlet listener = match unix_listener(socket_path) {\n\t\tOk(listener) => listener,\n\t\tErr(err) => {\n\t\t\tlog::error!(\"Failed to create listener: {}\", err);\n\t\t\treturn Err(err.into());\n\t\t}\n\t};\n\n\tlog::info!(\"Listening on: {}\", socket_path.as_ref().display());\n\n\tloop {\n\t\tmatch listener.accept().await {\n\t\t\tOk((stream, _)) => {\n\t\t\t\tlet evt_send = evt_send.clone();\n\t\t\t\ttokio::spawn(async move {\n\t\t\t\t\tif let Err(err) = handle_connection(evt_send, stream).await {\n\t\t\t\t\t\tlog::error!(\"Failed to handle connection: {}\", err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\tErr(err) => {\n\t\t\t\tlog::error!(\"Failed to accept connection: {}\", err);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.50511036038613}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\tlet (mut stream_read, mut stream_write) = stream.split();\n\tlet mut stream_read = tokio::net::unix::ReadHalf::new(&mut stream_read);\n\tlet mut stream_write = tokio::net::unix::WriteHalf::new(&mut stream_write);\n\n\tlet action = read_action_from_stream(&mut stream_read).await?;\n\tlog::debug!(\"Received action: {:?}\", action);\n\n\tlet command = action.into_command();\n\tlog::debug!(\"Converted action into command: {:?}\", command);\n\n\tlet response = evt_send.send(command).await.context(\"Failed to send command to daemon\")?;\n\tlog::debug!(\"Received response: {:?}\", response);\n\n\tlet mut response_bytes = Vec::<u8>::new();\n\tbincode::serialize_into(&mut response_bytes, &response).context(\"Failed to serialize daemon response\")?;\n\tlet response_bytes = response_bytes.as_slice();\n\tstream_write.write_all(response_bytes).await.context(\"Failed to write daemon response\")?;\n\n\tstream_write.shutdown().await.context(\"Failed to shutdown write stream\")?;\n\n\tOk(())\n}", "CodeBleu_score": 54.28938480072388}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\tlet (mut stream_read, mut stream_write) = stream.split();\n\tlet action = read_action_from_stream(&mut stream_read).await?;\n\tlet action = action.into_inner();\n\tlog::info!(\"Received action: {:?}\", action);\n\tlet daemon_command = action.into_daemon_command();\n\tevt_send.send(daemon_command).await.context(\"Failed to send command to event loop\")?;\n\tif let Some(response) = action.response_type {\n\t\tlet response = match response {\n\t\t\topts::ResponseType::Ok => Ok(opts::Response::Ok),\n\t\t\topts::ResponseType::Error(error) => Err(error),\n\t\t};\n\t\tlet response_bytes = bincode::serialize(&response).context(\"Failed to serialize response\")?;\n\t\tlet response_byte_length = response_bytes.len() as u32;\n\t\tlet mut response_byte_length_bytes = [0u8; 4];\n\t\tresponse_byte_length_bytes.copy_from_slice(&response_byte_length.to_be_bytes());\n\t\tstream_write.write_all(&response_byte_length_bytes).await.context(\"Failed to write response size header in IPC message\")?;\n\t\tstream_write.write_all(&response_bytes).await.context(\"Failed to write actual IPC message\")?;\n\t\tstream_write.shutdown().await.context(\"Failed to shutdown write stream\")?;\n\t}\n\tOk(())\n}", "CodeBleu_score": 44.097212665955105}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t\tlet (stream_read, stream_write) = stream.split();\n\tlet mut stream_write = tokio::net::unix::WriteHalf::new(stream_write);\n\tloop {\n\t\tlet action = read_action_from_stream(&mut stream_read).await?;\n\t\tlog::info!(\"Received action: {:?}\", action);\n\t\tlet command = action.into_command();\n\t\tlet response = evt_send.send(command).await.context(\"Failed to send command to event loop\")?;\n\t\tmatch response {\n\t\t\tapp::DaemonResponse::Action(response) => {\n\t\t\t\tlet mut response_bytes = bincode::serialize(&response).context(\"Failed to serialize daemon response\")?;\n\t\t\t\tlet response_bytes_len = response_bytes.len() as u32;\n\t\t\t\tlet mut response_bytes_len_bytes = [0u8; 4];\n\t\t\t\tresponse_bytes_len_bytes.copy_from_slice(&response_bytes_len.to_be_bytes());\n\t\t\t\tstream_write.write_all(&response_bytes_len_bytes).await.context(\"Failed to write message size header in IPC message\")?;\n\t\t\t\tstream_write.write_all(&response_bytes).await.context(\"Failed to write actual IPC message\")?;\n\t\t\t},\n\t\t\tapp::DaemonResponse::Shutdown => {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tstream_write.shutdown().await.context(\"Failed to shutdown write stream\")?;\n\tOk(())\n}", "CodeBleu_score": 46.79998391388883}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\tlet mut message_size_buf = [0u8; 4];\n\tstream_read.read_exact(&mut message_size_buf).await?;\n\tlet message_size = u32::from_be_bytes(message_size_buf);\n\tlet mut message_buf = vec![0u8; message_size as usize];\n\tlet mut message_read = 0;\n\twhile message_read < message_size as usize {\n\t\tlet read = stream_read.read(&mut message_buf[message_read..]).await?;\n\t\tif read == 0 {\n\t\t\treturn Err(std::io::Error::new(std::io::ErrorKind::UnexpectedEof, \"unexpected EOF\").into());\n\t\t}\n\t\tmessage_read += read;\n\t}\n\tOk(bincode::deserialize(&message_buf)?)\n}", "CodeBleu_score": 51.089413858957336}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\tlet mut message_size_bytes = [0u8; 4];\n\tstream_read.read_exact(&mut message_size_bytes).await?;\n\tlet message_size = u32::from_be_bytes(message_size_bytes);\n\tlet mut message_buffer = Vec::with_capacity(message_size as usize);\n\tlet mut stream_read = stream_read.clone();\n\twhile message_buffer.len() < message_size as usize {\n\t\tlet mut message_chunk = vec![0u8; message_size as usize - message_buffer.len()];\n\t\tstream_read.read_exact(&mut message_chunk).await?;\n\t\tmessage_buffer.extend(message_chunk);\n\t}\n\tlet action = bincode::deserialize(&message_buffer)?;\n\tOk(action)\n}", "CodeBleu_score": 58.065431983902506}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\tlet mut size_bytes = [0u8; 4];\n\tstream_read.read_exact(&mut size_bytes).await?;\n\tlet message_size = u32::from_be_bytes(size_bytes);\n\tlet mut message_buffer = vec![0u8; message_size as usize];\n\tlet mut total_read = 0;\n\twhile total_read < message_size {\n\t\tlet read_size = stream_read.read(&mut message_buffer[total_read as usize..]).await?;\n\t\ttotal_read += read_size as u32;\n\t}\n\tlet action_with_server = bincode::deserialize(&message_buffer)?;\n\tOk(action_with_server)\n}", "CodeBleu_score": 42.91601200853526}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet proxy = con.proxy::<zbus::names::BusName<'_>, _>(service, 0);\n\tlet mut stream = proxy.signal_stream(zbus::names::BusName::owner_changed()).await?;\n\twhile let Some(event) = stream.next().await {\n\t\tlet _ = event?;\n\t}\n\tOk(())\n}", "CodeBleu_score": 37.69893795875989}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet proxy = con.proxy::<zbus::names::BusName<'_>, _>(service)?;\n\tlet mut signals = proxy.signal_receiver().await?;\n\tloop {\n\t\tlet msg = signals.next().await?;\n\t\tif let Some(owner) = msg.get_arg::<zbus::names::BusName<'_>>(0) {\n\t\t\tif owner.is_empty() {\n\t\t\t\treturn Ok(());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.857919656079154}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet mut proxy = con.new_proxy::<zbus::names::NameOwnerChanged>(service.clone());\n\tlet mut signal = proxy.listen_name_owner_changed();\n\n\tloop {\n\t\tlet msg = signal.recv().await?;\n\t\tif msg.name == service {\n\t\t\tif msg.old_owner.is_none() {\n\t\t\t\treturn Ok(());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 38.653827236563195}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow!(\"unsupported format: {}\", format))\n\t}\n}", "CodeBleu_score": 64.48135688554348}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow::anyhow!(\"unsupported format: {}\", format))\n\t}\n}", "CodeBleu_score": 65.32355124097907}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow!(\"Unsupported file extension for doc export: {}\", format)),\n\t}\n}", "CodeBleu_score": 66.6024892045064}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n\tif path.extension().is_none() {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\"{}\\\", found file without extension \\\"{}\\\"\",\n\t\t\texpected_ext,\n\t\t\tpath.display()\n\t\t));\n\t}\n\tlet found_ext = path.extension().unwrap().to_str().unwrap();\n\tif found_ext!= expected_ext {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\"{}\\\", found file with extension \\\"{}\\\"\",\n\t\t\texpected_ext,\n\t\t\tfound_ext\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 52.950493099081974}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n\tlet file_name = path.file_name().unwrap();\n\tlet file_ext = file_name.extension().unwrap();\n\tlet file_ext = file_ext.to_str().unwrap();\n\tif file_ext!= expected_ext {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file extension \\\"{}\\\", found \\\"{}\\\"\",\n\t\t\texpected_ext,\n\t\t\tfile_ext,\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 32.50561931991736}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\tpath_is_file(path)?;\n\tif path.extension().map_or(false, |ext| ext == expected_ext) {\n\t\tOk(())\n\t} else {\n\t\tErr(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\"{}\\\", found file with extension \\\"{}\\\"\",\n\t\t\texpected_ext,\n\t\t\tpath.extension().map_or_else(|| \"none\".to_string(), |ext| ext.to_string_lossy().to_string())\n\t\t))\n\t}\n}", "CodeBleu_score": 38.1062262634258}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t", "CodeBleu_score": 9.68038880906739}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tthis->config = config;\n\tthis->id = id;\n\tthis->format = config[\"format\"].isString()? config[\"format\"].asString() : \"{usage}\";\n\tthis->interval = config[\"interval\"].isInt()? config[\"interval\"].asInt() : 1000;\n\tthis->label = std::make_unique<ALabel>(config, id, format, interval);\n\tthis->label->set_callback([this] { this->update(); });\n\tthis->update();\n}", "CodeBleu_score": 33.65764667514405}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t", "CodeBleu_score": 9.68038880906739}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = (Tags *) data;\n\tif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n\t\ttags->status_manager_ = wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1);\n\t} else if (strcmp(interface, wl_seat_interface.name) == 0) {\n\t\ttags->seat_ = wl_registry_bind(registry, name, &wl_seat_interface, 1);\n\t}\n}", "CodeBleu_score": 46.35303437090601}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = (Tags *)data;\n\tif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n\t\ttags->ipc_manager = wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1);\n\t} else if (strcmp(interface, wl_seat_interface.name) == 0) {\n\t\ttags->seat = wl_registry_bind(registry, name, &wl_seat_interface, 1);\n\t}\n}", "CodeBleu_score": 45.84723879552914}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = static_cast<Tags *>(data);\n\tif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n\t\ttags->status_manager_ =\n\t\t\tstatic_cast<struct zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1));\n\t} else if (strcmp(interface, wl_seat_interface.name) == 0) {\n\t\ttags->seat_ = static_cast<struct wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, 1));\n\t}\n}", "CodeBleu_score": 59.486537363115374}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::lock_guard<std::mutex> lck(callbackMutex);\n\tstd::string type = ev.substr(0, ev.find('>'));\n\tfor (auto& callback : callbacks) {\n\t\tif (callback.first == type) {\n\t\t\tcallback.second->onEvent(ev);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.56882285613846}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::lock_guard<std::mutex> lock(callbackMutex);\n\n\t// Extract the request type from the event string\n\tstd::string requestType = ev.substr(0, ev.find('>'));\n\n\t// Iterate through registered callbacks\n\tfor (auto& callback : callbacks) {\n\t\t// Invoke the handler's onEvent method if the event name matches the request type\n\t\tif (callback.first == requestType) {\n\t\t\tcallback.second->onEvent(ev);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 51.95878965038161}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::lock_guard<std::mutex> lock(callbackMutex);\n\tstd::string request = ev.substr(0, ev.find('>'));\n\tfor (auto& callback : callbacks) {\n\t\tif (callback.first == request) {\n\t\t\tcallback.second->onEvent(ev);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.23704627081854}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock<std::mutex> lock(callback_mutex);\n\n\tfor (std::list<IPCCallback>::iterator it = callbacks.begin(); it!= callbacks.end(); it++) {\n\t\tif (it->ev_handler == ev_handler) {\n\t\t\tcallbacks.erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 55.39312558825792}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::unique_lock<std::mutex> lock(callback_mutex);\n\tfor (auto it = callbacks.begin(); it!= callbacks.end();) {\n\t\tif ((*it)->getEventHandler() == ev_handler) {\n\t\t\tit = callbacks.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 64.58032148612473}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == NULL) {\n\t\tthrow std::runtime_error(\"Null event handler\");\n\t}\n\n\tstd::unique_lock<std::mutex> lock(callback_mutex);\n\tfor (auto it = callbacks.begin(); it!= callbacks.end(); ++it) {\n\t\tif (it->first == ev_handler) {\n\t\t\tcallbacks.erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 52.982596797978886}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config.isMember(\"always-on\")) {\n\t\tif (config[\"always-on\"].isBool()) {\n\t\t\talways_on_ = config[\"always-on\"].asBool();\n\t\t} else {\n\t\t\tthrow std::runtime_error(\"Submap::parseConfig(): The \\\"always-on\\\" key is not a boolean.\");\n\t\t}\n\t} else {\n\t\tthrow std::runtime_error(\"Submap::parseConfig(): The \\\"always-on\\\" key is not present.\");\n\t}\n\n\tif (config.isMember(\"default-submap\")) {\n\t\tif (config[\"default-submap\"].isString()) {\n\t\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t\t} else {\n\t\t\tthrow std::runtime_error(\"Submap::parseConfig(): The \\\"default-submap\\\" key is not a string.\");\n\t\t}\n\t} else {\n\t\tthrow std::runtime_error(\"Submap::parseConfig(): The \\\"default-submap\\\" key is not present.\");\n\t}\n}", "CodeBleu_score": 39.7247258714864}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config.isMember(\"always-on\")) {\n\t\tif (config[\"always-on\"].isBool()) {\n\t\t\talways_on_ = config[\"always-on\"].asBool();\n\t\t}\n\t}\n\tif (config.isMember(\"default-submap\")) {\n\t\tif (config[\"default-submap\"].isString()) {\n\t\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t\t}\n\t}\n}", "CodeBleu_score": 38.91852621499031}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config.isMember(\"always-on\")) {\n\t\tif (config[\"always-on\"].isBool()) {\n\t\t\talways_on_ = config[\"always-on\"].asBool();\n\t\t}\n\t\telse {\n\t\t\tstd::cerr << \"Submap::parseConfig(): The \\\"always-on\\\" key is not a boolean.\" << std::endl;\n\t\t}\n\t}\n\telse {\n\t\tstd::cerr << \"Submap::parseConfig(): The \\\"always-on\\\" key is missing.\" << std::endl;\n\t}\n\n\tif (config.isMember(\"default-submap\")) {\n\t\tif (config[\"default-submap\"].isString()) {\n\t\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t\t}\n\t\telse {\n\t\t\tstd::cerr << \"Submap::parseConfig(): The \\\"default-submap\\\" key is not a string.\" << std::endl;\n\t\t}\n\t}\n\telse {\n\t\tstd::cerr << \"Submap::parseConfig(): The \\\"default-submap\\\" key is missing.\" << std::endl;\n\t}\n}", "CodeBleu_score": 48.07630471908948}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (this->is_repr) {\n\t\treturn this->repr;\n\t}\n\telse if (this->is_class_and_title) {\n\t\tauto class_and_title = this->class_and_title;\n\t\tauto workspace = workspace_manager.get_workspace_by_window_class(class_and_title.first);\n\t\tif (workspace == nullptr) {\n\t\t\tthrow std::runtime_error(\"Failed to find workspace for window class: \" + class_and_title.first);\n\t\t}\n\t\treturn workspace->repr(class_and_title.second);\n\t}\n\telse {\n\t\tthrow std::runtime_error(\"WindowCreationPayload::repr(): Neither is_repr nor is_class_and_title are true\");\n\t}\n}", "CodeBleu_score": 38.76592915270838}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (type == Repr) {\n\t\treturn repr_string;\n\t}\n\telse if (type == ClassAndTitle) {\n\t\tstd::string window_class = workspace_manager.get_window_class(window_id);\n\t\tstd::string window_title = workspace_manager.get_window_title(window_id);\n\t\treturn window_class + \" - \" + window_title;\n\t}\n\telse {\n\t\tstd::cerr << \"Error: Unreachable code path in WindowCreationPayload::repr(Workspaces &workspace_manager)\" << std::endl;\n\t\tthrow std::runtime_error(\"Unreachable code path\");\n\t}\n}", "CodeBleu_score": 40.53110439250959}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (is_class_and_title) {\n\t\treturn workspace_manager.rewrite_repr(this->class_name, this->title);\n\t} else if (is_repr) {\n\t\treturn this->repr;\n\t} else {\n\t\tstd::cerr << \"Error: WindowCreationPayload::repr() called with neither is_class_and_title nor is_repr set to true.\n\";\n\t\tthrow std::runtime_error(\"WindowCreationPayload::repr() called with neither is_class_and_title nor is_repr set to true.\");\n\t}\n}", "CodeBleu_score": 24.901209133319096}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\t_workspacesToCreate.empty()) {\n\t\treturn;\n\t}\n\tfor (auto &workspace : m_workspacesToCreate) {\n\t\tcreateWorkspace(workspace, m_clients);\n\t}\n\tm_workspacesToCreate.clear();\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 49.78030653510487}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t DEBUG\n  spdlog::debug(\"Creating workspaces\");\n#endif\n\n  // create workspaces\n  for (auto &workspace : m_workspacesToCreate) {\n    createWorkspace(workspace, m_clients);\n  }\n\n  // update window count\n  updateWindowCount();\n\n  // sort workspaces\n  sortWorkspaces();\n\n  // clear workspaces to create\n  m_workspacesToCreate.clear();\n}", "CodeBleu_score": 50.23394100306299}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\tworkspaces = gIPC->getSocket1JsonReply(\"workspaces\");\n\tif (workspaces.isNull()) {\n\t\treturn;\n\t}\n\tfor (auto &workspace : workspaces) {\n\t\tif (workspace[\"name\"].asString() == \"special:scratchpad\") {\n\t\t\tcontinue;\n\t\t}\n\t\tcreateWorkspace(workspace, gIPC->getSocket1JsonReply(\"clients\"));\n\t}\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 49.51546106312265}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris && mpris->isValid()) {\n\t\tauto player = player_name->getPlayer();\n\t\tif (player && player->getName() == mpris->getPlayer()->getName()) {\n\t\t\tmpris->setPlayer(nullptr);\n\t\t\tmpris->hideEventBox();\n\t\t\tmpris->emitUpdate();\n\t\t}\n\t\tmpris->logDebug(\"Player name vanished: \" + player_name->getPlayer()->getName());\n\t}\n}", "CodeBleu_score": 53.37323772943461}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris && mpris->isValid()) {\n\t\tauto name = player_name->getName();\n\t\tg_debug(\"Player name vanished: %s\", name);\n\t\tif (mpris->player == name) {\n\t\t\tmpris->player = nullptr;\n\t\t\tmpris->eventBox->hide();\n\t\t\tmpris->emitUpdate();\n\t\t}\n\t}\n}", "CodeBleu_score": 58.16487740842572}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (!mpris) {\n\t\treturn;\n\t}\n\tauto player = mpris->getPlayer(player_name);\n\tif (!player) {\n\t\treturn;\n\t}\n\tg_debug(\"Player '%s' vanished\", player->getName().c_str());\n\tif (player->getName() == mpris->currentPlayer->getName()) {\n\t\tmpris->currentPlayer = nullptr;\n\t\tmpris->eventBox->hide();\n\t\tmpris->emitUpdate();\n\t}\n}", "CodeBleu_score": 57.61455305749988}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tMpris* mpris = static_cast<Mpris*>(data);\n\tif (mpris!= nullptr) {\n\t\tg_debug(\"Player pause event\");\n\t\tmpris->dp.updateWidget();\n\t}\n}", "CodeBleu_score": 62.91016284729739}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tMpris* mpris = reinterpret_cast<Mpris*>(data);\n\tif (mpris!= nullptr) {\n\t\tg_debug(\"Mpris::onPlayerPause() called\");\n\t\tmpris->dp.emit_player_pause();\n\t}\n}", "CodeBleu_score": 56.90010188234259}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tMpris* mpris = static_cast<Mpris*>(data);\n\tif (mpris) {\n\t\tlog_debug(\"Player pause event\");\n\t\tmpris->dp.update();\n\t}\n}", "CodeBleu_score": 62.72887328857143}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tif (!res.success) {\n\t\tthrow std::runtime_error(res.error_message);\n\t}\n\tauto payload = res.payload;\n\tauto config = parseConfig(payload);\n\tonConfigUpdate(config);\n}", "CodeBleu_score": 40.20626968688951}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tif (!res.success) {\n\t\tthrow std::runtime_error(res.error);\n\t}\n\tauto payload = res.payload;\n\tif (payload.isMember(\"config\")) {\n\t\tonConfigUpdate(parseConfig(payload[\"config\"]));\n\t}\n}", "CodeBleu_score": 31.64002712243233}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tif (res.success) {\n\t\tauto payload = res.payload;\n\t\tif (auto config = payload[\"config\"]; config.isObject()) {\n\t\t\tbar_config_ = parseConfig(config);\n\t\t\tupdate();\n\t\t}\n\t} else {\n\t\tauto message = res.payload[\"message\"].asString();\n\t\tthrow std::runtime_error(message);\n\t}\n}", "CodeBleu_score": 49.827166448149164}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(hooks_!= nullptr);\n\tif (!name.empty()) {\n\t\thooks_->doAction(this, name.c_str());\n\t}\n}", "CodeBleu_score": 66.62321883669047}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(hooks_!= nullptr);\n\tif (!name.empty()) {\n\t\thooks_->doAction(this, name.c_str());\n\t}\n}", "CodeBleu_score": 66.62321883669047}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(hooks_!= nullptr);\n\tif (!name.empty()) {\n\t\thooks_->doAction(this, name.c_str());\n\t}\n}", "CodeBleu_score": 66.62321883669047}]}
