{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t#if NETSTANDARD2_0 || NETSTANDARD2_1 || NETCOREAPP2_0 || NETCOREAPP2_1 || NETCOREAPP3_1 || NET5_0\n    // This is a .NET Standard 2.0 or higher project.\n    // The following code will load the DLL from the appropriate directory.\n    // It uses the new System.Runtime.InteropServices.NativeLibrary class.\n\n    var dllDir = GetDirectedDllDirectory();\n    NativeLibrary.Load(dllName, Assembly.GetCallingAssembly(), DllImportSearchPath.Directory, dllDir);\n#else\n    // This is a .NET Framework project.\n    // The following code will load the DLL from the appropriate directory.\n    // It uses the Win32 API method LoadLibraryEx.\n\n    var dllDir = GetDirectedDllDirectory();\n    var dllPath = Path.Combine(dllDir, dllName);\n    var dllHandle = LoadLibraryEx(dllPath, IntPtr.Zero, LOAD_WITH_ALTERED_SEARCH_PATH);\n\n    if (dllHandle == IntPtr.Zero) {\n        throw new DllNotFoundException(dllName);\n    }\n#endif\n}", "CodeBleu_score": 28.42216949766901}, {"code": "public static void PreloadDll(string dllName){\n\t#if NETSTANDARD2_0 || NETSTANDARD2_1 || NETSTANDARD2_2 || NETSTANDARD2_3 || NETSTANDARD2_4 || NETSTANDARD2_5 || NETSTANDARD2_6 || NETCOREAPP2_0 || NETCOREAPP2_1 || NETCOREAPP2_2 || NETCOREAPP3_0 || NETCOREAPP3_1 || NETCOREAPP5_0\n    var dllPath = Path.Combine(GetDirectedDllDirectory(), dllName);\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        Win32.LoadLibrary(dllPath);\n    } else {\n        Posix.dlopen(dllPath, Posix.RTLD_LAZY);\n    }\n#endif\n}", "CodeBleu_score": 37.7576792724694}, {"code": "public static void PreloadDll(string dllName){\n\t#if NETCOREAPP\n    var dllDir = GetDirectedDllDirectory();\n    var dllPath = Path.Combine(dllDir, dllName);\n    NativeLibrary.Load(dllPath);\n#else\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        var dllDir = GetDirectedDllDirectory();\n        var dllPath = Path.Combine(dllDir, dllName);\n        LoadLibrary(dllPath);\n    } else {\n        var dllDir = GetDirectedDllDirectory();\n        var dllPath = Path.Combine(dllDir, dllName);\n        dlopen(dllPath, RTLD_NOW);\n    }\n#endif\n}", "CodeBleu_score": 50.26478506566857}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (reader == null) {\n\t\tthrow new Exception(\"Reader is null\");\n\t}\n\tif (originalPath == null) {\n\t\tthrow new Exception(\"Original path is null\");\n\t}\n\tif (originalPath.Length == 0) {\n\t\tthrow new Exception(\"Original path is empty\");\n\t}\n\tif (assetsFileList.Contains(originalPath)) {\n\t\tthrow new Exception(\"Asset file already loaded: \" + originalPath);\n\t}\n\tif (reader.Length == 0) {\n\t\tthrow new Exception(\"Reader length is 0\");\n\t}\n\ttry {\n\t\tassetsFileList.Add(originalPath);\n\t\tvar assetsFile = new SerializedFile(originalPath, reader, unityVersion);\n\t\tassetsFile.Load();\n\t\tassetsFileList.Add(assetsFile);\n\t} catch (Exception ex) {\n\t\tDebug.LogError(\"Error loading asset file: \" + originalPath + \"\n\" + ex.Message);\n\t}\n}", "CodeBleu_score": 39.13544563673462}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t", "CodeBleu_score": 5.693069074890999}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t\tif (reader == null) {\n\t\tthrow new Exception(\"Reader is null\");\n\t}\n\tif (string.IsNullOrEmpty(originalPath)) {\n\t\tthrow new Exception(\"Original path is null or empty\");\n\t}\n\tif (assetsFileList.Contains(originalPath)) {\n\t\tthrow new Exception(\"The asset file is already loaded\");\n\t}\n\tif (assetsFileList.Count > 100) {\n\t\tthrow new Exception(\"Too many assets loaded\");\n\t}\n\tvar assetsFile = new SerializedFile(originalPath, reader, unityVersion);\n\ttry {\n\t\tassetsFile.Read(assetsFileList);\n\t} catch (Exception ex) {\n\t\tDebug.LogError(ex.Message);\n\t}\n}", "CodeBleu_score": 33.47005719974973}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tstring[] pathParts = path.Split('/');\n\tstring name = pathParts[pathParts.Length - 1];\n\tImportedFrame[] children = GetChilds();\n\tforeach (ImportedFrame child in children) {\n\t\tif (child.Name == name) {\n\t\t\tif (path == child.Path) {\n\t\t\t\treturn child;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 48.58047649721171}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tif (path == Name) {\n\t\treturn this;\n\t}\n\tforeach (var child in children) {\n\t\tvar result = child.FindFrameByPath(path);\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 48.0618703497247}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t\tvar split = path.Split(new char[] { '/' });\n\tstring name = split[split.Length - 1];\n\tvar childs = FindChilds(name);\n\tforeach (var child in childs) {\n\t\tif (child.Path == path) {\n\t\t\treturn child;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 51.90220055099969}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream memoryStream = new MemoryStream();\n\tGZipStream gzipStream = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n\tgzipStream.CopyTo(memoryStream);\n\tgzipStream.Close();\n\tmemoryStream.Position = 0;\n\treturn new FileReader(memoryStream);\n}", "CodeBleu_score": 43.22124853158237}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream();\n\tGZipStream gzip = new GZipStream(reader.BaseStream, CompressionMode.Decompress);\n\tgzip.CopyTo(ms);\n\tgzip.Close();\n\treturn new FileReader(ms);\n}", "CodeBleu_score": 36.11489541204184}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t\tMemoryStream ms = new MemoryStream(reader.ReadBytes());\n\tGZipStream gzip = new GZipStream(ms, CompressionMode.Decompress);\n\tMemoryStream outms = new MemoryStream();\n\tbyte[] buffer = new byte[4096];\n\twhile (true) {\n\t\tint read = gzip.Read(buffer, 0, buffer.Length);\n\t\tif (read <= 0) {\n\t\t\tbreak;\n\t\t}\n\t\toutms.Write(buffer, 0, read);\n\t}\n\treturn new FileReader(outms);\n}", "CodeBleu_score": 29.48077268944791}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\t_switches = new SwitchResult[switchForms.Length];\n\tfor (int i = 0; i < _switches.Length; i++)\n\t\t_switches[i] = new SwitchResult();\n\t_nonSwitchStrings = new List<string>();\n\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tstring commandString = commandStrings[i];\n\t\tif (ParseString(commandString, switchForms))\n\t\t\tcontinue;\n\t\t_nonSwitchStrings.Add(commandString);\n\t}\n}", "CodeBleu_score": 44.47612481513051}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tforeach (string commandString in commandStrings) {\n\t\tif (ParseString(commandString, switchForms))\n\t\t\tcontinue;\n\t\tif (commandString.Length == 0)\n\t\t\tcontinue;\n\t\tif (commandString[0] == kStopToken) {\n\t\t\t_stopTokenThereIs = true;\n\t\t\tcontinue;\n\t\t}\n\t\t_nonSwitchStrings.Add(commandString);\n\t}\n}", "CodeBleu_score": 37.40576690157548}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t", "CodeBleu_score": 7.310515368361058}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t", "CodeBleu_score": 4.956671404714457}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = m_Texture2D.imageFormat;\n\tthis.m_OutputSize = m_Texture2D.GetRawTextureData().Length;\n}", "CodeBleu_score": 33.701091781608554}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.m_Texture2D = m_Texture2D;\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.m_Version = m_Texture2D.version;\n\tthis.m_Platform = EditorUserBuildSettings.activeBuildTarget.ToString();\n\tthis.m_OutputSize = this.m_Width * this.m_Height * (int)this.m_TextureFormat;\n}", "CodeBleu_score": 33.73996904676398}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tif (sp.arraySize == 0) {\n\t\treturn \"Nothing\";\n\t}\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tstring name = element.FindPropertyRelative(\"name\").stringValue;\n\t\tif (name.Length > 0) {\n\t\t\tresult.Add(name);\n\t\t}\n\t}\n\tstring resultString = string.Join(\", \", result.ToArray());\n\tif (resultString.Length == 0) {\n\t\treturn \"Nothing\";\n\t}\n\treturn resultString;\n}", "CodeBleu_score": 35.99930338211555}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tif (sp.arraySize == 0) return \"Nothing\";\n\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tstring name = element.FindPropertyRelative(\"name\").stringValue;\n\t\tif (name != \"\") result.Add(name);\n\t}\n\tif (result.Count == 0) return \"Nothing\";\n\tstring names = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tif (i > 0) names += \", \";\n\t\tnames += result[i];\n\t}\n\treturn names;\n}", "CodeBleu_score": 39.22680918661936}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty element = sp.GetArrayElementAtIndex(i);\n\t\tif (element.boolValue) {\n\t\t\tstring name = element.FindPropertyRelative(\"name\").stringValue;\n\t\t\tresult.Add(name);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\tstring names = \"\";\n\tfor (int i = 0; i < result.Count; i++) {\n\t\tnames += result[i];\n\t\tif (i < result.Count - 1) {\n\t\t\tnames += \", \";\n\t\t}\n\t}\n\treturn names;\n}", "CodeBleu_score": 39.9257558703038}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (add) {\n\t\tif (sp.FindPropertyRelative(prop.name) == null) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name), false, AddProperty, new AddPropertyData(sp, prop));\n\t\t}\n\t} else {\n\t\tif (sp.FindPropertyRelative(prop.name) != null) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name), false, RemoveProperty, new RemovePropertyData(sp, prop));\n\t\t}\n\t}\n}", "CodeBleu_score": 23.5869482741116}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t\tif (prop.name == sp.propertyPath) {\n\t\treturn;\n\t}\n\n\tif (prop.name == \"_MainTex\" || prop.name == \"_BaseMap\") {\n\t\treturn;\n\t}\n\n\tif (add) {\n\t\tif (prop.name == \"_EmissionMap\") {\n\t\t\tmenu.AddItem(new GUIContent(\"Remove Emission Map\"), false, () => {\n\t\t\t\tRemoveProperty(sp);\n\t\t\t});\n\t\t} else {\n\t\t\tmenu.AddItem(new GUIContent(\"Remove \" + prop.name), false, () => {\n\t\t\t\tRemoveProperty(sp);\n\t\t\t});\n\t\t}\n\t} else {\n\t\tmenu.AddItem(new GUIContent(\"Add \" + prop.name), false, () => {\n\t\t\tAddProperty(sp, prop);\n\t\t});\n\t}\n}", "CodeBleu_score": 24.021405001547443}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t", "CodeBleu_score": 4.975552625378207}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t", "CodeBleu_score": 1.5486635295409983}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t", "CodeBleu_score": 1.5486635295409983}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t", "CodeBleu_score": 1.5486635295409983}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial customMat = null;\n\tif (baseMat == null || texture == null) return null;\n\tif (id == 0) return null;\n\tif (props == 0) return null;\n\tif (customMatList.ContainsKey(id)) {\n\t\tcustomMat = customMatList[id];\n\t\tcustomMat.mainTexture = texture;\n\t\tcustomMat.SetInt(\"_Props\", props);\n\t} else {\n\t\tcustomMat = new Material(baseMat);\n\t\tcustomMat.mainTexture = texture;\n\t\tcustomMat.SetInt(\"_Props\", props);\n\t\tcustomMatList.Add(id, customMat);\n\t}\n\treturn customMat;\n}", "CodeBleu_score": 22.562885101586094}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tMaterial customMat = null;\n\tif(baseMat == null) {\n\t\tcustomMat = new Material(baseMat);\n\t} else {\n\t\tcustomMat = new Material(baseMat.shader);\n\t\tcustomMat.CopyPropertiesFromMaterial(baseMat);\n\t}\n\tcustomMat.name = baseMat.name + \"_\" + texture.name + \"_\" + id.ToString() + \"_\" + props.ToString();\n\tcustomMat.mainTexture = texture;\n\tcustomMat.SetInt(\"_ID\", id);\n\tcustomMat.SetInt(\"_Props\", props);\n\treturn customMat;\n}", "CodeBleu_score": 23.53199572959121}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\treturn C4dApiPINVOKE.BaseMaterial_Add__SWIG_1(Material.getCPtr(baseMat), Texture.getCPtr(texture), id, props);\n}", "CodeBleu_score": 12.163276319539044}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t", "CodeBleu_score": 1.8215476104057635}, {"code": "public static void Remove(Material customMat){\n\t", "CodeBleu_score": 1.8215476104057635}, {"code": "public static void Remove(Material customMat){\n\t\tif (customMat == null) {\n\t\tDebug.LogWarning(\"Null material passed to CustomMaterialList.Remove\");\n\t\treturn;\n\t}\n\n\tfor (int i = 0; i < customMaterials.Count; i++) {\n\t\tif (customMaterials[i].material == customMat) {\n\t\t\tcustomMaterials[i].count--;\n\t\t\tif (customMaterials[i].count <= 0) {\n\t\t\t\tDestroy(customMaterials[i].material);\n\t\t\t\tcustomMaterials[i].material = null;\n\t\t\t\tcustomMaterials[i].name = \"\";\n\t\t\t\tcustomMaterials[i].count = 0;\n\t\t\t\tcustomMaterials.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 29.482840122881715}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}, {"code": "private void RefreshParticles(GameObject root){\n\t", "CodeBleu_score": 0.8950667016864431}, {"code": "private void RefreshParticles(GameObject root){\n\t\tif (root == null)\n\t\treturn;\n\n\tParticleSystem[] particleSystems = root.GetComponentsInChildren<ParticleSystem>();\n\n\tList<ParticleSystem> particleSystemsToRefresh = new List<ParticleSystem>();\n\n\tforeach (ParticleSystem particleSystem in particleSystems) {\n\t\tif (particleSystem.GetComponent<UIParticle>() == this) {\n\t\t\tparticleSystemsToRefresh.Add(particleSystem);\n\t\t}\n\t}\n\n\tforeach (ParticleSystem particleSystem in particleSystemsToRefresh) {\n\t\tparticleSystem.Stop();\n\t\tparticleSystem.Clear();\n\t\tparticleSystem.Play();\n\t}\n}", "CodeBleu_score": 23.296532441904606}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tcontainerBuilder.RegisterAssemblyTypes(Assembly.GetExecutingAssembly())\n\t\t.Where(t => typeof(IColorSwapManager).IsAssignableFrom(t) && !t.IsAbstract)\n\t\t.AsImplementedInterfaces()\n\t\t.SingleInstance();\n}", "CodeBleu_score": 22.767524662221508}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tvar swapManagerTypes = typeof(IColorSwapManager).Assembly.GetTypes().Where(t => t.IsClass && !t.IsAbstract && typeof(IColorSwapManager).IsAssignableFrom(t));\n\tforeach (var swapManagerType in swapManagerTypes) {\n\t\tcontainerBuilder.RegisterType(swapManagerType).SingleInstance();\n\t}\n}", "CodeBleu_score": 32.29205899735844}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t\tforeach (Type type in Assembly.GetExecutingAssembly().GetTypes()) {\n\t\tif (type.IsClass && typeof(IColorSwapManager).IsAssignableFrom(type) && !type.IsAbstract) {\n\t\t\tcontainerBuilder.RegisterType(type).SingleInstance();\n\t\t}\n\t}\n}", "CodeBleu_score": 33.425014416176715}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\t// Set the IP address and port.\n\tthis.ipAddress = ipAddress;\n\tthis.port = port;\n\n\t// Wait for the serializer initialization task to complete.\n\tawait this.serializer.InitializeAsync();\n\n\t// Send the initial message to the server.\n\tawait this.SendAsync(new ReservationRequestMessage(this.clientName));\n }", "CodeBleu_score": 30.990669356034783}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t\tif (ipAddress == null) throw new ArgumentNullException(nameof(ipAddress));\n\tif (port <= 0) throw new ArgumentOutOfRangeException(nameof(port));\n\n\t_ipAddress = ipAddress;\n\t_port = port;\n\n\tawait _serializer.InitializeAsync();\n\n\tawait _negotiator.NegotiateReservationAsync();\n}", "CodeBleu_score": 43.70670897827766}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t // Set the IP address and port.\n _ipAddress = ipAddress;\n _port = port;\n\n // Wait for the serializer initialization task to complete.\n await _serializerInitializationTask;\n\n // Initiate a reservation negotiation.\n await _reservationNegotiationTask;\n }", "CodeBleu_score": 42.58472524350208}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t", "CodeBleu_score": 1.3969615207900739}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\tif (sessionConnectionState == null) {\n\t\tthrow new System.Exception(\"sessionConnectionState cannot be null\");\n\t}\n\tif (sessionConnectionState == m_sessionConnectionState) {\n\t\treturn;\n\t}\n\tDebug.LogFormat(\"MultiplayerSessionManager: Session connection state changed from {0} to {1}\", m_sessionConnectionState, sessionConnectionState);\n\tm_sessionConnectionState = sessionConnectionState;\n\tif (m_sessionConnectionState == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\tm_log.SetPlayerName(m_sessionConnectionState.GetPlayerName());\n\t}\n\tm_connectionStateChanged?.Invoke(m_sessionConnectionState);\n}", "CodeBleu_score": 39.38241701823845}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t\t// If the new state is null, do nothing.\n\tif (sessionConnectionState == null) {\n\t\treturn;\n\t}\n\n\t// If the new state is the same as the current state, do nothing.\n\tif (sessionConnectionState == this.CurrentConnectionState) {\n\t\treturn;\n\t}\n\n\t// Log the transition from the previous state to the new state.\n\tDebug.Log(string.Format(\"MultiplayerSessionManager: Connection state changed from {0} to {1}\", this.CurrentConnectionState, sessionConnectionState));\n\n\t// Update the current connection state.\n\tthis.CurrentConnectionState = sessionConnectionState;\n\n\t// If the new state is SESSION_RESERVED, update the player name in the log.\n\tif (this.CurrentConnectionState == MultiplayerSessionConnectionState.SESSION_RESERVED) {\n\t\tDebug.Log(string.Format(\"MultiplayerSessionManager: Player name is {0}\", this.PlayerName));\n\t}\n\n\t// Invoke the ConnectionStateChanged event.\n\tif (this.ConnectionStateChanged != null) {\n\t\tthis.ConnectionStateChanged(sessionConnectionState);\n\t}\n}", "CodeBleu_score": 36.812811193064995}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait Task.Run(() => {\n\t\tclient = new LiteNetLibClient();\n\t\tclient.Connect(ipAddress, serverPort);\n\t\tclient.ConnectionRequestAccepted += Client_ConnectionRequestAccepted;\n\t\tclient.ConnectionRequestRejected += Client_ConnectionRequestRejected;\n\t\tclient.ConnectionRequest += Client_ConnectionRequest;\n\t\tclient.PeerConnected += Client_PeerConnected;\n\t\tclient.PeerDisconnected += Client_PeerDisconnected;\n\t\tclient.NetworkReceiveEvent += Client_NetworkReceiveEvent;\n\t\tclient.NetworkLatencyUpdate += Client_NetworkLatencyUpdate;\n\t\tclient.Start();\n\t\twhile (!client.ConnectionRequestAcceptedEvent.WaitOne(2000)) {\n\t\t\tclient.Reconnect();\n\t\t}\n\t\tclient.ConnectionRequestAcceptedEvent.Reset();\n\t});\n}", "CodeBleu_score": 37.66759840392317}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait StartAsync(ipAddress, serverPort, 2000);\n}", "CodeBleu_score": 18.52013538152466}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t\tawait StartAsync(ipAddress, serverPort, 2000);\n}", "CodeBleu_score": 18.52013538152466}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t\tif (id.IsNone) {\n\t\treturn;\n\t}\n\tCyclops cyclops = Cyclops.FindCyclopsById(id);\n\tif (cyclops != null) {\n\t\tSubFire subFire = cyclops.GetComponentInChildren<SubFire>();\n\t\tif (subFire != null) {\n\t\t\tif (subFire.fireSuppressionButton != null) {\n\t\t\t\tsubFire.fireSuppressionButton.StartCooldown();\n\t\t\t\tStartCoroutine(subFire.StartFireSuppressionSystem(subFire));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.527950224728905}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tSubFire fire = GetSubFire(id);\n\tif (fire != null) {\n\t\tfire.StartCoroutine(StartFireSuppressionSystem(fire));\n\t\tfire.fireSuppressionButton.StartCooldown();\n\t}\n}", "CodeBleu_score": 24.907775176395493}, {"code": "public void StartFireSuppression(NitroxId id){\n\t\tif(id == null) return;\n\tif(id.id == null) return;\n\tif(id.id == \"\") return;\n\tCyclops cyclops = Cyclops.GetCyclopsById(id.id);\n\tif(cyclops == null) return;\n\tif(cyclops.fireSuppressionButton == null) return;\n\tcyclops.fireSuppressionButton.StartFireSuppression();\n}", "CodeBleu_score": 39.899954362844404}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.id != subRootID) {\n\t\treturn;\n\t}\n\n\tCyclopsDamagePoint.DamagePointType damagePointType = damagePoint.damagePointType;\n\tif (damagePointType == CyclopsDamagePoint.DamagePointType.Head) {\n\t\theadDamage = 0;\n\t} else if (damagePointType == CyclopsDamagePoint.DamagePointType.LeftArm) {\n\t\tleftArmDamage = 0;\n\t} else if (damagePointType == CyclopsDamagePoint.DamagePointType.RightArm) {\n\t\trightArmDamage = 0;\n\t} else if (damagePointType == CyclopsDamagePoint.DamagePointType.LeftLeg) {\n\t\tleftLegDamage = 0;\n\t} else if (damagePointType == CyclopsDamagePoint.DamagePointType.RightLeg) {\n\t\trightLegDamage = 0;\n\t}\n\n\tCyclopsPacket packet = new CyclopsPacket(CyclopsPacketType.DamagePointRepaired);\n\tpacket.Write(subRootID);\n\tpacket.Write(damagePointType);\n\tpacket.Write(repairAmount);\n\tpacketSender.Send(packet);\n}", "CodeBleu_score": 34.446127030835385}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.ID == this.ID) {\n\t\tif (damagePoint == CyclopsDamagePoint.Head) {\n\t\t\tPacketSender.SendPacket(PacketType.REPAIR_HEAD, this.ID, repairAmount);\n\t\t} else if (damagePoint == CyclopsDamagePoint.Torso) {\n\t\t\tPacketSender.SendPacket(PacketType.REPAIR_TORSO, this.ID, repairAmount);\n\t\t} else if (damagePoint == CyclopsDamagePoint.LeftArm) {\n\t\t\tPacketSender.SendPacket(PacketType.REPAIR_LEFT_ARM, this.ID, repairAmount);\n\t\t} else if (damagePoint == CyclopsDamagePoint.RightArm) {\n\t\t\tPacketSender.SendPacket(PacketType.REPAIR_RIGHT_ARM, this.ID, repairAmount);\n\t\t} else if (damagePoint == CyclopsDamagePoint.LeftLeg) {\n\t\t\tPacketSender.SendPacket(PacketType.REPAIR_LEFT_LEG, this.ID, repairAmount);\n\t\t} else if (damagePoint == CyclopsDamagePoint.RightLeg) {\n\t\t\tPacketSender.SendPacket(PacketType.REPAIR_RIGHT_LEG, this.ID, repairAmount);\n\t\t}\n\t}\n}", "CodeBleu_score": 23.78513447391008}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.GetID() == this.GetID()) {\n\t\t// Create a repair packet\n\t\tPacketBuilder builder = new PacketBuilder();\n\t\tbuilder.WriteByte((byte)PacketType.SubRootDamagePointRepaired);\n\t\tbuilder.WriteInt(subRoot.GetID());\n\t\tbuilder.WriteInt(damagePoint.GetID());\n\t\tbuilder.WriteFloat(repairAmount);\n\n\t\t// Send the packet\n\t\tPacketSender.SendPacket(builder.Build());\n\t}\n}", "CodeBleu_score": 34.430830065881594}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n\t\treturn;\n\t}\n\n\tif (subRoot.health.currentHealth <= 0) {\n\t\treturn;\n\t}\n\n\tCyclopsDamageData data = new CyclopsDamageData(subRootId, subRoot.health.currentHealth, subRoot.health.maxHealth);\n\n\tif (info.HasValue) {\n\t\tdata.damageInfo = new CyclopsDamageInfoData(info.Value.damage, info.Value.point, info.Value.force);\n\t}\n\n\tdata.activeDamagePoints = GetActiveDamagePoints(subRoot).ToArray();\n\tdata.activeFires = GetActiveFires(subRoot).ToArray();\n\n\tNetworkServer.SendToAll(new CyclopsDamage(data));\n}", "CodeBleu_score": 42.64037266612207}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\nreturn;\n}\n\nif (subRoot.health.GetHealth() <= 0) {\nreturn;\n}\n\nif (info.HasValue) {\nCyclopsDamageInfoData data = new CyclopsDamageInfoData(subRootId, info.Value.GetDamage(), info.Value.GetAttackerId());\nBroadcastDamageInfo(data);\n}\n\nforeach (int damagePoint in GetActiveDamagePoints(subRoot)) {\nCyclopsDamageData data = new CyclopsDamageData(subRootId, damagePoint);\nBroadcastDamage(data);\n}\n\nforeach (CyclopsFireData fire in GetActiveRoomFires(subRoot)) {\nCyclopsDamageData data = new CyclopsDamageData(subRootId, fire.fireId, fire.room, fire.node);\nBroadcastDamage(data);\n}\n}", "CodeBleu_score": 32.26867209700689}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\nreturn;\n}\n\nif (subRoot.healthManager.currentHealth <= 0) {\nreturn;\n}\n\nCyclopsDamageInfoData damageInfo = null;\nif (info.HasValue) {\ndamageInfo = new CyclopsDamageInfoData(info.Value.damageType, info.Value.point, info.Value.force);\n}\n\nList<int> activeDamagePoints = new List<int>(GetActiveDamagePoints(subRoot));\nList<CyclopsFireData> activeFires = new List<CyclopsFireData>(GetActiveRoomFires(subRoot));\n\nCyclopsDamage damagePacket = new CyclopsDamage(subRootId, damageInfo, activeDamagePoints.ToArray(), activeFires.ToArray());\n\n_packetSender.SendPacket(damagePacket);\n}", "CodeBleu_score": 44.63452712272505}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\nforeach (Entity entity in dirtyEntities) {\n\nRemoveEntityHierarchy(entity);\n\nGameObject gameObject = GameObject.Find(entity.Id);\n\nif (gameObject != null) {\n\nGameObject.Destroy(gameObject);\n\n}\n\n}\n\n}", "CodeBleu_score": 52.549080106876836}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t\tforeach (Entity entity in dirtyEntities) {\n\t\tRemoveEntityHierarchy(entity);\n\t\tGameObject gameObject = entity.GameObject;\n\t\tif (gameObject != null) {\n\t\t\tDestroy(gameObject);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.994161353873714}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\nRemoveEntityHierarchy(entity);\nGameObject gameObject = entity.GetComponent<GameObject>();\nif (gameObject != null) {\nGameObject.Destroy(gameObject);\n}\n}\n}", "CodeBleu_score": 48.573339883614025}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (!pendingParentEntities.ContainsKey(entity.ParentEntityId)) {\n\t\tpendingParentEntities[entity.ParentEntityId] = new List<Entity>();\n\t}\n\tpendingParentEntities[entity.ParentEntityId].Add(entity);\n}", "CodeBleu_score": 36.10141272637303}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (entity.HasComponent(typeof(ParentComponent))) {\n\t\tvar parentComponent = entity.GetComponent(typeof(ParentComponent));\n\t\tif (parentComponent.parentEntity != null) {\n\t\t\tif (!pendingParentEntities.ContainsKey(parentComponent.parentEntity.id)) {\n\t\t\t\tpendingParentEntities.Add(parentComponent.parentEntity.id, new List<Entity>());\n\t\t\t}\n\t\t\tpendingParentEntities[parentComponent.parentEntity.id].Add(entity);\n\t\t}\n\t}\n}", "CodeBleu_score": 28.288757278858156}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t\tif (pendingParentEntities.ContainsKey(entity.ParentEntityId)) {\n\t\tpendingParentEntities[entity.ParentEntityId].Add(entity);\n\t}\n\telse {\n\t\tList<Entity> newList = new List<Entity>();\n\t\tnewList.Add(entity);\n\t\tpendingParentEntities.Add(entity.ParentEntityId, newList);\n\t}\n}", "CodeBleu_score": 34.08024253981261}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\n\t\tExosuitArmAction action = ExosuitArmAction.NONE;\n\t\tif (cooldown <= clawArm.pickupTime) {\n\t\t\taction = ExosuitArmAction.START_USE_TOOL;\n\t\t} else if (cooldown <= clawArm.punchTime) {\n\t\t\taction = ExosuitArmAction.ALT_HIT;\n\t\t} else {\n\t\t\tLogger.Error(\"ExosuitClawArm.BroadcastClawUse: cooldown time is greater than punch time or pickup time.\");\n\t\t}\n\t\tBroadcastArmAction(clawArm.techType, id, action);\n\t}\n}", "CodeBleu_score": 49.29367261813954}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\n\t\tExosuitClawAction action = ExosuitClawAction.NONE;\n\t\tif (cooldown >= clawArm.pickupTime) {\n\t\t\taction = ExosuitClawAction.START_USE_TOOL;\n\t\t} else if (cooldown >= clawArm.punchTime) {\n\t\t\taction = ExosuitClawAction.ALT_HIT;\n\t\t} else {\n\t\t\tDebug.LogError(\"ExosuitClawAction: cooldown time is less than pickup or punch time.\");\n\t\t}\n\t\tBroadcastArmAction(TechType.ExosuitClaw, clawArm, action, null, null);\n\t}\n}", "CodeBleu_score": 50.30383393122754}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (clawArm.GetGameObject().TryGetIdOrWarn(out NitroxId id)) {\n\t\tExosuitClawAction action = ExosuitClawAction.NONE;\n\t\tif (cooldown >= clawArm.pickupTime) {\n\t\t\taction = ExosuitClawAction.START_USE_TOOL;\n\t\t}\n\t\telse if (cooldown >= clawArm.punchTime) {\n\t\t\taction = ExosuitClawAction.ALT_HIT;\n\t\t}\n\t\telse {\n\t\t\tDebug.LogError(\"ExosuitClawAction: cooldown time does not match pickup or punch time.\");\n\t\t}\n\t\tif (action != ExosuitClawAction.NONE) {\n\t\t\tBroadcastArmAction(clawArm.techType, clawArm, action, null, null);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.12128274926176}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null || parent == null) {\n\t\treturn;\n\t}\n\n\t// Get the game object's ID\n\tvar entityID = gameObject.GetComponent<NetworkIdentity>().netId;\n\n\t// Get the parent's ID\n\tvar parentID = parent.GetComponent<NetworkIdentity>().netId;\n\n\t// Get the entity's metadata\n\tvar metadata = new BatteryEntityMetadata();\n\tmetadata.entityID = entityID;\n\tmetadata.parentID = parentID;\n\tmetadata.techType = techType;\n\n\t// Create the entity\n\tvar entity = new InstalledBatteryEntity(metadata);\n\n\t// Send the EntitySpawnedByClient packet\n\tvar packet = new EntitySpawnedByClient();\n\tpacket.entity = entity;\n\tpacket.sendToAll = true;\n\tpacket.sendToSelf = false;\n\tpacket.spawnPacketID = EntitySpawnPacketID.Spawned;\n\tNetworkServer.SendToAll(packet);\n}", "CodeBleu_score": 39.614015795014424}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t", "CodeBleu_score": 11.969764320593383}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\tif (gameObject == null || parent == null) {\n\t\treturn;\n\t}\n\tint entityId = gameObject.GetComponent<NetworkIdentity>().netId;\n\tint parentId = parent.GetComponent<NetworkIdentity>().netId;\n\n\tInstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity(entityId, parentId, techType);\n\tSendEntitySpawnedByClient(installedBatteryEntity);\n}", "CodeBleu_score": 29.7345549680477}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t", "CodeBleu_score": 5.84976360641335}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject); // We do this here bc a MetadataExtractor could be requiring the id to increment or so\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n\tif (metadata.HasValue) {\n\t\tTechTag techTag = gameObject.GetComponent<TechTag>();\n\t\tTechType techType = (techTag) ? techTag.type : TechType.None;\n\n\t\tInventoryItemEntity entity = new InventoryItemEntity(id, techType.ToDto(), metadata.Value);\n\n\t\tentity.children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n\t\tentity.playerId = NitroxEntity.GetPlayerId();\n\n\t\tBattery battery = gameObject.GetComponent<Battery>();\n\t\tif (battery) {\n\t\t\tentity.battery = new BatteryState(battery.charge, battery.capacity);\n\t\t}\n\n\t\treturn entity;\n\t} else {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 53.52926368031968}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\tOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n\tif (!metadata.HasValue) {\n\t\treturn null;\n\t}\n\n\tTechTag techTag = gameObject.GetComponent<TechTag>();\n\tTechType techType = (techTag) ? techTag.type : TechType.None;\n\n\tInventoryItemEntity entity = new InventoryItemEntity(id, metadata.Value, techType.ToDto(), GetPrefabChildren(gameObject, id, entityMetadataManager), PlayerEntity.GetIdOrGenerateNew());\n\n\tBattery battery = gameObject.GetComponent<Battery>();\n\n\tif (battery) {\n\t\tentity.battery = battery.ToDto();\n\t}\n\n\treturn entity;\n}", "CodeBleu_score": 44.52775959426144}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Lazy<PlayerBody>(() => new PlayerBody(this));\n\tthis.playerModel = new Lazy<PlayerModel>(() => new PlayerModel(this));\n\tthis.bodyProto = new Lazy<PlayerBodyProto>(() => this.multiplayerSession.GetPlayerBodyProto(this.playerId));\n\tthis.permissions = new Permissions(this);\n\tthis.permissions.GrantPermissions(Permissions.PermissionType.LocalPlayer);\n}", "CodeBleu_score": 50.873019329572166}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Body(this);\n\tthis.playerModel = new PlayerModel(this);\n\tthis.body.SetPrototype(Body.GetBodyByName(\"Humanoid\"));\n\tthis.playerModel.SetModelByName(\"HumanMale\");\n\tthis.permissions = new PermissionSet(Permission.Player);\n}", "CodeBleu_score": 46.290425064664845}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (player != null && player.head != null && player.head.shadowCastingMode != ShadowCastingMode.On) {\n\t\t\tplayer.head.shadowCastingMode = ShadowCastingMode.On;\n\t\t}\n\n\t\tif (bodyPrototype == null) {\n\t\t\tbodyPrototype = Instantiate(player.body);\n\t\t\tbodyPrototype.name = \"RemotePlayerPrototype\";\n\t\t\tbodyPrototype.SetActive(false);\n\n\t\t\t// Remove items in hand\n\t\t\tif (player.rightHand != null) {\n\t\t\t\tplayer.rightHand.Remove();\n\t\t\t}\n\t\t\tif (player.leftHand != null) {\n\t\t\t\tplayer.leftHand.Remove();\n\t\t\t}\n\t\t}\n\n\t\treturn bodyPrototype;\n\t}\n}", "CodeBleu_score": 26.14479169776316}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tGameObject head = this.GetHead();\n\t\tif (head != null) {\n\t\t\thead.GetComponent<Renderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\t}\n\t\tGameObject body = GameObject.Instantiate(this.body);\n\t\tbody.name = \"RemotePlayerPrototype\";\n\t\tbody.SetActive(false);\n\t\tforeach (Transform child in body.transform) {\n\t\t\tif (child.name == \"LeftHand\" || child.name == \"RightHand\") {\n\t\t\t\tforeach (Transform item in child) {\n\t\t\t\t\tif (item.name == \"Item\") {\n\t\t\t\t\t\titem.parent = null;\n\t\t\t\t\t\tGameObject.Destroy(item.gameObject);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn body;\n\t}\n}", "CodeBleu_score": 32.80502122924236}, {"code": "private GameObject CreateBodyPrototype{\n\t\tget {\n\t\tif (player == null) return null;\n\t\tif (player.head == null) return null;\n\t\tif (player.head.shadowCastingMode != UnityEngine.Rendering.ShadowCastingMode.On) {\n\t\t\tplayer.head.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\t}\n\t\tif (player.body == null) return null;\n\t\tif (!player.body.activeSelf) return null;\n\t\tif (player.body.name != \"RemotePlayerPrototype\") player.body.name = \"RemotePlayerPrototype\";\n\t\tplayer.body.SetActive(false);\n\t\treturn GameObject.Instantiate(player.body);\n\t}\n}", "CodeBleu_score": 22.67800086796757}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().FullName);\n\tbw.Write(Location);\n\tbw.Write(Metadata);\n\tbw.Write(Processes);\n\tbw.Write(Dependencies);\n\tbw.Write(Incompatibilities);\n\tbw.Write(TargetVersion);\n}", "CodeBleu_score": 16.28423363080371}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().FullName);\n\tbw.Write(Location);\n\tbw.Write(Metadata);\n\tbw.Write(Processes);\n\tbw.Write(Dependencies);\n\tbw.Write(Incompatibilities);\n\tbw.Write(TargetVersion);\n}", "CodeBleu_score": 16.28423363080371}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(GetType().FullName);\n\tbw.Write(Location);\n\tbw.Write(Metadata);\n\tbw.Write(Processes);\n\tbw.Write(Dependencies);\n\tbw.Write(Incompatibilities);\n\tbw.Write(TargetVersion);\n}", "CodeBleu_score": 16.28423363080371}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tType pluginType = pluginAssembly.GetType(pluginInfo.Type);\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tpluginInstance.PluginLoad(pluginInfo);\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 60.415101227009536}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tType pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\n\tif (pluginType == null) {\n\t\tthrow new InvalidOperationException(\"Could not find plugin type \" + pluginInfo.PluginType + \" in plugin assembly \" + pluginAssembly.FullName);\n\t}\n\tBasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\tplugin.PluginInfo = pluginInfo;\n\tplugin.Assembly = pluginAssembly;\n\tplugin.Load();\n\treturn plugin;\n}", "CodeBleu_score": 45.990577552314235}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\tType pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\tif (pluginType == null) {\n\t\tthrow new Exception(\"Could not find type \" + pluginInfo.TypeName + \" in assembly \" + pluginInfo.AssemblyPath);\n\t}\n\tBasePlugin pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\tpluginInstance.PluginLoad(pluginInfo);\n\tpluginInstance.Load();\n\treturn pluginInstance;\n}", "CodeBleu_score": 56.32350949719278}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod is null) {\n\t\tPrepare();\n\t\tTrampolineMethod = TrampolineGenerator.GenerateTrampoline(TrampolinePtr, signature);\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 73.4130958229426}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tif (signature == null) {\n\t\t\tTrampolineMethod = typeof(Detour).GetMethod(\"Trampoline\", BindingFlags.NonPublic | BindingFlags.Static);\n\t\t} else {\n\t\t\tTrampolineMethod = typeof(Detour).GetMethod(\"Trampoline\", new Type[] { signature.DeclaringType });\n\t\t}\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 55.4553463871751}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t\tif (TrampolineMethod == null) {\n\t\tPrepare();\n\t\tif (signature == null) {\n\t\t\tTrampolineMethod = TrampolineGenerator.GenerateMethod(TrampolinePtr, typeof(Detour).Module);\n\t\t} else {\n\t\t\tTrampolineMethod = TrampolineGenerator.GenerateMethod(TrampolinePtr, typeof(Detour).Module, signature);\n\t\t}\n\t}\n\treturn TrampolineMethod;\n}", "CodeBleu_score": 59.47796629303343}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\t// Get the stream from the resources.\n\tStream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"Language.\" + code + \".json\");\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(\"Language file not found.\");\n\t}\n\n\t// Deserialize the stream.\n\ttry {\n\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\t}\n\tcatch (JsonException e) {\n\t\tthrow new JsonException(\"Language file could not be deserialized.\", e);\n\t}\n}", "CodeBleu_score": 47.92876191791549}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tstring json = \"\";\n\tStream stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(\"Language.\" + code + \".json\");\n\tusing (StreamReader reader = new StreamReader(stream)) {\n\t\tjson = reader.ReadToEnd();\n\t}\n\treturn Json.Deserialize(json) as Dictionary<string, string>;\n}", "CodeBleu_score": 41.50805077508334}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tAssembly assembly = Assembly.GetExecutingAssembly();\n\tstring resourceName = \"Assets.Resources.Languages.\" + code + \".json\";\n\tStream stream = assembly.GetManifestResourceStream(resourceName);\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(\"Language file not found in Resources: \" + resourceName);\n\t}\n\tStreamReader reader = new StreamReader(stream);\n\tstring json = reader.ReadToEnd();\n\treader.Close();\n\tstream.Close();\n\treturn JsonUtility.FromJson<Dictionary<string, string>>(json);\n}", "CodeBleu_score": 42.47151703358654}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint count = 0;\n\tfor (int i = 0; i < nodes.Count; i++) {\n\t\tif (nodes[i] is ParserRuleContext) {\n\t\t\tcount += this.GenerateCodeForExpressionsInNode(nodes[i]);\n\t\t}\n\t}\n\treturn count;\n}", "CodeBleu_score": 29.221168185421025}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tVisit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\treturn expressionCount;\n}", "CodeBleu_score": 40.35058300554098}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t\tint expressionCount = 0;\n\tforeach (IParseTree node in nodes) {\n\t\tif (node is ParserRuleContext) {\n\t\t\tVisit(node);\n\t\t\texpressionCount++;\n\t\t}\n\t}\n\n\treturn expressionCount;\n}", "CodeBleu_score": 40.35058300554098}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar lineID = context.line_content().header().tag().TAG_ID().GetText();\n\tvar expressionCount = context.line_content().line_formatted_text().expression().Length;\n\tvar lineIDBytes = Encoding.UTF8.GetBytes(lineID);\n\tvar lineIDLength = lineIDBytes.Length;\n\tvar bytes = new byte[lineIDLength + 4];\n\tbytes[0] = (byte)Opcode.RunLine;\n\tbytes[1] = (byte)(lineIDLength & 0xFF);\n\tbytes[2] = (byte)((lineIDLength >> 8) & 0xFF);\n\tbytes[3] = (byte)(expressionCount & 0xFF);\n\tArray.Copy(lineIDBytes, 0, bytes, 4, lineIDLength);\n\toutputStream.AddRange(bytes);\n\treturn 0;\n}", "CodeBleu_score": 33.206587479820406}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\t// Generate code for any expressions in the line\n\tvar expressionCount = this.VisitChildren(context);\n\n\t// Retrieve the line ID\n\tvar lineID = context.line_content().header().header_value().text.Text;\n\n\t// Emit the RunLine opcode\n\tvar lineIDString = $\"\\\"{lineID}\\\"\";\n\tvar lineIDStringLength = lineIDString.Length;\n\n\tthis.AddLine($\"this.vm.RunLine({lineIDString}, {expressionCount});\");\n\n\treturn expressionCount;\n}", "CodeBleu_score": 31.792047159739035}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\tvar text = context.text();\n\tvar lineID = text.ID().GetText();\n\n\tvar expressionCount = 0;\n\tif (lineID.Length == 0) {\n\t\tthrow new InvalidOperationException($\"Line statement must have a line ID tag.\");\n\t} else {\n\t\t// Generate code for any expressions in the line\n\t\tVisit(text);\n\n\t\t// Emit a RunLine opcode with the line ID and expression count\n\t\tvar lineIDString = $\"\\\"{lineID}\\\"\";\n\t\tvar opcode = $\"RunLine({lineIDString}, {expressionCount});\";\n\t\tAddLine(opcode);\n\t}\n\n\treturn 0;\n}", "CodeBleu_score": 20.590784119197693}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\tvar commands = yarnFile.AllCommands();\n\tvar knownCommands = yarnFile.Project.AllCommands();\n\tforeach (var command in commands) {\n\t\tif (!knownCommands.Contains(command)) {\n\t\t\tvar diagnostic = Diagnostic.Create(\n\t\t\t\tUnknownCommandRule,\n\t\t\t\tyarnFile.Node.GetLocation(),\n\t\t\t\tcommand.Name\n\t\t\t);\n\t\t\tyield return diagnostic;\n\t\t}\n\t}\n}", "CodeBleu_score": 15.421273978716146}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t", "CodeBleu_score": 1.9737119786745916}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t", "CodeBleu_score": 1.9737119786745916}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tvar options = new CodeActionRegistrationOptions {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n\n\toptions.ResolveProvider = false;\n\n\treturn options;\n}", "CodeBleu_score": 45.63472736360236}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\treturn new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n\t\tResolveProvider = false,\n\t};\n}", "CodeBleu_score": 60.275754410207895}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t\tCodeActionOptions options = new CodeActionOptions() {\n\t\tCodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n\t};\n\treturn new CodeActionRegistrationOptions() {\n\t\tDocumentSelector = DocumentSelectorFactory.Create(),\n\t\tResolveProvider = false,\n\t\tOptions = options\n\t};\n}", "CodeBleu_score": 44.28594909905016}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t", "CodeBleu_score": 6.712467208693234}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\tif (variableName == null) throw new ArgumentNullException(\"variableName\");\n\tif (variableName == \"\") throw new ArgumentException(\"variableName cannot be empty.\");\n\tif (!variableName.StartsWith(\"$\")) throw new ArgumentException(\"variableName must start with a $\");\n\tif (!variableName.EndsWith(\"$\")) throw new ArgumentException(\"variableName must end with a $\");\n\n\tresult = default(T);\n\tif (!variables.ContainsKey(variableName)) return false;\n\n\tobject value = variables[variableName];\n\tif (value is T) {\n\t\tresult = (T)value;\n\t\treturn true;\n\t}\n\telse {\n\t\tthrow new ArgumentException(\"The type of the variable \" + variableName + \" is incompatible with the type specified by the generic argument T.\");\n\t}\n}", "CodeBleu_score": 40.38763569540947}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t", "CodeBleu_score": 6.712467208693234}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\tthis.variableStorage = variableStorage;\n\tthis.library = new Library(variableStorage);\n\tthis.virtualMachine = new VirtualMachine(library);\n\tthis.importLibrary(new StandardLibrary());\n\tthis.RegisterNodeVisitHandler(OnNodeStart);\n\tthis.RegisterNodeVisitHandler(OnNodeEnd);\n\tthis.lineParser = new LineParser();\n\tthis.lineParser.AddMarkerProcessor(\"select\", new SelectMarkerProcessor());\n\tthis.lineParser.AddMarkerProcessor(\"plural\", new PluralMarkerProcessor());\n\tthis.lineParser.AddMarkerProcessor(\"ordinal\", new OrdinalMarkerProcessor());\n}", "CodeBleu_score": 31.25815568140301}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\n#if !DISABLE_VARIABLE_STORAGE_ENCRYPTION\n        // If the variable storage is encrypted, then we need to decrypt it\n        if (variableStorage is Yarn.Unity.EncryptedVariableStorage) {\n            var encryptedStorage = (Yarn.Unity.EncryptedVariableStorage)variableStorage;\n\n            // If the encryption key is null, throw an exception\n            if (encryptedStorage.encryptionKey == null) {\n                throw new System.Exception(\"Cannot use an EncryptedVariableStorage without an encryption key!\");\n            }\n\n            // If the encryption key is empty, throw an exception\n            if (encryptedStorage.encryptionKey.Length == 0) {\n                throw new System.Exception(\"Cannot use an EncryptedVariableStorage with an empty encryption key!\");\n            }\n\n            // Decrypt the storage\n            variableStorage = encryptedStorage.Decrypt();\n        }\n#endif\n\n        // Set up the library\n        Library = new Library();\n\n        // Set up the virtual machine\n        VirtualMachine = new VirtualMachine(this.Library);\n\n        // Register functions for node visit tracking\n        RegisterFunction(\"getNodeVisitCount\", GetNodeVisitCount);\n        RegisterFunction(\"isNodeVisited\", IsNodeVisited);\n\n        // Register marker processors for select, plural, and ordinal markers\n        RegisterMarkerProcessor(\"select\", new SelectMarkerProcessor());\n        RegisterMarkerProcessor(\"plural\", new PluralMarkerProcessor());\n        RegisterMarkerProcessor(\"ordinal\", new OrdinalMarkerProcessor());\n\n        // Set the variable storage\n        VariableStorage = variableStorage;\n    }", "CodeBleu_score": 31.044109401193044}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t\tif (string.IsNullOrEmpty(UniqueID)) {\n\t\treturn -1;\n\t}\n\tfor (int i = 0; i < this.LoopListBankData.Count; i++) {\n\t\tif (this.LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}", "CodeBleu_score": 64.30444053414}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tif (UniqueID == null || UniqueID.Length == 0)\n\t\treturn -1;\n\tint index = -1;\n\tfor (int i = 0; i < this.LoopListBankData.Count; i++) {\n\t\tif (this.LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn index;\n}", "CodeBleu_score": 47.2559963918234}, {"code": "public int FindUniqueID(string UniqueID){\n\t\tint index = -1;\n\tif (UniqueID == null || UniqueID.Length == 0) {\n\t\treturn index;\n\t}\n\tfor (int i = 0; i < this.LoopListBankData.Count; i++) {\n\t\tif (this.LoopListBankData[i].UniqueID == UniqueID) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn index;\n}", "CodeBleu_score": 53.42165632610269}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.content = newContent;\n\tnewLoopListBankData.id = Guid.NewGuid().ToString();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 47.10245915955847}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newBankData = new LoopListBankData();\n\tnewBankData.m_Content = newContent;\n\tnewBankData.m_ID = m_LoopListBankDataList.Count;\n\tm_LoopListBankDataList.Add(newBankData);\n}", "CodeBleu_score": 37.49572039010237}, {"code": "public void AddContent(object newContent){\n\t\tLoopListBankData newLoopListBankData = new LoopListBankData();\n\tnewLoopListBankData.m_Content = newContent;\n\tnewLoopListBankData.m_ID = Guid.NewGuid();\n\tm_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 41.47554032404061}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_Content.ToString() + \" \" + m_IndexID.ToString();\n\t}\n}", "CodeBleu_score": 57.98721132908968}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tif (m_Content != null) {\n\t\t\tif (m_Content.ToString().Length > 0) {\n\t\t\t\tif (ClickObject != null) {\n\t\t\t\t\tm_GameObject.name = m_Content.ToString() + \" \" + m_IndexID.ToString() + \" \" + ClickUniqueID.ToString();\n\t\t\t\t} else {\n\t\t\t\t\tm_GameObject.name = m_Content.ToString() + \" \" + m_IndexID.ToString();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (ClickObject != null) {\n\t\t\t\t\tm_GameObject.name = m_IndexID.ToString() + \" \" + ClickUniqueID.ToString();\n\t\t\t\t} else {\n\t\t\t\t\tm_GameObject.name = m_IndexID.ToString();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (ClickObject != null) {\n\t\t\t\tm_GameObject.name = m_IndexID.ToString() + \" \" + ClickUniqueID.ToString();\n\t\t\t} else {\n\t\t\t\tm_GameObject.name = m_IndexID.ToString();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.232807650466725}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t\tm_IndexID = idx;\n\tm_Content = content;\n\tif (m_IsUpdateGameObjectName) {\n\t\tif (m_Content != null) {\n\t\t\tif (m_Content is GameObject) {\n\t\t\t\tGameObject go = (GameObject)m_Content;\n\t\t\t\tif (go != null) {\n\t\t\t\t\tif (go.name.StartsWith(m_CellPrefab.name)) {\n\t\t\t\t\t\tgo.name = m_CellPrefab.name + \" \" + idx.ToString();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 56.021529371037694}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t\tint count = 0;\n\ttry {\n\t\tcount = int.Parse(inputField.text);\n\t} catch (Exception e) {\n\t\tDebug.Log(\"Invalid input: \" + e);\n\t}\n\tif (count < 1) {\n\t\tcount = 1;\n\t}\n\tfor (int i = 0; i < count; i++) {\n\t\tbank.Add(Random.Range(0, 10));\n\t}\n\tscrollRect.content.sizeDelta = new Vector2(scrollRect.content.sizeDelta.x, (float)bank.Count * 20.0f);\n\tRefreshCells();\n}", "CodeBleu_score": 38.536349781986715}, {"code": "private void OnButtonAddDataClickk(){\n\t\t// Get the number of items to add from the input field text.\n\tint itemCount = int.Parse(inputField.text);\n\n\t// Ensure at least one item is added.\n\tif (itemCount < 1) {\n\t\titemCount = 1;\n\t}\n\n\t// Add random integers between 0 and 10 to the list bank.\n\tfor (int i = 0; i < itemCount; i++) {\n\t\tlistBank.Add(Random.Range(0, 10));\n\t}\n\n\t// Update the total count of the scroll rect.\n\tscrollRect.content.sizeDelta = new Vector2(scrollRect.content.sizeDelta.x, (listBank.Count * 20) + 20);\n\n\t// Refresh the displayed cells.\n\tRefreshCells();\n}", "CodeBleu_score": 33.17691301351755}, {"code": "private void OnButtonAddDataClickk(){\n\t\tint numToAdd = 0;\n\ttry {\n\t\tnumToAdd = int.Parse(this.inputField.text);\n\t}\n\tcatch (Exception) {\n\t\tDebug.Log(\"Please enter a valid integer\");\n\t\treturn;\n\t}\n\tif (numToAdd < 1) {\n\t\tDebug.Log(\"Please enter a number greater than 0\");\n\t\treturn;\n\t}\n\tfor (int i = 0; i < numToAdd; i++) {\n\t\tthis.bank.Add(Random.Range(0, 10));\n\t}\n\tthis.totalCount = this.bank.Count;\n\tthis.scrollRect.verticalNormalizedPosition = 1f;\n\tthis.RefreshCells();\n}", "CodeBleu_score": 36.608342238707614}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\t// Verify that the content has the expected number of child elements\n\tif (m_Content.childCount != m_ContentLength) {\n\t\tDebug.LogError(\"Content has \" + m_Content.childCount + \" elements, expected \" + m_ContentLength);\n\t\treturn;\n\t}\n\n\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index\n\tif (m_StartIndex > 0) {\n\t\tfor (int i = 0; i < m_StartIndex; i++) {\n\t\t\tm_Content.GetChild(i).SetParent(m_PrefabSource, false);\n\t\t}\n\t\tm_StartIndex = 0;\n\t}\n\n\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index\n\tif (m_EndIndex < m_ContentLength) {\n\t\tfor (int i = m_ContentLength - 1; i >= m_EndIndex; i--) {\n\t\t\tm_Content.GetChild(i).SetParent(m_PrefabSource, false);\n\t\t}\n\t\tm_EndIndex = m_ContentLength;\n\t}\n}", "CodeBleu_score": 41.22052933722756}, {"code": "protected override void ClearTempPool(){\n\t\tif (m_TempPool.Count == 0)\n\t\treturn;\n\n\tif (m_TempPool.Count != m_TempPoolExpectedCount)\n\t\treturn;\n\n\tif (m_TempPoolStartIndex != 0) {\n\t\tfor (int i = 0; i < m_TempPoolStartIndex; i++) {\n\t\t\tGameObject tempObject = m_TempPool[i];\n\t\t\ttempObject.transform.SetParent(m_SourcePrefab.transform);\n\t\t\ttempObject.SetActive(true);\n\t\t\tm_TempPool.Remove(tempObject);\n\t\t}\n\n\t\tm_TempPoolStartIndex = 0;\n\t}\n\n\tif (m_TempPoolEndIndex != m_TempPool.Count) {\n\t\tfor (int i = m_TempPool.Count - 1; i >= m_TempPoolEndIndex; i--) {\n\t\t\tGameObject tempObject = m_TempPool[i];\n\t\t\ttempObject.transform.SetParent(m_SourcePrefab.transform);\n\t\t\ttempObject.SetActive(true);\n\t\t\tm_TempPool.Remove(tempObject);\n\t\t}\n\n\t\tm_TempPoolEndIndex = m_TempPool.Count;\n\t}\n}", "CodeBleu_score": 36.62520239558321}, {"code": "protected override void ClearTempPool(){\n\t\tif (tempPool.Count != 0) {\n\t\tif (tempPool[0].MarkedForDeletion) {\n\t\t\ttempPool[0].MarkedForDeletion = false;\n\t\t\ttempPool[0].ReturnToPool();\n\t\t\ttempPool.RemoveAt(0);\n\t\t}\n\t\tif (tempPool[tempPool.Count - 1].MarkedForDeletion) {\n\t\t\ttempPool[tempPool.Count - 1].MarkedForDeletion = false;\n\t\t\ttempPool[tempPool.Count - 1].ReturnToPool();\n\t\t\ttempPool.RemoveAt(tempPool.Count - 1);\n\t\t}\n\t}\n}", "CodeBleu_score": 17.570213375004098}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (NetworkServer.active) {\n\t\tif (NetworkServer.localClientActive) {\n\t\t\tSetLocalScale(newScale);\n\t\t}\n\t\tif (NetworkServer.active) {\n\t\t\tSetAnticipatedScale(newScale);\n\t\t\tif (NetworkServer.localClientActive) {\n\t\t\t\tSetLocalScale(newScale);\n\t\t\t}\n\t\t\tRecordAnticipatedTransform();\n\t\t\tAnticipationReset();\n\t\t}\n\t}\n}", "CodeBleu_score": 14.798606365227082}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (!NetworkServer.active) {\n\t\t// If we're not the server, just set the scale.\n\t\ttransform.localScale = newScale;\n\t\treturn;\n\t}\n\n\t// If we're the server, check if we're listening.\n\tif (!NetworkServer.active) {\n\t\t// If we're not the server, just set the scale.\n\t\ttransform.localScale = newScale;\n\t\treturn;\n\t}\n\n\t// If we're the server and listening, set the local and anticipated scales.\n\ttransform.localScale = newScale;\n\ttransform.localScale = newScale;\n\n\t// If we're the server and listening, set the authoritative scale.\n\ttransform.localScale = newScale;\n\n\t// Record the anticipated transform.\n\tAnticipatedTransform = transform.localScale;\n\n\t// Update the anticipation counters and times.\n\tAnticipationCounter = AnticipationCounter + 1;\n\tAnticipationTime = Time.time;\n\n\t// Reset the smooth transition duration and current smooth time.\n\tSmoothTransitionDuration = 0.0f;\n\tSmoothTime = 0.0f;\n}", "CodeBleu_score": 32.91982632018846}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t\tif (networker.isServer) {\n\t\treturn;\n\t}\n\tif (networker.isListening) {\n\t\tif (networker.allowClientToAnticipate) {\n\t\t\tnetworker.SetLocalScale(newScale);\n\t\t\tnetworker.SetAnticipatedScale(newScale);\n\t\t\tnetworker.SetAuthoritativeScale(newScale);\n\t\t}\n\t\tnetworker.RecordAnticipatedTransform();\n\t\tnetworker.UpdateAnticipationCounters();\n\t\tnetworker.ResetSmoothTime();\n\t}\n}", "CodeBleu_score": 21.941528013515192}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\tif (NetworkServer.active) {\n\t\t// Send animation updates to clients\n\t\tfor (int i = 0; i < _animationUpdates.Count; i++) {\n\t\t\tNetworkAnimator.SendAnimationUpdate(_animationUpdates[i]);\n\t\t}\n\t\t_animationUpdates.Clear();\n\n\t\t// Send parameter updates to clients\n\t\tfor (int i = 0; i < _parameterUpdates.Count; i++) {\n\t\t\tNetworkAnimator.SendParameterUpdate(_parameterUpdates[i]);\n\t\t}\n\t\t_parameterUpdates.Clear();\n\n\t\t// Send trigger updates to clients\n\t\tfor (int i = 0; i < _triggerUpdates.Count; i++) {\n\t\t\tNetworkAnimator.SendTriggerUpdate(_triggerUpdates[i]);\n\t\t}\n\t\t_triggerUpdates.Clear();\n\t} else {\n\t\t// Send animation updates to server\n\t\tfor (int i = 0; i < _animationUpdates.Count; i++) {\n\t\t\tNetworkAnimator.SendAnimationUpdate(_animationUpdates[i]);\n\t\t}\n\t\t_animationUpdates.Clear();\n\n\t\t// Send parameter updates to server\n\t\tfor (int i = 0; i < _parameterUpdates.Count; i++) {\n\t\t\tNetworkAnimator.SendParameterUpdate(_parameterUpdates[i]);\n\t\t}\n\t\t_parameterUpdates.Clear();\n\n\t\t// Send trigger updates to server\n\t\tfor (int i = 0; i < _triggerUpdates.Count; i++) {\n\t\t\tNetworkAnimator.SendTriggerUpdate(_triggerUpdates[i]);\n\t\t}\n\t\t_triggerUpdates.Clear();\n\t}\n}", "CodeBleu_score": 40.74364546484519}, {"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}, {"code": "private void FlushMessages(){\n\t\tif (isServer) {\n\t\tforeach (var client in GetComponentsInChildren<NetworkAnimator> ()) {\n\t\t\tif (client.isLocalPlayer) continue;\n\t\t\tforeach (var update in client.animationUpdates) {\n\t\t\t\tclient.SendAnimationUpdate (update);\n\t\t\t}\n\t\t\tforeach (var update in client.parameterUpdates) {\n\t\t\t\tclient.SendParameterUpdate (update);\n\t\t\t}\n\t\t\tforeach (var update in client.triggerUpdates) {\n\t\t\t\tclient.SendTriggerUpdate (update);\n\t\t\t}\n\t\t\tclient.animationUpdates.Clear ();\n\t\t\tclient.parameterUpdates.Clear ();\n\t\t\tclient.triggerUpdates.Clear ();\n\t\t}\n\t} else {\n\t\tforeach (var update in animationUpdates) {\n\t\t\tSendAnimationUpdate (update);\n\t\t}\n\t\tforeach (var update in parameterUpdates) {\n\t\t\tSendParameterUpdate (update);\n\t\t}\n\t\tforeach (var update in triggerUpdates) {\n\t\t\tSendTriggerUpdate (update);\n\t\t}\n\t\tanimationUpdates.Clear ();\n\t\tparameterUpdates.Clear ();\n\t\ttriggerUpdates.Clear ();\n\t}\n}", "CodeBleu_score": 43.92841536323285}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (IsServer || IsLocalPlayer) {\n\t\t\tFlushMessages();\n\t\t}\n\t}\n\telse if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (IsServer || IsLocalPlayer) {\n\t\t\tforeach (var entry in m_SendParameterUpdates) {\n\t\t\t\tif (entry.ParametersUpdateMessage.Parameters.Count > 0) {\n\t\t\t\t\tif (entry.ParametersUpdateMessage.Parameters[0].Hash == m_ParameterHash) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tm_ParameterHash = entry.ParametersUpdateMessage.Parameters[0].Hash;\n\t\t\t\t}\n\t\t\t\tm_NetworkAnimator.SetParameters(entry.ParametersUpdateMessage.Parameters);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tforeach (var entry in m_SendParameterUpdates) {\n\t\t\t\tm_NetworkAnimator.SetParameters(entry.ParametersUpdateMessage.Parameters);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 34.39383223956606}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (IsServer) {\n\t\t\tFlushMessages();\n\t\t} else if (IsOwner) {\n\t\t\tFlushMessages();\n\t\t}\n\t}\n\n\tif (updateStage == NetworkUpdateStage.Update) {\n\t\t// Process parameter updates\n\t\tforeach (var sendEntry in m_SendParameterUpdates) {\n\t\t\tif (m_NetworkAnimator.ServerAuthority == NetworkAnimatorServerAuthority.ServerAuthoritative) {\n\t\t\t\tm_NetworkAnimator.SendParametersUpdateServerRpc(sendEntry.ParametersUpdateMessage);\n\t\t\t} else {\n\t\t\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(sendEntry.ParametersUpdateMessage, sendEntry.ClientRpcParams);\n\t\t\t}\n\t\t}\n\t\tm_SendParameterUpdates.Clear();\n\n\t\t// Check for animator changes\n\t\tif (m_NetworkAnimator.ServerAuthority == NetworkAnimatorServerAuthority.ServerAuthoritative) {\n\t\t\tif (m_NetworkAnimator.IsLocalPlayer) {\n\t\t\t\t// Local player\n\t\t\t\tif (m_NetworkAnimator.HasParameterChanged) {\n\t\t\t\t\tm_NetworkAnimator.SendParametersUpdateClientRpc(m_NetworkAnimator.ParameterUpdateMessage, m_NetworkAnimator.ClientRpcParams);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Non-local player\n\t\t\t\tif (m_NetworkAnimator.HasParameterChanged) {\n\t\t\t\t\tm_NetworkAnimator.SendParametersUpdateServerRpc(m_NetworkAnimator.ParameterUpdateMessage);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.434032630083024}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (IsServer || IsLocalPlayer) {\n\t\t\tFlushMessages();\n\t\t}\n\t} else if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n\t\tif (IsServer) {\n\t\t\tif (m_ParameterUpdateMode == ParameterUpdateMode.Server) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\n\t\t\tif (m_ParameterUpdateMode == ParameterUpdateMode.Server || m_ParameterUpdateMode == ParameterUpdateMode.Client) {\n\t\t\t\tProcessParameterUpdates();\n\t\t\t}\n\n\t\t\tif (m_ParameterUpdateMode == ParameterUpdateMode.Server) {\n\t\t\t\tProcessAnimationUpdates();\n\t\t\t}\n\t\t} else {\n\t\t\tif (m_ParameterUpdateMode == ParameterUpdateMode.Client) {\n\t\t\t\tFlushMessages();\n\t\t\t}\n\n\t\t\tif (m_ParameterUpdateMode == ParameterUpdateMode.Client || m_ParameterUpdateMode == ParameterUpdateMode.Server) {\n\t\t\t\tProcessParameterUpdates();\n\t\t\t}\n\n\t\t\tif (m_ParameterUpdateMode == ParameterUpdateMode.Client) {\n\t\t\t\tProcessAnimationUpdates();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.683180059601668}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t\tif (IsServer) {\n\t\tif (OwnerClientId == -1) {\n\t\t\tif (IsKinematic) {\n\t\t\t\tIsKinematic = false;\n\t\t\t\tRigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!IsKinematic) {\n\t\t\t\tIsKinematic = true;\n\t\t\t\tRigidbody.interpolation = RigidbodyInterpolation.None;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 24.86027836662228}, {"code": "private void UpdateOwnershipAuthority(){\n\t\t// If the object is not owned by a server, set the Rigidbody's kinematic and interpolation properties to false.\n\tif (ownershipAuthority == OwnershipAuthority.SERVER) {\n\t\trigidbody.isKinematic = false;\n\t\trigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n\t}\n\t// If the object is owned by a server, set the Rigidbody's kinematic and interpolation properties to true.\n\telse if (ownershipAuthority == OwnershipAuthority.CLIENT) {\n\t\trigidbody.isKinematic = true;\n\t\trigidbody.interpolation = RigidbodyInterpolation.Extrapolate;\n\t}\n}", "CodeBleu_score": 26.555537110261916}, {"code": "private void UpdateOwnershipAuthority(){\n\t\tif (ownershipAuthority == OwnershipAuthority.Server) {\n\t\t// Server authority means that the object is owned by the server.\n\t\t// It is owned by the server and therefore should not be interpolated.\n\t\t// It is owned by the server and therefore should not be kinematic.\n\t\tisKinematic = false;\n\t\tinterpolation = InterpolationMode.None;\n\t\thasAuthority = true;\n\t} else if (ownershipAuthority == OwnershipAuthority.Client) {\n\t\t// Client authority means that the object is owned by the client.\n\t\t// It is owned by the client and therefore should be interpolated.\n\t\t// It is owned by the client and therefore should be kinematic.\n\t\tisKinematic = true;\n\t\tinterpolation = InterpolationMode.Interpolate;\n\t\thasAuthority = false;\n\t} else if (ownershipAuthority == OwnershipAuthority.NotOwned) {\n\t\t// Not owned means that the object is not owned by either the server or the client.\n\t\t// It is not owned by the server or the client and therefore should not be interpolated.\n\t\t// It is not owned by the server or the client and therefore should be kinematic.\n\t\tisKinematic = true;\n\t\tinterpolation = InterpolationMode.None;\n\t\thasAuthority = false;\n\t}\n}", "CodeBleu_score": 22.163067797137803}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t\tfloat x = (float)(compressed & 0x3FF);\n\tfloat y = (float)((compressed >> 10) & 0x3FF);\n\tfloat z = (float)((compressed >> 20) & 0x3FF);\n\tfloat w = (float)((compressed >> 30) & 0x3FF);\n\n\tfloat sqrSum = (x * x) + (y * y) + (z * z) + (w * w);\n\n\tif (sqrSum <= 0) {\n\t\tquaternion.x = 0;\n\t\tquaternion.y = 0;\n\t\tquaternion.z = 0;\n\t\tquaternion.w = 1;\n\t} else {\n\t\tfloat unitLength = 1.0f / (float)Math.Sqrt(sqrSum);\n\n\t\tquaternion.x = x * unitLength;\n\t\tquaternion.y = y * unitLength;\n\t\tquaternion.z = z * unitLength;\n\t\tquaternion.w = w * unitLength;\n\t}\n}", "CodeBleu_score": 20.569450595772558}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t\tif (EditorApplication.isPlaying) {\n\t\tEditorUtility.DisplayDialog(\"Error\", \"Please exit the play mode first!\", \"OK\");\n\t\treturn;\n\t}\n\n\t// Create a new AppDomain\n\tAppDomain domain = AppDomain.CreateDomain(\"Temp\");\n\n\t// Create a new instance of the helper\n\tILRuntimeHelper helper = (ILRuntimeHelper)domain.CreateInstanceFromAndUnwrap(typeof(ILRuntimeHelper).Assembly.Location, typeof(ILRuntimeHelper).FullName);\n\n\t// Load the assembly from the specified file\n\thelper.LoadAssemblyFromFile(AssemblyFilePath);\n\n\t// Initialize the ILRuntime\n\thelper.Initialize();\n\n\t// Generate CLR binding code\n\thelper.GenerateCLRBinding();\n\n\t// Refresh the AssetDatabase\n\tAssetDatabase.Refresh();\n}", "CodeBleu_score": 21.82512250035376}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab);\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configCount\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"cachedBytesSize\"));\n\tEditorGUI.EndDisabledGroup();\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 36.99943998961873}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab);\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_configCount\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"m_cachedBytesSize\"));\n\tEditorGUI.EndDisabledGroup();\n\n\tserializedObject.ApplyModifiedProperties();\n\tEditorApplication.RepaintProjectWindow();\n}", "CodeBleu_score": 36.78299298897375}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configName\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configDescription\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configType\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configPath\"));\n\tEditorGUILayout.PropertyField(serializedObject.FindProperty(\"configData\"));\n\n\tEditorGUILayout.Space();\n\n\tEditorGUILayout.LabelField(\"Cached Config Data\", EditorStyles.boldLabel);\n\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab);\n\n\tEditorGUILayout.LabelField(\"Config Count: \" + target.configCount);\n\tEditorGUILayout.LabelField(\"Cached Bytes Size: \" + target.cachedBytesSize);\n\n\tEditorGUI.EndDisabledGroup();\n\n\tserializedObject.ApplyModifiedProperties();\n\tEditorUtility.SetDirty(target);\n}", "CodeBleu_score": 53.5170829869573}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t\t// Create a new HashSet of default scene names\n\tHashSet<string> defaultScenes = new HashSet<string> {\n\t\t\"Assets/Scenes/Menu.unity\",\n\t\t\"Assets/Scenes/Credits.unity\",\n\t\t\"Assets/Scenes/Game.unity\",\n\t\t\"Assets/Scenes/GameOver.unity\"\n\t};\n\n\t// Convert the HashSet to a list of EditorBuildSettingsScene objects\n\tList<EditorBuildSettingsScene> scenesList = new List<EditorBuildSettingsScene>();\n\tforeach (string scene in defaultScenes) {\n\t\tscenesList.Add(new EditorBuildSettingsScene(scene, true));\n\t}\n\n\t// Update the EditorBuildSettings with the new list\n\tEditorBuildSettings.scenes = scenesList.ToArray();\n\n\t// Log that the scenes have been set to the default\n\tDebug.Log(\"Default scenes have been set.\");\n}", "CodeBleu_score": 51.46060762515947}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultSceneNames = new HashSet<string>() {\n\t\t\"Assets/Scenes/MainMenu.unity\",\n\t\t\"Assets/Scenes/Credits.unity\",\n\t\t\"Assets/Scenes/Settings.unity\",\n\t\t\"Assets/Scenes/Credits.unity\",\n\t\t\"Assets/Scenes/MainMenu.unity\"\n\t};\n\n\tList<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n\tforeach(string sceneName in defaultSceneNames) {\n\t\tdefaultScenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\n\tEditorBuildSettings.scenes = defaultScenes.ToArray();\n\tDebug.Log(\"Scenes have been set to the default.\");\n}", "CodeBleu_score": 49.7388207971698}, {"code": "public static void DefaultScenes(){\n\t\tHashSet<string> defaultSceneNames = new HashSet<string>();\n\tdefaultSceneNames.Add(\"Assets/Scenes/SampleScene.unity\");\n\tdefaultSceneNames.Add(\"Assets/Scenes/SampleScene2.unity\");\n\tList<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n\tforeach (string sceneName in defaultSceneNames) {\n\t\tdefaultScenes.Add(new EditorBuildSettingsScene(sceneName, true));\n\t}\n\tEditorBuildSettings.scenes = defaultScenes.ToArray();\n\tDebug.Log(\"Default Scenes Set!\");\n}", "CodeBleu_score": 62.9027731596353}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t\tif (m_HelperType == null) {\n\t\tEditorGUILayout.HelpBox(\"No helper type selected\", MessageType.Error);\n\t}\n\telse {\n\t\tstring[] helperTypeNames = m_HelperType.GetHelperTypeNames();\n\t\tint selectedIndex = Array.IndexOf(helperTypeNames, m_HelperTypeName);\n\t\tselectedIndex = EditorGUI.Popup(m_Rect, \"Helper Type\", selectedIndex, helperTypeNames);\n\t\tif (selectedIndex >= 0) {\n\t\t\tm_HelperTypeName = helperTypeNames[selectedIndex];\n\t\t\tm_HelperType = m_HelperType.GetHelperType(m_HelperTypeName);\n\t\t}\n\t\telse {\n\t\t\tm_HelperTypeName = string.Empty;\n\t\t\tm_HelperType = null;\n\t\t}\n\t}\n\n\tEditorGUI.BeginChangeCheck();\n\tm_HelperTypeName = EditorGUI.TextField(m_Rect, m_HelperTypeName);\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tm_HelperType = m_HelperType.GetHelperType(m_HelperTypeName);\n\t}\n}", "CodeBleu_score": 37.33194418017159}, {"code": "public void Draw(){\n\t\tif (m_HelperTypeNames == null) {\n\t\treturn;\n\t}\n\n\tif (m_HelperTypeNames.Length == 0) {\n\t\treturn;\n\t}\n\n\tif (m_HelperTypeNames.Length == 1) {\n\t\t// If there is only one helper type, select it automatically.\n\t\tm_SelectedHelperIndex = 0;\n\t}\n\n\tEditorGUI.BeginChangeCheck();\n\tm_SelectedHelperIndex = EditorGUI.Popup(m_Rect, m_SelectedHelperIndex, m_HelperTypeNames);\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tif (m_SelectedHelperIndex == 0) {\n\t\t\t// If the selected helper type is \"Custom\", display a field for a custom helper.\n\t\t\tm_Helper = (Helper)EditorGUILayout.ObjectField(m_Helper, typeof(Helper), true);\n\t\t} else {\n\t\t\t// If the selected helper type is not \"Custom\", display the helper type and set it to null.\n\t\t\tm_Helper = null;\n\t\t}\n\t}\n\n\tif (m_SelectedHelperIndex == 0) {\n\t\t// If the selected helper type is \"Custom\", display an error message if the custom helper is not set.\n\t\tif (m_Helper == null) {\n\t\t\tEditorGUI.HelpBox(m_Rect, \"No helper type is selected.\", MessageType.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.01813254903181}, {"code": "public void Draw(){\n\t\tif (m_HelperTypes == null) {\n\t\tm_HelperTypes = new List<Type>();\n\t\tforeach (Type t in TypeCache.GetTypesDerivedFrom<AbstractHelper>()) {\n\t\t\tif (t.IsAbstract) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tm_HelperTypes.Add(t);\n\t\t}\n\t}\n\n\tif (m_HelperTypes.Count == 0) {\n\t\tEditorGUILayout.HelpBox(\"No helper types found.\", MessageType.Info);\n\t\treturn;\n\t}\n\n\tstring[] helperTypeNames = new string[m_HelperTypes.Count];\n\tfor (int i = 0; i < m_HelperTypes.Count; i++) {\n\t\thelperTypeNames[i] = m_HelperTypes[i].Name;\n\t}\n\n\tint selectedIndex = m_SelectedHelperTypeIndex;\n\tselectedIndex = EditorGUILayout.Popup(\"Helper Type\", selectedIndex, helperTypeNames);\n\tif (selectedIndex != m_SelectedHelperTypeIndex) {\n\t\tm_SelectedHelperTypeIndex = selectedIndex;\n\t\tm_Helper = null;\n\t\tm_HelperTypeName = null;\n\t\tm_HelperType = m_HelperTypes[selectedIndex];\n\t}\n\n\tif (m_HelperType == null) {\n\t\treturn;\n\t}\n\n\tif (m_Helper == null) {\n\t\tm_Helper = (AbstractHelper)ScriptableObject.CreateInstance(m_HelperType);\n\t\tm_HelperTypeName = m_HelperType.Name;\n\t}\n\n\tEditorGUILayout.Space();\n\tEditorGUILayout.LabelField(\"Helper Settings\");\n\tEditorGUI.indentLevel++;\n\tm_Helper.Draw();\n\tEditorGUI.indentLevel--;\n\tEditorGUILayout.Space();\n\n\tif (m_Helper.Error != null) {\n\t\tEditorGUILayout.HelpBox(m_Helper.Error, MessageType.Error);\n\t}\n\n\tif (m_Helper.Warning != null) {\n\t\tEditorGUILayout.HelpBox(m_Helper.Warning, MessageType.Warning);\n\t}\n\n\tif (m_Helper.Help != null) {\n\t\tEditorGUILayout.HelpBox(m_Helper.Help, MessageType.Info);\n\t}\n}", "CodeBleu_score": 31.943735046208023}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\n\t// Remove the general log define\n\tRemoveLogDefine();\n\t// Iterate through all logs and remove any that are enabled\n\tforeach (string log in logs) {\n\t\tRemoveLogDefine(log);\n\t}\n}", "CodeBleu_score": 19.69686211405845}, {"code": "public static void DisableAllLogs(){\n\t\n\tstring[] defines = PlayerSettings.GetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone).Split(';');\n\tList<string> newDefines = new List<string>();\n\tfor (int i = 0; i < defines.Length; i++) {\n\t\tif (defines[i].Equals(\"LOG_ALL\")) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (defines[i].StartsWith(\"LOG_\")) {\n\t\t\tcontinue;\n\t\t}\n\t\tnewDefines.Add(defines[i]);\n\t}\n\tPlayerSettings.SetScriptingDefineSymbolsForGroup(BuildTargetGroup.Standalone, string.Join(\";\", newDefines.ToArray()));\n}", "CodeBleu_score": 25.59406430401615}, {"code": "public static void DisableAllLogs(){\n\t\n\t#if ENABLE_LOGGING\n\t#if ENABLE_LOGGING_INFO\n\tDebug.Log(\"DisableAllLogs() called.\");\n\t#endif\n\t#if ENABLE_LOGGING_WARNING\n\tDebug.Log(\"DisableAllLogs() called.\");\n\t#endif\n\t#if ENABLE_LOGGING_ERROR\n\tDebug.Log(\"DisableAllLogs() called.\");\n\t#endif\n\t#if ENABLE_LOGGING_CRITICAL\n\tDebug.Log(\"DisableAllLogs() called.\");\n\t#endif\n\t#endif\n}", "CodeBleu_score": 21.82007346374496}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tif (type == null) {\n\t\tthrow new ArgumentNullException(\"type\");\n\t}\n\treturn GetComponent(type.Name);\n}", "CodeBleu_score": 13.246315024143525}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tif (type == null) {\n\t\tthrow new NullReferenceException(\"type is null\");\n\t}\n\tGameFrameworkComponent component = m_Instance.m_Components;\n\twhile (component != null) {\n\t\tif (component.GetType() == type) {\n\t\t\treturn component;\n\t\t}\n\t\tcomponent = component.m_NextComponent;\n\t}\n\treturn null;\n}", "CodeBleu_score": 45.79490476914535}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tif (m_componentList == null) {\n\t\treturn null;\n\t}\n\tfor (int i = 0; i < m_componentList.Count; i++) {\n\t\tGameFrameworkComponent component = m_componentList[i];\n\t\tif (component.GetType() == type) {\n\t\t\treturn component;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 34.04038818864109}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tDebug.Log(\"Restarting game scene...\");\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tDebug.Log(\"Quitting application...\");\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 18.436187322809143}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tDebug.Log(\"Restarting the game scene...\");\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tDebug.Log(\"Quitting the application...\");\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 18.512116549564496}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t\tif (shutdownType == ShutdownType.Restart) {\n\t\tDebug.Log(\"Restarting scene...\");\n\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n\t} else if (shutdownType == ShutdownType.Quit) {\n\t\tDebug.Log(\"Quitting application...\");\n\t\tApplication.Quit();\n\t}\n}", "CodeBleu_score": 18.28856476335057}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t\tbase.Awake();\n\n\tif (configManager == null) {\n\t\tDebug.LogError(\"ConfigManager is not set! Please set the config manager in the GameFrameworkEntry module.\");\n\t\treturn;\n\t}\n\n\tif (configManager.IsValidConfiguration() == false) {\n\t\tDebug.LogError(\"Invalid configuration! Please check your configuration file.\");\n\t\treturn;\n\t}\n\n\tif (readDataSuccessEvent == null) {\n\t\tDebug.LogError(\"ReadDataSuccessEvent is not set! Read data events will not be processed.\");\n\t}\n\n\tif (readDataFailureEvent == null) {\n\t\tDebug.LogError(\"ReadDataFailureEvent is not set! Read data events will not be processed.\");\n\t}\n\n\tif (updateEvent == null) {\n\t\tDebug.LogError(\"UpdateEvent is not set! Update events will not be processed.\");\n\t}\n\n\tif (dependencyAssetEvent == null) {\n\t\tDebug.LogError(\"DependencyAssetEvent is not set! Dependency asset events will not be processed.\");\n\t}\n}", "CodeBleu_score": 25.250439767008043}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tif (configManager == null) {\n\t\tDebug.LogError(\"No config manager found! Please ensure that the ConfigManager prefab is in the scene!\");\n\t\tenabled = false;\n\t\treturn;\n\t}\n\tif (configManager.Config == null) {\n\t\tDebug.LogError(\"No config found! Please ensure that the ConfigManager prefab is in the scene!\");\n\t\tenabled = false;\n\t\treturn;\n\t}\n\tif (configManager.Config.configData == null) {\n\t\tDebug.LogError(\"No config data found! Please ensure that the ConfigManager prefab is in the scene!\");\n\t\tenabled = false;\n\t\treturn;\n\t}\n\n\t// Subscribe to events\n\tconfigManager.OnConfigReadSuccess += HandleConfigReadSuccess;\n\tconfigManager.OnConfigReadFailure += HandleConfigReadFailure;\n\tif (configManager.Config.updateOnDependencyAssetLoad) {\n\t\tconfigManager.OnDependencyAssetLoaded += HandleDependencyAssetLoaded;\n\t}\n\tif (configManager.Config.updateOnDependencyAssetUnload) {\n\t\tconfigManager.OnDependencyAssetUnloaded += HandleDependencyAssetUnloaded;\n\t}\n}", "CodeBleu_score": 32.65389756525741}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tif (ConfigurationManager == null) {\n\t\tDebug.LogError(\"ConfigurationManager is null! Make sure to add a configuration manager to the scene.\");\n\t\treturn;\n\t}\n\tif (!ConfigurationManager.IsValid) {\n\t\tDebug.LogError(\"ConfigurationManager is not valid! Make sure to add a configuration manager to the scene.\");\n\t\treturn;\n\t}\n\tif (ReadDataSuccessEvent == null) {\n\t\tDebug.LogError(\"ReadDataSuccessEvent is null! Make sure to add a game event to the scene.\");\n\t\treturn;\n\t}\n\tif (ReadDataFailureEvent == null) {\n\t\tDebug.LogError(\"ReadDataFailureEvent is null! Make sure to add a game event to the scene.\");\n\t\treturn;\n\t}\n\tif (ReadDataSuccessEvent != null) {\n\t\tReadDataSuccessEvent.AddListener(ReadDataSuccess);\n\t}\n\tif (ReadDataFailureEvent != null) {\n\t\tReadDataFailureEvent.AddListener(ReadDataFailure);\n\t}\n\tif (UpdateDataEvent != null) {\n\t\tUpdateDataEvent.AddListener(UpdateData);\n\t}\n\tif (UpdateDependencyAssetEvent != null) {\n\t\tUpdateDependencyAssetEvent.AddListener(UpdateDependencyAsset);\n\t}\n\tif (ReadDataSuccessEvent != null) {\n\t\tReadDataSuccessEvent.AddListener(ReadDataSuccess);\n\t}\n\tif (ReadDataFailureEvent != null) {\n\t\tReadDataFailureEvent.AddListener(ReadDataFailure);\n\t}\n\tif (UpdateDataEvent != null) {\n\t\tUpdateDataEvent.AddListener(UpdateData);\n\t}\n\tif (UpdateDependencyAssetEvent != null) {\n\t\tUpdateDependencyAssetEvent.AddListener(UpdateDependencyAsset);\n\t}\n}", "CodeBleu_score": 29.74085789664737}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tDebug.LogWarning(string.Format(\"Config asset {0} is null!\", configAssetName));\n\t\treturn false;\n\t}\n\n\tTextAsset textAsset = configAsset as TextAsset;\n\tif (textAsset == null) {\n\t\tDebug.LogWarning(string.Format(\"Config asset {0} is not a TextAsset!\", configAssetName));\n\t\treturn false;\n\t}\n\n\tstring assetPath = AssetDatabase.GetAssetPath(textAsset);\n\tstring extension = Path.GetExtension(assetPath);\n\tif (extension == \".bytes\") {\n\t\treturn ReadDataBytes(configManager, configAssetName, textAsset.bytes, userData);\n\t}\n\telse {\n\t\treturn ReadDataText(configManager, configAssetName, textAsset.text, userData);\n\t}\n}", "CodeBleu_score": 57.53286260175483}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tDebug.LogWarning(\"Invalid config asset: \" + configAssetName);\n\t\treturn false;\n\t}\n\n\tstring assetPath = AssetDatabase.GetAssetPath(configAsset);\n\tif (assetPath.EndsWith(\".bytes\")) {\n\t\treturn ReadDataBytes(configManager, configAssetName, configAsset, userData);\n\t} else {\n\t\treturn ReadDataText(configManager, configAssetName, configAsset, userData);\n\t}\n}", "CodeBleu_score": 52.32569604629476}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tDebug.LogWarning(\"Config asset is null!\");\n\t\treturn false;\n\t}\n\n\tif (!(configAsset is TextAsset)) {\n\t\tDebug.LogWarning(\"Config asset is not a TextAsset!\");\n\t\treturn false;\n\t}\n\n\tTextAsset textAsset = (TextAsset)configAsset;\n\tstring extension = Path.GetExtension(textAsset.name);\n\n\tif (extension == \".bytes\") {\n\t\treturn ReadBytes(configManager, configAssetName, textAsset, userData);\n\t} else {\n\t\treturn ReadText(configManager, configAssetName, textAsset, userData);\n\t}\n}", "CodeBleu_score": 54.676072955392655}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream ms = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader reader = new BinaryReader(ms)) {\n\t\t\t\twhile (ms.Position < ms.Length) {\n\t\t\t\t\tstring configName = reader.ReadString();\n\t\t\t\t\tstring configValue = reader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tlogger.LogWarning(\"Failed to add config: \" + configName);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception e) {\n\t\tlogger.LogException(e, \"Failed to parse config data\");\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 49.29456541201517}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\twhile (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n\t\t\t\t\tstring configName = binaryReader.ReadString();\n\t\t\t\t\tstring configValue = binaryReader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(configName, configValue)) {\n\t\t\t\t\t\tDebug.LogWarning(\"Failed to add config \" + configName + \" with value \" + configValue + \" to config manager \" + configManager.name + \".\");\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tDebug.LogError(\"Exception occurred while parsing config data from \" + this.name + \". Exception: \" + ex.ToString());\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 62.36657072194327}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t\ttry {\n\t\tusing (MemoryStream memoryStream = new MemoryStream(configBytes)) {\n\t\t\tusing (BinaryReader binaryReader = new BinaryReader(memoryStream)) {\n\t\t\t\tint num = startIndex;\n\t\t\t\twhile (num < startIndex + length) {\n\t\t\t\t\tint num2 = binaryReader.ReadByte();\n\t\t\t\t\tif (num2 == 0) {\n\t\t\t\t\t\tnum += 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstring name = binaryReader.ReadString();\n\t\t\t\t\t\tstring value = binaryReader.ReadString();\n\t\t\t\t\t\tif (!configManager.AddConfig(name, value)) {\n\t\t\t\t\t\t\tDebug.LogWarning(\"Config entry with name \" + name + \" already exists in config manager. Ignoring...\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnum += 1 + name.Length + value.Length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\tDebug.LogException(ex);\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 51.42689471253669}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configAsset == null) {\n\t\treturn;\n\t}\n\t\n\tResourceComponent resourceComponent = configManager.GetComponent<ResourceComponent>();\n\tresourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 39.78306970498408}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configManager == null) {\n\t\treturn;\n\t}\n\tif (configAsset == null) {\n\t\treturn;\n\t}\n\tif (configManager.ResourceComponent == null) {\n\t\treturn;\n\t}\n\tconfigManager.ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 47.77414268722672}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t\tif (configAsset == null) {\n\t\treturn;\n\t}\n\tif (configManager == null) {\n\t\treturn;\n\t}\n\tif (configManager.ResourceComponent == null) {\n\t\treturn;\n\t}\n\tconfigManager.ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 47.77414268722672}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\tActiveSceneChangedEventArgs activeSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\n\tactiveSceneChangedEventArgs.lastActiveScene = lastActiveScene;\n\tactiveSceneChangedEventArgs.activeScene = activeScene;\n\treturn activeSceneChangedEventArgs;\n}", "CodeBleu_score": 54.52068186079746}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\tActiveSceneChangedEventArgs activeSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\n\tactiveSceneChangedEventArgs.lastActiveScene = lastActiveScene;\n\tactiveSceneChangedEventArgs.activeScene = activeScene;\n\treturn activeSceneChangedEventArgs;\n}", "CodeBleu_score": 54.52068186079746}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t\tActiveSceneChangedEventArgs activeSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\n\tactiveSceneChangedEventArgs.lastActiveScene = lastActiveScene;\n\tactiveSceneChangedEventArgs.activeScene = activeScene;\n\treturn activeSceneChangedEventArgs;\n}", "CodeBleu_score": 54.52068186079746}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (sceneAssetName == null) {\n\t\tDebug.LogError(\"Scene asset name is null.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tDebug.LogError(\"Scene asset name does not start with \\\"Assets/\\\".\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"Scene asset name does not end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\tSceneManager.LoadScene(sceneAssetName, LoadSceneMode.Single, priority, userData);\n}", "CodeBleu_score": 50.24420699494519}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (sceneAssetName == null) {\n\t\tDebug.LogError(\"SceneManager.LoadScene: sceneAssetName is null\");\n\t\treturn;\n\t}\n\n\tif (sceneAssetName.Length == 0) {\n\t\tDebug.LogError(\"SceneManager.LoadScene: sceneAssetName is empty\");\n\t\treturn;\n\t}\n\n\tif (sceneAssetName.IndexOf(\"Assets/\") != 0) {\n\t\tDebug.LogError(\"SceneManager.LoadScene: sceneAssetName does not start with Assets/\");\n\t\treturn;\n\t}\n\n\tif (sceneAssetName.Substring(sceneAssetName.Length - 6, 6) != \".unity\") {\n\t\tDebug.LogError(\"SceneManager.LoadScene: sceneAssetName does not end with .unity\");\n\t\treturn;\n\t}\n\n\tSceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 50.291219978944426}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\tif (!SceneManager.GetSceneByName(sceneAssetName).IsValid()) {\n\t\tDebug.LogError(\"SceneManager: LoadScene failed. Scene asset name \\\"\" + sceneAssetName + \"\\\" is not valid.\");\n\t\treturn;\n\t}\n\tif (!sceneAssetName.StartsWith(\"Assets/\") || !sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"SceneManager: LoadScene failed. Scene asset name \\\"\" + sceneAssetName + \"\\\" is invalid. It must start with \\\"Assets/\\\" and end with \\\".unity\\\".\");\n\t\treturn;\n\t}\n\tSceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 51.49293838182061}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register our feature\n\tIBinaryPatchFeatureModule& BinariesPatchFeatureModule = FModuleManager::LoadModuleChecked<IBinaryPatchFeatureModule>(TEXT(\"BinariesPatchFeature\"));\n\tBinariesPatchFeatureModule.RegisterFeature(TEXT(\"BinariesPatchFeature\"), EFeature::BinariesPatch);\n\n\t// Register all registered feature implementations\n\tfor (const FFeatureImplementationEntry& Entry : BinariesPatchFeatureModule.GetRegisteredFeatureImplementations()) {\n\t\tif (Entry.Info.bEnabledByDefault) {\n\t\t\tFBinariesPatchFeature::RegisterBinariesPatchFeature(Entry.Info.Name);\n\t\t}\n\t}\n\n\t// Register callbacks for when a feature is registered or unregistered\n\tFCoreDelegates::OnModularFeatureRegistered.AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tFCoreDelegates::OnModularFeatureUnregistered.AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 42.99869556864557}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register our delegate for when a feature module is registered\n\tFCoreDelegates::OnModularFeatureRegistered.AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\t// Register our delegate for when a feature module is unregistered\n\tFCoreDelegates::OnModularFeatureUnregistered.AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\t// Iterate over all feature modules\n\tfor (const FModuleInfo& ModuleInfo : FModuleManager::Get().GetModules()) {\n\t\t// Retrieve the module's descriptor\n\t\tFModuleDescriptor ModuleDescriptor = FModuleManager::Get().GetModuleDescriptor(ModuleInfo.GetDescriptorFileName());\n\t\t// Check if the module implements the binaries patch feature\n\t\tif (ModuleDescriptor.ImplementsFeature(EBinariesPatchFeature::FeatureName)) {\n\t\t\t// Add the module's name to the binaries patch feature enumerations\n\t\t\tFBinariesPatchFeatureModule::BinariesPatchFeatureNames.Add(ModuleInfo.GetDescriptor().Name);\n\t\t}\n\t}\n}", "CodeBleu_score": 43.43345898318838}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Get the feature name strings\n\tTArray<FString> FeatureNames;\n\tfor (const FBinariesPatchFeatureEntry& FeatureEntry : BinariesPatchFeatureEntries) {\n\t\tFeatureNames.Add(FeatureEntry.FeatureName);\n\t}\n\t// Get the feature implementations\n\tTArray<IBinariesPatchFeature*> FeatureImplementations = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(FeatureNames);\n\t// Append the feature names to the feature enumerations\n\tfor (IBinariesPatchFeature* FeatureImplementation : FeatureImplementations) {\n\t\tBinariesPatchFeatureNames.Add(FeatureImplementation->GetFeatureName());\n\t}\n\t// Set up callbacks for when modular features are registered or unregistered\n\tIModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tIModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 52.24191989241395}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString TokenAndValue = Commandline.Replace(TEXT(\" \"),TEXT(\"\"));\n\tif (TokenAndValue.Contains(Token)) {\n\t\tFString TokenValue = TokenAndValue.RightChop(Token.Len()+1);\n\t\tTArray<FString> TokenValueArray;\n\t\tTokenValue.ParseIntoArray(TokenValueArray,TEXT(\",\"),false);\n\t\tfor (FString TokenValue : TokenValueArray) {\n\t\t\tResult.Add(TokenValue);\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 51.782894661174495}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> TokenValues;\n\tFString TokenString = FString::Printf(TEXT(\"%s=\"), *Token);\n\tif (Commandline.Contains(TokenString)) {\n\t\tFString TokenValue = Commandline.RightChop(Commandline.Len() - Commandline.Find(TokenString)).LeftChop(1);\n\t\tTokenValues = TokenValue.ParseIntoArray(TEXT(\",\"), true);\n\t}\n\treturn TokenValues;\n}", "CodeBleu_score": 51.31961127939499}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Values;\n\tFString TokenAndValue = FString::Printf(TEXT(\"%s=\"), *Token);\n\tif (Commandline.Contains(TokenAndValue)) {\n\t\tFString Value = Commandline.RightChop(TokenAndValue.Len());\n\t\tif (Value.Len() > 0) {\n\t\t\tValues = Value.ParseIntoArray(TEXT(\",\"), false);\n\t\t}\n\t}\n\treturn Values;\n}", "CodeBleu_score": 51.98894480519267}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CommandletName = FCommandLine::Get()->GetCommandletName();\n\tif (!CommandletName.IsEmpty()) {\n\t\treturn CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 25.02855749585343}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\tFString CmdletName;\n\tif (FParse::Value(FCommandLine::Get(), TEXT(\"COMMANDLET=\"), CmdletName) && !CmdletName.IsEmpty()) {\n\t\treturn CmdletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.15062179476191}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t\t// Get the name of the current commandlet\n\tFString CurrentCommandletName = FApp::GetCommandletName();\n\n\t// If the name is empty, return false\n\tif (CurrentCommandletName.IsEmpty()) {\n\t\treturn false;\n\t}\n\n\t// Convert the name to lowercase\n\tCurrentCommandletName = CurrentCommandletName.ToLower();\n\n\t// If the name matches \"cook\" (case-insensitive), return true\n\treturn CurrentCommandletName.Equals(\"cook\");\n}", "CodeBleu_score": 22.193561378545706}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.68564258733266}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 36.68564258733266}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\tif (PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) || PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase)) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 38.37068120887574}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\t// Get the outermost package of the object.\n\tUPackage* Package = Object->GetOutermost();\n\tif (!Package) {\n\t\treturn;\n\t}\n\n\t// Check if the package is in CookerAssetsSet.\n\tif (CookerAssetsSet.Contains(Package)) {\n\t\t// If the package is in CookerAssetsSet, check if it is valid.\n\t\tif (Package->IsValidLowLevel()) {\n\t\t\t// If the package is valid, check if it is in AllAssetsSet.\n\t\t\tif (AllAssetsSet.Contains(Package)) {\n\t\t\t\t// If the package is in AllAssetsSet, check if it requires post-load processing.\n\t\t\t\tif (!IsAlwayPostLoadClasses(Package, (UObject*)Object)) {\n\t\t\t\t\t// If the package does not require post-load processing, add the object to the PackageObjectsMap and FreezeObjects list.\n\t\t\t\t\tPackageObjectsMap.FindOrAdd(Package).Add((UObject*)Object);\n\t\t\t\t\tFreezeObjects.Add((UObject*)Object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object.\n\t((UObject*)Object)->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n}", "CodeBleu_score": 38.605628787090936}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFScopeLock ScopeLock(&Context.BulkDataLock);\n\n\tfor (const FRecord::FChunk& Chunk : Record.Chunks)\n\t{\n\t\tif (Chunk.Type == EChunkType::Export)\n\t\t{\n\t\t\tconst FExportRecord& ExportRecord = static_cast<const FExportRecord&>(Chunk);\n\t\t\tfor (const FExportRecord::FExport& Export : ExportRecord.Exports)\n\t\t\t{\n\t\t\t\tif (Export.BulkDataFlags.Contains(EBulkDataFlags::AppendToExports))\n\t\t\t\t{\n\t\t\t\t\tContext.AppendToExportBufferList.Add(Export.BulkData);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tContext.OutputFiles.Emplace(Export.BulkData, FOutputFileEntry(Export.BulkData, Export.BulkDataFlags, Record.Regions));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::Import)\n\t\t{\n\t\t\tconst FImportRecord& ImportRecord = static_cast<const FImportRecord&>(Chunk);\n\t\t\tfor (const FImportRecord::FImport& Import : ImportRecord.Imports)\n\t\t\t{\n\t\t\t\tif (Import.BulkDataFlags.Contains(EBulkDataFlags::AppendToImports))\n\t\t\t\t{\n\t\t\t\t\tContext.AppendToImportBufferList.Add(Import.BulkData);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tContext.OutputFiles.Emplace(Import.BulkData, FOutputFileEntry(Import.BulkData, Import.BulkDataFlags, Record.Regions));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (Chunk.Type == EChunkType::Name)\n\t\t{\n\t\t\tconst FNameRecord& NameRecord = static_cast<const FNameRecord&>(Chunk);\n\t\t\tfor (const FNameRecord::FName& Name : NameRecord.Names)\n\t\t\t{\n\t\t\t\tif (Name.BulkDataFlags.Contains(EBulkDataFlags::AppendToNames))\n\t\t\t\t{\n\t\t\t\t\tContext.AppendToNameBufferList.Add(Name.BulkData);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tContext.OutputFiles.Emplace(Name.BulkData, FOutputFileEntry(Name.BulkData, Name.BulkDataFlags, Record.Regions));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.16076176051566}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t", "CodeBleu_score": 3.322889697418792}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t", "CodeBleu_score": 3.322889697418792}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t", "CodeBleu_score": 4.951469825088823}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Context.bIsForDiff) {\n\t\tif (Context.ExportBuffers.Num() > 0 && Context.ExportBuffers.Last().IsExportArchive()) {\n\t\t\treturn;\n\t\t}\n\t}\n\tFExportArchiveFooter ExportArchiveFooter;\n\tExportArchiveFooter.PackageFileTag = Record.GetPackageFileTag();\n\tTArray<FExportBundleData> ExportBundleDatas;\n\tfor (const auto& ExportBundle : Context.ExportBuffers) {\n\t\tif (ExportBundle.IsExportArchive()) {\n\t\t\tcontinue;\n\t\t}\n\t\tExportBundleDatas.Add(ExportBundle);\n\t}\n\tContext.ExportBuffers.Add(ExportArchiveFooter);\n\tContext.ExportBuffers.Append(ExportBundleDatas);\n}", "CodeBleu_score": 42.71234736849358}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement) {\n\t\tbIsSprinting = CharacterMovement->bIsSprinting;\n\t\tbIsADS = CharacterMovement->bIsADS;\n\t}\n}", "CodeBleu_score": 84.30039236917818}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent * CharMove = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharMove) {\n\t\tSavedSprinting = CharMove->bSprinting;\n\t\tSavedADS = CharMove->bADS;\n\t}\n}", "CodeBleu_score": 72.71563092404266}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tauto * CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement) {\n\t\tSavedSprinting = CharacterMovement->IsSprinting();\n\t\tSavedADS = CharacterMovement->IsADS();\n\t}\n}", "CodeBleu_score": 72.0542654153189}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\tABILITY_LOG(Warning, TEXT(\"ListenForAttributeChange called with null AbilitySystemComponent\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!AbilitySystemComponent->HasAttribute(Attribute)) {\n\t\tABILITY_LOG(Warning, TEXT(\"ListenForAttributeChange called with invalid Attribute\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* AttributeChanged = NewObject<UAsyncTaskAttributeChanged>();\n\tAttributeChanged->Attribute = Attribute;\n\tAttributeChanged->AbilitySystemComponent = AbilitySystemComponent;\n\tAttributeChanged->OnAttributeChangedDelegate.AddUObject(AttributeChanged, &UAsyncTaskAttributeChanged::OnAttributeChanged);\n\tAttributeChanged->OnAttributeChangedDelegate.AddDynamic(AbilitySystemComponent, &UAbilitySystemComponent::OnAttributeValueChanged);\n\tAttributeChanged->OnAttributeChangedDelegate.AddDynamic(AbilitySystemComponent, &UAbilitySystemComponent::OnAnyAttributeValueChanged);\n\tAttributeChanged->OnAttributeChangedDelegate.RemoveDynamic(AbilitySystemComponent, &UAbilitySystemComponent::OnAnyAttributeValueChanged);\n\tAttributeChanged->OnAttributeChangedDelegate.RemoveDynamic(AbilitySystemComponent, &UAbilitySystemComponent::OnAttributeValueChanged);\n\tAttributeChanged->OnAttributeChangedDelegate.Broadcast(Attribute, AbilitySystemComponent->GetNumericAttribute(Attribute));\n\treturn AttributeChanged;\n}", "CodeBleu_score": 45.74306884542138}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t", "CodeBleu_score": 4.4749338010496045}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: Invalid AbilitySystemComponent\"));\n\t\treturn nullptr;\n\t}\n\n\tif (!Attribute.IsValid()) {\n\t\tABILITY_LOG(Warning, TEXT(\"UAsyncTaskAttributeChanged::ListenForAttributeChange: Invalid Attribute\"));\n\t\treturn nullptr;\n\t}\n\n\tFAsyncTaskAttributeChanged* Task = new FAsyncTaskAttributeChanged(AbilitySystemComponent, Attribute);\n\tTask->StartBackgroundTask();\n\treturn Task;\n}", "CodeBleu_score": 42.149548760837256}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tASC->OnGameplayEffectAddedDelegateHandle.RemoveDynamic(this);\n\t\tASC->OnGameplayEffectRemovedDelegateHandle.RemoveDynamic(this);\n\t\tASC->OnActiveGameplayEffectAddedDelegateHandle.RemoveDynamic(this);\n\t\tASC->OnActiveGameplayEffectRemovedDelegateHandle.RemoveDynamic(this);\n\t\tASC->OnGameplayEffectCooldownChangeDelegateHandle.RemoveDynamic(this);\n\t}\n\n\tMarkAsReady();\n\tMarkAsGarbage();\n}", "CodeBleu_score": 31.312602362099817}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\tif (Handle_GameplayEffectAdded) {\n\t\t\tASC->OnGameplayEffectAddedDelegate.RemoveDynamic(Handle_GameplayEffectAdded);\n\t\t}\n\t\tif (Handle_GameplayEffectRemoved) {\n\t\t\tASC->OnGameplayEffectRemovedDelegate.RemoveDynamic(Handle_GameplayEffectRemoved);\n\t\t}\n\t\tif (Handle_GameplayEffectCooldownChanged) {\n\t\t\tASC->OnGameplayEffectCooldownChangeDelegate.RemoveDynamic(Handle_GameplayEffectCooldownChanged);\n\t\t}\n\t}\n\tMarkAsReady(true);\n\tMarkAsGarbage();\n}", "CodeBleu_score": 41.69006633635986}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (ASC) {\n\t\t// Remove delegates\n\t\tASC.OnGameplayEffectAddedDelegate.RemoveDynamic(OnGameplayEffectAdded);\n\t\tASC.OnGameplayEffectRemovedDelegate.RemoveDynamic(OnGameplayEffectRemoved);\n\t\tASC.OnGameplayEffectCooldownChangeDelegate.RemoveDynamic(OnGameplayEffectCooldownChange);\n\t\tASC.OnGameplayEffectDurationChangeDelegate.RemoveDynamic(OnGameplayEffectDurationChange);\n\n\t\t// Mark task as ready to be destroyed\n\t\tIsReadyForCompletion = true;\n\t}\n}", "CodeBleu_score": 24.779946623841223}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tUAbilitySystemComponent* ASC = Cast<UAbilitySystemComponent>(EffectRemoved.GetSourceObject());\n\tif (ASC) {\n\t\tFGameplayTagContainer AssetTags;\n\t\tFGameplayTagContainer GrantedTags;\n\t\tEffectRemoved.GetModifier().GetAssetTags(AssetTags);\n\t\tEffectRemoved.GetModifier().GetGrantedTags(GrantedTags);\n\t\tfor (const FGameplayTag& Tag : AssetTags) {\n\t\t\tif (Tag == EffectGameplayTag) {\n\t\t\t\tFGameplayEffectContextHandle EffectContext(EffectRemoved.GetEffectContext());\n\t\t\t\tFGameplayEffectSpecHandle SpecHandle = EffectRemoved.GetHandle();\n\t\t\t\tFGameplayTagContainer StackChange;\n\t\t\t\tASC->GetGameplayEffectStackChange(SpecHandle, StackChange);\n\t\t\t\tFAsyncTaskGameplayEffectStackChangedData* Data = new FAsyncTaskGameplayEffectStackChangedData();\n\t\t\t\tData->Handle = SpecHandle;\n\t\t\t\tData->StackChange = StackChange;\n\t\t\t\tData->StackCount = ASC->GetGameplayEffectStackCount(SpecHandle);\n\t\t\t\tData->EffectContext = EffectContext;\n\t\t\t\tAsyncTask(ENamedThreads::GameThread, BroadcastEffectStackChange, Data);\n\t\t\t}\n\t\t}\n\t\tfor (const FGameplayTag& Tag : GrantedTags) {\n\t\t\tif (Tag == EffectGameplayTag) {\n\t\t\t\tFGameplayEffectContextHandle EffectContext(EffectRemoved.GetEffectContext());\n\t\t\t\tFGameplayEffectSpecHandle SpecHandle = EffectRemoved.GetHandle();\n\t\t\t\tFGameplayTagContainer StackChange;\n\t\t\t\tASC->GetGameplayEffectStackChange(SpecHandle, StackChange);\n\t\t\t\tFAsyncTaskGameplayEffectStackChangedData* Data = new FAsyncTaskGameplayEffectStackChangedData();\n\t\t\t\tData->Handle = SpecHandle;\n\t\t\t\tData->StackChange = StackChange;\n\t\t\t\tData->StackCount = ASC->GetGameplayEffectStackCount(SpecHandle);\n\t\t\t\tData->EffectContext = EffectContext;\n\t\t\t\tAsyncTask(ENamedThreads::GameThread, BroadcastEffectStackChange, Data);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.38173497480907}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.SourceObject == nullptr) {\n\t\treturn;\n\t}\n\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.SourceObject->GetOwnedGameplayTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.Def->GetGrantedTags(EffectRemoved.Spec.GetLevel(), GrantedTags);\n\n\tif (AssetTags.HasAny(EffectGameplayTag) || GrantedTags.HasAny(EffectGameplayTag)) {\n\t\tFGameplayEffectContextHandle EffectContext = EffectRemoved.GetEffectContext();\n\t\tFGameplayEffectSpecHandle SpecHandle = MakeShareable(new FGameplayEffectSpec(EffectRemoved.Spec));\n\t\tFActiveGameplayEffectHandle EffectHandle = MakeShareable(new FActiveGameplayEffect(EffectRemoved));\n\t\tEffectStackChangeDetails.Broadcast(EffectGameplayTag, EffectContext, SpecHandle, EffectHandle, EGameplayEffectStackChange::Removed);\n\t}\n}", "CodeBleu_score": 55.33326189467927}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.EffectHandle.IsValid() && EffectRemoved.EffectHandle.Get() == EffectHandle) {\n\t\tEffectHandle = FGameplayEffectHandle();\n\t\tif (EffectRemoved.EffectSpec.Def != nullptr) {\n\t\t\tFGameplayTagContainer AssetTags;\n\t\t\tEffectRemoved.EffectSpec.Def->GetAllAssetTags(AssetTags);\n\t\t\tFGameplayTagContainer GrantedTags;\n\t\t\tEffectRemoved.EffectSpec.Def->GetAllGrantedTags(GrantedTags);\n\t\t\tfor (const FGameplayTag & AssetTag : AssetTags) {\n\t\t\t\tif (AssetTag.MatchesTagExact(EffectGameplayTag)) {\n\t\t\t\t\tFGameplayTagContainer ChangedTags;\n\t\t\t\t\tChangedTags.AddTag(AssetTag);\n\t\t\t\t\tChangedTags.AddTag(EffectGameplayTag);\n\t\t\t\t\tOnEffectStackChange.Broadcast(ChangedTags, EffectHandle, EGameplayEffectStackChange::Removed);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const FGameplayTag & GrantedTag : GrantedTags) {\n\t\t\t\tif (GrantedTag.MatchesTagExact(EffectGameplayTag)) {\n\t\t\t\t\tFGameplayTagContainer ChangedTags;\n\t\t\t\t\tChangedTags.AddTag(GrantedTag);\n\t\t\t\t\tChangedTags.AddTag(EffectGameplayTag);\n\t\t\t\t\tOnEffectStackChange.Broadcast(ChangedTags, EffectHandle, EGameplayEffectStackChange::Removed);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.816607172544}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t", "CodeBleu_score": 4.368904444289419}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->EffectGameplayTag = InEffectGameplayTag;\n\tif (Task->IsValid()) {\n\t\tTask->OnGameplayEffectAddedDelegateHandle = Task->AbilitySystemComponent->OnGameplayEffectAddedDelegate.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\t\tTask->OnGameplayEffectRemovedDelegateHandle = Task->AbilitySystemComponent->OnGameplayEffectRemovedDelegate.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\t\tTask->OnGameplayEffectAppliedDelegateHandle = Task->AbilitySystemComponent->OnGameplayEffectAppliedDelegate.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectApplied);\n\t\tTask->OnGameplayEffectRemovedDelegateHandle = Task->AbilitySystemComponent->OnGameplayEffectRemovedDelegate.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\t\tTask->OnGameplayEffectStackChangeDelegateHandle = Task->AbilitySystemComponent->OnGameplayEffectStackChangeDelegate.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectStackChange);\n\t\tTask->OnGameplayEffectDurationChangeDelegateHandle = Task->AbilitySystemComponent->OnGameplayEffectDurationChangeDelegate.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectDurationChange);\n\t\tTask->OnGameplayEffectPeriodChangeDelegateHandle = Task->AbilitySystemComponent->OnGameplayEffectPeriodChangeDelegate.AddUObject(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectPeriodChange);\n\t}\n\telse {\n\t\tTask->EndTask();\n\t}\n\treturn Task;\n}", "CodeBleu_score": 49.54539513598738}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t", "CodeBleu_score": 4.368904444289419}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t", "CodeBleu_score": 4.261154266190155}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAssetTags(AssetTags);\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\tfor (auto TagIt = AssetTags.CreateConstIterator(); TagIt; ++TagIt) {\n\t\tif (TagIt->MatchesTag(EffectGameplayTag)) {\n\t\t\tAsyncTask(ENamedThreads::GameThread, [=]() {\n\t\t\t\tOnEffectStackChanged.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -EffectRemoved.GetStackCount());\n\t\t\t});\n\t\t}\n\t}\n\tfor (auto TagIt = GrantedTags.CreateConstIterator(); TagIt; ++TagIt) {\n\t\tif (TagIt->MatchesTag(EffectGameplayTag)) {\n\t\t\tAsyncTask(ENamedThreads::GameThread, [=]() {\n\t\t\t\tOnEffectStackChanged.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -EffectRemoved.GetStackCount());\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 56.232553168020125}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t\tif (EffectRemoved.GetEffectTemplate().HasTagRequirements()) {\n\t\tFGameplayTagContainer AssetTags;\n\t\tFGameplayTagContainer GrantedTags;\n\t\tEffectRemoved.GetEffectTemplate().GetAllAssetTags(AssetTags);\n\t\tEffectRemoved.GetEffectTemplate().GetAllGrantedTags(GrantedTags);\n\t\tfor (FGameplayTagContainer::TConstIterator It = AssetTags.CreateConstIterator(); It; ++It) {\n\t\t\tif (It->MatchesTag(EffectGameplayTag)) {\n\t\t\t\tBroadcastStackChange(EffectRemoved.Handle, EStackChangeType::Removed, *It, EffectRemoved.GetStackCount());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfor (FGameplayTagContainer::TConstIterator It = GrantedTags.CreateConstIterator(); It; ++It) {\n\t\t\tif (It->MatchesTag(EffectGameplayTag)) {\n\t\t\t\tBroadcastStackChange(EffectRemoved.Handle, EStackChangeType::Removed, *It, EffectRemoved.GetStackCount());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 50.19361055744509}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent->IsOwnerActorAuthoritative()) {\n\t\tif (bActivateAbilityOnGranted) {\n\t\t\tAbilitySystemComponent->TryActivateAbility(SpecHandle);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.33665886550779}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent->IsOwnerActorAuthoritative()) {\n\t\tif (bActivateAbilityOnGranted) {\n\t\t\tAbilitySystemComponent->ActivateAbility(Spec.Handle);\n\t\t}\n\t}\n}", "CodeBleu_score": 59.43597702950411}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (AbilitySystemComponent.IsValid() && AbilitySystemComponent->IsOwnerActorAuthoritative() && !bIsActive) {\n\t\tif (AbilitySystemComponent->ShouldActivateAbility(this)) {\n\t\t\tconst FGameplayAbilityActorInfo* ActorInfo = AbilitySystemComponent->GetActorInfo();\n\t\t\tif (ActorInfo) {\n\t\t\t\tAbilitySystemComponent->ActivateAbility(this);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.632248733497015}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tSuper::OnMontageEnded(Montage, bInterrupted);\n\n\tif (!bInterrupted && ShouldBroadcastDelegates()) {\n\t\tFGameplayTag EventTag = FGameplayTag::RequestGameplayTag(FName(\"Ability.Event.OnCompleted\"));\n\t\tFGameplayEventData Payload;\n\t\tAbilitySystemComponent->BroadcastGameplayEvent(EventTag, Payload);\n\t}\n\n\tif (AbilityTask) {\n\t\tAbilityTask->EndTask();\n\t}\n}", "CodeBleu_score": 48.54463242438272}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tSuper::OnMontageEnded(Montage, bInterrupted);\n\n\tif (!bInterrupted) {\n\t\tOnCompleted.Broadcast(FGameplayTag::RequestGameplayTag(FName(\"Ability.Montage\")), FGameplayEventData());\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 57.06897643727486}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (bInterrupted == false) {\n\t\tOnCompleted.Broadcast();\n\t}\n\tSuper::OnMontageEnded(Montage, bInterrupted);\n}", "CodeBleu_score": 42.796946184362284}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && bStopPlayingMontage) {\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->OnGameplayEventExecuted_Remove(EventTagContainerDelegateHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 55.069819236616546}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tSuper::OnDestroy(AbilityEnded);\n\n\t// Remove the delegate for the event tag container\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->AbilityTagChangedDelegate.RemoveDynamic(OnAbilityTagChanged);\n\t}\n\n\t// Stop the montage if the ability ended and the flag is set\n\tif (AbilityEnded && bStopPlayingMontage)\n\t{\n\t\tStopPlayingMontage();\n\t}\n}", "CodeBleu_score": 55.10136171010508}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tif (AbilityEnded && bStopOnAbilityEnd)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->OnActiveGameplayEffectAddedDelegate(GameplayEffectAddedDelegateHandle);\n\t\tAbilitySystemComponent->OnGameplayEffectRemovedDelegate(GameplayEffectRemovedDelegateHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 56.93182205037666}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent && AbilitySystemComponent->GetCurrentMontage()) {\n\t\tAbilitySystemComponent->GetCurrentMontage()->OnMontageInterrupted.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageInterrupted);\n\t\tAbilitySystemComponent->GetCurrentMontage()->OnMontageEnded.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded);\n\t\tAbilitySystemComponent->StopActiveMontage(EAbilityGenericNotification::GenericFail);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 24.56808472482009}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\t// Retrieve the actor info and animation instance\n\tFActorInfo* ActorInfo = GetActorInfo();\n\tUGDAT_AnimationInstance* AnimationInstance = Cast<UGDAT_AnimationInstance>(ActorInfo->GetAnimationInstance());\n\n\t// If the ability system component is valid and the montage is playing, stop the montage\n\tif (ActorInfo->AbilitySystemComponent.IsValid() && AnimationInstance && AnimationInstance->MontageInstance && AnimationInstance->MontageInstance->IsPlaying()) {\n\t\t// Unbind the delegates for the montage instance\n\t\tAnimationInstance->MontageInstance->OnMontageEnded.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded);\n\t\tAnimationInstance->MontageInstance->OnMontageBlendingOut.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageBlendingOut);\n\t\tAnimationInstance->MontageInstance->OnMontageInterrupted.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageInterrupted);\n\n\t\t// Stop the current montage using the ability system component\n\t\tActorInfo->AbilitySystemComponent->StopMontage(AnimationInstance->MontageInstance);\n\n\t\t// Return that the montage was successfully stopped\n\t\treturn true;\n\t}\n\n\t// Return that the montage was not successfully stopped\n\treturn false;\n}", "CodeBleu_score": 34.830622547699164}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent) {\n\t\tif (AbilitySystemComponent->GetCurrentMontage() == PlayingMontage) {\n\t\t\tFGameplayAbilityActivationInfo ActivationInfo;\n\t\t\tFGameplayAbilitySpecHandle Handle = FGameplayAbilitySpecHandle();\n\t\t\tPlayingMontage->GetActivationInfo(Handle, ActivationInfo);\n\t\t\tAbilitySystemComponent->CurrentMontageStopDelegate.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageStop);\n\t\t\tAbilitySystemComponent->CurrentMontageBlendingOutDelegate.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageBlendingOut);\n\t\t\tAbilitySystemComponent->StopMontage(PlayingMontage);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 41.20258477894356}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the target actor from the blackboard\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(BlackboardKey.SelectedTarget));\n\tif (!TargetActor) {\n\t\treturn;\n\t}\n\n\t// Get the AI pawn from the blackboard\n\tAPawn* AI = Cast<APawn>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(BlackboardKey.SelectedActor));\n\tif (!AI) {\n\t\treturn;\n\t}\n\n\t// Get the distance to the target\n\tFVector AIToTarget = TargetActor->GetActorLocation() - AI->GetActorLocation();\n\tfloat DistanceToTarget = AIToTarget.Size();\n\n\t// Check if the target is within the maximum attack range\n\tif (DistanceToTarget > BlackboardKey.MaxAttackRange) {\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(BlackboardKey.CanAttack, false);\n\t\treturn;\n\t}\n\n\t// Check if there is line of sight to the target\n\tFHitResult Hit;\n\tFCollisionQueryParams CollisionQueryParams;\n\tCollisionQueryParams.AddIgnoredActor(AI);\n\tCollisionQueryParams.AddIgnoredActor(TargetActor);\n\tif (GetWorld()->LineTraceSingleByChannel(Hit, AI->GetActorLocation(), TargetActor->GetActorLocation(), ECC_Visibility, CollisionQueryParams)) {\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(BlackboardKey.CanAttack, false);\n\t\treturn;\n\t}\n\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(BlackboardKey.CanAttack, true);\n}", "CodeBleu_score": 49.19061361859814}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tauto pawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (pawn) {\n\t\tauto blackboard = OwnerComp.GetBlackboardComponent();\n\t\tauto target = Cast<APawn>(blackboard->GetValueAsObject(TargetKey));\n\t\tif (target) {\n\t\t\tauto distance = (target->GetActorLocation() - pawn->GetActorLocation()).Size();\n\t\t\tauto max_range = blackboard->GetValueAsFloat(MaxRangeKey);\n\t\t\tauto is_visible = pawn->LineOfSightTo(target);\n\t\t\tauto is_in_range = distance < max_range;\n\t\t\tblackboard->SetValueAsBool(InRangeKey, is_in_range);\n\t\t\tblackboard->SetValueAsBool(IsVisibleKey, is_visible);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.532782368404774}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\tif (OwnerComp.GetBlackboardComponent() == nullptr) return;\n\n\t// Retrieve the target actor from the blackboard.\n\tAActor* Target = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetKey));\n\tif (Target == nullptr) return;\n\n\t// Calculate the distance to the target actor.\n\tFVector TargetLocation = Target->GetActorLocation();\n\tfloat Distance = FVector::Dist(OwnerComp.GetOwner()->GetActorLocation(), TargetLocation);\n\n\t// If the target is within range, check for line of sight to the target.\n\tif (Distance <= MaxRange) {\n\t\t// Retrieve the pawn's current rotation.\n\t\tFRotator PawnRotation = OwnerComp.GetOwner()->GetActorRotation();\n\n\t\t// Rotate the line of sight vector by the pawn's rotation.\n\t\tFVector LineOfSight = FVector(1.0f, 0.0f, 0.0f);\n\t\tLineOfSight = PawnRotation.RotateVector(LineOfSight);\n\n\t\t// Calculate the target's location relative to the pawn.\n\t\tFVector TargetRelativeLocation = TargetLocation - OwnerComp.GetOwner()->GetActorLocation();\n\n\t\t// Check if the target is visible from the pawn's perspective.\n\t\tbool bIsVisible = UKismetMathLibrary::LineTraceSingleForObjects(GetWorld(), OwnerComp.GetOwner()->GetActorLocation(), TargetRelativeLocation, ECollisionChannel::ECC_Visibility, FCollisionQueryParams(FName(TEXT(\"\")), false, OwnerComp.GetOwner()), FCollisionObjectQueryParams(ECollisionChannel::ECC_Visibility));\n\n\t\t// Store the result in the blackboard.\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(InRangeKey, bIsVisible);\n\t}\n}", "CodeBleu_score": 45.77694436866168}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tif (OwnerComp.GetAIOwner() == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tAPawn* pawn = OwnerComp.GetAIOwner()->GetPawn();\n\tif (pawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tUAttributeComponent* attributeComponent = pawn->FindComponentByClass<UAttributeComponent>();\n\tif (attributeComponent == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\tattributeComponent->ChangeHealth(attributeComponent->GetMaxHealth());\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 47.164497035305516}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\tAUS_AIController* AIController = Cast<AUS_AIController>(OwnerComp.GetAIOwner());\n\tif (AIController) {\n\t\tAPawn* AICharacter = AIController->GetPawn();\n\t\tif (AICharacter) {\n\t\t\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(AICharacter->GetComponentByClass(UAttributeComponent::StaticClass()));\n\t\t\tif (AttributeComponent) {\n\t\t\t\tAttributeComponent->ChangeHealth(AttributeComponent->GetMaxHealth());\n\t\t\t\treturn EBTNodeResult::Succeeded;\n\t\t\t}\n\t\t}\n\t}\n\treturn EBTNodeResult::Failed;\n}", "CodeBleu_score": 44.36041813914494}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tSuper::ExecuteTask(OwnerComp, NodeMemory);\n\n\t// Retrieve the pawn from the AI owner\n\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\n\tif (MyPawn) {\n\t\t// Retrieve the attribute component\n\t\tUAttributeComponent* MyAttributes = MyPawn->FindComponentByClass<UAttributeComponent>();\n\n\t\tif (MyAttributes) {\n\t\t\t// Apply a health change to restore the pawn's health to maximum\n\t\t\tMyAttributes->ApplyHealthChange(MyAttributes->GetMaxHealth(), false);\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 54.38968801937977}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\n\tSuper::BeginPlay();\n\tif (GetOwner() == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"ProjectileMovementComponent has no owner!\"));\n\t\treturn;\n\t}\n\t// Register this component to be ticked every frame.\n\tif (GetWorld() != nullptr) {\n\t\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterTickable(this);\n\t}\n}", "CodeBleu_score": 51.175193041223025}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\n\tSuper::BeginPlay();\n\t// Register this component to be ticked every frame.\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterPrimaryTickableActor(this);\n}", "CodeBleu_score": 41.289639114693756}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\n\tSuper::BeginPlay();\n\tif (GetOwner()) {\n\t\tUWorld* World = GetWorld();\n\t\tif (World) {\n\t\t\tUSTickablesSubsystem* Tickables = USTickablesSubsystem::Get(World);\n\t\t\tif (Tickables) {\n\t\t\t\tTickables->RegisterTickableActor(this);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.03305410012422}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\tif (World && World->GetGameInstance()) {\n\t\tUSTickablesSubsystem* TickablesSubsystem = World->GetGameInstance()->GetSubsystem<USTickablesSubsystem>();\n\t\tif (TickablesSubsystem) {\n\t\t\tTickablesSubsystem->DeregisterTickableComponent(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 53.943029897377585}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\tUSTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>();\n\t\tif (TickablesSubsystem) {\n\t\t\tTickablesSubsystem->DeregisterTickable(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.69428218691286}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\tif (World != nullptr) {\n\t\tUSTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USTickablesSubsystem>();\n\t\tif (TickablesSubsystem != nullptr) {\n\t\t\tTickablesSubsystem->DeregisterTickable(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.62468878664314}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// If we're managing significance, check if the owner implements the significance interface.\n\tif (bManageSignificance)\n\t{\n\t\tif (!GetOwner()->GetClass()->ImplementsInterface(USSignificanceInterface::StaticClass()))\n\t\t{\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"%s does not implement the significance interface. Significance will not be managed.\"), *GetOwner()->GetName());\n\t\t\tbManageSignificance = false;\n\t\t}\n\t}\n\n\t// If we're managing significance, register with the manager.\n\tif (bManageSignificance)\n\t{\n\t\tRegisterWithManager();\n\t}\n\n\t// If we're managing significance, schedule a tick to register with the manager on the next frame.\n\tif (bManageSignificance && bWaitOneFrame)\n\t{\n\t\tFTimerHandle TimerHandle;\n\t\tGetWorld()->GetTimerManager().SetTimer(TimerHandle, this, &USSignificanceComponent::RegisterWithManager, 0.0f, false);\n\t}\n\n\t// If we're managing significance, manage particle significance for any particle system components.\n\tif (bManageSignificance)\n\t{\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass()))\n\t\t{\n\t\t\tif (ParticleSystemComponent->bUseSignificance)\n\t\t\t{\n\t\t\t\tParticleSystemComponent->RegisterComponent();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.972292958346614}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance)\n\t{\n\t\tif (GetOwner()->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass()))\n\t\t{\n\t\t\tRegisterWithManager();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (bWaitOneFrame)\n\t\t\t{\n\t\t\t\tFTimerHandle TimerHandle;\n\t\t\t\tGetWorld()->GetTimerManager().SetTimer(TimerHandle, this, &USSignificanceComponent::RegisterWithManager, 0.0f, false);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tRegisterWithManager();\n\t\t\t}\n\t\t}\n\t}\n\n\t// Find any particle systems on this actor and register them with the significance system\n\tfor (UParticleSystemComponent* PSC : GetOwner()->GetComponentsByClass(UParticleSystemComponent::StaticClass()))\n\t{\n\t\tRegisterParticleSystem(PSC);\n\t}\n}", "CodeBleu_score": 59.22771484353668}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance)\n\t{\n\t\t// Check if the owner implements the significance interface\n\t\tif (!GetOwner()->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass()))\n\t\t{\n\t\t\tUE_LOG(LogSignificance, Warning, TEXT(\"Owner %s does not implement the SignificanceInterface. Significance will not be managed.\"), *GetOwner()->GetName());\n\t\t\tbManageSignificance = false;\n\t\t}\n\n\t\t// Register with the significance manager\n\t\tRegisterWithManager();\n\t}\n\n\t// If we're managing significance, initialize the particle system significance\n\tif (bManageSignificance)\n\t{\n\t\tfor (UParticleSystemComponent* ParticleSystem : TActorRange<UParticleSystemComponent>(GetOwner()))\n\t\t{\n\t\t\tif (ParticleSystem->IsSignificanceManaged())\n\t\t\t{\n\t\t\t\tParticleSystem->InitializeSignificance();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 52.107096480950446}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (USignificanceManager* Manager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>()) {\n\t\t// Define lambda functions for calculating and handling significance updates\n\t\tauto CalcSignificance = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) { return this->CalcSignificance(ObjectInfo, Viewpoint); };\n\t\tauto PostSignificanceUpdate = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) { this->PostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal); };\n\n\t\t// Register with the manager\n\t\tManager->RegisterComponent(GetOwner(), GetName(), CalcSignificance, PostSignificanceUpdate);\n\t}\n}", "CodeBleu_score": 60.58584366351499}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (GetOwner() && GetWorld())\n\t{\n\t\tif (USignificanceManager* Manager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>())\n\t\t{\n\t\t\tif (bManageOwnerParticleSignificance)\n\t\t\t{\n\t\t\t\tManager->RegisterComponent(GetOwner(), GetOwner()->GetClass()->GetName(), FSSignificanceComponentLambda(CalcSignificance), FSSignificanceComponentLambda(PostSignificanceUpdate));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tManager->RegisterComponent(GetOwner(), GetOwner()->GetClass()->GetName(), FSSignificanceComponentLambda(CalcSignificance), FSSignificanceComponentLambda(PostSignificanceUpdate), false);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.78381861675812}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (bRegisteredWithManager)\n\t{\n\t\treturn;\n\t}\n\n\tif (UWorld* World = GetWorld())\n\t{\n\t\tif (USignificanceManager* SignificanceManager = World->GetGameInstance()->GetSubsystem<USignificanceManager>())\n\t\t{\n\t\t\tSignificanceManager->RegisterComponent(this, FName(GetOwner()->GetClass()->GetName()), [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) { return CalcSignificance(ObjectInfo, Viewpoint); }, [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) { PostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal); });\n\t\t\tbRegisteredWithManager = true;\n\t\t}\n\t}\n}", "CodeBleu_score": 62.13796043217626}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->GetIsPoolingEnabled()) {\n\t\tUWorld* World = Actor->GetWorld();\n\t\tif (World) {\n\t\t\tUSActorPoolingSubsystem* PoolingSubsystem = World->GetSubsystem<USActorPoolingSubsystem>();\n\t\t\tif (PoolingSubsystem) {\n\t\t\t\treturn PoolingSubsystem->ReleaseToPoolInternal(Actor);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 60.197736849679615}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) return false;\n\tif (!Actor->GetWorld()) return false;\n\tif (!Actor->GetClass()->HasAnyClassFlags(CLASS_ActorPoolable)) return false;\n\tUSActorPoolingSubsystem* Pooling = Cast<USActorPoolingSubsystem>(Actor->GetWorld()->GetSubsystem(FName(\"ActorPooling\")));\n\tif (!Pooling) return false;\n\treturn Pooling->ReleaseToPoolInternal(Actor);\n}", "CodeBleu_score": 53.98906252901165}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor->bEnablePooling) {\n\t\tUWorld* World = Actor->GetWorld();\n\t\tif (World) {\n\t\t\treturn CastChecked<USActorPoolingSubsystem>(World->GetSubsystem(USActorPoolingSubsystem::StaticClass()));\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 42.73916950950787}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t", "CodeBleu_score": 6.960003025511796}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_CYCLE_COUNTER(STAT_PrimeActorPool);\n\tUE_LOG(LogActor, Log, TEXT(\"Starting to pool %d %s.\"), Amount, *ActorClass->GetName());\n\tFActorSpawnParameters SpawnInfo;\n\tSpawnInfo.bDeferConstruction = true;\n\tSpawnInfo.Owner = nullptr;\n\tSpawnInfo.Instigator = nullptr;\n\tSpawnInfo.ObjectFlags = RF_Transient | RF_Public;\n\tSpawnInfo.Name = FText::Format(NSLOCTEXT(\"ActorPool\", \"PooledActorName\", \"Pooled {0}\"), FText::FromString(ActorClass->GetName()));\n\tfor (int32 i = 0; i < Amount; ++i) {\n\t\tAActor* NewActor = GetWorld()->SpawnActor<AActor>(ActorClass, SpawnInfo);\n\t\tNewActor->ReleaseActorToPool();\n\t}\n\tUE_LOG(LogActor, Log, TEXT(\"Finished pooling %d %s.\"), Amount, *ActorClass->GetName());\n}", "CodeBleu_score": 52.48555978706059}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPE_CYCLE_COUNTER(STAT_PrimeActorPool);\n\n\t// Log the start of the pooling process.\n\tUE_LOG(LogActorPool, Log, TEXT(\"Priming pool of %s\"), *(ActorClass->GetFullName()));\n\n\t// Create a scoped event for profiling.\n\tFActorPoolEvent ScopedEvent(ActorClass, Amount);\n\n\t// Spawn the specified number of actors using the provided actor class and default spawn parameters,\n\t// and immediately release them to the pool.\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tSpawnActor(ActorClass);\n\t}\n}", "CodeBleu_score": 34.5231461188942}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\t// Assign the loading screen widget\n\tLoadingScreenAttributes.LoadingScreenWidgetClass = USLLoadingScreenWidget::StaticClass();\n\t// Set up the loading screen using the movie player\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n\t// Set the current map name\n\tCurrentMapName = MapName;\n}", "CodeBleu_score": 56.26677547111214}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t", "CodeBleu_score": 8.21000268905031}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t", "CodeBleu_score": 8.21000268905031}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Role == EActionRole::Instigator) {\n\t\t// Log action start\n\t\tif (bLogStartEnd) {\n\t\t\tUE_LOG(LogAction, Log, TEXT(\"Action '%s' started by '%s'\"), *GetFName().ToString(), *Instigator->GetFName().ToString());\n\t\t}\n\n\t\t// Add granted tags to owning component's active tags\n\t\tif (OwnerComp != nullptr) {\n\t\t\tOwnerComp->AddTags(GrantedTags);\n\t\t}\n\n\t\t// Record start time\n\t\tif (OwnerRole == EActionRole::Authority) {\n\t\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t\t}\n\n\t\t// Broadcast action started event\n\t\tif (OwnerComp != nullptr) {\n\t\t\tOwnerComp->OnActionStarted.Broadcast(Instigator);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.828650031049946}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tif (Instigator == nullptr) {\n\t\treturn;\n\t}\n\n\t// If we are not already running an action, log the start of the action.\n\tif (!IsActionRunning()) {\n\t\tOnActionStarted(Instigator);\n\t}\n}", "CodeBleu_score": 17.29415549218631}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t", "CodeBleu_score": 2.8878179675041573}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetGameWorld() == nullptr) {\n\t\treturn GetDuration();\n\t}\n\treturn GetDuration() - GetGameWorld()->GetWorldTime() + GetStartTime();\n}", "CodeBleu_score": 33.81645090165433}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetGame()->GetGameState() == EGameState::EGS_InGame) {\n\t\treturn (GetDuration() - (GetGame()->GetWorldTime() - GetStartTime()));\n\t}\n\telse {\n\t\treturn GetDuration();\n\t}\n}", "CodeBleu_score": 35.71540701374193}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (Game::GetGame() == nullptr) {\n\t\treturn duration;\n\t}\n\n\treturn duration - (Game::GetGame()->GetWorldTime() - start_time);\n}", "CodeBleu_score": 32.267275557063115}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation InFocus is null\"));\n\t}\n\telse {\n\t\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\t\tif (MyPawn == nullptr) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation could not retrieve pawn\"));\n\t\t}\n\t\telse {\n\t\t\tInFocus->Interact(MyPawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.16048766590009}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation InFocus is nullptr\"));\n\t}\n\telse {\n\t\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\t\tif (MyPawn == nullptr) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"USInteractionComponent::ServerInteract_Implementation MyPawn is nullptr\"));\n\t\t}\n\t\telse {\n\t\t\tInFocus->Interact(MyPawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.15916008210283}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"InteractionComponent::ServerInteract_Implementation: InFocus is null\"));\n\t}\n\telse {\n\t\tAPawn* pawn = Cast<APawn>(GetOwner());\n\t\tif (pawn == nullptr) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"InteractionComponent::ServerInteract_Implementation: pawn is null\"));\n\t\t}\n\t\telse {\n\t\t\tInFocus->Interact(pawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.81694038684991}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\treturn false;\n}", "CodeBleu_score": 12.574816984288956}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\treturn false;\n}", "CodeBleu_score": 12.574816984288956}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tif (DamageCauser == nullptr) {\n\t\treturn false;\n\t}\n\tif (TargetActor == nullptr) {\n\t\treturn false;\n\t}\n\tif (DamageAmount <= 0.0f) {\n\t\treturn false;\n\t}\n\tUSHealthComponent* HealthComponent = TargetActor->FindComponentByClass<USHealthComponent>();\n\tif (HealthComponent == nullptr) {\n\t\treturn false;\n\t}\n\tHealthComponent->ApplyDamage(-DamageAmount);\n\treturn true;\n}", "CodeBleu_score": 47.77739301903859}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > m_PersonalBest) {\n\t\tm_PersonalBest = NewTime;\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.781608258574764}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > this->PersonalRecord) {\n\t\tthis->PersonalRecord = NewTime;\n\t\tthis->BroadcastPersonalRecord(NewTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.82686517458426}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t//if the new time is higher than the current personal record\n\tif (NewTime > GetPersonalRecord()) {\n\t\t//set the new personal record\n\t\tSetPersonalRecord(NewTime);\n\t\t//broadcast the change\n\t\tSendPersonalRecordChange();\n\t\t//return true\n\t\treturn true;\n\t}\n\t//return false\n\treturn false;\n}", "CodeBleu_score": 33.21424375580961}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\tif (AttributeComponent && AttributeComponent->GetCurrentHealth() != AttributeComponent->GetMaxHealth()) {\n\t\tif (GetWorld()->GetAuthGameMode()->GetGameInstance()->GetPlayerState<ASPawn_PlayerController>(GetWorld()->GetAuthGameMode()->GetGameInstance()->GetLocalPlayerControllerId())->GetCredits() >= GetCost()) {\n\t\t\tAttributeComponent->SetCurrentHealth(AttributeComponent->GetMaxHealth());\n\t\t\tGetWorld()->GetAuthGameMode()->GetGameInstance()->GetPlayerState<ASPawn_PlayerController>(GetWorld()->GetAuthGameMode()->GetGameInstance()->GetLocalPlayerControllerId())->RemoveCredits(GetCost());\n\t\t\tGetWorld()->GetAuthGameMode()->GetGameInstance()->GetPlayerState<ASPawn_PlayerController>(GetWorld()->GetAuthGameMode()->GetGameInstance()->GetLocalPlayerControllerId())->SetPowerUpCooldown(GetCoolDown());\n\t\t}\n\t}\n}", "CodeBleu_score": 40.95396249080622}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (InstigatorPawn != nullptr) {\n\t\tUAttributeComponent* AttributeComponent = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\t\tif (AttributeComponent != nullptr) {\n\t\t\tif (AttributeComponent->GetCurrentHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\t\tif (GetWorld()->GetAuthGameMode() != nullptr) {\n\t\t\t\t\tif (GetWorld()->GetAuthGameMode()->GetPlayerState(GetWorld()->GetFirstPlayerController()) != nullptr) {\n\t\t\t\t\t\tif (GetWorld()->GetAuthGameMode()->GetPlayerState(GetWorld()->GetFirstPlayerController())->GetCredits() >= GetCost()) {\n\t\t\t\t\t\t\tAttributeComponent->Heal(GetHealAmount());\n\t\t\t\t\t\t\tGetWorld()->GetAuthGameMode()->GetPlayerState(GetWorld()->GetFirstPlayerController())->RemoveCredits(GetCost());\n\t\t\t\t\t\t\tGetWorld()->GetAuthGameMode()->GetPlayerState(GetWorld()->GetFirstPlayerController())->OnPowerupUsed();\n\t\t\t\t\t\t\tGetWorld()->GetAuthGameMode()->GetPowerupSpawnManager()->SpawnPowerup(GetWorld()->GetAuthGameMode()->GetPlayerState(GetWorld()->GetFirstPlayerController())->GetPowerupSpawnLocation());\n\t\t\t\t\t\t\tGetWorld()->GetAuthGameMode()->GetPowerupSpawnManager()->RemovePowerup(this);\n\t\t\t\t\t\t\tGetWorld()->GetAuthGameMode()->GetPlayerState(GetWorld()->GetFirstPlayerController())->SetPowerupCooldown(GetCooldown());\n\t\t\t\t\t\t\tDestroy();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.183031338436955}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (!InstigatorPawn) {\n\t\treturn;\n\t}\n\tUAttributeComponent* HealthComponent = Cast<UAttributeComponent>(InstigatorPawn->FindComponentByClass(UAttributeComponent::StaticClass()));\n\tif (!HealthComponent) {\n\t\treturn;\n\t}\n\tif (HealthComponent->GetCurrentValue() == HealthComponent->GetMaxValue()) {\n\t\treturn;\n\t}\n\tif (GetWorld()->GetAuthGameMode()->GetGameSession()->GetPlayerState()->GetCredits() < GetCreditCost()) {\n\t\treturn;\n\t}\n\tHealthComponent->AddHealth(GetHealthChange());\n\tGetWorld()->GetAuthGameMode()->GetGameSession()->GetPlayerState()->RemoveCredits(GetCreditCost());\n\tGetWorld()->GetAuthGameMode()->GetGameSession()->GetPlayerState()->AddPowerupCooldown(GetCooldown());\n}", "CodeBleu_score": 39.55831778263086}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\tif (GetLocalRole() == ROLE_Authority) {\n\t\tif (GetInstigator()) {\n\t\t\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionEffect, GetActorLocation(), FRotator::ZeroRotator);\n\t\t\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ExplosionSound, GetActorLocation());\n\t\t\tUGameplayStatics::SpawnSoundAtLocation(GetWorld(), ExplosionSound, GetActorLocation());\n\t\t\tUGameplayStatics::PlaySound2D(GetWorld(), ExplosionSound);\n\t\t}\n\t\tUCameraShake* CameraShake = UCameraShake::StaticClass()->GetDefaultObject<UCameraShake>();\n\t\tUGameplayStatics::SpawnCameraShake(GetWorld(), CameraShake, GetActorLocation());\n\t\tGetWorld()->GetTimerManager().SetTimer(TimerHandle_Release, this, &ASProjectileBase::ReleaseProjectile, ReleaseDelay, false);\n\t}\n}", "CodeBleu_score": 49.57206837513731}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn the impact visual effect at the projectile's location.\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), true);\n\t\n\t// Play the impact sound.\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t\n\t// Trigger a camera shake.\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), CameraShakeEffect, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), true);\n\t\n\t// Release the projectile back to the actor pool.\n\tUGameplayStatics::SpawnActorFromClass(GetWorld(), ProjectileClass, GetActorLocation(), FRotator::ZeroRotator);\n}", "CodeBleu_score": 46.024587125553225}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn an impact visual effect at the projectile's location.\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactEffect, GetActorLocation(), FRotator::ZeroRotator, FVector(1.0f), true);\n\t\n\t// Play an impact sound.\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t\n\t// Trigger a camera shake.\n\tUGameplayStatics::SpawnCameraShake(GetWorld(), CameraShake, GetActorLocation());\n\t\n\t// Release the projectile back to the actor pool.\n\tUGameplayStatics::SpawnActorFromClass(GetWorld(), ProjectileClass, GetActorLocation(), FRotator::ZeroRotator);\n}", "CodeBleu_score": 50.97070389500278}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (GIsEditor && !GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"GetPlayerData: PIE is enabled, returning first saved player data entry if available\"));\n\t\treturn GetPlayerSaveData(0);\n\t}\n\n\treturn GetPlayerSaveData(PlayerState->GetUniqueID());\n}", "CodeBleu_score": 35.17707485455763}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tif (GIsEditor && GIsPlayInEditorWorld) {\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"Retrieving player data in PIE mode\"));\n\t\treturn GetFirstPlayerSaveData();\n\t}\n\n\tif (PlayerState->PlayerId == 0) {\n\t\treturn nullptr;\n\t}\n\n\treturn GetPlayerSaveData(PlayerState->PlayerId);\n}", "CodeBleu_score": 32.87084699994332}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogSaveGame, Log, TEXT(\"PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\n\tif (GIsEditor) {\n\t\tif (GEngine->IsPlayingInEditor()) {\n\t\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GIsEditor is true and GEngine->IsPlayingInEditor() is true!\"));\n\t\t\treturn GetFirstPlayerSaveData();\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GIsEditor is true but GEngine->IsPlayingInEditor() is false!\"));\n\t\t\treturn nullptr;\n\t\t}\n\t}\n\telse {\n\t\tif (GEngine->IsPlayingInEditor()) {\n\t\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GIsEditor is false but GEngine->IsPlayingInEditor() is true!\"));\n\t\t\treturn nullptr;\n\t\t}\n\t\telse {\n\t\t\tUE_LOG(LogSaveGame, Log, TEXT(\"GIsEditor is false and GEngine->IsPlayingInEditor() is false!\"));\n\t\t\treturn GetPlayerSaveData(PlayerState->GetUniqueID());\n\t\t}\n\t}\n}", "CodeBleu_score": 44.83883848796846}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tif (NewPlayer) {\n\t\tAPawn* PlayerPawn = NewPlayer->GetPawn();\n\t\tif (PlayerPawn) {\n\t\t\tUGameInstance* GameInstance = GetGameInstance();\n\t\t\tif (GameInstance) {\n\t\t\t\tUWorld* World = GameInstance->GetWorld();\n\t\t\t\tif (World) {\n\t\t\t\t\t// Check if the player has a valid player state\n\t\t\t\t\tAPlayerState* PlayerState = NewPlayer->PlayerState;\n\t\t\t\t\tif (PlayerState) {\n\t\t\t\t\t\t// Get the player's save game data\n\t\t\t\t\t\tFString SaveGameName = GetPlayerSaveGameName(PlayerState);\n\t\t\t\t\t\tif (!SaveGameName.IsEmpty()) {\n\t\t\t\t\t\t\t// Load the player's save game data\n\t\t\t\t\t\t\tLoadPlayerSaveGame(PlayerState, SaveGameName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.40612647388582}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\t// If the game is not in progress, do nothing\n\tif (GetWorld()->GetAuthGameMode()->GameInProgress == false) {\n\t\treturn;\n\t}\n\n\t// Get the player's state\n\tconst FSavedPlayer* PlayerState = GetPlayerState(NewPlayer);\n\n\t// If the player's state is valid, load the player's state from the current save game\n\tif (PlayerState != nullptr) {\n\t\tLoadPlayerState(NewPlayer, PlayerState);\n\t}\n}", "CodeBleu_score": 45.07873284716536}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t", "CodeBleu_score": 5.929662248476587}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t", "CodeBleu_score": 0.989701945674575}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tFString SaveGameName = GetSaveGameName();\n\tFString SaveGamePath = FPaths::Combine(SaveGameDirectory, SaveGameName);\n\n\t// Clear existing save game data\n\tCurrentSaveGame.PlayerData.Empty();\n\tCurrentSaveGame.ActorData.Empty();\n\n\t// Save player data\n\tfor (APlayerController* PlayerController : GetWorld()->GetPlayerControllerIterator()) {\n\t\tFString PlayerName = PlayerController->GetPawn()->GetName();\n\t\tFString PlayerData = PlayerController->SaveGameToString();\n\t\tFSaveGamePlayerData SaveGamePlayerData;\n\t\tSaveGamePlayerData.PlayerName = PlayerName;\n\t\tSaveGamePlayerData.PlayerData = PlayerData;\n\t\tCurrentSaveGame.PlayerData.Add(SaveGamePlayerData);\n\t}\n\n\t// Save actor data\n\tfor (AActor* Actor : GetWorld()->GetActors()) {\n\t\tif (Actor->Implements<USaveGameInterface>()) {\n\t\t\tFString ActorName = Actor->GetName();\n\t\t\tFString ActorData = Actor->SaveGameToString();\n\t\t\tFSaveGameActorData SaveGameActorData;\n\t\t\tSaveGameActorData.ActorName = ActorName;\n\t\t\tSaveGameActorData.ActorData = ActorData;\n\t\t\tCurrentSaveGame.ActorData.Add(SaveGameActorData);\n\t\t}\n\t}\n\n\t// Write save game to file\n\tFFileHelper::SaveStringToFile(CurrentSaveGame.ToString(), *SaveGamePath);\n\n\t// Broadcast save game complete event\n\tFSaveGameCompleteEvent SaveGameCompleteEvent;\n\tSaveGameCompleteEvent.SaveGameName = SaveGameName;\n\tSaveGameCompleteEvent.SaveGamePath = SaveGamePath;\n\tSaveGameCompleteEvent.SaveGameSlot = CurrentSaveGameSlot;\n\tSaveGameCompleteEvent.bSuccess = true;\n\tSaveGameCompleteEvent.ErrorMessage = \"\";\n\tOnSaveGameComplete.Broadcast(SaveGameCompleteEvent);\n}", "CodeBleu_score": 42.59363162827531}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\t// Get the current game state\n\tUWorld* World = GetWorld();\n\tif (World) {\n\t\t// Clear the current save game\n\t\tCurrentSaveGame->Clear();\n\n\t\t// Iterate through all players in the game state\n\t\tfor (FConstPlayerControllerIterator Iterator = World->GetPlayerControllerIterator(); Iterator; ++Iterator) {\n\t\t\tAPlayerController* PlayerController = Iterator->Get();\n\t\t\tif (PlayerController) {\n\t\t\t\t// Get the player state for this player\n\t\t\t\tFPlayerState* PlayerState = PlayerController->PlayerState;\n\t\t\t\tif (PlayerState) {\n\t\t\t\t\t// Create a new player state for this player\n\t\t\t\t\tFSSaveGamePlayerState* NewPlayerState = NewObject<FSSaveGamePlayerState>();\n\t\t\t\t\tNewPlayerState->PlayerController = PlayerController;\n\t\t\t\t\tNewPlayerState->PlayerState = PlayerState;\n\n\t\t\t\t\t// Add the new player state to the current save game\n\t\t\t\t\tCurrentSaveGame->PlayerStates.Add(NewPlayerState);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Iterate through all actors in the world\n\t\tfor (TActorIterator<AActor> ActorIterator(World); ActorIterator; ++ActorIterator) {\n\t\t\tAActor* Actor = *ActorIterator;\n\t\t\tif (Actor) {\n\t\t\t\t// Get the interface for this actor\n\t\t\t\tISaveGameActorInterface* SaveGameActorInterface = Cast<ISaveGameActorInterface>(Actor);\n\t\t\t\tif (SaveGameActorInterface) {\n\t\t\t\t\t// Create a new save game actor for this actor\n\t\t\t\t\tFSSaveGameActor* NewSaveGameActor = NewObject<FSSaveGameActor>();\n\t\t\t\t\tNewSaveGameActor->Actor = Actor;\n\t\t\t\t\tNewSaveGameActor->SaveGameActorInterface = SaveGameActorInterface;\n\n\t\t\t\t\t// Add the new save game actor to the current save game\n\t\t\t\t\tCurrentSaveGame->SaveGameActors.Add(NewSaveGameActor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Write the current save game to a slot\n\t\tUGameSaveSystem::WriteSaveGame(CurrentSaveGame);\n\n\t\t// Broadcast an event to signal the save is complete\n\t\tFSSaveGameSubsystemEvents::Get().OnSaveGameComplete.Broadcast();\n\t}\n}", "CodeBleu_score": 40.614555417545915}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t\tif (ImGui::BeginCombo(\"Theme\", theme_names[theme])) {\n\t\tfor (int i = 0; i < IM_ARRAYSIZE(theme_names); i++) {\n\t\t\tif (ImGui::MenuItem(theme_names[i])) {\n\t\t\t\ttheme = i;\n\t\t\t\tupdate_font_size();\n\t\t\t}\n\t\t}\n\t\tImGui::EndCombo();\n\t}\n\tImGui::PushItemWidth(100);\n\tif (ImGui::SliderInt(\"Font size\", &font_size, 10, 30)) {\n\t\tupdate_font_size();\n\t}\n\tImGui::PopItemWidth();\n}", "CodeBleu_score": 38.11026196390481}, {"code": "void FrameworkConfig::draw_themes(){\n\t", "CodeBleu_score": 2.9382092570235954}, {"code": "void FrameworkConfig::draw_themes(){\n\t", "CodeBleu_score": 2.9382092570235954}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::SetNextWindowSize(ImVec2(350, 300), ImGuiCond_FirstUseEver);\n\tImGui::Begin(\"Main Configuration\", nullptr, ImGuiWindowFlags_NoCollapse);\n\n\tImGui::Checkbox(\"Menu Key\", &menu_key_config);\n\tImGui::SameLine();\n\tImGui::Text(\"(%s)\", menu_key_config ? \"Press\" : \"Hold\");\n\tImGui::SameLine();\n\tImGui::Text(\"(%s)\", menu_key.c_str());\n\n\tImGui::Checkbox(\"Show Cursor\", &show_cursor_config);\n\n\tImGui::Checkbox(\"Remember Menu State\", &remember_menu_state_config);\n\n\tImGui::Checkbox(\"Enable L3 + R3 Toggle\", &l3_r3_toggle_config);\n\n\tImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor_config);\n\n\tImGui::Checkbox(\"Show Log Level\", &show_log_level_config);\n\n\tif (show_log_level_config) {\n\t\tImGui::Text(\"Log Level:\");\n\t\tImGui::SameLine();\n\t\tImGui::TextColored(ImVec4(1, 1, 0, 1), spdlog::level::level_string_views[log_level].data());\n\t\tImGui::PushItemWidth(-1);\n\t\tImGui::SliderInt(\"##log_level\", &log_level, 0, 5);\n\t\tImGui::PopItemWidth();\n\t}\n\n\tImGui::End();\n}", "CodeBleu_score": 48.35067986662142}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::Begin(\"Main\");\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Combo(\"##Menu Key\", &config.menuKey, menuKeyNames, IM_ARRAYSIZE(menuKeyNames));\n\tImGui::Text(\"Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##Show Cursor\", &config.showCursor);\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##Remember Menu State\", &config.rememberMenuState);\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##Enable L3 + R3 Toggle\", &config.enableL3R3Toggle);\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##Always Show Cursor\", &config.alwaysShowCursor);\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Combo(\"##Log Level\", &config.logLevel, logLevelNames, IM_ARRAYSIZE(logLevelNames));\n\tImGui::PopItemWidth();\n\tImGui::End();\n\n\tif (config.logLevel != config.lastLogLevel) {\n\t\tspdlog::set_level(config.logLevel);\n\t\tconfig.lastLogLevel = config.logLevel;\n\t}\n}", "CodeBleu_score": 48.09800462559645}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::PushItemWidth(100);\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(150);\n\tImGui::InputInt(\"##MenuKey\", &menuKey);\n\tImGui::SameLine();\n\tImGui::Text(\"Show Cursor\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(150);\n\tImGui::Checkbox(\"##ShowCursor\", &showCursor);\n\tImGui::SameLine();\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(150);\n\tImGui::Checkbox(\"##RememberMenuState\", &rememberMenuState);\n\tImGui::SameLine();\n\tImGui::Text(\"Enable L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(150);\n\tImGui::Checkbox(\"##EnableL3R3Toggle\", &enableL3R3Toggle);\n\tImGui::SameLine();\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(150);\n\tImGui::Checkbox(\"##AlwaysShowCursor\", &alwaysShowCursor);\n\tImGui::SameLine();\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(150);\n\tImGui::Combo(\"##LogLevel\", &logLevel, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\\0\");\n\tImGui::PopItemWidth();\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Press F1 to toggle this window\");\n}", "CodeBleu_score": 42.68712325097016}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tbool bSuccess = false;\n\tif ( bIsFilePathActuallyTextBuffer ) {\n\t\tbSuccess = LoadOpenStreetMapTextBuffer( OSMFilePath, FeedbackContext );\n\t}\n\telse {\n\t\tbSuccess = LoadOpenStreetMapFile( OSMFilePath, FeedbackContext );\n\t}\n\treturn bSuccess;\n}", "CodeBleu_score": 18.60303795730009}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tbool bSuccess = false;\n\tFXmlNode* RootNode = nullptr;\n\tif (bIsFilePathActuallyTextBuffer) {\n\t\tRootNode = FXmlFile::Load(OSMFilePath);\n\t} else {\n\t\tRootNode = FXmlFile::LoadFile(OSMFilePath);\n\t}\n\tif (RootNode != nullptr) {\n\t\tbSuccess = LoadOpenStreetMapData(RootNode, FeedbackContext);\n\t} else {\n\t\tUE_LOG(OSM, Error, TEXT(\"Failed to load OSM file '%s'\"), *OSMFilePath);\n\t}\n\treturn bSuccess;\n}", "CodeBleu_score": 24.679747313348805}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\tif (StreetMapActor != nullptr) {\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tif (StreetMapComponent != nullptr) {\n\t\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t\t}\n\t}\n}", "CodeBleu_score": 69.58740493270588}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMapAsset(Cast<UStreetMap>(Asset));\n\t}\n}", "CodeBleu_score": 68.81686107981338}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tif (StreetMapComponent) {\n\t\t\tStreetMapComponent->SetStreetMap(Cast<UStreetMap>(Asset));\n\t\t}\n\t}\n}", "CodeBleu_score": 69.56918244768595}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif(LastDetailBuilderPtr != nullptr)\n\t{\n\t\tLastDetailBuilderPtr->BuildMesh();\n\t\tLastDetailBuilderPtr->ForceRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 63.19061151104988}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif(LastDetailBuilderPtr != nullptr)\n\t{\n\t\tLastDetailBuilderPtr->BuildMesh();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 61.54149373696285}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif(SelectedStreetMapComponent.IsValid()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 76.70267832537972}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n\n\t// Register the StreetMap asset type with the editor\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetTypeActions()));\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentCustomization::MakeInstance));\n\n\t// Notify the property editor module that a new class layout has been registered\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 69.67707866839639}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\tFStreetMapImportingStyle::Initialize();\n\tFStreetMapImportingStyle::ReloadTextures();\n\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentCustomization::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 42.76908278555074}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\n\t// Register the StreetMap asset type and provide a custom class layout for the details panel\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\n\t// Register the StreetMap asset type and provide a custom class layout for the details panel\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tAssetTools.RegisterAssetTypeActions(MakeShareable(new FStreetMapAssetActions(StreetMapActions)));\n\n\t// Register the StreetMap style\n\tFEditorStyle::Get().SetEditorStyle(TEXT(\"EditorStyle\"));\n\n\t// Notify the property editor module that a new layout is available\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 67.57971637981603}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMapMesh == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* StreetMapSceneProxy = new FStreetMapSceneProxy(this);\n\tStreetMapSceneProxy->Build();\n\n\treturn StreetMapSceneProxy;\n}", "CodeBleu_score": 47.754773266888904}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (Mesh != nullptr) {\n\t\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\t\treturn Proxy;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 29.9244351432853}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMapMesh == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\n\treturn Proxy;\n}", "CodeBleu_score": 30.80367412109887}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FName> InputNames;\n\tInputNames.Add(FName(\"Ability01\"));\n\tFAFClientAbilityHandle ClientHandle = UAFClientManager::Get().GetClientHandle(GetController());\n\tUAFClientManager::Get().BindAbility(ClientHandle, ServerHandle, InputNames);\n}", "CodeBleu_score": 56.38329693610971}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FName> InputIDArray;\n\tInputIDArray.Add(FName(\"Ability01\"));\n\tFAFClientInputBinding Binding;\n\tBinding.Bind(ClientHandle, InputIDArray);\n}", "CodeBleu_score": 53.7291109879427}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FName> InputNames;\n\tInputNames.Add(TEXT(\"Ability01\"));\n\tAFNAbilitySystem::Get().BindAbility(ServerHandle, ClientHandle, InputNames);\n}", "CodeBleu_score": 56.89595006276528}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Controller) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 78.82936358200293}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (GetCharacterMovement()->IsWalkable(GetActorLocation())) {\n\t\tif (Value != 0.0f) {\n\t\t\tFRotator Rotation = GetControlRotation();\n\t\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetScaledAxis(EAxis::X);\n\t\t\tAddMovementInput(Direction, Value);\n\t\t}\n\t}\n}", "CodeBleu_score": 65.18514302664109}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Value != 0.0f && Controller != nullptr) {\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 85.44142946287782}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\t// If the main weapon mesh component is available, return the location of the specified socket on the main weapon mesh component.\n\tif (WeaponMeshComponent) {\n\t\treturn WeaponMeshComponent->GetSocketLocation(Socket);\n\t}\n\t// Otherwise, return the location of the \"headSocket\" on the character's mesh.\n\treturn GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 47.931275300957495}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMesh() && GetMesh()->GetBodySetup()) {\n\t\tTArray<FName> SocketNames;\n\t\tGetMesh()->GetBodySetup()->GetSocketNames(SocketNames);\n\t\tif (SocketNames.Contains(Socket)) {\n\t\t\treturn GetMesh()->GetSocketLocation(Socket);\n\t\t}\n\t}\n\treturn GetMesh()->GetSocketLocation(\"headSocket\");\n}", "CodeBleu_score": 49.01496840130999}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMesh() == nullptr) {\n\t\treturn GetMesh()->GetSocketLocation(FName(\"headSocket\"));\n\t}\n\treturn GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 54.3429242506191}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() < MinEnemies)\n\t{\n\t\tFTimerManager& Timer = GetWorld()->GetTimerManager();\n\t\tTimer.ClearTimer(SpawnerHandle);\n\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 52.19275973386508}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\tif (SpawnedEnemies.Num() < MinNumOfEnemies)\n\t{\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 59.79368483137636}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinNumEnemies) {\n\t\t\tFTimerManager& TimerManager = GetWorld()->GetTimerManager();\n\t\t\tTimerManager.ClearTimer(SpawnerHandle);\n\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 50.58708086760926}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t", "CodeBleu_score": 4.493996550900141}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tFString(Options).ParseIntoArray(Params, TEXT(\" \"), true);\n\tfor (auto Param : Params) {\n\t\tFString Key;\n\t\tFString Value;\n\t\tif (Param.Split(TEXT(\"=\"), &Key, &Value)) {\n\t\t\tif (Key == TEXT(\"PlayerId\")) {\n\t\t\t\tPlayerId = Value;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 58.11175523467442}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> Params;\n\tParseOption(Options, Params);\n\tfor (auto Param : Params) {\n\t\tFString Key;\n\t\tFString Value;\n\t\tif (Param.Split(TEXT(\"=\"), &Key, &Value)) {\n\t\t\tif (Key == TEXT(\"PlayerId\")) {\n\t\t\t\tPlayerId = Value;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 57.61682272044537}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameTextBox->GetText().ToString();\n\tFString DisplayName = DisplayNameTextBox->GetText().ToString();\n\tFString Password = PasswordTextBox->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, LOCTEXT(\"RegisterWarning\", \"Please fill in all fields!\"));\n\t} else {\n\t\tRegisterNewPlayer(Username, DisplayName, Password);\n\t\tHide();\n\t}\n}", "CodeBleu_score": 35.77390632454799}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameTextField->GetText().ToString();\n\tFString DisplayName = DisplayNameTextField->GetText().ToString();\n\tFString Password = PasswordTextField->GetText().ToString();\n\n\tif (Username.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a username\"));\n\t}\n\telse if (DisplayName.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a display name\"));\n\t}\n\telse if (Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a password\"));\n\t}\n\telse {\n\t\tRegisterNewPlayer(Username, DisplayName, Password);\n\t\tHide();\n\t}\n}", "CodeBleu_score": 53.25754948405953}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a username\"));\n\t}\n\telse if (DisplayName.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a display name\"));\n\t}\n\telse if (Password.IsEmpty()) {\n\t\tFMessageDialog::Open(EAppMsgType::Ok, FText::FromString(\"Please enter a password\"));\n\t}\n\telse {\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t\tGetOwner()->GetGameInstance()->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 58.435074217713534}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t", "CodeBleu_score": 4.601458837271866}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t", "CodeBleu_score": 4.601458837271866}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Attribute == FAF_Attribute::Health) {\n\t\tif (InMod.NewValue < InMod.OldValue) {\n\t\t\tif (InMod.TargetActor) {\n\t\t\t\tFVector2D DamageLocation = FAARGameMode::GetWorldToScreenCoordinates(InMod.TargetActor->GetActorLocation());\n\t\t\t\tif (DamageLocation.X != -1) {\n\t\t\t\t\t// Set the floating combat text\n\t\t\t\t\tSetFloatingCombatText(InMod.NewValue, DamageLocation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 26.944683501440643}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade != nullptr) {\n\t\tif (InMagazineUpgrade->IsValidToEquip(this)) {\n\t\t\tclass UARWeaponComponent* WeaponComponent = GetWeaponComponent();\n\t\t\tif (WeaponComponent != nullptr) {\n\t\t\t\tclass AARPlayerState* PlayerState = WeaponComponent->GetOwnerCharacter()->GetPlayerState();\n\t\t\t\tif (PlayerState != nullptr) {\n\t\t\t\t\tif (PlayerState->GetAuthority() == EControllerAuthority::AuthorityServer) {\n\t\t\t\t\t\tInMagazineUpgrade = Cast<UARMagazineUpgradeItem>(InMagazineUpgrade->Duplicate());\n\t\t\t\t\t\tInMagazineUpgrade->SetLevel(InMagazineUpgrade->GetLevel() + 1);\n\t\t\t\t\t\tInMagazineUpgrade->ApplyEffect(this);\n\t\t\t\t\t\tWeaponComponent->AddMagazineUpgrade(InMagazineUpgrade);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tOnMagazineUpdateAdded();\n\t\t}\n\t}\n}", "CodeBleu_score": 40.636460173462076}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (InMagazineUpgrade == nullptr) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->AbilityInstance == nullptr) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->WeaponComponent == nullptr) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->WeaponComponent->GetOwnerCharacter() == nullptr) {\n\t\treturn;\n\t}\n\n\tif (InMagazineUpgrade->WeaponComponent->GetOwnerCharacter()->GetLocalRole() != ROLE_Authority) {\n\t\treturn;\n\t}\n\n\tTSubclassOf<class UGameplayEffect> GameplayEffectClass = InMagazineUpgrade->AbilityInstance->GetClass()->GetDefaultObject<UGameplayEffect>()->GameplayEffectClass;\n\tif (GameplayEffectClass == nullptr) {\n\t\treturn;\n\t}\n\n\tclass UAbilitySystemComponent* AbilitySystemComponent = InMagazineUpgrade->WeaponComponent->GetOwnerCharacter()->FindComponentByClass(UAbilitySystemComponent::StaticClass());\n\tif (AbilitySystemComponent == nullptr) {\n\t\treturn;\n\t}\n\n\tFGameplayEffectContextHandle EffectContext = AbilitySystemComponent->MakeEffectContext();\n\tEffectContext.AddSourceObject(InMagazineUpgrade->WeaponComponent);\n\tFGameplayEffectSpecHandle SpecHandle = AbilitySystemComponent->MakeOutgoingSpec(GameplayEffectClass, 1.0f, EffectContext);\n\tif (SpecHandle.IsValid()) {\n\t\tSpecHandle.Data.Get()->SetLevel(InMagazineUpgrade->MagazineUpgradeValue);\n\t\tAbilitySystemComponent->ApplyGameplayEffectSpecToSelf(*SpecHandle.Data.Get());\n\t}\n\n\tOnMagazineUpdateAdded();\n}", "CodeBleu_score": 38.229336798613836}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (!InMagazineUpgrade || !InMagazineUpgrade->Ability) {\n\t\treturn;\n\t}\n\n\tif (GetLocalRole() == ROLE_Authority) {\n\t\tif (ACharacter* CharacterOwner = Cast<ACharacter>(GetOwner())) {\n\t\t\tif (InMagazineUpgrade->Ability->GetInstancingPolicy() == EGameplayAbilityInstancingPolicy::NonInstanced) {\n\t\t\t\tInMagazineUpgrade = Cast<UARMagazineUpgradeItem>(InMagazineUpgrade->Duplicate());\n\t\t\t}\n\n\t\t\tInMagazineUpgrade->Ability->SetIntField(FName(\"MagazineUpgradeValue\"), GetMagazineUpgradeValue());\n\t\t\tInMagazineUpgrade->Ability->ApplyGameplayEffectToTarget(InMagazineUpgrade->Ability->MakeTargetData(CharacterOwner), CharacterOwner);\n\t\t}\n\t}\n\n\tOnMagazineUpdateAdded();\n}", "CodeBleu_score": 40.16038730153401}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tif (!GetOwner())\n\t\treturn;\n\n\tAARCharacter* CharacterOwner = Cast<AARCharacter>(GetOwner());\n\n\tif (!CharacterOwner)\n\t\treturn;\n\n\tUAbilitySystemComponent* AbilitySystemComponent = CharacterOwner->GetAbilitySystemComponent();\n\n\tif (!AbilitySystemComponent)\n\t\treturn;\n\n\tTSubclassOf<UARWeaponAbilityBase> AbilityClass = InAbilityTag.LoadSynchronous();\n\n\tif (!AbilityClass)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilitySystemComponent->GetAbilityInstanceFromClass(AbilityClass);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 50.996080150923525}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tUARCharacter* OwnerCharacter = Cast<UARCharacter>(GetOwner());\n\n\tif (!OwnerCharacter)\n\t\treturn;\n\n\tUAbilitySystemComponent* AbilitySystemComponent = OwnerCharacter->GetAbilitySystemComponent();\n\n\tif (!AbilitySystemComponent)\n\t\treturn;\n\n\tTSubclassOf<UARWeaponAbilityBase> AbilityClass = InAbilityTag.LoadSynchronous();\n\n\tif (!AbilityClass)\n\t\treturn;\n\n\tFGameplayTag AbilityTag = AbilityClass->GetDefaultObject<UARWeaponAbilityBase>()->AbilityTag;\n\n\tFGameplayAbilitySpecHandle AbilityHandle = AbilitySystemComponent->FindAbilitySpecHandle(AbilityTag, false);\n\n\tif (!AbilityHandle.IsValid())\n\t\treturn;\n\n\tAbilitySystemComponent->SetAbility(AbilityHandle, true, true);\n\n\tSetAbilityToItem(LocalIndex, AbilityClass.GetDefaultObject());\n}", "CodeBleu_score": 44.284307838964395}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t\tAARCharacter* CharacterOwner = Cast<AARCharacter>(GetOwner());\n\n\tif (!CharacterOwner)\n\t\treturn;\n\n\tUAbilitySystemComponent* AbilitySystemComponent = CharacterOwner->FindComponentByClass<UAbilitySystemComponent>();\n\n\tif (!AbilitySystemComponent)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilitySystemComponent->GetAbilityInstanceFromClass(InAbilityTag);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 52.00336868551937}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tif (!Character->GetEquipedMainWeapon()->GetChildActor()) {\n\t\t\treturn;\n\t\t}\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = Character->GetEquipedMainWeapon()->GetChildActor()->GetClass()->GetName();\n\t\t//Data.SocketName = Character->GetEquipedMainWeapon()->GetSocketName();\n\t\tData.Position = Character->GetEquipedMainWeapon()->GetComponentLocation();\n\t\tData.Rotation = Character->GetEquipedMainWeapon()->GetComponentRotation();\n\t\tData.AttachSlot = EARWeaponPosition::EARWP_RightHand;\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tCurrentWeaponIndex = -1;\n\t}\n}", "CodeBleu_score": 45.753787965867566}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tif (!Character->GetEquipedMainWeapon()->GetChildActor())\n\t\t{\n\t\t\treturn;\n\t\t}\n\t\tCharacter->GetEquipedMainWeapon()->SetChildActorClass(nullptr);\n\t}\n\tFARWeaponRPC Data;\n\tData.Weapon = \"\";\n\t//Data.SocketName = \"\";\n\tData.Position = FVector::ZeroVector;\n\tData.Rotation = FRotator::ZeroRotator;\n\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\tServerHolster(Data);\n\tCurrentWeaponIndex = -1;\n}", "CodeBleu_score": 58.97784075712597}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = \"\";\n\t\t//Data.SocketName = \"\";\n\t\tData.Position = Character->GetEquipedMainWeapon()->HolsteredPosition;\n\t\tData.Rotation = Character->GetEquipedMainWeapon()->HolsteredRotation;\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tCurrentWeaponIndex = -1;\n\t}\n}", "CodeBleu_score": 51.6699687053561}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t", "CodeBleu_score": 3.842761213642941}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tFCoreUObjectDelegates::OnAsyncLoadingScreenDismissed.RemoveAll(this);\n\t\tFCoreUObjectDelegates::OnAsyncLoadingScreenDismissed.RemoveAll(this);\n\t}\n}", "CodeBleu_score": 34.53749384643409}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (FModuleManager::Get().IsModuleLoaded(\"MoviePlayer\")) {\n\t\tIMoviePlayer &MoviePlayer = FModuleManager::LoadModuleChecked<IMoviePlayer>(\"MoviePlayer\");\n\t\tMoviePlayer.OnPreLoadMap.RemoveAll(this);\n\t}\n}", "CodeBleu_score": 16.965747819253423}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing loading screen...\"));\n\n\t// Get the default loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t// Set the startup flag to false\n\tLoadingScreenSettings->bStartupLoadingScreen = false;\n\n\t// Setup the loading screen\n\tSetupLoadingScreen(LoadingScreenSettings->LoadingScreenSettings);\n}", "CodeBleu_score": 39.676279841652004}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\t// Log the start of the setup process\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Starting Async Loading Screen Setup\"));\n\n\t// Check if the loading screen is enabled\n\tif (FAsyncLoadingScreenSettings::IsLoadingScreenEnabled())\n\t{\n\t\t// Get the default loading screen settings\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\n\t\t// Set the startup flag to false\n\t\tLoadingScreenSettings->bStartupLoadingScreen = false;\n\n\t\t// Setup the loading screen using the default settings\n\t\tSetupLoadingScreen(LoadingScreenSettings);\n\t}\n}", "CodeBleu_score": 40.03317493671968}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"Preparing loading screen...\"));\n\n\tif (!IsLoadingScreenEnabled())\n\t{\n\t\treturn;\n\t}\n\n\t// Set the startup flag to false\n\tFLoadingScreenAttributes LoadingScreen;\n\tLoadingScreen.bStartupLoadingScreen = false;\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n\n\t// Get the default loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Setup the loading screen using the default settings\n\tSetupLoadingScreen(Settings->LoadingScreenSettings);\n}", "CodeBleu_score": 55.53768039449828}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images\n\tRemoveAllBackgroundImages();\n\n\t// Retrieve the loading screen settings\n\tconst UAsyncLoadingScreenSettings* Settings = GetDefault<UAsyncLoadingScreenSettings>();\n\tif (!Settings) {\n\t\treturn;\n\t}\n\n\t// Load the startup background images\n\tif (Settings->StartupBackgroundImage != nullptr) {\n\t\tconst FSlateBrush* StartupBackgroundImage = Settings->StartupBackgroundImage->Brush.Get();\n\t\tif (StartupBackgroundImage != nullptr) {\n\t\t\tStartupBackgroundImages.Add(StartupBackgroundImage);\n\t\t}\n\t}\n\n\t// Load the default background images\n\tif (Settings->DefaultBackgroundImage != nullptr) {\n\t\tconst FSlateBrush* DefaultBackgroundImage = Settings->DefaultBackgroundImage->Brush.Get();\n\t\tif (DefaultBackgroundImage != nullptr) {\n\t\t\tDefaultBackgroundImages.Add(DefaultBackgroundImage);\n\t\t}\n\t}\n}", "CodeBleu_score": 47.280963157722425}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images\n\tRemoveAllBackgroundImages();\n\n\t// Retrieve the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t// Load and add startup background images\n\tfor (FLoadingScreenDescription& LoadingScreenDescription : LoadingScreenSettings->StartupLoadingScreenDescriptions) {\n\t\tif (LoadingScreenDescription.LoadingImage.IsValid()) {\n\t\t\tFLoadingScreenDescription LoadingScreenDescriptionCopy = LoadingScreenDescription;\n\t\t\tLoadingScreenDescriptionCopy.LoadingImage = LoadImage(LoadingScreenDescriptionCopy.LoadingImage);\n\t\t\tif (LoadingScreenDescriptionCopy.LoadingImage.IsValid()) {\n\t\t\t\tStartupBackgroundImages.Add(LoadingScreenDescriptionCopy);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Load and add default background images\n\tfor (FLoadingScreenDescription& LoadingScreenDescription : LoadingScreenSettings->DefaultLoadingScreenDescriptions) {\n\t\tif (LoadingScreenDescription.LoadingImage.IsValid()) {\n\t\t\tFLoadingScreenDescription LoadingScreenDescriptionCopy = LoadingScreenDescription;\n\t\t\tLoadingScreenDescriptionCopy.LoadingImage = LoadImage(LoadingScreenDescriptionCopy.LoadingImage);\n\t\t\tif (LoadingScreenDescriptionCopy.LoadingImage.IsValid()) {\n\t\t\t\tDefaultBackgroundImages.Add(LoadingScreenDescriptionCopy);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 49.04355550351131}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images\n\tRemoveAllBackgroundImages();\n\n\t// Retrieve the loading screen settings\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\n\t// Load and add the startup screen background images\n\tfor (const FLoadingScreenBackground& Background : LoadingScreenSettings->StartupBackgroundImages) {\n\t\t// Load the background image\n\t\tUTexture2D* BackgroundTexture = LoadObject<UTexture2D>(NULL, *Background.TextureName, NULL, LOAD_None, NULL);\n\n\t\t// If the background image was loaded, add it to the list\n\t\tif (BackgroundTexture) {\n\t\t\tStartupBackgroundImages.Add(BackgroundTexture);\n\t\t}\n\t}\n\n\t// Load and add the default screen background images\n\tfor (const FLoadingScreenBackground& Background : LoadingScreenSettings->DefaultBackgroundImages) {\n\t\t// Load the background image\n\t\tUTexture2D* BackgroundTexture = LoadObject<UTexture2D>(NULL, *Background.TextureName, NULL, LOAD_None, NULL);\n\n\t\t// If the background image was loaded, add it to the list\n\t\tif (BackgroundTexture) {\n\t\t\tDefaultBackgroundImages.Add(BackgroundTexture);\n\t\t}\n\t}\n}", "CodeBleu_score": 54.92119504992432}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Check if the animation should continue\n\tif (InCurrentTime < FadeOutStartTime) {\n\t\t// Set the text's alpha to the minimum value\n\t\tText->SetAlpha(MinAlpha);\n\t}\n\telse if (InCurrentTime < FadeOutEndTime) {\n\t\t// Calculate the current alpha value based on the elapsed time and animation speed\n\t\tfloat CurrentAlpha = (InCurrentTime - FadeOutStartTime) * FadeOutAnimationSpeed;\n\t\t// Set the text's alpha to the current alpha value\n\t\tText->SetAlpha(CurrentAlpha);\n\t}\n\telse if (InCurrentTime < FadeInStartTime) {\n\t\t// Set the text's alpha to the maximum value\n\t\tText->SetAlpha(MaxAlpha);\n\t}\n\telse if (InCurrentTime < FadeInEndTime) {\n\t\t// Calculate the current alpha value based on the elapsed time and animation speed\n\t\tfloat CurrentAlpha = (FadeInEndTime - InCurrentTime) * FadeInAnimationSpeed;\n\t\t// Set the text's alpha to the current alpha value\n\t\tText->SetAlpha(CurrentAlpha);\n\t}\n\telse {\n\t\t// Animation has completed, stop the timer\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\t// Animation is still in progress, continue the timer\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 34.76540598724088}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// If the animation is paused, return a status indicating the animation should continue.\n\tif (bIsAnimationPaused) {\n\t\treturn EActiveTimerReturnType::Continue;\n\t}\n\n\t// Calculate the elapsed time since the animation started.\n\tElapsedTime += InDeltaTime;\n\n\t// Calculate the alpha value based on the elapsed time and animation speed.\n\tfloat Alpha = FMath::FInterpTo(MinAlpha, MaxAlpha, ElapsedTime, AnimationSpeed);\n\n\t// If the alpha value is greater than the maximum, reverse the animation direction.\n\tif (Alpha > MaxAlpha) {\n\t\tAlpha = MaxAlpha;\n\t\tbReverseAnimation = true;\n\t}\n\n\t// If the alpha value is less than the minimum, reverse the animation direction.\n\telse if (Alpha < MinAlpha) {\n\t\tAlpha = MinAlpha;\n\t\tbReverseAnimation = false;\n\t}\n\n\t// Set the text's alpha value.\n\tLoadingCompleteText->SetOpacity(Alpha);\n\n\t// If the animation is complete, return a status indicating the animation should stop.\n\tif (Alpha == MaxAlpha) {\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\n\t// Return a status indicating the animation should continue.\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 49.484457168447165}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tif (InCurrentTime - LastTime > 0.0) {\n\t\t// calculate the new alpha value\n\t\tfloat NewAlpha = FMath::FInterpTo(CurrentAlpha, TargetAlpha, InDeltaTime, AnimationSpeed);\n\t\t// check if we've reached the target alpha\n\t\tif (FMath::IsNearlyEqual(NewAlpha, TargetAlpha, 0.001f)) {\n\t\t\t// if we have, check if we're done\n\t\t\tif (TargetAlpha == 0.0f) {\n\t\t\t\t// if we are, stop the timer\n\t\t\t\treturn EActiveTimerReturnType::Stop;\n\t\t\t}\n\t\t\t// otherwise, reverse the direction\n\t\t\telse {\n\t\t\t\tTargetAlpha = -TargetAlpha;\n\t\t\t}\n\t\t}\n\t\t// set the new alpha value\n\t\tText->SetOpacity(NewAlpha);\n\t\t// set the new time\n\t\tLastTime = InCurrentTime;\n\t}\n\t// continue the timer\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 32.275117508454585}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> lck(dataMutex);\n\treturn index != -1;\n}", "CodeBleu_score": 6.645267715050478}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> lk(dataMutex);\n\treturn index != -1;\n}", "CodeBleu_score": 6.5186700099947235}, {"code": "bool FRaceAwaiter::await_ready(){\n\t\tstd::unique_lock<std::mutex> lock(data->mutex);\n\treturn data->index != -1;\n}", "CodeBleu_score": 28.871399402416824}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (State == nullptr) {\n\t\treturn true;\n\t}\n\tPathfindingState* FindPathState = (PathfindingState*)State;\n\tif (FindPathState->QueryID == 0) {\n\t\treturn true;\n\t}\n\tif (bCleanup) {\n\t\tif (FindPathState->QueryID != 0) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Invalid QueryID\"));\n\t\t\tFindPathState->QueryID = 0;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 24.844580017741453}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\t// Check if the query ID is valid\n\tif (State == nullptr) {\n\t\treturn false;\n\t}\n\n\t// Check if cleanup is required\n\tif (bCleanup) {\n\t\t// Get the query ID\n\t\tint32 QueryID = *(int32*)State;\n\n\t\t// Check if the query ID is valid\n\t\tif (QueryID != -1) {\n\t\t\t// Abort the async find path request\n\t\t\tFindPathAsyncAbort(QueryID);\n\n\t\t\t// Delete the state\n\t\t\tdelete (int32*)State;\n\t\t}\n\n\t\t// Return false to indicate that the pathfinding should not resume\n\t\treturn false;\n\t}\n\n\t// Return true to indicate that the pathfinding should resume\n\treturn true;\n}", "CodeBleu_score": 23.95455243984772}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (State == nullptr) {\n\t\treturn false;\n\t}\n\tFNavPathFindingResult* PathResult = (FNavPathFindingResult*)State;\n\tif (PathResult->QueryID.IsValid()) {\n\t\tif (bCleanup) {\n\t\t\tPathResult->QueryID.AbortPathfinding();\n\t\t\tPathResult->QueryID = FNavPathQueryID();\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 25.794953813032173}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (get_viewport()->get_audio_listener_2d() != this) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (get_viewport()->get_audio_listener_2d() == this) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 58.90809037348282}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_inside_tree()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!is_current()) {\n\t\t\t\tif (is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_inside_tree()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 61.625845114655796}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_inside_tree() || is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (is_inside_tree() && get_viewport() && get_viewport()->get_audio_listener_2d() == this) {\n\t\t\t\t\tcurrent = true;\n\t\t\t\t\tget_viewport()->_audio_listener_2d_set(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_inside_tree() || is_inside_tree() && !is_part_of_edited_scene()) {\n\t\t\t\tif (is_inside_tree() && get_viewport() && get_viewport()->get_audio_listener_2d() == this) {\n\t\t\t\t\tcurrent = false;\n\t\t\t\t\tget_viewport()->_audio_listener_2d_remove(this);\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 56.016566421025296}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (audio_server_process_mode != AudioServer::AUDIO_DRIVER_PROCESS_MODE_DISABLED) {\n\t\treturn;\n\t}\n\n\tif (audio_server_thread) {\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\tint32_t *w = p_buffer;\n\n\twhile (todo) {\n\t\tint tomix = MIN(todo, CHUNK_SIZE);\n\n\t\tlock();\n\t\taudio_server_process(tomix, w, false);\n\t\tunlock();\n\n\t\tw += tomix;\n\t\ttodo -= tomix;\n\t}\n}", "CodeBleu_score": 32.834229318054795}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (thread_check) {\n\t\treturn;\n\t}\n\n\tif (!active) {\n\t\treturn;\n\t}\n\n\t// Update the mix time.\n\tupdate_mix_time(p_frames);\n\n\t// Process audio chunks.\n\twhile (p_frames > 0) {\n\t\t// Get the number of frames to process.\n\t\tconst int frames = MIN(chunk_size, p_frames);\n\n\t\t// Lock the audio driver.\n\t\tlock();\n\n\t\t// Process the audio frames.\n\t\taudio_server_process(frames, p_buffer, false);\n\n\t\t// Unlock the audio driver.\n\t\tunlock();\n\n\t\t// Advance.\n\t\tp_frames -= frames;\n\t\tp_buffer += frames * 2;\n\t}\n}", "CodeBleu_score": 23.163456023846578}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (thread_id != Thread::get_caller_id()) {\n\t\tif (thread_id != 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthread_id = Thread::get_caller_id();\n\t}\n\n\twhile (p_frames) {\n\t\tint tomix = MIN(chunk_size, p_frames);\n\t\tp_frames -= tomix;\n\n\t\tlock();\n\t\taudio_server_process(tomix, p_buffer, false);\n\t\tunlock();\n\n\t\tp_buffer += tomix * 2;\n\t}\n}", "CodeBleu_score": 30.268455577304703}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_is_point) {\n\t\tr_gravity = gravity_vector - p_position;\n\t\tr_gravity = r_gravity.normalized() * gravity_strength;\n\t} else {\n\t\tr_gravity = gravity_vector * gravity_strength;\n\t}\n}", "CodeBleu_score": 26.341980746867705}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_point.is_equal_approx(Vector2(0, 0))) {\n\t\tr_gravity = gravity_vec;\n\t} else {\n\t\tr_gravity = gravity_vec * (1.0 / (p_position - gravity_point).length_squared());\n\t}\n}", "CodeBleu_score": 20.776431069602545}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_point) {\n\t\tfloat distance_squared = (p_position - gravity_point).length_squared();\n\t\tr_gravity = gravity * (1.0 / distance_squared);\n\t} else {\n\t\tr_gravity = gravity;\n\t}\n}", "CodeBleu_score": 21.835046670227996}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < get_child_count(); i++) {\n\t\tif (get_child(i).is_connected(\"body_entered\", this, \"_body_entered\")) {\n\t\t\tget_child(i).call(\"body_entered\", this);\n\t\t}\n\t}\n}", "CodeBleu_score": 16.450756068817057}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < get_tree()->get_child_count(); i++) {\n\t\tNode* node = get_tree()->get_child(i);\n\t\tif (node->has_method(\"set_active\")) {\n\t\t\tif (node->cast_to<GodotBody2D>()->get_mode() == MODE_RIGID) {\n\t\t\t\tif (!node->cast_to<GodotBody2D>()->is_active()) {\n\t\t\t\t\tnode->cast_to<GodotBody2D>()->set_active(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.346477224797823}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < get_constraint_count(); i++) {\n\t\tGodotPhysics2DServer::get_singleton()->body_set_active(get_constraint_body(i), true);\n\t}\n}", "CodeBleu_score": 13.210101204956368}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space() && !get_space()->is_monitoring(this))  {\n\t\tget_space()->add_area(this);\n\t}\n}", "CodeBleu_score": 31.11231270001369}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (is_inside_tree() && get_viewport() && get_viewport()->is_monitoring_area(this) && !area_monitor_query) {\n\t\tarea_monitor_query = get_viewport()->make_current();\n\t\tarea_monitor_query->set_area(this);\n\t}\n}", "CodeBleu_score": 44.92460002843225}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t", "CodeBleu_score": 3.230831668935217}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (get_process_mode() == GODOT_BODY_MODE_STATIC) {\n\t\treturn;\n\t}\n\n\tTransform3D transform = get_transform();\n\tBasis inverse_inertia_tensor = transform.get_basis().transposed() * get_inverse_inertia_tensor() * transform.get_basis();\n\n\tset_mass(get_mass());\n\tset_center_of_mass(transform.xform(get_center_of_mass()));\n\tset_principal_inertia_axes(inverse_inertia_tensor.get_orthogonal_axes());\n\tset_inverse_inertia_tensor(inverse_inertia_tensor);\n}", "CodeBleu_score": 27.471995589075238}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\t// Update the center of mass and the principal axes\n\tVector3 com = get_transform().get_origin();\n\tVector3 axes[3];\n\tBasis basis = get_transform().get_basis();\n\tbasis.get_scale_and_shear(axes[0], axes[1], axes[2]);\n\tset_center_of_mass(com);\n\tset_principal_inertia_axes(axes);\n\n\t// Update the inertia tensor\n\tMatrix3 inertia = get_inv_inertia_tensor();\n\tfor (int i = 0; i < 3; i++) {\n\t\tfor (int j = 0; j < 3; j++) {\n\t\t\tinertia.set(i, j, 0.0);\n\t\t\tfor (int k = 0; k < 3; k++) {\n\t\t\t\tinertia.set(i, j, inertia.get(i, j) + axes[i].x * axes[j].x * inertia.get(k, k) + axes[i].y * axes[j].y * inertia.get(k, k) + axes[i].z * axes[j].z * inertia.get(k, k));\n\t\t\t}\n\t\t}\n\t}\n\tset_inv_inertia_tensor(inertia);\n}", "CodeBleu_score": 42.041240222229604}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tif (!get_physics_process())\n\t\treturn;\n\n\tTransform transform = get_global_transform();\n\tBasis inverse_inertia = get_inv_inertia_tensor();\n\tBasis principal_inertia = inverse_inertia.get_principal_inertia_axes();\n\n\t// Update center of mass\n\tVector3 center_of_mass = transform.xform(get_mass_center());\n\tset_center_of_mass(center_of_mass);\n\n\t// Update inertia tensor\n\tBasis inertia = inverse_inertia.xform(principal_inertia);\n\tset_inertia(inertia);\n}", "CodeBleu_score": 44.48280894215347}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton() && AudioServer::get_singleton()->is_audio_active()) {\n\t\tAudioServer::get_singleton()->audio_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 77.57338122151751}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tif (audio_server.is_valid()) {\n\t\taudio_server->audio_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 70.50921442239434}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tAudioServer *audio_server = AudioServer::get_singleton();\n\tif (!audio_server) {\n\t\treturn;\n\t}\n\n\taudio_server->lock();\n\taudio_server->audio_process(p_frames, p_buffer);\n\taudio_server->unlock();\n}", "CodeBleu_score": 66.20760119665447}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\tCameraFeed *feed = p_feed.ptr();\n\n\tfor (List<CameraFeed *>::Element *E = feeds.front(); E; E = E->next()) {\n\t\tif (E->get() == feed) {\n\t\t\tfeeds.erase(E);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Remove from the feed list.\n\tif (feed->get_id() >= 0) {\n\t\tfeed_map.erase(feed->get_id());\n\t}\n\n\t// Emit the signal.\n\temit_signal(\"feed_removed\", feed->get_id());\n}", "CodeBleu_score": 40.5000679320025}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(!p_feed.is_valid());\n\n\tfor (List<CameraFeed *>::Element *E = feeds.front(); E; E = E->next()) {\n\t\tCameraFeed *feed = E->get();\n\t\tif (feed == p_feed) {\n\t\t\tprint_line(\"Removing feed \" + itos(feed->get_id()));\n\t\t\tfeeds.erase(E);\n\t\t\tfeed_removed.emit(feed->get_id());\n\t\t\tmemdelete(feed);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 42.10940039283675}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\tif (p_feed->get_id() == 0) {\n\t\treturn;\n\t}\n\n\tfor (List<CameraFeed *>::Element *E = feeds.front(); E; E = E->next()) {\n\t\tif (E->get()->get_id() == p_feed->get_id()) {\n\t\t\tfeeds.erase(E);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\temit_signal(\"feed_removed\", p_feed->get_id());\n}", "CodeBleu_score": 38.4015020613358}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tassert(action != nullptr)\n\n\tauto easeRateAction = new EaseRateAction()\n\tif (easeRateAction->initWithAction(action, rate)) {\n\t\teaseRateAction->autorelease()\n\t\treturn easeRateAction\n\t}\n\tCC_SAFE_DELETE(easeRateAction)\n\treturn nullptr\n}", "CodeBleu_score": 49.30928242918549}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tassert(action != NULL);\n\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}", "CodeBleu_score": 51.82966243168941}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t\tassert(action != NULL);\n\tEaseRateAction *ret = new EaseRateAction();\n\tif (ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn NULL;\n}", "CodeBleu_score": 47.24914052134768}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->name == childName) {\n\t\treturn node;\n\t}\n\telse {\n\t\tfor (Node* child : node->children) {\n\t\t\tNode* result = findChildByNameRecursively(child, childName);\n\t\t\tif (result != nullptr) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 46.0390635716001}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\t// If the current node's name matches the target name, return the node.\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\t// Otherwise, recursively search through the node's children.\n\telse {\n\t\tfor (Node* child : node->getChildren()) {\n\t\t\tNode* foundNode = findChildByNameRecursively(child, childName);\n\t\t\tif (foundNode != nullptr) {\n\t\t\t\treturn foundNode;\n\t\t\t}\n\t\t}\n\t\t// If no matching node is found, return nullptr.\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 50.1594244571517}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\tfor (Node* child : node->getChildren()) {\n\t\tNode* result = findChildByNameRecursively(child, childName);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 48.62538066306913}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t\tif (target != NULL) {\n\t\tif (target->fade_in_animations.count(this) > 0) {\n\t\t\ttarget->fade_in_animations.erase(this);\n\t\t}\n\t\tif (target->fade_out_animations.count(this) > 0) {\n\t\t\ttarget->fade_out_animations.erase(this);\n\t\t}\n\t\tif (target->running_animations.count(this) > 0) {\n\t\t\ttarget->running_animations.erase(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 15.862780342856853}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (target == NULL) {\n\t\treturn;\n\t}\n\n\t// Remove the action from the fade-in map.\n\tif (fadeInMap.count(target) > 0) {\n\t\tfadeInMap.erase(target);\n\t}\n\n\t// Remove the action from the fade-out map.\n\tif (fadeOutMap.count(target) > 0) {\n\t\tfadeOutMap.erase(target);\n\t}\n\n\t// Remove the action from the running animation map.\n\tif (runningMap.count(target) > 0) {\n\t\trunningMap.erase(target);\n\t}\n}", "CodeBleu_score": 25.70399098257593}, {"code": "void Animate3D::removeFromMap(){\n\t\tif (target != NULL) {\n\t\tif (fade_in_map.count(target) > 0) {\n\t\t\tfade_in_map.erase(target);\n\t\t}\n\t\tif (fade_out_map.count(target) > 0) {\n\t\t\tfade_out_map.erase(target);\n\t\t}\n\t\tif (running_map.count(target) > 0) {\n\t\t\trunning_map.erase(target);\n\t\t}\n\t}\n}", "CodeBleu_score": 25.622691007662095}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = Animation3D::cache.get(key);\n\tif (animation == nullptr) {\n\t\tanimation = new Animation3D();\n\t\tif (!animation->init(fileName, animationName)) {\n\t\t\tdelete animation;\n\t\t\tanimation = nullptr;\n\t\t}\n\t\tAnimation3D::cache.add(key, animation);\n\t}\n\treturn animation;\n}", "CodeBleu_score": 41.73786813092264}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = Animation3D::getAnimation(key);\n\tif (animation == nullptr) {\n\t\tanimation = new Animation3D();\n\t\tif (animation->initialize(fileName, animationName) == false) {\n\t\t\tdelete animation;\n\t\t\tanimation = nullptr;\n\t\t}\n\t}\n\treturn animation;\n}", "CodeBleu_score": 38.54055878458359}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tstd::string key = fileName + animationName;\n\tAnimation3D* animation = cache.get(key);\n\tif (animation == NULL) {\n\t\tanimation = new Animation3D();\n\t\tif (!animation->init(fileName, animationName)) {\n\t\t\tdelete animation;\n\t\t\tanimation = NULL;\n\t\t} else {\n\t\t\tcache.add(key, animation);\n\t\t}\n\t}\n\treturn animation;\n}", "CodeBleu_score": 41.042941051588734}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto it = animationCache.begin(); it != animationCache.end(); it++) {\n\t\tAnimation3D* animation = it->second;\n\t\tif (animation->getReferenceCount() == 1) {\n\t\t\tanimation->release();\n\t\t\tanimationCache.erase(it);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.75209171155246}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto it = _animationCache.begin(); it != _animationCache.end();) {\n\t\tif (it->second.getReferenceCount() == 1) {\n\t\t\tit->second.release();\n\t\t\tit = _animationCache.erase(it);\n\t\t}\n\t\telse {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.07248970956161}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto it = _animationCache.begin(); it != _animationCache.end();) {\n\t\tif (it->second.use_count() == 1) {\n\t\t\tit = _animationCache.erase(it);\n\t\t}\n\t\telse {\n\t\t\tit++;\n\t\t}\n\t}\n}", "CodeBleu_score": 53.08415193768299}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *billBoard = new (std::nothrow) BillBoard();\n\tif (billBoard && billBoard->initWithTexture(texture, mode)) {\n\t\tbillBoard->autorelease();\n\t\treturn billBoard;\n\t}\n\tCC_SAFE_DELETE(billBoard);\n\treturn nullptr;\n}", "CodeBleu_score": 63.09988292711358}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *billBoard = new (std::nothrow) BillBoard();\n\tif (billBoard && billBoard->initWithTexture(texture, mode)) {\n\t\tbillBoard->autorelease();\n\t\treturn billBoard;\n\t}\n\tCC_SAFE_DELETE(billBoard);\n\treturn nullptr;\n}", "CodeBleu_score": 63.09988292711358}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *billBoard = new (std::nothrow) BillBoard();\n\tif (billBoard && billBoard->initWithTexture(texture, mode)) {\n\t\tbillBoard->autorelease();\n\t\treturn billBoard;\n\t}\n\tCC_SAFE_DELETE(billBoard);\n\treturn nullptr;\n}", "CodeBleu_score": 63.09988292711358}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t\tif (path.empty() || _path == path)\n\t\treturn true;\n\n\t_path = path;\n\n\tif (FileUtils::getInstance()->isFileExist(_path)) {\n\t\tstd::string ext = FileUtils::getInstance()->getFileExtension(_path);\n\t\tif (ext == \"c3b\")\n\t\t\treturn loadBinary(_path);\n\t\telse if (ext == \"c3t\")\n\t\t\treturn loadJson(_path);\n\t\telse {\n\t\t\tCCLOG(\"warning: Unknown file extension: %s\", _path.c_str());\n\t\t\treturn false;\n\t\t}\n\t}\n\telse {\n\t\tCCLOG(\"warning: File not found: %s\", _path.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 47.16406957790673}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\tif (path.empty() || _path == path)\n\t\treturn true;\n\n\tclear();\n\n\t_path = path;\n\n\tstd::string ext = FileUtils::getInstance()->getFileExtension(_path);\n\n\tif (ext == \".c3t\")\n\t\treturn loadJson(_path);\n\telse if (ext == \".c3b\")\n\t\treturn loadBinary(_path);\n\n\tCCLOG(\"warning: Unknown bundle format: %s\", path.c_str());\n\treturn false;\n}", "CodeBleu_score": 40.7161727203933}, {"code": "bool Bundle3D::load(const std::string& path){\n\t\tif (path.empty() || _path == path)\n\t\treturn true;\n\n\t_path = path;\n\t_modelPath = \"\";\n\n\t// Determine file extension\n\tsize_t pos = path.find_last_of('.');\n\tif (pos == std::string::npos) {\n\t\tCCLOG(\"warning: Invalid file extension: %s\", path.c_str());\n\t\treturn false;\n\t}\n\n\tstd::string ext = path.substr(pos + 1);\n\tif (ext == \"c3t\") {\n\t\treturn loadJson(path);\n\t}\n\telse if (ext == \"c3b\") {\n\t\treturn loadBinary(path);\n\t}\n\telse {\n\t\tCCLOG(\"warning: Invalid file extension: %s\", path.c_str());\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 51.63727544337685}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t#ifdef CC_USE_JSON_PARSER\n    if (_isBinary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n#else\n    return loadSkinDataBinary(skindata);\n#endif\n}", "CodeBleu_score": 58.15526966526119}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t//    skindata->reset();\n    if (_isBinary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 52.46189890618764}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t//    CCLOG(\"Bundle3D::loadSkinData\");\n    skindata->reset();\n    bool ret = true;\n    if (_isBinary)\n        ret = loadSkinDataBinary(skindata);\n    else\n        ret = loadSkinDataJson(skindata);\n\n    return ret;\n}", "CodeBleu_score": 63.14039825401706}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t bytesRead = fread(ptr, size, nmemb, decoder->file);\n\tdecoder->filePos += bytesRead;\n\treturn bytesRead;\n}", "CodeBleu_score": 34.09717901875064}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*) datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tif (decoder->fileSize - decoder->filePos < bytesToRead) {\n\t\tbytesToRead = decoder->fileSize - decoder->filePos;\n\t}\n\tif (bytesToRead) {\n\t\tmemcpy(ptr, decoder->fileData + decoder->filePos, bytesToRead);\n\t\tdecoder->filePos += bytesToRead;\n\t}\n\treturn bytesToRead;\n}", "CodeBleu_score": 47.097978089043714}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tsize_t bytesToRead = size * nmemb;\n\tsize_t bytesRead = 0;\n\n\tif (decoder->remainingDataSize > 0) {\n\t\tif (bytesToRead > decoder->remainingDataSize) {\n\t\t\tbytesToRead = decoder->remainingDataSize;\n\t\t}\n\n\t\tmemcpy(ptr, decoder->remainingData, bytesToRead);\n\t\tdecoder->remainingData += bytesToRead;\n\t\tdecoder->remainingDataSize -= bytesToRead;\n\t\tbytesRead = bytesToRead;\n\t}\n\n\treturn bytesRead;\n}", "CodeBleu_score": 46.15419174658285}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\t_pcmBuffer = std::shared_ptr<std::vector<uint8_t>>(new std::vector<uint8_t>(4096));\n}", "CodeBleu_score": 22.217182105334928}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\t_pcmBuffer = std::make_shared<std::vector<char>>(4096);\n}", "CodeBleu_score": 21.84595977507128}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\t_pcmBuffer = std::make_shared<std::vector<char>>(4096);\n}", "CodeBleu_score": 21.84595977507128}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> lock(downloaderMapMutex);\n\n\tauto it = downloaderMap.find(id);\n\tif (it != downloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\telse {\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 68.02388230632484}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::unique_lock<std::mutex> lock(mapMutex);\n\tauto it = mapDownloaderAndroid.find(id);\n\tif (it != mapDownloaderAndroid.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 58.44326253884056}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::unique_lock<std::mutex> lock(_downloaderMapMutex);\n\tauto it = _downloaderMap.find(id);\n\tif (it != _downloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 59.971419514751865}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename)\n\telse\n\t\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop)\n\tend", "CodeBleu_score": 46.2982235126695}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then \n\t\tisLoop = false \n\tend \n\taudioEngine:playMusic(filename, isLoop) ", "CodeBleu_score": 35.22519027734958}, {"code": "function M.playMusic(filename, isLoop)\n\t\tif isLoop == nil then \n\t\tisLoop = false \n\tend \n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, isLoop) ", "CodeBleu_score": 45.772203717465544}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\treturn self._detect()", "CodeBleu_score": 5.110276168861432}, {"code": "function ccs.TriggerObj:detect()\n\t\treturn self._detect()", "CodeBleu_score": 5.110276168861432}, {"code": "function ccs.TriggerObj:detect()\n\t\treturn self._detect()", "CodeBleu_score": 5.110276168861432}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t\nend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\t\nend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\t\nend\n", "CodeBleu_score": 4.959221278886332}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = target:getOrCreateComponent(\"BillboardSet\")\n\thurtEffect.numBillboards = 1\n\thurtEffect.texture = hurtAnimation\n\thurtEffect.size = 0.7\n\thurtEffect.relative = true\n\thurtEffect.position = Vector3(0.0, 1.0, 0.0)\n\thurtEffect.material = material\n\thurtEffect.sortValue = 100\n\thurtEffect.enabled = true\n\thurtEffect.animationEnabled = true\n\thurtEffect.animationSpeed = 1.0\n\thurtEffect.numAnimationLoops = 1\n\thurtEffect.animationTime = 0.2\n\thurtEffect.minAlpha = 0.5\n\thurtEffect.maxAlpha = 0.5\n\thurtEffect.startColor = Color(1.0, 0.0, 0.0, 0.0)\n\thurtEffect.endColor = Color(1.0, 0.0, 0.0, 0.0)\n\thurtEffect.blendMode = BlendMode.BLEND_ALPHA\n\thurtEffect.priority = 1\n\thurtEffect.isScreenSpace = true\n\thurtEffect.cameraMask = 255\n\thurtEffect.animationStartOffset = 0.0\n\thurtEffect.animationEndOffset = 0.0\n\thurtEffect.animationTriggers = {\"hurt\"}\n\thurtEffect.animationEventSender = target\n\thurtEffect.animationEventTarget = target", "CodeBleu_score": 32.179734946932825}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = self.hurtEffect\n\tif hurtEffect == nil then\n\t\thurtEffect = self:createHurtEffect()\n\t\tself.hurtEffect = hurtEffect\n\tend\n\t\n\thurtEffect.position = target.position\n\thurtEffect.scale = target.scale\n\thurtEffect.rotation = target.rotation\n\thurtEffect.visible = true\n\thurtEffect.animation:play()\n\thurtEffect.billboard:show()\n\thurtEffect.cameraMask = 1\n\thurtEffect.parent = target", "CodeBleu_score": 41.66205508091541}, {"code": "function BasicCollider:hurtEffect(target)\n\t\tlocal hurtEffect = nil\n\tif self.hurtEffect == nil then\n\t\tself.hurtEffect = Core.getBillboardGroup(\"hurtEffect\")\n\t\tself.hurtEffect.visible = false\n\tend\n\tif self.hurtEffect.visible == false then\n\t\thurtEffect = self.hurtEffect:getBillboard()\n\t\thurtEffect:setAnimation(\"hurtAnimation\")\n\t\thurtEffect:setScale(Vector3(1, 1, 1))\n\t\thurtEffect:setLocalPosition(Vector3(0, 0, 0))\n\t\thurtEffect:play()\n\t\thurtEffect:setCameraMask(2)\n\t\thurtEffect:setDepthTest(false)\n\t\thurtEffect:setDepthWrite(false)\n\t\thurtEffect:setPriority(1000)\n\t\thurtEffect:setRenderQueue(1000)\n\t\thurtEffect:setLoopMode(Core.RenderLoopMode.Once)\n\t\ttarget:addChild(hurtEffect)\n\t\tself.hurtEffect.visible = true\n\tend", "CodeBleu_score": 46.70892963230111}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t\tself.mageNormalAttackEffect:stop()\n\tself.mageNormalAttackEffect2:stop()\n\tlocal particleEffect = ParticleEffect(self.mageNormalAttackEffectName, self.mageNormalAttackEffect)\n\tparticleEffect:setOffset(0, 2, 0)\n\tparticleEffect:setScale(1.0)\n\tparticleEffect:setParticleSize(1.0)\n\tparticleEffect:setParticleSizeVariation(0.5)\n\tparticleEffect:setEmissionRate(10)\n\tparticleEffect:setLoop(false)\n\tparticleEffect:play()\n\tparticleEffect:setOwner(self)\n\tlocal particleEffect2 = ParticleEffect(self.mageNormalAttackEffectName2, self.mageNormalAttackEffect2)\n\tparticleEffect2:setOffset(0, 2, 0)\n\tparticleEffect2:setScale(1.0)\n\tparticleEffect2:setParticleSize(1.0)\n\tparticleEffect2:setParticleSizeVariation(0.5)\n\tparticleEffect2:setEmissionRate(10)\n\tparticleEffect2:setLoop(false)\n\tparticleEffect2:play()\n\tparticleEffect2:setOwner(self)\n\tlocal sequence = Sequence()\n\tsequence:add(DelayTime(0.5))\n\tsequence:add(Func(self.mageNormalAttackEffect.destroy))\n\tsequence:add(Func(self.mageNormalAttackEffect2.destroy))\n\tsequence:add(Func(self.removeNode))\n\tsequence:add(Func(self.createEffect))\n\tsequence:add(Func(self.updateSprite))\n\tsequence:add(Func(self.fadeOut))\n\tsequence:add(Func(self.adjustScale))\n\tsequence:start()", "CodeBleu_score": 39.76682529592298}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.mage.mage.mage_attack_1:stop()\n\tself.mage.mage.mage_attack_2:stop()\n\tself.mage.mage.mage_attack_3:stop()\n\tself.mage.mage.mage_attack_4:stop()\n\tself.mage.mage.mage_attack_5:stop()\n\tself.mage.mage.mage_attack_6:stop()\n\tself.mage.mage.mage_attack_7:stop()\n\tself.mage.mage.mage_attack_8:stop()\n\tself.mage.mage.mage_attack_9:stop()\n\tself.mage.mage.mage_attack_10:stop()\n\tself.mage.mage.mage_attack_11:stop()\n\tself.mage.mage.mage_attack_12:stop()\n\tself.mage.mage.mage_attack_13:stop()\n\tself.mage.mage.mage_attack_14:stop()\n\tself.mage.mage.mage_attack_15:stop()\n\tself.mage.mage.mage_attack_16:stop()\n\tself.mage.mage.mage_attack_17:stop()\n\tself.mage.mage.mage_attack_18:stop()\n\tself.mage.mage.mage_attack_19:stop()\n\tself.mage.mage.mage_attack_20:stop()\n\tself.mage.mage.mage_attack_21:stop()\n\tself.mage.mage.mage_attack_22:stop()\n\tself.mage.mage.mage_attack_23:stop()\n\tself.mage.mage.mage_attack_24:stop()\n\tself.mage.mage.mage_attack_25:stop()\n\tself.mage.mage.mage_attack_26:stop()\n\tself.mage.mage.mage_attack_27:stop()\n\tself.mage.mage.mage_attack_28:stop()\n\tself.mage.mage.mage_attack_29:stop()\n\tself.mage.mage.mage_attack_30:stop()\n\tself.mage.mage.mage_attack_", "CodeBleu_score": 16.887561738595046}, {"code": "function MageNormalAttack:onTimeOut()\n\t\tself.mageNormalAttackEffect:stop()\n\tself.mageNormalAttackEffect2:stop()\n\tlocal function cleanup()\n\t\tself.mageNormalAttackEffect:destroy()\n\t\tself.mageNormalAttackEffect2:destroy()\n\t\tself:destroy()\n\tend\n\tlocal function doFadeOut()\n\t\tself.mageNormalAttackSprite:runAction(cc.FadeOut:create(0.5))\n\tend\n\tself:runAction(cc.Sequence:create(cc.DelayTime:create(1), cc.CallFunc:create(doFadeOut), cc.DelayTime:create(0.5), cc.CallFunc:create(cleanup)))\n\tself.mageNormalAttackSprite:setTexture(\"res/img/fireball.png\")\n\tself.mageNormalAttackSprite:setScale(0.75)", "CodeBleu_score": 42.87592225609336}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\thero.image:SetShader(\"models/effects/combat_knight_dead.vmt\")\n\t\thero.image:SetRenderMode(RENDERMODE_TRANSALPHA)\n\t\thero.image:SetAlpha(128)\n\t\thero.frame:SetAlpha(128)\n\telseif hero.name == \"Mage\" then\n\t\thero.image:SetShader(\"models/effects/combat_mage_dead.vmt\")\n\t\thero.image:SetRenderMode(RENDERMODE_TRANSALPHA)\n\t\thero.image:SetAlpha(128)\n\t\thero.frame:SetAlpha(128)\n\telseif hero.name == \"Archer\" then\n\t\thero.image:SetShader(\"models/effects/combat_archer_dead.vmt\")\n\t\thero.image:SetRenderMode(RENDERMODE_TRANSALPHA)\n\t\thero.image:SetAlpha(128)\n\t\thero.frame:SetAlpha(128)\n\tend\n\thero.angerFullSignal:SetHidden(true)\n\thero.angerClone:SetHidden(true)", "CodeBleu_score": 36.545199220475595}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\thero.frame:SetBackdropColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame:SetBackdropBorderColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame.portrait:SetVertexColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame.portrait:SetDesaturated(1)\n\t\thero.frame.portrait:SetAlpha(0.5)\n\t\thero.frame.portrait:SetVertexColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame.portrait:SetDesaturated(1)\n\t\thero.frame.portrait:SetAlpha(0.5)\n\t\thero.frame.portrait:SetVertexColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame.portrait:SetDesaturated(1)\n\t\thero.frame.portrait:SetAlpha(0.5)\n\t\thero.frame.portrait:SetVertexColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame.portrait:SetDesaturated(1)\n\t\thero.frame.portrait:SetAlpha(0.5)\n\t\thero.frame.portrait:SetVertexColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame.portrait:SetDesaturated(1)\n\t\thero.frame.portrait:SetAlpha(0.5)\n\t\thero.frame.portrait:SetVertexColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame.portrait:SetDesaturated(1)\n\t\thero.frame.portrait:SetAlpha(0.5)\n\t\thero.frame.portrait:SetVertexColor(0.2, 0.2, 0.2, 1)\n\t\thero.frame.portrait:SetDesaturated(1)\n\t\thero.frame.portrait:SetAlpha(0.5)\n\t\thero.frame.portrait:SetVertexColor(0.2, 0.2, 0.2, 1)\n\t\thero", "CodeBleu_score": 34.80498353442091}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero.name == \"Knight\" then\n\t\thero.image:SetShader(\"models/battlefield/battle_ui_knight_dead\")\n\t\thero.frame:SetShader(\"models/battlefield/battle_ui_knight_dead\")\n\t\thero.angerFull:SetVisible(false)\n\t\thero.angerClone:SetVisible(false)\n\telseif hero.name == \"Mage\" then\n\t\thero.image:SetShader(\"models/battlefield/battle_ui_mage_dead\")\n\t\thero.frame:SetShader(\"models/battlefield/battle_ui_mage_dead\")\n\t\thero.angerFull:SetVisible(false)\n\t\thero.angerClone:SetVisible(false)\n\telseif hero.name == \"Archer\" then\n\t\thero.image:SetShader(\"models/battlefield/battle_ui_archer_dead\")\n\t\thero.frame:SetShader(\"models/battlefield/battle_ui_archer_dead\")\n\t\thero.angerFull:SetVisible(false)\n\t\thero.angerClone:SetVisible(false)\n\tend", "CodeBleu_score": 44.130332738591946}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tif activeCamera == \"none\" then\n\t\treturn\n\tend\n\n\tlocal focusPoint = Vector3(0, 0, 0)\n\tlocal focusPointHeroes = Vector3(0, 0, 0)\n\n\tif activeCamera == \"followHeroes\" then\n\t\tfocusPointHeroes = getFocusPointOfHeros()\n\t\tfocusPoint = focusPointHeroes\n\telseif activeCamera == \"followHero\" then\n\t\tfocusPointHeroes = getFocusPointOfHeros()\n\t\tfocusPoint = focusPointHeroes\n\telseif activeCamera == \"followSpecial\" then\n\t\tfocusPoint = getPosTable(cameraFocusPoint)\n\telseif activeCamera == \"followHeroesWithOffset\" then\n\t\tfocusPointHeroes = getFocusPointOfHeros()\n\t\tfocusPoint = focusPointHeroes + cameraOffset\n\tend\n\n\tif activeCamera == \"followHero\" then\n\t\tlocal hero = heroes.getMyHero()\n\t\tif hero then\n\t\t\tfocusPoint = hero:getPos()\n\t\tend\n\tend\n\n\tif activeCamera == \"followHeroes\" then\n\t\tlocal hero = heroes.getMyHero()\n\t\tif hero then\n\t\t\tfocusPoint = hero:getPos()\n\t\tend\n\tend\n\n\tif activeCamera == \"followSpecial\" then\n\t\tlocal hero = heroes.getMyHero()\n\t\tif hero then\n\t\t\tfocusPoint = hero:getPos()\n\t\tend\n\tend\n\n\tif activeCamera == \"followHeroesWithOffset\" then\n\t\tlocal hero = heroes.getMyHero()\n\t\tif hero then\n\t\t\tfocusPoint = hero:getPos()\n\t\tend\n\tend\n\n\tlocal cameraPos = camera:getPos()\n\tlocal cameraPosTarget = cameraPos + (focusPoint - cameraPos) * cameraSpeed * dt\n\tcamera:setPos(cameraPosTarget)\n\n\tlocal cameraRot = camera:getRot()\n\tlocal cameraRotTarget = cameraRot\n\tif activeCamera == \"followHeroes\" then\n\t\tcameraRotTarget = cameraRot + (focusPointHeroes - cameraPos) * cameraSpeed * dt\n\tend\n\tcamera:setRot(cameraRotTarget)", "CodeBleu_score": 38.63221761905717}, {"code": "local function moveCamera(dt)\n\t\tif (cameraMode == 1) then\n\t\tcameraPos = cameraPos + (cameraTarget - cameraPos) * dt * 10\n\t\tcameraLookAt = cameraLookAt + (cameraFocusPoint - cameraLookAt) * dt * 10\n\telseif (cameraMode == 2) then\n\t\tcameraPos = cameraPos + (cameraTarget - cameraPos) * dt * 5\n\t\tcameraLookAt = cameraLookAt + (cameraFocusPoint - cameraLookAt) * dt * 5\n\tend\n\tcam:setPos(cameraPos)\n\tcam:lookAt(cameraLookAt)", "CodeBleu_score": 13.212297455468603}, {"code": "local function moveCamera(dt)\n\t\tlocal heroes = getHeroes()\n\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\tlocal posTable = getPosTable()\n\n\tif (specialCamera) then\n\t\tlocal x, y = interpolate(posTable.x, specialCamera.x, dt, specialCamera.speed)\n\t\tlocal z = interpolate(posTable.z, specialCamera.z, dt, specialCamera.speed)\n\t\tlocal angle = interpolate(posTable.angle, specialCamera.angle, dt, specialCamera.speed)\n\t\tlocal angleX, angleY = getAngle(angle)\n\t\tlocal angleZ = 0\n\t\tsetCameraPosition(x, y, z)\n\t\tsetCameraRotation(angleX, angleY, angleZ)\n\telse\n\t\tlocal x, y = interpolate(posTable.x, focusPoint.x, dt, cameraSpeed)\n\t\tlocal z = interpolate(posTable.z, focusPoint.z, dt, cameraSpeed)\n\t\tlocal angle = interpolate(posTable.angle, focusPoint.angle, dt, cameraSpeed)\n\t\tlocal angleX, angleY = getAngle(angle)\n\t\tlocal angleZ = 0\n\t\tsetCameraPosition(x, y, z)\n\t\tsetCameraRotation(angleX, angleY, angleZ)\n\tend", "CodeBleu_score": 39.065412977546806}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor i = 1, HeroManager:GetNumHeroes() do\n\t\tlocal hero = HeroManager:GetHero(i)\n\t\tlocal effect = GetUnitController(hero)\n\t\tif effect then\n\t\t\teffect.SetAbsOrigin(hero:GetAbsOrigin())\n\t\tend\n\tend", "CodeBleu_score": 37.12893596498788}, {"code": "local function updateParticlePos()\n\t\tfor i = 1, GetNumHeroes() do\n\t\tlocal hero = GetHeroes()[i]\n\t\tif hero.particleEffect then\n\t\t\tlocal pos = GetUnitToUnitDistance(hero, hero.particleEffect)\n\t\t\tSetUnitPosition(hero.particleEffect, pos.x, pos.y)\n\t\tend\n\tend", "CodeBleu_score": 35.992038881184165}, {"code": "local function updateParticlePos()\n\t\tfor i = 1, GetNumHeroes() do\n\t\tlocal hero = GetHeroes()[i]\n\t\tlocal posTable = getPosTable(hero)\n\t\tif posTable then\n\t\t\tlocal effectNode = GetUnitLoc(hero)\n\t\t\tif effectNode then\n\t\t\t\tSetUnitLoc(effectNode, posTable.x, posTable.y)\n\t\t\t\tSetUnitFacing(effectNode, posTable.facing)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 41.66497783521544}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.roleSelect:getSelected()\n\tlocal race = hero.race\n\tif race == \"knight\" then\n\t\taudio.play(self.knightAudio)\n\telseif race == \"archer\" then\n\t\taudio.play(self.archerAudio)\n\telseif race == \"mage\" then\n\t\taudio.play(self.mageAudio)\n\tend", "CodeBleu_score": 39.73937722660934}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.roleList:getSelectedItem().tag\n\tlocal raceType = Hero.getRace(hero)\n\tif raceType == \"Knight\" then\n\t\tself.audio:play(\"knight\")\n\telseif raceType == \"Archer\" then\n\t\tself.audio:play(\"archer\")\n\telseif raceType == \"Mage\" then\n\t\tself.audio:play(\"mage\")\n\tend", "CodeBleu_score": 42.361848474797455}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.heroes[self.currentHeroTag]\n\tlocal race = hero.race\n\n\tif race == \"Knight\" then\n\t\taudio.play(self.knightAudio)\n\telseif race == \"Archer\" then\n\t\taudio.play(self.archerAudio)\n\telseif race == \"Mage\" then\n\t\taudio.play(self.mageAudio)\n\tend", "CodeBleu_score": 39.11605846048351}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Hero(\"knight\", \"Knight\", 100, 100, 100, 100, 100, 100)\n\tlocal mage = Hero(\"mage\", \"Mage\", 100, 100, 100, 100, 100, 100)\n\tlocal archer = Hero(\"archer\", \"Archer\", 100, 100, 100, 100, 100, 100)\n\n\tlocal knight_pos = Vector2(100, 100)\n\tlocal mage_pos = Vector2(100, 100)\n\tlocal archer_pos = Vector2(100, 100)\n\n\tlocal knight_layer = self.current_layer\n\tlocal mage_layer = self.current_layer\n\tlocal archer_layer = self.current_layer\n\n\tknight.SetPosition(knight_pos)\n\tmage.SetPosition(mage_pos)\n\tarcher.SetPosition(archer_pos)\n\n\tknight.SetLayer(knight_layer)\n\tmage.SetLayer(mage_layer)\n\tarcher.SetLayer(archer_layer)\n\n\tknight.SetState(\"idle\")\n\tmage.SetState(\"idle\")\n\tarcher.SetState(\"idle\")\n\n\tself.hero_manager:AddHero(knight)\n\tself.hero_manager:AddHero(mage)\n\tself.hero_manager:AddHero(archer)", "CodeBleu_score": 37.95775832582117}, {"code": "function GameMaster:AddHeros()\n\t\tlocal Knight = Hero(\"Knight\")\n\tlocal Mage = Hero(\"Mage\")\n\tlocal Archer = Hero(\"Archer\")\n\tlocal Heroes = {Knight, Mage, Archer}\n\tfor _, Hero in pairs(Heroes) do\n\t\tHero.Position = Vector2(200, 200)\n\t\tHero.Layer = self.CurrentLayer\n\t\tHero.Mode = \"Idle\"\n\t\tHero.HeroManager = self\n\t\tself.HeroManager:Push(Hero)\n\tend", "CodeBleu_score": 25.52657134616883}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Hero(self.knightSprite, 100, 200)\n\tlocal mage = Hero(self.mageSprite, 200, 200)\n\tlocal archer = Hero(self.archerSprite, 300, 200)\n\tknight.layer = self.currentLayer\n\tmage.layer = self.currentLayer\n\tarcher.layer = self.currentLayer\n\tself.heroManager:Add(knight)\n\tself.heroManager:Add(mage)\n\tself.heroManager:Add(archer)", "CodeBleu_score": 34.45472788377012}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat(self.level)\n\tboss.cameraMask = MASK_MONSTER\n\tboss.layer = self.currentLayer\n\tboss.x = self.currentLayer.width / 2\n\tboss.y = self.currentLayer.height / 2\n\tboss.facing = RIGHT\n\tboss.aiEnabled = false\n\tboss:bounceOut()\n\tself.monsterManager:add(boss)", "CodeBleu_score": 30.755980931127503}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat(self.boss)\n\tboss.cameraMask = self.cameraMask\n\tboss.layer = self.currentLayer\n\tboss.x = self.currentLayer.width / 2\n\tboss.y = self.currentLayer.height / 2\n\tboss.direction = \"down\"\n\tboss.aiEnabled = false\n\tboss:bounceOut()\n\tboss.aiEnabled = true\n\tself.monsterManager:add(boss)", "CodeBleu_score": 36.279034056642544}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat()\n\tboss.mask = MASK_MONSTER\n\tboss.x = 100\n\tboss.y = 100\n\tboss.facing = 1\n\tboss.aiEnabled = false\n\tboss:bounceOut()\n\tboss.aiEnabled = true\n\tself.monsterManager:add(boss)", "CodeBleu_score": 24.181502029940948}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D()\n\tanimation:load(file)\n\tanimation.speed = speed\n\tanimation.animate3d = Animate3D(animation, begin, finish)\n\treturn animation", "CodeBleu_score": 35.080301619887486}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D(file)\n\tlocal animate = Animate3D(animation, begin, finish)\n\tanimate.speed = speed\n\treturn animate", "CodeBleu_score": 33.17100108991521}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = Animation3D()\n\tanimation:load(file)\n\tlocal animate = Animate3D(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\treturn animate", "CodeBleu_score": 37.08511306967878}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor i,v in pairs(table) do \n\t\ttable[i]=nil \n\tend ", "CodeBleu_score": 32.87425556779848}, {"code": "function removeAll(table)\n\t\tfor i=#table, 1, -1 do \n\t\ttable.remove(table, i)\n\tend ", "CodeBleu_score": 26.0496704491731}, {"code": "function removeAll(table)\n\t\ttable.remove(table, 1)", "CodeBleu_score": 14.085632593070436}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.DelayTime:create(delay)\n\tlocal seq = cc.Sequence:create(action, func, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 56.502236631441015}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.DelayTime:create(delay)\n\tlocal seq = cc.Sequence:create(action, func, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 56.502236631441015}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal action = cc.DelayTime:create(delay)\n\tlocal seq = cc.Sequence:create(action, func, nil)\n\ttarget:runAction(seq)", "CodeBleu_score": 56.502236631441015}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal font = love.graphics.newFont(\"fonts/BebasNeue-Regular.ttf\", 60)\n\tlocal loadingText = love.graphics.newText(font, \"Loading...\")\n\tlocal loadingTextWidth = loadingText:getWidth()\n\tlocal loadingTextHeight = loadingText:getHeight()\n\tlocal loadingTextX = (self.windowWidth - loadingTextWidth) / 2\n\tlocal loadingTextY = (self.windowHeight - loadingTextHeight) / 2\n\tloadingText:setPosition(loadingTextX, loadingTextY)\n\tlayer:add(loadingText)\n\tself._loading = {\n\t\tlayer = layer,\n\t\ttext = loadingText,\n\t\twidth = loadingTextWidth,\n\t\theight = loadingTextHeight,\n\t\tx = loadingTextX,\n\t\ty = loadingTextY\n\t}", "CodeBleu_score": 31.236332213108664}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loadingFont = Font.create(\"assets/fonts/PressStart2P.ttf\", 24)\n\tlocal loadingText = Text.create(\"Loading...\", loadingFont)\n\tloadingText.position = Point.create(Display.contentCenter().x, Display.contentCenter().y)\n\tlayer:add(loadingText)\n\tself._loading = {\n\t\tlayer = layer,\n\t\ttext = loadingText\n\t}", "CodeBleu_score": 25.460826861441234}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal loading = { }\n\n\tlocal font = love.graphics.newFont(16)\n\n\tlocal loadingText = love.graphics.newText(font, \"Loading...\")\n\tloadingText:setPos(WIDTH / 2 - loadingText:getWidth() / 2, HEIGHT / 2 - loadingText:getHeight() / 2)\n\tlayer:add(loadingText)\n\tloading.text = loadingText\n\n\tlocal loadingText2 = love.graphics.newText(font, \"Please wait...\")\n\tloadingText2:setPos(WIDTH / 2 - loadingText2:getWidth() / 2, HEIGHT / 2 - loadingText2:getHeight() / 2 + 20)\n\tlayer:add(loadingText2)\n\tloading.text2 = loadingText2\n\n\treturn loading", "CodeBleu_score": 33.110563099986365}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = display.newScene()\n\tlocal layer = display.newLayer()\n\tscene:addChild(layer)\n\tMainMenuScene.init(layer)\n\treturn scene", "CodeBleu_score": 59.45854296192682}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.32233247160328}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = cc.Scene:create()\n\tlocal layer = MainMenuLayer.create()\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 60.32233247160328}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t --[[\n The function isCollision checks if a given object collides with any hero or monster.", "CodeBleu_score": 2.559490931101805}, {"code": "local function collision(object)\n\n\t\tlocal heroes = heroManager.getAliveHeroes()\n\tlocal monsters = monsterManager.getAliveMonsters()\n \n\tfor i, hero in ipairs(heroes) do\n\t\tif hero.x == object.x and hero.y == object.y then\n\t\t\tsolveCollision(hero, object)\n\t\tend\n\tend\n \n\tfor i, monster in ipairs(monsters) do\n\t\tif monster.x == object.x and monster.y == object.y then\n\t\t\tsolveCollision(monster, object)\n\t\tend\n\tend\n ", "CodeBleu_score": 38.01924230386277}, {"code": "local function collision(object)\n\n\t\t-- If the object is a hero, then check for collisions with monsters\n\tif object.type == \"hero\" then\n\t\tfor i,monster in pairs(monsters) do\n\t\t\tif checkCollision(object,monster) then\n\t\t\t\tsolveCollision(object,monster)\n\t\t\tend\n\t\tend\n \n\t-- If the object is a monster, then check for collisions with heroes\n\telseif object.type == \"monster\" then\n\t\tfor i,hero in pairs(heroes) do\n\t\t\tif checkCollision(object,hero) then\n\t\t\t\tsolveCollision(object,hero)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 30.41692423899624}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager,1,-1 do\n\t\tif HeroManager[i].isAlive then\n\t\t\tfor j=#MonsterManager,1,-1 do\n\t\t\t\tif MonsterManager[j].isAlive then\n\t\t\t\t\tif collision(HeroManager[i], MonsterManager[j]) then\n\t\t\t\t\t\tHeroManager[i].isAlive = false\n\t\t\t\t\t\tMonsterManager[j].isAlive = false\n\t\t\t\t\t\tHeroManager[i].deathSound:play()\n\t\t\t\t\t\tMonsterManager[j].deathSound:play()\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tif isOutOfBound(HeroManager[i]) then\n\t\t\t\tHeroManager[i].isAlive = false\n\t\t\t\tHeroManager[i].deathSound:play()\n\t\t\tend\n\t\telse\n\t\t\ttable.remove(HeroManager, i)\n\t\tend\n\tend", "CodeBleu_score": 34.35120919239889}, {"code": "function collisionDetect(dt)\n\t\tif #heroManager > 0 then\n\t\tfor i=#heroManager, 1, -1 do\n\t\t\tlocal hero = heroManager[i]\n\t\t\tif hero.isAlive then\n\t\t\t\tif hero.isColliding then\n\t\t\t\t\thero.isColliding = false\n\t\t\t\tend\n\t\t\t\tfor j=#monsterManager, 1, -1 do\n\t\t\t\t\tlocal monster = monsterManager[j]\n\t\t\t\t\tif monster.isAlive then\n\t\t\t\t\t\tif hero.isColliding then\n\t\t\t\t\t\t\thero.isColliding = false\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif hero.collision(hero, monster) then\n\t\t\t\t\t\t\thero.isColliding = true\n\t\t\t\t\t\t\tmonster.isColliding = true\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\ttable.remove(monsterManager, j)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif hero.isColliding then\n\t\t\t\t\thero.isColliding = false\n\t\t\t\tend\n\t\t\t\tif hero.isOutOfBound then\n\t\t\t\t\thero.isOutOfBound = false\n\t\t\t\tend\n\t\t\t\thero.update(dt)\n\t\t\telse\n\t\t\t\ttable.remove(heroManager, i)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 40.574490844502286}, {"code": "function collisionDetect(dt)\n\t\tfor i=#HeroManager,1,-1 do\n\t\tlocal hero = HeroManager[i]\n\t\tif hero.isAlive then\n\t\t\thero.collision(dt)\n\t\t\tif hero.isOutOfBound() then\n\t\t\t\thero.isAlive = false\n\t\t\t\tHeroManager[i] = nil\n\t\t\tend\n\t\telse\n\t\t\tHeroManager[i] = nil\n\t\tend\n\tend\n\tfor i=#MonsterManager,1,-1 do\n\t\tlocal monster = MonsterManager[i]\n\t\tif monster.isAlive then\n\t\t\tmonster.collision(dt)\n\t\t\tif monster.isOutOfBound() then\n\t\t\t\tmonster.isAlive = false\n\t\t\t\tMonsterManager[i] = nil\n\t\t\tend\n\t\telse\n\t\t\tMonsterManager[i] = nil\n\t\tend\n\tend", "CodeBleu_score": 36.80401982463324}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tlocal attack = Attack(self.attack.damage, self.attack.knockback, self.attack.range, self.attack.cooldown, self.attack.knockbackType)\n\tattack.collider = self.world:newCircleCollider(self.position, self.attack.range)\n\tattack.collider:setCollisionClass(\"Attack\")\n\tattack.collider.parent = self\n\tattack.collider:setLinearVelocity(self.direction * self.attack.speed)\n\tattack.collider.callback = attack.onCollision\n\tattack.collider:setCollisionClass(\"Attack\")\n\tself.attacks[attack.collider] = attack\n\tself.world:addCollider(attack.collider)\n\tself.world:update(0)\n\tself.attack.cooldown = self.attack.cooldownTimer\n\tself.attack.collider:setCollisionClass(\"Attack\")\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\tself.world:update(0)\n\t", "CodeBleu_score": 38.458937786293475}, {"code": "function Actor:specialAttack()\n\t\tif self.specialAttacking == false then\n\t\tself.specialAttacking = true\n\t\tself.specialAttackCollider = self.collider:newCircleCollider(self.x, self.y, self.specialAttackRange)\n\t\tself.specialAttackCollider.colliderType = \"specialAttack\"\n\t\tself.specialAttackCollider.parent = self\n\t\tself.specialAttackCollider.onCollision = self.specialAttackColliderCollision\n\t\tself.specialAttackCollider.onTrigger = self.specialAttackTriggerCollision\n\t\tself.specialAttackCollider.attacking = true\n\t\tself.specialAttackCollider.attackingActor = self\n\t\tself.specialAttackCollider.attackingWeapon = self.specialAttackWeapon\n\t\tself.specialAttackCollider.attackingWeapon.attacking = true\n\t\tself.specialAttackCollider.attackingWeapon.attackingActor = self\n\t\tself.specialAttackCollider.attackingWeapon.attackingWeapon = self.specialAttackWeapon\n\t\tself.specialAttackCollider.attackingWeapon.attackingCollider = self.specialAttackCollider\n\t\tself.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon = self.specialAttackWeapon\n\t\tself.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider = self.specialAttackCollider.attackingWeapon.attackingCollider\n\t\tself.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider.attackingWeapon = self.specialAttackWeapon\n\t\tself.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider = self.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider\n\t\tself.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider.attackingWeapon = self.specialAttackWeapon\n\t\tself.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider = self.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider\n\t\tself.specialAttackCollider.attackingWeapon.attackingCollider.attackingWeapon.attackingCollider.attackingWeapon.", "CodeBleu_score": 27.496770885004963}, {"code": "function Actor:specialAttack()\n\t\tlocal attack = self.specialAttack\n\tlocal x, y = self.x, self.y\n\tlocal w, h = attack.width, attack.height\n\tlocal dir = self.dir\n\tlocal speed = attack.speed\n\tlocal damage = attack.damage\n\tlocal knockback = attack.knockback\n\tlocal knockdir = self.dir\n\tlocal knockspeed = attack.knockspeed\n\tlocal knockmax = attack.knockmax\n\tlocal knockcount = 0\n\tlocal knockmaxcount = attack.knockmaxcount\n\tlocal knocksound = attack.knocksound\n\tlocal sound = attack.sound\n\tlocal sound2 = attack.sound2\n\tlocal sound3 = attack.sound3\n\tlocal sound4 = attack.sound4\n\tlocal sound5 = attack.sound5\n\tlocal sound6 = attack.sound6\n\tlocal sound7 = attack.sound7\n\tlocal sound8 = attack.sound8\n\tlocal sound9 = attack.sound9\n\tlocal sound10 = attack.sound10\n\tlocal sound11 = attack.sound11\n\tlocal sound12 = attack.sound12\n\tlocal sound13 = attack.sound13\n\tlocal sound14 = attack.sound14\n\tlocal sound15 = attack.sound15\n\tlocal sound16 = attack.sound16\n\tlocal sound17 = attack.sound17\n\tlocal sound18 = attack.sound18\n\tlocal sound19 = attack.sound19\n\tlocal sound20 = attack.sound20\n\tlocal sound21 = attack.sound21\n\tlocal sound22 = attack.sound22\n\tlocal sound23 = attack.sound23\n\tlocal sound24 = attack.sound24\n\tlocal sound25 = attack.sound25\n\tlocal sound26 = attack.sound26\n\tlocal sound27 = attack.sound27\n\tlocal sound28 = attack.sound28\n\tlocal sound29 = attack.sound29\n\tlocal sound30 = attack.sound30\n\tlocal sound31 = attack.sound31\n\tlocal sound32 = attack.sound32\n\tlocal sound33 =", "CodeBleu_score": 25.75167853547466}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse ~= self.angry then\n\t\tself.angry = trueFalse\n\t\tif trueFalse then\n\t\t\tself.sprite.texture = \"slime_angry\"\n\t\telse\n\t\t\tself.sprite.texture = \"slime\"\n\t\tend\n\tend", "CodeBleu_score": 50.95496041943057}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse == true then \n\t\tif self.angry == false then \n\t\t\tself.angry = true \n\t\t\tself.sprite:setGraphic(self.images[1])\n\t\tend\n\telseif trueFalse == false then \n\t\tif self.angry == true then \n\t\t\tself.angry = false \n\t\t\tself.sprite:setGraphic(self.images[2])\n\t\tend\n\tend", "CodeBleu_score": 41.625239821833446}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif trueFalse then\n\t\tif self.angry == false then\n\t\t\tself.angry = true\n\t\t\tself.sprite:setGraphic(self.angryTexture)\n\t\tend\n\telse\n\t\tif self.angry == true then\n\t\t\tself.angry = false\n\t\t\tself.sprite:setGraphic(self.defaultTexture)\n\t\tend\n\tend", "CodeBleu_score": 41.6841675081756}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\nval width = ceil(paint.measureText(char.toString())).toInt()\nval height = ceil(metric.height).toInt()\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\nval data = IntArray(width * height)\nbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\nfor (x in 0 until width) {\nfor (y in 0 until height) {\npixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n}\n}\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 82.38032707321112}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\nvar width = paint.measureText(char.toString()).toInt()\nvar height = ceil(metric.height).toInt()\nif (width == 0) {\nheight = getFontSize()\nwidth = height\n}\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\nval data = IntArray(width * height)\nbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\nfor (x in 0 until width) {\nfor (y in 0 until height) {\npixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n}\n}\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 85.1719151294859}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\nvar width = paint.measureText(char.toString()).toInt()\nvar height = ceil(metric.height).toInt()\nif (width == 0) {\nheight = getFontSize()\nwidth = height\n}\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\nval data = IntArray(width * height)\nbitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\nfor (x in 0 until width) {\nfor (y in 0 until height) {\npixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n}\n}\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 85.1719151294859}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 13.991633962012584}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n}", "CodeBleu_score": 19.45536830701614}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\nintent.type = \"application/json\"\nintent.putExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\")\nintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.75518805287992}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n\tintent.type = \"application/json\"\n\tintent.putExtra(Intent.EXTRA_TITLE, fileName)\n\tif (uri.scheme == \"content\")\n\t\tintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.80076040995861}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n\tintent.type = \"application/json\"\n\tintent.putExtra(Intent.EXTRA_TITLE, fileName)\n\tif (uri.scheme == \"content\")\n\t\tintent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n\tactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 96.80076040995861}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\nval name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\nval descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\nval importance = NotificationManager.IMPORTANCE_HIGH\nval mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\nmChannel.description = descriptionText\nmChannel.setShowBadge(true)\nmChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\nval notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\nnotificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 97.99820659160187}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\nval name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\nval descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\nval importance = NotificationManager.IMPORTANCE_HIGH\nval mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\nmChannel.description = descriptionText\nmChannel.setShowBadge(true)\nmChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\nval notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\nnotificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 97.99820659160187}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\nval name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\nval descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\nval importance = NotificationManager.IMPORTANCE_HIGH\nval mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\nmChannel.description = descriptionText\nmChannel.setShowBadge(true)\nmChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\nval notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\nnotificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 97.99820659160187}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}, {"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}, {"code": "fun packImages(workingPath: String){\n\t\n}", "CodeBleu_score": 1.537888354575527}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t\n}", "CodeBleu_score": 3.54716950179408}, {"code": "suspend fun reloadWorldscreen(){\n\t\n}", "CodeBleu_score": 3.54716950179408}, {"code": "suspend fun reloadWorldscreen(){\n\t\n}", "CodeBleu_score": 3.54716950179408}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenuScreen = MainMenuScreen()\n\tpushScreen(mainMenuScreen)\n\treturn mainMenuScreen\n}", "CodeBleu_score": 50.41317668144243}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tpushScreen(MainMenuScreen())\nreturn MainMenuScreen()\n}", "CodeBleu_score": 4.45823752320524}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t\tval mainMenuScreen = MainMenuScreen()\n\tpushScreen(mainMenuScreen)\n\treturn mainMenuScreen\n}", "CodeBleu_score": 50.41317668144243}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\n val maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\n val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n isAccessible = true\n get(Gdx.app) as Lwjgl3ApplicationConfiguration\n }.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.65958067098428}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\nisAccessible = true\nget(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.07133990723558}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n// Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n// *for the primary monitor* - no saving window sizes that span over several monitors\nval maximumWindowBounds = getMaximumWindowBounds()\n\n// Make sure an inappropriate saved size doesn't make the window unusable\nval (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n// Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n(Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\nisAccessible = true\nget(Gdx.app) as Lwjgl3ApplicationConfiguration\n}.setWindowedMode(width, height)\n\nGdx.graphics.setWindowedMode(width, height)\n\nreturn width == maximumWindowBounds.width && height == maximumWindowBounds.height\n}", "CodeBleu_score": 97.07133990723558}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\nFileHandle(\"/etc/os-release\")\n.readString()\n.split('\n')\n.map { it.split('=') }\n.filter { it.size == 2 }\n.associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n} catch (_: Throwable) { mapOf() }\nif (\"NAME\" !in osRelease) return \"\"\nreturn osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 88.36788902358757}, {"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\nFileHandle(\"/etc/os-release\")\n.readString()\n.split('\n')\n.map { it.split('=') }\n.filter { it.size == 2 }\n.associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n} catch (_: Throwable) { mapOf() }\nif (\"NAME\" !in osRelease) return \"\"\nreturn osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 88.36788902358757}, {"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n    FileHandle(\"/etc/os-release\")\n        .readString()\n        .split('\n')\n        .map { it.split('=') }\n        .filter { it.size == 2 }\n        .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n} catch (_: Throwable) { mapOf() }\nif (\"NAME\" !in osRelease) return \"\"\nreturn osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 91.62073017570533}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}, {"code": "private fun flashWindow(){\n\t\ttry {\n\t\tval window = window\n\t\tif (window != null) {\n\t\t\twindow.javaClass.getDeclaredMethod(\"flashWindow\").invoke(window)\n\t\t}\n\t} catch (e: Exception) {\n\t\te.printStackTrace()\n\t}\n}", "CodeBleu_score": 18.72054540431707}, {"code": "private fun flashWindow(){\n\t\tval window = UIApplication.sharedApplication.keyWindow\n\tif (window == null) {\n\t\tlog(\"Failed to flash window: window was null\")\n\t\treturn\n\t}\n\n\tval view = window.rootViewController?.view\n\tif (view == null) {\n\t\tlog(\"Failed to flash window: view was null\")\n\t\treturn\n\t}\n\n\ttry {\n\t\tUIView.animateWithDuration(0.1, animations = {\n\t\t\tview.backgroundColor = UIColor.redColor()\n\t\t}, completion = { finished ->\n\t\t\tif (!finished) {\n\t\t\t\tlog(\"Failed to flash window: animation finished prematurely\")\n\t\t\t\treturn@animateWithDuration\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tUIView.animateWithDuration(0.1, animations = {\n\t\t\t\t\tview.backgroundColor = UIColor.clearColor()\n\t\t\t\t}, completion = { finished ->\n\t\t\t\t\tif (!finished) {\n\t\t\t\t\t\tlog(\"Failed to flash window: animation finished prematurely\")\n\t\t\t\t\t\treturn@animateWithDuration\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} catch (e: Exception) {\n\t\t\t\tlog(\"Failed to flash window: $e\")\n\t\t\t}\n\t\t})\n\t} catch (e: Exception) {\n\t\tlog(\"Failed to flash window: $e\")\n\t}\n}", "CodeBleu_score": 38.926562440108164}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t// Backup shared preferences\n\tFile prefsFile = new File(getFilesDir(), PREFS_FILENAME);\n\tif (prefsFile.exists()) {\n\t\tFullBackupHelper.backupToTar(data, prefsFile);\n\t}\n\n\t// Backup game data\n\tFile gameDataDir = new File(getFilesDir(), GAME_DATA_DIRNAME);\n\tif (gameDataDir.exists()) {\n\t\tFile[] gameDataFiles = gameDataDir.listFiles();\n\t\tfor (File gameDataFile : gameDataFiles) {\n\t\t\tFullBackupHelper.backupToTar(data, gameDataFile);\n\t\t}\n\t}\n}", "CodeBleu_score": 23.60198925757755}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\tif (activeNetwork != null) {\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t\t\treturn !activeNetwork.isMetered();\n\t\t} else {\n\t\t\treturn activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 63.79257871196198}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\t\treturn (activeNetwork != null && activeNetwork.isConnected() && !activeNetwork.isRoaming());\n\t} else {\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\t\treturn (activeNetwork != null && activeNetwork.isConnected() && activeNetwork.getType() == ConnectivityManager.TYPE_WIFI);\n\t}\n}", "CodeBleu_score": 52.9233560840895}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n\t\treturn !isActiveNetworkMetered();\n\t} else {\n\t\tConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n\t\treturn activeNetwork != null && activeNetwork.isConnected() &&\n\t\t\t\t(activeNetwork.getType() == ConnectivityManager.TYPE_WIFI ||\n\t\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_WIMAX ||\n\t\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH ||\n\t\t\t\t\t\tactiveNetwork.getType() == ConnectivityManager.TYPE_ETHERNET);\n\t}\n}", "CodeBleu_score": 70.84233677751108}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t", "CodeBleu_score": 5.531172364104125}, {"code": "protected Item affectItem( Item item, int pos ){\n\t", "CodeBleu_score": 5.531172364104125}, {"code": "protected Item affectItem( Item item, int pos ){\n\t", "CodeBleu_score": 5.531172364104125}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\tif (enemy.alignment == Alignment.ENEMY) {\n\t\tif (hero.alignment == Alignment.ALLY) {\n\t\t\thero.curHp = hero.maxHp;\n\t\t}\n\t\tif (buffCls != null) {\n\t\t\tAllyBuff buff = buffCls.newInstance();\n\t\t\tenemy.addBuff(buff);\n\t\t}\n\t\tenemy.alignment = Alignment.NEUTRAL;\n\t\tif (enemy.curHp <= 0) {\n\t\t\tenemy.curHp = 0;\n\t\t\thero.kills++;\n\t\t\tif (hero.kills >= hero.ascensionKills) {\n\t\t\t\tascensionChallenge(hero);\n\t\t\t}\n\t\t\tif (hero.kills % 10 == 0) {\n\t\t\t\thero.levelUp();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 29.54531057857953}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t", "CodeBleu_score": 2.676826499359523}, {"code": "public void hit( Char enemy ){\n\t", "CodeBleu_score": 2.676826499359523}, {"code": "public void hit( Char enemy ){\n\t\t// Increment combo count\n\tcomboCount++;\n\n\t// Set a combo timer when the player hits an enemy\n\tif (enemy.isDead() || enemy.hasBuff(Buff.CORRUPTION) && enemy.getBuff(Buff.CORRUPTION).getStacks() == enemy.getBuff(Buff.CORRUPTION).getMax()){\n\t\t// Extend the combo timer based on the player's talent points in Cleave\n\t\tif (hero.hasTalent(Talent.CLEAVE)){\n\t\t\tsetComboTimer(comboTimer + hero.getTalentPointsInTree(Talent.CLEAVE) * 0.1f);\n\t\t}\n\t} else {\n\t\tsetComboTimer(comboTimer + 0.5f);\n\t}\n\n\t// Trigger action indicators\n\tif (hero.hasTalent(Talent.CLEAVE)){\n\t\thero.triggerAction(Action.CLEAVE);\n\t} else {\n\t\thero.triggerAction(Action.NORMAL_ATTACK);\n\t}\n\n\t// Validate mastery combos\n\tvalidateMasteryCombo();\n\n\t// Log the combo count\n\thero.logCombo(comboCount);\n\n\t// Refresh the hero's buff indicator visually\n\thero.refreshBuffs();\n}", "CodeBleu_score": 26.640173204728622}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.72577435205949}, {"code": "public int capacity(){\n\t\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.72577435205949}, {"code": "public int capacity(){\n\t\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.72577435205949}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\t// The formula for HT is:\n\t// HT = 10 + 5 * (level + (level-1) * (level-2) / 2) + (HTBoost + HTMultiplier) * (1 + 0.2 * numRingsOfMight + 0.1 * numElixirsOfMight)\n\t// The HTBoost and HTMultiplier variables are stored in the character's HTBoost and HTMultiplier variables, respectively.\n\t// The numRingsOfMight and numElixirsOfMight variables are stored in the character's numRingsOfMight and numElixirsOfMight variables, respectively.\n\t// The HTBoost and HTMultiplier variables are initialized to 0 in the constructor.\n\t// The numRingsOfMight and numElixirsOfMight variables are initialized to 0 in the constructor.\n\t// The HTBoost and HTMultiplier variables are updated in the RingOfMight and ElixirOfMight buffs.\n\t// The HT variable is updated in the updateHT() method.\n\t// The HP variable is updated in the updateHP() method.\n\n\t// Calculate the new HT value using the formula above.\n\tint newHT = 10 + 5 * (level + (level-1) * (level-2) / 2) + (HTBoost + HTMultiplier) * (1 + 0.2 * numRingsOfMight + 0.1 * numElixirsOfMight);\n\n\t// If boostHP is true, increase the current health by 10%.\n\tif ( boostHP ) {\n\t\tHP += (int)(0.1 * HT);\n\t}\n\n\t// Ensure HP does not exceed the new HT value.\n\tif ( HP > newHT ) {\n\t\tHP = newHT;\n\t}\n\n\t// Update the HT variable.\n\tHT = newHT;\n}", "CodeBleu_score": 22.18984311907304}, {"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}, {"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif ( enemy.isEnemy() || enemy.isNeutral() ) {\n\t\twep.setThrown( true );\n\t\tif ( wep.attack( enemy ) ) {\n\t\t\tif ( enemy.isEnemy() && ( enemy.isGladiator() || enemy.isDuelist() ) ) {\n\t\t\t\tenemy.applyComboBuff();\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t\twep.setThrown( false );\n\t}\n\treturn false;\n}", "CodeBleu_score": 11.454175323297608}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\t// Check if enemy is an enemy or a neutral mimic\n\tif( enemy.isEnemy() || enemy.isMimic() ) {\n\t\t// Check if the character is a Gladiator or Duelist\n\t\tif( isGladiator() || isDuelist() ) {\n\t\t\t// Check if the character is a Gladiator\n\t\t\tif( isGladiator() ) {\n\t\t\t\t// Check if the character has the combo buff\n\t\t\t\tif( hasBuff( \"Combo\" ) ) {\n\t\t\t\t\t// Apply the combo buff\n\t\t\t\t\tBuff comboBuff = getBuff( \"Combo\" );\n\t\t\t\t\tcomboBuff.apply( enemy );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Check if the character is a Duelist\n\t\t\tif( isDuelist() ) {\n\t\t\t\t// Check if the character has the combo buff\n\t\t\t\tif( hasBuff( \"Combo\" ) ) {\n\t\t\t\t\t// Apply the combo buff\n\t\t\t\t\tBuff comboBuff = getBuff( \"Combo\" );\n\t\t\t\t\tcomboBuff.apply( enemy );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Attempt the attack\n\t\tboolean hit = enemy.attack( wep );\n\t\t// Check if the attack hit\n\t\tif( hit ) {\n\t\t\t// Check if the character is a Gladiator or Duelist\n\t\t\tif( isGladiator() || isDuelist() ) {\n\t\t\t\t// Check if the character is a Gladiator\n\t\t\t\tif( isGladiator() ) {\n\t\t\t\t\t// Check if the character has the combo buff\n\t\t\t\t\tif( hasBuff( \"Combo\" ) ) {\n\t\t\t\t\t\t// Clear the combo buff\n\t\t\t\t\t\tBuff comboBuff = getBuff( \"Combo\" );\n\t\t\t\t\t\tcomboBuff.clear();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Check if the character is a Duelist\n\t\t\t\tif( isDuelist() ) {\n\t\t\t\t\t// Check if the character has the combo buff\n\t\t\t\t\tif( hasBuff( \"Combo\" ) ) {\n\t\t\t\t\t\t// Clear the combo buff\n\t\t\t\t\t\tBuff comboBuff = getBuff( \"Combo\" );\n\t\t\t\t\t\tcomboBuff.clear();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Return whether the attack hit\n\t\treturn hit;\n\t}\n\t// The enemy is not an enemy or a neutral mimic\n\telse {\n\t\t// Return false\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 19.954784552829192}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t\tint attackSkill = baseAttackSkill;\n\n\t// Apply weapon type multiplier\n\tswitch (weaponType) {\n\t\tcase Melee:\n\t\t\tattackSkill *= weaponMeleeMult;\n\t\t\tbreak;\n\t\tcase Ranged:\n\t\t\tattackSkill *= weaponRangedMult;\n\t\t\tbreak;\n\t\tcase Mage:\n\t\t\tattackSkill *= weaponMageMult;\n\t\t\tbreak;\n\t}\n\n\t// Apply accuracy multiplier\n\tint accuracy = baseAccuracy;\n\tif (target.isPlayer()) {\n\t\taccuracy += playerAccuracyBonus;\n\t} else {\n\t\taccuracy += enemyAccuracyBonus;\n\t}\n\n\t// Apply accuracy bonus\n\tif (target.getDistance(this) <= 1) {\n\t\taccuracy += accuracyBonus;\n\t} else if (target.getDistance(this) <= 3) {\n\t\taccuracy += accuracyBonus * 2;\n\t} else if (target.getDistance(this) <= 5) {\n\t\taccuracy += accuracyBonus * 3;\n\t} else if (target.getDistance(this) <= 7) {\n\t\taccuracy += accuracyBonus * 4;\n\t} else if (target.getDistance(this) <= 9) {\n\t\taccuracy += accuracyBonus * 5;\n\t}\n\n\t// Apply buff multiplier\n\tif (buff != null) {\n\t\tattackSkill *= buff.getAttackSkillMult();\n\t}\n\n\t// Apply final attack skill\n\tattackSkill *= accuracy;\n\n\treturn (int) Math.floor(attackSkill);\n}", "CodeBleu_score": 30.857605114798538}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t\tint skill = baseAttackSkill();\n\tif (weapon != null) {\n\t\tskill += weapon.attackBonus();\n\t\tif (weapon.type == Weapon.WEAPON_TYPE_AXE) {\n\t\t\tskill += 2;\n\t\t} else if (weapon.type == Weapon.WEAPON_TYPE_MACE) {\n\t\t\tskill += 1;\n\t\t} else if (weapon.type == Weapon.WEAPON_TYPE_SWORD) {\n\t\t\tskill += 0;\n\t\t}\n\t}\n\tskill += (int) (Math.max(0, Math.min(100, 100.0 * (1.0 - Math.sqrt(distance(x, y, target.x, target.y) / 100.0))))) * accuracyBonus();\n\tskill += (int) (Math.max(0, Math.min(100, 100.0 * (1.0 - Math.sqrt(distance(x, y, target.x, target.y) / 100.0))))) * accuracyBonus();\n\tif (target.buff(Buff.BUFF_ACCURACY_BONUS) != null) {\n\t\tskill += target.buff(Buff.BUFF_ACCURACY_BONUS).value;\n\t}\n\treturn skill;\n}", "CodeBleu_score": 28.599667912623065}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\nrepeat(repeats) {\nthis.start()\noperation()\nthis.stop()\nthis.tick()\n}\nif (printResults) {\nprettyPrint()\n}\n}", "CodeBleu_score": 92.92877462717524}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\nrepeat(repeats) {\nthis.start()\noperation()\nthis.stop()\nthis.tick()\n}\nif (printResults) {\nprettyPrint()\n}\n}", "CodeBleu_score": 92.92877462717524}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t\n}", "CodeBleu_score": 34.76218478512051}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t}", "CodeBleu_score": 29.962864407193813}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tval behaviorTree = BehaviorTree(rootTask, blackboard)\nbehaviorTree.init()\nreturn behaviorTree\n}", "CodeBleu_score": 70.58602459233107}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t\n}", "CodeBleu_score": 29.962864407193813}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.sprites.forEach((sprite) => {\n  if (sprite.visible) sprite.setTint(0xaa0000);\n});\n\nthis.related.forEach((cell) => {\n  cell.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n});\n\nif (this.tiles.heightmap) {\n  if (this.tiles.heightmap.polygon.top){\n    this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n  }\n  if (this.tiles.heightmap.polygon.slope){\n    this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n  }\n}\n}", "CodeBleu_score": 97.86477945955943}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.sprites.forEach((sprite) => {\n  if (sprite.visible) sprite.setTint(0xaa0000);\n});\n\nthis.related.forEach((cell) => {\n  cell.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n});\n\nif (this.tiles.heightmap) {\n  if (this.tiles.heightmap.polygon.top){\n    this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n  }\n  if (this.tiles.heightmap.polygon.slope){\n    this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n  }\n}\n}", "CodeBleu_score": 97.86477945955943}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\nthis.scene.city.map.selectedCell.y = this.y;\n\nthis.tiles.sprites.forEach((sprite) => {\n  if (sprite.visible) sprite.setTint(0xaa0000);\n});\n\nthis.related.forEach((cell) => {\n  cell.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n});\n\nif (this.tiles.heightmap) {\n  if (this.tiles.heightmap.polygon.top){\n    this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n  }\n  if (this.tiles.heightmap.polygon.slope){\n    this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n  }\n}\n}", "CodeBleu_score": 97.86477945955943}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t\tif (this.current < this.lightThreshold)\n\t\treturn null;\n\n\tif (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n\t\treturn 'light';\n\n\tif (this.current >= this.heavyThreshold)\n\t\treturn 'heavy';\n}", "CodeBleu_score": 71.89591271917458}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn null;\n\nif (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\nreturn 'light';\n\nif (this.current >= this.heavyThreshold)\nreturn 'heavy';\n}", "CodeBleu_score": 71.84387096017457}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn null;\n\nif (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\nreturn 'light';\n\nif (this.current >= this.heavyThreshold)\nreturn 'heavy';\n}", "CodeBleu_score": 71.84387096017457}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t\t// Get the current value\n\tvar current = this.getCurrentValue();\n\t// If the current value is below the light threshold, return null\n\tif (current < this.lightThreshold) {\n\t\treturn null;\n\t}\n\t// If the current value is between the light and heavy thresholds, return 'light'\n\telse if (current < this.heavyThreshold) {\n\t\treturn 'light';\n\t}\n\t// If the current value is above the heavy threshold, return 'heavy'\n\telse {\n\t\treturn 'heavy';\n\t}\n}", "CodeBleu_score": 22.202154667488905}, {"code": "restart: function (){\n\t\tvar density = this.getTrafficDensity();\n\tif (density === 'light') {\n\t\tthis.trafficLight.setLight();\n\t} else if (density === 'heavy') {\n\t\tthis.trafficLight.setHeavy();\n\t} else {\n\t\tthis.trafficLight.setOff();\n\t}\n}", "CodeBleu_score": 24.654651005817072}, {"code": "restart: function (){\n\t\tvar light = 25;\n\tvar heavy = 50;\n\tvar current = this.currentValue;\n\tif (current < light) {\n\t\treturn null;\n\t} else if (current < heavy) {\n\t\treturn 'light';\n\t} else {\n\t\treturn 'heavy';\n\t}\n}", "CodeBleu_score": 22.099176297952628}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t\t// check for required parameters\n\tif (color === undefined || duration === undefined || force === undefined || alpha === undefined) {\n\t\treturn false;\n\t}\n\t// clear any existing effect\n\tthis.clearEffects();\n\t// set default values\n\tif (duration === undefined) {\n\t\tduration = 100;\n\t}\n\tif (force === undefined) {\n\t\tforce = false;\n\t}\n\tif (alpha === undefined) {\n\t\talpha = 1;\n\t}\n\t// draw a rectangle with the given color and alpha\n\tthis.drawRect(0, 0, this.width, this.height, color, alpha);\n\t// set the effect duration\n\tthis.effects.duration = duration;\n\t// set the effect type\n\tthis.effects.type = 'flash';\n\t// set the effect force\n\tthis.effects.force = force;\n\treturn true;\n}", "CodeBleu_score": 64.87836227363206}, {"code": "flash: function (color, duration, force, alpha){\n\t", "CodeBleu_score": 11.898554021788124}, {"code": "flash: function (color, duration, force, alpha){\n\t\tif (color === undefined) color = this.color;\n\tif (duration === undefined) duration = 500;\n\tif (force === undefined) force = false;\n\tif (alpha === undefined) alpha = 1;\n\tif (duration <= 0) return false;\n\tif (this.effect) {\n\t\tif (force) this.clearEffects();\n\t\telse return false;\n\t}\n\tthis.effect = {\n\t\tstart: new Date().getTime(),\n\t\tduration: duration,\n\t\tcolor: color,\n\t\talpha: alpha\n\t};\n\tthis.draw();\n\treturn true;\n}", "CodeBleu_score": 52.308222974220975}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new Box2D.Dynamics.b2FluidLayer();\n\tlayer.m_world = this.m_world;\n\tthis.m_layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.m_world.AddFluidLayer(layer);\n\t}\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tthis.m_world.Add(children[i]);\n\t\t\tlayer.Add(children[i]);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 36.31645674692552}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new Box2D.Dynamics.b2FluidLayer();\n\tthis.layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.world.AddFluidLayer(layer);\n\t}\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tthis.add(children[i], layer);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 34.4492998890463}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\tvar layer = new Box2D.Dynamics.b2FluidLayer();\n\tthis.layers.push(layer);\n\tif (addToWorld) {\n\t\tthis.world.AddFluidLayer(layer);\n\t}\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tlayer.Add(children[i]);\n\t\t}\n\t}\n\treturn layer;\n}", "CodeBleu_score": 33.97200164565487}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.game.world, this.game.world.width, this.game.world.height, this.game.world.scale.x, this.game.world.scale.y);\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\tif (children) {\n\t\tthis.addChildrenToLayer(children, layer);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 51.854337499371006}, {"code": "createFullLayer: function (children){\n\t\tvar newLayer = new Phaser.FlexLayer(this.game, this.game.world, this.game.world.width, this.game.world.height, this.scale, this.position);\n\tthis.layers.push(newLayer);\n\tif (children) {\n\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\tnewLayer.add(children[i]);\n\t\t}\n\t}\n\treturn newLayer;\n}", "CodeBleu_score": 44.710070511152686}, {"code": "createFullLayer: function (children){\n\t\tvar layer = new Phaser.FlexLayer(this.game, this.game.world, this.game.world.bounds, this.scale);\n\tthis.layers.push(layer);\n\tthis.game.world.add(layer);\n\tif (children) {\n\t\tlayer.addMultiple(children);\n\t}\n\treturn layer;\n}", "CodeBleu_score": 58.82690256261771}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tthis.cropRect = rect;\n\t\tif (copy) {\n\t\t\tthis.cropRect = this.cropRect.clone();\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.resetCrop();\n\t}\n}", "CodeBleu_score": 17.478829359015645}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect = new fabric.Rect(rect);\n\t\t}\n\t\telse {\n\t\t\tthis.cropRect.setOptions(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t}\n\telse {\n\t\tthis.resetCrop();\n\t}\n}", "CodeBleu_score": 21.396505438774277}, {"code": "crop: function (rect, copy){\n\t\tif (rect) {\n\t\tif (copy) {\n\t\t\tthis.cropRect = rect.clone();\n\t\t} else {\n\t\t\tthis.cropRect.set(rect);\n\t\t}\n\t\tthis.updateCrop();\n\t} else {\n\t\tthis.cropRect.setEmpty();\n\t\tthis.resetFrame();\n\t}\n}", "CodeBleu_score": 21.31764913372863}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}, {"code": "move: function (x, y, wrap){\n\t\tif (x) {\n\t\tthis.moveH(x, wrap);\n\t}\n\tif (y) {\n\t\tthis.moveV(y, wrap);\n\t}\n\treturn this;\n}", "CodeBleu_score": 51.684474181262274}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\n}", "CodeBleu_score": 2.220777169396903}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = true; }\n\n\tvar p1 = new Phaser.Point(points[0], points[1]);\n\tvar p2 = new Phaser.Point(points[2], points[3]);\n\tvar p3 = new Phaser.Point(points[4], points[5]);\n\n\tvar normal = new Phaser.Point();\n\tnormal.x = (p2.y - p1.y) * (p3.z - p1.z) - (p2.z - p1.z) * (p3.y - p1.y);\n\tnormal.y = (p2.z - p1.z) * (p3.x - p1.x) - (p2.x - p1.x) * (p3.z - p1.z);\n\tnormal.z = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x);\n\n\tif (cull)\n\t{\n\t\tvar camera = this.game.camera.camera;\n\n\t\tvar dot = normal.x * camera.forward.x + normal.y * camera.forward.y + normal.z * camera.forward.z;\n\n\t\tif (dot < 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.drawPolygon([p1.x, p1.y, p2.x, p2.y, p3.x, p3.y]);\n\n}", "CodeBleu_score": 36.51184252656595}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull && this.game.math.angleBetweenPoints(this.cameraPosition, points[0], points[1]) < Math.PI / 2) {\n\t\treturn;\n\t}\n\tvar context = this.context;\n\tcontext.beginPath();\n\tcontext.moveTo(points[0].x, points[0].y);\n\tcontext.lineTo(points[1].x, points[1].y);\n\tcontext.lineTo(points[2].x, points[2].y);\n\tcontext.lineTo(points[0].x, points[0].y);\n\tcontext.closePath();\n\tcontext.fill();\n\tcontext.stroke();\n}", "CodeBleu_score": 19.93963037320713}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = true; }\n\n\tif (cull) {\n\t\t// Get the normal of the face\n\t\tvar v1 = new Phaser.Point(points[0].x - points[2].x, points[0].y - points[2].y);\n\t\tvar v2 = new Phaser.Point(points[1].x - points[2].x, points[1].y - points[2].y);\n\t\tvar normal = new Phaser.Point(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n\n\t\t// Get the camera position\n\t\tvar camera = this.game.camera.worldView.x + this.game.camera.worldView.width / 2;\n\t\tvar camera = this.game.camera.worldView.y + this.game.camera.worldView.height / 2;\n\n\t\t// Get the camera vector\n\t\tvar v3 = new Phaser.Point(camera - points[2].x, camera - points[2].y);\n\n\t\t// Get the dot product of the normal and the camera vector\n\t\tvar dot = normal.x * v3.x + normal.y * v3.y + normal.z * v3.z;\n\n\t\t// If the dot product is negative, the triangle is facing away from the camera, so don't draw it\n\t\tif (dot < 0) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.drawPolygon(points);\n}", "CodeBleu_score": 54.10064408267553}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tthis.video.play();\n\t\tthis.video.pause();\n\t\tthis.video.onseeked = null;\n\t\tthis.video.src = this.video.currentSrc;\n\t\tthis.video.load();\n\t\tthis.videoTexture.needsUpdate = true;\n\t} else {\n\t\tthis.retryCount--;\n\t\tif (this.retryCount === 0) {\n\t\t\tthis.warn('Unable to load video from ' + this.video.src);\n\t\t} else {\n\t\t\tsetTimeout(this.checkVideoProgress, 1000);\n\t\t}\n\t}\n}", "CodeBleu_score": 25.97745891071032}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\tif (this.video.paused) {\n\t\t\tthis.video.play();\n\t\t}\n\t\tthis.videoTexture.needsUpdate = true;\n\t\tthis.videoTexture.repeat.set(1, 1);\n\t\tthis.videoTexture.offset.set(0, 0);\n\t\tthis.videoTexture.wrapS = this.videoTexture.wrapT = THREE.ClampToEdgeWrapping;\n\t\tthis.videoTexture.magFilter = THREE.LinearFilter;\n\t\tthis.videoTexture.minFilter = THREE.LinearFilter;\n\t\tthis.videoTexture.generateMipmaps = false;\n\t\tthis.video.pause();\n\t\tif (this.onVideoReady) {\n\t\t\tthis.onVideoReady();\n\t\t}\n\t} else if (this.retryCount > 0) {\n\t\tthis.retryCount--;\n\t\tsetTimeout(this.checkVideoProgress.bind(this), 100);\n\t} else {\n\t\tif (this.onVideoError) {\n\t\t\tthis.onVideoError();\n\t\t}\n\t}\n}", "CodeBleu_score": 40.47512244326985}, {"code": "checkVideoProgress: function (){\n\t\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\t\t// The video is ready to play, so stop any pending timeouts and update the texture\n\t\tif (this.timeout) {\n\t\t\tclearTimeout(this.timeout);\n\t\t\tthis.timeout = null;\n\t\t}\n\t\tthis.updateTexture();\n\t} else if (this.video.readyState === 0) {\n\t\t// The video has not started downloading yet, so increment the retry counter and set a timeout to check again\n\t\tthis.retries++;\n\t\tif (this.retries > this.maxRetries) {\n\t\t\t// The video has failed to download within the allowed retries, so stop any pending timeouts and emit an error\n\t\t\tif (this.timeout) {\n\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\tthis.timeout = null;\n\t\t\t}\n\t\t\tthis.emit('error', 'Video failed to download within the allowed retries');\n\t\t} else {\n\t\t\t// The video has not started downloading yet, so set a timeout to check again\n\t\t\tthis.timeout = setTimeout(this.checkVideoProgress, this.retryInterval);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.96598498828077}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t\tif (this.state !== 'down') {\n\t\tthis.state = 'down';\n\t\tthis.time = 0;\n\t\tthis.repeat = 0;\n\t\tif (event) {\n\t\t\tthis.alt = event.altKey;\n\t\t\tthis.shift = event.shiftKey;\n\t\t\tthis.ctrl = event.ctrlKey;\n\t\t}\n\t\tthis.dispatch('onDown', this.state, value);\n\t}\n}", "CodeBleu_score": 34.29768886552656}, {"code": "start: function (event, value){\n\t\tif (this.state !== 'down') {\n\t\tthis.state = 'down';\n\t\tthis.time = new Date().getTime();\n\t\tthis.repeat = 0;\n\t\tthis.alt = event.altKey;\n\t\tthis.shift = event.shiftKey;\n\t\tthis.ctrl = event.ctrlKey;\n\t\tthis.value = value;\n\t\tthis.dispatch('onDown', this.state, this.value);\n\t}\n}", "CodeBleu_score": 33.600927909098026}, {"code": "start: function (event, value){\n\t\tif (this.state === \"down\") {\n\t\treturn;\n\t}\n\tthis.state = \"down\";\n\tthis.captureModifiers(event);\n\tthis.repeatCount = 0;\n\tthis.repeatDelay = this.delay;\n\tthis.repeatInterval = this.interval;\n\tthis.dispatchEvent(\"onDown\", {\n\t\t\"event\": event,\n\t\t\"value\": value\n\t});\n}", "CodeBleu_score": 20.6913837391959}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t\tif (this.onMouseDownCallback) {\n\t\tthis.onMouseDownCallback(event);\n\t}\n\tif (this.inputEnabled && !this.input.mouse.locked) {\n\t\tthis.input.mouse.start(event);\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 27.557791862797515}, {"code": "onMouseDown: function (event){\n\t", "CodeBleu_score": 6.864115172258767}, {"code": "onMouseDown: function (event){\n\t\tif (this.enabled) {\n\t\tif (this.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t\tthis.mouseDown = true;\n\t\tthis.mouseX = event.clientX;\n\t\tthis.mouseY = event.clientY;\n\t\tthis.fireEvent('mousedown', event);\n\t}\n}", "CodeBleu_score": 25.40745463217535}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t\tif (this.mouseDownCallback) {\n\t\tthis.mouseDownCallback(event);\n\t}\n\tif (this.inputEnabled && this.input.mouse) {\n\t\tthis.input.mouse.onMouseUp(event);\n\t}\n}", "CodeBleu_score": 33.85505175454753}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (this.isMouseDown) {\n\t\tthis.isMouseDown = false;\n\t\tevent.identifier = this.mouseIdentifier;\n\t\tif (this.onMouseUp) {\n\t\t\tthis.onMouseUp(event);\n\t\t}\n\t\tthis.mouseIdentifier = null;\n\t\tthis.mousePointer.end(event);\n\t}\n}", "CodeBleu_score": 33.234392817226436}, {"code": "onMouseUpGlobal: function (event){\n\t\tif (this.onMouseDownCallback) {\n\t\tthis.onMouseDownCallback(event);\n\t}\n\tif (this.onMouseDown) {\n\t\tevent.preventDefault();\n\t}\n\tif (this.inputEnabled) {\n\t\tthis.mouse.onMouseUp(event);\n\t}\n}", "CodeBleu_score": 31.333273718712164}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.input.enabled && this.touchEnterCallback) {\n\t\tthis.touchEnterCallback(event);\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 30.338607759561043}, {"code": "onTouchEnter: function (event){\n\t\tif (this.enabled && this.game.input.enabled && this.touchEnterCallback) {\n\t\tthis.touchEnterCallback.call(this.callbackContext, event);\n\t\tevent.preventDefault();\n\t}\n}", "CodeBleu_score": 24.013139621674288}, {"code": "onTouchEnter: function (event){\n\t\tif (this.game.input.enabled && this.enabled) {\n\t\tthis.touchEnterCallback.call(this.callbackContext, event);\n\t\tif (this.preventDefault) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n}", "CodeBleu_score": 31.54291576749724}]}
