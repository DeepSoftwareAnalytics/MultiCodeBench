{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    Model = request.env['ir.attachment']\n    Attachment = Model.sudo()\n    Attachment.check_access_rights('read')\n    Attachment.check_access_rule('read')\n    Attachment._cr.execute(\"\"\"SELECT id, name, res_model, res_id, type, access_token, public, file_size, file_type, file_name, content_type, checksum, create_date, write_date, access_token, access_token_date, partner_id, company_id, tags, description FROM ir_attachment WHERE id IN %s\"\"\", (tuple(args.get('ids', [])),))\n    attachments = Attachment._cr.dictfetchall()\n    if not attachments:\n        raise werkzeug.exceptions.NotFound()\n    zip_buffer = io.BytesIO()\n    zip_file = zipfile.ZipFile(zip_buffer, 'w')\n    for attachment in attachments:\n        if attachment.get('access_token') and attachment.get('access_token') != args.get('token'):\n            raise werkzeug.exceptions.Forbidden()\n        if attachment.get('res_model') == 'ir.ui.view':\n            # Special case for ir.ui.view attachments, as they are not\n            # attached to a real record.\n            if not attachment.get('public'):\n                raise werkzeug.exceptions.Forbidden()\n            # TODO: implement a check to ensure the user has the right to see\n            #       the view.\n            view = request.env[attachment['res_model']].browse(attachment['res_id']).read(['arch'])[0]['arch']\n            zip_file.writestr(attachment['name'], view)\n        else:\n            # Regular case for other attachments, which are attached to a\n            # real record.\n            record = request.env[attachment['res_model']].browse(attachment['res_id'])\n            if not record.exists():\n                raise werkzeug.exceptions.NotFound()\n            if not record.check_access_rule('read'):\n                raise werkzeug.exceptions.Forbidden()\n            if not attachment.get('public') and not record.check_access_rule('read'):\n                raise werkzeug.exceptions.Forbidden()\n            # TODO: implement a check to ensure the user has the right to see\n            #       the attachment.\n            content = record._get_atachment(attachment['id'])\n           ", "CodeBleu_score": 26.022538558546927}, {"code": "def export_zip_documents(self, **args)\n\t\n    self.ensure_one()\n    self.check_access_rights('read')\n    self.check_access_rule('read')\n    attachments = self.env['ir.attachment'].sudo().search([\n        ('res_model', '=', self._name),\n        ('res_id', '=', self.id),\n        ('id', 'in', args.get('attachment_ids', [])),\n    ])\n    if not attachments:\n        raise UserError(_(\"No attachment selected.\"))\n    if any(not attachment.can_access_from_current_website() for attachment in attachments):\n        raise UserError(_(\"You don't have the access rights to access the requested attachment.\"))\n    if any(not attachment.is_public for attachment in attachments):\n        raise UserError(_(\"You don't have the access rights to access the requested attachment.\"))\n    if any(not attachment.mimetype.startswith('image/') for attachment in attachments):\n        raise UserError(_(\"Only images can be exported as a zip file.\"))\n    content = io.BytesIO()\n    with zipfile.ZipFile(content, 'w') as archive:\n        for attachment in attachments:\n            archive.writestr(attachment.name, attachment.datas)\n    content.seek(0)\n    return request.make_response(content.read(), headers=_get_zip_headers(content.read(), 'attachments.zip'))\n", "CodeBleu_score": 38.50101379514796}, {"code": "def export_zip_documents(self, **args)\n\t\n    self.ensure_one()\n    context = dict(self._context or {})\n    context.update(args.get('context', {}))\n    # Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    if attachment_ids:\n        attachment_ids = attachment_ids.split(',')\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    else:\n        raise UserError(_(\"No attachment ID found in the request\"))\n    # Verify read access rights and rules for the attachments\n    Attachment = self.env['ir.attachment']\n    attachments = Attachment.sudo().browse(attachment_ids)\n    for attachment in attachments:\n        if not attachment.res_model == self._name or not attachment.res_id == self.id:\n            raise UserError(_(\"Access Denied\"))\n        if not attachment.can_access_from_current_website():\n            raise UserError(_(\"Access Denied\"))\n    # Build a zip file from the attachments' content\n    zip_buffer = io.BytesIO()\n    with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.name, attachment.datas)\n    zip_buffer.seek(0)\n    # Prepare HTTP headers for the zip file and return the zip file as an HTTP response\n    filename = \"%s.zip\" % self.name\n    headers = _get_zip_headers(zip_buffer.getvalue(), filename)\n    return request.make_response(zip_buffer.getvalue(), headers=headers)\n\n", "CodeBleu_score": 33.093383940616405}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    self._update_history(values['invoices'])\n    return request.render(\"account.portal_my_invoices\", values)\n", "CodeBleu_score": 28.83866610689355}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    values['main_object'] = 'my_invoices'\n    return request.render(\"portal.portal_my_invoices\", values)\n", "CodeBleu_score": 26.709724722688822}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    self.session_history.update(values['invoices'].ids[:100])\n    return request.render(\"portal.portal_my_invoices\", values)", "CodeBleu_score": 29.14461006858732}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        return request.redirect('/my')\n    if invoice.company_id.id != request.env.user.company_id.id:\n        return request.redirect('/my')\n    if invoice.state not in ['posted', 'cancel']:\n        return request.redirect('/my')\n    if invoice.access_token and invoice.access_token != access_token:\n        return request.redirect('/my')\n    if report_type:\n        report_type = report_type.lower()\n    if report_type in ('pdf', 'text', 'html'):\n        if report_type == 'pdf' and not invoice.is_pdf:\n            return request.redirect('/my')\n        if report_type == 'text' and not invoice.is_text:\n            return request.redirect('/my')\n        if report_type == 'html' and not invoice.is_html:\n            return request.redirect('/my')\n        if report_type == 'html':\n            return self._invoice_get_page_view_values(invoice, access_token, **kw)\n        return self._invoice_get_report_view_values(invoice, access_token, report_type, download, **kw)\n    return self._invoice_get_page_view_values(invoice, access_token, **kw)\n\n", "CodeBleu_score": 35.05238197592021}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # TODO: This function is a mess. It should be refactored.\n    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        return request.redirect('/my/invoices')\n    if invoice.type in ('out_invoice', 'out_refund'):\n        invoice_type = 'invoice'\n    else:\n        invoice_type = 'refund'\n    if invoice.state not in ('draft', 'posted'):\n        return request.redirect('/my/invoices')\n    if access_token:\n        access_token = access_token.split('-')\n        if len(access_token) != 2 or access_token[0] != invoice.access_token or access_token[1] != invoice.access_token_date:\n            return request.redirect('/my/invoices')\n    if report_type:\n        report_type = report_type.lower()\n    if report_type not in ('html', 'pdf', 'text'):\n        report_type = None\n    if report_type == 'pdf' and not download:\n        report_type = None\n    if report_type == 'pdf' and invoice.state != 'posted':\n        report_type = None\n    if report_type == 'pdf' and invoice.l10n_latam_use_documents:\n        report_type = None\n    if report_type and report_type in ('html', 'pdf', 'text'):\n        return self._invoice_get_page_view_values(invoice, access_token, report_type=report_type, download=download, **kw)\n    if download:\n        return self._invoice_get_page_view_values(invoice, access_token, report_type=report_type, download=download, **kw)\n    if report_type:\n        return request.redirect('/my/invoices/%s/%s' % (invoice_id, report_type))\n    return self._invoice_get_page_view_values(invoice, access_token, report_type=report_type, download=download, **kw)\n\n", "CodeBleu_score": 39.124054422915286}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        return request.render(\"portal.portal_my_invoice_detail\", {'error': _('Invoice not found')})\n    if not invoice.check_access_rights('read', raise_exception=False):\n        return request.render(\"portal.portal_my_invoice_detail\", {'error': _('Access Denied')})\n    if not invoice.check_access_rule('read', raise_exception=False):\n        return request.render(\"portal.portal_my_invoice_detail\", {'error': _('Access Denied')})\n    if report_type:\n        report_type = report_type.lower()\n    if report_type not in ('html', 'pdf', 'text'):\n        report_type = None\n    if report_type:\n        if report_type == 'pdf' and not invoice.is_posted():\n            return request.render(\"portal.portal_my_invoice_detail\", {'error': _('Invoice must be posted before it can be printed.')})\n        if report_type == 'pdf' and not invoice.is_invoice():\n            return request.render(\"portal.portal_my_invoice_detail\", {'error': _('Invoice must be an invoice to be printed.')})\n        if report_type == 'pdf' and not invoice.is_eligible_for_invoice_report():\n            return request.render(\"portal.portal_my_invoice_detail\", {'error': _('The invoice is not eligible to be printed.')})\n        if report_type == 'text' and not invoice.is_eligible_for_invoice_report():\n            return request.render(\"portal.portal_my_invoice_detail\", {'error': _('The invoice is not eligible to be printed.')})\n        if report_type == 'text' and not invoice.is_posted():\n            return request.render(\"portal.portal_my_invoice_detail\", {'error': _('Invoice must be posted before it can be printed.')})\n        if report_type == 'text' and not invoice.is_invoice():\n            return request.render(\"portal.portal_my_invoice_detail\", {'error': _('Invoice must be an invoice to be printed.')})\n    if report_type == 'pdf' and download:\n        # Retrieve legal documents\n        legal_docs = invoice._get_", "CodeBleu_score": 28.611113091343494}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n    if not company:\n        company = self\n    product_templates = self.env['product.template'].search([\n        ('domain', '=', company.partner_id.commercial_partner_id.country_id.code),\n        ('sale_ok', '=', True),\n        ('list_price', '=', 0.0),\n    ])\n    if company.account_sale_tax_id:\n        product_templates.write({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        product_templates.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n    return product_templates\n\n", "CodeBleu_score": 37.94567391559783}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    company_domain = self.env.user.company_id.domain\n    if company:\n        company_domain = company.domain\n    product_templates = self.env['product.template'].search([('domain', 'in', company_domain)])\n    for product_template in product_templates:\n        if company:\n            if company.account_sale_tax_id:\n                product_template.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n            if company.account_purchase_tax_id:\n                product_template.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n        else:\n            if self.env.user.company_id.account_sale_tax_id:\n                product_template.write({'taxes_id': [(6, 0, [self.env.user.company_id.account_sale_tax_id.id])]})\n            if self.env.user.company_id.account_purchase_tax_id:\n                product_template.write({'supplier_taxes_id': [(6, 0, [self.env.user.company_id.account_purchase_tax_id.id])]})\n\n", "CodeBleu_score": 33.28888190034254}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    self.ensure_one()\n\n    if company:\n        company = company\n    else:\n        company = self\n\n    # Get all product templates with the same company's domain\n    domain = [('sale_ok', '=', True), ('list_price', '!=', 0.0), ('company_id', '=', company.id)]\n    products = self.env['product.template'].search(domain)\n\n    # Update the sale taxes for these products if the company's account_sale_tax_id is set\n    if company.account_sale_tax_id:\n        for product in products:\n            product.taxes_id = [(6, 0, [company.account_sale_tax_id.id])]\n\n    # Update the purchase taxes if the company's account_purchase_tax_id is set\n    if company.account_purchase_tax_id:\n        for product in products:\n            product.supplier_taxes_id = [(6, 0, [company.account_purchase_tax_id.id])]\n\n    return products\n\n", "CodeBleu_score": 34.093966954039196}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 45.93087826882707}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Try to find the account using the company's ID and the xml_id in the 'ir.model.data' model.\n    try:\n        account = self.env['account.account'].sudo().search([('company_id', '=', company.id), ('code', '=', xml_id)])[0]\n    except IndexError:\n        # If not found, search for an account matching the account_type within the company's domain.\n        account = self.env['account.account'].sudo().search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)])\n        if not account:\n            # If still not found, return the first account within the company's domain.\n            account = self.env['account.account'].sudo().search([('company_id', '=', company.id)])[0]\n    return account\n\n", "CodeBleu_score": 41.6651771498677}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    if not company:\n        return None\n    domain = [('company_id', '=', company.id), ('type', '=', account_type)]\n    if xml_id:\n        try:\n            return self.env['ir.model.data'].xmlid_to_object(xml_id)\n        except ValueError:\n            pass\n    return self.env['account.account'].search(domain, limit=1)\n\n", "CodeBleu_score": 35.44975512281245}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env[\"account.account\"].search(\n        [\n            (\"user_type_id\", \"=\", self.env.ref(\"account.data_account_type_current_year_earnings\").id),\n            (\"company_id\", \"=\", self.company_id.id),\n        ]\n    )\n    if len(accounts) > 1:\n        raise ValidationError(\n            _(\n                \"There can be only one Current Year Earnings account per company. You can create a new one or delete the existing one.\"\n            )\n        )\n\n", "CodeBleu_score": 21.33931799554446}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n\n    current_year_earning_accounts = self.env['account.account'].search([('user_type_id.type', '=', 'revenue'), ('company_id', '=', self.company_id.id)])\n    if current_year_earning_accounts:\n        current_year_earning_accounts_grouped_by_company = current_year_earning_accounts.read_group([('user_type_id.type', '=', 'revenue'), ('company_id', '=', self.company_id.id)], ['company_id'], ['company_id'])\n        for record in current_year_earning_accounts_grouped_by_company:\n            if record['company_id_count'] > 1:\n                raise ValidationError(_('There is more than one \"Current Year Earnings\" account for company %s. Please ensure that there is only one such account for each company.') % record['company_id'][0])\n\n", "CodeBleu_score": 34.34365861512972}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('company_id', '=', self.company_id.id), ('user_type_id.type', '=', 'receivable'), ('user_type_id.include_initial_balance', '=', True), ('user_type_id.report_type', '=', 'balance')])\n    grouped_accounts = accounts.read_group([('company_id', '=', self.company_id.id), ('user_type_id.type', '=', 'receivable'), ('user_type_id.include_initial_balance', '=', True), ('user_type_id.report_type', '=', 'balance')], ['company_id'], ['company_id'])\n    for group in grouped_accounts:\n        if group['company_id_count'] > 1:\n            raise ValidationError(_('There is more than one Current Year Earnings account for the company %s. You can only have one Current Year Earnings account per company.') % (self.company_id.name))\n\n", "CodeBleu_score": 18.870041775535107}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name:\n        search_domain = [('name', operator, name)]\n    elif domain and not order:\n        order = 'frequency'\n    if domain:\n        search_domain = expression.AND([search_domain, domain])\n    return self.search(search_domain, limit=limit, order=order)\n\n", "CodeBleu_score": 21.42783767333993}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name:\n        domain = domain or []\n        if operator in expression.NEGATIVE_TERM_OPERATORS:\n            domain = expression.AND([domain, [('name', operator, name)]])\n        else:\n            domain = expression.AND([domain, [('name', operator, name)]])\n    else:\n        if not domain:\n            domain = []\n        if self.env.context.get('default_type') == 'contact':\n            domain = expression.AND([domain, [('parent_id', '!=', False)]])\n        if self.env.context.get('default_type') == 'lead':\n            domain = expression.AND([domain, [('parent_id', '=', False)]])\n        if self.env.context.get('default_type') == 'opportunity':\n            domain = expression.AND([domain, [('type', '=', 'opportunity')]])\n        if self.env.context.get('default_type') == 'partner':\n            domain = expression.AND([domain, [('type', '=', 'contact')]])\n        if self.env.context.get('default_type') == 'lead':\n            domain = expression.AND([domain, [('type', '=', 'lead')]])\n        if self.env.context.get('default_type') == 'all':\n            domain = expression.AND([domain, [('type', 'in', ['contact', 'lead', 'opportunity'])]])\n        if self.env.context.get('default_type') == 'customer':\n            domain = expression.AND([domain, [('is_company', '=', True)]])\n        if self.env.context.get('default_type') == 'supplier':\n            domain = expression.AND([domain, [('is_company', '=', False)]])\n        if self.env.context.get('default_type') == 'employee':\n            domain = expression.AND([domain, [('user_id', '!=', False)]])\n        if self.env.context.get('default_type') == 'portal':\n            domain = expression.AND([domain, [('user_id', '=', False)]])\n        if self.env.context.get('default_type') == 'salesman':\n            domain = expression.AND([domain, [('user_id.job_title_id.name', 'ilike', 'salesman')]])\n        if self.env.context.get('default_type') ==", "CodeBleu_score": 41.6949575165926}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self.env.context.get('default_partner_id') and self.env.context.get('default_partner_id') != self.env.user.partner_id.id:\n        domain = expression.AND([domain or [], [('partner_id', '=', self.env.context.get('default_partner_id'))]])\n        return self.search(domain, limit=limit, order=order)\n    else:\n        return self.search(expression.AND([[('name', operator, name)], (domain or [])]), limit=limit, order=order)\n\n", "CodeBleu_score": 35.22684139548689}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super(self, self.with_context(lang=None)).copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 74.65829378944018}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super(self.model, self).copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 79.4212787946191}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_model') == 'sale.order':\n        return False\n\n    # Ensure that the action is only available on the sale order tree view\n    if not self.env.context.get('active_id'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_ids'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_model') == 'sale.order':\n        return False\n\n    # Ensure that the action is only available on the sale order tree view\n    if not self.env.context.get('active_id'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_ids'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_model') == 'sale.order':\n        return False\n\n    # Ensure that the action is only available on the sale order tree view\n    if not self.env.context.get('active_id'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_ids'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_model') == 'sale.order':\n        return False\n\n    # Ensure that the action is only available on the sale order tree view\n    if not self.env.context.get('active_id'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_ids'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.env.context.get('active_model') == 'sale.order':\n        return False\n\n    # Ensure that the action is only available on the sale order tree view\n    if not self.env.context.get('active_id'):\n        return False\n\n    # Ensure that the action is only available on the sale order form view\n    if not self.", "CodeBleu_score": 19.95728739547636}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n        'default_move_type': 'out_invoice',\n        'default_journal_id': self.env.ref('l10n_in_sale.account_journal_sale').id,\n        'search_default_customer': self.id,\n    }\n    action['domain'] = [('id', 'in', self.mapped('invoice_ids.move_id').ids)]\n    return action\n\n", "CodeBleu_score": 26.46927272253038}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'out_invoice',\n        'default_journal_id': self.env['account.move'].default_get(['journal_id'])['journal_id'],\n        'search_default_customer': self.id,\n        'search_default_group_by_ref': 1,\n        'search_default_period_from': self.invoice_date_due,\n        'search_default_period_to': self.invoice_date_due,\n    }\n    action['domain'] = [('id', 'in', self.mapped('account_move_ids').ids)]\n    return action\n\n", "CodeBleu_score": 33.34965514402173}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'search_default_journal_id': self.env.company.purchase_journal_id.id,\n        'search_default_partner_id': self.id,\n        'search_default_move_type': 'in_invoice',\n        'default_move_type': 'in_invoice',\n    }\n    action['domain'] = [('id', 'in', self.mapped('move_ids').ids)]\n    return action\n\n", "CodeBleu_score": 28.01562451022041}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    move_ids = self.env['account.move'].search([('purchase_id', '=', self.id)])\n    return {\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids.ids)],\n        'context': {\n            'default_type': 'in_invoice',\n            'search_default_purchase_id': self.id,\n        },\n    }\n\n", "CodeBleu_score": 19.31118554029436}, {"code": "def action_view_vendor_bill(self)\n\t\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'search_default_purchase': 1,\n        'search_default_purchase_id': self.id,\n        'default_move_type': 'in_invoice',\n    }\n    action['domain'] = [('id', 'in', self.mapped('account_move_ids').ids)]\n    return action\n\n", "CodeBleu_score": 22.39315269084888}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.54198523107293}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('no_create'):\n        return self.env['res.partner.bank'].new()\n    company_id = self.env.user.company_id.id\n    return self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id), ('company_id', '=', company_id)], limit=1) or self.env['res.partner.bank'].create({'acc_number': self.acc_number, 'partner_id': self.id, 'company_id': company_id})\n\n", "CodeBleu_score": 28.91745449922862}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_account_creation'):\n        return self.env['res.partner.bank'].new()\n    company_id = self.env.context.get('force_company', self.env.user.company_id.id)\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id), ('company_id', '=', company_id)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({'acc_number': self.acc_number, 'partner_id': self.id, 'company_id': company_id})\n    return bank_account\n\n", "CodeBleu_score": 50.6583664191449}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('no_create_bank_account'):\n        return self.env['res.partner.bank'].new()\n    else:\n        company_id = self.env.context.get('force_company', self.env.company.id)\n        bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.id), ('company_id', '=', company_id)], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({'acc_number': self.acc_number, 'partner_id': self.id, 'company_id': company_id})\n        return bank_account\n\n", "CodeBleu_score": 51.106031524325466}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    company_currency = self.company_currency_id\n    foreign_currency = self.foreign_currency_id\n    if currency == company_currency:\n        # The transaction is in company currency.\n        transaction_amount = amount_currency\n        transaction_balance = balance\n        journal_amount = amount_currency\n        company_amount = balance\n    elif currency == foreign_currency:\n        # The transaction is in foreign currency.\n        transaction_amount = -amount_currency\n        transaction_balance = -balance\n        journal_amount = -amount_currency\n        company_amount = -balance\n    else:\n        # The transaction is in a different currency than the company and foreign currencies.\n        # First, we need to get the exchange rate.\n        rate = currency._get_conversion_rate(foreign_currency, self.company_id, self.date)\n        # Then, we can calculate the transaction amount and balance.\n        transaction_amount = -amount_currency * rate\n        transaction_balance = -balance * rate\n        journal_amount = -amount_currency * rate\n        company_amount = -balance * rate\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_balance': transaction_balance,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }\n", "CodeBleu_score": 22.931105968471858}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    liquidity_line, suspense_line, other_lines = self._seek_for_lines()\n    if suspense_line and not other_lines:\n        transaction_amount = -suspense_line.amount_currency\n        transaction_currency = suspense_line.currency_id\n    else:\n        # In case of to_check or partial reconciliation, we can't trust the suspense line.\n        transaction_amount = self.amount_currency if self.foreign_currency_id else self.amount\n        transaction_currency = self.foreign_currency_id or liquidity_line.currency_id\n    if currency == transaction_currency:\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': amount_currency,\n            'journal_currency': currency,\n            'company_amount': balance,\n            'company_currency': currency,\n        }\n    else:\n        # In case of foreign currency, we need to use the exchange rate to compute the transaction amount and balance\n        # in the company currency.\n        # For the journal amount, we need to use the exchange rate to compute the journal amount in the transaction currency.\n        # We need to use the exchange rate to compute the company amount in the transaction currency.\n        # The exchange rate is the ratio between the transaction currency and the company currency.\n        # For example, if the transaction currency is USD and the company currency is EUR, the exchange rate is 0.85.\n        # In this case, the transaction amount is 100 USD and the company amount is 85 EUR.\n        # The journal amount is 100 USD and the transaction amount is 85 EUR.\n        # The exchange rate is the ratio between the journal currency and the transaction currency.\n        # For example, if the journal currency is USD and the transaction currency is EUR, the exchange rate is 1.15.\n        # In this case, the journal amount is 100 USD and the transaction amount is 115 EUR.\n        # The company amount is 100 USD and the transaction amount is 115 EUR.\n        # The exchange rate is the ratio between the company currency and the transaction currency.\n        # For example, if the company currency is USD and the transaction currency is EUR, the exchange rate is 1.1", "CodeBleu_score": 17.17744273926397}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if currency.is_zero(balance):\n        return {\n            'balance': balance,\n            'amount': 0.0,\n            'amount_currency': 0.0,\n            'foreign_currency_id': currency.id,\n        }\n    elif currency.is_zero(amount_currency):\n        return {\n            'balance': balance,\n            'amount': 0.0,\n            'amount_currency': 0.0,\n            'foreign_currency_id': currency.id,\n        }\n    else:\n        # In case of foreign currency, we need to convert the amount_currency to the foreign currency\n        # and then compute the balance.\n        foreign_currency_id = currency.id\n        amount = currency._convert(amount_currency, self.company_currency_id, self.date, round=False)\n        if currency.is_zero(amount):\n            return {\n                'balance': balance,\n                'amount': 0.0,\n                'amount_currency': 0.0,\n                'foreign_currency_id': currency.id,\n            }\n        else:\n            return {\n                'balance': balance,\n                'amount': amount,\n                'amount_currency': amount_currency,\n                'foreign_currency_id': foreign_currency_id,\n            }\n\n", "CodeBleu_score": 19.550765515107116}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            for payment_method in journal.default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids += [(0, 0, {\n                    'payment_method_id': payment_method.id,\n                    'payment_type': payment_method.payment_type,\n                    'payment_method_code': payment_method.code,\n                    'payment_method_name': payment_method.name,\n                })]\n", "CodeBleu_score": 41.67038442300016}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = [(0, 0, {\n                'payment_method_id': method.id,\n                'payment_method_code': method.code,\n                'payment_type': 'outbound',\n                'sequence': method.sequence,\n                'is_default': method.id in journal.default_outbound_payment_methods.ids,\n            }) for method in journal.default_outbound_payment_methods]\n", "CodeBleu_score": 43.436000783754366}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = [(0, 0, {'payment_method_id': method.id}) for method in journal._default_outbound_payment_methods]\n", "CodeBleu_score": 28.45050410616222}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(move)\n        elif move.invoice_date and move.is_sale_document(include_receipts=True):\n            move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n        if move.date != move.date_computed:\n            move.date_computed = move.date\n            move.recompute()\n\n", "CodeBleu_score": 37.133972032173666}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date:\n            if not move.invoice_date:\n                move.date = fields.Date.context_today(move)\n            elif not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            if move.date != move.date_move:\n                move.date_move = move.date\n                move.date_expected = move.date\n                move.date_last_reconciled = move.date\n                move.date_maturity = move.date\n                move.date_display_type = 'normal'\n                move.date_maturity_display_type = 'normal'\n                move.date_expected_display_type = 'normal'\n                move.date_last_reconciled_display_type = 'normal'\n                move.date_move_display_type = 'normal'\n                move.with_context(force_date=True).write({\n                    'date': move.date,\n                    'date_move': move.date,\n                    'date_expected': move.date,\n                    'date_last_reconciled': move.date,\n                    'date_maturity': move.date,\n                    'date_display_type': 'normal',\n                    'date_maturity_display_type': 'normal',\n                    'date_expected_display_type': 'normal',\n                    'date_last_reconciled_display_type': 'normal',\n                    'date_move_display_type': 'normal',\n                })\n\n", "CodeBleu_score": 33.13568729993963}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date:\n            if not move.invoice_date:\n                move.date = fields.Date.context_today(move)\n            else:\n                if not move.is_sale_document():\n                    move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n                    if move.date != move.date_move:\n                        move.date_move = move.date\n                        move._recompute_related_fields()\n\n", "CodeBleu_score": 38.6543058325043}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document(include_receipts=True):\n        if self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document(include_receipts=True):\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n", "CodeBleu_score": 37.296943716427144}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_invoice():\n        if self.partner_id.property_payment_term:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term.id\n        elif self.partner_id.property_supplier_payment_term:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term.id\n        else:\n            self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 30.53246866581661}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    if self.is_sale_document(include_receipts=True) and self.partner_id.property_payment_term:\n        self.invoice_payment_term_id = self.partner_id.property_payment_term.id\n    elif self.is_purchase_document(include_receipts=True) and self.partner_id.property_supplier_payment_term:\n        self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term.id\n    else:\n        self.invoice_payment_term_id = False\n", "CodeBleu_score": 39.14224046005316}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self.taxes:\n      if tax.company_id:\n        tax.tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax.company_id.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n      elif tax.country_id:\n        tax.tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id)], limit=1)\n      else:\n        tax.tax_group_id = self.env['account.tax.group'].search([('company_id', '=', False)], limit=1)\n", "CodeBleu_score": 25.14925144493806}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self.taxes:\n      if tax.company_id:\n        tax.tax_group_id = self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id), ('country_id', '=', tax.country_id.id), ('name', '=', tax.name)], limit=1) or self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id), ('country_id', '=', False), ('name', '=', tax.name)], limit=1)\n      else:\n        tax.tax_group_id = self.env['account.tax.group'].search([('company_id', '=', False), ('country_id', '=', tax.country_id.id), ('name', '=', tax.name)], limit=1) or self.env['account.tax.group'].search([('company_id', '=', False), ('country_id', '=', False), ('name', '=', tax.name)], limit=1)\n", "CodeBleu_score": 30.64334118701947}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_group_obj = self.pool.get('account.tax.group')\n    for tax in self.browse(cr, uid, self.ids, context=context):\n        if not tax.tax_group_id:\n            company_id = tax.company_id.id\n            country_id = tax.country_id.id\n            if not company_id and not country_id:\n                raise osv.except_osv(_('Error!'), _('You have to set a company or a country for the tax \"%s\".') % tax.name)\n            if company_id and country_id:\n                tax_group_ids = tax_group_obj.search(cr, uid, [('country_id', '=', country_id), ('company_id', '=', company_id)], context=context)\n                if tax_group_ids:\n                    tax.write({'tax_group_id': tax_group_ids[0]})\n                    continue\n            if company_id:\n                tax_group_ids = tax_group_obj.search(cr, uid, [('company_id', '=', company_id), ('country_id', '=', False)], context=context)\n                if tax_group_ids:\n                    tax.write({'tax_group_id': tax_group_ids[0]})\n                    continue\n            if country_id:\n                tax_group_ids = tax_group_obj.search(cr, uid, [('country_id', '=', country_id), ('company_id', '=', False)], context=context)\n                if tax_group_ids:\n                    tax.write({'tax_group_id': tax_group_ids[0]})\n                    continue\n\n", "CodeBleu_score": 21.40543610435023}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n\n    # Set the database in the session.\n    self.login(url, login, password, db)\n\n    # Prepare the POST request data.\n    data = {\n        'db': db,\n        'force': force,\n    }\n\n    # Read the module file.\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n\n    # Upload the module file.\n    response = self.session.post(\n        urljoin(url, 'base_import_module/login_upload'),\n        data=data,\n        files={'module_file': module_data},\n    )\n\n    # Check if the server has the required module installed or is outdated.\n    if response.status_code == 500:\n        raise Exception('Server does not have the required module installed or is outdated.')\n\n    return response.text\n\n", "CodeBleu_score": 49.36804367889515}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    if db is None:\n        raise Exception('No database specified.')\n    # Set database in session\n    self.session.post(url, data={'db': db})\n    # Prepare POST request data\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = force\n    # Upload module file\n    with open(module_file, 'rb') as f:\n        response = self.session.post(url + 'login_upload', data=data, files={'module': f})\n    # Check if module is installed and raise exception if not\n    if 'Module not installed' in response.text:\n        raise Exception('Module not installed.')\n    elif 'Module version is outdated' in response.text:\n        raise Exception('Module version is outdated.')\n    return response.text\n\n", "CodeBleu_score": 47.268518001087564}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.set_database(db)\n    login_url = url + 'base_import_module/login_upload'\n    login_data = {'login': login, 'password': password, 'force': force}\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n    response = requests.post(login_url, data=login_data, files={'module_file': module_data})\n    if response.status_code != 200:\n        raise Exception('Error uploading module file: ' + response.text)\n    return response.text\n\n", "CodeBleu_score": 41.86379770802018}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    config = get_config()\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    if not db_name:\n        raise Exception('No database name specified')\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite)\n        importer.load_translations()\n\n", "CodeBleu_score": 34.932758413512}, {"code": "def import_translation()\n\t\n    config = get_config()\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    db = registry(db_name)\n    with closing(db.cursor()) as cr:\n        importer = TranslationImporter(cr, overwrite=overwrite)\n        importer.load_translations()\n\n", "CodeBleu_score": 29.13099289468326}, {"code": "def import_translation()\n\t\n    db_name = config.get('db_name', 'odoo')\n    overwrite = config.get('overwrite', False)\n    registry = Registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite=overwrite)\n        importer.import_translations()\n\n", "CodeBleu_score": 34.249557155135044}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    if \"children\" in self.__dict__:\n        new_node.children = self.children\n    if \"parent\" in self.__dict__:\n        new_node.parent = self.parent\n    if \"children\" in self.__dict__ and new_node.name not in self.children:\n        self.children[new_node.name] = new_node\n    self.children = OrderedDict(sorted(self.children.items()))\n    return new_node\n\n", "CodeBleu_score": 35.89480581567241}, {"code": "def add_child(self, name, info)\n\t\n    if not self.has_child(name):\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        self.children.append(new_node)\n        self.sort_children()\n        return new_node\n    else:\n        return self.get_child(name)\n\n", "CodeBleu_score": 34.74491228371158}, {"code": "def add_child(self, name, info)\n\t\n    # If the child already exists, return it\n    for child in self.children:\n        if child.name == name:\n            return child\n    # Otherwise, create a new node and add it to the list\n    new_child = Node(name, info)\n    new_child.depth = self.depth + 1\n    new_child.parent = self\n    new_child.children = []\n    self.children.append(new_child)\n    # Sort the children by name\n    self.children = sorted(self.children, key=lambda x: x.name)\n    return new_child\n\n", "CodeBleu_score": 40.90715030010605}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    result[\"dates\"] = dates\n    result[\"balances\"] = [0] * len(dates)\n    result[\"account_name\"] = account.name\n    result[\"account_type\"] = account.account_type\n    result[\"account_number\"] = account.number\n    result[\"account_currency\"] = account.currency\n    result[\"account_root_type\"] = account.root_type\n    result[\"account_description\"] = account.description\n    result[\"account_id\"] = account.id\n    result[\"entries\"] = []\n    result[\"balance_by_date\"] = {}\n    result[\"balance_by_date\"][\"dates\"] = []\n    result[\"balance_by_date\"][\"balances\"] = []\n    result[\"balance_by_date\"][\"account_name\"] = account.name\n    result[\"balance_by_date\"][\"account_type\"] = account.account_type\n    result[\"balance_by_date\"][\"account_number\"] = account.number\n    result[\"balance_by_date\"][\"account_currency\"] = account.currency\n    result[\"balance_by_date\"][\"account_root_type\"] = account.root_type\n    result[\"balance_by_date\"][\"account_description\"] = account.description\n    result[\"balance_by_date\"][\"account_id\"] = account.id\n    result[\"balance_by_date\"][\"entries\"] = []\n    result[\"balance_by_date\"][\"balance_by_date\"] = {}\n    result[\"balance_by_date\"][\"balance_by_date\"][\"dates\"] = []\n    result[\"balance_by_date\"][\"balance_by_date\"][\"balances\"] = []\n    result[\"balance_by_date\"][\"balance_by_date\"][\"account_name\"] = account.name\n    result[\"balance_by_date\"][\"balance_by_date\"][\"account_type\"] = account.account_type\n    result[\"balance_by_date\"][\"balance_by_date\"][\"account_number\"] = account.number\n    result[\"balance_by_date\"][\"balance_by_date\"][\"account_currency\"] = account.currency\n    result[\"balance_by_date\"][\"balance_by_date\"][\"account_root_type\"] = account.root_type\n    result[\"balance_by_date\"][\"balance_by_date\"][\"account_description\"] = account.description\n    result[\"balance_by_date\"][\"balance_by_date\"][\"account_id\"] = account.id", "CodeBleu_score": 13.60320637058762}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {}\n    result[\"account\"] = account\n    result[\"dates\"] = dates\n    result[\"balances\"] = [0.0] * len(dates)\n    result[\"equity\"] = [0.0] * len(dates)\n    result[\"liability\"] = [0.0] * len(dates)\n    result[\"asset\"] = [0.0] * len(dates)\n    result[\"expense\"] = [0.0] * len(dates)\n    result[\"equity_beginning\"] = 0.0\n    result[\"liability_beginning\"] = 0.0\n    result[\"asset_beginning\"] = 0.0\n    result[\"expense_beginning\"] = 0.0\n    result[\"equity_ending\"] = 0.0\n    result[\"liability_ending\"] = 0.0\n    result[\"asset_ending\"] = 0.0\n    result[\"expense_ending\"] = 0.0\n\n    root_type = account[\"root_type\"]\n    if root_type == \"Asset\":\n        result[\"asset_beginning\"] = account[\"beginning_balance\"]\n        result[\"asset_ending\"] = account[\"ending_balance\"]\n    elif root_type == \"Liability\":\n        result[\"liability_beginning\"] = account[\"beginning_balance\"]\n        result[\"liability_ending\"] = account[\"ending_balance\"]\n    elif root_type == \"Equity\":\n        result[\"equity_beginning\"] = account[\"beginning_balance\"]\n        result[\"equity_ending\"] = account[\"ending_balance\"]\n    elif root_type == \"Expense\":\n        result[\"expense_beginning\"] = account[\"beginning_balance\"]\n        result[\"expense_ending\"] = account[\"ending_balance\"]\n\n    for entry in gl_entries:\n        if entry[\"account\"] == account[\"account_number\"]:\n            if root_type == \"Asset\" or root_type == \"Expense\":\n                result[\"balances\"][entry[\"date\"] - 1] += entry[\"debit\"] - entry[\"credit\"]\n            else:\n                result[\"balances\"][entry[\"date\"] - 1] -= entry[\"debit\"] - entry[\"credit\"]\n            if root_type == \"Asset\":\n                result[\"asset\"][entry[\"date\"] - 1] += entry[\"debit\"] - entry[\"credit\"]\n            elif root_type == \"Liability\":\n                result[\"liability\"][entry[\"date\"] - 1] += entry[\"debit", "CodeBleu_score": 15.58240218034841}, {"code": "def build_result(account, dates, gl_entries)\n\t\n\n    # Initialize the result with the dates and zeros for balances.\n    result = {\n        \"dates\": dates,\n        \"balances\": [0.0] * len(dates),\n        \"total_balance\": 0.0,\n    }\n\n    # Determine the account's root type.\n    root_type = get_root_type(account)\n\n    # Iterate through the entries.\n    for entry in gl_entries:\n        # Ignore entries that aren't for this account.\n        if entry[\"account\"] != account:\n            continue\n\n        # Determine the entry's date.\n        date = entry[\"date\"]\n        date_index = dates.index(date)\n\n        # Update the balance for the entry's date.\n        if root_type in [\"Asset\", \"Expense\"]:\n            result[\"balances\"][date_index] += entry[\"debit\"] - entry[\"credit\"]\n        else:\n            result[\"balances\"][date_index] += -entry[\"debit\"] + entry[\"credit\"]\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances.\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[\"balances\"] = [-balance for balance in result[\"balances\"]]\n\n    # If the root type is \"Asset,\" \"Liability,\" or \"Equity,\" accumulate the balance over time.\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        result[\"total_balance\"] = sum(result[\"balances\"])\n\n    # Return the computed results.\n    return result\n\n", "CodeBleu_score": 25.460523502796413}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.is_receivable and not self.is_receivable_account:\n        gl_entries = frappe.db.sql(\"\"\"select posting_date, account, debit, credit, voucher_type, voucher_no, against_voucher_type, against_voucher, cost_center, project, is_opening from `tabGL Entry` where account=%s and (voucher_type='Sales Invoice' or voucher_type='Purchase Invoice' or voucher_type='Journal Entry')\"\"\", self.name, as_dict=True)\n        if gl_entries:\n            frappe.msgprint(_(\"Cannot change the account type from Receivable to a non-Receivable account as there are existing transactions for this account. Please check the Accounting Entries report\"), raise_exception=1)\n    elif self.is_payable and not self.is_payable_account:\n        gl_entries = frappe.db.sql(\"\"\"select posting_date, account, debit, credit, voucher_type, voucher_no, against_voucher_type, against_voucher, cost_center, project, is_opening from `tabGL Entry` where account=%s and (voucher_type='Sales Invoice' or voucher_type='Purchase Invoice' or voucher_type='Journal Entry')\"\"\", self.name, as_dict=True)\n        if gl_entries:\n            frappe.msgprint(_(\"Cannot change the account type from Payable to a non-Payable account as there are existing transactions for this account. Please check the Accounting Entries report\"), raise_exception=1)\n", "CodeBleu_score": 27.5449304644532}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if self.account_type in (\"Receivable\", \"Payable\") and self.previous_account_type not in (\"Receivable\", \"Payable\"):\n        gl_entries = frappe.db.sql(\"\"\"select posting_date, account, voucher_type, voucher_no, debit, credit, is_opening from `tabGL Entry` where account=%s and docstatus=1\"\"\", self.name, as_dict=True)\n        if gl_entries:\n            frappe.msgprint(_(\"Cannot change the type of Receivable/Payable account to a non-receivable/payable account because there are existing General Ledger Entries for this account. Please contact your account manager for more information.\"), title=_(\"Account Type Change Not Allowed\"), indicator=\"orange\", raise_exception=1)\n            self.add_comment(\"Accounts\", _(\"Cannot change the type of Receivable/Payable account to a non-receivable/payable account because there are existing General Ledger Entries for this account. Please contact your account manager for more information.\"))\n", "CodeBleu_score": 29.67222791690852}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    if not self.is_receivable and not self.is_payable:\n        return\n\n    if self.doctype == \"Account\" and self.docstatus == 1 and self.account_type in [\"Receivable\", \"Payable\"]:\n        if not self.receivable_payable_account_type_changed():\n            return\n\n        if self.check_gle_exists():\n            frappe.msgprint(_(\"Cannot change account type from Receivable/Payable to another type as there are existing General Ledger entries for the account {0}\").format(self.name), title=_(\"Account Type Change Not Allowed\"))\n            self.add_comment(\"Accounts\", _(\"Cannot change account type from Receivable/Payable to another type as there are existing General Ledger entries for the account {0}\").format(self.name))\n            self.db_set(\"account_type\", self.old_account_type)\n            frappe.throw(_(\"Account type cannot be changed from Receivable/Payable to another type as there are existing General Ledger entries for the account {0}\").format(self.name))\n", "CodeBleu_score": 25.399613395179184}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.currency_id:\n        self.currency_id = self.company_id.currency_id.id\n    else:\n        if self.currency_id != self.company_id.currency_id.id:\n            # Check if any account move line is using a different currency\n            if self.env['account.move.line'].search([('account_id', '=', self.id), ('currency_id', '!=', self.currency_id)], limit=1):\n                raise UserError(_('You cannot change the currency of an account that already contains journal entries with another currency.'))\n    return True\n\n", "CodeBleu_score": 24.813483671768424}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        if self.currency_id != self.company_id.currency_id:\n            if self.company_id.currency_id == self.env.ref('base.USD'):\n                raise UserError(_('You cannot use a currency different from your company\\'s primary currency (%s).') % self.company_id.currency_id.name)\n            if self.currency_id.is_zero(self.balance):\n                self.currency_id = self.company_id.currency_id\n            else:\n                raise UserError(_('You cannot change the currency of an account that already contains journal entries. You should instead create a new account with the correct currency.'))\n        self.currency_id.with_context(allow_company=self.company_id).check_access_rights('read')\n        self.currency_id.with_context(allow_company=self.company_id).check_access_rule('read')\n        self.currency_id.with_context(allow_company=self.company_id).check_currency_rate_type()\n    else:\n        self.currency_id = self.company_id.currency_id\n", "CodeBleu_score": 23.277418717079875}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        if self.currency_id.id == self.company_id.currency_id.id:\n            self.currency_id = False\n        else:\n            self.currency_id.write({'is_explicitly_specified': True})\n            if not self.company_id.currency_id.is_zero(self.balance):\n                if self.currency_id.id != self.company_id.currency_id.id:\n                    raise UserError(_('You cannot change the currency of an account that already contains entries.'))\n\n", "CodeBleu_score": 26.123869353793793}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n            aggregated_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n        else:\n            aggregated_entries[key] = key_values\n            aggregated_entries[key][\"debit_in_account_currency\"] = flt(entry.get(\"debit_in_account_currency\"))\n            aggregated_entries[key][\"credit_in_account_currency\"] = flt(entry.get(\"credit_in_account_currency\"))\n    return aggregated_entries\n\n", "CodeBleu_score": 43.73805636903441}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    # Initialize a dictionary to merge entries\n    aggregated_entries = {}\n\n    # Iterate through each entry to generate a unique key and corresponding values\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n            aggregated_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n            aggregated_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n            aggregated_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n            aggregated_entries[key][\"exchange_rate\"] = flt(entry.get(\"exchange_rate\"))\n        else:\n            aggregated_entries[key] = key_values\n            aggregated_entries[key][\"debit\"] = flt(entry.get(\"debit\"))\n            aggregated_entries[key][\"credit\"] = flt(entry.get(\"credit\"))\n            aggregated_entries[key][\"debit_in_account_currency\"] = flt(entry.get(\"debit_in_account_currency\"))\n            aggregated_entries[key][\"credit_in_account_currency\"] = flt(entry.get(\"credit_in_account_currency\"))\n            aggregated_entries[key][\"exchange_rate\"] = flt(entry.get(\"exchange_rate\"))\n\n    return aggregated_entries\n\n", "CodeBleu_score": 37.84136499334465}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    from erpnext.accounts.general_ledger import get_default_finance_book\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = frappe._dict({\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n                \"account\": key_values.get(\"account\"),\n                \"account_currency\": key_values.get(\"account_currency\"),\n                \"cost_center\": key_values.get(\"cost_center\"),\n                \"project\": key_values.get(\"project\"),\n                \"finance_book\": key_values.get(\"finance_book\"),\n                \"is_period_closing_voucher_entry\": key_values.get(\"is_period_closing_voucher_entry\"),\n            })\n        aggregated_entries[key][\"debit\"] += flt(entry.debit)\n        aggregated_entries[key][\"credit\"] += flt(entry.credit)\n        aggregated_entries[key][\"debit_in_account_currency\"] += flt(entry.debit_in_account_currency)\n        aggregated_entries[key][\"credit_in_account_currency\"] += flt(entry.credit_in_account_currency)\n\n    # Set default finance book\n    if not aggregated_entries[key].get(\"finance_book\"):\n        aggregated_entries[key][\"finance_book\"] = get_default_finance_book(aggregated_entries[key].get(\"company\"))\n\n    return aggregated_entries\n\n", "CodeBleu_score": 42.425976974372134}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    supplier = frappe.get_doc(\"Supplier\", self.supplier)\n    if supplier.on_hold and supplier.hold_type == self.doctype:\n        if supplier.release_date and getdate(self.posting_date) < getdate(supplier.release_date):\n            frappe.throw(\n                _(\"Supplier is on hold until {0}.\").format(\n                    formatdate(supplier.release_date)\n                )\n            )\n        else:\n            frappe.throw(_(\"Supplier is on hold\"))\n\n", "CodeBleu_score": 18.961447079898807}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    supplier = self.supplier\n\n    if supplier.is_blocked:\n        if self.type == 'supplier_payment':\n            if supplier.on_hold and supplier.on_hold.hold_type == 'payment':\n                if supplier.on_hold.release_date <= datetime.now().date():\n                    supplier.on_hold = None\n                    supplier.save()\n                else:\n                    raise ValidationError('Supplier is on hold')\n            else:\n                raise ValidationError('Supplier is on hold')\n        elif self.type == 'purchase_invoice':\n            if supplier.on_hold and supplier.on_hold.hold_type == 'invoice':\n                if supplier.on_hold.release_date <= datetime.now().date():\n                    supplier.on_hold = None\n                    supplier.save()\n                else:\n                    raise ValidationError('Supplier is on hold')\n            else:\n                raise ValidationError('Supplier is on hold')\n\n", "CodeBleu_score": 22.706133291057615}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.type in [\"Payment\", \"Journal Entry\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n        if supplier.on_hold and supplier.hold_type == self.type:\n            if self.release_date and getdate(self.release_date) < getdate(nowdate()):\n                supplier.db_set(\"on_hold\", 0)\n            elif not self.release_date:\n                frappe.throw(_(\"Please enter a release date to release the supplier.\"))\n            else:\n                frappe.throw(_(\"Supplier is on hold till {0}\").format(self.release_date))\n\n", "CodeBleu_score": 21.727898602476287}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # Identify repost doctypes\n    repost_doctypes = frappe.get_all(\"DocType\", filters={\"istable\": 0, \"repost_doc\": 1})\n    for repost_doctype in repost_doctypes:\n        # Query for rows where the voucher type and number match the current document\n        voucher_type = repost_doctype.name\n        voucher_number = self.name\n        voucher_rows = frappe.db.sql(\n            \"\"\"\n            SELECT\n                parenttype,\n                parent\n            FROM\n                `tab{voucher_type}`\n            WHERE\n                voucher_type = %s AND voucher_number = %s\n            \"\"\".format(\n                voucher_type=voucher_type\n            ),\n            (voucher_type, voucher_number),\n            as_dict=1,\n        )\n        # Organize rows into a map by parent document type and parent\n        voucher_map = {}\n        for voucher_row in voucher_rows:\n            parenttype = voucher_row.parenttype\n            parent = voucher_row.parent\n            if parenttype not in voucher_map:\n                voucher_map[parenttype] = {}\n            if parent not in voucher_map[parenttype]:\n                voucher_map[parenttype][parent] = []\n            voucher_map[parenttype][parent].append(voucher_row)\n        # Retrieve each parent document, remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields depending on the doctype, set flags to ignore validation and links, and save the changes\n        for parenttype in voucher_map:\n            for parent in voucher_map[parenttype]:\n                parent_doc = frappe.get_doc(parenttype, parent)\n                if repost_doctype.name in parent_doc.repost_vouchers:\n                    for voucher_row in voucher_map[parenttype][parent]:\n                        if voucher_row in parent_doc.repost_vouchers:\n                            parent_doc.repost_vouchers.remove(voucher_row)\n                        if voucher_row in parent_doc.vouchers:\n                            parent_doc.vouchers.remove(voucher_row)\n                elif repost_doctype.name in parent_doc.vouchers:\n                    for voucher_row in voucher_", "CodeBleu_score": 16.32294287591398}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    # Get the list of repost doctypes\n    repost_doctypes = frappe.get_all(\"DocType\", filters={\"istable\": 0, \"issingle\": 0, \"repost_of\": self.doctype}, fields=[\"name\", \"repost_of\"])\n\n    # Iterate over the list\n    for doctype in repost_doctypes:\n        # Get the repost doctype's parent doctype\n        parent_doctype = frappe.get_cached_value(doctype.name, \"repost_of\", \"name\")\n\n        # Get the repost doctype's parent field\n        parent_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"fieldname\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"child_doctype\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"child_doctype\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"child_doctype\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"child_doctype\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"child_doctype\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"child_doctype\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"child_doctype\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"child_doctype\")\n\n        # Get the repost doctype's child field\n        child_field = frappe.get_cached_value(doctype.name, \"repost_of\", \"", "CodeBleu_score": 15.278025857774402}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    doctypes = frappe.get_all(\n        \"DocType\",\n        filters={\"repost_doc_type\": self.doctype},\n        fields=[\"name\", \"repost_doc_type\"],\n    )\n    for doctype in doctypes:\n        repost_doctype = doctype.repost_doc_type\n        vouchers = frappe.db.get_all(\n            repost_doctype,\n            filters={\n                \"voucher_type\": self.doctype,\n                \"voucher_no\": self.name,\n                \"docstatus\": 1,\n            },\n            fields=[\"name\", \"parent\", \"parenttype\"],\n        )\n        if not vouchers:\n            continue\n        voucher_map = {}\n        for voucher in vouchers:\n            if voucher.parent not in voucher_map:\n                voucher_map[voucher.parent] = {\n                    \"parenttype\": voucher.parenttype,\n                    \"repost_vouchers\": [],\n                    \"vouchers\": [],\n                }\n            voucher_map[voucher.parent][\"repost_vouchers\"].append(voucher.name)\n        for parent, vouchers in voucher_map.items():\n            parent_doc = frappe.get_doc(vouchers[\"parenttype\"], parent)\n            if repost_doctype == \"GL Entry\":\n                parent_doc.flags.ignore_validate_update_after_submit = True\n                parent_doc.flags.ignore_links = True\n                parent_doc.repost_vouchers = vouchers[\"repost_vouchers\"]\n                parent_doc.save()\n            else:\n                parent_doc.flags.ignore_validate_update_after_submit = True\n                parent_doc.flags.ignore_links = True\n                parent_doc.vouchers = vouchers[\"repost_vouchers\"]\n                parent_doc.save()\n\n", "CodeBleu_score": 20.68677487791208}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    self.transactions = []\n    self.transaction_count = 0\n    self.total_transactions = 0\n    self.total_transactions_fetched = 0\n    self.start_date = start_date\n    self.end_date = end_date\n    self.account_id = account_id\n    self.query_params = {\n        \"gte\": start_date,\n        \"lte\": end_date,\n        \"options\": {\n            \"account_ids\": [account_id] if account_id else None,\n            \"count\": 250,\n            \"offset\": 0,\n        },\n    }\n    self.transactions_request = self.client.Transactions.get(self.query_params)\n    self.transactions_response = self.transactions_request.content\n    self.transactions_json = json.loads(self.transactions_response)\n    self.total_transactions = self.transactions_json[\"total_transactions\"]\n    self.total_transactions_fetched = self.transactions_json[\"transactions_fetched\"]\n    self.transactions = self.transactions + self.transactions_json[\"transactions\"]\n    while self.total_transactions_fetched < self.total_transactions:\n        self.query_params[\"options\"][\"offset\"] = (\n            self.query_params[\"options\"][\"offset\"] + self.query_params[\"options\"][\"count\"]\n        )\n        self.transactions_request = self.client.Transactions.get(self.query_params)\n        self.transactions_response = self.transactions_request.content\n        self.transactions_json = json.loads(self.transactions_response)\n        self.total_transactions_fetched = self.transactions_json[\"transactions_fetched\"]\n        self.transactions = self.transactions + self.transactions_json[\"transactions\"]\n    if self.transactions_json[\"code\"] == \"PRODUCT_NOT_READY\":\n        frappe.log_error(\"Plaid: Product not ready\")\n        frappe.throw(\n            _(\n                \"The Plaid product is not ready. Please contact Plaid support for assistance.\"\n            ),\n            title=_(\"Product Not Ready\"),\n        )\n    if self.transactions_json[\"code\"] == \"PRODUCT_NOT_READY\":\n        frappe.log_error(\"Plaid: Product not ready\")\n        frappe.throw(\n            _(\n                \"The Plaid product is not", "CodeBleu_score": 25.49468762026217}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    # Authenticate the client\n    self.auth()\n    # Construct the query parameters\n    query = {\n        \"gte\": start_date,\n        \"lte\": end_date,\n        \"options\": {\n            \"account_id\": account_id,\n            \"count\": 250,\n            \"offset\": 0\n        }\n    }\n    # Fetch transactions\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, query)\n        except ItemError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                pass\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Transaction fetch error\")\n            frappe.throw(_(str(e)), title=_(\"Transaction Fetch Failed\"))\n        else:\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) < response[\"total_transactions\"]:\n                query[\"options\"][\"offset\"] += query[\"options\"][\"count\"]\n            else:\n                break\n    # Return the transactions\n    return transactions\n\n", "CodeBleu_score": 35.313881189443975}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    params = {\n        \"gte\": start_date,\n        \"lte\": end_date,\n        \"options\": {\n            \"account_ids\": [account_id] if account_id else [],\n            \"count\": 250,\n            \"offset\": 0,\n        },\n    }\n    transactions = []\n    try:\n        response = self.client.Transactions.get(self.access_token, params)\n        transactions.extend(response[\"transactions\"])\n        while len(response[\"transactions\"]) == params[\"options\"][\"count\"]:\n            params[\"options\"][\"offset\"] += params[\"options\"][\"count\"]\n            response = self.client.Transactions.get(self.access_token, params)\n            transactions.extend(response[\"transactions\"])\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Error retrieving transactions\")\n        frappe.throw(_(str(e)), title=_(\"Transactions Retrieval Failed\"))\n", "CodeBleu_score": 39.32278990715472}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        # Parse the response\n        response = json.loads(response)\n        # Retrieve an access token\n        access_token = PlaidConnector.get_access_token(token, response[\"public_token\"])\n        # Create a new PlaidConnector instance\n        plaid_connector = PlaidConnector()\n        # Get the institution's data\n        institution_data = plaid_connector.client.Institutions.get(access_token, response[\"institution_id\"])\n        # Check if the institution already exists in the database\n        bank = frappe.db.exists(\"Bank\", {\"plaid_institution_id\": institution_data[\"institution\"][\"institution_id\"]})\n        if bank:\n            # Update the access token for the existing bank record\n            frappe.db.set_value(\"Bank\", bank, \"plaid_access_token\", access_token)\n            # Save the bank record\n            frappe.db.commit()\n        else:\n            # Create a new bank record\n            bank_record = frappe.new_doc(\"Bank\")\n            bank_record.plaid_access_token = access_token\n            bank_record.plaid_institution_id = institution_data[\"institution\"][\"institution_id\"]\n            bank_record.plaid_institution_name = institution_data[\"institution\"][\"name\"]\n            bank_record.plaid_institution_url = institution_data[\"institution\"][\"url\"]\n            bank_record.plaid_institution_logo = institution_data[\"institution\"][\"logo\"]\n            bank_record.plaid_institution_type = institution_data[\"institution\"][\"type\"]\n            bank_record.save()\n            # Save the bank record\n            frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback(), \"Plaid: Error adding bank\")\n", "CodeBleu_score": 41.18852832876739}, {"code": "def add_institution(token, response)\n\t\n    # Parse the response\n    institution_name = response[\"institution\"][\"name\"]\n    institution_id = response[\"institution\"][\"institution_id\"]\n    # Retrieve an access token\n    plaid_connector = PlaidConnector(token)\n    access_token = plaid_connector.get_access_token(response[\"public_token\"])\n    # Check if the bank already exists in the database\n    bank = frappe.db.get_value(\"Bank\", {\"institution_id\": institution_id})\n    if bank:\n        # Update the access token for the existing bank record and save it\n        frappe.db.set_value(\"Bank\", bank, \"access_token\", access_token)\n        frappe.db.commit()\n        frappe.log_error(\"Plaid: Bank {0} has been updated\".format(institution_name))\n    else:\n        # Create and insert a new bank record\n        bank = frappe.get_doc({\n            \"doctype\": \"Bank\",\n            \"institution_name\": institution_name,\n            \"institution_id\": institution_id,\n            \"access_token\": access_token\n        })\n        bank.insert()\n        frappe.log_error(\"Plaid: Bank {0} has been added\".format(institution_name))\n", "CodeBleu_score": 32.288766209598805}, {"code": "def add_institution(token, response)\n\t\n    institution_name = response[\"institution\"][\"name\"]\n    institution_id = response[\"institution\"][\"institution_id\"]\n    url = response[\"institution\"][\"url\"]\n    plaid_access_token = token.get_access_token(response[\"public_token\"])\n    if plaid_access_token is None:\n        frappe.log_error(\"Plaid: Access token is missing\")\n        return\n    try:\n        bank = frappe.get_doc(\"Bank\", {\"plaid_institution_id\": institution_id})\n        if bank.plaid_access_token != plaid_access_token:\n            bank.plaid_access_token = plaid_access_token\n            bank.save()\n    except frappe.DoesNotExistError:\n        bank = frappe.new_doc(\"Bank\")\n        bank.plaid_institution_id = institution_id\n        bank.plaid_access_token = plaid_access_token\n        bank.plaid_url = url\n        bank.plaid_name = institution_name\n        bank.save()\n\n", "CodeBleu_score": 33.567443724724}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n\n    # Get the last integration date\n    last_integration_date = frappe.db.get_value(\"Bank Account\", bank_account, \"last_integration_date\")\n\n    # Get the start date for the transaction retrieval\n    if last_integration_date:\n        start_date = last_integration_date + timedelta(days=1)\n    else:\n        start_date = getdate(frappe.db.get_value(\"Bank\", bank, \"start_date\"))\n\n    # Get the end date for the transaction retrieval\n    end_date = getdate(nowdate())\n\n    # Get the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date\n    if new_transactions:\n        last_integration_date = min(\n            frappe.db.get_value(\"Bank Transaction\", {\"name\": (\"in\", new_transactions)}, \"date\")\n        )\n        frappe.db.set_value(\"Bank Account\", bank_account, \"last_integration_date\", last_integration_date)\n\n    # Log the number of new transactions added\n    frappe.msgprint(\n        _(\"Number of new transactions added: {0}\").format(len(new_transactions)),\n        title=_(\"Bank Transactions Synced\"),\n    )\n\n", "CodeBleu_score": 41.699349476257815}, {"code": "def sync_transactions(bank, bank_account)\n\t\n\n    from frappe.utils import nowdate\n\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    if not last_integration_date:\n        last_integration_date = nowdate()\n\n    start_date = add_days(last_integration_date, 1)\n    end_date = add_days(nowdate(), -1)\n\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            new_transactions = []\n            for transaction in transactions:\n                new_transactions += new_bank_transaction(transaction)\n\n            if new_transactions:\n                frappe.db.set_value(\n                    \"Bank Account\", bank_account, \"last_integration_date\", start_date\n                )\n                frappe.msgprint(\n                    _(\"Added {0} new transactions\").format(len(new_transactions))\n                )\n\n    except Exception:\n        frappe.log_error(\n            title=_(\"Bank Transactions Sync Error\"),\n            message=frappe.get_traceback(),\n        )\n", "CodeBleu_score": 39.868151845478}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        start_date = last_integration_date\n        end_date = getdate()\n\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            new_transactions = []\n            for transaction in transactions:\n                new_transactions += new_bank_transaction(transaction)\n            if new_transactions:\n                frappe.db.set_value(\n                    \"Bank Account\",\n                    bank_account,\n                    \"last_integration_date\",\n                    getdate(min([t[\"date\"] for t in transactions])),\n                )\n                frappe.db.commit()\n                frappe.msgprint(\n                    _(\"{} new transactions added\").format(len(new_transactions)),\n                    alert=True,\n                )\n        else:\n            frappe.msgprint(\n                _(\"No transactions found for {}.\").format(\n                    frappe.bold(\n                        frappe.db.get_value(\"Bank Account\", bank_account, \"bank_account_name\")\n                    )\n                ),\n                alert=True,\n            )\n\n    except Exception:\n        frappe.log_error(\n            title=_(\"Bank Transaction Sync Error\"),\n            message=_(\"Bank transaction sync failed\"),\n            method=\"plaid_connector.plaid_connector.doctype.plaid_settings.plaid_settings.sync_transactions\",\n        )\n", "CodeBleu_score": 30.411836616433135}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query = self._build_query(entity)\n    uri = f\"{self.base_url}/v3/company/{self.company_id}/{query}\"\n    response = self._get(uri)\n    if response.status_code == 200:\n        data = json.loads(response.text)\n        total = data[\"totalCount\"]\n        entries = data[entity]\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n        return total\n    else:\n        self._log_error(response.text, data)\n        return 0", "CodeBleu_score": 23.82951893504847}, {"code": "def _migrate_entries(self, entity)\n\t\n    uri = f\"company/{self.company_id}/{entity}?minorversion=37&startposition={self.start_position}&maxresults=1000\"\n    response = self._get(self.base_url + uri)\n    if response.status_code == 200:\n        data = response.json()\n        total = data[\"QueryResponse\"][\"totalCount\"]\n        entries = data[\"QueryResponse\"][entity]\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n        self.start_position += len(entries)\n        if self.start_position < total:\n            self._migrate_entries(entity)\n    else:\n        self._log_error(response.text, data)\n\n", "CodeBleu_score": 23.584865615322524}, {"code": "def _migrate_entries(self, entity)\n\t\n    self._publish({\"event\": \"progress\", \"message\": _(\"Migrating {0}\").format(entity)})\n    query_uri = f\"{self.base_url}/company/{self.company_id}/{entity}?minorversion=37\"\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        data = response.json()\n        total = data.get(\"TotalCount\", 0)\n        entries = data.get(\"QueryResponse\", {}).get(entity, [])\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n        return total\n    else:\n        self._log_error(response.text, data)\n        return 0\n", "CodeBleu_score": 33.58345383537289}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not invoice.get(\"TxnTaxDetail\"):\n            invoice[\"TxnTaxDetail\"] = {\"TotalTax\": 0}\n        if not invoice.get(\"TxnTaxDetail\", {}).get(\"TotalTax\"):\n            invoice[\"TxnTaxDetail\"][\"TotalTax\"] = 0\n        if not invoice.get(\"LinkedTxn\"):\n            invoice[\"LinkedTxn\"] = []\n\n        quickbooks_id = self._get_quickbooks_id(invoice)\n        is_return = self._is_return(invoice)\n        is_pos = self._is_pos(invoice)\n\n        if self._is_statement_charge(invoice) or self._is_reimburse_charge(invoice):\n            self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n        else:\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=is_return, is_pos=is_pos)\n\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 35.39297297125755}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = self._get_quickbooks_id(invoice)\n        if self._is_linked_transaction_of_type(invoice, \"StatementCharge\") or self._is_linked_transaction_of_type(\n            invoice, \"ReimburseCharge\"\n        ):\n            self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n        else:\n            self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])\n\n", "CodeBleu_score": 45.268303127487876}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = self._get_quickbooks_id(invoice)\n        if invoice[\"LinkedTxn\"]:\n            for linked_txn in invoice[\"LinkedTxn\"]:\n                if linked_txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                    return\n        self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 41.1529126631401}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # get the interval between visits\n    interval = (end_date - start_date) / no_of_visit\n\n    # create a list of dates, starting from the start_date, with the interval\n    schedule_list = [start_date + n * interval for n in range(no_of_visit)]\n\n    # iterate through the list to adjust dates to avoid holidays\n    for i in range(len(schedule_list)):\n        schedule_list[i] = self.validate_schedule_date_for_holiday_list(schedule_list[i], sales_person)\n\n    return schedule_list\n\n", "CodeBleu_score": 24.25359539197391}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    interval = (end_date - start_date) / no_of_visit\n    for i in range(no_of_visit):\n        schedule_list.append(schedule_date)\n        schedule_date = schedule_date + interval\n    schedule_list = [self.validate_schedule_date_for_holiday_list(schedule_date, sales_person) for schedule_date in schedule_list]\n    return schedule_list\n", "CodeBleu_score": 26.610111211915736}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # calculate interval\n    interval = (end_date - start_date) / (no_of_visit - 1)\n\n    # create schedule\n    schedule = [start_date + interval * i for i in range(no_of_visit)]\n\n    # adjust dates to avoid holidays\n    schedule = [self.validate_schedule_date_for_holiday_list(date, sales_person) for date in schedule]\n\n    return schedule\n\n", "CodeBleu_score": 18.808673635388033}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t\n// Determine the method to handle the request.\n        $method = request()->get('handle', 'edit');\n\n// Construct a URL for bulk actions.\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n// Render HTML content for a modal using the specified view and data.\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n// Return a JSON response for a given view and data.\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.84846855808269}, {"code": "<?\n   public function response($view, $data = []){\n\t\n/**\n * Determine the method to handle the request.\n */\n       $method = request()->get('handle', 'edit');\n\n/**\n * Determine the handle to be used for the bulk action.\n */\n       $handle = $this->actions[$method]['handle'] ?? 'update';\n\n/**\n * Construct a URL for bulk actions.\n */\n       $url = route('bulk-actions.action', $this->path);\n\n/**\n * Render HTML content for a modal using the specified view and data.\n */\n       $html = view('components.index.bulkaction.modal', [\n           'url' => $url,\n           'handle' => $handle,\n           'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n           'html' => view($view, $data)->render(),\n       ])->render();\n\n/**\n * Return a JSON response for the bulk action.\n */\n       return response()->json([\n           'success' => true,\n           'error' => false,\n           'message' => '',\n           'data' => [\n               'title' => $this->findTranslation($this->text),\n               'path' => $url,\n               'handle' => $handle,\n           ],\n           'html' => $html,\n       ]);\n   }", "CodeBleu_score": 97.45018645053396}, {"code": "<?\n   public function response($view, $data = []){\n\t\n//        $method = request()->get('handle', 'edit');\n//\n//        $handle = $this->actions[$method]['handle'] ?? 'update';\n//        $url = route('bulk-actions.action', $this->path);\n//\n//        $html = view('components.index.bulkaction.modal', [\n//            'url' => $url,\n//            'handle' => $handle,\n//            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n//            'html' => view($view, $data)->render(),\n//        ])->render();\n//\n//        return response()->json([\n//            'success' => true,\n//            'error' => false,\n//            'message' => '',\n//            'data' => [\n//                'title' => $this->findTranslation($this->text),\n//                'path' => $url,\n//                'handle' => $handle,\n//            ],\n//            'html' => $html,\n//        ]);\n//    }", "CodeBleu_score": 5.908764367816092}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$selectedContacts = $this->getSelectedRecords($request);\n\n$errors = [];\n\nforeach ($selectedContacts as $contact) {\ntry {\n$contact->delete();\n} catch (Exception $e) {\n$errors[] = $e->getMessage();\n}\n}\n\nif (!empty($errors)) {\nsession()->flash('error', implode(' ', $errors));\n} else {\nsession()->flash('success', 'Successfully deleted contacts!');\n}\n\nreturn redirect()->back();\n}", "CodeBleu_score": 43.549090772607315}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n$contacts->each(function($contact) {\n    try {\n        $contact->delete();\n    } catch (Exception $e) {\n        $this->error($e->getMessage());\n    }\n});\n}", "CodeBleu_score": 40.49723634901349}, {"code": "<?\npublic function deleteContacts($request){\n\t$selectedContacts = $this->getSelectedRecords($request);\n\nforeach ($selectedContacts as $contact) {\ntry {\n$contact->delete();\n} catch (Exception $e) {\n$this->error($e->getMessage());\n}\n}\n}", "CodeBleu_score": 45.13471435144487}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\nforeach ($transactions as $transaction) {\ntry {\n$transaction->delete();\n} catch (Exception $e) {\n$this->flashError('An error occurred while deleting the selected transactions. Please try again later.');\n\nreturn redirect()->back();\n}\n}\n\n$this->flashSuccess('The selected transactions have been deleted successfully.');\n\nreturn redirect()->back();\n}", "CodeBleu_score": 46.74068634069698}, {"code": "<?\npublic function deleteTransactions($request){\n\t\n$selected = $this->getSelectedInput($request);\n\nif (empty($selected)) {\nreturn;\n}\n\n$transactions = $this->model::find($selected);\n\nforeach ($transactions as $transaction) {\ntry {\ndispatch(new DeleteTransaction($transaction));\n} catch (Exception $e) {\n$this->flashError('Unable to delete transaction. Please try again.');\n}\n}\n}", "CodeBleu_score": 50.569414492226706}, {"code": "<?\npublic function deleteTransactions($request){\n\t\n$selected = $this->getSelectedRecords($request);\n\nif (count($selected) > 0) {\n\nforeach ($selected as $transaction) {\n\ntry {\n\n$this->dispatch(new DeleteTransaction($transaction));\n\n} catch (Exception $e) {\n\nsession()->flash('error', 'There was an error deleting the selected transactions. Please try again later.');\n\n}\n\n}\n\nsession()->flash('success', 'The selected transactions have been deleted!');\n\n} else {\n\nsession()->flash('warning', 'No transactions were selected.');\n\n}\n\nreturn redirect()->route('transactions.index');\n\n}", "CodeBleu_score": 48.07075707544873}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t$request = app($this->getRequestClass());\nif (! $request instanceof FormRequest) {\nreturn;\n}\n$rules = $this->prepareRules($request->rules());\nforeach ($this->data as $row) {\n$request->replace($row);\n$request->setValidator($validator);\n$validator->after(function ($validator) use ($request) {\n$this->after($validator, $request);\n});\n$validator->validate();\n}\n}", "CodeBleu_score": 29.93363903904901}, {"code": "<?\npublic function withValidator($validator){\n\t$request = $this->getRequest();\nif (! $request) {\nreturn;\n}\n$rules = $this->prepareRules($request->rules());\nforeach ($this->data as $row) {\n$request->replace($row);\n$validator->after(function ($validator) use ($request, $rules) {\nif (! $request->passes($rules) && ! $validator->errors()->has('errors')) {\n$validator->errors()->add('errors', $request->messages());\n}\n});\n}\n}", "CodeBleu_score": 26.62635315794265}, {"code": "<?\npublic function withValidator($validator){\n\t$request = app()->make($this->getRequestClass());\n$rules = $this->prepareRules($request->rules());\nforeach ($this->data as $index => $row) {\n$request->replace($row);\n$request->setValidator($validator);\n$validator->after(function ($validator) use ($request) {\n$this->after($request, $validator);\n});\ntry {\n$request->validate($rules);\n} catch (ValidationException $e) {\n$validator->addFailures($request, $e->validator);\n}\n}\n}", "CodeBleu_score": 36.524097077954345}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t$this->bootUpdateModel(...$arguments);\n$this->bootUpdateRequest(...$arguments);\n}", "CodeBleu_score": 9.897125820964128}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t$this->initializeUpdate(...$arguments);\n\nif ($this->implements(ShouldUpdate::class)) {\n$this->update();\n}\n}", "CodeBleu_score": 11.27880815459109}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t$this->model = $this->getModelInstance($arguments[0]);\n$this->request = $this->getRequestInstance($arguments[1]);\n}", "CodeBleu_score": 29.476502854322916}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $request = request();\n $sort = $request->sort;\n $sort = explode(',', $sort);\n $sort = array_map('trim', $sort);\n $sort = array_map('strtolower', $sort);\n $sort = array_map('ucfirst', $sort);\n $sort = implode(' ', $sort);\n $sort = 'orderBy(\\'' . $sort . '\\')';\n $search = $request->search;\n $search = explode(',', $search);\n $search = array_map('trim', $search);\n $search = array_map('strtolower', $search);\n $search = array_map('ucfirst', $search);\n $search = implode(' ', $search);\n $search = 'where(\\'' . $search . '\\')';\n $query = $query->select('id', 'name', 'email', 'phone', 'address', 'city', 'state', 'zip', 'created_at', 'updated_at');\n $query = $query->where($search);\n $query = $query->where('deleted_at', '=', NULL);\n $query = $query->orderBy('id', 'desc');\n $limit = $request->limit;\n if ($limit == 'all') {\n $limit = $query->count();\n }\n $query = $query->paginate($limit);\n return $query;\n }", "CodeBleu_score": 42.995289233382515}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $sort = Request::get('sort', $sort);\n $sort = in_array($sort, $this->sortable) ? $sort : 'name';\n $query = $query->orderBy($sort, Request::get('direction', 'asc'));\n if (Request::get('q')) {\n $query = $query->where(function ($query) {\n foreach (explode(' ', Request::get('q')) as $term) {\n $query->where('name', 'like', \"%{$term}%\");\n }\n });\n }\n if (Request::wantsJson() && ! Request::is('api/*')) {\n return $query->get();\n }\n return $query->paginate(Request::get('limit', 25));\n }", "CodeBleu_score": 43.262795183436445}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t $request = request();\n if ($request->expectsJson() && !$request->is('api/*')) {\n return $query->get();\n } else {\n return $query->orderBy($sort)->paginate(15);\n }\n }", "CodeBleu_score": 31.906590073254876}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$payments = 0;\n\t$total = 0;\n\t$open = 0;\n\t$overdue = 0;\n\n\t// If the document is paid, return 0\n\tif ($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\n\t// Sum the payments from the transactions\n\tforeach ($model->transactions as $transaction) {\n\t\t$payments += $transaction->amount;\n\t}\n\n\t// Calculate the total\n\t$total = $model->amount - $payments;\n\n\t// If the document is overdue, calculate the overdue amount\n\tif ($model->status == 'partial' && $model->due_date < date('Y-m-d')) {\n\t\t$overdue = $total;\n\t}\n\n\t// Calculate the open amount\n\t$open = $total - $overdue;\n\n\treturn [$open, $overdue];\n}", "CodeBleu_score": 39.954367750302275}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open_amount = 0;\n\t$overdue_amount = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'open_amount' => $open_amount,\n\t\t\t'overdue_amount' => $overdue_amount\n\t\t];\n\t}\n\n\t$payments = $model->transactions()\n\t\t->where('type', 'payment')\n\t\t->where('status', '!=', 'canceled')\n\t\t->sum('amount');\n\n\t$open_amount = $payments;\n\t$overdue_amount = 0;\n\n\tif ($model->due_date) {\n\t\t$due_date = Carbon::createFromFormat('Y-m-d', $model->due_date);\n\t\t$now = Carbon::now();\n\t\tif ($due_date < $now) {\n\t\t\t$overdue_amount = $payments;\n\t\t\t$open_amount = 0;\n\t\t}\n\t}\n\n\treturn [\n\t\t'open_amount' => $open_amount,\n\t\t'overdue_amount' => $overdue_amount\n\t];\n}", "CodeBleu_score": 40.58679738573579}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$openAmount = 0;\n\t$overdueAmount = 0;\n\n\tif($model->status == 'paid') {\n\t\treturn [0, 0];\n\t}\n\n\t$payments = $model->transactions->where('transaction_type', 'payment');\n\n\tforeach($payments as $payment) {\n\t\t$openAmount += $payment->amount;\n\t}\n\n\t$dueDate = Carbon::createFromFormat('Y-m-d', $model->due_date);\n\t$today = Carbon::today();\n\n\tif($dueDate->gt($today)) {\n\t\t$overdueAmount = $openAmount;\n\t\t$openAmount = 0;\n\t}\n\n\treturn [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 38.10072749469726}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page ?: LengthAwarePaginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage ?: $this->model->getPerPage();\n\t$total = $this->toBase()->getCountForPagination();\n\t$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\treturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => LengthAwarePaginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 75.61381417865012}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage ?: $this->model->getPerPage();\n\t$total = $this->toBase()->getCountForPagination();\n\t$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\treturn new LengthAwarePaginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 80.11047228117833}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: $this->resolveCurrentPage($pageName);\n$perPage = $perPage ?: $this->getPerPage();\n$total = $this->toBase()->getCountForPagination();\n$results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\nreturn $this->paginator($results, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 73.06996926468591}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\t$reconciliation = Reconciliation::find($request->reconciliation_id);\n\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t$reconciliation->save();\n\n\t$transactions = Transaction::where('account_id', '=', $reconciliation->account_id)\n\t\t->where('transaction_date', '>=', $reconciliation->start_date)\n\t\t->where('transaction_date', '<=', $reconciliation->end_date)\n\t\t->where('status', '=', Transaction::STATUS_PENDING)\n\t\t->get();\n\n\tforeach ($transactions as $transaction) {\n\t\t$transaction->status = Transaction::STATUS_RECONCILED;\n\t\t$transaction->save();\n\t}\n}", "CodeBleu_score": 31.191466202574613}, {"code": "<?\npublic function reconcile($request){\n\t\t// Get the reconciliation\n\t$reconciliation = Reconciliation::find($request->input('reconciliation_id'));\n\n\t// Make sure the reconciliation belongs to the user\n\tif ($reconciliation->user_id != $request->user()->id) {\n\t\treturn response()->json([\n\t\t\t'success' => false,\n\t\t\t'message' => 'Reconciliation does not belong to user.',\n\t\t]);\n\t}\n\n\t// Make sure the reconciliation is not already reconciled\n\tif ($reconciliation->status == 'reconciled') {\n\t\treturn response()->json([\n\t\t\t'success' => false,\n\t\t\t'message' => 'Reconciliation has already been reconciled.',\n\t\t]);\n\t}\n\n\t// Make sure the reconciliation has been submitted\n\tif ($reconciliation->status != 'submitted') {\n\t\treturn response()->json([\n\t\t\t'success' => false,\n\t\t\t'message' => 'Reconciliation must be submitted before it can be reconciled.',\n\t\t]);\n\t}\n\n\t// Mark the reconciliation as reconciled\n\t$reconciliation->status = 'reconciled';\n\t$reconciliation->save();\n\n\t// Mark all related transactions as reconciled\n\tDB::table('transactions')\n\t\t->where('user_id', $reconciliation->user_id)\n\t\t->where('date', '>=', $reconciliation->date_range[0])\n\t\t->where('date', '<=', $reconciliation->date_range[1])\n\t\t->where('account_id', $reconciliation->account_id)\n\t\t->update(['reconciled' => 1]);\n\n\t// Return success\n\treturn response()->json([\n\t\t'success' => true,\n\t\t'message' => 'Reconciliation reconciled.',\n\t]);\n}", "CodeBleu_score": 27.523948807775856}, {"code": "<?\npublic function reconcile($request){\n\t\t// Get the reconciliation records\n\t$reconciliations = Reconciliation::where('id', '=', $request->input('reconciliation_id'))\n\t\t->where('user_id', '=', $request->user()->id)\n\t\t->get();\n\n\t// If there are no reconciliations, return an error\n\tif (count($reconciliations) == 0) {\n\t\treturn response()->json([\n\t\t\t'status' => 'error',\n\t\t\t'error' => 'No reconciliations found'\n\t\t], 400);\n\t}\n\n\t// Begin a database transaction\n\tDB::beginTransaction();\n\n\ttry {\n\t\t// Iterate over the reconciliations\n\t\tforeach ($reconciliations as $reconciliation) {\n\t\t\t// Mark the reconciliation as reconciled\n\t\t\t$reconciliation->status = 'reconciled';\n\t\t\t$reconciliation->save();\n\n\t\t\t// Mark all related transactions as reconciled\n\t\t\t$transactions = Transaction::where('reconciliation_id', '=', $reconciliation->id)\n\t\t\t\t->get();\n\n\t\t\tforeach ($transactions as $transaction) {\n\t\t\t\t$transaction->status = 'reconciled';\n\t\t\t\t$transaction->save();\n\t\t\t}\n\t\t}\n\n\t\t// Commit the transaction\n\t\tDB::commit();\n\n\t\t// Return a success response\n\t\treturn response()->json([\n\t\t\t'status' => 'success'\n\t\t], 200);\n\t}\n\tcatch (Exception $e) {\n\t\t// Rollback the transaction\n\t\tDB::rollback();\n\n\t\t// Return an error response\n\t\treturn response()->json([\n\t\t\t'status' => 'error',\n\t\t\t'error' => $e->getMessage()\n\t\t], 400);\n\t}\n}", "CodeBleu_score": 32.84447718905743}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->argument('user');\n\t$invitation = $this->argument('invitation');\n\n\t$this->info('Retrieving existing invitations for user...');\n\t$existing_invitations = $user->invitations()->get();\n\n\t$this->info('Deleting existing invitations for user...');\n\t$user->invitations()->delete();\n\n\t$this->info('Creating new invitation for user...');\n\t$invitation = $user->invitations()->create([\n\t\t'email' => $invitation['email'],\n\t\t'token' => $invitation['token'],\n\t]);\n\n\ttry {\n\t\t$this->info('Dispatching notification job...');\n\t\t$this->dispatch(new NotifyUserInvitation($invitation));\n\t} catch (Exception $e) {\n\t\t$this->error('Failed to dispatch notification job: ' . $e->getMessage());\n\t}\n\n\t$this->info('Successfully created invitation!');\n\n\treturn $invitation;\n}", "CodeBleu_score": 30.78631154458321}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->argument('user');\n\t$invitation = $this->argument('invitation');\n\n\t// Retrieve existing invitations for the user.\n\t$existingInvitations = UserInvitation::where('user_id', $user->id)->get();\n\n\t// Delete existing invitations for the user.\n\tforeach ($existingInvitations as $existingInvitation) {\n\t\t$existingInvitation->delete();\n\t}\n\n\t// Create a new invitation with a unique token.\n\t$token = Str::random(32);\n\t$newInvitation = UserInvitation::create([\n\t\t'user_id' => $user->id,\n\t\t'token' => $token,\n\t]);\n\n\t// Attempt to dispatch a notification job to notify the user.\n\ttry {\n\t\tNotification::route('mail', $user->email)->notify(new UserInvitationNotification($newInvitation));\n\t} catch (Exception $e) {\n\t\t$newInvitation->delete();\n\t\t$this->error('Failed to send invitation notification to user.');\n\t\t$this->error($e->getMessage());\n\t\treturn;\n\t}\n\n\t// Return the newly created invitation.\n\treturn $newInvitation;\n}", "CodeBleu_score": 37.004410089538275}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$user = $this->argument('user');\n\t$email = $this->argument('email');\n\n\t// Retrieve existing invitations for the user.\n\t$invitations = $user->invitations()->where('email', $email)->get();\n\n\t// Delete existing invitations.\n\tforeach ($invitations as $invitation) {\n\t\t$invitation->delete();\n\t}\n\n\t// Create a new invitation.\n\t$invitation = new UserInvitation();\n\t$invitation->user_id = $user->id;\n\t$invitation->email = $email;\n\t$invitation->token = str_random(64);\n\t$invitation->save();\n\n\t// Attempt to dispatch a notification job to notify the user.\n\ttry {\n\t\t$this->dispatch(new NotifyUserInvitation($invitation));\n\t} catch (Exception $e) {\n\t\t// If the notification fails, delete the invitation and re-throw the exception.\n\t\t$invitation->delete();\n\t\tthrow $e;\n\t}\n\n\t// Return the newly created invitation.\n\treturn $invitation;\n}", "CodeBleu_score": 34.300970028676545}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif (this.reconciled) {\n\t\tthrow new Exception(\"This transaction has been reconciled. No further action is required.\");\n\t}\n\tif (this.transfer) {\n\t\tthrow new UnauthorizedException(\"This is a transfer transaction. No further action is required.\");\n\t}\n}", "CodeBleu_score": 15.88427466657203}, {"code": "<?\npublic function authorize(): void{\n\t\tif (this.isReconciled) {\n\t\tthrow new Exception(\"This transaction has already been reconciled.\");\n\t}\n\tif (this.isTransfer) {\n\t\tthrow new UnauthorizedException(\"This transaction is a transfer transaction and cannot be authorized.\");\n\t}\n}", "CodeBleu_score": 16.063685381890192}, {"code": "<?\npublic function authorize(): void{\n\t\tif (this.isReconciled) {\n\t\tthrow new Exception(\"This transaction has been reconciled and cannot be edited.\");\n\t}\n\n\tif (this.isTransfer) {\n\t\tthrow new UnauthorizedException(\"This transaction is a transfer and cannot be edited.\");\n\t}\n}", "CodeBleu_score": 16.02783968732747}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.equals(\"orders\")) {\n\t\treturn true;\n\t} else if (tableName.equals(\"order_items\")) {\n\t\treturn true;\n\t} else if (tableName.equals(\"customers\")) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 10.730797927014521}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName == null) {\n\t\treturn false;\n\t}\n\tif (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 9.03701819554063}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tableName.equals(\"customers\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"products\")) {\n\t\treturn true;\n\t}\n\tif (tableName.equals(\"orders\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 10.49310272743428}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null != dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 91.068302579187}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\ntry {\nList<Account> dataList = accountService.findBySelect();\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null != dataList) {\nfor (Account account : dataList) {\nJSONObject item = new JSONObject();\nitem.put(\"Id\", account.getId());\n//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\nitem.put(\"AccountName\", account.getName());\ndataArray.add(item);\n}\n}\nres = dataArray.toJSONString();\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 91.068302579187}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null != dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 91.33545966613362}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n Map<String, Object> map = new HashMap<>();\n List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n map.put(\"rows\", list);\n map.put(\"total\", count);\n res.code = 200;\n res.data = map;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 95.64036176356261}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\nres.code = 200;\nres.data = map;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.5275327569411}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nJSONArray arr = depotService.findDepotByCurrentUser();\nres.code = 200;\nres.data = arr;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 92.8364624490403}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\ntry {\nList<Function> dataListFun = functionService.findRoleFunction(\"0\");\n//\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\nJSONObject outer = new JSONObject();\nouter.put(\"id\", 0);\nouter.put(\"key\", 0);\nouter.put(\"value\", 0);\nouter.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\nouter.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\nJSONArray dataArray = new JSONArray();\nif (null != dataListFun) {\n//\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\nList<Function> dataList = new ArrayList<>();\nfor (Function fun : dataListFun) {\nString token = request.getHeader(\"X-Access-Token\");\nLong tenantId = Tools.getTenantIdByToken(token);\nif (tenantId!=0L) {\nif(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\ndataList.add(fun);\n}\n} else {\n//\u8d85\u7ba1\ndataList.add(fun);\n}\n}\ndataArray = getFunctionList(dataList, type, keyId);\nouter.put(\"children\", dataArray);\n}\narr.add(outer);\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 90.65801886635958}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\n}", "CodeBleu_score": 6.799418567643893}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t\n}", "CodeBleu_score": 6.799418567643893}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n    res.code = 200;\n    res.data = platformConfig;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.42693528602554}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n    res.code = 200;\n    res.data = platformConfig;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.42693528602554}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n    res.code = 200;\n    res.data = platformConfig;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.42693528602554}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setCode(200);\n\t\tresponse.setData(systemConfigService.getCurrentInfo());\n\t\tresponse.setMsg(\"success\");\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error occurred while attempting to retrieve the current system configuration information.\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setData(null);\n\t\tresponse.setMsg(\"Error occurred while attempting to retrieve the current system configuration information.\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 27.04427640714529}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tresponse.setStatusCode(200);\n\t\tresponse.setData(systemConfigService.getCurrentInfo());\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception in getCurrentInfo\", e);\n\t\tresponse.setStatusCode(500);\n\t\tresponse.setData(\"Exception in getCurrentInfo\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 27.767489896486065}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\n\ttry {\n\t\tresponse.setData(getSysConfigService().getCurrentInfo());\n\t\tresponse.setCode(200);\n\t\tresponse.setMessage(\"Success\");\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error occurred while attempting to retrieve system configuration information.\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"Error occurred while attempting to retrieve system configuration information.\");\n\t}\n\n\treturn response;\n}", "CodeBleu_score": 25.729893132464998}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\ttry {\n\t\t// Retrieve the business path from the request\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tif (StringUtils.isBlank(businessPath)) {\n\t\t\tthrow new IllegalArgumentException(\"businessPath cannot be blank\");\n\t\t}\n\n\t\t// Retrieve the uploaded file from the request\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\tif (file == null) {\n\t\t\tthrow new IllegalArgumentException(\"file cannot be null\");\n\t\t}\n\n\t\t// Save the file to the local file system or to AliOss\n\t\tString filePath = getFilePath(businessPath, file.getOriginalFilename());\n\t\tif (StringUtils.startsWith(filePath, AliOssConfig.getAliOssPrefix())) {\n\t\t\tuploadToAliOss(file, filePath);\n\t\t} else {\n\t\t\tuploadToLocal(file, filePath);\n\t\t}\n\n\t\t// Set the response code and data\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\t\tresponseInfo.setCode(BaseResponseCode.SUCCESS.getCode());\n\t\tresponseInfo.setData(filePath);\n\t\treturn responseInfo;\n\t} catch (Exception e) {\n\t\t// Log the exception\n\t\tlogger.error(e.getMessage(), e);\n\n\t\t// Set the response code and data\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\t\tresponseInfo.setCode(BaseResponseCode.ERROR.getCode());\n\t\tresponseInfo.setData(e.getMessage());\n\t\treturn responseInfo;\n\t}\n}", "CodeBleu_score": 35.55216359460772}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\tString businessPath = request.getParameter(\"businessPath\");\n\tString file = request.getParameter(\"file\");\n\tString uploadType = request.getParameter(\"uploadType\");\n\tif (StringUtils.isEmpty(businessPath) || StringUtils.isEmpty(file) || StringUtils.isEmpty(uploadType)) {\n\t\tresponseInfo.setCode(ResponseCode.ERROR);\n\t\tresponseInfo.setMessage(\"\u53c2\u6570\u9519\u8bef\");\n\t\treturn responseInfo;\n\t}\n\ttry {\n\t\tif (uploadType.equals(\"local\")) {\n\t\t\tString filePath = businessPath + \"/\" + file;\n\t\t\tFile fileDir = new File(filePath);\n\t\t\tif (!fileDir.exists()) {\n\t\t\t\tfileDir.mkdirs();\n\t\t\t}\n\t\t\tMultipartFile multipartFile = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\t\tmultipartFile.transferTo(new File(filePath));\n\t\t\tresponseInfo.setCode(ResponseCode.SUCCESS);\n\t\t\tresponseInfo.setData(filePath);\n\t\t\tresponseInfo.setMessage(\"\u4e0a\u4f20\u6210\u529f\");\n\t\t} else {\n\t\t\t// \u4e0a\u4f20\u5230\u963f\u91cc\u4e91OSS\n\t\t\t// \u963f\u91cc\u4e91\u76f8\u5173\u4fe1\u606f\n\t\t\tString endpoint = \"oss-cn-beijing.aliyuncs.com\";\n\t\t\tString accessKeyId = \"<KEY>\";\n\t\t\tString accessKeySecret = \"<KEY>\";\n\t\t\tString bucketName = \"test-oss\";\n\t\t\tString objectName = businessPath + \"/\" + file;\n\t\t\t// \u521b\u5efaOSSClient\u5b9e\u4f8b\n\t\t\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\t\t\t// \u4e0a\u4f20\u6587\u4ef6\u6d41\u3002\n\t\t\tInputStream inputStream = ((MultipartHttpServletRequest) request).getFile(\"file\").getInputStream();\n\t\t\tossClient.putObject(bucketName, objectName, inputStream);\n\t\t\t// \u5173\u95edOSSClient\u3002\n\t\t\tossClient.shutdown();\n\t\t\tresponseInfo.setCode(ResponseCode.SUCCESS);\n\t\t\tresponseInfo.setData(objectName);\n\t\t\tresponseInfo.setMessage(\"\u4e0a\u4f20\u6210\u529f\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\", e);\n\t\tresponseInfo.setCode(ResponseCode.ERROR);\n\t\tresponseInfo.setMessage(\"\u4e0a\u4f20\u5931\u8d25\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 34.0878498811637}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n String head = jsonObject.getString(\"head\");\n String tip = jsonObject.getString(\"tip\");\n JSONArray arr = jsonObject.getJSONArray(\"list\");\n systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 95.54609288652262}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result=0;\n\ttry{\n\t\tresult=accountMapper.insertAccount(obj, request);\n\t\tif(result>0){\n\t\t\t//\u8bb0\u5f55\u65e5\u5fd7\n\t\t\toperationLogService.insertOperationLog(request, \"\u65b0\u589e\u8d26\u6237\", OperationLogConstant.OPERATION_LOG_TYPE_ADD, \"\u8d26\u6237\u540d\u79f0\u4e3a\uff1a\"+obj.get(\"name\"), this.managerName);\n\t\t}\n\t}catch(Exception e){\n\t\tJshException.writeFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 23.896944051123686}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result=0;\ntry{\n    result=accountMapperEx.insertAccount(obj, request);\n}catch(Exception e){\n    JshException.writeFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 18.425724482739614}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result=0;\ntry{\n    String name=obj.getString(\"name\");\n    String remark=obj.getString(\"remark\");\n    String serialNo=obj.getString(\"serialNo\");\n    String type=obj.getString(\"type\");\n    String initialAmount=obj.getString(\"initialAmount\");\n    String isDefault=obj.getString(\"isDefault\");\n    String tenantId=request.getParameter(\"tenantId\");\n    Account account=new Account();\n    account.setName(name);\n    account.setRemark(remark);\n    account.setSerialNo(serialNo);\n    account.setType(type);\n    account.setInitialAmount(initialAmount);\n    account.setIsDefault(isDefault);\n    account.setTenantId(tenantId);\n    result=accountMapperEx.insertAccount(account);\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 42.283464148326765}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountDao.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in listWithBalanceCount()\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 25.575736406084392}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"An error occured while retrieving the account count.\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.949626313054136}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn getSqlMapClientTemplate().queryForObject(\"listWithBalanceCount\", name, serialNo);\n\t} catch (DataAccessException e) {\n\t\tlog.error(\"Error executing listWithBalanceCount\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 22.487924965541232}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tDepotItemMapper depotItemMapper = new DepotItemMapper();\n\tDepotItem depotItem = depotItemMapper.getDepotItem(id);\n\tif (depotItem == null) {\n\t\tthrow new Exception(\"Error: depot item not found\");\n\t}\n\ttry {\n\t\tdepotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t\tthrow new Exception(e.getMessage());\n\t}\n\treturn 1;\n}", "CodeBleu_score": 33.635359543672614}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tDepotItemMapper depotItemMapper = new DepotItemMapper();\n\tint result = depotItemMapper.deleteDepotItem(id);\n\tif(result == 0) {\n\t\trequest.setAttribute(\"error\", \"Error: Could not delete depot item.\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 38.49481896995699}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tDepotItemMapper depotItemMapper = new DepotItemMapper();\n\tDepotItem depotItem = depotItemMapper.getDepotItem(id);\n\tif (depotItem == null) {\n\t\tthrow new Exception(\"Depot item not found\");\n\t}\n\tint result = depotItemMapper.deleteDepotItem(id);\n\treturn result;\n}", "CodeBleu_score": 35.9089215520821}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tString requestUrl = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(requestUrl);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\tif (statusCode != 200) {\n\t\t\tSystem.err.println(\"Request failed with error code: \" + statusCode);\n\t\t\treturn false;\n\t\t}\n\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\tif (httpEntity != null) {\n\t\t\tInputStream content = httpEntity.getContent();\n\t\t\tBufferedReader in = new BufferedReader(new InputStreamReader(content));\n\t\t\tString inputLine;\n\t\t\tStringBuffer response = new StringBuffer();\n\t\t\twhile ((inputLine = in.readLine()) != null) {\n\t\t\t\tresponse.append(inputLine);\n\t\t\t}\n\t\t\tin.close();\n\t\t\tSystem.out.println(response.toString());\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.71875661686749}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\thttpClient = HttpClients.createDefault();\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 42.7175812806196}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tboolean isAdded = false;\n\tCloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\t// Create an instance of an HTTP client and construct the request URL\n\t\thttpClient = HttpClients.createDefault();\n\t\tString requestUrl = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/api/projects/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(requestUrl);\n\n\t\t// Execute the request\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\t// Process the response\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tisAdded = true;\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn isAdded;\n}", "CodeBleu_score": 41.67262569704281}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse response = null;\n\tboolean success = false;\n\ttry {\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"addEdge\";\n\t\tString params = \"?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tHttpGet request = new HttpGet(url + params);\n\t\tresponse = httpClient.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity != null) {\n\t\t\tInputStream instream = entity.getContent();\n\t\t\ttry {\n\t\t\t\tString result = IOUtils.toString(instream, \"UTF-8\");\n\t\t\t\tif (result.contains(\"key\")) {\n\t\t\t\t\tsuccess = true;\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tinstream.close();\n\t\t\t}\n\t\t}\n\t} catch (ClientProtocolException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, response);\n\t}\n\treturn success;\n}", "CodeBleu_score": 50.855421449493136}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/api/v1/graph/\" + withProjectName(projectName) + \"addEdge\";\n\t\turl += \"?edgetype=\" + URLEncoder.encode(edgeType, \"UTF-8\");\n\t\turl += \"&fromtype=\" + URLEncoder.encode(fromType, \"UTF-8\");\n\t\turl += \"&totype=\" + URLEncoder.encode(toType, \"UTF-8\");\n\t\turl += \"&from=\" + URLEncoder.encode(from, \"UTF-8\");\n\t\turl += \"&to=\" + URLEncoder.encode(to, \"UTF-8\");\n\t\thttpResponse = httpClient.execute(new HttpGet(url));\n\t\tif (httpResponse.getStatusLine().getStatusCode() != 200) {\n\t\t\tthrow new RuntimeException(\"Failed : HTTP error code : \" + httpResponse.getStatusLine().getStatusCode());\n\t\t}\n\t\tBufferedReader br = new BufferedReader(new InputStreamReader((httpResponse.getEntity().getContent())));\n\t\tString output;\n\t\tSystem.out.println(\"Output from Server .... \n\");\n\t\twhile ((output = br.readLine()) != null) {\n\t\t\tSystem.out.println(output);\n\t\t}\n\t\thttpClient.close();\n\t\treturn true;\n\t} catch (ClientProtocolException e) {\n\t\te.printStackTrace();\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 48.883337233753544}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"addEdge\";\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpClient.execute(new HttpGet(url + \"?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to));\n\t\tif (response.getStatusLine().getStatusCode() != 200) {\n\t\t\tthrow new RuntimeException(\"Failed : HTTP error code : \" + response.getStatusLine().getStatusCode());\n\t\t}\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseJson = EntityUtils.toString(entity, \"UTF-8\");\n\t\tJSONObject obj = new JSONObject(responseJson);\n\t\tif (obj.has(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, response);\n\t}\n\treturn false;\n}", "CodeBleu_score": 52.31946612397873}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event != null && event.getMessage() != null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString eventJson = event.toJson();\n\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(target, eventJson);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 33.23495532481321}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = event.toJSON();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(event.getTarget() == null ? \"test\" : event.getTarget(), json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 38.365559517031535}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setTime(System.currentTimeMillis());\n\tString json = event.toJSON();\n\tif (target == null) {\n\t\ttarget = \"test\";\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(target, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 39.10105559681056}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t// Create an OSSClient instance.\n    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n// Upload the file content as an object to the OSS bucket.\n    ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n// Shut down the OSS client.\n    ossClient.shutdown();\n// Return the URL of the uploaded object.\n    return config.getEndpoint() + \"/\" + config.getBucketName() + \"/\" + objName;\n}", "CodeBleu_score": 36.2707423380639}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Create an OSS client instance.\n\tOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\t// Upload the file content to the specified object.\n\tossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\t// Shut down the client.\n\tossClient.shutdown();\n\t// Return the URL of the uploaded object.\n\treturn \"http://\" + config.getBucketName() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 36.387853293184456}, {"code": "public String upload(String objName, byte[] content){\n\t\n// Create an OSSClient instance.\nOSSClient client = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n// Upload the file content to the specified object.\nclient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\n// Shut down the client.\nclient.shutdown();\n\n// Return the URL of the uploaded object.\nreturn \"https://\" + config.getBucketName() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 33.42920998151655}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.029398107092696}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\", ipAddress);\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.2263858519141}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker != null) {\n\t\treturn worker.ipToLocation(ipAddress);\n\t}\n\tLocationInfo result = new LocationInfo();\n\tresult.setIpAddress(ipAddress);\n\tresult.setMainInfo(\"unknown\");\n\tresult.setSubInfo(\"unknown\");\n\treturn result;\n}", "CodeBleu_score": 48.883978475473164}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n\t\t\t\tbuilder.setRequestConfigCallback(new RestClientBuilder.RequestConfigCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic RequestConfig.Builder customizeRequestConfig(RequestConfig.Builder requestConfigBuilder) {\n\t\t\t\t\t\treturn requestConfigBuilder.setSocketTimeout(300000);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbuilder.setMaxRetryTimeoutMillis(300000);\n\t\t\t\tbuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\t\t\treturn httpClientBuilder.setDefaultIOReactorConfig(IOReactorConfig.custom().setIoThreadCount(16).build());\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tesClient = builder.build();\n\t\t\t\tesClientLowLevel = new RestClientLowLevel(esClient);\n\t\t\t\tesClientHighLevel = new RestClientHighLevel(esClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.59942586826816}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tsynchronized (this) {\n\t\tif (esClient == null) {\n\t\t\tesClient = new RestHighLevelClient(RestClient.builder(parseHosts(clusterHostList, clusterHostPort)));\n\t\t}\n\t}\n}", "CodeBleu_score": 18.686449937772192}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (esClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (esClient == null) {\n\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\tesClient = new RestHighLevelClient(RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])));\n\t\t\t\tesClientLowLevel = new RestClient(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.60273860761958}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tfor (String host : clusterHostList.split(\",\")) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0];\n\t\tint hostPort = hostParts.length == 2 ? Integer.parseInt(hostParts[1]) : clusterPort;\n\t\thosts.add(new HttpHost(hostName, hostPort));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.68428893030968}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostStrings = clusterHostList.split(\",\");\n\tfor (String hostString : hostStrings) {\n\t\tString[] hostParts = hostString.split(\":\");\n\t\tString host = hostParts[0];\n\t\tint port = clusterPort;\n\t\tif (hostParts.length == 2) {\n\t\t\tport = Integer.parseInt(hostParts[1]);\n\t\t}\n\t\thosts.add(new HttpHost(host, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 39.0022624875287}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostStrings = clusterHostList.split(\",\");\n\tfor (String hostString : hostStrings) {\n\t\tString[] hostParts = hostString.split(\":\");\n\t\tif (hostParts.length == 1) {\n\t\t\thosts.add(new HttpHost(hostParts[0], clusterPort));\n\t\t} else if (hostParts.length == 2) {\n\t\t\thosts.add(new HttpHost(hostParts[0], Integer.parseInt(hostParts[1])));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.219252542121666}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\t// Wait for up to 30 seconds for a task to arrive\n\t\tMessage message = this.getMessageQueue().poll(30, TimeUnit.SECONDS);\n\n\t\tif (message != null) {\n\t\t\ttry {\n\t\t\t\tString messageType = message.getStringProperty(\"type\");\n\t\t\t\tif (messageType.equals(\"text\")) {\n\t\t\t\t\tString toNumber = message.getStringProperty(\"to\");\n\t\t\t\t\tString messageData = message.getStringProperty(\"data\");\n\t\t\t\t\tif (toNumber != null && messageData != null) {\n\t\t\t\t\t\tsendPlainTextMessage(toNumber, messageData);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 29.178353821569335}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\t// Wait for a message to arrive on the queue.\n\t\tMessage msg = getQueue().receive(30000);\n\t\tif (msg != null) {\n\t\t\t// Process the message.\n\t\t\ttry {\n\t\t\t\tString msgBody = msg.getMessageAsString();\n\t\t\t\tMap<String, Object> msgMap = XMLDecodeUtils.decodeXmlString(msgBody);\n\t\t\t\tif (msgMap != null && msgMap.containsKey(\"type\") && msgMap.get(\"type\").equals(\"plain_text_message\")) {\n\t\t\t\t\tString toNumber = (String) msgMap.get(\"to_number\");\n\t\t\t\t\tString message = (String) msgMap.get(\"message\");\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Received message of unknown type: \" + msgMap);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(\"Exception occurred while processing message: \" + e.getMessage());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.54999927087302}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (true) {\n\t\t// Get a task from the queue.\n\t\tTask task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task != null) {\n\t\t\t// Process the task.\n\t\t\ttry {\n\t\t\t\tif (task.getType() == Task.TYPE_SMS_PLAIN) {\n\t\t\t\t\tString toNumber = task.getTo();\n\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"Unknown task type: \" + task.getType());\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tSystem.out.println(\"Task failed: \" + task.toString());\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 28.947650653062666}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient client = getHttpClient();\n\tHttpGet request = new HttpGet(uri);\n\trequest.addHeader(\"Accept\", \"application/xml\");\n\tHttpResponse response = client.execute(request);\n\tHttpEntity entity = response.getEntity();\n\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\tlogger.info(\"HTTP GET request to \" + uri.toString() + \" returned:\n\" + responseString);\n\treturn responseString;\n}", "CodeBleu_score": 59.80845133259602}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tHttpGet httpget = new HttpGet(uri);\n\tSystem.out.println(\"Executing request \" + httpget.getURI());\n\ttry {\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tSystem.out.println(\"----------------------------------------\");\n\t\t\tSystem.out.println(response.getStatusLine());\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tSystem.out.println(\"Response content length: \" + entity.getContentLength());\n\t\t\t\tSystem.out.println(\"Chunked?: \" + entity.isChunked());\n\t\t\t\tSystem.out.println(\"Content type: \" + entity.getContentType());\n\t\t\t\tSystem.out.println(\"Encoding: \" + entity.getContentEncoding());\n\t\t\t\tSystem.out.println(\"----------------------------------------\");\n\t\t\t\tInputStream instream = entity.getContent();\n\t\t\t\ttry {\n\t\t\t\t\tString xml = IOUtils.toString(instream, \"UTF-8\");\n\t\t\t\t\tSystem.out.println(xml);\n\t\t\t\t\treturn xml;\n\t\t\t\t} finally {\n\t\t\t\t\tinstream.close();\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} finally {\n\t\thttpclient.close();\n\t}\n}", "CodeBleu_score": 44.099740362823695}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpClient = getHttpClient();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpClient.execute(httpGet);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity != null) {\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tlog.info(\"Response content: \" + result);\n\t\t\treturn result;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 58.619850155416856}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (StringUtils.isBlank(messageXmlStr)){\n\t\treturn null;\n\t}\n\tDocumentBuilder docBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = docBuilder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tdoc.getDocumentElement().normalize();\n\tObject[] rootNode = decodeNodeToMap(doc.getDocumentElement(), doTrim);\n\tif (rootNode == null || rootNode.length < 2){\n\t\treturn null;\n\t}\n\tif (rootNode[1] == null){\n\t\treturn null;\n\t}\n\tif (rootNode[1] instanceof Map){\n\t\treturn (Map<String, Object>) rootNode[1];\n\t}\n\treturn null;\n}", "CodeBleu_score": 49.179317670111686}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(messageXmlStr.getBytes());\n\tDocument document = documentBuilder.parse(byteArrayInputStream);\n\tbyteArrayInputStream.close();\n\treturn decodeNodeToMap(document, doTrim);\n}", "CodeBleu_score": 28.72436420986991}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\treturn decodeNodeToMap(doc.getDocumentElement(), doTrim);\n}", "CodeBleu_score": 26.67290882995697}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tif (isEligibleForAutoProcessing) {\n\t\tfinal String transactionName = AsyncBatchId.generateTransactionName(orderRecord);\n\t\tfinal AsyncBatchId asyncBatchId = AsyncBatchId.ofRepoId(orderRecord.getC_Async_Batch_ID());\n\t\tfinal IAsyncBatchBL asyncBatchBL = Services.get(IAsyncBatchBL.class);\n\t\tasyncBatchBL.enqueueAsyncBatch(asyncBatchId, transactionName, ITrx.TRXNAME_ThreadInherited);\n\t\tlogger.debug(\"Enqueued order {} for automatic processing using transaction name {}\", orderRecord, transactionName);\n\t} else {\n\t\tscheduleMissingShipmentSchedules(orderRecord);\n\t\tlogger.debug(\"Scheduled order {} for automatic processing\", orderRecord);\n\t}\n}", "CodeBleu_score": 46.22814066473471}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t", "CodeBleu_score": 3.839633916411321}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (!isEligibleForAutoProcessing(orderRecord))\n\t{\n\t\treturn;\n\t}\n\n\tfinal String transactionName = getTransactionName(orderRecord);\n\n\tfinal IAsyncBatchBL asyncBatchBL = Services.get(IAsyncBatchBL.class);\n\n\tfinal AsyncBatchId asyncBatchId = asyncBatchBL.enqueueAsyncBatch(transactionName, orderRecord);\n\n\torderRecord.setC_Async_Batch_ID(asyncBatchId.getRepoId());\n\tInterfaceWrapperHelper.save(orderRecord);\n\n\tlogger.info(\"Created AsyncBatch for {} with id={}\", transactionName, asyncBatchId);\n}", "CodeBleu_score": 40.77529575590171}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$this->guard->getProvider()->retrieveByCredentials($credentials): User\n    $credentials = $this->credentials($request);\n\n    if (empty($credentials)) {\n        return;\n    }\n\n    $user = $this->guard->getProvider()->retrieveByCredentials($credentials);\n\n    if ($user && $this->guard->getProvider()->validateCredentials($user, $credentials)) {\n        return $user;\n    }\n}", "CodeBleu_score": 38.12541717062855}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementFailedAttempts($request);\n\n\t$this->throwValidationException(\n\t\t$request,\n\t\t[\n\t\t\t'username' => [\n\t\t\t\t'Authentication failed.'\n\t\t\t]\n\t\t]\n\t);\n}", "CodeBleu_score": 46.9647016995142}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementFailedAuthenticationCount($request);\n\tthrow new ValidationException([\n\t\t'error' => 'Authentication failed.',\n\t]);\n}", "CodeBleu_score": 49.491956215513724}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementRequestLimit($request);\n\tthrow new ValidationException('Authentication failed.', 1461151691);\n}", "CodeBleu_score": 48.20712477644881}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n$webauthn = Webauthn::has_webauthn($user);\n$has_enabled_two_factor_auth = $user->hasEnabledTwoFactorAuth();\n$remember_me = $request->filled('remember');\n$data = [\n'webauthn' => $webauthn,\n'has_enabled_two_factor_auth' => $has_enabled_two_factor_auth,\n'remember_me' => $remember_me,\n];\nif ($webauthn) {\n$data['publicKey'] = $user->getWebauthnCredential()->getPublicKey();\n}\nreturn Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 41.488461207107676}, {"code": "<?\npublic function toResponse($request){\n\t\t$user = $request->user();\n\t$webauthn = new Webauthn();\n\n\t$response = [\n\t\t'enabled' => $user->two_factor_authentication_enabled,\n\t\t'remember_me' => $user->two_factor_authentication_remember_me,\n\t];\n\n\tif ($user->two_factor_authentication_enabled) {\n\t\t$publicKey = $webauthn->generateAssertion($user);\n\t\t$response['publicKey'] = $publicKey;\n\t}\n\n\treturn response()->view('two-factor-challenge', $response);\n}", "CodeBleu_score": 36.36610175733978}, {"code": "<?\npublic function toResponse($request){\n\t\t// Get the user ID from the session\n\t$userId = $request->session()->get('userId');\n\n\t// Get the user\n\t$user = User::find($userId);\n\n\t// If the user exists, prepare a WebAuthn assertion and include the public key\n\tif ($user) {\n\t\t// Prepare the WebAuthn assertion\n\t\t$assertion = $this->prepareAssertion($user);\n\n\t\t// Include the public key in the response data\n\t\t$data = [\n\t\t\t'publicKey' => $assertion->getPublicKey(),\n\t\t\t'challenge' => $assertion->getChallenge(),\n\t\t\t'rpId' => config('webauthn.rpId'),\n\t\t\t'user' => $user,\n\t\t\t'login' => $this->login,\n\t\t\t'error' => $this->error,\n\t\t\t'enableTwoFactorAuth' => config('webauthn.enableTwoFactorAuth'),\n\t\t\t'rememberMe' => $this->rememberMe,\n\t\t];\n\n\t\t// Render the 'TwoFactorChallenge' view\n\t\treturn view('two-factor-challenge', $data);\n\t}\n\n\t// If the user does not exist, redirect to the login page\n\treturn redirect('/login');\n}", "CodeBleu_score": 42.68337199323922}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t// 1. check if there is an existing user token for the given driver and socialite user ID.\n        $token = $this->getTokenByDriverAndId($driver, $socialite->getId());\n// 2. if found, retrieve the associated user and verify the user association.\n        if ($token) {\n            $user = $token->user;\n            $this->checkUserAssociation($request, $user, $driver);\n            return $user;\n        }\n// 3. if not, create a new user or associate the socialite token with an existing user.\n        return $this->getUserOrCreate($socialite);\n    }", "CodeBleu_score": 39.46915283263522}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t", "CodeBleu_score": 9.75609756097561}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t", "CodeBleu_score": 9.75609756097561}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t\tif (!isset($this->email)) {\n\t\terror_log('ERROR: Email not set in user() function.');\n\t\treturn null;\n\t}\n\ttry {\n\t\treturn User::where('email', '=', $this->email)->firstOrFail();\n\t} catch (ModelNotFoundException $e) {\n\t\terror_log('ERROR: User with email ' . $this->email . ' not found.');\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 34.8739859938342}, {"code": "<?\nprivate function user(): ?User{\n\t\ttry {\n\t\treturn User.findByEmail(params.email)\n\t} catch (e: Exception) {\n\t\tlog.error(\"Error retrieving user\", e)\n\t\treturn null\n\t}\n}", "CodeBleu_score": 7.115129664726918}, {"code": "<?\nprivate function user(): ?User{\n\t\tif (!isset($this->email)) {\n\t\t$this->log('No email provided to user() function.', LOG_ERR);\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn User::loadByEmail($this->email);\n\t} catch (UserNotFoundException $e) {\n\t\t$this->log('User not found: ' . $this->email, LOG_ERR);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 28.930714495303118}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t$this->artisan('scout:flush', ['model' => 'App\\\\Models\\\\Post']);\n$this->artisan('scout:flush', ['model' => 'App\\\\Models\\\\User']);\n$this->artisan('scout:flush', ['model' => 'App\\\\Models\\\\Comment']);\n$this->info('Search indexes flushed!');\n}", "CodeBleu_score": 21.02639485289223}, {"code": "<?\nprotected function scoutFlush(): void{\n\t\tif (!isset($this->app['config']['scout.driver']) || $this->option('flush') === false) {\n\t\treturn;\n\t}\n\n\t$this->line('');\n\t$this->info('Flushing Scout indexes...');\n\n\t$config = $this->app['config']['scout.driver'];\n\tif (!isset($config['indexes'])) {\n\t\treturn;\n\t}\n\n\tforeach ($config['indexes'] as $index) {\n\t\t$model = $this->app->make($index);\n\t\t$table = $model->getTable();\n\t\t$this->artisan('scout:flush', [\n\t\t\t'table' => $table,\n\t\t]);\n\t\t$this->line(\" - {$table}\");\n\t}\n\n\t$this->line('');\n}", "CodeBleu_score": 42.570815823500695}, {"code": "<?\nprotected function scoutFlush(): void{\n\t$this->info('Flushing Scout indexes...');\nif (! config('scout.driver') === 'meilisearch') {\n    return;\n}\nforeach (config('scout.meilisearch.indexes') as $name => $index) {\n    $this->artisan('scout:flush', ['model' => $index['searchable']]);\n}\n$this->info('Scout indexes flushed.');\n}", "CodeBleu_score": 28.397562321977045}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t", "CodeBleu_score": 7.242990654205607}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$card = $this->getCard($addressBookId, $cardUri);\n\n\tif (!$card) {\n\t\treturn false;\n\t}\n\n\t$this->dispatch(new DeleteCardJob($card));\n\n\treturn true;\n}", "CodeBleu_score": 23.85834322534314}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$card = $this->getCard($addressBookId, $cardUri);\n\tif($card instanceof Contact) {\n\t\t$this->enqueue(new DestroyContactJob($card));\n\t} elseif($card instanceof Group) {\n\t\t$this->enqueue(new DestroyGroupJob($card));\n\t} else {\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 29.234008715284894}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$card = $this->getCard($addressBookId, $cardUri);\n\n\tif($card instanceof CardDav\\Card) {\n\t\tif($card instanceof CardDav\\Contact) {\n\t\t\t$this->dispatch(new ContactDestroyJob($card));\n\t\t} else if($card instanceof CardDav\\Group) {\n\t\t\t$this->dispatch(new GroupDestroyJob($card));\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 31.12797071171056}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\t$file = $this->request->file('file');\n\tif ($file) {\n\t\t$leadActivity = LeadActivity::create([\n\t\t\t'lead_id' => $data['lead_id'],\n\t\t\t'user_id' => $this->user->id,\n\t\t\t'activity_type' => 'file_uploaded',\n\t\t\t'notes' => $data['notes'],\n\t\t]);\n\t\t$file = $file->store('uploads');\n\t\t$leadFile = LeadFile::create([\n\t\t\t'lead_activity_id' => $leadActivity->id,\n\t\t\t'name' => $file,\n\t\t\t'path' => 'uploads/' . $file,\n\t\t]);\n\t\treturn $leadFile;\n\t}\n}", "CodeBleu_score": 44.11923200834841}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!isset($data['file'])) {\n\t\treturn;\n\t}\n\n\t$leadActivity = LeadActivity::create([\n\t\t'lead_id' => $data['lead_id'],\n\t\t'user_id' => Auth::id(),\n\t\t'activity_type_id' => $data['activity_type_id'],\n\t\t'description' => $data['description'],\n\t]);\n\n\t$file = $data['file'];\n\n\t$path = $file->store('leads/' . $leadActivity->id);\n\n\t$file = LeadFile::create([\n\t\t'lead_activity_id' => $leadActivity->id,\n\t\t'name' => $file->getClientOriginalName(),\n\t\t'path' => $path,\n\t]);\n\n\treturn $file;\n}", "CodeBleu_score": 48.60145400127876}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!isset($data['file'])) {\n\t\treturn;\n\t}\n\n\t$file = $data['file'];\n\t$leadActivity = LeadActivity::create([\n\t\t'lead_id' => $this->id,\n\t\t'user_id' => Auth::user()->id,\n\t\t'name' => $file->getClientOriginalName(),\n\t\t'path' => $file->store('lead-files')\n\t]);\n\n\treturn $leadActivity;\n}", "CodeBleu_score": 41.289060606590475}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$statusCode = $exception->getCode();\n$routeName = Route::currentRouteName();\n\nif (request()->is('admin*')) {\nif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"admin::errors.{$statusCode}\", [], $statusCode);\n}\n\nif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('shop::app.common.error')\n], $statusCode);\n}\n\nreturn response()->view(\"shop::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 26.108360044356516}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$statusCode = $exception->getCode();\n$routeName = request()->route()->getName();\n\nif (request()->is('admin*')) {\nif (\n$routeName == 'admin.session.create'\n|| $routeName == 'admin.session.destroy'\n|| $routeName == 'admin.session.store'\n|| $routeName == 'admin.session.update'\n) {\nreturn redirect()->route('admin.session.create');\n}\n\nif (\n$routeName == 'admin.session.destroy'\n|| $routeName == 'admin.session.store'\n|| $routeName == 'admin.session.update'\n) {\nreturn redirect()->route('admin.session.create');\n}\n}\n\nif ($exception instanceof ModelNotFoundException) {\n$statusCode = 404;\n}\n\nif ($exception instanceof PDOException) {\n$statusCode = 500;\n}\n\nif ($exception instanceof ParseError) {\n$statusCode = 500;\n}\n\nif ($exception instanceof TokenMismatchException) {\n$statusCode = 500;\n}\n\nif ($exception instanceof AuthorizationException) {\n$statusCode = 403;\n}\n\nif ($exception instanceof MethodNotAllowedHttpException) {\n$statusCode = 405;\n}\n\nif ($exception instanceof NotFoundHttpException) {\n$statusCode = 404;\n}\n\nif ($exception instanceof HttpException) {\n$statusCode = $exception->getStatusCode();\n}\n\nif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$this->templatePath}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 43.244411077710865}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$statusCode = method_exists($exception, 'getStatusCode')\n    ? $exception->getStatusCode()\n    : 500;\n\n$routeName = request()->route()->getName();\n\nif ($routeName == 'admin.session.create') {\nreturn redirect(route('admin.session.create'))\n    ->withInput(request()->input())\n    ->withErrors([\n        'email' => trans('admin::app.common.error-email-not-found'),\n    ]);\n}\n\nif (request()->is('admin/*') || request()->is('admin')) {\nreturn $this->response('admin::layouts.auth', $statusCode);\n}\n\nreturn $this->response('shop::layouts.auth', $statusCode);\n}", "CodeBleu_score": 37.38459290419698}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 91.60501426817184}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode]) ? $this->jsonErrorMessages[$statusCode] : trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 91.60501426817184}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 91.60501426817184}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t\t$activityIDs = explode(',', $_POST['activityIDs']);\n\t$isDone = $_POST['isDone'];\n\t$numUpdates = 0;\n\n\tforeach ($activityIDs as $activityID) {\n\t\t$activity = new Activity($activityID);\n\t\t$activity->is_done = $isDone;\n\t\t$activity->save();\n\t\t$numUpdates++;\n\t}\n\n\techo json_encode(array(\n\t\t'success' => true,\n\t\t'numUpdates' => $numUpdates\n\t));\n}", "CodeBleu_score": 27.950423517516892}, {"code": "<?\npublic function massUpdate(){\n\t\t$activityIds = $this->request->data['activityIds'];\n\t$count = 0;\n\tforeach ($activityIds as $activityId) {\n\t\t$this->Activity->id = $activityId;\n\t\t$this->Activity->saveField('is_done', 1);\n\t\t$count++;\n\t}\n\tif ($count > 0) {\n\t\t$this->set('success', true);\n\t\t$this->set('message', 'Activities updated successfully');\n\t} else {\n\t\t$this->set('success', false);\n\t\t$this->set('message', 'No activities updated');\n\t}\n\t$this->set('_serialize', array('success', 'message'));\n}", "CodeBleu_score": 25.87599085224727}, {"code": "<?\npublic function massUpdate(){\n\t\t$request = $this->getRequest();\n\t$response = $this->getResponse();\n\t$response->setBody('');\n\t$response->headers->set('Content-Type', 'application/json');\n\n\t$ids = $request->get('ids');\n\tif (empty($ids)) {\n\t\t$response->setStatusCode(400);\n\t\t$response->setBody(json_encode(array(\n\t\t\t'status' => 'error',\n\t\t\t'message' => 'No activity IDs specified'\n\t\t)));\n\t\treturn $response;\n\t}\n\n\t$count = 0;\n\tforeach (explode(',', $ids) as $id) {\n\t\t$activity = $this->get_activity($id);\n\t\tif ($activity === null) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$event = new Event($this, 'onBeforeMassUpdateActivity', array(\n\t\t\t'activity' => $activity\n\t\t));\n\t\t$this->dispatchEvent($event);\n\t\tif ($event->isPropagationStopped()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$activity->is_done = 1;\n\t\t$activity->save();\n\n\t\t$event = new Event($this, 'onAfterMassUpdateActivity', array(\n\t\t\t'activity' => $activity\n\t\t));\n\t\t$this->dispatchEvent($event);\n\t\tif ($event->isPropagationStopped()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t$count++;\n\t}\n\n\t$response->setBody(json_encode(array(\n\t\t'status' => 'success',\n\t\t'count' => $count\n\t)));\n\treturn $response;\n}", "CodeBleu_score": 36.015568875305604}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\n$activityIDs = Input::get('ids');\n\nforeach ($activityIDs as $activityID) {\n\n$activity = Activity::find($activityID);\n\nEvent::fire('activity.deleting', [$activity]);\n\n$activity->delete();\n\nEvent::fire('activity.deleted', [$activity]);\n\n}\n\nreturn Response::json(array('success' => true));\n\n}", "CodeBleu_score": 22.907277135114587}, {"code": "<?\n public function massDestroy(){\n\t $ids = request('ids');\n $class = request('class');\n $class::destroy($ids);\n return response()->json([\n 'message' => (count($ids) > 1) ? count($ids) . ' activities deleted successfully.' : 'Activity deleted successfully.'\n ]);\n }", "CodeBleu_score": 22.963287350083377}, {"code": "<?\n public function massDestroy(){\n\t\n$activityIDs = explode(',', request('ids'));\n$activityIDs = array_map('trim', $activityIDs);\n$activityIDs = array_filter($activityIDs, 'is_numeric');\n\n$activities = Activity::whereIn('id', $activityIDs)->get();\n\nforeach ($activities as $activity) {\n\nevent(new ActivityDeleted($activity));\n$activity->delete();\n}\n\nreturn response()->json([\n'message' => __('The activity(s) was/were successfully deleted'),\n'deleted' => $activityIDs,\n], 200);\n}", "CodeBleu_score": 31.75404228865949}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t\t$cards = $this->getCards();\n\t$data = json_decode(file_get_contents('php://input'));\n\tforeach($data as $card) {\n\t\tforeach($cards as $c) {\n\t\t\tif($c->id == $card->id) {\n\t\t\t\t$c->selected = $card->selected;\n\t\t\t}\n\t\t}\n\t}\n\treturn json_encode($cards);\n}", "CodeBleu_score": 27.82165727112977}, {"code": "<?\n public function updateCards(){\n\t\t$requestData = json_decode(file_get_contents('php://input'), true);\n\t$cards = $this->getCards();\n\tforeach ($cards as $card) {\n\t\tforeach ($requestData as $requestCard) {\n\t\t\tif ($card['id'] == $requestCard['id']) {\n\t\t\t\t$card['selected'] = $requestCard['selected'];\n\t\t\t}\n\t\t}\n\t}\n\treturn json_encode($cards);\n}", "CodeBleu_score": 36.28574624896531}, {"code": "<?\n public function updateCards(){\n\t\t// Get the current cards\n\t$cards = $this->getCards();\n\t// Iterate through the request data\n\tforeach($_REQUEST as $key => $value) {\n\t\t// If the key is numeric, then it is a card ID\n\t\tif(is_numeric($key)) {\n\t\t\t// Iterate through the cards\n\t\t\tforeach($cards as $card) {\n\t\t\t\t// If the card ID matches the key, then update the selected status\n\t\t\t\tif($card['id'] == $key) {\n\t\t\t\t\t$card['selected'] = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// Return the updated cards as a JSON response\n\treturn json_encode($cards);\n}", "CodeBleu_score": 25.459813715073622}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t$config = new Configuration();\n\n\t$config->name = Input::get('name');\n\t$config->value = Input::get('value');\n\t$config->description = Input::get('description');\n\n\t$config->save();\n\n\tEvent::fire('config.create', array($config));\n\n\tSession::flash('success', Lang::get('admin/configuration/messages.create.success'));\n\n\treturn Redirect::to(Input::get('return', URL::previous()));\n}", "CodeBleu_score": 23.20842439431444}, {"code": "<?\npublic function store(){\n\t\t$this->event->dispatch('admin.configuration.create.before', [$this->request->all()]);\n\t$configuration = $this->configuration->create($this->request->all());\n\t$this->event->dispatch('admin.configuration.create.after', [$configuration]);\n\t$this->session->flash('success', 'Configuration created successfully.');\n\treturn redirect()->back();\n}", "CodeBleu_score": 30.534094407661318}, {"code": "<?\npublic function store(){\n\t\t$config = new Configuration();\n\t$config->set_name(Input::get('name'));\n\t$config->set_value(Input::get('value'));\n\t$config->set_description(Input::get('description'));\n\t$config->set_user_id(Auth::user()->id);\n\n\tEvent::fire('configuration.create', array($config));\n\n\t$config->save();\n\n\tEvent::fire('configuration.create.after', array($config));\n\n\tSession::flash('success', Lang::get('admin/configurations/messages.create.success'));\n\treturn Redirect::back();\n}", "CodeBleu_score": 22.464710886842216}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t// Get the user from the session\n\tUser user = (User) session.getAttribute(\"user\");\n\n\t// Get the existing sort settings for the user\n\tList<AdminModelSort> existingSorts = adminService.getHeaderModelSorts(user);\n\n\t// Create a list of new sort settings\n\tList<AdminModelSort> newSorts = new ArrayList<>();\n\n\t// Loop through the list of models\n\tfor (String modelName : list) {\n\t\t// Create a new sort setting\n\t\tAdminModelSort newSort = new AdminModelSort();\n\n\t\t// Set the model name\n\t\tnewSort.setModelName(modelName);\n\n\t\t// Add the new sort setting to the list\n\t\tnewSorts.add(newSort);\n\t}\n\n\t// Remove the existing sort settings\n\texistingSorts.clear();\n\n\t// Save the new sort settings\n\tadminService.setHeaderModelSorts(user, newSorts);\n\n\t// Return a success result\n\treturn new Result(true, \"Header model sort settings saved successfully\");\n}", "CodeBleu_score": 34.35630156224901}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\ttry {\n\t\t// Get the current user\n\t\tUser user = userService.getUser();\n\t\tif (user == null) {\n\t\t\treturn new ErrorResult(new IllegalArgumentException(\"User is not logged in\"));\n\t\t}\n\n\t\t// Get the current user's header model sort settings\n\t\tList<AdminModelSort> headerModelSorts = adminService.getHeaderModelSorts(user);\n\n\t\t// Remove existing sort settings\n\t\tfor (AdminModelSort headerModelSort : headerModelSorts) {\n\t\t\tadminService.deleteHeaderModelSort(headerModelSort);\n\t\t}\n\n\t\t// Create a list of new sort settings\n\t\tList<AdminModelSort> newHeaderModelSorts = new ArrayList<AdminModelSort>();\n\t\tfor (String modelName : list) {\n\t\t\tAdminModelSort newHeaderModelSort = new AdminModelSort();\n\t\t\tnewHeaderModelSort.setSort(0);\n\t\t\tnewHeaderModelSort.setUser(user);\n\t\t\tnewHeaderModelSort.setModelName(modelName);\n\t\t\tnewHeaderModelSorts.add(newHeaderModelSort);\n\t\t}\n\n\t\t// Save the new sort settings\n\t\tadminService.saveHeaderModelSorts(newHeaderModelSorts);\n\n\t\t// Return a success result\n\t\treturn new SuccessResult();\n\t} catch (Throwable e) {\n\t\treturn new ErrorResult(e);\n\t}\n}", "CodeBleu_score": 31.174439055636572}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\ttry {\n\t\tList<AdminModelSort> newList = new ArrayList<AdminModelSort>();\n\t\tfor (String s : list) {\n\t\t\tAdminModelSort sort = new AdminModelSort();\n\t\t\tsort.setSortOrder(list.indexOf(s));\n\t\t\tsort.setSortColumn(s);\n\t\t\tnewList.add(sort);\n\t\t}\n\t\tList<AdminModelSort> existingSorts = adminModelSortRepository.findByAdminUserAndSortColumnNotLike(\"admin\", \"id\");\n\t\tfor (AdminModelSort es : existingSorts) {\n\t\t\tadminModelSortRepository.delete(es);\n\t\t}\n\t\tadminModelSortRepository.saveAll(newList);\n\t\treturn new Result(true, \"Sort order updated\");\n\t} catch (Exception e) {\n\t\treturn new Result(false, \"Sort order not updated\");\n\t}\n}", "CodeBleu_score": 31.727226156190596}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 88.62394835760344}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 88.62394835760344}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 88.62394835760344}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\n// Get the user's custom settings\nUserCustomSetting userCustomSetting = userCustomSettingRepository.findByCustomKey(customKey);\n\n// If the user's custom setting exists, update its value\nif (userCustomSetting != null) {\nuserCustomSetting.setValue(json.toString());\nuserCustomSettingRepository.save(userCustomSetting);\n}\n\n// If the user's custom setting does not exist, create a new user custom setting\nelse {\nuserCustomSetting = new UserCustomSetting();\nuserCustomSetting.setCustomKey(customKey);\nuserCustomSetting.setValue(json.toString());\nuserCustomSettingRepository.save(userCustomSetting);\n}\n\nreturn new Result(true, \"Custom setting saved successfully\");\n}", "CodeBleu_score": 50.03646409237293}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t UserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n if (userConfiguration == null) {\n userConfiguration = new UserConfiguration();\n userConfiguration.setCustomKey(customKey);\n }\n userConfiguration.setCustomValue(json.toString());\n userConfigurationRepository.save(userConfiguration);\n return new Result(true, \"Custom setting saved successfully\");\n }", "CodeBleu_score": 46.943993897754346}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t//Retrieve the user configuration by the custom key.\n\tUserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n\n\t//If the configuration exists, update its value with the provided JSON.\n\tif (userConfiguration != null) {\n\t\tuserConfiguration.setValue(json.toJSONString());\n\t}\n\t//If not, create a new user configuration with the provided JSON and save it.\n\telse {\n\t\tuserConfiguration = new UserConfiguration();\n\t\tuserConfiguration.setCustomKey(customKey);\n\t\tuserConfiguration.setValue(json.toJSONString());\n\t\tuserConfigurationRepository.save(userConfiguration);\n\t}\n\n\t//Return a successful result.\n\treturn new SuccessResult();\n}", "CodeBleu_score": 49.85742914574782}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getUserInfo(userId);\n\tif(user == null) {\n\t\treturn new Result<AdminUser>(false, \"User not found\", null);\n\t}\n\tuser.setDepartmentName(departmentService.getDepartmentName(user.getDepartmentId()));\n\tuser.setSalt(null);\n\tuser.setPassword(<PASSWORD>);\n\treturn new Result<AdminUser>(true, \"User information retrieved successfully\", user);\n}", "CodeBleu_score": 36.39244915309247}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getUser(userId);\n\tif (user == null) {\n\t\treturn Result.error(\"User not found\");\n\t}\n\tString departmentName = departmentService.getDepartmentName(user.getDepartmentId());\n\tuser.setDepartmentName(departmentName);\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn Result.success(user);\n}", "CodeBleu_score": 48.35017509957443}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = userRepository.findById(userId).get();\n\tuser.setDepartment(departmentRepository.findById(user.getDepartmentId()).get().getName());\n\tuser.setSalt(null);\n\tuser.setPassword(null);\n\treturn Result.success(user);\n}", "CodeBleu_score": 37.493187495191314}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tString userID = session().get(\"userID\");\n\tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userID\", userID).findList();\n\tif (readNoticeList.size() > 1) {\n\t\tfor (ReadNotice readNotice : readNoticeList) {\n\t\t\treadNotice.status = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t} else if (readNoticeList.size() == 1) {\n\t\tReadNotice readNotice = readNoticeList.get(0);\n\t\treadNotice.status = 1;\n\t\treadNotice.update();\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.userID = userID;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\treturn ok();\n}", "CodeBleu_score": 26.027364176977297}, {"code": " public Result readNotice() {\n\t\tlong userID = session().get(\"userID\");\n\tif(userID == null) {\n\t\treturn badRequest(Json.toJson(new ApiResponse(401, \"Error\", \"Please login to access this feature.\")));\n\t}\n\telse {\n\t\tList<Notice> notices = Notice.find.where().eq(\"userID\", userID).eq(\"readNotice\", 0).findList();\n\t\tif(notices.size() > 0) {\n\t\t\tfor(Notice notice : notices) {\n\t\t\t\tnotice.readNotice = 1;\n\t\t\t\tnotice.save();\n\t\t\t}\n\t\t\treturn ok(Json.toJson(new ApiResponse(200, \"Success\", \"Notices read successfully.\")));\n\t\t}\n\t\telse {\n\t\t\treturn ok(Json.toJson(new ApiResponse(200, \"Success\", \"No new notices.\")));\n\t\t}\n\t}\n}", "CodeBleu_score": 23.68331875200065}, {"code": " public Result readNotice() {\n\t\tint userId = getUserID();\n\tList<UserNotice> notices = UserNotice.find.where().eq(\"userId\", userId).findList();\n\tif (notices.size() > 1) {\n\t\tfor (UserNotice notice : notices) {\n\t\t\tnotice.readNotice = 1;\n\t\t\tnotice.update();\n\t\t}\n\t} else if (notices.size() == 1) {\n\t\tUserNotice notice = notices.get(0);\n\t\tnotice.readNotice = 1;\n\t\tnotice.update();\n\t} else {\n\t\tUserNotice notice = new UserNotice();\n\t\tnotice.userId = userId;\n\t\tnotice.readNotice = 1;\n\t\tnotice.save();\n\t}\n\treturn ok();\n}", "CodeBleu_score": 26.333787494397487}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\ttry {\n\t\tString companyInfo = getAdminConfig(\"companyInfo\");\n\t\tif (companyInfo == null) {\n\t\t\tcompanyInfo = \"{\n\\t\\\"companyName\\\" : \\\"\\\",\n\\t\\\"companyAddress\\\" : \\\"\\\",\n\\t\\\"companyCity\\\" : \\\"\\\",\n\\t\\\"companyState\\\" : \\\"\\\",\n\\t\\\"companyZip\\\" : \\\"\\\",\n\\t\\\"companyPhone\\\" : \\\"\\\",\n\\t\\\"companyEmail\\\" : \\\"\\\",\n\\t\\\"companyWebsite\\\" : \\\"\\\"\n}\";\n\t\t}\n\t\tJSONObject json = new JSONObject(companyInfo);\n\t\tjson.put(\"companyName\", adminCompanyBO.getCompanyName());\n\t\tjson.put(\"companyAddress\", adminCompanyBO.getCompanyAddress());\n\t\tjson.put(\"companyCity\", adminCompanyBO.getCompanyCity());\n\t\tjson.put(\"companyState\", adminCompanyBO.getCompanyState());\n\t\tjson.put(\"companyZip\", adminCompanyBO.getCompanyZip());\n\t\tjson.put(\"companyPhone\", adminCompanyBO.getCompanyPhone());\n\t\tjson.put(\"companyEmail\", adminCompanyBO.getCompanyEmail());\n\t\tjson.put(\"companyWebsite\", adminCompanyBO.getCompanyWebsite());\n\t\tsetAdminConfig(\"companyInfo\", json.toString());\n\t} catch (JSONException e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 25.719057810558215}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t", "CodeBleu_score": 1.6537543811019455}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = AdminConfig.find(\"companyInfo\").first();\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.name = \"companyInfo\";\n\t}\n\tadminConfig.value = adminCompanyBO.toJSON();\n\tadminConfig.save();\n}", "CodeBleu_score": 38.83814447628777}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\n\tString adminConfigKey = \"admin.company\";\n\tString adminConfigValue = getAdminConfigValue(adminConfigKey);\n\n\tif (adminConfigValue != null) {\n\t\tadminCompanyBO = parseAdminCompanyBO(adminConfigValue);\n\t}\n\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 40.687302541330894}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\ttry {\n\t\tString adminConfig = AdminConfig.getAdminConfig(CompanyUtil.getCompanyId(), \"admin.company.config\");\n\t\tif (adminConfig != null) {\n\t\t\tadminCompanyBO = parseAdminCompanyConfig(adminConfig);\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 47.31925815181659}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\tString configValue = queryConfigValue(AdminCompanyBO.ADMIN_CONFIG_KEY);\n\tif (configValue != null) {\n\t\tadminCompany = parseAdminCompany(configValue);\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 27.392958788633216}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t String[] stringArray = new String[stringList.size()];\n stringArray = stringList.toArray(stringArray);\n AdminConfig.create('LogModule', '[[name \\\"com.ibm.ws.logging.welcome.speech\\\"] [value \\\"' + stringArray[0] + '\\\"] [description \\\"\\\"] [update \\\"true\\\"] [moduleType \\\"system\\\"] [scope \\\"cell\\\"] [variableName \\\"com.ibm.ws.logging.welcome.speech\\\"] [variableType \\\"String\\\"] [variableScope \\\"cell\\\"] [variableVisibility \\\"private\\\"] [variableUpdate \\\"true\\\"] [variableDescription \\\"\\\"] [variableDefaultValue \\\"\\\"] [variableValue \\\"' + stringArray[0] + '\\\"]]');\n AdminConfig.save();\n }", "CodeBleu_score": 25.65841222388756}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t AdminConfig[] existingConfigs = AdminConfig.getid(getExistingLogWelcomeSpeech());\n for (AdminConfig config : existingConfigs) {\n config.delete();\n }\n AdminConfig[] newConfigs = new AdminConfig[stringList.size()];\n for (int i = 0; i < newConfigs.length; i++) {\n newConfigs[i] = AdminConfig.create(\"LogModule\", getLogConfigName() + \"_\" + i, new String[] {\"name\", getLogConfigName() + \"_\" + i, \"logWelcomeString\", stringList.get(i)});\n }\n AdminConfig.save(newConfigs);\n }", "CodeBleu_score": 31.084919408953755}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t List<AdminConfig> configList = new ArrayList<AdminConfig>();\n for (String string : stringList) {\n AdminConfig config = AdminConfig.getid(\"/Log/\"+getLogConfigName()+\"/WelcomeFile:\" + string);\n if (config != null) {\n configList.add(config);\n }\n }\n AdminConfig.remove(configList.toArray());\n for (String string : stringList) {\n AdminConfig config = AdminConfig.create(\"Log/\"+getLogConfigName()+\"/WelcomeFile:\" + string, \"File\");\n AdminConfig.create(\"File:\" + string, \"TextFile\", config);\n }\n AdminConfig.save();\n }", "CodeBleu_score": 37.843075592260845}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>();\n\n\t// Get the user ID from the database\n\tString userId = getUserID(username);\n\n\t// Get the user's details from the database\n\tUserBO userBO = getUserDetails(userId);\n\n\t// Check the password\n\tif (!passwordEncoder.matches(password, userBO.getPassword())) {\n\t\tthrow new InvalidPasswordException();\n\t}\n\n\t// Generate an access code\n\tString accessCode = generateAccessCode();\n\n\t// Store the access code in Redis\n\tredisService.set(accessCode, userId, 10 * 60);\n\n\t// Return the access code\n\treturn accessCode;\n}", "CodeBleu_score": 24.493171712851726}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>InitDataBO.getPassword();\n\n\t// Get the user ID for the username\n\tString userId = userDAO.getUserId(username);\n\n\t// Get the user details for the username\n\tUserBO userBO = userDAO.getUser(userId);\n\n\t// Check the password\n\tif (!passwordEncoder.matches(password, userBO.getPassword())) {\n\t\tthrow new InvalidPasswordException(\"The password you entered is incorrect.\");\n\t}\n\n\t// Generate a temporary access code\n\tString accessCode = generateAccessCode();\n\n\t// Store the access code in Redis with a 10-minute expiration\n\tredisTemplate.opsForValue().set(accessCode, userId, 10, TimeUnit.MINUTES);\n\n\treturn accessCode;\n}", "CodeBleu_score": 32.30965200275158}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString username = adminInitDataBO.getUsername();\n\tString password = <PASSWORD>BO.<PASSWORD>();\n\tString salt = adminInitDataBO.getSalt();\n\n\t// Get the user ID and user details.\n\tUserBO userBO = userDAO.getUser(username);\n\n\t// Verify the password.\n\tif (userBO.getPassword().equals(password + salt)) {\n\t\t// Generate a temporary access code.\n\t\tString accessCode = generateAccessCode();\n\n\t\t// Store the access code in Redis.\n\t\tredisService.set(accessCode, username, 10);\n\n\t\t// Return the access code.\n\t\treturn accessCode;\n\t} else {\n\t\t// Throw an exception.\n\t\tthrow new InvalidPasswordException();\n\t}\n}", "CodeBleu_score": 29.002554569902863}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"initAuth:\" + userId;\n\tString unauthorized = redis.hget(key, \"unauthorized\");\n\tif (unauthorized != null) {\n\t\tString[] unauthorizedUrls = unauthorized.split(\",\");\n\t\tfor (String url : unauthorizedUrls) {\n\t\t\tif (url.equals(getInitAuthUrl())) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 30.017015026625383}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = request.getParameter(\"userId\");\n\tString key = \"unauthorized_urls:\" + userId;\n\tJedis jedis = new Jedis(\"localhost\");\n\tSet<String> unauthorizedUrls = jedis.smembers(key);\n\tif (unauthorizedUrls.contains(initialAuthUrl)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 28.882827224772274}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = \"unauthorized-menu-urls:\" + userId;\n\tList<String> unauthorizedUrls = redis.lrange(key, 0, -1);\n\tif (unauthorizedUrls == null) {\n\t\treturn true;\n\t}\n\tString initAuthUrl = \"https://login.salesforce.com/services/oauth2/authorize?response_type=code&client_id=\" + clientId + \"&redirect_uri=\" + redirectUri;\n\treturn !unauthorizedUrls.contains(initAuthUrl);\n}", "CodeBleu_score": 32.8590765408846}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif (CollectionUtils.isEmpty(menuIdList)) {\n\t\treturn;\n\t}\n\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tadminRoleMenuMapper.saveRoleMenu(adminRoleMenuList);\n}", "CodeBleu_score": 64.58168881629935}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif (roleId == null) {\n\t\tthrow new IllegalArgumentException(\"Role ID cannot be null\");\n\t}\n\tif (CollectionUtils.isEmpty(menuIdList)) {\n\t\tthrow new IllegalArgumentException(\"Menu ID list cannot be null or empty\");\n\t}\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tsaveRoleMenuBatch(roleMenuList);\n}", "CodeBleu_score": 50.58955115242725}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// Create a list of AdminRoleMenu objects\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\t// Save role-menu associations in batches\n\tsaveRoleMenuList(roleMenuList);\n}", "CodeBleu_score": 46.69873185074376}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t\tString index = getSysLogIndex();\n\tMap<String, Object> source = BeanUtil.beanToMap(sysLog);\n\tsource.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n\tsource.remove(\"id\");\n\tIndexRequest indexRequest = new IndexRequest(index).source(source);\n\ttry {\n\t\trestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 53.402067812075416}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> jsonMap = JSON.parseObject(JSON.toJSONString(sysLog));\njsonMap.put(\"createTime\", DateUtil.formatDate(sysLog.getCreateTime()));\njsonMap.remove(\"id\");\nIndexRequest indexRequest = new IndexRequest(index).source(jsonMap);\ntry {\nrestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 53.69811275949833}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t// Get the system log index.\n    String index = getSysLogIndex();\n// Convert the log object to a map.\n    Map<String, Object> map = BeanUtils.beanToMap(sysLog);\n// Format the creation time.\n    map.put(\"createTime\", DateUtil.formatDate(sysLog.getCreateTime()));\n// Remove the ID field.\n    map.remove(\"id\");\n// Create an index request and submit it to the Elasticsearch client.\n    IndexRequest indexRequest = new IndexRequest(index).source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 54.62719842609719}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// Initialize the search criteria and exclude the fields from the response that are not needed.\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    // Initialize the search request.\n    SearchRequest searchRequest = new SearchRequest(getIndexAliases(querySysLogBO.getType()));\n    searchRequest.source(searchSourceBuilder);\n    // Execute the search request.\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n    // Map the search results to SysLog objects.\n    List<SysLog> sysLogList = Arrays.stream(searchResponse.getHits().getHits()).map(searchHit -> {\n        Map<String, Object> sourceAsMap = searchHit.getSourceAsMap();\n        SysLog sysLog = new SysLog();\n        sysLog.setId(searchHit.getId());\n        sysLog.setUserId(sourceAsMap.get(\"userId\").toString());\n        sysLog.setModel(sourceAsMap.get(\"model\").toString());\n        sysLog.setSubModelLabel(sourceAsMap.get(\"subModelLabel\").toString());\n        sysLog.setLoginTime(DateUtil.parse(sourceAsMap.get(\"loginTime\").toString(), \"yyyy-MM-dd HH:mm:ss\"));\n        sysLog.setCreateTime(DateUtil.parse(sourceAsMap.get(\"createTime\").toString(), \"yyyy-MM-dd HH:mm:ss\"));\n        sysLog.setResult(sourceAsMap.get(\"result\").toString());\n        sysLog.setIp(sourceAsMap.get(\"ip\").toString());\n        sysLog.setBrowser(sourceAsMap.get(\"browser\").toString());\n        sysLog.setOs(sourceAsMap.get(\"os\").toString());\n        sysLog.setMsg(sourceAsMap.get(\"msg\").toString());\n        return sysLog;\n    }).collect(Collectors.toList());\n    // Initialize the BasePage object.\n    BasePage<SysLog> basePage = new BasePage<>();\n    basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n    basePage.setRecords(sysLogList);\n    return basePage;\n}", "CodeBleu_score": 52.03565749951646}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// 1. Initialize the search criteria.\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n// 2. Sort the results by creation time in descending order.\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n// 3. Exclude specific fields from the response.\n    searchSourceBuilder.fetchSource(false, \"userId\", \"model\", \"subModelLabel\", \"loginTime\", \"createTime\", \"ipAddr\", \"userAgent\", \"requestUri\", \"requestMethod\", \"requestParams\", \"requestBody\", \"responseBody\", \"responseStatus\", \"responseResult\", \"exceptionDetail\", \"exceptionDesc\", \"exceptionType\", \"exceptionStackTrace\", \"exceptionMessage\", \"exceptionCode\");\n// 4. Execute the search request using a REST client.\n    SearchRequest searchRequest = new SearchRequest(getIndexAliases(querySysLogBO.getType()), searchSourceBuilder);\n    SearchResponse searchResponse = null;\n    try {\n        searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n// 5. Map the search results to SysLog objects.\n    List<SysLog> sysLogList = new ArrayList<>();\n    if (searchResponse != null && searchResponse.getHits() != null) {\n        for (SearchHit searchHit : searchResponse.getHits().getHits()) {\n            SysLog sysLog = JSON.parseObject(searchHit.getSourceAsString(), SysLog.class);\n            sysLogList.add(sysLog);\n        }\n    }\n// 6. Populate a BasePage object with the results, including total hits and current page.\n    BasePage<SysLog> sysLogPage = new BasePage<>();\n    sysLogPage.setList(sysLogList);\n    sysLogPage.setTotal(searchResponse.getHits().getTotalHits().value);\n    sysLogPage.setPage(querySysLogBO.getPage());\n    return sysLogPage;\n}", "CodeBleu_score": 53.44390642563721}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t\n// Initialize the search criteria and exclude the fields from the response that are not needed.\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n\n// Execute the search request.\n        try {\n            SearchRequest searchRequest = new SearchRequest(getIndexAliases(querySysLogBO.getType()), searchSourceBuilder);\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n\n// Map the search results to SysLog objects.\n            SearchHit[] searchHits = searchResponse.getHits().getHits();\n            List<SysLog> sysLogList = Arrays.stream(searchHits).map(searchHit -> {\n                try {\n                    SysLog sysLog = JSON.parseObject(searchHit.getSourceAsString(), SysLog.class);\n                    sysLog.setIndex(searchHit.getIndex());\n                    sysLog.setId(searchHit.getId());\n                    return sysLog;\n                } catch (JsonParseException e) {\n                    log.error(\"JsonParseException,msg:{}\", e.getMessage());\n                } catch (JsonMappingException e) {\n                    log.error(\"JsonMappingException,msg:{}\", e.getMessage());\n                } catch (IOException e) {\n                    log.error(\"IOException,msg:{}\", e.getMessage());\n                }\n                return null;\n            }).collect(Collectors.toList());\n\n// Populate the BasePage object with the search results.\n            BasePage<SysLog> basePage = new BasePage<>();\n            basePage.setPage(querySysLogBO.getPage());\n            basePage.setPageSize(querySysLogBO.getLimit());\n            basePage.setTotal(searchResponse.getHits().getTotalHits());\n            basePage.setRecords(sysLogList);\n            return basePage;\n        } catch (IOException e) {\n            log.error(\"querySysLogPageList,msg:{}\", e.getMessage());\n        }\n        return null;\n    }", "CodeBleu_score": 48.81314614017691}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await axios({\n\t\t\tmethod: 'get',\n\t\t\turl,\n\t\t\tresponseType: 'stream'\n\t\t});\n\n\t\tresponse.data.pipe(file);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close(resolve);\n\t\t\t});\n\n\t\t\tfile.on('error', (error) => {\n\t\t\t\tfs.unlink(dest, () => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t} catch (error) {\n\t\tfs.unlink(dest, () => {\n\t\t\tthrow error;\n\t\t});\n\t}\n}", "CodeBleu_score": 43.653101806752716}, {"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await axios.get(url, {\n\t\t\tresponseType: 'stream'\n\t\t});\n\n\t\tresponse.data.pipe(file);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close(resolve);\n\t\t\t});\n\n\t\t\tfile.on('error', (error) => {\n\t\t\t\tfs.unlink(dest, () => {\n\t\t\t\t\treject(error);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t} catch (error) {\n\t\tfs.unlink(dest, () => {\n\t\t\tthrow error;\n\t\t});\n\t}\n}", "CodeBleu_score": 46.98138906071416}, {"code": "async function downloadFile(url, dest){\n\t\ttry {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst response = await https.get(url, response => response.pipe(file));\n\t\tfile.close();\n\t\tconsole.log(`Finished downloading ${url}`);\n\t} catch (error) {\n\t\tfs.unlink(dest, () => {});\n\t\tconsole.error(error);\n\t\tthrow error;\n\t}\n}", "CodeBleu_score": 37.29811574967307}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependentModules().flatMap(dependentModuleId -> {\n if (circularDependencyCheckSet.contains(dependentModuleId)) {\n log.warn(\"Circular dependency detected in application module {}: {}\", module.getId(), dependentModuleId);\n return Flux.empty();\n } else {\n circularDependencyCheckSet.add(dependentModuleId);\n return applicationService.findById(dependentModuleId).switchIfEmpty(\n Mono.fromRunnable(() -> log.warn(\"Dependent module {} of application module {} does not exist\", dependentModuleId, module.getId())));\n }\n });\n }", "CodeBleu_score": 45.4815992326172}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn module.getDependentModules()\n\t\t.filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getId()))\n\t\t.concatMap(dependentModule -> {\n\t\t\tcircularDependencyCheckSet.add(dependentModule.getId());\n\t\t\treturn this.applicationService.getApplication(dependentModule.getId())\n\t\t\t\t.onErrorResume(e -> {\n\t\t\t\t\tlog.warn(\"Failed to retrieve dependent module {} for module {}. Error: {}\", dependentModule.getId(), module.getId(), e.getMessage());\n\t\t\t\t\treturn Mono.empty();\n\t\t\t\t})\n\t\t\t\t.switchIfEmpty(Mono.empty())\n\t\t\t\t.map(dependentModule::merge);\n\t\t})\n\t\t.collectList()\n\t\t.map(dependentModules -> module.withDependentModules(dependentModules));\n}", "CodeBleu_score": 46.486525524959575}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t\treturn Flux.fromIterable(module.getDependentModules())\n\t\t.flatMap(dependentModule -> {\n\t\t\tif (circularDependencyCheckSet.contains(dependentModule.getId())) {\n\t\t\t\treturn Flux.empty();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcircularDependencyCheckSet.add(dependentModule.getId());\n\t\t\t\treturn getModule(dependentModule.getId())\n\t\t\t\t\t.onErrorResume(error -> {\n\t\t\t\t\t\tlog.warn(\"Failed to retrieve dependent module with ID {} for application with ID {}: {}\", dependentModule.getId(), module.getId(), error.getMessage());\n\t\t\t\t\t\treturn Flux.empty();\n\t\t\t\t\t})\n\t\t\t\t\t.switchIfEmpty(Flux.empty())\n\t\t\t\t\t.flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n\t\t\t}\n\t\t})\n\t\t.collectList()\n\t\t.map(dependentModules -> {\n\t\t\tdependentModules.add(module);\n\t\t\treturn module;\n\t\t});\n}", "CodeBleu_score": 44.492918867006345}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?, ?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?, ?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?, ?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 91.07083160554292}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t\tObject compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?, ?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?, ?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?, ?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 91.49922158780672}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\nif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\nObject comp = map.get(\"comp\");\nif (comp instanceof Map<?, ?> compMap) {\nString appId = (String) compMap.get(\"appId\");\nif (StringUtils.isNotBlank(appId)) {\ndependentModuleIds.add(appId);\n}\n}\n}\n\nmap.forEach((key, value) -> {\nif (value instanceof Map<?, ?> valueMap) {\ndoGetDependentModules(valueMap, dependentModuleIds);\n}\nif (value instanceof List<?> valueList) {\nvalueList.forEach(i -> {\nif (i instanceof Map<?, ?> iMap) {\ndoGetDependentModules(iMap, dependentModuleIds);\n}\n});\n}\n});\n}", "CodeBleu_score": 91.07083160554292}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t Asset asset = new Asset();\n if (createThumbnail) {\n asset.setContentType(MediaType.IMAGE_JPEG);\n asset.setData(resizeImage(dataBuffer));\n } else {\n asset.setContentType(srcContentType);\n asset.setData(DataBufferUtils.read(dataBuffer));\n }\n DataBufferUtils.release(dataBuffer);\n return asset;\n }", "CodeBleu_score": 32.528190650797754}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t Asset asset = new Asset();\n asset.setContentType(srcContentType);\n if (createThumbnail) {\n asset.setData(resizeImage(dataBuffer));\n asset.setContentType(MediaType.IMAGE_JPEG);\n } else {\n asset.setData(dataBuffer);\n }\n return asset;\n }", "CodeBleu_score": 28.461401510948637}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t if (createThumbnail) {\n dataBuffer = resizeImage(dataBuffer);\n }\n Asset asset = new Asset(dataBuffer, srcContentType);\n DataBufferUtils.release(dataBuffer);\n return asset;\n }", "CodeBleu_score": 28.446648570048417}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\n// Retrieve the asset by its ID\nMono<Asset> assetMono = repository.findById(assetId);\n\n// Set the response status to OK and the content type header if available\nreturn assetMono.map(asset -> {\nServerHttpResponse response = exchange.getResponse();\nresponse.setStatusCode(HttpStatus.OK);\nif (asset.getContentType() != null) {\nresponse.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n}\nreturn response;\n}).\n// Write the asset data to the response using a data buffer\nflatMap(response -> response.writeWith(assetMono.map(asset -> {\nDataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\nreturn Flux.just(buffer);\n})));\n}", "CodeBleu_score": 50.53500932657518}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n.map(asset -> {\nif (asset.getContentType() != null) {\nexchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n}\nreturn asset;\n})\n.map(asset -> exchange.getResponse().writeWith(Flux.just(DataBufferUtils.read(asset.getData(), new DefaultDataBufferFactory(), asset.getSize()))))\n.then();\n}", "CodeBleu_score": 33.847829077773476}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n.map(asset -> {\nServerHttpResponse response = exchange.getResponse();\nresponse.setStatusCode(HttpStatus.OK);\nif (asset.getContentType() != null) {\nresponse.getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n}\nreturn response.writeWith(\nFlux.just(\nDataBufferUtils.write(\nexchange.getResponse().bufferFactory().wrap(asset.getData()),\nexchange.getResponse().bufferFactory()\n)\n)\n);\n})\n.then();\n}", "CodeBleu_score": 48.534589504476244}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tFlux<FindAuthConfig> authConfigFlux = Flux.fromIterable(this.authConfigService.findAllAuthConfigs())\n\t\t.map(authConfig -> {\n\t\t\tif (authConfig.getWorkspaceId() == null) {\n\t\t\t\treturn authConfig;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t})\n\t\t.filter(Objects::nonNull);\n\n\treturn authConfigFlux;\n}", "CodeBleu_score": 16.932111267697465}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\treturn Flux.fromIterable(findAllAuthConfigsForEnterpriseModeInternal())\n\t\t.map(this::mapAuthConfigToFindAuthConfig);\n}", "CodeBleu_score": 8.553557550464092}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t}\n\treturn Flux.fromIterable(organizationService.findAll())\n\t\t.map(organization -> new FindAuthConfig(organization.getId(), organization.getAuthenticationConfigurationId()))\n\t\t.filter(findAuthConfig -> findAuthConfig.getAuthenticationConfigurationId() != null)\n\t\t.map(findAuthConfig -> authConfigService.find(findAuthConfig.getAuthenticationConfigurationId()))\n\t\t.map(authConfig -> new FindAuthConfig(authConfig.getOrganizationId(), authConfig.getId()))\n\t\t.filter(findAuthConfig -> findAuthConfig.getAuthenticationConfigurationId() != null);\n}", "CodeBleu_score": 31.590109727778113}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t.setDriver(mongoTemplate.getMongoDatabase().getMongoClient())\n\t\t.setLockRepository(new MongoTemplateLockRepository(mongoTemplate, \"mongockChangeLogLock\", \"changeId\"))\n\t\t.addChangeLogsScanPackage(CHANGE_LOG_PACKAGE)\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 22.418531821154748}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\t// Set up the MongoDB driver with specific write and read concerns\n\tMongoClientSettings mongoClientSettings = MongoClientSettings.builder()\n\t\t\t.writeConcern(WriteConcern.MAJORITY)\n\t\t\t.readConcern(ReadConcern.MAJORITY)\n\t\t\t.applyToClusterSettings(builder -> builder.hosts(Arrays.asList(new ServerAddress(\"localhost\", 27017))))\n\t\t\t.build();\n\n\t// Specify the package to scan for change logs\n\tString changeLogsScanPackage = \"com.github.cloudyrock.mongock.integrationtests.spring5.springdata.changelogs\";\n\n\t// Integrate the Spring application context\n\tSpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate, mongoClientSettings);\n\tSpringDependencyManager dependencyManager = SpringDependencyManager.withDefaultDriver(driver);\n\tdependencyManager.addDependency(SpringDataDependency.springDataMongodb(driver));\n\tdependencyManager.addDependency(new SpringDependency(springContext));\n\n\t// Build and return the MongockApplicationRunner\n\treturn MongockSpring5.builder()\n\t\t\t.setDriver(driver)\n\t\t\t.setDependencyManager(dependencyManager)\n\t\t\t.addChangeLogsScanPackage(changeLogsScanPackage)\n\t\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 43.00852534738462}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\tMongoClientSettings mongoClientSettings = MongoClientSettings.builder()\n\t\t\t.writeConcern(WriteConcern.MAJORITY)\n\t\t\t.readConcern(ReadConcern.MAJORITY)\n\t\t\t.applyToClusterSettings(builder -> builder.hosts(Arrays.asList(new ServerAddress(\"localhost\", 27017))))\n\t\t\t.build();\n\tMongoClient mongoClient = MongoClients.create(mongoClientSettings);\n\tMongoTemplate mongoTemplate = new MongoTemplate(mongoClient, \"test\");\n\treturn MongockSpring5.builder()\n\t\t\t.setDriver(mongoTemplate)\n\t\t\t.addChangeLogsScanPackage(ChangeLogService.class.getPackage().getName())\n\t\t\t.setSpringContext(springContext)\n\t\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 47.195019029139516}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\treturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 26.11799355653882}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findLatestLibraryQueryByLibraryQueryId(libraryQueryId)\n.map(libraryQuery -> libraryQuery.getDsl())\n.switchIfEmpty(libraryQueryRepository.getLiveDslByLibraryQueryId(libraryQueryId));\n}", "CodeBleu_score": 37.241870646315654}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t\n// First attempt to get the latest library query record's DSL. If no record is found, it fetches the DSL directly from the library query by its ID.\n    return libraryQueryRepository.getLatestLibraryQueryByLibraryQueryId(libraryQueryId)\n            .map(LibraryQuery::getDsl)\n            .switchIfEmpty(libraryQueryRepository.getLibraryQueryById(libraryQueryId)\n                    .map(LibraryQuery::getDsl)\n                    .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n            );\n}", "CodeBleu_score": 55.60490424773623}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findLatestLibraryQueryByQueryId(libraryQueryId)\n.switchIfEmpty(libraryQueryRepository.findLibraryQueryById(libraryQueryId)\n.map(libraryQuery -> {\nMap<String, Object> liveDsl = new HashMap<>();\nliveDsl.put(Constants.LIVEDS_DSL_VERSION, Constants.LIVEDS_DSL_VERSION_6);\nliveDsl.put(Constants.LIVEDS_QUERY_TYPE, libraryQuery.getType());\nliveDsl.put(Constants.LIVEDS_QUERY_PARAMS, libraryQuery.getParams());\nreturn liveDsl;\n}))\n.map(libraryQuery -> {\nMap<String, Object> liveDsl = new HashMap<>();\nliveDsl.put(Constants.LIVEDS_DSL_VERSION, libraryQuery.getDslVersion());\nliveDsl.put(Constants.LIVEDS_QUERY_TYPE, libraryQuery.getType());\nliveDsl.put(Constants.LIVEDS_QUERY_PARAMS, libraryQuery.getParams());\nreturn liveDsl;\n});\n}", "CodeBleu_score": 40.77333837723779}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//        Mono<QueryExecutionResult> executeMono = Mono.just(datasource.getType())\n//                .filter(type -> type.equals(DatasourceType.REMOTE.name()))\n//                .map(type -> executeByNodeJs(datasource, queryConfig, requestParams))\n//                .defaultIfEmpty(executeLocally(datasource, queryConfig, requestParams, queryVisitorContext));\n\n//        return executeMono.timeout(Duration.ofMillis(Long.parseLong(timeoutStr)),\n//                Mono.fromCallable(() -> new QueryExecutionError(QueryExecutionErrorType.TIMEOUT, \"Query execution timeout.\")))\n//                .onErrorResume(TimeoutException.class,\n//                        e -> Mono.just(new QueryExecutionError(QueryExecutionErrorType.TIMEOUT, \"Query execution timeout.\")))\n//                .onErrorResume(QueryExecutionError.class, e -> Mono.just(e));\n\n}", "CodeBleu_score": 9.014789511693758}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//        var timeoutDuration = Duration.ofSeconds(Integer.parseInt(timeoutStr));\n        var timeoutDuration = Duration.ofSeconds(10);\n\n        var timeoutMono = Mono.delay(timeoutDuration).then(Mono.error(new QueryExecutionError(\"Timeout\")));\n\n        return datasource.getType().equals(\"nodejs\") ? executeByNodeJs(datasource, queryConfig, requestParams) : executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                .timeout(timeoutDuration)\n                .onErrorResume(TimeoutException.class, timeoutMono)\n                .onErrorResume(QueryExecutionError.class, Mono.just(QueryExecutionResult.error(Mono.just(new QueryExecutionError(\"Timeout\")))))\n                .onErrorResume(t -> {\n                    logger.error(\"Error while executing query\", t);\n                    return Mono.just(QueryExecutionResult.error(Mono.just(new QueryExecutionError(\"Error while executing query\", t))));\n                });\n    }", "CodeBleu_score": 44.62243047449144}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t\n//        if (datasource.isExecuteByNode()) {\n//            return executeByNodeJs(datasource, queryConfig, requestParams);\n//        } else {\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                    .timeout(Duration.ofMillis(Long.parseLong(timeoutStr)))\n                    .onErrorResume(TimeoutException.class, e -> Mono.just(QueryExecutionResult.error(QueryExecutionErrorType.PLUGIN_TIMEOUT,\n                            \"Query execution timed out after \" + timeoutStr + \"ms.\")))\n                    .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(QueryExecutionErrorType.PLUGIN_ERROR,\n                            e.getMessage())))\n                    .onErrorResume(Exception.class, e -> {\n                        log.error(\"Error executing query on datasource {}.\", datasource, e);\n                        return Mono.just(QueryExecutionResult.error(QueryExecutionErrorType.GENERIC_ERROR,\n                                \"Error executing query on datasource \" + datasource + \".\"));\n                    });\n//        }\n    }", "CodeBleu_score": 42.69834648848493}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n//    QueryExecutor queryExecutor = queryExecutors.get(datasource.getType());\n//    if (queryExecutor == null) {\n//        throw new IllegalArgumentException(\"Unsupported datasource type: \" + datasource.getType());\n//    }\n//\n//    QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n//            .queryConfig(queryConfig)\n//            .requestParams(requestParams)\n//            .queryVisitorContext(queryVisitorContext)\n//            .build();\n//\n//    return datasource.getConnection().flatMap(connection -> queryExecutor.execute(connection, queryExecutionContext)\n//            .onErrorResume(error -> handleQueryError(error, datasource, queryExecutionContext, queryVisitorContext)));\n}", "CodeBleu_score": 9.634820991429324}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n// Get the appropriate query executor for the datasource type.\n        QueryExecutor queryExecutor = queryExecutorFactory.getQueryExecutor(datasource.getType());\n\n// Build the query execution context.\n        QueryExecutionContext queryExecutionContext = queryExecutor.buildExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n// Acquire a connection from the datasource connection pool.\n        return datasource.getConnection().flatMap(connection -> {\n\n// Execute the query using the connection.\n                return queryExecutor.execute(connection, queryExecutionContext);\n            }).onErrorResume(error -> {\n\n// Handle any errors that occur during execution.\n                return Mono.just(QueryExecutionResult.failed(error));\n            });\n    }", "CodeBleu_score": 46.892926221630944}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n//        queryConfig = queryConfig.clone();\n//        queryConfig.putAll(requestParams);\n\n        QueryExecutor queryExecutor = queryExecutorFactory.getExecutor(datasource, queryConfig, queryVisitorContext);\n        if (queryExecutor == null) {\n            return Mono.error(new RuntimeException(\"No QueryExecutor found for datasource \" + datasource.getName()));\n        }\n\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .queryExecutor(queryExecutor)\n                .queryConfig(queryConfig)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n\n        return datasource.getConnection().flatMap(connection -> {\n            try {\n                return queryExecutor.execute(connection, queryExecutionContext);\n            } catch (Exception e) {\n                return Mono.error(e);\n            }\n        });\n    }", "CodeBleu_score": 45.25004890855017}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\nif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getLeft();\nint unitIndex = unitInfo.getRight();\n\nif (unitIndex == 0) {\nthrow new IllegalArgumentException(\"Invalid query timeout value: \" + timeoutStr);\n}\n\nString valueStr = timeoutStr.substring(0, unitIndex);\n\ntry {\ndouble value = Double.parseDouble(valueStr);\n\nif (value > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Query timeout value exceeds maximum allowed value: \" + timeoutStr);\n}\n\nreturn convertToMs(value, unit);\n} catch (NumberFormatException e) {\nthrow new IllegalArgumentException(\"Invalid query timeout value: \" + timeoutStr, e);\n}\n}", "CodeBleu_score": 54.10381373875946}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\nif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getLeft();\nint unitIndex = unitInfo.getRight();\n\nString valueStr = timeoutStr.substring(0, unitIndex);\n\nif (StringUtils.isBlank(valueStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\n\ndouble value;\ntry {\nvalue = Double.parseDouble(valueStr);\n} catch (NumberFormatException e) {\nthrow new IllegalArgumentException(String.format(\"Invalid query timeout value: %s\", valueStr), e);\n}\n\nif (value <= 0) {\nthrow new IllegalArgumentException(String.format(\"Invalid query timeout value: %s\", valueStr));\n}\n\nint timeoutMs = convertToMs(value, unit);\n\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(String.format(\"Query timeout cannot exceed %d seconds\", MAX_QUERY_TIMEOUT_MS / 1000));\n}\n\nreturn timeoutMs;\n}", "CodeBleu_score": 55.81944153547514}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (timeoutStr == null) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\ntimeoutStr = timeoutStr.trim();\nif (timeoutStr.isEmpty()) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nString unit = unitInfo.getLeft();\nint unitIndex = unitInfo.getRight();\nString valueStr = timeoutStr.substring(0, unitIndex);\ntry {\ndouble value = Double.parseDouble(valueStr);\nif (value <= 0) {\nthrow new IllegalArgumentException(\"Invalid query timeout value: \" + valueStr);\n}\nint timeoutMs = convertToMs(value, unit);\nif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Query timeout value exceeds maximum allowed value: \" + timeoutStr);\n}\nreturn timeoutMs;\n} catch (NumberFormatException e) {\nthrow new IllegalArgumentException(\"Invalid query timeout value: \" + valueStr, e);\n}\n}", "CodeBleu_score": 55.68593786873919}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t\nList<String> datasourceIds = application.getLiveQueries().stream()\n        .map(LiveQuery::getDatasourceId)\n        .filter(Objects::nonNull)\n        .collect(Collectors.toList());\n\nif (datasourceIds.isEmpty()) {\nreturn Mono.error(new IllegalArgumentException(\"No live queries found\"));\n}\n\nreturn Flux.fromIterable(datasourceIds)\n        .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n        .collectList()\n        .map(copiedDatasourceIds -> datasourceIds.stream()\n                .map(datasourceId -> Pair.of(datasourceId, copiedDatasourceIds.get(datasourceIds.indexOf(datasourceId))))\n                .collect(Collectors.toList()));\n}", "CodeBleu_score": 57.17729605650143}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn datasourceService.getLiveDatasourcesFromApplication(application.getId())\n        .collectList()\n        .flatMap(datasources -> {\n            if (datasources.isEmpty()) {\n                return Mono.error(new DatasourceCopyException(\"No live queries found in application \" + application.getName()));\n            }\n\n            return Flux.fromIterable(datasources)\n                    .flatMap(datasource -> copyDatasourceToCurrentOrganization(currentOrganizationId, datasource.getId(), visitorId))\n                    .collectList();\n        });\n}", "CodeBleu_score": 33.02348700379041}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn queryService.getLiveQueries(application.getId())\n        .map(query -> query.getDatasourceId())\n        .distinct()\n        .collectList()\n        .flatMap(datasourceIds -> {\n            if (datasourceIds.isEmpty()) {\n                return Mono.error(new DatasourceNotFoundException(\"No datasource found in application \" + application.getName()));\n            }\n\n            return Flux.fromIterable(datasourceIds)\n                    .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                    .collectList()\n                    .map(copiedDatasourceIds -> {\n                        List<Pair<String, String>> result = new ArrayList<>();\n                        for (int i = 0; i < datasourceIds.size(); i++) {\n                            result.add(Pair.of(datasourceIds.get(i), copiedDatasourceIds.get(i)));\n                        }\n                        return result;\n                    });\n        });\n}", "CodeBleu_score": 38.78327068437126}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.findById(datasourceId)\n\n.switchIfEmpty(Mono.error(new DatasourceNotFoundException(datasourceId)))\n\n.filter(Datasource::isSystemStatic)\n\n.map(datasource -> datasource.getId())\n\n.switchIfEmpty(Mono.just(datasourceId)\n\n.filter(id -> id.startsWith(LEGACY_DATASOURCE_ID_PREFIX))\n\n.map(id -> id.replace(LEGACY_DATASOURCE_ID_PREFIX, NEW_DATASOURCE_ID_PREFIX))\n\n.switchIfEmpty(createNewDatasourceFrom(organizationId, visitorId, datasource))\n\n);\n}", "CodeBleu_score": 39.02721600007527}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.findById(datasourceId)\n.switchIfEmpty(Mono.error(new IllegalArgumentException(\"Datasource not found\")))\n.flatMap(datasource -> {\nif (datasource.isSystemStatic()) {\nreturn Mono.just(datasource.getId());\n} else if (datasource.getCreationSource() == DatasourceCreationSource.REST_API.getValue() || datasource.getCreationSource() == DatasourceCreationSource.OPEN_BLOCKS.getValue()) {\nreturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n} else {\nreturn createNewDatasource(organizationId, visitorId, datasource);\n}\n});\n}", "CodeBleu_score": 55.2213276594109}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.findById(datasourceId)\n\n.flatMap(datasource -> {\nif (isSystemDatasource(datasource)) {\nreturn Mono.just(datasourceId);\n}\n\nif (isLegacyDatasource(datasource)) {\nreturn getNewLegacyDatasourceId(datasource);\n}\n\nreturn createNewDatasourceFrom(organizationId, visitorId, datasource);\n});\n}", "CodeBleu_score": 32.72439302420111}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t Mono<String> photoId = Mono.just(filePart.filename());\n Mono<Boolean> removePreviousAvatar = Mono.just(false);\n if (user.getAvatar() != null) {\n removePreviousAvatar = removeAvatar(user.getAvatar());\n }\n return photoId.zipWith(removePreviousAvatar).map(tuple -> {\n String photoId = tuple.getT1();\n boolean removePreviousAvatar = tuple.getT2();\n if (removePreviousAvatar) {\n return true;\n }\n return uploadPhoto(filePart, photoId).map(photo -> {\n user.setAvatar(photoId);\n return mongoUpsertHelper.updateById(user, user.getId());\n });\n }).flatMap(Function.identity());\n }", "CodeBleu_score": 38.54122118201811}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t\n/**\n * First, we get the user's previous avatar.\n */\n Mono<String> previousAvatar = Mono.just(user.getAvatar());\n\n/**\n * Next, we upload the new avatar.\n */\n Mono<String> newAvatar = fileService.upload(filePart);\n\n/**\n * Finally, we update the user's avatar.\n */\n return newAvatar.zipWith(previousAvatar, (newAvatarId, previousAvatarId) -> {\n\n/**\n * If the user has a previous avatar, we remove it.\n */\n if (previousAvatarId != null) {\n fileService.delete(previousAvatarId);\n }\n\n/**\n * We update the user's profile with the new avatar.\n */\n user.setAvatar(newAvatarId);\n return mongoUpsertHelper.updateById(user, user.getId());\n });\n }", "CodeBleu_score": 31.44777438954894}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t", "CodeBleu_score": 6.277227342940204}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t\tUser user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(UserState.NEW);\n\tuser.setAuthSource(authUser.getAuthSource());\n\tuser.setEmail(authUser.getEmail());\n\tuser.setNewUser(true);\n\tif (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getPassword() != null) {\n\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getPassword()));\n\t}\n\treturn create(user).doOnSuccess(u -> {\n\t\testablishUserConnections(u, authUser);\n\t});\n}", "CodeBleu_score": 45.84059869996985}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t//        return Mono.just(new User())\n//                .map(user -> {\n//                    user.setName(authUser.getName());\n//                    user.setState(UserState.ACTIVE);\n//                    user.setEnabled(true);\n//                    user.setAvatarLink(authUser.getAvatarLink());\n//                    if (authUser.getSource() == AuthSource.EMAIL && authUser.getPassword() != null) {\n//                        user.setPassword(encryptionService.encryptPassword(authUser.getPassword()));\n//                    }\n//                    return user;\n//                })\n//                .flatMap(user -> {\n//                    user.setConnections(authUser.getConnections());\n//                    user.setNew(true);\n//                    return user;\n//                })\n//                .flatMap(repository::save);\n}", "CodeBleu_score": 2.647808225621948}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t//        if (authUser.getAuthSource() == AuthSource.email && authUser.getPassword() != null) {\n//            authUser.setPassword(encryptionService.encryptPassword(authUser.getPassword()));\n//        }\n//\n//        User user = new User();\n//        user.setName(authUser.getName());\n//        user.setState(UserState.active);\n//        user.setEnabled(true);\n//        user.setAvatarLink(authUser.getAvatarLink());\n//        user.setAuthSource(authUser.getAuthSource());\n//\n//        return repository.save(user)\n//                .flatMap(newUser -> establishUserConnections(newUser, authUser))\n//                .map(newUser -> {\n//                    newUser.setNew(true);\n//                    return newUser;\n//                });\n\n}", "CodeBleu_score": 2.647808225621948}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.fromCallable(() -> {\n\t\t// Create a new connection with the email source\n\t\tConnection connection = new Connection(email, ConnectionSource.EMAIL);\n\t\t// Add the connection to the user's connections\n\t\tuser.addConnection(connection);\n\t\t// Save the user\n\t\treturn userRepository.save(user).block();\n\t}).onErrorResume(DuplicateKeyException.class, e -> {\n\t\t// If the email is already bound to a different user, return a specific error\n\t\tif (e.getMessage().contains(\"connections_email_key\")) {\n\t\t\treturn Mono.just(false);\n\t\t}\n\t\t// Otherwise, propagate the error\n\t\treturn Mono.error(e);\n\t}).map(u -> true);\n}", "CodeBleu_score": 31.115910849793256}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.just(email)\n\t\t.map(e -> new Connection(e, \"email\", user.getId()))\n\t\t.flatMap(connectionRepository.save)\n\t\t.map(c -> {\n\t\t\tuser.getConnections().add(c);\n\t\t\treturn user;\n\t\t})\n\t\t.flatMap(userRepository.save)\n\t\t.map(u -> true);\n}", "CodeBleu_score": 20.819092267416696}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn Mono.defer(() -> {\n\t\ttry {\n\t\t\tConnection connection = new Connection(email, ConnectionType.EMAIL);\n\t\t\tuser.addConnection(connection);\n\t\t\treturn userRepository.save(user).thenReturn(true);\n\t\t} catch (DuplicateKeyException e) {\n\t\t\tif (e.getMessage().contains(\"email_unique\")) {\n\t\t\t\treturn Mono.error(new EmailAlreadyBoundException(email));\n\t\t\t} else {\n\t\t\t\treturn Mono.error(e);\n\t\t\t}\n\t\t}\n\t});\n}", "CodeBleu_score": 32.616753789057626}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.filter(user -> encryptionService.checkPassword(oldPassword, user.getPassword()))\n.map(user -> {\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn user;\n})\n.flatMap(repository::save)\n.thenReturn(true);\n}", "CodeBleu_score": 22.8914078975764}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.filter(user -> encryptionService.verifyPassword(oldPassword, user.getPassword()))\n.map(user -> {\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn user;\n})\n.flatMap(repository::save)\n.thenReturn(true);\n}", "CodeBleu_score": 22.916318747186786}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.map(user -> {\nif (!encryptionService.matches(oldPassword, user.getPassword())) {\nthrow new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\");\n}\n\nuser.setPassword(encryptionService.encryptPassword(newPassword));\nreturn user;\n})\n.flatMap(repository::save)\n.thenReturn(true);\n}", "CodeBleu_score": 26.001739392314114}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\nList<String> groupIds = new ArrayList<>();\n\nif (!withoutDynamicGroups) {\ngroupIds.add(allUsersGroup.getId());\n}\n\nif (orgMember.isAdmin()) {\ngroupIds.add(adminGroup.getId());\n}\n\nreturn groupRepository.findGroupsByIdInAndOrgId(groupIds, orgMember.getOrgId())\n.collectList()\n.map(groups -> groups.stream()\n.filter(group -> !group.isArchived())\n.map(group -> {\nMap<String, String> groupMap = new HashMap<>();\ngroupMap.put(\"id\", group.getId());\ngroupMap.put(\"name\", group.getName(locale));\nreturn groupMap;\n})\n.collect(Collectors.toList())\n);\n}", "CodeBleu_score": 32.23962760591215}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn Mono.just(orgMember.isAdmin())\n\t\t\t.filter(it -> !it)\n\t\t\t.switchIfEmpty(repository.findById(userId)\n\t\t\t\t\t.switchIfEmpty(Mono.error(new IllegalArgumentException(\"User with id \" + userId + \" not found\")))\n\t\t\t\t\t.map(it -> it.isAdmin()))\n\t\t\t.filter(it -> !it)\n\t\t\t.switchIfEmpty(Mono.just(false))\n\t\t\t.map(isAdmin -> {\n\t\t\t\tif (isAdmin) {\n\t\t\t\t\treturn Flux.fromIterable(groupService.getAllGroups())\n\t\t\t\t\t\t\t.filter(it -> !it.isDynamic())\n\t\t\t\t\t\t\t.map(it -> groupService.toGroupDetail(it, locale))\n\t\t\t\t\t\t\t.collectList();\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn groupService.getMemberGroups(userId, withoutDynamicGroups)\n\t\t\t\t\t\t\t.map(it -> groupService.toGroupDetail(it, locale))\n\t\t\t\t\t\t\t.collectList();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.map(it -> it.stream()\n\t\t\t\t\t.filter(it -> !\"all_users\".equals(it.getId()))\n\t\t\t\t\t.map(it -> new HashMap<String, String>() {{\n\t\t\t\t\t\tput(\"id\", it.getId());\n\t\t\t\t\t\tput(\"name\", it.getName());\n\t\t\t\t\t}})\n\t\t\t\t\t.collect(Collectors.toList())\n\t\t\t);\n}", "CodeBleu_score": 29.50090619789019}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\nMono<List<Group>> groups = withoutDynamicGroups ? Mono.just(new ArrayList<>()) : groupService.getGroupsForUser(userId, locale);\n\nreturn groups.map(groups -> groups.stream()\n        .filter(group -> !group.getId().equals(ALL_USERS_GROUP_ID))\n        .map(group -> {\n            Map<String, String> groupMap = new HashMap<>();\n            groupMap.put(\"id\", group.getId());\n            groupMap.put(\"name\", group.getName());\n            return groupMap;\n        })\n        .collect(Collectors.toList())\n);\n}", "CodeBleu_score": 35.38563762589186}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.doUpsert(userStatus);\n}", "CodeBleu_score": 30.919305532882202}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.doUpsert(userStatus);\n}", "CodeBleu_score": 34.20291171852398}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus();\n\tuserStatus.setUserId(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.doUpsert(userStatus);\n}", "CodeBleu_score": 34.432350358634054}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\twg.Add(len(c.partitions))\n\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.name, p) {\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\n\twg.Wait()\n}", "CodeBleu_score": 37.607783348877454}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\trunGroup := newRunGroup()\n\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.name, partition) {\n\t\t\trunGroup.Run(func() {\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\n\trunGroup.Wait()\n}", "CodeBleu_score": 35.53739179844753}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tif c.partitionManager == nil {\n\t\tpanic(\"partitionManager cannot be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tpartitions := c.partitionManager.GetPartitions()\n\tfor _, partition := range partitions {\n\t\tif predicatePartition(partition.Name, partition) {\n\t\t\twg.Add(1)\n\t\t\tgo func(partitionName string, partitionManager PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tpartition := partitionManager.GetPartition(partitionName)\n\t\t\t\tfor _, entry := range partition.Entries() {\n\t\t\t\t\tif predicateValue(entry.Key, entry.Value) {\n\t\t\t\t\t\tpartition.RemoveEntry(entry.Key)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}(partition.Name, c.partitionManager)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 38.81610261162061}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"numPartitions must be greater than zero\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"totalWeightQuantity must be greater than zero\")\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn averageWeightPerPartition * maxItemsTotal\n}", "CodeBleu_score": 55.01033844855379}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\treturn int(math.Ceil(float64(maxItemsTotal) / float64(numPartitions)))\n}", "CodeBleu_score": 25.103931124350336}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\t// Check that the number of partitions and total weight quantity are greater than zero.\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\t// Calculate the average weight per partition.\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\t// Return the maximum size per partition based on the provided formula.\n\treturn int(math.Ceil(float64(maxItemsTotal) / (avgWeightPerPartition / float64(maxWeightPerItem))))\n}", "CodeBleu_score": 43.36488225441221}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tif (this.connectionMetadata != null) {\n\t\tmap.put(\"databaseProductName\", this.connectionMetadata.getDatabaseProductName());\n\t\tmap.put(\"databaseProductVersion\", this.connectionMetadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 34.010033375334146}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tthis.getConnectionMetadata()\n\t\t.map(ConnectionMetadata::getDatabaseProductName)\n\t\t.ifPresent(productName -> contributorMap.put(\"databaseProductName\", productName));\n\tthis.getConnectionMetadata()\n\t\t.map(ConnectionMetadata::getDatabaseProductVersion)\n\t\t.ifPresent(productVersion -> contributorMap.put(\"databaseProductVersion\", productVersion));\n\treturn contributorMap;\n}", "CodeBleu_score": 32.56414334937}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\ttry {\n\t\tConnectionMetadata connectionMetadata = this.getConnectionMetadata().block();\n\t\tif (connectionMetadata != null) {\n\t\t\tcontributorMap.put(\"databaseProductName\", connectionMetadata.getDatabaseProductName());\n\t\t\tcontributorMap.put(\"databaseProductVersion\", connectionMetadata.getDatabaseProductVersion());\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tlogger.error(ex.getMessage(), ex);\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 47.449978758822446}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// Retrieve the user settings from the configuration map\n\tConfigMap userSettings = configMap.getMap(\"userSettings\");\n\t\n\t// If the user settings are null, disable registration and email verification on registration\n\tif (userSettings == null) {\n\t\tinfo.setEnableRegistration(false);\n\t\tinfo.setEnableEmailVerification(false);\n\t} else {\n\t\t// Otherwise, update the GlobalInfo object with the retrieved settings for registration and email verification\n\t\tinfo.setEnableRegistration(userSettings.getBoolean(\"enableRegistration\", true));\n\t\tinfo.setEnableEmailVerification(userSettings.getBoolean(\"enableEmailVerification\", true));\n\t}\n}", "CodeBleu_score": 33.368749041235745}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap == null) {\n\t\tinfo.setRegisterEnabled(false);\n\t\tinfo.setVerifyEmailEnabled(false);\n\t\treturn;\n\t}\n\n\tif (configMap.containsKey(\"register\")) {\n\t\tinfo.setRegisterEnabled(configMap.getBoolean(\"register\"));\n\t}\n\n\tif (configMap.containsKey(\"verifyEmail\")) {\n\t\tinfo.setVerifyEmailEnabled(configMap.getBoolean(\"verifyEmail\"));\n\t}\n}", "CodeBleu_score": 25.976829870027107}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tif (configMap.containsKey(USER_SETTINGS)) {\n\t\tConfigMap userSettings = configMap.getMap(USER_SETTINGS);\n\t\tif (userSettings.containsKey(DISABLE_REGISTRATION)) {\n\t\t\tinfo.disableRegistration = userSettings.getBoolean(DISABLE_REGISTRATION);\n\t\t}\n\t\tif (userSettings.containsKey(DISABLE_EMAIL_VERIFICATION)) {\n\t\t\tinfo.disableEmailVerification = userSettings.getBoolean(DISABLE_EMAIL_VERIFICATION);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.02861490809987}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup group = new ThreadGroup(\"Restart\");\n\tThread thread = new Thread(group, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tClass.forName(System.getProperty(\"java.class.path\"), true, Thread.currentThread().getContextClassLoader());\n\t\t\t\tString[] args = new String[0];\n\t\t\t\tMethod method = Class.forName(System.getProperty(\"org.eclipse.jetty.util.log.class\"), true, Thread.currentThread().getContextClassLoader()).getMethod(\"reconfigure\", new Class[] { String[].class });\n\t\t\t\tmethod.invoke(null, new Object[] { args });\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Restarting\";\n}", "CodeBleu_score": 40.57961272854777}, {"code": "public Object restart(){\n\t\ttry {\n\t\t// Create a new thread group and thread to execute the restart process\n\t\tThreadGroup threadGroup = new ThreadGroup(\"RestartThreadGroup\");\n\t\tThread restartThread = new Thread(threadGroup, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t// Set the thread as non-daemon and assign the application class loader as its context class loader\n\t\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\t\tThread.currentThread().setContextClassLoader(RestartServlet.class.getClassLoader());\n\n\t\t\t\t\t// Restart the application\n\t\t\t\t\tRestartServlet.restart();\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Start the thread\n\t\trestartThread.start();\n\n\t\t// Return a message indicating the restart has begun\n\t\treturn \"Application restart initiated.\";\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn \"Error restarting application.\";\n\t}\n}", "CodeBleu_score": 44.07314305306576}, {"code": "public Object restart(){\n\t\tThreadGroup threadGroup = new ThreadGroup(this.getClass().getName());\n\tThread thread = new Thread(threadGroup, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.sleep(500);\n\t\t\t\tClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();\n\t\t\t\tThread.currentThread().setContextClassLoader(Restartable.class.getClassLoader());\n\t\t\t\tRestartable.this.restart();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\tthread.setDaemon(false);\n\tthread.start();\n\treturn \"Application restart initiated. Please wait for the application to start up.\";\n}", "CodeBleu_score": 42.86235883172336}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.62032370439991}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t", "CodeBleu_score": 4.125465382387607}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.62032370439991}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t", "CodeBleu_score": 1.7307821270007306}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn RouterFunctions.route(RequestPredicates.GET(\"/console/**\").and(RequestPredicates.accept(MediaType.TEXT_HTML)).and(RequestPredicates.not(RequestPredicates.websocket())), this::serveIndex);\n}", "CodeBleu_score": 18.860162364227165}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t\treturn route(GET(\"/console/**\"), accept(TEXT_HTML), request -> request.path().value().endsWith(\".html\"), this::serveIndex);\n}", "CodeBleu_score": 13.168137533409347}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(contentType(MediaType.TEXT_HTML).negate()), request -> serveIndex(ucLocation));\n}", "CodeBleu_score": 19.430954089093724}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\"), request -> accept(MediaType.TEXT_HTML)\n\t\t\t.and(not(isWebSocket()))\n\t\t\t.and(Predicates.not(path(\"/uc/assets/**\"))), this::serveIndex);\n}", "CodeBleu_score": 19.52386949371484}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t\treturn route(GET(\"/uc/**\").and(accept(MediaType.TEXT_HTML)).and(not(WebSocket.class)), this::serveIndex);\n}", "CodeBleu_score": 12.744923879430889}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\treturn new ReactiveRedisIndexedSessionRepository(MapSession.class, sessionRedisOperations, serverProperties.getSession().getTimeout());\n}", "CodeBleu_score": 13.110689951318422}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tReactiveIndexedSessionRepository<MapSession> sessionRepository = new ReactiveRedisIndexedSessionRepository(MapSession.class, redisConnectionFactory);\n\tsessionRepository.setDefaultMaxInactiveInterval(serverProperties.getSession().getTimeout());\n\treturn sessionRepository;\n}", "CodeBleu_score": 26.32334135698933}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n\tuserDetailsService.setUserService(userService);\n\tuserDetailsService.setRoleService(roleService);\n\tuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().getTwoFactorAuthenticationEnabled());\n\treturn userDetailsService;\n}", "CodeBleu_score": 37.66959753333003}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\tuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().getTwoFactorAuthentication().isEnabled());\n\treturn userDetailsService;\n}", "CodeBleu_score": 47.37771908441996}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n\tuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().getTwoFactorAuthentication().isEnabled());\n\treturn userDetailsService;\n}", "CodeBleu_score": 47.37771908441996}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.kind = \"email\";\n\towner.email = email;\n\towner.displayName = displayName;\n\towner.avatar = new Comment.CommentOwner.Avatar();\n\towner.avatar.url = avatarUrl;\n\towner.website = new Comment.CommentOwner.Website();\n\towner.website.url = websiteUrl;\n\treturn owner;\n}", "CodeBleu_score": 28.022227454823007}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.kind = \"email\";\n\towner.email = email == null ? \"\" : email;\n\towner.displayName = displayName;\n\towner.avatarUrl = avatarUrl;\n\towner.website = website;\n\treturn owner;\n}", "CodeBleu_score": 24.234228024961507}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.kind = \"email\";\n\towner.email = email;\n\towner.displayName = displayName;\n\towner.avatar = new Comment.CommentOwner.Avatar();\n\towner.avatar.url = avatarUrl;\n\towner.website = website;\n\treturn owner;\n}", "CodeBleu_score": 26.007050416703336}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t", "CodeBleu_score": 3.7030608954755904}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (post.owner.kind == \"user\") {\n\t\treturn post.owner.name == commentOwner.name;\n\t} else {\n\t\tUser user = User.query().filter(\"email =\", post.owner.name).get();\n\t\treturn user.email == commentOwner.name;\n\t}\n}", "CodeBleu_score": 30.804441841976605}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (post.owner.kind == \"comment_owner_kind_user\") {\n\t\treturn post.owner.name == commentOwner.name;\n\t} else if (post.owner.kind == \"comment_owner_kind_team\") {\n\t\treturn post.owner.name == commentOwner.name;\n\t} else if (post.owner.kind == \"comment_owner_kind_email\") {\n\t\tUser user = User.get(commentOwner.name);\n\t\treturn user.email == post.owner.name;\n\t}\n}", "CodeBleu_score": 21.347885965360902}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions options = new ListOptions();\noptions.setLabelSelector(getLabelSelector());\noptions.setFieldSelector(getFieldSelector());\nif (StringUtils.isNotBlank(getKeyword())) {\n    String fieldQuery = \"metadata.name=\" + getKeyword();\n    if (StringUtils.isNotBlank(getOwnerName())) {\n        fieldQuery += \",metadata.annotations.owner=\" + getOwnerName();\n    }\n    if (StringUtils.isNotBlank(getOwnerKind())) {\n        fieldQuery += \",metadata.annotations.owner-kind=\" + getOwnerKind();\n    }\n    options.setFieldSelector(fieldQuery);\n}\nreturn options;\n}", "CodeBleu_score": 28.19476754791778}, {"code": "public ListOptions toListOptions(){\n\tListOptions options = new ListOptions();\nList<String> fields = new ArrayList<>();\nif (getLabelSelector() != null) {\noptions.setLabelSelector(getLabelSelector());\n}\nif (getFieldSelector() != null) {\noptions.setFieldSelector(getFieldSelector());\n}\nif (getOwnerName() != null) {\noptions.setLabelSelector(options.getLabelSelector() == null ? \"ownerName=\" + getOwnerName() : options.getLabelSelector() + \",ownerName=\" + getOwnerName());\n}\nif (getKeyword() != null) {\noptions.setLabelSelector(options.getLabelSelector() == null ? \"keyword=\" + getKeyword() : options.getLabelSelector() + \",keyword=\" + getKeyword());\n}\nif (getOwnerKind() != null) {\noptions.setLabelSelector(options.getLabelSelector() == null ? \"ownerKind=\" + getOwnerKind() : options.getLabelSelector() + \",ownerKind=\" + getOwnerKind());\n}\noptions.setFieldSelector(fields.isEmpty() ? null : String.join(\",\", fields));\nreturn options;\n}", "CodeBleu_score": 22.451099146502663}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\nlistOptions.setSortField(getSortField());\nlistOptions.setSortOrder(getSortOrder());\nlistOptions.setLimit(getLimit());\nlistOptions.setOffset(getOffset());\n\nString fieldSelector = getFieldSelector();\nif (StringUtils.isNotBlank(fieldSelector)) {\n    listOptions.setFieldSelector(fieldSelector);\n}\n\nString labelSelector = getLabelSelector();\nif (StringUtils.isNotBlank(labelSelector)) {\n    listOptions.setLabelSelector(labelSelector);\n}\n\nString keyword = getKeyword();\nif (StringUtils.isNotBlank(keyword)) {\n    listOptions.setKeyword(keyword);\n}\n\nString ownerName = getOwnerName();\nif (StringUtils.isNotBlank(ownerName)) {\n    listOptions.setOwnerName(ownerName);\n}\n\nString ownerKind = getOwnerKind();\nif (StringUtils.isNotBlank(ownerKind)) {\n    listOptions.setOwnerKind(ownerKind);\n}\n\nreturn listOptions;\n}", "CodeBleu_score": 39.899852105876654}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tif (commentName == null) {\n\t\treturn Mono.just(new CommentStats(0, 0, 0));\n\t} else {\n\t\treturn counterRepository.findById(commentName)\n\t\t\t.map(commentCounter -> new CommentStats(commentCounter.getUpvotes(), commentCounter.getDownvotes(), commentCounter.getNetVotes()));\n\t}\n}", "CodeBleu_score": 35.925427879393055}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tif (commentName == null) {\n\t\treturn Mono.just(CommentStats.builder().build());\n\t}\n\n\treturn Mono.fromCallable(() -> {\n\t\tCommentStats commentStats = new CommentStats();\n\t\tcommentStats.setCommentName(commentName);\n\t\tcommentStats.setUpvoteCount(commentCounterRepository.get(commentName));\n\t\treturn commentStats;\n\t});\n}", "CodeBleu_score": 36.5358775938441}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tif (commentName == null) {\n\t\treturn Mono.just(new CommentStats());\n\t} else {\n\t\treturn Mono.just(new CommentStats())\n\t\t\t.map(stats -> {\n\t\t\t\tstats.setCommentName(commentName);\n\t\t\t\treturn stats;\n\t\t\t});\n\t}\n}", "CodeBleu_score": 29.778612459266395}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t// create a subscriber from the given user identity\nSubscription.Subscriber subscriber = createSubscriber(identity);\nif (subscriber == null) {\nreturn;\n}\n\n// create an interest reason for the subscription\nSubscription.InterestReason reason = new Subscription.InterestReason();\nreason.setReasonType(Subscription.InterestReason.ReasonType.SOMEONE_REPLIED_TO_YOU);\nreason.setCondition(Subscription.InterestReason.Condition.REPLIED_OWNER_MATCHES_NAME);\n\n// subscribe the user to the notification center\nSubscription.SubscriptionState state = notificationCenter.subscribe(subscriber, reason);\nwhile (!state.isSubscribed()) {\ntry {\nThread.sleep(1000);\n} catch (InterruptedException e) {\ne.printStackTrace();\n}\nstate = notificationCenter.subscribe(subscriber, reason);\n}\n}", "CodeBleu_score": 52.375831145311956}, {"code": "void subscribeReply(UserIdentity identity){\n\t\n// Create the subscriber.\n    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n// Create the interest reason.\n    Subscription.InterestReason reason = new Subscription.InterestReason();\n    reason.setReasonType(Subscription.InterestReason.ReasonType.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(new Subscription.InterestReason.Condition(Subscription.InterestReason.Condition.Type.IS_EQUAL_TO, identity.name()));\n\n// Subscribe the user to the notification center.\n    Subscription subscription = new Subscription(subscriber, reason);\n    try {\n        notificationCenter.subscribe(subscription);\n    }\n    catch (NotificationCenterException e) {\n        System.err.println(\"Error subscribing to notifications: \" + e.getMessage());\n        return;\n    }\n\n// Wait for the subscription to complete.\n    try {\n        subscription.awaitCompletion();\n    }\n    catch (InterruptedException e) {\n        System.err.println(\"Error awaiting subscription completion: \" + e.getMessage());\n        return;\n    }\n\n// Print the result of the subscription.\n    if (subscription.isCompleted()) {\n        System.out.println(\"Subscription completed successfully\");\n    }\n    else {\n        System.out.println(\"Subscription completed with errors\");\n        for (NotificationCenterException e : subscription.getExceptions()) {\n            System.out.println(\" - \" + e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 47.48954145386832}, {"code": "void subscribeReply(UserIdentity identity){\n\t// Create a subscriber from the given user identity.\n    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n// Create an interest reason for the subscription, specifying that the reason type is \"someone replied to you\" and the condition is that the replied owner matches the user's name.\n    Subscription.InterestReason reason = new Subscription.InterestReason();\n    reason.setReasonType(Subscription.InterestReason.ReasonType.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(new Subscription.InterestReason.Condition(Subscription.InterestReason.Condition.Type.IS_EQUAL_TO, identity.name()));\n\n// Subscribe the user to the notification center.\n    subscribe(subscriber, reason);\n}", "CodeBleu_score": 56.69794767513887}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t\tcomment.setApproved(true);\n\tcomment.setApprovalTime(OffsetDateTime.now());\n\treturn updateCommentWithRetry(comment.getName(), c -> c);\n}", "CodeBleu_score": 15.107784104418059}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t\treturn updateCommentWithRetry(comment.getName(), comment1 -> {\n\t\tcomment1.setApproved(true);\n\t\tcomment1.setApprovalTime(OffsetDateTime.now());\n\t\treturn comment1;\n\t});\n}", "CodeBleu_score": 18.615377937640307}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> {\nc.setApproved(true);\nc.setApprovalTime(OffsetDateTime.now());\nreturn c;\n});\n}", "CodeBleu_score": 16.675271978015523}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\n\tif ($this->record && $action instanceof HasRecord) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 50.806350086191365}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\n\tif($this->record instanceof HasRecord && $action instanceof HasRecord) {\n\t\t$action->setRecord($this->record);\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 51.984883434419736}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif($action instanceof MountableAction) {\n\t\t$action->setComponent($this);\n\t\tif($action instanceof HasRecord) {\n\t\t\t$action->setRecord($this->record);\n\t\t}\n\t}\n\treturn $action;\n}", "CodeBleu_score": 44.63689520296929}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->getSuccessRedirect());\n\nif (! empty($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 62.512874174973746}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->getSuccessRedirect());\n\nif (!empty($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 62.45275246327221}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->getSuccessRedirectUrl());\n\nif (! empty($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 63.10917640067451}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (!$record || !$record->hasMethod('tags')) {\n\t\treturn;\n\t}\n\n\t$tagModel = $this->getTagsModel();\n\t$tagNames = $state[$this->name] ?? [];\n\t$tagIds = [];\n\n\tforeach ($tagNames as $tagName) {\n\t\t$tag = $tagModel->findOrCreate($tagName);\n\t\t$tagIds[] = $tag->id;\n\t}\n\n\t$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 24.835763943556657}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (!$record->hasMethod('tags')) {\n\t\treturn;\n\t}\n\n\t$tagModel = $this->model->tagModel();\n\t$tagNames = $state[$this->name] ?? [];\n\n\t$tags = $tagModel->whereIn('name', $tagNames)->get();\n\n\t$tagIds = [];\n\tforeach ($tags as $tag) {\n\t\t$tagIds[] = $tag->id;\n\t}\n\n\t$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 25.685656465602687}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (! $record->hasMethod('tags')) {\n\t\treturn;\n\t}\n\n\t$tagClassName = $this->getTagsModelClassName();\n\t$tagNames = $state['tags'] ?? [];\n\n\t$tags = $tagClassName::whereIn('name', $tagNames)->get();\n\t$tagNamesToCreate = array_diff($tagNames, $tags->pluck('name')->toArray());\n\n\tif (! empty($tagNamesToCreate)) {\n\t\t$tagsToCreate = $tagClassName::createMany(array_map(function (string $tagName) {\n\t\t\treturn ['name' => $tagName];\n\t\t}, $tagNamesToCreate));\n\n\t\t$tags = $tags->merge($tagsToCreate);\n\t}\n\n\t$record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 44.273571016718094}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, pipelineName, err := dissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.NewRepositoryScope(spacePath, pipelineName)\n\tresource := authz.NewRepositoryResource(pipelineIdentifier)\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 45.36000992943937}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspace, name, err := authz.GetSpaceAndNameFromRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := authz.NewScope(authz.ScopeRepo, space, name)\n\tresource := authz.NewResource(authz.ResourceRepo, pipelineIdentifier)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 48.18345065333203}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name.\n\tspacePath, repoName, err := authz.GetSpaceAndRepoFromRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := authz.NewScope(authz.ScopeRepo, spacePath, repoName)\n\tresource := authz.NewResource(authz.ResourceRepo, pipelineIdentifier)\n\n\t// Perform the authorization check.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 51.378261940235646}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentPath := strings.Split(space.Path, \"/\")[1:]\n\tparentName := parentPath[len(parentPath)-1]\n\tparentSpace := types.Space{\n\t\tPath: strings.Join(parentPath[:len(parentPath)-1], \"/\"),\n\t}\n\tscope := authz.NewSpaceScope(parentSpace, parentName)\n\tresource := authz.NewSpaceResource(space)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 45.50248294063709}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space.\n\tparentSpace, err := GetParentSpace(ctx, authorizer, session, space)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create the scope and resource.\n\tscope := authz.NewSpaceScope(parentSpace.ID)\n\tresource := authz.NewSpaceResource(space.ID)\n\n\t// Check the permission.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 52.34858358057021}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space and name from the space path\n\tparentSpace, name, err := space.ParentSpaceAndName()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource from the parent space and name\n\tscope := fmt.Sprintf(\"space:%s\", parentSpace.ID)\n\tresource := fmt.Sprintf(\"space:%s:%s\", parentSpace.ID, name)\n\n\t// Check the permission\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 54.82630197740653}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar payload map[string]any\n\terr := json.Unmarshal(source, &payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized = bytes.TrimSuffix(sanitized, []byte(\"\n\"))\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 33.71227094680614}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil || len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\tvar v map[string]any\n\tif err := json.Unmarshal(source, &v); err != nil {\n\t\treturn nil, err\n\t}\n\tv, err := json.Marshal(v)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tv = bytes.TrimSuffix(v, []byte(\"\n\"))\n\treturn v, nil\n}", "CodeBleu_score": 32.00539222427446}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif source == nil {\n\t\tsource = json.Marshal(data)\n\t\tif source == nil {\n\t\t\treturn nil, errors.New(\"failed to marshal data\")\n\t\t}\n\t}\n\n\tvar raw map[string]any\n\tif err := json.Unmarshal(source, &raw); err != nil {\n\t\treturn nil, err\n\t}\n\n\traw, err := json.Marshal(raw)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(raw, []byte(\"\n\")), nil\n}", "CodeBleu_score": 32.14477528986737}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := validate.Path(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.RepositoryStore.GetRepository(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := auth.CheckAccess(ctx, session, reqPermission, repo); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 46.85359950938047}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\tif err := validate.RepositoryReference(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.Repositories().Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := auth.AuthorizeRepositoryRead(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 45.88246256985005}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif err := validateRepoRef(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\trepo, err := c.db.GetRepository(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := auth.AuthorizeRepositoryRead(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 46.741781976533815}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tcheckSanitizers[enum.EmptyPayloadKind] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.PipelinePayloadKind] = createPipelinePayloadSanitizer()\n\tcheckSanitizers[enum.RawPayloadKind] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.MarkdownPayloadKind] = createRawPayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 61.47714793816713}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:      createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.304279881955893}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline:   createPipelinePayloadSanitizer(),\n\t}\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.586787371502524}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.state.on_render ~= nil then\n\t\treturn self\n\tend\n\n\tif self.renderer == nil then\n\t\tself.renderer = self.state.renderer\n\tend\n\n\tif self.renderer == nil then\n\t\treturn self\n\tend\n\n\tself.state.on_render = on_render\n\tself.renderer:attach_buffer(self)\n\n\treturn self", "CodeBleu_score": 47.9128715675205}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif not self.attached_to_renderer then\n\t\tself.state.on_render = on_render\n\t\tself.renderer:attach_buffer(self)\n\t\tself.attached_to_renderer = true\n\tend\n\treturn self", "CodeBleu_score": 54.47085455795454}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tif self.attached_to_renderer == nil then\n\t\tself.attached_to_renderer = true\n\t\tself.state.on_render = on_render\n\t\tself.renderer:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 48.661075019047914}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif self.valid and callback then\n\t\tself.watcher = vim.loop.new_fs_event()\n\t\tself.watcher:start(self.filename, vim.schedule_wrap(function()\n\t\t\tcallback(self)\n\t\tend), vim.schedule_wrap(function(err)\n\t\t\tif err then\n\t\t\t\tvim.api.nvim_err_writeln(\"Error in buffer watcher: \" .. err)\n\t\t\tend\n\t\tend))\n\tend", "CodeBleu_score": 44.504790428114696}, {"code": "function Buffer:watch(callback)\n\t\tif self.valid and callback ~= nil then\n\t\tif not self.watch_callback == nil then\n\t\t\tvim.api.nvim_buf_detach(self.buffer, true)\n\t\tend\n\t\tself.watch_callback = callback\n\t\tvim.api.nvim_buf_attach(self.buffer, false, {\n\t\t\ton_lines = function()\n\t\t\t\tself.watch_callback()\n\t\t\tend,\n\t\t\ton_detach = function()\n\t\t\t\tself.watch_callback = nil\n\t\t\tend\n\t\t})\n\tend", "CodeBleu_score": 42.695463800178736}, {"code": "function Buffer:watch(callback)\n\t\tif not self.valid then return end\n\tif not callback then return end\n\tif not self.filename then return end\n\tlocal watcher = vim.loop.new_fs_event()\n\tlocal function on_change(event_name, req_filename, events)\n\t\tif event_name == \"change\" and req_filename == self.filename then\n\t\t\tcallback()\n\t\tend\n\tend\n\tlocal function on_error(err)\n\t\tvim.api.nvim_err_writeln(\"Error watching file: \" .. err)\n\tend\n\twatcher:start(self.filename, 4096, vim.schedule_wrap(on_change), vim.schedule_wrap(on_error))\n\tself.watchers[watcher] = true", "CodeBleu_score": 44.54085431168331}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then \n\t\treturn self.hex \n\tend \n\tlocal color_spec = self.spec \n\tif color_spec.background then \n\t\tcolor_spec = color_spec.background \n\tend \n\tlocal fg = color_spec.fg \n\tlocal bg = color_spec.bg \n\tif not fg and not bg then \n\t\treturn nil \n\tend \n\tif fg and not bg then \n\t\tbg = fg \n\tend \n\tif bg and not fg then \n\t\tfg = bg \n\tend \n\tlocal hex = nil \n\tif bg == fg then \n\t\thex = bg \n\telse \n\t\tlocal hl = vim.api.nvim_get_hl(vim.api.nvim_get_current_win(), \"Normal\") \n\t\tif bg == hl.background then \n\t\t\thex = fg \n\t\telse \n\t\t\thex = bg \n\t\tend \n\tend \n\tself.hex = hex \n\treturn hex ", "CodeBleu_score": 48.66242728468508}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\n\tif spec.background then\n\t\tspec = spec.background\n\tend\n\n\tlocal color = spec.color\n\n\tif color.name then\n\t\tcolor = color.name\n\tend\n\n\tlocal hex = vim.fn.synIDattr(vim.fn.hlID(color), \"fg#\")\n\n\tif hex == \"\" then\n\t\treturn nil\n\tend\n\n\tself.hex = hex\n\n\treturn hex", "CodeBleu_score": 50.01975738575769}, {"code": "function Color:to_hex()\n\t\tif self.hex ~= nil then \n\t\treturn self.hex \n\tend \n\tlocal fg, bg = self.spec:match(\"(%S*)%s*%-%s*(%S*)\") \n\tif fg == nil then \n\t\tfg = self.spec \n\tend \n\tif bg == nil then \n\t\tbg = \"\" \n\tend \n\tlocal hl = vim.api.nvim_get_hl_by_name(self.spec, true) \n\tif hl ~= nil then \n\t\tif fg == \"\" then \n\t\t\tfg = hl.foreground \n\t\tend \n\t\tif bg == \"\" then \n\t\t\tbg = hl.background \n\t\tend \n\tend \n\tfg = self.to_hex_color(fg) \n\tbg = self.to_hex_color(bg) \n\tself.hex = string.format(\"%s%s\", fg, bg) \n\treturn self.hex ", "CodeBleu_score": 50.089633213805264}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tlocal hl_id = self:add_highlight(hl)\n\n\tfor _, line in ipairs(lines) do\n\t\tfor match in line:gmatch(pattern) do\n\t\t\tbuffer:add_highlight(hl_id, match.start, match.start, match.end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 39.978464304687094}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\nend\n", "CodeBleu_score": 2.642495415569507}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\nend", "CodeBleu_score": 2.642495415569507}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = row * 10000 + col\n\tbuffer:add_extmark(row, col, id, {virt_text = {{text, hl}}, virt_text_pos = pos, priority = priority})\n\treturn id", "CodeBleu_score": 48.55867617298443}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = buffer.number .. \"_\" .. row .. \"_\" .. col\n\tbuffer:add_extmark(row, col, pos, {virt_text = {{text, hl}}, virt_text_pos = \"right_align\", priority = priority})\n\treturn id", "CodeBleu_score": 48.10693998436562}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = tostring(row) .. \":\" .. tostring(col)\n\tlocal hl_id = hl\n\tlocal buffer_id = buffer.api.get_buffer_number()\n\tlocal virt_text = {text, hl_id, pos, {}}\n\tvim.api.nvim_buf_set_extmark(buffer_id, self.extmarks_ns, row - 1, col - 1, {virt_text = {virt_text}, virt_text_pos = \"eol\"})\n\treturn id", "CodeBleu_score": 45.106569371256114}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor c in output:gmatch(\".\") do\n\t\tif c == \"", "CodeBleu_score": 7.144238054574907}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"", "CodeBleu_score": 7.541891764936208}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor char in output:gmatch(\".\") do\n\t\tif char == \"", "CodeBleu_score": 7.541891764936208}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher == nil then\n\t\twatcher = vim.loop.new_fs_event()\n\t\tself.watchers[path] = watcher\n\t\twatcher:start(path, vim.loop.FS_EVENT_RECURSIVE, handler)\n\tend\n\treturn watcher", "CodeBleu_score": 47.05946279684807}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watchers[path] ~= nil then\n\t\treturn self.watchers[path]\n\tend\n\tself.watchers[path] = vim.loop.new_fs_event()\n\tself.watchers[path]:start(path, vim.schedule_wrap(handler), vim.loop.FS_EVENT_RECURSIVE)\n\treturn self.watchers[path]", "CodeBleu_score": 49.937108758222635}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif not watcher then\n\t\twatcher = uv.new_fs_event()\n\t\tself.watchers[path] = watcher\n\t\tuv.fs_event_start(watcher, path, handler, 0)\n\tend\n\treturn watcher", "CodeBleu_score": 42.72870540851621}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal buffer = self.buffer\n\tlocal hunks = self.git:live_hunks()\n\tif not hunks then return hunks end\n\n\tlocal hunk_type = {\n\t\t['+'] = 'add',\n\t\t['-'] = 'del',\n\t\t[' '] = 'chg',\n\t}\n\n\tlocal signs = {\n\t\tadd = {\n\t\t\tpriority = 10,\n\t\t\thl = 'GitSignsAdd',\n\t\t\ttext = '\u2502',\n\t\t},\n\t\tdel = {\n\t\t\tpriority = 10,\n\t\t\thl = 'GitSignsDelete',\n\t\t\ttext = '\u2502',\n\t\t},\n\t\tchg = {\n\t\t\tpriority = 20,\n\t\t\thl = 'GitSignsChange',\n\t\t\ttext = '\u2502',\n\t\t},\n\t}\n\n\tlocal signs_config = {\n\t\tadd = {\n\t\t\ttext = '\u2502',\n\t\t\tlinehl = 'GitSignsAddLn',\n\t\t\tnumhl = 'GitSignsAddLn',\n\t\t\ttexthl = 'GitSignsAdd',\n\t\t},\n\t\tdel = {\n\t\t\ttext = '\u2502',\n\t\t\tlinehl = 'GitSignsDeleteLn',\n\t\t\tnumhl = 'GitSignsDeleteLn',\n\t\t\ttexthl = 'GitSignsDelete',\n\t\t},\n\t\tchg = {\n\t\t\ttext = '\u2502',\n\t\t\tlinehl = 'GitSignsChangeLn',\n\t\t\tnumhl = 'GitSignsChangeLn',\n\t\t\ttexthl = 'GitSignsChange',\n\t\t},\n\t}\n\n\tlocal hunk_signs = {}\n\tlocal hunk_signs_config = {}\n\tlocal hunk_signs_priority = {}\n\n\tlocal hunk_sign_id = 1\n\tfor hunk in hunks:iter() do\n\t\tlocal hunk_start_line = hunk.start_line\n\t\tlocal hunk_end_line = hunk.end_line\n\t\tlocal hunk_type_sign = hunk_type[hunk.type]\n\t\tlocal hunk_type_sign_config = signs_config[hunk_type_sign]\n\t\tlocal hunk_type_sign_priority = signs[hunk_type_sign].priority\n\n\t\tfor line in hunk:iter", "CodeBleu_score": 35.59100362802916}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n\tif lines == nil then\n\t\treturn nil\n\tend\n\tlocal hunks = self.git:live_hunks(lines)\n\tif hunks == nil then\n\t\treturn nil\n\tend\n\tlocal signs = {}\n\tlocal priority = 1\n\tfor _, hunk in ipairs(hunks) do\n\t\tif hunk.type == \"add\" then\n\t\t\tsigns[hunk.start] = {\n\t\t\t\tid = self.sign_id,\n\t\t\t\tpriority = priority,\n\t\t\t\thl = \"GitSignsAdd\",\n\t\t\t}\n\t\t\tpriority = priority + 1\n\t\telseif hunk.type == \"change\" then\n\t\t\tsigns[hunk.start] = {\n\t\t\t\tid = self.sign_id,\n\t\t\t\tpriority = priority,\n\t\t\t\thl = \"GitSignsChange\",\n\t\t\t}\n\t\t\tsigns[hunk.end] = {\n\t\t\t\tid = self.sign_id,\n\t\t\t\tpriority = priority,\n\t\t\t\thl = \"GitSignsChange\",\n\t\t\t}\n\t\t\tpriority = priority + 1\n\t\telseif hunk.type == \"delete\" then\n\t\t\tsigns[hunk.start] = {\n\t\t\t\tid = self.sign_id,\n\t\t\t\tpriority = priority,\n\t\t\t\thl = \"GitSignsDelete\",\n\t\t\t}\n\t\t\tsigns[hunk.end] = {\n\t\t\t\tid = self.sign_id,\n\t\t\t\tpriority = priority,\n\t\t\t\thl = \"GitSignsDelete\",\n\t\t\t}\n\t\t\tpriority = priority + 1\n\t\tend\n\tend\n\tself.signs = signs\n\tvim.api.nvim_buf_clear_namespace(self.bufnr, self.sign_id, 0, -1)\n\tself:update_signs()\n\treturn hunks", "CodeBleu_score": 44.55989591522473}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal buf = self.buf\n\tlocal hunks = self.git.hunks\n\tlocal signs = self.signs\n\tlocal lines = vim.api.buf_line_count(buf)\n\tlocal hunks_with_signs = {}\n\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal start_line = hunk.start_line\n\t\tlocal end_line = hunk.end_line\n\t\tlocal hunk_lines = end_line - start_line + 1\n\t\tlocal priority = 1\n\n\t\tif hunk.type == 'add' then\n\t\t\tpriority = 10000\n\t\telseif hunk.type == 'delete' then\n\t\t\tpriority = 100000\n\t\telseif hunk.type == 'change' then\n\t\t\tpriority = 1000000\n\t\tend\n\n\t\tfor i = 1, hunk_lines do\n\t\t\tlocal line = start_line + i - 1\n\t\t\tlocal sign = signs[line] or {\n\t\t\t\tpriority = priority,\n\t\t\t\ttype = hunk.type,\n\t\t\t\thunk = hunk,\n\t\t\t}\n\n\t\t\tsigns[line] = sign\n\t\tend\n\n\t\ttable.insert(hunks_with_signs, hunk)\n\tend\n\n\treturn hunks_with_signs", "CodeBleu_score": 39.67398922259559}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal filepath = fs.temp_file()\n\n\tfs.write_file(filepath, patch.lines)\n\n\tlocal git_error = os.execute('git apply --cached \"' .. filepath .. '\"')\n\n\tfs.remove_file(filepath)\n\n\treturn git_error", "CodeBleu_score": 38.477742611138076}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file = fs.create_temp_file()\n\n\tfs.write_file(temp_file, patch.lines)\n\n\tlocal _, _, err = os.execute(f'git apply --cached --unidiff-zero -p{patch.hunk.start_line_number} < {temp_file}')\n\n\tfs.remove_file(temp_file)\n\n\treturn err", "CodeBleu_score": 43.71869547238803}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file_path = fs.get_temporary_file_path()\n\tfs.write_file(temp_file_path, patch)\n\tlocal result = os.execute(string.format('git apply --cached \"%s\"', temp_file_path))\n\tfs.remove_file(temp_file_path)\n\treturn result", "CodeBleu_score": 40.96955382363755}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n// Create an OAuth request to the access token endpoint, add the necessary authentication header and body parameters, and send the request.\n    OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n    request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n    request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n    Response response = request.send();\n\n// Extract the access token from the response body using the API's access token extractor.\n    return config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 58.9441389214513}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n// Create the request body for the token request\nMap<String, String> requestBody = new HashMap<>();\nrequestBody.put(\"oauth_verifier\", verifier.getValue());\n\n// Create the request to the access token endpoint\nRequest request = createAccessTokenRequest(requestToken, requestBody);\n\n// Execute the request and extract the response body\nToken response = executeAndExtractToken(request);\n\nreturn response;\n}", "CodeBleu_score": 34.11505372231155}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n// Create the request and add the parameters\nOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\nrequest.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n// Add the authorization header\nrequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\n// Send the request\nToken accessToken = config.getAccessTokenExtractor().extract(request.send());\n\n// Return the access token\nreturn accessToken;\n}", "CodeBleu_score": 51.76955371408176}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Create a credentials provider with the specified credentials\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\n\t// Add the host to an authentication cache using the Basic authentication scheme\n\tBasicAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\n\t// Assign the credentials and auth cache to the context\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\n\t// Log the action of adding the host to the auth cache\n\tSystem.out.println(\"Adding host to the authentication cache: \" + host.getHostName());\n}", "CodeBleu_score": 49.9569901434588}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tif (host == null) {\n\t\treturn;\n\t}\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\tlog.info(\"Added host to the authentication cache: \" + host.getHostName());\n}", "CodeBleu_score": 38.70508810637088}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\t// Create a credentials provider with the credentials\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\n\t// Create a local context and add the credentials provider to it\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\n\t// Log the action\n\tSystem.out.println(\"Adding host to auth cache: \" + host);\n}", "CodeBleu_score": 66.72424705918468}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCacheExtension extension = AvatarCacheExtension.getInstance();\nif (extension == null) {\nthrow new IllegalStateException(\"AvatarCacheExtension is not loaded\");\n}\nString url = extension.getJenkinsRootUrl();\nif (url == null) {\nthrow new IllegalStateException(\"Jenkins root URL is not configured\");\n}\nString key = source.getKey();\nif (key == null) {\nthrow new IllegalArgumentException(\"AvatarCacheSource key is null\");\n}\nif (source.isAnonymous()) {\nkey = \"anonymous/\" + key;\n}\nkey = URLEncoder.encode(key, \"UTF-8\");\nif (key.contains(\"%\")) {\nthrow new IllegalStateException(\"AvatarCacheSource key contains invalid characters: \" + key);\n}\nurl += \"/avatar-cache/\" + size + \"/\" + key;\nreturn url;\n}", "CodeBleu_score": 37.19260819469719}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tAvatarCacheExtension extension = AvatarCacheExtension.getInstance();\nif (extension == null) {\nthrow new IllegalStateException(\"AvatarCacheExtension is not installed\");\n}\nString key = AvatarCache.generateKey(source);\nAvatarCache.seedCache(extension, source);\ntry {\nreturn extension.getJenkins().getRootUrl() + extension.getAvatarCacheUrl() + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n} catch (UnsupportedEncodingException e) {\nthrow new AssertionError(e);\n}\n}", "CodeBleu_score": 38.00436246613732}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tif (source == null) {\n\t\tthrow new IllegalArgumentException(\"source cannot be null\");\n\t}\n\tif (size == null) {\n\t\tthrow new IllegalArgumentException(\"size cannot be null\");\n\t}\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache is not initialized\");\n\t}\n\tString key = buildKey(source, size);\n\tcache.get(key);\n\treturn buildUrl(key);\n}", "CodeBleu_score": 19.742132672278988}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tif (source == null) {\nthrow new NullPointerException(\"Source cannot be null\");\n}\nif (image == null) {\nthrow new NullPointerException(\"Image cannot be null\");\n}\nif (lastModified < 0) {\nlastModified = System.currentTimeMillis();\n}\nthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\n}", "CodeBleu_score": 34.09093553570979}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nimage = scaleImage(image, 128);\n}\nthis.image = image;\nif (lastModified < 0) {\nlastModified = System.currentTimeMillis();\n}\nthis.lastModified = lastModified;\n}", "CodeBleu_score": 52.51473296714326}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tif (image.getWidth() > 128 || image.getHeight() > 128) {\nimage = scaleImage(image, 128);\n}\nthis.source = source;\nthis.image = image;\nif (lastModified < 0) {\nlastModified = System.currentTimeMillis();\n}\nthis.lastModified = lastModified;\n}", "CodeBleu_score": 46.832443171317514}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tif (cacheEntry != null) {\n\t\t\t\tcacheEntry.updateImage(image);\n\t\t\t\tcacheEntry.updateLastModified(lastModified);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.err.println(\"Exception while retrieving image from cache: \" + e.getMessage());\n\t\t}\n\t\tfuture = null;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 44.35303212213753}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) return false;\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tImage img = future.get();\n\t\t\tif (img != null) {\n\t\t\t\timg.lastModified = System.currentTimeMillis();\n\t\t\t\timg.set(img.image);\n\t\t\t}\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t}\n\t} catch (InterruptedException e) {\n\t\te.printStackTrace();\n\t} catch (ExecutionException e) {\n\t\te.printStackTrace();\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.231275190211164}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tif (future.get() == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\treturn true;\n\t\t}\n\t\t// Update the cache entry.\n\t\tcacheEntry = future.get();\n\t\tcacheEntry.lastAccess = System.currentTimeMillis();\n\t\tcacheEntry.lastModify = cacheEntry.image.lastModified();\n\t\t// Set the future to null.\n\t\tfuture = null;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 43.99470885753113}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tOutputStream out = rsp.getOutputStream();\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\ttry {\n\t\tImageIO.write(getImage(node), \"PNG\", baos);\n\t\tbaos.flush();\n\t} finally {\n\t\tbaos.close();\n\t}\n\trsp.setContentType(\"image/png\");\n\trsp.setHeader(\"Cache-Control\", \"no-cache\");\n\trsp.setHeader(\"Pragma\", \"no-cache\");\n\trsp.setDateHeader(\"Expires\", 0);\n\tout.write(baos.toByteArray());\n}", "CodeBleu_score": 42.45373541136801}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\trsp.setContentType(\"image/png\");\n\trsp.setHeader(\"Expires\", \"0\");\n\trsp.setHeader(\"Cache-Control\", \"no-cache\");\n\trsp.setHeader(\"Cache-Control\", \"no-store\");\n\trsp.setDateHeader(\"Last-Modified\", System.currentTimeMillis());\n\tOutputStream os = rsp.getOutputStream();\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\tImageIO.write(generateGraph(node), \"PNG\", baos);\n\tbyte[] image = baos.toByteArray();\n\tif (req.getHeader(\"If-Modified-Since\") != null) {\n\t\tlong ims = req.getDateHeader(\"If-Modified-Since\");\n\t\tif (ims != -1 && ims + 1000 > System.currentTimeMillis()) {\n\t\t\trsp.setStatus(304);\n\t\t\treturn;\n\t\t}\n\t}\n\trsp.setContentLength(image.length);\n\tos.write(image);\n\tos.flush();\n}", "CodeBleu_score": 41.16215604592814}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\tOutputStream out = rsp.getOutputStream();\n\ttry {\n\t\t// check if the node is a Run\n\t\tif (node instanceof Run) {\n\t\t\tRun run = (Run) node;\n\t\t\tString jobName = run.getParent().getFullName();\n\t\t\tString buildNumber = run.getNumber();\n\t\t\tString fileName = jobName + \"-\" + buildNumber + \".png\";\n\t\t\tString imageData = getImageData(req, run);\n\t\t\trsp.setHeader(\"Content-Type\", \"image/png\");\n\t\t\trsp.setHeader(\"Content-Disposition\", \"inline; filename=\\\"\" + fileName + \"\\\"\");\n\t\t\trsp.setHeader(\"Cache-Control\", \"public\");\n\t\t\tout.write(imageData.getBytes());\n\t\t} else {\n\t\t\trsp.sendError(404, \"Not found\");\n\t\t}\n\t} finally {\n\t\tout.flush();\n\t}\n}", "CodeBleu_score": 35.10063905671018}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\nthis.enableCache = enableCache;\nthis.teamCacheDuration = teamCacheDuration;\nthis.repositoriesCacheDuration = repositoriesCacheDuration;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.authenticator = authenticator;\n\nthis.httpClientBuilder = HttpClients.custom();\n\n// configure client proxy parameters\nsetClientProxyParams(bitbucketApiUrl, this.httpClientBuilder);\n\n// set up cache expiration for team and repositories\nif (enableCache) {\nthis.teamCache = CacheBuilder.newBuilder().expireAfterWrite(teamCacheDuration, TimeUnit.SECONDS).build();\nthis.repositoriesCache = CacheBuilder.newBuilder().expireAfterWrite(repositoriesCacheDuration, TimeUnit.SECONDS).build();\n}\n\n// set up a keep-alive strategy, connection manager, and retry handler\nRequestConfig.Builder requestConfigBuilder = RequestConfig.custom();\nrequestConfigBuilder.setSocketTimeout(BitbucketCloudApiClient.DEFAULT_TIMEOUT_MILLISECONDS);\nrequestConfigBuilder.setConnectTimeout(BitbucketCloudApiClient.DEFAULT_TIMEOUT_MILLISECONDS);\nrequestConfigBuilder.setConnectionRequestTimeout(BitbucketCloudApiClient.DEFAULT_TIMEOUT_MILLISECONDS);\nrequestConfigBuilder.setStaleConnectionCheckEnabled(true);\nthis.requestConfig = requestConfigBuilder.build();\nthis.httpClientBuilder.setDefaultRequestConfig(requestConfig);\nthis.httpClientBuilder.setConnectionManager(new PoolingHttpClientConnectionManager());\nthis.httpClientBuilder.setRetryHandler(new BitbucketCloudRetryHandler());\n\n// configure the HTTP client and context for authentication\nif (authenticator != null) {\nauthenticator.configureContext(context, null);\nauthenticator.configureClient(this.httpClientBuilder);\n}\n\n// build the HTTP client\nthis.httpClient = this.httpClientBuilder.build();\n}", "CodeBleu_score": 43.69373376776103}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\nthis.enableCache = enableCache;\nthis.teamCacheDuration = teamCacheDuration;\nthis.repositoriesCacheDuration = repositoriesCacheDuration;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.authenticator = authenticator;\n\nif (enableCache) {\n    LOGGER.fine(\"Cache enabled for team and repositories\");\n}\n\n// Create an HTTP client with a keep-alive strategy, connection manager, and retry handler\nHttpClientBuilder builder = HttpClientBuilder.create();\nbuilder.setKeepAliveStrategy(new BitbucketCloudKeepAliveStrategy());\nbuilder.setConnectionManager(new BitbucketCloudConnectionManager());\nbuilder.setRetryHandler(new BitbucketCloudRetryHandler());\nsetClientProxyParams(bitbucketApiUrl, builder);\n\nif (authenticator != null) {\n    authenticator.configureContext(context, null);\n    authenticator.configureHttpClient(bitbucketApiUrl, builder);\n}\n\nthis.httpClient = builder.build();\n}", "CodeBleu_score": 47.75361421238152}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t\nthis(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, null, authenticator);\n}", "CodeBleu_score": 9.590421994789484}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tBitbucketCloudBranch sourceBranch = pullRequest.getSource();\nBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\nString sourceBranchName = sourceBranch.getName();\nString destinationBranchName = destinationBranch.getName();\n\ntry {\nBitbucketCloudBranch sourceBranch = getBranch(sourceBranchName);\nString sourceCommitHash = sourceBranch.getRawNode();\n\nif (sourceCommitHash != null) {\nCommitClosure sourceCommitClosure = new CommitClosure(sourceCommitHash);\npullRequest.setSourceCommitClosure(sourceCommitClosure);\n}\n\nBitbucketCloudBranch destinationBranch = getBranch(destinationBranchName);\nString destinationCommitHash = destinationBranch.getRawNode();\n\nif (destinationCommitHash != null) {\nCommitClosure destinationCommitClosure = new CommitClosure(destinationCommitHash);\npullRequest.setDestinationCommitClosure(destinationCommitClosure);\n}\n} catch (IOException | InterruptedException e) {\nLOGGER.log(Level.WARNING, \"Could not retrieve source or destination branch for Bitbucket pull request \" + pullRequest.getPullRequestNumber(), e);\n}\n}", "CodeBleu_score": 32.08804513758371}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\ttry {\n\t\tBitbucketCloudBranch sourceBranch = getBranch(pullRequest.getFromRef().getRepository().getSlug(), pullRequest.getFromRef().getBranch().getName());\n\t\tBitbucketCloudCommit sourceCommit = getCommit(sourceBranch.getRawNode());\n\t\tpullRequest.setSourceCommit(sourceCommit);\n\t} catch (IOException e) {\n\t\tlogger.warning(\"Could not retrieve source branch for pull request \" + pullRequest.getId() + \": \" + e.getMessage());\n\t}\n\ttry {\n\t\tBitbucketCloudBranch destinationBranch = getBranch(pullRequest.getToRef().getRepository().getSlug(), pullRequest.getToRef().getBranch().getName());\n\t\tBitbucketCloudCommit destinationCommit = getCommit(destinationBranch.getRawNode());\n\t\tpullRequest.setDestinationCommit(destinationCommit);\n\t} catch (IOException e) {\n\t\tlogger.warning(\"Could not retrieve destination branch for pull request \" + pullRequest.getId() + \": \" + e.getMessage());\n\t}\n}", "CodeBleu_score": 36.702713198468686}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\tString sourceBranchName = pullRequest.getSource().getBranch().getName();\n\ttry {\n\t\tBitbucketCloudBranch sourceBranch = getBranch(sourceBranchName);\n\t\tString sourceCommitHash = sourceBranch.getRawNode();\n\t\tpullRequest.getSource().setCommit(new BitbucketCloudCommit(sourceCommitHash));\n\t} catch (IOException e) {\n\t\tLOGGER.warning(\"Could not find source branch \" + sourceBranchName + \" for pull request \" + pullRequest.getTitle());\n\t}\n\n\tString destinationBranchName = pullRequest.getDestination().getBranch().getName();\n\ttry {\n\t\tBitbucketCloudBranch destinationBranch = getBranch(destinationBranchName);\n\t\tString destinationCommitHash = destinationBranch.getRawNode();\n\t\tpullRequest.getDestination().setCommit(new BitbucketCloudCommit(destinationCommitHash));\n\t} catch (IOException e) {\n\t\tLOGGER.warning(\"Could not find destination branch \" + destinationBranchName + \" for pull request \" + pullRequest.getTitle());\n\t}\n}", "CodeBleu_score": 32.49530598126081}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tJenkins jenkins = Jenkins.getInstance()\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is null\")\n\t}\n\tJenkinsLocationConfiguration locationConfiguration = jenkins.getInjector().getInstance(JenkinsLocationConfiguration.class)\n\tif (locationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\")\n\t}\n\tString rootURL = locationConfiguration.getUrl()\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins root URL is null\")\n\t}\n\treturn rootURL\n}", "CodeBleu_score": 42.00414809616679}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tString rootURL = JenkinsLocationConfiguration.get().getUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not configured.\");\n\t}\n\treturn rootURL;\n}", "CodeBleu_score": 49.10544364671333}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t\tString rootURL = JenkinsLocationConfiguration.get().getUrl();\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Jenkins root URL is not configured.\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.48615413433317}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url == null)  {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not set\")\n\t}\n\tURL jenkinsUrl = new URL(url)\n\tif (jenkinsUrl.getHost().equals(\"localhost\") || jenkinsUrl.getHost().equals(\"unconfigured-jenkins-location\"))  {\n\t\tthrow new IllegalStateException(\"Jenkins URL is not set correctly. It is using a reserved name: \" + jenkinsUrl.getHost())\n\t}\n\tif (bitbucket instanceof BitbucketCloudApiClient)  {\n\t\tif (jenkinsUrl.getHost().contains(\".\"))  {\n\t\t\treturn url\n\t\t}\n\t\tthrow new IllegalStateException(\"Jenkins URL is not set correctly. It is not a fully qualified URL: \" + jenkinsUrl.getHost())\n\t}\n\treturn url\n}", "CodeBleu_score": 52.93862415199262}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t", "CodeBleu_score": 7.399760459247054}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURL u = new URL(url);\n\t\tif (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Please enter a valid Jenkins URL\");\n\t\t}\n\t\tif (bitbucket.isCloud() && !u.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Please enter a fully qualified Jenkins URL\");\n\t\t}\n\t\treturn url;\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Please enter a valid Jenkins URL\");\n\t}\n}", "CodeBleu_score": 57.15873554295558}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\nString hash = getHash(revision);\nif (hash == null) {\n    listener.getLogger().println(\"No commit hash available for build \" + build.getDisplayName());\n    return;\n}\n\nString branch = revision instanceof BranchSCMRevision ? ((BranchSCMRevision) revision).getBranch().getName() : null;\nboolean shareBuildKeyBetweenBranchAndPR = source.isShareBuildKeyBetweenBranchAndPR();\nString key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\nif (context.disableNotification()) {\n    listener.getLogger().println(\"Commit status notifications are disabled\");\n    return;\n}\n\nBitbucketApi bitbucket = context.newClient();\n\nlistener.getLogger().println(\"Sending build status notification for commit \" + hash);\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 47.75215921446616}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\nString hash = getHash(revision);\nif (hash == null) {\n    listener.getLogger().println(\"[Bitbucket] Could not determine commit hash, skipping build status notification\");\n    return;\n}\n\nboolean shareBuildKeyBetweenBranchAndPR = source.shouldShareBuildStatusBetweenBranchAndPR();\nString branch = revision.getHead().getName();\nString key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\nBitbucketApi bitbucket = source.getApiClient();\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 32.365996927502195}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\t// Check if notifications are disabled\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n\tif (context.disableNotification()) {\n\t\tlistener.getLogger().println(\"Skipping build status notifications\");\n\t\treturn;\n\t}\n\n\t// Get the SCM revision\n\tSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n\tif (revision == null) {\n\t\tlistener.getLogger().println(\"No SCM revision found for this build, skipping build status notifications\");\n\t\treturn;\n\t}\n\n\t// Get the revision hash\n\tString hash = getHash(revision);\n\tif (hash == null) {\n\t\tlistener.getLogger().println(\"No SCM revision hash found for this build, skipping build status notifications\");\n\t\treturn;\n\t}\n\n\t// Determine if the build key should be shared between branch and PR\n\tboolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n\t// Determine the build key\n\tString branch = revision.getBranches().isEmpty() ? \"unknown\" : revision.getBranches().get(0).getName();\n\tString key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n\t// Initialize the Bitbucket client\n\tString serverUrl = source.getServerUrl();\n\tString credentialsId = source.getCredentialsId();\n\tBitbucketApi bitbucket = new BitbucketApi(serverUrl, credentialsId);\n\n\t// Create and send the build status notification\n\tcreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 51.92673668451116}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t-    if (shareBuildKeyBetweenBranchAndPR) {\n-        return build.getParent().getFullName() + \" \" + branch;\n-    }\n-    return build.getParent().getFullName();\n+    return build.getParent().getFullName() + \" \" + branch;\n }", "CodeBleu_score": 32.469529656591284}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t-    if (shareBuildKeyBetweenBranchAndPR) {\n-        return build.getParent().getFullName() + \" \" + branch;\n-    } else {\n-        return build.getParent().getFullName();\n-    }\n+    return build.getParent().getFullName();\n }", "CodeBleu_score": 34.417069516110246}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t String buildKey;\n if (shareBuildKeyBetweenBranchAndPR) {\n buildKey = build.getParent().getFullName() + \" on \" + branch;\n } else {\n buildKey = build.getDisplayName();\n }\n return buildKey;\n }", "CodeBleu_score": 40.6417980875437}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = BitbucketSCMNavigator.getDeprecatedServerUrl();\n\t\tLOGGER.log(Level.WARNING, \"Bitbucket server URL not set for navigator {0}. Using deprecated default URL {1}\", new Object[] {this, serverUrl});\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<SCMNavigatorTrait<?>>();\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(true, true, false, false));\n\t}\n\treturn this;\n}", "CodeBleu_score": 15.404693977608124}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = BitbucketSCMNavigator.getDeprecatedServerUrl(project);\n\t\tif (serverUrl == null) {\n\t\t\tLOGGER.log(Level.WARNING, \"Unable to resolve server URL for BitbucketSCMNavigator in project {0}\", project);\n\t\t}\n\t}\n\n\tif (traits == null) {\n\t\ttraits = new ArrayList<SCMNavigatorTrait<?>>();\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(BitbucketSCMNavigatorTrait.DEFAULT_BITBUCKET_SERVER_URL, serverUrl));\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(BitbucketSCMNavigatorTrait.DEFAULT_BITBUCKET_REPOSITORY_URL, repositoryUrl));\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(BitbucketSCMNavigatorTrait.DEFAULT_BITBUCKET_PROJECT_KEY, projectKey));\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(BitbucketSCMNavigatorTrait.DEFAULT_BITBUCKET_REPOSITORY_NAME, repositoryName));\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(BitbucketSCMNavigatorTrait.DEFAULT_BITBUCKET_SERVER_KIND, serverKind));\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(BitbucketSCMNavigatorTrait.DEFAULT_BITBUCKET_CREDENTIAL_ID, credentialId));\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(BitbucketSCMNavigatorTrait.DEFAULT_BITBUCKET_CLIENT_ID, clientId));\n\t\ttraits.add(new BitbucketSCMNavigatorTrait(BitbucketSCMNavigatorTrait.DEFAULT_BITBUCKET_CLIENT_SECRET, clientSecret));\n\t}\n\n\treturn this;\n}", "CodeBleu_score": 33.00574046322423}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t", "CodeBleu_score": 0.5550920304044025}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = repositoryService.findRepositoryByName(name);\n\tif (repository == null) {\n\t\tlogger.info(\"Repository {} is not known to Bitbucket\", name);\n\t} else {\n\t\tif (isMatch) {\n\t\t\trepository.incrementCount();\n\t\t\tlogger.info(\"Repository {} is a match\", name);\n\t\t} else {\n\t\t\tlogger.info(\"Repository {} is ignored\", name);\n\t\t}\n\t\trepositoryService.update(repository);\n\t}\n}", "CodeBleu_score": 43.724461054528206}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getRepositoryByName(name);\n\tif (repository != null) {\n\t\tif (isMatch) {\n\t\t\trepository.incrementProposedCount();\n\t\t\tlogger.info(\"Proposing repository: \" + name);\n\t\t} else {\n\t\t\trepository.incrementIgnoredCount();\n\t\t\tlogger.info(\"Ignoring repository: \" + name);\n\t\t}\n\t\trepository.save();\n\t} else {\n\t\tlogger.warn(\"Repository not found: \" + name);\n\t}\n}", "CodeBleu_score": 42.83463921145588}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tRepository repository = repositoryService.findRepositoryByName(name);\n\tif (repository != null) {\n\t\tif (isMatch) {\n\t\t\trepository.setProposedCount(repository.getProposedCount() + 1);\n\t\t\trepository.setIgnoredCount(0);\n\t\t}\n\t\telse {\n\t\t\trepository.setIgnoredCount(repository.getIgnoredCount() + 1);\n\t\t\trepository.setProposedCount(0);\n\t\t}\n\t\trepositoryService.updateRepository(repository);\n\t\tif (isMatch) {\n\t\t\tlog.info(\"Found match for repository {}\", name);\n\t\t}\n\t\telse {\n\t\t\tlog.info(\"Ignored repository {}\", name);\n\t\t}\n\t}\n}", "CodeBleu_score": 40.55446819537494}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n//    String cloneLink = scm.getExtensions().get(CloneOption.class).getRemote();\n//    String branch = rev.getBranches().isEmpty() ? \"master\" : rev.getBranches().get(0);\n//    String sha1 = rev.getSha1();\n//\n//    if (commitExists(git, sha1)) {\n//        return rev;\n//    }\n//\n//    listener.getLogger().println(\"Fetching \" + sha1);\n//\n//    git.fetch_().from(cloneLink, branch + \":\" + branch).refspecs(\"+\" + sha1).execute();\n//    return new Revision(sha1, rev.getBranches());\n}", "CodeBleu_score": 7.522114478186909}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\nif (marked == null) {\n    return rev;\n}\n\nif (marked.getBranches().isEmpty()) {\n    return rev;\n}\n\nlistener.getLogger().println(\"Decorating revision \" + rev + \" to build \" + build.getDisplayName());\n\nList<BranchSpec> branches = marked.getBranches();\n\nList<RefSpec> specs = new ArrayList<RefSpec>();\n\nfor (BranchSpec branch : branches) {\n    if (branch.getName().matches(\"[0-9a-f]{40}\")) {\n        // TODO: Handle tags\n        if (branchExists(git, branch.getName())) {\n            continue;\n        }\n\n        specs.add(new RefSpec(branch.getName() + \":\" + branch.getName()));\n    }\n}\n\nif (specs.isEmpty()) {\n    return rev;\n}\n\nlistener.getLogger().println(\"Fetching from \" + scm.getRemote());\n\ngit.fetch_().from(scm.getRemote(), specs).execute();\n\nreturn rev;\n}", "CodeBleu_score": 32.27748364409466}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n//    if (rev.getBranches().isEmpty()) {\n//        return rev;\n//    }\n//\n//    List<Branch> branches = new ArrayList<>();\n//    for (Branch branch : rev.getBranches()) {\n//        if (commitExists(git, branch.getSHA1String())) {\n//            branches.add(branch);\n//        }\n//    }\n//\n//    if (branches.isEmpty()) {\n//        return rev;\n//    }\n//\n//    // TODO: get the remote name from the SCM\n//    String remoteName = \"origin\";\n//    String cloneLink = scm.getGitTool().getGitExe();\n//    List<RefSpec> refspecs = new ArrayList<>();\n//    for (Branch branch : branches) {\n//        refspecs.add(new RefSpec(branch.getSHA1String() + \":\" + branch.getName()));\n//    }\n//\n//    listener.getLogger().format(\"Fetching missing commits from %s%n\", cloneLink);\n//    git.fetch_().from(cloneLink, remoteName, refspecs).execute();\n//\n//    return new Revision(rev.getBranches(), rev.getSha1());\n}", "CodeBleu_score": 7.522114478186909}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 66.7108728344152}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tBitbucketHref value = entry.getValue();\n\t\tif (value != null) {\n\t\t\tresult.put(entry.getKey(), value);\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 56.54813867684313}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().getHref());\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.269486270778245}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t", "CodeBleu_score": 2.2664046881289432}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t", "CodeBleu_score": 2.2664046881289432}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = await this.getSelectedResources(...resourceStates);\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst repositoryResources = this.repositoryResources(resources);\n\n\tconst repositories = new Map<string, Repository>();\n\tfor (const [repository, resources] of repositoryResources) {\n\t\tconst repositoryUri = await this.getUriForRepository(repository);\n\t\trepositories.set(repositoryUri.toString(), repository);\n\t}\n\n\tconst repositoryFileOperations = new Map<string, FileOperation[]>();\n\tfor (const [repositoryUri, repository] of repositories) {\n\t\tconst fileOperations: FileOperation[] = [];\n\t\tfor (const resource of resources) {\n\t\t\ttry {\n\t\t\t\tconst filePath = await this.toFilePath(resource);\n\t\t\t\tfileOperations.push({ type: FileOperationType.CREATE, path: filePath });\n\t\t\t} catch (error) {\n\t\t\t\tthis.logError(error);\n\t\t\t}\n\t\t}\n\n\t\trepositoryFileOperations.set(repositoryUri, fileOperations);\n\t}\n\n\tawait this.executeFileOperations(repositoryFileOperations);\n}", "CodeBleu_score": 38.76721530447288}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tif (!this.resourceStates || this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getResource(this.resourceStates[0]);\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 36.76850271745792}, {"code": "protected async getResourceStates{\n\t\t// If the resource states are empty, attempt to get a single resource\n\tif (this.resourceStates.length === 0) {\n\t\tconst resource = await this.getResource(this.resourceUris[0]);\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\t// If the first resource state is not an instance of Uri, attempt to get a single resource\n\tif (!this.resourceStates[0] instanceof Uri) {\n\t\tconst resource = await this.getResource(this.resourceStates[0]);\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\t// Filter out any non-resource states\n\tthis.resourceStates = this.resourceStates.filter(resourceState => resourceState instanceof Resource);\n\n\treturn this.resourceStates;\n}", "CodeBleu_score": 37.54135113062412}, {"code": "protected async getResourceStates{\n\t\tconst resourceStates = this.resourceStates;\n\tif (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n\t\tconst scmResource = await this.getResourceState(this.resourceStates[0]);\n\t\tif (scmResource) {\n\t\t\tthis.resourceStates = [scmResource];\n\t\t}\n\t}\n\treturn this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 38.37546658983755}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t", "CodeBleu_score": 1.5395211194129954}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t", "CodeBleu_score": 1.5395211194129954}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t", "CodeBleu_score": 1.5395211194129954}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t const remoteRepository = await this.model.getRemoteRepository(element.repository);\n if (element.oldPath) {\n const oldUri = this.model.getSvnUri(element.repository, element.oldPath, element.oldRevision);\n const newUri = this.model.getSvnUri(element.repository, element.newPath, element.newRevision);\n const diffUri = await this.model.diffUris(oldUri, newUri, remoteRepository);\n this.openDiff(diffUri);\n } else {\n const newUri = this.model.getSvnUri(element.repository, element.newPath, element.newRevision);\n this.openFileRemote(newUri, remoteRepository);\n }\n }", "CodeBleu_score": 37.70963832799068}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t if (element.status === SvnStatus.Modified) {\n const repository = await this.model.getRemoteRepository(element.path);\n const oldFileRemote = Uri.parse(`${repository.remoteUrl}/${element.path}?revision=${element.oldRevision}`);\n const newFileRemote = Uri.parse(`${repository.remoteUrl}/${element.path}?revision=${element.revision}`);\n const diffUri = await commands.executeCommand('vscode.diff', oldFileRemote, newFileRemote, `${element.path} (Remote)`);\n } else if (element.status === SvnStatus.Added) {\n const repository = await this.model.getRemoteRepository(element.path);\n const newFileRemote = Uri.parse(`${repository.remoteUrl}/${element.path}?revision=${element.revision}`);\n const diffUri = await commands.executeCommand('vscode.open', newFileRemote);\n }\n }", "CodeBleu_score": 38.64810270518618}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t const remoteRepository = await this.model.getRemoteRepository(element);\n if (element.changeType === SvnChangeType.Modified) {\n const oldPath = element.oldPath;\n const newPath = element.newPath;\n const oldRevision = element.oldRevision;\n const newRevision = element.newRevision;\n const oldUrl = remoteRepository.url + '/' + oldPath;\n const newUrl = remoteRepository.url + '/' + newPath;\n const oldUrlWithRevision = oldUrl + '@' + oldRevision;\n const newUrlWithRevision = newUrl + '@' + newRevision;\n this.openDiff(oldUrlWithRevision, newUrlWithRevision);\n } else if (element.changeType === SvnChangeType.Added) {\n const newPath = element.newPath;\n const newRevision = element.newRevision;\n const newUrl = remoteRepository.url + '/' + newPath;\n const newUrlWithRevision = newUrl + '@' + newRevision;\n this.openFileRemote(newUrlWithRevision);\n }\n }", "CodeBleu_score": 33.654305601585875}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (clipboard.readText) {\n\t\tif (item.type === LogType.Commit) {\n\t\t\tclipboard.writeText(item.message || item.hash.short);\n\t\t} else {\n\t\t\twindow.showErrorMessage(`Can't copy ${what} to clipboard because it is not a commit`);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(`Can't copy ${what} to clipboard because the clipboard is not supported`);\n\t}\n}", "CodeBleu_score": 25.479483538807568}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tconst clipboard = await window.env.clipboard.readText();\n\tif (!clipboard) {\n\t\twindow.showErrorMessage('The clipboard is not supported in this environment');\n\t\treturn;\n\t}\n\n\tif (item.type !== 'commit') {\n\t\twindow.showErrorMessage('The item is not a commit');\n\t\treturn;\n\t}\n\n\tconst commit = item.commit;\n\tif (what === 'message') {\n\t\tawait clipboard.writeText(commit.message);\n\t} else {\n\t\tawait clipboard.writeText(commit.hash.full);\n\t}\n}", "CodeBleu_score": 40.88588985550693}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!vscode.env.clipboard.writeText) {\n\t\twindow.showErrorMessage('Copy to clipboard is not supported in this environment');\n\t\treturn;\n\t}\n\n\tconst commit = item.commit;\n\tif (commit) {\n\t\tconst text = what === 'message' ? commit.message : commit.sha;\n\t\tawait vscode.env.clipboard.writeText(text);\n\t}\n}", "CodeBleu_score": 36.22886374284025}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best != null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.2522206350899}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best != null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.2522206350899}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\nif (factory.canOpen(this)) {\nlong p = factory.priority(this);\nif (best == null || p > priority) {\nbest = factory;\npriority = p;\n}\n}\n}\nif (best != null) {\nreturn best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.2522206350899}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader cl = Jenkins.getInstance() != null ? Jenkins.getInstance().pluginManager.uberClassLoader : getClass().getClassLoader();\n\treturn new Gitea(cl);\n}", "CodeBleu_score": 45.20415748599153}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = Jenkins.getInstance() == null ? getClass().getClassLoader() : Jenkins.getInstance().pluginManager.uberClassLoader;\n\treturn new Gitea(getGiteaUrl(), getCredentialsId(), getApiToken(), getAdminUser(), getAdminPassword(), classLoader);\n}", "CodeBleu_score": 46.64270665703714}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tClassLoader classLoader = Jenkins.getInstance() != null ? Jenkins.getInstance().getPluginManager().uberClassLoader : getClass().getClassLoader();\n\treturn new Gitea(GiteaApi.builder().withUrl(url).withUsernamePassword(username, password).withClassLoader(classLoader).build());\n}", "CodeBleu_score": 40.83477907077761}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tsuper(displayName, serverUrl, manageHooks, credentialsId, aliasUrl);\n}", "CodeBleu_score": 13.290242156207196}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tsuper(displayName, serverUrl, manageHooks, credentialsId, aliasUrl);\n}", "CodeBleu_score": 13.290242156207196}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tsuper(displayName, serverUrl, credentialsId, aliasUrl);\n\tthis.manageHooks = manageHooks;\n\tif (manageHooks) {\n\t\tif (credentialsId == null) {\n\t\t\tthrow new IllegalArgumentException(\"Credentials ID is required if hooks are managed\");\n\t\t}\n\t\tthis.credentialsId = credentialsId;\n\t}\n}", "CodeBleu_score": 24.16700576438621}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\tif (!isAdmin()) {\n\t\titems.add(Messages.GiteaSCMSource_PermissionError(), \"\");\n\t\treturn items;\n\t}\n\ttry {\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\t\tList<GiteaAuth> auths = GiteaAuth.getApplicableAuths(serverUrl);\n\t\tfor (GiteaAuth auth : auths) {\n\t\t\titems.add(auth.getDescription(), auth.getId());\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\titems.add(Messages.GiteaSCMSource_InvalidServerUrl(), \"\");\n\t}\n\treturn items;\n}", "CodeBleu_score": 35.372695144147826}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\tString url = normalizeServerUrl(serverUrl);\n\tif (url == null) {\n\t\treturn items;\n\t}\n\n\tList<GiteaAuth> auths = GiteaAuth.getApplicableAuths(url);\n\tfor (GiteaAuth auth : auths) {\n\t\titems.add(auth.getCredentialsDescription(), auth.getCredentialsId());\n\t}\n\treturn items;\n}", "CodeBleu_score": 33.34760276216908}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tListBoxModel items = new ListBoxModel();\n\tString serverUrlNorm = normalizeServerUrl(serverUrl);\n\tif (serverUrlNorm == null) {\n\t\treturn items;\n\t}\n\tif (!isAdmin(serverUrlNorm)) {\n\t\treturn items;\n\t}\n\tfor (GiteaAuth auth : GiteaAuth.all()) {\n\t\tif (auth.matches(serverUrlNorm)) {\n\t\t\titems.add(auth.getDisplayName(), auth.getId());\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 34.168728351106395}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURL url = new URL(serverUrl);\n\t\tString protocol = url.getProtocol();\n\t\tString host = url.getHost();\n\t\tint port = url.getPort();\n\t\tString path = url.getPath();\n\t\tif (port == -1) {\n\t\t\tif (\"http\".equals(protocol)) {\n\t\t\t\tport = 80;\n\t\t\t} else if (\"https\".equals(protocol)) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\tif (path != null && path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\tif (path == null) {\n\t\t\tpath = \"\";\n\t\t}\n\t\treturn new URL(protocol, host, port, path).toString();\n\t} catch (MalformedURLException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 29.037733814829526}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl.toLowerCase());\n\t\tif (uri.getPort() == -1 && \"http\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\tif (uri.getPort() == -1 && \"https\".equals(uri.getScheme())) {\n\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t}\n\t\treturn uri.toString().replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl.replaceAll(\"/$\", \"\");\n\t}\n}", "CodeBleu_score": 30.490884153938}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tif (uri.getPort() == -1) {\n\t\t\tif (\"http\".equals(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 80, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t} else if (\"https\".equals(uri.getScheme())) {\n\t\t\t\turi = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), 443, uri.getPath(), uri.getQuery(), uri.getFragment());\n\t\t\t}\n\t\t}\n\t\treturn uri.normalize().toString().replaceAll(\"/$\", \"\");\n\t} catch (URISyntaxException e) {\n\t\treturn serverUrl;\n\t}\n}", "CodeBleu_score": 31.4193656829581}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nString displayName = StringUtils.defaultIfBlank(server.getDisplayName(), server.getUrl());\nmodel.add(displayName, server.getUrl());\n}\nreturn model;\n}", "CodeBleu_score": 40.9197735442967}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nif (StringUtils.isBlank(server.getDisplayName())) {\nitems.add(server.getUrl());\n} else {\nitems.add(server.getDisplayName(), server.getUrl());\n}\n}\nreturn items;\n}", "CodeBleu_score": 36.37912408411949}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\n    String displayName = server.getDisplayName();\n    if (StringUtils.isBlank(displayName)) {\n        displayName = server.getUrl();\n    }\n    items.add(displayName, server.getUrl());\n}\nreturn items;\n}", "CodeBleu_score": 52.20174236916323}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers == null) {\nreturn;\n}\n\n// Check for admin permissions\nif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\nthrow new AccessDeniedException(Messages._User_PermissionCheck_AdminRequired());\n}\n\n// Remove duplicates and empty URLs\nList<GiteaServer> newServers = new ArrayList<GiteaServer>();\nfor (GiteaServer server : servers) {\nif (server == null) {\ncontinue;\n}\n\nString url = Util.fixEmptyAndTrim(server.getUrl());\nif (url != null && !newServers.contains(server)) {\nnewServers.add(server);\n}\n}\n\n// Update the list of Gitea servers\nGiteaServers giteaServers = get();\ngiteaServers.setServers(newServers);\ngiteaServers.save();\n}", "CodeBleu_score": 33.16720364844442}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<GiteaServer>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server == null) {\n\t\t\tcontinue;\n\t\t}\n\t\ttry {\n\t\t\tserver.validate();\n\t\t\tnewServers.add(server);\n\t\t} catch (FormValidation e) {\n\t\t\tLOGGER.log(Level.WARNING, \"Invalid Gitea server configuration: \" + e.getMessage());\n\t\t}\n\t}\n\tCollections.sort(newServers, new Comparator<GiteaServer>() {\n\t\t@Override\n\t\tpublic int compare(GiteaServer o1, GiteaServer o2) {\n\t\t\treturn o1.getUrl().compareTo(o2.getUrl());\n\t\t}\n\t});\n\tGiteaServers oldServers = get();\n\tif (oldServers != null && !oldServers.equals(newServers)) {\n\t\toldServers.clear();\n\t\toldServers.addAll(newServers);\n\t\tsave();\n\t}\n}", "CodeBleu_score": 30.881286928097555}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers != null) {\nList<GiteaServer> newServers = new ArrayList<GiteaServer>();\nfor (GiteaServer server : servers) {\nif (server.getUrl() != null && !server.getUrl().isEmpty()) {\nnewServers.add(server);\n}\n}\nif (!newServers.isEmpty()) {\n// Remove duplicates\nList<GiteaServer> uniqueServers = new ArrayList<GiteaServer>();\nfor (GiteaServer server : newServers) {\nif (!uniqueServers.contains(server)) {\nuniqueServers.add(server);\n}\n}\nnewServers = uniqueServers;\n\n// Sort the list\nCollections.sort(newServers, new Comparator<GiteaServer>() {\npublic int compare(GiteaServer o1, GiteaServer o2) {\nreturn o1.getUrl().compareTo(o2.getUrl());\n}\n});\n\n// Save the configuration\nthis.servers = newServers;\nsave();\n}\n}\n}", "CodeBleu_score": 29.3884954039333}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tGiteaServer server = findServerByUrl(serverUrl);\nif (server != null) {\n// remove it\nservers.remove(server);\n// update the list\nsave();\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 12.923229196813793}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tGiteaServer server = findServerByUrl(serverUrl);\nif (server != null) {\nif (servers.size() == 1) {\n// we're about to remove the last server, so we should clear the credentials\ncredentialsId = null;\n}\nservers.remove(server);\nsave();\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 17.11765469169585}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tif (servers == null) {\n\t\treturn false;\n\t}\n\tfor (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (serverUrl.equals(endpoint.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t\tsave();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.82725562721858}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\nString type = el.asType().toString();\nMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\ndescriptorElements.add(new DescriptorElement(type, attributes));\n}\n}", "CodeBleu_score": 44.617701326086525}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t\nSet<? extends Element> elements = roundEnv.getElementsAnnotatedWith(annotation);\nfor (Element el : elements) {\nString type = el.asType().toString();\nMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\ndescriptorElements.add(new DescriptorElement(type, attributes));\n}\n}", "CodeBleu_score": 64.07186368030126}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tSet<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\nfor (Element el : annotatedElements) {\nString type = el.asType().toString();\nMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\ndescriptorElements.add(new DescriptorElement(el.getSimpleName().toString(), type, attributes));\n}\n}", "CodeBleu_score": 62.65209591606301}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().replace(\"$\", \".\").equals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 48.29564582680639}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tif (annotation.getQualifiedName().toString().equals(annotationClass.getCanonicalName())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 43.00639825160165}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getCanonicalName();\n\tfor (TypeElement annotation : annotations) {\n\t\tif (annotationClassName.equals(annotation.getQualifiedName().toString())) {\n\t\t\treturn annotation;\n\t\t}\n\t\tif (annotationClassName.endsWith(\".\" + annotation.getSimpleName().toString())) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 44.15717475225714}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 0,\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Pending Approval\"\n        filters[\"leave_approver\"] = (\"!=\", approver_id) if approver_id else \"IS NULL\"\n    else:\n        filters[\"status\"] = (\"!=\", \"Cancelled\")\n\n    return filters\n\n", "CodeBleu_score": 23.921357582641047}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"status\": [\"!=\", \"Rejected\"],\n        \"docstatus\": 1,\n    }\n    if for_approval:\n        filters.update(\n            {\n                \"status\": \"Open\",\n                \"leave_approver\": (\"!=\", approver_id),\n            }\n        )\n    else:\n        filters.update(\n            {\n                \"status\": [\"!=\", \"Cancelled\"],\n            }\n        )\n    return filters\n\n", "CodeBleu_score": 25.12377627647845}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n    }\n    if for_approval:\n        filters.update({\"status\": (\"!=\", \"Approved\")})\n        filters.update({\"status\": (\"!=\", \"Rejected\")})\n        filters.update({\"status\": (\"!=\", \"Cancelled\")})\n        filters.update({\"status\": (\"!=\", \"Open\")})\n    else:\n        filters.update({\"status\": \"Open\"})\n    if approver_id:\n        filters.update({\"leave_approver\": approver_id})\n    return filters\n\n", "CodeBleu_score": 28.416986625632916}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    # Get the current date\n    today = datetime.now().date()\n\n    # Get the leave details\n    leave_details = get_leave_details(employee, today)\n\n    # Construct the leave balance map\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 41.20502754944506}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated\"] = leave_details[leave_type][\"allocated\"]\n        leave_balance_map[leave_type][\"balance\"] = leave_details[leave_type][\"balance\"]\n    return leave_balance_map\n\n", "CodeBleu_score": 29.582694753897393}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated_leaves\"] = leave_detail[\"allocated_leaves\"]\n        leave_balance_map[leave_type][\"balance_leaves\"] = leave_detail[\"balance_leaves\"]\n    return leave_balance_map\n\n", "CodeBleu_score": 34.33444282090297}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holidays_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = Holiday.query.filter(Holiday.employee == employee).filter(Holiday.type != \"Weekly Off\").order_by(Holiday.date).all()\n    for holiday in holidays:\n        holiday.description = strip_tags(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 28.20165195732902}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = get_holidays_from_db(holiday_list)\n    holidays = [holiday for holiday in holidays if holiday[\"type\"] != \"Weekly off\"]\n    holidays = sorted(holidays, key=lambda holiday: holiday[\"date\"])\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html_tags(holiday[\"description\"])\n    return holidays\n\n", "CodeBleu_score": 27.83517953211301}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holidays = get_holidays_for_employee_from_db(employee)\n    if holidays:\n        holidays = strip_html_from_holidays(holidays)\n        holidays = sort_holidays_by_date(holidays)\n    else:\n        holidays = []\n    return holidays\n\n", "CodeBleu_score": 10.31832248491836}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    # Get the HR Settings\n    hr_settings = frappe.get_single(\"HR Settings\")\n    # Check if the HR Settings specify to send reminders and the frequency is set to \"Weekly\"\n    if hr_settings.send_weekly_holiday_reminders and hr_settings.weekly_holiday_day:\n        # Get the day of the week\n        day_of_the_week = getdate().strftime(\"%A\")\n        # Check if the day of the week is the same as the day specified in the HR Settings\n        if day_of_the_week == hr_settings.weekly_holiday_day:\n            # Call the function to send the reminders\n            send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 29.633640299681822}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if cint(frappe.db.get_value(\"HR Settings\", None, \"send_weekly_holiday_reminders\")):\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 15.635100430501103}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.378922231120049}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0.0\n    for self_rating in self_ratings:\n        self_appraisal_score += self_rating.rating * self_rating.self_rating_weightage\n    self_appraisal_score = round(self_appraisal_score, 2)\n    return self_appraisal_score\n\n", "CodeBleu_score": 18.87297729208925}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for rating in self.self_ratings.all():\n        total_score += (rating.rating * rating.rating.weightage) / 100\n    self.self_appraisal_score = round(total_score, 2)\n    self.save()\n\n", "CodeBleu_score": 25.651556358964108}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self_ratings:\n        self_appraisal_score += (\n            self_rating[\"rating\"] * self_rating[\"weightage\"] / 100\n        )\n    self_appraisal_score = round(self_appraisal_score, 2)\n    return self_appraisal_score\n\n", "CodeBleu_score": 16.34717288224863}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    if self.appraisal_type != \"Self\":\n        self.final_score = 0\n        return\n\n    if self.appraisal_template:\n        self.final_score = self.appraisal_template.final_score\n        return\n\n    self.final_score = 0\n\n    # Get the appraisal cycle document\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # If the appraisal cycle has a formula, evaluate it\n    if appraisal_cycle.formula:\n        # Gather necessary data\n        appraisal_data = frappe.get_all(\n            \"Appraisal\",\n            filters={\n                \"employee\": self.employee,\n                \"appraisal_cycle\": self.appraisal_cycle,\n                \"docstatus\": 1,\n            },\n            fields=[\"total_score\", \"average_feedback_score\", \"self_appraisal_score\"],\n        )\n\n        # Sanitize the formula\n        sanitized_formula = sanitize_expression(appraisal_cycle.formula)\n\n        # Evaluate the formula\n        try:\n            self.final_score = frappe.safe_eval(\n                sanitized_formula,\n                None,\n                {\n                    \"total_score\": appraisal_data[0].total_score,\n                    \"average_feedback_score\": appraisal_data[0].average_feedback_score,\n                    \"self_appraisal_score\": appraisal_data[0].self_appraisal_score,\n                },\n            )\n        except Exception as e:\n            frappe.throw(e)\n\n    # Otherwise, calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n    else:\n        self.final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n\n    # Round the final score to the appropriate precision\n    self.final_score = round(self.final_score, appraisal_cycle.precision)\n\n", "CodeBleu_score": 38.293429796141396}, {"code": "def calculate_final_score(self)\n\t\n\n    # Get the appraisal cycle\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        # Get the data needed for the formula\n        data = self.get_data_for_final_score_formula()\n\n        # Sanitize the formula\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate the formula\n        try:\n            final_score = frappe.safe_eval(formula, None, data)\n        except Exception as e:\n            frappe.throw(\n                f\"An error occurred while evaluating the final score formula: {e}\")\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n    # Set the final score with the appropriate precision\n    self.final_score = round(final_score, 2)\n\n", "CodeBleu_score": 34.382191176727765}, {"code": "def calculate_final_score(self)\n\t\n\n    final_score = 0\n    final_score_precision = 0\n    final_score_formula = \"\"\n\n    if self.final_score_formula:\n        final_score_formula = sanitize_expression(self.final_score_formula)\n\n    if final_score_formula:\n        final_score = self.evaluate_formula(final_score_formula)\n        final_score_precision = self.final_score_precision\n    else:\n        final_score = self.total_score / self.total_score_weight\n        final_score += self.average_feedback_score / self.average_feedback_score_weight\n        final_score += self.self_appraisal_score / self.self_appraisal_score_weight\n\n    if final_score_precision:\n        final_score = round(final_score, final_score_precision)\n    else:\n        final_score = round(final_score, 1)\n\n    self.final_score = final_score\n\n", "CodeBleu_score": 31.041972988947446}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date:\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            if self.status != \"On Leave\" and not self.leave_application:\n                frappe.throw(_(\"Attendance for future dates can only be marked as 'On Leave'\"))\n        if getdate(self.attendance_date) < self.employee.date_of_joining:\n            frappe.throw(_(\"Attendance for dates before employee's joining date cannot be marked\"))\n\n", "CodeBleu_score": 33.06324914964691}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date and self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            frappe.throw(\n                _(\"Attendance date cannot be set for future dates unless the status is 'On Leave'\")\n            )\n        elif not self.leave_application:\n            frappe.throw(\n                _(\n                    \"Attendance date cannot be set for future dates unless there is a leave application\"\n                )\n            )\n    if self.attendance_date and self.attendance_date < self.date_of_joining:\n        frappe.throw(\n            _(\"Attendance date cannot be set for dates earlier than the employee's joining date\")\n        )\n\n", "CodeBleu_score": 29.82284066367035}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate(today()):\n        if self.status != \"On Leave\":\n            frappe.throw(_(\"Attendance date cannot be a future date unless the status is 'On Leave'.\"))\n        elif not self.leave_application:\n            frappe.throw(_(\"Attendance date cannot be a future date unless there is a leave application.\"))\n    if self.attendance_date < self.employee_date_of_joining:\n        frappe.throw(_(\"Attendance date cannot be before employee's joining date.\"))\n\n", "CodeBleu_score": 25.09152009927769}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for {0} on {1} <a href='desk#Form/Attendance/{2}'>{2}</a>\"\n            ).format(self.employee, self.attendance_date, duplicate),\n            title=_(\"Duplicate Attendance Record\"),\n        )\n\n", "CodeBleu_score": 33.34029793307881}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance already marked for employee {0} on {1}. Please check <a href='/app/Form/Attendance/{2}'>{2}</a> for more details.\"\n            ).format(self.employee, self.attendance_date, duplicate),\n            DuplicateEntryForEmployeeError,\n        )\n\n", "CodeBleu_score": 36.00752845219109}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            _(\n                f\"Attendance record already exists for employee {self.employee} on {self.attendance_date}. Please check <a href='/app/Form/Attendance/{duplicate_record}'>here</a>.\"\n            )\n        )\n", "CodeBleu_score": 22.1861011822777}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if self.status == \"Draft\":\n        frappe.throw(_(\"This work summary is a draft\"))\n\n    if self.status == \"Sent\":\n        frappe.throw(_(\"This work summary has already been sent\"))\n\n    if self.status == \"Scheduled\":\n        frappe.throw(_(\"This work summary is scheduled to be sent\"))\n\n    dws_group = frappe.get_doc(\"Daily Work Summary Group\", self.daily_work_summary_group)\n\n    # get message details\n    message_details = self.get_message_details()\n\n    # get user emails\n    emails = get_user_emails_from_group(dws_group)\n\n    # send email\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details.title,\n        message=message_details.original_message,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        attachments=self.get_attachments(),\n        add_unsubscribe_link=True,\n        unsubscribe_method=\"/api/method/frappe.email.doctype.daily_work_summary.daily_work_summary.unsubscribe\",\n        unsubscribe_params={\"name\": self.name},\n        header=[\n            \"Daily Work Summary\",\n            \"from {0} on {1}\".format(self.owner, global_date_format(self.creation)),\n        ],\n        delayed=True,\n    )\n\n    # update status\n    self.status = \"Sent\"\n    self.save()\n", "CodeBleu_score": 44.66644585561389}, {"code": "def send_summary(self)\n\t\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Please select a group\"))\n\n    if self.status == \"Sent\":\n        frappe.throw(_(\"Summary already sent\"))\n\n    dws_group = frappe.get_doc(\"Daily Work Summary Group\", self.daily_work_summary_group)\n\n    emails = get_user_emails_from_group(dws_group)\n\n    if not emails:\n        frappe.throw(_(\"No users found in the group\"))\n\n    recipients = \", \".join(emails)\n\n    if self.message:\n        message = self.message\n    else:\n        message = dws_group.message\n\n    if self.subject:\n        subject = self.subject\n    else:\n        subject = dws_group.subject\n\n    attachments = []\n    if dws_group.attachments:\n        for a in dws_group.attachments:\n            attachments.append(frappe.attach_print(self.doctype, self.name, file_name=a))\n\n    frappe.sendmail(\n        recipients=recipients,\n        subject=subject,\n        message=message,\n        attachments=attachments,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n\n    self.status = \"Sent\"\n    self.save()\n", "CodeBleu_score": 38.27224718078602}, {"code": "def send_summary(self)\n\t\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Please select a group to send summary\"))\n\n    if self.status == \"Sent\":\n        frappe.throw(_(\"Summary already sent\"))\n\n    if self.status == \"Draft\":\n        frappe.throw(_(\"Please save the summary before sending\"))\n\n    # get message details\n    message_details = self.get_message_details()\n\n    # get email addresses of users in the group\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n\n    # send email\n    send_email(\n        recipients=emails,\n        subject=message_details.title,\n        message=message_details.original_message,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n        attachments=None,\n        reply_to=None,\n        cc=None,\n        message_id=None,\n        in_reply_to=None,\n        send_after=None,\n        expose_recipients=\"header\",\n        read_receipt=None,\n        is_notification=False,\n        inline_images=None,\n        header=None,\n        print_letterhead=False,\n        doctype=self.doctype,\n        name=self.name,\n        lang=frappe.db.get_value(\"User\", frappe.session.user, \"language\"),\n    )\n\n    # update status\n    self.status = \"Sent\"\n    self.save()\n", "CodeBleu_score": 42.90125633636104}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.job_applicant.interview:\n        if self.job_applicant.interview.round == self.round:\n            raise frappe.ValidationError(\n                _(\"Job applicant {0} is already scheduled for interview round {1}\").format(\n                    frappe.bold(self.job_applicant.name), frappe.bold(self.round)\n                )\n            )\n\n", "CodeBleu_score": 30.073614585050045}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant:\n        if self.job_applicant.interview:\n            if self.job_applicant.interview.interview_round == self.interview_round:\n                if self.job_applicant.interview.job_applicant == self.job_applicant:\n                    raise ValidationError(\n                        _(\n                            \"Job applicant already has an interview record for this round. Please check the existing interview record <a href='/job-applicant-interview-record/{0}'>here</a>.\".format(\n                                self.job_applicant.interview.name\n                            )\n                        )\n                    )\n\n", "CodeBleu_score": 25.89804967264061}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant_interviews:\n        if len(self.job_applicant_interviews) > 1:\n            for interview in self.job_applicant_interviews:\n                if interview.interview_round == self.interview_round:\n                    if interview.job_applicant == self.job_applicant:\n                        frappe.throw(_(\"Job Applicant {0} is already scheduled for interview round {1}\").format(\n                            frappe.bold(self.job_applicant), frappe.bold(self.interview_round)))\n\n", "CodeBleu_score": 32.23818935308104}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n\n    self.average_rating = 0\n    num_ratings = 0\n\n    for assessment in self.assessments:\n        if assessment.rating:\n            self.average_rating += assessment.rating\n            num_ratings += 1\n\n    if num_ratings:\n        self.average_rating /= num_ratings\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.168271925617457}, {"code": "def calculate_average_rating(self)\n\t\n    if len(self.skill_assessments) > 0:\n        total_rating = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total_rating += assessment.rating\n        self.average_rating = total_rating / len(self.skill_assessments)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 38.51560398728915}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total += assessment.rating\n        self.average_rating = round(total / len(self.skill_assessments), 2)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 39.414163169951564}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        interview_doc = Interview(interview_round=doc)\n    elif isinstance(doc, dict):\n        interview_doc = Interview(interview_round=doc[\"interview_round\"])\n        if \"interviewers\" in doc:\n            for interviewer in doc[\"interviewers\"]:\n                interview_doc.interviewers.append(interviewer)\n    return interview_doc\n\n", "CodeBleu_score": 34.88838756244164}, {"code": "def create_interview(doc):\n\t\n    interview = Interview()\n    interview.update(doc)\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 13.24172857797548}, {"code": "def create_interview(doc):\n\t\n    # Create an Interview document\n    interview = doc.copy()\n    # Set the interview round\n    interview['interview_round'] = doc['interview_round']\n    # Set the interview designation\n    interview['interview_designation'] = doc['interview_designation']\n    # Set the interviewers\n    if 'interviewers' in doc:\n        interview['interviewers'] = doc['interviewers']\n    # Return the created document\n    return interview\n\n", "CodeBleu_score": 26.026563362456777}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    query = \"\"\"SELECT name FROM `tabJob Offer` WHERE designation = '{0}' AND company = '{1}' AND docstatus = 1 AND posting_date BETWEEN '{2}' AND '{3}'\"\"\".format(self.designation, self.company, from_date, to_date)\n    job_offers = frappe.db.sql(query, as_dict=True)\n    return job_offers\n", "CodeBleu_score": 41.67809772601372}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    return self.get_job_offers(from_date, to_date, 1)\n\n", "CodeBleu_score": 27.27849567791292}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    job_offer_list = self.get_list_of_job_offers()\n    for job_offer in job_offer_list:\n        if job_offer.get('document_status') == 1 and job_offer.get('designation_id') == self.get('designation_id') and job_offer.get('company_id') == self.get('company_id') and job_offer.get('creation_date') >= from_date and job_offer.get('creation_date') <= to_date:\n            job_offers.append(job_offer.get('name'))\n    return job_offers\n\n", "CodeBleu_score": 37.839080472621575}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"status\": \"Accepted\", \"company\": company}, fields=[\"name\"])\n    elif department:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"status\": \"Accepted\", \"department\": department}, fields=[\"name\"])\n    else:\n        job_offers = frappe.get_all(\"Job Offer\", filters={\"status\": \"Accepted\"}, fields=[\"name\"])\n    return len(job_offers) / len(frappe.get_all(\"Job Offer\", filters={\"docstatus\": 1}, fields=[\"name\"])) * 100\n\n", "CodeBleu_score": 34.19321465461495}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if not company and not department:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS total, SUM(CASE WHEN offer_status = 'Accepted' THEN 1 ELSE 0 END) AS accepted FROM `tabJob Offer` WHERE docstatus = 1\"\"\", as_dict=True)[0]\n    elif not company:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS total, SUM(CASE WHEN offer_status = 'Accepted' AND department = '{department}' THEN 1 ELSE 0 END) AS accepted FROM `tabJob Offer` WHERE docstatus = 1\"\"\".format(department=department), as_dict=True)[0]\n    elif not department:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS total, SUM(CASE WHEN offer_status = 'Accepted' AND company = '{company}' THEN 1 ELSE 0 END) AS accepted FROM `tabJob Offer` WHERE docstatus = 1\"\"\".format(company=company), as_dict=True)[0]\n    else:\n        return frappe.db.sql(\"\"\"SELECT COUNT(name) AS total, SUM(CASE WHEN offer_status = 'Accepted' AND company = '{company}' AND department = '{department}' THEN 1 ELSE 0 END) AS accepted FROM `tabJob Offer` WHERE docstatus = 1\"\"\".format(company=company, department=department), as_dict=True)[0]\n\n", "CodeBleu_score": 17.982102462838544}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n\n    # Get total number of job offers\n    total_offers = frappe.db.count('Job Offer', filters={'docstatus': 1})\n\n    # Get number of accepted job offers\n    accepted_offers = frappe.db.count('Job Offer', filters={'status': 'Accepted', 'docstatus': 1})\n\n    # Calculate acceptance rate\n    if total_offers > 0:\n        acceptance_rate = round((accepted_offers / total_offers) * 100, 2)\n    else:\n        acceptance_rate = 0\n\n    # Return acceptance rate\n    return {\n        'value': acceptance_rate,\n        'indicator': get_indicator(acceptance_rate),\n        'label': _('Offer Acceptance Rate'),\n        'datatype': 'Percent'\n    }\n\n", "CodeBleu_score": 32.21395817650979}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t", "CodeBleu_score": 3.1690062957536362}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Result<CompanyStaff> result = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\n\tfinal CompanyStaff companyStaff = result.getData();\n\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.passwordsNotMatch);\n\t}\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaff.setEmail(companyStaffForUpdateDto.getEmail());\n\n\tfinal Result<CompanyStaff> updatedResult = this.companyStaffRepository.save(companyStaff);\n\tif (!updatedResult.isSuccess()) {\n\t\treturn new ErrorResult(Messages.companyStaffUpdateFailed);\n\t}\n\n\treturn new SuccessResult(Messages.companyStaffUpdated);\n}", "CodeBleu_score": 46.368405165637895}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\tfinal Result<CompanyStaff> result = this.companyStaffService.getByUserId(companyStaffForUpdateDto.getUserId());\n\tif (result.isFailure()) {\n\t\treturn result;\n\t}\n\tfinal CompanyStaff companyStaff = result.getData();\n\tfinal Result arePasswordsMatchResult = this.arePasswordsMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n\tif (arePasswordsMatchResult.isFailure()) {\n\t\treturn arePasswordsMatchResult;\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\treturn this.companyStaffService.save(companyStaff);\n}", "CodeBleu_score": 47.58614641463908}]}
