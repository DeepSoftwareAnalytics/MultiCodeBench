{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t\tfor (let i = 0; i < template.length; i++) {\n\t\tlet item = template[i];\n\t\tif (!item.metadata) {\n\t\t\titem.metadata = {};\n\t\t}\n\t\tif (!item.metadata.accelerator) {\n\t\t\titem.metadata.accelerator = \"\";\n\t\t}\n\t\tif (!item.metadata.keystroke) {\n\t\t\titem.metadata.keystroke = \"\";\n\t\t}\n\t\tif (!item.metadata.click) {\n\t\t\titem.metadata.click = \"\";\n\t\t}\n\t\tif (!item.metadata.windowSpecific) {\n\t\t\titem.metadata.windowSpecific = false;\n\t\t}\n\t\tif (item.type === \"separator\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif (item.type === \"submenu\") {\n\t\t\titem.submenu = this.translateTemplate(item.submenu, keystrokesByCommand);\n\t\t\tcontinue;\n\t\t}\n\t\tlet command = item.metadata.command;\n\t\tif (!command) {\n\t\t\tconsole.warn(\"Menu item has no command:\", item);\n\t\t\tcontinue;\n\t\t}\n\t\tlet keystrokes = keystrokesByCommand[command];\n\t\tif (!keystrokes) {\n\t\t\tconsole.warn(\"Menu item has no keystrokes:\", item);\n\t\t\tcontinue;\n\t\t}\n\t\tlet keystroke = keystrokes[0];\n\t\tif (!keystroke) {\n\t\t\tconsole.warn(\"Menu item has no keystrokes:\", item);\n\t\t\tcontinue;\n\t\t}\n\t\titem.label = keystroke.includes(\" \") ? keystroke : item.metadata.accelerator;\n\t\titem.metadata.keystroke = keystroke;\n\t\titem.metadata.click = \"atomApplication.sendCommand('\" + command + \"')\";\n\t\titem.metadata.windowSpecific = !command.startsWith(\"application:\");\n\t}\n\treturn template;\n}", "CodeBleu_score": 35.676744580287135}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t\tconst newTemplate = [];\n\tfor (let item of template) {\n\t\tif (item.type === \"separator\") {\n\t\t\tnewTemplate.push(item);\n\t\t\tcontinue;\n\t\t}\n\t\tif (!item.label) {\n\t\t\titem.label = \"\";\n\t\t}\n\t\tif (!item.accelerator) {\n\t\t\titem.accelerator = \"\";\n\t\t}\n\t\tif (!item.command) {\n\t\t\titem.command = \"\";\n\t\t}\n\t\tif (!item.enabled) {\n\t\t\titem.enabled = true;\n\t\t}\n\t\tif (!item.visible) {\n\t\t\titem.visible = true;\n\t\t}\n\t\tif (!item.checked) {\n\t\t\titem.checked = false;\n\t\t}\n\t\tif (!item.submenu) {\n\t\t\titem.submenu = [];\n\t\t}\n\t\tif (!item.metadata) {\n\t\t\titem.metadata = {};\n\t\t}\n\t\tif (item.command) {\n\t\t\tconst command = item.command;\n\t\t\tif (!item.label && command.includes(\" \")) {\n\t\t\t\titem.label = command;\n\t\t\t}\n\t\t\tif (!item.accelerator && !command.includes(\" \")) {\n\t\t\t\titem.accelerator = keystrokesByCommand[command][0];\n\t\t\t}\n\t\t\titem.metadata.windowSpecific = !command.startsWith(\"application:\");\n\t\t\titem.click = () => {\n\t\t\t\tatomApplication.sendCommand(command);\n\t\t\t};\n\t\t}\n\t\tif (item.submenu) {\n\t\t\titem.submenu = this.translateTemplate(item.submenu, keystrokesByCommand);\n\t\t}\n\t\tnewTemplate.push(item);\n\t}\n\treturn newTemplate;\n}", "CodeBleu_score": 32.676743757145616}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t", "CodeBleu_score": 0.56569295131194}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\t\n}", "CodeBleu_score": 3.0098344704154365}, {"code": "flattenMenuItems(menu){\n\tconst object = menu.items || {};\nlet items = [];\nfor (let index in object) {\n  const item = object[index];\n  items.push(item);\n  if (item.submenu)\n    items = items.concat(this.flattenMenuItems(item.submenu));\n}\nreturn items;\n}", "CodeBleu_score": 97.24802033803455}, {"code": "flattenMenuItems(menu){\n\t\n}", "CodeBleu_score": 3.0098344704154365}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tconst encrypted = cipher.update(JSON.stringify(options));\n\tcipher.final();\n\treturn {\n\t\tauthTag: cipher.getAuthTag().toString('hex'),\n\t\tiv: iv.toString('hex'),\n\t\tencrypted: encrypted.toString('hex')\n\t};\n}", "CodeBleu_score": 46.616181495748044}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tlet encrypted = cipher.update(JSON.stringify(options));\n\tencrypted = Buffer.concat([encrypted, cipher.final()]);\n\treturn {\n\t\t'iv': iv.toString('hex'),\n\t\t'content': encrypted.toString('hex'),\n\t\t'tag': cipher.getAuthTag().toString('hex')\n\t};\n}", "CodeBleu_score": 49.044477984816275}, {"code": "const encryptOptions = (options, secret) =>{\n\t\tconst iv = crypto.randomBytes(16);\n\tconst cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n\tlet encrypted = cipher.update(JSON.stringify(options), 'utf8');\n\tencrypted = Buffer.concat([encrypted, cipher.final()]);\n\tconst tag = cipher.getAuthTag();\n\treturn {\n\t\tiv: iv.toString('hex'),\n\t\ttag: tag.toString('hex'),\n\t\tcontent: encrypted.toString('hex')\n\t};\n}", "CodeBleu_score": 49.27133770966441}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t\tfor (var i = 0; i < template.length; i++) {\n\t\tvar item = template[i];\n\t\tif (item.command) {\n\t\t\titem.commandDetail = item.command + 'CommandDetail';\n\t\t\titem.contextCommand = true;\n\t\t}\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t}\n}", "CodeBleu_score": 31.287139862484096}, {"code": "createClickHandlers(template){\n\t\tfor (const item of template.items) {\n\t\tif (item.command) {\n\t\t\tif (!item.commandDetail) {\n\t\t\t\titem.commandDetail = {};\n\t\t\t}\n\t\t\titem.commandDetail.contextCommand = true;\n\t\t}\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t\tif (item.command) {\n\t\t\titem.click = () => {\n\t\t\t\tatomApplication.sendCommandEvent(item.command, item.commandDetail);\n\t\t\t};\n\t\t}\n\t}\n}", "CodeBleu_score": 55.77317254073093}, {"code": "createClickHandlers(template){\n\t\tfor (let i = 0; i < template.length; i++) {\n\t\tconst item = template[i];\n\t\tif (item.command) {\n\t\t\titem.commandDetail = item.command;\n\t\t\titem.contextCommand = true;\n\t\t\titem.click = () => {\n\t\t\t\tatomApplication.sendCommandEventToCurrentWindow(item.command);\n\t\t\t};\n\t\t}\n\t\tif (item.submenu) {\n\t\t\tthis.createClickHandlers(item.submenu);\n\t\t}\n\t}\n}", "CodeBleu_score": 37.7315796056012}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\t//  console.log(`didSavePath(window, path) called with window ${window} and path ${path}`);\n  let recoveryFile = this.recoveryFilesByPath.get(path);\n  if (recoveryFile) {\n    try {\n      await recoveryFile.release();\n    } catch (e) {\n      console.error(e);\n    }\n    this.recoveryFilesByPath.delete(path);\n    this.recoveryFilesByWindowAndPath.delete(window, path);\n  }\n}", "CodeBleu_score": 48.87966431801259}, {"code": "async didSavePath(window, path){\n\t", "CodeBleu_score": 1.2503545867317951}, {"code": "async didSavePath(window, path){\n\t//  console.log(`didSavePath: ${path}`);\n  let recoveryFile = recoveryFileByPath.get(path);\n  if (recoveryFile) {\n    try {\n      await recoveryFile.release();\n    } catch (error) {\n      console.error(`recoveryFile.release: ${error}`);\n    }\n  }\n  recoveryFileByPath.delete(path);\n  recoveryFileByWindow.delete(window);\n  recoveryFileByRecoveryFile.delete(recoveryFile);\n}", "CodeBleu_score": 39.51687255905063}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\t\tconst recoveryFiles = this.recoveryFiles[window.id];\n\tif (recoveryFiles) {\n\t\tfor (const recoveryFile of recoveryFiles) {\n\t\t\ttry {\n\t\t\t\tawait recoveryFile.recover();\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t\tconst message = `Unable to recover ${recoveryFile.originalPath} from ${recoveryFile.recoveryPath}`;\n\t\t\t\tconst detail = `Recovery failed with error: ${error}`;\n\t\t\t\tatom.notifications.addError(message, { detail });\n\t\t\t} finally {\n\t\t\t\trecoveryFile.cleanup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 29.885020833887644}, {"code": "async didCrashWindow(window){\n\t\tconst recoveryFiles = this.recoveryFilesForWindow(window);\n\tif (recoveryFiles.length === 0) {\n\t\treturn;\n\t}\n\tfor (const recoveryFile of recoveryFiles) {\n\t\ttry {\n\t\t\tawait recoveryFile.recover();\n\t\t} catch (error) {\n\t\t\tconsole.error(`Failed to recover file: ${recoveryFile.originalPath} with recovery file: ${recoveryFile.recoveryPath}`);\n\t\t\tconsole.error(error);\n\t\t\trecoveryFile.showRecoveryErrorDialog();\n\t\t}\n\t}\n}", "CodeBleu_score": 19.26644936044545}, {"code": "async didCrashWindow(window){\n\t\tconst recoveryFiles = this.recoveryFiles.get(window);\n\tif (!recoveryFiles) {\n\t\treturn;\n\t}\n\n\tfor (const recoveryFile of recoveryFiles) {\n\t\ttry {\n\t\t\tawait recoveryFile.recover();\n\t\t} catch (error) {\n\t\t\tconst message = `Recovery failed for ${recoveryFile.originalPath}: ${error}`;\n\t\t\tconsole.error(message);\n\t\t\trecoveryFile.error = error;\n\t\t}\n\t}\n\n\tthis.recoveryFiles.delete(window);\n}", "CodeBleu_score": 29.202065888597133}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t\t// Create the destination directory if it doesn't exist\n\tawait mkdir(path.dirname(destination), { recursive: true });\n\t// Set up the read and write streams\n\tconst readStream = fs.createReadStream(source);\n\tconst writeStream = fs.createWriteStream(destination, { mode: mode });\n\t// Read from the read stream and write to the write stream\n\treturn new Promise((resolve, reject) => {\n\t\treadStream.on(\"error\", reject);\n\t\twriteStream.on(\"error\", reject);\n\t\twriteStream.on(\"finish\", resolve);\n\t\treadStream.pipe(writeStream);\n\t});\n}", "CodeBleu_score": 44.9880216773811}, {"code": "async function copyFile(source, destination, mode){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst readStream = fs.createReadStream(source);\n\t\tconst writeStream = fs.createWriteStream(destination, { mode });\n\n\t\treadStream.on('error', (error) => {\n\t\t\treject(error);\n\t\t});\n\n\t\twriteStream.on('error', (error) => {\n\t\t\treject(error);\n\t\t});\n\n\t\twriteStream.on('finish', () => {\n\t\t\tresolve();\n\t\t});\n\n\t\treadStream.pipe(writeStream);\n\t});\n}", "CodeBleu_score": 52.79634746641246}, {"code": "async function copyFile(source, destination, mode){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst readStream = fs.createReadStream(source);\n\t\tconst writeStream = fs.createWriteStream(destination, {mode});\n\n\t\treadStream.on('error', (err) => {\n\t\t\treject(err);\n\t\t});\n\n\t\twriteStream.on('error', (err) => {\n\t\t\treject(err);\n\t\t});\n\n\t\twriteStream.on('finish', () => {\n\t\t\tresolve();\n\t\t});\n\n\t\treadStream.pipe(writeStream);\n\t});\n}", "CodeBleu_score": 50.18499166502686}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform != 'win32') {\n\t\treturn false;\n\t}\n\n\tconst SquirrelUpdate = require('SquirrelUpdate');\n\tconst squirrelCommand = process.argv[1];\n\n\tif (SquirrelUpdate.handleStartupEvent(squirrelCommand)) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 79.2232969060197}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform != 'win32') {\n\t\treturn false;\n\t}\n\tconst SquirrelUpdate = require('electron-squirrel-startup');\n\tconst squirrelCommand = process.argv[1];\n\treturn SquirrelUpdate.handleStartupEvent(squirrelCommand);\n}", "CodeBleu_score": 88.87275266582255}, {"code": "function handleStartupEventWithSquirrel(){\n\t\tif (process.platform !== 'win32') {\n\t\treturn false;\n\t}\n\n\tconst SquirrelUpdate = require('SquirrelUpdate');\n\n\tconst squirrelCommand = process.argv[1];\n\n\tswitch (squirrelCommand) {\n\t\tcase '--squirrel-install':\n\t\t\tSquirrelUpdate.install();\n\t\t\tapp.quit();\n\t\t\treturn true;\n\t\tcase '--squirrel-updated':\n\t\t\tSquirrelUpdate.updated();\n\t\t\tapp.quit();\n\t\t\treturn true;\n\t\tcase '--squirrel-uninstall':\n\t\t\tSquirrelUpdate.uninstall();\n\t\t\tapp.quit();\n\t\t\treturn true;\n\t\tcase '--squirrel-obsolete':\n\t\t\tSquirrelUpdate.obsolete();\n\t\t\tapp.quit();\n\t\t\treturn true;\n\t}\n}", "CodeBleu_score": 70.07596755483196}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t\tif (isWindows()) {\n\t\tif (filePath) {\n\t\t\tvar match = /^([a-z])\\:(.*)$/i.exec(filePath);\n\t\t\tif (match) {\n\t\t\t\tfilePath = match[1].toUpperCase() + ':' + match[2];\n\t\t\t}\n\t\t}\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 34.71157298942692}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (typeof filePath === \"string\") {\n\t\tif (process.platform === \"win32\") {\n\t\t\tif (filePath.length > 1 && filePath[0].match(/[a-z]/i)) {\n\t\t\t\tfilePath = filePath[0].toUpperCase() + filePath.substr(1);\n\t\t\t}\n\t\t}\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 48.14200375085243}, {"code": "function normalizeDriveLetterName(filePath){\n\t\tif (process.platform === 'win32' && filePath) {\n\t\treturn filePath[0].toUpperCase() + filePath.substr(1);\n\t}\n\treturn filePath;\n}", "CodeBleu_score": 56.489734675565195}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\tlet doneCount = this.parts.length;\nthis.parts.forEach(part => {\nlet reg = new Registry({\nhive: 'HKCU',\nkey: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n});\nreturn reg.create(() =>\nreg.set(part.name, Registry.REG_SZ, part.value, () => {\nif (--doneCount === 0) return callback();\n})\n);\n});\n}", "CodeBleu_score": 94.62528757527635}, {"code": "register(callback){\n\tlet doneCount = this.parts.length;\nthis.parts.forEach(part => {\nlet reg = new Registry({\nhive: 'HKCU',\nkey: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n});\nreturn reg.create(() =>\nreg.set(part.name, Registry.REG_SZ, part.value, () => {\nif (--doneCount === 0) return callback();\n})\n);\n});\n}", "CodeBleu_score": 94.62528757527635}, {"code": "register(callback){\n\tlet doneCount = this.parts.length;\nthis.parts.forEach(part => {\nlet reg = new Registry({\nhive: 'HKCU',\nkey: part.key != null ? `${this.key}\\\\${part.key}` : this.key\n});\nreturn reg.create(() =>\nreg.set(part.name, Registry.REG_SZ, part.value, () => {\nif (--doneCount === 0) return callback();\n})\n);\n});\n}", "CodeBleu_score": 94.62528757527635}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\t\n}", "CodeBleu_score": 2.8750960861215313}, {"code": "showSaveDialog(options, callback){\n\tif (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options === 'string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 98.42150710651319}, {"code": "showSaveDialog(options, callback){\n\tif (typeof callback === 'function') {\n      // Async\n      this.getCurrentWindow().showSaveDialog(options, callback);\n    } else {\n      // Sync\n      if (typeof options === 'string') {\n        options = { defaultPath: options };\n      }\n      return this.getCurrentWindow().showSaveDialog(options);\n    }\n  }", "CodeBleu_score": 98.42150710651319}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\tconst { x, y, width, height } = this.getWindowDimensions();\nif (this.isValidDimensions({ x, y, width, height })) {\n    return { x, y, width, height };\n  } else {\n    const defaultDimensions = this.getDefaultWindowDimensions();\n    await this.setWindowDimensions(defaultDimensions);\n    return defaultDimensions;\n  }\n}", "CodeBleu_score": 26.105665728335026}, {"code": "async restoreWindowDimensions(){\n\tconst dimensions = this.getWindowDimensions();\nif (!this.isValidDimensions(dimensions)) {\n  const defaultDimensions = this.getDefaultWindowDimensions();\n  await this.setWindowDimensions(defaultDimensions);\n  return defaultDimensions;\n} else {\n  return dimensions;\n}\n}", "CodeBleu_score": 28.458471077038013}, {"code": "async restoreWindowDimensions(){\n\tconst { x, y, width, height } = this.getWindowDimensions();\nif (!this.isValidDimensions({ x, y, width, height })) {\n  const defaultDimensions = this.getDefaultWindowDimensions();\n  if (\n    defaultDimensions.width !== width ||\n    defaultDimensions.height !== height\n  ) {\n    await this.setWindowDimensions(defaultDimensions);\n  }\n}\nreturn this.getWindowDimensions();\n}", "CodeBleu_score": 26.14602003088093}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t\tconst installCommand = 'apm install atom-shell-commands';\n\tconst installCommandDescription = 'Atom Shell Commands';\n\tconst installCommandSuccessMessage = 'Atom Shell Commands installed successfully.';\n\tconst installCommandFailureMessage = 'Atom Shell Commands installation failed. Make sure you have permission to write to the Atom packages directory.';\n\n\tconst apmCommand = 'apm install apm';\n\tconst apmCommandDescription = 'Atom Package Manager';\n\tconst apmCommandSuccessMessage = 'Atom Package Manager installed successfully.';\n\tconst apmCommandFailureMessage = 'Atom Package Manager installation failed. Make sure you have permission to write to the Atom packages directory.';\n\n\tconst installCommandArgs = [installCommand];\n\tconst apmCommandArgs = [apmCommand];\n\n\tconst installCommandSuccess = this.installCommandInteractively(installCommandDescription, installCommandArgs, installCommandSuccessMessage, installCommandFailureMessage);\n\tconst apmCommandSuccess = this.installCommandInteractively(apmCommandDescription, apmCommandArgs, apmCommandSuccessMessage, apmCommandFailureMessage);\n\n\tif (installCommandSuccess && apmCommandSuccess) {\n\t\tthis.showConfirmationDialog('Atom Shell Commands Installation', 'The Atom Shell Commands and Atom Package Manager were installed successfully.', 'OK');\n\t}\n}", "CodeBleu_score": 19.440896468781666}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}, {"code": "installShellCommandsInteractively(){\n\t\tlet commandName = 'atom';\n\tlet commandDescription = 'Atom';\n\tlet command = `${commandName} --help`;\n\tlet successMessage = `The ${commandDescription} command was installed successfully.`;\n\tlet errorMessage = `The ${commandDescription} command could not be installed.`;\n\tlet confirmationMessage = `The ${commandDescription} and APM commands were installed successfully.`;\n\tlet installCommand = `install ${commandName}`;\n\tlet installErrorMessage = `The ${commandDescription} command could not be installed.`;\n\tlet installConfirmationMessage = `The ${commandDescription} and APM commands were installed successfully.`;\n\n\tthis.installCommandInteractively(command, successMessage, errorMessage, confirmationMessage, installCommand, installErrorMessage, installConfirmationMessage);\n}", "CodeBleu_score": 23.899524306175962}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t\tif (process.platform !== 'darwin') return callback();\n\n\tconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n\tfs.readlink(destinationPath, (error, realpath) => {\n\t\tif (error && error.code !== 'ENOENT') return callback(error);\n\t\tif (realpath === commandPath) return callback(null, commandName);\n\t\tthis.createSymlink(fs, commandPath, destinationPath, error => {\n\t\t\tif (error && error.code === 'EACCES' && askForPrivilege) {\n\t\t\t\tconst fsAdmin = require('fs-admin');\n\t\t\t\tthis.createSymlink(fsAdmin, commandPath, destinationPath, error => {\n\t\t\t\t\tcallback(error, commandName);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tcallback(error);\n\t\t\t}\n\t\t});\n\t});\n}", "CodeBleu_score": 96.05102840137538}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t\n}", "CodeBleu_score": 2.909522538749249}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\tif (process.platform !== 'darwin') return callback();\n\nconst destinationPath = path.join(this.getInstallDirectory(), commandName);\n\nfs.readlink(destinationPath, (error, realpath) => {\nif (error && error.code !== 'ENOENT') return callback(error);\nif (realpath === commandPath) return callback(null, commandName);\nthis.createSymlink(fs, commandPath, destinationPath, error => {\nif (error && error.code === 'EACCES' && askForPrivilege) {\nconst fsAdmin = require('fs-admin');\nthis.createSymlink(fsAdmin, commandPath, destinationPath, error => {\ncallback(error, commandName);\n});\n} else {\ncallback(error);\n}\n});\n});\n}", "CodeBleu_score": 95.9150363375149}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t\tlet row, column;\n\tconst range = this.marker.getScreenRange();\n\tif (moveToEndOfSelection && !range.isEmpty()) {\n\t\t({ row, column } = range.start);\n\t} else {\n\t\t({ row, column } = this.getScreenPosition());\n\t}\n\n\tif (this.goalColumn != null) column = this.goalColumn;\n\tthis.setScreenPosition(\n\t\t{ row: row - rowCount, column },\n\t\t{ skipSoftWrapIndentation: true }\n\t);\n\tthis.goalColumn = column;\n}", "CodeBleu_score": 96.67612744621592}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tconst range = this.marker.getScreenRange();\nif (moveToEndOfSelection && !range.isEmpty()) {\n({ row, column } = range.start);\n} else {\n({ row, column } = this.getScreenPosition());\n}\n\nif (this.goalColumn != null) column = this.goalColumn;\nthis.setScreenPosition(\n{ row: row - rowCount, column },\n{ skipSoftWrapIndentation: true }\n);\nthis.goalColumn = column;\n}", "CodeBleu_score": 77.77777796103337}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\tlet row, column;\nconst range = this.marker.getScreenRange();\nif (moveToEndOfSelection && !range.isEmpty()) {\n  ({ row, column } = range.start);\n} else {\n  ({ row, column } = this.getScreenPosition());\n}\n\nif (this.goalColumn != null) column = this.goalColumn;\nthis.setScreenPosition(\n  { row: row - rowCount, column },\n  { skipSoftWrapIndentation: true }\n);\nthis.goalColumn = column;\n}", "CodeBleu_score": 97.44824513053474}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t\tconst decorationsByMarkerId = {};\n\tfor (const layer of this.decorationCountsByLayer.keys()) {\n\t\tfor (const marker of layer.findMarkers({\n\t\t\tintersectsScreenRowRange: [startScreenRow, endScreenRow]\n\t\t})) {\n\t\t\tconst decorations = this.decorationsByMarker.get(marker);\n\t\t\tif (decorations) {\n\t\t\t\tdecorationsByMarkerId[marker.id] = Array.from(decorations);\n\t\t\t}\n\t\t}\n\t}\n\treturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.82565299797736}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\nfor (const layer of this.decorationCountsByLayer.keys()) {\nfor (const marker of layer.findMarkers({\nintersectsScreenRowRange: [startScreenRow, endScreenRow]\n})) {\nconst decorations = this.decorationsByMarker.get(marker);\nif (decorations) {\ndecorationsByMarkerId[marker.id] = Array.from(decorations);\n}\n}\n}\nreturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.68935133939671}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\tconst decorationsByMarkerId = {};\nfor (const layer of this.decorationCountsByLayer.keys()) {\nfor (const marker of layer.findMarkers({\nintersectsScreenRowRange: [startScreenRow, endScreenRow]\n})) {\nconst decorations = this.decorationsByMarker.get(marker);\nif (decorations) {\ndecorationsByMarkerId[marker.id] = Array.from(decorations);\n}\n}\n}\nreturn decorationsByMarkerId;\n}", "CodeBleu_score": 95.68935133939671}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\tif (markerLayer.isDestroyed()) {\n\t\tthrow new Error('Cannot decorate a destroyed marker layer');\n\t}\n\tmarkerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n\tconst decoration = new LayerDecoration(markerLayer, this, decorationParams);\n\tlet layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n\tif (layerDecorations == null) {\n\t\tlayerDecorations = new Set();\n\t\tthis.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n\t}\n\tlayerDecorations.add(decoration);\n\tthis.observeDecoratedLayer(markerLayer, false);\n\tthis.emitDidUpdateDecorations();\n\treturn decoration;\n}", "CodeBleu_score": 97.75056672056172}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t// TODO: Check if the marker layer is destroyed\n    if (markerLayer.isDestroyed()) {\n      throw new Error('Cannot decorate a destroyed marker layer');\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n    if (layerDecorations == null) {\n      layerDecorations = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, layerDecorations);\n    }\n    layerDecorations.add(decoration);\n    this.observeDecoratedLayer(markerLayer, false);\n    this.emitDidUpdateDecorations();\n    return decoration;\n  }", "CodeBleu_score": 98.72488513366122}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t\n}", "CodeBleu_score": 1.8269894317795843}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\nthis.decorationCountsByLayer.set(layer, newCount);\nif (newCount === 1) {\nthis.layerUpdateDisposablesByLayer.set(\nlayer,\nlayer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n);\n}\nif (isMarkerDecoration) {\nthis.markerDecorationCountsByLayer.set(\nlayer,\n(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n);\n}\n}", "CodeBleu_score": 95.67933010756143}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\n\tthis.decorationCountsByLayer.set(layer, newCount);\n\tif (newCount === 1) {\n\t\tthis.layerUpdateDisposablesByLayer.set(\n\t\t\tlayer,\n\t\t\tlayer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n\t\t);\n\t}\n\tif (isMarkerDecoration) {\n\t\tthis.markerDecorationCountsByLayer.set(\n\t\t\tlayer,\n\t\t\t(this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n\t\t);\n\t}\n}", "CodeBleu_score": 95.80301962795797}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\tconst newCount = (this.decorationCountsByLayer.get(layer) || 0) + 1;\nthis.decorationCountsByLayer.set(layer, newCount);\nif (newCount === 1) {\n  this.layerUpdateDisposablesByLayer.set(\n    layer,\n    layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this))\n  );\n}\nif (isMarkerDecoration) {\n  this.markerDecorationCountsByLayer.set(\n    layer,\n    (this.markerDecorationCountsByLayer.get(layer) || 0) + 1\n  );\n}\n}", "CodeBleu_score": 97.79523223106754}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t\n}", "CodeBleu_score": 3.8651941562977528}, {"code": "finishLoading(){\n\t\n}", "CodeBleu_score": 3.8651941562977528}, {"code": "finishLoading(){\n\t\n}", "CodeBleu_score": 3.8651941562977528}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\nswitch (\nthis.applicationDelegate.getUserDefault(\n'AppleActionOnDoubleClick',\n'string'\n)\n) {\ncase 'Minimize':\nthis.applicationDelegate.minimizeWindow();\nbreak;\ncase 'Maximize':\nif (this.applicationDelegate.isWindowMaximized()) {\nthis.applicationDelegate.unmaximizeWindow();\n} else {\nthis.applicationDelegate.maximizeWindow();\n}\nbreak;\n}\n}", "CodeBleu_score": 67.90737649029185}, {"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\nswitch (this.applicationDelegate.getUserDefault('AppleActionOnDoubleClick', 'string')) {\ncase 'Minimize':\nthis.applicationDelegate.minimizeWindow();\nbreak;\ncase 'Maximize':\nif (this.applicationDelegate.isWindowMaximized()) {\nthis.applicationDelegate.unmaximizeWindow();\n} else {\nthis.applicationDelegate.maximizeWindow();\n}\nbreak;\n}\n}", "CodeBleu_score": 60.98420174607019}, {"code": "dblclickHandler(){\n\t// User preference deciding which action to take on a title bar double-click\nswitch (this.applicationDelegate.getUserDefault('AppleActionOnDoubleClick', 'string')) {\ncase 'Minimize':\nthis.applicationDelegate.minimizeWindow();\nbreak;\ncase 'Maximize':\nif (this.applicationDelegate.isWindowMaximized()) {\nthis.applicationDelegate.unmaximizeWindow();\n} else {\nthis.applicationDelegate.maximizeWindow();\n}\nbreak;\n}\n}", "CodeBleu_score": 60.98420174607019}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\nif (settingWins.length >= 1) {\n// A setting window is already created\nconst browserSettingWindow = settingWins[0].win.browserWindow\nbrowserSettingWindow.webContents.send('settings::change-tab', category)\nif (isLinux) {\nbrowserSettingWindow.focus()\n} else {\nbrowserSettingWindow.moveTop()\n}\nreturn\n}\nthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.15924676665757}, {"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\nif (settingWins.length >= 1) {\n// A setting window is already created\nconst browserSettingWindow = settingWins[0].win.browserWindow\nbrowserSettingWindow.webContents.send('settings::change-tab', category)\nif (isLinux) {\nbrowserSettingWindow.focus()\n} else {\nbrowserSettingWindow.moveTop()\n}\nreturn\n}\nthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.15924676665757}, {"code": "_openSettingsWindow (category){\n\tconst settingWins = this._windowManager.getWindowsByType(WindowType.SETTINGS)\nif (settingWins.length >= 1) {\n// A setting window is already created\nconst browserSettingWindow = settingWins[0].win.browserWindow\nbrowserSettingWindow.webContents.send('settings::change-tab', category)\nif (isLinux) {\nbrowserSettingWindow.focus()\n} else {\nbrowserSettingWindow.moveTop()\n}\nreturn\n}\nthis._createSettingWindow(category)\n}", "CodeBleu_score": 96.15924676665757}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t// Return an empty array if the file list is invalid.\n    if (!fileList || !Array.isArray(fileList) || !fileList.length) return []\n// Retrieve the last active editor ID and check the number of open windows.\n    const { windows } = this\n    const lastActiveEditorId = this.getActiveEditorId() // editor id or null\n    if (this.windowCount <= 1) {\n      return [{ windowId: lastActiveEditorId, fileList }]\n// Array of scores, same order like fileList.\n    }\n    let filePathScores = null\n    for (const window of windows.values()) {\n      if (window.type === WindowType.EDITOR) {\n        const scores = window.getCandidateScores(fileList)\n        if (!filePathScores) {\n          filePathScores = scores\n        } else {\n          const len = filePathScores.length\n          for (let i = 0; i < len; ++i) {\n            // Update score only if the file is not already opened.\n            if (filePathScores[i].score !== -1 && filePathScores[i].score < scores[i].score) {\n              filePathScores[i] = scores[i]\n            }\n          }\n        }\n      }\n    }\n// Create an array of objects, each containing a window ID and the associated file list.\n    const buf = []\n    const len = filePathScores.length\n    for (let i = 0; i < len; ++i) {\n      let { id: windowId, score } = filePathScores[i]\n\n// Skip files that already opened.\n      if (score === -1) continue\n// There is no best window to open the file(s) in.\n      if (score === 0) windowId = lastActiveEditorId\n\n// Add the file to the window.\n      let item = buf.find(w => w.windowId === windowId)\n      if (!item) {\n        item = { windowId, fileList: [] }\n        buf.push(item)\n      }\n      item.fileList.push(fileList[i])\n    }\n    return buf\n  }", "CodeBleu_score": 95.68585287955904}, {"code": "findBestWindowToOpenIn (fileList){\n\t\n}", "CodeBleu_score": 1.049955448136996}, {"code": "findBestWindowToOpenIn (fileList){\n\t\n}", "CodeBleu_score": 1.049955448136996}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tconst encoding = 'utf8';\n\tlet isBom = false;\n\n\tfor (const bom of boms) {\n\t\tif (buffer.slice(0, bom.length).equals(bom)) {\n\t\t\tencoding = bom.encoding;\n\t\t\tisBom = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced(buffer);\n\t\tencodingMap[guessedEncoding] ? encodingMap[guessedEncoding] : guessedEncoding.toLowerCase();\n\t}\n\n\treturn {\n\t\tencoding,\n\t\tisBom\n\t};\n}", "CodeBleu_score": 39.21715340470018}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tconst bomEncodings = {\n\t\t'utf-8': [\n\t\t\t[0xEF, 0xBB, 0xBF],\n\t\t],\n\t\t'utf-16be': [\n\t\t\t[0xFE, 0xFF],\n\t\t],\n\t\t'utf-16le': [\n\t\t\t[0xFF, 0xFE],\n\t\t],\n\t};\n\n\tlet encoding = 'utf8';\n\tlet isBom = false;\n\n\tfor (const bomEncoding in bomEncodings) {\n\t\tconst bomSequences = bomEncodings[bomEncoding];\n\t\tfor (const bomSequence of bomSequences) {\n\t\t\tif (\n\t\t\t\tbuffer[0] === bomSequence[0] &&\n\t\t\t\tbuffer[1] === bomSequence[1] &&\n\t\t\t\tbuffer[2] === bomSequence[2]\n\t\t\t) {\n\t\t\t\tencoding = bomEncoding;\n\t\t\t\tisBom = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (isBom) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced(buffer);\n\t\tif (guessedEncoding in encodingMap) {\n\t\t\tencoding = encodingMap[guessedEncoding];\n\t\t} else {\n\t\t\tencoding = guessedEncoding.toLowerCase();\n\t\t}\n\t}\n\n\treturn [encoding, isBom];\n}", "CodeBleu_score": 38.98258579319407}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t\tlet encoding = 'utf8';\n\tlet isBom = false;\n\n\tif (buffer.length > 3) {\n\t\tfor (let i = 0; i < BOM_ENCODINGS.length; i++) {\n\t\t\tconst bomEncoding = BOM_ENCODINGS[i];\n\t\t\tif (buffer.slice(0, bomEncoding.length).equals(bomEncoding)) {\n\t\t\t\tencoding = bomEncoding.encoding;\n\t\t\t\tisBom = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (autoGuessEncoding) {\n\t\tconst guessedEncoding = ced(buffer);\n\t\tconst encodingMap = {\n\t\t\t'utf-8': 'utf8',\n\t\t\t'utf8bom': 'utf8',\n\t\t\t'utf16lebom': 'utf16le',\n\t\t\t'utf16bebom': 'utf16be',\n\t\t};\n\t\tencoding = encodingMap[guessedEncoding] || guessedEncoding;\n\t}\n\n\tencoding = encoding.toLowerCase();\n\n\treturn { encoding, isBom };\n}", "CodeBleu_score": 38.3259517156905}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst {\n\t\tencoding = 'utf8',\n\t\tlineEnding = 'lf',\n\t\tbom = false\n\t} = options || {}\n\n\tconst buffer = Buffer.from(content, encoding)\n\n\tif (bom) {\n\t\tbuffer.write(BOM_UTF8)\n\t}\n\n\tif (lineEnding === 'crlf') {\n\t\tbuffer.replace(/(\\r\n|\n|\\r)/g, '\\r\n')\n\t} else if (lineEnding === 'lf') {\n\t\tbuffer.replace(/(\\r\n|\n|\\r)/g, '\n')\n\t} else if (lineEnding === 'cr') {\n\t\tbuffer.replace(/(\\r\n|\n|\\r)/g, '\\r')\n\t}\n\n\tfs.writeFileSync(pathname, buffer)\n}", "CodeBleu_score": 27.438119038228848}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst { lineEnding, encoding, bom } = getMarkdownFileOptions(pathname, options);\n\tconst buffer = Buffer.from(content, encoding);\n\tif (bom) {\n\t\tbuffer.write(BOM_UTF8);\n\t}\n\tif (lineEnding !== 'lf' && buffer.indexOf(BOM_UTF8) !== 0) {\n\t\tbuffer.write(lineEnding === 'crlf' ? '\\r\n' : '\n');\n\t}\n\tfs.writeFileSync(pathname, buffer);\n}", "CodeBleu_score": 28.604126996701517}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t\tconst { lineEnding = 'auto', encoding = 'utf8', bom = false } = options;\n\tconst lineEndingAdjusted = adjustLineEndings(content, lineEnding);\n\tconst buffer = Buffer.from(lineEndingAdjusted, encoding);\n\tif (bom) {\n\t\tbuffer.write(BOM_UTF8);\n\t}\n\tfs.writeFileSync(pathname, buffer);\n}", "CodeBleu_score": 29.266339041409033}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t", "CodeBleu_score": 1.4014791665343247}, {"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.handle('get-keyboard-info', async () => {\n\t\tconst keyboardInfo = {\n\t\t\tlanguage: keyboard.language,\n\t\t\tlayouts: keyboard.layouts,\n\t\t\tactiveLayout: keyboard.activeLayout,\n\t\t\tactiveId: keyboard.activeId,\n\t\t\tisCapsLockOn: keyboard.isCapsLockOn,\n\t\t\tisNumLockOn: keyboard.isNumLockOn,\n\t\t\tisScrollLockOn: keyboard.isScrollLockOn,\n\t\t\tkeystrokes: keyboard.keystrokes\n\t\t};\n\n\t\treturn keyboardInfo;\n\t});\n\n\tipcMain.handle('dump-keyboard-info', async () => {\n\t\tconst keyboardInfo = {\n\t\t\tlanguage: keyboard.language,\n\t\t\tlayouts: keyboard.layouts,\n\t\t\tactiveLayout: keyboard.activeLayout,\n\t\t\tactiveId: keyboard.activeId,\n\t\t\tisCapsLockOn: keyboard.isCapsLockOn,\n\t\t\tisNumLockOn: keyboard.isNumLockOn,\n\t\t\tisScrollLockOn: keyboard.isScrollLockOn,\n\t\t\tkeystrokes: keyboard.keystrokes\n\t\t};\n\n\t\tconst filePath = path.join(os.tmpdir(), 'keyboard-info.json');\n\n\t\ttry {\n\t\t\tawait writeFile(filePath, JSON.stringify(keyboardInfo, null, 2));\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\n\t\tshell.openPath(filePath);\n\t});\n}", "CodeBleu_score": 38.73255763632801}, {"code": "export const registerKeyboardListeners = () =>{\n\t\tipcMain.on('get-keyboard-layout', async (event, args) => {\n\t\tconst layout = await getKeyboardLayout();\n\t\tevent.sender.send('get-keyboard-layout-reply', layout);\n\t});\n\n\tipcMain.on('dump-keyboard-layout', async (event, args) => {\n\t\tconst layout = await getKeyboardLayout();\n\t\tconst file = await createWriteStream(path.join(app.getPath('temp'), 'keyboard-layout.json'));\n\t\tfile.write(JSON.stringify(layout));\n\t\tfile.end();\n\t\tfile.on('finish', () => {\n\t\t\topen(file.path);\n\t\t\tfile.close();\n\t\t});\n\t\tfile.on('error', (err) => {\n\t\t\tconsole.error(err);\n\t\t});\n\t});\n}", "CodeBleu_score": 38.24709430792447}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n  if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n    console.log('[DEBUG] Keyboard layout changed:\n', layout)\n  }\n  electronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 87.51800024591708}, {"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\n  if (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\n    console.log('[DEBUG] Keyboard layout changed:\n', layout)\n  }\n  electronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 87.51800024591708}, {"code": "_prepareKeyMapper (){\n\t// Update the key mapper to prevent problems on non-US keyboards.\nconst { layout, keymap } = getKeyboardInfo()\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n// Notify key mapper when the keyboard layout was changed.\nkeyboardLayoutMonitor.addListener(({ layout, keymap }) => {\nif (global.MARKTEXT_DEBUG && process.env.MARKTEXT_DEBUG_KEYBOARD) {\nconsole.log('[DEBUG] Keyboard layout changed:\n', layout)\n}\nelectronLocalshortcut.setKeyboardLayout(layout, keymap)\n})\n}", "CodeBleu_score": 86.44524569209217}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t// Remove aria2c unrecognized options\nconst { others } = separateConfig(this.systemConfig.store)\nif (others && Object.keys(others).length > 0) {\n  Object.keys(others).forEach(key => {\n    this.systemConfig.delete(key)\n  })\n}\n\nconst proxy = this.getUserConfig('proxy', { enable: false })\nconst { enable, server, bypass, scope = [] } = proxy\nif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\n  this.setSystemConfig('all-proxy', server)\n  this.setSystemConfig('no-proxy', bypass)\n}\n\n// Fix spawn ENAMETOOLONG on Windows\nconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\nthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 98.2169060261089}, {"code": "fixSystemConfig (){\n\t// Remove aria2c unrecognized options\nconst { others } = separateConfig(this.systemConfig.store)\nif (others && Object.keys(others).length > 0) {\nObject.keys(others).forEach(key => {\nthis.systemConfig.delete(key)\n})\n}\n\nconst proxy = this.getUserConfig('proxy', { enable: false })\nconst { enable, server, bypass, scope = [] } = proxy\nif (enable && server && scope.includes(PROXY_SCOPES.DOWNLOAD)) {\nthis.setSystemConfig('all-proxy', server)\nthis.setSystemConfig('no-proxy', bypass)\n}\n\n// Fix spawn ENAMETOOLONG on Windows\nconst tracker = reduceTrackerString(this.systemConfig.get('bt-tracker'))\nthis.setSystemConfig('bt-tracker', tracker)\n}", "CodeBleu_score": 97.39636058984549}, {"code": "fixSystemConfig (){\n\t\n}", "CodeBleu_score": 1.0107397220095637}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\tif (!client) {\nreturn\n}\n\ntry {\nclient.destroy(() => {\nclient = null\n})\n} catch (err) {\nlogger.warn('[Motrix] close UPnP client fail', err)\n}\n}", "CodeBleu_score": 92.76670811853336}, {"code": "closeClient (){\n\tif (!client) {\nreturn\n}\n\ntry {\nclient.destroy(() => {\nclient = null\n})\n} catch (err) {\nlogger.warn('[Motrix] close UPnP client fail', err)\n}\n}", "CodeBleu_score": 92.76670811853336}, {"code": "closeClient (){\n\t\tif (!client) {\n\t\treturn\n\t}\n\n\ttry {\n\t\tclient.destroy(() => {\n\t\t\tclient = null\n\t\t})\n\t} catch (err) {\n\t\tlogger.warn('[Motrix] close UPnP client fail', err)\n\t}\n}", "CodeBleu_score": 93.04971875731651}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\tlet bar = this.bars[page] || null\nif (!bar) {\n  try {\n    const items = this.build(this.template)\n    bar = new TouchBar({ items })\n    this.bars[page] = bar\n  } catch (e) {\n    logger.info('getTouchBarByPage fail', e)\n  }\n}\nreturn bar\n}", "CodeBleu_score": 97.1345340669617}, {"code": "getTouchBarByPage (page){\n\tconst bar = this.bars[page] || null\nif (!bar) {\ntry {\nconst items = this.build(this.template)\nbar = new TouchBar({ items })\nthis.bars[page] = bar\n} catch (e) {\nlogger.info('getTouchBarByPage fail', e)\n}\n}\nreturn bar\n}", "CodeBleu_score": 92.13154898208258}, {"code": "getTouchBarByPage (page){\n\tlet bar = this.bars[page] || null\nif (!bar) {\n  try {\n    const items = this.build(this.template)\n    bar = new TouchBar({ items })\n    this.bars[page] = bar\n  } catch (e) {\n    logger.info('getTouchBarByPage fail', e)\n  }\n}\nreturn bar\n}", "CodeBleu_score": 97.1345340669617}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\twindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide && !this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 98.03803270458879}, {"code": "handleWindowClose (pageOptions, page, window){\n\twindow.on('close', (event) => {\n  if (pageOptions.bindCloseToHide && !this.willQuit) {\n    event.preventDefault()\n\n    // @see https://github.com/electron/electron/issues/20263\n    if (window.isFullScreen()) {\n      window.once('leave-full-screen', () => window.hide())\n\n      window.setFullScreen(false)\n    } else {\n      window.hide()\n    }\n  }\n  const bounds = window.getBounds()\n  this.emit('window-closed', { page, bounds })\n})\n}", "CodeBleu_score": 98.03803270458879}, {"code": "handleWindowClose (pageOptions, page, window){\n\t\twindow.on('close', (event) => {\n\t\tif (pageOptions.bindCloseToHide && !this.willQuit) {\n\t\t\tevent.preventDefault()\n\n\t\t\t// @see https://github.com/electron/electron/issues/20263\n\t\t\tif (window.isFullScreen()) {\n\t\t\t\twindow.once('leave-full-screen', () => window.hide())\n\n\t\t\t\twindow.setFullScreen(false)\n\t\t\t} else {\n\t\t\t\twindow.hide()\n\t\t\t}\n\t\t}\n\t\tconst bounds = window.getBounds()\n\t\tthis.emit('window-closed', { page, bounds })\n\t})\n}", "CodeBleu_score": 94.40119170046033}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = path.dirname(process.execPath)\n\t\tconst appFolder = path.basename(appPath)\n\t\tconst applicationsPath = path.join('/Applications', appFolder)\n\t\tconst appExistsInApplicationsFolder = fs.existsSync(applicationsPath)\n\t\tif (appExistsInApplicationsFolder) {\n\t\t\tresolve()\n\t\t} else {\n\t\t\tconst appExistsInAppPath = fs.existsSync(appPath)\n\t\t\tif (appExistsInAppPath) {\n\t\t\t\tfs.rename(appPath, applicationsPath, error => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\treject(errorMsg + ' ' + error)\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\treject(errorMsg + 'The app does not exist in either the Applications folder or the app\\'s folder.')\n\t\t\t}\n\t\t}\n\t})\n}", "CodeBleu_score": 34.56113318830159}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst appPath = app.getPath('exe');\n\t\tconst appPathParts = appPath.split('/');\n\t\tconst appFileName = appPathParts[appPathParts.length - 1];\n\t\tconst appFileNameParts = appFileName.split('.');\n\t\tconst appName = appFileNameParts[0];\n\t\tconst appFileExtension = appFileNameParts[1];\n\t\tconst appFolderName = `${appName}.app`;\n\t\tconst appFolderPath = `${app.getPath('home')}/Applications/${appFolderName}`;\n\t\tconst appFilePath = `${appFolderPath}/${appFileName}`;\n\t\tconst appFileExists = fs.existsSync(appFilePath);\n\t\tconst appFileInApplicationsFolder = fs.existsSync(`${app.getPath('home')}/Applications/${appFileName}`);\n\t\tconst appFileInApplicationsFolderWithExtension = fs.existsSync(`${app.getPath('home')}/Applications/${appFileName}.${appFileExtension}`);\n\t\tif (appFileExists && !appFileInApplicationsFolder && !appFileInApplicationsFolderWithExtension) {\n\t\t\tfs.mkdirSync(appFolderPath);\n\t\t\tfs.renameSync(appPath, appFilePath);\n\t\t\tresolve();\n\t\t} else if (!appFileExists) {\n\t\t\treject(errorMsg);\n\t\t} else if (appFileInApplicationsFolder) {\n\t\t\treject('The application is already in the Applications folder.');\n\t\t} else if (appFileInApplicationsFolderWithExtension) {\n\t\t\treject('The application is already in the Applications folder with a different file extension.');\n\t\t}\n\t});\n}", "CodeBleu_score": 36.89290657510078}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t\tconst appPath = app.getPath('exe');\n\tconst appName = path.basename(appPath);\n\tconst appFolder = path.dirname(appPath);\n\tconst applicationsFolder = path.join(appFolder, 'Applications');\n\tconst appInApplicationsFolder = path.join(applicationsFolder, appName);\n\n\tif (appPath !== appInApplicationsFolder) {\n\t\tif (!fs.existsSync(applicationsFolder)) {\n\t\t\tfs.mkdirSync(applicationsFolder);\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tfs.rename(appPath, appInApplicationsFolder, (error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treject(errorMsg + error);\n\t\t\t\t} else {\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t} else {\n\t\treturn Promise.resolve();\n\t}\n}", "CodeBleu_score": 35.13258308040571}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\tconst {\nplatform,\nicon,\n} = options;\n\nif (icon === undefined) {\nlog.debug('No icon specified, skipping icon copying');\nreturn;\n}\n\nlog.debug('Copying icon file');\n\nconst iconPath = path.resolve(icon);\nconst iconExt = path.extname(iconPath);\n\nif (platform === 'darwin' || platform === 'mas') {\nif (options.tray !== 'false') {\nawait fs.copy(iconPath, path.join(appPath, `${appName}.png`));\n}\n} else {\nconst destination = path.join(appPath, `${appName}${iconExt}`);\nawait fs.copy(iconPath, destination);\n}\n}", "CodeBleu_score": 34.95493931259486}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\tconst log = createLogger(options.debug);\nconst icon = options.icon;\n\nif (!icon) {\nlog.debug('No icon specified');\nreturn;\n}\n\nlog.info('Copying icon file to app directory');\n\nif (process.platform === 'darwin' || process.platform === 'mas') {\nif (options.tray !== 'false') {\nconst trayIconPath = path.join(appPath, `${options.name}.png`);\nawait fs.copy(icon, trayIconPath);\nlog.info(`Copied ${icon} to ${trayIconPath}`);\n}\n} else {\nconst iconExt = path.extname(icon).toLowerCase();\nconst iconBasename = path.basename(appPath);\nconst iconFilename = `${iconBasename}${iconExt}`;\nconst iconPath = path.join(appPath, iconFilename);\nawait fs.copy(icon, iconPath);\nlog.info(`Copied ${icon} to ${iconPath}`);\n}\n}", "CodeBleu_score": 42.033102063671954}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\tconst icon = options.icon;\nif (icon === undefined) {\nlog.debug('No icon specified in options');\nreturn;\n}\n\nlog.debug('Copying icon file');\n\nconst iconPath = path.join(appPath, 'icon.png');\n\nif (process.platform === 'darwin' || process.platform === 'mas') {\nif (options.tray !== false) {\nconst trayIconPath = path.join(appPath, `${options.name}.png`);\nawait fs.copy(iconPath, trayIconPath);\n}\n} else if (process.platform === 'win32') {\nconst iconExt = path.extname(icon);\nconst iconBaseName = path.basename(icon, iconExt);\nconst iconName = `${iconBaseName}.ico`;\nconst iconDest = path.join(appPath, iconName);\nawait fs.copy(iconPath, iconDest);\n} else {\nconst iconExt = path.extname(icon);\nconst iconBaseName = path.basename(icon, iconExt);\nconst iconName = `${iconBaseName}.png`;\nconst iconDest = path.join(appPath, iconName);\nawait fs.copy(iconPath, iconDest);\n}\n}", "CodeBleu_score": 46.0217499417487}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string{\n\t\tconst hash = crypto.createHash('md5').update(url).digest('hex');\n\tconst normalizedAppName = appName.toLowerCase().replace(/[^a-z0-9-]+/g, '-').replace(/-+/g, '-').replace(/^-+|-+$/g, '');\n\treturn `${normalizedAppName}-nativefier-${hash.substring(0, 6)}`;\n}", "CodeBleu_score": 55.5295214485275}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t\tconst hash = crypto.createHash('md5').update(url).digest('hex');\n\tconst normalizedAppName = appName\n\t\t.toLowerCase()\n\t\t.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\n\t\t.replace(/\\s/g, '-')\n\t\t.replace(/-+/g, '-')\n\t\t.replace(/^-+|-+$/g, '')\n\t\t.replace(/-nativefier-/, '')\n\t\t+ '-nativefier-'\n\t\t+ hash.slice(0, 6);\n\treturn normalizedAppName;\n}", "CodeBleu_score": 53.43293743289876}, {"code": "export function normalizeAppName(appName: string, url: string): string{\n\t\tconst hash = md5(url);\n\tconst hashSubstring = hash.substring(0, 6);\n\tconst normalizedAppName = appName\n\t\t.toLowerCase()\n\t\t.replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '')\n\t\t.replace(/\\s/g, '-')\n\t\t.replace(/_/g, '-')\n\t\t.concat('-nativefier-', hashSubstring);\n\treturn normalizedAppName;\n}", "CodeBleu_score": 52.067304317501794}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 6.584793506668511}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t\n}", "CodeBleu_score": 6.584793506668511}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t", "CodeBleu_score": 6.555677126020833}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst log = (message: string) => {\n\t\t\tconsole.log(\n\t\t\t\t`[${new Date().toISOString()}] [downloadFile] ${message}`,\n\t\t\t);\n\t\t};\n\t\tlog(`Downloading file from ${fileUrl}`);\n\t\tconst request = new XMLHttpRequest();\n\t\trequest.open('GET', fileUrl);\n\t\trequest.responseType = 'arraybuffer';\n\t\trequest.onload = () => {\n\t\t\tif (request.status === 200) {\n\t\t\t\tconst data = request.response;\n\t\t\t\tif (data) {\n\t\t\t\t\tlog(`File downloaded successfully`);\n\t\t\t\t\tconst ext = getExtFromUrl(fileUrl);\n\t\t\t\t\tresolve({ data, ext });\n\t\t\t\t} else {\n\t\t\t\t\tlog(`File downloaded, but it was empty`);\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog(\n\t\t\t\t\t`File download failed with status code ${request.status}`,\n\t\t\t\t);\n\t\t\t\treject(new Error('Download failed'));\n\t\t\t}\n\t\t};\n\t\trequest.onerror = () => {\n\t\t\tlog(`File download failed`);\n\t\t\treject(new Error('Download failed'));\n\t\t};\n\t\trequest.send();\n\t});\n}", "CodeBleu_score": 41.046562485933045}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\tconst fileName = fileUrl.split('/').pop();\nconst fileExtension = fileName.split('.').pop();\nconsole.log(`Downloading file ${fileName} from ${fileUrl}`);\n\nreturn fetch(fileUrl)\n  .then(response => response.arrayBuffer())\n  .then(\n    data => ({\n      data,\n      extension: fileExtension,\n    }),\n    error => {\n      console.error(error);\n      return undefined;\n    },\n  );\n}", "CodeBleu_score": 47.77683077889006}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t", "CodeBleu_score": 29.742671282227345}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t\treturn str.split('-').filter(Boolean).map((word, i) => i ? word.substring(0, 1).toUpperCase() + word.substring(1) : word).join('');\n}", "CodeBleu_score": 46.93753365575947}, {"code": "export function camelCased(str: string): string{\n\t\treturn str.split(\"-\").filter(Boolean).map((word, i) =>\n\t\ti === 0 ? word : word[0].toUpperCase() + word.substring(1)\n\t).join(\"\");\n}", "CodeBleu_score": 36.1998481013067}, {"code": "export function camelCased(str: string): string{\n\t\treturn str\n\t\t.split(\"-\")\n\t\t.filter(Boolean)\n\t\t.map((word, index) => (index === 0 ? word : word[0].toUpperCase() + word.substring(1)))\n\t\t.join(\"\");\n}", "CodeBleu_score": 37.52330029734314}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tconst sanitizedFilename = sanitizeFilenamePlatform(platform, filenameToSanitize);\n\tif (sanitizedFilename.length === 0) {\n\t\tconsole.warn(\n\t\t\t`The sanitized filename is empty. Assigning a default application name of 'My Application'`,\n\t\t);\n\t\treturn 'My Application';\n\t}\n\tconsole.log(`The sanitized filename is ${sanitizedFilename}`);\n\treturn sanitizedFilename;\n}", "CodeBleu_score": 37.534868189555006}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t\tconst sanitizedFilename = sanitizeFilenameBase(filenameToSanitize);\n\n\tif (platform === 'linux') {\n\t\tconst sanitizedFilenameWithoutSpaces = sanitizedFilename.replace(\n\t\t\t/ /g,\n\t\t\t'',\n\t\t);\n\t\tconst sanitizedFilenameWithoutUnicode = sanitizedFilenameWithoutSpaces.replace(\n\t\t\t/[^a-zA-Z0-9_\\-\\.]/g,\n\t\t\t'',\n\t\t);\n\n\t\tif (sanitizedFilenameWithoutUnicode === '') {\n\t\t\tconsole.warn(\n\t\t\t\t`The sanitized filename is empty. The default application name ${DEFAULT_APPLICATION_NAME} will be used instead. The original filename was: ${filenameToSanitize}.`,\n\t\t\t);\n\t\t\treturn DEFAULT_APPLICATION_NAME;\n\t\t} else {\n\t\t\tconsole.log(\n\t\t\t\t`The sanitized filename is: ${sanitizedFilenameWithoutUnicode}`,\n\t\t\t);\n\t\t\treturn sanitizedFilenameWithoutUnicode;\n\t\t}\n\t} else {\n\t\tconsole.log(`The sanitized filename is: ${sanitizedFilename}`);\n\t\treturn sanitizedFilename;\n\t}\n}", "CodeBleu_score": 42.3780306350477}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t${sanitizeFilename}\n}", "CodeBleu_score": 13.493886732281856}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tif (savedCache.duration) {\n\t\tconst duration = parseInt(savedCache.duration);\n\t\tif (duration) {\n\t\t\tconst cacheTime = parseInt(savedCache.cacheTime);\n\t\t\tif (cacheTime) {\n\t\t\t\tconst currentTime = new Date().getTime();\n\t\t\t\tif (cacheTime + duration < currentTime) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 36.84456908740495}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\tconst cacheTime: number = parseInt(savedCache.cacheTime)\nconst duration: number = parseInt(savedCache.duration)\nconst currentTime: number = new Date().getTime()\nconst sum: number = cacheTime + duration\n\nreturn sum < currentTime\n}", "CodeBleu_score": 28.38702317162326}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t\tconst duration = savedCache.duration ? parseInt(savedCache.duration) : 0;\n\tconst cacheTime = savedCache.cacheTime ? parseInt(savedCache.cacheTime) : 0;\n\tconst currentTime = new Date().getTime();\n\tconst expired = cacheTime + duration < currentTime;\n\treturn expired;\n}", "CodeBleu_score": 40.48525874252806}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (timestampOptionArgument === undefined) {\n\t\treturn Date.now();\n\t}\n\n\tif (typeof timestampOptionArgument === \"number\" && timestampOptionArgument >= 0) {\n\t\treturn timestampOptionArgument;\n\t}\n\n\tthrow new TypeORMError(\n\t\t`Expected timestamp, number or undefined, got '${timestampOptionArgument}'`\n\t);\n}", "CodeBleu_score": 42.29892781342664}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (timestampOptionArgument === undefined) return Date.now();\n\tif (typeof timestampOptionArgument === \"number\" && timestampOptionArgument > 0)\n\t\treturn timestampOptionArgument;\n\tthrow new TypeORMError(\n\t\t`The timestamp option must be a positive number or undefined, ` +\n\t\t\t`but received ${timestampOptionArgument}`\n\t);\n}", "CodeBleu_score": 44.85173958429521}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t\tif (timestampOptionArgument === undefined) {\n\t\treturn Date.now()\n\t}\n\n\tif (typeof timestampOptionArgument === \"number\" && timestampOptionArgument >= 0) {\n\t\treturn timestampOptionArgument\n\t}\n\n\tthrow new TypeORMError(\n\t\t`Expected a positive number, date string, date-time string or a timestamp for update operation, ` +\n\t\t\t`instead got '${timestampOptionArgument}'.`,\n\t)\n}", "CodeBleu_score": 40.77920963491458}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t\n}", "CodeBleu_score": 1.7662619599923286}, {"code": " async dropDatabase(): Promise<void>{\n\t", "CodeBleu_score": 1.7269913428206933}, {"code": " async dropDatabase(): Promise<void>{\n\t", "CodeBleu_score": 1.7269913428206933}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t\n// if entityOrRunner is a QueryRunner, then queryRunner is the entityOrRunner and entityOrRunner is undefined\n        if (queryRunner instanceof QueryRunner) {\n            alias = entityOrRunner as string;\n            entityOrRunner = undefined;\n        }\n\n        if (this.connection.driver instanceof MongoDriver) {\n            throw new TypeORMError(`Query Builder is not supported by MongoDB.`);\n        }\n\n        // if entityOrRunner is not a string, then it is an entity\n        if (entityOrRunner && !(entityOrRunner instanceof Function) && !(entityOrRunner instanceof EntitySchema)) {\n            const metadata = this.connection.getMetadata(entityOrRunner);\n            alias = alias || metadata.name;\n            entityOrRunner = metadata.target;\n        }\n\n        // if alias is not a string, then it is a queryRunner\n        if (alias && !(alias instanceof String)) {\n            queryRunner = alias as QueryRunner;\n            alias = undefined;\n        }\n\n        return new SelectQueryBuilder(\n            this.connection,\n            entityOrRunner as EntityTarget<Entity>,\n            alias as string,\n            queryRunner,\n        );\n    }", "CodeBleu_score": 50.35903061778344}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t", "CodeBleu_score": 5.7114024388924465}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t", "CodeBleu_score": 5.7114024388924465}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t\n}", "CodeBleu_score": 12.757644319537228}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\treturn (\n\t\t<div className=\"flex flex-col\">\n\t\t\t<label className=\"flex items-center justify-between\">\n\t\t\t\t<span className=\"text-gray-700\">Compression</span>\n\t\t\t\t<span className=\"text-gray-500\">\n\t\t\t\t\t{compression}%\n\t\t\t\t\t{compression > 0 && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t{\" \"}\n\t\t\t\t\t\t\t<span className=\"text-gray-400\">\n\t\t\t\t\t\t\t\t(PNG, JPG, and WebP compression)\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</>\n\t\t\t\t\t)}\n\t\t\t\t</span>\n\t\t\t</label>\n\t\t\t<input\n\t\t\t\ttype=\"range\"\n\t\t\t\tmin=\"0\"\n\t\t\t\tmax=\"100\"\n\t\t\t\tvalue={compression}\n\t\t\t\tonChange={handleCompressionChange}\n\t\t\t\tclassName=\"w-full h-4 mt-1 bg-gray-300 rounded-full appearance-none focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n\t\t\t/>\n\t\t</div>\n\t);\n}", "CodeBleu_score": 40.30005750575819}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\treturn (\n\t\t<div className=\"flex flex-col items-center\">\n\t\t\t<label htmlFor=\"compression-input\" className=\"text-gray-500\">\n\t\t\t\tCompression\n\t\t\t</label>\n\t\t\t<div className=\"flex items-center\">\n\t\t\t\t<input\n\t\t\t\t\tid=\"compression-input\"\n\t\t\t\t\ttype=\"range\"\n\t\t\t\t\tmin=\"0\"\n\t\t\t\t\tmax=\"100\"\n\t\t\t\t\tstep=\"1\"\n\t\t\t\t\tclassName=\"w-full h-4 mt-1 rounded-md bg-gray-300 appearance-none focus:outline-none focus:ring-2 focus:ring-gray-200 focus:ring-offset-2 focus:ring-offset-gray-300\"\n\t\t\t\t\tvalue={compression}\n\t\t\t\t\tonChange={(e) => handleCompressionChange(e.target.value)}\n\t\t\t\t/>\n\t\t\t\t<div className=\"ml-2 text-gray-700 text-xs\">{compression}%</div>\n\t\t\t</div>\n\t\t\t<div className=\"mt-2\">\n\t\t\t\t{compression > 0 && (\n\t\t\t\t\t<div className=\"text-xs text-gray-500\">\n\t\t\t\t\t\tPNG, JPG, and WebP compression is lossless.\n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</div>\n\t);\n}", "CodeBleu_score": 44.192963754737384}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t\nconst [compressionValue, setCompressionValue] = React.useState(compression);\n\nReact.useEffect(() => {\n  setCompressionValue(compression);\n}, [compression]);\n\nconst handleCompressionSliderChange = (\n  event: React.ChangeEvent<HTMLInputElement>,\n) => {\n  const newCompressionValue = parseInt(event.target.value);\n  setCompressionValue(newCompressionValue);\n  handleCompressionChange(newCompressionValue);\n};\n\nconst compressionPercentage = compressionValue ? (compressionValue * 100).toFixed(2) : 0;\nconst compressionNote = compressionValue ? (\n  <p>\n    Note: PNG, JPG, and WebP compression is lossy, meaning that the image may look different after compression.\n  </p>\n) : null;\n\nreturn (\n  <div className=\"compression-input\">\n    <label htmlFor=\"compression-slider\">Compression:</label>\n    <input\n      id=\"compression-slider\"\n      type=\"range\"\n      min=\"0\"\n      max=\"100\"\n      value={compressionPercentage}\n      onChange={handleCompressionSliderChange}\n    />\n    <div className=\"compression-value\">{compressionPercentage}%</div>\n    {compressionNote}\n  </div>\n);\n}", "CodeBleu_score": 32.955732799558454}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\nconst key = `${type}-${name}`;\n\nfor (const idx in this.attributeIndex) {\n    if (idx.startsWith(key)) {\n        resArr.push(this.attributeIndex[idx]);\n    }\n}\n\nreturn resArr.flat();\n}", "CodeBleu_score": 95.49651034850106}, {"code": "findAttributesWithPrefix(type, name){\n\t\tconst resArr = [];\n\tconst key = `${type}-${name}`;\n\n\tfor (const idx in this.attributeIndex) {\n\t\tif (idx.startsWith(key)) {\n\t\t\tresArr.push(this.attributeIndex[idx]);\n\t\t}\n\t}\n\n\treturn resArr.flat();\n}", "CodeBleu_score": 93.2764422468637}, {"code": "findAttributesWithPrefix(type, name){\n\tconst resArr = [];\nconst key = `${type}-${name}`;\n\nfor (const idx in this.attributeIndex) {\n    if (idx.startsWith(key)) {\n        resArr.push(this.attributeIndex[idx]);\n    }\n}\n\nreturn resArr.flat();\n}", "CodeBleu_score": 95.49651034850106}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t\tvar childNote = db.notes.findOne({_id: branchRow.noteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = \"\";\n\t\tchildNote.sort();\n\t\tchildNote.invalidateSubtree();\n\t}\n\tvar parentNote = db.notes.findOne({_id: branchRow.parentNoteId});\n\tif (parentNote) {\n\t\tparentNote.sort();\n\t}\n}", "CodeBleu_score": 55.81157461370094}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = becca.notes.findOne({_id: branchRow.noteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = undefined;\n\t\tchildNote.parents = becca.notes.find({_id: {$in: childNote.parents}}).fetch();\n\t\tchildNote.parents.sort(becca.noteSort);\n\t\tchildNote.subtree = undefined;\n\t}\n\tvar parentNote = becca.notes.findOne({_id: branchRow.parentNoteId});\n\tif (parentNote) {\n\t\tparentNote.children = becca.notes.find({_id: {$in: parentNote.children}}).fetch();\n\t\tparentNote.children.sort(becca.noteSort);\n\t}\n}", "CodeBleu_score": 45.53939695819155}, {"code": "function branchUpdated(branchRow){\n\t\tvar childNote = db.notes.findOne({_id: branchRow.noteId});\n\tif (childNote) {\n\t\tchildNote.flatTextCache = undefined;\n\t\tchildNote.parents = undefined;\n\t\tchildNote.subtree = undefined;\n\t\tdb.notes.save(childNote);\n\t}\n\tvar parentNote = db.notes.findOne({_id: branchRow.parentNoteId});\n\tif (parentNote) {\n\t\tparentNote.children = undefined;\n\t\tdb.notes.save(parentNote);\n\t}\n}", "CodeBleu_score": 45.580162539390884}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t\tif (mime == null || mime == 'text/html') return mime;\n\tif (mime in mimeCache) return mimeCache[mime];\n\tvar parts = mime.split('/');\n\tif (parts[0] == 'text') parts.shift();\n\telse if (parts[0] == 'application') parts.shift();\n\tif (parts[0].substr(0, 2) == 'x-') parts[0] = parts[0].substr(2);\n\tmimeCache[mime] = parts.join('/');\n\treturn mimeCache[mime];\n}", "CodeBleu_score": 34.52094070752282}, {"code": "function trimMime(mime){\n\t\tif (mime === null || mime === 'text/html') {\n\t\treturn mime;\n\t}\n\tif (mime in mimeCache) {\n\t\treturn mimeCache[mime];\n\t}\n\tvar trimmed = mime.split('/')[1];\n\tif (trimmed.indexOf('x-') === 0) {\n\t\ttrimmed = trimmed.slice(2);\n\t}\n\tmimeCache[mime] = trimmed;\n\treturn trimmed;\n}", "CodeBleu_score": 39.22187211577274}, {"code": "function trimMime(mime){\n\t\tif (mime == null || mime == 'text/html') {\n\t\treturn mime;\n\t}\n\tif (!trimMime.mimeCache[mime]) {\n\t\tvar parts = mime.split('/');\n\t\tvar trimmed = parts[1];\n\t\tif (trimmed == 'text') {\n\t\t\ttrimmed = parts[2];\n\t\t} else if (trimmed == 'application') {\n\t\t\ttrimmed = parts[3];\n\t\t}\n\t\tif (trimmed.charAt(0) == '-') {\n\t\t\ttrimmed = trimmed.substring(1);\n\t\t}\n\t\ttrimMime.mimeCache[mime] = trimmed;\n\t}\n\treturn trimMime.mimeCache[mime];\n}", "CodeBleu_score": 36.86665786173183}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t\t// Get creation date from baseNote\n\tconst creationDate = baseNote.created;\n\t// Convert creation date to a timestamp\n\tconst creationDateTimestamp = creationDate.getTime();\n\t// Calculate minDate\n\tconst minDate = new Date(creationDateTimestamp - 1000 * 60 * 60 * 24 * 30);\n\t// Calculate minExcludedDate\n\tconst minExcludedDate = new Date(creationDateTimestamp - 1000 * 60 * 60 * 24 * 30 * 2);\n\t// Calculate maxExcludedDate\n\tconst maxExcludedDate = new Date(creationDateTimestamp + 1000 * 60 * 60 * 24 * 30);\n\t// Calculate maxDate\n\tconst maxDate = new Date(creationDateTimestamp + 1000 * 60 * 60 * 24 * 30 * 2);\n\t// Return date limits\n\treturn {\n\t\tminDate: minDate.toISOString(),\n\t\tminExcludedDate: minExcludedDate.toISOString(),\n\t\tmaxExcludedDate: maxExcludedDate.toISOString(),\n\t\tmaxDate: maxDate.toISOString(),\n\t};\n}", "CodeBleu_score": 27.14963227131536}, {"code": "function buildDateLimits(baseNote){\n\t\tconst creationDate = baseNote.created;\n\tconst creationDateTimestamp = creationDate.getTime();\n\tconst minDate = new Date(creationDateTimestamp - 1000 * 60 * 60 * 24 * 365);\n\tconst minExcludedDate = new Date(creationDateTimestamp - 1000 * 60 * 60 * 24 * 365 * 2);\n\tconst maxExcludedDate = new Date(creationDateTimestamp + 1000 * 60 * 60 * 24 * 365);\n\tconst maxDate = new Date(creationDateTimestamp + 1000 * 60 * 60 * 24 * 365 * 2);\n\treturn {\n\t\tminDate: formatDate(minDate),\n\t\tminExcludedDate: formatDate(minExcludedDate),\n\t\tmaxExcludedDate: formatDate(maxExcludedDate),\n\t\tmaxDate: formatDate(maxDate),\n\t};\n}", "CodeBleu_score": 28.241920943717215}, {"code": "function buildDateLimits(baseNote){\n\t\tvar creationDate = baseNote.attributes.created.value;\n\tvar creationDateObj = new Date(creationDate);\n\tvar creationDateTimestamp = creationDateObj.getTime();\n\tvar minDate = new Date(creationDateTimestamp - 31536000000);\n\tvar minExcludedDate = new Date(creationDateTimestamp - 86400000);\n\tvar maxExcludedDate = new Date(creationDateTimestamp + 86400000);\n\tvar maxDate = new Date(creationDateTimestamp + 31536000000);\n\tvar minDateUTC = formatDate(minDate);\n\tvar minExcludedDateUTC = formatDate(minExcludedDate);\n\tvar maxExcludedDateUTC = formatDate(maxExcludedDate);\n\tvar maxDateUTC = formatDate(maxDate);\n\treturn {\n\t\tminDate: minDateUTC,\n\t\tminExcludedDate: minExcludedDateUTC,\n\t\tmaxExcludedDate: maxExcludedDateUTC,\n\t\tmaxDate: maxDateUTC\n\t}\n}", "CodeBleu_score": 23.75797382633494}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t}", "CodeBleu_score": 1.0851200219377866}, {"code": "_setContent(content, opts = {}){\n\t\n}", "CodeBleu_score": 1.0851200219377866}, {"code": "_setContent(content, opts = {}){\n\t}", "CodeBleu_score": 1.0851200219377866}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t\t// Retrieve the inbox note\n\tconst dateNote = await this.dateNoteService.getDateNote();\n\n\t// Create the new note\n\tawait this.noteService.createNote(dateNote.id, {\n\t\ttitle: 'New Note',\n\t\tcontent: 'New note content',\n\t\ttype: 'text',\n\t\tprotectionStatus: 'protected',\n\t});\n\n\t// Open the new note in a tab\n\tawait this.openNoteCommand.execute(dateNote.id);\n\n\t// Focus and select the title of the new note\n\tawait this.focusNoteTitleCommand.execute(dateNote.id);\n}", "CodeBleu_score": 19.876693877389375}, {"code": "async createNoteIntoInboxCommand(){\n\t\tconst dateNoteService = new DateNoteService();\n\tconst inboxNote = await dateNoteService.getInboxNote();\n\tconst newNote = await this.createNoteCommand(inboxNote);\n\tawait newNote.openInTabHoist();\n\tthis.dispatch(new NoteEvent(NoteEventTypes.FOCUS_NOTE, newNote));\n\tthis.dispatch(new NoteEvent(NoteEventTypes.SELECT_NOTE, newNote));\n}", "CodeBleu_score": 30.042492687168863}, {"code": "async createNoteIntoInboxCommand(){\n\t\tconst inboxNote = await this.dateNoteService.getNoteForToday();\n\tconst newNote = await this.noteService.createNote({\n\t\tparent_id: inboxNote.id,\n\t\ttitle: this.noteTitle,\n\t\tcontent: this.noteContent,\n\t\ttype: this.noteType,\n\t\tis_protected: this.noteIsProtected,\n\t});\n\tawait this.noteService.openNote(newNote.id);\n\tthis.eventBus.emit('note:focus-title', newNote.id);\n}", "CodeBleu_score": 38.9872090843254}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tconst activeNote = await appContext.noteManager.getNoteById(noteId);\n\tconst activeNoteContext = await appContext.noteManager.getActiveNoteContext();\n\tif (activeNoteContext.isSearchContext) {\n\t\treturn;\n\t}\n\tconst isHoisted = await appContext.noteManager.isNoteHoisted(activeNote.id);\n\tif (isHoisted) {\n\t\tawait appContext.noteManager.unhoistNote(activeNote.id);\n\t} else {\n\t\tawait appContext.noteManager.hoistNote(activeNote.id);\n\t}\n}", "CodeBleu_score": 44.093583528525436}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tconst note = await appContext.noteManager.getNote(noteId);\n\tconst activeNoteContext = appContext.tabManager.getActiveContext();\n\tif (note.isSearch) {\n\t\treturn;\n\t}\n\tif (note.isHoisted) {\n\t\tawait appContext.noteManager.unhoistNote(noteId);\n\t\tif (activeNoteContext && activeNoteContext.noteId === noteId) {\n\t\t\tawait appContext.tabManager.setActiveContext(null);\n\t\t}\n\t} else {\n\t\tawait appContext.noteManager.hoistNote(noteId);\n\t\tif (activeNoteContext && activeNoteContext.type !== 'search') {\n\t\t\tawait appContext.tabManager.setActiveContext({type: 'note', noteId});\n\t\t}\n\t}\n}", "CodeBleu_score": 50.350068540262285}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t\tconst note = await appContext.noteManager.getNoteById(noteId);\n\tconst activeNoteContext = appContext.tabManager.getActiveNoteContext();\n\n\tif (note.isSearch) {\n\t\treturn;\n\t}\n\n\tif (activeNoteContext && activeNoteContext.noteId === noteId) {\n\t\tawait appContext.tabManager.setActiveNoteContext(null);\n\t\treturn;\n\t}\n\n\tawait appContext.tabManager.setActiveNoteContext({noteId});\n}", "CodeBleu_score": 45.37583952578865}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = generateHash({notePath, hoistedNoteId, viewScope});\n\tconst url = `${window.location.origin}${window.location.pathname}#${hash}`;\n\tif (window.ipcRenderer) {\n\t\twindow.ipcRenderer.send('open-window', {url});\n\t} else {\n\t\twindow.open(url, 'Obsidian Web', 'width=800,height=600');\n\t}\n}", "CodeBleu_score": 36.18346296266289}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await this.generateHash(notePath, hoistedNoteId, viewScope);\n\n\t// If running in Electron, send a message to the main process to open a new window.\n\tif (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n\t\twindow.ipcRenderer.send('open-window', hash);\n\t}\n\n\t// Otherwise, open a new window in the user's default browser.\n\telse {\n\t\tconst url = `${window.location.origin}/#${hash}`;\n\t\tconst width = 1200;\n\t\tconst height = 800;\n\t\tconst left = (screen.width / 2) - (width / 2);\n\t\tconst top = (screen.height / 2) - (height / 2);\n\t\twindow.open(url, 'Obsidian', `toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=yes, resizable=yes, width=${width}, height=${height}, top=${top}, left=${left}`);\n\t}\n}", "CodeBleu_score": 43.03050276897898}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t\tconst hash = await this.hash(notePath, hoistedNoteId, viewScope);\n\tif (typeof window !== 'undefined' && window.require) {\n\t\tconst {ipcRenderer} = window.require('electron');\n\t\tipcRenderer.send('open-in-window', hash);\n\t} else {\n\t\tconst url = `${window.location.origin}/?hash=${hash}`;\n\t\tconst width = 1000;\n\t\tconst height = 700;\n\t\tconst left = (screen.width / 2) - (width / 2);\n\t\tconst top = (screen.height / 2) - (height / 2);\n\t\tconst params = `width=${width},height=${height},left=${left},top=${top}`;\n\t\twindow.open(url, 'Obsidian', params);\n\t}\n}", "CodeBleu_score": 50.16951677958037}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t\tconst activeContext = await this.tabManager.getActiveContext();\n\tif (!activeContext) {\n\t\treturn;\n\t}\n\n\tconst { ntxId, note } = activeContext;\n\tif (note.type !== 'code') {\n\t\treturn;\n\t}\n\n\tconst { mime } = note;\n\tconst { id, title, content } = note;\n\n\tconst message = {\n\t\tid,\n\t\ttitle,\n\t\tcontent,\n\t\tmime,\n\t\tntxId,\n\t};\n\n\tif (mime === 'application/javascript') {\n\t\tawait this.runFrontendNote(message);\n\t} else if (mime === 'application/sql') {\n\t\tawait this.runSQLiteNote(message);\n\t} else {\n\t\tawait this.runBackendNote(message);\n\t}\n}", "CodeBleu_score": 29.117966049048732}, {"code": "async runActiveNoteCommand(){\n\t\tconst activeContext = await this.getActiveContext();\n\tconst note = activeContext.note;\n\tconst ntxId = activeContext.ntxId;\n\n\t// Ensure the command runs only for notes of type 'code'.\n\tif (note.type !== 'code') {\n\t\treturn;\n\t}\n\n\t// Depending on the note's MIME type, execute the note in different environments.\n\tswitch (note.mime) {\n\t\tcase 'text/x-sql': {\n\t\t\tawait this.runSql(ntxId, note);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'text/x-python': {\n\t\t\tawait this.runPython(ntxId, note);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'text/x-javascript':\n\t\tcase 'text/javascript':\n\t\tcase 'application/javascript': {\n\t\t\tawait this.runJavascript(ntxId, note);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'text/x-typescript':\n\t\tcase 'text/typescript':\n\t\tcase 'application/typescript': {\n\t\t\tawait this.runTypescript(ntxId, note);\n\t\t\tbreak;\n\t\t}\n\t\tdefault: {\n\t\t\tawait this.runBundle(ntxId, note);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Show a message indicating the note execution.\n\tthis.showNoteExecutedMessage(note);\n}", "CodeBleu_score": 26.13064020146398}, {"code": "async runActiveNoteCommand(){\n\t\tconst activeContext = await this.tabManager.getActiveContext();\n\tconst ntxId = activeContext.ntxId;\n\tconst note = activeContext.note;\n\tconst noteType = note.getNoteType();\n\n\tif (noteType === 'code') {\n\t\tconst noteContent = note.getNoteContent();\n\t\tconst mimeType = note.getMimeType();\n\n\t\tif (mimeType === 'application/javascript') {\n\t\t\tconst bundle = await this.bundleManager.getBundle(noteContent);\n\t\t\tconst result = await this.bundleManager.executeBundle(bundle);\n\t\t\tconst resultStr = JSON.stringify(result);\n\t\t\tawait this.tabManager.showNotification(resultStr);\n\t\t} else if (mimeType === 'application/sql') {\n\t\t\tconst result = await this.sqliteManager.executeSql(noteContent);\n\t\t\tconst resultStr = JSON.stringify(result);\n\t\t\tawait this.tabManager.showNotification(resultStr);\n\t\t} else if (mimeType === 'application/json') {\n\t\t\tconst result = await this.sqliteManager.executeJson(noteContent);\n\t\t\tconst resultStr = JSON.stringify(result);\n\t\t\tawait this.tabManager.showNotification(resultStr);\n\t\t} else {\n\t\t\tconst result = await this.backendManager.executeScript(noteContent);\n\t\t\tconst resultStr = JSON.stringify(result);\n\t\t\tawait this.tabManager.showNotification(resultStr);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.423087097317683}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t\tif (this.note.isReadOnly) {\n\t\treturn true;\n\t}\n\n\tif (this.note.isLabelTruthy('read-only')) {\n\t\treturn true;\n\t}\n\n\tif (this.note.viewMode === 'source') {\n\t\treturn false;\n\t}\n\n\tconst blob = await this.note.getBlob();\n\tconst size = blob.size;\n\n\tif (size > 0 && size < this.note.sizeLimit) {\n\t\treturn false;\n\t}\n\n\treturn this.note.isLabelFalsy('autoReadOnlyDisabled');\n}", "CodeBleu_score": 46.8516175750096}, {"code": "async isReadOnly(){\n\tif (this.viewMode === 'source') {\n            return true;\n        }\n\n        if (this.note.isLabelTruthy('readOnly')) {\n            return true;\n        }\n\n        if (this.note.type === 'text' || this.note.type === 'code') {\n            return false;\n        }\n\n        let blob = await this.note.getBlob();\n        if (blob.size > froca.settings.autoReadOnlySizeLimit && !this.note.isLabelTruthy('autoReadOnlyDisabled')) {\n            return true;\n        }\n\n        return false;\n    }", "CodeBleu_score": 51.26573312038683}, {"code": "async isReadOnly(){\n\t", "CodeBleu_score": 0.9993254824567835}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\t// If no ntxId is provided, get the active context.\n\tif (!ntxId) {\n\t\tconst activeContext = this.getActiveContext();\n\t\tif (activeContext) {\n\t\t\tntxId = activeContext.ntxId;\n\t\t}\n\t}\n\n\t// If no ntxId is provided and there is no active context, open the root note.\n\tif (!ntxId) {\n\t\treturn await this.openNote(hoistedNoteId);\n\t}\n\n\t// If there is an active context, check if it has the same ntxId.\n\tif (ntxId === this.activeNtxId) {\n\t\tconst activeContext = this.getActiveContext();\n\t\tif (activeContext) {\n\t\t\treturn activeContext;\n\t\t}\n\t}\n\n\t// If there is an active context, check if it has the same ntxId.\n\tconst existingContext = this.getNoteContextById(ntxId);\n\tif (existingContext) {\n\t\t// Update the hoistedNoteId.\n\t\texistingContext.hoistedNoteId = hoistedNoteId;\n\t\treturn existingContext;\n\t}\n\n\t// If there is an active context, check if it has the same ntxId.\n\tconst activeContext = this.getActiveContext();\n\tif (activeContext) {\n\t\t// Add the new context as a child.\n\t\tactiveContext.addChild(ntxId, hoistedNoteId);\n\t\t// Trigger the 'newNoteContextCreated' event.\n\t\tthis.trigger('newNoteContextCreated', {\n\t\t\tntxId: ntxId,\n\t\t\tmainNtxId: mainNtxId,\n\t\t\thoistedNoteId: hoistedNoteId\n\t\t});\n\t\t// Return the new context.\n\t\treturn this.getNoteContextById(ntxId);\n\t}\n\n\t// If there is no active context, open the root note.\n\treturn await this.openNote(hoistedNoteId);\n}", "CodeBleu_score": 44.684099761204756}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\tif (this.isMobile) {\n\t\t// If a note context is already active, return it\n\t\tif (this.getActiveContext()) {\n\t\t\treturn this.getActiveContext();\n\t\t}\n\t\t// Otherwise, search among existing children\n\t\telse {\n\t\t\tfor (const childNtxId of this.childNtxIds) {\n\t\t\t\tconst childNtx = this.getNoteContextById(childNtxId);\n\t\t\t\tif (childNtx.noteId === hoistedNoteId) {\n\t\t\t\t\treturn childNtx;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Create a new note context\n\tconst newNtx = new NoteContext(this, ntxId, hoistedNoteId, mainNtxId);\n\tthis.childNtxIds.push(newNtx.ntxId);\n\n\t// Trigger an event\n\tthis.triggerEvent('newNoteContextCreated', newNtx);\n\n\treturn newNtx;\n}", "CodeBleu_score": 38.199143407743975}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t\tlet ntx = this.getNoteContextById(ntxId);\n\tif (ntx) {\n\t\tif (this.isMobile) {\n\t\t\tthis.setActiveNoteContext(ntxId);\n\t\t} else {\n\t\t\tntx.hoistedNoteId = hoistedNoteId;\n\t\t}\n\t\treturn ntx;\n\t}\n\n\tif (this.isMobile) {\n\t\tthis.setActiveNoteContext(null);\n\t}\n\n\tntx = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n\tthis.noteContexts.push(ntx);\n\tthis.emit('newNoteContextCreated', ntx);\n\treturn ntx;\n}", "CodeBleu_score": 43.084922877404075}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\tconst branchIdPos = {};\n\nfor (const branchId of Object.values(this.childToBranch)) {\nbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n}\n\nthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.10497917881968}, {"code": "sortChildren(){\n\tconst branchIdPos = {};\n\nfor (const branchId of Object.values(this.childToBranch)) {\nbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n}\n\nthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.10497917881968}, {"code": "sortChildren(){\n\tconst branchIdPos = {};\n\nfor (const branchId of Object.values(this.childToBranch)) {\nbranchIdPos[branchId] = this.froca.getBranch(branchId).notePosition;\n}\n\nthis.children.sort((a, b) => branchIdPos[this.childToBranch[a]] - branchIdPos[this.childToBranch[b]]);\n}", "CodeBleu_score": 97.10497917881968}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (newParentBranch.noteType === 'search') {\n\t\tawait showError('Cannot move to a search note');\n\t\treturn;\n\t}\n\n\tconst branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n\tif (branchIdsToMoveFiltered.length === 0) {\n\t\tawait showError('Cannot move to the root note');\n\t\treturn;\n\t}\n\n\tconst newParentNoteId = newParentBranch.noteId;\n\n\tfor (const branchId of branchIdsToMoveFiltered) {\n\t\tconst branch = froca.getBranch(branchId);\n\n\t\tif (branch.noteId === hoistedNoteService.getHoistedNoteId()) {\n\t\t\tawait showError('Cannot move the hoisted note');\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentNoteId = branch.noteId;\n\n\t\tif (parentNoteId === newParentNoteId) {\n\t\t\tawait showError('Cannot move a note to its own parent');\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentNote = froca.getNote(parentNoteId);\n\n\t\tif (parentNote.noteType === 'search') {\n\t\t\tawait showError('Cannot move a note to a search note');\n\t\t\treturn;\n\t\t}\n\n\t\tconst response = await serverService.moveBranch(branchId, newParentNoteId);\n\n\t\tif (!response.ok) {\n\t\t\tawait showError('Could not move note');\n\t\t\treturn;\n\t\t}\n\t}\n\n\tawait showSuccess('Moved note');\n}", "CodeBleu_score": 44.887698169802725}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t\tconst parentBranch = froca.getBranch(newParentBranchId);\n\tconst parentNote = froca.getNote(parentBranch.noteId);\n\n\tif (!parentNote) {\n\t\treturn;\n\t}\n\n\tif (parentNote.type === 'search') {\n\t\treturn;\n\t}\n\n\tconst branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n\tfor (let branchId of branchIdsToMoveFiltered) {\n\t\tconst branch = froca.getBranch(branchId);\n\n\t\tif (branch.noteId === hoistedNoteService.getHoistedNoteId()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst request = {\n\t\t\tbranchId: branch.id,\n\t\t\tnewParentBranchId: newParentBranchId,\n\t\t};\n\n\t\ttry {\n\t\t\tawait froca.call('moveBranch', request);\n\t\t} catch (error) {\n\t\t\talert(error.message);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 47.02979059520359}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t\tconst newParentBranch = froca.getBranch(newParentBranchId);\n\n\tif (!newParentBranch) {\n\t\treturn;\n\t}\n\n\tif (newParentBranch.noteType === 'search') {\n\t\treturn;\n\t}\n\n\tconst branchIdsToMoveFiltered = filterRootNote(branchIdsToMove);\n\n\tfor (const branchId of branchIdsToMoveFiltered) {\n\t\tconst branch = froca.getBranch(branchId);\n\n\t\tif (branch.noteId === hoistedNoteService.getHoistedNoteId()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst parentNote = froca.getNote(branch.noteId);\n\n\t\tif (parentNote.noteType === 'search') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst newParentNote = froca.getNote(newParentBranch.noteId);\n\n\t\tconst request = {\n\t\t\tbranchId: branchId,\n\t\t\tnewParentNoteId: newParentNote.noteId,\n\t\t\tnewParentNoteType: newParentNote.noteType\n\t\t};\n\n\t\ttry {\n\t\t\tawait froca.request('moveBranch', request);\n\t\t} catch (err) {\n\t\t\tconst errorMessage = err.message || 'Unknown error';\n\n\t\t\talert(`Error moving branch to new parent note: ${errorMessage}`);\n\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 50.497957674153724}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t\tlet activeContext = await getActiveContext();\n\tlet activeNotePath = activeContext.note.path;\n\tif (activeNotePath.length > 1) {\n\t\tactiveNotePath.pop();\n\t\tawait setActiveNotePath(activeNotePath);\n\t}\n}", "CodeBleu_score": 28.920565395709435}, {"code": "async function activateParentNotePath(){\n\t\tconst context = await ink.getActiveContext();\n\tconst notePath = context.notePath;\n\tconst parentNotePath = notePath.slice(0, notePath.length - 1);\n\tif (parentNotePath.length > 0) {\n\t\tawait ink.setActiveNotePath(parentNotePath);\n\t}\n}", "CodeBleu_score": 41.46005880588854}, {"code": "async function activateParentNotePath(){\n\t\tconst activeContext = await ink.getActiveContext();\n\tconst activeNotePath = activeContext.notePath;\n\tconst activeNotePathArray = activeNotePath.split(NOTE_PATH_SEPARATOR);\n\tconst parentNotePathArray = activeNotePathArray.slice(0, -1);\n\tconst parentNotePath = parentNotePathArray.join(NOTE_PATH_SEPARATOR);\n\tif (parentNotePath) {\n\t\tawait ink.setContext(parentNotePath);\n\t}\n}", "CodeBleu_score": 41.61001739000773}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t", "CodeBleu_score": 0.4431612227274808}, {"code": "async function copy(branchIds){\n\t", "CodeBleu_score": 0.4431612227274808}, {"code": "async function copy(branchIds){\n\t", "CodeBleu_score": 0.4431612227274808}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tconst result: IHostsBasicData = [];\n\tconst flattenedData = flatten(data);\n\tflattenedData.forEach((item: IHostsBasicDataItem) => {\n\t\tif (item.type === 'folder') {\n\t\t\tif (!Array.isArray(item.children)) {\n\t\t\t\titem.children = [];\n\t\t\t}\n\t\t} else if (item.type === 'group') {\n\t\t\tif (!Array.isArray(item.include)) {\n\t\t\t\titem.include = [];\n\t\t\t}\n\t\t}\n\t\titem.content = '';\n\t});\n\treturn result;\n}", "CodeBleu_score": 49.441319672376274}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\tconst newData = data.map(item => {\n\t\tif (item.type === 'folder') {\n\t\t\tif (!Array.isArray(item.children)) {\n\t\t\t\titem.children = [];\n\t\t\t}\n\t\t} else if (item.type === 'group') {\n\t\t\tif (!Array.isArray(item.include)) {\n\t\t\t\titem.include = [];\n\t\t\t}\n\t\t}\n\t\titem.content = '';\n\t\treturn item;\n\t});\n\treturn newData;\n}", "CodeBleu_score": 42.11159003224941}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t\t// Iterate through each item in the list\n\tdata.forEach((item: IHostsBasicDataItem) => 27 {\n\t\t// If the item is a folder, ensure the children property is an array\n\t\tif (item.type === 'folder') 28 {\n\t\t\titem.children = item.children || [];\n\t\t}\n\n\t\t// If the item is a group, ensure the include property is an array\n\t\tif (item.type === 'group') 29 {\n\t\t\titem.include = item.include || [];\n\t\t}\n\n\t\t// If the item is a folder or group, set the content property to an empty string\n\t\tif (item.type === 'folder' || item.type === 'group') 30 {\n\t\t\titem.content = '';\n\t\t}\n\t});\n\n\treturn data;\n}", "CodeBleu_score": 43.28746533517448}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t\tconst historyLimit = configGet('historyLimit') as number;\n\tif (historyLimit > 0) {\n\t\tconst history = await swhdb.collection.history.all();\n\t\tif (history.length > historyLimit) {\n\t\t\tawait deleteHistory(history.length - historyLimit);\n\t\t}\n\t\tconst id = uuid4();\n\t\tconst timestamp = new Date().getTime();\n\t\tawait swhdb.collection.history.insert({\n\t\t\tid,\n\t\t\tcontent,\n\t\t\ttimestamp\n\t\t});\n\t}\n}", "CodeBleu_score": 30.6427294946129}, {"code": "const addHistory = async (content: string) =>{\n\t\tconst historyLimit = await configGet('historyLimit');\n\tif (historyLimit && !isNaN(historyLimit) && historyLimit > 0) {\n\t\tconst history = await swhdb.collection.history.all();\n\t\tif (history.length >= historyLimit) {\n\t\t\tawait deleteHistory(history.length - historyLimit);\n\t\t}\n\t\tconst id = uuidv4();\n\t\tconst timestamp = new Date().getTime();\n\t\tawait swhdb.collection.history.insert({\n\t\t\tid,\n\t\t\tcontent,\n\t\t\ttimestamp\n\t\t});\n\t}\n}", "CodeBleu_score": 31.169667736722158}, {"code": "const addHistory = async (content: string) =>{\n\t\tconst historyLimit = await configGet('historyLimit')\n\tif (!historyLimit || historyLimit < 1) {\n\t\treturn\n\t}\n\n\tconst history = await swhdb.collection.history.all()\n\tif (history.length > historyLimit) {\n\t\tawait deleteHistory(history.length - historyLimit)\n\t}\n\n\tconst id = uuid4()\n\tawait swhdb.collection.history.insert({\n\t\tid,\n\t\tcontent,\n\t\ttimestamp: new Date().getTime(),\n\t})\n}", "CodeBleu_score": 33.82215574991606}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder: string = getDataFolder();\n\tconst filePath: string = path.join(dataFolder, 'hosts-basic.json');\n\tconst defaultData: IHostsBasicData = {\n\t\thosts: [],\n\t\tip: '',\n\t\tlastUpdated: '',\n\t\ttimestamp: 0,\n\t};\n\n\tif (!fs.existsSync(filePath)) {\n\t\treturn defaultData;\n\t}\n\n\ttry {\n\t\tconst data: string = await fs.promises.readFile(filePath, 'utf8');\n\t\tconst hostsData: IHostsBasicData = JSON.parse(data);\n\t\treturn cleanHostsList(hostsData);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn defaultData;\n\t}\n}", "CodeBleu_score": 47.57441378074721}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder: string = getDataFolder();\n\tconst filePath: string = path.join(dataFolder, 'hosts-basic.json');\n\n\tif (!fs.existsSync(filePath)) {\n\t\treturn {\n\t\t\thosts: [],\n\t\t\tsources: [],\n\t\t};\n\t}\n\n\ttry {\n\t\tconst fileContent: string = await fs.promises.readFile(filePath, 'utf-8');\n\t\tconst parsedData: IHostsBasicData = JSON.parse(fileContent);\n\n\t\treturn cleanHostsList(parsedData);\n\t} catch (error) {\n\t\tconsole.error(error);\n\n\t\treturn {\n\t\t\thosts: [],\n\t\t\tsources: [],\n\t\t};\n\t}\n}", "CodeBleu_score": 43.04905585757254}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t\tconst dataFolder = getDataFolder();\n\tconst oldDataFilePath = path.join(dataFolder, \"hosts-old.json\");\n\n\tconst defaultData: IHostsBasicData = {\n\t\thosts: [],\n\t\tlastUpdate: 0,\n\t\tsources: [],\n\t};\n\n\tif (!fs.existsSync(oldDataFilePath)) {\n\t\treturn defaultData;\n\t}\n\n\ttry {\n\t\tconst oldData = await fs.promises.readFile(oldDataFilePath, \"utf-8\");\n\t\tconst parsedOldData = JSON.parse(oldData);\n\n\t\treturn cleanHostsList(parsedOldData);\n\t} catch (error) {\n\t\tconsole.error(error);\n\t\treturn defaultData;\n\t}\n}", "CodeBleu_score": 47.43636871988506}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) {\n\t\treturn swhdb;\n\t}\n\n\tconst data_dir = await getLocalDataDir();\n\tconst db_dir = path.join(data_dir, 'swhdb');\n\tconst db = new PotDb(db_dir);\n\tawait db.init();\n\tlogger.info(`swhdb database directory: ${db_dir}`);\n\tswhdb = db;\n\treturn db;\n}", "CodeBleu_score": 39.933488170882775}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (!swhdb) {\n\t\tconst data_dir = await getStorageItem('data_dir');\n\t\tif (!data_dir) {\n\t\t\tthrow new Error('No data directory found in local storage');\n\t\t}\n\t\tconst db_dir = path.join(data_dir, 'swhdb');\n\t\tswhdb = new PotDb(db_dir);\n\t\tlog.info(`swhdb directory: ${swhdb.db_dir}`);\n\t}\n\treturn swhdb;\n}", "CodeBleu_score": 45.3306615803662}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t\tif (swhdb) {\n\t\treturn swhdb;\n\t}\n\n\tconst data_dir = await get_data_dir();\n\tconst db_dir = path.join(data_dir, \"swhdb\");\n\tswhdb = new PotDb(db_dir);\n\tlog_info(`swhdb directory: ${db_dir}`);\n\treturn swhdb;\n}", "CodeBleu_score": 40.418942577267956}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { url, refreshInterval } = hosts;\n\n\tif (refreshInterval === undefined) {\n\t\treturn true;\n\t}\n\n\tconst now = new Date().getTime();\n\tconst lastRefresh = hosts.lastRefresh || now;\n\tconst elapsed = now - lastRefresh;\n\n\tif (isNaN(elapsed)) {\n\t\treturn true;\n\t}\n\n\tif (elapsed > refreshInterval) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 34.35588703017533}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { url, lastRefresh, refreshInterval } = hosts;\n\tconst now = new Date().getTime();\n\tif (!url || !refreshInterval) {\n\t\treturn false;\n\t}\n\tif (!lastRefresh) {\n\t\treturn true;\n\t}\n\tconst elapsed = now - lastRefresh;\n\treturn elapsed > refreshInterval;\n}", "CodeBleu_score": 35.34572854553091}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t\tconst { lastRefresh, refreshInterval, url } = hosts;\n\tconst currentTime = new Date().getTime();\n\n\tif (!lastRefresh) {\n\t\treturn true;\n\t}\n\n\tif (!url || !url.match(VALID_URL_REGEX)) {\n\t\treturn false;\n\t}\n\n\tconst timeElapsed = currentTime - lastRefresh;\n\treturn timeElapsed >= refreshInterval;\n}", "CodeBleu_score": 37.4859634731316}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\tconst callbackId = `${action}-${Math.random()}`;\n\tconst promise = new Promise((resolve, reject) => {\n\t\tipcRenderer.once(callbackId, (event: any, response: any) => {\n\t\t\tif (response.success) {\n\t\t\t\tresolve(response.data);\n\t\t\t} else {\n\t\t\t\treject(new Error(response.error));\n\t\t\t}\n\t\t});\n\t});\n\tipcRenderer.send('action', { action, params, callbackId });\n\treturn promise;\n}", "CodeBleu_score": 40.54064853093203}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\tconst callbackId = uuidv4();\n\tipcRenderer.send(action, callbackId, ...params);\n\treturn new Promise((resolve, reject) => {\n\t\tipcRenderer.once(callbackId, (event, response) => {\n\t\t\tif (response.status === 'success') {\n\t\t\t\tresolve(response.data);\n\t\t\t} else {\n\t\t\t\treject(new Error(response.error));\n\t\t\t}\n\t\t});\n\t});\n}", "CodeBleu_score": 40.3538738497734}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t\tconst callbackId = uuidv4()\n\treturn new Promise((resolve, reject) => {\n\t\tipcRenderer.once(callbackId, (event, response) => {\n\t\t\tif (response.error) {\n\t\t\t\treject(response.error)\n\t\t\t} else {\n\t\t\t\tresolve(response.data)\n\t\t\t}\n\t\t})\n\t\tipcRenderer.send(action, { callbackId, params })\n\t})\n}", "CodeBleu_score": 37.26278367990682}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t\tif (!editor) {\n\t\tawait sleep(100);\n\t\treturn loadContent(is_new);\n\t}\n\tif (is_new) {\n\t\teditor.clearHistory();\n\t}\n\tif (hosts_id) {\n\t\tconst response = await fetch(\"/api/v1/hosts/\" + hosts_id);\n\t\tconst hosts = await response.json();\n\t\tif (hosts.error) {\n\t\t\talert(hosts.error);\n\t\t} else {\n\t\t\teditor.setValue(hosts.content);\n\t\t}\n\t} else {\n\t\tconst response = await fetch(\"/api/v1/hosts\");\n\t\tconst hosts = await response.json();\n\t\tif (hosts.error) {\n\t\t\talert(hosts.error);\n\t\t} else {\n\t\t\teditor.setValue(hosts.content);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.28998966775613}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (!editor) {\n\t\tawait sleep(100);\n\t\tloadContent(is_new);\n\t\treturn;\n\t}\n\n\tif (is_new) {\n\t\teditor.setValue('');\n\t}\n\n\tif (hosts_id == 0) {\n\t\tconst response = await fetch('/api/v1/system/hosts');\n\t\tconst hosts = await response.json();\n\t\teditor.setValue(hosts);\n\t} else {\n\t\tconst response = await fetch('/api/v1/hosts/' + hosts_id);\n\t\tconst hosts = await response.json();\n\t\teditor.setValue(hosts);\n\t}\n}", "CodeBleu_score": 39.44768172221023}, {"code": "const loadContent = async (is_new = false) =>{\n\t\tif (editor !== undefined) {\n\t\tif (is_new) {\n\t\t\teditor.clearHistory();\n\t\t}\n\t\tconst hosts_id = document.getElementById('hosts_id').value;\n\t\tconst url = '/hosts/get_content/' + hosts_id;\n\t\tconst response = await fetch(url);\n\t\tconst content = await response.text();\n\t\teditor.setValue(content);\n\t} else {\n\t\tsetTimeout(loadContent, 100);\n\t}\n}", "CodeBleu_score": 44.7712545007121}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\tcm_editor\n      .getDoc: s\ncm_editor\n      .getDoc()\n      .getLine: s\ncm_editor\n      .getDoc()\n      .getLine()\n      .trim: s\ncm_editor\n      .getDoc()\n      .getLine()\n      .trim()\n      .startsWith: s\ncm_editor\n      .getDoc()\n      .getLine()\n      .trim()\n      .startsWith(\"#\"): s\ncm_editor\n      .getDoc()\n      .getLine()\n      .trim()\n      .startsWith(\"#\")\n      ? cm_editor\n          .getDoc()\n          .replaceRange: s\ncm_editor\n          .getDoc()\n          .replaceRange(\n            \"\",\n            cm_editor\n              .getDoc()\n              .getCursor(),\n            cm_editor\n              .getDoc()\n              .getCursor()\n              .line\n          )\n      : cm_editor\n          .getDoc()\n          .replaceRange: s\ncm_editor\n          .getDoc()\n          .replaceRange(\n            \"#\",\n            cm_editor\n              .getDoc()\n              .getCursor(),\n            cm_editor\n              .getDoc()\n              .getCursor()\n              .line\n          )\ncm_editor\n      .getDoc()\n      .setCursor: s\ncm_editor\n      .getDoc()\n      .setCursor(cm_editor\n        .getDoc()\n        .getCursor()\n        .line, 0)\ncm_editor\n      .focus: s\ncm_editor\n      .focus()\n}", "CodeBleu_score": 24.716500116460796}, {"code": "const onGutterClick = (n: number) =>{\n\t", "CodeBleu_score": 2.108879695466823}, {"code": "const onGutterClick = (n: number) =>{\n\t", "CodeBleu_score": 2.108879695466823}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\t#ifdef QT_TESTLIB_LIB\n    m_withHelp = true;\n#endif\n    m_foundOptions.clear();\n    m_foundArgs.clear();\n    m_errors.clear();\n    m_warnings.clear();\n    m_helpText.clear();\n    m_helpOption = helpOption;\n    m_helpOption.setValue(\"\");\n    m_helpOption.setDashedNames(helpOption.dashedNames());\n    m_withHelp = true;\n    m_actualNode = &m_rootNode;\n    m_actualIt = args.cbegin();\n    if (!processIfOptionIsHelp(args, m_actualIt, m_actualNode)) {\n        return false;\n    }\n    if (!processVersion(args, m_actualIt, m_actualNode)) {\n        return false;\n    }\n    while (m_actualIt != args.cend()) {\n        if (m_actualNode->argument.name().isEmpty()) {\n            if (!processArgs(args, m_actualIt, m_actualNode)) {\n                return false;\n            }\n        } else {\n            if (!processOptions(args, m_actualIt, m_actualNode)) {\n                return false;\n            }\n        }\n    }\n    return true;\n}", "CodeBleu_score": 37.614468728095304}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t//    qDebug() << \"CommandLineParser::parse(const QStringList& args)\";\n    m_foundOptions.clear();\n    m_foundArgs.clear();\n    m_withHelp = false;\n    Node* actualNode = &rootNode;\n    QStringList::const_iterator actualIt = args.cbegin();\n    // check for version\n    ok = processIfOptionIsVersion(args, actualIt, actualNode);\n    if (!ok) {\n        return ok;\n    }\n    // check for help\n    ok = processIfOptionIsHelp(args, actualIt, actualNode);\n    if (!ok) {\n        return ok;\n    }\n    // process options\n    while (actualIt != args.cend()) {\n        if ((*actualIt)[0] == QLatin1Char('-')) {\n            ok = processOptions(args, actualIt, actualNode);\n            if (!ok) {\n                return ok;\n            }\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n            if (!ok) {\n                return ok;\n            }\n        }\n    }\n    return ok;\n}", "CodeBleu_score": 42.177668043229}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t//    qDebug() << \"CommandLineParser::parse()\";\n    m_foundOptions.clear();\n    m_foundArgs.clear();\n    m_withHelp = false;\n    m_error = false;\n    m_errorMsg.clear();\n    // check for version\n    if (versionOption.isOption(args)) {\n        printVersion();\n        return true;\n    }\n    // check for help\n    auto dashedHelpNames = helpOption.dashedNames();\n    for (const QString& arg : args) {\n        if (dashedHelpNames.contains(arg)) {\n            m_withHelp = true;\n            break;\n        }\n    }\n    // check for args\n    QStringList::const_iterator actualIt = args.cbegin();\n    Node* actualNode = &rootNode;\n    while (actualIt != args.cend()) {\n        QString arg = *actualIt;\n        if (arg.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, actualIt, actualNode);\n            if (!ok) {\n                break;\n            }\n        } else {\n            ok = processArgs(args, actualIt, actualNode);\n            if (!ok) {\n                break;\n            }\n        }\n    }\n    if (!ok) {\n        m_error = true;\n        m_errorMsg = err.str();\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 49.18838124094438}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t\n}", "CodeBleu_score": 2.4774915733961462}, {"code": "void ButtonListView::updateComponents(){\n\t#ifdef QT_KEYPAD_NAVIGATION\n    if (m_listView->hasFocus())\n        return;\n#endif\n    QList<QListWidgetItem*> items = m_listView->findItems(\"*\", Qt::MatchWildcard);\n    QList<QListWidgetItem*> itemsToCheck = m_listView->findItems(\"CaptureToolButton*\", Qt::MatchWildcard);\n    QList<QListWidgetItem*> itemsToUncheck = m_listView->findItems(\"CaptureToolButton*\", Qt::MatchWildcard);\n    for (QListWidgetItem* item : items) {\n        if (item->checkState() == Qt::Checked) {\n            itemsToCheck.removeOne(item);\n        } else {\n            itemsToUncheck.removeOne(item);\n        }\n    }\n    for (QListWidgetItem* item : itemsToCheck) {\n        item->setCheckState(Qt::Checked);\n    }\n    for (QListWidgetItem* item : itemsToUncheck) {\n        item->setCheckState(Qt::Unchecked);\n    }\n}", "CodeBleu_score": 43.95877942642651}, {"code": "void ButtonListView::updateComponents(){\n\t\n}", "CodeBleu_score": 2.4774915733961462}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t\t// Check if the color is already in the list\n\tfor (int i = 0; i < presetList.size(); i++) {\n\t\tif (presetList[i] == color) {\n\t\t\treturn;\n\t\t}\n\t}\n\t// Check if the list has reached the maximum allowed presets\n\tif (presetList.size() == 17) {\n\t\tQMessageBox::warning(this, \"Error\", \"Maximum number of presets reached.\");\n\t\treturn;\n\t}\n\t// Add the color to the list\n\tpresetList.append(color);\n\t// Update the user color configuration\n\tupdateUserColorConfig();\n}", "CodeBleu_score": 41.851448395348065}, {"code": "void ColorPickerEditor::addPreset(){\n\t\tif (presetList.find(color) != presetList.end()) {\n\t\treturn;\n\t}\n\tif (presetList.size() >= 17) {\n\t\tQMessageBox::warning(this, \"Preset Limit Reached\", \"You have reached the maximum number of presets (17).\");\n\t\treturn;\n\t}\n\tpresetList[color] = color;\n\tupdateUserColorConfig();\n}", "CodeBleu_score": 35.88337469132323}, {"code": "void ColorPickerEditor::addPreset(){\n\t\t// Check if the color is already in the list\n\tfor (int i = 0; i < presetList.size(); i++) {\n\t\tif (presetList[i] == color) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\t// Check if the list has reached the maximum allowed presets\n\tif (presetList.size() == 17) {\n\t\tQMessageBox::warning(this, \"Error\", \"The maximum number of presets has been reached.\");\n\t\treturn;\n\t}\n\n\t// Add the color to the list\n\tpresetList.append(color);\n\n\t// Update the user color configuration\n\tConfig::set(\"color_preset_list\", presetList);\n\tConfig::save();\n\n\t// Update the list\n\tupdatePresetList();\n}", "CodeBleu_score": 42.63727813926309}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t#ifdef Q_OS_MACOS\n    setWindowFlags(Qt::Tool);\n#endif\n    setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n\n    m_hLayout = new QHBoxLayout();\n    m_hLayout->setContentsMargins(0, 0, 0, 0);\n    m_hLayout->setSpacing(0);\n    m_vLayout = new QVBoxLayout();\n    m_vLayout->setContentsMargins(0, 0, 0, 0);\n    m_vLayout->setSpacing(0);\n    m_vLayout->setAlignment(Qt::AlignCenter);\n\n    initButtons();\n    initColorWheel();\n\n    m_vLayout->addSpacing(fontMetrics().lineSpacing() * 2);\n    m_hLayout->addLayout(m_vLayout);\n    setLayout(m_hLayout);\n\n    updateComponents();\n}", "CodeBleu_score": 54.970524364429686}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t\tm_lastButtonPressed = nullptr;\n\tm_buttonIconType = QIcon(\":/icons/icons/palette\");\n\n\tm_vLayout = new QVBoxLayout();\n\tm_hLayout = new QHBoxLayout();\n\tm_vLayout->setSpacing(fontMetrics().height() / 2);\n\tm_vLayout->setAlignment(Qt::AlignCenter);\n\tm_hLayout->setSpacing(fontMetrics().height() / 2);\n\n\tinitButtons();\n\tinitColorWheel();\n\n\tm_vLayout->addSpacing(fontMetrics().height() / 2);\n\tm_hLayout->addLayout(m_vLayout);\n\n\tsetLayout(m_hLayout);\n\tupdateComponents();\n}", "CodeBleu_score": 44.756289605224055}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t//  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n    m_vLayout = new QVBoxLayout(this);\n    m_hLayout = new QHBoxLayout();\n    m_vLayout->setSpacing(fontMetrics().height() / 2);\n    m_vLayout->setAlignment(Qt::AlignCenter);\n    m_vLayout->setContentsMargins(0, 0, 0, 0);\n    m_hLayout->setSpacing(fontMetrics().height() / 2);\n    m_hLayout->setContentsMargins(0, 0, 0, 0);\n    m_vLayout->addLayout(m_hLayout);\n    initButtons();\n    initColorWheel();\n    m_vLayout->addSpacing(fontMetrics().height() / 2);\n    m_hLayout->addStretch();\n    setLayout(m_vLayout);\n    updateComponents();\n}", "CodeBleu_score": 49.16992866721358}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\t#ifdef __linux__\n    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n#endif\n    QPixmap capture;\n    QRect selection;\n    if (!grabFull(capture, selection, req)) {\n        return;\n    }\n    exportCapture(capture, selection, req);\n}", "CodeBleu_score": 37.315448406444105}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\tif (!resolveAnyConfigErrors()) {\nreturn;\n}\nQPixmap capture;\nQRect selection;\nif (req.captureMode() == CaptureRequest::FULLSCREEN_MODE) {\nif (!grabWindow(QGuiApplication::primaryScreen(), &capture)) {\nemit captureFailed(tr(\"Failed to grab the full screen\"));\nreturn;\n}\nselection = QRect(0, 0, capture.width(), capture.height());\n} else {\nif (!grabWindow(QGuiApplication::primaryScreen(), &capture, req.region())) {\nemit captureFailed(tr(\"Failed to grab the full screen\"));\nreturn;\n}\nselection = req.region();\n}\nexportCapture(capture, selection, req);\n}", "CodeBleu_score": 49.90973500654243}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t", "CodeBleu_score": 2.7676043281810836}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#ifdef Q_OS_LINUX\n    if (instance) {\n        instance->attachScreenshotToClipboard(capture);\n    } else {\n        QDBusMessage m = createMethodCall(\"attachScreenshotToClipboard\");\n        QDBusMessage reply = call(m);\n    }\n#endif\n}", "CodeBleu_score": 34.25979771527091}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#if QT_CONFIG(clipboard)\n    QClipboard* clipboard = QApplication::clipboard();\n    if (clipboard) {\n        if (instance) {\n            instance->attachScreenshotToClipboard(capture);\n        } else {\n            QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n            QDBusMessage reply = call(m);\n            if (reply.type() == QDBusMessage::ErrorMessage) {\n                qWarning() << \"Error attaching screenshot to clipboard: \" << reply.errorMessage();\n            }\n        }\n    } else {\n        qWarning() << \"QApplication::clipboard() returned null\";\n    }\n#else\n    qWarning() << \"QApplication::clipboard() is not available\";\n#endif\n}", "CodeBleu_score": 44.58539438775191}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t#ifdef Q_OS_X11\n    if (QGuiApplication::platformName() == QStringLiteral(\"xcb\")) {\n        copyToClipboardX11(capture);\n    } else {\n        copyToClipboardWayland(capture);\n    }\n#else\n    copyToClipboardWayland(capture);\n#endif\n}", "CodeBleu_score": 28.039065530794087}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t", "CodeBleu_score": 6.054891335630766}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#ifdef Q_OS_LINUX\n    if (!notification.isEmpty()) {\n        qDebug() << notification;\n    }\n#endif\n    qDebug() << \"Attaching text to clipboard\";\n    m_clipboard->setClipboard(text);\n    m_clipboard->setClipboard(text, QClipboard::Clipboard);\n    m_clipboard->setClipboard(text, QClipboard::Selection);\n}", "CodeBleu_score": 47.567312174952285}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t#ifdef Q_OS_LINUX\n  if (notification.length() > 0) {\n    qDebug() << notification;\n  }\n#endif\n  QClipboard* clipboard = QGuiApplication::clipboard();\n  clipboard->blockSignals(true);\n  clipboard->setText(text);\n  clipboard->blockSignals(false);\n}", "CodeBleu_score": 60.86465061780857}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t", "CodeBleu_score": 4.15438762471993}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tif (m_pin_task) {\n\t\tQRectF selection_geometry = context.get_selection_geometry();\n\t\tselection_geometry.translate(m_pin_task->get_offset().x(), m_pin_task->get_offset().y());\n\t\tm_pin_task->set_selection_geometry(selection_geometry);\n\t\tcontext.add_task(m_pin_task);\n\t}\n\n\tcontext.emit_request(Request(Request::Type::CAPTURE_DONE));\n\tcontext.emit_request(Request(Request::Type::GUI_DONE));\n}", "CodeBleu_score": 44.64292426614945}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t\tif (m_capture_request) {\n\t\tif (m_pin_task) {\n\t\t\tQRectF selection = context.selection();\n\t\t\tQPointF widget_offset = context.widget_offset();\n\t\t\tselection.translate(widget_offset.x(), widget_offset.y());\n\t\t\tm_pin_task->set_selection(selection);\n\t\t\tm_capture_request->add_task(m_pin_task);\n\t\t}\n\t\tcontext.emit_request(m_capture_request);\n\t}\n\tcontext.emit_request(Request(Request::CLOSE_GUI));\n}", "CodeBleu_score": 44.828687594434555}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t//    qDebug() << \"processDirectory: \" << dir.absolutePath();\n    int newEntries = 0;\n    QStringList files = dir.entryList(QStringList() << QLatin1String(\"*.desktop\"), QDir::Files | QDir::NoDotAndDotDot);\n    for (const QString& file : files) {\n        QFileInfo fileInfo(dir, file);\n        if (fileInfo.isDir()) {\n            continue;\n        }\n        bool ok = true;\n        DesktopAppData data = parseDesktopFile(fileInfo.absoluteFilePath(), ok);\n        if (ok) {\n            data.path = fileInfo.absolutePath();\n            m_applications.append(data);\n            newEntries++;\n        }\n    }\n    return newEntries;\n}", "CodeBleu_score": 52.94770303646068}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\tint numAdded = 0;\nQDirIterator it(dir, QStringList() << QLatin1String(\"*.desktop\"),\n    QDir::Files | QDir::NoDotAndDotDot | QDir::NoSymLinks);\nwhile (it.hasNext()) {\n    QString fileName = it.next();\n    bool ok = false;\n    DesktopAppData data = parseDesktopFile(fileName, ok);\n    if (ok) {\n        m_applications.append(data);\n        ++numAdded;\n    }\n}\nreturn numAdded;\n}", "CodeBleu_score": 50.775430352744145}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t\tint newEntries = 0;\n\tQDirIterator it(dir, QStringList() << QStringLiteral(\"*.desktop\"),\n\t\tQDir::Files, QDirIterator::Subdirectories);\n\twhile (it.hasNext()) {\n\t\tQFileInfo fi(it.next());\n\t\tbool ok = true;\n\t\tDesktopAppData data = parseDesktopFile(fi.absoluteFilePath(), ok);\n\t\tif (ok) {\n\t\t\tdata.path = fi.absolutePath();\n\t\t\tm_applications.append(data);\n\t\t\tnewEntries++;\n\t\t}\n\t}\n\treturn newEntries;\n}", "CodeBleu_score": 47.708232084390005}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> result;\n\nfor (const auto& app : apps) {\n  for (const auto& category : categories) {\n    if (app.categories.contains(category)) {\n      result[category].push_back(app);\n    }\n  }\n}\n\nreturn result;\n}", "CodeBleu_score": 72.25775711730947}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> result;\nfor (const auto& app : m_apps) {\n  for (const auto& category : categories) {\n    if (app.categories.contains(category)) {\n      result[category].append(app);\n    }\n  }\n}\nreturn result;\n}", "CodeBleu_score": 72.9134160363563}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\tQMap<QString, QVector<DesktopAppData>> result;\nfor (const auto& app : m_apps) {\n  for (const auto& category : app.categories) {\n    if (categories.contains(category)) {\n      result[category].append(app);\n      break;\n    }\n  }\n}\nreturn result;\n}", "CodeBleu_score": 64.93202799984283}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t#ifdef QT_WIDGETS_LIB\n    if (capture.isNull()) {\n        return false;\n    }\n\n    // make sure the directory exists\n    QFileInfo fileInfo(path);\n    if (!fileInfo.dir().exists()) {\n        if (!fileInfo.dir().mkpath(\".\")) {\n            return false;\n        }\n    }\n\n    // make sure the file can be opened for writing\n    QFile file(path);\n    if (!file.open(QIODevice::WriteOnly)) {\n        return false;\n    }\n\n    // save the file\n    bool success = false;\n    if (path.endsWith(\".png\", Qt::CaseInsensitive)) {\n        success = capture.save(path, \"PNG\");\n    } else if (path.endsWith(\".jpg\", Qt::CaseInsensitive)) {\n        success = capture.save(path, \"JPG\", 85);\n    } else if (path.endsWith(\".jpeg\", Qt::CaseInsensitive)) {\n        success = capture.save(path, \"JPG\", 85);\n    } else if (path.endsWith(\".bmp\", Qt::CaseInsensitive)) {\n        success = capture.save(path, \"BMP\");\n    } else {\n        success = capture.save(path, \"PNG\");\n    }\n\n    // construct a message\n    QString message = messagePrefix;\n    message += \" to \";\n    message += path;\n    if (success) {\n        message += \" succeeded\";\n        AbstractLogger::info(message);\n    } else {\n        message += \" failed\";\n        AbstractLogger::error(message);\n    }\n\n    return success;\n#else\n    Q_UNUSED(capture)\n    Q_UNUSED(path)\n    Q_UNUSED(messagePrefix)\n    return false;\n#endif\n}", "CodeBleu_score": 41.19922187259639}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t#if QT_VERSION >= QT_VERSION_CHECK(5, 11, 0)\n    QByteArray imageFormat = QByteArray(path.section('.', -1, -1).toUtf8());\n#else\n    QByteArray imageFormat = QByteArray(path.section('.', -1, -1));\n#endif\n    QByteArray imageData;\n    QBuffer buffer(&imageData);\n    buffer.open(QIODevice::WriteOnly);\n    if (imageFormat.toLower() == \"png\") {\n        capture.save(&buffer, \"PNG\");\n    } else if (imageFormat.toLower() == \"jpg\" ||\n               imageFormat.toLower() == \"jpeg\") {\n        capture.save(&buffer, \"JPG\", 80);\n    } else {\n        QMessageBox::warning(\n            nullptr,\n            QCoreApplication::applicationName(),\n            tr(\"Unknown file format: %1\").arg(imageFormat));\n        return false;\n    }\n    if (buffer.status() != QBuffer::OpenMode::OpenError) {\n        QFile file(path);\n        if (file.open(QIODevice::WriteOnly)) {\n            file.write(imageData);\n            file.close();\n            AbstractLogger::info(\n                messagePrefix + tr(\"Saved to %1\").arg(file.fileName()));\n            return true;\n        } else {\n            AbstractLogger::error(\n                messagePrefix + tr(\"Error saving to %1: %2\")\n                    .arg(file.fileName())\n                    .arg(file.errorString()));\n            return false;\n        }\n    } else {\n        AbstractLogger::error(\n            messagePrefix + tr(\"Error saving to %1: %2\")\n                .arg(path)\n                .arg(buffer.errorString()));\n        return false;\n    }\n}", "CodeBleu_score": 42.55764588719147}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t#ifdef Q_OS_WIN\n    // On Windows, we need to ensure that the file is closed before\n    // renaming it.\n    // See https://bugreports.qt.io/browse/QTBUG-40117\n    capture.save(path, nullptr, 100);\n#endif\n    const QString finalPath = ensureFileExtension(path, capture);\n    QFile file(finalPath);\n    if (!file.open(QIODevice::WriteOnly)) {\n        AbstractLogger::error(AbstractLogger::Stderr)\n            << messagePrefix << \"failed to open file for writing: \" << finalPath\n            << AbstractLogger::endl;\n        return false;\n    }\n    if (!capture.save(file, nullptr, 100)) {\n        AbstractLogger::error(AbstractLogger::Stderr)\n            << messagePrefix << \"failed to save image to file: \" << finalPath\n            << AbstractLogger::endl;\n        file.close();\n        return false;\n    }\n    file.close();\n    AbstractLogger::info(AbstractLogger::Stdout)\n        << messagePrefix << \"saved image to file: \" << finalPath\n        << AbstractLogger::endl;\n    return true;\n}", "CodeBleu_score": 29.664046385415322}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t", "CodeBleu_score": 6.759597666595822}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tstd::vector<std::string> active_modpack_ids;\n\tfor (auto &modpack : active_modpacks) {\n\t\tactive_modpack_ids.push_back(modpack->get_id());\n\t}\n\tfor (auto &modpack_id : active_modpack_ids) {\n\t\tdeactivate_modpack(modpack_id);\n\t}\n\tfor (auto &modpack_id : load_order) {\n\t\tactivate_modpack(modpack_id);\n\t}\n}", "CodeBleu_score": 44.51425445940059}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tfor (auto &modpack_id : load_order)  {\n\t\tif (modpack_id.empty())  {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto modpack = available_modpacks.get_modpack(modpack_id);\n\t\tif (modpack == nullptr)  {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (modpack->is_active())  {\n\t\t\tcontinue;\n\t\t}\n\n\t\tmodpack->activate();\n\t\tstd::string msg = \"Activated modpack \" + modpack_id;\n\t\tif (modpack->get_name() != \"\")  {\n\t\t\tmsg += \" (\" + modpack->get_name() + \")\";\n\t\t}\n\t\tmsg += \".\";\n\t\tlog(msg);\n\t}\n}", "CodeBleu_score": 45.596721256808536}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> requested_modpacks;\n\tstd::set<std::string> unsatisfied_dependencies;\n\tstd::set<std::string> conflicts;\n\tfor (auto &modpack_name : load_order) {\n\t\tif (modpacks.find(modpack_name) == modpacks.end()) {\n\t\t\tthrow std::runtime_error(\"Requested modpack '\" + modpack_name + \"' is not available.\");\n\t\t}\n\t\trequested_modpacks.insert(modpack_name);\n\t\tfor (auto &dependency : modpacks.at(modpack_name).dependencies) {\n\t\t\tif (requested_modpacks.find(dependency) == requested_modpacks.end()) {\n\t\t\t\tunsatisfied_dependencies.insert(dependency);\n\t\t\t}\n\t\t}\n\t\tfor (auto &conflict : modpacks.at(modpack_name).conflicts) {\n\t\t\tif (requested_modpacks.find(conflict) != requested_modpacks.end()) {\n\t\t\t\tconflicts.insert(conflict);\n\t\t\t}\n\t\t}\n\t}\n\tif (!unsatisfied_dependencies.empty()) {\n\t\tstd::string unsatisfied_dependencies_string;\n\t\tfor (auto &unsatisfied_dependency : unsatisfied_dependencies) {\n\t\t\tunsatisfied_dependencies_string += unsatisfied_dependency + \", \";\n\t\t}\n\t\tthrow std::runtime_error(\"Unsatisfied dependencies: \" + unsatisfied_dependencies_string);\n\t}\n\tif (!conflicts.empty()) {\n\t\tstd::string conflicts_string;\n\t\tfor (auto &conflict : conflicts) {\n\t\t\tconflicts_string += conflict + \", \";\n\t\t}\n\t\tthrow std::runtime_error(\"Conflicts: \" + conflicts_string);\n\t}\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 46.27502030223675}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> requested_modpacks;\n\tfor (const auto &modpack_name : load_order)  {\n\t\tif (modpacks.find(modpack_name) == modpacks.end())  {\n\t\t\tthrow std::runtime_error(modpack_name + \" is not a valid modpack.\");\n\t\t}\n\t\trequested_modpacks.insert(modpack_name);\n\t}\n\tstd::set<std::string> satisfied_dependencies;\n\tfor (const auto &modpack_name : requested_modpacks)  {\n\t\tfor (const auto &dependency : modpacks[modpack_name].get_dependencies())  {\n\t\t\tif (requested_modpacks.find(dependency) == requested_modpacks.end())  {\n\t\t\t\tthrow std::runtime_error(modpack_name + \" has unsatisfied dependency \" + dependency + \".\");\n\t\t\t}\n\t\t\tsatisfied_dependencies.insert(dependency);\n\t\t}\n\t}\n\tfor (const auto &modpack_name : requested_modpacks)  {\n\t\tfor (const auto &conflict : modpacks[modpack_name].get_conflicts())  {\n\t\t\tif (requested_modpacks.find(conflict) != requested_modpacks.end() && conflict != modpack_name)  {\n\t\t\t\tthrow std::runtime_error(modpack_name + \" conflicts with \" + conflict + \".\");\n\t\t\t}\n\t\t}\n\t}\n\tfor (const auto &modpack_name : requested_modpacks)  {\n\t\tfor (const auto &dependency : modpacks[modpack_name].get_dependencies())  {\n\t\t\tsatisfied_dependencies.erase(dependency);\n\t\t}\n\t}\n\tfor (const auto &dependency : satisfied_dependencies)  {\n\t\tfor (const auto &modpack_name : requested_modpacks)  {\n\t\t\tif (modpacks[modpack_name].get_conflicts().find(dependency) != modpacks[modpack_name].get_conflicts().end())  {\n\t\t\t\tthrow std::runtime_error(modpack_name + \" conflicts with \" + dependency + \".\");\n\t\t\t}\n\t\t}\n\t}\n\tload_order = load_order;\n}", "CodeBleu_score": 47.660123332078825}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::set<std::string> load_order_set;\n\tfor (const std::string &modpack : load_order) {\n\t\tif (!modpacks.count(modpack)) {\n\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" requested but not available\");\n\t\t}\n\t\tload_order_set.insert(modpack);\n\t}\n\tfor (const std::string &modpack : load_order_set) {\n\t\tfor (const std::string &dependency : modpacks[modpack].get_dependencies()) {\n\t\t\tif (!load_order_set.count(dependency)) {\n\t\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" requested but dependency \" + dependency + \" not in load order\");\n\t\t\t}\n\t\t}\n\t}\n\tfor (const std::string &modpack : load_order_set) {\n\t\tfor (const std::string &conflict : modpacks[modpack].get_conflicts()) {\n\t\t\tif (load_order_set.count(conflict)) {\n\t\t\t\tthrow std::runtime_error(\"Modpack \" + modpack + \" requested but conflicts with modpack \" + conflict);\n\t\t\t}\n\t\t}\n\t}\n\tthis->load_order = load_order_set;\n}", "CodeBleu_score": 48.28058791103045}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (auto &sound_file : sound_files) {\n\t\tauto key = std::make_pair(sound_file.category, sound_file.id);\n\t\tif (resources.find(key) == resources.end()) {\n\t\t\tauto resource = std::make_shared<sf::SoundBuffer>();\n\t\t\tif (resource->loadFromFile(sound_file.path)) {\n\t\t\t\tresources[key] = resource;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 58.954870299410175}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (auto &sound_file : sound_files) {\n\t\tauto key = sound_file.category + \"_\" + std::to_string(sound_file.id);\n\t\tif (resources.find(key) != resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto resource = std::make_shared<sf::SoundBuffer>();\n\t\tif (!resource->loadFromFile(sound_file.path)) {\n\t\t\tstd::cerr << \"Error: Cannot load sound file: \" << sound_file.path << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tresources[key] = resource;\n\t}\n}", "CodeBleu_score": 58.981153501428196}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tfor (auto &sound_file : sound_files) {\n\t\tauto key = std::make_pair(sound_file.category, sound_file.id);\n\n\t\tif (resources.find(key) != resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto resource = std::make_shared<sf::SoundBuffer>();\n\t\tif (!resource->loadFromFile(sound_file.path)) {\n\t\t\tstd::cerr << \"Failed to load sound file: \" << sound_file.path << std::endl;\n\t\t\tcontinue;\n\t\t}\n\n\t\tresources[key] = resource;\n\t}\n}", "CodeBleu_score": 61.48047796268197}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (!is_initialized()) {\n\t\tthrow std::runtime_error(\"Audio manager is not initialized.\");\n\t}\n\n\tauto resource_pair = resources.find(std::make_pair(category, id));\n\tif (resource_pair == resources.end()) {\n\t\tthrow std::runtime_error(\"Sound resource does not exist.\");\n\t}\n\n\tauto sound_impl = std::make_shared<SoundImpl>(resource_pair->second);\n\treturn Sound(this->audio_manager, sound_impl);\n}", "CodeBleu_score": 44.211594424405554}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (audio_manager == nullptr) {\n\t\tthrow std::runtime_error(\"Audio Manager is not available.\");\n\t}\n\n\tauto resource = resources.find(std::make_pair(category, id));\n\tif (resource == resources.end()) {\n\t\tthrow std::runtime_error(\"Sound resource does not exist.\");\n\t}\n\n\treturn Sound(audio_manager, resource->second);\n}", "CodeBleu_score": 40.30847800618575}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (audio_manager_ == nullptr) {\n\t\tthrow std::runtime_error(\"Audio manager is not initialized\");\n\t}\n\n\tauto resource_tuple = std::make_tuple(category, id);\n\tauto resource_it = resources_.find(resource_tuple);\n\n\tif (resource_it == resources_.end()) {\n\t\tstd::string error_message = \"Sound resource \" + std::to_string(id) + \" does not exist in category \" + std::to_string(category);\n\t\tthrow std::runtime_error(error_message);\n\t}\n\n\tauto sound_impl = std::make_shared<SoundImpl>(audio_manager_, resource_it->second);\n\treturn Sound(audio_manager_, sound_impl);\n}", "CodeBleu_score": 49.360797454373674}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto sounds = playing_sounds.find(category);\n\tif (sounds != playing_sounds.end()) {\n\t\tsounds->second.push_back(sound);\n\t} else {\n\t\tstd::vector<std::shared_ptr<SoundImpl>> new_sounds;\n\t\tnew_sounds.push_back(sound);\n\t\tplaying_sounds.insert(std::make_pair(category, new_sounds));\n\t}\n}", "CodeBleu_score": 64.66994959177623}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tif (sound->get_category() == SoundImpl::Category::MUSIC) {\n\t\tif (music_sounds.size() == 0) {\n\t\t\tmusic_sounds.push_back(sound);\n\t\t} else {\n\t\t\tfor (auto &sound_in_list : music_sounds) {\n\t\t\t\tif (sound_in_list == sound) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmusic_sounds.push_back(sound);\n\t\t}\n\t} else if (sound->get_category() == SoundImpl::Category::EFFECT) {\n\t\tif (effect_sounds.size() == 0) {\n\t\t\teffect_sounds.push_back(sound);\n\t\t} else {\n\t\t\tfor (auto &sound_in_list : effect_sounds) {\n\t\t\t\tif (sound_in_list == sound) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\teffect_sounds.push_back(sound);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.69202113487605}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tauto category = sound->get_category();\n\tauto &sounds = playing_sounds[category];\n\tsounds.push_back(sound);\n}", "CodeBleu_score": 70.60136872520845}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\tif (state == RUNNING) {\n\t\tmutex.lock();\n\t\tdouble elapsed_time = clock_gettime(CLOCK_MONOTONIC) - last_check_time;\n\t\tif (elapsed_time < 0) {\n\t\t\tstd::this_thread::sleep_for(std::chrono::nanoseconds(1));\n\t\t\telapsed_time = clock_gettime(CLOCK_MONOTONIC) - last_check_time;\n\t\t}\n\t\tif (elapsed_time > max_tick_time) {\n\t\t\telapsed_time = max_tick_time;\n\t\t\treal_time += max_tick_time * speed;\n\t\t\tsim_time += max_tick_time;\n\t\t} else {\n\t\t\treal_time += elapsed_time * speed;\n\t\t\tsim_time += elapsed_time;\n\t\t}\n\t\tlast_check_time = clock_gettime(CLOCK_MONOTONIC);\n\t\tmutex.unlock();\n\t}\n}", "CodeBleu_score": 38.76865174441947}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock<std::mutex> lock(clock_mutex);\n\tif (clock_state == RUNNING) {\n\t\tif (clock_last_check_time == 0) {\n\t\t\tclock_last_check_time = clock_real_time;\n\t\t}\n\t\telse {\n\t\t\tclock_elapsed_time = clock_real_time - clock_last_check_time;\n\t\t\tif (clock_elapsed_time < 0) {\n\t\t\t\tclock_elapsed_time = 0;\n\t\t\t}\n\t\t\tif (clock_elapsed_time > clock_max_tick_time) {\n\t\t\t\tclock_time += clock_max_tick_time * clock_speed;\n\t\t\t\tclock_real_time += clock_max_tick_time * clock_speed;\n\t\t\t\tclock_last_check_time = clock_real_time;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tclock_time += clock_elapsed_time * clock_speed;\n\t\t\t\tclock_real_time += clock_elapsed_time * clock_speed;\n\t\t\t\tclock_last_check_time = clock_real_time;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.04320602788415}, {"code": "void Clock::update_time(){\n\t\t// Acquire the unique lock on the mutex\n\tstd::unique_lock<std::mutex> lock(this->mutex);\n\n\t// Calculate the elapsed time since the last check\n\ttime_point<system_clock> now = system_clock::now();\n\tdouble elapsed = duration_cast<nanoseconds>(now - this->last_check).count();\n\n\t// If no time has passed, sleep the thread briefly to prevent stalling\n\tif (elapsed == 0) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\treturn;\n\t}\n\n\t// If the elapsed time exceeds the maximum tick time, update the simulated time and real time by the maximum tick time adjusted by the clock's speed\n\tif (elapsed > this->max_tick_time) {\n\t\tthis->sim_time += this->max_tick_time * this->speed;\n\t\tthis->real_time += this->max_tick_time * this->speed;\n\t\tthis->last_check = now;\n\t\treturn;\n\t}\n\n\t// Otherwise, update these times by the actual elapsed time\n\tthis->sim_time += elapsed * this->speed;\n\tthis->real_time += elapsed;\n\tthis->last_check = now;\n}", "CodeBleu_score": 57.60184366447627}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\t// compute the vertical distance between the current and target scene positions\n\tfloat y_delta = scene_pos.y() - position_.y();\n\n\t// compute the horizontal distance between the current and target scene positions\n\tfloat xz_distance = sqrt(pow(scene_pos.x() - position_.x(), 2) + pow(scene_pos.z() - position_.z(), 2));\n\n\t// compute the horizontal angle between the current and target scene positions\n\tfloat x_angle = atan2(scene_pos.x() - position_.x(), scene_pos.z() - position_.z());\n\n\t// compute the new camera position\n\tposition_ = Eigen::Vector3f(scene_pos.x() - xz_distance * sin(x_angle), position_.y() + y_delta, scene_pos.z() - xz_distance * cos(x_angle));\n\n\t// move the camera to the new position\n\tmove_to(position_);\n}", "CodeBleu_score": 37.5451980445879}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\t// Compute the vertical distance between the current and target scene positions\n\tfloat y_delta = scene_pos.y() - position.y();\n\t// Compute the horizontal distance between the current and target scene positions\n\tfloat xz_distance = sqrt(pow(scene_pos.x() - position.x(), 2) + pow(scene_pos.z() - position.z(), 2));\n\t// Compute the horizontal angle between the current and target scene positions\n\tfloat xz_angle = atan(xz_distance / y_delta);\n\t// Compute the new camera position\n\tposition = Eigen::Vector3f(scene_pos.x() - xz_distance * sin(xz_angle), position.y(), scene_pos.z() - xz_distance * cos(xz_angle));\n}", "CodeBleu_score": 33.22591467533912}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = scene_pos.y() - this->position.y();\n\tfloat xz_distance = sqrt(pow(scene_pos.x() - this->position.x(), 2) + pow(scene_pos.z() - this->position.z(), 2));\n\tfloat x_delta = xz_distance * sin(y_delta);\n\tfloat z_delta = xz_distance * cos(y_delta);\n\tthis->position = Eigen::Vector3f(scene_pos.x() - x_delta, this->position.y(), scene_pos.z() - z_delta);\n}", "CodeBleu_score": 34.71255937834095}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\tif (m_projectFilesController->isSupportedUrl(url)) {\n\t\treturn ApplicationActionController::DragTarget::ProjectFile;\n\t}\n\telse if (url.isLocalFile()) {\n\t\tauto localPath = url.toLocalFile();\n\t\tif (localPath.endsWith(QLatin1String(\".sf2\"))) {\n\t\t\treturn ApplicationActionController::DragTarget::SoundFont;\n\t\t}\n\t\telse if (m_extensionInstaller->isSupportedFile(localPath)) {\n\t\t\treturn ApplicationActionController::DragTarget::Extension;\n\t\t}\n\t}\n\treturn ApplicationActionController::DragTarget::Unknown;\n}", "CodeBleu_score": 57.57942592031424}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t\treturn dragTarget(url.toLocalFile());\n}", "CodeBleu_score": 24.114468154181406}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t", "CodeBleu_score": 6.078294666521647}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tstd::vector<muse::io::path_t> projectPaths = m_sessionConfig.getProjectPaths();\n\tif (projectPaths.size() > 0) {\n\t\tprojectPaths.erase(std::remove(projectPaths.begin(), projectPaths.end(), projectPath), projectPaths.end());\n\t\tm_sessionConfig.setProjectPaths(projectPaths);\n\t}\n}", "CodeBleu_score": 57.57769886724584}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tif (m_sessionConfig.has_key(\"projects\")) {\n\t\tmuse::io::path_t projectPathStr = projectPath.string();\n\t\tif (m_sessionConfig[\"projects\"].is_array()) {\n\t\t\tfor (auto& project : m_sessionConfig[\"projects\"]) {\n\t\t\t\tif (project.is_string()) {\n\t\t\t\t\tif (project.get<std::string>() == projectPathStr) {\n\t\t\t\t\t\tm_sessionConfig[\"projects\"].erase(project);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.27835228624592}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t\tauto session = Session::instance();\n\tauto projectPaths = session->getProjectPaths();\n\tprojectPaths.erase(std::remove(projectPaths.begin(), projectPaths.end(), projectPath), projectPaths.end());\n\tsession->setProjectPaths(projectPaths);\n}", "CodeBleu_score": 46.98784943752682}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\tQVariantList result;\nfor (const Theme &theme : allThemes()) {\nif (theme.code() == \"org.kde.breeze.desktop\" || theme.code() == \"org.kde.breezedark.desktop\") {\nQVariantMap themeMap;\nthemeMap.insert(\"name\", theme.name());\nthemeMap.insert(\"code\", theme.code());\nthemeMap.insert(\"path\", theme.path());\nresult.append(themeMap);\n}\n}\nreturn result;\n}", "CodeBleu_score": 56.135119753581044}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t\nQVariantList result;\n\nQVariantMap themeMap;\n\nforeach (const Theme &theme, allThemes()) {\n\nif (theme.code() == \"org.kde.breeze.desktop\" || theme.code() == \"org.kde.breezedark.desktop\") {\n\nthemeMap.insert(\"name\", theme.name());\nthemeMap.insert(\"code\", theme.code());\nresult.append(themeMap);\n}\n}\n\nreturn result;\n}", "CodeBleu_score": 52.26255825521613}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t\tQVariantList highContrastThemes;\n\tfor (const Theme &theme : allThemes()) {\n\t\tif (theme.code() == \"highcontrast\") {\n\t\t\thighContrastThemes.append(theme.toMap());\n\t\t}\n\t}\n\treturn highContrastThemes;\n}", "CodeBleu_score": 45.55324453489275}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tQVariantList result;\n\tauto root = m_preferenceManager->rootItem();\n\tauto childPages = [this, &result](const QStandardItem* item) {\n\t\tfor (int i = 0; i < item->rowCount(); ++i) {\n\t\t\tauto child = item->child(i);\n\t\t\tauto map = QVariantMap();\n\t\t\tmap.insert(\"id\", child->data(Qt::UserRole).toInt());\n\t\t\tmap.insert(\"path\", child->data(Qt::UserRole + 1));\n\t\t\tresult.append(map);\n\t\t\tchildPages(child);\n\t\t}\n\t};\n\tchildPages(root);\n\treturn result;\n}", "CodeBleu_score": 46.457464730277806}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tQVariantList result;\n\tauto childPages = [&result](const QVariantMap& item) {\n\t\tauto children = item[\"children\"].toList();\n\t\tfor (const auto& child : children) {\n\t\t\tauto childMap = child.toMap();\n\t\t\tauto id = childMap[\"id\"].toString();\n\t\t\tauto path = childMap[\"path\"].toString();\n\t\t\tauto page = QVariantMap{{\"id\", id}, {\"path\", path}};\n\t\t\tresult.append(page);\n\t\t\tchildPages(childMap);\n\t\t}\n\t};\n\tchildPages(rootPage);\n\treturn result;\n}", "CodeBleu_score": 39.87863713412556}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t\tQVariantList result;\n\tauto childPages = [&result, this](const QModelIndex &parent) {\n\t\tfor (int row = 0; row < rowCount(parent); ++row) {\n\t\t\tauto child = index(row, 0, parent);\n\t\t\tauto childMap = QVariantMap();\n\t\t\tchildMap.insert(\"id\", child.data(Qt::UserRole));\n\t\t\tchildMap.insert(\"path\", child.data(Qt::UserRole + 1));\n\t\t\tresult.append(childMap);\n\t\t\tchildPages(child);\n\t\t}\n\t};\n\tchildPages(index(0, 0));\n\treturn result;\n}", "CodeBleu_score": 39.04485285073839}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\tMenuItemList recentScoresItems;\n\tRecentFiles recentFiles;\n\trecentFiles.load();\n\tint recentFileCount = recentFiles.size();\n\tfor (int i = 0; i < recentFileCount; i++) {\n\t\tconst RecentFile& recentFile = recentFiles.at(i);\n\t\tMenuItem recentScoreItem;\n\t\trecentScoreItem.setText(recentFile.getDisplayName());\n\t\tif (recentFile.isCloud()) {\n\t\t\trecentScoreItem.setIcon(QIcon(\":/images/cloud.png\"));\n\t\t}\n\t\trecentScoreItem.setCheckable(true);\n\t\trecentScoreItem.setSelectable(true);\n\t\trecentScoreItem.setActionCode(ActionCode::FileOpen);\n\t\trecentScoreItem.setId(makeId(recentScoreItem.getActionCode(), i));\n\t\trecentScoreItem.setArguments({ recentFile.getUrl(), recentFile.getDisplayName() });\n\t\trecentScoresItems.append(recentScoreItem);\n\t}\n\treturn recentScoresItems;\n}", "CodeBleu_score": 39.40613730834188}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t\n//    qDebug() << \"makeRecentScoresItems()\";\n\n    MenuItemList recentScoresItems;\n\n    // Retrieve the list of recent files from the application settings.\n    QStringList recentFiles = Settings::instance().getRecentFiles();\n\n    // For each recent file, create a new menu item and set its action code to \"file-open\" with the file's display name.\n    for (int i = 0; i < recentFiles.size(); ++i) {\n\n        // Create a new menu item.\n        MenuItem* recentScoreItem = new MenuItem;\n\n        // Set the action code.\n        recentScoreItem->setActionCode(\"file-open\");\n\n        // Set the file's display name.\n        recentScoreItem->setDisplayName(recentFiles.at(i));\n\n        // If the file is a cloud project, set the icon to a cloud icon.\n        if (recentFiles.at(i).contains(\".musicxml\")) {\n            recentScoreItem->setIcon(QIcon(\":/images/cloud.png\"));\n        }\n\n        // Assign a unique ID to the item.\n        recentScoreItem->setId(makeId(\"file-open\", i));\n\n        // Enable the item.\n        recentScoreItem->setEnabled(true);\n\n        // Make the item selectable.\n        recentScoreItem->setSelectable(true);\n\n        // Set the item's arguments.\n        recentScoreItem->setArguments(recentFiles.at(i) + \" \" + recentFiles.at(i));\n\n        // Add the item to the list.\n        recentScoresItems.append(recentScoreItem);\n    }\n\n    return recentScoresItems;\n}", "CodeBleu_score": 33.04907299643449}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t", "CodeBleu_score": 1.2374941674823547}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t#ifdef DEBUG_NAVIGABLE_APP_MENU_MODEL\n    qDebug() << \"NavigableAppMenuModel::openMenu(\" << menuId << \", \" << byHover << \")\";\n#endif\n\n    if (!isNavigationStarted()) {\n        return;\n    }\n\n    if (menuId == m_openedMenuId) {\n        return;\n    }\n\n    if (!byHover && m_openedMenuId.isEmpty()) {\n        saveMUNavigationSystemState();\n    } else if (byHover && !m_openedMenuId.isEmpty()) {\n        restoreMUNavigationSystemState();\n    }\n\n    m_openedMenuId = menuId;\n    emit openedMenuIdChanged(m_openedMenuId);\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 52.99362062854951}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t#ifdef DEBUG_NAVIGABLE_APP_MENU_MODEL\n    qDebug() << \"NavigableAppMenuModel::openMenu(\" << menuId << \", \" << byHover << \")\";\n#endif\n\n    if (!isNavigationStarted()) {\n        if (isMenuOpened()) {\n            restoreMUNavigationSystemState();\n        }\n        else {\n            saveMUNavigationSystemState();\n        }\n    }\n\n    if (isNavigationStarted()) {\n        if (!byHover && !isMenuOpened()) {\n            setHighlightedMenuId(menuId);\n        }\n    }\n\n    emit menuOpenRequested(menuId, byHover);\n}", "CodeBleu_score": 58.68324516211897}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t#ifdef DEBUG_MENU_MODEL\n    qDebug() << \"NavigableAppMenuModel::openMenu(\" << menuId << \", \" << byHover << \")\";\n#endif\n\n    if (isNavigationStarted() && !isMenuOpened()) {\n        saveMUNavigationSystemState();\n    } else if (!isNavigationStarted() && isMenuOpened()) {\n        restoreMUNavigationSystemState();\n    }\n\n    if (byHover) {\n        setHighlightedMenuId(menuId);\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 60.89193914771332}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t\n}", "CodeBleu_score": 3.5139663558225225}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t\tif (!notation()) {\n\t\treturn QVariant();\n\t}\n\n\tViewMode viewMode = notation()->viewMode();\n\tif (viewMode == ViewMode::PAGE) {\n\t\treturn QVariant();\n\t}\n\n\tQString title;\n\tif (viewMode == ViewMode::LINE) {\n\t\ttitle = \"Continuous view\";\n\t} else if (viewMode == ViewMode::SYSTEM) {\n\t\ttitle = \"System view\";\n\t}\n\n\tfor (const MenuItem* menuItem: makeAvailableViewModeList()) {\n\t\tif (menuItem->id() == QString::fromStdString(ALL_MODE_MAP[viewMode])) {\n\t\t\tmenuItem->setTitle(title);\n\t\t\treturn QVariant::fromValue(menuItem);\n\t\t}\n\t}\n\n\treturn QVariant();\n}", "CodeBleu_score": 53.61722186527296}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\tViewMode viewMode = notation() ? notation()->viewMode() : ViewMode::PAGE;\n\nQString title = \"Continuous view\";\n\nfor (const ViewMode& viewMode : ALL_MODE_MAP.keys()) {\nif (viewMode == ViewMode::FLOAT && !globalConfiguration()->devModeEnabled()) {\ncontinue;\n}\n\nif (viewMode == viewMode) {\nif (viewMode == ViewMode::LINE || viewMode == ViewMode::SYSTEM) {\ntitle = \"Continuous view\";\n}\nbreak;\n}\n}\n\nreturn QVariant::fromValue(title);\n}", "CodeBleu_score": 63.78648441086657}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tif (notation == nullptr) {\n\t\treturn muse::Error::NullPointer;\n\t}\n\n\tif (destinationDevice == nullptr) {\n\t\treturn muse::Error::NullPointer;\n\t}\n\n\tif (!notation->isValid()) {\n\t\treturn muse::Error::InvalidNotation;\n\t}\n\n\tif (!notation->getScore()->isValid()) {\n\t\treturn muse::Error::InvalidScore;\n\t}\n\n\tByteArray buffer;\n\tauto ret = write(notation, buffer);\n\tif (ret != muse::Error::Success) {\n\t\treturn ret;\n\t}\n\n\treturn destinationDevice.write(buffer);\n}", "CodeBleu_score": 33.97048643669349}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\t// Check if the notation and score are valid\n\tif (!notation || !notation->getScore()) {\n\t\treturn muse::Error(muse::Error::Type::INVALID_ARGUMENT, \"Invalid notation or score\");\n\t}\n\t// Check if the notation is a Braille notation\n\tif (notation->getNotationType() != notation::NotationType::BRAILLE) {\n\t\treturn muse::Error(muse::Error::Type::INVALID_ARGUMENT, \"Notation is not a Braille notation\");\n\t}\n\t// Check if the score is a Braille score\n\tif (notation->getScore()->getScoreType() != notation::Score::ScoreType::BRAILLE) {\n\t\treturn muse::Error(muse::Error::Type::INVALID_ARGUMENT, \"Score is not a Braille score\");\n\t}\n\n\t// Convert the Braille score to Braille notation\n\tauto brailleScore = std::dynamic_pointer_cast<notation::BrailleScore>(notation->getScore());\n\tauto brailleNotation = std::make_shared<notation::BrailleNotation>(brailleScore);\n\n\t// Write the Braille notation to a buffer\n\tauto buffer = std::make_shared<muse::data::Buffer>();\n\tauto ret = brailleNotation->write(buffer, muse::io::IODevice::Type::BUFFER);\n\tif (!ret) {\n\t\treturn ret;\n\t}\n\n\t// Convert the buffer data to a ByteArray\n\tauto byteArray = std::make_shared<muse::data::ByteArray>(buffer->getData());\n\n\t// Write the ByteArray to the destination device\n\treturn destinationDevice.write(byteArray);\n}", "CodeBleu_score": 42.99200918811}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t\tif (!notation || notation->getScore() == nullptr) {\n\t\treturn muse::Error(muse::ErrorCode::NullPointer);\n\t}\n\tif (!notation->getScore()->isValid()) {\n\t\treturn muse::Error(muse::ErrorCode::InvalidNotation);\n\t}\n\tmuse::data::ByteArray buffer;\n\tauto ret = write(notation, buffer, Options());\n\tif (!ret) {\n\t\treturn ret;\n\t}\n\treturn destinationDevice.write(buffer);\n}", "CodeBleu_score": 33.76608350990044}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t#ifdef WIDECHARS_ARE_UCS4\n    uint8_t* outputbuf = nullptr;\n    size_t outlen = 0;\n    widechar inbuf[MAXSTRING];\n    widechar transbuf[MAXSTRING];\n    int inlen = 0;\n    int translen = 0;\n\n    inlen = _lou_extParseChars(txt.c_str(), inbuf);\n\n    translen = MAXSTRING;\n    lou_translateString(\n        table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n    outputbuf = u32_to_u8(transbuf, translen, NULL, &outlen);\n#else\n    uint8_t* outputbuf = nullptr;\n    size_t outlen = 0;\n    widechar inbuf[MAXSTRING];\n    widechar transbuf[MAXSTRING];\n    int inlen = 0;\n    int translen = 0;\n\n    inlen = _lou_extParseChars(txt.c_str(), inbuf);\n\n    translen = MAXSTRING;\n    lou_translateString(\n        table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n    outputbuf = u16_to_u8(transbuf, translen, NULL, &outlen);\n#endif\n\n    if (!outputbuf) {\n        return std::string();\n    }\n\n    std::string ret = std::string(outputbuf, outputbuf + outlen);\n    free(outputbuf);\n\n    return ret;\n}", "CodeBleu_score": 40.942413095348186}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t\tstd::string ret;\n\tstd::vector<std::string> lines = split_string(txt, 256);\n\tif (lines.size() == 0) {\n\t\treturn ret;\n\t}\n\tret = braille_translate(table_name, lines[0]);\n\tfor (int i = 1; i < lines.size(); i++) {\n\t\tret += \" \" + braille_translate(table_name, lines[i]);\n\t}\n\treturn ret;\n}", "CodeBleu_score": 65.53331940270016}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t#ifdef WIDECHARS_ARE_UCS4\n    uint8_t* outputbuf = (uint8_t *) malloc(256 * sizeof(widechar) * sizeof(uint8_t));\n#else\n    uint8_t* outputbuf = (uint8_t *) malloc(256 * sizeof(widechar) * 2);\n#endif\n    size_t outlen = 0;\n    widechar inbuf[MAXSTRING];\n    widechar transbuf[MAXSTRING];\n    int inlen = 0;\n    int translen = 0;\n\n    inlen = _lou_extParseChars(txt.c_str(), inbuf);\n\n    translen = MAXSTRING;\n    lou_translateString(\n        table_name, inbuf, &inlen, transbuf, &translen, NULL, NULL, 0);\n\n#ifdef WIDECHARS_ARE_UCS4\n    u32_to_u8(transbuf, translen, outputbuf, &outlen);\n#else\n    u16_to_u8(transbuf, translen, outputbuf, &outlen);\n#endif\n\n    if (!outputbuf) {\n        return std::string();\n    }\n\n    std::string ret = std::string(outputbuf, outputbuf + outlen);\n    free(outputbuf);\n\n    return ret;\n}", "CodeBleu_score": 37.129392681085015}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\tstd::shared_ptr<ProxyEntity> result;\n\n\t// Create a temporary ProxyEntity to check the validity and type of the JSON\n\tstd::shared_ptr<ProxyEntity> tempProxyEntity = std::make_shared<ProxyEntity>();\n\n\t// Load the JSON\n\tif (tempProxyEntity->Load(jsonPath)) {\n\t\t// Check the version of the entity\n\t\tif (tempProxyEntity->GetVersion() == PROXY_ENTITY_VERSION) {\n\t\t\t// Create a new ProxyEntity of the determined type\n\t\t\tif (tempProxyEntity->GetEntityType() == PROXY_ENTITY_TYPE_PROFILE) {\n\t\t\t\tresult = std::make_shared<ProfileEntity>();\n\t\t\t}\n\t\t\telse if (tempProxyEntity->GetEntityType() == PROXY_ENTITY_TYPE_PROXY) {\n\t\t\t\tresult = std::make_shared<ProxyEntity>();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Error\n\t\t\t\tresult = nullptr;\n\t\t\t}\n\n\t\t\t// Check if the entity type was successfully determined\n\t\t\tif (result != nullptr) {\n\t\t\t\t// Set the load control flag\n\t\t\t\tresult->SetLoadControl(true);\n\n\t\t\t\t// Assign the JSON path\n\t\t\t\tresult->SetJsonPath(jsonPath);\n\n\t\t\t\t// Load the entity\n\t\t\t\tresult->Load(jsonPath);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the loaded ProxyEntity\n\treturn result;\n}", "CodeBleu_score": 31.61758547429205}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\t// Initialize a temporary ProxyEntity.\n\tauto proxyEntity = std::make_shared<ProxyEntity>();\n\t// Check the validity and type of the JSON.\n\tif (!proxyEntity->Load(jsonPath)) {\n\t\treturn nullptr;\n\t}\n\t// Create a new ProxyEntity of the determined type.\n\tauto newProxyEntity = std::make_shared<ProxyEntity>();\n\t// Check the version of the entity and, if valid, set the load control flag, assign the JSON path, and load the entity.\n\tif (newProxyEntity->GetVersion() == proxyEntity->GetVersion()) {\n\t\tnewProxyEntity->SetLoadControl(true);\n\t\tnewProxyEntity->SetJsonPath(jsonPath);\n\t\tnewProxyEntity->Load(jsonPath);\n\t}\n\treturn newProxyEntity;\n}", "CodeBleu_score": 32.23125807802389}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t\tstd::shared_ptr<ProxyEntity> proxyEntity;\n\tstd::shared_ptr<ProxyEntity> tempProxyEntity;\n\tbool isValid = false;\n\tint version = 0;\n\n\t// Check the validity and type of the JSON\n\ttempProxyEntity = std::make_shared<ProxyEntity>();\n\tisValid = tempProxyEntity->Load(jsonPath);\n\n\t// If the JSON is valid, create a new ProxyEntity of the determined type\n\tif (isValid) {\n\t\tif (tempProxyEntity->GetEntityType() == \"ProxyEntity\") {\n\t\t\tproxyEntity = std::make_shared<ProxyEntity>();\n\t\t}\n\t\telse if (tempProxyEntity->GetEntityType() == \"ProxyModelEntity\") {\n\t\t\tproxyEntity = std::make_shared<ProxyModelEntity>();\n\t\t}\n\t\telse if (tempProxyEntity->GetEntityType() == \"ProxyGeometryEntity\") {\n\t\t\tproxyEntity = std::make_shared<ProxyGeometryEntity>();\n\t\t}\n\t\telse if (tempProxyEntity->GetEntityType() == \"ProxyTransformEntity\") {\n\t\t\tproxyEntity = std::make_shared<ProxyTransformEntity>();\n\t\t}\n\t\telse if (tempProxyEntity->GetEntityType() == \"ProxyRenderEntity\") {\n\t\t\tproxyEntity = std::make_shared<ProxyRenderEntity>();\n\t\t}\n\t\telse {\n\t\t\t// The type of the JSON is invalid\n\t\t\tisValid = false;\n\t\t}\n\t}\n\n\t// If the JSON is valid, check the version of the entity\n\tif (isValid) {\n\t\tversion = tempProxyEntity->GetVersion();\n\t\tif (version == PROXY_ENTITY_VERSION_1) {\n\t\t\tproxyEntity->SetVersion(PROXY_ENTITY_VERSION_1);\n\t\t}\n\t\telse {\n\t\t\t// The version of the JSON is invalid\n\t\t\tisValid = false;\n\t\t}\n\t}\n\n\t// If the JSON is valid, set the load control flag, assign the JSON path, and load the entity\n\tif (isValid) {\n\t\tproxyEntity->SetLoadControl(true);\n\t\tproxyEntity->SetJsonPath(jsonPath);\n\t\tproxyEntity->Load(jsonPath);\n\t}\n\n\treturn proxyEntity;\n}", "CodeBleu_score": 36.57321090838096}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tQUrl url(link);\n\tif (!url.isValid())  {\n\t\treturn false;\n\t}\n\tQString protocol = url.scheme();\n\tif (protocol != \"https\" && protocol != \"quic\")  {\n\t\treturn false;\n\t}\n\tQString name = url.host();\n\tif (name.isEmpty())  {\n\t\treturn false;\n\t}\n\tint port = url.port();\n\tif (port == -1)  {\n\t\treturn false;\n\t}\n\tQString user = url.userName();\n\tif (user.isEmpty())  {\n\t\treturn false;\n\t}\n\tQString password = url.password();\n\tif (password.isEmpty())  {\n\t\treturn false;\n\t}\n\tQString server = url.host();\n\tif (server.isEmpty())  {\n\t\treturn false;\n\t}\n\tthis->name = name;\n\tthis->server = server;\n\tthis->port = port;\n\tthis->user = user;\n\tthis->password = password;\n\treturn true;\n}", "CodeBleu_score": 52.320779880057835}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tQUrl url(link);\n\tif (url.isValid()) {\n\t\tif (url.scheme() == \"https\") {\n\t\t\t// Extract the username, password, and server address from the link\n\t\t\t// and store them in the corresponding member variables\n\t\t\tQString username = url.userName();\n\t\t\tQString password = url.password();\n\t\t\tQString serverAddress = url.host();\n\t\t\tint port = url.port();\n\t\t\tif (username != \"\" && password != \"\" && serverAddress != \"\") {\n\t\t\t\tm_username = username;\n\t\t\t\tm_password = password;\n\t\t\t\tm_serverAddress = serverAddress;\n\t\t\t\tm_port = port;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\telse if (url.scheme() == \"quic\") {\n\t\t\t// Extract the username, password, and server address from the link\n\t\t\t// and store them in the corresponding member variables\n\t\t\tQString username = url.userName();\n\t\t\tQString password = url.password();\n\t\t\tQString serverAddress = url.host();\n\t\t\tint port = url.port();\n\t\t\tif (username != \"\" && password != \"\" && serverAddress != \"\") {\n\t\t\t\tm_username = username;\n\t\t\t\tm_password = password;\n\t\t\t\tm_serverAddress = serverAddress;\n\t\t\t\tm_port = port;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 44.5420509863767}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t\tif (link.isEmpty())  {\n\t\treturn false;\n\t}\n\tQUrl url(link);\n\tif (!url.isValid())  {\n\t\treturn false;\n\t}\n\tQString protocol = url.scheme().toLower();\n\tif (protocol != \"https\" && protocol != \"quic\")  {\n\t\treturn false;\n\t}\n\tQString name = url.host();\n\tif (name.isEmpty())  {\n\t\treturn false;\n\t}\n\tQString server = url.host();\n\tint port = url.port();\n\tif (port == -1)  {\n\t\tport = 443;\n\t}\n\tQString username = url.userName();\n\tQString password = url.password();\n\tif (username.isEmpty() || password.isEmpty())  {\n\t\treturn false;\n\t}\n\tthis->SetServer(server);\n\tthis->SetPort(port);\n\tthis->SetUsername(username);\n\tthis->SetPassword(password);\n\treturn true;\n}", "CodeBleu_score": 58.76571604425283}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t\tif (this->preSaveCallback) {\n\t\tthis->preSaveCallback();\n\t}\n\tif (!this->allowSaving) {\n\t\treturn false;\n\t}\n\tbool changed = false;\n\tstd::string json = this->ToJson();\n\tif (this->lastSavedContent != json) {\n\t\tchanged = true;\n\t\tthis->lastSavedContent = json;\n\t\tstd::ofstream file(this->filePath);\n\t\tfile << json;\n\t\tfile.close();\n\t}\n\treturn changed;\n}", "CodeBleu_score": 31.695986534549135}, {"code": "bool JsonStore::Save(){\n\t\tif (this->preSaveCallback) {\n\t\tthis->preSaveCallback();\n\t}\n\n\tif (!this->saveAllowed) {\n\t\treturn false;\n\t}\n\n\tbool hasChanged = this->contentChanged;\n\n\tif (this->contentChanged) {\n\t\tthis->contentChanged = false;\n\n\t\tstd::string json = Json::serialize(this->content);\n\n\t\tstd::ofstream file(this->path, std::ios::out | std::ios::binary);\n\t\tfile << json;\n\t\tfile.close();\n\t}\n\n\treturn hasChanged;\n}", "CodeBleu_score": 27.507880004262518}, {"code": "bool JsonStore::Save(){\n\t\tif (!this->allowSaving) {\n\t\treturn false;\n\t}\n\n\tif (this->preSaveCallback) {\n\t\tthis->preSaveCallback();\n\t}\n\n\tbool changed = false;\n\tif (this->content != this->lastSavedContent) {\n\t\tchanged = true;\n\t\tthis->lastSavedContent = this->content;\n\t}\n\n\tif (changed) {\n\t\tFile file = File(this->filename, \"w\");\n\t\tif (file.open()) {\n\t\t\tfile.write(this->content);\n\t\t\tfile.close();\n\t\t}\n\t}\n\n\treturn changed;\n}", "CodeBleu_score": 30.470243768607958}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\ttimer->setInterval(timeout);\n\tconnect(timer, &QTimer::timeout, callback);\n\ttimer->start();\n}", "CodeBleu_score": 53.27263560141906}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\ttimer->setInterval(timeout);\n\tconnect(timer, &QTimer::timeout, callback);\n\ttimer->start();\n}", "CodeBleu_score": 53.27263560141906}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t\tQTimer *timer = new QTimer(obj);\n\ttimer->setSingleShot(true);\n\ttimer->setInterval(timeout);\n\tQObject::connect(timer, &QTimer::timeout, [=]() {\n\t\tcallback();\n\t\ttimer->deleteLater();\n\t});\n\ttimer->start();\n}", "CodeBleu_score": 62.01232263943708}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tQByteArray responseData;\n\tQByteArray responseHeader;\n\tQByteArray responseMessage;\n\n\t// Check for network errors\n\tif (networkReply->error() != QNetworkReply::NoError) {\n\t\tstatusCode = networkReply->error();\n\t\treturn responseData;\n\t}\n\n\t// Check for server-side gRPC errors using custom headers\n\tresponseHeader = networkReply->rawHeader(GRPC_STATUS_HEADER);\n\tif (responseHeader.isEmpty()) {\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn responseData;\n\t}\n\n\tresponseMessage = networkReply->rawHeader(GRPC_MESSAGE_HEADER);\n\tif (responseHeader == \"14\") {\n\t\tqDebug() << \"gRPC server error:\" << responseMessage;\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn responseData;\n\t}\n\n\t// Set the status code to NoError\n\tstatusCode = QNetworkReply::NoError;\n\n\t// Return the response data, excluding the gRPC message size header\n\tresponseData = networkReply->readAll();\n\tresponseData.remove(0, responseData.indexOf(responseHeader) + responseHeader.size());\n\treturn responseData;\n}", "CodeBleu_score": 55.041561347309695}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tQByteArray responseData;\n\n\t// Check for network errors\n\tif (networkReply->error() != QNetworkReply::NoError)  {\n\t\tstatusCode = networkReply->error();\n\t\treturn responseData;\n\t}\n\n\t// Check for gRPC errors\n\tQByteArray grpcStatus = networkReply->rawHeader(GRPC_STATUS_HEADER_NAME);\n\tif (grpcStatus.size() > 0)  {\n\t\tQString grpcStatusMessage = networkReply->rawHeader(GRPC_MESSAGE_HEADER_NAME);\n\t\tgrpcStatusMessage.replace(QByteArray(GRPC_STATUS_HEADER_NAME) + \": \", \"\");\n\t\tgrpcStatusMessage.replace(QByteArray(GRPC_MESSAGE_HEADER_NAME) + \": \", \"\");\n\t\tgrpcStatusMessage.replace(QByteArray(GRPC_DETAILS_HEADER_NAME) + \": \", \"\");\n\t\tgrpcStatusMessage.replace(QByteArray(GRPC_ERROR_HEADER_NAME) + \": \", \"\");\n\t\tgrpcStatusMessage.replace(QByteArray(GRPC_ACCEPT_ENCODING_HEADER_NAME) + \": \", \"\");\n\t\tgrpcStatusMessage.replace(QByteArray(GRPC_CONTENT_TYPE_HEADER_NAME) + \": \", \"\");\n\t\tqDebug() << \"gRPC server error: \" << grpcStatusMessage;\n\t\tstatusCode = QNetworkReply::ProtocolUnknownError;\n\t\treturn responseData;\n\t}\n\n\t// Set the status code to NoError\n\tstatusCode = QNetworkReply::NoError;\n\n\t// Get the response data\n\tresponseData = networkReply->readAll();\n\n\t// Remove the gRPC message size header\n\tresponseData = responseData.right(responseData.size() - QByteArray(GRPC_MESSAGE_SIZE_HEADER_NAME + \": \").size() - QByteArray::number(responseData.size()).size() - 2);\n\n\treturn responseData;\n}", "CodeBleu_score": 48.852722636638475}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t\tQByteArray responseData;\n\n\tif (networkReply->error() != QNetworkReply::NoError)  {\n\t\tstatusCode = networkReply->error();\n\t\treturn responseData;\n\t}\n\n\tQByteArray rawHeader = networkReply->rawHeader(GRPC_MESSAGE_HEADER);\n\tif (!rawHeader.isEmpty())  {\n\t\tQByteArray grpcStatus = networkReply->rawHeader(GRPC_STATUS_HEADER);\n\t\tQByteArray grpcMessage = networkReply->rawHeader(GRPC_MESSAGE_HEADER);\n\t\tQByteArray grpcDetails = networkReply->rawHeader(GRPC_DETAILS_HEADER);\n\n\t\tif (grpcStatus.isEmpty())  {\n\t\t\tstatusCode = ProtocolUnknownError;\n\t\t\treturn responseData;\n\t\t}\n\n\t\tQJsonObject errorObject;\n\t\terrorObject.insert(\"grpc-status\", grpcStatus);\n\t\terrorObject.insert(\"grpc-message\", grpcMessage);\n\t\terrorObject.insert(\"grpc-details\", grpcDetails);\n\n\t\tQJsonDocument doc(errorObject);\n\t\tQByteArray jsonData = doc.toJson();\n\n\t\tqDebug() << \"Error response:\" << jsonData;\n\n\t\tstatusCode = ProtocolUnknownError;\n\t\treturn jsonData;\n\t}\n\n\tstatusCode = NoError;\n\tresponseData = networkReply->readAll();\n\treturn responseData;\n}", "CodeBleu_score": 51.241956560126134}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tQString response;\n\tgrpc::ClientContext context;\n\tlibcore::LoadConfigResp reply;\n\tgrpc::Status status = stub->Start(&context, request, &reply);\n\tif (status.ok()) {\n\t\t*rpcOK = true;\n\t\tresponse = reply.message();\n\t} else {\n\t\t*rpcOK = false;\n\t}\n\treturn response;\n}", "CodeBleu_score": 52.40297281996759}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\tlibcore::LoadConfigResp resp;\n\tgrpc::Status status = stub->Start(&context, request, &resp);\n\tif (status.ok()) {\n\t\t*rpcOK = true;\n\t\treturn resp.error();\n\t} else {\n\t\t*rpcOK = false;\n\t\treturn \"\";\n\t}\n}", "CodeBleu_score": 55.13617805906279}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t\t// Create the RPC request\n\tQByteArray requestData = request.SerializeAsString();\n\tQByteArray responseData;\n\tQByteArray errorString;\n\tbool rpcOKFlag = true;\n\n\t// Send the RPC request to the server\n\tif (this->channel != nullptr) {\n\t\tQGrpcStreamChannel *channel = dynamic_cast<QGrpcStreamChannel *>(this->channel);\n\t\tif (channel != nullptr) {\n\t\t\tQGrpcStreamReply<libcore::LoadConfigResp> *reply = channel->CallMethod(\n\t\t\t\t&QGrpcClient::LoadConfig,\n\t\t\t\trequestData\n\t\t\t);\n\t\t\tif (reply != nullptr) {\n\t\t\t\treply->wait();\n\t\t\t\tif (reply->error() != QGrpcStatus::Ok) {\n\t\t\t\t\trpcOKFlag = false;\n\t\t\t\t\terrorString = reply->errorString().toUtf8();\n\t\t\t\t} else {\n\t\t\t\t\tresponseData = reply->readAll();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Deserialize the response\n\tlibcore::LoadConfigResp response;\n\tif (responseData.size() > 0) {\n\t\tresponse.ParseFromString(responseData);\n\t}\n\n\t// Return the result\n\t*rpcOK = rpcOKFlag;\n\treturn QString(errorString);\n}", "CodeBleu_score": 42.594246761903605}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t\t// Clear the text of the inbound_auth UI element.\n\tinbound_auth->setText(\"\");\n\n\t// Query the inbound_auth data store.\n\tbool auth_needed = false;\n\tif (inbound_auth_ds != NULL) {\n\t\tauth_needed = inbound_auth_ds->get_bool(\"auth_needed\", false);\n\t}\n\n\t// Set the icon to a locked icon if authentication is needed.\n\tif (auth_needed) {\n\t\tinbound_auth->setIcon(QIcon(QString(\":/icons/icons/locked.png\")));\n\t}\n\t// Set the icon to an unlocked icon if authentication is not needed.\n\telse {\n\t\tinbound_auth->setIcon(QIcon(QString(\":/icons/icons/unlocked.png\")));\n\t}\n}", "CodeBleu_score": 45.72516273434777}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t\t/*\n\t * Clear the text of the inbound_auth UI element.\n\t */\n\tui->inbound_auth->setText(\"\");\n\n\t/*\n\t * Query the inbound_auth data store to see if authentication is needed.\n\t */\n\tbool auth_needed = false;\n\ttry {\n\t\tauth_needed = data_store->get_inbound_auth_needed();\n\t} catch (const std::exception &e) {\n\t\t/*\n\t\t * An exception here means that the data store could not be accessed.\n\t\t * This may be because the data store is not running, or because the\n\t\t * data store is running but is not responding.\n\t\t *\n\t\t * In any case, we do not want to crash the application, so we catch the\n\t\t * exception, display an error message, and return.\n\t\t */\n\t\tQMessageBox::warning(this, \"Error\", \"Could not access data store.\n\n\" + QString(e.what()));\n\t\treturn;\n\t}\n\n\t/*\n\t * Set the icon of the inbound_auth UI element to the appropriate icon.\n\t */\n\tif (auth_needed) {\n\t\tui->inbound_auth->setPixmap(QPixmap(\":/icons/icons/lock.png\"));\n\t} else {\n\t\tui->inbound_auth->setPixmap(QPixmap(\":/icons/icons/unlock.png\"));\n\t}\n}", "CodeBleu_score": 46.59586022134044}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t\t// clear the text of the inbound_auth UI element\n\tui->inbound_auth->setText(\"\");\n\n\t// check if authentication is needed by querying the inbound_auth data store\n\tbool auth_needed = data_store->get_inbound_auth();\n\n\t// set the icon to a locked icon if authentication is needed\n\tif (auth_needed) {\n\t\tui->inbound_auth->setText(\"\ud83d\udd12\");\n\t\tui->inbound_auth->setStyleSheet(\"QLabel { color: #ff0000; }\");\n\t}\n\t// set the icon to an unlocked icon if authentication is not needed\n\telse {\n\t\tui->inbound_auth->setText(\"\ud83d\udd13\");\n\t\tui->inbound_auth->setStyleSheet(\"QLabel { color: #00ff00; }\");\n\t}\n}", "CodeBleu_score": 48.51402070884469}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t\t// Create a new group\n\tGroupEntity group;\n\n\t// Create a new dialog to edit the group\n\tDialogEditGroup *dialog = new DialogEditGroup(this, group);\n\n\t// Execute the dialog and wait for the result\n\tint result = dialog->exec();\n\n\t// If the dialog was accepted\n\tif (result == QDialog::Accepted) {\n\t\t// Add the group to the profile manager\n\t\tprofile_manager.add_group(group);\n\n\t\t// Update the group list\n\t\tupdate_group_list();\n\n\t\t// Send a refresh message to the main window\n\t\temit refresh_signal();\n\t}\n\n\t// Delete the dialog object\n\tdelete dialog;\n}", "CodeBleu_score": 43.93019343489788}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tGroupEntity* group = new GroupEntity();\n\tDialogEditGroup* dialog = new DialogEditGroup(this, group);\n\tdialog->exec();\n\tdelete dialog;\n\tif (dialog->result() == QDialog::Accepted) {\n\t\tprofileManager->addGroup(group);\n\t\tupdateList();\n\t\temit refresh();\n\t}\n}", "CodeBleu_score": 37.68007579630928}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t\tGroupEntity* group = new GroupEntity();\n\tgroup->set_name(\"New Group\");\n\tgroup->set_profile_id(this->profile_id);\n\tDialogEditGroup* dialog = new DialogEditGroup(this, group);\n\tdialog->exec();\n\tdelete dialog;\n\tif (dialog->result() == QDialog::Accepted) {\n\t\tthis->profile_manager->add_group(group);\n\t\tthis->update_list();\n\t\temit refresh();\n\t}\n}", "CodeBleu_score": 42.276666283898045}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t", "CodeBleu_score": 3.758289013154928}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tif (!device) {\n\t\tthrow MapReaderException(MapReaderException::InternalError, \"No device given to read tileset from.\");\n\t}\n\tif (path.isEmpty()) {\n\t\tthrow MapReaderException(MapReaderException::InternalError, \"No path given to read tileset from.\");\n\t}\n\n\tclearErrors();\n\t_path = path;\n\t_device = device;\n\t_isExternal = true;\n\t_readingTileset = true;\n\n\tQXmlStreamReader reader(device);\n\tif (!reader.readNextStartElement()) {\n\t\tthrow MapReaderException(MapReaderException::InvalidFile, \"File is empty.\");\n\t}\n\tif (reader.name() != \"tileset\") {\n\t\tthrow MapReaderException(MapReaderException::InvalidFile, \"File is not a tileset.\");\n\t}\n\n\treturn readTileset(reader);\n}", "CodeBleu_score": 45.634219908515384}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t\tif (m_error) {\n\t\tm_error = false;\n\t\tm_errorString.clear();\n\t}\n\n\tm_path = path;\n\tm_device = device;\n\tm_readingExternalTileset = true;\n\n\tm_reader.setDevice(m_device);\n\tm_reader.setDevice(m_device);\n\tm_reader.readNext();\n\n\tif (m_reader.tokenType() != QXmlStreamReader::StartElement || m_reader.name() != \"tileset\") {\n\t\tsetError(tr(\"The file is not a tileset\"));\n\t\treturn SharedTileset();\n\t}\n\n\treturn readTileset();\n}", "CodeBleu_score": 52.85457641154843}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\n\tif (lpLibFileName == NULL) {\n\t\tSetLastError(ERROR_ACCESS_DENIED);\n\t\treturn NULL;\n\t}\n\n\t// Check if the library is blacklisted\n\tif (is_blacklisted(lpLibFileName)) {\n\t\tSetLastError(ERROR_ACCESS_DENIED);\n\t\treturn NULL;\n\t}\n\n\t// Call the original function\n\treturn LoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 61.67124850202622}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t\n\tif (lpLibFileName != NULL) {\n\t\t// Check if the library is blacklisted\n\t\tif (checkBlacklist(lpLibFileName)) {\n\t\t\tSetLastError(ERROR_ACCESS_DENIED);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\n\t// Call the original LoadLibraryExW function\n\treturn LoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 62.28231455737829}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t", "CodeBleu_score": 7.396618837802461}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t\tQUrl url;\n\tQByteArray data;\n\tQDir dir = m_BoxArtDir;\n\tQFile file(dir.filePath(QString::number(appId) + \".png\"));\n\n\t// Create the cache directory if it did not already exist\n\tif (!dir.exists(computer->uuid)) {\n\t\tdir.mkdir(computer->uuid);\n\t}\n\n\t// Change to this computer's box art cache folder\n\tdir.cd(computer->uuid);\n\n\t// If the cached file already exists, return the local file URL\n\tif (file.exists()) {\n\t\treturn QUrl::fromLocalFile(file.fileName());\n\t}\n\n\t// Create the HTTP client\n\tQNetworkAccessManager *manager = new QNetworkAccessManager();\n\tQNetworkRequest request(QUrl(\"http://%1:%2/boxart/%3\").arg(computer->address).arg(computer->port).arg(appId));\n\n\t// Download the image\n\tQNetworkReply *reply = manager->get(request);\n\tif (reply->error() == QNetworkReply::NoError) {\n\t\tdata = reply->readAll();\n\n\t\t// Save the image to the cache\n\t\tif (file.open(QIODevice::WriteOnly)) {\n\t\t\tfile.write(data);\n\t\t\tfile.close();\n\n\t\t\t// Return the local file URL\n\t\t\treturn QUrl::fromLocalFile(file.fileName());\n\t\t} else {\n\t\t\t// Ensure any zero-byte file is removed\n\t\t\tfile.remove();\n\t\t}\n\t}\n\n\t// Return an empty URL\n\treturn QUrl();\n}", "CodeBleu_score": 45.340578226605736}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t\n#ifdef QT_DEBUG\n    qDebug() << \"BoxArtManager::loadBoxArtFromNetwork()\";\n#endif\n\n    // Create an HTTP client\n    QNetworkAccessManager *manager = new QNetworkAccessManager(this);\n\n    // Get the cache path for the box art\n    QString filePath = getFilePathForBoxArt(computer, appId);\n\n    // Check if the file already exists\n    if (QFile::exists(filePath)) {\n        return QUrl::fromLocalFile(filePath);\n    }\n\n    // Create the HTTP request\n    QNetworkRequest request(QUrl(QString(\"http://%1/boxart/%2\").arg(computer->address).arg(appId)));\n\n    // Set the user agent\n    request.setRawHeader(QByteArray(\"User-Agent\"), QByteArray(\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:40.0) Gecko/20100101 Firefox/40.1\"));\n\n    // Send the request\n    QNetworkReply *reply = manager->get(request);\n\n    // Wait for the reply to finish\n    while (!reply->isFinished()) {\n        QCoreApplication::processEvents();\n    }\n\n    // Check if the reply has an error\n    if (reply->error() != QNetworkReply::NoError) {\n        // Delete the reply\n        reply->deleteLater();\n\n        // Delete the HTTP client\n        manager->deleteLater();\n\n        // Ensure any zero-byte file is removed\n        QFile::remove(filePath);\n\n        return QUrl();\n    }\n\n    // Create a QBuffer for the reply\n    QBuffer *buffer = new QBuffer(this);\n\n    // Open the buffer for writing\n    buffer->open(QIODevice::WriteOnly);\n\n    // Write the reply to the buffer\n    buffer->write(reply->readAll());\n\n    // Close the buffer\n    buffer->close();\n\n    // Delete the reply\n    reply->deleteLater();\n\n    // Delete the HTTP client\n    manager->deleteLater();\n\n    // Save the image to the cache path\n    if (buffer->size() > 0) {\n        QFile file(filePath);\n        if (file.open(QIODevice::WriteOnly)) {\n            file.write(buffer->data());\n            file.close();\n            return QUrl::fromLocalFile(filePath);\n        }\n    }\n\n    // Ensure any zero-byte file is removed\n    QFile::remove(filePath);\n\n    return QUrl();\n}", "CodeBleu_score": 44.747547332737504}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t#ifdef QT_NO_OPENSSL\n    return QUrl();\n#else\n    // Create the HTTP client\n    QNetworkAccessManager* manager = new QNetworkAccessManager(this);\n    QNetworkRequest request;\n\n    // Determine the cache path\n    QString path = getFilePathForBoxArt(computer, appId);\n\n    // Create the request\n    request.setUrl(QUrl(m_BaseUrl + QString::number(appId) + \".png\"));\n    request.setRawHeader(QString(\"User-Agent\").toUtf8(), QString(\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.125 Safari/537.36\").toUtf8());\n\n    // Attempt to download the box art image\n    QNetworkReply* reply = manager->get(request);\n    QEventLoop eventLoop;\n    QObject::connect(reply, SIGNAL(finished()), &eventLoop, SLOT(quit()));\n    eventLoop.exec();\n\n    // If the image was successfully downloaded, save it to the cache path\n    if (reply->error() == QNetworkReply::NoError) {\n        QFile file(path);\n        if (file.open(QIODevice::WriteOnly)) {\n            file.write(reply->readAll());\n            file.close();\n        }\n\n        // Return the local file URL of the cached image\n        return QUrl::fromLocalFile(path);\n    }\n    else {\n        // If the image download failed, ensure any zero-byte file is removed\n        QFile file(path);\n        if (file.exists() && file.size() == 0) {\n            file.remove();\n        }\n\n        // Return an empty URL\n        return QUrl();\n    }\n#endif\n}", "CodeBleu_score": 47.05602057493058}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t#ifdef NV_QT_ENABLE_MDNS\n    bool added = false;\n    QHostAddress bestAddress = getBestGlobalAddressV6(addresses);\n\n    if (bestAddress.protocol() == QAbstractSocket::IPv6Protocol) {\n        if (bestAddress.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n            // Link-local\n            added = addComputer(computer->address, bestAddress, true);\n        } else if (bestAddress.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n            qInfo() << \"Ignoring site-local address:\" << bestAddress;\n        } else if (bestAddress.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n            qInfo() << \"Ignoring ULA:\" << bestAddress;\n        } else if (bestAddress.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n            qInfo() << \"Ignoring 6to4 address:\" << bestAddress;\n        } else if (bestAddress.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n            qInfo() << \"Ignoring Teredo address:\" << bestAddress;\n        } else {\n            added = addComputer(computer->address, bestAddress, false);\n        }\n    } else {\n        for (const QHostAddress& address : addresses) {\n            if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n                added = addComputer(computer->address, address, false);\n                break;\n            }\n        }\n\n        if (!added) {\n            added = addComputer(computer->address, bestAddress, false);\n        }\n    }\n\n    if (added) {\n        qInfo() << \"Added host:\" << computer->address << \"with address:\" << bestAddress;\n    } else {\n        qInfo() << \"Failed to add host:\" << computer->address;\n    }\n\n    // Remove from pending list and schedule for deletion\n    delete computer;\n#endif\n}", "CodeBleu_score": 61.32603372520501}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t#ifdef _DEBUG\n    qInfo() << \"ComputerManager::handleMdnsServiceResolved()\";\n#endif\n\n    if (addresses.isEmpty()) {\n        qWarning() << \"No addresses found for\" << computer->address();\n        return;\n    }\n\n    QHostAddress bestAddress = getBestGlobalAddressV6(addresses);\n    if (bestAddress.protocol() == QAbstractSocket::IPv4Protocol) {\n        for (const QHostAddress& address : addresses) {\n            if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n                addNewHost(address, false, bestAddress);\n                return;\n            }\n        }\n    }\n\n    if (bestAddress.protocol() == QAbstractSocket::IPv6Protocol) {\n        if (bestAddress.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n            // Link-local\n            addNewHost(bestAddress, true, bestAddress);\n        } else if (bestAddress.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n            // Site-local\n            addNewHost(bestAddress, true, bestAddress);\n        } else if (bestAddress.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n            // Unique-local\n            addNewHost(bestAddress, true, bestAddress);\n        } else if (bestAddress.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n            // 6to4\n            addNewHost(bestAddress, true, bestAddress);\n        } else if (bestAddress.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n            // Teredo\n            addNewHost(bestAddress, true, bestAddress);\n        } else {\n            // Other IPv6\n            addNewHost(bestAddress, true, bestAddress);\n        }\n    }\n\n    // Remove from pending list\n    {\n        QMutexLocker locker(&mPendingAddMutex);\n        mPendingAddList.removeOne(computer);\n    }\n\n    // Schedule for deletion\n    delete computer;\n}", "CodeBleu_score": 52.31967059834769}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t", "CodeBleu_score": 3.2626930800247504}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\tQ_ASSERT(m_DelayedFlushThread != nullptr && m_DelayedFlushThread->isRunning());\n\n    // Punt to a worker thread because QSettings on macOS can take ages (> 500 ms)\n    // to persist our host list to disk (especially when a host has a bunch of apps).\n    QMutexLocker locker(&m_DelayedFlushMutex);\n    if (computer->isChanged()) {\n        m_NeedsDelayedFlush = true;\n        m_DelayedFlushCondition.wakeOne();\n    }\n}", "CodeBleu_score": 37.59192834412011}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t", "CodeBleu_score": 3.2586256447221946}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t#ifdef Q_OS_WIN32\n    QMutexLocker locker(&m_HostListMutex);\n    auto it = m_HostList.find(computer->getHostname());\n    if (it == m_HostList.end()) {\n        return;\n    }\n\n    // If the host has no apps, we don't need to save it.\n    if (computer->getApps().empty()) {\n        m_HostList.erase(it);\n        return;\n    }\n\n    auto &host = it.value();\n    if (host.isSame(computer)) {\n        return;\n    }\n\n    host.setFromComputer(computer);\n    m_NeedsDelayedFlush = true;\n    m_DelayedFlushCondition.wakeOne();\n#endif\n}", "CodeBleu_score": 48.76024223662964}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\t// If the new app list is identical to the current app list, return false\n\tif (appList == newAppList) {\n\t\treturn false;\n\t}\n\n\t// Copy the current app list to a temporary vector\n\tQVector<NvApp> tempAppList = appList;\n\n\t// For each app in the new app list, copy its client-side attributes from the corresponding app in the current app list\n\tfor (int i = 0; i < newAppList.size(); i++) {\n\t\tfor (int j = 0; j < tempAppList.size(); j++) {\n\t\t\tif (newAppList[i].id == tempAppList[j].id) {\n\t\t\t\tnewAppList[i].hidden = tempAppList[j].hidden;\n\t\t\t\tnewAppList[i].directLaunch = tempAppList[j].directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Update the app list with the new app list\n\tappList = newAppList;\n\n\t// Sort the app list\n\tsortAppList();\n\n\t// Return true\n\treturn true;\n}", "CodeBleu_score": 63.05703696166827}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\t// If the new app list is identical to the current app list, return false.\n    if (appList == newAppList)\n        return false;\n\n    // Propagate client-side attributes from the current app list to the new app list.\n    for (NvApp& app : appList) {\n        for (NvApp& newApp : newAppList) {\n            if (app.id == newApp.id) {\n                newApp.hidden = app.hidden;\n                newApp.directLaunch = app.directLaunch;\n                break;\n            }\n        }\n    }\n\n    // Update the app list with the new list.\n    appList = newAppList;\n\n    // Sort the app list.\n    sortAppList();\n\n    return true;\n}", "CodeBleu_score": 79.76144879598576}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t\tif (appList == newAppList) {\n\t\treturn false;\n\t}\n\n\tfor (NvApp& app : appList) {\n\t\tfor (NvApp& newApp : newAppList) {\n\t\t\tif (app.id == newApp.id) {\n\t\t\t\tapp.hidden = newApp.hidden;\n\t\t\t\tapp.directLaunch = newApp.directLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tappList = newAppList;\n\tsortAppList();\n\treturn true;\n}", "CodeBleu_score": 74.10013418372449}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser::parse(args);\n\tif (m_Host.isEmpty()) {\n\t\tqWarning() << \"No host specified.\";\n\t\tshowHelp();\n\t}\n}", "CodeBleu_score": 18.00364024099288}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser parser;\n\tparser.setDescription(\"Quit an app on a specified host.\");\n\tparser.addPositionalArgument(\"host\", \"The host to quit.\");\n\tparser.addOption(\"help\", \"Show help.\");\n\tparser.addOption(\"version\", \"Show version.\");\n\tif (!parser.parse(args)) {\n\t\tqCritical() << parser.errorString();\n\t\treturn;\n\t}\n\tif (parser.isSet(\"help\")) {\n\t\tparser.showHelp();\n\t\treturn;\n\t}\n\tif (parser.isSet(\"version\")) {\n\t\tparser.showVersion();\n\t\treturn;\n\t}\n\tif (parser.positionalArguments().count() != 1) {\n\t\tqCritical() << \"Invalid number of positional arguments.\";\n\t\treturn;\n\t}\n\tm_Host = parser.positionalArguments().at(0);\n}", "CodeBleu_score": 57.217902643348594}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t\tCommandLineParser::parse(args);\n\tif (m_Host.isEmpty()) {\n\t\tm_Error = tr(\"No host specified.\");\n\t}\n}", "CodeBleu_score": 18.258438813205284}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\tQDateWrap* obj = Napi::ObjectWrap<QDateWrap>::Unwrap(info.This());\n\tQDate* date = obj->getInternalInstance();\n\tint years = info[0].As<Napi::Number>().Int32Value();\n\tQDate newDate = date->addYears(years);\n\n\tNapi::Object result = QDateWrap::constructor.New({Napi::External<QDate>::New(env, &newDate)});\n\treturn result;\n}", "CodeBleu_score": 53.641846200051056}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\t// Check the input parameters.\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"Invalid number of parameters.\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, \"Invalid parameter type.\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\t// Retrieve the parameters.\n\tint years = info[0].As<Napi::Number>().Int32Value();\n\n\t// Create a new QDate instance.\n\tQDate* date = new QDate(this->instance.addYears(years));\n\n\t// Wrap the instance in a new QDateWrap class instance and return it.\n\tQDateWrap* dateWrap = new QDateWrap(date);\n\treturn dateWrap->getInternalInstance();\n}", "CodeBleu_score": 52.57961195339449}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nif (info.Length() != 1) {\nNapi::TypeError::New(env, \"Wrong number of arguments\")\n.ThrowAsJavaScriptException();\n}\n\nQDateWrap* obj = Napi::ObjectWrap<QDateWrap>::Unwrap(info.This());\n\nif (!obj) {\nNapi::Error::New(env, \"Node FFI: wrap: object could not be retrieved from wrapped pointer\")\n.ThrowAsJavaScriptException();\n}\n\nQDate* instance = obj->getInternalInstance();\n\nif (!instance) {\nNapi::Error::New(env, \"Node FFI: instance: instance pointer is invalid\")\n.ThrowAsJavaScriptException();\n}\n\nint years = info[0].As<Napi::Number>().Int32Value();\n\nQDate result = instance->addYears(years);\n\nreturn QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(result))});\n}", "CodeBleu_score": 54.93311271297492}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDateWrap* obj = Napi::ObjectWrap<QDateWrap>::Unwrap(info.This().As<Napi::Object>());\n\tQDate currentDate = QDate::currentDate();\n\tobj->instance = new QDateWrap(currentDate);\n\treturn obj->instance->getInternalInstance().Value();\n}", "CodeBleu_score": 47.78596982395038}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t Napi::Env env = info.Env();\n Napi::HandleScope scope(env);\n QDateWrap* date = new QDateWrap(QDate::currentDate());\n return date->getInstance();\n}", "CodeBleu_score": 42.26347802416869}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t\tNapi::Env env = info.Env();\n\tQDateWrap* result = new QDateWrap(QDate::currentDate());\n\treturn result->getInstance();\n}", "CodeBleu_score": 38.75941675667644}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, ErrMsg::errMsg_wrongArgCount).ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, ErrMsg::errMsg_invalidArgType).ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tQDate date = QDate::fromMSecsSinceEpoch(info[0].As<Napi::Number>().Int64Value());\n\treturn Napi::Boolean::New(env, date.isLeapYear());\n}", "CodeBleu_score": 57.57628935542816}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"isLeapYear requires 1 argument\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, \"isLeapYear requires an integer argument\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tQDate* date = Napi::ObjectWrap<QDate>::Unwrap(info.This().As<Napi::Object>());\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\tbool result = date->isLeapYear(year);\n\treturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 64.10221156211146}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tif (!info[0].IsNumber()) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\tint year = info[0].As<Napi::Number>().Int32Value();\n\tQDate date(year, 1, 1);\n\treturn Napi::Boolean::New(env, date.isLeapYear());\n}", "CodeBleu_score": 64.71657213210875}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQDateTimeWrap* other = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tQDateTimeWrap* wrap = QDateTimeWrap::Unwrap(info.This());\n\tQDateTime otherQt = other->getInternalInstance();\n\tQDateTime currentQt = wrap->getInternalInstance();\n\tint result = currentQt.daysTo(otherQt);\n\treturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 64.0353549284485}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\t// Check if the first argument is a QDateTimeWrap object.\n\tif (!info[0]->IsObject() || !QDateTimeWrap::hasInstance(info[0].As<Napi::Object>())) {\n\t\tNapi::TypeError::New(env, \"QDateTimeWrap::daysTo(): Argument is not a QDateTimeWrap object.\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\t// Unwrap the QDateTimeWrap object.\n\tQDateTimeWrap* qDateTimeWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\n\t// Check if the second argument is a QDateTimeWrap object.\n\tif (!info[1]->IsObject() || !QDateTimeWrap::hasInstance(info[1].As<Napi::Object>())) {\n\t\tNapi::TypeError::New(env, \"QDateTimeWrap::daysTo(): Argument is not a QDateTimeWrap object.\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\t// Unwrap the QDateTimeWrap object.\n\tQDateTimeWrap* qDateTimeWrap2 = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[1].As<Napi::Object>());\n\n\t// Calculate the number of days to the other QDateTimeWrap object.\n\tint result = qDateTimeWrap->instance->daysTo(*qDateTimeWrap2->instance);\n\n\t// Return the result as a Napi::Value.\n\treturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 55.16219398531067}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\t// Check the input parameters.\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\t// Check if the input parameter is a QDateTimeWrap object.\n\tQDateTimeWrap* qdtOtherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tif (qdtOtherWrap == nullptr) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\t// Call the C++ function.\n\tQDateTime qdtOther = qdtOtherWrap->getInternalInstance();\n\tint days = this->instance->daysTo(qdtOther);\n\n\t// Return the result.\n\treturn Napi::Number::New(env, days);\n}", "CodeBleu_score": 58.7916176150704}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t Napi::Env env = info.Env();\n Napi::HandleScope scope(env);\n\n if (info.Length() != 1) {\n  Napi::TypeError::New(env, \"msecsTo() requires one argument\").ThrowAsJavaScriptException();\n  return env.Null();\n }\n\n if (!info[0]->IsObject()) {\n  Napi::TypeError::New(env, \"msecsTo() requires a QDateTimeWrap object as argument\").ThrowAsJavaScriptException();\n  return env.Null();\n }\n\n QDateTimeWrap* arg0_wrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0]->ToObject());\n QDateTime* arg0 = arg0_wrap->getInternalInstance();\n if (!arg0) {\n  Napi::Error::New(env, \"msecsTo(): could not retrieve argument node's internal instance\").ThrowAsJavaScriptException();\n  return env.Null();\n }\n\n int result = getInternalInstance()->msecsTo(*arg0);\n\n return Napi::Number::New(env, result);\n}", "CodeBleu_score": 53.78693377159415}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\tQDateTimeWrap* otherObject = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tQDateTimeWrap* wrap = QDateTimeWrap::Unwrap(info.This());\n\tQDateTime other = otherObject->getInternalInstance();\n\tint msecs = wrap->getInternalInstance().msecsTo(other);\n\treturn Napi::Number::New(env, msecs);\n}", "CodeBleu_score": 63.64432484795913}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\t// Check the number of arguments passed.\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"msecsTo requires 1 argument\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\t// Check the argument type\n\tQDateTimeWrap* arg0Wrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tQDateTime* arg0Instance = arg0Wrap->getInternalInstance();\n\tif (!arg0Instance) {\n\t\tNapi::TypeError::New(env, \"Argument must be a QDateTimeWrap.\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\t// Call the QDateTime method on the internal instance and return the result.\n\tint result = getInternalInstance()->msecsTo(*arg0Instance);\n\treturn Napi::Number::New(env, result);\n}", "CodeBleu_score": 57.607446820501806}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\tNapi::Env env = info.Env();\nNapi::HandleScope scope(env);\n\nif (info.Length() != 2) {\nNapi::TypeError::New(env, \"Wrong number of arguments\")\n.ThrowAsJavaScriptException();\n}\n\nQItemSelectionModelWrap* obj = Napi::ObjectWrap<QItemSelectionModelWrap>::Unwrap(info.This());\n\nif (info[0].IsNull()) {\nNapi::Error::New(env, \"Parent index is required\").ThrowAsJavaScriptException();\n}\n\nif (info[1].IsNull()) {\nNapi::Error::New(env, \"Row is required\").ThrowAsJavaScriptException();\n}\n\nQModelIndexWrap* parentIndexWrap = Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[0].As<Napi::Object>());\nQModelIndex* parentIndex = parentIndexWrap->getInternalInstance();\nint row = info[1].As<Napi::Number>().Int32Value();\n\nbool result = obj->instance->rowIntersectsSelection(parentIndex, row);\nreturn Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 62.39187749183819}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t", "CodeBleu_score": 2.6251384921487797}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t", "CodeBleu_score": 2.6251384921487797}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\")\n\t\t\t.ThrowAsJavaScriptException();\n\t}\n\n\tif (!info[0].IsObject()) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\")\n\t\t\t.ThrowAsJavaScriptException();\n\t}\n\n\tQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tQSize otherSize = otherSizeWrap->getInternalInstance();\n\tQSize result = this->instance.expandedTo(otherSize);\n\treturn QSizeWrap::constructor.New({Napi::Number::New(env, result.width()), Napi::Number::New(env, result.height())});\n}", "CodeBleu_score": 64.20744878651539}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nif (info.Length() != 1 || !info[0].IsObject()) {\nNapi::TypeError::New(env, \"Invalid arguments\").ThrowAsJavaScriptException();\n}\n\nQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].ToObject());\nQSize otherSize = otherSizeWrap->getInternalInstance();\n\nQSize result = this->instance.expandedTo(otherSize);\n\nreturn QSizeWrap::constructor.New({Napi::Number::New(env, result.width()), Napi::Number::New(env, result.height())});\n}", "CodeBleu_score": 63.11088623153852}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tif (info.Length() != 1) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\tif (!info[0].IsObject()) {\n\t\tNapi::TypeError::New(env, \"Wrong arguments\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\tQSizeWrap* otherSizeWrap = Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\n\tQSize otherSize = otherSizeWrap->getInternalInstance();\n\tQSize result = getInternalInstance().expandedTo(otherSize);\n\treturn QSizeWrap::constructor.New({Napi::Number::New(env, result.width()), Napi::Number::New(env, result.height())});\n}", "CodeBleu_score": 62.66100605843874}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t [](const Napi::CallbackInfo& info) {\n  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  QApplication* qApp = Napi::ObjectWrap<StaticQApplicationWrap>::Unwrap(info.This())->getInternalInstance();\n  QString result = qApp->desktopFileName();\n\n  return Napi::String::New(env, result.toStdString());\n }\n}", "CodeBleu_score": 71.48687753300779}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t\n/* The wrapper function. */\n[](const Napi::CallbackInfo& info) {\n  Napi::Env env = info.Env();\n  Napi::HandleScope scope(env);\n\n  /* The number of arguments. */\n  int n = info.Length();\n\n  if (n == 0) {\n\n    /* The QApplication::desktopFileName() method takes no arguments. */\n    QString result = QApplication::desktopFileName();\n\n    /* The result is converted to a standard string and returned to the caller. */\n    return Napi::String::New(env, result.toStdString());\n  }\n\n  /* Error handling. */\n  Napi::TypeError::New(env, \"Wrong number of arguments\").ThrowAsJavaScriptException();\n  return env.Null();\n\n},\n\n/* The wrapper name. */\n\"desktopFileName\",\n\n/* The wrapper info. */\n{\n  {\n    /* The wrapper is a static method. */\n    napi_static,\n  },\n  {\n    /* The callback function. */\n    reinterpret_cast<napi_value>(desktopFileNameCallback),\n\n    /* The number of arguments. */\n    0,\n\n    /* The argument types. */\n    nullptr,\n  },\n}\n}", "CodeBleu_score": 73.65128115117474}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\tNapi::Env env = info.Env();\n\nQApplication* self = unwrap(info.This().As<Napi::Object>());\nNapi::String result = Napi::String::New(env, self->desktopFileName().toUtf8().constData());\n\nreturn result;\n}", "CodeBleu_score": 60.29995059022907}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nQClipboard* clipboard = unwrap(info.This().As<Napi::Object>());\n\nQMimeData* mimeData = new QMimeData();\nmimeData->setHtml(clipboard->text());\nmimeData->setUrls(clipboard->urls());\nmimeData->setImages(clipboard->images());\nmimeData->setText(clipboard->text());\nmimeData->setUrls(clipboard->urls());\nmimeData->setImages(clipboard->images());\nmimeData->setHtml(clipboard->text());\n\nQMimeDataWrap* wrapper = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, mimeData)});\n\nreturn wrapper->Value();\n}", "CodeBleu_score": 53.18626247033325}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\tNapi::Env env = info.Env();\n\nNapi::Object self = info.This().As<Napi::Object>();\nQClipboard* q_obj = Napi::ObjectWrap<QClipboard>::Unwrap(self);\n\nif (info.Length() != 0) {\n  Napi::TypeError::New(env, \"Wrong number of arguments\")\n  .ThrowAsJavaScriptException();\n}\n\nQMimeData* result = q_obj->mimeData();\n\nNapi::Value result_temp;\nNapi::Object result_temp_obj;\nif (result != NULL) {\n  result_temp_obj = Napi::Object::New(env);\n  result_temp = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, result)});\n  result_temp_obj.Set(\"mimeData\", result_temp);\n  result_temp_obj.Set(\"mode\", Napi::String::New(env, \"QClipboard::Clipboard\"));\n} else {\n  result_temp_obj = Napi::Object::New(env);\n  result_temp = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, result)});\n  result_temp_obj.Set(\"mimeData\", result_temp);\n  result_temp_obj.Set(\"mode\", Napi::String::New(env, \"QClipboard::Clipboard\"));\n}\n\nreturn result_temp_obj;\n}", "CodeBleu_score": 48.815568256680045}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tQClipboard* clipboard = unwrap(info.This().As<Napi::Object>());\n\tQClipboard::Mode mode = (QClipboard::Mode) info[0].As<Napi::Number>().Int32Value();\n\tQMimeData* mimeData = clipboard->mimeData(mode);\n\tQMimeData* clone = new QMimeData();\n\tclone->setText(mimeData->text());\n\tclone->setUrls(mimeData->urls());\n\tclone->setHtml(mimeData->html());\n\tclone->setImages(mimeData->images());\n\tclone->setUrls(mimeData->urls());\n\tclone->setColorData(mimeData->colorData());\n\treturn QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, clone)});\n}", "CodeBleu_score": 59.413563018653505}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tNapi::Object self = info.This().As<Napi::Object>();\n\tQDragWrap* wrap = Napi::ObjectWrap<QDragWrap>::Unwrap(self);\n\tQDrag* drag = wrap->getInternalInstance();\n\n\tQObject* source = drag->source();\n\tif (source == nullptr) {\n\t\treturn env.Null();\n\t}\n\n\tNapi::Object result = Napi::ObjectWrap<QObjectWrap>::New(env, source);\n\treturn result;\n\n}", "CodeBleu_score": 56.38539050289367}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tNapi::Object self = info.This().As<Napi::Object>();\n\n\t// [1] If arguments are not correct, throw an error\n\tif (info.Length() != 0) {\n\t\tNapi::TypeError::New(env, \"Wrong number of arguments\")\n\t\t\t.ThrowAsJavaScriptException();\n\t}\n\n\t// [2] Get internal data\n\tQDragWrap* qtDragWrap = Napi::ObjectWrap<QDragWrap>::Unwrap(self);\n\tQDrag* qtDrag = qtDragWrap->getInternalInstance();\n\tif (qtDrag == nullptr) {\n\t\tNapi::Error::New(env, \"Internal instance is null\").ThrowAsJavaScriptException();\n\t\treturn env.Null();\n\t}\n\n\t// [3] Get source object\n\tQObject* sourceObject = qtDrag->source();\n\n\t// [4] Create new instance of QObjectWrap and return it\n\treturn QObjectWrap::constructor.New({Napi::External<QObject>::New(env, sourceObject)});\n}", "CodeBleu_score": 50.371164569371544}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t\tNapi::Env env = info.Env();\n\tNapi::HandleScope scope(env);\n\n\tQDragWrap* dragWrap = Napi::ObjectWrap<QDragWrap>::Unwrap(info.This().As<Napi::Object>());\n\tQDrag* drag = dragWrap->getInternalInstance();\n\n\tQObject* source = drag->source();\n\tif (source == nullptr) {\n\t\treturn env.Null();\n\t}\n\n\tQObjectWrap* sourceWrap = new QObjectWrap(source);\n\tQObjectWrap* sourceInstance = sourceWrap->getInstance();\n\n\treturn sourceInstance->Value();\n}", "CodeBleu_score": 54.03558708734151}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (this.ToolTip != null) {\n\t\tthis.ToolTip.IsOpen = false;\n\t}\n\tif (this.IsMouseOver) {\n\t\tPoint mousePos = e.GetPosition(this);\n\t\tint rowIndex = this.GetRowAt(mousePos);\n\t\tint columnIndex = this.GetColumnAt(mousePos);\n\t\tif (rowIndex >= 0 && columnIndex >= 0) {\n\t\t\tthis.SelectIndex = rowIndex * this.ColumnCount + columnIndex;\n\t\t\tif (this.SelectIndex >= 0 && this.SelectIndex < this.Items.Count) {\n\t\t\t\tBarItem barItem = this.Items[this.SelectIndex];\n\t\t\t\tif (barItem != null && barItem.Bars != null && barItem.Bars.Count > 0) {\n\t\t\t\t\tthis.ToolTipText = barItem.ToolTipText;\n\t\t\t\t\tif (this.ToolTip != null) {\n\t\t\t\t\t\tSize size = this.ToolTip.DesiredSize;\n\t\t\t\t\t\tthis.ToolTip.IsOpen = true;\n\t\t\t\t\t\tPoint position = new Point(mousePos.X + 20, mousePos.Y - size.Height - 20);\n\t\t\t\t\t\tif (position.X + size.Width > this.ActualWidth) {\n\t\t\t\t\t\t\tposition.X = mousePos.X - size.Width - 20;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (position.Y < 0) {\n\t\t\t\t\t\t\tposition.Y = mousePos.Y + 20;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.ToolTip.Placement = PlacementMode.Absolute;\n\t\t\t\t\t\tthis.ToolTip.HorizontalOffset = position.X;\n\t\t\t\t\t\tthis.ToolTip.VerticalOffset = position.Y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 21.9036189652471}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (this.ToolTip == null) {\n\t\treturn;\n\t}\n\tif (this.ToolTip.IsVisible) {\n\t\treturn;\n\t}\n\tPoint mousePos = e.Location;\n\tmousePos.X -= this.ClientRectangle.X;\n\tmousePos.Y -= this.ClientRectangle.Y;\n\tif (mousePos.X < 0 || mousePos.Y < 0 || mousePos.X > this.ClientRectangle.Width || mousePos.Y > this.ClientRectangle.Height) {\n\t\treturn;\n\t}\n\tint selectIndex = this.SelectIndexFromPoint(mousePos);\n\tif (selectIndex < 0) {\n\t\treturn;\n\t}\n\tif (this.Bars.Count <= selectIndex) {\n\t\treturn;\n\t}\n\tstring tipText = this.GetTipText(selectIndex);\n\tif (tipText == null) {\n\t\treturn;\n\t}\n\tSize tipSize = this.GetTextSize(tipText);\n\tif (tipSize.Width > this.ClientRectangle.Width) {\n\t\ttipSize.Width = this.ClientRectangle.Width;\n\t}\n\tif (tipSize.Height > this.ClientRectangle.Height) {\n\t\ttipSize.Height = this.ClientRectangle.Height;\n\t}\n\tPoint tipPos = this.GetTipPosition(selectIndex, tipSize);\n\tthis.ToolTip.Text = tipText;\n\tthis.ToolTip.Size = tipSize;\n\tthis.ToolTip.Show(this, tipPos);\n}", "CodeBleu_score": 18.334751996127718}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (this.ToolTip == null) {\n\t\treturn;\n\t}\n\tif (this.ToolTip.IsVisible) {\n\t\treturn;\n\t}\n\tif (this.ClientRectangle.Contains(e.Location)) {\n\t\ttry {\n\t\t\tint index = this.HitTest(e.X, e.Y);\n\t\t\tif (index >= 0) {\n\t\t\t\tif (this.Bars.Count > 0) {\n\t\t\t\t\tthis.SelectIndex = index;\n\t\t\t\t\tthis.ToolTip.Text = this.Bars[this.SelectIndex].ToString();\n\t\t\t\t\tSize size = TextRenderer.MeasureText(this.ToolTip.Text, this.ToolTip.Font);\n\t\t\t\t\tif (size.Width > this.ToolTip.Width) {\n\t\t\t\t\t\tthis.ToolTip.Size = new Size(size.Width + 10, size.Height + 10);\n\t\t\t\t\t}\n\t\t\t\t\tPoint location = this.PointToScreen(new Point(e.X, e.Y));\n\t\t\t\t\tlocation.Y += 20;\n\t\t\t\t\tif (location.Y + this.ToolTip.Height > Screen.PrimaryScreen.WorkingArea.Bottom) {\n\t\t\t\t\t\tlocation.Y = this.PointToScreen(new Point(e.X, e.Y)).Y - this.ToolTip.Height - 20;\n\t\t\t\t\t}\n\t\t\t\t\tif (location.X + this.ToolTip.Width > Screen.PrimaryScreen.WorkingArea.Right) {\n\t\t\t\t\t\tlocation.X = this.PointToScreen(new Point(e.X, e.Y)).X - this.ToolTip.Width - 20;\n\t\t\t\t\t}\n\t\t\t\t\tthis.ToolTip.Location = location;\n\t\t\t\t\tthis.ToolTip.Show(this, e.Location);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tLog.Error(ex);\n\t\t}\n\t}\n}", "CodeBleu_score": 29.95092790164676}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null) return;\nif (!Option.Show) return;\n\nif (Option.ToolTip.Show) {\nDrawToolTip(g);\n}\n\nDrawSeries(g, Option.Series);\nDrawAxis(g);\nDrawTitle(g);\nif (Option.ToolTip.Show) {\nDrawToolTip(g);\n}\n\nDrawLegend(g);\nDrawAxisScales(g);\n}", "CodeBleu_score": 44.96523062354994}, {"code": "protected override void DrawOption(Graphics g){\n\tif (Option == null) return;\nif (!Option.NeedDraw) return;\n\nif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\nDrawToolTip(g);\n}\n\nDrawSeries(g, Option.Series);\nDrawAxis(g);\n\nif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\nDrawToolTip(g);\n}\n\nif (Option.Title.Show) {\nDrawTitle(g);\n}\n\nif (Option.Legend.Show) {\nDrawLegend(g);\n}\n\nDrawAxisScales(g);\n}", "CodeBleu_score": 68.87295402634375}, {"code": "protected override void DrawOption(Graphics g){\n\t\tif (Option == null || !Option.Show) return;\n\tif (Option.ToolTip.Show) {\n\t\tDrawToolTip(g);\n\t}\n\n\tDrawSeries(g, Option.Series);\n\tDrawAxis(g);\n\tDrawTitle(g);\n\tif (Option.ToolTip.Show && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n\t\tDrawToolTip(g);\n\t}\n\n\tDrawLegend(g);\n\tDrawAxisScales(g);\n}", "CodeBleu_score": 49.90861281723522}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (this.SelectedIndex == -1)\n\t\treturn;\n\tint index = this.SelectedIndex;\n\tif (this.ToolTipType == ChartToolTipType.Shadow) {\n\t\t// Draw a shadow around the selected index\n\t\tRectangle shadowRect = this.GetShadowRect(index);\n\t\tusing (SolidBrush brush = new SolidBrush(Color.FromArgb(100, Color.Black))) {\n\t\t\tg.FillRectangle(brush, shadowRect);\n\t\t}\n\t} else {\n\t\t// Draw a vertical line at the selected index\n\t\tint x = this.GetDrawingOrigin(index) + this.BarWidth / 2;\n\t\tusing (Pen pen = new Pen(Color.Black)) {\n\t\t\tg.DrawLine(pen, x, 0, x, this.Height);\n\t\t}\n\t}\n}", "CodeBleu_score": 19.50958773306891}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (this.SelectedIndex < 0) return;\n\n\t// Create a rectangle for the tooltip\n\tRectangleF rect = new RectangleF(this.ChartArea.PlotArea.X + this.BarWidth * this.SelectedIndex, this.ChartArea.PlotArea.Y, this.BarWidth, this.ChartArea.PlotArea.Height);\n\n\t// If the tooltip is a shadow, fill the rectangle\n\tif (this.ToolTipType == ChartToolTipType.Shadow) {\n\t\tg.FillRectangle(new SolidBrush(Color.FromArgb(224, 224, 224)), rect);\n\t}\n\n\t// If the tooltip is a line, draw a vertical line\n\tif (this.ToolTipType == ChartToolTipType.Line) {\n\t\tg.DrawLine(new Pen(Color.Black, 1), rect.Left + (rect.Width / 2), rect.Top, rect.Left + (rect.Width / 2), rect.Bottom);\n\t}\n}", "CodeBleu_score": 32.067491326063355}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t\tif (this.Chart.Series.Count == 0)\n\t\treturn;\n\tif (this.Chart.Series[0].Points.Count == 0)\n\t\treturn;\n\n\t// Check if the mouse is over the chart area\n\tif (this.Chart.ChartArea.ClientRectangle.Contains(this.Chart.MousePosition)) {\n\t\t// Get the tooltip type\n\t\tstring tooltipType = this.GetToolTipType();\n\t\tif (tooltipType == \"None\")\n\t\t\treturn;\n\n\t\t// Get the index of the closest point\n\t\tint index = this.GetClosestPointIndex();\n\n\t\t// Check if the tooltip type is a line\n\t\tif (tooltipType == \"Line\") {\n\t\t\t// Draw a vertical line\n\t\t\tPen pen = new Pen(this.Chart.Series[0].Color, 1);\n\t\t\tpen.DashStyle = ChartDashStyle.Solid;\n\t\t\tg.DrawLine(pen, this.Chart.ChartArea.Position.X + (index + 0.5) * this.Chart.ChartArea.Width / this.Chart.Series[0].Points.Count, this.Chart.ChartArea.Position.Y, this.Chart.ChartArea.Position.X + (index + 0.5) * this.Chart.ChartArea.Width / this.Chart.Series[0].Points.Count, this.Chart.ChartArea.Position.Y + this.Chart.ChartArea.Height);\n\t\t}\n\n\t\t// Check if the tooltip type is a shadow\n\t\tif (tooltipType == \"Shadow\") {\n\t\t\t// Fill a rectangle\n\t\t\tRectangle shadowRect = new Rectangle(this.Chart.ChartArea.Position.X + (index + 0.5) * this.Chart.ChartArea.Width / this.Chart.Series[0].Points.Count - 2, this.Chart.ChartArea.Position.Y - 2, 5, this.Chart.ChartArea.Height + 4);\n\t\t\tusing (Brush brush = new SolidBrush(Color.FromArgb(128, this.Chart.Series[0].Color)))\n\t\t\t\tg.FillRectangle(brush, shadowRect);\n\t\t}\n\t}\n}", "CodeBleu_score": 27.393958840397847}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t", "CodeBleu_score": 1.8961345311634397}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\t\tif (emptyOption == null) {\n\t\temptyOption = new DoughnutChartOptions {\n\t\t\tTitle = new TitleOptions {\n\t\t\t\tDisplay = true,\n\t\t\t\tText = \"Chart.js Doughnut Chart - Empty\"\n\t\t\t},\n\t\t\tLegend = new LegendOptions {\n\t\t\t\tPosition = PositionType.Right,\n\t\t\t\tLabels = new LegendLabelOptions {\n\t\t\t\t\tUsePointStyle = true\n\t\t\t\t}\n\t\t\t},\n\t\t\tAnimation = new AnimationOptions {\n\t\t\t\tAnimateScale = true,\n\t\t\t\tAnimateRotate = true\n\t\t\t}\n\t\t};\n\t\temptyOption.Plugins = new DoughnutChartOptions.PluginsOptions {\n\t\t\tDoughnutLabel = new DoughnutLabelOptions {\n\t\t\t\tShowPercentage = true,\n\t\t\t\tShowTitle = true,\n\t\t\t\tShowLegend = true\n\t\t\t}\n\t\t};\n\t\tDoughnutDataset dataset = new DoughnutDataset();\n\t\tdataset.Data.Add(10);\n\t\tdataset.Data.Add(20);\n\t\tdataset.Data.Add(50);\n\t\tdataset.Data.Add(10);\n\t\tdataset.Data.Add(20);\n\t\temptyOption.Data.Datasets.Add(dataset);\n\t\temptyOption.Data.Labels.Add(\"Red\");\n\t\temptyOption.Data.Labels.Add(\"Blue\");\n\t\temptyOption.Data.Labels.Add(\"Yellow\");\n\t\temptyOption.Data.Labels.Add(\"Green\");\n\t\temptyOption.Data.Labels.Add(\"Purple\");\n\t}\n}", "CodeBleu_score": 22.02127382296831}, {"code": "protected override void CreateEmptyOption(){\n\t\t// The chart option is initialized.\n\temptyOption = new DoughnutChartOptions();\n\n\t// Set chart title and subtitle.\n\temptyOption.Title.Add(new Title\n\t{\n\t\tText = \"Empty Doughnut Chart\"\n\t});\n\temptyOption.Subtitle.Add(new Subtitle\n\t{\n\t\tText = \"Empty Doughnut Chart\"\n\t});\n\n\t// Add a doughnut series to the chart.\n\tDoughnutSeries doughnutSeries = new DoughnutSeries\n\t{\n\t\tName = \"Doughnut Series\",\n\t\tCenter = new List<double> { 100, 120 },\n\t\tRadius = new List<string> { \"40%\", \"60%\" },\n\t\tData = new List<DoughnutDataPoint>\n\t\t{\n\t\t\tnew DoughnutDataPoint { Name = \"Data Point 1\", Y = 10 },\n\t\t\tnew DoughnutDataPoint { Name = \"Data Point 2\", Y = 20 },\n\t\t\tnew DoughnutDataPoint { Name = \"Data Point 3\", Y = 30 },\n\t\t\tnew DoughnutDataPoint { Name = \"Data Point 4\", Y = 40 },\n\t\t\tnew DoughnutDataPoint { Name = \"Data Point 5\", Y = 50 }\n\t\t}\n\t};\n\temptyOption.Series.Add(doughnutSeries);\n}", "CodeBleu_score": 20.72003804604635}, {"code": "protected override void CreateEmptyOption(){\n\t\tif (emptyOption == null) {\n\t\temptyOption = new DoughnutChartOptions();\n\t\temptyOption.Title = new Title\n\t\t{\n\t\t\tText = \"Empty Chart\"\n\t\t};\n\t\temptyOption.SubTitle = new Subtitle\n\t\t{\n\t\t\tText = \"This chart is empty!\"\n\t\t};\n\t\temptyOption.Series = new List<Series>\n\t\t{\n\t\t\tnew Series\n\t\t\t{\n\t\t\t\tName = \"Empty Series\",\n\t\t\t\tType = SeriesType.Doughnut,\n\t\t\t\tCenter = new List<object> { 100, 100 },\n\t\t\t\tRadius = new List<object> { 50, 75 },\n\t\t\t\tData = new List<object> { 1, 2, 3, 4, 5 }\n\t\t\t}\n\t\t};\n\t}\n}", "CodeBleu_score": 24.285092244470174}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\t\tdouble[] values = new double[Count + 1];\n\tDateTimeInt64 dt = new DateTimeInt64(Start);\n\tfor (int i = 0; i < values.Length; i++) {\n\t\tif (AxisType == AxisType.DateTime) {\n\t\t\tvalues[i] = dt.ToOADate();\n\t\t\tdt.AddMilliseconds(Interval);\n\t\t} else {\n\t\t\tvalues[i] = Start + i * Interval;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 54.11333718931309}, {"code": "public double[] LabelValues(){\n\t\tdouble[] values = new double[Count + 1];\n\tdouble interval = Interval;\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 start = new DateTimeInt64(Start);\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = start.ToOADate();\n\t\t\tstart.AddMilliseconds(interval);\n\t\t}\n\t} else {\n\t\tfor (int i = 0; i < Count + 1; i++) {\n\t\t\tvalues[i] = Start + i * interval;\n\t\t}\n\t}\n\treturn values;\n}", "CodeBleu_score": 55.045027996551376}, {"code": "public double[] LabelValues(){\n\t\tdouble[] values = new double[Count + 1];\n\tif (AxisType == AxisType.DateTime) {\n\t\tDateTimeInt64 start = new DateTimeInt64(Start);\n\t\tfor (int i = 0; i < Count; i++) {\n\t\t\tvalues[i] = start.Value;\n\t\t\tstart.AddMilliseconds(Interval);\n\t\t}\n\t} else {\n\t\tfor (int i = 0; i < Count; i++) {\n\t\t\tvalues[i] = Start + i * Interval;\n\t\t}\n\t}\n\tvalues[Count] = values[Count - 1] + Interval;\n\treturn values;\n}", "CodeBleu_score": 56.616346853730526}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tif (m.HWnd == control.Handle && control.IsHandleCreated) {\n\t\tIntPtr hdc = NativeMethods.GetDC(control.Handle);\n\t\tif (hdc != IntPtr.Zero) {\n\t\t\tusing (Graphics g = Graphics.FromHdc(hdc)) {\n\t\t\t\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\t\t\t\tg.DrawRectangle(new Pen(color, width), 0, 0, control.Width, control.Height);\n\t\t\t}\n\t\t\tNativeMethods.ReleaseDC(control.Handle, hdc);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.494424431458285}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tIntPtr hDC = m.HWnd;\n\tif (hDC != IntPtr.Zero) {\n\t\tGraphics g = Graphics.FromHdc(hDC);\n\t\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\t\tPen pen = new Pen(color, width);\n\t\tg.DrawRectangle(pen, control.ClientRectangle);\n\t\tg.Dispose();\n\t}\n}", "CodeBleu_score": 41.695247790089645}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t\tIntPtr hdc = m.LParam;\n\tif (hdc == IntPtr.Zero) {\n\t\thdc = User32.GetDC(control.Handle);\n\t}\n\tif (hdc != IntPtr.Zero) {\n\t\tusing (Graphics g = Graphics.FromHdc(hdc)) {\n\t\t\tg.SmoothingMode = SmoothingMode.AntiAlias;\n\t\t\tusing (Pen pen = new Pen(color, width)) {\n\t\t\t\tg.DrawRectangle(pen, control.ClientRectangle);\n\t\t\t}\n\t\t}\n\t\tUser32.ReleaseDC(control.Handle, hdc);\n\t}\n}", "CodeBleu_score": 43.262045866457974}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t\tBitmap bmp = new Bitmap(ctrl.Width, ctrl.Height);\n\tusing (Graphics g = Graphics.FromImage(bmp)) {\n\t\tg.CopyFromScreen(ctrl.Location.X, ctrl.Location.Y, 0, 0, ctrl.Size);\n\t\treturn bmp;\n\t}\n}", "CodeBleu_score": 26.10976225235639}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t", "CodeBleu_score": 1.2751725343880242}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t\tBitmap bmp = new Bitmap(ctrl.Width, ctrl.Height);\n\tusing (Graphics g = Graphics.FromImage(bmp)) {\n\t\tg.CopyFromScreen(ctrl.Location.X, ctrl.Location.Y, 0, 0, ctrl.Size, CopyPixelOperation.SourceCopy);\n\t}\n\treturn bmp;\n}", "CodeBleu_score": 26.721955447191668}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t\t// Get the Events property of the Button control\n\tPropertyInfo eventsProperty = button.GetType().GetProperty(\"Events\");\n\tif (eventsProperty == null) {\n\t\t// The Events property was not found\n\t\treturn;\n\t}\n\t// Get the EventClick field from the Control class\n\tFieldInfo eventClickField = typeof(Control).GetField(\"EventClick\", BindingFlags.Public | BindingFlags.Static);\n\tif (eventClickField == null) {\n\t\t// The EventClick field was not found\n\t\treturn;\n\t}\n\t// Get the event handler key object from the EventClick field\n\tobject eventClickKey = eventClickField.GetValue(null);\n\tif (eventClickKey == null) {\n\t\t// The event handler key object was not found\n\t\treturn;\n\t}\n\t// Get the event handler list\n\tEventHandlerList eventHandlers = eventsProperty.GetValue(button, null) as EventHandlerList;\n\tif (eventHandlers == null) {\n\t\t// The event handler list was not found\n\t\treturn;\n\t}\n\t// Remove the event handler from the event handler list\n\teventHandlers.RemoveHandler(eventClickKey, eventHandlers[eventClickKey]);\n}", "CodeBleu_score": 32.62644781199791}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\tif (button == null) throw new NullReferenceException(\"button\");\n\tFieldInfo field = typeof(Control).GetField(\"EventClick\", BindingFlags.NonPublic | BindingFlags.Static);\n\tif (field == null) throw new NullReferenceException(\"EventClick\");\n\tobject key = field.GetValue(null);\n\tif (key == null) throw new NullReferenceException(\"key\");\n\tEvents events = button.Events;\n\tif (events == null) throw new NullReferenceException(\"events\");\n\tevents.RemoveHandler(key, button.Click);\n}", "CodeBleu_score": 36.99855521503813}, {"code": "public static void RemoveClickEvent(this Button button){\n\t\tFieldInfo fi = typeof(Control).GetField(\"Events\", BindingFlags.Static | BindingFlags.NonPublic);\n\tif (fi != null) {\n\t\tobject obj = fi.GetValue(null);\n\t\tif (obj != null) {\n\t\t\tEventInfo ei = obj.GetType().GetEvent(\"Click\");\n\t\t\tif (ei != null) {\n\t\t\t\tMethodInfo mi = typeof(Button).GetMethod(\"OnClick\", BindingFlags.Instance | BindingFlags.NonPublic);\n\t\t\t\tif (mi != null) {\n\t\t\t\t\tDelegate d = ei.GetEventHandler(button, mi);\n\t\t\t\t\tif (d != null) {\n\t\t\t\t\t\tei.RemoveEventHandler(button, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 31.300577914275884}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\t\tstring releaseKey = Microsoft.Win32.Registry.LocalMachine.OpenSubKey(@\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\").GetValue(\"Release\").ToString();\n\tif (releaseKey != null) {\n\t\treturn CheckFor45PlusVersion(Convert.ToInt32(releaseKey));\n\t}\n\telse {\n\t\treturn \"4.5 or later version of the .NET Framework is not detected.\n\";\n\t}\n}", "CodeBleu_score": 24.068598418131053}, {"code": "public static string CheckVersion(){\n\t\n// Opens the registry key for the .NET Framework setup.\nRegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\");\n\n// If the registry key exists, check for the release key.\nif (ndpKey != null) {\n\nint releaseKey = Convert.ToInt32(ndpKey.GetValue(\"Release\"));\n\n// If the release key exists, check for the 4.5 or later version.\nif (releaseKey != 0)\nreturn CheckFor45PlusVersion(releaseKey);\nelse\nreturn \".NET Framework 4.5 or later version not detected\";\n}\nelse\nreturn \".NET Framework 4.5 or later version not detected\";\n}", "CodeBleu_score": 30.266932127567216}, {"code": "public static string CheckVersion(){\n\t\ttry {\n\t\tusing (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(\"SOFTWARE\\\\Microsoft\\\\NET Framework Setup\\\\NDP\\\\v4\\\\Full\\\\\")) {\n\t\t\tif (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n\t\t\t\treturn CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn \".NET Framework 4.5 or later is not detected.\";\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\treturn ex.Message;\n\t}\n}", "CodeBleu_score": 70.1480953052155}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == null) {\n\t\tthrow new ArgumentNullException(\"source\");\n\t}\n\tif (target == null) {\n\t\tthrow new ArgumentNullException(\"target\");\n\t}\n\tif (source == target) {\n\t\tthrow new ArgumentException(\"The source and target bitmaps must not be the same bitmap.\");\n\t}\n\tif (source.Width != target.Width || source.Height != target.Height) {\n\t\treturn false;\n\t}\n\tif (source.PixelFormat != target.PixelFormat) {\n\t\treturn false;\n\t}\n\tFastBitmap sourceBitmap = new FastBitmap(source);\n\tFastBitmap targetBitmap = new FastBitmap(target);\n\tsourceBitmap.Lock();\n\ttargetBitmap.Lock();\n\ttry {\n\t\tunsafe {\n\t\t\tbyte* sourcePointer = (byte*) sourceBitmap.Scan0.ToPointer();\n\t\t\tbyte* targetPointer = (byte*) targetBitmap.Scan0.ToPointer();\n\t\t\tint bytesPerPixel = sourceBitmap.BytesPerPixel;\n\t\t\tfor (int y = 0; y < sourceBitmap.Height; y++) {\n\t\t\t\tint sourceOffset = y * sourceBitmap.Stride;\n\t\t\t\tint targetOffset = y * targetBitmap.Stride;\n\t\t\t\tfor (int x = 0; x < sourceBitmap.Width; x++) {\n\t\t\t\t\tfor (int i = 0; i < bytesPerPixel; i++) {\n\t\t\t\t\t\ttargetPointer[targetOffset + x * bytesPerPixel + i] = sourcePointer[sourceOffset + x * bytesPerPixel + i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} finally {\n\t\tsourceBitmap.Unlock();\n\t\ttargetBitmap.Unlock();\n\t}\n\treturn true;\n}", "CodeBleu_score": 52.04996759213778}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == null) throw new ArgumentNullException(\"source\");\n\tif (target == null) throw new ArgumentNullException(\"target\");\n\tif (source == target) throw new ArgumentException(\"source and target cannot be the same bitmap\");\n\tif (source.Size != target.Size) return false;\n\tif (source.PixelFormat != target.PixelFormat) return false;\n\tFastBitmap sourceFast = new FastBitmap(source);\n\tFastBitmap targetFast = new FastBitmap(target);\n\tsourceFast.Lock();\n\ttargetFast.Lock();\n\tunsafe {\n\t\tbyte* sourcePtr = (byte*)sourceFast.Scan0.ToPointer();\n\t\tbyte* targetPtr = (byte*)targetFast.Scan0.ToPointer();\n\t\tint size = sourceFast.Width * sourceFast.Height * sourceFast.BytesPerPixel;\n\t\tMarshal.Copy(new IntPtr(sourcePtr), targetFast.Scan0, 0, size);\n\t}\n\tsourceFast.Unlock();\n\ttargetFast.Unlock();\n\treturn true;\n}", "CodeBleu_score": 49.64554417203069}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t\tif (source == target) throw new ArgumentException(\"source and target must not be the same bitmap\");\n\tif (source.Width != target.Width || source.Height != target.Height) return false;\n\tif (source.PixelFormat != target.PixelFormat) return false;\n\tunsafe {\n\t\tFastBitmap sourceBmp = new FastBitmap(source);\n\t\tFastBitmap targetBmp = new FastBitmap(target);\n\t\tfixed (byte* sourcePtr = sourceBmp.GetPixels())\n\t\tfixed (byte* targetPtr = targetBmp.GetPixels()) {\n\t\t\tmemcpy(targetPtr, sourcePtr, sourceBmp.BytesPerPixel * sourceBmp.Width * sourceBmp.Height);\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 58.64014112464614}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF p = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(p.X);\n}\n}", "CodeBleu_score": 51.01549438074524}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF pt = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left) {\nSetPercent(pt);\n}\n}", "CodeBleu_score": 53.01936631253058}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nPointF mousePos = new PointF(e.X, e.Y);\nif (e.Button == MouseButtons.Left)\nSetPercent(mousePos);\n}", "CodeBleu_score": 58.862062289386905}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t", "CodeBleu_score": 1.937489352683406}, {"code": "protected void DrawColorBar(Graphics dc){\n\t", "CodeBleu_score": 1.937489352683406}, {"code": "protected void DrawColorBar(Graphics dc){\n\t// Calculate the area for the color bar\nRectangleF r = new RectangleF(0, 0, m_colorBarSize, m_colorBarSize);\n// Draw the color bar\nif (m_colorBarColors.Length == 2) {\n// Two colors\nLinearGradientBrush brush = new LinearGradientBrush(r, m_colorBarColors[0], m_colorBarColors[1], LinearGradientMode.Vertical);\ndc.FillRectangle(brush, r);\n}\nelse if (m_colorBarColors.Length == 3) {\n// Three colors\nLinearGradientBrush brush = new LinearGradientBrush(r, m_colorBarColors[0], m_colorBarColors[1], LinearGradientMode.Vertical);\ndc.FillRectangle(brush, r);\nLinearGradientBrush brush2 = new LinearGradientBrush(r, m_colorBarColors[1], m_colorBarColors[2], LinearGradientMode.Vertical);\ndc.FillRectangle(brush2, r);\n}\n// Draw the selector\nDrawSelector(dc, r, m_colorBarOrientation, m_colorBarValue);\n}", "CodeBleu_score": 32.27395517071313}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (Visible) {\n\t\tdropSymbol = SymbolDropDown;\n\t} else {\n\t\tdropSymbol = SymbolNormal;\n\t}\n\tInvalidate();\n}", "CodeBleu_score": 57.07758112900816}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (this.Visible) {\n\t\tif (this.droppedDown) {\n\t\t\tthis.dropSymbol = SymbolDropDown;\n\t\t} else {\n\t\t\tthis.dropSymbol = SymbolNormal;\n\t\t}\n\t\tthis.Invalidate();\n\t}\n}", "CodeBleu_score": 35.46478827879728}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t\tif (Visible) {\n\t\tif (droppedDown) {\n\t\t\tdropSymbol = SymbolDropDown;\n\t\t} else {\n\t\t\tdropSymbol = SymbolNormal;\n\t\t}\n\t\tInvalidate();\n\t}\n}", "CodeBleu_score": 57.31389039053237}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t", "CodeBleu_score": 2.203698489335641}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t", "CodeBleu_score": 2.203698489335641}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\tSizeChange();\nif (NoNeedChange) {\nreturn;\n}\nif (edit.Visible) {\nif (Text.Length == 0) {\ng.DrawString(Watermark, Font, new SolidBrush(WaterMarkColor), new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });\n} else {\ng.DrawString(Text, Font, new SolidBrush(ForeColor), new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });\n}\n} else {\ng.DrawString(Text, Font, new SolidBrush(ForeColor), new RectangleF(edit.Left, edit.Top, edit.Width, edit.Height), new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });\n}\ng.FillRectangle(new SolidBrush(RightFillColor), new Rectangle(Width - RectSize, 0, RectSize, Height));\nif (ClearButtonVisible) {\nif (ClearButtonPressed) {\ng.DrawImage(ClearButtonPressedImage, new Rectangle(Width - RectSize, 0, RectSize, RectSize));\n} else {\ng.DrawImage(ClearButtonImage, new Rectangle(Width - RectSize, 0, RectSize, RectSize));\n}\n} else {\ng.DrawImage(DropDownButtonImage, new Rectangle(Width - RectSize, 0, RectSize, RectSize));\n}\n}", "CodeBleu_score": 36.75080363569377}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!this.ShowClearButton) {\n\t\tthis.NeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (this.ClientRectangle.Contains(e.Location) && this.ClientRectangle.Right - e.X <= this.ClearButtonSize.Width && this.ClientRectangle.Bottom - e.Y <= this.ClearButtonSize.Height) {\n\t\tif (this.NeedDrawClearButton != true) {\n\t\t\tthis.NeedDrawClearButton = true;\n\t\t\tthis.Invalidate();\n\t\t}\n\t}\n\telse {\n\t\tif (this.NeedDrawClearButton != false) {\n\t\t\tthis.NeedDrawClearButton = false;\n\t\t\tthis.Invalidate();\n\t\t}\n\t}\n}", "CodeBleu_score": 31.543103262116865}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\tbase.OnMouseMove(e);\nif (!showClearButton) {\nNeedDrawClearButton = false;\nreturn;\n}\nif (showClearButton && (e.X >= (Width - (clearButtonSize.Width + 1)))) {\nif (clearButtonSize.Width > 0) {\nif (e.Y >= (Height - clearButtonSize.Height)) {\nif (e.X <= (Width - clearButtonSize.Width)) {\nif (Text.Length > 0) {\nNeedDrawClearButton = true;\n}\n}\n}\n}\n}\n}", "CodeBleu_score": 45.12960528600105}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tbase.OnMouseMove(e);\n\tif (!ShowClearButton) {\n\t\tNeedDrawClearButton = false;\n\t\treturn;\n\t}\n\tif (e.X < Width - ClearButtonWidth) {\n\t\tif (NeedDrawClearButton != true) {\n\t\t\tNeedDrawClearButton = true;\n\t\t\tInvalidate();\n\t\t}\n\t\treturn;\n\t}\n\tif (NeedDrawClearButton != false) {\n\t\tNeedDrawClearButton = false;\n\t\tInvalidate();\n\t}\n}", "CodeBleu_score": 46.95346810898631}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\n// The base class OnLayout method is invoked to ensure that the control is displayed with the correct size and position.\nbase.OnLayout(e);\n\n// The control is not resized if AutoSize is false.\nif (!this.AutoSize) return;\n\n// The preferred size of the control is calculated.\nSize preferredSize = this.GetPreferredSize(this.CreateGraphics());\n\n// The control is resized if the suggested size differs from the current size.\nif (this.Size != preferredSize) this.Size = preferredSize;\n\n// The control is refreshed to display the new size and position.\nthis.Invalidate();\n}", "CodeBleu_score": 29.079701329960848}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t// Calculate the preferred size of the control\nSize preferredSize = Size.Empty;\nforeach (Control child in Controls) {\nif (child.Visible) {\npreferredSize = new Size(Math.Max(preferredSize.Width, child.PreferredSize.Width), Math.Max(preferredSize.Height, child.PreferredSize.Height));\n}\n}\n\n// Adjust the size if the AutoSize property is enabled\nif (AutoSize) {\nSize = new Size(preferredSize.Width + Padding.Horizontal, preferredSize.Height + Padding.Vertical);\n}\n\n// Set the items to be displayed\nif (Orientation == Orientation.Horizontal) {\nSetDisplayItems(Items, preferredSize.Height);\n} else {\nSetDisplayItems(Items, preferredSize.Width);\n}\n\n// Trigger the layout completed event\nOnLayoutCompleted(EventArgs.Empty);\n\n// Invalidate the control to refresh its display\nInvalidate();\n}", "CodeBleu_score": 43.22874252214991}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t\tbase.OnLayout(e);\n\tif (AutoSize) {\n\t\tSize size = GetPreferredSize(Size.Empty);\n\t\tif (size != Size) {\n\t\t\tSize = size;\n\t\t}\n\t}\n\tif (items != null) {\n\t\tif (items.Count > 0) {\n\t\t\titems.Clear();\n\t\t\tforeach (object item in Items) {\n\t\t\t\titems.Add(item);\n\t\t\t}\n\t\t}\n\t}\n\tOnLayoutCompleted(EventArgs.Empty);\n\tInvalidate();\n}", "CodeBleu_score": 56.042874849846}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tFillColor = Color.white;\n\t_foregroundColor = uiColor.ForegroundColor;\n\t_rectangleColor = uiColor.BackgroundColor;\n\n\tforeach (UISymbolButton button in _buttons) {\n\t\tbutton.SetStyleColor(uiColor);\n\t}\n}", "CodeBleu_score": 45.29743228582544}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t\tbase.SetStyleColor(uiColor);\n\tthis.FillColor = Color.white;\n\tthis.ForegroundColor = uiColor.PanelForegroundColor;\n\tthis.RectangleColor = uiColor.PanelBackgroundColor;\n\tforeach (UISymbolButton button in this.Controls) {\n\t\tbutton.SetStyleColor(uiColor);\n\t}\n}", "CodeBleu_score": 41.44079912019672}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t", "CodeBleu_score": 2.7841238583217742}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (m_AnalogMeter == null) return false;\n\tColor c = m_AnalogMeter.BodyColor;\n\tColor cDark = Color.FromArgb(c.R - 20, c.G - 20, c.B - 20);\n\tSolidBrush b = new SolidBrush(c);\n\tSolidBrush bDark = new SolidBrush(cDark);\n\tGr.FillEllipse(b, rc);\n\tGr.FillEllipse(bDark, rc.X + 2, rc.Y + 2, rc.Width - 4, rc.Height - 4);\n\tb.Dispose();\n\tbDark.Dispose();\n\treturn true;\n}", "CodeBleu_score": 30.0087543257609}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (this == null)\n\t\treturn false;\n\n\tColor BColor = GetColor(ColorScheme.Body);\n\tColor DColor = GetColor(ColorScheme.BodyDark);\n\n\tusing (LinearGradientBrush LGB = new LinearGradientBrush(rc, BColor, DColor, LinearGradientMode.ForwardDiagonal)) {\n\t\tGr.FillEllipse(LGB, rc);\n\t}\n\n\tfloat fRatio = GetDrawRatio();\n\trc.Inflate(-fRatio, -fRatio);\n\trc.Width -= fRatio;\n\trc.Height -= fRatio;\n\n\tusing (LinearGradientBrush LGB = new LinearGradientBrush(rc, DColor, BColor, LinearGradientMode.ForwardDiagonal)) {\n\t\tGr.FillEllipse(LGB, rc);\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 35.64956356702861}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t\tif (m_AnalogMeter == null) return false;\n\n\tColor clrBody = m_AnalogMeter.BodyColor;\n\tColor clrDark = Color.FromArgb(clrBody.R / 2, clrBody.G / 2, clrBody.B / 2);\n\tBrush br = new LinearGradientBrush(rc, clrBody, clrDark, LinearGradientMode.Vertical);\n\tGr.FillEllipse(br, rc);\n\trc.Inflate(-1, -1);\n\tbr.Dispose();\n\tbr = new LinearGradientBrush(rc, clrDark, Color.FromArgb(clrDark.R / 2, clrDark.G / 2, clrDark.B / 2), LinearGradientMode.Vertical);\n\tGr.FillEllipse(br, rc);\n\treturn true;\n}", "CodeBleu_score": 33.19186480344514}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\tif (AnalogMeter == null) return;\n\nColor c = AnalogMeter.BodyColor;\nColor c1 = Color.FromArgb(Math.Max(c.R - 50, 0), Math.Max(c.G - 50, 0), Math.Max(c.B - 50, 0));\n\nSolidBrush sb = new SolidBrush(c);\nSolidBrush sb1 = new SolidBrush(c1);\n\nGraphics g = e.Graphics;\nRectangleF rc = new RectangleF(AnalogMeter.Location.X, AnalogMeter.Location.Y, AnalogMeter.Width, AnalogMeter.Height);\n\ng.FillEllipse(sb, rc);\ng.FillEllipse(sb1, rc);\n\nsb.Dispose();\nsb1.Dispose();\n}", "CodeBleu_score": 29.914960706223138}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\tbase.OnMouseEnter(e);\nif (m_AnalogMeter == null) return;\nm_AnalogMeter.BodyColor = Color.FromArgb(255, 100, 100, 100);\nm_AnalogMeter.m_bMouseOver = true;\nInvalidate();\n}", "CodeBleu_score": 48.794069356273695}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t\tbase.OnMouseEnter(e);\n\tif (this.AnalogMeter == null) return false;\n\tColor color = this.AnalogMeter.BodyColor;\n\tColor darker = color.MakeDarkerColor();\n\tusing (LinearGradientBrush brush = new LinearGradientBrush(this.ClientRectangle, color, darker, LinearGradientMode.Vertical)) {\n\t\te.Graphics.FillEllipse(brush, this.ClientRectangle);\n\t}\n\tRectangleF rc = this.ClientRectangle;\n\trc.Inflate(-this.AnalogMeter.DrawRatio, -this.AnalogMeter.DrawRatio);\n\tusing (LinearGradientBrush brush = new LinearGradientBrush(rc, darker, color, LinearGradientMode.Vertical)) {\n\t\te.Graphics.FillEllipse(brush, rc);\n\t}\n\treturn true;\n}", "CodeBleu_score": 37.06045814018774}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\t\n#if DEBUG\n            _proxyKey = Registry.LocalMachine.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\", false);\n#else\n            _proxyKey = Registry.CurrentUser.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\", false);\n#endif\n            lock (_proxyKey)\n            {\n                LoadAddresses();\n                LoadOverrides();\n                IsProxyEnabled = (int)_proxyKey.GetValue(\"ProxyEnable\") == 1;\n            }\n        }", "CodeBleu_score": 50.270528450091035}, {"code": "public static void Load(){\n\t\n#if NETCOREAPP3_1_OR_GREATER\n            lock (_proxyLock)\n            {\n                LoadAddresses();\n                LoadOverrides();\n                IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n            }\n#else\n            LoadAddresses();\n            LoadOverrides();\n            IsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n#endif\n        }", "CodeBleu_score": 57.40155282110546}, {"code": "public static void Load(){\n\tlock (_lock) {\nLoadAddresses();\nLoadOverrides();\nIsProxyEnabled = _proxyKey.GetValue(\"ProxyEnable\")?.ToString() == \"1\";\n}\n}", "CodeBleu_score": 60.81194850845921}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t\t// Get the current proxy override string from the registry.\n\tRegistryKey key = Registry.CurrentUser.OpenSubKey(\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\", true);\n\tstring proxyOverride = (string)key.GetValue(\"ProxyOverride\");\n\n\t// If the proxy override string is null or empty, we're done.\n\tif (proxyOverride == null || proxyOverride == \"\") {\n\t\treturn;\n\t}\n\n\t// Split the override string into an array of individual overrides.\n\tstring[] overrides = proxyOverride.Split(';');\n\n\t// Iterate through each override.\n\tforeach (string override in overrides) {\n\t\t// If the override starts with \"<local>\" or \"<Local>\", set the flag to ignore local traffic.\n\t\tif (override.StartsWith(\"<local>\") || override.StartsWith(\"<Local>\")) {\n\t\t\tIgnoreLocal = true;\n\t\t} else {\n\t\t\t// If the override is not \"<local>\" or \"<Local>\", add it to the Overrides list.\n\t\t\tif (!Overrides.Contains(override)) {\n\t\t\t\tOverrides.Add(override);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.86195195438657}, {"code": "private static void LoadOverrides(){\n\t\ttry {\n\t\t// Check if the registry key exists\n\t\tif (Registry.LocalMachine.OpenSubKey(RegistryKey) == null) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Get the proxy override value\n\t\tRegistryKey key = Registry.LocalMachine.OpenSubKey(RegistryKey);\n\t\tstring proxyOverride = (string)key.GetValue(ProxyOverrideValueName);\n\n\t\t// Check if the value is null or empty\n\t\tif (string.IsNullOrEmpty(proxyOverride)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Split the overrides into an array\n\t\tstring[] overrides = proxyOverride.Split(';');\n\n\t\t// Iterate through each override\n\t\tforeach (string override_ in overrides) {\n\t\t\t// Check if the override is local\n\t\t\tif (override_ == \"local\") {\n\t\t\t\tIgnoreLocal = true;\n\t\t\t} else {\n\t\t\t\t// Add the override to the list if it doesn't already exist\n\t\t\t\tif (!Overrides.Contains(override_)) {\n\t\t\t\t\tOverrides.Add(override_);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception ex) {\n\t\t// Ignore errors\n\t}\n}", "CodeBleu_score": 63.19230599098964}, {"code": "private static void LoadOverrides(){\n\t\ttry {\n\t\tRegistryKey key = Registry.CurrentUser.OpenSubKey(ProxyOverrideRegKey, false);\n\t\tif (key == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tobject value = key.GetValue(ProxyOverrideRegValue);\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tstring[] overrides = value.ToString().Split(';');\n\t\tforeach (string overrideString in overrides) {\n\t\t\tif (string.IsNullOrEmpty(overrideString)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (overrideString.Equals(\"local\", StringComparison.OrdinalIgnoreCase)) {\n\t\t\t\tLocalOverride = true;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!Overrides.Contains(overrideString)) {\n\t\t\t\tOverrides.Add(overrideString);\n\t\t\t}\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tConsole.WriteLine(ex.Message);\n\t}\n}", "CodeBleu_score": 41.55992786946353}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t\tstring line = await ReadNonBufferedLineAsync();\n\tstring[] parts = line.Split(' ');\n\tif (parts.Length != 3) { throw new FormatException(); }\n\n\tstring method = parts[0].ToUpper();\n\tif (!method.Equals(\"CONNECT\") && !method.Equals(\"GET\") && !method.Equals(\"HEAD\") && !method.Equals(\"POST\")) { throw new NotSupportedException(); }\n\n\tList<string> headers = new List<string>();\n\tstring path = parts[1];\n\tif (path.StartsWith(\"/\")) { path = path.Substring(1); }\n\tif (baseUri != null) { path = baseUri.LocalPath + path; }\n\n\twhile (true) {\n\t\tline = await ReadNonBufferedLineAsync();\n\t\tif (string.IsNullOrEmpty(line)) { break; }\n\t\theaders.Add(line);\n\t}\n\n\tUri requestUri = new Uri(path);\n\tif (method.Equals(\"CONNECT\")) {\n\t\tif (!SecureTunnel(requestUri.Host)) { throw new IOException(); }\n\t\tawait SendResponseAsync(HttpStatusCode.OK, \"Connection Established\", new WebHeaderCollection(), null);\n\t\treturn await ReadRequestAsync(requestUri);\n\t} else {\n\t\treturn CreateRequest(method, headers, requestUri);\n\t}\n}", "CodeBleu_score": 40.01635745330688}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t\tvar request = default(HttpWebRequest);\n\tvar method = default(string);\n\tvar headers = new List<string>();\n\tvar requestUri = default(Uri);\n\tvar requestLine = default(string);\n\n\ttry {\n\t\trequestLine = await ReadNonBufferedLineAsync();\n\t} catch (Exception e) {\n\t\tawait SendResponseAsync(HttpStatusCode.BadRequest, \"Bad Request\", new List<string> { \"Connection: close\" }, null);\n\t\treturn null;\n\t}\n\n\tif (string.IsNullOrEmpty(requestLine)) {\n\t\tawait SendResponseAsync(HttpStatusCode.BadRequest, \"Bad Request\", new List<string> { \"Connection: close\" }, null);\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tmethod, requestUri = ParseRequestLine(requestLine);\n\t} catch (Exception e) {\n\t\tawait SendResponseAsync(HttpStatusCode.BadRequest, \"Bad Request\", new List<string> { \"Connection: close\" }, null);\n\t\treturn null;\n\t}\n\n\tif (method == \"CONNECT\") {\n\t\tif (!SecureTunnel(requestUri.Host)) {\n\t\t\tawait SendResponseAsync(HttpStatusCode.Forbidden, \"Forbidden\", new List<string> { \"Connection: close\" }, null);\n\t\t\treturn null;\n\t\t}\n\t\tawait SendResponseAsync(HttpStatusCode.OK, \"OK\", new List<string> { \"Connection: close\" }, null);\n\t\tawait ReadRequestAsync(baseUri);\n\t} else {\n\t\trequest = CreateRequest(method, headers, requestUri);\n\t}\n\treturn request;\n}", "CodeBleu_score": 36.398156113650835}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t\tvar headers = new List<string>();\n\tstring method = string.Empty;\n\tstring path = string.Empty;\n\tUri requestUri = null;\n\n\t// Read the first line of the request\n\tstring line = await ReadNonBufferedLine();\n\tif (string.IsNullOrEmpty(line)) return null;\n\n\t// Split the line into method and path\n\tstring[] parts = line.Split(' ');\n\tmethod = parts[0].ToUpper();\n\tpath = parts[1];\n\n\t// If the method is CONNECT, update the base URI and send an OK response\n\tif (method == \"CONNECT\") {\n\t\tbaseUri = new UriBuilder(baseUri.Scheme, baseUri.Host, baseUri.Port).Uri;\n\t\tawait SendResponseAsync(HttpStatusCode.OK, \"OK\");\n\t\tif (SecureTunnel(baseUri.Host)) {\n\t\t\tawait ReadRequestAsync(baseUri);\n\t\t}\n\t\treturn null;\n\t}\n\n\t// If the method is not GET, update the base URI\n\tif (method != \"GET\") {\n\t\tbaseUri = new UriBuilder(baseUri.Scheme, baseUri.Host, baseUri.Port).Uri;\n\t}\n\n\t// Parse the request URI\n\trequestUri = new Uri(baseUri, path);\n\n\t// Read the rest of the request headers\n\twhile (true) {\n\t\tline = await ReadNonBufferedLine();\n\t\tif (string.IsNullOrEmpty(line)) break;\n\t\theaders.Add(line);\n\t}\n\n\t// Create the request\n\treturn CreateRequest(method, headers, requestUri);\n}", "CodeBleu_score": 53.05605869163019}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\tstring description = \"OK\";\n\tvar status = HttpStatusCode.OK;\n\tif (response is HttpWebResponse httpResponse) {\n\t\tstatus = httpResponse.StatusCode;\n\t\tdescription = httpResponse.StatusDescription;\n\t}\n\treturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.26408305370772}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\tstring description = \"OK\";\nvar status = HttpStatusCode.OK;\nif (response is HttpWebResponse httpResponse) {\nstatus = httpResponse.StatusCode;\ndescription = httpResponse.StatusDescription;\n}\nreturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.1787121161932}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t\tstring description = \"OK\";\n\tvar status = HttpStatusCode.OK;\n\tif (response is HttpWebResponse httpResponse) {\n\t\tstatus = httpResponse.StatusCode;\n\t\tdescription = httpResponse.StatusDescription;\n\t}\n\treturn SendResponseAsync(status, description, response.Headers, content);\n}", "CodeBleu_score": 94.26408305370772}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\t\ttry {\n\t\t// Create a TCP/IP client socket.\n\t\t_client = new TcpClient(host, 443);\n\n\t\t// Create an SSL stream that will close the client's stream.\n\t\t_secureStream = new SslStream(_client.GetStream(), false, new RemoteCertificateValidationCallback(ValidateServerCertificate), null);\n\n\t\t// Authenticate the server but don't require the client to authenticate.\n\t\t_secureStream.AuthenticateAsClient(host);\n\n\t\t// Return the SSL stream to the caller.\n\t\treturn true;\n\t}\n\tcatch (AuthenticationException e) {\n\t\tConsole.WriteLine(\"Exception: {0}\", e.Message);\n\t\tif (e.InnerException != null) {\n\t\t\tConsole.WriteLine(\"Inner exception: {0}\", e.InnerException.Message);\n\t\t}\n\t\tConsole.WriteLine(\"Authentication failed - closing the connection.\");\n\t\t_client.Close();\n\t\treturn false;\n\t}\n\tcatch (IOException e) {\n\t\tConsole.WriteLine(\"Exception: {0}\", e.Message);\n\t\tConsole.WriteLine(\"Authentication failed - closing the connection.\");\n\t\t_client.Close();\n\t\treturn false;\n\t}\n\tcatch (Exception e) {\n\t\tConsole.WriteLine(\"Exception: {0}\", e.Message);\n\t\tConsole.WriteLine(\"Authentication failed - closing the connection.\");\n\t\t_client.Close();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 36.0362249001317}, {"code": "private bool SecureTunnel(string host){\n\t\ttry {\n\t\t// Create a secure tunnel using the host and the port\n\t\tTcpClient client = new TcpClient(host, 443);\n\n\t\t// Create an SSL stream that will close the client's stream\n\t\t_secureStream = new SslStream(client.GetStream(), false);\n\n\t\t// Authenticate the server using the client's certificate\n\t\t_secureStream.AuthenticateAsClient(host);\n\n\t\t// Return true if the authentication was successful\n\t\treturn true;\n\t}\n\tcatch (Exception ex) {\n\t\t// Return false if an exception occurs\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 43.76023066258424}, {"code": "private bool SecureTunnel(string host){\n\ttry {\n// Create a secure client for the host.\n_client = new TcpClient(host, 443);\n// Create a secure stream for the client.\n_secureStream = new SslStream(_client.GetStream(), false, ValidateServerCertificate, null);\n// Authenticate the server using the secure stream.\n_secureStream.AuthenticateAsServer(certificate, false, SslProtocols.Default, false);\nreturn true;\n}\ncatch (Exception ex) {\n// Close the client and stream.\n_client.Close();\n_secureStream.Close();\n// Display the exception.\nConsole.WriteLine(ex.Message);\nreturn false;\n}\n}", "CodeBleu_score": 46.73238690827942}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tStream stream = response.GetResponseStream();\n\tif (response.ContentLength == 0) {\n\t\tresponse.Dispose();\n\t\treturn null;\n\t}\n\telse {\n\t\tStreamContent content = new StreamContent(stream);\n\t\tif (response.ContentLength != -1) {\n\t\t\tcontent.Headers.Add(\"Content-Length\", response.ContentLength.ToString());\n\t\t}\n\t\treturn content;\n\t}\n}", "CodeBleu_score": 48.79113439742602}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response == null) {\n\t\treturn null;\n\t}\n\tStream responseStream = response.GetResponseStream();\n\tif (responseStream == null) {\n\t\treturn null;\n\t}\n\tlong contentLength = response.ContentLength;\n\tif (contentLength > 0) {\n\t\treturn new StreamContent(responseStream, (int)contentLength);\n\t}\n\treturn new StreamContent(responseStream);\n}", "CodeBleu_score": 38.13875134904663}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t\tif (response == null) {\n\t\tthrow new ArgumentNullException(\"response\");\n\t}\n\tStream stream = response.GetResponseStream();\n\tif (stream == null) {\n\t\tresponse.Close();\n\t\treturn null;\n\t}\n\tlong contentLength = response.ContentLength;\n\tint bufferSize = contentLength > 0 ? (int)contentLength : 4096;\n\treturn new StreamContent(stream, bufferSize);\n}", "CodeBleu_score": 29.20805792082507}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tif (ActivityConfigJsonPath.Text.Trim() == \"\") {\n\t\tOpenFileDialog openFileDialog = new OpenFileDialog();\n\t\topenFileDialog.Title = \"Select Activity Configuration File\";\n\t\topenFileDialog.Filter = \"JSON files (*.json)|*.json\";\n\n\t\tif (openFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\tActivityConfigJsonPath.Text = openFileDialog.FileName;\n\t\t}\n\t}\n\n\tif (ActivityConfigJsonPath.Text.Trim() != \"\") {\n\t\ttry {\n\t\t\tActivityConfig = new ActivityConfiguration(ActivityConfigJsonPath.Text.Trim());\n\t\t\tMessageBox.Show(\"Activity Configuration Loaded Successfully!\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.38075560438913}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tif (ActivityConfigJsonPath.Text.Trim() == \"\") {\n\t\tOpenFileDialog ofd = new OpenFileDialog();\n\t\tofd.Title = \"Select Activity Configuration File\";\n\t\tofd.Filter = \"JSON files (*.json)|*.json\";\n\t\tofd.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\n\t\tofd.RestoreDirectory = true;\n\t\tif (ofd.ShowDialog() == DialogResult.OK) {\n\t\t\tActivityConfigJsonPath.Text = ofd.FileName;\n\t\t}\n\t}\n\ttry {\n\t\tactivityConfig = ActivityConfiguration.Load(ActivityConfigJsonPath.Text.Trim());\n\t\tMessageBox.Show(\"Activity configuration loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(\"An error occurred while loading the activity configuration.\n\n\" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 41.364664303266395}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\ttry {\n\t\tstring activityConfigJsonPath = ActivityConfigJsonPath.Text.Trim();\n\t\tif (activityConfigJsonPath == \"\") {\n\t\t\tOpenFileDialog openFileDialog = new OpenFileDialog();\n\t\t\topenFileDialog.Filter = \"JSON files (*.json)|*.json\";\n\t\t\topenFileDialog.Title = \"Select a JSON file\";\n\t\t\topenFileDialog.RestoreDirectory = true;\n\t\t\topenFileDialog.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);\n\t\t\tDialogResult result = openFileDialog.ShowDialog();\n\t\t\tif (result == DialogResult.OK) {\n\t\t\t\tactivityConfigJsonPath = openFileDialog.FileName;\n\t\t\t}\n\t\t}\n\t\tif (activityConfigJsonPath != \"\") {\n\t\t\tActivityConfigJsonPath.Text = activityConfigJsonPath;\n\t\t\tActivityConfigJsonPath.Select(0, ActivityConfigJsonPath.Text.Length);\n\t\t\tActivityConfigJsonPath.Focus();\n\t\t\tActivityConfigJsonPath.Refresh();\n\t\t\tLoadActivityConfig(activityConfigJsonPath);\n\t\t\tMessageBox.Show(\"Activity configuration loaded from \" + activityConfigJsonPath, \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 38.76676814689357}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t\tif (File.Exists(path)) {\n\t\ttry {\n\t\t\tvar json = File.ReadAllText(path);\n\t\t\tvar activityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n\t\t\tActivityConfigItems.Clear();\n\t\t\tforeach (var activityConfigItem in activityConfigItems) {\n\t\t\t\tActivityConfigItems.Add(activityConfigItem);\n\t\t\t}\n\t\t\tListActivityConfigItems.EndUpdate();\n\t\t} catch (Exception e) {\n\t\t\tMessageBox.Show(\"Error loading activity configuration file: \" + e.Message);\n\t\t}\n\t} else {\n\t\tMessageBox.Show(\"Activity configuration file does not exist: \" + path);\n\t}\n}", "CodeBleu_score": 31.62805310002486}, {"code": "private void LoadActivityConfig(string path){\n\t\ttry {\n\t\tActivityConfigItems.Clear();\n\t\tstring json = File.ReadAllText(path);\n\t\tActivityConfigItem[] items = JsonUtility.FromJson<ActivityConfigItem[]>(json);\n\t\tforeach (ActivityConfigItem item in items) {\n\t\t\tActivityConfigItems.Add(item);\n\t\t}\n\t\tListActivityConfigItems.EndUpdate();\n\t} catch (Exception e) {\n\t\tDebug.Log(\"Error loading activity config: \" + e.Message);\n\t}\n}", "CodeBleu_score": 29.625531265914496}, {"code": "private void LoadActivityConfig(string path){\n\t\ttry {\n\t\t// Open the file\n\t\tFileStream fs = new FileStream(path, FileMode.Open);\n\t\t// Read the content of the file into a StreamReader\n\t\tStreamReader sr = new StreamReader(fs);\n\t\t// Read the content of the StreamReader into a string\n\t\tstring content = sr.ReadToEnd();\n\t\t// Close the StreamReader\n\t\tsr.Close();\n\t\t// Close the FileStream\n\t\tfs.Close();\n\t\t// Deserialize the string into a list of ActivityConfigItem objects\n\t\tActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(content);\n\t\t// Clear the ListActivityConfigItems control\n\t\tListActivityConfigItems.Items.Clear();\n\t\t// Add each item to the ListActivityConfigItems control\n\t\tforeach (ActivityConfigItem item in ActivityConfigItems) {\n\t\t\tListActivityConfigItems.Items.Add(item);\n\t\t}\n\t\t// End the update to refresh the display\n\t\tListActivityConfigItems.EndUpdate();\n\t} catch (Exception ex) {\n\t\t// Display an error message if there is an exception\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 42.38198309355417}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t\ttry {\n\t\tstring filePath = ActivityConfigJsonPath.Text.Trim();\n\t\tif (filePath.Length == 0) {\n\t\t\tSaveFileDialog saveFileDialog = new SaveFileDialog();\n\t\t\tsaveFileDialog.InitialDirectory = \"C:\\\\\";\n\t\t\tsaveFileDialog.Filter = \"JSON files (*.json)|*.json\";\n\t\t\tsaveFileDialog.FilterIndex = 1;\n\t\t\tsaveFileDialog.RestoreDirectory = true;\n\t\t\tif (saveFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\t\tfilePath = saveFileDialog.FileName;\n\t\t\t\tActivityConfigJsonPath.Text = filePath;\n\t\t\t} else {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tList<ActivityConfigItem> activityConfigItems = ActivityConfigItems;\n\t\tstring json = JsonConvert.SerializeObject(activityConfigItems, Formatting.Indented);\n\t\tFile.WriteAllText(filePath, json);\n\t\tMessageBox.Show(\"Saved successfully.\");\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(\"Error saving: \" + ex.Message);\n\t}\n}", "CodeBleu_score": 37.34951185702023}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t\tstring path = ActivityConfigJsonPath.Text.Trim();\n\tif (path.Length == 0) {\n\t\tSaveFileDialog sfd = new SaveFileDialog();\n\t\tsfd.Filter = \"JSON files (*.json)|*.json\";\n\t\tif (sfd.ShowDialog() == DialogResult.OK) {\n\t\t\tpath = sfd.FileName;\n\t\t\tActivityConfigJsonPath.Text = path;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\ttry {\n\t\tstring json = JsonSerializer.Serialize(ActivityConfigItems);\n\t\tFile.WriteAllText(path, json);\n\t\tMessageBox.Show(\"Configuration saved successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(\"An error occurred while saving the configuration.\n\n\" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 43.48703883827735}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t\tstring filePath = ActivityConfigJsonPath.Text.Trim();\n\tif (filePath == \"\") {\n\t\tSaveFileDialog sfd = new SaveFileDialog();\n\t\tsfd.Title = \"Save Activity Configuration File\";\n\t\tsfd.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n\t\tsfd.FileName = \"activity_config.json\";\n\t\tsfd.RestoreDirectory = true;\n\t\tsfd.InitialDirectory = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);\n\t\tif (sfd.ShowDialog() == DialogResult.OK) {\n\t\t\tfilePath = sfd.FileName;\n\t\t\tActivityConfigJsonPath.Text = filePath;\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\ttry {\n\t\tActivityConfigItems.Serialize(filePath);\n\t\tMessageBox.Show(\"Configuration saved successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(\"An error occurred while saving the configuration: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 38.07521363236153}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\t\t// Disable updates to the ListView until all items are added\n\tactivityListView.BeginUpdate();\n\tactivityListView.Items.Clear();\n\tactivityListView.Groups.Clear();\n\t// Iterate through each group in the GameData.Activity collection\n\tforeach (ActivityGroup group in GameData.Activity) {\n\t\t// Create a new ListViewGroup for this group\n\t\tListViewGroup lvg = new ListViewGroup(group.Name);\n\t\tactivityListView.Groups.Add(lvg);\n\t\t// Iterate through each activity in the group\n\t\tforeach (Activity activity in group) {\n\t\t\t// Create a new ListViewItem for this activity\n\t\t\tListViewItem lvi = new ListViewItem(activity.Name);\n\t\t\tlvi.Tag = activity.ID;\n\t\t\tlvi.Group = lvg;\n\t\t\tactivityListView.Items.Add(lvi);\n\t\t}\n\t}\n\t// Re-enable updates to the ListView\n\tactivityListView.EndUpdate();\n}", "CodeBleu_score": 38.25075319672372}, {"code": "private void LoadAllActivity(){\n\t\t// Disable updates to the ListView control\n\tactivityList.BeginUpdate();\n\t// Clear the ListView control\n\tactivityList.Items.Clear();\n\t// Iterate through each group in the Activity collection\n\tforeach (ActivityGroup group in GameData.Activity) {\n\t\t// Create a new group control in the ListView\n\t\tListViewItem groupItem = new ListViewItem();\n\t\t// Set the group header text\n\t\tgroupItem.Text = group.Name;\n\t\t// Set the group header tag to the group name\n\t\tgroupItem.Tag = group.Name;\n\t\t// Add the group control to the ListView\n\t\tactivityList.Items.Add(groupItem);\n\t\t// Iterate through each activity in the group\n\t\tforeach (Activity activity in group.Activities) {\n\t\t\t// Create a new item in the group control\n\t\t\tListViewItem item = new ListViewItem();\n\t\t\t// Set the item text to the activity ID\n\t\t\titem.Text = activity.ID;\n\t\t\t// Set the item tag to the activity name\n\t\t\titem.Tag = activity.Name;\n\t\t\t// Add the item to the group control\n\t\t\tactivityList.Items.Add(item);\n\t\t}\n\t}\n\t// Enable updates to the ListView control\n\tactivityList.EndUpdate();\n}", "CodeBleu_score": 37.20417995744137}, {"code": "private void LoadAllActivity(){\n\t\t// Disable updates to the ListView for efficient bulk processing\n\tlistViewActivities.BeginUpdate();\n\t// Clear all items from the ListView\n\tlistViewActivities.Items.Clear();\n\t// Iterate through each activity group in the GameData.Activity collection\n\tforeach (ActivityGroup group in GameData.Activity) {\n\t\t// Create a new group control in the ListView\n\t\tListViewGroup listViewGroup = new ListViewGroup(group.GroupName);\n\t\t// Add the new group control to the ListView\n\t\tlistViewActivities.Groups.Add(listViewGroup);\n\t\t// Iterate through each activity in the group\n\t\tforeach (Activity activity in group.Activities) {\n\t\t\t// Create a new ListViewItem for the activity\n\t\t\tListViewItem listViewItem = new ListViewItem(activity.ID.ToString());\n\t\t\t// Add the activity ID and name to the ListViewItem\n\t\t\tlistViewItem.SubItems.Add(activity.Name);\n\t\t\t// Add the ListViewItem to the ListView\n\t\t\tlistViewActivities.Items.Add(listViewItem);\n\t\t\t// Add the ListViewItem to the group\n\t\t\tlistViewGroup.Items.Add(listViewItem);\n\t\t}\n\t}\n\t// Re-enable updates to the ListView\n\tlistViewActivities.EndUpdate();\n}", "CodeBleu_score": 37.32515110155445}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\tif (ListAllActivity.SelectedIndex == -1) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tNUDActivityId.Value = int.Parse(ListAllActivity.SelectedItem.ToString());\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(\"Error: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 53.154804323005266}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\tif (ListAllActivity.SelectedIndex == -1) {\n\t\treturn;\n\t}\n\ttry {\n\t\tNUDActivityId.Value = int.Parse(ListAllActivity.SelectedItem.ToString());\n\t} catch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 53.18189754784874}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t\tif (ListAllActivity.SelectedIndex == -1) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tNUDActivityId.Value = Convert.ToInt32(ListAllActivity.SelectedItem);\n\t}\n\tcatch (Exception ex) {\n\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 49.77640117340767}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tif (string.IsNullOrEmpty(TxtFilePath.Text)) {\n\t\tOpenFileDialog openFileDialog = new OpenFileDialog();\n\t\topenFileDialog.Filter = \"JSON Files (*.json)|*.json\";\n\t\tif (openFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\tTxtFilePath.Text = openFileDialog.FileName;\n\t\t}\n\t}\n\tif (!string.IsNullOrEmpty(TxtFilePath.Text)) {\n\t\ttry {\n\t\t\tLoadBanners();\n\t\t\tMessageBox.Show(\"Banners loaded successfully!\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t} catch (Exception ex) {\n\t\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 42.085282406087934}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tif (string.IsNullOrEmpty(TxtPath.Text)) {\n\t\tOpenFileDialog openFileDialog = new OpenFileDialog();\n\t\topenFileDialog.Filter = \"JSON files (*.json)|*.json\";\n\t\topenFileDialog.Title = \"Select a JSON file\";\n\t\tif (openFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\tTxtPath.Text = openFileDialog.FileName;\n\t\t}\n\t}\n\tif (!string.IsNullOrEmpty(TxtPath.Text)) {\n\t\ttry {\n\t\t\tBanners = Json.DeserializeFromFile<List<Banner>>(TxtPath.Text);\n\t\t\tMessageBox.Show(\"Successfully loaded banners from JSON file.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n\t\t} catch (Exception ex) {\n\t\t\tMessageBox.Show(ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t\t}\n\t}\n}", "CodeBleu_score": 37.35706152442799}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t\tif (string.IsNullOrEmpty(TxtFilePath.Text)) {\n\t\tOpenFileDialog openFileDialog = new OpenFileDialog();\n\t\topenFileDialog.Filter = \"JSON files (*.json)|*.json\";\n\t\tif (openFileDialog.ShowDialog() == DialogResult.OK) {\n\t\t\tTxtFilePath.Text = openFileDialog.FileName;\n\t\t}\n\t}\n\ttry {\n\t\tif (File.Exists(TxtFilePath.Text)) {\n\t\t\tBanners = Json.Deserialize<List<Banner>>(TxtFilePath.Text);\n\t\t\tLblSuccess.Visible = true;\n\t\t\tLblSuccess.Text = \"Banners loaded from file successfully!\";\n\t\t}\n\t}\n\tcatch (Exception ex) {\n\t\tLblError.Visible = true;\n\t\tLblError.Text = ex.Message;\n\t}\n}", "CodeBleu_score": 32.725195365828306}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t\tif (dropList != null && dropList.Count > 0) {\n\t\tdropList.Clear();\n\t\tdropList.AddRange(GetDropList());\n\t\tif (dropList.Count > 0) {\n\t\t\tdropList[0].selected = true;\n\t\t}\n\t\tEndUpdate();\n\t}\n}", "CodeBleu_score": 41.65095267949798}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t\t// Update the list.\n\tdropList.Clear();\n\tdropList.AddRange(GetDropData());\n\t// Clear the list.\n\tdropList.Clear();\n\t// Check if the list contains elements.\n\tif (dropList.Count > 0) {\n\t\t// Add the elements to the list.\n\t\tdropList.AddRange(GetDropData());\n\t\t// Set the first item as selected.\n\t\tdropList[0].selected = true;\n\t}\n\t// End the update process for the list.\n\tdropList.EndUpdate();\n}", "CodeBleu_score": 48.29653825521791}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t\tif (dropList == null) {\n\t\treturn;\n\t}\n\t// Update the list\n\tdropList.Update();\n\t// Clear the list\n\tdropListUI.Clear();\n\t// Check if the list contains elements\n\tif (dropList.Count > 0) {\n\t\t// Add the elements to the list\n\t\tforeach (DropData dropData in dropList) {\n\t\t\tdropListUI.AddItem(dropData.name);\n\t\t}\n\t\t// Set the first item as selected\n\t\tdropListUI.SetSelected(0);\n\t}\n\t// End the update process for the list\n\tdropListUI.EndUpdate();\n}", "CodeBleu_score": 40.522943144899564}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t\tif (data.MonsterId != null) {\n\t\tif (DropList.Items.Contains(data.MonsterId)) {\n\t\t\tDropList.Items.Remove(data.MonsterId);\n\t\t\tif (DropList.Items.Count > 0) {\n\t\t\t\tDropList.SelectedIndex = 0;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 19.138381813654153}, {"code": "private void RemoveDrop(DropData data){\n\t", "CodeBleu_score": 1.580193456861919}, {"code": "private void RemoveDrop(DropData data){\n\t\tif (dropList == null || dropList.Count == 0)\n\t\treturn;\n\n\tdropList.Remove(data);\n\tif (dropList.Count == 0)\n\t\treturn;\n\n\tdropList.Sort();\n\tdropList.Reverse();\n\n\tdropList.Refresh();\n\tdropList.SelectedIndex = 0;\n}", "CodeBleu_score": 24.460356114621632}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t\t// Log the form closed event\n\tLogger.Log(LogLevel.Info, \"FormMain\", \"Form closed\");\n\n\t// Iterate through each page\n\tforeach (Page page in this.Controls.OfType<Page>()) {\n\t\t// Log the start of the OnClosed method\n\t\tLogger.Log(LogLevel.Info, \"FormMain\", \"Page \" + page.Name + \" OnClosed method started\");\n\n\t\t// Call the OnClosed method\n\t\tpage.OnClosed(e);\n\n\t\t// Log the completion of the OnClosed method\n\t\tLogger.Log(LogLevel.Info, \"FormMain\", \"Page \" + page.Name + \" OnClosed method completed\");\n\t}\n\n\t// Save the current settings\n\tSettings.Save();\n\n\t// Log the completion of the form closed event\n\tLogger.Log(LogLevel.Info, \"FormMain\", \"Form closed\");\n}", "CodeBleu_score": 48.12206174760011}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t\tLog.Entry(\"FormMain\", \"FormClosed\");\n\tforeach (Page page in this.Controls.OfType<Page>()) {\n\t\tLog.Entry(\"FormMain\", \"FormClosed\", \"Page\", page.Name, \"OnClosed\", \"Starting\");\n\t\tpage.OnClosed(e);\n\t\tLog.Entry(\"FormMain\", \"FormClosed\", \"Page\", page.Name, \"OnClosed\", \"Completed\");\n\t}\n\tLog.Entry(\"FormMain\", \"FormClosed\", \"Settings\", \"Saving\");\n\tSettings.Save();\n\tLog.Entry(\"FormMain\", \"FormClosed\", \"Settings\", \"Saved\");\n\tLog.Entry(\"FormMain\", \"FormClosed\", \"Completed\");\n}", "CodeBleu_score": 36.75468972606117}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t", "CodeBleu_score": 4.520949790988226}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\t try {\n // Get the current application settings\n Settings settings = Settings.Default;\n // Save the current state of the UI\n settings.AutoCopy = AutoCopy.Checked;\n settings.WindowState = WindowState;\n settings.WindowPosition = WindowState == FormWindowState.Normal ? WindowPosition : RestoreBounds.Location;\n settings.WindowSize = WindowState == FormWindowState.Normal ? WindowSize : RestoreBounds.Size;\n // Save the splitter distance of the navigation container\n settings.NavigationSplitterDistance = navigationContainer.SplitterDistance;\n // Save the current state of the command log\n settings.CommandLogVisible = commandLog.Visible;\n settings.CommandLogHeight = commandLog.Height;\n // Save the current state of the output log\n settings.OutputLogVisible = outputLog.Visible;\n settings.OutputLogHeight = outputLog.Height;\n // Save the current state of the navigation container\n settings.NavigationVisible = navigationContainer.Visible;\n settings.NavigationWidth = navigationContainer.Width;\n settings.NavigationHeight = navigationContainer.Height;\n // Save the current state of the settings dialog\n settings.SettingsDialogVisible = settingsDialog.Visible;\n // Save the current state of the about dialog\n settings.AboutDialogVisible = aboutDialog.Visible;\n // Save the current state of the settings\n settings.Settings = new SettingsSerializer().Serialize(settings);\n // Save the settings\n settings.Save();\n // Log the successful save\n Log.Information(\"Settings saved successfully\");\n } catch (Exception ex) {\n // Log the error\n Log.Error(ex, \"Error saving settings\");\n // Display the error to the user\n MessageBox.Show(this, $\"Error saving settings:\n\n{ex.Message}\", \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n }\n }", "CodeBleu_score": 36.83572617993662}, {"code": " private void SaveSettings(){\n\t try {\n // Create a new settings object.\n Settings settings = new Settings();\n // Record the current UI state.\n settings.WindowState = this.WindowState;\n settings.WindowPosition = this.Location;\n settings.WindowSize = this.Size;\n settings.WindowSizeAdjusted = this.Size;\n settings.WindowSizeAdjusted.Height -= commandLog.Height;\n settings.AutoCopy = autoCopy.Checked;\n // Record the current splitter distance.\n settings.SplitterDistance = navigationContainer.SplitterDistance;\n // Save the settings.\n settings.Save();\n } catch (Exception ex) {\n // Log the error and display it to the user.\n string message = \"Error saving settings:\n\n\" + ex.Message;\n MessageBox.Show(message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n }\n }", "CodeBleu_score": 38.593227667259825}, {"code": " private void SaveSettings(){\n\t\ttry {\n\t\t// Create a new settings object\n\t\tSettings settings = new Settings();\n\n\t\t// Record the current state of the UI\n\t\tsettings.AutoCopy = this.chkAutoCopy.Checked;\n\t\tsettings.WindowState = this.WindowState;\n\t\tsettings.WindowPosition = this.Location;\n\t\tsettings.WindowSize = this.Size;\n\t\tsettings.SplitterDistance = this.splitContainer.SplitterDistance;\n\n\t\t// Save the settings\n\t\tsettings.Save();\n\t}\n\tcatch (Exception ex) {\n\t\t// Log the error\n\t\tLogger.Log(\"Error saving settings: \" + ex.Message);\n\n\t\t// Show an error message to the user\n\t\tMessageBox.Show(\"Error saving settings: \" + ex.Message, \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n\t}\n}", "CodeBleu_score": 26.825299429181683}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tif (PageTabOrders != null) {\n\t\treturn PageTabOrders;\n\t}\n\n\tPageTabOrders = new List<Tuple<string, bool>>();\n\n\tif (Settings.HasSetting(\"PageTabOrders\")) {\n\t\tstring[] tabOrders = Settings.GetString(\"PageTabOrders\").Split('|');\n\t\tforeach (string tabOrder in tabOrders) {\n\t\t\tstring[] tabOrderSplit = tabOrder.Split('=');\n\t\t\tif (tabOrderSplit.Length == 2) {\n\t\t\t\tPageTabOrders.Add(new Tuple<string, bool>(tabOrderSplit[0], bool.Parse(tabOrderSplit[1])));\n\t\t\t}\n\t\t}\n\t}\n\n\tif (PageTabOrders.Count == 0) {\n\t\tforeach (KeyValuePair<string, Page> page in Pages) {\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page.Key, true));\n\t\t}\n\t}\n\n\treturn PageTabOrders;\n}", "CodeBleu_score": 36.548626217268016}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tif (PageTabOrders != null) {\n\t\treturn PageTabOrders;\n\t}\n\tPageTabOrders = new List<Tuple<string, bool>>();\n\tvar pageOrders = Settings.GetPageOrders();\n\tif (pageOrders == null) {\n\t\t// No page orders found, create a default list with all pages visible\n\t\tforeach (var page in Pages) {\n\t\t\tPageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n\t\t}\n\t\treturn PageTabOrders;\n\t}\n\tforeach (var pageOrder in pageOrders) {\n\t\tvar page = Pages.Find(p => p.Name == pageOrder.Key);\n\t\tif (page == null) {\n\t\t\tcontinue;\n\t\t}\n\t\tPageTabOrders.Add(new Tuple<string, bool>(page.Name, pageOrder.Value));\n\t}\n\treturn PageTabOrders;\n}", "CodeBleu_score": 31.748062320206706}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t\tif (this.PageTabOrders != null) {\n\t\treturn this.PageTabOrders;\n\t}\n\tthis.PageTabOrders = new List<Tuple<string, bool>>();\n\tstring[] pageOrders = this.Settings.GetValue(\"PageTabOrders\", \"\").Split(',');\n\tforeach (string pageOrder in pageOrders) {\n\t\tif (pageOrder.Length == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tstring[] pageOrderSplit = pageOrder.Split('|');\n\t\tif (pageOrderSplit.Length != 2) {\n\t\t\tcontinue;\n\t\t}\n\t\tstring pageName = pageOrderSplit[0].Trim();\n\t\tbool pageVisible = pageOrderSplit[1].Trim() == \"1\";\n\t\tif (pageName.Length == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tthis.PageTabOrders.Add(new Tuple<string, bool>(pageName, pageVisible));\n\t}\n\tif (this.PageTabOrders.Count == 0) {\n\t\tthis.PageTabOrders = new List<Tuple<string, bool>>();\n\t\tforeach (string pageName in this.PageTabNames) {\n\t\t\tthis.PageTabOrders.Add(new Tuple<string, bool>(pageName, true));\n\t\t}\n\t}\n\treturn this.PageTabOrders;\n}", "CodeBleu_score": 34.82322781750086}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t\tif (info == null)\n\t\tthrow new System.Exception(\"FrameInfo cannot be null.\");\n\tif (info.Data == null)\n\t\tthrow new System.Exception(\"Frame data cannot be null.\");\n\n\t// Log the length of the frame data\n\tLog.Debug(\"Saving frame \" + info.Name + \" with length \" + info.Data.Length);\n\n\t// Write the length of the frame data to the compression stream\n\tCompression.Write(info.Data.Length);\n\n\t// Write the frame data to the compression stream\n\tCompression.Write(info.Data);\n\n\t// Flush the compression stream\n\tCompression.Flush();\n\n\t// Set the frame data to null\n\tinfo.Data = null;\n\n\t// Add the frame information to the project's frames collection\n\tProject.Frames.Add(info);\n}", "CodeBleu_score": 50.91454596797398}, {"code": "public override void Save(FrameInfo info){\n\t\t// Log the frame length\n\tLogger.Log(\"Saving frame \" + info.name + \" with \" + info.data.Length + \" bytes of data.\");\n\n\t// Write the frame data to the compression stream\n\tcompressionStream.Write(info.data, 0, info.data.Length);\n\n\t// Flush the compression stream\n\tcompressionStream.Flush();\n\n\t// Set the frame data to null\n\tinfo.data = null;\n\n\t// Add the frame to the project's frames collection\n\tproject.frames.Add(info);\n}", "CodeBleu_score": 47.00881583911764}, {"code": "public override void Save(FrameInfo info){\n\t\tif (info == null) {\n\t\tthrow new System.ArgumentNullException(\"info\");\n\t}\n\tif (info.Data == null) {\n\t\tthrow new System.ArgumentNullException(\"info.Data\");\n\t}\n\tif (info.Data.Length == 0) {\n\t\tthrow new System.ArgumentException(\"info.Data.Length == 0\");\n\t}\n\tif (info.Data.Length > 0) {\n\t\t// Log the length of the frame data and the current file stream length\n\t\tSystem.Diagnostics.Debug.WriteLine(string.Format(\"Frame {0} data length: {1}\", info.Id, info.Data.Length));\n\t\tSystem.Diagnostics.Debug.WriteLine(string.Format(\"Current file stream length: {0}\", this.stream.Length));\n\t\t// Write the frame data to the compression stream\n\t\tthis.stream.Write(info.Data, 0, info.Data.Length);\n\t\t// Flush the compression stream\n\t\tthis.stream.Flush();\n\t\t// Set the frame data to null\n\t\tinfo.Data = null;\n\t\t// Add the frame information to the project's frames collection\n\t\tthis.project.Frames.Add(info);\n\t}\n}", "CodeBleu_score": 37.87850714296073}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t\t//The cursor type is Monochrome.\n\tif (info.Type == OutputDuplicatePointerShapeInformationType.Monochrome) {\n\t\t//The cursor is not a standard cursor.\n\t\tif (info.Flags != OutputDuplicatePointerShapeInformationFlags.None) {\n\t\t\t//The cursor is a custom cursor.\n\t\t\tif (info.Flags == OutputDuplicatePointerShapeInformationFlags.ColorPointer) {\n\t\t\t\t//The cursor is a color cursor.\n\t\t\t\tDrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, texture.Surface, texture.Pitch, buffer);\n\t\t\t}\n\t\t\t//The cursor is a masked color cursor.\n\t\t\telse if (info.Flags == OutputDuplicatePointerShapeInformationFlags.MaskedColorPointer) {\n\t\t\t\t//The cursor is a masked color cursor.\n\t\t\t\tDrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, texture.Surface, texture.Pitch, buffer);\n\t\t\t}\n\t\t}\n\t\t//The cursor is a standard cursor.\n\t\telse {\n\t\t\t//The cursor is a standard monochrome cursor.\n\t\t\tDrawMonochromeCursor(leftCut, topCut, cursorWidth, cursorHeight, texture.Surface, texture.Pitch, buffer, cursorHeight);\n\t\t}\n\t}\n\t//The cursor type is Color.\n\telse if (info.Type == OutputDuplicatePointerShapeInformationType.Color) {\n\t\t//The cursor is a color cursor.\n\t\tDrawColorCursor(leftCut, topCut, cursorWidth, cursorHeight, texture.Surface, texture.Pitch, buffer);\n\t}\n\t//The cursor type is Masked Color.\n\telse if (info.Type == OutputDuplicatePointerShapeInformationType.MaskedColor) {\n\t\t//The cursor is a masked color cursor.\n\t\tDrawMaskedColorCursor(leftCut, topCut, cursorWidth, cursorHeight, texture.Surface, texture.Pitch, buffer);\n\t}\n}", "CodeBleu_score": 48.31811001980843}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t", "CodeBleu_score": 8.160576900365587}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t", "CodeBleu_score": 8.160576900365587}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.YandexDisk:\n\t\t\treturn new YandexDiskUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException(\"The specified service is not implemented.\");\n\t}\n}", "CodeBleu_score": 64.59075186982614}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDiskUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException();\n\t}\n}", "CodeBleu_score": 72.27642249746378}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t\tswitch (service) {\n\t\tcase UploadDestinations.Imgur:\n\t\t\treturn new ImgurUploader();\n\t\tcase UploadDestinations.Yandex:\n\t\t\treturn new YandexDiskUploader();\n\t\tdefault:\n\t\t\tthrow new NotImplementedException(\"The specified upload destination is not implemented.\");\n\t}\n}", "CodeBleu_score": 66.5870400619179}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t#if DEBUG\n        Debug.WriteLine(\"UploadFileAsync: {0}\", path);\n#endif\n\n        if (!File.Exists(path))\n        {\n            throw new FileNotFoundException(\"File not found.\", path);\n        }\n\n        var fileInfo = new FileInfo(path);\n        var fileSize = fileInfo.Length;\n\n        var url = string.Format(\"{0}/disk/resources?path={1}\", preset.ApiUrl, Uri.EscapeDataString(fileInfo.Name));\n        var content = new MultipartFormDataContent();\n        content.Add(new StringContent(fileInfo.Name), \"path\");\n        content.Add(new StringContent(preset.PublicUrl), \"public_key\");\n        content.Add(new StringContent(preset.Path), \"parent_id\");\n        content.Add(new StringContent(preset.UploadType), \"type\");\n        content.Add(new StringContent(preset.Fields), \"fields\");\n\n        var uploadLink = await GetUploadLinkAsync(preset, url, content, fileSize, cancellationToken);\n        var uploadUrl = uploadLink.Href;\n        var uploadFields = uploadLink.Fields;\n\n        var uploadRequest = new HttpRequestMessage(HttpMethod.Put, uploadUrl);\n        foreach (var field in uploadFields)\n        {\n            uploadRequest.Headers.Add(field.Key, field.Value);\n        }\n\n        using (var fileStream = File.OpenRead(path))\n        {\n            var uploadProgress = new Progress<double>(progress => progressCallback?.Report(progress));\n            await UploadAsync(fileStream, uploadRequest, fileSize, uploadProgress, cancellationToken);\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset, uploadUrl, fileSize, uploadFields, cancellationToken);\n\n        var history = new History(preset, path, fileSize, uploadUrl, downloadLink.Href, downloadLink.Method, downloadLink.Headers);\n        return history;\n    }", "CodeBleu_score": 50.60603161917728}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t#if DEBUG\n        if (preset == null) throw new ArgumentNullException(nameof(preset));\n        if (string.IsNullOrEmpty(path)) throw new ArgumentException(\"The path cannot be null or empty.\", nameof(path));\n#endif\n\n        var fileInfo = new FileInfo(path);\n        if (!fileInfo.Exists) throw new FileNotFoundException(\"The file does not exist.\", path);\n\n        var uploadLink = await GetUploadLinkAsync(preset, fileInfo.Length, cancellationToken);\n        if (uploadLink == null) throw new UploadException(\"The upload link is invalid.\");\n\n        using (var stream = File.OpenRead(path))\n        {\n            await UploadStreamAsync(uploadLink, stream, fileInfo.Length, progressCallback, cancellationToken);\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(uploadLink, fileInfo.Name, cancellationToken);\n        if (downloadLink == null) throw new UploadException(\"The download link is invalid.\");\n\n        return new History(downloadLink, uploadLink, fileInfo.Name, fileInfo.Length, DateTime.Now);\n    }", "CodeBleu_score": 56.40406872855912}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\tif (preset == null)\n    throw new ArgumentNullException(nameof(preset));\n\nif (string.IsNullOrEmpty(path))\n    throw new ArgumentException(\"The path is null or empty.\", nameof(path));\n\nif (!File.Exists(path))\n    throw new FileNotFoundException(\"The file does not exist.\", path);\n\nif (preset.Type == PresetType.Direct)\n    return await UploadDirectAsync(preset, path, cancellationToken, progressCallback);\n\nif (preset.Type == PresetType.Chunked)\n    return await UploadChunkedAsync(preset, path, cancellationToken, progressCallback);\n\nthrow new ArgumentException(\"The preset type is invalid.\", nameof(preset));\n}", "CodeBleu_score": 43.95952006818663}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\t\tif (IsCapturing)\n\t\treturn;\n\n\tIsCapturing = true;\n\n\t//Lock the user settings to prevent any changes during the capture process.\n\tUserSettings.All.Lock();\n\n\t//Create a cancellation token for the capture process.\n\tvar cts = new CancellationTokenSource();\n\n\t//Start a new task to run the capture loop with the specified capture interval.\n\tTask.Run(() => CaptureLoop(cts.Token), cts.Token);\n\n\tif (UserSettings.All.ForceGarbageCollection)\n\t\tStartGarbageCollection();\n}", "CodeBleu_score": 36.136451011961725}, {"code": "internal virtual void StartCapture(){\n\t#if DEBUG\n    LogWriter.Log(\"StartCapture\");\n#endif\n    lock (UserSettings.All)\n    {\n        if (IsCapturing)\n            return;\n\n        IsCapturing = true;\n\n        if (UserSettings.All.ForceGarbageCollection)\n            StartGarbageCollection();\n\n        if (HasFixedDelay())\n            StartFixedDelay();\n        else\n            StartVariableDelay();\n\n        var cts = new CancellationTokenSource();\n        var captureLoopTask = Task.Run(() => CaptureLoop(cts.Token), cts.Token);\n\n        UserSettings.All.PropertyChanged += (sender, e) =>\n        {\n            if (e.PropertyName == nameof(UserSettings.All.ShowCursor))\n                Dispatcher.Invoke(() =>\n                {\n                    if (UserSettings.All.ShowCursor)\n                        CaptureWithCursor(GetCaptureInterval());\n                    else\n                        CaptureWithoutCursor(GetCaptureInterval());\n                });\n        };\n    }\n}", "CodeBleu_score": 42.40398193338654}, {"code": "internal virtual void StartCapture(){\n\t", "CodeBleu_score": 2.1549930480169595}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\t\tStopwatch stopwatch = new Stopwatch();\n\tstopwatch.Start();\n\twhile (!captureToken.IsCancellationRequested) {\n\t\tstopwatch.Restart();\n\t\tframeCount += 1;\n\t\tClearKeyList();\n\t\tCapture();\n\t\tUpdateFrameCount();\n\t\tif (stopwatch.ElapsedMilliseconds < interval) {\n\t\t\tThread.Sleep(1);\n\t\t}\n\t}\n\tstopwatch.Stop();\n}", "CodeBleu_score": 33.04908143311658}, {"code": "private void CaptureWithCursor(int interval){\n\t\tStopwatch stopwatch = new Stopwatch();\n\twhile (!captureToken.IsCancellationRequested) {\n\t\tstopwatch.Restart();\n\t\tFrame newFrame = new Frame();\n\t\tnewFrame.Clear();\n\t\tnewFrame.AddCursor();\n\t\tnewFrame.AddKeys();\n\t\tnewFrame.AddFrameCount();\n\t\tnewFrame.AddTimeStamp();\n\t\tnewFrame.AddMouse();\n\t\tcapture.AddFrame(newFrame);\n\t\tcapture.SaveFrame();\n\t\tif (stopwatch.ElapsedMilliseconds < interval) {\n\t\t\tThread.Sleep(1);\n\t\t}\n\t}\n\tstopwatch.Stop();\n}", "CodeBleu_score": 43.78301844942318}, {"code": "private void CaptureWithCursor(int interval){\n\t\tStopwatch stopwatch = new Stopwatch();\n\tstopwatch.Start();\n\twhile (!captureToken.IsCancellationRequested) {\n\t\tstopwatch.Restart();\n\t\tFrame frame = new Frame();\n\t\tframe.CursorData = GetCursorData();\n\t\tframe.Keys = new List<Key>();\n\t\tframe.FrameNumber = frameCount;\n\t\tframeCount++;\n\t\tCapture(frame);\n\t\twhile (stopwatch.ElapsedMilliseconds < interval) {\n\t\t\tThread.Sleep(1);\n\t\t}\n\t}\n\tstopwatch.Stop();\n}", "CodeBleu_score": 35.998541387628734}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t}\n\telse {\n\t\tSize childSize = new Size();\n\t\tif (Child != null) {\n\t\t\tchildSize = new Size(arrangeSize.Width - Padding.Left - Padding.Right, arrangeSize.Height - Padding.Top - Padding.Bottom);\n\t\t\tChild.Arrange(new Rect(Padding.Left, Padding.Top, childSize.Width, childSize.Height));\n\t\t}\n\t\treturn arrangeSize;\n\t}\n}", "CodeBleu_score": 41.267316744095616}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t\tif (UsingBorderImplementation) {\n\t\treturn base.ArrangeOverride(arrangeSize);\n\t}\n\tif (child != null) {\n\t\tif (Padding != default(Thickness)) {\n\t\t\tdouble left = Padding.Left;\n\t\t\tdouble top = Padding.Top;\n\t\t\tdouble right = Padding.Right;\n\t\t\tdouble bottom = Padding.Bottom;\n\t\t\tdouble width = arrangeSize.Width - left - right;\n\t\t\tdouble height = arrangeSize.Height - top - bottom;\n\t\t\tchild.Arrange(new Rect(left, top, width, height));\n\t\t} else {\n\t\t\tchild.Arrange(new Rect(0, 0, arrangeSize.Width, arrangeSize.Height));\n\t\t}\n\t}\n\treturn arrangeSize;\n}", "CodeBleu_score": 42.49845693146375}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\tif (UsingBorderImplementation) {\nreturn base.ArrangeOverride(arrangeSize);\n}\n\n// Retrieve the child element\nUIElement child = Child;\nif (child == null) {\nreturn arrangeSize;\n}\n\n// Retrieve the padding\nThickness padding = Padding;\n\n// Calculate the child's width and height\ndouble width = Math.Max(0, arrangeSize.Width - padding.Left - padding.Right);\ndouble height = Math.Max(0, arrangeSize.Height - padding.Top - padding.Bottom);\n\n// Arrange the child\nRect finalRect = new Rect(padding.Left, padding.Top, width, height);\nchild.Arrange(finalRect);\n\n// Return the arrange size\nreturn arrangeSize;\n}", "CodeBleu_score": 40.45921735026871}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t\tbase.OnLostFocus(e);\n\tif (!UpdateOnInput) {\n\t\tif (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n\t\t\tText = DefaultValue.ToString();\n\t\t\treturn;\n\t\t}\n\t}\n\tif (IgnoreChanges) return;\n\tIgnoreChanges = true;\n\ttry {\n\t\tvar value = ConvertTextToValue(Text);\n\t\tText = ConvertValueToText(value);\n\t\tValue = value;\n\t} finally {\n\t\tIgnoreChanges = false;\n\t}\n}", "CodeBleu_score": 35.29318522904542}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\nif (!UpdateOnInput) {\nif (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\nif (DefaultValue != null) {\nText = DefaultValue.ToString();\n}\nelse {\nText = \"\";\n}\nreturn;\n}\n}\nif (IgnoreChanges) {\nreturn;\n}\ndecimal value;\nif (decimal.TryParse(Text, out value)) {\nValue = value;\n}\nelse {\nif (DefaultValue != null) {\nValue = DefaultValue;\n}\nelse {\nValue = 0m;\n}\n}\nFormatText();\nIgnoreChanges = false;\n}", "CodeBleu_score": 37.9090406066426}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\tbase.OnLostFocus(e);\nif (!UpdateOnInput) {\nif (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\nText = DefaultValue.ToString();\nreturn;\n}\n}\nif (IgnoreChanges) {\nreturn;\n}\ndecimal value;\nif (decimal.TryParse(Text, out value)) {\nText = value.ToString(FormatString, CultureInfo.CurrentCulture);\n}\nIgnoreChanges = true;\nSetValue(ValueProperty, value);\nIgnoreChanges = false;\n}", "CodeBleu_score": 40.93599275718716}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.Key == Key.Enter || e.Key == Key.Return) {\n\t\te.Handled = true;\n\t\tMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 81.731190273334}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.Key == Key.Enter || e.Key == Key.Return) {\n\t\te.Handled = true;\n\t\tMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n\t}\n\tbase.OnKeyDown(e);\n}", "CodeBleu_score": 81.731190273334}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t\tif (e.Key == Key.Enter) {\n\t\te.Handled = true;\n\t\tMoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n\t}\n\telse {\n\t\tbase.OnKeyDown(e);\n\t}\n}", "CodeBleu_score": 51.71526074449173}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.7201224411392697}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tif (_isCaptured && e.LeftButton == MouseButtonState.Pressed) {\n\t\tif (_isSelectionMode) {\n\t\t\tif (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)) {\n\t\t\t\tif (_selectedShapes.Count > 0) {\n\t\t\t\t\tvar current = GetBoundedCoordinates(e);\n\t\t\t\t\tvar start = _selectionStart;\n\t\t\t\t\t_selectionRect.Width = Math.Abs(current.X - start.X);\n\t\t\t\t\t_selectionRect.Height = Math.Abs(current.Y - start.Y);\n\n\t\t\t\t\tif (current.X < start.X)\n\t\t\t\t\t\t_selectionRect.X = current.X;\n\t\t\t\t\telse\n\t\t\t\t\t\t_selectionRect.X = start.X;\n\n\t\t\t\t\tif (current.Y < start.Y)\n\t\t\t\t\t\t_selectionRect.Y = current.Y;\n\t\t\t\t\telse\n\t\t\t\t\t\t_selectionRect.Y = start.Y;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t_selectionStart = GetBoundedCoordinates(e);\n\t\t\t\t_selectionRect.Width = 0;\n\t\t\t\t_selectionRect.Height = 0;\n\t\t\t\t_selectionRect.X = _selectionStart.X;\n\t\t\t\t_selectionRect.Y = _selectionStart.Y;\n\t\t\t}\n\t\t} else {\n\t\t\tvar current = GetBoundedCoordinates(e);\n\t\t\tCalculateOrientation(_selectionStart, current);\n\t\t\tRenderRegion = new Rect(_selectionStart, current);\n\t\t\tRenderShape();\n\t\t}\n\t}\n\n\tbase.OnMouseMove(e);\n}", "CodeBleu_score": 40.94670726018169}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t\tif (_isCaptured && e.LeftButton == MouseButtonState.Pressed) {\n\t\tif (CurrentMode == Mode.Selection && (SelectedShapes.Count == 0 || (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl)))) {\n\t\t\tif (_selectionRectangle == null) {\n\t\t\t\t_selectionRectangle = new Rectangle {\n\t\t\t\t\tStroke = Stroke,\n\t\t\t\t\tStrokeThickness = StrokeThickness,\n\t\t\t\t\tStrokeDashArray = StrokeDashArray,\n\t\t\t\t\tFill = Brushes.Transparent,\n\t\t\t\t\tOpacity = 0.5\n\t\t\t\t};\n\t\t\t\t_mainCanvas.Children.Add(_selectionRectangle);\n\t\t\t}\n\n\t\t\tvar current = GetBoundedCoordinates(e);\n\n\t\t\tif (_isBottomToTop)\n\t\t\t\t_selectionRectangle.Height = current.Y - RenderRegion.Top;\n\t\t\telse\n\t\t\t\t_selectionRectangle.Height = RenderRegion.Bottom - current.Y;\n\n\t\t\tif (_isRightToLeft)\n\t\t\t\t_selectionRectangle.Width = current.X - RenderRegion.Left;\n\t\t\telse\n\t\t\t\t_selectionRectangle.Width = RenderRegion.Right - current.X;\n\n\t\t\t_selectionRectangle.Margin = new Thickness(\n\t\t\t\tMath.Min(current.X, RenderRegion.Left),\n\t\t\t\tMath.Min(current.Y, RenderRegion.Top),\n\t\t\t\t0,\n\t\t\t\t0\n\t\t\t);\n\t\t} else {\n\t\t\tif (CurrentMode == Mode.Shape) {\n\t\t\t\tvar current = GetBoundedCoordinates(e);\n\t\t\t\tCalculateOrientation(RenderRegion.TopLeft, current);\n\t\t\t\tRenderRegion.Height = Math.Abs(RenderRegion.Top - RenderRegion.Bottom);\n\t\t\t\tRenderRegion.Width = Math.Abs(RenderRegion.Left - RenderRegion.Right);\n\t\t\t\tRenderRegion.Top = Math.Min(current.Y, RenderRegion.Top);\n\t\t\t\tRenderRegion.Left = Math.Min(current.X, RenderRegion.Left);\n\t\t\t\tRenderRegion.Bottom = Math.Max(current.Y, RenderRegion.Bottom);\n\t\t\t\tRenderRegion.Right = Math.Max(current.X, RenderRegion.Right);\n\t\t\t\tRenderShape();\n\t\t\t}\n\t\t}\n\t}\n\n\tbase.OnMouseMove(e);\n}", "CodeBleu_score": 37.05326595822155}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t\tif (sender is Thumb) {\n\t\te.Handled = true;\n\n\t\tdouble newWidth = Math.Max(10, Math.Max(ActualWidth + e.HorizontalChange, ActualHeight + e.VerticalChange));\n\t\tdouble newHeight = Math.Max(10, Math.Max(ActualWidth + e.HorizontalChange, ActualHeight + e.VerticalChange));\n\n\t\tif (newWidth > Parent.ActualWidth)\n\t\t\tnewWidth = Parent.ActualWidth;\n\t\tif (newHeight > Parent.ActualHeight)\n\t\t\tnewHeight = Parent.ActualHeight;\n\n\t\tif (newWidth != ActualWidth || newHeight != ActualHeight) {\n\t\t\tRaiseManipulatedEvent(newWidth - ActualWidth, newHeight - ActualHeight);\n\n\t\t\tWidth = newWidth;\n\t\t\tHeight = newHeight;\n\n\t\t\tAfterManipulation();\n\t\t}\n\t}\n}", "CodeBleu_score": 38.718350379484804}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (sender is Thumb) {\ne.Handled = true;\ndouble width = _adornedElement.Width + e.HorizontalChange;\ndouble height = _adornedElement.Height + e.VerticalChange;\nwidth = Math.Max(width, 10);\nheight = Math.Max(height, 10);\nwidth = Math.Min(width, _adornedElement.Parent.ActualWidth);\nheight = Math.Min(height, _adornedElement.Parent.ActualHeight);\ndouble widthDiff = width - _adornedElement.Width;\ndouble heightDiff = height - _adornedElement.Height;\nRaiseManipulatedEvent(widthDiff, heightDiff);\n_adornedElement.Width = width;\n_adornedElement.Height = height;\nAfterManipulation();\n}\n}", "CodeBleu_score": 42.74007899708037}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\tif (sender is Thumb) {\n    e.Handled = true;\n    double widthChange = e.HorizontalChange;\n    double heightChange = e.VerticalChange;\n    double newWidth = this.AdornedElement.Width + widthChange;\n    double newHeight = this.AdornedElement.Height + heightChange;\n    newWidth = Math.Max(newWidth, 10);\n    newHeight = Math.Max(newHeight, 10);\n    newWidth = Math.Min(newWidth, this.AdornedElement.Parent.ActualWidth);\n    newHeight = Math.Min(newHeight, this.AdornedElement.Parent.ActualHeight);\n    this.AdornedElement.Width = newWidth;\n    this.AdornedElement.Height = newHeight;\n    RaiseManipulatedEvent(newWidth - this.AdornedElement.DesiredSize.Width);\n    AfterManipulation();\n}\n}", "CodeBleu_score": 41.15850375538882}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = Enumerable.Range(0, 1000).ToList();\n\tShortList = new List<string> { \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\" };\n\tSelectedInteger = IntegerList[2];\n\tSelectedText = null;\n\tLongList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tLongList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 57.47812371113661}, {"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = new List<int>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tIntegerList.Add(i);\n\t}\n\n\tShortList = new List<string> { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\" };\n\n\tSelectedInteger = IntegerList[333];\n\tSelectedText = null;\n\n\tLongList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tLongList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 52.05998060234273}, {"code": "public ComboBoxesViewModel(){\n\t\tIntegerList = Enumerable.Range(0, 1000).ToList();\n\tShortList = new List<string> { \"Item 1\", \"Item 2\", \"Item 3\", \"Item 4\", \"Item 5\", \"Item 6\", \"Item 7\", \"Item 8\", \"Item 9\", \"Item 10\" };\n\tSelectedInteger = IntegerList.First();\n\tSelectedText = null;\n\tLongList = new List<string>();\n\tfor (int i = 0; i < 1000; i++) {\n\t\tLongList.Add(Path.GetRandomFileName());\n\t}\n}", "CodeBleu_score": 61.092559885393925}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t\t// Create view and view model.\n\tSampleDialog view = new SampleDialog();\n\tSampleDialogViewModel vm = new SampleDialogViewModel();\n\tview.DataContext = vm;\n\n\t// Show dialog.\n\tvar result = await DialogHost.Show(view, \"RootDialog\");\n\n\t// Log result.\n\tif (result != null) {\n\t\tSystem.Diagnostics.Debug.WriteLine(\"Dialog result: \" + result);\n\t}\n}", "CodeBleu_score": 24.961522907621546}, {"code": "private async Task RunDialog() {\n\t\tvar dialog = new SampleDialog();\n\tvar vm = new SampleDialogViewModel();\n\tdialog.DataContext = vm;\n\tvar result = await DialogHost.Show(dialog, \"RootDialog\");\n\tif (result != null) {\n\t\tMessageBox.Show(result.ToString());\n\t}\n}", "CodeBleu_score": 19.766673662495194}, {"code": "private async Task RunDialog() {\n\t", "CodeBleu_score": 1.9179669118849947}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tPaletteHelper paletteHelper = new PaletteHelper();\n\tTheme theme = paletteHelper.GetTheme();\n\tif (theme != null) {\n\t\tmodificationAction?.Invoke(theme);\n\t\tpaletteHelper.SetTheme(theme);\n\t}\n}", "CodeBleu_score": 67.09600912058026}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tif (modificationAction == null) return;\n\tPaletteHelper palette = new PaletteHelper();\n\tTheme theme = palette.Theme;\n\tif (theme != null) modificationAction(theme);\n\tpalette.SetTheme(theme);\n}", "CodeBleu_score": 50.918111942919}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t\tif (modificationAction != null) {\n\t\tPaletteHelper paletteHelper = new PaletteHelper();\n\t\tTheme theme = paletteHelper.GetTheme();\n\t\tif (theme != null) {\n\t\t\tmodificationAction(theme);\n\t\t\tpaletteHelper.SetTheme(theme);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.910050170073205}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t\tif (ContentType == null) {\n\t\tthrow new InvalidOperationException(\"The ContentType property of a ContentControl must be set.\");\n\t}\n\tobject? content = Activator.CreateInstance(ContentType);\n\tif (content is FrameworkElement element && DataContext != null) {\n\t\telement.DataContext = DataContext;\n\t}\n\treturn content;\n}", "CodeBleu_score": 37.90876806258342}, {"code": "private object? CreateContent(){\n\t\tobject? content = null;\n\tif (ContentCreator != null) {\n\t\tcontent = ContentCreator();\n\t}\n\tif (content is FrameworkElement element && DataContext != null) {\n\t\telement.DataContext = DataContext;\n\t}\n\treturn content;\n}", "CodeBleu_score": 39.100401894901}, {"code": "private object? CreateContent(){\n\t\tobject? content = Activator.CreateInstance(ContentType);\n\tif (content is FrameworkElement element && DataContext is not null) {\n\t\telement.DataContext = DataContext;\n\t}\n\treturn content;\n}", "CodeBleu_score": 42.42506214395724}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\t\tvar content = (Sample4Content)this.Content;\n\tcontent.InitializeSampleProgressDialog();\n\tTask.Delay(3000).ContinueWith(_ => { content.IsSample4DialogOpen = false; }, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 30.453020210908}, {"code": "private void AcceptSample4Dialog(object? _){\n\t\tif (Sample4Content is not null) {\n\t\tSample4Content.IsSample4DialogOpen = true;\n\t}\n\n\tTask.Delay(3000).ContinueWith(t => {\n\t\tif (Sample4Content is not null) {\n\t\t\tSample4Content.IsSample4DialogOpen = false;\n\t\t}\n\t}, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 34.497636554527425}, {"code": "private void AcceptSample4Dialog(object? _){\n\t\tif (Sample4Content is null) {\n\t\tSample4Content = new SampleProgressDialog();\n\t}\n\tSample4Content.Show();\n\tawait Task.Delay(3000);\n\tIsSample4DialogOpen = false;\n}", "CodeBleu_score": 35.87144179317387}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tif (device == null) {\n\t\treturn;\n\t}\n\n\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.DeviceID == device.DeviceID) {\n\t\t\tif (option == AudioDeviceEventKind.Active) {\n\t\t\t\ttrigger.Triggered();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.28950256339132}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tif (device == null) {\n\t\treturn;\n\t}\n\n\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Device.ID == device.ID && trigger.Option == option) {\n\t\t\ttrigger.Triggered.Invoke(device);\n\t\t}\n\t}\n}", "CodeBleu_score": 58.03218077906519}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t\tforeach (var trigger in _deviceTriggers) {\n\t\tif (trigger.Device.Id == device.Id && trigger.Option == option) {\n\t\t\ttrigger.Triggered?.Invoke(trigger);\n\t\t}\n\t}\n}", "CodeBleu_score": 60.744194872117504}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t\t// Clear all triggers\n\ttriggerManager.ClearTriggers();\n\n\t// Retrieve actions from settings\n\tList<string> actions = settings.Get<List<string>>(key);\n\n\t// Register triggers\n\tif (actions != null) {\n\t\tforeach (string action in actions) {\n\t\t\ttriggerManager.RegisterTrigger(action);\n\t\t}\n\t}\n}", "CodeBleu_score": 25.842869903454392}, {"code": "private void LoadAndRegister(){\n\t\t// Clear the trigger manager\n\ttriggerManager.Clear();\n\t\n\t// Retrieve the actions from settings\n\tList<Action> actions = settings.GetActions(key);\n\t\n\t// Register each trigger from the loaded actions with the trigger manager\n\tforeach(Action action in actions) {\n\t\ttriggerManager.Register(action.trigger, action);\n\t}\n}", "CodeBleu_score": 25.726425085406568}, {"code": "private void LoadAndRegister(){\n\t\t// Clear the trigger manager\n\tTriggerManager.Clear();\n\n\t// Retrieve the actions from settings\n\tvar actions = Settings.Get<Dictionary<string, Dictionary<string, string>>>(SettingsKey);\n\n\t// Register each trigger from the loaded actions with the trigger manager\n\tforeach (var action in actions) {\n\t\tvar trigger = new Trigger(action.Key);\n\t\tforeach (var key in action.Value.Keys) {\n\t\t\tvar triggerKey = key;\n\t\t\tvar triggerValue = action.Value[key];\n\t\t\ttrigger.Add(new Trigger.TriggerAction(delegate (object sender, string value) {\n\t\t\t\tif (triggerValue.Equals(value)) {\n\t\t\t\t\tOnTrigger(triggerKey);\n\t\t\t\t}\n\t\t\t}, triggerValue));\n\t\t}\n\t\tTriggerManager.Register(trigger);\n\t}\n}", "CodeBleu_score": 22.811390124173165}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tvar action = Actions.FirstOrDefault(a => a.Triggers.Any(t => t.Id == trigger.Id));\n\tif (action != null && action.Conditions.All(c => c.IsMet())) {\n\t\tTriggerAction(action);\n\t}\n}", "CodeBleu_score": 47.29895625654621}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tif (trigger == null) return;\n\n\tforeach (EarTrumpetAction action in ActionProcessor.Actions) {\n\t\tif (action.Triggers.Contains(trigger)) {\n\t\t\tif (action.Conditions.All(c => c.Check())) {\n\t\t\t\tTriggerAction(action);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.25805707256623}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t\tforeach (EarTrumpetAction action in ActionProcessor.Actions) {\n\t\tif (action.Triggers.Contains(trigger)) {\n\t\t\tif (action.Conditions.All(c => c.IsMet())) {\n\t\t\t\tTriggerAction(action);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 56.04422432064159}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t\tlet mut script_vars = self.get_variables_mentioning(name).into_iter().filter(|v| v.is_script_var());\n\twhile let Some(script_var) = script_vars.next() {\n\t\tif let Some(run_while) = script_var.get_run_while() {\n\t\t\tif let Err(e) = self.eval_run_while(run_while, script_var) {\n\t\t\t\terror!(\"Error evaluating run-while expression for variable '{}': {}\", script_var.get_name(), e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 28.248858198630067}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t\t// Get the variables that mention the specified name.\n\tlet mut vars = self.graph.get_variables_mentioning(name);\n\t// Filter the variables to obtain script variables.\n\tvars = vars.into_iter().filter(|v| v.is_script()).collect::<Vec<_>>();\n\t// For each script variable that is a poll variable, evaluate its run-while expression in the scope graph.\n\tfor var in vars.iter() {\n\t\tif let Some(expr) = var.run_while_expr() {\n\t\t\tif let Err(e) = self.graph.evaluate_expression(expr) {\n\t\t\t\tself.error_handler.handle_error(e);\n\t\t\t} else if self.graph.is_true() {\n\t\t\t\tself.script_handler.add_poll_variable(var.clone());\n\t\t\t} else {\n\t\t\t\tself.script_handler.stop_poll_variable(var.clone());\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 28.734224326912805}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t", "CodeBleu_score": 3.866313172019029}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t\tlet mut window_instance = self.window_instances.remove(instance_id).ok_or(Error::UnknownInstance)?;\n\twindow_instance.abort_close_timer();\n\tself.window_manager.close_window(&mut window_instance);\n\tself.scope_graph.remove_scope(&window_instance.scope);\n\tself.arguments.remove(instance_id);\n\tOk(())\n}", "CodeBleu_score": 29.716046251834}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t", "CodeBleu_score": 14.586088025188115}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t", "CodeBleu_score": 14.586088025188115}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t\tself.log(format!(\"Reloading configuration...\"));\n\tself.stop_script_var_handlers();\n\tlet mut new_handler = script_var_handler::ScriptVarHandler::new(config.clone());\n\tself.log(format!(\"Replaced script variable handler with new one\"));\n\tself.replace_script_var_handler(new_handler);\n\tself.log(format!(\"Waiting for old script variable handler to terminate\"));\n\tself.script_var_handler.wait_for_termination();\n\tself.log(format!(\"Replaced script variable handler with new one\"));\n\tself.eww_config = config.clone();\n\tself.log(format!(\"Clearing scope graph with initial state from new configuration\"));\n\tself.scope_graph.clear();\n\tself.scope_graph.insert_scope(\n\t\tconfig.default_scope.clone(),\n\t\tself.eww_config.default_variables.clone(),\n\t\tself.eww_config.default_window_properties.clone(),\n\t);\n\tself.log(format!(\"Reopening windows\"));\n\tlet mut failed_windows = self.eww_config.failed_windows.clone();\n\tlet mut open_windows = self.eww_config.open_windows.clone();\n\twhile !failed_windows.is_empty() {\n\t\tlet window_id = failed_windows.pop().unwrap();\n\t\tlet window_args = open_windows.remove(&window_id).unwrap();\n\t\tself.eww_config.failed_windows.remove(&window_id);\n\t\tself.eww_config.open_windows.remove(&window_id);\n\t\tself.log(format!(\"Reopening window {}\", window_id));\n\t\tself.open_window(window_id, window_args);\n\t}\n\tself.log(format!(\"Reloaded configuration successfully\"));\n\tOk(())\n}", "CodeBleu_score": 48.310350451655594}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t", "CodeBleu_score": 10.07331619203318}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t///     let mut log = self.log.new(o!(\"action\" => \"load_config\"));\n///     log.info(\"Reloading configuration\");\n///     log.info(\"Stopping script variable handlers\");\n///     self.stop_all_script_variable_handlers();\n///     log.info(\"Replacing script variable handler\");\n///     self.script_var_handler = Box::new(script_var_handler::EwwScriptVarHandler::new(config.clone()));\n///     log.info(\"Waiting for old script variable handler to terminate\");\n///     self.script_var_handler.await_shutdown();\n///     log.info(\"Loading new configuration\");\n///     self.eww_config = config;\n///     log.info(\"Clearing scope graph\");\n///     self.scope_graph.clear();\n///     log.info(\"Reopening windows\");\n///     let mut open_windows = self.window_manager.get_open_windows();\n///     let mut failed_windows = self.window_manager.get_failed_windows();\n///     open_windows.append(&mut failed_windows);\n///     for window_id in open_windows {\n///         let window = self.window_manager.get_window_by_id(window_id);\n///         if let Some(window) = window {\n///             let args = window.get_initial_args();\n///             if let Err(e) = self.window_manager.open_window(args) {\n///                 log.error(&format!(\"Failed to reopen window {}: {}\", window_id, e));\n///             }\n///         }\n///     }\n///     log.info(\"Reloading configuration successful\");\n///     Ok(())\n/// }", "CodeBleu_score": 11.281693656748645}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t\t// TODO: Implement this.\n\tOk(())\n}", "CodeBleu_score": 9.262809457811588}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t\t// If the CSS is empty, return an error.\n\tif css.is_empty() {\n\t\treturn Err(Error::new(\n\t\t\t\"CSS is empty.\",\n\t\t\tSome(Span::new(file_id, 0, 0, 0, 0)),\n\t\t));\n\t}\n\n\t// If the CSS is not empty, attempt to load the CSS data.\n\tmatch cssparser::parse_stylesheet(css) {\n\t\t// If loading succeeds, return Ok.\n\t\tOk(_) => Ok(()),\n\t\t// If loading fails, process the error message.\n\t\tErr(err) => {\n\t\t\t// Create a regex pattern to extract line and message details.\n\t\t\tlet pattern = Regex::new(\n\t\t\t\tr\"(?P<line>\\d+):(?P<column>\\d+): (?P<message>.+)\",\n\t\t\t).unwrap();\n\n\t\t\t// If the regex pattern is not matched, return a generic CSS error message.\n\t\t\tif let None = pattern.captures(err.to_string()) {\n\t\t\t\treturn Err(Error::new(\n\t\t\t\t\t\"CSS error.\",\n\t\t\t\t\tSome(Span::new(file_id, 0, 0, 0, 0)),\n\t\t\t\t));\n\t\t\t}\n\n\t\t\t// If the regex pattern is matched, retrieve the line and message details.\n\t\t\tlet captures = pattern.captures(err.to_string()).unwrap();\n\t\t\tlet line = captures[\"line\"].parse::<usize>().unwrap();\n\t\t\tlet column = captures[\"column\"].parse::<usize>().unwrap();\n\t\t\tlet message = captures[\"message\"].to_string();\n\n\t\t\t// Create a diagnostic error with a specific span.\n\t\t\treturn Err(Error::new(\n\t\t\t\t&message,\n\t\t\t\tSome(Span::new(file_id, line, column, line, column)),\n\t\t\t));\n\t\t}\n\t}\n}", "CodeBleu_score": 43.538978057538046}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t\tlet display = gdk::Display::get_default().ok_or(\"Could not get default display\")?;\n\tlet monitor = match identifier {\n\t\tNone => display.primary_monitor(),\n\t\tSome(ident) => get_monitor_from_display(&display, &ident),\n\t}.ok_or(\"Could not find monitor\")?;\n\tOk(monitor)\n}", "CodeBleu_score": 16.15625555664202}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t\tlet display = gdk::Display::get_default().expect(\"Could not get GDK display\");\n\tif let Some(ident) = identifier {\n\t\tif let Some(monitor) = get_monitor_from_display(&display, &ident) {\n\t\t\treturn Ok(monitor);\n\t\t} else {\n\t\t\tlet mut monitors = String::new();\n\t\t\tfor m in 0..display.n_monitors() {\n\t\t\t\tif let Some(model) = display.monitor(m).and_then(|x| x.model()) {\n\t\t\t\t\tmonitors.push_str(&format!(\"{:?}: {}\n\", m, model));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Err(format!(\"Monitor {:?} not found. Available monitors:\n{}\", ident, monitors).into());\n\t\t}\n\t}\n\tOk(display.primary_monitor().expect(\"Could not get primary monitor\"))\n}", "CodeBleu_score": 32.056248311751155}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t\tlet display = gdk::Display::get_default();\n\tif let Some(ident) = identifier {\n\t\tif let Some(monitor) = get_monitor_from_display(&display, &ident) {\n\t\t\treturn Ok(Monitor(monitor));\n\t\t}\n\t}\n\tlet monitors = display.monitors();\n\tlet mut monitor_names = String::new();\n\tfor (i, monitor) in monitors.iter().enumerate() {\n\t\tif let Some(name) = monitor.model() {\n\t\t\tmonitor_names.push_str(&format!(\"Monitor {}: {}\n\", i, name));\n\t\t}\n\t}\n\tErr(format!(\"No monitor found with the given identifier.\nAvailable monitors:\n{}\", monitor_names))\n}", "CodeBleu_score": 21.168716429035648}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\n\tunsafe {\n\t\tfrom_glib_none(ffi::gtk_window_util_get_window_rectangle(geometry.to_glib(), screen_rect.to_glib_none().0))\n\t}\n}", "CodeBleu_score": 23.255165529300044}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\n\tunsafe {\n\t\tlet mut rect = gdk::Rectangle::uninitialized();\n\t\tffi::gtk_window_geometry_get_window_rectangle(geometry.to_glib_none().0, screen_rect.to_glib_none().0, rect.to_glib_none_mut().0);\n\t\trect\n\t}\n}", "CodeBleu_score": 25.96498770382719}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t\n\tunsafe {\n\t\tfrom_glib_none(ffi::gtk_window_util_get_window_rectangle(geometry.to_glib(), screen_rect.to_glib_none().0))\n\t}\n}", "CodeBleu_score": 23.255165529300044}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t\tlet window = match window_init.window_type {\n\t\tWindowType::Background => {\n\t\t\tlet window = gtk::Window::new(gtk::WindowType::Toplevel);\n\t\t\twindow.set_decorated(false);\n\t\t\twindow.set_accept_focus(false);\n\t\t\twindow.set_skip_taskbar_hint(true);\n\t\t\twindow.set_skip_pager_hint(true);\n\t\t\twindow.set_type_hint(gdk::WindowTypeHint::DOCK);\n\t\t\twindow.stick();\n\t\t\twindow\n\t\t},\n\t\tWindowType::Foreground => {\n\t\t\tlet window = gtk::Window::new(gtk::WindowType::Toplevel);\n\t\t\twindow.set_decorated(true);\n\t\t\twindow.set_accept_focus(true);\n\t\t\twindow.set_skip_taskbar_hint(false);\n\t\t\twindow.set_skip_pager_hint(false);\n\t\t\twindow.set_type_hint(gdk::WindowTypeHint::NORMAL);\n\t\t\twindow.unstick();\n\t\t\twindow\n\t\t},\n\t};\n\n\twindow.set_default_size(window_init.width, window_init.height);\n\twindow.move(x, y);\n\n\twindow.set_resizable(window_init.resizable);\n\twindow.set_keep_above(window_init.stack_position == StackPosition::Foreground);\n\n\twindow.connect_delete_event(|_, _| {\n\t\tgtk::main_quit();\n\t\tInhibit(false)\n\t});\n\n\tSome(Window(window))\n}", "CodeBleu_score": 48.76545626442774}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\t\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(diagnostic_str) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"Error: {}\", diagnostic_str);\n\t\t} else {\n\t\t\teprintln!(\"Error: {}\", err);\n\t\t}\n\t} else {\n\t\teprintln!(\"Error: {}\", err);\n\t}\n}", "CodeBleu_score": 29.690193656459783}, {"code": "pub fn print_error(err: anyhow::Error){\n\t\tif let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n\t\tif let Ok(diagnostic_string) = stringify_diagnostic(diagnostic) {\n\t\t\teprintln!(\"error: {}\", diagnostic_string);\n\t\t} else {\n\t\t\tlog::error!(\"failed to stringify diagnostic: {}\", err);\n\t\t}\n\t} else {\n\t\tlog::error!(\"failed to convert error to diagnostic: {}\", err);\n\t}\n}", "CodeBleu_score": 31.104466385377982}, {"code": "pub fn print_error(err: anyhow::Error){\n\t#[cfg(feature = \"diagnostics\")]\n    if let Some(diagnostic) = anyhow_err_to_diagnostic(&err) {\n        if let Ok(diagnostic_string) = stringify_diagnostic(diagnostic) {\n            eprintln!(\"{}\", diagnostic_string);\n        } else {\n            eprintln!(\"Failed to stringify diagnostic message: {}\", err);\n        }\n    } else {\n        eprintln!(\"Failed to convert error to diagnostic message: {}\", err);\n    }\n#[cfg(not(feature = \"diagnostics\"))]\n    eprintln!(\"Error: {}\", err);\n}", "CodeBleu_score": 44.099925470916766}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\tlet socket_path = socket_path.as_ref();\n\tif socket_path.exists() {\n\t\tstd::fs::remove_file(socket_path).map_err(|e| format!(\"Error removing socket file '{}': {}\", socket_path.display(), e))?;\n\t}\n\tlet listener = tokio::net::UnixListener::bind(socket_path).await.map_err(|e| format!(\"Error binding to socket '{}': {}\", socket_path.display(), e))?;\n\tevt_send.send(app::DaemonCommand::Log(format!(\"Listening on '{}'\", socket_path.display()))).ok();\n\tloop {\n\t\tmatch listener.accept().await {\n\t\t\tOk((stream, _)) => {\n\t\t\t\tlet evt_send = evt_send.clone();\n\t\t\t\ttokio::spawn(async move {\n\t\t\t\t\tmatch handle_connection(evt_send, stream).await {\n\t\t\t\t\t\tOk(()) => {},\n\t\t\t\t\t\tErr(e) => evt_send.send(app::DaemonCommand::Log(format!(\"Error handling connection: {}\", e))).ok(),\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\tErr(e) => {\n\t\t\t\tevt_send.send(app::DaemonCommand::Log(format!(\"Error accepting connection: {}\", e))).ok();\n\t\t\t},\n\t\t}\n\t}\n}", "CodeBleu_score": 57.15314798608252}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\tuse std::os::unix::net::UnixStream;\n\tuse std::os::unix::fs::PermissionsExt;\n\n\tlet socket_path = socket_path.as_ref();\n\tif socket_path.exists() {\n\t\tlet metadata = std::fs::metadata(socket_path).unwrap();\n\t\tif !metadata.is_socket() {\n\t\t\treturn Err(Error::new(format!(\"{} is not a socket\", socket_path.display())));\n\t\t}\n\t\tlet permissions = metadata.permissions();\n\t\tif permissions.mode() & 0o777 != 0o600 {\n\t\t\treturn Err(Error::new(format!(\"{} has invalid permissions: {:o}\", socket_path.display(), permissions.mode())));\n\t\t}\n\t}\n\n\tlet listener = UnixListener::bind(socket_path).unwrap();\n\tlog::info!(\"Listening on {}\", socket_path.display());\n\n\tlet mut evt_send = evt_send.clone();\n\tloop {\n\t\tmatch listener.accept().await {\n\t\t\tOk((stream, _)) => {\n\t\t\t\tlet evt_send = evt_send.clone();\n\t\t\t\ttokio::spawn(async move {\n\t\t\t\t\tif let Err(err) = handle_connection(evt_send, stream).await {\n\t\t\t\t\t\tlog::error!(\"Error handling connection: {}\", err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tErr(err) => {\n\t\t\t\tlog::error!(\"Error accepting connection: {}\", err);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 54.614415203051905}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t\tlet listener = match UnixListener::bind(socket_path) {\n\t\tOk(l) => l,\n\t\tErr(e) => {\n\t\t\tlog::error!(\"Failed to bind to socket: {}\", e);\n\t\t\treturn Err(e.into());\n\t\t},\n\t};\n\n\tlog::info!(\"Initialized IPC server at {}\", socket_path.as_ref().display());\n\n\tloop {\n\t\tmatch listener.accept() {\n\t\t\tOk((stream, _)) => {\n\t\t\t\tlet evt_send = evt_send.clone();\n\t\t\t\ttokio::spawn(async move {\n\t\t\t\t\tif let Err(e) = handle_connection(evt_send, stream).await {\n\t\t\t\t\t\tlog::error!(\"Failed to handle connection: {}\", e);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t},\n\t\t\tErr(e) => {\n\t\t\t\tlog::error!(\"Failed to accept connection: {}\", e);\n\t\t\t},\n\t\t}\n\t}\n}", "CodeBleu_score": 57.210045100074616}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t", "CodeBleu_score": 11.710432998417224}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t_\n    let (mut stream_read, mut stream_write) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    log::debug!(\"Received command: {}\", action.command);\n\n    let command = match action.command {\n        opts::Command::Start => app::DaemonCommand::Start,\n        opts::Command::Stop => app::DaemonCommand::Stop,\n        opts::Command::Status => app::DaemonCommand::Status,\n        opts::Command::Restart => app::DaemonCommand::Restart,\n        opts::Command::Update => app::DaemonCommand::Update,\n        opts::Command::Shutdown => app::DaemonCommand::Shutdown,\n    };\n\n    evt_send.send(command).context(\"Failed to send command to event loop\")?;\n\n    match action.command {\n        opts::Command::Shutdown => {\n            log::info!(\"Shutting down daemon\");\n            stream_write.shutdown().await.context(\"Failed to shutdown IPC write stream\")?;\n            return Ok(());\n        },\n        _ => {\n            let response = evt_send.recv().await.context(\"Failed to receive response from event loop\")?;\n            let response = bincode::serialize(&response).context(\"Failed to serialize response\")?;\n            stream_write.write_all(&response).await.context(\"Failed to write response to IPC stream\")?;\n            stream_write.shutdown().await.context(\"Failed to shutdown IPC write stream\")?;\n            return Ok(());\n        },\n    }\n}", "CodeBleu_score": 52.62152176948428}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t_\n    let (mut stream_read, mut stream_write) = stream.split();\n    let action = read_action_from_stream(&mut stream_read).await?;\n    log::info!(\"Received command: {}\", action.action);\n    let response = evt_send.send(action.into()).await.context(\"Failed to send command to event loop\")?;\n    if let Some(response) = response {\n        stream_write.write_all(&bincode::serialize(&response).context(\"Failed to serialize response\")?).await.context(\"Failed to write response\")?;\n    }\n    stream_write.shutdown().await.context(\"Failed to shutdown stream\")?;\n    Ok(())\n}", "CodeBleu_score": 41.01546699343941}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\tlet mut size_buf = [0u8; 4];\n\tstream_read.read_exact(&mut size_buf).await.map_err(Error::IO)?;\n\tlet size = u32::from_le_bytes(size_buf) as usize;\n\tlet mut buf = vec![0u8; size];\n\tstream_read.read_exact(&mut buf).await.map_err(Error::IO)?;\n\tOk(bincode::deserialize(&buf).map_err(Error::Serialization)?)\n}", "CodeBleu_score": 41.89279975040086}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\tlet mut size_buf = [0; 4];\n\tstream_read.read_exact(&mut size_buf).await?;\n\tlet size = u32::from_le_bytes(size_buf);\n\tlet mut buf = vec![0; size as usize];\n\tstream_read.read_exact(&mut buf).await?;\n\tOk(bincode::deserialize(&buf)?)\n}", "CodeBleu_score": 27.730325562548973}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t\t// Read the message size header into a 4-byte array and convert it to an unsigned 32-bit integer.\n\tlet mut size_header = [0u8; 4];\n\tstream_read.read_exact(&mut size_header).await?;\n\tlet message_size = u32::from_le_bytes(size_header);\n\t// Allocate a buffer with the specified capacity and read the message into the buffer in a loop until the full message is received.\n\tlet mut message = vec![0u8; message_size as usize];\n\tlet mut offset = 0;\n\twhile offset < message_size as usize {\n\t\tlet bytes_read = stream_read.read(&mut message[offset..]).await?;\n\t\tif bytes_read == 0 {\n\t\t\treturn Err(Error::new(\n\t\t\t\tErrorKind::UnexpectedEof,\n\t\t\t\t\"Unexpected end of stream.\",\n\t\t\t));\n\t\t}\n\t\toffset += bytes_read;\n\t}\n\t// Deserialize the raw message using bincode and return the result, handling any errors that occur during reading or deserialization.\n\tlet action_with_server: opts::ActionWithServer = bincode::deserialize(&message)?;\n\tOk(action_with_server)\n}", "CodeBleu_score": 49.44865356620884}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet proxy = con.proxy_builder().interface(\"org.freedesktop.DBus.Monitoring\").path(\"/org/freedesktop/DBus\").destination(service).build::<zbus::fdo::Monitoring>();\n\tlet mut stream = proxy.receive_stream();\n\twhile let Some(msg) = stream.next().await {\n\t\tlet msg = msg?;\n\t\tmatch msg.body::<zbus::Message>()? {\n\t\t\tzbus::Message::Signal(s) if s.interface() == \"org.freedesktop.DBus.Monitoring\" && s.member() == \"NameLost\" => {\n\t\t\t\treturn Ok(())\n\t\t\t},\n\t\t\t_ => {},\n\t\t}\n\t}\n\tOk(())\n}", "CodeBleu_score": 47.37927516312315}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet proxy = con.proxy(service, \"/org/freedesktop/DBus\").await?;\n\tlet mut signal = proxy.signal_stream(\n\t\t\"org.freedesktop.DBus\",\n\t\t\"NameOwnerChanged\",\n\t\t&zvariant::signature::parse_str::<(\n\t\t\tString,\n\t\t\tzvariant::OwnedObjectPath,\n\t\t\tzvariant::OwnedObjectPath,\n\t\t)>(\n\t\t\t\"susu\",\n\t\t).unwrap(),\n\t).await?;\n\tlet mut signal_stream = signal.into_stream();\n\twhile let Some(msg) = signal_stream.next().await {\n\t\tlet msg = msg?;\n\t\tlet (name, old_owner, new_owner) = msg.body().unwrap();\n\t\tif name == service.into_static() && new_owner.is_none() {\n\t\t\treturn Ok(());\n\t\t}\n\t}\n\tOk(())\n}", "CodeBleu_score": 49.70631004184673}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t\tlet proxy = con.proxy(service, \"/org/freedesktop/DBus\").await?;\n\tlet mut signals = proxy.signals(None).await?;\n\twhile let Some(signal) = signals.next().await {\n\t\tmatch signal {\n\t\t\tOk(s) => {\n\t\t\t\tif s.member == \"NameLost\" {\n\t\t\t\t\treturn Ok(())\n\t\t\t\t}\n\t\t\t}\n\t\t\tErr(e) => {\n\t\t\t\treturn Err(e)\n\t\t\t}\n\t\t}\n\t}\n\tOk(())\n}", "CodeBleu_score": 45.99881923451366}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow::anyhow!(\"Unsupported format: {}\", format)),\n\t}\n}", "CodeBleu_score": 65.43805202611243}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow::Error::msg(format!(\"unsupported export format: {}\", format))),\n\t}\n}", "CodeBleu_score": 65.79632543280714}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t\tmatch format {\n\t\t\"svg\" => Ok(DocExportFormat::Svg),\n\t\t\"xopp\" => Ok(DocExportFormat::Xopp),\n\t\t\"pdf\" => Ok(DocExportFormat::Pdf),\n\t\t_ => Err(anyhow!(\"Unsupported export format: {}\", format)),\n\t}\n}", "CodeBleu_score": 65.15364038740961}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t\tpath_is_file(path)?;\n\tlet ext = path.extension().unwrap().to_str().unwrap();\n\tif ext != expected_ext {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\".{}\\\", found \\\".{}\\\" at path \\\"{}\\\"\",\n\t\t\texpected_ext,\n\t\t\text,\n\t\t\tpath.display()\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 32.02013614153137}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t\tpath_is_file(path)?;\n\tif let Some(ext) = path.extension() {\n\t\tif ext != expected_ext {\n\t\t\treturn Err(anyhow::anyhow!(\n\t\t\t\t\"Expected file with extension \\\".{}\\\", found file \\\"{}\\\" with extension \\\".{}\\\"\",\n\t\t\t\texpected_ext,\n\t\t\t\tpath.display(),\n\t\t\t\text.to_string_lossy(),\n\t\t\t));\n\t\t}\n\t} else {\n\t\treturn Err(anyhow::anyhow!(\n\t\t\t\"Expected file with extension \\\".{}\\\", found file \\\"{}\\\" without extension\",\n\t\t\texpected_ext,\n\t\t\tpath.display(),\n\t\t));\n\t}\n\tOk(())\n}", "CodeBleu_score": 43.961164525176564}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t\tpath_is_file(path)?;\n    let path_ext = path.extension();\n    if path_ext.is_none() {\n        return Err(anyhow::anyhow!(\n            \"Expected file with extension \\\"{}\\\", found file without extension \\\"{}\\\"\",\n            expected_ext,\n            path.display()\n        ));\n    }\n    let path_ext = path_ext.unwrap();\n    if path_ext != expected_ext {\n        return Err(anyhow::anyhow!(\n            \"Expected file with extension \\\"{}\\\", found file with extension \\\"{}\\\"\",\n            expected_ext,\n            path_ext.to_str().unwrap()\n        ));\n    }\n    Ok(())\n}", "CodeBleu_score": 52.48045542873737}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tlabel_.set_name(name_);\n\tlabel_.set_id(id);\n\tlabel_.set_format(config[\"format\"]);\n\tlabel_.set_interval(config[\"interval\"]);\n\tlabel_.set_status(config[\"status\"]);\n\tlabel_.set_tooltip(config[\"tooltip\"]);\n\n\tthread_ = [this] {\n\t\twhile (true) {\n\t\t\tauto usage = get_cpu_usage();\n\t\t\tlabel_.set_text(usage);\n\t\t\tlabel_.emit();\n\t\t\tstd::this_thread::sleep_for(std::chrono::seconds(label_.interval()));\n\t\t}\n\t};\n}", "CodeBleu_score": 52.418433263325696}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tlabel_.reset(new ALabel(id, config));\n\tthread_ = [this] {\n\t\twhile (true) {\n\t\t\tauto cpu = CpuUsage::getCpuUsage();\n\t\t\tlabel_->set_text(fmt::format(\"{0:.2f}%\", cpu));\n\t\t\tlabel_->update();\n\t\t\tstd::this_thread::sleep_for(std::chrono::seconds(this->interval_));\n\t\t}\n\t};\n}", "CodeBleu_score": 52.39663476267188}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t\tlabel_.set_name(name_);\n\tlabel_.set_id(id);\n\tlabel_.set_format(format_);\n\tlabel_.set_interval(std::chrono::seconds(interval_));\n\tlabel_.set_label(get_label());\n\n\tthread_ = [this] {\n\t\twhile (true) {\n\t\t\tauto data = get_data();\n\t\t\tlabel_.set_label(get_label(data));\n\t\t\tlabel_.emit();\n\t\t\tstd::this_thread::sleep_for(std::chrono::seconds(interval_));\n\t\t}\n\t};\n}", "CodeBleu_score": 50.80455393238286}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = (Tags *)data;\n\tif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n\t\ttags->status_manager_ = (struct zdwl_ipc_manager_v2 *)wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, version);\n\t} else if (strcmp(interface, wl_seat_interface.name) == 0) {\n\t\ttags->seat_ = (struct wl_seat *)wl_registry_bind(registry, name, &wl_seat_interface, 1);\n\t}\n}", "CodeBleu_score": 51.51191801654132}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tTags *tags = (Tags *)data;\n\n\tif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0)  {\n\t\ttags->status_manager_ = (struct zdwl_ipc_manager_v2 *)wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, version);\n\t}\n\telse if (strcmp(interface, wl_seat_interface.name) == 0)  {\n\t\ttags->seat_ = (struct wl_seat *)wl_registry_bind(registry, name, &wl_seat_interface, 1);\n\t}\n}", "CodeBleu_score": 51.53396728094671}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t\tstruct zdwl_ipc_manager_v2 *manager = data;\n\tif (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0)  {\n\t\tmanager->status_manager_ = wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, version);\n\t}\n\tif (strcmp(interface, wl_seat_interface.name) == 0)  {\n\t\tmanager->seat_ = wl_registry_bind(registry, name, &wl_seat_interface, 1);\n\t}\n}", "CodeBleu_score": 47.08900886833559}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::string request;\n\tstd::string event;\n\tstd::string params;\n\tstd::string delimiter;\n\tstd::vector<std::string> tokens;\n\tstd::vector<std::string> paramsTokens;\n\tstd::vector<std::string> eventTokens;\n\n\t// extract the request type from the event string\n\trequest = ev.substr(0, ev.find('>'));\n\n\t// acquire a unique lock on the callback mutex to ensure thread safety\n\tstd::lock_guard<std::mutex> lock(callbackMutex);\n\n\t// iterate through registered callbacks and invoke the handler's onEvent method if the event name matches the extracted request type\n\tfor (auto handler : handlers) {\n\t\t// extract the event name from the handler's event string\n\t\tevent = handler.getEvent();\n\n\t\t// extract the event name from the handler's event string\n\t\tdelimiter = handler.getDelimiter();\n\n\t\t// split the event string into tokens\n\t\ttokens = split(event, delimiter);\n\n\t\t// split the event string into tokens\n\t\tparams = handler.getParams();\n\n\t\t// split the event string into tokens\n\t\tparamsTokens = split(params, delimiter);\n\n\t\t// split the event string into tokens\n\t\teventTokens = split(ev, delimiter);\n\n\t\t// if the extracted request type matches the event name\n\t\tif (request == tokens[0]) {\n\t\t\t// if the number of tokens in the extracted event string matches the number of tokens in the event string of the handler\n\t\t\tif (eventTokens.size() == tokens.size()) {\n\t\t\t\t// if the number of tokens in the extracted event string matches the number of tokens in the event string of the handler\n\t\t\t\tif (paramsTokens.size() == tokens.size()) {\n\t\t\t\t\t// invoke the handler's onEvent method\n\t\t\t\t\thandler.onEvent(ev);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 48.87180392373524}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::unique_lock<std::mutex> lk(callbackMutex);\n\tstd::size_t pos = ev.find(\">\");\n\tif (pos == std::string::npos) {\n\t\tstd::cerr << \"Invalid IPC event: \" << ev << std::endl;\n\t\treturn;\n\t}\n\tstd::string requestType = ev.substr(0, pos);\n\tfor (auto it = callbacks.begin(); it != callbacks.end(); it++) {\n\t\tif (it->first == requestType) {\n\t\t\tit->second->onEvent(ev.substr(pos + 1));\n\t\t}\n\t}\n}", "CodeBleu_score": 46.404569169216046}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t\tstd::string request;\n\tstd::string data;\n\n\tstd::string::size_type pos = ev.find(\">\");\n\tif (pos != std::string::npos) {\n\t\trequest = ev.substr(0, pos);\n\t\tdata = ev.substr(pos+1, ev.length());\n\t}\n\n\tif (request.length() > 0) {\n\t\tstd::lock_guard<std::mutex> lock(callbackMutex);\n\t\tfor (auto const& cb : callbacks) {\n\t\t\tif (request == cb.first) {\n\t\t\t\tcb.second->onEvent(data);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.20928434051665}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == NULL) {\n\t\treturn;\n\t}\n\n\t// Acquire the callback mutex.\n\tboost::unique_lock<boost::mutex> lock(callback_mutex);\n\n\t// Iterate through the callbacks and remove any that match the provided event handler.\n\tfor (std::vector<Callback>::iterator it = callbacks.begin(); it != callbacks.end(); ++it) {\n\t\tif (it->ev_handler == ev_handler) {\n\t\t\tcallbacks.erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 51.99347539746011}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == nullptr) {\n\t\treturn;\n\t}\n\n\tstd::lock_guard<std::mutex> lk(callback_mutex);\n\tfor (auto it = callbacks.begin(); it != callbacks.end();) {\n\t\tif (it->second == ev_handler) {\n\t\t\tit = callbacks.erase(it);\n\t\t} else {\n\t\t\t++it;\n\t\t}\n\t}\n}", "CodeBleu_score": 62.88375651774293}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t\tif (ev_handler == NULL) return;\n\tstd::unique_lock<std::mutex> lck(callback_mutex);\n\tfor (auto it = callbacks.begin(); it != callbacks.end(); ++it) {\n\t\tif (it->first == ev_handler) {\n\t\t\tcallbacks.erase(it);\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 52.50459682766989}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config.isMember(\"always-on\")) {\n\t\talways_on_ = config[\"always-on\"].asBool();\n\t}\n\tif (config.isMember(\"default-submap\")) {\n\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t}\n}", "CodeBleu_score": 36.734849632326586}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (!config.isMember(\"always-on\")) {\n\t\tthrow std::runtime_error(\"Submap: missing \\\"always-on\\\" key in configuration file!\");\n\t}\n\tif (!config[\"always-on\"].isBool()) {\n\t\tthrow std::runtime_error(\"Submap: \\\"always-on\\\" key in configuration file is not a boolean!\");\n\t}\n\talways_on_ = config[\"always-on\"].asBool();\n\n\tif (config.isMember(\"default-submap\")) {\n\t\tif (!config[\"default-submap\"].isString()) {\n\t\t\tthrow std::runtime_error(\"Submap: \\\"default-submap\\\" key in configuration file is not a string!\");\n\t\t}\n\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t}\n}", "CodeBleu_score": 40.25767554510201}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t\tif (config.isMember(\"always-on\")) {\n\t\tif (config[\"always-on\"].isBool()) {\n\t\t\talways_on_ = config[\"always-on\"].asBool();\n\t\t}\n\t}\n\tif (config.isMember(\"default-submap\")) {\n\t\tif (config[\"default-submap\"].isString()) {\n\t\t\tdefault_submap_ = config[\"default-submap\"].asString();\n\t\t}\n\t}\n}", "CodeBleu_score": 38.91852621499031}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (type == Repr) {\n\t\treturn repr_string;\n\t} else if (type == ClassAndTitle) {\n\t\tstd::string class_name = workspace_manager.getWindowClass(window_id);\n\t\tstd::string title = workspace_manager.getWindowTitle(window_id);\n\t\treturn class_name + \" \" + title;\n\t} else {\n\t\tthrow std::runtime_error(\"WindowCreationPayload::repr called on a non-Repr window\");\n\t}\n}", "CodeBleu_score": 38.40647058944814}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (this->type == Repr) {\n\t\treturn this->repr_str;\n\t} else if (this->type == ClassAndTitle) {\n\t\tauto window = workspace_manager.getWindow(this->window_class, this->window_title);\n\t\tif (window) {\n\t\t\treturn window->repr(workspace_manager);\n\t\t} else {\n\t\t\tthrow std::runtime_error(\"Window not found\");\n\t\t}\n\t} else {\n\t\tthrow std::runtime_error(\"Invalid window creation payload type\");\n\t}\n}", "CodeBleu_score": 37.80343132394904}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t\tif (type == Repr) {\n\t\treturn repr_str;\n\t}\n\telse if (type == ClassAndTitle) {\n\t\tauto class_and_title = workspace_manager.get_class_and_title(window_id);\n\t\tif (class_and_title.has_value()) {\n\t\t\treturn fmt::format(\"{}\", class_and_title->title);\n\t\t}\n\t\telse {\n\t\t\tthrow std::runtime_error(\"Could not find window class and title for window with id: \" + std::to_string(window_id));\n\t\t}\n\t}\n\telse {\n\t\tthrow std::runtime_error(\"WindowCreationPayload::repr() called on a WindowCreationPayload with an unknown type: \" + std::to_string(type));\n\t}\n}", "CodeBleu_score": 40.93068272882384}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\t\tif (m_workspacesToCreate.empty()) {\n\t\treturn;\n\t}\n\n\tJson::Value clientsData = Json::arrayValue;\n\tfor (auto &client : m_clients) {\n\t\tclientsData.append(client->toJson());\n\t}\n\n\tfor (auto &workspace : m_workspacesToCreate) {\n\t\tcreateWorkspace(workspace, clientsData);\n\t}\n\tm_workspacesToCreate.clear();\n\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 55.02757381481399}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t\tfor (auto &workspace : m_workspacesToCreate) {\n\t\tcreateWorkspace(workspace.second, workspace.first);\n\t}\n\tm_workspacesToCreate.clear();\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 43.49542846079045}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t\tspdlog::debug(\"createWorkspacesToCreate\");\n\tstd::vector<Json::Value> workspacesToCreate;\n\tfor (auto &workspace : m_workspacesToCreate) {\n\t\tworkspacesToCreate.emplace_back(workspace.second);\n\t}\n\tm_workspacesToCreate.clear();\n\tfor (auto &workspace : workspacesToCreate) {\n\t\tcreateWorkspace(workspace, m_clientsToCreate);\n\t}\n\tupdateWindowCount();\n\tsortWorkspaces();\n}", "CodeBleu_score": 55.566431313576594}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\n\tif (mpris == nullptr) {\n\t\treturn;\n\t}\n\n\tauto player = mpris->getPlayer();\n\n\tif (player == nullptr) {\n\t\treturn;\n\t}\n\n\tif (player_name == nullptr) {\n\t\treturn;\n\t}\n\n\tauto name = player_name->getName();\n\n\tif (name == nullptr) {\n\t\treturn;\n\t}\n\n\tif (name != player->name) {\n\t\treturn;\n\t}\n\n\tplayer = nullptr;\n\n\tmpris->hideEventBox();\n\n\tmpris->emitUpdate();\n}", "CodeBleu_score": 49.89751178034689}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris == nullptr || !mpris->isValid()) {\n\t\treturn;\n\t}\n\tg_debug(\"Name vanished: %s\", player_name->name);\n\tif (g_strcmp0(mpris->getPlayerName(), player_name->name) == 0) {\n\t\tmpris->setPlayer(nullptr);\n\t\tmpris->hideEventBox();\n\t\tmpris->emit(\"update\");\n\t}\n}", "CodeBleu_score": 57.35856382278246}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris) {\n\t\tif (player_name == mpris->player_name) {\n\t\t\tmpris->player = nullptr;\n\t\t\tmpris->event_box.hide();\n\t\t\tmpris->emit_update();\n\t\t}\n\t}\n}", "CodeBleu_score": 56.421308362190224}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris->is_valid) {\n\t\tLogger::debug(\"Player pause\");\n\t\tmpris->dp.emit(\"pause\");\n\t}\n}", "CodeBleu_score": 61.94368019090144}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris->dp) {\n\t\tmpris->log.debug(\"Player paused\");\n\t\tmpris->dp->update();\n\t}\n}", "CodeBleu_score": 61.87843499294221}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t\tauto mpris = static_cast<Mpris*>(data);\n\tif (mpris->mpris) {\n\t\tg_debug(\"Player %s paused\", mpris->mpris->get_identity().c_str());\n\t\tmpris->dp.emit(\"pause\");\n\t}\n}", "CodeBleu_score": 60.20169264197559}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tspdlog::info(\"initial config for {}: {}\", bar_.bar_id, res.payload);\n\tif (!res.success) {\n\t\tthrow std::runtime_error(\"Could not get initial config for bar \" + bar_.bar_id + \": \" + res.error);\n\t}\n\tbar_config_ = parseConfig(res.payload);\n\tonConfigUpdate(bar_config_);\n}", "CodeBleu_score": 32.49393765066287}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t\tauto payload = res.payload;\n\tif (auto success = payload[\"success\"]; success.isBool() && success.asBool()) {\n\t\tbar_config_ = parseConfig(payload);\n\t\tonConfigUpdate(bar_config_);\n\t} else {\n\t\tstd::string err = \"failed to get bar config: \";\n\t\tif (auto errmsg = payload[\"error\"]; errmsg.isString()) {\n\t\t\terr += errmsg.asString();\n\t\t} else {\n\t\t\terr += \"unknown error\";\n\t\t}\n\t\tthrow std::runtime_error(err);\n\t}\n}", "CodeBleu_score": 57.30395433993838}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\tif (!res.success) {\n  throw std::runtime_error(res.payload[\"error\"].asString());\n}\nbar_config_ = parseConfig(res.payload[\"config\"]);\nonConfigUpdate(bar_config_);\n}", "CodeBleu_score": 27.08232028284477}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(this->hooks_ != nullptr);\n\tif (!name.empty()) {\n\t\tthis->hooks_->doAction(this, name.c_str());\n\t}\n}", "CodeBleu_score": 60.40930225974158}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(hooks_);\n\tif (name.length() > 0)\n\t\thooks_->doAction(this, name.c_str());\n}", "CodeBleu_score": 48.37425521264155}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t\tassert(this->hooks_ != nullptr);\n\tif (!name.empty()) {\n\t\tthis->hooks_->doAction(this, name.c_str());\n\t}\n}", "CodeBleu_score": 60.40930225974158}]}
