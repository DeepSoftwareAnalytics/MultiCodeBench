{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t# Get the attachment IDs from the HTTP request arguments.\n    attachment_ids = [int(id) for id in args.get('ids', [])]\n    # Verify that the user has read access rights for the attachments.\n    if not all(self.env['ir.attachment'].browse(attachment_ids).check_access_rights('read', raise_exception=False)):\n        raise AccessError(_(\"You do not have access to the attachment(s) you requested.\"))\n    # Build a zip file from the attachments' content.\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w') as zip_file:\n        for attachment in self.env['ir.attachment'].browse(attachment_ids):\n            # Verify that the user has read access rights for the attachment's content.\n            if not attachment.check_access_rule('read'):\n                raise AccessError(_(\"You do not have access to the attachment(s) you requested.\"))\n            # Add the attachment's content to the zip file.\n            zip_file.writestr(attachment.name, attachment.datas)\n    # Prepare HTTP headers for the zip file.\n    headers = _get_zip_headers(zip_content.getvalue(), 'attachments.zip')\n    # Return the zip file as an HTTP response.\n    return request.make_response(zip_content.getvalue(), headers=headers)", "CodeBleu_score": 34.590610265299475}, {"code": "def export_zip_documents(self, **args)\n\tattachments = self.env['ir.attachment'].browse(self.env.context.get('attachment_ids'))\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.name, attachment.datas)\n    zip_content.seek(0)\n    return request.make_response(zip_content.read(), headers=_get_zip_headers(zip_content.getvalue(), 'attachments.zip'))", "CodeBleu_score": 30.55367839480639}, {"code": "def export_zip_documents(self, **args)\n\tattachment_ids = [int(x) for x in args.get('ids', '').split(',') if x]\n    if not attachment_ids:\n        raise werkzeug.exceptions.NotFound()\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    if not attachments:\n        raise werkzeug.exceptions.NotFound()\n    if not attachments.check_access_rights('read'):\n        raise werkzeug.exceptions.Forbidden()\n    if not attachments.check_access_rule('read'):\n        raise werkzeug.exceptions.Forbidden()\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for attachment in attachments:\n            attachment_data = base64.b64decode(attachment.datas)\n            zip_file.writestr(attachment.name, attachment_data)\n    return request.make_response(zip_content.getvalue(), headers=_get_zip_headers(zip_content.getvalue(), 'attachments.zip'))\n\n", "CodeBleu_score": 29.10817353681605}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values", "CodeBleu_score": 82.86007383787236}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values", "CodeBleu_score": 82.86007383787236}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    values['invoices']._origin = request.session.get('history_invoice_ids') or []\n    request.session['history_invoice_ids'] = [invoice.id for invoice in values['invoices']]\n    return request.render(\"portal_my_invoices.portal_my_invoices_listing\", values)", "CodeBleu_score": 44.25048898905592}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby, **kw)\n    # update session history\n    invoice_ids = values['invoices'](0)\n    if invoice_ids:\n        self._set_session_history(invoice_ids)\n    return request.render(\"account.portal_my_invoices\", values)", "CodeBleu_score": 33.5687192661557}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    # update the session history with the latest invoice IDs\n    self._update_history_with_invoice_ids(values['invoices'])\n    return request.render(\"portal_my_invoices\", values)", "CodeBleu_score": 28.012127092579043}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.invoice'].browse(invoice_id)\n    if not invoice.access_my_invoices():\n        return request.redirect(\"/my\")\n    if download and invoice.state == 'posted':\n        if report_type == 'html':\n            report_type = 'qweb-html'\n        elif report_type == 'text':\n            report_type = 'qweb-text'\n        return request.env['report'].render_qweb_pdf(\n            [invoice.invoice_document_ids],\n            report_type=report_type,\n            header_file=invoice.invoice_document_ids.filtered(lambda x: x.report_name == 'invoice_header').report_name,\n            footer_file=invoice.invoice_document_ids.filtered(lambda x: x.report_name == 'invoice_footer').report_name,\n        )\n    if report_type:\n        if report_type == 'html':\n            report_type = 'qweb-html'\n        elif report_type == 'text':\n            report_type = 'qweb-text'\n        return request.env['report'].render_qweb_pdf(\n            [invoice],\n            report_type=report_type,\n            header_file=invoice.invoice_document_ids.filtered(lambda x: x.report_name == 'invoice_header').report_name,\n            footer_file=invoice.invoice_document_ids.filtered(lambda x: x.report_name == 'invoice_footer').report_name,\n        )\n    return request.render(\"account.portal_my_invoice_detail\", request.env[\"ir.http\"]._invoice_get_page_view_values(invoice, access_token, **kw))\n\n\n\n", "CodeBleu_score": 31.186576722926034}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].browse(invoice_id)\n\n    if invoice.type in ('out_invoice', 'out_refund'):\n        action = 'account.action_move_out_invoice'\n    elif invoice.type in ('in_invoice', 'in_refund'):\n        action = 'account.action_move_in_invoice'\n    else:\n        raise werkzeug.exceptions.NotFound()\n\n    if not request.env['ir.model.access'].check(action, invoice.ids, request.env.user.id, request.env):\n        return request.redirect('/my')\n\n    if download:\n        if report_type == 'html':\n            return request.redirect('/my/invoice/%s?report_type=html' % invoice.id)\n        if report_type == 'text':\n            return request.redirect('/my/invoice/%s?report_type=text' % invoice.id)\n        if report_type == 'pdf':\n            # retrieve legal documents\n            legal_documents = request.env['account.move.line'].search([('invoice_id', '=', invoice.id), ('account_id.internal_type', '=', 'receivable'), ('account_id.reconcile', '=', True)], order=\"sequence\")\n            # create a zip file if there are multiple attachments\n            if len(legal_documents) > 1:\n                zip_file = tempfile.NamedTemporaryFile(delete=False)\n                with zipfile.ZipFile(zip_file.name, 'w') as zf:\n                    for legal_document in legal_documents:\n                        zf.write(legal_document.attachment_id.store_fname, os.path.basename(legal_document.attachment_id.store_fname))\n                zip_file.close()\n                return request.make_response(\n                    request.env['ir.http'].send_file(zip_file.name, filename='%s.zip' % invoice.name, as_attachment=True),\n                    headers={'Content-Type': 'application", "CodeBleu_score": 37.3857945249663}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].browse(invoice_id)\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n\n    if invoice.state == 'draft':\n        raise werkzeug.exceptions.NotFound()\n\n    if invoice.type != 'out_invoice':\n        raise werkzeug.exceptions.NotFound()\n\n    if not invoice.partner_id:\n        raise werkzeug.exceptions.NotFound()\n\n    if invoice.partner_id.id != request.env.user.partner_id.id:\n        raise werkzeug.exceptions.NotFound()\n\n    if not invoice.company_id.portal_url:\n        raise werkzeug.exceptions.NotFound()\n\n    if not request.env.user.has_group('account.group_account_invoice'):\n        raise werkzeug.exceptions.NotFound()\n\n    if invoice.state == 'paid':\n        if not request.env.user.has_group('account.group_account_invoice'):\n            raise werkzeug.exceptions.NotFound()\n\n    if download:\n        return self._invoice_get_report(invoice, report_type, access_token)\n    else:\n        return request.render('portal_my_invoices.portal_my_invoice_detail', self._invoice_get_page_view_values(invoice, access_token))\n\n\n\n", "CodeBleu_score": 26.77126052431838}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\tself.ensure_one()\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = [('company_id', '=', self.id)]\n    products = self.env['product.template'].search(domain)\n    if company:\n        for product in products:\n            if company.account_sale_tax_id:\n                product.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n            if company.account_purchase_tax_id:\n                product.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n    return products\n\n", "CodeBleu_score": 32.188059175710634}, {"code": "def _get_demo_data_products(self, company=False)\n\t# 1. Get all product templates that are related to the company's domain\n    # 2. Update the sale taxes for these products if the company's account_sale_tax_id is set\n    # 3. Update the purchase taxes if the company's account_purchase_tax_id is set\n    # 4. Return the product templates\n\n    # 1. Get all product templates that are related to the company's domain\n    # ------------------------------------------------------------------------------------------------------------------\n    # Get the company's domain\n    if company:\n        domain = company.domain\n    else:\n        domain = self.env.user.company_id.domain\n\n    # Get all product templates that are related to the company's domain\n    product_templates = self.env['product.template'].search([('domain', '=', domain)])\n\n    # 2. Update the sale taxes for these products if the company's account_sale_tax_id is set\n    # ------------------------------------------------------------------------------------------------------------------\n    # Get the company's account_sale_tax_id\n    if company:\n        account_sale_tax_id = company.account_sale_tax_id\n    else:\n        account_sale_tax_id = self.env.user.company_id.account_sale_tax_id\n\n    # Update the sale taxes for these products if the company's account_sale_tax_id is set\n    if account_sale_tax_id:\n        for product in product_templates:\n            product.sale_tax_id = account_sale_tax_id\n\n    # 3. Update the purchase taxes if the company's account_purchase_tax_id is set\n    # ------------------------------------------------------------------------------------------------------------------\n    # Get the company's account_purchase_tax_id\n    if company:\n        account_purchase_tax_id = company.account_purchase_tax_id\n    else:\n        account_purchase_tax_id = self.env.user.company_id.account_purchase_tax_id\n\n    # Update the purchase taxes if the company's account_", "CodeBleu_score": 36.206237740822736}, {"code": "def _get_demo_data_products(self, company=False)\n\t# Get all product templates\n    products = self.env['product.template'].search([('company_id', '=', self.env.user.company_id.id)])\n    # Update sale taxes\n    if company:\n        if company.account_sale_tax_id:\n            products.write({'taxes_id': [(4, company.account_sale_tax_id.id, False)]})\n    # Update purchase taxes\n    if company:\n        if company.account_purchase_tax_id:\n            products.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id, False)]})\n\n", "CodeBleu_score": 21.753009871188684}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\tself.ensure_one()\n    if not xml_id:\n        return False\n    # Try to find the account using the xml_id\n    demo_account = self.env[\"account.account\"].search([(\"company_id\", \"=\", company.id), (\"xml_id\", \"=\", xml_id)])\n    if not demo_account:\n        # Try to find the account using the account_type\n        demo_account = self.env[\"account.account\"].search(\n            [(\"company_id\", \"=\", company.id), (\"user_type_id\", \"=\", account_type)]\n        )\n    if not demo_account:\n        # Return the first account in the company's domain\n        demo_account = self.env[\"account.account\"].search([(\"company_id\", \"=\", company.id)], limit=1)\n    return demo_account\n\n", "CodeBleu_score": 43.01735741936083}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t# Check if the account exists in the 'ir.model.data' model.\n    account_id = self.env['ir.model.data']._get_id(company, 'account.account', xml_id)\n    if account_id:\n        return self.browse(account_id)\n\n    # Check if the account exists in the company's domain.\n    account_domain = [('company_id', '=', company.id), ('type', '=', account_type)]\n    account = self.search(account_domain, limit=1)\n    if account:\n        return account\n\n    # If not found, return the first account within the company's domain.\n    return self.search(company.domain, limit=1)\n\n", "CodeBleu_score": 37.29358628167925}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\taccount = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 45.41009268582749}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts_of_this_type = self.filter(\n        account_type=AccountType.objects.get(name=\"Current Year Earnings\")\n    ).values(\"company\").annotate(count=Count(\"company\"))\n    for account in accounts_of_this_type:\n        if account[\"count\"] > 1:\n            raise ValidationError(\n                \"There can be only one account with the 'Current Year Earnings' type for each company.\"\n            )\n\n", "CodeBleu_score": 25.837416170398207}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts_with_type_current_year_earning = self.env['account.account'].search([('company_id', '=', self.company_id.id), ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id)])\n    if len(accounts_with_type_current_year_earning) > 1:\n        raise ValidationError(_('There can be only one account with the \"Current Year Earnings\" type for each company.'))\n", "CodeBleu_score": 21.196564891379698}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self.env['account.account'].search([\n        ('company_id', 'in', self.env.user.company_ids.ids),\n        ('user_type_id', '=', self.env.ref('account.data_account_type_current_year_earnings').id),\n        ('deprecated', '=', False),\n    ])\n    if len(accounts) > 0:\n        accounts_by_company = {}\n        for account in accounts:\n            accounts_by_company.setdefault(account.company_id, []).append(account)\n        for company, accounts in accounts_by_company.items():\n            if len(accounts) > 1:\n                raise ValidationError(_('There should be only one account with the \"Current Year Earnings\" type for each company. Please remove the extra accounts for the company %s.') % company.name)\n", "CodeBleu_score": 22.661873408551095}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif name:\n        search_domain = [('name', operator, name)]\n    else:\n        search_domain = []\n    if domain:\n        search_domain += domain\n    if not name and self.env.context.get('partner_id') and self.env.context.get('search_default_partner_id'):\n        search_domain += [('partner_id', '=', self.env.context.get('partner_id'))]\n        order = order or 'frequency desc'\n    return self.search(search_domain, limit=limit, order=order)\n\n", "CodeBleu_score": 33.36419262866896}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif name:\n        if domain is None:\n            domain = []\n        if operator == 'ilike' and not name.startswith('%'):\n            name = '%' + name\n        if operator == 'not ilike' and not name.startswith('%'):\n            name = '%' + name\n        if operator == 'ilike' and not name.endswith('%'):\n            name += '%'\n        if operator == 'not ilike' and not name.endswith('%'):\n            name += '%'\n        domain = [('name', operator, name)] + domain\n    if not domain:\n        if self._context.get('partner_id'):\n            domain = [('partner_id', '=', self._context['partner_id'])]\n            order = 'frequency desc'\n        else:\n            domain = [('id', '=', False)]\n    return self.search(domain, limit=limit, order=order)", "CodeBleu_score": 41.27951656571167}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name:\n        if self.env.context.get('partner_id') and self.env.context.get('product_id'):\n            # search for most frequently used accounts for a given partner and product\n            # (e.g. to display them in the product form view)\n            # the search is based on the number of invoices in which the account was used\n            # for the given partner and product\n            # the search is ordered by the number of invoices, descending\n            # the limit is set to 10 by default\n            # the search is performed on the account's product_id field\n            # (to avoid a huge search, only the accounts of the given product are searched)\n            # the search is performed on the account's partner_id field\n            # (to avoid a huge search, only the accounts of the given partner are searched)\n            # the search is performed on the account's company_id field\n            # (to avoid a huge search, only the accounts of the current company are searched)\n            # the search is performed on the account's active field\n            # (to avoid a huge search, only active accounts are searched)\n            # the search is performed on the account's type field\n            # (to avoid a huge search, only accounts of the given type are searched)\n            # the search is performed on the account's customer field\n            # (to avoid a huge search, only accounts of the given customer are searched)\n            # the search is performed on the account's supplier field\n            # (to avoid a huge search, only accounts of the given supplier are searched)\n            # the search is performed on the account's bank_account_id field\n            # (to avoid a huge search, only accounts of the given bank account are searched)\n            # the search is performed on the account's currency_id field\n            # (to avoid a huge search, only accounts of the given currency are searched)\n            # the search is performed on the account's user_type_id field\n            # (to avoid a huge search, only accounts of the given user type are searched)\n            # the search is performed on the account's tax_ids field\n            # (to avoid a huge search, only accounts of the given taxes are searched)", "CodeBleu_score": 15.002648708407223}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}, {"code": "def copy_translations(self, new, excluded=())\n\tsuper().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.27732296095304}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\trecord = self.env.context.get('active_id', False)\n    if not record:\n        return False\n    self.ensure_one()\n    move_ids = self.env['account.move.line'].search([('sale_id', '=', record.id), ('account_id.internal_type', '=', 'receivable')])\n    if not move_ids:\n        return False\n    move_ids = move_ids.mapped('move_id')\n    if not move_ids:\n        return False\n    return {\n        'name': _('Invoices'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'domain': [('id', 'in', move_ids.ids)],\n        'context': {\n            'search_default_sale_id': record.id,\n            'search_default_analytic_account_id': record.analytic_account_id.id,\n            'search_default_journal_id': record.journal_id.id,\n            'search_default_partner_id': record.partner_id.id,\n            'search_default_invoice_date': record.date_order,\n            'search_default_invoice_date_range': [record.date_order, record.date_order],\n            'search_default_type': 'out_invoice',\n            'search_default_invoice_origin': record.name,\n            'search_default_invoice_payment_term_id': record.invoice_payment_term_id.id,\n            'search_default_invoice_user_id': record.user_id.id,\n            'search_default_invoice_payment_mode_id': record.invoice_payment_mode_id.id,\n            'search_default_invoice_payment_ref': record.invoice_payment_ref,\n            'search_default_invoice_partner_bank_id': record.invoice_partner_bank_id.id,\n            'search_default_invoice_partner_", "CodeBleu_score": 31.95887585277975}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_tree').read()[0]\n    action['domain'] = [('id', 'in', self.env['account.move.line'].search(\n        [('sale_id', '=', self.id), ('account_id.internal_type', 'in', ['receivable', 'payable'])]).mapped('move_id').ids)]\n    action['context'] = {\n        'search_default_sale_id': self.id,\n        'search_default_analytic_account_id': self.analytic_account_id.id,\n        'default_type': 'out_invoice',\n        'default_journal_id': self.journal_id.id,\n        'default_invoice_date': self.date_order,\n        'default_partner_id': self.partner_id.id,\n        'default_partner_invoice_id': self.partner_invoice_id.id,\n        'default_invoice_payment_term_id': self.invoice_payment_term_id.id,\n        'default_fiscal_position_id': self.fiscal_position_id.id,\n        'default_invoice_origin': self.name,\n        'default_currency_id': self.currency_id.id,\n        'default_company_id': self.company_id.id,\n        'default_user_id': self.user_id.id,\n        'default_invoice_line_tax_ids': [(6, 0, self.invoice_line_tax_ids.ids)],\n        'default_ref': self.name,\n        'default_account_id': self.partner_id.property_account_receivable_id.id,\n        'default_tax_ids': [(6, 0, self.tax_id.ids)],\n        'default_invoice_line_ids': [(6, 0, self.invoice_line_ids.ids)],\n        'default_invoice_line_tax_ids': [(", "CodeBleu_score": 32.41225628893167}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    move_lines = self.env['account.move.line']\n    if self.sale_order_ids:\n        move_lines |= self.sale_order_ids.mapped('invoice_ids.invoice_line_ids')\n    if self.sale_line_ids:\n        move_lines |= self.sale_line_ids.mapped('invoice_lines')\n    if move_lines:\n        domain = [('id', 'in', move_lines.ids)]\n        if self.analytic_account_id:\n            domain.append(('analytic_account_id', '=', self.analytic_account_id.id))\n        return {\n            'name': _('Invoices'),\n            'view_mode': 'tree,form',\n            'res_model': 'account.move',\n            'domain': domain,\n            'context': {'default_type': 'out_invoice', 'default_partner_id': self.id},\n            'type': 'ir.actions.act_window',\n        }\n    return False\n\n\n\n\n", "CodeBleu_score": 32.82327814099845}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    action = {\n        'type': 'ir.actions.act_window',\n        'name': _('Vendor Bills'),\n        'res_model': 'account.move',\n        'view_mode': 'tree,form',\n        'domain': [('type', '=', 'in_invoice'), ('invoice_ids', '=', self.id)],\n        'context': {'default_type': 'in_invoice', 'default_invoice_ids': self.id, 'create': False},\n    }\n    return action\n", "CodeBleu_score": 18.502874363732136}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('move_id', 'in', self.env['account.move.line'].search([('account_id.internal_type', '=', 'payable'), ('purchase_id', '=', self.id)]).mapped('move_id').ids)]\n    action['context'] = {'default_move_type': 'in_invoice', 'default_journal_id': self.env['account.journal'].search([('type', '=', 'purchase'), ('company_id', '=', self.company_id.id)], limit=1).id, 'default_purchase_id': self.id}\n    return action\n\n\n", "CodeBleu_score": 36.47191365225246}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    action = self.env.ref('purchase.action_purchase_order').read()[0]\n    action['domain'] = [('id', 'in', self.mapped('move_ids').ids)]\n    action['context'] = {\n        'default_type': 'in_invoice',\n        'default_purchase_id': self.id,\n        'default_purchase_id_display': self.name,\n        'default_partner_id': self.partner_id.id,\n        'default_partner_id_display': self.partner_id.name,\n        'default_move_type': 'in_invoice',\n        'default_origin': self.name,\n        'default_company_id': self.company_id.id,\n        'default_currency_id': self.currency_id.id,\n        'default_date_invoice': self.date_order,\n        'default_invoice_origin': self.name,\n        'default_journal_id': self.journal_id.id,\n        'default_ref': self.name,\n        'default_invoice_method': self.invoice_method,\n        'default_fiscal_position_id': self.fiscal_position_id.id,\n        'default_invoice_lines': [('move_id', 'in', self.mapped('move_ids').ids)],\n        'default_account_id': self.partner_id.property_account_payable.id,\n        'default_payment_term_id': self.payment_term_id.id,\n        'default_incoterm': self.incoterm,\n        'default_warehouse_id': self.warehouse_id.id,\n        'default_picking_type_id': self.picking_type_id.id,\n        'default_dest_address_id': self.partner_id.property_stock_customer.id,\n        'default_incoterm': self.incoterm,\n        'default_payment_term_id': self.payment_term_id.id,\n        'default_", "CodeBleu_score": 25.90069264646268}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tif not self.env.user.has_group('account.group_account_manager'):\n        return False\n    if not self.env.user.has_group('account.group_account_user'):\n        return False\n    if not self.env.user.has_group('account.group_account_invoice'):\n        return False\n    if not self.env.user.has_group('account.group_account_payment'):\n        return False\n    if not self.env.user.has_group('account.group_account_viewer'):\n        return False\n    if not self.env.user.has_group('account.group_account_config'):\n        return False\n    if not self.env.user.has_group('account.group_account_reports'):\n        return False\n    if not self.env.user.has_group('account.group_account_journal'):\n        return False\n    if not self.env.user.has_group('account.group_account_cashbox'):\n        return False\n    if not self.env.user.has_group('account.group_account_budget'):\n        return False\n    if not self.env.user.has_group('account.group_account_bank_statement'):\n        return False\n    if not self.env.user.has_group('account.group_account_tax_payment'):\n        return False\n    if not self.env.user.has_group('account.group_account_payment_all'):\n        return False\n    if not self.env.user.has_group('account.group_account_payment_invoice'):\n        return False\n    if not self.env.user.has_group('account.group_account_payment_move'):\n        return False\n    if not self.env.user.has_group('account.group_account_payment_bank'):\n        return False\n    if not self.env.user.has_group('account.group_account_payment_cash'):\n        return False\n    if not self.env.user.has_group('account.group_account_payment_transfer'):\n        return False\n    if not self.env.user.has_group('account.group_", "CodeBleu_score": 18.440765903024133}, {"code": "def _find_or_create_bank_account(self)\n\tif self.skip_bank_account_creation:\n        return self.env['res.bank.account']\n\n    bank_account = self.env['res.bank.account'].search([('acc_number', '=', self.account_number), ('partner_id', '=', self.partner_id.id)])\n    if not bank_account:\n        bank_account = self.env['res.bank.account'].create({\n            'partner_id': self.partner_id.id,\n            'acc_number': self.account_number,\n            'bank_ids': [(6, 0, self.bank_id.ids)],\n            'currency_id': self.currency_id.id,\n            'company_id': self.company_id.id,\n            'user_type_id': self.env.ref('account.data_unaffected_earnings').id,\n            'type': 'bank',\n        })\n    return bank_account.filtered(lambda r: r.company_id == self.company_id)\n\n", "CodeBleu_score": 56.005168046608155}, {"code": "def _find_or_create_bank_account(self)\n\tif not self.env.context.get('skip_bank_account_creation'):\n        self.ensure_one()\n        bank_account = self.env['res.partner.bank'].search([\n            ('partner_id', '=', self.id),\n            ('acc_number', '=', self.bank_account_number),\n            ('company_id', '=', self.env.company.id)\n        ], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'partner_id': self.id,\n                'acc_number': self.bank_account_number,\n                'bank_id': self.bank_id.id,\n                'currency_id': self.currency_id.id,\n                'company_id': self.env.company.id,\n            })\n        return bank_account.filtered(lambda x: x.company_id == self.env.company)\n    return self.env['res.partner.bank']\n\n", "CodeBleu_score": 57.9595377459615}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\twith self.env.cr.savepoint():\n        self.env.cr.execute(\"SAVEPOINT save\")\n        try:\n            transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n            if currency == transaction_currency:\n                transaction_amount = amount_currency\n            elif currency == journal_currency:\n                transaction_amount = self.env['res.currency']._convert(\n                    amount_currency, transaction_currency, transaction_amount, self.company_id, fields.Date.today())\n            elif currency == company_currency:\n                transaction_amount = self.env['res.currency']._convert(\n                    amount_currency, journal_currency, journal_amount, self.company_id, fields.Date.today())\n                transaction_amount = self.env['res.currency']._convert(\n                    transaction_amount, company_currency, company_amount, self.company_id, fields.Date.today())\n            if currency == transaction_currency:\n                balance = balance - transaction_amount\n            elif currency == journal_currency:\n                balance = self.env['res.currency']._convert(\n                    balance, company_currency, company_amount, self.company_id, fields.Date.today())\n                balance = self.env['res.currency']._convert(\n                    balance, journal_currency, journal_amount, self.company_id, fields.Date.today())\n                balance = balance + transaction_amount\n            elif currency == company_currency:\n                balance = self.env['res.currency']._convert(\n                    balance, journal_currency, journal_amount, self.company_id, fields.Date.today())\n                balance = self.env['res.currency']._convert(\n                    balance, company_currency, company_amount, self.company_id, fields.Date.today())\n                balance = balance + transaction_amount\n            return {\n                'transaction_amount': transaction_amount,\n                'balance': balance,\n            }\n        except Exception:\n            self.env.cr.execute(\"ROLLBACK TO SAVEPOINT save\")\n            raise", "CodeBleu_score": 34.26209545756935}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\twith self.pool.cursor() as cr:\n        cr.execute(\n            \"\"\"\n                SELECT\n                    (SELECT id FROM res_currency WHERE id = %s) AS currency_id,\n                    (SELECT id FROM res_currency WHERE id = %s) AS company_currency_id,\n                    (SELECT id FROM res_currency WHERE id = %s) AS journal_currency_id,\n                    (SELECT id FROM res_currency WHERE id = %s) AS transaction_currency_id,\n                    (SELECT id FROM res_currency WHERE id = %s) AS foreign_currency_id\n            \"\"\",\n            [currency.id, self.company_id.currency_id.id, self.currency_id.id, self.foreign_currency_id.id, self.foreign_currency_id.id],\n        )\n        currency_ids = cr.dictfetchone()\n        if currency_ids['foreign_currency_id'] != currency_ids['transaction_currency_id']:\n            # The transaction currency is not the same as the foreign currency.\n            # This means that the exchange rate used to compute the transaction amount is not the same as the one used to compute the journal amount.\n            # We need to compute the journal amount using the foreign currency and the exchange rate of the statement line.\n            # The company amount will be computed using the foreign currency and the exchange rate of the journal.\n            # The transaction amount will be computed using the foreign currency and the exchange rate of the statement line.\n            # This is the case for the first reconciliation of a statement line in a foreign currency.\n            # The transaction amount is the same as the balance of the statement line.\n            # The journal amount is the same as the balance of the statement line but in the foreign currency.\n            # The company amount is the same as the balance of the statement line but in the company currency.\n            # The company amount is the same as the journal amount but in the company currency.\n            # The company amount is the same as the transaction amount but in the company currency.\n            transaction_amount = balance\n            journal_amount = self.amount_currency\n            company_amount = self.amount\n        else:\n            # The transaction currency is the same as the foreign currency.\n            # This means", "CodeBleu_score": 16.76692545474979}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\twith self.env.cr.savepoint():\n        self.ensure_one()\n        # If the statement line has a foreign currency, we can't trust the amounts in the journal entry.\n        if self.foreign_currency_id:\n            transaction_amount = self.amount_currency\n            balance = self.balance\n        else:\n            # In case of to_check or partial reconciliation, we can't trust the suspense line.\n            transaction_amount = self.amount\n            balance = self.balance\n        transaction_currency = self.foreign_currency_id or self.currency_id\n        journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n        # If the journal currency is the same as the transaction currency, we can't trust the journal amount.\n        if journal_currency == transaction_currency:\n            journal_amount = transaction_amount\n        # If the company currency is the same as the transaction currency, we can't trust the company amount.\n        if company_currency == transaction_currency:\n            company_amount = transaction_amount\n        # If the company currency is the same as the journal currency, we can't trust the company amount.\n        if company_currency == journal_currency:\n            company_amount = journal_amount\n\n        # If the transaction currency is the same as the company currency, we can't trust the transaction amount.\n        if transaction_currency == company_currency:\n            transaction_amount = company_amount\n\n        # If the journal currency is the same as the company currency, we can't trust the journal amount.\n        if journal_currency == company_currency:\n            journal_amount = company_amount\n\n        # If the balance currency is the same as the company currency, we can't trust the balance.\n        if balance.currency_id == company_currency:\n            balance = balance.amount\n\n        # If the balance currency is the same as the journal currency, we can't trust the balance.\n        if balance.currency_id == journal_currency:\n            balance = balance.amount\n\n        # If the balance currency is the same as the transaction currency, we can't trust the balance.\n        if", "CodeBleu_score": 26.13397604373188}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids.clear()\n        if journal.type in ['bank', 'cash']:\n            for payment_method in journal._default_outbound_payment_methods:\n                payment_method_line_vals = {\n                    'name': payment_method.name,\n                    'payment_method_id': payment_method.id,\n                    'sequence': payment_method.sequence,\n                    'journal_id': journal.id,\n                }\n                journal.outbound_payment_method_line_ids.create(payment_method_line_vals)\n\n", "CodeBleu_score": 36.296389102766796}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = []\n        if journal.type in ['bank', 'cash']:\n            for payment_method in journal._default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids.append((0, 0, {\n                    'payment_method_id': payment_method.id,\n                    'sequence': 10,\n                }))\n\n", "CodeBleu_score": 31.402485994311903}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ['bank', 'cash']:\n            journal.outbound_payment_method_line_ids = self.env['account.payment.method.line'].search([('payment_method_id', 'in', journal._default_outbound_payment_methods.ids)])\n\n", "CodeBleu_score": 28.09378850955269}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\tif self.invoice_date:\n        self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n    elif not self.date:\n        self.date = fields.Date.context_today(self)\n\n    # If the date of the move has changed, we need to recompute the date of the related move lines\n    if self.date != self.date_orig:\n        self._recompute_date_on_move_lines()", "CodeBleu_score": 19.050331639444124}, {"code": "def _compute_date(self)\n\tif self.invoice_date:\n        invoice_date = self.invoice_date\n    elif self.date:\n        invoice_date = self.date\n    else:\n        invoice_date = fields.Date.context_today(self)\n\n    if not self.is_sale_document(include_receipts=True):\n        accounting_date = self._get_accounting_date(invoice_date, self._affect_tax_report())\n        if self.date != accounting_date:\n            self.date = accounting_date\n            self.invoice_date = invoice_date\n            self.invoice_payment_term_id = self.invoice_payment_term_id.id\n            self.invoice_partner_id = self.invoice_partner_id.id\n            self.invoice_user_id = self.invoice_user_id.id\n            self.invoice_currency_id = self.invoice_currency_id.id\n            self.invoice_journal_id = self.invoice_journal_id.id\n            self.invoice_reference = self.invoice_reference\n            self.invoice_payment_ref = self.invoice_payment_ref\n            self.invoice_payment_term_id = self.invoice_payment_term_id.id\n            self.invoice_partner_bank_id = self.invoice_partner_bank_id.id\n            self.invoice_partner_bank_account_id = self.invoice_partner_bank_account_id.id\n            self.invoice_partner_bank_name = self.invoice_partner_bank_name\n            self.invoice_partner_bank_acc_number = self.invoice_partner_bank_acc_number\n            self.invoice_partner_bank_acc_type = self.invoice_partner_bank_acc_type\n            self.invoice_partner_bank_acc_holder = self.invoice_partner_bank_acc_holder\n            self.invoice_partner_bank_acc_address = self.invoice_part", "CodeBleu_score": 27.881590768689957}, {"code": "def _compute_date(self)\n\tif not self.invoice_date and not self.date:\n        self.date = fields.Date.context_today(self)\n    if self.invoice_date:\n        if not self.is_sale_document(include_receipts=True):\n            self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n        else:\n            self.date = self.invoice_date\n    if self.date != self._origin.date:\n        self.env.defer_recomputation(self)", "CodeBleu_score": 30.286000664262385}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tif self.is_sale_document(include_receipts=True):\n        if self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        elif self.partner_id.payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document(include_receipts=True):\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        elif self.partner_id.supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n\n\n", "CodeBleu_score": 32.66650602534709}, {"code": "def _compute_invoice_payment_term_id(self)\n\tif self.is_sale_document() and self.partner_id.property_payment_term_id:\n        self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n    elif self.is_purchase_document() and self.partner_id.property_supplier_payment_term_id:\n        self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n    else:\n        self.invoice_payment_term_id = False\n\n\n\n", "CodeBleu_score": 29.79779865689655}, {"code": "def _compute_invoice_payment_term_id(self)\n\tif self.is_invoice(include_receipts=True):\n        if self.partner_id.property_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n        elif self.partner_id.payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n\n\n", "CodeBleu_score": 32.16428819474859}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t# 1. Group taxes by country and company\n    taxes_by_country_and_company = {}\n    for tax in self:\n        key = (tax.country_id, tax.company_id)\n        if key not in taxes_by_country_and_company:\n            taxes_by_country_and_company[key] = []\n        taxes_by_country_and_company[key].append(tax)\n\n    # 2. Assign tax group to each tax\n    for taxes in taxes_by_country_and_company.values():\n        for tax in taxes:\n            # 2.1. Search for a matching tax group with the same country and company\n            tax_group = self.env['account.tax.group'].search([\n                ('country_group_id', '=', tax.country_group_id.id),\n                ('company_id', '=', tax.company_id.id),\n                ('id', '!=', tax.group_id.id)\n            ])\n            if tax_group:\n                tax.group_id = tax_group\n                continue\n\n            # 2.2. Search for a tax group without a specified country but within the same company\n            tax_group = self.env['account.tax.group'].search([\n                ('company_id', '=', tax.company_id.id),\n                ('country_group_id', '=', False),\n                ('id', '!=', tax.group_id.id)\n            ])\n            if tax_group:\n                tax.group_id = tax_group\n                continue\n\n            # 2.3. If no matching tax group is found, create a new one\n            tax_group = self.env['account.tax.group'].create({\n                'name': _('Tax Group %s') % tax.name,\n                'country_group_id': tax.country_group_id.id,\n                'company_id': tax.company_id.id,\n            })\n            tax.group_id = tax_group\n\n    # 3. If a tax group is not linked to any tax, delete it\n    tax_groups = self.env['", "CodeBleu_score": 36.74286050239484}, {"code": " def _compute_tax_group_id(self)\n\t# 1. Group taxes by country and company\n    tax_groups = {}\n    for tax in self:\n        key = (tax.country_id, tax.company_id)\n        if key not in tax_groups:\n            tax_groups[key] = []\n        tax_groups[key].append(tax)\n    # 2. For each group, find an exact match, or a match without a country\n    for key, taxes in tax_groups.items():\n        for tax in taxes:\n            # Find exact match\n            tax_group = self.search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)])\n            if not tax_group:\n                # Find match without country\n                tax_group = self.search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)])\n            if tax_group:\n                tax.tax_group_id = tax_group.id\n            else:\n                raise UserError(_(\"Tax group not found for country %s and company %s\") % (tax.country_id.name, tax.company_id.name))", "CodeBleu_score": 35.48929809019437}, {"code": " def _compute_tax_group_id(self)\n\t# Group taxes by their country and company.\n    tax_groups = self.env['account.tax'].read_group([('company_id', '=', self.company_id.id)], ['country_id', 'company_id'], ['country_id', 'company_id'])\n    tax_groups = {(tax_group['country_id'][0], tax_group['company_id'][0]): tax_group for tax_group in tax_groups}\n\n    # For each group, search for a matching tax group with the same country and company.\n    # If no exact match is found, search for a tax group without a specified country but within the same company.\n    for tax in self:\n        for tax_group in tax_groups.values():\n            if tax_group['country_id'][0] == tax.country_id.id and tax_group['company_id'][0] == tax.company_id.id:\n                tax.tax_group_id = self.env.ref('account.tax_group_%s' % tax_group['id'], False)\n                break\n            elif tax_group['country_id'][0] is False and tax_group['company_id'][0] == tax.company_id.id:\n                tax.tax_group_id = self.env.ref('account.tax_group_%s' % tax_group['id'], False)\n                break\n\n    # If no tax group is found, assign the tax group of the company.\n    for tax in self:\n        if not tax.tax_group_id:\n            tax.tax_group_id = self.env['account.tax.group'].search([('company_id', '=', tax.company_id.id)], limit=1)", "CodeBleu_score": 32.06186722509396}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set database\n    self.session.post(url + '/base_import_module/set_database', data={'database': db})\n    # Prepare POST data\n    data = {'login': login, 'password': password, 'db': db}\n    if force:\n        data['force'] = 'true'\n    # Upload module\n    with open(module_file, 'rb') as f:\n        r = self.session.post(url + '/base_import_module/login_upload', data=data, files={'file': f})\n    return r.text\n\n", "CodeBleu_score": 39.71439197174627}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session by accessing the login URL\n    self.session.get(url + \"/login\")\n\n    # Prepare the POST request data\n    data = {\n        \"login\": login,\n        \"password\": password,\n        \"db\": db,\n        \"force\": force,\n    }\n\n    # Read the module file\n    with open(module_file, \"rb\") as f:\n        module_file = f.read()\n\n    # Upload the module file to the server's 'base_import_module/login_upload' endpoint\n    response = self.session.post(url + \"/base_import_module/login_upload\", data=data, files={\"module_file\": module_file})\n\n    # If the server does not have the required module installed or is outdated, it raises an exception\n    if response.status_code == 400:\n        raise Exception(response.text)\n\n    # Return the server's response text\n    return response.text\n\n", "CodeBleu_score": 41.95816506760169}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# set database in session\n    self.set_database(url, login, password, db)\n\n    # prepare POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n\n    # read module file\n    with open(module_file, 'rb') as f:\n        module_file_data = f.read()\n\n    # upload module file\n    response = self.session.post(\n        f'{self.base_import_module}/login_upload',\n        data=data,\n        files={'module_file': ('module_file', module_file_data)}\n    )\n\n    # check if module file is installed or outdated\n    if response.status_code == 400:\n        raise Exception(response.text)\n\n    # return server response text\n    return response.text\n\n", "CodeBleu_score": 48.494782911230715}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\timport os\n    import logging\n    import xmlrpclib\n    from odoo.modules.module import get_resource_path\n    from odoo.modules.registry import Registry\n    from odoo.tools.translate import TranslationImporter\n\n    # Get configuration settings\n    db_name = os.environ.get('ODOO_DB')\n    overwrite = os.environ.get('ODOO_OVERWRITE', 'False')\n\n    # Create a new database registry\n    registry = Registry(db_name)\n    # Get a cursor\n    with registry.cursor() as cr:\n        # Initialize a TranslationImporter\n        importer = TranslationImporter(cr)\n        # Load translation files\n        importer.load_translations(get_resource_path('base', 'i18n'), force=True)\n        # Save translations\n        importer.save(overwrite=overwrite)\n\n", "CodeBleu_score": 43.41664359685165}, {"code": "def import_translation()\n\t# Retrieve configuration settings\n    db_name = config.get('database', 'db_name')\n    overwrite_translations = config.get('database', 'overwrite_translations')\n\n    # Create new database registry\n    db = odoo.registry(db_name)\n\n    # Create a cursor to use for importing translations\n    with db.cursor() as cr:\n        # Create a TranslationImporter\n        importer = TranslationImporter(cr, db_name, overwrite_translations)\n\n        # Import translations\n        importer.import_all(\n            config.get('translations', 'translations_path'),\n            config.get('translations', 'languages'),\n            config.get('translations', 'modules'),\n            config.get('translations', 'file_pattern')\n        )", "CodeBleu_score": 34.25873042427245}, {"code": "def import_translation()\n\t# Retrieve configuration settings\n    db_name = input('Enter the database name: ')\n    overwrite = input('Overwrite existing translations? (y/n): ')\n    if overwrite == 'y':\n        overwrite = True\n    else:\n        overwrite = False\n\n    # Create a new database registry\n    from odoo import api, SUPERUSER_ID\n    db = api.Environment(db_name, SUPERUSER_ID)\n\n    # Initialize a cursor\n    cr = db.cr\n\n    # Import translations\n    from odoo.tools.translate import TranslationImporter\n    translator = TranslationImporter(cr, db_name, overwrite)\n    translator.load_all()\n    translator.save()\n\n", "CodeBleu_score": 30.859235551441916}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t# create new node\n    new_node = Node(name, info)\n\n    # set depth\n    new_node.depth = self.depth + 1\n\n    # inherit parent attributes\n    if self.attributes:\n        new_node.attributes = self.attributes.copy()\n\n    # append to children\n    if new_node not in self.children:\n        self.children.append(new_node)\n\n    # sort children\n    self.children.sort(key=lambda x: x.name)\n\n    # return new node\n    return new_node\n\n", "CodeBleu_score": 44.12436559178489}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n    else:\n        child = Node(name, info, self.depth + 1)\n        if self.is_root:\n            child.is_root = False\n        child.is_leaf = self.is_leaf\n        child.parent = self\n        if self.children:\n            child.children = self.children\n        if self.data:\n            child.data = self.data\n        if self.is_leaf:\n            child.is_leaf = False\n        if self.is_root:\n            child.is_root = False\n        self.children[name] = child\n        self.children = sorted(self.children.values(), key=lambda x: x.name)\n        return child\n\n", "CodeBleu_score": 28.781815562934593}, {"code": "def add_child(self, name, info)\n\t# Check if child already exists\n    for child in self.children:\n        if child.name == name:\n            return child\n\n    # Create new child node\n    new_child = Node(name, info)\n\n    # Set depth\n    new_child.depth = self.depth + 1\n\n    # Inherit parent attributes if they exist\n    if hasattr(self, 'type'):\n        new_child.type = self.type\n\n    if hasattr(self, 'description'):\n        new_child.description = self.description\n\n    # Append new child to children list\n    self.children.append(new_child)\n\n    # Sort children by name\n    self.children = sorted(self.children, key=lambda x: x.name)\n\n    return new_child\n\n", "CodeBleu_score": 43.98005469158826}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t# Initialize the result with the dates and zeros for balances\n    result = {\n        \"dates\": dates,\n        \"asset_balance\": [0] * len(dates),\n        \"expense_balance\": [0] * len(dates),\n        \"liability_balance\": [0] * len(dates),\n        \"equity_balance\": [0] * len(dates),\n    }\n\n    # Determine the account's root type\n    root_type = account.get_root_type()\n\n    # Iterate through the entries, updating the balance for each date\n    for entry in gl_entries:\n        date_index = dates.index(entry.date)\n        if root_type == \"Asset\":\n            result[\"asset_balance\"][date_index] += entry.amount\n        elif root_type == \"Expense\":\n            result[\"expense_balance\"][date_index] += entry.amount\n        elif root_type == \"Liability\":\n            result[\"liability_balance\"][date_index] += entry.amount\n        elif root_type == \"Equity\":\n            result[\"equity_balance\"][date_index] += entry.amount\n\n    # If the root type is not \"Asset\" or \"Expense,\" it negates the balances\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[\"asset_balance\"] = [\n            -balance for balance in result[\"asset_balance\"]\n        ]\n        result[\"expense_balance\"] = [\n            -balance for balance in result[\"expense_balance\"]\n        ]\n\n    # For \"Asset,\" \"Liability,\" and \"Equity\" accounts, it accumulates the balance over time\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        result[\"asset_balance\"] = [\n            sum(result[\"asset_balance\"][:index + 1])\n            for index in range(len(result[\"asset_balance\"]))\n        ]\n        result[\"expense_balance\"] = [\n            sum(result[\"expense_balance\"][:index + 1])\n            for index in range(len", "CodeBleu_score": 24.03777923584263}, {"code": "def build_result(account, dates, gl_entries)\n\t# Initialize the result with the dates and zeros for balances.\n    result = {\n        \"dates\": dates,\n        \"asset\": [0] * len(dates),\n        \"expense\": [0] * len(dates),\n        \"liability\": [0] * len(dates),\n        \"equity\": [0] * len(dates),\n    }\n\n    # Determine the account's root type.\n    root_type = account[\"root_type\"]\n\n    # Iterate through the entries, updating the balance for each date.\n    for entry in gl_entries:\n        # If the root type is not \"Asset\" or \"Expense,\" negate the balances.\n        if root_type not in [\"Asset\", \"Expense\"]:\n            entry[\"debit\"] = -entry[\"debit\"]\n            entry[\"credit\"] = -entry[\"credit\"]\n\n        # Accumulate the balance over time.\n        for i in range(len(dates)):\n            if dates[i] == entry[\"date\"]:\n                if root_type == \"Asset\":\n                    result[\"asset\"][i] += entry[\"credit\"] - entry[\"debit\"]\n                elif root_type == \"Expense\":\n                    result[\"expense\"][i] += entry[\"debit\"] - entry[\"credit\"]\n                elif root_type == \"Liability\":\n                    result[\"liability\"][i] += entry[\"credit\"] - entry[\"debit\"]\n                elif root_type == \"Equity\":\n                    result[\"equity\"][i] += entry[\"credit\"] - entry[\"debit\"]\n\n    # Return the computed results.\n    return result\n\n", "CodeBleu_score": 19.954460194799083}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates)\n    }\n    root_type = account.root_type\n    if root_type != \"Asset\" and root_type != \"Expense\":\n        result[\"balances\"] = [-bal for bal in result[\"balances\"]]\n    for entry in gl_entries:\n        if entry.account == account:\n            for i in range(len(dates)):\n                if dates[i] == entry.date:\n                    result[\"balances\"][i] += entry.amount\n    if root_type == \"Asset\" or root_type == \"Liability\" or root_type == \"Equity\":\n        result[\"balances\"] = [sum(result[\"balances\"][:i + 1]) for i in range(len(result[\"balances\"]))]\n    return result\n\n", "CodeBleu_score": 27.043852449772377}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t# Get the account type before and after the save operation\n    before_account_type = self.get_before_value(\"account_type\")\n    after_account_type = self.get_after_value(\"account_type\")\n    # Get the account number\n    account_number = self.get_before_value(\"account_number\")\n    # Check if the account type has changed\n    if before_account_type != after_account_type:\n        # Check if the account type is \"Receivable\" or \"Payable\"\n        if before_account_type == \"Receivable\" or before_account_type == \"Payable\":\n            # Get the number of general ledger entries for the account\n            number_of_gl_entries = frappe.db.count(\"General Ledger\", filters={\"account\": account_number})\n            # Check if there are existing general ledger entries for the account\n            if number_of_gl_entries > 0:\n                # Generate a warning message indicating potential issues in the \"Accounts\" report\n                frappe.msgprint(_(\"There are {0} general ledger entries for account {1}. Please check the 'Accounts' report for potential issues.\").format(number_of_gl_entries, account_number))\n                # Add a comment to the account record\n                frappe.db.set_value(\"Account\", account_number, \"comment\", _(\"There are {0} general ledger entries for this account. Please check the 'Accounts' report for potential issues.\").format(number_of_gl_entries))\n\n", "CodeBleu_score": 39.64941491301916}, {"code": "def validate_receivable_payable_account_type(self)\n\t# Get the account type before the save operation\n    account_type_before_save = self.account_type\n\n    # Get the account type after the save operation\n    account_type_after_save = self.account_type\n\n    # Check if the account type changed from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n    if account_type_before_save in [\"Receivable\", \"Payable\"] and account_type_after_save not in [\"Receivable\", \"Payable\"]:\n\n        # Get the number of general ledger entries for the account\n        num_of_general_ledger_entries = frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabGeneral Ledger` WHERE account = %s\"\"\", (self.name))[0][0]\n\n        # Check if there are any general ledger entries for the account\n        if num_of_general_ledger_entries > 0:\n\n            # Generate a warning message indicating potential issues in the \"Accounts\" report\n            frappe.msgprint(\"Warning: There are existing general ledger entries for this account. Please review the \"Accounts\" report for any issues.\", alert=True, indicator=\"orange\")\n\n            # Add a comment to the account record indicating that there are existing general ledger entries for the account\n            frappe.db.sql(\"\"\"INSERT INTO `tabComment` (comment_type, comment_email, comment_by, comment, reference_doctype, reference_name, comment_date, comment_time)\n                             VALUES (\"Info\", %s, %s, %s, %s, %s, %s, %s)\"\"\",\n                             (\"\", frappe.session.user, \"There are existing general ledger entries for this account. Please review the 'Accounts' report for any issues.\", \"Account\", self.name, now(), now()))\n\n\n", "CodeBleu_score": 31.35962549341786}, {"code": "def validate_receivable_payable_account_type(self)\n\tif self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != self.get_old_value(\"account_type\"):\n            if self.get_old_value(\"account_type\") == \"Receivable\" or self.get_old_value(\"account_type\") == \"Payable\":\n                if self.general_ledger_entries:\n                    self.add_comment(\"Account Type Change\", \"Account Type has been changed from Receivable or Payable to a non-receivable/payable type. Please review the Accounts report to ensure there are no issues.\")\n                    self.add_comment(\"Account Type Change\", \"Please note that the Accounts report will only be generated for the current fiscal year.\")\n\n", "CodeBleu_score": 24.972019264369237}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t# Validate and set currency\n    if self.currency:\n        if self.currency != self.company.default_currency:\n            if self.company.default_currency:\n                self.currency = self.company.default_currency\n            else:\n                frappe.throw(_(\"Please set default currency in Company {0}\").format(self.company))\n        self.flags.explicit_currency = True\n    else:\n        self.currency = self.company.default_currency\n\n    # Check if there are any existing entries with a different currency\n    if self.get('name'):\n        gl_entries = frappe.db.sql(\"\"\"SELECT name FROM `tabGL Entry` WHERE account=%s AND company=%s AND currency!=%s\"\"\",\n                                   (self.name, self.company, self.currency), as_dict=1)\n        if gl_entries:\n            frappe.throw(_(\"Cannot change currency of {0} as there are existing General Ledger Entries against this account with a different currency\").format(self.name))\n", "CodeBleu_score": 32.7894254041499}, {"code": "def validate_account_currency(self)\n\tif self.company.country == \"US\":\n        if self.currency == None:\n            self.currency = self.company.default_currency\n            self.currency_explicitly_set = True\n        else:\n            self.currency_explicitly_set = True\n\n        if self.currency != self.company.default_currency:\n            if self.company.default_currency != \"USD\":\n                frappe.throw(_(\"The currency for this account must be USD.\"))\n\n        if self.account_number:\n            if self.account_number.startswith(\"1\"):\n                if self.currency != \"USD\":\n                    frappe.throw(_(\"The currency for this account must be USD.\"))\n            elif self.account_number.startswith(\"2\"):\n                if self.currency != \"CAD\":\n                    frappe.throw(_(\"The currency for this account must be CAD.\"))\n            elif self.account_number.startswith(\"3\"):\n                if self.currency != \"EUR\":\n                    frappe.throw(_(\"The currency for this account must be EUR.\"))\n            elif self.account_number.startswith(\"4\"):\n                if self.currency != \"GBP\":\n                    frappe.throw(_(\"The currency for this account must be GBP.\"))\n            elif self.account_number.startswith(\"5\"):\n                if self.currency != \"AUD\":\n                    frappe.throw(_(\"The currency for this account must be AUD.\"))\n            elif self.account_number.startswith(\"6\"):\n                if self.currency != \"NZD\":\n                    frappe.throw(_(\"The currency for this account must be NZD.\"))\n            elif self.account_number.startswith(\"7\"):\n                if self.currency != \"SGD\":\n                    frappe.throw(_(\"The currency for this account must be SGD.\"))\n            elif self.account_number.startswith(\"8\"):\n                if self.currency != \"HKD\":\n                    frappe.throw(_(\"The currency for this account must be HKD.\"))\n            elif self.account_number.startswith(\"9\"):", "CodeBleu_score": 23.858471469686677}, {"code": "def validate_account_currency(self)\n\tcurrency = self.get(\"currency\")\n    if not currency:\n        self.set(\"currency\", frappe.get_cached_value(\"Company\", self.company, \"default_currency\"))\n        currency = self.get(\"currency\")\n    if currency != frappe.get_cached_value(\"Company\", self.company, \"default_currency\"):\n        frappe.throw(_(\"Account Currency cannot be different from the Company's Default Currency\"))\n    if not frappe.db.get_value(\"Currency\", currency, \"enabled\"):\n        frappe.throw(_(\"Currency {0} is disabled\").format(currency))\n\n    # check if there are any entries in the account\n    if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s\n        and (voucher_type is null or voucher_type != 'Period Closing Voucher')\n        and company = %s and (against_voucher is null or against_voucher = '')\n        limit 1\"\"\", (self.name, self.company)):\n        if currency != frappe.db.get_value(\"Company\", self.company, \"default_currency\"):\n            frappe.throw(_(\"Cannot change currency of account {0} as it has existing transactions\").format(self.name))\n\n    self.set(\"account_currency\", currency)\n    self.set(\"account_currency_symbol\", frappe.db.get_value(\"Currency\", currency, \"symbol\"))\n", "CodeBleu_score": 32.096404639949085}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\taggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = key_values\n            aggregated_entries[key].update({\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n                \"balance\": 0.0,\n                \"balance_in_account_currency\": 0.0,\n                \"account_currency\": entry.get(\"account_currency\"),\n                \"account\": entry.get(\"account\"),\n                \"is_period_closing_voucher_entry\": entry.get(\"is_period_closing_voucher_entry\"),\n                \"last_account_closing_balance\": entry.get(\"last_account_closing_balance\"),\n                \"last_account_closing_balance_in_account_currency\": entry.get(\"last_account_closing_balance_in_account_currency\"),\n            })\n\n        aggregated_entries[key][\"debit\"] += entry.get(\"debit\")\n        aggregated_entries[key][\"credit\"] += entry.get(\"credit\")\n        aggregated_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n        aggregated_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n        aggregated_entries[key][\"balance\"] = aggregated_entries[key][\"debit\"] - aggregated_entries[key][\"credit\"]\n        aggregated_entries[key][\"balance_in_account_currency\"] = aggregated_entries[key][\"debit_in_account_currency\"] - aggregated_entries[key][\"credit_in_account_currency\"]\n        aggregated_entries[key][\"is_period_closing_voucher_entry\"] = entry.get(\"is", "CodeBleu_score": 41.446596310054126}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\taggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"account\": entry.account,\n                \"account_currency\": entry.account_currency,\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n                \"is_opening\": \"No\",\n                \"is_closing\": \"No\",\n                \"cost_center\": entry.cost_center,\n                \"project\": entry.project,\n                \"finance_book\": entry.finance_book,\n                \"is_period_closing_voucher_entry\": entry.is_period_closing_voucher_entry,\n            }\n            for dimension in accounting_dimensions:\n                aggregated_entries[key][dimension] = entry.get(dimension)\n        aggregated_entries[key][\"debit\"] += entry.debit\n        aggregated_entries[key][\"credit\"] += entry.credit\n        aggregated_entries[key][\"debit_in_account_currency\"] += entry.debit_in_account_currency\n        aggregated_entries[key][\"credit_in_account_currency\"] += entry.credit_in_account_currency\n        if entry.is_opening == \"Yes\":\n            aggregated_entries[key][\"is_opening\"] = \"Yes\"\n        if entry.is_closing == \"Yes\":\n            aggregated_entries[key][\"is_closing\"] = \"Yes\"\n\n    return aggregated_entries\n\n", "CodeBleu_score": 33.54969154854246}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\taggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"account\": entry.get(\"account\"),\n                \"account_currency\": entry.get(\"account_currency\"),\n                \"debit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit\": 0,\n                \"credit_in_account_currency\": 0,\n                \"balance\": 0,\n                \"balance_in_account_currency\": 0,\n                \"is_period_closing_voucher_entry\": entry.get(\"is_period_closing_voucher_entry\"),\n                \"cost_center\": entry.get(\"cost_center\"),\n                \"project\": entry.get(\"project\"),\n                \"finance_book\": entry.get(\"finance_book\"),\n                \"company\": entry.get(\"company\"),\n                \"accounting_dimensions\": key_values,\n            }\n\n        aggregated_entries[key][\"debit\"] += entry.get(\"debit\")\n        aggregated_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n        aggregated_entries[key][\"credit\"] += entry.get(\"credit\")\n        aggregated_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n\n    return aggregated_entries\n\n", "CodeBleu_score": 45.15182553091636}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.type in ['invoice', 'purchase']:\n        supplier = self.partner_id\n        if supplier.on_hold:\n            if supplier.on_hold_message:\n                raise UserError(supplier.on_hold_message)\n            else:\n                raise UserError(_(\"The supplier is blocked.\"))\n        elif supplier.on_hold_date and supplier.on_hold_date > fields.Date.context_today(self):\n            raise UserError(_(\"The supplier is blocked until %s.\") % supplier.on_hold_date)\n", "CodeBleu_score": 17.869151289720936}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.type == 'invoice' and self.supplier_invoice_payment:\n        # Check if the supplier is blocked\n        if self.supplier_invoice_payment.supplier_invoice.supplier.on_hold:\n            # Check if the hold type matches the transaction type\n            if self.supplier_invoice_payment.supplier_invoice.supplier.hold_type == 'payment':\n                # Check if the release date has passed\n                if self.supplier_invoice_payment.supplier_invoice.supplier.hold_release_date < datetime.now():\n                    # Raise an exception and display a message\n                    raise ValidationError(_('The supplier is blocked. Please contact the administrator.'))\n            # Raise an exception and display a message\n            raise ValidationError(_('The supplier is blocked. Please contact the administrator.'))\n\n    if self.type == 'payment' and self.supplier_payment:\n        # Check if the supplier is blocked\n        if self.supplier_payment.supplier.on_hold:\n            # Check if the hold type matches the transaction type\n            if self.supplier_payment.supplier.hold_type == 'invoice':\n                # Check if the release date has passed\n                if self.supplier_payment.supplier.hold_release_date < datetime.now():\n                    # Raise an exception and display a message\n                    raise ValidationError(_('The supplier is blocked. Please contact the administrator.'))\n            # Raise an exception and display a message\n            raise ValidationError(_('The supplier is blocked. Please contact the administrator.'))\n\n\n", "CodeBleu_score": 26.79502876886933}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.type in [\"in_invoice\", \"in_refund\"]:\n        supplier = self.partner_id\n    else:\n        supplier = self.partner_id.commercial_partner_id\n    if supplier.is_blocked:\n        if supplier.is_blocked and supplier.block_status == \"hold\":\n            if self.type in [\"in_invoice\", \"in_refund\"]:\n                if supplier.block_hold_type == \"payment\":\n                    if not supplier.block_hold_date_end:\n                        raise UserError(_(\"The supplier is blocked and the payment cannot be processed.\"))\n                    if supplier.block_hold_date_end < fields.Date.today():\n                        raise UserError(_(\"The supplier is blocked and the payment cannot be processed.\"))\n            if self.type in [\"out_invoice\", \"out_refund\"]:\n                if supplier.block_hold_type == \"invoice\":\n                    if not supplier.block_hold_date_end:\n                        raise UserError(_(\"The supplier is blocked and the invoice cannot be processed.\"))\n                    if supplier.block_hold_date_end < fields.Date.today():\n                        raise UserError(_(\"The supplier is blocked and the invoice cannot be processed.\"))\n        else:\n            raise UserError(_(\"The supplier is blocked and the transaction cannot be processed.\"))\n\n", "CodeBleu_score": 26.96867210992019}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t# get the relevant repost doctypes\n    repost_doctypes = frappe.get_all(\"Repost Doctype\", fields=[\"name\", \"parent_doctype\", \"parent_field\", \"voucher_type_field\", \"voucher_number_field\", \"parent_field_is_table\", \"parent_field_table_field\", \"parent_field_table_field_is_parent\"])\n    repost_doctypes = {d.name: d for d in repost_doctypes}\n\n    # get all the repost doctypes that have the current document's doctype as their parent\n    repost_doctypes = [d for d in repost_doctypes.values() if d.parent_doctype == self.doctype]\n\n    # get the voucher type and number from the current document\n    voucher_type = frappe.db.get_value(self.doctype, self.name, self.voucher_type_field)\n    voucher_number = frappe.db.get_value(self.doctype, self.name, self.voucher_number_field)\n\n    # get the rows where the voucher type and number match the current document\n    rows = frappe.db.sql(\"\"\"select name, parent, parenttype, parentfield, fieldname, idx, tablefield, tablefield_is_parent\n        from `tabRepost Doctype Field`\n        where voucher_type = %(voucher_type)s and voucher_number = %(voucher_number)s\"\"\",\n        values={\"voucher_type\": voucher_type, \"voucher_number\": voucher_number}, as_dict=1)\n\n    # organize the rows into a map by parent document type and parent\n    rows_by_parent_type_and_parent = {}\n    for row in rows:\n        parent_type = row.parenttype\n        parent = row.parent\n        if parent_type not in rows_by_parent_type_and_parent:\n            rows_by_parent_type_and_parent[parent_type]", "CodeBleu_score": 27.338141273276296}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t# Get the repost doctypes\n    repost_doctypes = frappe.get_all(\"Repost Doctype\", filters={\"master_doctype\": self.doctype},\n                                     fields=[\"name\", \"repost_field\", \"repost_field_parent\"])\n\n    # Get the repost field names\n    repost_field_names = [x.repost_field for x in repost_doctypes]\n\n    # Get the repost field parent names\n    repost_field_parent_names = [x.repost_field_parent for x in repost_doctypes]\n\n    # Get the voucher type and number of the current document\n    voucher_type = self.voucher_type\n    voucher_number = self.voucher_number\n\n    # Get the child doctypes of the current document\n    child_doctypes = frappe.get_all(\"Repost Doctype\", filters={\"master_doctype\": self.doctype},\n                                    fields=[\"child_doctype\"])\n\n    # Get the child doctype names\n    child_doctype_names = [x.child_doctype for x in child_doctypes]\n\n    # Get the child doctype names\n    child_doctype_names = [x.child_doctype for x in child_doctypes]\n\n    # Get the vouchers and repost vouchers of the current document\n    vouchers = self.vouchers\n    repost_vouchers = self.repost_vouchers\n\n    # Get the vouchers and repost vouchers of the current document\n    vouchers = self.vouchers\n    repost_vouchers = self.repost_vouchers\n\n    # Get the voucher type and number of the current document\n    voucher_type = self.voucher_type\n    voucher_number = self.voucher_number\n\n    # Get the child doctypes of the current document\n    child_doctypes = frappe.get_all(\"Repost Doctype\", filters={\"master_", "CodeBleu_score": 23.264401128709842}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t# Identify the relevant repost doctypes\n    repost_doctypes = [\n        \"Stock Ledger Entry\",\n        \"Stock Reconciliation\",\n        \"Stock Entry\",\n        \"Stock Reconciliation\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Delivery Note\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Purchase Receipt\",\n    ]\n\n    # Query for rows where the voucher type and number match the current document\n    rows = frappe.db.sql(\n        \"\"\"\n            SELECT\n                `tab{0}`.name, `tab{0}`.parent, `tab{0}`.parenttype, `tab{0}`.voucher_type, `tab{0}`.voucher_no\n            FROM\n                `tab{0}`\n            WHERE\n                `tab{0}`.voucher_type=%s AND `tab{0}`.voucher_no=%s\n        \"\"\".format(\n            \"Repost Item Valuation\"\n        ),\n        (self.doctype, self.name),\n        as_dict=1,\n    )\n\n    # Organize the rows into a map by parent document type and parent\n    rows_by_parent = {}\n    for row in rows:\n        if row.parenttype not in rows_by_parent:\n            rows_by_parent[row.parenttype] = {}\n        if row.parent not in rows_by_parent[row.parenttype]:\n            rows_by_parent[row.parenttype][row.parent] = []\n        rows_by_parent[row.parenttype][row.parent].append(row)\n\n    # Retrieve each parent document, remove the relevant rows from either \"repost_vouchers\" or \"vouchers\" fields depending on the doctype, set flags to ignore validation and links, and save the changes\n    for parenttype in rows_by_parent:\n        if parenttype in repost_doctypes:\n            for parent in rows_by_parent[parenttype]:\n                doc = frappe", "CodeBleu_score": 18.99528136188037}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.auth()\n        start_date = datetime.datetime.strptime(start_date, \"%Y-%m-%d\").date()\n        end_date = datetime.datetime.strptime(end_date, \"%Y-%m-%d\").date()\n        if account_id:\n            options = {\n                \"account_ids\": [account_id],\n                \"start_date\": start_date,\n                \"end_date\": end_date,\n            }\n        else:\n            options = {\n                \"start_date\": start_date,\n                \"end_date\": end_date,\n            }\n        transactions = self.client.Transactions.get(self.access_token, options)\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Login required\"))\n        elif e.code == \"INVALID_FIELD\":\n            frappe.throw(_(\"Invalid field\"))\n        elif e.code == \"INVALID_REQUEST\":\n            frappe.throw(_(\"Invalid request\"))\n        elif e.code == \"INVALID_SCOPE\":\n            frappe.throw(_(\"Invalid scope\"))\n        elif e.code == \"INVALID_SINCE\":\n            frappe.throw(_(\"Invalid since\"))\n        elif e.code == \"INVALID_UNTIL\":\n            frappe.throw(_(\"Invalid until\"))\n        elif e.code == \"INVALID_ACCOUNT\":\n            frappe.throw(_(\"Invalid account\"))\n        elif e.code == \"INVALID_ACCESS_TOKEN\":\n            frappe.throw(_(\"Invalid access token\"))\n        elif e.code == \"INVALID_PRODUCT\":\n            frappe.throw(_(\"Invalid product\"))\n        elif e.code == \"RATE_LIMIT_EXCEEDED\":\n            frappe.throw(_(\"Rate limit exceeded\"))\n        elif e.code == \"INVALID_INPUT\":\n            frappe.throw(_(\"Invalid input\"))\n        elif e.code == \"INVALID_FILTER\":\n            frappe.throw(_(\"Invalid filter\"))\n        elif e.code == \"INVALID_", "CodeBleu_score": 33.1141356556216}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\tself.auth()\n\n    try:\n        # Construct the query parameters\n        start_date = datetime.strptime(start_date, \"%Y-%m-%d\")\n        end_date = datetime.strptime(end_date, \"%Y-%m-%d\")\n        start_date = start_date.strftime(\"%Y-%m-%d\")\n        end_date = end_date.strftime(\"%Y-%m-%d\")\n\n        if account_id is not None:\n            self.client.Transactions.get(\n                self.access_token,\n                start_date,\n                end_date,\n                account_ids=[account_id],\n            )\n        else:\n            self.client.Transactions.get(self.access_token, start_date, end_date)\n\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            pass\n    except requests.Timeout:\n        pass\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transaction error\")\n        frappe.throw(_(str(e)), title=_(\"Transaction Error\"))\n\n", "CodeBleu_score": 33.66802731625755}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t# Authenticate the client\n    self.auth()\n\n    # Construct the query parameters\n    options = {\n        \"count\": 100,\n        \"offset\": 0,\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n    }\n\n    if account_id:\n        options[\"account_ids\"] = [account_id]\n\n    # Fetch the transactions\n    try:\n        transactions = self.client.Transactions.get(\n            self.access_token,\n            options,\n        )\n\n        # If the number of transactions retrieved is less than the total, continue fetching until all transactions are retrieved\n        while transactions.total_transactions > len(transactions.transactions):\n            options[\"offset\"] = len(transactions.transactions)\n            transactions = self.client.Transactions.get(\n                self.access_token,\n                options,\n            )\n\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            raise\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            raise\n    except requests.Timeout:\n        raise\n    except Exception as e:\n        frappe.log_error(\"Plaid: Get Transactions error\")\n        raise\n\n", "CodeBleu_score": 37.85336620424833}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t# Parse the response\n    institution_id = response[\"institution\"][\"institution_id\"]\n    institution_name = response[\"institution\"][\"name\"]\n    institution_logo = response[\"institution\"][\"logo\"]\n    institution_url = response[\"institution\"][\"url\"]\n\n    # Get an access token using the PlaidConnector\n    plaid_connector = PlaidConnector()\n    access_token = plaid_connector.get_access_token(token)\n\n    # Check if the bank already exists in the database\n    bank = frappe.db.exists(\"Bank\", {\"institution_id\": institution_id})\n\n    # If the bank does not exist, create and insert a new bank record\n    if bank is None:\n        bank = frappe.new_doc(\"Bank\")\n        bank.institution_id = institution_id\n        bank.institution_name = institution_name\n        bank.institution_logo = institution_logo\n        bank.institution_url = institution_url\n        bank.access_token = access_token\n        bank.save()\n        frappe.db.commit()\n        frappe.msgprint(_(\"Bank added successfully.\"))\n\n    # If the bank exists, update the access token for the existing bank record and save it\n    else:\n        bank = frappe.get_doc(\"Bank\", bank)\n        bank.access_token = access_token\n        bank.save()\n        frappe.db.commit()\n        frappe.msgprint(_(\"Bank updated successfully.\"))\n\n", "CodeBleu_score": 32.45957823586158}, {"code": "def add_institution(token, response)\n\tplaid_connector = PlaidConnector()\n    access_token = plaid_connector.get_access_token(token)\n    institution_id = response[\"institution_id\"]\n    institution_name = response[\"institution\"][\"name\"]\n    institution_type = response[\"institution\"][\"type\"]\n    institution_url = response[\"institution\"][\"url\"]\n    institution_logo = response[\"institution\"][\"logo\"]\n    institution_primary_color = response[\"institution\"][\"primary_color\"]\n    institution_brand_color = response[\"institution\"][\"brand_color\"]\n    institution_country_codes = response[\"institution\"][\"country_codes\"]\n    institution_products = response[\"institution\"][\"products\"]\n    institution_mfa = response[\"institution\"][\"mfa\"]\n    institution_mfa_code_type = response[\"institution\"][\"mfa_code_type\"]\n    institution_mfa_list = response[\"institution\"][\"mfa_list\"]\n    institution_mfa_type = response[\"institution\"][\"mfa_type\"]\n    institution_mfa_options = response[\"institution\"][\"mfa_options\"]\n    institution_mfa_type_list = response[\"institution\"][\"mfa_type_list\"]\n    institution_mfa_subtype_list = response[\"institution\"][\"mfa_subtype_list\"]\n    institution_mfa_subtype_list_description = response[\"institution\"][\"mfa_subtype_list_description\"]\n    institution_mfa_subtype_list_description_translated = response[\"institution\"][\"mfa_subtype_list_description_translated\"]\n    institution_mfa_subtype_list_description_translated_short = response[\"institution\"][\"mfa_subtype_list_description_translated_short\"]\n    institution_mfa_subtype_list_description_translated_short_link = response[\"institution\"][\"mfa_subtype_list_description_translated_short_link\"]\n    institution_mfa_subtype_list_description_translated_short_link_mobile = response[\"institution\"][\"mfa_subtype_", "CodeBleu_score": 10.836081586472138}, {"code": "def add_institution(token, response)\n\ttry:\n        bank_name = response[\"institution\"][\"name\"]\n        bank_url = response[\"institution\"][\"url\"]\n        bank_logo = response[\"institution\"][\"logo\"]\n        bank_type = response[\"institution\"][\"type\"]\n        bank_country_codes = response[\"institution\"][\"country_codes\"]\n        bank_primary_color = response[\"institution\"][\"primary_color\"]\n        bank_mfa_code = response[\"institution\"][\"mfa\"]\n        bank_mfa_list = []\n        if bank_mfa_code is not None:\n            for code in bank_mfa_code:\n                bank_mfa_list.append(code)\n        bank_mfa_list = \",\".join(bank_mfa_list)\n        bank_mfa_list = bank_mfa_list.replace(\"'\", \"\").replace(\"\\\"\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"[\", \"\").replace(\"]\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\" \", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"\\\\\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"n\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"u\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"l\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"t\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"r\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"e\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"s\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"i\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"c\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"o\", \"\")\n        bank_mfa_list = bank_mfa_list.replace(\"d\", \"\")\n        bank_", "CodeBleu_score": 27.113294005564182}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t# Get last integration date\n    last_integration_date = frappe.db.get_value(\n        \"Bank\", bank, \"last_integration_date\"\n    )\n\n    # Get transactions\n    transactions = get_transactions(bank, bank_account)\n\n    # Process transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update last integration date\n    if len(transactions) > 0:\n        frappe.db.set_value(\n            \"Bank\", bank, \"last_integration_date\", transactions[0][\"date\"]\n        )\n\n    # Log result\n    frappe.log_error(\n        message=_(\"{} new transactions added to {} for {}.\").format(\n            len(new_transactions), bank, bank_account\n        ),\n        title=_(\"Plaid Transactions Synced\"),\n    )\n\n", "CodeBleu_score": 20.936255423936895}, {"code": "def sync_transactions(bank, bank_account)\n\tlast_integration_date = get_last_integration_date(bank, bank_account)\n    if last_integration_date:\n        start_date = get_start_date(last_integration_date)\n        end_date = getdate()\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        new_transactions = process_transactions(transactions, bank, bank_account)\n        update_last_integration_date(bank, bank_account, end_date)\n        if new_transactions:\n            frappe.msgprint(\n                _(\"Added {0} new transactions\").format(len(new_transactions)), alert=True\n            )\n    else:\n        frappe.msgprint(\n            _(\"Please set the last integration date for {0}\").format(bank_account),\n            alert=True,\n        )\n\n", "CodeBleu_score": 22.84555461533946}, {"code": "def sync_transactions(bank, bank_account)\n\t# Get the last integration date for the bank account\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    # Get the start and end dates for the transaction retrieval\n    if last_integration_date:\n        start_date = add_to_date(last_integration_date, days=1)\n        end_date = nowdate()\n    else:\n        start_date = add_to_date(nowdate(), days=-30)\n        end_date = nowdate()\n\n    # Get the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date\n    frappe.db.set_value(\n        \"Bank Account\", bank_account, \"last_integration_date\", nowdate()\n    )\n\n    # Log the number of new transactions added\n    frappe.log_error(\n        message=f\"Added {len(new_transactions)} new bank transactions\",\n        title=f\"Plaid Sync: {bank} {bank_account}\",\n    )\n\n    # Handle any exceptions\n    if transactions:\n        return\n    else:\n        frappe.log_error(\n            message=\"There was an error syncing transactions.\",\n            title=f\"Plaid Sync: {bank} {bank_account}\",\n        )\n\n", "CodeBleu_score": 37.83369923835734}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\tself._publish({\"event\": \"progress\", \"message\": _(\"Migrating {0}\").format(entity)})\n    start_position = 1\n    max_results = 1000\n    uri = f\"{self.company_uri}/{entity}?minorversion=69\"\n    while True:\n        response = self._get(uri, params={\"startPosition\": start_position, \"maxResults\": max_results})\n        if response.status_code == 200:\n            entries = response.json().get(\"QueryResponse\", {}).get(\"{0}\".format(entity), [])\n            if not entries:\n                break\n            start_position += len(entries)\n            self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)\n        else:\n            self._log_error(response.text)\n            break", "CodeBleu_score": 34.34202845738523}, {"code": "def _migrate_entries(self, entity)\n\t# Construct the query URI\n    uri = self._construct_query_uri(entity)\n\n    # Determine the total number of entries\n    total = self._get_total(uri)\n\n    # Retrieve the entries in batches of 1000\n    for start in range(0, total, 1000):\n        # Fetch the entries\n        entries = self._get_entries(uri, start)\n\n        # Preprocess the entries\n        entries = self._preprocess_entries(entity, entries)\n\n        # Save the entries\n        self._save_entries(entity, entries)\n\n", "CodeBleu_score": 15.000993299982024}, {"code": "def _migrate_entries(self, entity)\n\tdef _get_entries(self, entity, start_position=0, max_results=1000):\n        \"\"\"This function constructs a query URI, determines the total number of entries, and retrieves them in batches of 1000.\"\"\"\n        uri = self.base_uri + f\"/company/{self.realm_id}/query?query=select * from {entity} startposition {start_position} maxresults {max_results}\"\n        response = self._get(uri)\n        if response.status_code == 200:\n            response_json = response.json()\n            total_entries = response_json.get(\"totalCount\")\n            if total_entries > 0:\n                return response_json.get(\"QueryResponse\").get(entity), total_entries\n            else:\n                return None, total_entries\n        else:\n            self._log_error(\n                execption=QuickBooksMigrationError,\n                data={\n                    \"status_code\": response.status_code,\n                    \"response_text\": response.text,\n                },\n            )\n            return None, 0\n\n    def _preprocess_entries(self, entity, entries):\n        \"\"\"This function preprocesses entries before saving them to the database.\"\"\"\n        entity_method_map = {\n            \"Account\": self._preprocess_accounts,\n            \"TaxRate\": self._preprocess_tax_rates,\n            \"TaxCode\": self._preprocess_tax_codes,\n        }\n        preprocessor = entity_method_map.get(entity)\n        if preprocessor:\n            entries = preprocessor(entries)\n        return entries\n\n    def _save_entries(self, entity, entries):\n        \"\"\"This function saves entries to the database.\"\"\"\n        entity_method_map = {\n            \"Account\": self._save_account,\n            \"TaxRate\": self._save_tax_rate,\n            \"TaxCode\": self._save_tax_code,\n            \"Preferences\": self._save_preference,\n            \"Customer\": self._save_customer,\n            \"Item\": self._save_item,\n            \"Vendor\": self._save_vendor", "CodeBleu_score": 25.41690238232389}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\tquickbooks_id = invoice[\"Id\"]\n    if invoice[\"DocNumber\"]:\n        quickbooks_id = invoice[\"DocNumber\"]\n    if invoice[\"LinkedTxn\"]:\n        for linked_txn in invoice[\"LinkedTxn\"]:\n            if linked_txn[\"TxnType\"] == \"StatementCharge\" or linked_txn[\"TxnType\"] == \"ReimburseCharge\":\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                return\n    if invoice[\"TxnType\"] == \"Invoice\":\n        self._save_sales_invoice(invoice, quickbooks_id)\n    elif invoice[\"TxnType\"] == \"CreditMemo\":\n        self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n    elif invoice[\"TxnType\"] == \"InvoiceCreditCard\":\n        self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n    elif invoice[\"TxnType\"] == \"InvoiceCheck\":\n        self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n    elif invoice[\"TxnType\"] == \"InvoiceOnAccount\":\n        self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n    elif invoice[\"TxnType\"] == \"InvoiceOnAccountCreditCard\":\n        self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n    elif invoice[\"TxnType\"] == \"InvoiceOnAccountCheck\":\n        self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n    elif invoice[\"TxnType\"] == \"InvoiceOnAccountCreditCard\":\n        self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n    elif invoice[\"TxnType\"] == \"InvoiceOnAccountCheck\":\n        self._save_sales_in", "CodeBleu_score": 30.227261651286412}, {"code": "def _save_invoice(self, invoice)\n\tquickbooks_id = self._get_quickbooks_id(invoice)\n    if invoice[\"InvoiceType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 40.19190159136292}, {"code": "def _save_invoice(self, invoice)\n\tquickbooks_id = invoice[\"Id\"]\n    if invoice[\"InvoiceType\"] == \"StatementCharge\" or invoice[\"InvoiceType\"] == \"ReimburseCharge\":\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 41.92130406981117}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# calculate the interval between visits\n    interval = (end_date - start_date).days / no_of_visit\n\n    # create a list of dates\n    schedule_dates = [start_date + timedelta(days=i * interval) for i in range(no_of_visit)]\n\n    # validate schedule dates for holidays\n    for i in range(len(schedule_dates)):\n        schedule_dates[i] = self.validate_schedule_date_for_holiday_list(schedule_dates[i], sales_person)\n\n    return schedule_dates\n\n", "CodeBleu_score": 24.681642022872573}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# get holiday list for sales person\n    holiday_list = get_holiday_list_for_employee(frappe.db.get_value(\"Sales Person\", sales_person, \"employee\"))\n\n    # get holidays\n    holidays = frappe.db.sql_list(\n        \"\"\"select holiday_date from `tabHoliday` where parent=%s\"\"\", holiday_list\n    )\n\n    # get weekends\n    weekends = frappe.db.sql_list(\n        \"\"\"select weekday from `tabHoliday List` where name=%s\"\"\", holiday_list\n    )\n\n    # get weekday numbers from weekend list\n    weekend_days = [\n        get_weekday_number(day) for day in weekends if day not in [\"Saturday\", \"Sunday\"]\n    ]\n\n    # get weekend day numbers\n    weekend_days = [\n        get_weekday_number(day) for day in weekends if day not in [\"Saturday\", \"Sunday\"]\n    ]\n\n    # get weekend day numbers\n    weekend_days = [\n        get_weekday_number(day) for day in weekends if day not in [\"Saturday\", \"Sunday\"]\n    ]\n\n    # calculate interval\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n\n    # create list of dates\n    schedule = [\n        add_days(start_date, i * interval) for i in range(no_of_visit) if i != 0\n    ]\n\n    # adjust dates to avoid holidays\n    for i in range(len(schedule)):\n        # max iterations = len(holidays)\n        for _i in range(len(holidays)):\n            if schedule[i] in holidays:\n                schedule[i] = add_days(schedule[i], -1)\n            else:\n                break\n\n        # adjust dates to avoid weekends\n        if get_weekday_number(schedule[i]) in weekend_days:\n            schedule[i] = add_days(schedule[i], -1", "CodeBleu_score": 28.687449552842555}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\tif not no_of_visit:\n        no_of_visit = 1\n\n    if not start_date:\n        start_date = frappe.utils.nowdate()\n\n    if not end_date:\n        end_date = add_days(start_date, 365)\n\n    if start_date > end_date:\n        frappe.throw(_(\"Start Date cannot be greater than End Date\"))\n\n    schedule_dates = []\n    interval = (end_date - start_date).days / no_of_visit\n\n    for i in range(no_of_visit):\n        schedule_date = add_days(start_date, interval * i)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_dates.append(schedule_date)\n\n    return schedule_dates\n\n", "CodeBleu_score": 40.05338125588837}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n       $handle = $this->actions[$method]['handle'] ?? 'update';\n       $url = route('bulk-actions.action', $this->path);\n\n       $html = view('components.index.bulkaction.modal', [\n           'url' => $url,\n           'handle' => $handle,\n           'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n           'html' => view($view, $data)->render(),\n       ])->render();\n\n       return response()->json([\n           'success' => true,\n           'error' => false,\n           'message' => '',\n           'data' => [\n               'title' => $this->findTranslation($this->text),\n               'path' => $url,\n               'handle' => $handle,\n           ],\n           'html' => $html,\n       ]);\n   }", "CodeBleu_score": 97.56307678458869}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n       $handle = $this->actions[$method]['handle'] ?? 'update';\n       $url = route('bulk-actions.action', $this->path);\n\n       $html = view('components.index.bulkaction.modal', [\n           'url' => $url,\n           'handle' => $handle,\n           'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n           'html' => view($view, $data)->render(),\n       ])->render();\n\n       return response()->json([\n           'success' => true,\n           'error' => false,\n           'message' => '',\n           'data' => [\n               'title' => $this->findTranslation($this->text),\n               'path' => $url,\n               'handle' => $handle,\n           ],\n           'html' => $html,\n       ]);\n   }", "CodeBleu_score": 97.56307678458869}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $contact->delete();\n        } catch (Exception $e) {\n            $this->error($e->getMessage());\n        }\n    }\n\n    return redirect()->back();\n}", "CodeBleu_score": 55.32480120808203}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    if (!$contacts) {\n        return;\n    }\n\n    foreach ($contacts as $contact) {\n        try {\n            $contact->delete();\n        } catch (Exception $e) {\n            $this->error($e->getMessage());\n        }\n    }\n\n    $this->success('Contacts deleted successfully.');\n}", "CodeBleu_score": 54.310013969550816}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $contact->delete();\n        } catch (Exception $e) {\n            $this->error($e->getMessage());\n        }\n    }\n}", "CodeBleu_score": 54.69808313046912}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatchNow(new DeleteTransaction($transaction));\n        } catch (Exception $e) {\n            flash()->error(__('admin.flash.error'), __('admin.flash.error_message'));\n        }\n    }\n\n    flash()->success(__('admin.flash.success'), __('admin.flash.success_message'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 52.56878489113993}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->deleteTransaction($transaction);\n        } catch (Exception $e) {\n            $this->flashError($e->getMessage());\n        }\n    }\n}", "CodeBleu_score": 54.58564316203186}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $transaction->delete();\n        } catch (\\Exception $e) {\n            flash()->error(__('error.delete_failed', ['name' => $transaction->name]));\n        }\n    }\n\n    flash()->success(__('transaction.delete_success'));\n\n    return redirect()->route('transactions.index');\n}", "CodeBleu_score": 55.781189148563726}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t// Check if the request class exists\n    $requestClass = $this->getRequestClass();\n    if (!class_exists($requestClass)) {\n        return;\n    }\n\n    // Check if the request class is an instance of FormRequest\n    $reflectionClass = new ReflectionClass($requestClass);\n    if (!$reflectionClass->isSubclassOf(FormRequest::class)) {\n        return;\n    }\n\n    // Get the request instance\n    $request = new $requestClass();\n\n    // Prepare the validation rules\n    $rules = $request->rules();\n    $rules = $this->prepareRules($rules);\n\n    // Validate each data row\n    foreach ($this->all() as $data) {\n\n        // Initialize the request\n        $request->initialize($this->query(), $data, $this->attributes, $this->cookies, $this->files, $this->server, $this->content);\n\n        // Prepare the validation rules\n        $request->setContainer($this->getContainer());\n        $request->setRouteResolver($this->getRouteResolver());\n        $request->setUserResolver($this->getUserResolver());\n        $request->setDefaultLocale($this->getDefaultLocale());\n\n        // Validate the data\n        try {\n            $request->validateResolved();\n        } catch (ValidationException $exception) {\n            $validator->errors()->add($data);\n            throw $exception;\n        }\n    }\n}", "CodeBleu_score": 38.60479123504293}, {"code": "<?\npublic function withValidator($validator){\n\t$requestClass = $this->getRequestClass();\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    $request = new $requestClass();\n    $rules = $request->prepareRules($this->rules());\n\n    foreach ($this->all() as $key => $value) {\n        $request->merge([$key => $value]);\n        $request->setContainer($this->container);\n        $request->setRedirector($this->redirector);\n        $request->setUserResolver($this->userResolver);\n        $request->setRouteResolver($this->routeResolver);\n        $request->setValidator($validator);\n\n        try {\n            $request->validateResolved();\n        } catch (ValidationException $exception) {\n            $validator->errors()->add($key, $exception->validator->errors()->first($key));\n            throw $exception;\n        }\n    }\n}", "CodeBleu_score": 41.47804701050316}, {"code": "<?\npublic function withValidator($validator){\n\t$requestClass = 'App\\\\Http\\\\Requests\\\\' . str_replace(' ', '', ucwords(str_replace(['-', '_'], ' ', $this->route()->getName())));\n\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    $request = new $requestClass();\n\n    foreach ($this->all() as $key => $value) {\n        $request->merge([$key => $value]);\n    }\n\n    $rules = $request->prepareRules($request->rules());\n\n    foreach ($rules as $key => $rule) {\n        $validator->addImplicitExtension($key, $rule);\n    }\n\n    try {\n        $request->setContainer($this->container)->validateResolved();\n    } catch (ValidationException $exception) {\n        $validator->errors()->add($exception->errors());\n\n        throw $exception;\n    }\n}", "CodeBleu_score": 44.97830278915369}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (method_exists($this, 'setModel')) {\n        $this->setModel(...$arguments);\n    }\n\n    if (method_exists($this, 'setRequest')) {\n        $this->setRequest(...$arguments);\n    }\n}", "CodeBleu_score": 17.590368353970405}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (count($arguments) === 0) {\n        return;\n    }\n\n    if ($arguments[0] instanceof Model) {\n        $this->setModel($arguments[0]);\n    }\n\n    if ($arguments[0] instanceof Request) {\n        $this->setRequest($arguments[0]);\n    }\n\n    if (count($arguments) > 1) {\n        if ($arguments[1] instanceof Request) {\n            $this->setRequest($arguments[1]);\n        }\n    }\n\n    if ($this instanceof ShouldUpdate) {\n        $this->update();\n    }\n}", "CodeBleu_score": 37.91433100676396}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this instanceof ShouldUpdate) {\n        $this->update(...$arguments);\n    }\n}", "CodeBleu_score": 13.0601447376125}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$request = request();\n  $sort = $request->get('sort');\n  $search = $request->get('search');\n  $limit = $request->get('limit') ?: config('settings.pagination.limit');\n\n  $query->when($search, function ($query, $search) {\n   return $query->where('name', 'like', \"%$search%\");\n  })->when($sort, function ($query, $sort) {\n   $sort = explode('|', $sort);\n   return $query->orderBy($sort[0], $sort[1]);\n  });\n\n  if (!$request->expectsJson() && !$request->is('api/*')) {\n   return $query->paginate($limit);\n  }\n\n  return $query->get();\n }", "CodeBleu_score": 52.54099207508492}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$sort = $sort ?: 'name';\n  $order = Input::get('order') === 'asc' ? 'asc' : 'desc';\n\n  // If we are not searching, sort by the requested field.\n  if (!Input::get('search')) {\n    $query->orderBy($sort, $order);\n  }\n\n  // If we are searching, sort by relevance.\n  if (Input::get('search')) {\n    $query->orderBy('relevance', 'desc');\n  }\n\n  // If we are not requesting JSON, paginate the results.\n  if (!Request::wantsJson() && !Request::is('api/*')) {\n    $limit = Input::get('limit') ?: 10;\n    $query->paginate($limit);\n  }\n\n  return $query;\n}", "CodeBleu_score": 36.96306146842283}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t// Check if the request expects a JSON response and is not an API request\n  if (request()->expectsJson() && !request()->is('api/*')) {\n\n    // Retrieve the sort parameter from the request\n    $sort = request()->sort;\n\n    // Apply search and sorting to the query\n    $query->search(request()->search)->orderBy($sort, request()->direction);\n\n    // Return all records\n    return $query->get();\n\n  } else {\n\n    // Apply search and sorting to the query\n    $query->search(request()->search)->orderBy($sort, request()->direction);\n\n    // Paginate the results based on a limit from the request or a default setting\n    return $query->paginate(request('limit', 50));\n\n  }\n\n}", "CodeBleu_score": 34.08399090196304}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return array($openAmount, $overdueAmount);\n    }\n\n    if ($model->status == 'partial') {\n        $openAmount = $model->amount - $model->paid_amount;\n    }\n\n    $now = new DateTime();\n    $dueDate = new DateTime($model->due_date);\n\n    if ($dueDate > $now) {\n        $openAmount = $openAmount;\n        $overdueAmount = 0;\n    } else {\n        $openAmount = 0;\n        $overdueAmount = $openAmount;\n    }\n\n    return array($openAmount, $overdueAmount);\n}", "CodeBleu_score": 46.19925638125812}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t// Initialize the amounts\n    $open = 0;\n    $overdue = 0;\n\n    // Check if the document status is paid, return zeroes if true\n    if ($model->status == 'paid') {\n        return array('open' => $open, 'overdue' => $overdue);\n    }\n\n    // Sum the payments from transactions\n    $payments = $model->transactions->sum('amount');\n\n    // Determine if the document is open or overdue based on the due date and adjust the amounts accordingly\n    if (Carbon::now()->gt($model->due_at)) {\n        $overdue = $model->amount - $payments;\n    } else {\n        $open = $model->amount - $payments;\n    }\n\n    return array('open' => $open, 'overdue' => $overdue);\n}", "CodeBleu_score": 40.42400402084848}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open = 0;\n    $overdue = 0;\n\n    if ($model->status == 'paid') {\n        return array($open, $overdue);\n    }\n\n    if ($model->status == 'partial') {\n        $open = $model->total - $model->paid;\n    }\n\n    if ($model->due_date < date('Y-m-d')) {\n        $overdue = $open;\n        $open = 0;\n    }\n\n    return array($open, $overdue);\n}", "CodeBleu_score": 35.85513836448364}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = $this->model->getConnection()->select($this->getPaginationQuery($columns));\n    $total = $this->getTotalCount($results);\n    return $this->paginator($total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 75.02671322986843}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->getTotalCount()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.14074361889146}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: LengthAwarePaginator::resolveCurrentPage($pageName);\n\n    $total = $this->getCountForPagination($columns);\n\n    $this->forPage($page, $perPage);\n\n    return new LengthAwarePaginator($this->get($columns), $total, $perPage, $page, [\n        'path' => LengthAwarePaginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 54.06785824890499}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t// Retrieve the reconciliations\n\t$reconciliations = $this->retrieveReconciliations($request);\n\n\t// Process each reconciliation\n\tforeach ($reconciliations as $reconciliation) {\n\t\t// Begin a database transaction\n\t\t$this->beginTransaction();\n\n\t\t// Set the reconciliation's status to reconciled\n\t\t$reconciliation->setStatus(Reconciliation::RECONCILED);\n\n\t\t// Save the reconciliation\n\t\t$this->save($reconciliation);\n\n\t\t// Mark all transactions within the reconciliation's date range and account ID as reconciled\n\t\t$this->markTransactionsAsReconciled($reconciliation);\n\n\t\t// Commit the database transaction\n\t\t$this->commit();\n\t}\n}", "CodeBleu_score": 31.933498780573586}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->reconciliationRepository->findBy($request->all());\n    $reconciliationIds = $reconciliations->pluck('id')->toArray();\n\n    $this->reconciliationRepository->reconcile($reconciliationIds);\n\n    return $reconciliations;\n}", "CodeBleu_score": 23.915727996832764}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = Reconciliation::where('status', 'pending')->get();\n    $reconciliations->each(function($reconciliation) use($request) {\n        DB::transaction(function() use($reconciliation, $request) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n                ->get();\n            $transactions->each(function($transaction) {\n                $transaction->status = 'reconciled';\n                $transaction->save();\n            });\n        });\n    });\n    return $reconciliations;\n}", "CodeBleu_score": 42.63455055223023}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n\n    $invitation = $this->user->invitations()->create([\n        'token' => Str::random(60),\n    ]);\n\n    try {\n        SendUserInvitation::dispatch($this->user, $invitation->token);\n    } catch (Throwable $e) {\n        throw new Exception(\"Failed to send invitation notification to {$this->user->email}.\");\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 22.643982470614336}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$invitation = $this->getExistingInvitation();\n\n    if ($invitation) {\n        $invitation->delete();\n    }\n\n    $invitation = $this->createInvitation();\n\n    try {\n        $this->dispatchNotification($invitation);\n    } catch (Throwable $e) {\n        throw new Exception('Failed to dispatch notification.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 18.938736054090846}, {"code": "<?\npublic function handle(): UserInvitation{\n\t$this->beginTransaction();\n\n    try {\n        $this->deleteExistingInvitations();\n        $invitation = $this->createInvitation();\n        $this->sendNotification($invitation);\n        $this->commit();\n\n        return $invitation;\n    } catch (Throwable $e) {\n        $this->rollBack();\n\n        throw new Exception($e->getMessage());\n    }\n}", "CodeBleu_score": 15.36683349463644}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif ($this->isReconciled()) {\n        throw new Warning('The transaction has been reconciled.');\n    }\n    if ($this->isTransfer()) {\n        throw new Unauthorized('Transfer transactions cannot be authorized.');\n    }\n}", "CodeBleu_score": 26.363844103181943}, {"code": "<?\npublic function authorize(): void{\n\tif ($this->isReconciled()) {\n        throw new Exception('This transaction has already been reconciled.');\n    }\n\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException('You are not authorized to reconcile this transaction.');\n    }\n}", "CodeBleu_score": 27.39203768737343}, {"code": "<?\npublic function authorize(): void{\n\t$this->checkReconciled();\n    $this->checkTransfer();\n}", "CodeBleu_score": 6.100635871423017}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t// Allow access to the table if the tenant ID is not zero\n    return !(getTenantId() == 0);\n}", "CodeBleu_score": 1.6992861473222587}, {"code": "public boolean doTableFilter(String tableName){\n\t// If the table is not the table that contains the tenant ID, return true.\n    if (!tableName.equals(\"Tenant\")) {\n        return true;\n    }\n\n    // Get the tenant ID from the request.\n    String tenantId = (String) request.getAttribute(\"tenantId\");\n\n    // If the tenant ID is zero, deny access.\n    if (tenantId.equals(\"0\")) {\n        return false;\n    }\n\n    // If the tenant ID is not zero, allow access.\n    return true;\n}", "CodeBleu_score": 15.888975038620993}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tableName.equals(\"Tenant\")) {\n        return true;\n    }\n    else if (tableName.equals(\"TenantSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"User\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.equals(\"UserSettings\")) {\n        return true;\n    }\n    else if (tableName.", "CodeBleu_score": 16.1416970617583}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer configurer = new MapperScannerConfigurer();\n    configurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    configurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return configurer;\n}", "CodeBleu_score": 65.85799950173215}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2261177705181}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n        try {\n            List<Account> dataList = accountService.findBySelect();\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataList) {\n                for (Account account : dataList) {\n                    JSONObject item = new JSONObject();\n                    item.put(\"Id\", account.getId());\n                    //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                    item.put(\"AccountName\", account.getName());\n                    dataArray.add(item);\n                }\n            }\n            res = dataArray.toJSONString();\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.33015826942281}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.3157593543147}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.3157593543147}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.3157593543147}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId!=0L) {\n                        if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 97.51914551835033}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.01358572267596}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.01358572267596}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\n\ttry {\n\n\t\t// Get the system configuration list from the service\n\t\tList<SystemConfiguration> configList = getSystemConfigurationList();\n\n\t\t// If the list is not empty, set the response code to 200 and include the first item in the response data\n\t\tif (!configList.isEmpty()) {\n\t\t\tresponse.setResponseCode(200);\n\t\t\tresponse.setResponseData(configList.get(0));\n\t\t}\n\n\t\t// Otherwise, set the response code to 404 and include an error message in the response data\n\t\telse {\n\t\t\tresponse.setResponseCode(404);\n\t\t\tresponse.setResponseMessage(\"No system configuration found\");\n\t\t}\n\t}\n\n\t// If an exception occurs, log the error, set the response code to 500, and include an error message in the response data\n\tcatch (Exception e) {\n\t\tlog.error(\"Error retrieving system configuration\", e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseMessage(\"Error retrieving system configuration\");\n\t}\n\n\treturn response;\n}", "CodeBleu_score": 27.58718187117055}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfiguration> configList = systemConfigurationService.getSystemConfigurationList();\n\t\tif (configList != null && configList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(configList.get(0));\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error retrieving system configuration list\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.78868808362364}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n\n    try {\n\n        // get the system configuration list from the service\n        List<SystemConfiguration> configList = getSystemConfigurationService().getSystemConfigurationList();\n\n        // if the list is not empty, set the response code to 200 and include the first item in the response data\n        if (configList.size() > 0) {\n            response.setResponseCode(200);\n            response.setResponseData(configList.get(0));\n        }\n\n        // if the list is empty, set the response code to 404 and include an error message in the response data\n        else {\n            response.setResponseCode(404);\n            response.setResponseData(\"No system configuration information available\");\n        }\n\n    }\n\n    // if an exception occurs, log the error, set the response code to 500, and include an error message in the response data\n    catch (Exception e) {\n        log.error(e);\n        response.setResponseCode(500);\n        response.setResponseData(\"An error occurred while attempting to retrieve system configuration information\");\n    }\n\n    // return the response\n    return response;\n\n}", "CodeBleu_score": 34.4366223332252}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\t// get the file upload type\n\t\t\tString fileUploadType = request.getParameter(\"fileUploadType\");\n\t\t\t\n\t\t\t// get the business path\n\t\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\t\t\n\t\t\t// get the uploaded file\n\t\t\tMultipartFile file = request.getFile(\"file\");\n\t\t\t\n\t\t\t// create a new file uploader\n\t\t\tFileUploader fileUploader = new FileUploader();\n\t\t\t\n\t\t\t// save the file to the appropriate location\n\t\t\tString filePath = fileUploader.saveFile(fileUploadType, businessPath, file);\n\t\t\t\n\t\t\t// set the response code and data\n\t\t\tres.setCode(200);\n\t\t\tres.setData(filePath);\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\t\n\t\t\t// log the exception\n\t\t\tlog.error(\"Exception caught in FileUploadController.upload: \" + e.getMessage());\n\t\t\t\n\t\t\t// set the response code and data\n\t\t\tres.setCode(500);\n\t\t\tres.setData(\"Exception caught in FileUploadController.upload: \" + e.getMessage());\n\t\t\t\n\t\t}\n\t\t\n\t\treturn res;\n\t\t\n\t}", "CodeBleu_score": 32.31768712828769}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    String path = request.getParameter(\"path\");\n    String file = request.getParameter(\"file\");\n    String fileUploadType = request.getParameter(\"fileUploadType\");\n    String fileName = \"\";\n    try {\n        if (fileUploadType.equals(\"local\")) {\n            File file1 = new File(file);\n            fileName = file1.getName();\n            FileUtils.copyFile(file1, new File(path + fileName));\n        } else if (fileUploadType.equals(\"oss\")) {\n            fileName = AliOssUtil.uploadFile(file, path);\n        }\n        res.setCode(200);\n        res.setData(fileName);\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.setCode(500);\n        res.setData(e.getMessage());\n    }\n    return res;\n}", "CodeBleu_score": 35.84670673150014}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // Get the business path\n        String businessPath = request.getParameter(\"dir\");\n        // Get the uploaded file\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\"file\");\n        // Get the file upload type\n        String type = request.getParameter(\"type\");\n        // Save the file\n        if (type.equals(\"local\")) {\n            // Save the file locally\n            String path = request.getSession().getServletContext().getRealPath(\"/\") + \"upload/\" + businessPath;\n            File dir = new File(path);\n            if (!dir.exists()) {\n                dir.mkdirs();\n            }\n            String fileName = file.getOriginalFilename();\n            String filePath = path + \"/\" + fileName;\n            File dest = new File(filePath);\n            file.transferTo(dest);\n            res.setCode(200);\n            res.setData(filePath);\n        } else {\n            // Save the file to AliOss\n            String fileName = file.getOriginalFilename();\n            String filePath = businessPath + \"/\" + fileName;\n            ossClient.putObject(bucketName, filePath, file.getInputStream());\n            res.setCode(200);\n            res.setData(filePath);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        res.setCode(500);\n        res.setData(e.getMessage());\n    }\n    return res;\n}", "CodeBleu_score": 41.24773614578615}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = new Account();\n        account.setAccountId(obj.getLong(\"accountId\"));\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setType(obj.getString(\"type\"));\n        account.setInitialAmount(obj.getBigDecimal(\"initialAmount\"));\n        account.setIsDefault(obj.getBoolean(\"isDefault\"));\n        account.setEnableStatus(obj.getInteger(\"enableStatus\"));\n        account.setRemark(obj.getString(\"remark\"));\n        account.setTenantId(obj.getLong(\"tenantId\"));\n        account.setDeleteFlag(0);\n        account.setCreateTime(new Date());\n        account.setUpdateTime(new Date());\n        account.setCreateUser(obj.getLong(\"createUser\"));\n        account.setUpdateUser(obj.getLong(\"updateUser\"));\n        int result=0;\n        try{\n            result=accountMapperEx.insertAccount(account);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 37.34997855553077}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result=0;\n    try{\n        Account account=new Account();\n        account.setCreatedTime(new Date());\n        account.setIsDefault(0);\n        account.setIsEnable(1);\n        account.setAmount(0);\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setName(obj.getString(\"name\"));\n        account.setRemark(obj.getString(\"remark\"));\n        account.setType(obj.getString(\"type\"));\n        account.setTaxRate(obj.getBigDecimal(\"taxRate\"));\n        account.setTaxAmount(BigDecimal.ZERO);\n        account.setTaxType(obj.getString(\"taxType\"));\n        account.setTaxNumber(obj.getString(\"taxNumber\"));\n        account.setTaxAddress(obj.getString(\"taxAddress\"));\n        account.setTaxPhone(obj.getString(\"taxPhone\"));\n        account.setTaxBank(obj.getString(\"taxBank\"));\n        account.setTaxAccount(obj.getString(\"taxAccount\"));\n        account.setTaxRate(obj.getBigDecimal(\"taxRate\"));\n        account.setTaxType(obj.getString(\"taxType\"));\n        account.setTaxNumber(obj.getString(\"taxNumber\"));\n        account.setTaxAddress(obj.getString(\"taxAddress\"));\n        account.setTaxPhone(obj.getString(\"taxPhone\"));\n        account.setTaxBank(obj.getString(\"taxBank\"));\n        account.setTaxAccount(obj.getString(\"taxAccount\"));\n        account.setTaxRate(obj.getBigDecimal(\"taxRate\"));\n        account.setTaxType(obj.getString(\"taxType\"));\n        account.setTaxNumber(obj.getString(\"taxNumber\"));\n        account.setTaxAddress(obj.getString(\"taxAddress\"));\n        account.setTaxPhone(obj.getString(\"taxPhone\"));\n        account.setTaxBank(obj.getString(\"taxBank\"));\n        account.setTaxAccount(obj.getString(\"taxAccount\"));\n        account.setTaxRate(obj.getBigDecimal(\"taxRate\"));\n        account.setTaxType(obj.getString(\"taxType\"));", "CodeBleu_score": 24.155341512763286}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = new Account();\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setType(obj.getString(\"type\"));\n        account.setOrganization(obj.getString(\"organization\"));\n        account.setRemark(obj.getString(\"remark\"));\n        account.setAmount(obj.getBigDecimal(\"amount\"));\n        account.setEnabled(obj.getBoolean(\"enabled\"));\n        account.setTenantId(obj.getLong(\"tenantId\"));\n        account.setDeleteFlag(0);\n        account.setCreateTime(new Date());\n        account.setUpdateTime(new Date());\n        account.setCreateUser(request.getHeader(\"userName\"));\n        account.setUpdateUser(request.getHeader(\"userName\"));\n        account.setTenantId(Long.valueOf(request.getHeader(\"tenantId\")));\n        account.setDeleteFlag(0);\n        account.setAccountId(getSequence());\n        // \u5224\u65ad\u662f\u5426\u4e3a\u9ed8\u8ba4\u8d26\u6237\n        if (obj.getBoolean(\"defaultAccount\")) {\n            // \u5224\u65ad\u662f\u5426\u5b58\u5728\u9ed8\u8ba4\u8d26\u6237\n            if (accountMapperEx.getDefaultAccount() == null) {\n                account.setDefaultAccount(true);\n            }\n        }\n        // \u5224\u65ad\u8d26\u6237\u662f\u5426\u5b58\u5728\n        if (accountMapperEx.getAccountByName(account.getName()) != null) {\n            return 0;\n        }\n        // \u5224\u65ad\u8d26\u6237\u662f\u5426\u5b58\u5728\n        if (accountMapperEx.getAccountBySerialNo(account.getSerialNo()) != null) {\n            return 0;\n        }\n        // \u5224\u65ad\u8d26\u6237\u662f\u5426\u5b58\u5728\n        if (accountMapperEx.getAccountBySerialNoAndName(account.getSerialNo(), account.getName()) != null) {\n            return 0;\n        }\n        // \u5224\u65ad\u8d26\u6237\u662f\u5426\u5b58\u5728\n        if (accountMapperEx.getAccountBySerialNoAndNameAndType(account.getSerialNo(), account.getName(), account.getType()) != null) {\n            return 0;\n        }", "CodeBleu_score": 26.965967291747674}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return null;\n    }\n}", "CodeBleu_score": 29.639842477086585}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error listing accounts\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.39647442412162}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return getMapper().count(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error calling listWithBalanceCount\", e);\n        return null;\n    }\n}", "CodeBleu_score": 29.302404899299784}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Exception in deleteDepotItem() : \", e);\n\t\tthrow e;\n\t}\n\treturn result;\n}", "CodeBleu_score": 59.70923631065575}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tDepotItem depotItem = null;\n\t\n\ttry {\n\t\t\n\t\tdepotItem = depotItemMapper.getDepotItemById(id);\n\t\t\n\t\tif (depotItem == null) {\n\t\t\t\n\t\t\tthrow new Exception(\"Depot item with ID \" + id + \" does not exist.\");\n\t\t\t\n\t\t}\n\t\t\n\t\tint result = depotItemMapper.deleteDepotItem(id);\n\t\t\n\t\tif (result == 0) {\n\t\t\t\n\t\t\tthrow new Exception(\"Depot item with ID \" + id + \" could not be deleted.\");\n\t\t\t\n\t\t}\n\t\t\n\t\treturn result;\n\t\t\n\t} catch (Exception e) {\n\t\t\n\t\tlog.error(\"Depot item with ID \" + id + \" could not be deleted.\", e);\n\t\t\n\t\trequest.setAttribute(\"error\", e.getMessage());\n\t\t\n\t\treturn 0;\n\t\t\n\t}\n\t\n}", "CodeBleu_score": 44.221099449791666}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\ttry {\n\t\treturn depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\trequest.setAttribute(\"message\", \"Error deleting depot item: \" + e.getMessage());\n\t\treturn 0;\n\t}\n}", "CodeBleu_score": 24.57766286414457}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tString endpoint = withProjectName(projectName) + \"add-node\";\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + endpoint + \"?type=\" + nodeType + \"&key=\" + nodeKey;\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpGet.addHeader(\"accept\", \"application/json\");\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tif (response.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 51.74359469854918}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString requestUrl = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(requestUrl);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\tif (response.contains(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 46.87723587491807}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString requestUrl = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(requestUrl);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity(), \"UTF-8\");\n\t\t\treturn response.contains(nodeKey);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 43.437528315907635}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edge/add?type=\" + edgeType + \"&from=\" + fromType + \"&to=\" + toType + \"&fromId=\" + from + \"&toId=\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString json = EntityUtils.toString(entity);\n\t\t\tJSONObject jsonObject = new JSONObject(json);\n\t\t\treturn jsonObject.has(\"key\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 52.241857032799174}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"edges/\" + edgeType + \"/\" + fromType + \"/\" + from + \"/\" + toType + \"/\" + to;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpGet.addHeader(\"accept\", \"application/json\");\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse.getStatusLine().getStatusCode() != 200) {\n\t\t\t\tthrow new RuntimeException(\"Failed : HTTP error code : \" + httpResponse.getStatusLine().getStatusCode());\n\t\t\t}\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\treturn jsonObject.has(\"key\");\n\t\t} catch (ClientProtocolException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 51.013743600143215}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tString endpoint = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + \"edges/\";\n\t\tString parameters = \"?type=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to;\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(endpoint + parameters);\n\t\t\thttpGet.addHeader(\"accept\", \"application/json\");\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity(), \"UTF-8\");\n\t\t\treturn response.contains(\"key\");\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 49.52032100108897}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n\t\tSystem.out.println(\"Event or message is null. Skipping event.\");\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setEventTime(System.currentTimeMillis());\n\tString json = gson.toJson(event);\n\tString topic = \"test\";\n\tif (event.getTarget() != null) {\n\t\ttopic = event.getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 44.880589952287565}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setEventTime(System.currentTimeMillis());\n\tString eventJson = event.toJson();\n\tString target = \"test\";\n\tif (event.getTarget() != null) {\n\t\ttarget = event.getTarget();\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(target, eventJson);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 43.514448497428084}, {"code": "public void sendEvent(Event event){\n\tif(event.getEventType() == null || event.getMessage() == null) {\n\t\tSystem.out.println(\"Event is null.\");\n\t\treturn;\n\t}\n\tif(event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setEventTime(System.currentTimeMillis());\n\tString json = event.toJson();\n\tString topic = \"test\";\n\tif(target != null) {\n\t\ttopic = target;\n\t}\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 41.93840018471027}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t// Initialize the OSS client.\n    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n    // Create a PutObjectRequest object.\n    PutObjectRequest putObjectRequest = new PutObjectRequest(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\n    // Upload the object.\n    PutObjectResult putObjectResult = ossClient.putObject(putObjectRequest);\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return putObjectResult.getObjectUrl();\n}", "CodeBleu_score": 34.38581666432739}, {"code": "public String upload(String objName, byte[] content){\n\ttry {\n            // Create an OSSClient instance.\n            OSS ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n            // Upload the file.\n            PutObjectResult putResult = ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\n            // Shut down the OSSClient instance.\n            ossClient.shutdown();\n\n            // Return the URL of the uploaded object.\n            return putResult.getResponse().getRequestId();\n        } catch (OSSException | ClientException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }", "CodeBleu_score": 38.80486216240213}, {"code": "public String upload(String objName, byte[] content){\n\t// 1. Create an OSSClient instance.\n    OSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n    // 2. Create a PutObjectRequest object.\n    PutObjectRequest putObjectRequest = new PutObjectRequest(config.getBucket(), objName, new ByteArrayInputStream(content));\n\n    // 3. Upload the object.\n    ossClient.putObject(putObjectRequest);\n\n    // 4. Shut down the OSSClient instance.\n    ossClient.shutdown();\n\n    // 5. Return the URL of the uploaded object.\n    return \"https://\" + config.getBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 42.74688102444176}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.99707200100481}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 26.27067021148933}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return getLocationInfoByIP(ipAddress);\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.5630876644544}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient == null || highLevelClient == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tif (lowLevelClient == null || highLevelClient == null) {\n\t\t\t\t\tList<HttpHost> httpHosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\t\tlowLevelClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\t\t\thighLevelClient = new RestHighLevelClient(lowLevelClient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 54.717103988299506}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (restClient != null && restHighLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (restClient != null && restHighLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> httpHosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\trestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n\t\t\trestHighLevelClient = new RestHighLevelClient(restClient);\n\t\t}\n\t}", "CodeBleu_score": 66.11328911867682}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (this.lowLevelClient != null && this.highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (this.lowLevelClient != null && this.highLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\t\tRestClientBuilder builder = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t\tif (getUsername() != null && getPassword() != null) {\n\t\t\t\tfinal CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(getUsername(), getPassword()));\n\t\t\t\tbuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\t\t\treturn httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.lowLevelClient = builder.build();\n\t\t\tthis.highLevelClient = new RestHighLevelClient(this.lowLevelClient);\n\t\t}\n\t}", "CodeBleu_score": 54.23903105740683}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n    if (clusterHostList != null && clusterHostList.length() > 0) {\n        String[] hostArray = clusterHostList.split(\",\");\n        for (String host : hostArray) {\n            if (host.trim().length() > 0) {\n                int port = clusterPort;\n                String hostString = host.trim();\n                int colonIndex = hostString.indexOf(\":\");\n                if (colonIndex != -1) {\n                    String portString = hostString.substring(colonIndex + 1);\n                    try {\n                        port = Integer.parseInt(portString);\n                    } catch (NumberFormatException e) {\n                        throw new IllegalArgumentException(\"Invalid port number: \" + portString);\n                    }\n                    hostString = hostString.substring(0, colonIndex);\n                }\n                hosts.add(new HttpHost(hostString, port));\n            }\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 35.565468269424905}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hostList = new ArrayList<>();\n    String[] hosts = clusterHostList.split(\",\");\n    for (String host : hosts) {\n        int port = clusterPort;\n        String[] hostParts = host.split(\":\");\n        if (hostParts.length == 2) {\n            port = Integer.parseInt(hostParts[1]);\n        }\n        hostList.add(new HttpHost(hostParts[0], port));\n    }\n    return hostList;\n}", "CodeBleu_score": 44.581214518206}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        if (hostAndPort.length == 2) {\n            hosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n        } else {\n            hosts.add(new HttpHost(hostAndPort[0], clusterPort));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 49.374881592565636}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\tString taskType = null;\n\t\tString toNumber = null;\n\t\tString message = null;\n\t\tString taskId = null;\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\ttaskType = getTaskType(getQueueUrl());\n\t\t\t\tif (taskType == null) {\n\t\t\t\t\tSystem.out.println(\"No task found. Sleeping for 30 seconds.\");\n\t\t\t\t\tThread.sleep(30000);\n\t\t\t\t} else {\n\t\t\t\t\ttaskId = getTaskId(getQueueUrl());\n\t\t\t\t\tif (taskType.equals(PLAIN_TEXT_MESSAGE)) {\n\t\t\t\t\t\ttoNumber = getToNumber(getQueueUrl());\n\t\t\t\t\t\tmessage = getMessage(getQueueUrl());\n\t\t\t\t\t\tif (isValidMessage(toNumber, message)) {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tSystem.out.println(\"Invalid message: \" + message);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"Unknown task type: \" + taskType);\n\t\t\t\t\t}\n\t\t\t\t\tdeleteMessage(getQueueUrl(), taskId);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Exception in pollingWork: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}", "CodeBleu_score": 29.276519610951752}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\tString message = queue.poll(30, TimeUnit.SECONDS);\n\t\tif (message != null) {\n\t\t\tString[] messageParts = message.split(\":\");\n\t\t\tif (messageParts[0].equals(\"plain\")) {\n\t\t\t\tString toNumber = messageParts[1];\n\t\t\t\tString messageText = messageParts[2];\n\t\t\t\ttry {\n\t\t\t\t\tsendPlainTextMessage(toNumber, messageText);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"Exception encountered while trying to send plain text message.\");\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Invalid message type: \" + messageParts[0]);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 27.33780878761606}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\t// \u4ece\u961f\u5217\u4e2d\u53d6\u51fa\u4e00\u4e2a\u4efb\u52a1\n\t\t\tTask task = getTask();\n\t\t\tif (task == null) {\n\t\t\t\t// \u6ca1\u6709\u4efb\u52a1\uff0c\u776130\u79d2\n\t\t\t\tThread.sleep(30000);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// \u4efb\u52a1\u7c7b\u578b\n\t\t\tString taskType = task.getTaskType();\n\t\t\tif (taskType.equals(TaskType.PLAIN_TEXT_MESSAGE.name())) {\n\t\t\t\t// \u77ed\u4fe1\u4efb\u52a1\n\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\tString message = task.getMessage();\n\t\t\t\t// \u68c0\u67e5\u6536\u4ef6\u4eba\u53f7\u7801\n\t\t\t\tif (toNumber == null || toNumber.length() != 11) {\n\t\t\t\t\tlog.error(\"Invalid toNumber:\" + toNumber);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t// \u68c0\u67e5\u77ed\u4fe1\u5185\u5bb9\n\t\t\t\tif (message == null || message.length() > 70) {\n\t\t\t\t\tlog.error(\"Invalid message:\" + message);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\t// \u53d1\u9001\u77ed\u4fe1\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tlog.error(\"Send plain text message failed.\", e);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlog.error(\"Invalid task type:\" + taskType);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 24.48213703380241}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpGet = new HttpGet(uri);\n\thttpGet.addHeader(\"accept\", \"application/xml\");\n\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\ttry {\n\t\tHttpEntity entity = response.getEntity();\n\t\tif (entity != null) {\n\t\t\tString responseString = EntityUtils.toString(entity);\n\t\t\tlog.info(responseString);\n\t\t\treturn responseString;\n\t\t}\n\t} finally {\n\t\tresponse.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 53.881283333632304}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\ttry {\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString content = EntityUtils.toString(entity);\n\t\t\t\tSystem.out.println(content);\n\t\t\t\treturn content;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} finally {\n\t\thttpclient.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 60.147655476129636}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\ttry {\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t\tlog.info(content);\n\t\t\t\treturn content;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t} finally {\n\t\thttpclient.close();\n\t}\n\treturn null;\n}", "CodeBleu_score": 60.58595498133508}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tfactory.setNamespaceAware(true);\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(\"UTF-8\")));\n\treturn decodeNodeToMap(doc.getFirstChild(), doTrim);\n}", "CodeBleu_score": 36.87353914640092}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tObject[] result = decodeNodeToMap(document.getFirstChild(), doTrim);\n\tif (result == null || result.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> resultMap = new HashMap<String, Object>();\n\tresultMap.put(result[0].toString(), result[1]);\n\treturn resultMap;\n}", "CodeBleu_score": 62.98977668482678}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder db = dbf.newDocumentBuilder();\n\tDocument document = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(CHARSET)));\n\tNode root = document.getFirstChild();\n\tObject[] rootArray = decodeNodeToMap(root, doTrim);\n\tif (rootArray == null || rootArray.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootArray[0], rootArray[1]);\n\treturn result;\n}", "CodeBleu_score": 60.01008436619486}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tlogger.debug(\"Order {} is eligible for auto-processing\", orderRecord);\n\t\tenqueueOrderForAutoProcessing(orderRecord);\n\t}\n\telse {\n\t\tlogger.debug(\"Order {} is not eligible for auto-processing\", orderRecord);\n\t\tenqueueCreateMissingShipmentSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 20.074694410969457}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tlogger.info(\"Auto-processing order {}\", orderRecord);\n\t\tenqueueTask(orderRecord);\n\t}\n\telse\n\t{\n\t\tlogger.info(\"Not eligible for auto-processing order {}\", orderRecord);\n\t\tenqueueCreateMissingShipmentSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 23.815623496038842}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tif (isEligibleForAutoProcessing) {\n\t\tlogger.debug(\"Order {} is eligible for automatic shipping and invoicing; enqueuing it for automatic shipping and invoicing.\", orderRecord);\n\t\tenqueueOrderForAutoShipAndInvoice(orderRecord);\n\t}\n\telse {\n\t\tlogger.debug(\"Order {} is not eligible for automatic shipping and invoicing; enqueuing it for manual shipping and invoicing.\", orderRecord);\n\t\tenqueueOrderForManualShipAndInvoice(orderRecord);\n\t}\n}", "CodeBleu_score": 26.89746833405431}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = $this->userResolver->resolve($request);\n\n        if (! $user) {\n            $this->fireFailedEvent($request);\n\n            $this->throwFailedAuthenticationException($request);\n        }\n\n        if (! $this->guard->validate(['email' => $user->email, 'password' => $request->password])) {\n            $this->fireFailedEvent($request, $user);\n\n            $this->throwFailedAuthenticationException($request);\n        }\n\n        return $user;\n    }", "CodeBleu_score": 54.24391401300166}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 54.33658349323718}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 54.33658349323718}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.45277447053542}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$requestLimit = $this->getRequestLimit($request);\n    $requestLimit->increment();\n    $this->throwValidationException($request, 'Invalid credentials.');\n}", "CodeBleu_score": 48.27275371100941}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.45277447053542}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n\n    if (! $user) {\n        return $this->redirectToIntended($request);\n    }\n\n    $user->setRememberToken($request->cookie(\n        $this->rememberTokenName(), $request->filled('remember')\n    ));\n\n    if ($user->hasTwoFactorAuthenticationEnabled()) {\n        $request->session()->put([\n            'login.id' => $user->getAuthIdentifier(),\n            'login.remember' => $user->getRememberToken(),\n        ]);\n\n        return $this->response($request, $user);\n    }\n\n    return $this->authenticate($request);\n}", "CodeBleu_score": 31.76179215768672}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n\n    if ($user) {\n        $user->setRememberToken(Str::random(60));\n\n        $user->save();\n\n        $publicKey = $user->createWebAuthnPublicKey();\n\n        $request->session()->put([\n            'webauthn_id' => $user->id,\n            'webauthn_remember' => $request->has('remember') ? true : false,\n        ]);\n\n        return response()->view('auth.two-factor-challenge', [\n            'enabled' => $user->two_factor_type !== null,\n            'remember' => $request->filled('remember'),\n            'publicKey' => $publicKey,\n        ]);\n    }\n\n    return response()->view('auth.two-factor-challenge', [\n        'enabled' => false,\n        'remember' => false,\n        'publicKey' => null,\n    ]);\n}", "CodeBleu_score": 26.25076121260722}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->user();\n\n    if (! $user) {\n        return response()->json(['message' => 'Unauthenticated.'], 401);\n    }\n\n    $webauthn = $user->webauthn;\n\n    if (! $webauthn) {\n        return response()->json(['message' => 'Unauthenticated.'], 401);\n    }\n\n    $credential = $webauthn->getCredential();\n\n    $publicKey = $credential->getPublicKey();\n\n    $credentialId = $credential->getCredentialId();\n\n    $userHandle = $credential->getUserHandle();\n\n    $challenge = $webauthn->getChallenge();\n\n    $rpId = $webauthn->getRpId();\n\n    $signCount = $webauthn->getSignCount();\n\n    $rememberMe = $request->session()->get('remember') ? true : false;\n\n    $data = [\n        'credentialId' => $credentialId,\n        'publicKey' => $publicKey,\n        'userHandle' => $userHandle,\n        'challenge' => $challenge,\n        'rpId' => $rpId,\n        'signCount' => $signCount,\n        'rememberMe' => $rememberMe,\n        'enabled' => $user->hasTwoFactorAuthenticationEnabled(),\n    ];\n\n    return response()->view('auth.two-factor-challenge', $data);\n}", "CodeBleu_score": 33.70728322874753}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tif ($token = UserToken::where('driver', $driver)->where('driver_id', $socialite->getId())->first()) {\n        $user = $token->user;\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n        $token = $this->createUserToken($user, $driver, $socialite);\n    }\n\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 56.81083585432884}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$user = $this->getUserFromToken($driver, $socialite->getId());\n\n    if ($user) {\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n    }\n\n    return $user;\n}", "CodeBleu_score": 40.296557058767306}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$user = $this->getUserOrCreate($socialite);\n    $this->checkUserAssociation($request, $user, $driver);\n    $token = $this->createUserToken($user, $driver, $socialite);\n    Auth::login($user);\n    return $user;\n}", "CodeBleu_score": 32.37858382050844}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->guard->user();\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n    if (! $this->webauthn->validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 60.532864185539935}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->getUser($request);\n\n    if (! $user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! $this->webAuthn->validateAssertion($credentials, $user)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 57.552623091632896}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->getUser($request);\n\n    if ($user === null) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (! $this->webAuthn->validateAssertion($credentials, $user)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 56.662212981726015}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tif (!$this->email) {\n        Log::error('No email provided');\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        Log::error('User not found: ' . $this->email);\n        return null;\n    }\n}", "CodeBleu_score": 39.67628686402601}, {"code": "<?\nprivate function user(): ?User{\n\tif (! $this->email) {\n        Log::error('Email address not provided.');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (Exception $e) {\n        Log::error('User not found: ' . $this->email);\n\n        return null;\n    }\n}", "CodeBleu_score": 39.155855544303684}, {"code": "<?\nprivate function user(): ?User{\n\tif (!$this->email) {\n        Log::error('Unable to find user for email: ' . $this->email);\n        return null;\n    }\n\n    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        Log::error('User not found: ' . $e->getMessage());\n\n        return null;\n    }\n}", "CodeBleu_score": 38.43910248937043}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $this->info('Flushing Scout indexes...');\n        $this->artisan('scout:flush', [\n            'model' => 'App\\Models\\Post',\n        ]);\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 28.63250051063602}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && config('meilisearch.flush')) {\n        $this->info('Flushing Scout indexes...');\n\n        $settings = $this->meilisearch->getIndexSettings();\n\n        foreach ($settings as $setting) {\n            $table = $setting['uid'];\n\n            $this->artisan('scout:flush', [\n                'model' => $table,\n            ]);\n        }\n\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 53.74108683731108}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch') {\n        $settings = $this->meilisearch->getSettings();\n        $indexes = array_keys($settings);\n        foreach ($indexes as $index) {\n            $table = explode('_', $index)[0];\n            $this->artisan('scout:flush', ['model' => $table]);\n        }\n        $this->info('Flushed Scout indexes.');\n    }\n}", "CodeBleu_score": 55.71636607162442}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $this->readVCard($resource) ?? $this->createVCard($resource);\n\n    $this->exporters($resource::class)\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n\n    return $vcard;\n}", "CodeBleu_score": 17.793791636194676}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vCard = $this->getVCard($resource);\n\n    $this->exporters($resource->getType())\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vCard));\n\n    return $vCard;\n}", "CodeBleu_score": 13.847383137912766}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = null;\n\n    try {\n        $vcard = $resource->read();\n    } catch (ModelNotFoundException $e) {\n        $vcard = $this->createEmptyVCard($resource);\n    }\n\n    $this->setUID($vcard, $resource);\n\n    $this->exporters($resource->getType())\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 25.03208075115871}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$addressBook = $this->getAddressBookById($addressBookId);\n    if (!$addressBook) {\n        return false;\n    }\n    $card = $addressBook->getChild($cardUri);\n    if (!$card) {\n        return false;\n    }\n    if ($card instanceof VCard) {\n        $this->jobManager->push(new Job\\DeleteContact($card));\n    } elseif ($card instanceof VGroup) {\n        $this->jobManager->push(new Job\\DeleteGroup($card));\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 30.777141156016807}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$card = $this->getCard($addressBookId, $cardUri);\n    if (!$card) {\n        return false;\n    }\n    if ($card instanceof Sabre\\CardDAV\\IContact) {\n        $this->server->getJobsPlugin()->add(\n            new \\Sabre\\CardDAV\\Job\\DeleteContact($card)\n        );\n    } elseif ($card instanceof Sabre\\CardDAV\\IGroup) {\n        $this->server->getJobsPlugin()->add(\n            new \\Sabre\\CardDAV\\Job\\DeleteGroup($card)\n        );\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 37.07424501742687}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getObjectByUri($addressBookId, $cardUri);\n    if ($object instanceof Sabre\\CardDAV\\IAddressBook) {\n        $this->getServer()->getJobsPlugin()->add(new DeleteAddressBookJob($object));\n        return true;\n    }\n    if ($object instanceof Sabre\\CardDAV\\IContact) {\n        $this->getServer()->getJobsPlugin()->add(new DeleteContactJob($object));\n        return true;\n    }\n    if ($object instanceof Sabre\\CardDAV\\IGroup) {\n        $this->getServer()->getJobsPlugin()->add(new DeleteGroupJob($object));\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 38.76376383827774}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\tif (!$this->request->hasFile('file')) {\n        return;\n    }\n\n    $file = $this->request->file('file');\n\n    $activity = $this->leadActivityRepository->create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => $this->request->user()->id,\n        'type' => 'upload',\n        'note' => $data['note'],\n    ]);\n\n    $upload = $this->uploadRepository->create([\n        'name' => $file->getClientOriginalName(),\n        'path' => $file->store('uploads/'.$data['lead_id'], 'local'),\n    ]);\n\n    $activity->uploads()->save($upload);\n\n    return $upload;\n}", "CodeBleu_score": 53.277895627987824}, {"code": "<?\npublic function upload(array $data){\n\t$file = $this->request->file('file');\n    if (!$file) {\n        return;\n    }\n\n    $path = $file->store('files');\n\n    $activity = $this->createLeadActivity($data);\n\n    return $this->attachFileToLeadActivity($activity, $path, $file->getClientOriginalName());\n}", "CodeBleu_score": 31.10384874560227}, {"code": "<?\npublic function upload(array $data){\n\t// Check if a file is present. If not, return immediately.\n    if (!request()->hasFile('file')) {\n        return;\n    }\n\n    // Create a new lead activity record.\n    $activity = $this->createActivity($data);\n\n    // Get the file from the request.\n    $file = request()->file('file');\n\n    // Get the file's name and extension.\n    $filename = $file->getClientOriginalName();\n    $extension = $file->getClientOriginalExtension();\n\n    // Generate a new filename.\n    $filename = md5($filename . time()) . '.' . $extension;\n\n    // Store the file on disk.\n    $file->storeAs('uploads/lead-activities/' . $activity->id, $filename);\n\n    // Create a new record with the file's name and storage path, associating it with the created lead activity.\n    $this->createRecord($activity, $filename);\n\n}", "CodeBleu_score": 46.001506579044516}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    if (request()->is('admin/*')) {\n        return $this->response('admin', $statusCode);\n    } else {\n        if ($exception instanceof ModelNotFoundException) {\n            return redirect()->route('shop.home.index');\n        } else {\n            return $this->response('shop', $statusCode);\n        }\n    }\n}", "CodeBleu_score": 37.69912758704404}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$path = request()->route()->getPrefix();\n\n    if ($exception instanceof ModelNotFoundException) {\n        return $this->response($path, 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return $this->response($path, 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return $this->response($path, 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        return $this->response($path, $exception->getStatusCode());\n    }\n\n    return $this->response($path, 500);\n}", "CodeBleu_score": 45.61612199331399}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$statusCode = 500;\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } elseif ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 500;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 500;\n    }\n\n    if (request()->routeIs('admin.*')) {\n        return $this->response('admin', $statusCode);\n    }\n\n    if (request()->routeIs('customer.*')) {\n        return $this->response('shop', $statusCode);\n    }\n\n    return $this->response('shop', $statusCode);\n}", "CodeBleu_score": 43.81828466986046}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$this->requireAjaxRequest();\n\n\t$this->requirePostRequest();\n\n\t$activity_ids = $this->post('activity_ids');\n\t$new_status = $this->post('new_status');\n\n\t$activity_ids = explode(',', $activity_ids);\n\n\t$count = 0;\n\n\tforeach ($activity_ids as $activity_id) {\n\n\t\t$activity = $this->Activity->findById($activity_id);\n\n\t\tif ($activity) {\n\n\t\t\t$activity->is_done = $new_status;\n\n\t\t\tif ($activity->save()) {\n\n\t\t\t\t$count++;\n\n\t\t\t\t$this->dispatchEvent('activityUpdated', array('activity' => $activity));\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t$this->set('count', $count);\n\n\t$this->set('_serialize', array('count'));\n\n}", "CodeBleu_score": 38.04621957862908}, {"code": "<?\npublic function massUpdate(){\n\t$activity_ids = $this->input->post('activity_ids');\n  $is_done = $this->input->post('is_done');\n\n  $this->load->model('Activity_model');\n  $this->load->model('Activity_event_model');\n\n  $count = 0;\n\n  foreach ($activity_ids as $activity_id) {\n    $activity = $this->Activity_model->get_activity($activity_id);\n    $activity->is_done = $is_done;\n    $this->Activity_model->update_activity($activity);\n\n    $activity_event = new Activity_event();\n    $activity_event->activity_id = $activity->activity_id;\n    $activity_event->event_type = 'update';\n    $activity_event->is_done = $activity->is_done;\n    $this->Activity_event_model->add_activity_event($activity_event);\n\n    $count++;\n  }\n\n  $response = new stdClass();\n  $response->success = $count > 0;\n  $response->message = $count . ' activities updated';\n\n  $this->output\n    ->set_content_type('application/json')\n    ->set_output(json_encode($response));\n}", "CodeBleu_score": 34.38442108786429}, {"code": "<?\npublic function massUpdate(){\n\t// Get the activity IDs from the request data\n\t$activityIds = Input::get('activity_ids');\n\n\t// Initialize the update count\n\t$updateCount = 0;\n\n\t// Iterate over the activity IDs\n\tforeach ($activityIds as $activityId) {\n\n\t\t// Get the activity\n\t\t$activity = Activity::find($activityId);\n\n\t\t// If the activity exists\n\t\tif ($activity) {\n\n\t\t\t// Dispatch the updating event\n\t\t\tEvent::fire('activity.updating', array($activity));\n\n\t\t\t// Update the activity\n\t\t\t$activity->is_done = Input::get('is_done');\n\t\t\t$activity->save();\n\n\t\t\t// Dispatch the updated event\n\t\t\tEvent::fire('activity.updated', array($activity));\n\n\t\t\t// Increment the update count\n\t\t\t$updateCount++;\n\t\t}\n\t}\n\n\t// If any updates were made\n\tif ($updateCount > 0) {\n\t\treturn Response::json(array('success' => true, 'message' => 'Updated ' . $updateCount . ' activities.'), 200);\n\t}\n\n\t// Otherwise\n\telse {\n\t\treturn Response::json(array('success' => false, 'message' => 'No activities were updated.'), 400);\n\t}\n\n}", "CodeBleu_score": 33.730638135996614}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t// Get the activity IDs from the request.\n \t$activityIds = Input::get('activity_ids');\n\n \t// Loop through the IDs and delete each activity.\n \tforeach ($activityIds as $activityId) {\n\n \t\t// Dispatch an event before deleting the activity.\n \t\tEvent::fire('activity.delete.before', array($activityId));\n\n \t\t// Delete the activity.\n \t\tActivity::destroy($activityId);\n\n \t\t// Dispatch an event after deleting the activity.\n \t\tEvent::fire('activity.delete.after', array($activityId));\n \t}\n\n \t// Return a JSON response indicating a successful deletion.\n \treturn Response::json(array('result' => true));\n }", "CodeBleu_score": 25.115948275664397}, {"code": "<?\n public function massDestroy(){\n\t$activity_ids = Input::get('activity_ids');\n\n \tif (is_array($activity_ids) && count($activity_ids) > 0) {\n\n \t\tforeach ($activity_ids as $activity_id) {\n \t\t\t\n \t\t\t$activity = Activity::find($activity_id);\n\n \t\t\tif (is_object($activity)) {\n\n \t\t\t\tEvent::fire('activity.delete', array($activity));\n\n \t\t\t\t$activity->delete();\n\n \t\t\t\tEvent::fire('activity.deleted', array($activity));\n\n \t\t\t}\n\n \t\t}\n\n \t\treturn Response::json(array('status' => 'success', 'message' => 'Activities successfully deleted.'), 200);\n\n \t} else {\n\n \t\treturn Response::json(array('status' => 'error', 'message' => 'No activities were selected.'), 400);\n\n \t}\n\n }", "CodeBleu_score": 21.732216514171224}, {"code": "<?\n public function massDestroy(){\n\t$activityIds = Input::get('activity_ids');\n\n \tforeach ($activityIds as $activityId) {\n \t\t$activity = Activity::find($activityId);\n \t\t$activity->delete();\n \t}\n\n \treturn Response::json(array('success' => true));\n }", "CodeBleu_score": 21.03456277923757}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n  $card_ids = array();\n  foreach ($cards as $card) {\n   $card_ids[] = $card->id;\n  }\n  $request_data = json_decode($_POST['data']);\n  foreach ($request_data as $data) {\n   if (in_array($data->id, $card_ids)) {\n    $card = $this->getCard($data->id);\n    $card->selected = $data->selected;\n    $this->updateCard($card);\n   }\n  }\n  $cards = $this->getCards();\n  $data = array();\n  foreach ($cards as $card) {\n   $data[] = array(\n    'id' => $card->id,\n    'selected' => $card->selected\n   );\n  }\n  echo json_encode($data);\n }", "CodeBleu_score": 38.91912048254112}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n  $cards = json_decode($cards);\n  $cards = $cards->cards;\n  $data = json_decode(file_get_contents(\"php://input\"));\n  $data = $data->cards;\n  foreach ($cards as $key => $card) {\n    foreach ($data as $cardData) {\n      if ($card->id == $cardData->id) {\n        $cards[$key]->selected = $cardData->selected;\n      }\n    }\n  }\n  echo json_encode($cards);\n}", "CodeBleu_score": 33.947964031759994}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n\n \t$request = $this->input->post();\n\n \tif (!empty($request)) {\n\n \t\tforeach ($request as $key => $value) {\n\n \t\t\tforeach ($cards as $key2 => $value2) {\n\n \t\t\t\tif ($key == $value2['id']) {\n\n \t\t\t\t\t$cards[$key2]['selected'] = $value;\n\n \t\t\t\t}\n\n \t\t\t}\n\n \t\t}\n\n \t}\n\n \techo json_encode($cards);\n\n }", "CodeBleu_score": 34.08237381100101}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t$this->authorize('create', Configuration::class);\n\n    event(new ConfigurationSaving($this->request->all()));\n\n    $configuration = new Configuration($this->request->all());\n    $configuration->save();\n\n    event(new ConfigurationSaved($configuration));\n\n    flash()->success(trans('configuration.saved'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 32.87399973683855}, {"code": "<?\npublic function store(){\n\t$this->dispatch(new UpdatingContent($request, $this->entity));\n\n    $this->entity->fill($request->all());\n    $this->entity->save();\n\n    $this->dispatch(new UpdatedContent($this->entity));\n\n    flash()->success(trans('hack::cms.configurations.flashes.stored'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 32.30041865718363}, {"code": "<?\npublic function store(){\n\t$this->authorize('create', Configuration::class);\n\n    $this->validateConfiguration();\n\n    $this->dispatchBrowserEvent('configuration-storing');\n\n    $configuration = Configuration::create($this->configuration);\n\n    $this->dispatchBrowserEvent('configuration-stored', ['message' => 'Configuration created successfully.']);\n\n    $this->flash('success', 'Configuration created successfully.');\n\n    return redirect()->route('admin.configurations.edit', $configuration);\n}", "CodeBleu_score": 24.83641788306788}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/' . $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 88.97461758531739}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n    int sortOrder = 1;\n    for (String modelName : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModelName(modelName);\n        sort.setSortOrder(sortOrder);\n        sortList.add(sort);\n        sortOrder++;\n    }\n    user.setAdminModelSorts(sortList);\n    userService.saveUser(user);\n    return new SuccessResult();\n}", "CodeBleu_score": 29.161392016701303}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t// Create a list of AdminModelSort objects\n    List<AdminModelSort> modelSortList = new ArrayList<AdminModelSort>();\n    for (String modelName : list) {\n        AdminModelSort modelSort = new AdminModelSort();\n        modelSort.setModelName(modelName);\n        modelSort.setSortOrder(0);\n        modelSortList.add(modelSort);\n    }\n    // Remove existing sort settings for the user\n    List<AdminModelSort> existingModelSortList = adminModelSortService.getModelSortList(getUserId());\n    for (AdminModelSort modelSort : existingModelSortList) {\n        adminModelSortService.deleteModelSort(modelSort.getId());\n    }\n    // Save the new sort settings in batch\n    adminModelSortService.saveModelSortList(modelSortList);\n    return success();\n}", "CodeBleu_score": 38.58916123353944}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> modelSortList = new ArrayList<AdminModelSort>();\n    for (String model : list) {\n        AdminModelSort modelSort = new AdminModelSort();\n        modelSort.setModel(model);\n        modelSort.setSortOrder(list.indexOf(model));\n        modelSortList.add(modelSort);\n    }\n    List<AdminModelSort> existingSortList = AdminModelSort.find.where().eq(\"user\", getCurrentUser()).findList();\n    for (AdminModelSort existingSort : existingSortList) {\n        existingSort.delete();\n    }\n    Ebean.saveAll(modelSortList);\n    return ok(Json.toJson(new ResultMessage(\"success\")));\n}", "CodeBleu_score": 38.870966366896596}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }", "CodeBleu_score": 89.89611329077293}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n        if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n            return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n        }\n        adminConfig.setStatus(moduleSetting.getStatus());\n        adminConfigService.setModuleSetting(adminConfig);\n        return Result.ok();\n    }", "CodeBleu_score": 89.89611329077293}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t// Get the user configuration by the custom key.\n   UserConfiguration userConfiguration = UserConfiguration.findByCustomKey(customKey);\n\n   // If the configuration exists, update its value with the provided JSON.\n   if (userConfiguration != null) {\n     userConfiguration.setCustomValue(json.toString());\n     userConfiguration.save();\n   }\n\n   // If not, create a new user configuration with the provided JSON and save it.\n   else {\n     userConfiguration = new UserConfiguration();\n     userConfiguration.setCustomKey(customKey);\n     userConfiguration.setCustomValue(json.toString());\n     userConfiguration.save();\n   }\n\n   // Return a successful result.\n   return ok(Json.toJson(userConfiguration));\n }", "CodeBleu_score": 50.27070256244689}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t// Get the user configuration\n \tUserConfiguration userConfiguration = userConfigurationService.getUserConfigurationByCustomKey(customKey);\n\n \t// If the user configuration exists, update its value\n \tif(userConfiguration != null){\n\n \t\t// Get the user configuration value\n \t\tString userConfigurationValue = userConfiguration.getUserConfigurationValue();\n\n \t\t// Convert the user configuration value to a JSON array\n \t\tJSONArray userConfigurationValueJson = new JSONArray(userConfigurationValue);\n\n \t\t// Merge the provided JSON array with the user configuration value JSON array\n \t\tuserConfigurationValueJson.merge(json);\n\n \t\t// Update the user configuration value\n \t\tuserConfiguration.setUserConfigurationValue(userConfigurationValueJson.toString());\n\n \t\t// Save the user configuration\n \t\tuserConfigurationService.saveUserConfiguration(userConfiguration);\n\n \t}\n\n \t// If the user configuration does not exist, create a new one\n \telse{\n\n \t\t// Create a new user configuration\n \t\tUserConfiguration userConfiguration = new UserConfiguration();\n\n \t\t// Set the user configuration custom key\n \t\tuserConfiguration.setUserConfigurationCustomKey(customKey);\n\n \t\t// Set the user configuration value\n \t\tuserConfiguration.setUserConfigurationValue(json.toString());\n\n \t\t// Save the user configuration\n \t\tuserConfigurationService.saveUserConfiguration(userConfiguration);\n\n \t}\n\n \t// Return a successful result\n \treturn new SuccessResult();\n\n }", "CodeBleu_score": 45.15582282747687}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t// Get the user configuration by the custom key\n\t \tUserConfiguration userConfiguration = UserConfiguration.findByCustomKey(customKey);\n\n\t \t// If the configuration exists, update its value\n\t \tif(userConfiguration != null) {\n\t \t\tuserConfiguration.setValue(json.toString());\n\t \t\tuserConfiguration.save();\n\t \t}\n\n\t \t// If not, create a new user configuration with the provided JSON and save it\n\t \telse {\n\t \t\tuserConfiguration = new UserConfiguration();\n\t \t\tuserConfiguration.setCustomKey(customKey);\n\t \t\tuserConfiguration.setValue(json.toString());\n\t \t\tuserConfiguration.save();\n\t \t}\n\n\t \t// Return a successful result\n\t \treturn ok(Json.toJson(new ResultData(true, \"Successfully updated the user configuration\")));\n\t }", "CodeBleu_score": 47.948540428167114}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\ttry {\n\t\tAdminUser user = adminUserService.queryUserInfo(userId);\n\t\tif (user != null) {\n\t\t\tString departmentName = departmentService.queryDepartmentName(user.getDepartmentId());\n\t\t\tuser.setDepartmentName(departmentName);\n\t\t\tuser.setSalt(null);\n\t\t\tuser.setPassword(null);\n\t\t}\n\t\treturn new Result<AdminUser>(ResultCode.SUCCESS, user);\n\t} catch (Exception e) {\n\t\treturn new Result<AdminUser>(ResultCode.FAILURE, e.getMessage());\n\t}\n}", "CodeBleu_score": 46.19340064540075}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tResult<AdminUser> result = new Result<AdminUser>();\n    AdminUser adminUser = adminUserService.queryUserInfo(userId);\n    if (adminUser != null) {\n        adminUser.setPassword(null);\n        adminUser.setSalt(null);\n        result.setData(adminUser);\n    } else {\n        result.setCode(ResultCode.FAIL);\n        result.setMsg(\"User does not exist.\");\n    }\n    return result;\n}", "CodeBleu_score": 39.66370240853859}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser adminUser = adminUserService.getUser(userId);\n    if (adminUser != null) {\n        adminUser.setSalt(null);\n        adminUser.setPassword(null);\n        adminUser.setDepartmentName(departmentService.getDepartmentName(adminUser.getDepartmentId()));\n        return Result.success(adminUser);\n    } else {\n        return Result.error(ErrorCodeEnum.USER_NOT_EXIST);\n    }\n}", "CodeBleu_score": 38.18427669277762}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\tString userId = session().get(\"userId\");\n     String noticeId = request().body().asFormUrlEncoded().get(\"noticeId\")[0];\n     String status = request().body().asFormUrlEncoded().get(\"status\")[0];\n\n     if (userId != null) {\n         // Find the user by id\n         User user = User.find.byId(userId);\n\n         // Check if there are multiple \"readNotice\" entries for the user\n         if (user.readNotices.size() > 0) {\n             // Update the status to 1 for all matching entries\n             for (ReadNotice readNotice : user.readNotices) {\n                 if (readNotice.notice.id == Long.parseLong(noticeId)) {\n                     readNotice.status = 1;\n                     readNotice.save();\n                 }\n             }\n         } else {\n             // Create a new \"readNotice\" entry with status 1 and save it\n             ReadNotice readNotice = new ReadNotice();\n             readNotice.notice = Notice.find.byId(Long.parseLong(noticeId));\n             readNotice.status = 1;\n             readNotice.save();\n             user.readNotices.add(readNotice);\n             user.save();\n         }\n     }\n\n     return ok();\n }", "CodeBleu_score": 32.096927724075556}, {"code": " public Result readNotice() {\n\tUser user = User.getLoggedIn(session().get(\"email\"));\n    Long userID = user.id;\n\n    // Check if there are multiple \"readNotice\" entries for the user.\n    List<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userID\", userID).findList();\n    if (readNotices.size() > 1) {\n        // Update the status to 1 for all matching entries.\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    }\n    else if (readNotices.size() == 1) {\n        // Update the status to 1 for the only matching entry.\n        ReadNotice readNotice = readNotices.get(0);\n        readNotice.status = 1;\n        readNotice.update();\n    }\n    else {\n        // Create a new \"readNotice\" entry with status 1 and save it.\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userID = userID;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n\n    return ok(\"Success\");\n}", "CodeBleu_score": 30.80502336948971}, {"code": " public Result readNotice() {\n\tString userID = session().get(\"userID\");\n   if (userID == null) {\n     return redirect(\"/login\");\n   }\n   int userIDInt = Integer.parseInt(userID);\n   List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userID\", userIDInt).findList();\n   if (readNoticeList.size() > 1) {\n     for (ReadNotice readNotice : readNoticeList) {\n       readNotice.status = 1;\n       readNotice.save();\n     }\n   } else {\n     ReadNotice readNotice = new ReadNotice();\n     readNotice.userID = userIDInt;\n     readNotice.status = 1;\n     readNotice.save();\n   }\n   return ok(\"Success!\");\n }", "CodeBleu_score": 30.962600181205325}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t// Get the configuration with name \"companyInfo\"\n    Configuration config = ConfigurationLocalServiceUtil.getConfiguration(COMPANY_INFO_CONFIG_NAME);\n\n    // If the configuration doesn't exist, create it\n    if (config == null) {\n        config = ConfigurationLocalServiceUtil.addConfiguration(COMPANY_INFO_CONFIG_NAME, COMPANY_INFO_CONFIG_TYPE, COMPANY_INFO_CONFIG_VALUE);\n    }\n\n    // Update the configuration's value with the provided company information in JSON format\n    String companyInfo = adminCompanyBO.toJSONString();\n    config.setValue(companyInfo);\n\n    // Save or update the configuration\n    ConfigurationLocalServiceUtil.updateConfiguration(config);\n}", "CodeBleu_score": 33.30221351100015}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\tConfigurationService configService = ServiceLocator.locate(ConfigurationService.class);\n    Configuration companyInfo = configService.getConfigurationByName(\"companyInfo\");\n    if (companyInfo == null) {\n        companyInfo = new Configuration();\n        companyInfo.setName(\"companyInfo\");\n        companyInfo.setType(ConfigurationType.ADMIN);\n        companyInfo.setDescription(\"Company Information\");\n        configService.createConfiguration(companyInfo);\n    }\n    companyInfo.setValue(adminCompanyBO);\n    configService.updateConfiguration(companyInfo);\n}", "CodeBleu_score": 38.410621890970596}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t// Create an AdminConfigBO with the default values.\n    AdminConfigBO adminConfigBO = new AdminConfigBO();\n    adminConfigBO.setName(\"companyInfo\");\n    adminConfigBO.setValue(\"{}\");\n    adminConfigBO.setDescription(\"Company Information\");\n    adminConfigBO.setAdminConfigType(AdminConfigType.JSON);\n    adminConfigBO.setAdminConfigTypeId(AdminConfigType.JSON.getId());\n    adminConfigBO.setActive(true);\n    adminConfigBO.setCreatedBy(\"admin\");\n    adminConfigBO.setUpdatedBy(\"admin\");\n\n    // Get the AdminConfigBO from the database.\n    AdminConfigBO adminConfig = adminConfigDAO.getAdminConfigByName(\"companyInfo\");\n\n    // If the AdminConfigBO is null, create a new one.\n    if (adminConfig == null) {\n        adminConfig = adminConfigBO;\n    }\n\n    // Set the AdminConfigBO's value with the provided company information.\n    adminConfig.setValue(adminCompanyBO.toJSON());\n\n    // Save or update the AdminConfigBO.\n    adminConfigDAO.saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 39.34493171361184}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO company = new AdminCompanyBO();\n\n\t// Get the admin configuration for this company.\n\tAdminConfigBO adminConfig = AdminConfigBO.getAdminConfig(getCompanyId());\n\tif (adminConfig != null) {\n\t\t// Parse the configuration value into an AdminCompanyBO object.\n\t\tcompany = AdminCompanyBO.parse(adminConfig.getValue());\n\t}\n\n\treturn company;\n}", "CodeBleu_score": 37.66313078797675}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminConfig = new AdminCompanyBO();\n\tString configKey = AdminConstants.ADMIN_COMPANY_CONFIG_KEY;\n\tString configValue = null;\n\t\n\ttry {\n\t\tconfigValue = AdminUtil.getConfigValue(configKey);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n\t\n\tif (configValue != null) {\n\t\ttry {\n\t\t\tadminConfig = (AdminCompanyBO) new XStream().fromXML(configValue);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\treturn adminConfig;\n}", "CodeBleu_score": 35.00463301676836}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminCompanyBO = null;\n\t\n\tString adminConfigKey = AdminCompanyBO.ADMIN_CONFIG_KEY;\n\t\n\tString adminConfigValue = getAdminConfigValue(adminConfigKey);\n\t\n\tif (adminConfigValue != null) {\n\t\tadminCompanyBO = new AdminCompanyBO();\n\t\t\n\t\ttry {\n\t\t\tadminCompanyBO.parse(adminConfigValue);\n\t\t} catch (Exception e) {\n\t\t\tthrow new RuntimeException(\"Failed to parse admin configuration value: \" + adminConfigValue, e);\n\t\t}\n\t} else {\n\t\tadminCompanyBO = new AdminCompanyBO();\n\t}\n\t\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 37.27197676450063}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\ttry {\n   // Get the log configuration name\n   String logConfigName = getLogConfigName();\n\n   // Create AdminConfig objects for each string in the list\n   List<AdminConfig> configList = new ArrayList<AdminConfig>();\n   for (String s : stringList) {\n    AdminConfig config = AdminConfig.create(\"LogWelcomeSpeech\", \"LogConfig\", logConfigName);\n    config.set(\"string\", s);\n    configList.add(config);\n   }\n\n   // Remove existing configurations with the specified log configuration name\n   AdminConfig.remove(AdminConfig.getid(\"/LogConfig:\" + logConfigName + \"/LogWelcomeSpeech/\"));\n\n   // Save the new list of configurations in batch\n   AdminConfig.save(configList, true);\n\n   // Reload configuration\n   AdminConfig.refresh();\n  } catch (Exception e) {\n   e.printStackTrace();\n  }\n }", "CodeBleu_score": 40.36374757723907}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\ttry {\n     // Create a list of AdminConfig objects\n     List<AdminConfig> configList = new ArrayList<AdminConfig>();\n     // Create an AdminConfig object for each string in the list\n     for (String s : stringList) {\n       AdminConfig config = AdminConfig.create(\"LogWelcomeSpeech\", s);\n       configList.add(config);\n     }\n     // Remove existing configurations with the specified log configuration name\n     AdminConfig.remove(AdminConfig.getid(\"/LogWelcomeSpeech:\" + logConfigurationName));\n     // Save the list of configurations in batch\n     AdminConfig.save(configList);\n   } catch (Exception e) {\n     e.printStackTrace();\n   }\n }", "CodeBleu_score": 41.04510195830501}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\ttry {\n\n   // Create an AdminConfig object and set its properties.\n   AdminConfig logConfig = AdminConfig.create(\"LogConfig\", \"\");\n   AdminConfig.modify(logConfig, \"name\", \"LogConfig\");\n   AdminConfig.modify(logConfig, \"logWelcomeSpeech\", \"true\");\n\n   // Create an AdminConfig object for each string in the list and set its properties.\n   for (String string : stringList) {\n    AdminConfig welcomeString = AdminConfig.create(\"LogWelcomeString\", \"\");\n    AdminConfig.modify(welcomeString, \"string\", string);\n    AdminConfig.modify(welcomeString, \"logWelcomeString\", \"true\");\n   }\n\n   // Remove the existing configuration with the specified log configuration name.\n   AdminConfig logConfigToRemove = AdminConfig.getid(\"/LogConfig:\" + \"LogConfig\");\n   AdminConfig.remove(logConfigToRemove);\n\n   // Save the new list of configurations in batch.\n   AdminConfig.save();\n\n  } catch (Exception e) {\n   e.printStackTrace();\n  }\n\n }", "CodeBleu_score": 34.974006897496515}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString userId = adminInitDataBO.getUserId();\n    String password = adminInitDataBO.getPassword();\n    String tempAccessCode = null;\n    try {\n        String userDetails = userService.getUserDetails(userId);\n        String username = userService.getUsername(userId);\n        String salt = userService.getSalt(userId);\n        String storedPassword = userService.getPassword(userId);\n        if (BCrypt.checkpw(password, storedPassword)) {\n            tempAccessCode = UUID.randomUUID().toString();\n            redisService.setValue(tempAccessCode, userId, 600);\n        } else {\n            throw new Exception(\"Invalid password\");\n        }\n    } catch (Exception e) {\n        logger.error(\"Error while verifying password\", e);\n    }\n    return tempAccessCode;\n}", "CodeBleu_score": 36.12967022159287}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t// Get the current user ID and user details, including the username.\n    String currentUserId = getCurrentUserId();\n    UserDetails userDetails = getUserDetails(currentUserId);\n    String username = userDetails.getUsername();\n\n    // Check the provided password against the stored password using the username and salt.\n    String storedPassword = getStoredPassword(username);\n    String salt = getSalt(username);\n    String providedPassword = adminInitDataBO.getPassword();\n    if (!passwordsMatch(providedPassword, storedPassword, salt)) {\n        throw new IllegalArgumentException(\"Invalid password.\");\n    }\n\n    // Generate a temporary access code.\n    String accessCode = generateAccessCode();\n\n    // Store the temporary access code in Redis with a 10-minute expiration.\n    redisTemplate.opsForValue().set(accessCode, currentUserId, 10, TimeUnit.MINUTES);\n\n    return accessCode;\n}", "CodeBleu_score": 33.3638797749466}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\tString userId = adminInitDataBO.getUserId();\n    String password = adminInitDataBO.getPassword();\n\n    if (userId == null || password == null) {\n        throw new IllegalArgumentException(\"User ID or password is null\");\n    }\n\n    User user = userDao.getUser(userId);\n    if (user == null) {\n        throw new IllegalArgumentException(\"User ID is invalid\");\n    }\n\n    String salt = user.getSalt();\n    String storedPassword = user.getPassword();\n\n    String providedPassword = Hashing.sha256().hashString(password, StandardCharsets.UTF_8).toString();\n    String hashedPassword = Hashing.sha256().hashString(salt + password, StandardCharsets.UTF_8).toString();\n\n    if (!hashedPassword.equals(storedPassword)) {\n        throw new IllegalArgumentException(\"Invalid password\");\n    }\n\n    String accessCode = UUID.randomUUID().toString();\n    redisTemplate.opsForValue().set(accessCode, userId, 10, TimeUnit.MINUTES);\n\n    return accessCode;\n}", "CodeBleu_score": 37.11067889192253}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tString userId = getUserId();\n    String key = \"unauth:\" + userId;\n    Jedis jedis = jedisPool.getResource();\n    try {\n        Set<String> unauthUrls = jedis.smembers(key);\n        if (unauthUrls.contains(getRequest().getRequestURI())) {\n            return true;\n        }\n    } finally {\n        jedis.close();\n    }\n    return false;\n}", "CodeBleu_score": 39.48570353385006}, {"code": "private boolean verifyInitAuth(){\n\tString userId = (String) request.getSession().getAttribute(\"user_id\");\n    String key = \"unauth_urls_\" + userId;\n    Set<String> unauthUrls = (Set<String>) redisService.get(key);\n    if (unauthUrls != null) {\n        return unauthUrls.contains(request.getRequestURI());\n    }\n    return false;\n}", "CodeBleu_score": 42.08087219033873}, {"code": "private boolean verifyInitAuth(){\n\tString userId = getUserId();\n    String key = \"unauth:\" + userId;\n    Jedis jedis = jedisPool.getResource();\n    try {\n        Set<String> unauthUrls = jedis.smembers(key);\n        if (unauthUrls.contains(initAuthUrl)) {\n            return true;\n        }\n    } finally {\n        jedis.close();\n    }\n    return false;\n}", "CodeBleu_score": 40.0449259000791}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t// Create a list of AdminRoleMenu objects.\n    List<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    // Save the list of role-menu associations in batches.\n    int batchSize = 100;\n    int batchCount = (int) Math.ceil((double) roleMenuList.size() / batchSize);\n    for (int i = 0; i < batchCount; i++) {\n        int start = i * batchSize;\n        int end = Math.min((i + 1) * batchSize, roleMenuList.size());\n        List<AdminRoleMenu> batch = roleMenuList.subList(start, end);\n        adminRoleMenuDao.save(batch);\n    }\n}", "CodeBleu_score": 44.946799658680256}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tif (roleId == null || menuIdList == null) {\n        return;\n    }\n    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setMenuId(menuId);\n        roleMenu.setRoleId(roleId);\n        roleMenuList.add(roleMenu);\n    }\n    // Save the list of role-menu associations in batches\n    int batchSize = 50;\n    int total = roleMenuList.size();\n    int totalBatches = total / batchSize + 1;\n    for (int i = 0; i < totalBatches; i++) {\n        int start = i * batchSize;\n        int end = Math.min((i + 1) * batchSize, total);\n        List<AdminRoleMenu> batch = roleMenuList.subList(start, end);\n        adminRoleMenuDao.save(batch);\n    }\n}", "CodeBleu_score": 43.98305211888989}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tif (menuIdList != null && menuIdList.size() > 0) {\n        List<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n        for (Integer menuId : menuIdList) {\n            AdminRoleMenu roleMenu = new AdminRoleMenu();\n            roleMenu.setRoleId(roleId);\n            roleMenu.setMenuId(menuId);\n            roleMenuList.add(roleMenu);\n        }\n        adminRoleMenuDao.saveAll(roleMenuList);\n    }\n}", "CodeBleu_score": 50.29934785087449}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n    map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), DatePattern.NORM_DATETIME_PATTERN));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 51.609245698458125}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tMap<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(getSysLogIndex());\n        indexRequest.id(sysLog.getId().toString());\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 51.413104090491935}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tMap<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), DatePattern.NORM_DATETIME_PATTERN));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(getSysLogIndex());\n        indexRequest.source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 47.69278216895966}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tBasePage<SysLog> sysLogBasePage = new BasePage<>();\n        try {\n            // 1. Initializing the search criteria\n            SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n            // 2. Sorting the results by creation time in descending order\n            searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n            // 3. Excluding specific fields from the response\n            searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"userName\", \"model\", \"subModelLabel\", \"createTime\", \"ip\", \"content\", \"result\", \"exception\"}, null);\n            // 4. Executing the search request using a REST client\n            SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n            searchRequest.source(searchSourceBuilder);\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            // 5. Mapping the search results to SysLog objects\n            SearchHit[] hits = searchResponse.getHits().getHits();\n            List<SysLog> sysLogList = new ArrayList<>();\n            for (SearchHit hit : hits) {\n                SysLog sysLog = new SysLog();\n                sysLog.setId(hit.getId());\n                sysLog.setUserId((Long) hit.getSourceAsMap().get(\"userId\"));\n                sysLog.setUserName((String) hit.getSourceAsMap().get(\"userName\"));\n                sysLog.setModel((String) hit.getSourceAsMap().get(\"model\"));\n                sysLog.setSubModelLabel((String) hit.getSourceAsMap().get(\"subModelLabel\"));\n                sysLog.setCreateTime((String) hit.getSourceAsMap().get(\"createTime\"));\n                sysLog.setIp((String) hit.getSourceAsMap().get(\"ip\"));\n                sysLog.setContent((String) hit.getSourceAsMap().get(\"content\"));\n                sysLog.setResult((String) hit.getSourceAsMap().get(\"result\"));\n                sysLog.setException((String) hit.getSourceAsMap().get(\"exception\"));\n                sysLogList", "CodeBleu_score": 46.079069879547994}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        searchSourceBuilder.fetchSource(new String[]{\"-id\"}, null);\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = null;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        SearchHit[] searchHits = searchResponse.getHits().getHits();\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit searchHit : searchHits) {\n            SysLog sysLog = JSON.parseObject(searchHit.getSourceAsString(), SysLog.class);\n            sysLog.setId(searchHit.getId());\n            sysLogList.add(sysLog);\n        }\n        BasePage<SysLog> sysLogBasePage = new BasePage<>();\n        sysLogBasePage.setTotal(searchResponse.getHits().getTotalHits().value);\n        sysLogBasePage.setPage(querySysLogBO.getPage());\n        sysLogBasePage.setPageSize(querySysLogBO.getLimit());\n        sysLogBasePage.setList(sysLogList);\n        return sysLogBasePage;\n    }", "CodeBleu_score": 55.154770814798624}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t// 1. Initialize the search criteria\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        // 2. Sort the results by creation time in descending order\n        searchSourceBuilder.sort(new FieldSortBuilder(\"createTime\").order(SortOrder.DESC));\n        // 3. Exclude specific fields from the response\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"userName\", \"model\", \"subModelLabel\", \"ip\", \"createTime\"}, null);\n        // 4. Execute the search request using a REST client\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u641c\u7d22\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n            return null;\n        }\n        // 5. Map the search results to SysLog objects\n        SearchHit[] searchHits = searchResponse.getHits().getHits();\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit searchHit : searchHits) {\n            SysLog sysLog = JSON.parseObject(searchHit.getSourceAsString(), SysLog.class);\n            sysLog.setId(searchHit.getId());\n            sysLogList.add(sysLog);\n        }\n        // 6. Populate a BasePage object with the results, including total hits and current page\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setCurrent(querySysLogBO.getPage());\n        basePage.setSize(querySysLogBO.getLimit());\n        basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n        basePage.setRecords(sysLogList);\n        return basePage;\n    }", "CodeBleu_score": 51.520273154284226}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, response => {\n      response.pipe(file);\n      file.on('finish', () => {\n        file.close();  // close() is async, call cb after close completes.\n        resolve();\n      });\n    }).on('error', err => { // Handle errors\n      fs.unlink(dest); // Delete temp file\n      reject(err.message);\n    });\n  });\n}", "CodeBleu_score": 57.70452689082062}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    const request = https.get(url, response => {\n      response.pipe(file);\n      file.on(\"finish\", () => {\n        file.close();\n        resolve();\n      });\n    });\n    request.on(\"error\", err => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 64.46370758333842}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, response => {\n      response.pipe(file);\n      file.on(\"finish\", () => {\n        file.close();\n        resolve();\n      });\n    }).on(\"error\", err => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 60.70333164229}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn module.getDependentModules().filter(moduleId -> !this.processedModuleIds.contains(moduleId))\n        .doOnNext(this.processedModuleIds::add)\n        .doOnNext(moduleId -> circularDependencyCheckSet.add(moduleId))\n        .flatMap(moduleId -> this.getModule(moduleId))\n        .onErrorContinue((throwable, moduleId) -> {\n            if (throwable instanceof ModuleNotFoundException) {\n                this.logger.warn(\"Dependent module not found: {}\", moduleId);\n            } else {\n                this.logger.warn(\"Failed to retrieve dependent module: {}\", moduleId, throwable);\n            }\n        });\n}", "CodeBleu_score": 47.60605928026963}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn module.getDependentModules()\n   .filter(dependentModule -> !circularDependencyCheckSet.contains(dependentModule.getId()))\n   .flatMap(dependentModule -> {\n    circularDependencyCheckSet.add(dependentModule.getId());\n    return getDependentModules(dependentModule, circularDependencyCheckSet);\n   })\n   .onErrorContinue((throwable, o) -> log.warn(\"Failed to retrieve dependent module '{}' of module '{}'\", o, module.getId(), throwable));\n }", "CodeBleu_score": 48.84105872902115}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn Flux.fromIterable(module.getDependentModules())\n         .filter(moduleId -> !processedModuleIds.contains(moduleId))\n         .doOnNext(processedModuleIds::add)\n         .doOnNext(dependentModuleId -> circularDependencyCheckSet.add(module.getId()))\n         .flatMap(this::getModule)\n         .onErrorContinue((throwable, o) -> {\n             log.warn(\"Could not retrieve dependent module with id '{}' for module with id '{}'\", o, module.getId());\n         });\n }", "CodeBleu_score": 59.10313888000187}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tAsset asset = new Asset();\n        if (createThumbnail) {\n            asset.setData(resizeImage(dataBuffer));\n            asset.setContentType(MediaType.IMAGE_JPEG_VALUE);\n        } else {\n            asset.setData(dataBuffer.asByteArray());\n            asset.setContentType(srcContentType.toString());\n        }\n        return asset;\n    }", "CodeBleu_score": 31.280774554068486}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tAsset asset = new Asset();\n        if (createThumbnail) {\n            asset.setContentType(MediaType.IMAGE_JPEG.toString());\n            asset.setData(resizeImage(dataBuffer));\n        } else {\n            asset.setContentType(srcContentType.toString());\n            asset.setData(dataBuffer.asByteArray());\n        }\n        return asset;\n    }", "CodeBleu_score": 31.371809048685535}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tAsset asset = new Asset();\n        byte[] data = dataBuffer.asByteArray();\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        }\n        asset.setData(data);\n        asset.setContentType(srcContentType.toString());\n        DataBufferUtils.release(dataBuffer);\n        return asset;\n    }", "CodeBleu_score": 41.537023453533564}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n                return exchange.getResponse().writeWith(Mono.just(buffer));\n            });\n}", "CodeBleu_score": 49.00375235347955}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n                return exchange.getResponse().writeWith(Mono.just(buffer));\n            });\n}", "CodeBleu_score": 53.43529051284621}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n        .flatMap(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n            }\n            DataBuffer buffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n            return exchange.getResponse().writeWith(Mono.just(buffer));\n        });\n}", "CodeBleu_score": 51.84652645072625}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (workspaceMode == WorkspaceMode.SAAS) {\n    return Flux.empty();\n  }\n  return organizationFinder.findAll().map(o -> {\n    final String orgId = o.getOrganizationId();\n    final String orgName = o.getName();\n    final String orgSlug = o.getSlug();\n    final String orgImageUrl = o.getImageUrl();\n    final String orgWebsiteUrl = o.getWebsiteUrl();\n    final String orgDescription = o.getDescription();\n    final String orgPrimaryColor = o.getPrimaryColor();\n    final String orgSecondaryColor = o.getSecondaryColor();\n    final String orgLogoImageId = o.getLogoImageId();\n    final String orgCoverImageId = o.getCoverImageId();\n    final String orgCreatedAt = o.getCreatedAt();\n    final String orgUpdatedAt = o.getUpdatedAt();\n    final String orgDeletedAt = o.getDeletedAt();\n    final String orgWorkspaceId = o.getWorkspaceId();\n    final String orgSlugId = o.getSlugId();\n    final String orgSubdomain = o.getSubdomain();\n    final String orgAuthType = o.getAuthType();\n    final String orgAuth0Domain = o.getAuth0Domain();\n    final String orgAuth0ClientId = o.getAuth0ClientId();\n    final String orgAuth0ClientSecret = o.getAuth0ClientSecret();\n    final String orgAuth0RedirectUri = o.getAuth0RedirectUri();\n    final String orgAuth0Audience = o.getAuth0Audience();\n    final String orgAuth0Scope = o.getAuth0Scope();\n    final String orgAuth0GrantType = o.getAuth0GrantType();\n    final String orgAuth0LogoutUrl = o.getAuth0LogoutUrl();\n    final String orgGithubClientId = o.getGithubClientId();\n    final String orgGithubClientSecret = o.getGithubClientSecret();\n    final String orgGithubRedirectUri = o.getGithubRedirectUri();\n    final String orgGithubScope = o.getGithubScope();\n    final String", "CodeBleu_score": 24.077332626118796}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tif (workspaceMode == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationRepository.findAll()\n        .map(org -> org.getAuthConfig())\n        .map(authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getAuthProvider(), authConfig.getIsEnabled(), authConfig.getIsDefault(), authConfig.getClientId(), authConfig.getClientSecret(), authConfig.getDomain(), authConfig.getProfileFields(), authConfig.getScope(), authConfig.getAuthEndpoint(), authConfig.getTokenEndpoint(), authConfig.getUserInfoEndpoint(), authConfig.getLogoutEndpoint(), authConfig.getRedirectUrl(), authConfig.getCallbackUrl(), authConfig.getClientAuthMethod(), authConfig.getAccessTokenUrl(), authConfig.getAccessTokenQueryParams(), authConfig.getAccessTokenMutator(), authConfig.getPostLogoutRedirectUrl(), authConfig.getProviderSlug()));\n}", "CodeBleu_score": 28.12725330873404}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn workspaceMode == WorkspaceMode.ENTERPRISE ?\n    Mono.just(organizationService.findAll())\n      .flatMapMany(organizations -> Flux.fromIterable(organizations)\n        .map(organization -> {\n          final String orgId = organization.getId();\n          return new FindAuthConfig(\n            orgId,\n            organization.getName(),\n            organization.getAuthConfig()\n          );\n        })) :\n    Flux.empty();\n}", "CodeBleu_score": 28.128506278887734}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn new MongockSpring5.MongockApplicationRunner(springContext, mongoTemplate)\n            .setLockQuickConfig()\n            .addChangeLogsScanPackage(\"com.example.changelogs\")\n            .setSpringContext(springContext);\n}", "CodeBleu_score": 22.221888697978816}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockSpring5.MongockApplicationRunner runner = MongockSpring5.MongockApplicationRunner.builder()\n            .setSpringContext(springContext)\n            .setDriver(new SpringMongo3Driver(mongoTemplate))\n            .addChangeLogsScanPackage(this.getClass().getPackage().getName())\n            .build();\n    return runner;\n}", "CodeBleu_score": 39.007768087654554}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongockSpring5.MongockApplicationRunner runner = new MongockSpring5.MongockApplicationRunner(\n    mongoTemplate,\n    springContext,\n    \"com.example.migrations\"\n  );\n  runner.setWriteConcern(WriteConcern.MAJORITY);\n  runner.setReadConcern(ReadConcern.MAJORITY);\n  return runner;\n}", "CodeBleu_score": 33.10988836016844}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory,\n            mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 76.21452909555282}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n    template.setReadPreference(ReadPreference.secondaryPreferred());\n\n    return template;\n}", "CodeBleu_score": 77.82290641854172}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    template.setWriteResultChecking(WriteResultChecking.EXCEPTION);\n    template.setReadPreference(ReadPreference.secondaryPreferred());\n    return template;\n}", "CodeBleu_score": 69.313720131267}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getById(libraryQueryId)\n                .flatMap(libraryQuery -> {\n                    if (libraryQuery.getUpdatedAt() != null) {\n                        return getLatestLibraryQueryRecord(libraryQueryId)\n                                .map(libraryQueryRecord -> libraryQueryRecord.getDsl())\n                                .defaultIfEmpty(libraryQuery.getDsl());\n                    }\n                    return Mono.just(libraryQuery.getDsl());\n                });\n    }", "CodeBleu_score": 46.084762460527685}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getById(libraryQueryId)\n                .flatMap(libraryQuery -> {\n                    if (StringUtils.isEmpty(libraryQuery.getLiveDSL())) {\n                        return Mono.just(libraryQuery.getDsl());\n                    }\n                    return Mono.just(libraryQuery.getLiveDSL());\n                });\n    }", "CodeBleu_score": 44.24847224541253}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getById(libraryQueryId)\n                .flatMap(libraryQuery -> {\n                    if (StringUtils.isEmpty(libraryQuery.getDsl())) {\n                        return Mono.error(deferredError(LIBRARY_QUERY_DSL_NOT_FOUND, \"LIBRARY_QUERY_DSL_NOT_FOUND\"));\n                    }\n                    return Mono.just(libraryQuery.getDsl());\n                });\n    }", "CodeBleu_score": 42.268686953553754}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tfinal long timeout = timeoutStr == null ? 0 : Long.parseLong(timeoutStr);\n        return Mono.defer(() -> {\n            if (timeout > 0) {\n                return Mono.just(Duration.ofMillis(timeout))\n                        .zipWith(Mono.just(datasource))\n                        .zipWith(Mono.just(queryConfig))\n                        .zipWith(Mono.just(requestParams))\n                        .zipWith(Mono.just(queryVisitorContext))\n                        .flatMap(tuple -> {\n                            Duration timeoutDuration = tuple.getT1().getT1();\n                            Datasource datasource1 = tuple.getT1().getT2();\n                            Map<String, Object> queryConfig1 = tuple.getT1().getT3();\n                            Map<String, Object> requestParams1 = tuple.getT1().getT4();\n                            QueryVisitorContext queryVisitorContext1 = tuple.getT1().getT5();\n\n                            return Mono.just(datasource1)\n                                    .flatMap(datasource2 -> {\n                                        if (datasource2.getType() == DatasourceType.PLUGIN) {\n                                            return executeByNodeJs(datasource2, queryConfig1, requestParams1);\n                                        } else {\n                                            return executeLocally(datasource2, queryConfig1, requestParams1, queryVisitorContext1);\n                                        }\n                                    })\n                                    .timeout(timeoutDuration, Mono.error(new TimeoutException(\"Query execution timed out\")))\n                                    .onErrorMap(TimeoutException.class, error -> new AppsmithPluginException(\n                                            AppsmithPluginError.PLUGIN_TIMEOUT_ERROR,\n                                            error.getMessage()\n                                    ));\n                        })\n                        .onErrorMap(AppsmithPluginException.class, error -> {\n                            if (error.getErrorType() == AppsmithPluginError.PLUGIN_ERROR) {\n                                return new AppsmithPluginException(\n                                        AppsmithPluginError.PLUGIN_EXEC", "CodeBleu_score": 37.16090154877214}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tlong timeout = Long.parseLong(timeoutStr);\n        return Mono.defer(() -> {\n            if (datasource.getType() == DatasourceType.REST) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        })\n                .timeout(Duration.ofMillis(timeout))\n                .onErrorMap(TimeoutException.class, error -> new AppsmithPluginException(\n                        AppsmithPluginError.PLUGIN_TIMEOUT_ERROR,\n                        error.getMessage()\n                ))\n                .onErrorMap(AppsmithPluginException.class, error -> error)\n                .onErrorMap(Exception.class, error -> {\n                    log.error(\"Error executing query: {}\", error.getMessage());\n                    return new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_ERROR,\n                            error.getMessage()\n                    );\n                });\n    }", "CodeBleu_score": 56.13607572916122}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tif (StringUtils.isEmpty(timeoutStr)) {\n            timeoutStr = DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        final long timeout = Long.parseLong(timeoutStr);\n\n        if (datasource.getType() == DatasourceType.REST) {\n            return executeRest(datasource, queryConfig, requestParams, timeout);\n        }\n\n        if (datasource.getType() == DatasourceType.MONGO) {\n            return executeMongo(datasource, queryConfig, requestParams, timeout);\n        }\n\n        if (datasource.getType() == DatasourceType.EMBEDDED) {\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n\n        return executeByNodeJs(datasource, queryConfig, requestParams);\n    }", "CodeBleu_score": 44.67642664422462}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\treturn Mono.just(datasource)\n                .flatMap(ds -> getQueryExecutor(ds.getDatasourceConfiguration()))\n                .flatMap(queryExecutor -> {\n                    QueryContext queryContext = new QueryContext(queryConfig, requestParams, queryVisitorContext);\n                    return queryExecutor.execute(queryContext);\n                });\n    }", "CodeBleu_score": 30.937058798957583}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource.getDatasourceConfiguration());\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .query(queryVisitorContext.getParsedQuery())\n                .queryConfig(queryConfig)\n                .pluginSpecifiedTemplates(queryVisitorContext.getPluginSpecifiedTemplates())\n                .requestParams(requestParams)\n                .build();\n\n        return Mono.fromCallable(() -> {\n            Connection connection = queryExecutor.getDatasourceConnection(datasource);\n            return queryExecutor.execute(queryExecutionContext, connection);\n        })\n                .map(result -> {\n                    // Close the connection after the query has been executed\n                    queryExecutor.closeConnection(connection);\n                    return result;\n                })\n                .onErrorResume(throwable -> {\n                    // Close the connection if an error occurs while executing the query\n                    queryExecutor.closeConnection(connection);\n                    return Mono.error(throwable);\n                });\n    }", "CodeBleu_score": 41.77100996460581}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t// Get the datasource type\n        DatasourceType datasourceType = datasource.getDatasourceType();\n        // Get the query executor for the datasource type\n        QueryExecutor queryExecutor = queryExecutorRegistry.getExecutor(datasourceType);\n        // Build the query execution context\n        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .datasource(datasource)\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n        // Acquire a connection from the datasource connection pool\n        return queryExecutor\n                .getConnection(queryExecutionContext)\n                .flatMap(connection -> {\n                    // Execute the query using the connection\n                    return queryExecutor\n                            .execute(queryExecutionContext, connection)\n                            .onErrorResume(throwable -> {\n                                // If the query execution fails, close the connection and rethrow the error\n                                return connection.close().then(Mono.error(throwable));\n                            })\n                            .doFinally(signalType -> {\n                                // Always close the connection\n                                connection.close();\n                            });\n                });\n    }", "CodeBleu_score": 42.720019856241834}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int unitIndex = unitInfo.getRight();\n        int value;\n        try {\n            value = Integer.parseInt(timeoutStr.substring(0, unitIndex));\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid timeout value: \" + timeoutStr);\n        }\n        int ms = convertToMs(value, unit);\n        if (ms > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Timeout value exceeds the maximum allowed timeout: \" + timeoutStr);\n        }\n        return ms;\n    }", "CodeBleu_score": 57.76304874124965}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getKey();\n        int unitIndex = unitInfo.getValue();\n        if (unitIndex == -1) {\n            throw new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr);\n        }\n        try {\n            double value = Double.parseDouble(timeoutStr.substring(0, unitIndex));\n            if (value > MAX_QUERY_TIMEOUT_MS) {\n                throw new IllegalArgumentException(\"Query timeout \" + value + \" \" + unit + \" is greater than the maximum allowed timeout: \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n            }\n            return convertToMs(value, unit);\n        } catch (NumberFormatException e) {\n            throw new IllegalArgumentException(\"Invalid query timeout string: \" + timeoutStr, e);\n        }\n    }", "CodeBleu_score": 52.3925870818635}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        String unit = unitInfo.getLeft();\n        int value = Integer.parseInt(timeoutStr.substring(0, unitInfo.getRight()));\n        int ms = convertToMs(value, unit);\n        if (ms < 0 || ms > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(\"Query timeout must be between 0 and \" + MAX_QUERY_TIMEOUT_MS + \" ms\");\n        }\n        return ms;\n    }", "CodeBleu_score": 44.506590212940495}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn Mono.just(application.getPages())\n                .flatMapIterable(pages -> pages)\n                .flatMapIterable(Page::getLayouts)\n                .flatMapIterable(layout -> layout.getLayoutOnLoadActions())\n                .filter(action -> action.getAction() == OnLoadAction.Action.API_CALL)\n                .map(OnLoadAction::getExecute)\n                .flatMapIterable(execute -> execute.getApiCalls())\n                .filter(apiCall -> apiCall.getDatasource() != null)\n                .map(ApiCall::getDatasource)\n                .distinct()\n                .collectList()\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"datasource\", \"\"));\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                            .collectList()\n                            .map(copiedDatasourceIds -> {\n                                if (copiedDatasourceIds.size() != datasourceIds.size()) {\n                                    throw new AppsmithException(AppsmithError.INTERNAL_SERVER_ERROR, \"Error while copying datasource\");\n                                }\n                                return IntStream.range(0, datasourceIds.size())\n                                        .mapToObj(index -> new Pair<>(datasourceIds.get(index), copiedDatasourceIds.get(index)))\n                                        .collect(Collectors.toList());\n                            });\n                });\n    }", "CodeBleu_score": 35.104788103392906}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn Mono.zip(\n                applicationService.getById(application.getId()),\n                datasourceService.findAllByOrganizationId(currentOrganizationId, MANAGE_DATASOURCES).collectList(),\n                (application1, datasources) -> {\n                    List<String> datasourceIds = application1.getPages()\n                            .stream()\n                            .map(Page::getPolicies)\n                            .flatMap(Collection::stream)\n                            .map(Policy::getDatasource)\n                            .filter(Objects::nonNull)\n                            .collect(Collectors.toList());\n\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"datasource\", \"\"));\n                    }\n\n                    List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n                    for (String datasourceId : datasourceIds) {\n                        if (datasourceId.equals(Datasource.REST_TEMPLATE_DATASOURCE_ID)\n                                || datasourceId.equals(Datasource.MONGO_TEMPLATE_DATASOURCE_ID)\n                                || datasourceId.equals(Datasource.SAAS_TEMPLATE_DATASOURCE_ID)\n                                || datasourceId.equals(Datasource.SAAS_POSTGRESQL_TEMPLATE_DATASOURCE_ID)\n                                || datasourceId.equals(Datasource.SAAS_MONGO_TEMPLATE_DATASOURCE_ID)\n                                || datasourceId.equals(Datasource.SAAS_MYSQL_TEMPLATE_DATASOURCE_ID)\n                                || datasourceId.equals(Datasource.SAAS_ORACLE_TEMPLATE_DATASOURCE_ID)\n                                || datasourceId.equals(Datasource.SAAS_MSSQL_TEMPLATE_DATASOURCE_ID)\n                                || datasourceId.equals(Datasource.SAAS_REDIS_TEMPLATE_DATASOUR", "CodeBleu_score": 39.57083150728062}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn Mono.zip(\n                applicationPageService.getApplication(application.getId(), false),\n                datasourceService.findAllByOrganizationId(currentOrganizationId, MANAGE_DATASOURCES).collectList()\n        ).flatMap(tuple -> {\n            Application applicationWithPages = tuple.getT1();\n            List<Datasource> datasourcesInCurrentOrg = tuple.getT2();\n            List<String> datasourceIdsInCurrentOrg = datasourcesInCurrentOrg.stream().map(Datasource::getId).collect(Collectors.toList());\n\n            List<String> datasourceIdsInTemplate = applicationWithPages.getPages().stream()\n                    .filter(page -> !page.isDeleted())\n                    .flatMap(page -> page.getLayouts().stream()\n                            .flatMap(layout -> layout.getLayoutOnLoadActions().stream())\n                            .filter(actionDTO -> actionDTO.getAction() != null)\n                            .filter(actionDTO -> actionDTO.getAction().getPluginType() != null)\n                            .filter(actionDTO -> actionDTO.getAction().getPluginType().equals(PluginType.API))\n                            .map(actionDTO -> actionDTO.getAction().getDatasource().getId())\n                    ).collect(Collectors.toList());\n\n            List<String> datasourceIdsToBeCopied = datasourceIdsInTemplate.stream()\n                    .filter(datasourceId -> !datasourceIdsInCurrentOrg.contains(datasourceId))\n                    .collect(Collectors.toList());\n\n            if (datasourceIdsToBeCopied.isEmpty()) {\n                return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCE, application.getName()));\n            }\n\n            List<Mono<Pair<String, String>>> datasourceCopyList = datasourceIdsToBeCopied.stream()\n                    .map(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                    .collect(Collectors.toList());", "CodeBleu_score": 42.49024198981313}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystemDataSource() || datasource.getIsLegacyQuickRestApi() || datasource.getIsLegacyOpenblocksApi()) {\n                    return Mono.just(datasourceId);\n                }\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 45.595517888196845}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystemStatic()) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.getIsLegacyQuickRestApi()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.getIsLegacyOpenblocks()) {\n                    return Mono.just(datasource.getId());\n                }\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 73.49902050904159}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystemDataSource()) {\n                    return Mono.just(datasourceId);\n                }\n\n                if (datasource.getIsLegacyQuickRestApi()) {\n                    return Mono.just(datasource.getId());\n                }\n\n                if (datasource.getIsLegacyOpenblocks()) {\n                    return Mono.just(datasource.getId());\n                }\n\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 73.31170069775456}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.upload(filePart, user.getOrgId(), user.getId())\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.deleteById(user.getAvatar())\n                                .flatMap(deleted -> updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 31.087405020822345}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.uploadAsset(filePart, user.getId(), AssetType.USER_AVATAR)\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.deleteAsset(user.getAvatar())\n                                .flatMap(deleted -> updateUserAvatar(newAvatar, user.getId()));\n                    }\n                    return updateUserAvatar(newAvatar, user.getId());\n                });\n    }", "CodeBleu_score": 32.092015689418766}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.uploadAsset(filePart)\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.deleteAsset(user.getAvatar())\n                                .then(updateUserAvatar(asset, user.getId()));\n                    }\n                    return updateUserAvatar(asset, user.getId());\n                });\n    }", "CodeBleu_score": 30.341335170499846}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setEnabled(authUser.isEnabled());\n    user.setAvatarLink(authUser.getAvatarLink());\n    user.setAuthSource(authUser.getAuthSource());\n    user.setAuthContext(authUser.getAuthContext());\n    if (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(\"password\")) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\")));\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return repository.save(user);\n}", "CodeBleu_score": 44.13560020756212}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tif (authUser == null) {\n        return Mono.empty();\n    }\n    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatarLink(authUser.getPicture());\n    if (authUser.getSource().equals(\"email\") && authUser.getContext().containsKey(\"password\")) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getContext().get(\"password\")));\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return repository.save(user);\n}", "CodeBleu_score": 47.75497946698918}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setEnabled(authUser.isEnabled());\n    user.setAvatarLink(authUser.getAvatarLink());\n    if (authUser.getSource() == AuthSource.EMAIL && authUser.getContext().containsKey(\"password\")) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getContext().get(\"password\")));\n    }\n    user.setNew(true);\n    user.setConnections(authUser.getConnections());\n    return repository.save(user);\n}", "CodeBleu_score": 39.81593272288585}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn emailSource.createConnection(email)\n            .flatMap(connection -> {\n                user.getConnections().add(connection);\n                return userRepository.save(user);\n            })\n            .onErrorMap(DuplicateKeyException.class, e -> new EmailAlreadyBoundException());\n}", "CodeBleu_score": 20.847885426657584}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.just(user)\n        .flatMap(user1 -> {\n            Connection connection = new Connection();\n            connection.setProviderId(\"email\");\n            connection.setProviderUserId(email);\n            connection.setDisplayName(email);\n            connection.setImageUrl(null);\n            connection.setProfileUrl(null);\n            return connectionRepository.save(connection);\n        })\n        .flatMap(connection -> {\n            user.getConnections().add(connection);\n            return userRepository.save(user);\n        })\n        .map(user1 -> true)\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 37.993282568244034}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn userRepository.save(user)\n        .onErrorMap(DuplicateKeyException.class, e -> new EmailAlreadyBoundException(email))\n        .map(u -> true);\n}", "CodeBleu_score": 8.948703996590355}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.matches(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.OLD_PASSWORD));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 27.110516216502962}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.isPasswordValid(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\"));\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 27.714810565361027}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .flatMap(user -> {\n                if (encryptionService.validatePassword(oldPassword, user.getPassword())) {\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    return repository.save(user);\n                } else {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\"));\n                }\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 30.42462770281632}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tif (orgMember.getRole().equals(OrgRole.ADMIN)) {\n            return groupRepository.findAll()\n                    .filter(group -> !group.getId().equals(Group.ALL_USERS_GROUP_ID))\n                    .map(group -> {\n                        Map<String, String> groupMap = new HashMap<>();\n                        groupMap.put(\"id\", group.getId());\n                        groupMap.put(\"name\", group.getName());\n                        return groupMap;\n                    })\n                    .collectList();\n        } else {\n            return groupRepository.findByOrganizationId(orgMember.getOrganizationId())\n                    .filter(group -> !group.getId().equals(Group.ALL_USERS_GROUP_ID))\n                    .filter(group -> !withoutDynamicGroups || !group.getId().startsWith(\"dyn-\"))\n                    .map(group -> {\n                        Map<String, String> groupMap = new HashMap<>();\n                        groupMap.put(\"id\", group.getId());\n                        groupMap.put(\"name\", group.getName());\n                        return groupMap;\n                    })\n                    .collectList();\n        }\n    }", "CodeBleu_score": 26.03809055664559}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn buildUserDetailGroups(userId, orgMember, withoutDynamicGroups, locale, null);\n    }", "CodeBleu_score": 7.181174744848382}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t// Get the groups the user is a member of.\n        Mono<List<Group>> groupsMono = getUserGroups(userId, orgMember, withoutDynamicGroups);\n\n        // Get the group ids and localized group names.\n        return groupsMono\n                .flatMapMany(groups -> Flux.fromIterable(groups))\n                .filter(group -> !group.getId().equals(ALL_USERS_GROUP_ID))\n                .map(group -> {\n                    Map<String, String> groupMap = new HashMap<>();\n                    groupMap.put(\"id\", group.getId());\n                    groupMap.put(\"name\", group.getName());\n                    return groupMap;\n                })\n                .collectList();\n    }", "CodeBleu_score": 32.85482215581199}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n\n    return mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 32.420950477818636}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId);\n  userStatus.setHasShowNewUserGuidance(true);\n\n  return mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 31.7761273514807}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId, true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class, \"userId\");\n}", "CodeBleu_score": 31.59441129661679}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate is nil\")\n\t}\n\tgroup := &sync.WaitGroup{}\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.key, partition.manager) {\n\t\t\tgroup.Add(1)\n\t\t\tgo func(partition Partition) {\n\t\t\t\tpartition.manager.ClearMatching(predicateValue)\n\t\t\t\tgroup.Done()\n\t\t\t}(partition)\n\t\t}\n\t}\n\tgroup.Wait()\n}", "CodeBleu_score": 37.49823430076059}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\t// Create a run group to process partitions concurrently.\n\tvar runGroup sync.WaitGroup\n\trunGroup.Add(len(c.partitions))\n\tfor _, partition := range c.partitions {\n\t\tgo func(partition PartitionManager) {\n\t\t\tdefer runGroup.Done()\n\t\t\tif predicatePartition(partition.PartitionKey(), partition) {\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t}\n\t\t}(partition)\n\t}\n\trunGroup.Wait()\n}", "CodeBleu_score": 39.208407181884844}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\tc.runGroup.Add(1)\n\tdefer c.runGroup.Done()\n\tc.partitionManager.Range(func(k, v any) bool {\n\t\tif predicatePartition(k.(string), v.(PartitionManager)) {\n\t\t\tc.runGroup.Add(1)\n\t\t\tgo c.clearMatchingPartition(k.(string), v.(PartitionManager), predicateValue)\n\t\t}\n\t\treturn true\n\t})\n\tc.runGroup.Wait()\n}", "CodeBleu_score": 34.66537515473191}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn (maxItemsTotal * averageWeightPerPartition) / totalWeightQuantity\n}", "CodeBleu_score": 37.68791851319007}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := maxItemsTotal * averageWeightPerPartition\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 36.76528354997816}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\tmaxSizePerPartition := maxItemsTotal * avgWeightPerPartition\n\treturn maxSizePerPartition\n}", "CodeBleu_score": 36.9890340474935}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\treturn getConnectionMetadata()\n            .map(ConnectionMetadata::getDatabaseProductName)\n            .map(name -> {\n                Map<String, Object> map = new HashMap<>();\n                map.put(\"database.product\", name);\n                return map;\n            })\n            .defaultIfEmpty(Collections.emptyMap())\n            .block();\n    }", "CodeBleu_score": 32.994058209311696}, {"code": "public Map<String, Object> contributorMap(){\n\treturn this.getConnectionMetadata()\n        .map(metadata -> {\n            Map<String, Object> map = new HashMap<>();\n            if (metadata != null) {\n                map.put(\"database.product.name\", metadata.getDatabaseProductName());\n                map.put(\"database.product.version\", metadata.getDatabaseProductVersion());\n            }\n            return map;\n        })\n        .defaultIfEmpty(Collections.emptyMap())\n        .block();\n}", "CodeBleu_score": 38.30810700934416}, {"code": "public Map<String, Object> contributorMap(){\n\treturn getConnectionMetadata()\n            .map(metadata -> {\n                Map<String, Object> map = new HashMap<>();\n                if (metadata != null) {\n                    map.put(\"db.product\", metadata.getDatabaseProductName());\n                    map.put(\"db.version\", metadata.getDatabaseProductVersion());\n                }\n                return map;\n            })\n            .defaultIfEmpty(Collections.emptyMap())\n            .block();\n    }", "CodeBleu_score": 38.32635105646728}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tMap<String, Object> userSettings = (Map<String, Object>) configMap.get(Constants.USER_SETTINGS);\n    if (userSettings == null) {\n        info.setUserRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setUserRegistrationEnabled((Boolean) userSettings.get(Constants.USER_REGISTRATION_ENABLED));\n        info.setEmailVerificationEnabled((Boolean) userSettings.get(Constants.EMAIL_VERIFICATION_ENABLED));\n    }\n}", "CodeBleu_score": 42.55249141986711}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tMap userSettings = configMap.getMap(\"userSettings\")\n    if (userSettings == null) {\n        info.setUserRegistrationEnabled(false)\n        info.setEmailVerificationEnabled(false)\n    } else {\n        info.setUserRegistrationEnabled(userSettings.get(\"userRegistrationEnabled\"))\n        info.setEmailVerificationEnabled(userSettings.get(\"emailVerificationEnabled\"))\n    }\n}", "CodeBleu_score": 33.6312149086261}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tUserSetting userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationEnabled(false);\n    } else {\n        info.setRegistrationEnabled(userSetting.isRegistrationEnabled());\n        info.setEmailVerificationEnabled(userSetting.isEmailVerificationEnabled());\n    }\n}", "CodeBleu_score": 43.24073748322172}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tif (this.restarting) {\n\t\treturn \"Restart already in progress.\";\n\t}\n\tthis.restarting = true;\n\ttry {\n\t\tThreadGroup tg = new ThreadGroup(\"Restart\");\n\t\tThread t = new Thread(tg, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t\trestartApplication();\n\t\t\t\t} catch (Exception ex) {\n\t\t\t\t\tex.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tt.setContextClassLoader(getClass().getClassLoader());\n\t\tt.setDaemon(false);\n\t\tt.start();\n\t\treturn \"Restarting...\";\n\t} catch (Exception ex) {\n\t\tex.printStackTrace();\n\t\treturn \"Restart failed.\";\n\t}\n}", "CodeBleu_score": 34.788125211607564}, {"code": "public Object restart(){\n\t// Create a new thread group and thread to execute the restart process\n\tThreadGroup tg = new ThreadGroup(\"RestartThreadGroup\");\n\tThread t = new Thread(tg, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\t// Set the thread as non-daemon and assign the application class loader as its context class loader\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\n\t\t\t\t// Create a new instance of the application class\n\t\t\t\tObject app = getApplicationClass().newInstance();\n\n\t\t\t\t// Invoke the start method on the application\n\t\t\t\tgetApplicationClass().getMethod(\"start\", new Class[] {}).invoke(app, new Object[] {});\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Start the thread\n\tt.start();\n\n\t// Return a message indicating the restart has begun\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 40.910826211520316}, {"code": "public Object restart(){\n\ttry {\n\t\tThreadGroup tg = new ThreadGroup(\"RestartThreadGroup\");\n\t\tThread t = new Thread(tg, new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\ttry {\n\t\t\t\t\t// Set the class loader for the thread\n\t\t\t\t\tThread.currentThread().setContextClassLoader(\n\t\t\t\t\t\t\tgetClass().getClassLoader());\n\t\t\t\t\t// Create a new instance of the application\n\t\t\t\t\t// class, and invoke its main method\n\t\t\t\t\tClass c = getClass().getClassLoader().loadClass(\n\t\t\t\t\t\t\tgetClass().getName());\n\t\t\t\t\tMethod m = c.getMethod(\"main\", new Class[] {\n\t\t\t\t\t\t\tString[].class });\n\t\t\t\t\tm.invoke(null, new Object[] { new String[0] });\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tt.setDaemon(false);\n\t\tt.start();\n\t\treturn \"Restarting application...\";\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn \"Failed to restart application\";\n\t}\n}", "CodeBleu_score": 39.93666248459814}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n}", "CodeBleu_score": 93.03380957843424}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n  configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.68961594623742}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(\n        new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n    configurer.defaultCodecs().jackson2JsonDecoder(\n        new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n  }", "CodeBleu_score": 51.980404697953055}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        RequestPredicates.GET(\"/console/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Upgrade\")))\n            .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Key\")))\n            .and(RequestPredicates.path(\"/console/assets/**\", false)),\n        request -> serveIndex(indexLocation)\n    );\n}", "CodeBleu_score": 23.695896476433255}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        RequestPredicates.all(\n            RequestPredicates.method(HttpMethod.GET),\n            RequestPredicates.path(\"/console/**\", \"/console/assets/**\"),\n            RequestPredicates.accept(MediaType.TEXT_HTML),\n            RequestPredicates.headers(headers -> !headers.containsKey(HttpHeaders.UPGRADE))\n        ),\n        request -> serveIndex(consoleIndexLocation)\n    );\n}", "CodeBleu_score": 20.645303996099926}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        RequestPredicates.path(\"/console/**\")\n            .and(RequestPredicates.path(\"/console/assets/**\", false))\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.method(HttpMethod.GET))\n            .and(RequestPredicates.headers(h -> !h.containsKey(HttpHeaders.UPGRADE)))\n            .and(RequestPredicates.headers(h -> !h.containsKey(HttpHeaders.CONNECTION) || h.get(HttpHeaders.CONNECTION).contains(\"keep-alive\"))),\n        request -> serveIndex(indexLocation)\n    );\n}", "CodeBleu_score": 23.57612510994291}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Upgrade\") || headers.get(\"Upgrade\").get(0).equals(\"websocket\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Key\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Version\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Extensions\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Protocol\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Key1\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Key2\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Location\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Origin\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Protocol\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Version\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Key\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Accept\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Extensions\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Protocol\")))\n                .and(RequestPredicates.headers(headers -> !headers.containsKey(\"Sec-WebSocket-Version\")))\n                .and(RequestPredicates", "CodeBleu_score": 13.637815867670644}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n            RequestPredicates.all(\n                RequestPredicates.method(HttpMethod.GET),\n                RequestPredicates.path(\"/uc/**\", \"/uc/assets/**\"),\n                RequestPredicates.accept(MediaType.TEXT_HTML),\n                RequestPredicates.headers(header -> !header.containsKey(HttpHeaders.UPGRADE))\n            ),\n            request -> serveIndex(ucIndexLocation)\n        );\n    }", "CodeBleu_score": 19.148965766018307}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n        RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.headers(headers -> !headers.containsKey(HttpHeaders.UPGRADE)))\n            .and(RequestPredicates.headers(headers -> !headers.containsKey(HttpHeaders.SEC_WEBSOCKET_KEY)))\n            .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\"))),\n        request -> serveIndex(\"/uc/index.html\")\n    );\n}", "CodeBleu_score": 23.954939971684645}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tval concurrentHashMap = new ConcurrentHashMap<String, MapSession>()\n\n    val sessionRepository = new ReactiveIndexedSessionRepository<MapSession>()\n\n    sessionRepository.setSessionMap(concurrentHashMap)\n\n    sessionRepository.setDefaultMaxInactiveInterval(\n        sessionConfig.timeout.toSeconds.intValue)\n\n    sessionRepository.setApplicationEventPublisher(applicationContext)\n\n    sessionRepository\n}", "CodeBleu_score": 28.277137398449693}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new MapReactiveSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 11.026070332541828}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tval sessionRepository = new ReactiveIndexedSessionRepository<MapSession>();\n    sessionRepository.setSessionMap(new ConcurrentHashMap<String, MapSession>());\n    sessionRepository.setDefaultTimeout(session.timeout);\n    sessionRepository.setSaveOnInactive(session.saveOnInactive);\n    return sessionRepository;\n}", "CodeBleu_score": 26.515563995355194}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n    userDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.security.twoFactorAuthentication.enabled)\n    return userDetailsService\n}", "CodeBleu_score": 34.41921078838577}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n\n    // Enable or disable two-factor authentication based on the security settings in HaloProperties\n    if (haloProperties.getSecurity().isTwoFactorAuthenticationEnabled()) {\n        userDetailService.setTwoFactorAuthenticationEnabled(true);\n    }\n\n    return userDetailService;\n}", "CodeBleu_score": 51.055906808835125}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n    userDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.security.twoFactorAuthentication.enabled)\n    return userDetailsService\n}", "CodeBleu_score": 34.41921078838577}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setEmail(email);\n\towner.setDisplayName(displayName);\n\towner.setAvatar(avatar);\n\towner.setWebsite(website);\n\treturn owner;\n}", "CodeBleu_score": 25.56013336838399}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setEmail(email);\n\towner.setDisplayName(displayName);\n\towner.setAvatar(avatar);\n\towner.setWebsite(website);\n\treturn owner;\n}", "CodeBleu_score": 25.56013336838399}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setEmail(email);\n\towner.setDisplayName(displayName);\n\towner.setAvatar(avatar);\n\towner.setWebsite(website);\n\treturn owner;\n}", "CodeBleu_score": 25.56013336838399}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.kind == 'email') {\n        User user = User.getByEmail(commentOwner.name);\n        return user.id == post.owner.id;\n    } else {\n        return commentOwner.name == post.owner.name;\n    }\n}", "CodeBleu_score": 19.055218524610307}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.kind == \"email\") {\n    User user = User.load(post.owner);\n    return user.email == commentOwner.name;\n  } else {\n    return commentOwner.name == post.owner;\n  }\n}", "CodeBleu_score": 15.850258944505155}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.kind == 'email') {\n        User user = User.findByEmail(commentOwner.name);\n        return user.id == post.author.id;\n    } else {\n        return commentOwner.name == post.author.name;\n    }\n}", "CodeBleu_score": 18.92287123352334}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        String fieldSelector = null;\n\n        // Build the field selector from the label and field selectors\n        if (StringUtils.isNotBlank(labelSelector)) {\n            fieldSelector = \"metadata.labels\";\n            if (StringUtils.isNotBlank(fieldSelector)) {\n                fieldSelector = fieldSelector + \",\" + fieldSelector;\n            }\n        }\n\n        // Add conditions based on keyword and owner name, if provided\n        if (StringUtils.isNotBlank(keyword)) {\n            if (fieldSelector == null) {\n                fieldSelector = \"metadata.name\";\n            } else {\n                fieldSelector = fieldSelector + \",\" + \"metadata.name\";\n            }\n        }\n        if (StringUtils.isNotBlank(ownerName)) {\n            if (fieldSelector == null) {\n                fieldSelector = \"metadata.ownerReferences.name\";\n            } else {\n                fieldSelector = fieldSelector + \",\" + \"metadata.ownerReferences.name\";\n            }\n        }\n        if (StringUtils.isNotBlank(ownerKind)) {\n            if (fieldSelector == null) {\n                fieldSelector = \"metadata.ownerReferences.kind\";\n            } else {\n                fieldSelector = fieldSelector + \",\" + \"metadata.ownerReferences.kind\";\n            }\n        }\n\n        // Set the field selector in the ListOptions object\n        if (fieldSelector != null) {\n            listOptions.setFieldSelector(fieldSelector);\n        }\n        return listOptions;\n    }", "CodeBleu_score": 21.940218733829816}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        String fieldSelector = buildFieldSelector();\n        if (StringUtils.isNotBlank(fieldSelector)) {\n            listOptions.setFieldSelector(fieldSelector);\n        }\n        if (StringUtils.isNotBlank(getKeyword())) {\n            listOptions.add(new Condition(Condition.ConditionType.CONTAINS, \"name\", getKeyword()));\n        }\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            listOptions.add(new Condition(Condition.ConditionType.EQUALS, \"ownerName\", getOwnerName()));\n        }\n        if (StringUtils.isNotBlank(getOwnerKind())) {\n            listOptions.add(new Condition(Condition.ConditionType.EQUALS, \"ownerKind\", getOwnerKind()));\n        }\n        return listOptions;\n    }", "CodeBleu_score": 31.881624558517423}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        String fieldSelector = \"\";\n        if (!StringUtils.isBlank(getOwnerKind())) {\n            fieldSelector = String.format(\"%s=%s\", OWNER_KIND_FIELD, getOwnerKind());\n        }\n        if (!StringUtils.isBlank(getOwnerName())) {\n            if (StringUtils.isBlank(fieldSelector)) {\n                fieldSelector = String.format(\"%s=%s\", OWNER_NAME_FIELD, getOwnerName());\n            } else {\n                fieldSelector = String.format(\"%s,%s=%s\", fieldSelector, OWNER_NAME_FIELD, getOwnerName());\n            }\n        }\n        if (!StringUtils.isBlank(getKeyword())) {\n            if (StringUtils.isBlank(fieldSelector)) {\n                fieldSelector = String.format(\"%s=%s\", KEYWORD_FIELD, getKeyword());\n            } else {\n                fieldSelector = String.format(\"%s,%s=%s\", fieldSelector, KEYWORD_FIELD, getKeyword());\n            }\n        }\n        listOptions.setFieldSelector(fieldSelector);\n        return listOptions;\n    }", "CodeBleu_score": 30.217638747781724}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\tif (commentName == null) {\n        return Mono.empty();\n    }\n    return reactiveRedisTemplate.opsForValue().get(commentName)\n        .map(String::valueOf)\n        .map(Integer::parseInt)\n        .map(upvoteCount -> new CommentStats(commentName, upvoteCount));\n}", "CodeBleu_score": 37.425545308127205}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)\n        .filter(Objects::nonNull)\n        .flatMap(name -> counterService.getCounter(name))\n        .map(counter -> new CommentStats(counter.getUpvotes()));\n}", "CodeBleu_score": 36.36069037825857}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.just(commentName)\n        .filter(Objects::nonNull)\n        .map(this::getCounter)\n        .flatMap(counter -> counter.map(Counter::getUpvotes).map(CommentStats::new).switchIfEmpty(Mono.just(new CommentStats())));\n}", "CodeBleu_score": 33.195351937058824}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    InterestReason interestReason = new InterestReason();\n    interestReason.setType(InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    interestReason.setCondition(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(interestReason);\n\n    try {\n        Subscription subscriptionResult =\n                notificationCenter.subscribe(subscription).get();\n        System.out.println(\"Subscribed \" + subscriber.getName() + \" to reply notifications\");\n    } catch (Exception e) {\n        System.out.println(\"Error subscribing \" + subscriber.getName() + \" to reply notifications\");\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 46.31776073157305}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setReason(createInterestReason(identity));\n\n    try {\n        notificationCenter.subscribe(subscription).get();\n    } catch (Exception e) {\n        // Handle the error\n    }\n}", "CodeBleu_score": 50.704632439388654}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    InterestReason reason = new InterestReason();\n    reason.setType(InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    reason.setCondition(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setReason(reason);\n    subscription.setSubscriber(subscriber);\n\n    try {\n        Subscription.Result result = notificationCenter.subscribe(subscription).get();\n        if (result.getStatus() == Subscription.Result.Status.SUCCESS) {\n            Log.i(TAG, \"Subscribed to reply notifications.\");\n        } else {\n            Log.i(TAG, \"Failed to subscribe to reply notifications.\");\n        }\n    } catch (InterruptedException | ExecutionException e) {\n        Log.e(TAG, \"Failed to subscribe to reply notifications.\", e);\n    }\n}", "CodeBleu_score": 44.59806576723523}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedAt(OffsetDateTime.now());\n        return c;\n    });\n}", "CodeBleu_score": 18.52507987043395}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(),\n        c -> c.toBuilder()\n            .setApproved(true)\n            .setApprovedAt(Timestamp.now())\n            .build());\n}", "CodeBleu_score": 16.64418471215776}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedAt(Instant.now());\n        return c;\n    });\n}", "CodeBleu_score": 18.294120661921774}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setComponent($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 59.795432743765446}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setComponent($this);\n    }\n\n    if ($action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 57.22343345962753}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->setLivewire($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.995475238562335}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($this->successRedirectUrl) {\n        $this->redirect($this->successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 35.10103118024519}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$this->redirect($this->getSuccessRedirectUrl());\n\n    return $this;\n}", "CodeBleu_score": 20.200069903787053}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$redirectUrl = $this->getRedirectUrl();\n\n    if (is_null($redirectUrl)) {\n        return $this;\n    }\n\n    $this->redirect($redirectUrl);\n\n    return $this;\n}", "CodeBleu_score": 47.245700652848335}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (! $record || ! method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $this->getTagModel();\n\n    $tagIds = collect($state)\n        ->map(function ($name) use ($tagModel) {\n            return $tagModel::firstOrCreate(['name' => $name])->id;\n        })\n        ->all();\n\n    $record->tags()->sync($tagIds);\n}", "CodeBleu_score": 33.49089613847234}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $this->getTagModel();\n\n    $tags = $tagModel::whereIn('name', $state)->get();\n\n    $sync = [];\n\n    foreach ($tags as $tag) {\n        $sync[$tag->id] = ['order' => array_search($tag->name, $state)];\n    }\n\n    $record->tags()->sync($sync);\n}", "CodeBleu_score": 29.591745534866536}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif ($record && method_exists($record, 'tags')) {\n        $tagModel = $this->getTagModel();\n\n        $tagNames = array_map(function ($name) {\n            return trim($name);\n        }, $state['tags'] ?? []);\n\n        $tags = $tagModel::whereIn('name', $tagNames)->get();\n\n        $foundTags = [];\n        $newTags = [];\n\n        foreach ($tags as $tag) {\n            $foundTags[] = $tag;\n        }\n\n        foreach ($tagNames as $tagName) {\n            if (! in_array($tagName, $foundTags)) {\n                $newTags[] = $tagName;\n            }\n        }\n\n        $createdTags = $tagModel::create(\n            collect($newTags)->map(function ($name) {\n                return ['name' => $name];\n            })->toArray()\n        );\n\n        $tags = array_merge($foundTags, $createdTags->toArray());\n\n        $record->tags()->sync(\n            collect($tags)->map(function ($tag) {\n                return $tag['id'];\n            })->toArray()\n        );\n    }\n}", "CodeBleu_score": 41.00742182261872}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\tif authorizer == nil {\n\t\treturn nil\n\t}\n\n\trepoPath = strings.TrimPrefix(repoPath, \"/\")\n\tparts := strings.Split(repoPath, \"/\")\n\tif len(parts) != 2 {\n\t\treturn fmt.Errorf(\"repo path is malformed: %s\", repoPath)\n\t}\n\n\tspace := parts[0]\n\trepo := parts[1]\n\n\tscope := authz.NewScope(authz.ResourceTypeRepository, space, repo)\n\tresource := authz.NewResource(authz.ResourceTypePipeline, pipelineIdentifier)\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 43.42459556234714}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Get the space path and repository name from the repository path.\n\tspacePath, repositoryName, err := getPaths(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Create a scope and resource for the pipeline.\n\tresource := &authz.Resource{\n\t\tType: \"pipeline\",\n\t\tName: pipelineIdentifier,\n\t\t// The space path is used as the parent of the pipeline resource.\n\t\tParent: spacePath,\n\t}\n\t// Check the permission.\n\treturn authz.Check(ctx, authorizer, session, authz.Scope{\n\t\tType: \"repository\",\n\t\tName: repositoryName,\n\t\t// The space path is used as the parent of the repository scope.\n\t\tParent: spacePath,\n\t}, resource, permission)\n}", "CodeBleu_score": 57.95873811676272}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// Obtain the space path and repository name from the repository path.\n\tspacePath, repoName, err := GetSpacePathAndRepoName(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline.\n\tscope := &authz.Scope{\n\t\tType:  \"repository\",\n\t\tLevel: authz.RepositoryLevel,\n\t\tName:  repoName,\n\t\tPath:  spacePath,\n\t}\n\tresource := &authz.Resource{\n\t\tType: \"pipeline\",\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// Check if the user has the required permission for the pipeline.\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 61.4372932667909}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn nil\n\t}\n\n\tif space.ParentSpaceID == nil {\n\t\treturn nil\n\t}\n\n\tparentSpace, err := store.LookupSpaceByID(ctx, space.ParentSpaceID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif parentSpace == nil {\n\t\treturn nil\n\t}\n\n\tscope := &auth.Scope{\n\t\tType: \"space\",\n\t\tID:   parentSpace.Name,\n\t}\n\n\tresource := &auth.Resource{\n\t\tType: \"space\",\n\t\tName: space.Name,\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 60.32506350983381}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn nil\n\t}\n\n\tif space.ParentID == nil {\n\t\treturn nil\n\t}\n\n\tparentSpace, err := store.LookupSpaceByID(ctx, space.ParentID)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tif parentSpace == nil {\n\t\treturn nil\n\t}\n\n\tscope := authz.NewScope(\n\t\tauthz.ScopeSpace,\n\t\tparentSpace.Name,\n\t)\n\n\tresource := authz.NewResource(\n\t\tauthz.ResourceSpace,\n\t\tspace.Name,\n\t)\n\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 52.14534354620437}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn errors.New(\"space is nil\")\n\t}\n\n\tif space.Parent == nil {\n\t\treturn errors.New(\"space parent is nil\")\n\t}\n\n\tif space.Parent.Name == \"\" {\n\t\treturn errors.New(\"space parent name is empty\")\n\t}\n\n\tscope := types.NewScope(\n\t\ttypes.NewResourceWithID(\n\t\t\t\"spaces\",\n\t\t\tspace.Parent.ID,\n\t\t),\n\t)\n\n\tresource := types.NewResourceWithID(\n\t\t\"spaces\",\n\t\tspace.ID,\n\t)\n\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tscope,\n\t\tresource,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 48.47496849522715}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn json.RawMessage(b), nil\n\t}\n\n\tvar raw map[string]json.RawMessage\n\tif err := json.Unmarshal(source, &raw); err != nil {\n\t\treturn nil, err\n\t}\n\n\tb, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar sanitized map[string]json.RawMessage\n\tif err := json.Unmarshal(b, &sanitized); err != nil {\n\t\treturn nil, err\n\t}\n\n\tfor k := range raw {\n\t\tif _, ok := sanitized[k]; !ok {\n\t\t\tdelete(raw, k)\n\t\t}\n\t}\n\n\tb, err = json.Marshal(raw)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn json.RawMessage(bytes.TrimRight(b, \"\n\")), nil\n}", "CodeBleu_score": 45.815587497095706}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource = json.RawMessage{}\n\t}\n\n\tif err := json.Unmarshal(source, &data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif len(sanitized) > 0 && sanitized[len(sanitized)-1] == '\n' {\n\t\tsanitized = sanitized[:len(sanitized)-1]\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 41.490772427022556}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\treturn source, nil\n\t}\n\tvar raw map[string]json.RawMessage\n\tif err := json.Unmarshal(source, &raw); err != nil {\n\t\treturn nil, err\n\t}\n\tif err := json.Unmarshal(source, data); err != nil {\n\t\treturn nil, err\n\t}\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn bytes.TrimSpace(sanitized), nil\n}", "CodeBleu_score": 39.068402877503786}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\tif repoRef == \"\" {\n\t\treturn nil, util.NewErrBadRequest(errors.New(\"repository reference is required\"))\n\t}\n\n\trepo, err := c.Repositories.GetByName(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 56.57342953489679}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepoRef = strings.TrimSpace(repoRef)\n\tif repoRef == \"\" {\n\t\treturn nil, errRepoNotFound\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.Repos.GetByName(ctx, session.UserID, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif !session.Permissions.Has(reqPermission, repo.Permissions...) {\n\t\treturn nil, errUnauthorized\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 43.369731832955495}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\trepoRef = strings.TrimSpace(repoRef)\n\tif repoRef == \"\" {\n\t\treturn nil, util.NewErrBadRequest(errors.New(\"empty repository reference\"))\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.Repos.GetByReference(ctx, session, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif !session.HasPermission(repo, reqPermission) {\n\t\treturn nil, util.NewErrForbidden(errors.New(\"not authorized\"))\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 49.159497080722375}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 59.94612261927975}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tcheckSanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 59.94612261927975}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.01887618327898}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tif self.state.renderer ~= nil then\n    if self.state.renderer.state.buffers[self] ~= nil then\n      self.state.renderer.state.buffers[self] = nil\n    end\n  end\n  self.state.renderer = renderer\n  self.state.renderer.state.buffers[self] = self\n  if self.state.renderer.state.buffers[self] == nil then\n    self.state.renderer.state.buffers[self] = self\n  end\n  self.state.renderer:update_state()\n  self.state.on_render = on_render\n  self.state.renderer:update_state()\n  return self", "CodeBleu_score": 41.63539485359494}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tif self.state.renderer == nil then\n    self.state.renderer = renderer\n    self.state.renderer:attach_buffer(self)\n  end\n  self.state.on_render = on_render\n  return self", "CodeBleu_score": 50.33877130656423}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tif self.state.attached then\n    self.state.on_render = on_render\n    return self\n  end\n\n  self.state.on_render = on_render\n  self.state.attached = true\n  self.state.renderer = self.renderer\n  self.state.renderer:attach_buffer(self)\n  return self", "CodeBleu_score": 53.11490672668402}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tlocal path = self.filename\n\tif not path then return end\n\t\n\tlocal watcher = self.watcher\n\tif watcher then\n\t\twatcher:stop()\n\tend\n\t\n\twatcher = fs.watch(path, function(event, filename)\n\t\tif event == \"change\" then\n\t\t\tif callback then\n\t\t\t\tcallback(self)\n\t\t\tend\n\t\tend\n\tend)\n\t\n\tself.watcher = watcher", "CodeBleu_score": 37.50765118828334}, {"code": "function Buffer:watch(callback)\n\tif self.valid and callback then\n        self.watcher = fs.watch(self.filename, function(event, filename)\n            if event == \"change\" then\n                callback()\n            end\n        end)\n    end", "CodeBleu_score": 41.720184284238925}, {"code": "function Buffer:watch(callback)\n\tif self:is_valid() then\n        if callback then\n            callback()\n        end\n    else\n        self.logger:error(\"Buffer is invalid\")\n    end", "CodeBleu_score": 27.188754305671775}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex_value ~= nil then\n    return self.hex_value\n  end\n\n  local color_spec = vim.api.nvim_get_hl_by_name(self.name, true)\n\n  local attribute = self.attribute\n  if attribute == nil then\n    attribute = color_spec.background and \"background\" or \"foreground\"\n  end\n\n  local highlight_name = self.name .. \"_\" .. attribute\n  local highlight_spec = vim.api.nvim_get_hl_by_name(highlight_name, true)\n\n  if highlight_spec == nil then\n    return nil\n  end\n\n  local hex_value = vim.api.nvim_get_hl_by_name(highlight_name, true).background\n\n  if hex_value == nil then\n    return nil\n  end\n\n  self.hex_value = hex_value\n\n  return hex_value", "CodeBleu_score": 45.251112441381444}, {"code": "function Color:to_hex()\n\tif self.hex then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attr = self.foreground and \"foreground\" or \"background\"\n\n  local ok, hex = pcall(vim.api.nvim_get_hl_by_name, spec, attr)\n  if not ok then\n    return nil, hex\n  end\n\n  self.hex = hex\n  return hex", "CodeBleu_score": 56.38903308950902}, {"code": "function Color:to_hex()\n\tlocal hex = self.hex\n  if hex then\n    return hex\n  end\n  local attr = self.spec.attr\n  local color = self.spec.color\n  if attr == 'fg' then\n    color = vim.api.nvim_get_hl_by_name(color, true)\n  elseif attr == 'bg' then\n    color = vim.api.nvim_get_hl_by_name(color, false)\n  end\n  if color then\n    hex = Color:from_rgba(color.background or color.foreground):to_hex()\n    self.hex = hex\n    return hex\n  end", "CodeBleu_score": 41.69597128856122}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n\n  for i, line in ipairs(lines) do\n    local start_col = 0\n    local matches = {line:match(pattern)}\n\n    while #matches > 0 do\n      local col_start = start_col + matches[1]:len()\n      local col_end = start_col + matches[2]:len()\n\n      buffer:add_highlight(hl, i - 1, col_start, col_end)\n\n      start_col = col_end\n      matches = {line:match(pattern, col_end)}\n    end\n  end\n\n  return self", "CodeBleu_score": 53.77887825157591}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local ns = self.namespace\n\n  for i, line in ipairs(lines) do\n    local col = 0\n    for s, e in line:gmatch(pattern) do\n      col = col + #line:sub(1, s - 1)\n      buffer:add_highlight(hl, i - 1, col, col + #e)\n      col = col + #e\n    end\n  end\n\n  return self", "CodeBleu_score": 53.52444767616642}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  for i, line in ipairs(lines) do\n    local start_col = 0\n    while true do\n      local s, e = line:find(pattern, start_col + 1)\n      if not s then break end\n      buffer:add_highlight(hl, i - 1, s, e)\n      start_col = e\n    end\n  end\n\n  return self", "CodeBleu_score": 60.32656072766449}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format(\"%s_%s_%s\", row, col, pos)\n\tlocal ns = vim.api.nvim_create_namespace(id)\n\tvim.api.nvim_buf_set_extmark(buffer, ns, row, col, {\n\t\tid = id,\n\t\tvirt_text = {{text, hl}},\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t})\n\treturn id", "CodeBleu_score": 61.69215904789541}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format(\"%s:%s:%s\", buffer, row, col)\n  local ns = self:get_namespace(buffer)\n  vim.api.nvim_buf_set_extmark(buffer, ns, row, col, {\n    id = id,\n    virt_text = { {text, hl} },\n    virt_text_pos = pos,\n    hl_mode = \"combine\",\n    priority = priority\n  })\n  return id", "CodeBleu_score": 65.52876858319577}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = string.format(\"%s:%s:%s\", row, col, pos)\n  vim.api.nvim_buf_set_extmark(buffer, self.id, row, col, {\n    id = id,\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    hl_mode = \"combine\",\n    priority = priority\n  })\n  return id", "CodeBleu_score": 71.14443121855449}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n  local buffer = \"\"\n  for i=1, #output do\n    local char = output:sub(i, i)\n    buffer = buffer .. char\n    if char == \"", "CodeBleu_score": 25.910541384144043}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n    for i = 1, #output do\n        local char = output:sub(i, i)\n        if char == \"", "CodeBleu_score": 23.253630883580918}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 19.43225080373123}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\tif not self.watchers[path] then\n    local watcher = vim.loop.new_fs_event()\n    watcher:start(path, {}, vim.schedule_wrap(handler))\n    self.watchers[path] = watcher\n  end\n  return self.watchers[path]", "CodeBleu_score": 45.98886188380551}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watchers[path] then\n    return self.watchers[path]\n  end\n  local watcher = vim.loop.new_fs_event()\n  watcher:start(path, {\n    recursive = true,\n    watch_entry = true,\n  }, function(_, _, filename)\n    handler(filename)\n  end)\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 50.002115711476506}, {"code": "function Watcher:watch_file(path, handler)\n\tlocal watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n  watcher = uv.new_fs_event()\n  watcher:start(path, {\n    persistent = true,\n    recursive = true,\n  }, handler)\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 45.610950813600766}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\tlocal lines = self.buffer:get_lines(0, -1, true)\n  local hunks, err = self.git_object:hunks(lines)\n  if err then\n    return err\n  end\n  self:signs(hunks)\n  return hunks", "CodeBleu_score": 17.8165855253002}, {"code": "function GitBuffer:live_hunks()\n\tlocal buffer_lines = self.buffer:get_lines(0, -1, true)\n\n  local hunks, err = self.git_object:hunks(buffer_lines)\n\n  if err then\n    return err\n  end\n\n  self.hunks = hunks\n\n  local signs = {}\n\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      local sign = {}\n      sign.name = line.type\n      sign.priority = line.priority\n      sign.line = line.index\n      signs[#signs + 1] = sign\n    end\n  end\n\n  self.buffer:set_signs(self.name, signs)\n\n  return hunks\n", "CodeBleu_score": 39.18455468464151}, {"code": "function GitBuffer:live_hunks()\n\tlocal buf_lines = self:get_buffer_lines()\n    local hunks, err = self:get_hunks()\n    if err then\n        return err\n    end\n\n    self:clear_signs()\n\n    local hunk_signs = {}\n    local hunk_signs_by_line = {}\n    local hunk_signs_by_type = {}\n    local hunk_signs_by_priority = {}\n\n    local line_signs = {}\n    local line_signs_by_hunk = {}\n    local line_signs_by_type = {}\n    local line_signs_by_priority = {}\n\n    local function add_hunk_sign(hunk, hunk_sign, line_sign)\n        local hunk_id = hunk.id\n        local hunk_sign_id = hunk_sign.id\n        local line_sign_id = line_sign.id\n\n        hunk_signs[hunk_id] = hunk_sign\n        hunk_signs_by_line[hunk_id] = hunk_sign\n        hunk_signs_by_type[hunk_id] = hunk_sign\n        hunk_signs_by_priority[hunk_id] = hunk_sign\n\n        line_signs[line_sign_id] = line_sign\n        line_signs_by_hunk[line_sign_id] = line_sign\n        line_signs_by_type[line_sign_id] = line_sign\n        line_signs_by_priority[line_sign_id] = line_sign\n    end\n\n    for i, hunk in ipairs(hunks) do\n        local hunk_sign = {\n            id = \"hunk-\" .. hunk.id,\n            type = \"hunk\",\n            hunk = hunk,\n            priority = 100,\n            group = \"GitHunk\",\n            line = hunk.start_line,\n            name = \"GitHunk\",\n            buffer = self.bufnr,\n        }\n\n        local line_sign = {\n            id", "CodeBleu_score": 44.494465962435505}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal file = io.open(self.temp_file, 'w')\n  file:write(patch)\n  file:close()\n\n  local cmd = 'git add --patch ' .. self.temp_file\n  local result = shell.execute(cmd)\n\n  fs.remove_file(self.temp_file)\n\n  return result", "CodeBleu_score": 42.438445586000626}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal f = io.open(self.tempfile, 'wb')\n  f:write(patch)\n  f:close()\n\n  local _, err = loop.run_command(self.git_command .. ' add --patch -- ' .. self.tempfile)\n  os.remove(self.tempfile)\n\n  return err", "CodeBleu_score": 40.206462412360054}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmp_file = os.tmpname()\n  fs.write_file(tmp_file, patch)\n  local _, err = os.execute(string.format('git add -p -- %s', tmp_file))\n  fs.remove_file(tmp_file)\n  return err", "CodeBleu_score": 43.70377625507599}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tString url = config.getAccessTokenEndpoint();\n\n    OAuthRequest request = new OAuthRequest(Verb.POST, url);\n    request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n    request.addBodyParameter(\"grant_type\", \"authorization_code\");\n    request.addBodyParameter(\"code\", verifier.getValue());\n    request.addBodyParameter(\"redirect_uri\", config.getCallback());\n\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 59.932608256711674}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n    request.addHeader(OAuthConstants.AUTHORIZATION, getHttpBasicAuthHeaderValue());\n    request.addHeader(OAuthConstants.CONTENT_TYPE, OAuthConstants.FORM_ENCODED_CONTENT_TYPE);\n    request.addHeader(OAuthConstants.ACCEPT, OAuthConstants.JSON_CONTENT_TYPE);\n\n    Response response = request.send();\n    return config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 56.544887494574226}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n    request.addBodyParameter(OAuthConstants.REDIRECT_URI, config.getCallback());\n    request.addBodyParameter(OAuthConstants.GRANT_TYPE, OAuthConstants.AUTHORIZATION_CODE);\n    request.addHeader(OAuthConstants.HEADER, getHttpBasicAuthHeaderValue());\n    Response response = request.send();\n    return config.getApi().getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 53.93727463274104}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(\n\t\tnew AuthScope(host.getHostName(), host.getPort()),\n\t\tnew UsernamePasswordCredentials(username, password));\n\t\n\t// Create AuthCache instance\n\tAuthCache authCache = new BasicAuthCache();\n\t// Generate BASIC scheme object and add it to the local\n\t// auth cache\n\tBasicScheme basicAuth = new BasicScheme();\n\tauthCache.put(host, basicAuth);\n\n\t// Add AuthCache to the execution context\n\tcontext.setCredentialsProvider(credsProvider);\n\tcontext.setAuthCache(authCache);\n\n\tlog.debug(\"Added host \" + host.getHostName() + \" to auth cache\");\n}", "CodeBleu_score": 47.35314903476529}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n        new AuthScope(host.getHostName(), host.getPort()),\n        new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n    System.out.println(\"Auth cache set up for \" + host.getHostName());\n}", "CodeBleu_score": 49.873636686478605}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n  credsProvider.setCredentials(\n      new AuthScope(host.getHostName(), host.getPort()),\n      new UsernamePasswordCredentials(username, password));\n\n  AuthCache authCache = new BasicAuthCache();\n  BasicScheme basicAuth = new BasicScheme();\n  authCache.put(host, basicAuth);\n  context.setCredentialsProvider(credsProvider);\n  context.setAuthCache(authCache);\n\n  log.info(\"Auth cache entry added for \" + host.getHostName());\n}", "CodeBleu_score": 48.100266106996294}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is null\");\n    }\n    String key = cache.seedCache(source);\n    try {\n        return jenkins.getRootUrl() + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 50.484777912133}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (avatarCache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n    String cacheKey = avatarCache.getCacheKey(source);\n    avatarCache.seedCache(cacheKey, source);\n    try {\n        return jenkins.getRootUrl() + ActionURI + \"/\" + URLEncoder.encode(cacheKey, \"UTF-8\") + \"?size=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is unsupported\", e);\n    }\n}", "CodeBleu_score": 52.10431007579183}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.get();\n        AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n        if (cache == null) {\n            throw new IllegalStateException(\"Could not find AvatarCache extension\");\n        }\n        String key = cache.seedCache(source);\n        try {\n            return jenkins.getRootUrl() + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"?size=\" + size;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\"UTF-8 encoding not supported\", e);\n        }\n    }", "CodeBleu_score": 49.60138248958238}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    this.lastModified = (lastModified < 0) ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 33.99762257173986}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    if (lastModified < 0) {\n        lastModified = System.currentTimeMillis();\n    }\n    this.lastModified = lastModified;\n}", "CodeBleu_score": 36.64694828146144}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 39.242837094388484}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tlastModified = cacheEntry.getLastModified();\n\t\t\timage = cacheEntry.getImage();\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t} catch (InterruptedException e) {\n\t\t\tfuture = null;\n\t\t\treturn true;\n\t\t} catch (ExecutionException e) {\n\t\t\tfuture = null;\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 49.573225853491344}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\tif (cacheEntry != null) {\n\t\t\t\timage = cacheEntry.image;\n\t\t\t\tlastModified = cacheEntry.lastModified;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfuture = null;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 47.94252107221306}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcacheEntry = future.get();\n\t\t\timage = cacheEntry.getImage();\n\t\t\tlastModified = cacheEntry.getLastModified();\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\t// Ignore\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.52006202617158}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t// Generate the image\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    BufferedImage image = generateImage(req, rsp, node);\n\n    // Write the image to the response\n    ImageIO.write(image, \"png\", baos);\n    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"max-age=3600\");\n    rsp.setContentLength(baos.size());\n    baos.writeTo(rsp.getOutputStream());\n    rsp.getOutputStream().flush();\n}", "CodeBleu_score": 42.51658238024824}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t// get the image\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    Image img = getImage(node);\n    if (img != null) {\n        img.write(baos);\n    }\n\n    // flush the image if required\n    if (img != null && img.isFlushRequired()) {\n        baos.flush();\n    }\n\n    // write the image to the response output stream\n    byte[] bytes = baos.toByteArray();\n    rsp.setContentType(\"image/png\");\n    rsp.setContentLength(bytes.length);\n    rsp.getOutputStream().write(bytes);\n}", "CodeBleu_score": 52.18657227988444}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tif (node == null) {\n        rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n        return;\n    }\n\n    // Generate the image\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    BufferedImage image = generateImage(node);\n    ImageIO.write(image, \"png\", baos);\n\n    // Set the headers\n    rsp.setHeader(\"Cache-Control\", \"public, max-age=\" + MAX_AGE);\n    rsp.setHeader(\"Expires\", new Date(System.currentTimeMillis() + (MAX_AGE * 1000)).toString());\n    rsp.setHeader(\"Content-Type\", \"image/png\");\n    rsp.setHeader(\"Content-Length\", String.valueOf(baos.size()));\n\n    // Write the image to the response output stream\n    baos.writeTo(rsp.getOutputStream());\n}", "CodeBleu_score": 44.8605115129835}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        if (enableCache) {\n            teamCache = new ExpiringCache<String, List<BitbucketTeam>>();\n            repositoriesCache = new ExpiringCache<String, List<BitbucketRepository>>();\n        }\n        if (authenticator != null) {\n            HttpClientBuilder builder = HttpClientBuilder.create();\n            setClientProxyParams(BITBUCKET_HOST, builder);\n            authenticator.configureBuilder(builder);\n            httpClient = builder.build();\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, new HttpHost(BITBUCKET_HOST, 443, \"https\"));\n        } else {\n            HttpClientBuilder builder = HttpClientBuilder.create();\n            setClientProxyParams(BITBUCKET_HOST, builder);\n            builder.setKeepAliveStrategy(new ConnectionKeepAliveStrategy() {\n                @Override\n                public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\n                    HeaderElementIterator it = new BasicHeaderElementIterator(response.headerIterator(HTTP.CONN_KEEP_ALIVE));\n                    while (it.hasNext()) {\n                        HeaderElement he = it.nextElement();\n                        String param = he.getName();\n                        String value = he.getValue();\n                        if (value != null && param.equalsIgnoreCase(\"timeout\")) {\n                            try {\n                                return Long.parseLong(value) * 1000;\n                            } catch (NumberFormatException ignore) {\n                            }\n                        }\n                    }\n                    return 30 * 1000;\n                }\n            });\n            builder.setConnectionManager(new PoolingHttpClientConnectionManager());\n            builder.setRetryHandler(new DefaultHttpRequestRetryHandler(0, false));\n            httpClient = builder.build();\n        }\n    }", "CodeBleu_score": 43.2654636782346}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        this.context = authenticator != null ? HttpClientContext.create() : null;\n        this.cache = enableCache ? new ConcurrentHashMap<>() : null;\n\n        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom();\n        requestConfigBuilder.setConnectTimeout(CONNECT_TIMEOUT);\n        requestConfigBuilder.setSocketTimeout(SOCKET_TIMEOUT);\n        requestConfigBuilder.setConnectionRequestTimeout(CONNECTION_REQUEST_TIMEOUT);\n        requestConfigBuilder.setStaleConnectionCheckEnabled(true);\n\n        // configure keep-alive strategy\n        ConnectionKeepAliveStrategy keepAliveStrategy = new DefaultConnectionKeepAliveStrategy() {\n            @Override\n            public long getKeepAliveDuration(HttpResponse response, HttpContext context) {\n                HeaderElementIterator it = new BasicHeaderElementIterator(response.headerIterator(HTTP.CONN_KEEP_ALIVE));\n                while (it.hasNext()) {\n                    HeaderElement he = it.nextElement();\n                    String param = he.getName();\n                    String value = he.getValue();\n                    if (value != null && param.equalsIgnoreCase(\"timeout\")) {\n                        try {\n                            return Long.parseLong(value) * 1000;\n                        } catch (NumberFormatException ignore) {\n                        }\n                    }\n                }\n                return super.getKeepAliveDuration(response, context);\n            }\n        };\n\n        // configure connection manager\n        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();\n        connectionManager.setDefaultMaxPerRoute(CONNECTION_POOL_MAX_PER_ROUTE);\n        connectionManager.setMaxTotal(CONNECTION_POOL_MAX_TOTAL);\n\n        // configure retry handler\n        HttpRequestRetryHandler retryHandler = new DefaultHttpRequestRetryHandler(RETRY", "CodeBleu_score": 37.0247928641519}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        RequestConfig requestConfig = RequestConfig.custom()\n                .setConnectTimeout(CONNECT_TIMEOUT)\n                .setSocketTimeout(SOCKET_TIMEOUT)\n                .setConnectionRequestTimeout(CONNECTION_REQUEST_TIMEOUT)\n                .build();\n\n        // Setup caching\n        if (enableCache) {\n            cacheManager = CacheManager.getInstance();\n            teamCache = cacheManager.getCache(\"teamCache\");\n            teamCache.setExpiryPolicy(new CreatedExpiryPolicy(new Duration(TimeUnit.SECONDS, teamCacheDuration)));\n            repositoriesCache = cacheManager.getCache(\"repositoriesCache\");\n            repositoriesCache.setExpiryPolicy(new CreatedExpiryPolicy(new Duration(TimeUnit.SECONDS, repositoriesCacheDuration)));\n        }\n\n        // Setup HTTP client\n        HttpClientBuilder builder = HttpClients.custom()\n                .setDefaultRequestConfig(requestConfig)\n                .setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n                .setConnectionManager(new PoolingHttpClientConnectionManager())\n                .setRetryHandler(new DefaultHttpRequestRetryHandler(RETRY_COUNT, RETRY_INTERVAL, RETRY_INTERVAL_UNIT));\n\n        setClientProxyParams(BITBUCKET_CLOUD_BASE_URL, builder);\n\n        // Setup authentication\n        if (authenticator != null) {\n            authenticator.configureHttpClient(builder);\n            context = HttpClientContext.create();\n            authenticator.configureContext(context, new HttpHost(BITBUCKET_CLOUD_BASE_URL));\n        }\n\n        httpClient = builder.build();\n    }", "CodeBleu_score": 44.05617873807204}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tString sourceBranchName = pullRequest.getSourceBranchName();\n    String destinationBranchName = pullRequest.getDestinationBranchName();\n\n    BitbucketCloudBranch sourceBranch = null;\n    BitbucketCloudBranch destinationBranch = null;\n    try {\n        sourceBranch = getBranch(sourceBranchName);\n        destinationBranch = getBranch(destinationBranchName);\n    } catch (IOException e) {\n        logger.log(Level.WARNING, \"Failed to get branch information for \" + sourceBranchName + \" or \" + destinationBranchName, e);\n    }\n\n    if (sourceBranch != null) {\n        CommitClosure sourceClosure = new CommitClosure(sourceBranch.getRawNode());\n        pullRequest.setSourceClosure(sourceClosure);\n    }\n\n    if (destinationBranch != null) {\n        CommitClosure destinationClosure = new CommitClosure(destinationBranch.getRawNode());\n        pullRequest.setDestinationClosure(destinationClosure);\n    }\n}", "CodeBleu_score": 35.022489441839866}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t// Set up the source branch\n    BitbucketCloudBranch sourceBranch = pullRequest.getSourceBranch();\n    if (sourceBranch != null) {\n        CommitClosure sourceClosure = new CommitClosure();\n        sourceClosure.setCommit(sourceBranch.getLatestCommit());\n        sourceClosure.setBranch(sourceBranch.getName());\n        sourceClosure.setRepo(sourceBranch.getRepository().getName());\n        sourceClosure.setOwner(sourceBranch.getRepository().getOwner().getUsername());\n        sourceClosure.setHost(sourceBranch.getRepository().getLinks().getSelf().getHref());\n        pullRequest.setSourceCommitClosure(sourceClosure);\n    }\n\n    // Set up the destination branch\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestinationBranch();\n    if (destinationBranch != null) {\n        CommitClosure destinationClosure = new CommitClosure();\n        destinationClosure.setCommit(destinationBranch.getLatestCommit());\n        destinationClosure.setBranch(destinationBranch.getName());\n        destinationClosure.setRepo(destinationBranch.getRepository().getName());\n        destinationClosure.setOwner(destinationBranch.getRepository().getOwner().getUsername());\n        destinationClosure.setHost(destinationBranch.getRepository().getLinks().getSelf().getHref());\n        pullRequest.setDestinationCommitClosure(destinationClosure);\n    }\n}", "CodeBleu_score": 36.37592088961467}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\ttry {\n            if (pullRequest.getSourceBranch() != null) {\n                BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSourceBranch());\n                if (sourceBranch != null) {\n                    pullRequest.setSourceBranchClosure(new CommitClosure(sourceBranch.getLatestCommit()));\n                }\n            }\n            if (pullRequest.getDestinationBranch() != null) {\n                BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestinationBranch());\n                if (destinationBranch != null) {\n                    pullRequest.setDestinationBranchClosure(new CommitClosure(destinationBranch.getLatestCommit()));\n                }\n            }\n        } catch (IOException e) {\n            logger.log(Level.WARNING, \"Could not retrieve branch information for pull request \" + pullRequest.getId() + \" from Bitbucket Cloud\", e);\n        }\n    }", "CodeBleu_score": 43.337043860414035}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null || config.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration is not set\");\n    }\n    return new DisplayURLProvider().getRootURL(build);\n}", "CodeBleu_score": 62.05511532514456}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    String rootUrl = location.getUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins Location Configuration URL is null\");\n    }\n    return new DisplayURLProvider().getRunURL(build);\n}", "CodeBleu_score": 55.86539747503322}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    String rootUrl = location.getUrl();\n    if (rootUrl == null) {\n        throw new IllegalStateException(\"Jenkins root URL is not configured\");\n    }\n    return new DisplayURLProvider().getRunURL(build);\n}", "CodeBleu_score": 56.40423783141249}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URL parsedUrl = new URL(url)\n        String host = parsedUrl.getHost()\n        if (host == null || host.isEmpty()) {\n            throw new IllegalStateException(\"The URL is malformed. It does not contain a host.\")\n        }\n        if (host.equals(\"localhost\")) {\n            throw new IllegalStateException(\"The URL cannot use 'localhost' as the host.\")\n        }\n        if (host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"The URL cannot use 'unconfigured-jenkins-location' as the host.\")\n        }\n        if (bitbucket.isCloud() && !host.contains(\".\")) {\n            throw new IllegalStateException(\"The URL must be fully qualified for Bitbucket Cloud.\")\n        }\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The URL is malformed.\", e)\n    }\n    return url\n}", "CodeBleu_score": 51.41868507792404}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URI uri = new URI(url);\n        String host = uri.getHost();\n        if (host == null || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL is not configured.\");\n        }\n        if (host.equals(\"localhost\")) {\n            throw new IllegalStateException(\"Jenkins URL cannot be 'localhost'.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApi && !host.contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Cloud API client must use a fully qualified host.\");\n        }\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed.\", e);\n    }\n    return url;\n}", "CodeBleu_score": 60.80118206049852}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (url.contains(\"localhost\") || url.contains(\"unconfigured-jenkins-location\")) {\n    throw new IllegalStateException(\"Invalid Jenkins URL: \" + url)\n  }\n  if (bitbucket instanceof BitbucketCloudApi) {\n    try {\n      URI uri = new URI(url)\n      if (!uri.getHost().endsWith(\"bitbucket.org\")) {\n        throw new IllegalStateException(\"Invalid Jenkins URL: \" + url)\n      }\n    } catch (URISyntaxException e) {\n      throw new IllegalStateException(\"Invalid Jenkins URL: \" + url)\n    }\n  }\n  return url\n}", "CodeBleu_score": 42.86764962734008}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (!context.isNotify()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled in the job configuration\");\n            return;\n        }\n\n        SCMRevision revision = build.getAction(SCMRevisionAction.class) != null\n                ? build.getAction(SCMRevisionAction.class).getRevision()\n                : null;\n\n        String branch = build.getAction(ParametersAction.class) != null\n                ? build.getAction(ParametersAction.class).getParameter(BitbucketSCMSource.BRANCH_NAME)\n                : null;\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No revision information found, skipping build status notifications\");\n            return;\n        }\n\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        listener.getLogger().println(\"[Bitbucket] Notifying commit status\");\n        BitbucketApi bitbucket = source.getApi();\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 51.56181990385722}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isDisableStatus()) {\n            listener.getLogger().println(\"[Bitbucket] Status notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = SCMRevisionAction.getRevision(build);\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No SCM revision information available\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String branch = getBranch(revision);\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        BitbucketApi bitbucket = getBitbucketClient(source, build, listener);\n        if (bitbucket == null) {\n            listener.getLogger().println(\"[Bitbucket] No Bitbucket client available\");\n            return;\n        }\n\n        listener.getLogger().println(\"[Bitbucket] Notifying commit status\");\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 50.52632207182008}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isDisableStatus()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = SCMRevisionAction.getRevision(build);\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No revision information available\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.isShareBuildKeyBetweenBranchAndPR();\n        String branch = getBranch(revision);\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        listener.getLogger().println(\"[Bitbucket] Notifying commit \" + hash);\n\n        BitbucketApi bitbucket = new BitbucketApi(source);\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 47.46842088916082}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString key = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = getBuildKey(build.getParent().getFullName(), branch);\n    } else {\n        key = getBuildKey(build.getParent().getFullName());\n    }\n    return key;\n}", "CodeBleu_score": 53.60745746258605}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = build.getParent().getFullName() + \":\" + branch;\n    } else {\n        buildKey = build.getFullDisplayName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 42.99477685001523}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = null;\n    if (shareBuildKeyBetweenBranchAndPR) {\n        // If the branch is a PR, then use the PR branch name instead of the target branch name\n        if (build instanceof AbstractBuild<?, ?>) {\n            AbstractBuild<?, ?> abstractBuild = (AbstractBuild<?, ?>) build;\n            if (abstractBuild.getCause(hudson.model.Cause.class) != null\n                    && abstractBuild.getCause(hudson.model.Cause.class).getClass()\n                            .equals(hudson.model.Cause.class)) {\n                branch = abstractBuild.getCause(hudson.model.Cause.UpstreamCause.class)\n                        .getBranch();\n            }\n        }\n        buildKey = build.getParent().getFullName() + \"__\" + branch;\n    } else {\n        buildKey = build.getFullDisplayName();\n    }\n    return buildKey;\n}", "CodeBleu_score": 38.739108793992656}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = BitbucketServerEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \"BitbucketSCMNavigator.serverUrl was null, setting to default: {0}\", serverUrl);\n    }\n\n    if (traits == null) {\n        traits = new ArrayList<>();\n        traits.add(new Forks());\n        traits.add(new SSHCheckout());\n        traits.add(new GitLFSSupport());\n        traits.add(new AuthorizationStrategyProperty());\n        traits.add(new CredentialsProperty());\n        traits.add(new SSHCheckoutTrait());\n        traits.add(new PruneBranchesTrait());\n        traits.add(new PruneTagsTrait());\n        traits.add(new BuildChooserSettingTrait());\n        traits.add(new GitToolProperty());\n        traits.add(new SubmoduleOptionTrait());\n        traits.add(new GitTagDiscoveryTrait());\n        traits.add(new ScmHeadAuthorityTrait());\n        traits.add(new OriginPullRequestDiscoveryTrait());\n        traits.add(new ForkPullRequestDiscoveryTrait());\n        traits.add(new BranchDiscoveryTrait());\n        traits.add(new OriginMergeWithGitSCMExtensionTrait());\n        traits.add(new ForkMergeWithGitSCMExtensionTrait());\n        traits.add(new WipeWorkspaceTrait());\n        traits.add(new CloneOptionTrait());\n        traits.add(new GitBrowserSCMSourceTrait());\n        traits.add(new GitRepositoryBrowserTrait());\n        traits.add(new GitTagAction());\n        traits.add(new GitTagAction());\n        traits.add(new GitTagAction());\n        traits.add(new GitTagAction());\n        traits.add(new GitTagAction());\n        traits.add(new GitTagAction());\n        traits.add(new GitTagAction());\n        traits.add(new GitTagAction());\n        tra", "CodeBleu_score": 27.81669383931809}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n    serverUrl = BitbucketSCMNavigator.DescriptorImpl.get().getServerUrl();\n    if (serverUrl == null) {\n      LOGGER.warning(\"Bitbucket SCM Navigator server URL is null. This navigator will not function.\");\n    }\n  }\n  if (traits == null) {\n    traits = new BitbucketSCMNavigatorContext()\n      .withCredentialsId(credentialsId)\n      .withTraits(new BitbucketSCMNavigatorTrait[]{\n        new ForksTrait(true, false),\n        new SSHCheckoutTrait(true),\n        new TeamCredentialsTrait(credentialsId),\n        new HookTrait(true, false),\n        new OriginPullRequestDiscoveryTrait(true, 1),\n        new OriginMergeWithGitSCMExtensionTrait(true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false", "CodeBleu_score": 25.97160096082294}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (traits == null) {\n        if (serverUrl == null) {\n            LOGGER.warning(\"BitbucketSCMNavigator with null serverUrl and null traits found in configuration, using default server URL\");\n            serverUrl = BitbucketSCMSource.SERVER_URL;\n        }\n        traits = new BitbucketSCMNavigatorContext();\n    }\n    return this;\n}", "CodeBleu_score": 11.53259871897592}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tBitbucketRepository repository = bitbucket.getRepository(name);\n  String message = String.format(\"[%s] %s\", isMatch ? \"MATCH\" : \"IGNORE\", repository.getFullName());\n  log.info(message);\n  if (isMatch) {\n    count.incrementAndGet();\n  }\n}", "CodeBleu_score": 47.272156529279336}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tString message = isMatch ? \"proposed\" : \"ignored\";\n    log.info(\"Repository {} is {}\", name, message);\n    if (isMatch) {\n        proposed++;\n    }\n}", "CodeBleu_score": 25.45355752158196}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tif (isMatch) {\n        proposedCount++;\n    }\n    String message = String.format(\"%s %s\", name, isMatch ? \"proposed\" : \"ignored\");\n    listener.getLogger().println(message);\n}", "CodeBleu_score": 35.336955942645744}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = new ArrayList<>();\n        for (BranchSpec b : scm.getBranches()) {\n            if (b.getHead() != null && b.getHead().isHash()) {\n                if (!commitExists(git, b.getHead().getName())) {\n                    refSpecs.add(new RefSpec(b.getHead().getName() + \":\" + b.getHead().getName()));\n                }\n            }\n        }\n        if (refSpecs.isEmpty()) {\n            return rev;\n        }\n        listener.getLogger().println(\"Fetching missing commits for \" + rev.getSha1String() + \" from \" + scm.getUserRemoteConfigs().get(0).getUrl());\n        try {\n            git.fetch_().from(scm.getUserRemoteConfigs().get(0).getUrl(), refSpecs).execute();\n        } catch (GitException e) {\n            throw new InterruptedException(e.getMessage());\n        }\n        return rev;\n    }", "CodeBleu_score": 33.88125142101129}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev.getBranches().isEmpty()) {\n            return rev;\n        }\n        try {\n            listener.getLogger().println(\"Decorating revision \" + rev.getSha1String() + \" for build \" + build.getFullDisplayName() + \".\");\n            List<RefSpec> refSpecs = new ArrayList<>();\n            for (Branch b : rev.getBranches()) {\n                String sha1 = b.getSHA1String();\n                if (!commitExists(git, sha1)) {\n                    listener.getLogger().println(\"Commit \" + sha1 + \" not found locally. Fetching it.\");\n                    refSpecs.add(new RefSpec(\"+refs/heads/\" + b.getName() + \":\" + \"refs/remotes/origin/\" + b.getName()));\n                }\n            }\n            if (!refSpecs.isEmpty()) {\n                listener.getLogger().println(\"Fetching missing commits.\");\n                git.fetch_().from(new URIish(scm.getRepositoryByName(\"origin\").getURIs().get(0).toPrivateString()), refSpecs).execute();\n            }\n            return rev;\n        } catch (GitException | URISyntaxException e) {\n            listener.getLogger().println(\"Failed to decorate revision \" + rev.getSha1String() + \" for build \" + build.getFullDisplayName() + \".\");\n            e.printStackTrace(listener.getLogger());\n            throw new RuntimeException(e);\n        }\n    }", "CodeBleu_score": 37.50197389756606}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = new ArrayList<>();\n        for (BranchSpec branchSpec : scm.getBranches()) {\n            if (branchSpec.getHead() != null) {\n                if (commitExists(git, branchSpec.getHead())) {\n                    continue;\n                }\n                RefSpec refSpec = new RefSpec(branchSpec.getHead() + \":\" + branchSpec.getHead());\n                refSpecs.add(refSpec);\n            }\n        }\n        if (!refSpecs.isEmpty()) {\n            listener.getLogger().println(\"Fetching missing commits...\");\n            git.fetch_().from(new URIish(scm.getUserRemoteConfigs()[0].getUrl()), refSpecs.toArray(new RefSpec[refSpecs.size()])).execute();\n        }\n        return rev;\n    }", "CodeBleu_score": 35.0158578472632}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> newLinks = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref[]> entry : links.entrySet()) {\n        if (entry.getValue() != null && entry.getValue().length > 0) {\n            newLinks.put(entry.getKey(), entry.getValue()[0]);\n        }\n    }\n    return newLinks;\n}", "CodeBleu_score": 56.891347049669086}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref[]> entry : links.entrySet()) {\n        if (entry.getValue() != null && entry.getValue().length > 0) {\n            result.put(entry.getKey(), entry.getValue()[0]);\n        }\n    }\n    return result;\n}", "CodeBleu_score": 62.41297701476323}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n    return null;\n  }\n  Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n  for (Map.Entry<String, BitbucketHref[]> entry : links.entrySet()) {\n    if (entry.getValue() != null && entry.getValue().length > 0) {\n      result.put(entry.getKey(), entry.getValue()[0]);\n    }\n  }\n  return result;\n}", "CodeBleu_score": 61.95754129295763}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourcesByRepo = groupBy(resourceStates, r => this.getSCMResource(r).resourceGroup.provider.rootUri);\n\n\tfor (const [, resources] of resourcesByRepo) {\n\t\tconst scmResources = resources.map(r => this.getSCMResource(r));\n\t\tconst provider = scmResources[0].resourceGroup.provider;\n\t\tconst root = provider.rootUri;\n\n\t\tconst added: IResource[] = [];\n\t\tconst unresolved: IResource[] = [];\n\t\tconst conflicts: IResource[] = [];\n\t\tconst count = resources.length;\n\n\t\tfor (const resource of scmResources) {\n\t\t\tconst uri = this.toResource(resource);\n\t\t\tconst raw = await this.getFileContent(uri);\n\n\t\t\tif (!raw) {\n\t\t\t\tunresolved.push(uri);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst path = this.toPath(uri);\n\t\t\tconst add = await provider.add(root, path, raw.value);\n\n\t\t\tif (add) {\n\t\t\t\tadded.push(uri);\n\t\t\t} else {\n\t\t\t\tconflicts.push(uri);\n\t\t\t}\n\t\t}\n\n\t\tif (added.length > 0) {\n\t\t\tthis.outputChannel.appendLine(localize('added', \"Added {0} files to {1} in {2}\", added.length, basename(root.fsPath), provider.label));\n\t\t}\n\n\t\tif (unresolved.length > 0) {\n\t\t\tthis.outputChannel.appendLine(localize('unresolved', \"Could not resolve {0} files to add to {1} in {2}\", unresolved.length, basename(root.fsPath), provider.label));\n\t\t}\n\n\t\tif (conflicts.length > 0) {\n\t\t\tthis.outputChannel.appendLine(localize('conflicts', \"Could", "CodeBleu_score": 39.58173668927931}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(r => r.resourceUri);\n\tconst added = await this.addResources(resources);\n\tif (added.length > 0) {\n\t\tawait this.repository.add(added.map(r => r.fsPath));\n\t}\n}", "CodeBleu_score": 36.394051064685584}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tif (resourceStates.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resources = resourceStates.map(r => r.resourceUri);\n\tconst added = new Set<string>();\n\tconst repositories = groupBy(resources, this.getSCMRepository);\n\n\tfor (const repo of repositories) {\n\t\tconst uris = repo.map(r => r.resourceUri);\n\t\tconst provider = this.getSCMProvider(repo[0]);\n\t\tconst root = provider.rootUri;\n\n\t\tif (!root) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst toAdd = uris.filter(u => !added.has(u.toString()));\n\t\tconst toAddPaths = toAdd.map(u => this.mapResourceToRelativePath(root, u));\n\n\t\ttry {\n\t\t\tawait provider.provider.add(toAddPaths);\n\t\t\tadded.add(...toAddPaths);\n\t\t} catch (err) {\n\t\t\tthis.logService.error(err);\n\t\t\tthis.notificationService.error(localize('add failed', \"An error occurred while running the add operation.\"));\n\t\t}\n\t}\n}", "CodeBleu_score": 44.824423671699186}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tif (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n\t\tconst resource = await this.getSingleSCMResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(s => s instanceof Resource) as Resource[];\n}", "CodeBleu_score": 40.60758668110225}, {"code": "protected async getResourceStates{\n\tif (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n\t\tconst resource = await this.getSingleSourceControlResource();\n\t\tif (resource) {\n\t\t\tthis.resourceStates = [resource];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(s => s instanceof Resource) as Resource[];\n}", "CodeBleu_score": 41.37506073262879}, {"code": "protected async getResourceStates{\n\tif (this.resourceStates.length === 0 || !(this.resourceStates[0].resourceUri instanceof Uri)) {\n\t\ttry {\n\t\t\tconst resource = await this.repository.provider.getResource(this.resourceStates[0].resourceUri);\n\t\t\tthis.resourceStates = [new Resource(resource, this.resourceStates[0].decorations)];\n\t\t} catch (err) {\n\t\t\tthis.resourceStates = [];\n\t\t}\n\t}\n\n\treturn this.resourceStates.filter(s => s.resourceUri instanceof Uri) as Resource[];\n}", "CodeBleu_score": 40.56148098557071}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri ?? this.getUri();\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === SvnUri.scheme) {\n      uri = Uri.file(uri.fsPath);\n    }\n    const scm = await this.getSCM(uri);\n    if (!scm) {\n      return undefined;\n    }\n    const repository = await this.repository.getResourceFromFile(uri, scm.repositories);\n    return repository?.resource;\n  }", "CodeBleu_score": 40.578880922136804}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n    if (uri && uri.scheme === 'svn') {\n      uri = Uri.file(uri.fsPath);\n    }\n    if (uri && uri.scheme === 'file') {\n      const scmResource = await this.getSCMResourceForFile(uri);\n      if (scmResource) {\n        return scmResource;\n      }\n    }\n    return undefined;\n  }", "CodeBleu_score": 32.53217057095391}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      const editor = window.activeTextEditor;\n      if (editor) {\n        uri = editor.document.uri;\n      }\n    }\n    if (uri) {\n      uri = this.fromSvnUri(uri);\n      if (uri.scheme === \"file\") {\n        const scmResource = await this.getSCMResourceFromFile(uri);\n        if (scmResource) {\n          return scmResource;\n        }\n      }\n    }\n    return undefined;\n  }", "CodeBleu_score": 32.706482216098564}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tlet repo = await this.model.getRemoteRepository(element);\n        if (repo) {\n            if (element.status === Status.MODIFIED) {\n                let oldUri = element.oldUri;\n                let newUri = element.uri;\n                let oldRevision = element.oldRevision;\n                let newRevision = element.revision;\n                let diffCmd = this.model.getDiffCommand(oldUri, newUri, oldRevision, newRevision, repo);\n                if (diffCmd) {\n                    this.commandService.executeCommand(diffCmd);\n                }\n            } else if (element.status === Status.ADDED) {\n                let uri = element.uri;\n                let revision = element.revision;\n                let openFileCmd = this.model.getOpenFileCommand(uri, revision, repo);\n                if (openFileCmd) {\n                    this.commandService.executeCommand(openFileCmd);\n                }\n            }\n        }\n    }", "CodeBleu_score": 34.507769657537935}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepo = await this.model.getRemoteRepository(element.repoPath);\n    if (!remoteRepo) {\n        return;\n    }\n\n    const command = this.openDiff(element, remoteRepo);\n    if (command) {\n        await this.commandService.executeCommand(command.id, ...command.arguments);\n    }\n}", "CodeBleu_score": 38.20386982397858}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tif (element.action === 'M') {\n\n        const remoteRepository = await this.model.getRemoteRepository(element.path);\n\n        if (remoteRepository) {\n            const diffCommand = this.svnDiffCommand.replace('{path}', element.path);\n            const diffCommandWithRevision = diffCommand.replace('{revision}', element.revision);\n            const diffCommandWithRemote = diffCommandWithRevision.replace('{remote}', remoteRepository);\n            this.commandService.executeCommand(diffCommandWithRemote);\n        } else {\n            this.logger.error(`No remote repository found for SVN path '${element.path}'`);\n        }\n    } else {\n        const openFileCommand = this.svnOpenFileCommand.replace('{path}', element.path);\n        const openFileCommandWithRevision = openFileCommand.replace('{revision}', element.revision);\n        this.commandService.executeCommand(openFileCommandWithRevision);\n    }\n}", "CodeBleu_score": 35.42495551850676}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!clipboard) {\n\t\twindow.showErrorMessage('Clipboard not supported.');\n\t\treturn;\n\t}\n\n\tif (item.commit.isMerge) {\n\t\twindow.showErrorMessage('Merge commit information cannot be copied to the clipboard.');\n\t\treturn;\n\t}\n\n\tlet text = '';\n\tif (what === 'message') {\n\t\ttext = item.commit.message;\n\t} else if (what === 'revision') {\n\t\ttext = item.commit.revision;\n\t}\n\n\tif (text.length > 0) {\n\t\tawait clipboard.writeText(text);\n\t}\n}", "CodeBleu_score": 30.71836357347271}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!clipboard.writeText) {\n        window.showErrorMessage(\"Clipboard not supported\");\n        return;\n    }\n\n    let commitMessage: string = \"\";\n\n    if (item.commitType === \"commit\") {\n        commitMessage = item.commitMessage;\n    } else if (item.commitType === \"revision\") {\n        commitMessage = item.revision;\n    }\n\n    if (what === \"message\") {\n        clipboard.writeText(commitMessage);\n    } else if (what === \"revision\") {\n        clipboard.writeText(item.revision);\n    } else if (what === \"author\") {\n        clipboard.writeText(item.author);\n    } else if (what === \"date\") {\n        clipboard.writeText(item.date);\n    } else if (what === \"branch\") {\n        clipboard.writeText(item.branch);\n    } else if (what === \"file\") {\n        clipboard.writeText(item.file);\n    } else if (what === \"revision\") {\n        clipboard.writeText(item.revision);\n    } else if (what === \"commit\") {\n        clipboard.writeText(item.commit);\n    } else if (what === \"commitMessage\") {\n        clipboard.writeText(item.commitMessage);\n    } else if (what === \"commitMessage\") {\n        clipboard.writeText(item.commitMessage);\n    } else if (what === \"commitMessage\") {\n        clipboard.writeText(item.commitMessage);\n    } else if (what === \"commitMessage\") {\n        clipboard.writeText(item.commitMessage);\n    } else if (what === \"commitMessage\") {\n        clipboard.writeText(item.commitMessage);\n    } else if (what === \"commitMessage\") {\n        clipboard.writeText(item.commitMessage);\n    } else if (what === \"commitMessage\") {\n        clipboard.writeText(item.commitMessage);\n    } else if (what === \"commitMessage\") {\n        clipboard.writeText(item.commitMessage);\n    } else if (what === \"commitMessage\") {\n        clip", "CodeBleu_score": 26.873650766853757}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tconst clipboard = await getClipboard();\n  if (!clipboard) {\n    window.showErrorMessage('Clipboard not supported.');\n    return;\n  }\n\n  if (item.type === 'commit') {\n    const commit = item.commit;\n    if (what === 'message') {\n      clipboard.writeText(commit.message);\n    } else if (what === 'revision') {\n      clipboard.writeText(commit.revision);\n    }\n  } else {\n    window.showErrorMessage('Item is not a commit.');\n  }\n}", "CodeBleu_score": 45.319644303610474}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n        long priority = 0L;\n        GiteaConnectionFactory best = null;\n        for (GiteaConnectionFactory factory : loader) {\n            if (factory.canOpen(this)) {\n                long p = factory.priority(this);\n                if (best == null || p > priority) {\n                    best = factory;\n                    priority = p;\n                }\n            }\n        }\n        if (best != null) {\n            return best.open(this);\n        }\n        throw new IOException(\"No implementation for connecting to \" + serverUrl);\n    }", "CodeBleu_score": 97.57784747925552}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tif (Jenkins.getInstance() != null) {\n        return this.withClassLoader(Jenkins.getInstance().pluginManager.uberClassLoader);\n    }\n    return this.withClassLoader(Gitea.class.getClassLoader());\n}", "CodeBleu_score": 29.89261418278506}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        PluginManager pluginManager = jenkins.getPluginManager();\n        if (pluginManager != null) {\n            this.classLoader = pluginManager.uberClassLoader;\n        }\n    }\n    return this;\n}", "CodeBleu_score": 39.69735860646071}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tif (Jenkins.getInstance() != null) {\n        this.classLoader = Jenkins.getInstance().pluginManager.uberClassLoader;\n    } else {\n        this.classLoader = this.getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 46.11619942184211}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = normalizeAliasUrl(aliasUrl);\n    }", "CodeBleu_score": 40.942723767452044}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 39.39943708761138}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = aliasUrl == null ? null : aliasUrl.trim();\n    }", "CodeBleu_score": 42.54366297624821}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n    return new ListBoxModel();\n  }\n\n  serverUrl = normalizeServerUrl(serverUrl);\n  ListBoxModel listBoxModel = new ListBoxModel();\n  listBoxModel.add(\"--- Choose credentials ---\", \"\");\n\n  List<StandardUsernamePasswordCredentials> credentials =\n      CredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class, Jenkins.get(), ACL.SYSTEM, URIRequirementBuilder.fromUri(serverUrl).build());\n\n  for (StandardUsernamePasswordCredentials credential : credentials) {\n    listBoxModel.add(credential.getId(), credential.getId());\n  }\n\n  return listBoxModel;\n}", "CodeBleu_score": 43.786232938142454}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel();\n    }\n    serverUrl = normalizeServerUrl(serverUrl);\n    return new StandardListBoxModel()\n            .withEmptySelection()\n            .withMatching(\n                    CredentialsMatchers.anyOf(\n                            CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n                            CredentialsMatchers.instanceOf(StringCredentials.class)),\n                    CredentialsProvider.lookupCredentials(\n                            StandardCredentials.class,\n                            Jenkins.get(),\n                            ACL.SYSTEM,\n                            Collections.singletonList(new GiteaAuth(serverUrl, null, null))));\n}", "CodeBleu_score": 34.50173558708487}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        return new StandardListBoxModel();\n    }\n\n    serverUrl = Util.fixEmptyAndTrim(serverUrl);\n    if (serverUrl == null) {\n        return new StandardListBoxModel();\n    }\n\n    try {\n        serverUrl = Util.normalizeUrl(serverUrl);\n    } catch (IllegalArgumentException e) {\n        return new StandardListBoxModel();\n    }\n\n    return new StandardListBoxModel()\n            .withEmptySelection()\n            .withMatching(\n                    CredentialsMatchers.anyOf(\n                            CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n                            CredentialsMatchers.instanceOf(StringCredentials.class)\n                    ),\n                    CredentialsProvider.lookupCredentials(\n                            StandardCredentials.class,\n                            Jenkins.get(),\n                            ACL.SYSTEM,\n                            Collections.<DomainRequirement>emptyList()\n                    )\n            )\n            .withAll(\n                    CredentialsProvider.lookupCredentials(\n                            StandardCredentials.class,\n                            Jenkins.get(),\n                            ACL.SYSTEM,\n                            Collections.<DomainRequirement>emptyList()\n                    )\n            )\n            .withMatching(\n                    CredentialsMatchers.anyOf(\n                            CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n                            CredentialsMatchers.instanceOf(StringCredentials.class)\n                    ),\n                    CredentialsProvider.lookupCredentials(\n                            StandardCredentials.class,\n                            Jenkins.get(),\n                            ACL.SYSTEM,\n                            Collections.<DomainRequirement>emptyList()\n                    )\n            )\n            .withAll(\n                    CredentialsProvider.lookupCredentials(\n                            StandardCredentials.class,\n                            Jenkins.get(),\n                            ACL.SYSTEM,\n                            Collections.<DomainRequirement>emptyList()\n                    )\n            )\n            .withMatching(\n                    CredentialsMatchers.anyOf(\n                            CredentialsMatchers.instanceOf(StandardUsernamePassword", "CodeBleu_score": 41.03787314370021}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n    return null;\n  }\n\n  try {\n    URI uri = new URI(serverUrl);\n    String scheme = uri.getScheme();\n    String host = uri.getHost();\n    int port = uri.getPort();\n\n    if (scheme == null) {\n      scheme = \"http\";\n    } else {\n      scheme = scheme.toLowerCase();\n    }\n\n    if (port == -1) {\n      if (scheme.equals(\"http\")) {\n        port = 80;\n      } else if (scheme.equals(\"https\")) {\n        port = 443;\n      }\n    }\n\n    if (host == null) {\n      return null;\n    }\n\n    String normalizedServerUrl = scheme + \"://\" + host;\n    if (port != -1 && port != 80 && port != 443) {\n      normalizedServerUrl += \":\" + port;\n    }\n\n    return normalizedServerUrl;\n  } catch (URISyntaxException e) {\n    return serverUrl;\n  }\n}", "CodeBleu_score": 39.36468313642691}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n    return null;\n  }\n  try {\n    URI uri = new URI(serverUrl);\n    String scheme = uri.getScheme();\n    if (scheme == null) {\n      scheme = \"http\";\n    }\n    int port = uri.getPort();\n    if (port == -1) {\n      if (\"http\".equals(scheme)) {\n        port = 80;\n      } else if (\"https\".equals(scheme)) {\n        port = 443;\n      }\n    }\n    String normalizedServerUrl = String.format(\"%s://%s:%d%s\", scheme, uri.getHost(), port, uri.getPath());\n    if (normalizedServerUrl.endsWith(\"/\")) {\n      normalizedServerUrl = normalizedServerUrl.substring(0, normalizedServerUrl.length() - 1);\n    }\n    return normalizedServerUrl;\n  } catch (URISyntaxException e) {\n    // Ignore the exception.\n  }\n  return serverUrl;\n}", "CodeBleu_score": 43.372595642028166}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n    return null;\n  }\n  try {\n    URI uri = new URI(serverUrl);\n    String scheme = uri.getScheme();\n    if (scheme == null) {\n      scheme = \"http\";\n    }\n    int port = uri.getPort();\n    if (port == -1) {\n      if (scheme.equals(\"http\")) {\n        port = 80;\n      } else if (scheme.equals(\"https\")) {\n        port = 443;\n      }\n    }\n    if (port == 80 && scheme.equals(\"http\")) {\n      port = -1;\n    } else if (port == 443 && scheme.equals(\"https\")) {\n      port = -1;\n    }\n    return String.format(\"%s://%s%s\", scheme, uri.getHost(), port == -1 ? \"\" : \":\" + port);\n  } catch (URISyntaxException e) {\n    return null;\n  }\n}", "CodeBleu_score": 39.00717425932439}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        if (server.getDisplayName() != null && !server.getDisplayName().isEmpty()) {\n            items.add(server.getDisplayName(), server.getServerUrl());\n        } else {\n            items.add(server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 40.58088799414303}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        items.add(server.getDisplayName(), server.getServerUrl());\n    }\n    return items;\n}", "CodeBleu_score": 32.179867645640456}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n\n        for (GiteaServer server : getServers()) {\n            items.add(server.getDisplayName(), server.getUrl());\n        }\n\n        return items;\n    }", "CodeBleu_score": 33.21627987799189}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t// Check if the user has the admin permission\n        if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException(\"Insufficient permission to set the Gitea servers\");\n        }\n\n        // Remove duplicates and empty URLs from the server list\n        List<GiteaServer> uniqueServers = new ArrayList<>();\n        if (servers != null) {\n            Set<String> uniqueURLs = new HashSet<>();\n            for (GiteaServer server : servers) {\n                if (server != null && !StringUtils.isBlank(server.getServerUrl())) {\n                    if (!uniqueURLs.contains(server.getServerUrl())) {\n                        uniqueServers.add(server);\n                        uniqueURLs.add(server.getServerUrl());\n                    }\n                }\n            }\n        }\n\n        // Update the servers\n        this.servers = uniqueServers;\n\n        // Save the configuration\n        save();\n    }", "CodeBleu_score": 37.3879685742336}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t// Check if the user has admin permissions.\n    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n\n    // Remove duplicates and empty URLs from the provided server list.\n    List<GiteaServer> newServers = new ArrayList<>();\n    Set<String> urls = new HashSet<>();\n    for (GiteaServer server : servers) {\n        if (server.getApiUrl() != null && !urls.contains(server.getApiUrl())) {\n            newServers.add(server);\n            urls.add(server.getApiUrl());\n        }\n    }\n\n    // Update the servers.\n    this.servers = newServers;\n\n    // Save the configuration.\n    save();\n}", "CodeBleu_score": 38.774062329175294}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t// Check for admin permissions\n    if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        throw new AccessDeniedException2(Jenkins.getAuthentication2(), Jenkins.ADMINISTER);\n    }\n\n    // Remove duplicates and empty URLs from the provided server list\n    Set<GiteaServer> uniqueServers = new HashSet<>();\n    if (servers != null) {\n        for (GiteaServer server : servers) {\n            if (server.getUrl() != null && !server.getUrl().trim().isEmpty()) {\n                uniqueServers.add(server);\n            }\n        }\n    }\n\n    // Update the servers\n    this.servers = new ArrayList<>(uniqueServers);\n\n    // Save the configuration\n    save();\n}", "CodeBleu_score": 38.43812215922933}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    List<GiteaServer> eps = new ArrayList<>(servers);\n    for (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (endpoint.getServerUrl().equals(serverUrl)) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        servers = eps;\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 53.54335135310219}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    if (servers != null) {\n        for (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (endpoint.getServerUrl().equals(serverUrl)) {\n                iterator.remove();\n                removed = true;\n            }\n        }\n    }\n    if (removed) {\n        save();\n    }\n    return removed;\n}", "CodeBleu_score": 45.76675902462773}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = normalizeServerUrl(serverUrl);\n    boolean removed = false;\n    List<GiteaServer> eps = new ArrayList<>(servers);\n    for (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        String endpointServerUrl = endpoint.getServerUrl();\n        if (endpointServerUrl.equals(serverUrl)) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    servers = eps;\n    save();\n    return removed;\n}", "CodeBleu_score": 51.86843488851495}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      if (el.getKind() == ElementKind.FIELD) {\n        Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n        String type = el.asType().toString();\n        descriptorElements.add(new DescriptorElement(type, attributes));\n      }\n    }\n  }", "CodeBleu_score": 51.234878707368466}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      if (el.getKind() == ElementKind.FIELD) {\n        Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n        String type = el.asType().toString();\n\n        if (type.equals(\"int\")) {\n          type = \"java.lang.Integer\";\n        } else if (type.equals(\"boolean\")) {\n          type = \"java.lang.Boolean\";\n        } else if (type.equals(\"double\")) {\n          type = \"java.lang.Double\";\n        } else if (type.equals(\"float\")) {\n          type = \"java.lang.Float\";\n        } else if (type.equals(\"long\")) {\n          type = \"java.lang.Long\";\n        } else if (type.equals(\"short\")) {\n          type = \"java.lang.Short\";\n        } else if (type.equals(\"byte\")) {\n          type = \"java.lang.Byte\";\n        }\n\n        descriptorElements.add(new ConfigElement(el.getSimpleName().toString(), type, attributes));\n      }\n    }\n  }", "CodeBleu_score": 38.78321940532069}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      if (el.getKind() == ElementKind.FIELD) {\n        Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n        String type = getType(el);\n\n        if (type != null) {\n          descriptorElements.add(new DescriptorElement(attributes, type));\n        }\n      }\n    }\n  }", "CodeBleu_score": 48.46841265000581}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String annotationClassName = annotationClass.getName();\n        if (qualifiedName.replace('$', '.').equals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 38.54530614194351}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String annotationName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getName();\n        if (annotationName.equals(targetName)) {\n            return annotation;\n        }\n        if (annotationName.startsWith(targetName)) {\n            if (annotationName.length() == targetName.length()) {\n                return annotation;\n            }\n            char nextChar = annotationName.charAt(targetName.length());\n            if (nextChar == '$') {\n                return annotation;\n            }\n        }\n    }\n    return null;\n}", "CodeBleu_score": 31.215610135576494}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String annotationClassName = annotation.getQualifiedName().toString();\n        if (annotationClassName.replace('$', '.').equals(annotationClass.getName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 40.656879542637256}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n        \"docstatus\": 1,\n    }\n\n    if for_approval:\n        filters[\"status\"] = (\"not in\", [\"Cancelled\", \"Rejected\"])\n\n        if approver_id:\n            filters[\"approver\"] = approver_id\n\n    else:\n        filters[\"status\"] = (\"not in\", [\"Cancelled\"])\n\n    return filters\n\n", "CodeBleu_score": 23.957679509667596}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"status\": \"Open\",\n    }\n    if approver_id:\n        filters[\"approver\"] = approver_id\n    if for_approval:\n        filters[\"status\"] = get_allowed_states_for_workflow(frappe.get_doc(\"Leave Application\").workflow, approver_id)\n        filters[\"employee\"] = [\"!=\", employee]\n    else:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n    return filters\n\n", "CodeBleu_score": 34.56353146011192}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n\n    if approver_id:\n        filters[\"approver_id\"] = approver_id\n\n    if for_approval:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n        filters[\"status\"] = [\"!=\", \"Rejected\"]\n        filters[\"status\"] = [\"!=\", \"Expired\"]\n        filters[\"status\"] = [\"!=\", \"Closed\"]\n\n        workflow = frappe.get_doc(\"Workflow\", \"Leave Application\")\n        allowed_states = get_allowed_states_for_workflow(workflow, approver_id)\n        filters[\"status\"] = allowed_states\n\n    else:\n        filters[\"status\"] = [\"!=\", \"Cancelled\"]\n\n    return filters\n\n", "CodeBleu_score": 37.12155071669915}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tfrom datetime import date\n    from frappe.utils import getdate\n\n    today = getdate(date.today())\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail.allocated_leaves,\n            \"balance\": leave_detail.leave_balance,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 42.40031348156484}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tfrom datetime import date\n    from frappe.utils import today\n    from one_fm.api.mobile.leave_application import get_leave_details\n\n    current_date = date.today()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        if leave_type not in leave_balance_map:\n            leave_balance_map[leave_type] = {}\n        leave_balance_map[leave_type][\"allocated\"] = leave_detail.leave_allocation\n        leave_balance_map[leave_type][\"balance\"] = leave_detail.leave_balance\n    return leave_balance_map\n\n", "CodeBleu_score": 37.61911924031358}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tfrom datetime import date\n\n    from .get_leave_details import get_leave_details\n\n    current_date = date.today()\n\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 43.08188636939211}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = get_holiday_list_for_employee(employee)\n\n    if holiday_list == None:\n        return []\n\n    holidays = query_holidays_from_db(holiday_list)\n\n    holidays = [x for x in holidays if x[\"type\"] != \"weekly off\"]\n    holidays = sorted(holidays, key=lambda x: x[\"date\"])\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 26.85625368473639}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t# Get the holiday list for the employee\n    holiday_list = get_holiday_list_for_employee(employee)\n\n    # If no holiday list is found, return an empty list\n    if holiday_list is None:\n        return []\n\n    # Get the holidays from the database\n    holidays = get_holidays_from_db(holiday_list)\n\n    # Exclude weekly offs\n    holidays = [holiday for holiday in holidays if holiday[\"type\"] != \"weekly off\"]\n\n    # Order by date\n    holidays.sort(key=lambda holiday: holiday[\"date\"])\n\n    # Strip HTML from the holiday descriptions\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    # Return the list of holidays\n    return holidays\n\n", "CodeBleu_score": 28.109007755808733}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholidays = []\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return holidays\n    holidays = get_holidays_for_holiday_list(holiday_list)\n    holidays = [holiday for holiday in holidays if holiday['type'] != 'Weekly Off']\n    holidays = sorted(holidays, key=lambda holiday: holiday['date'])\n    holidays = [strip_html(holiday) for holiday in holidays]\n    return holidays\n", "CodeBleu_score": 24.330260496383012}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\tif frappe.db.get_single_value(\"HR Settings\", \"send_weekly_holiday_reminders\") == 1:\n        frequency = frappe.db.get_single_value(\"HR Settings\", \"weekly_holiday_reminder_frequency\")\n        if frequency == \"Weekly\":\n            send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 46.33834375557909}, {"code": "def send_reminders_in_advance_weekly()\n\tsend_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.3235977382994575}, {"code": "def send_reminders_in_advance_weekly()\n\tif frappe.db.get_single_value(\"HR Settings\", \"send_advance_holiday_reminders\") == 1:\n        if frappe.db.get_single_value(\"HR Settings\", \"advance_holiday_reminder_frequency\") == \"Weekly\":\n            send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 33.23128782264655}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\tself.self_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self.self_appraisal_score += self_rating.rating * self_rating.weightage\n    self.self_appraisal_score = round(self.self_appraisal_score, 2)\n\n", "CodeBleu_score": 22.144666247692367}, {"code": "def calculate_self_appraisal_score(self)\n\tself_appraisal_score = 0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += (self_rating.rating * self_rating.percentage_weightage) * 5\n    self.self_appraisal_score = round(self_appraisal_score, 1)\n\n", "CodeBleu_score": 22.323721140427693}, {"code": "def calculate_self_appraisal_score(self)\n\ttotal_score = 0\n    for self_rating in self.self_ratings:\n        total_score += self_rating.rating * self_rating.weightage\n    self.self_appraisal_score = round(total_score, 2)\n\n", "CodeBleu_score": 21.723291394640565}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\tappraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.final_score_formula:\n        self.final_score = self.calculate_final_score_from_formula(appraisal_cycle.final_score_formula)\n    else:\n        self.final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n\n    self.final_score = round(self.final_score, 2)\n\n", "CodeBleu_score": 18.192442408149567}, {"code": "def calculate_final_score(self)\n\tappraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.final_score_calculation_type == \"Formula\":\n        if not appraisal_cycle.final_score_formula:\n            frappe.throw(\"Please specify a formula for calculating the final score.\")\n\n        # Get data for formula\n        data = {\n            \"total_score\": self.total_score,\n            \"average_feedback_score\": self.average_feedback_score,\n            \"self_appraisal_score\": self.self_appraisal_score,\n            \"appraisal_cycle\": self.appraisal_cycle,\n            \"appraisal\": self.name\n        }\n\n        # Sanitize formula\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate formula\n        try:\n            final_score = eval(formula, data)\n        except Exception as e:\n            frappe.throw(f\"Error evaluating final score formula: {e}\")\n\n        # Set final score\n        self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n\n    else:\n        # Calculate final score\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n\n        # Set final score\n        self.final_score = round(final_score, 2)\n\n", "CodeBleu_score": 37.47956092055035}, {"code": "def calculate_final_score(self)\n\t# Retrieve the appraisal cycle document\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # If the appraisal cycle is not configured to calculate the final score based on a formula, calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n    if not appraisal_cycle.final_score_formula:\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n\n        # Set the final score with the appropriate precision\n        self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n\n    # If the appraisal cycle is configured to calculate the final score based on a formula, gather necessary data, sanitize the formula, and evaluate it\n    else:\n        # Gather necessary data\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        feedback_score_1 = self.feedback_score_1\n        feedback_score_2 = self.feedback_score_2\n        feedback_score_3 = self.feedback_score_3\n        feedback_score_4 = self.feedback_score_4\n        feedback_score_5 = self.feedback_score_5\n        feedback_score_6 = self.feedback_score_6\n        feedback_score_7 = self.feedback_score_7\n        feedback_score_8 = self.feedback_score_8\n        feedback_score_9 = self.feedback_score_9\n        feedback_score_10 = self.feedback_score_10\n        feedback_score_11 = self.feedback_score_11\n        feedback_score_12 = self.feedback_score_", "CodeBleu_score": 25.704042294349307}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate(nowdate()) and self.status != \"On Leave\":\n        frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"))\n\n    if self.attendance_date < getdate(self.employee_date_of_joining):\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining.\"))\n", "CodeBleu_score": 25.92711024229582}, {"code": "def validate_attendance_date(self)\n\tif self.attendance_date > getdate(nowdate()) and self.status != \"On Leave\":\n        if not frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"docstatus\": 1, \"from_date\": self.attendance_date, \"to_date\": self.attendance_date}):\n            frappe.throw(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\")\n    if self.attendance_date < getdate(frappe.db.get_value(\"Employee\", self.employee, \"date_of_joining\")):\n        frappe.throw(\"Attendance cannot be marked for dates earlier than the employee's date of joining.\")\n\n", "CodeBleu_score": 32.1118365119794}, {"code": "def validate_attendance_date(self)\n\tif self.attendance_date > frappe.utils.today():\n        if self.status != \"On Leave\" or self.leave_application:\n            frappe.throw(\n                \"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"\n            )\n    if self.attendance_date < self.employee_date_of_joining:\n        frappe.throw(\n            \"Attendance cannot be marked for dates earlier than the employee's date of joining.\"\n        )\n\n", "CodeBleu_score": 24.726403997521956}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Duplicate attendance record found for {0} on {1}. <a href='/desk#Form/Attendance/{2}'>{2}</a>\".format(\n                    self.employee, self.attendance_date, duplicate\n                )\n            )\n        )\n\n", "CodeBleu_score": 31.043980153192567}, {"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\"Duplicate attendance record found for employee {0} on {1}. Please visit <a href='/desk#Form/Attendance/{2}'>{2}</a> to update the attendance record.\").format(\n                frappe.bold(self.employee),\n                frappe.bold(self.attendance_date),\n                frappe.bold(duplicate),\n            )\n        )\n\n", "CodeBleu_score": 36.50834808290526}, {"code": "def validate_duplicate_record(self)\n\tduplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record for {employee} on {date} already exists. <a href='{link}'>Click here</a> to view the existing record.\"\n            ).format(\n                employee=frappe.bold(self.employee),\n                date=frappe.bold(self.attendance_date),\n                link=frappe.utils.get_link_to_form(\"Attendance\", duplicate),\n            )\n        )\n\n", "CodeBleu_score": 36.578134130551106}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t# Get the message details\n    message_details = self.get_message_details()\n    # Get the list of email addresses of users in the specified group\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n    # Send the email\n    send_mail(\n        recipients=emails,\n        subject=message_details.title,\n        template=\"daily_work_summary\",\n        context=message_details,\n        header=[\"Daily Work Summary\", \"green\"],\n    )\n    # Update the status of the summary to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n    # Set the email sent to the list of email addresses\n    self.db_set(\"email_sent_to\", \", \".join(emails))\n    # Set the sent time to the current time\n    self.db_set(\"sent_time\", frappe.utils.now())\n\n", "CodeBleu_score": 38.10511806550222}, {"code": "def send_summary(self)\n\tif self.status != \"Scheduled\":\n        return\n\n    # get message details\n    args = self.get_message_details()\n\n    # get email addresses of users in the specified group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # send email to all users in the group\n    frappe.sendmail(\n        recipients=emails,\n        subject=args.get(\"title\"),\n        template=\"daily_work_summary\",\n        args=args,\n        header=[\n            \"Daily Work Summary\",\n            \"blue\",\n            \"https://www.flaticon.com/svg/static/icons/svg/281/281769.svg\",\n        ],\n    )\n\n    # update status\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 64.46928365132094}, {"code": "def send_summary(self)\n\tif self.daily_work_summary_group:\n        # get message details\n        message_details = self.get_message_details()\n\n        # get email addresses of users in the specified group\n        emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n        # send email\n        if emails:\n            send_mail(\n                recipients=emails,\n                sender=frappe.session.user,\n                subject=message_details.get(\"title\"),\n                template=\"daily_work_summary\",\n                args=message_details,\n                header=[\n                    _(\"Subject\"),\n                    _(\"{0}\").format(message_details.get(\"title\")),\n                    _(\"Midnight\"),\n                ],\n            )\n\n        # update status\n        self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 58.640421621579385}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\tinterview = frappe.get_doc('Interview', self.name)\n    if frappe.db.exists('Interview', {'applicant': interview.applicant, 'interview_round': interview.interview_round, 'name': ['!=', self.name]}):\n        existing_interview = frappe.get_doc('Interview', {'applicant': interview.applicant, 'interview_round': interview.interview_round})\n        frappe.throw(_('Job applicant {0} has already been scheduled for interview in round {1}. <a href=\"#Form/Interview/{2}\">Click here to view the existing interview record.</a>').format(interview.applicant_name, interview.interview_round, existing_interview.name))\n", "CodeBleu_score": 40.53431323816618}, {"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant_id and self.job_applicant_id in [\n        interview.job_applicant_id for interview in self.interview_round.interviews\n    ]:\n        raise ValidationError(\n            _(\n                \"Job applicant %(job_applicant)s is already scheduled for this interview round. Please go to %(interview_link)s to edit the existing interview record.\",\n                job_applicant=self.job_applicant.name,\n                interview_link=reverse(\n                    \"jobs:interview_update\",\n                    kwargs={\"pk\": self.interview_round.id},\n                ),\n            )\n        )\n\n", "CodeBleu_score": 36.87776106850098}, {"code": "def validate_duplicate_interview(self)\n\tduplicate = self.get_duplicate_interview()\n    if duplicate:\n        self.add_comment(\"Duplicate Interview Record\")\n        self.add_comment(\"Job Applicant: {0}\".format(self.job_applicant))\n        self.add_comment(\"Interview Round: {0}\".format(self.interview_round))\n        self.add_comment(\"Interview Date: {0}\".format(self.interview_date))\n        self.add_comment(\"Interview Time: {0}\".format(self.interview_time))\n        self.add_comment(\"Interview Location: {0}\".format(self.interview_location))\n        self.add_comment(\"Interview Type: {0}\".format(self.interview_type))\n        self.add_comment(\"Interview Status: {0}\".format(self.interview_status))\n        self.add_comment(\"Interview Result: {0}\".format(self.interview_result))\n        self.add_comment(\"Interviewer: {0}\".format(self.interviewer))\n        self.add_comment(\"Interview Comments: {0}\".format(self.interview_comments))\n        self.add_comment(\"Existing Interview Record: {0}\".format(duplicate.name))\n        frappe.throw(\"Job Applicant {0} has already been scheduled for interview in {1}\".format(self.job_applicant, self.interview_round))\n\n", "CodeBleu_score": 23.032893236284625}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\tif len(self.skill_assessments) == 0:\n        self.average_rating = 0\n    else:\n        total = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating is not None:\n                total += assessment.rating\n        self.average_rating = total / len(self.skill_assessments)\n\n", "CodeBleu_score": 31.148105669560405}, {"code": "def calculate_average_rating(self)\n\taverage_rating = 0\n    number_of_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            average_rating += assessment.rating\n            number_of_assessments += 1\n    if number_of_assessments > 0:\n        average_rating = average_rating / number_of_assessments\n    else:\n        average_rating = 0\n    self.average_rating = average_rating\n\n", "CodeBleu_score": 24.472239544638825}, {"code": "def calculate_average_rating(self)\n\tassessments = self.get_skill_assessments()\n    total_rating = 0\n    num_assessments = 0\n    for assessment in assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 22.85644302203968}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t# If the input is a string, convert it to a dictionary\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n\n    # Create a new Interview document\n    interview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": doc.get(\"interview_round\"),\n        \"designation\": doc.get(\"designation\"),\n        \"interviewers\": doc.get(\"interviewers\")\n    })\n\n    # Save the Interview document\n    interview.insert()\n\n    # Return the created Interview document\n    return interview\n\n", "CodeBleu_score": 46.0920927949641}, {"code": "def create_interview(doc):\n\tinterview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": doc.interview_round,\n        \"designation\": doc.designation,\n        \"interviewers\": doc.interviewers,\n        \"interview_date\": doc.interview_date,\n        \"interview_time\": doc.interview_time,\n        \"interview_location\": doc.interview_location,\n        \"interview_venue\": doc.interview_venue,\n        \"interview_address\": doc.interview_address,\n        \"interview_contact\": doc.interview_contact,\n        \"interview_email\": doc.interview_email,\n        \"interview_details\": doc.interview_details,\n        \"interview_attachment\": doc.interview_attachment,\n        \"interview_status\": doc.interview_status,\n        \"interview_result\": doc.interview_result,\n        \"interview_feedback\": doc.interview_feedback,\n        \"interview_notes\": doc.interview_notes\n    })\n    interview.insert()\n    return interview\n", "CodeBleu_score": 27.558074770071418}, {"code": "def create_interview(doc):\n\tinterview = frappe.get_doc({\n        \"doctype\": \"Interview\",\n        \"interview_round\": doc.interview_round,\n        \"designation\": doc.designation\n    })\n    if doc.get(\"interviewers\"):\n        interview.interviewers = doc.interviewers\n    interview.insert()\n    return interview\n\n", "CodeBleu_score": 33.945280397034146}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\tquery = \"\"\"\n    SELECT\n        job_offer.name\n    FROM\n        `tabJob Offer` job_offer\n    WHERE\n        job_offer.designation = %(designation)s\n        AND job_offer.company = %(company)s\n        AND job_offer.posting_date BETWEEN %(from_date)s AND %(to_date)s\n        AND job_offer.docstatus = 1\n    \"\"\"\n    return frappe.db.sql(query, {\n        \"designation\": self.designation,\n        \"company\": self.company,\n        \"from_date\": from_date,\n        \"to_date\": to_date\n    })\n\n", "CodeBleu_score": 47.057218473883005}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offer_list = []\n    query = \"\"\"\n    SELECT DISTINCT job_offer_name\n    FROM job_offer\n    WHERE job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'\n    AND job_offer_name LIKE '%'||?||'%'", "CodeBleu_score": 15.274961181510829}, {"code": "def get_job_offer(self, from_date, to_date)\n\tfrom_date = datetime.datetime.strptime(from_date, '%Y-%m-%d')\n    to_date = datetime.datetime.strptime(to_date, '%Y-%m-%d')\n    query = \"\"\"\n            SELECT job_offer_name\n            FROM job_offer\n            WHERE company = %s\n            AND designation = %s\n            AND document_status = 1\n            AND job_offer_date BETWEEN %s AND %s\n            \"\"\"\n    return self.execute_query(query, (self.company, self.designation, from_date, to_date))\n\n", "CodeBleu_score": 41.954284952276964}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t# Get the total number of job offers\n    if not company and not department:\n        total_job_offers = frappe.db.count('Job Offer', {'docstatus': 1})\n    elif company and not department:\n        total_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'company': company})\n    elif department and not company:\n        total_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'department': department})\n    else:\n        total_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'company': company, 'department': department})\n\n    # Get the number of accepted job offers\n    if not company and not department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'offer_accepted': 'Yes'})\n    elif company and not department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'offer_accepted': 'Yes', 'company': company})\n    elif department and not company:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'offer_accepted': 'Yes', 'department': department})\n    else:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'offer_accepted': 'Yes', 'company': company, 'department': department})\n\n    # Calculate the offer acceptance rate\n    if total_job_offers == 0:\n        acceptance_rate = 0\n    else:\n        acceptance_rate = round(accepted_job_offers / total_job_offers * 100, 2)\n\n    # Return the acceptance rate as a percentage\n    return {\n        'value': acceptance_rate,\n        'fieldtype': 'Percent'\n    }\n\n", "CodeBleu_score": 28.638188234561934}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tfrom frappe.utils import cint, flt\n    from frappe import _\n    from frappe.model.document import get_children\n    from frappe.model.meta import get_field_precision\n\n    # Get total job offers\n    if company and department:\n        total_job_offers = frappe.db.count('Job Offer', {'company': company, 'department': department, 'docstatus': 1})\n    elif company:\n        total_job_offers = frappe.db.count('Job Offer', {'company': company, 'docstatus': 1})\n    elif department:\n        total_job_offers = frappe.db.count('Job Offer', {'department': department, 'docstatus': 1})\n    else:\n        total_job_offers = frappe.db.count('Job Offer', {'docstatus': 1})\n\n    # Get accepted job offers\n    if company and department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'company': company, 'department': department, 'docstatus': 1, 'accepted': 1})\n    elif company:\n        accepted_job_offers = frappe.db.count('Job Offer', {'company': company, 'docstatus': 1, 'accepted': 1})\n    elif department:\n        accepted_job_offers = frappe.db.count('Job Offer', {'department': department, 'docstatus': 1, 'accepted': 1})\n    else:\n        accepted_job_offers = frappe.db.count('Job Offer', {'docstatus': 1, 'accepted': 1})\n\n    # Calculate offer acceptance rate\n    offer_acceptance_rate = 0\n    if total_job_offers > 0:\n        offer_acceptance_rate = (accepted_job_offers / total_job_offers) * 100\n\n    # Return the offer acceptance rate\n    return {\n        'value': round(offer_acceptance_rate, 2),\n        'fieldtype': 'Percent',\n        'fieldname': 'offer_acceptance", "CodeBleu_score": 27.29981163862032}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tif company and department:\n        job_offers = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where company=%s and department=%s and docstatus=1\"\"\", (company, department))\n        accepted_job_offers = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where company=%s and department=%s and docstatus=1 and status='Accepted'\"\"\", (company, department))\n        if job_offers[0][0] == 0:\n            return 0\n        else:\n            return frappe.utils.cint(accepted_job_offers[0][0])/frappe.utils.cint(job_offers[0][0])*100, \"Percent\"\n    elif company:\n        job_offers = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where company=%s and docstatus=1\"\"\", (company))\n        accepted_job_offers = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where company=%s and docstatus=1 and status='Accepted'\"\"\", (company))\n        if job_offers[0][0] == 0:\n            return 0\n        else:\n            return frappe.utils.cint(accepted_job_offers[0][0])/frappe.utils.cint(job_offers[0][0])*100, \"Percent\"\n    elif department:\n        job_offers = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where department=%s and docstatus=1\"\"\", (department))\n        accepted_job_offers = frappe.db.sql(\"\"\"select count(*) from `tabJob Offer` where department=%s and docstatus=1 and status='Accepted'\"\"\", (department))\n        if job_offers[0][0] == 0:\n            return 0\n        else:\n            return frappe.utils.cint(accepted_job_offers[0][0])/frappe.utils.cint(job_offers[0][0])*100, \"Percent\"", "CodeBleu_score": 24.106396929490806}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId())\n\t\t\t\t.orElseThrow(() -> new BusinessException(Messages.companyStaffNotFound));\n\n\t\tfinal Result result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n\t\tif (result instanceof ErrorResult) {\n\t\t\treturn result;\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRepository.save(companyStaff);\n\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 47.035874767588126}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.notFound);\n\t\t}\n\n\t\tfinal Result result = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\n\t\treturn new SuccessResult();\n\t}", "CodeBleu_score": 46.79317463194014}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\t\t}\n\t\tfinal Result result = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult();\n\t}", "CodeBleu_score": 46.84583952618829}]}
