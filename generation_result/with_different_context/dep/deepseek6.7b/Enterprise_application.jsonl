{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = self._get_attachment_ids()\n    if not attachment_ids:\n        return self._get_no_attachment_response()\n    attachments = self._get_attachments(attachment_ids)\n    if not attachments:\n        return self._get_no_attachment_response()\n    zip_content = self._get_zip_content(attachments)\n    headers = self._get_zip_headers(zip_content, self._get_zip_filename())\n    return self.make_response(zip_content, headers=headers)\n\n\n\n", "CodeBleu_score": 28.462852202042605}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.httprequest.args.getlist('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    try:\n        attachment_ids = list(map(int, attachment_ids))\n    except ValueError:\n        return request.not_found()\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.not_found()\n    if not attachments.filtered(lambda a: a.mimetype == 'application/pdf'):\n        return request.not_found()\n    zip_data = io.BytesIO()\n    with zipfile.ZipFile(zip_data, mode='w', compression=zipfile.ZIP_DEFLATED) as zip_file:\n        for attachment in attachments:\n            filename = attachment.name\n            if not filename:\n                filename = 'attachment'\n            if filename.endswith('.pdf'):\n                filename = filename[:-4]\n            zip_file.writestr(filename + '.pdf', attachment.datas)\n    zip_data.seek(0)\n    headers = _get_zip_headers(zip_data.getvalue(), 'documents.zip')\n    return request.make_response(zip_data.getvalue(), headers=headers)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 37.93456618597583}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = self._get_attachment_ids()\n    self._check_access_rules(attachment_ids)\n    zip_content, zip_filename = self._build_zip_content(attachment_ids)\n    headers = self._get_zip_headers(zip_content, zip_filename)\n    return request.make_response(zip_content, headers=headers)\n\n", "CodeBleu_score": 15.454960188883893}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = [x.id for x in values['invoices'](0)]\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 36.45223618313969}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    values['invoices'] = values['invoices'](pager_offset=(page - 1) * self._items_per_page)\n    request.session['my_invoices_history'] = [x.id for x in values['invoices']]\n    return request.render(\"account.portal_my_invoices\", values)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 44.431209561881154}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    values['portal_my_invoices_history'] = self._get_portal_my_invoices_history()\n    response = request.render(\"account.portal_my_invoices\", values)\n    self._update_portal_my_invoices_history(values['invoices'])\n    return response\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 35.78623453854092}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    invoice = request.env['account.move'].browse(invoice_id)\n    if not invoice.exists():\n        raise NotFound()\n    if invoice.state == 'draft':\n        raise Forbidden()\n    if invoice.type == 'out_refund':\n        raise Forbidden()\n    if invoice.state == 'cancel':\n        raise Forbidden()\n    if not self._invoice_can_be_accessed(invoice, access_token):\n        raise Forbidden()\n    if report_type == 'html':\n        return request.render('account.portal_invoice_page', self._invoice_get_page_view_values(invoice, access_token, **kw))\n    if report_type == 'text':\n        return request.make_response(self._get_report_from_html(report_type, invoice, access_token, **kw))\n    if report_type == 'pdf':\n        if download:\n            return self._get_pdf_download(invoice, access_token, **kw)\n        else:\n            return self._get_pdf_view(invoice, access_token, **kw)\n    if report_type in ('xml', 'ubl'):\n        return self._get_pdf_download(invoice, access_token, **kw)\n    raise NotFound()\n\n", "CodeBleu_score": 30.041702470788444}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # Check access\n    invoice = self._document_check_access('account.move', invoice_id, access_token)\n    if not invoice:\n        return request.redirect('/my')\n    # Check if the invoice is posted\n    if invoice.state != 'posted':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a vendor bill\n    if invoice.move_type == 'in_invoice':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a customer invoice\n    if invoice.move_type == 'out_invoice':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a customer refund\n    if invoice.move_type == 'out_refund':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a vendor refund\n    if invoice.move_type == 'in_refund':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a customer payment\n    if invoice.move_type == 'out_payment':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a vendor payment\n    if invoice.move_type == 'in_payment':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a customer invoice\n    if invoice.move_type == 'out_invoice':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a customer refund\n    if invoice.move_type == 'out_refund':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a vendor refund\n    if invoice.move_type == 'in_refund':\n        return request.redirect('/my/invoices')\n    # Check if the invoice is a customer payment\n    if invoice.move_type == 'out_payment':\n        return request.redirect('/my/invoices')\n    # Check if", "CodeBleu_score": 23.865321540893714}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    # check access\n    invoice = self._invoice_get_page_view_values(invoice_id, access_token, **kw)\n    if not invoice:\n        return request.redirect('/my')\n    # prepare report\n    if report_type in ('html', 'qweb-html', 'text'):\n        report_file = self.env.ref('account.account_invoices').render_qweb_html(invoice_id)[0]\n        report_name = _('Invoice %s') % invoice['number']\n    elif report_type == 'pdf':\n        report_file = self.env.ref('account.account_invoices').render_qweb_pdf([invoice_id])[0]\n        report_name = _('Invoice %s') % invoice['number']\n    elif report_type == 'xml':\n        report_file = self.env.ref('account.account_invoices').render_qweb_xml([invoice_id])[0]\n        report_name = _('Invoice %s') % invoice['number']\n    elif report_type == 'xlsx':\n        report_file = self.env.ref('account.account_invoices').render_qweb_xlsx([invoice_id])[0]\n        report_name = _('Invoice %s') % invoice['number']\n    elif report_type == 'gift_card':\n        report_file = self.env.ref('account.account_invoices').render_qweb_gift_card([invoice_id])[0]\n        report_name = _('Invoice %s') % invoice['number']\n    else:\n        return request.not_found()\n    if download:\n        return request.make_response(report_file,\n                                     headers=[('Content-Type', 'application/octet-stream'),\n                                              ('Content-Disposition', 'attachment; filename=%s' % report_name)])\n    return request.make_response(report_file,\n                                 headers=[('Content-Type', 'application/pdf'),\n                                          ('Content-Length', len(report_file))])\n", "CodeBleu_score": 35.820461952953295}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = self._get_domain(company)\n    products = self.env['product.template'].search(domain)\n    if company and company.account_sale_tax_id:\n        products.update({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    if company and company.account_purchase_tax_id:\n        products.update({'supplier_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n    return products\n", "CodeBleu_score": 19.757609962012523}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if not company:\n        company = self.env.company\n    products = self.env['product.template'].search([('company_id', '=', company.id), ('type', '=', 'product')])\n    if company.account_sale_tax_id:\n        products.write({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    if company.account_purchase_tax_id:\n        products.write({'supplier_taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n    return products", "CodeBleu_score": 28.892815027742884}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    domain = [('company_id', '=', company.id)]\n    if company.account_sale_tax_id:\n        domain += [('taxes_id', 'in', company.account_sale_tax_id.ids)]\n    if company.account_purchase_tax_id:\n        domain += [('supplier_taxes_id', 'in', company.account_purchase_tax_id.ids)]\n    return self.env['product.template'].search(domain)\n\n\n", "CodeBleu_score": 20.990250816260787}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)])\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)])\n        if not account:\n            account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account", "CodeBleu_score": 45.23120439255334}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, raise_if_not_found=False)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id', '=', account_type.id),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n        ], limit=1)\n    return account", "CodeBleu_score": 41.201478507079514}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('code', '=', xml_id)])\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account", "CodeBleu_score": 45.29698072035357}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([('type', '=', 'current_year_earning')])\n    if len(accounts) > 1:\n        raise ValidationError('There should be only one account of type \"Current Year Earnings\" per company.')\n\n", "CodeBleu_score": 14.2330345228672}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_type = self.env.ref('account.data_account_type_current_year_earnings')\n    accounts = self.env['account.account'].search([('user_type_id', '=', account_type.id), ('company_id', '=', self.company_id.id)])\n    if len(accounts) > 1:\n        raise ValidationError(_('Only one account of type \"Current Year Earnings\" is allowed per company.'))\n\n", "CodeBleu_score": 32.95074917547174}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    account_type = self.env.ref('account.data_account_type_current_year_earnings')\n    accounts = self.env['account.account'].search([('user_type_id', '=', account_type.id)])\n    account_by_company = {}\n    for account in accounts:\n        if account.company_id.id not in account_by_company:\n            account_by_company[account.company_id.id] = []\n        account_by_company[account.company_id.id].append(account.id)\n    for company_id, account_ids in account_by_company.items():\n        if len(account_ids) > 1:\n            raise ValidationError(_('There can be only one account of type \"Current Year Earnings\" per company.'))", "CodeBleu_score": 32.22042495131752}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self.env.context.get('partner_id'):\n            partner = self.env['res.partner'].browse(self.env.context['partner_id'])\n            return partner.get_bank_accounts()\n        if self.env.context.get('search_default_my_accounts'):\n            return self.search([('id', 'in', self.env.user.partner_id.bank_ids.ids)], limit=limit, order=order)\n    return self.search([('name', operator, name)] + (domain or []), limit=limit, order=order)", "CodeBleu_score": 30.880175012633153}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self.env.context.get('partner_id'):\n            partner_id = self.env.context['partner_id']\n            return self.search([('partner_id', '=', partner_id)], limit=limit, order=order)\n        elif self.env.context.get('partner_ids'):\n            partner_ids = self.env.context['partner_ids']\n            return self.search([('partner_id', 'in', partner_ids)], limit=limit, order=order)\n        elif self.env.context.get('partner_name'):\n            partner_name = self.env.context['partner_name']\n            return self.search([('partner_id.name', operator, partner_name)], limit=limit, order=order)\n        else:\n            return self.search([], limit=limit, order=order)\n    else:\n        domain = [] if domain is None else domain\n        domain += [('name', operator, name)]\n        return self.search(domain, limit=limit, order=order)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 38.25794423968462}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('partner_id'):\n            partner = self.env['res.partner'].browse(self._context['partner_id'])\n            return partner.get_accounts(limit=limit, order=order)\n        elif self._context.get('partner_ids'):\n            partner = self.env['res.partner'].browse(self._context['partner_ids'][0])\n            return partner.get_accounts(limit=limit, order=order)\n        else:\n            return self.search([])\n    else:\n        if operator == 'ilike' and not self._context.get('lang'):\n            operator = '=ilike'\n        domain = expression.AND([domain or [], [('name', operator, name)]])\n        return self.search(domain, limit=limit, order=order)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 43.52635074053377}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    move_ids = []\n    if self.env.context.get('active_model') == 'account.move':\n        move_ids = self.env.context.get('active_ids', [])\n    elif self.env.context.get('active_id'):\n        move_ids = [self.env.context.get('active_id')]\n    if self.env.context.get('active_model') == 'sale.order':\n        move_ids = self.env['sale.order'].browse(move_ids).mapped('invoice_ids').ids\n    elif self.env.context.get('active_model') == 'account.analytic.account':\n        move_ids = self.env['account.analytic.account'].browse(move_ids).mapped('sale_line_ids').mapped('move_id').ids\n    elif self.env.context.get('active_model') == 'account.move.line':\n        move_ids = self.env['account.move.line'].browse(move_ids).mapped('move_id').ids\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'create': False}\n    return action", "CodeBleu_score": 37.3974218261758}, {"code": "def action_view_invoice(self)\n\t\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action[\"context\"] = {\"search_default_invoice_type\": 1, \"default_type\": \"in_invoice\"}\n    action[\"domain\"] = [\n        (\"id\", \"in\", self.env[\"account.move.line\"].search([\n            (\"sale_line_ids\", \"in\", self.sale_line_ids.ids),\n            (\"move_id.state\", \"=\", \"posted\"),\n            (\"move_id.invoice_type\", \"=\", \"out_invoice\"),\n            (\"move_id.id\", \"in\", self.env[\"account.move.line\"].search([\n                (\"sale_line_ids\", \"in\", self.sale_line_ids.ids),\n                (\"move_id.state\", \"=\", \"posted\"),\n                (\"move_id.invoice_type\", \"=\", \"out_invoice\"),\n                \"|\",\n                (\"analytic_account_id\", \"=\", False),\n                (\"analytic_account_id\", \"=\", self.analytic_account_id.id),\n            ]).mapped(\"move_id\").ids),\n        ]).mapped(\"move_id\").ids)]\n    return action", "CodeBleu_score": 37.446785677551105}, {"code": "def action_view_invoice(self)\n\t\n    action = self.env[\"ir.actions.act_window\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action[\"context\"] = {\"default_type\": \"out_invoice\"}\n    if self.env.context.get(\"active_model\") == \"sale.order\":\n        action[\"domain\"] = [\n            (\"sale_id\", \"=\", self.env.context.get(\"active_id\")),\n            (\"account_analytic_id\", \"=\", self.id),\n        ]\n    elif self.env.context.get(\"active_model\") == \"account.analytic.account\":\n        action[\"domain\"] = [\n            (\"account_analytic_id\", \"=\", self.env.context.get(\"active_id\")),\n            (\"sale_id\", \"=\", self.id),\n        ]\n    elif self.env.context.get(\"active_model\") == \"account.move\":\n        action[\"domain\"] = [\n            (\"account_analytic_id\", \"=\", self.id),\n            (\"move_id\", \"in\", self.env.context.get(\"active_ids\")),\n        ]\n    return action\n\n\n\n\n", "CodeBleu_score": 30.50719645963068}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    move_ids = self.env['account.move.line'].search([('vendor_bill_id', '=', self.id), ('move_id.move_type', 'in', ('in_invoice', 'in_refund'))]).mapped('move_id.id')\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'default_move_type': 'in_invoice', 'no_create': True}\n    return action\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 25.361768162442456}, {"code": "def action_view_vendor_bill(self)\n\t\n    move_lines = self.env['account.move.line'].search([('purchase_line_id', '=', self.id), ('move_id.move_type', 'in', ('in_invoice', 'in_refund'))])\n    move_ids = move_lines.mapped('move_id').ids\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', move_ids)]\n    action['context'] = {'default_move_type': 'in_invoice', 'default_type': 'in_invoice'}\n    return action\n\n\n\n", "CodeBleu_score": 26.78195651752679}, {"code": "def action_view_vendor_bill(self)\n\t\n    move_ids = self.env['account.move'].search([('purchase_id', '=', self.id)])\n    action = {\n        'name': _('Vendor Bills'),\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids.ids)],\n        'type': 'ir.actions.act_window',\n        'context': {'default_move_type': 'in_invoice', 'create': False},\n    }\n    return action\n\n\n", "CodeBleu_score": 19.15378306397247}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.54198523107293}, {"code": "def write(self, values)\n\t\n    if len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 93.54198523107293}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_create', False):\n        return self.env['account.bank.account'].browse()\n    bank_account = self.env['account.bank.account'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id)\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env['account.bank.account'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id\n        })\n    return bank_account", "CodeBleu_score": 53.57540942291757}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 56.59637353362229}, {"code": "def _find_or_create_bank_account(self)\n\t\n    bank_account = self.env['account.bank.account']\n    if self.env['ir.config_parameter'].sudo().get_param('account.skip_bank_account_creation', False):\n        return bank_account\n    return bank_account.search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ], limit=1) or bank_account.create({\n        'acc_number': self.acc_number,\n        'partner_id': self.partner_id.id,\n        'company_id': self.company_id.id,\n    })\n\n", "CodeBleu_score": 30.182997616385947}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency.is_zero(transaction_amount):\n        return {}\n    if currency == transaction_currency:\n        # The transaction amount is in the same currency as the company, we can use it directly.\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    if currency == company_currency:\n        # The transaction amount is in the same currency as the company, we can use it directly.\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    if currency == journal_currency:\n        # The transaction amount is in the same currency as the journal, we can use it directly.\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    if transaction_currency.is_zero(transaction_amount):\n        return {}\n    if company_currency.is_zero(company_amount):\n        return {}\n    if journal_currency.is_zero(journal_amount):\n        return {}\n    # The transaction amount is in a different currency than the company, we need to compute it.\n    if currency.is_zero(company_amount):\n        return {}\n    if currency.is_zero(journal_amount):\n        return {}\n    # The company amount is in a different currency than the transaction, we", "CodeBleu_score": 26.291261802406236}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if currency.is_zero(amount_currency):\n        return {}\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency.is_zero(transaction_amount):\n        return {}\n    if currency.is_zero(company_amount):\n        return {}\n    if currency.is_zero(journal_amount):\n        return {}\n    if currency.is_zero(balance):\n        return {}\n    if currency == transaction_currency:\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    if transaction_currency.is_zero(transaction_amount):\n        return {}\n    if journal_currency.is_zero(journal_amount):\n        return {}\n    if company_currency.is_zero(company_amount):\n        return {}\n    if balance < 0:\n        transaction_amount = -transaction_amount\n        journal_amount = -journal_amount\n        company_amount = -company_amount\n        balance = -balance\n    if currency.is_zero(transaction_amount):\n        return {}\n    if currency.is_zero(journal_amount):\n        return {}\n    if currency.is_zero(company_amount):\n        return {}\n    if currency.is_zero(balance):\n        return {}\n    if currency == company_currency:\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    if currency == journal_currency:\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_", "CodeBleu_score": 27.315457232829388}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # Ensure we are in a single record context.\n    self = self.with_context(force_company=self.company_id.id)\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency.is_zero(transaction_amount):\n        return {}\n    if currency.is_zero(journal_amount):\n        return {}\n    if currency.is_zero(company_amount):\n        return {}\n    if currency == transaction_currency:\n        # If the transaction is in the same currency as the journal entry, we can use the journal amount and company amount.\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    if currency == journal_currency:\n        # If the transaction is in the same currency as the journal entry, we can use the journal amount and company amount.\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    if currency == company_currency:\n        # If the transaction is in the same currency as the company, we can use the journal amount and company amount.\n        return {\n            'transaction_amount': transaction_amount,\n            'transaction_currency': transaction_currency,\n            'journal_amount': journal_amount,\n            'journal_currency': journal_currency,\n            'company_amount': company_amount,\n            'company_currency': company_currency,\n        }\n    # If the transaction is in a different currency than the journal entry and the company, we need to compute the transaction amount and company amount using the exchange rates.\n    if currency.is_zero(amount_currency", "CodeBleu_score": 28.515032621288718}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = [Command.create({\n                'payment_method_id': method.id,\n                'sequence': method.sequence,\n                'is_custom': True,\n            }) for method in journal._default_outbound_payment_methods()]\n\n", "CodeBleu_score": 43.86867614132887}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ('bank', 'cash'):\n            outbound_payment_methods = self._default_outbound_payment_methods()\n            journal.outbound_payment_method_line_ids = [(0, 0, {\n                'name': method.name,\n                'code': method.code,\n                'payment_type': method.payment_type,\n                'payment_method_id': method.id,\n            }) for method in outbound_payment_methods]\n\n", "CodeBleu_score": 49.20586563587926}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids = [(5, 0, 0)]\n        if journal.type in ['bank', 'cash']:\n            for payment_method in journal._default_outbound_payment_methods():\n                journal.outbound_payment_method_line_ids = [(0, 0, {\n                    'payment_method_id': payment_method.id,\n                })]\n\n", "CodeBleu_score": 39.06843894316706}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    today = fields.Date.context_today(self)\n    for move in self:\n        if move.invoice_date:\n            if move.move_type in move.get_sale_types(include_receipts=True):\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            else:\n                move.date = move.invoice_date\n        elif not move.date:\n            move.date = today\n        if move.date != today:\n            move.date = today\n            move.with_delay()._recompute_fields()\n\n", "CodeBleu_score": 36.91935427652652}, {"code": "def _compute_date(self)\n\t\n    if self.move_type in self.get_sale_types(include_receipts=True) and not self.invoice_date:\n        self.date = fields.Date.context_today(self)\n    elif self.invoice_date:\n        if self.move_type not in self.get_sale_types(include_receipts=True):\n            date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n            if date != self.date:\n                self.date = date\n                self.env.add_to_compute(self._fields_to_recompute())\n\n", "CodeBleu_score": 30.03606082021787}, {"code": "def _compute_date(self)\n\t\n    if self.move_type in self.get_sale_types(include_receipts=True):\n        if self.invoice_date:\n            if not self.date:\n                self.date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n                if self.date != fields.Date.context_today(self):\n                    self.date = self.date.replace(hour=0, minute=0, second=0, microsecond=0)\n                    self.env.add_to_compute(self._fields_to_recompute())\n    else:\n        if not self.date:\n            self.date = fields.Date.context_today(self)\n", "CodeBleu_score": 34.61557912568188}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n\n\n", "CodeBleu_score": 48.86163013138019}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 48.86163013138019}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.is_purchase_document(include_receipts=True):\n            move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 48.86163013138019}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    grouped_taxes = defaultdict(lambda: self.env['account.tax.group'])\n    for tax in self:\n        grouped_taxes[(tax.company_id, tax.country_id)] |= tax.tax_group_id\n    for group, taxes in grouped_taxes.items():\n        company, country = group\n        tax_group = self.env['account.tax.group'].search([\n            ('company_id', '=', company.id),\n            ('country_id', '=', country.id)\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('company_id', '=', company.id),\n                ('country_id', '=', False)\n            ], limit=1)\n        for tax in taxes:\n            tax.tax_group_id = tax_group", "CodeBleu_score": 37.956886602855526}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        country_id = tax.country_id\n        company_id = tax.company_id\n        tax_group_id = False\n        tax_group_ids = self.env['account.tax.group'].search([('company_id', '=', company_id.id)])\n        if country_id:\n            tax_group_ids = tax_group_ids.filtered(lambda tg: tg.country_id == country_id)\n        if not tax_group_ids:\n            tax_group_ids = self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', company_id.id)])\n        if tax_group_ids:\n            tax_group_id = tax_group_ids[0].id\n        tax.tax_group_id = tax_group_id", "CodeBleu_score": 31.803918438364846}, {"code": " def _compute_tax_group_id(self)\n\t\n    grouped_taxes = {}\n    for tax in self:\n        key = (tax.country_id.id or 0, tax.company_id.id or 0)\n        grouped_taxes.setdefault(key, self.env['account.tax.group'])\n        grouped_taxes[key] |= tax.tax_group_id\n    for taxes in grouped_taxes.values():\n        taxes.ensure_one()\n        for tax in taxes:\n            tax.tax_group_id = taxes\n    return True", "CodeBleu_score": 19.56284006433936}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.get(url)\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        module_data = f.read()\n\n    # Upload the module file to the server\n    response = self.post(\n        'base_import_module/login_upload',\n        data=data,\n        files={'file': ('module.py', module_data, 'application/octet-stream')}\n    )\n\n    # Check if the server has the required module installed or is outdated\n    if response.status_code == 404:\n        raise Exception('Module not found or outdated')\n\n    # Return the server's response text\n    return response.text\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 47.971882188359544}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session by accessing the login URL\n    response = self.session.get(url + '/base_import_module/login_upload')\n\n    # Prepare the POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n\n    # Read the module file\n    with open(module_file, 'rb') as f:\n        data['file'] = f.read()\n\n    # Upload the module file to the server\n    response = self.session.post(url + '/base_import_module/login_upload', data=data)\n\n    # Check if the server does not have the required module installed or is outdated\n    if 'error' in response.text:\n        raise Exception(response.text)\n\n    # Return the server's response text\n    return response.text", "CodeBleu_score": 42.60034252374969}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.get(url)\n    self.post(url, data={'login': login, 'password': password, 'db': db})\n\n    # Prepare the POST request data\n    data = {\n        'file': (module_file, open(module_file, 'rb')),\n        'db': db,\n        'force': force\n    }\n\n    # Upload the module file\n    response = self.post('base_import_module/login_upload', files=data)\n\n    # Check if the server has the required module installed or is outdated\n    if 'Module not installed' in response.text or 'Outdated module' in response.text:\n        raise Exception(response.text)\n\n    # Return the server's response text\n    return response.text", "CodeBleu_score": 35.23678193475915}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    import odoo\n    import os\n    from odoo.tools.translate import TranslationImporter\n    import logging\n    import argparse\n    import configparser\n    import odoo.modules.registry\n    import odoo.tools\n    import odoo.modules.module\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config\n    import odoo.modules.module\n    import odoo.modules.registry\n    import odoo.tools.config", "CodeBleu_score": 8.319111316009419}, {"code": "def import_translation()\n\t\n    db_name = config.get('db_name')\n    registry = Registry.new(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, config)\n        importer.load_translations()\n        importer.save_translations(overwrite=config.get('overwrite'))\n\n", "CodeBleu_score": 31.18614419866904}, {"code": "def import_translation()\n\t\n    import os\n    import logging\n    from odoo import api, SUPERUSER_ID\n    from odoo.tools.translate import TranslationImporter\n    from odoo.tools.config import config\n    from odoo.modules.module import get_resource_from_path\n    _logger = logging.getLogger(__name__)\n\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite')\n    registry = api.registry(db_name)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, db_name, overwrite=overwrite)\n        importer.import_()\n        _logger.info(\"Translations imported successfully\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 42.84405038146425}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    child = Node(name, info)\n    child.depth = self.depth + 1\n    if self.parent:\n        child.parent = self.parent\n        child.parent_name = self.parent.name\n        child.parent_info = self.parent.info\n    else:\n        child.parent = self\n        child.parent_name = self.name\n        child.parent_info = self.info\n    if child not in self.children:\n        self.children.append(child)\n        self.children.sort(key=lambda x: x.name)\n    return child\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 40.517049492173186}, {"code": "def add_child(self, name, info)\n\t\n    if name not in [child.name for child in self.children]:\n        new_child = Node(name, info, self.depth + 1, self.parent)\n        self.children.append(new_child)\n        if self.depth == 0:\n            new_child.is_root = True\n        if self.parent:\n            new_child.is_child = True\n            new_child.is_sibling = True\n            new_child.is_descendant = True\n            new_child.is_ancestor = True\n            new_child.is_leaf = False\n            new_child.is_root = False\n            new_child.is_child = False\n            new_child.is_sibling = False\n            new_child.is_descendant = False\n            new_child.is_ancestor = False\n            new_child.is_leaf = False\n            new_child.is_root = False\n            new_child.is_child = False\n            new_child.is_sibling = False\n            new_child.is_descendant = False\n            new_child.is_ancestor = False\n            new_child.is_leaf = False\n            new_child.is_root = False\n            new_child.is_child = False\n            new_child.is_sibling = False\n            new_child.is_descendant = False\n            new_child.is_ancestor = False\n            new_child.is_leaf = False\n            new_child.is_root = False\n            new_child.is_child = False\n            new_child.is_sibling = False\n            new_child.is_descendant = False\n            new_child.is_ancestor = False\n            new_child.is_leaf = False\n            new_child.is_root = False\n            new_child.is_child = False\n            new_child.is_sibling = False\n            new_child.is_descendant = False\n            new_child.is_ancestor = False\n            new_child.is_leaf = False\n            new_child.is_root = False\n            new_child.is_", "CodeBleu_score": 13.745884976572908}, {"code": "def add_child(self, name, info)\n\t\n    if name in self.children:\n        return self.children[name]\n    else:\n        new_node = Node(name, info)\n        new_node.parent = self\n        new_node.depth = self.depth + 1\n        if self.children:\n            new_node.children = self.children\n            new_node.depth = self.depth + 1\n        self.children[name] = new_node\n        self.children = OrderedDict(sorted(self.children.items(), key=lambda t: t[0]))\n        return new_node\n\n", "CodeBleu_score": 36.134150221823056}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n    root_type = account.get_root_type()\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i in range(len(gl_entries)):\n            gl_entries[i][\"balance\"] = -gl_entries[i][\"balance\"]\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(len(gl_entries)):\n            result[\"balances\"][gl_entries[i][\"date_index\"]] += gl_entries[i][\n                \"balance\"\n            ]\n    return result\n\n", "CodeBleu_score": 24.872836090678348}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n\n    root_type = account[\"root_type\"]\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[\"balances\"] = [-b for b in result[\"balances\"]]\n\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for entry in gl_entries:\n            if entry[\"account_id\"] == account[\"id\"]:\n                date_index = dates.index(entry[\"date\"])\n                result[\"balances\"][date_index] += entry[\"amount\"]\n\n    return result\n\n", "CodeBleu_score": 27.23226921847324}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n    root_type = account[\"root_type\"]\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i, date in enumerate(dates):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for entry in gl_entries:\n            if entry[\"account_id\"] == account[\"id\"]:\n                date_index = dates.index(entry[\"date\"])\n                result[\"balances\"][date_index] += entry[\"amount\"]\n    return result\n\n\n\n", "CodeBleu_score": 28.019652515678267}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type == \"Receivable\" or self.account_type == \"Payable\":\n        if self.account_type != frappe.db.get_value(\"Account\", self.name, \"account_type\"):\n            if frappe.db.exists(\"General Ledger Entry\", {\"account\": self.name, \"is_cancelled\": 0}):\n                frappe.msgprint(\n                    _(\n                        \"The account type has been changed to a non-receivable/payable type. Please ensure that the account is not used in any financial transactions before changing the account type.\"\n                    ),\n                    title=_(\"Warning\"),\n                    indicator=\"orange\",\n                )\n                frappe.get_doc(\n                    \"Account\", self.name\n                ).add_comment(\n                    \"Comment\",\n                    _(\n                        \"The account type has been changed to a non-receivable/payable type. Please ensure that the account is not used in any financial transactions before changing the account type.\"\n                    ),\n                )\n\n\n\n", "CodeBleu_score": 25.506875845630294}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in (\"Receivable\", \"Payable\") and self.get_doc_before_save():\n        doc_before_save = self.get_doc_before_save()\n        if doc_before_save.account_type not in (\"Receivable\", \"Payable\"):\n            self.add_comment(\"Account Type Change\", \"Account type has been changed from Receivable or Payable to a non-receivable/payable type. This may result in incorrect balances in the Accounts report.\")\n            self.add_comment(\"Account Type Change\", \"Please review the Accounts report and ensure that the balances are correct.\")\n            self.add_comment(\"Account Type Change\", \"If necessary, adjust the account type or general ledger entries to reflect the correct accounting information.\")\n            self.add_comment(\"Account Type Change\", \"If the account type change is intentional, please add a comment explaining the reason for the change.\")\n\n\n\n", "CodeBleu_score": 26.62137817710809}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    account = self.env['account.account'].browse(self._context.get('active_id'))\n    if account.user_type_id.type in ('receivable', 'payable') and account.user_type_id.id != self.user_type_id.id:\n        if account.general_ledger_entries:\n            warning = {\n                'title': _('Account Type Change'),\n                'message': _('Changing the account type to a non-receivable/payable type will affect the \"Accounts\" report. Are you sure you want to proceed?'),\n            }\n            return {'warning': warning}\n        else:\n            account.comment_ids = [(0, 0, {'name': _('Account Type Change'), 'comment': _('The account type has been changed to a non-receivable/payable type.')})]\n            return {'type': 'ir.actions.act_window_close'}", "CodeBleu_score": 32.35893500355276}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = self.company_id.currency_id\n    if self.currency and self.currency != self.company_id.currency_id:\n        if self.currency != self.company_id.currency_id:\n            raise ValidationError(_('The Company (%s) Currency must be the same as the Account Currency (%s)') % (self.company_id.currency_id.name, self.currency.name))\n        if self.currency != self.company_id.currency_id:\n            raise ValidationError(_('The Company (%s) Currency must be the same as the Account Currency (%s)') % (self.company_id.currency_id.name, self.currency.name))\n        if self.currency != self.company_id.currency_id:\n            raise ValidationError(_('The Company (%s) Currency must be the same as the Account Currency (%s)') % (self.company_id.currency_id.name, self.currency.name))\n        if self.currency != self.company_id.currency_id:\n            raise ValidationError(_('The Company (%s) Currency must be the same as the Account Currency (%s)') % (self.company_id.currency_id.name, self.currency.name))\n        if self.currency != self.company_id.currency_id:\n            raise ValidationError(_('The Company (%s) Currency must be the same as the Account Currency (%s)') % (self.company_id.currency_id.name, self.currency.name))\n        if self.currency != self.company_id.currency_id:\n            raise ValidationError(_('The Company (%s) Currency must be the same as the Account Currency (%s)') % (self.company_id.currency_id.name, self.currency.name))\n        if self.currency != self.company_id.currency_id:\n            raise ValidationError(_('The Company (%s) Currency must be the same as the Account Currency (%s)') % (self.company_id.currency_id", "CodeBleu_score": 21.239662521461177}, {"code": "def validate_account_currency(self)\n\t\n    if not self.currency:\n        self.currency = self.company_id.currency_id\n    if self.currency != self.company_id.currency_id:\n        self.currency_explicitly_specified = True\n    if self.currency != self.company_id.currency_id and self.currency != self.currency_id:\n        raise ValidationError(_(\"The company's default currency (%s) and the account's currency (%s) must be the same.\") % (self.company_id.currency_id.name, self.currency.name))\n    if self.currency != self.company_id.currency_id and self.currency != self.currency_id:\n        raise ValidationError(_(\"The company's default currency (%s) and the account's currency (%s) must be the same.\") % (self.company_id.currency_id.name, self.currency.name))\n    if self.currency != self.company_id.currency_id and self.currency != self.currency_id:\n        raise ValidationError(_(\"The company's default currency (%s) and the account's currency (%s) must be the same.\") % (self.company_id.currency_id.name, self.currency.name))\n    if self.currency != self.company_id.currency_id and self.currency != self.currency_id:\n        raise ValidationError(_(\"The company's default currency (%s) and the account's currency (%s) must be the same.\") % (self.company_id.currency_id.name, self.currency.name))\n    if self.currency != self.company_id.currency_id and self.currency != self.currency_id:\n        raise ValidationError(_(\"The company's default currency (%s) and the account's currency (%s) must be the same.\") % (self.company_id.currency_id.name, self.currency.name))\n    if self.currency != self.company_id.currency_id and self.currency != self.currency_id:\n        raise ValidationError(_(\"The company's default currency (%s)", "CodeBleu_score": 24.806795740018973}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency == '':\n        self.currency = self.company_currency\n        self.explicit_currency = True\n    elif self.currency != self.company_currency:\n        if self.get_ledger_entries():\n            for entry in self.get_ledger_entries():\n                if entry.currency != self.currency:\n                    frappe.throw(_(\"Currency for Account {0} cannot be changed to {1} as it has ledger entries in {2}\").format(self.name, self.currency, entry.currency))\n        else:\n            frappe.throw(_(\"Currency for Account {0} cannot be changed to {1} as it has no ledger entries\").format(self.name, self.currency))\n\n\n", "CodeBleu_score": 28.602047182796568}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = key_values\n        aggregated_entries[key][\"debit\"] += entry.get(\"debit\")\n        aggregated_entries[key][\"credit\"] += entry.get(\"credit\")\n        aggregated_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n        aggregated_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n\n    return aggregated_entries\n\n", "CodeBleu_score": 47.40987936896546}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"company\": cstr(entry.get(\"company\")),\n                \"account\": cstr(entry.get(\"account\")),\n                \"account_currency\": cstr(entry.get(\"account_currency\")),\n                \"cost_center\": cstr(entry.get(\"cost_center\")),\n                \"project\": cstr(entry.get(\"project\")),\n                \"finance_book\": cstr(entry.get(\"finance_book\")),\n                \"is_period_closing_voucher_entry\": cint(entry.get(\"is_period_closing_voucher_entry\")),\n                \"debit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit\": 0,\n                \"credit_in_account_currency\": 0,\n                \"accounting_dimensions\": key_values,\n            }\n        aggregated_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        aggregated_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        aggregated_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        aggregated_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return aggregated_entries\n\n", "CodeBleu_score": 42.43763856934428}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry.get(\"account\"),\n                \"account_currency\": entry.get(\"account_currency\"),\n                \"cost_center\": entry.get(\"cost_center\"),\n                \"project\": entry.get(\"project\"),\n                \"finance_book\": entry.get(\"finance_book\"),\n                \"is_period_closing_voucher_entry\": entry.get(\"is_period_closing_voucher_entry\"),\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n            }\n            for dimension in accounting_dimensions:\n                merged_entries[key][dimension] = entry.get(dimension)\n\n        merged_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += flt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += flt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries\n\n", "CodeBleu_score": 47.009571177279305}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    supplier_id = self.env.context.get('default_partner_id')\n    if supplier_id:\n        supplier = self.env['res.partner'].browse(supplier_id)\n        if supplier.blocked_state == 'blocked' and supplier.blocked_type == 'supplier':\n            if supplier.blocked_release_date and supplier.blocked_release_date < fields.Date.today():\n                raise UserError(_('The supplier is still blocked, you can not proceed with this transaction.'))\n            else:\n                raise UserError(_('The supplier is still blocked, you can not proceed with this transaction.'))\n        elif supplier.blocked_state == 'blocked' and supplier.blocked_type == 'buying':\n            if supplier.blocked_release_date and supplier.blocked_release_date < fields.Date.today():\n                raise UserError(_('The supplier is still blocked, you can not proceed with this transaction.'))\n            else:\n                raise UserError(_('The supplier is still blocked, you can not proceed with this transaction.'))\n\n", "CodeBleu_score": 24.896422418857906}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.type == 'supplier_payment':\n        supplier = self.supplier\n    elif self.type == 'buying_invoice':\n        supplier = self.buying_invoice_supplier\n    else:\n        return\n\n    if supplier.hold_type == 'blocked' and supplier.hold_type == self.type:\n        if supplier.hold_date and supplier.hold_date > self.date:\n            raise UserError(_('Supplier is blocked and cannot be paid before %s') % supplier.hold_date)\n        else:\n            raise UserError(_('Supplier is blocked and cannot be paid'))\n\n", "CodeBleu_score": 23.276238808455425}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.type in ['payment', 'buying_invoice']:\n        supplier = self.get_supplier()\n        if supplier.blocked and supplier.block_type == self.type:\n            if supplier.block_date < self.date:\n                raise UserError(_('Supplier %s is blocked.') % supplier.name)\n            else:\n                raise UserError(_('Supplier %s is blocked until %s.') % (\n                    supplier.name, supplier.block_date))\n\n", "CodeBleu_score": 16.570802123016502}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = self.get_repost_doctypes()\n    if not repost_doctypes:\n        return\n    voucher_type = self.voucher_type\n    voucher_no = self.voucher_no\n    if not voucher_type or not voucher_no:\n        return\n    for doctype in repost_doctypes:\n        rows = frappe.db.get_all(doctype, filters={\"voucher_type\": voucher_type, \"voucher_no\": voucher_no}, fields=[\"name\", \"parent\"])\n        if not rows:\n            continue\n        parents = {}\n        for row in rows:\n            if row.parent not in parents:\n                parents[row.parent] = []\n            parents[row.parent].append(row.name)\n        for parent, children in parents.items():\n            parent_doc = frappe.get_doc(doctype, parent)\n            if \"repost_vouchers\" in parent_doc:\n                parent_doc.repost_vouchers = [d for d in parent_doc.repost_vouchers if d.voucher_type != voucher_type or d.voucher_no != voucher_no]\n            if \"vouchers\" in parent_doc:\n                parent_doc.vouchers = [d for d in parent_doc.vouchers if d.voucher_type != voucher_type or d.voucher_no != voucher_no]\n            parent_doc.ignore_links = True\n            parent_doc.ignore_validate = True\n            parent_doc.save()\n\n\n\n\n", "CodeBleu_score": 29.513970234577847}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = frappe.get_all(\"Repost Doctypes\", filters={\"parent\": self.doctype})\n    repost_doctypes = [d.doctype for d in repost_doctypes]\n    if not repost_doctypes:\n        return\n\n    parent_map = {}\n    for doctype in repost_doctypes:\n        rows = frappe.get_all(\n            \"Repost Vouchers\",\n            fields=[\"parent\", \"parenttype\", \"voucher_type\", \"voucher_no\"],\n            filters={\n                \"parenttype\": \"Sales Invoice\",\n                \"voucher_type\": self.doctype,\n                \"voucher_no\": self.name,\n            },\n        )\n        for row in rows:\n            parent_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(\n                row\n            )\n\n    for parenttype, parents in parent_map.items():\n        for parent, rows in parents.items():\n            parent_doc = frappe.get_doc(parenttype, parent)\n            for row in rows:\n                if row.voucher_type == \"Sales Invoice\":\n                    parent_doc.vouchers = [\n                        v\n                        for v in parent_doc.vouchers\n                        if v.voucher_no != self.name\n                    ]\n                else:\n                    parent_doc.repost_vouchers = [\n                        v\n                        for v in parent_doc.repost_vouchers\n                        if v.voucher_no != self.name\n                    ]\n            parent_doc.ignore_permissions = True\n            parent_doc.ignore_validate = True\n            parent_doc.ignore_links = True\n            parent_doc.save()\n\n\n\n\n", "CodeBleu_score": 25.61000213802717}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Payment Request\",\n        \"Sales Order\",\n        \"Purchase Order\",\n        \"Delivery Note\",\n        \"Sales Invoice Payment\",\n        \"Purchase Invoice Payment\",\n        \"Journal Entry Payment\",\n        \"Payment Entry Payment\",\n        \"Payment Request Payment\",\n        \"Sales Order Payment\",\n        \"Purchase Order Payment\",\n        \"Delivery Note Payment\",\n        \"Sales Invoice Payment Return\",\n        \"Purchase Invoice Payment Return\",\n        \"Journal Entry Payment Return\",\n        \"Payment Entry Payment Return\",\n        \"Payment Request Payment Return\",\n        \"Sales Order Payment Return\",\n        \"Purchase Order Payment Return\",\n        \"Delivery Note Payment Return\",\n    ]\n    for repost_doctype in repost_doctypes:\n        if self.docstatus == 1:\n            rows = frappe.db.sql(\n                f\"\"\"\n                SELECT parenttype, parent, parentfield, voucher_type, voucher_no\n                FROM `tab{repost_doctype}`\n                WHERE voucher_type = %s AND voucher_no = %s\n            \"\"\",\n                (self.voucher_type, self.voucher_no),\n                as_dict=1,\n            )\n            if rows:\n                rows_by_parent = {}\n                for row in rows:\n                    if row.parent not in rows_by_parent:\n                        rows_by_parent[row.parent] = []\n                    rows_by_parent[row.parent].append(row)\n                for parent, rows in rows_by_parent.items():\n                    parent_doc = frappe.get_doc(row.parenttype, row.parent)\n                    if row.parentfield == \"repost_vouchers\":\n                        parent_doc.repost_vouchers = [\n                            d\n                            for d in parent_doc.repost_vouchers\n", "CodeBleu_score": 19.988318784229413}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"count\": 500},\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n        response = self.client.Transactions.get(self.access_token, query_params)\n        transactions = response[\"transactions\"]\n        total_transactions = response[\"total_transactions\"]\n        while len(transactions) < total_transactions:\n            response = self.client.Transactions.get(\n                self.access_token,\n                query_params,\n                {\"offset\": len(transactions)},\n            )\n            transactions.extend(response[\"transactions\"])\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            raise e\n        elif e.code == \"INVALID_CREDENTIALS\":\n            raise e\n        elif e.code == \"INVALID_REQUEST\":\n            raise e\n        elif e.code == \"INVALID_INPUT\":\n            raise e\n        elif e.code == \"RATE_LIMIT_EXCEEDED\":\n            raise e\n        elif e.code == \"API_ERROR\":\n            raise e\n        elif e.code == \"API_CONNECTIVITY_ERROR\":\n            raise e\n        elif e.code == \"API_RATE_LIMIT_ERROR\":\n            raise e\n        elif e.code == \"API_RATE_LIMIT_EXCEEDED\":\n            raise e\n        elif e.code == \"API_INVALID_CREDENTIALS\":\n            raise e\n        elif e.code == \"API_INVALID_REQUEST\":\n            raise e\n        elif e.code == \"API_INVALID_INPUT\":\n            raise e\n        elif e.code == \"API_INVALID_OPTION\":\n            raise e\n        elif e.code == \"API_INVALID_RESOURCE\":\n            raise e\n        elif e.code == \"API_INVALID_STATE\":\n            raise e\n       ", "CodeBleu_score": 40.62456099447257}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\"count\": 500},\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n\n    try:\n        response = self.client.Transactions.get(self.access_token, query_params)\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n        elif e.code == \"ITEM_ERROR\":\n            pass\n        elif e.code == \"ITEM_NOT_FOUND\":\n            pass\n        elif e.code == \"INVALID_REQUEST\":\n            pass\n        elif e.code == \"INVALID_ACCESS_TOKEN\":\n            pass\n        elif e.code == \"INVALID_CREDENTIALS\":\n            pass\n        elif e.code == \"INVALID_COUNTRY_CODE\":\n            pass\n        elif e.code == \"INVALID_PRODUCT_TOKEN\":\n            pass\n        elif e.code == \"INVALID_INSTITUTION_ID\":\n            pass\n        elif e.code == \"INSTITUTION_NOT_SUPPORTED\":\n            pass\n        elif e.code == \"INVALID_INPUT\":\n            pass\n        elif e.code == \"INVALID_TRANSACTION_ID\":\n            pass\n        elif e.code == \"INVALID_PRODUCT_CODE\":\n            pass\n        elif e.code == \"INVALID_PRODUCT_CONFIGURATION\":\n            pass\n        elif e.code == \"INVALID_PRODUCT_STATE\":\n            pass\n        elif e.code == \"INVALID_PRODUCT_ACCESS\":\n            pass\n        elif e.code == \"INVALID_PRODUCT_PERMISSION\":\n            pass\n        elif e.code == \"INVALID_PRODUCT_STATE_TRANSITION\":\n            pass\n        elif e.code == \"INVALID_PRODUCT_STATE_TRANSITION_EXPIRED\":\n            pass\n        elif e.code == \"IN", "CodeBleu_score": 23.135327221331554}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n\n    try:\n        query = {\n            \"client_id\": self.client_id,\n            \"secret\": self.secret,\n            \"access_token\": self.access_token,\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"count\": 500},\n        }\n        if account_id:\n            query[\"account_ids\"] = [account_id]\n\n        transactions = []\n        response = self.client.Transactions.get(**query)\n        transactions.extend(response.get(\"transactions\"))\n        while response.get(\"has_more\"):\n            query[\"offset\"] = len(transactions)\n            response = self.client.Transactions.get(**query)\n            transactions.extend(response.get(\"transactions\"))\n\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            pass\n        elif e.code == \"ITEM_ERROR\":\n            pass\n        elif e.code == \"INVALID_CREDENTIAL\":\n            pass\n        elif e.code == \"INVALID_REQUEST\":\n            pass\n        elif e.code == \"INSTITUTION_ERROR\":\n            pass\n        elif e.code == \"API_ERROR\":\n            pass\n        elif e.code == \"RATE_LIMIT_EXCEEDED\":\n            pass\n        elif e.code == \"INVALID_INPUT\":\n            pass\n        elif e.code == \"UNKNOWN_ERROR\":\n            pass\n        elif e.code == \"TRANSACTIONS_RANGE_ERROR\":\n            pass\n        elif e.code == \"PRODUCT_NOT_READY\":\n            pass\n        elif e.code == \"PRODUCT_NOT_SUPPORTED\":\n            pass\n        elif e.code == \"PRODUCT_NOT_AVAILABLE\":\n            pass\n        elif e.", "CodeBleu_score": 39.06900666855647}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        bank_name = response[\"institution\"][\"name\"]\n        bank_id = response[\"institution\"][\"institution_id\"]\n        bank_type = response[\"institution\"][\"type\"]\n        bank_logo = response[\"institution\"][\"logo\"]\n        bank_url = response[\"institution\"][\"url\"]\n        bank_country_codes = response[\"institution\"][\"country_codes\"]\n        bank_primary_color = response[\"institution\"][\"primary_color\"]\n        bank_transfer_type = response[\"institution\"][\"transfer_type\"]\n        bank_routing_numbers = response[\"institution\"][\"routing_numbers\"]\n        bank_oauth = response[\"institution\"][\"oauth\"]\n        bank_products = response[\"institution\"][\"products\"]\n        bank_has_mfa = response[\"institution\"][\"has_mfa\"]\n        bank_mfa_type = response[\"institution\"][\"mfa_type\"]\n        bank_mfa_required = response[\"institution\"][\"mfa_required\"]\n        bank_mfa_message = response[\"institution\"][\"mfa_message\"]\n        bank_mfa_code_type = response[\"institution\"][\"mfa_code_type\"]\n        bank_mfa_code_length = response[\"institution\"][\"mfa_code_length\"]\n        bank_mfa_code_pattern = response[\"institution\"][\"mfa_code_pattern\"]\n        bank_mfa_code_character_set = response[\"institution\"][\"mfa_code_character_set\"]\n        bank_mfa_code_sub_type = response[\"institution\"][\"mfa_code_sub_type\"]\n        bank_mfa_code_message = response[\"institution\"][\"mfa_code_message\"]\n        bank_mfa_code_message_type = response[\"institution\"][\"mfa_code_message_type\"]\n        bank_mfa_code_message_sub_type = response[\"institution\"][\"mfa_code_message_sub_type\"]\n        bank_mfa_code_message_code = response[\"institution\"][\"mfa_code_message_code\"]\n        bank_m", "CodeBleu_score": 19.3945908414644}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank_name = response.get(\"institution\").get(\"name\")\n        bank_id = response.get(\"institution\").get(\"institution_id\")\n        bank_type = response.get(\"institution\").get(\"type\")\n        bank_url = response.get(\"institution\").get(\"url\")\n        bank_logo = response.get(\"institution\").get(\"logo\")\n        bank_country_codes = response.get(\"institution\").get(\"country_codes\")\n        bank_primary_color = response.get(\"institution\").get(\"primary_color\")\n        bank_products = response.get(\"institution\").get(\"products\")\n        bank_access_token = get_access_token(token)\n        bank_exists = frappe.db.exists(\"Bank\", {\"name\": bank_name})\n        if not bank_exists:\n            bank = frappe.new_doc(\"Bank\")\n            bank.name = bank_name\n            bank.bank_id = bank_id\n            bank.bank_type = bank_type\n            bank.url = bank_url\n            bank.logo = bank_logo\n            bank.country_codes = bank_country_codes\n            bank.primary_color = bank_primary_color\n            bank.products = bank_products\n            bank.access_token = bank_access_token\n            bank.insert()\n            frappe.db.commit()\n        else:\n            bank = frappe.get_doc(\"Bank\", {\"name\": bank_name})\n            bank.access_token = bank_access_token\n            bank.save()\n            frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(\"Error adding bank: {}\".format(e))\n\n", "CodeBleu_score": 34.97010371410719}, {"code": "def add_institution(token, response)\n\t\n    try:\n        bank_name = response[\"item\"][\"institution_id\"]\n        bank_id = response[\"item\"][\"institution_id\"]\n        bank_type = response[\"item\"][\"institution_type\"]\n        bank_url = response[\"item\"][\"url\"]\n        bank_logo = response[\"item\"][\"logo\"]\n        bank_access_token = response[\"access_token\"]\n        bank_item_id = response[\"item_id\"]\n\n        if not frappe.db.exists(\"Bank\", bank_name):\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = bank_name\n            bank.bank_id = bank_id\n            bank.bank_type = bank_type\n            bank.bank_url = bank_url\n            bank.bank_logo = bank_logo\n            bank.bank_access_token = bank_access_token\n            bank.bank_item_id = bank_item_id\n            bank.save()\n            frappe.db.commit()\n            frappe.msgprint(f\"Bank {bank_name} added successfully.\")\n        else:\n            bank = frappe.get_doc(\"Bank\", bank_name)\n            bank.bank_access_token = bank_access_token\n            bank.bank_item_id = bank_item_id\n            bank.save()\n            frappe.db.commit()\n            frappe.msgprint(f\"Bank {bank_name} updated successfully.\")\n    except Exception as e:\n        frappe.log_error(f\"Error adding bank: {str(e)}\")", "CodeBleu_score": 33.06806482683626}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    bank_account_doc = frappe.get_doc(\"Bank Account\", bank_account)\n    last_integration_date = bank_account_doc.last_integration_date\n    start_date = last_integration_date or bank_account_doc.start_date or getdate()\n    end_date = getdate()\n    try:\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        new_transactions = [new_bank_transaction(transaction) for transaction in transactions]\n        if new_transactions:\n            frappe.db.set_value(\n                \"Bank Account\", bank_account, \"last_integration_date\", transactions[0][\"date\"]\n            )\n        frappe.log_on_console(\n            \"Synced {0} transactions from {1} to {2}\".format(\n                len(new_transactions), start_date, end_date\n            )\n        )\n    except Exception:\n        frappe.log_error(title=\"Bank Transaction Sync Error\")", "CodeBleu_score": 28.235884449016936}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n    if last_integration_date:\n        start_date = getdate(last_integration_date)\n    else:\n        start_date = None\n\n    end_date = getdate()\n\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    if transactions:\n        try:\n            for transaction in transactions:\n                new_bank_transaction(transaction)\n\n            oldest_transaction = min(\n                [getdate(t[\"date\"]) for t in transactions if t[\"date\"]]\n            )\n            frappe.db.set_value(\n                \"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction\n            )\n\n            frappe.msgprint(\n                _(\"Synced {0} transactions\").format(len(transactions)),\n                alert=True,\n                indicator=\"green\",\n            )\n        except Exception:\n            frappe.log_error(\n                title=_(\"Bank Transaction Sync Error\"),\n                message=_(\"Bank Transaction Sync Error\"),\n            )\n    else:\n        frappe.msgprint(\n            _(\"No new transactions to sync\"), alert=True, indicator=\"green\"\n        )\n\n", "CodeBleu_score": 32.47895128773854}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        start_date = last_integration_date or getdate()\n        end_date = getdate()\n\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n        if transactions:\n            new_transactions = []\n            for transaction in transactions:\n                new_transactions += new_bank_transaction(transaction)\n\n            if new_transactions:\n                frappe.db.set_value(\n                    \"Bank Account\", bank_account, \"last_integration_date\", end_date\n                )\n                frappe.msgprint(\n                    _(\"Added {0} transactions\").format(len(new_transactions)),\n                    title=_(\"Bank Transactions Added\"),\n                    alert=True,\n                )\n\n    except Exception:\n        frappe.log_error(title=_(\"Bank Transaction Sync Error\"))", "CodeBleu_score": 34.60774712474115}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query = f\"SELECT * FROM {entity}\"\n    query_uri = f\"{self.quickbooks_company.quickbooks_endpoint}/query?query={query}\"\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        total = response.json()[\"totalCount\"]\n        for offset in range(0, total, 1000):\n            response = self._get(\n                f\"{query_uri}&startPosition={offset}&maxResults=1000\"\n            )\n            if response.status_code == 200:\n                entries = response.json()[\"QueryResponse\"][\"Account\"]\n                entries = self._preprocess_entries(entity, entries)\n                self._save_entries(entity, entries)\n            else:\n                self._log_error(\n                    execption=Exception(\n                        f\"{response.status_code} {response.text}\",\n                        response.status_code,\n                        response.text,\n                    ),\n                    data={\"query\": query, \"offset\": offset},\n                )\n\n", "CodeBleu_score": 33.59685895148428}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = f\"/company/{self.quickbooks_company_id}/{entity}\"\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        try:\n            entries = response.json()\n            total = entries.get(\"total_count\", 0)\n            if total > 0:\n                for offset in range(0, total, 1000):\n                    query_uri = f\"{query_uri}?offset={offset}&limit=1000\"\n                    response = self._get(query_uri)\n                    if response.status_code == 200:\n                        entries = response.json()\n                        entries = self._preprocess_entries(entity, entries)\n                        self._save_entries(entity, entries)\n                    else:\n                        self._log_error(response.text)\n        except Exception as e:\n            self._log_error(e)\n\n", "CodeBleu_score": 31.31735687194054}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        query_uri = self.get_query_uri(entity)\n        total = self.get_total(query_uri)\n        if total > 0:\n            self.publish({\"event\": \"progress\", \"message\": _(\"Migrating {0}\").format(entity), \"count\": 0, \"total\": total})\n            for offset in range(0, total, 1000):\n                entries = self.get_entries(query_uri, offset)\n                entries = self.preprocess_entries(entity, entries)\n                self.save_entries(entity, entries)\n    except Exception as e:\n        self.log_error(e, {\"query_uri\": query_uri, \"offset\": offset, \"total\": total})\n\n", "CodeBleu_score": 28.010129152373214}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = self._get_quickbooks_id(invoice)\n        if not quickbooks_id:\n            quickbooks_id = self._create_quickbooks_id(invoice)\n        if self._is_linked_transaction(invoice):\n            self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n        else:\n            is_return = self._is_return_invoice(invoice)\n            is_pos = self._is_pos_invoice(invoice)\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=is_return, is_pos=is_pos)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 32.79463374541807}, {"code": "def _save_invoice(self, invoice)\n\t\n    quickbooks_id = self._get_quickbooks_id(invoice)\n    if self._is_linked_transaction_present(invoice):\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 31.92692046540288}, {"code": "def _save_invoice(self, invoice)\n\t\n    quickbooks_id = self._get_quickbooks_id(invoice, \"Invoice\")\n    if not quickbooks_id:\n        return\n\n    if self._is_linked_txn_type(invoice, \"StatementCharge\") or self._is_linked_txn_type(invoice, \"ReimburseCharge\"):\n        self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    else:\n        self._save_sales_invoice(invoice, quickbooks_id)\n\n", "CodeBleu_score": 37.414235918714546}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n\n    # Create a list of scheduled visit dates\n    schedule_list = []\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=i * interval)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n    return schedule_list", "CodeBleu_score": 23.90222384588567}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    # Calculate interval between visits\n    interval = (end_date - start_date).days // no_of_visit\n\n    # Initialize schedule list\n    schedule_list = []\n\n    # Iterate to create schedule\n    for i in range(no_of_visit):\n        # Calculate visit date\n        visit_date = start_date + timedelta(days=interval * i)\n\n        # Adjust date to avoid holidays\n        visit_date = self.validate_schedule_date_for_holiday_list(visit_date, sales_person)\n\n        # Add visit date to schedule list\n        schedule_list.append(visit_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 22.266736545580397}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = (end_date - start_date) / no_of_visit\n\n    for i in range(no_of_visit):\n        schedule_date = start_date + timedelta(days=i * interval)\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 26.7364981168653}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t    $method = request()->get('handle', 'edit');\n\n    $handle = $this->actions[$method]['handle'] ?? 'update';\n    $url = route('bulk-actions.action', $this->path);\n\n    $html = view('components.index.bulkaction.modal', [\n        'url' => $url,\n        'handle' => $handle,\n        'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n        'html' => view($view, $data)->render(),\n    ])->render();\n\n    return response()->json([\n        'success' => true,\n        'error' => false,\n        'message' => '',\n        'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $handle,\n        ],\n        'html' => $html,\n    ]);\n}", "CodeBleu_score": 99.41552324981049}, {"code": "<?\n   public function response($view, $data = []){\n\t    $method = request()->get('handle', 'edit');\n\n    $handle = $this->actions[$method]['handle'] ?? 'update';\n    $url = route('bulk-actions.action', $this->path);\n\n    $html = view('components.index.bulkaction.modal', [\n        'url' => $url,\n        'handle' => $handle,\n        'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n        'html' => view($view, $data)->render(),\n    ])->render();\n\n    return response()->json([\n        'success' => true,\n        'error' => false,\n        'message' => '',\n        'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $handle,\n        ],\n        'html' => $html,\n    ]);\n}", "CodeBleu_score": 99.41552324981049}, {"code": "<?\n   public function response($view, $data = []){\n\t    $method = request()->get('handle', 'edit');\n\n    $handle = $this->actions[$method]['handle'] ?? 'update';\n    $url = route('bulk-actions.action', $this->path);\n\n    $html = view('components.index.bulkaction.modal', [\n        'url' => $url,\n        'handle' => $handle,\n        'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n        'html' => view($view, $data)->render(),\n    ])->render();\n\n    return response()->json([\n        'success' => true,\n        'error' => false,\n        'message' => '',\n        'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $handle,\n        ],\n        'html' => $html,\n    ]);\n}", "CodeBleu_score": 99.41552324981049}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request);\n\n    try {\n        foreach ($contacts as $contact) {\n            $contact->delete();\n        }\n    } catch (\\Exception $e) {\n        return back()->withErrors(['error' => __('messages.delete_error', ['name' => __('user.contact')])]);\n    }\n\n    return back()->with('status', __('messages.delete_success', ['name' => __('user.contact')]));\n}", "CodeBleu_score": 52.074203508890996}, {"code": "<?\npublic function deleteContacts($request){\n\t    try {\n        $contacts = $this->getSelectedRecords($request);\n\n        foreach ($contacts as $contact) {\n            dispatch(new DeleteContact($contact));\n        }\n\n        return true;\n    } catch (Exception $e) {\n        return false;\n    }\n}", "CodeBleu_score": 50.08461331956531}, {"code": "<?\npublic function deleteContacts($request){\n\t    // Get the selected contacts from the request\n    $selectedContacts = $this->getSelectedInput($request);\n\n    // Loop through the selected contacts and attempt to delete each one\n    foreach ($selectedContacts as $contactId) {\n        try {\n            // Dispatch the delete operation for the contact\n            dispatch(new DeleteContact($contactId));\n        } catch (Exception $e) {\n            // If an exception occurs, display an error message\n            $this->alert('error', __('Could not delete :resource.', ['resource' => 'Contact']));\n        }\n    }\n\n    // Redirect back to the contacts index page\n    return redirect()->route('platform.contacts.index');\n}", "CodeBleu_score": 42.989643902347495}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    if ($transactions) {\n        try {\n            foreach ($transactions as $transaction) {\n                dispatch(new DeleteTransactionJob($transaction));\n            }\n        } catch (\\Exception $e) {\n            flash()->error(__('messages.error'));\n        }\n    }\n}", "CodeBleu_score": 58.42917073159576}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    try {\n        foreach ($transactions as $transaction) {\n            DeleteTransaction::dispatch($transaction);\n        }\n\n        session()->flash('success', __('Transactions deleted successfully.'));\n    } catch (\\Exception $e) {\n        session()->flash('error', __('An error occurred while deleting transactions.'));\n    }\n}", "CodeBleu_score": 52.37284089492513}, {"code": "<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    try {\n        foreach ($transactions as $transaction) {\n            dispatch(new DeleteTransactionJob($transaction));\n        }\n    } catch (Exception $e) {\n        flash()->error($e->getMessage());\n    }\n}", "CodeBleu_score": 53.66895009516482}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t    $request = request();\n    $data = $request->all();\n\n    // Check if a specific request class exists and if it is an instance of FormRequest\n    $requestClass = get_class($request);\n    if (!class_exists($requestClass) || !is_subclass_of($requestClass, FormRequest::class)) {\n        return;\n    }\n\n    // Prepare the validation rules for the current request\n    $rules = $request->prepareRules($request->rules());\n\n    // Initialize the request and attempt to validate the data\n    foreach ($data as $key => $value) {\n        $request->initialize([$key => $value]);\n\n        try {\n            $request->validate($rules);\n        } catch (ValidationException $e) {\n            // Add the validation failures to the validator and rethrow the exception\n            $validator->errors()->merge($e->errors());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 37.073030563573305}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = app($this->requestClass);\n\n    if (!$request instanceof FormRequest) {\n        return;\n    }\n\n    $validator->after(function ($validator) use ($request) {\n        foreach ($this->data as $key => $value) {\n            $request->initialize($this->input(), $this->query(), $this->route(), $this->routeParameters(), $this->allFiles(), $this->headers);\n            $request->setMethod($this->method());\n            $request->setUserResolver($this->getUserResolver());\n            $request->setRouteResolver($this->getRouteResolver());\n\n            $rules = $request->prepareRules($request->rules());\n\n            try {\n                $request->validate();\n            } catch (ValidationException $e) {\n                $validator->errors()->merge($e->errors());\n                throw $e;\n            }\n        }\n    });\n}", "CodeBleu_score": 40.32438948697381}, {"code": "<?\npublic function withValidator($validator){\n\t    $request = $this->getRequest();\n\n    if (!$request instanceof FormRequest || !$request instanceof Request) {\n        return;\n    }\n\n    $data = $request->all();\n\n    foreach ($data as $key => $value) {\n        $request->replace([$key => $value]);\n\n        $rules = $this->prepareRules($request->rules());\n\n        try {\n            $request->validate($rules);\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->errors());\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 37.34478424477965}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->instance instanceof ShouldUpdate) {\n        $this->instance->update(\n            $this->getModelInstance($arguments[0]),\n            $this->getRequestInstance($arguments[1])\n        );\n    }\n}", "CodeBleu_score": 27.380725273982065}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->model instanceof ShouldUpdate) {\n        $this->model->update($this->getRequestInstance($arguments[0] ?? []));\n    }\n}", "CodeBleu_score": 18.948714386831476}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t    if ($this->instance instanceof ShouldUpdate) {\n        $this->instance->setModel($arguments[0] ?? null);\n        $this->instance->setRequest($arguments[1] ?? null);\n    }\n}", "CodeBleu_score": 22.507867359790627}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $limit = request('limit') ?? 10;\n    $sort = request('sort') ?? $sort;\n    $query = $query->orderBy($sort);\n    if (request()->expectsJson() || request()->is('api/*')) {\n        return $query->get();\n    }\n    return $query->paginate($limit);\n}", "CodeBleu_score": 42.77285045706395}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $sort = request()->get('sort', $sort);\n    $query->orderBy($sort);\n\n    if (request()->expectsJson() || request()->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate(request()->get('limit', 10));\n}", "CodeBleu_score": 37.01913813327335}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $limit = request()->get('limit', 10);\n    $search = request()->get('search', '');\n\n    $query = $query->where('name', 'like', '%' . $search . '%');\n\n    if (request()->has('sort')) {\n        $sort = request()->get('sort');\n    }\n\n    if ($sort) {\n        $query = $query->orderBy($sort, request()->get('order', 'asc'));\n    }\n\n    if (request()->wantsJson() && !request()->is('api/*')) {\n        return $query->get();\n    }\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 50.018613922198085}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->status == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $openAmount += $transaction->amount;\n        }\n    } else {\n        $openAmount = $model->total;\n    }\n\n    if ($model->due_date < date('Y-m-d')) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 46.94530745551502}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = 0;\n    $overdueAmount = 0;\n\n    // If the document is paid, return zero amounts\n    if ($model->status == 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    // If the document is partially paid, sum the payments from transactions\n    if ($model->status == 'partial') {\n        $openAmount = $model->transactions->sum('amount');\n    }\n\n    // Determine if the document is open or overdue based on the due date\n    $today = Carbon::now();\n    $dueDate = Carbon::parse($model->due_date);\n\n    if ($dueDate->greaterThan($today)) {\n        $openAmount = $model->amount;\n    } else {\n        $overdueAmount = $model->amount;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 49.75482224598745}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t    $openAmount = $model->amount;\n    $overdueAmount = 0;\n\n    if ($model->status == 'paid') {\n        $openAmount = 0;\n        $overdueAmount = 0;\n    } else if ($model->status == 'partial') {\n        $openAmount = 0;\n        $overdueAmount = 0;\n\n        foreach ($model->transactions as $transaction) {\n            $openAmount += $transaction->amount;\n        }\n    }\n\n    if ($model->due_date < date('Y-m-d')) {\n        $overdueAmount = $openAmount;\n        $openAmount = 0;\n    }\n\n    return [\n        'openAmount' => $openAmount,\n        'overdueAmount' => $overdueAmount,\n    ];\n}", "CodeBleu_score": 39.70284351211798}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->toBase()->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.79727650177529}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->toBase()->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.79727650177529}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $total = $this->toBase()->getCountForPagination();\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 85.79727650177529}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->input('reconciliations'))->get();\n\n    DB::beginTransaction();\n\n    try {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::where('date', '>=', $reconciliation->start_date)\n                ->where('date', '<=', $reconciliation->end_date)\n                ->where('account_id', $reconciliation->account_id)\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = true;\n                $transaction->save();\n            }\n        }\n\n        DB::commit();\n    } catch (\\Exception $e) {\n        DB::rollback();\n        throw $e;\n    }\n\n    return response()->json(['success' => true]);\n}", "CodeBleu_score": 38.960665301216245}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::find($request->reconciliations);\n    foreach ($reconciliations as $reconciliation) {\n        DB::transaction(function () use ($reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n            Transaction::where('account_id', $reconciliation->account_id)\n                ->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n                ->update(['reconciled' => true]);\n        });\n    }\n}", "CodeBleu_score": 46.6078545003055}, {"code": "<?\npublic function reconcile($request){\n\t    $reconciliations = Reconciliation::whereIn('id', $request->reconciliations)->get();\n\n    DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            $transactions = Transaction::where('account_id', $reconciliation->account_id)\n                ->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n                ->where('reconciled', false)\n                ->get();\n\n            foreach ($transactions as $transaction) {\n                $transaction->reconciled = true;\n                $transaction->save();\n            }\n        }\n    });\n}", "CodeBleu_score": 45.94157467060977}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t    $user = $this->user;\n    $user->invitations()->delete();\n    $invitation = $user->invitations()->create([\n        'token' => Str::random(32),\n    ]);\n\n    try {\n        Notification::send($user, new UserInvitationNotification($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Failed to send invitation notification.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 24.4644028499041}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $invitations = UserInvitation::where('user_id', $this->user->id)->get();\n    foreach ($invitations as $invitation) {\n        $invitation->delete();\n    }\n\n    $token = Str::random(32);\n\n    $invitation = UserInvitation::create([\n        'user_id' => $this->user->id,\n        'token' => $token,\n        'email' => $this->email,\n        'role' => $this->role,\n    ]);\n\n    try {\n        Notification::send($this->user, new UserInvitationNotification($invitation));\n    } catch (\\Exception $e) {\n        throw new \\Exception('Failed to send notification.');\n    }\n\n    return $invitation;\n}", "CodeBleu_score": 54.1840392706184}, {"code": "<?\npublic function handle(): UserInvitation{\n\t    $user = User::findOrFail($this->userId);\n    $user->invitations()->delete();\n    $invitation = $user->invitations()->create([\n        'token' => Str::random(32),\n    ]);\n    try {\n        dispatch(new NotifyUser($user, $invitation));\n    } catch (Exception $e) {\n        throw new Exception('Failed to notify user.');\n    }\n    return $invitation;\n}", "CodeBleu_score": 25.369777354100115}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new Exception(\"Transaction is already reconciled.\");\n    }\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException(\"Transfer transactions are not authorized.\");\n    }\n}", "CodeBleu_score": 23.97653473908855}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new Exception(\"Transaction has been reconciled\");\n    }\n\n    if ($this->isTransfer()) {\n        throw new Exception(\"Unauthorized\");\n    }\n}", "CodeBleu_score": 22.329321196022125}, {"code": "<?\npublic function authorize(): void{\n\t    if ($this->isReconciled()) {\n        throw new Exception(\"Transaction has been reconciled\");\n    }\n    if ($this->isTransfer()) {\n        throw new UnauthorizedException(\"Transfer transactions are not authorized\");\n    }\n}", "CodeBleu_score": 23.89873794631526}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t    if (tenantId != 0) {\n        if (tableName.equals(\"tenant_table\")) {\n            return true;\n        }\n        if (tableName.equals(\"tenant_table2\")) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 13.950134087460873}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tenantId != 0) {\n        if (tableName.equals(\"tenant_table\")) {\n            return true;\n        }\n        if (tableName.equals(\"other_tenant_table\")) {\n            return true;\n        }\n        if (tableName.equals(\"another_tenant_table\")) {\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 18.90132475515411}, {"code": "public boolean doTableFilter(String tableName){\n\t    if (tenantId == 0) {\n        return false;\n    }\n    return tableName.equals(\"tenant_table\");\n}", "CodeBleu_score": 7.3263179946247465}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer configurer = new MapperScannerConfigurer();\n    configurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return configurer;\n}", "CodeBleu_score": 74.15604342630621}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    String res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.91578780451114}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.60519921805624}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 95.89548128913144}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 95.89548128913144}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 95.89548128913144}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.73142746100696}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.82308672352268}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t        JSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId != 0L) {\n                        if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 96.1078563774103}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t        JSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId != 0L) {\n                        if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 96.1078563774103}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t        JSONArray arr = new JSONArray();\n        try {\n            List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n            //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n            JSONObject outer = new JSONObject();\n            outer.put(\"id\", 0);\n            outer.put(\"key\", 0);\n            outer.put(\"value\", 0);\n            outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n            outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n            //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n            JSONArray dataArray = new JSONArray();\n            if (null != dataListFun) {\n                //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n                List<Function> dataList = new ArrayList<>();\n                for (Function fun : dataListFun) {\n                    String token = request.getHeader(\"X-Access-Token\");\n                    Long tenantId = Tools.getTenantIdByToken(token);\n                    if (tenantId != 0L) {\n                        if (!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                            dataList.add(fun);\n                        }\n                    } else {\n                        //\u8d85\u7ba1\n                        dataList.add(fun);\n                    }\n                }\n                dataArray = getFunctionList(dataList, type, keyId);\n                outer.put(\"children\", dataArray);\n            }\n            arr.add(outer);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n        return arr;\n    }", "CodeBleu_score": 96.1078563774103}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n            PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n            res.code = 200;\n            res.data = platformConfig;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.65306394055058}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getList();\n        if (list.size() > 0) {\n            response.setCode(200);\n            response.setData(list.get(0));\n        }\n    } catch (Exception e) {\n        log.error(\"getCurrentInfo error:\", e);\n        response.setCode(500);\n        response.setMessage(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 41.84748171872206}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.setResponseCode(200);\n            response.setResponseData(systemConfigList.get(0));\n        } else {\n            response.setResponseCode(404);\n            response.setResponseData(\"No system config found\");\n        }\n    } catch (Exception e) {\n        log.error(\"Error retrieving system config\", e);\n        response.setResponseCode(500);\n        response.setResponseData(\"Error retrieving system config\");\n    }\n    return response;\n}", "CodeBleu_score": 34.32212793878947}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getList();\n        if (list != null && list.size() > 0) {\n            response.setData(list.get(0));\n        }\n        response.setCode(200);\n    } catch (Exception e) {\n        logger.error(\"getCurrentInfo error:\", e);\n        response.setCode(500);\n        response.setMsg(\"\u83b7\u53d6\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n    }\n    return response;\n}", "CodeBleu_score": 40.16185630445093}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    String businessPath = request.getParameter(\"businessPath\");\n    MultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n    if (file == null) {\n        return new BaseResponseInfo(ResponseCode.FAILURE, \"\u8bf7\u4e0a\u4f20\u6587\u4ef6\");\n    }\n    String fileName = file.getOriginalFilename();\n    if (fileName == null) {\n        return new BaseResponseInfo(ResponseCode.FAILURE, \"\u8bf7\u4e0a\u4f20\u6587\u4ef6\");\n    }\n    String fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n    if (fileType == null || fileType.length() == 0) {\n        return new BaseResponseInfo(ResponseCode.FAILURE, \"\u8bf7\u4e0a\u4f20\u6587\u4ef6\");\n    }\n    String filePath = \"\";\n    try {\n        if (fileType.equalsIgnoreCase(\"zip\")) {\n            filePath = uploadZipFile(businessPath, file);\n        } else if (fileType.equalsIgnoreCase(\"rar\")) {\n            filePath = uploadRarFile(businessPath, file);\n        } else if (fileType.equalsIgnoreCase(\"pdf\")) {\n            filePath = uploadPdfFile(businessPath, file);\n        } else if (fileType.equalsIgnoreCase(\"jpg\") || fileType.equalsIgnoreCase(\"png\") || fileType.equalsIgnoreCase(\"jpeg\") || fileType.equalsIgnoreCase(\"gif\")) {\n            filePath = uploadImageFile(businessPath, file);\n        } else {\n            return new BaseResponseInfo(ResponseCode.FAILURE, \"\u8bf7\u4e0a\u4f20\u6587\u4ef6\");\n        }\n    } catch (Exception e) {\n        log.error(\"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\", e);\n        return new BaseResponseInfo(ResponseCode.FAILURE, \"\u4e0a\u4f20\u6587\u4ef6\u5931\u8d25\");\n    }\n    return new BaseResponseInfo(ResponseCode.SUCCESS, filePath);\n}", "CodeBleu_score": 34.968273850157836}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo baseResponseInfo = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\"businessPath\");\n        FileItemFactory factory = new DiskFileItemFactory(1024 * 1024, new File(System.getProperty(\"java.io.tmpdir\")));\n        ServletFileUpload upload = new ServletFileUpload(factory);\n        List<FileItem> items = upload.parseRequest(request);\n        FileItem item = items.get(0);\n        String fileName = item.getName();\n        if (fileName != null && !fileName.equals(\"\")) {\n            String fileType = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n            if (fileType.equals(\"xls\") || fileType.equals(\"xlsx\")) {\n                String filePath = businessPath + fileName;\n                File file = new File(filePath);\n                item.write(file);\n                baseResponseInfo.setCode(BaseResponseInfo.SUCCESS);\n                baseResponseInfo.setData(filePath);\n            } else {\n                String filePath = businessPath + fileName;\n                AliOssUtil.uploadFile(filePath, item.getInputStream());\n                baseResponseInfo.setCode(BaseResponseInfo.SUCCESS);\n                baseResponseInfo.setData(filePath);\n            }\n        } else {\n            baseResponseInfo.setCode(BaseResponseInfo.FAILURE);\n            baseResponseInfo.setMessage(\"\u4e0a\u4f20\u5931\u8d25\");\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n        baseResponseInfo.setCode(BaseResponseInfo.FAILURE);\n        baseResponseInfo.setMessage(\"\u4e0a\u4f20\u5931\u8d25\");\n    }\n    return baseResponseInfo;\n}", "CodeBleu_score": 35.33080335996696}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    String businessPath = request.getParameter(\"businessPath\");\n    FileItem fileItem = null;\n    try {\n        fileItem = this.fileUpload.parseRequest(request).get(0);\n    } catch (FileUploadException e) {\n        logger.error(\"upload error\", e);\n        return new BaseResponseInfo(ResponseCode.FAILURE, \"\u4e0a\u4f20\u5931\u8d25\");\n    }\n    File file = new File(fileItem.getName());\n    try {\n        fileItem.write(file);\n    } catch (Exception e) {\n        logger.error(\"upload error\", e);\n        return new BaseResponseInfo(ResponseCode.FAILURE, \"\u4e0a\u4f20\u5931\u8d25\");\n    }\n    String fileName = file.getName();\n    String filePath = businessPath + fileName;\n    try {\n        if (fileUploadType.equals(FileUploadType.LOCAL)) {\n            fileUpload.upload(filePath, file);\n        } else {\n            fileUpload.upload(filePath, file);\n        }\n    } catch (Exception e) {\n        logger.error(\"upload error\", e);\n        return new BaseResponseInfo(ResponseCode.FAILURE, \"\u4e0a\u4f20\u5931\u8d25\");\n    }\n    return new BaseResponseInfo(ResponseCode.SUCCESS, \"\u4e0a\u4f20\u6210\u529f\");\n}", "CodeBleu_score": 35.54607620825647}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 96.69114472205789}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result=0;\n    try{\n        Account account=new Account();\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setIsDefault(obj.getBoolean(\"isDefault\"));\n        account.setAmount(obj.getDouble(\"amount\"));\n        account.setEnabled(true);\n        account.setCreateBy(JshUtils.getLoginUserId(request));\n        account.setCreateTime(new Date());\n        if(accountMapper.getAccountCount()==0){\n            account.setIsDefault(true);\n        }\n        result=accountMapper.insertAccount(account);\n        JshUtils.log(logger, JshUtils.INSERT, \"account\", account.getId());\n    }catch(Exception e){\n        JshException.insertFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 45.311395366598525}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    Account account=new Account();\n    try{\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setType(obj.getString(\"type\"));\n        account.setAmount(obj.getString(\"amount\"));\n        if(obj.getInt(\"default\")==1){\n            account.setDefault(true);\n        }else{\n            account.setDefault(false);\n        }\n        account.setEnabled(true);\n        account.setCreateBy(request.getSession().getAttribute(\"userId\").toString());\n        account.setCreateTime(new Date());\n        int result=accountMapper.insert(account);\n        JshException.writeSuccess(logger);\n        return result;\n    }catch(Exception e){\n        JshException.writeFail(logger, e);\n        throw e;\n    }\n}", "CodeBleu_score": 40.939599711089805}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result = 0;\n    try {\n        Account account = new Account();\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setDescription(obj.getString(\"description\"));\n        account.setInitialAmount(obj.getDouble(\"initialAmount\"));\n        account.setDefaultFlag(obj.getInt(\"defaultFlag\"));\n        account.setEnabledFlag(obj.getInt(\"enabledFlag\"));\n        account.setCreateBy(request.getSession().getAttribute(\"userId\").toString());\n        account.setCreateDate(new Date());\n        account.setUpdateBy(request.getSession().getAttribute(\"userId\").toString());\n        account.setUpdateDate(new Date());\n        account.setVersion(0);\n        if (account.getDefaultFlag() == 1) {\n            List<Account> list = accountMapperEx.getAccountByDefaultFlag(1);\n            if (list.size() > 0) {\n                for (Account account2 : list) {\n                    account2.setDefaultFlag(0);\n                    accountMapperEx.updateAccount(account2);\n                }\n            }\n        }\n        result = accountMapperEx.insertAccount(account);\n        JshException.insertSuccess(logger, account);\n    } catch (Exception e) {\n        JshException.insertFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 43.46621843867568}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error:{}\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.226776258948917}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error\", e);\n    }\n    return null;\n}", "CodeBleu_score": 31.071917933978476}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    try {\n        return mapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"listWithBalanceCount error\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.20415842895711}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result = 0;\n    try {\n        result = depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        log.error(\"Error deleting depot item with id \" + id, e);\n        throw e;\n    }\n    return result;\n}", "CodeBleu_score": 62.844212683899656}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        depotItemMapper.deleteByPrimaryKey(id);\n        return 1;\n    } catch (Exception e) {\n        log.error(\"delete depot item error:{}\", e);\n        throw new Exception(\"delete depot item error\");\n    }\n}", "CodeBleu_score": 30.228920009099713}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    try {\n        return depotItemMapper.deleteByPrimaryKey(id);\n    } catch (Exception e) {\n        logger.error(\"Error deleting depot item with ID \" + id + \": \" + e.getMessage());\n        throw new Exception(\"Error deleting depot item with ID \" + id + \": \" + e.getMessage());\n    }\n}", "CodeBleu_score": 30.332955918937483}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(\n\t\t\t\t\twithProjectName(projectName) + nodeType + \"/\" + nodeKey);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 49.66430383836405}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() +\n\t\t\t\t\twithProjectName(projectName) + \"node/\" + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tInputStream inputStream = entity.getContent();\n\t\t\t\tString response = IOUtils.toString(inputStream, \"UTF-8\");\n\t\t\t\tJSONObject jsonObject = JSONObject.parseObject(response);\n\t\t\t\tif (jsonObject.containsKey(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 57.60901331900785}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tString url = null;\n\t\ttry {\n\t\t\turl = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/\" + withProjectName(projectName) + \"nodes/\" + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\tCloseableHttpResponse httpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(httpEntity, \"utf-8\");\n\t\t\tif (response.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 46.7172655148452}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t", "CodeBleu_score": 4.7657776898263045}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(\n\t\t\t\t\twithProjectName(projectName) + \"/edge/add\");\n\t\t\tList<NameValuePair> params = new ArrayList<NameValuePair>();\n\t\t\tparams.add(new BasicNameValuePair(\"edgeType\", edgeType));\n\t\t\tparams.add(new BasicNameValuePair(\"fromType\", fromType));\n\t\t\tparams.add(new BasicNameValuePair(\"toType\", toType));\n\t\t\tparams.add(new BasicNameValuePair(\"from\", from));\n\t\t\tparams.add(new BasicNameValuePair(\"to\", to));\n\t\t\thttpGet.setURI(new URIBuilder(httpGet.getURI()).setParameters(params)\n\t\t\t\t\t.build());\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString response = EntityUtils.toString(entity);\n\t\t\tJSONObject json = new JSONObject(response);\n\t\t\tif (json.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 45.953194431944276}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\tboolean result = false;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"edge/add/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString json = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tJSONObject jsonObject = new JSONObject(json);\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\tresult = true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 55.88911226121539}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(acquireTestingLocation());\n        }\n        event.setTime(new Date());\n        String json = new Gson().toJson(event);\n        String topic = event.getTarget() != null ? event.getTarget() : \"test\";\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 40.458144186023205}, {"code": "public void sendEvent(Event event){\n\t    if (event == null || event.getEventMessage() == null) {\n        throw new IllegalArgumentException(\"Event or message cannot be null\");\n    }\n    if (event.getEventLocation() == null) {\n        event.setEventLocation(acquireTestingLocation());\n    }\n    event.setEventTime(new Date());\n    String jsonString = event.toJSONString();\n    String topic = event.getEventTarget();\n    if (topic == null) {\n        topic = \"test\";\n    }\n    ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n    producer.send(record);\n    producer.flush();\n}", "CodeBleu_score": 45.41862025864331}, {"code": "public void sendEvent(Event event){\n\t    if (event != null && event.getMessage() != null) {\n        if (event.getLocation() == null) {\n            event.setLocation(acquireTestingLocation());\n        }\n        event.setTime(System.currentTimeMillis());\n        String json = new Gson().toJson(event);\n        ProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n        producer.send(record);\n        producer.flush();\n    }\n}", "CodeBleu_score": 36.97363407139166}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n    ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return config.getEndpoint() + \"/\" + config.getBucketName() + \"/\" + objName;\n}", "CodeBleu_score": 37.86047615640371}, {"code": "public String upload(String objName, byte[] content){\n\t    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n    try {\n        ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n    } catch (OSSException | ClientException e) {\n        log.error(\"Failed to upload file to OSS: {}\", e.getMessage());\n        throw new RuntimeException(e);\n    } finally {\n        ossClient.shutdown();\n    }\n\n    return String.format(\"https://%s.%s/%s\", config.getBucketName(), config.getEndpoint(), objName);\n}", "CodeBleu_score": 37.56097378259887}, {"code": "public String upload(String objName, byte[] content){\n\t    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n    ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return config.getEndpoint() + \"/\" + config.getBucketName() + \"/\" + objName;\n}", "CodeBleu_score": 37.86047615640371}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t        ensureIpToLocationWorker();\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo();\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 30.703865369067195}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    ensureIpToLocationWorker();\n    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 28.69320418488252}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t        ensureIpToLocationWorker();\n        IpToLocationWorker worker = getIpToLocationWorker();\n        if (worker == null) {\n            return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n        }\n        return worker.ipToLocation(ipAddress);\n    }", "CodeBleu_score": 32.48867070520823}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tif (restClient == null || restHighLevelClient == null) {\n\t\t\tsynchronized (this) {\n\t\t\t\tif (restClient == null || restHighLevelClient == null) {\n\t\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\t\trestClient = new RestHighLevelClient(RestClient.builder(hosts));\n\t\t\t\t\trestHighLevelClient = new RestHighLevelClient(RestClient.builder(hosts));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 38.525138121039454}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tif (esClient != null && esHighLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (esClient != null && esHighLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tesClient = new RestClientBuilder(hosts).build();\n\t\t\tesHighLevelClient = new RestHighLevelClient(RestClient.builder(hosts));\n\t\t}\n\t}", "CodeBleu_score": 57.282163090848705}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\t\tif (restClient != null && restHighLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (restClient != null && restHighLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> httpHosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\trestClient = new RestHighLevelClient(RestClient.builder(httpHosts.toArray(new HttpHost[0])));\n\t\t\trestHighLevelClient = new RestHighLevelClient(RestClient.builder(httpHosts.toArray(new HttpHost[0])));\n\t\t}\n\t}", "CodeBleu_score": 58.31867415605825}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostStrings = clusterHostList.split(\",\");\n    for (String hostString : hostStrings) {\n        String[] hostParts = hostString.split(\":\");\n        String host = hostParts[0].trim();\n        int port = hostParts.length == 1 ? clusterPort : Integer.parseInt(hostParts[1].trim());\n        hosts.add(new HttpHost(host, port, \"http\"));\n    }\n    return hosts;\n}", "CodeBleu_score": 37.79852388744311}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    String[] hosts = clusterHostList.split(\",\");\n    List<HttpHost> hostList = new ArrayList<HttpHost>();\n    for (String host : hosts) {\n        if (host.contains(\":\")) {\n            String[] hostPort = host.split(\":\");\n            hostList.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1])));\n        } else {\n            hostList.add(new HttpHost(host, clusterPort));\n        }\n    }\n    return hostList;\n}", "CodeBleu_score": 57.16930922800658}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    if (clusterHostList == null || clusterHostList.isEmpty()) {\n        return hosts;\n    }\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] hostParts = host.split(\":\");\n            host = hostParts[0];\n            port = Integer.parseInt(hostParts[1]);\n        }\n        hosts.add(new HttpHost(host, port));\n    }\n    return hosts;\n}", "CodeBleu_score": 44.11894522773895}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t\twhile (!isStopped()) {\n\t\ttry {\n\t\t\tTask task = getTaskQueue().poll(30, TimeUnit.SECONDS);\n\t\t\tif (task != null) {\n\t\t\t\tswitch (task.getTaskType()) {\n\t\t\t\t\tcase TaskType.PLAIN_TEXT_MESSAGE:\n\t\t\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\t\t\tsendPlainTextMessage(plainTextMessageTask.getToNumber(), plainTextMessageTask.getMessage());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tlog.error(\"Unsupported task type: \" + task.getTaskType());\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tlog.error(\"Error processing task: \" + e.getMessage(), e);\n\t\t}\n\t}\n}", "CodeBleu_score": 21.505819168250813}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tTask task = this.getTaskQueue().poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\tswitch (task.getTaskType()) {\n\t\t\t\t\tcase TASK_TYPE_PLAIN_TEXT:\n\t\t\t\t\t\tPlainTextTask plainTextTask = (PlainTextTask) task;\n\t\t\t\t\t\tString toNumber = plainTextTask.getToNumber();\n\t\t\t\t\t\tString message = plainTextTask.getMessage();\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tlogger.error(\"sendPlainTextMessage error\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"pollingWork error\", e);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 24.552904399728302}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t\twhile (true) {\n\t\t\ttry {\n\t\t\t\tTask task = this.taskQueue.poll(30, TimeUnit.SECONDS);\n\t\t\t\tif (task != null) {\n\t\t\t\t\tif (task instanceof PlainTextMessageTask) {\n\t\t\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\t\t\tString toNumber = plainTextMessageTask.getToNumber();\n\t\t\t\t\t\tString message = plainTextMessageTask.getMessage();\n\t\t\t\t\t\tif (toNumber != null && message != null) {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\t\te.printStackTrace();\n\t\t\t\t\t\t\t\tSystem.out.println(\"Send plain text message failed: \" + e.getMessage());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 30.599918810734888}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = getHttpClient();\n    try {\n        HttpGet httpget = new HttpGet(uri);\n        httpget.addHeader(\"Accept\", \"application/xml\");\n        httpget.addHeader(\"Content-type\", \"application/xml\");\n\n        logger.info(\"Executing request \" + httpget.getRequestLine());\n\n        CloseableHttpResponse response = httpclient.execute(httpget);\n        try {\n            HttpEntity entity = response.getEntity();\n            if (entity != null) {\n                logger.info(\"Response content length: \" + entity.getContentLength());\n                InputStream instream = entity.getContent();\n                String result = IOUtils.toString(instream, \"UTF-8\");\n                logger.info(\"Response content: \" + result);\n                return result;\n            }\n        } finally {\n            response.close();\n        }\n    } finally {\n        httpclient.close();\n    }\n    return null;\n}", "CodeBleu_score": 49.42544123338632}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\t\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\tlog.info(\"Response Content: {}\", content);\n\t\t\treturn content;\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t}", "CodeBleu_score": 68.538283681481}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\thttpget.addHeader(\"Accept\", \"application/xml\");\n\thttpget.addHeader(\"Content-Type\", \"application/xml\");\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tlog.info(\"Response content: \" + content);\n\treturn content;\n}", "CodeBleu_score": 66.55733859766309}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tfactory.setIgnoringComments(true);\n\tfactory.setIgnoringElementContentWhitespace(true);\n\tfactory.setValidating(false);\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode rootNode = doc.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tString rootKey = (String) rootValue[0];\n\tObject rootObject = rootValue[1];\n\tif (TEXT.equals(rootKey)){\n\t\treturn new HashMap<String, Object>();\n\t}\n\tif (rootObject instanceof Map){\n\t\treturn (Map<String, Object>) rootObject;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put(rootKey, rootObject);\n\treturn result;\n}", "CodeBleu_score": 61.700594357135074}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tfactory.setIgnoringComments(true);\n\tfactory.setIgnoringElementContentWhitespace(true);\n\tfactory.setCoalescing(true);\n\tfactory.setExpandEntityReferences(false);\n\tfactory.setValidating(false);\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tInputSource inputSource = new InputSource(new StringReader(messageXmlStr));\n\tDocument document = builder.parse(inputSource);\n\tNodeList children = document.getChildNodes();\n\tif (children == null || children.getLength() == 0){\n\t\treturn null;\n\t}\n\tNode root = children.item(0);\n\tObject[] rootValue = decodeNodeToMap(root, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\treturn new HashMap<String, Object>(){{\n\t\tput((String) rootValue[0], rootValue[1]);\n\t}};\n}", "CodeBleu_score": 51.38824819099138}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode root = doc.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(root, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put((String) rootValue[0], rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 68.12424302620991}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tlog.info(\"Order {} is eligible for auto-processing, enqueuing tasks\", orderRecord.getC_Order_ID());\n\t\tenqueueGenerateSchedules(orderRecord, TransactionName.AUTOSHIPANDINVOICE);\n\t}\n\telse\n\t{\n\t\tlog.info(\"Order {} is not eligible for auto-processing, enqueuing tasks to create missing shipment schedules\", orderRecord.getC_Order_ID());\n\t\tenqueueCreateMissingShipmentSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 27.694310265553025}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tlog.info(\"Enqueueing generate schedules for order {}\", orderRecord.getC_Order_ID());\n\t\tenqueueGenerateSchedules(orderRecord, TransactionName.ORDER_COMMIT);\n\t} else {\n\t\tlog.info(\"Not enqueueing generate schedules for order {} because it is not eligible for auto-processing\", orderRecord.getC_Order_ID());\n\t\tenqueueMissingSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 21.404574239964198}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tfinal boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (eligibleForAutoProcessing)\n\t{\n\t\tlog.info(\"Enqueuing order {} for automatic shipment and invoicing\", orderRecord.getC_Order_ID());\n\t\tenqueueGenerateSchedulesAfterCommit(orderRecord, TransactionName.AUTO_SHIP_AND_INVOICE);\n\t}\n\telse\n\t{\n\t\tlog.info(\"Enqueuing order {} for creation of missing shipment schedules\", orderRecord.getC_Order_ID());\n\t\tenqueueCreateMissingSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 29.914016587027998}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 52.33545582861217}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 48.29729772983774}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if ($user && Hash::check($request->password, $user->password)) {\n        return $user;\n    }\n\n    $this->fireFailedEvent($request, $user);\n\n    $this->throwFailedAuthenticationException($request);\n}", "CodeBleu_score": 48.9676500565493}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->incrementRequestLimit($request);\n\n    throw new ValidationException(\n        'Authentication failed.',\n        response: Response::create(\n            'Authentication failed.',\n            status: Response::HTTP_UNAUTHORIZED,\n            headers: [\n                'WWW-Authenticate' => 'Bearer',\n            ],\n        ),\n    );\n}", "CodeBleu_score": 44.28551230911587}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->incrementRequestLimit();\n\n    throw new ValidationException($this->getFailedAuthenticationMessage($request));\n}", "CodeBleu_score": 48.12483666271173}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->incrementRequests($request);\n\n    throw new ValidationException(\n        'auth',\n        __('auth.failed')\n    );\n}", "CodeBleu_score": 54.81564632973106}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t    $userId = session('user_id');\n    $user = User::find($userId);\n\n    if (!$user) {\n        return redirect('/login');\n    }\n\n    $responseData = [\n        'twoFactorEnabled' => $user->two_factor_enabled,\n        'rememberMe' => $request->session()->get('remember_me', false),\n    ];\n\n    if ($user->two_factor_enabled) {\n        $publicKey = $user->public_key;\n        $responseData['publicKey'] = $publicKey;\n    }\n\n    return view('TwoFactorChallenge', $responseData);\n}", "CodeBleu_score": 46.609829169037134}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('user_id');\n    $user = User::find($userId);\n\n    if (!$user) {\n        return redirect()->route('login');\n    }\n\n    $publicKey = $user->webauthn_public_key;\n\n    $data = [\n        'twoFactorEnabled' => $user->two_factor_enabled,\n        'rememberMe' => $request->session()->get('remember_me', false),\n    ];\n\n    return view('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 46.38406608266265}, {"code": "<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n\n    $user = User::find($userId);\n\n    if (! $user) {\n        return $this->response($request, false);\n    }\n\n    $publicKey = null;\n\n    if ($user->webauthn_id) {\n        $publicKey = $user->publicKey;\n    }\n\n    $data = [\n        'twoFactorEnabled' => true,\n        'remember' => $request->session()->get('login.remember', false),\n        'publicKey' => $publicKey,\n    ];\n\n    return Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 52.43517484788449}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    if ($token = UserToken::where('driver', $driver)->where('driver_id', $socialite->getId())->first()) {\n        if ($user = User::find($token->user_id)) {\n            $this->checkUserAssociation($request, $user, $driver);\n\n            return $user;\n        }\n    }\n\n    return $this->getUserOrCreate($socialite);\n}", "CodeBleu_score": 42.59958679972445}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::where('driver', $driver)\n        ->where('driver_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        // Retrieve the associated user\n        $user = $userToken->user;\n\n        // Verify the user association\n        $this->checkUserAssociation($request, $user, $driver);\n\n        // Update the user token\n        $userToken->update([\n            'token' => $socialite->token,\n            'refresh_token' => $socialite->refreshToken,\n            'expires_in' => $socialite->expiresIn,\n        ]);\n    } else {\n        // Create a new user or associate the socialite token with an existing user\n        $user = $this->getUserOrCreate($socialite);\n\n        // Create a new user token\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    // Authenticate the user\n    Auth::login($user);\n\n    return $user;\n}", "CodeBleu_score": 54.41771026126102}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)\n        ->where('driver_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        $user = $userToken->user;\n        $this->checkUserAssociation($request, $user, $driver);\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n        $this->createUserToken($user, $driver, $socialite);\n    }\n\n    return $user;\n}", "CodeBleu_score": 59.717434806114376}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->getUser($request);\n\n    if (!$user) {\n        return false;\n    }\n\n    $filteredCredentials = $this->filterCredentials($request);\n\n    if (!$this->validateAssertion($user, $filteredCredentials)) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 57.45910190718544}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->retrieveUser($request);\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n    if (!$this->guard()->validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 58.34888200436706}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $this->getUser($request);\n\n    if ($user === null) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    $valid = $this->validateAssertion($user, $credentials);\n\n    if (!$valid) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 64.0134921729437}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->email)->first();\n    } catch (Exception $e) {\n        Log::error($e->getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 24.27762605361098}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (Exception $e) {\n        Log::error($e);\n        return null;\n    }\n}", "CodeBleu_score": 24.621140757628226}, {"code": "<?\nprivate function user(): ?User{\n\t    try {\n        return User::where('email', $this->email)->firstOrFail();\n    } catch (Exception $e) {\n        Log::error($e->getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 25.001152257569803}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\t    if (! config('scout.driver') || ! config('scout.flush')) {\n        return;\n    }\n\n    collect(config('scout.settings'))->each(function ($index) {\n        $table = collect($index)->get('index');\n\n        if ($table) {\n            $this->artisan(\"Flushing Meilisearch index for table '{$table}'\", 'scout:flush', [\n                'model' => collect($index)->get('model'),\n            ]);\n        }\n    });\n\n    $this->info('Meilisearch indexes have been flushed.');\n}", "CodeBleu_score": 47.64848247133291}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if ($this->config->get('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        foreach ($this->config->get('scout.meilisearch.indexes', []) as $index => $settings) {\n            $table = Arr::get($settings, 'model', $index);\n            $this->artisan('Flushing Meilisearch index for table ' . $table, 'scout:flush', [\n                'model' => $table,\n            ]);\n        }\n        $this->info('Meilisearch indexes flushed.');\n    }\n}", "CodeBleu_score": 53.26088112380244}, {"code": "<?\nprotected function scoutFlush(): void{\n\t    if (!config('scout.driver') || !config('scout.flush')) {\n        return;\n    }\n\n    foreach (config('scout.settings') as $index => $settings) {\n        $table = collect($settings)->get('filterableAttributes', [])[0] ?? null;\n\n        if (!$table) {\n            continue;\n        }\n\n        $this->artisan(\n            'Meilisearch: Flushing index for table: ' . $table,\n            'scout:flush',\n            [\n                'model' => $table,\n                'index' => $index,\n            ]\n        );\n    }\n\n    $this->info('Meilisearch: Flushed indexes');\n}", "CodeBleu_score": 46.97035838442206}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Get the VCard from the resource\n    $vcard = $resource->getVCard();\n\n    // Set the UID if it's missing\n    if ($vcard->uid === null) {\n        $vcard->uid = $this->getSource($resource);\n    }\n\n    // If the VCard doesn't exist, create a new one with basic information\n    if ($vcard->exists === false) {\n        $vcard->name = $resource->name;\n        $vcard->formattedName = $resource->name;\n        $vcard->nickname = $resource->name;\n        $vcard->organization = $resource->vault->name;\n        $vcard->title = $resource->title;\n        $vcard->email = $resource->email;\n        $vcard->url = $this->getSource($resource);\n        $vcard->save();\n    }\n\n    // Apply exporters to add more details to the VCard\n    $this->exporters($resource::class)\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 35.65237881965725}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Read the existing VCard from the resource, or create a new one with a UID\n    $vcard = $this->read($resource) ?? VCard::create([\n        'uid' => $this->generateUid($resource),\n        'version' => VCard::VERSION_4,\n    ]);\n\n    // Apply a series of exporters to add more details to the VCard from the resource\n    $this->exporters($resource::class)->each(function (ExportVCardResource $exporter) use ($vcard, $resource) {\n        $exporter->export($vcard, $resource);\n    });\n\n    return $vcard;\n}", "CodeBleu_score": 26.818976678023965}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t    // First, try to read the VCard from the resource.\n    try {\n        $vcard = $resource->vcard;\n    } catch (Throwable $e) {\n        $vcard = VCard::create();\n    }\n\n    // If the VCard doesn't exist, set a UID.\n    if (!$vcard->hasUid()) {\n        $vcard->uid = Str::uuid();\n    }\n\n    // Apply exporters to add more details to the VCard.\n    $this->exporters($resource::class)\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 25.652564050977755}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getCard($addressBookId, $cardUri);\n    if ($object === false) {\n        return false;\n    }\n    if ($object instanceof Contact) {\n        $this->dispatch(new DestroyContactJob($object));\n    } elseif ($object instanceof Group) {\n        $this->dispatch(new DestroyGroupJob($object));\n    } else {\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 35.05763836007543}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        $this->dispatch(new DestroyContact($object));\n    } elseif ($object instanceof Group) {\n        $this->dispatch(new DestroyGroup($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 35.46688577917696}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->findByUri($cardUri);\n\n    if ($object instanceof Contact) {\n        $this->dispatch(new DestroyContact($object));\n    } elseif ($object instanceof Group) {\n        $this->dispatch(new DestroyGroup($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 22.737999323532694}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t    $file = $this->getFileFromRequest();\n\n    if (!$file) {\n        return;\n    }\n\n    $leadActivity = $this->createLeadActivity($data);\n\n    return $this->createFileRecord($file, $leadActivity);\n}", "CodeBleu_score": 19.438421842716348}, {"code": "<?\npublic function upload(array $data){\n\t    $file = $this->getFile($data);\n\n    if (!$file) {\n        return;\n    }\n\n    $leadActivity = $this->createLeadActivity($data);\n\n    if (!$leadActivity) {\n        return;\n    }\n\n    return $this->createFileRecord($file, $leadActivity);\n}", "CodeBleu_score": 19.217872150710747}, {"code": "<?\npublic function upload(array $data){\n\t    $file = $this->request->file('file');\n\n    if (!$file) {\n        return response()->json(['error' => 'No file provided.'], 400);\n    }\n\n    $leadActivity = $this->createLeadActivity($data);\n\n    $fileName = $file->getClientOriginalName();\n    $filePath = $file->store('uploads');\n\n    $fileRecord = $this->createFileRecord($fileName, $filePath, $leadActivity->id);\n\n    return response()->json($fileRecord, 201);\n}", "CodeBleu_score": 43.54029054942189}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    // Check if the route is for admin or front\n    $route = request()->route();\n    if ($route && strpos($route->getPrefix(), 'admin') !== false) {\n        // Redirect front routes to the admin session creation\n        return redirect()->route('admin.session.create');\n    }\n\n    // Handle HTTP exceptions\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    // Handle ModelNotFoundException\n    if ($exception instanceof ModelNotFoundException) {\n        return $this->response('admin', 404);\n    }\n\n    // Handle PDOException\n    if ($exception instanceof PDOException) {\n        return $this->response('admin', 500);\n    }\n\n    // Handle ParseError\n    if ($exception instanceof ParseError) {\n        return $this->response('admin', 500);\n    }\n\n    // Return the response for the exception\n    return $this->response('admin', $statusCode);\n}", "CodeBleu_score": 51.855786767821975}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if (request()->routeIs('admin.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return $this->response('admin', 404);\n        }\n\n        if ($exception instanceof PDOException) {\n            return $this->response('admin', 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return $this->response('admin', 500);\n        }\n    }\n\n    if (request()->routeIs('front.*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return $this->response('front', 404);\n        }\n\n        if ($exception instanceof PDOException) {\n            return $this->response('front', 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return $this->response('front', 500);\n        }\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n\n        if ($statusCode == 404) {\n            return $this->response('front', 404);\n        }\n\n        if ($statusCode == 403) {\n            return $this->response('front', 403);\n        }\n\n        return $this->response('front', 500);\n    }\n\n    return $this->response('front', 500);\n}", "CodeBleu_score": 37.28087764453157}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if (request()->route()->getPrefix() === 'admin') {\n        if ($exception instanceof ModelNotFoundException) {\n            return $this->response('admin::', 404);\n        }\n\n        if ($exception instanceof PDOException || $exception instanceof QueryException) {\n            return $this->response('admin::', 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return $this->response('admin::', 500);\n        }\n    } else {\n        if ($exception instanceof ModelNotFoundException) {\n            return $this->response('front::', 404);\n        }\n\n        if ($exception instanceof PDOException || $exception instanceof QueryException) {\n            return $this->response('front::', 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return $this->response('front::', 500);\n        }\n    }\n\n    return $this->renderDefaultResponse($exception);\n}", "CodeBleu_score": 37.026226136123135}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}, {"code": "<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.50065801627122}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t    $request = request();\n    $ids = $request->input('ids');\n    $is_done = $request->input('is_done');\n    $count = 0;\n\n    foreach ($ids as $id) {\n        $activity = Activity::findOrFail($id);\n\n        if ($activity->is_done != $is_done) {\n            $activity->is_done = $is_done;\n            $activity->save();\n\n            event(new ActivityUpdated($activity));\n\n            $count++;\n        }\n    }\n\n    if ($count > 0) {\n        return response()->json([\n            'success' => true,\n            'message' => 'Activities updated successfully',\n        ]);\n    } else {\n        return response()->json([\n            'success' => false,\n            'message' => 'No activities were updated',\n        ]);\n    }\n}", "CodeBleu_score": 40.31474520940386}, {"code": "<?\npublic function massUpdate(){\n\t    $activityIds = request()->input('activity_ids', []);\n    $isDone = request()->input('is_done', false);\n\n    // Dispatch event before mass update\n    event(new ActivityMassUpdateEvent($activityIds, $isDone));\n\n    $updatedCount = 0;\n\n    foreach ($activityIds as $activityId) {\n        $activity = Activity::find($activityId);\n\n        if ($activity) {\n            $activity->is_done = $isDone;\n            $activity->save();\n            $updatedCount++;\n        }\n    }\n\n    // Dispatch event after mass update\n    event(new ActivityMassUpdateEvent($activityIds, $isDone));\n\n    return response()->json([\n        'success' => $updatedCount > 0,\n        'message' => $updatedCount > 0 ? 'Activities updated successfully' : 'No activities were updated',\n        'updated_count' => $updatedCount,\n    ]);\n}", "CodeBleu_score": 41.18252647069872}, {"code": "<?\npublic function massUpdate(){\n\t  // Get the request data\n  $data = request()->all();\n\n  // Get the activity IDs from the request data\n  $activityIds = $data['activity_ids'];\n\n  // Initialize a counter for the number of updates made\n  $updatesMade = 0;\n\n  // Iterate over the activity IDs\n  foreach ($activityIds as $activityId) {\n    // Get the activity from the database\n    $activity = Activity::find($activityId);\n\n    // Check if the activity exists\n    if ($activity) {\n      // Dispatch an event before updating the activity\n      event(new ActivityBeforeUpdate($activity));\n\n      // Update the activity's 'is_done' status\n      $activity->is_done = true;\n      $activity->save();\n\n      // Dispatch an event after updating the activity\n      event(new ActivityAfterUpdate($activity));\n\n      // Increment the counter for the number of updates made\n      $updatesMade++;\n    }\n  }\n\n  // Check if any updates were made\n  if ($updatesMade > 0) {\n    // Return a JSON response indicating success\n    return response()->json(['success' => true]);\n  } else {\n    // Return a JSON response indicating failure\n    return response()->json(['success' => false]);\n  }\n}", "CodeBleu_score": 38.14218325953024}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t    // Retrieve the activity IDs from the request data\n    $ids = $this->request->data('ids');\n    // Initialize an array to store the deleted activities\n    $deleted = [];\n    // Iterate over the activity IDs\n    foreach ($ids as $id) {\n      // Get the activity by its ID\n      $activity = $this->Activities->get($id);\n      // Dispatch an event before the activity is deleted\n      $this->getEventManager()->dispatch(new Event('Model.Activities.beforeDelete', $this, [\n        'activity' => $activity\n      ]));\n      // Delete the activity\n      $this->Activities->delete($activity);\n      // Dispatch an event after the activity is deleted\n      $this->getEventManager()->dispatch(new Event('Model.Activities.afterDelete', $this, [\n        'activity' => $activity\n      ]));\n      // Add the deleted activity to the array\n      $deleted[] = $activity;\n    }\n    // Return a JSON response indicating a successful destruction\n    return $this->response->withStringBody(json_encode([\n      'success' => true,\n      'data' => $deleted\n    ]));\n  }", "CodeBleu_score": 25.111550648672253}, {"code": "<?\n public function massDestroy(){\n\t    // Get the activity IDs from the request data\n    $activityIds = request('ids');\n\n    // Iterate over the activity IDs\n    foreach ($activityIds as $activityId) {\n        // Dispatch an event before deleting the activity\n        event(new ActivityDeleting($activityId));\n\n        // Delete the activity\n        $activity = Activity::findOrFail($activityId);\n        $activity->delete();\n\n        // Dispatch an event after deleting the activity\n        event(new ActivityDeleted($activityId));\n    }\n\n    // Return a JSON response indicating a successful destruction\n    return response()->json([\n        'message' => 'Activities deleted successfully'\n    ], 200);\n}", "CodeBleu_score": 34.56757922254113}, {"code": "<?\n public function massDestroy(){\n\t    // Get the activity IDs from the request\n    $ids = $this->request->data('ids');\n\n    // Check if there are any IDs in the request data\n    if (empty($ids)) {\n        // Return a JSON response with an error message\n        return $this->response->withJson([\n            'message' => 'No activity IDs provided.'\n        ], 400);\n    }\n\n    // Loop through the activity IDs\n    foreach ($ids as $id) {\n        // Dispatch an event before deleting the activity\n        $this->dispatch(new ActivityDeleting($id));\n\n        // Delete the activity using the Activity model\n        $activity = $this->Activity->delete($id);\n\n        // Dispatch an event after deleting the activity\n        $this->dispatch(new ActivityDeleted($id));\n    }\n\n    // Return a JSON response indicating a successful destruction\n    return $this->response->withJson([\n        'message' => 'Activities deleted successfully.'\n    ]);\n}", "CodeBleu_score": 25.75203092708377}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t    $currentCards = $this->getCards();\n    $requestData = request()->all();\n\n    foreach ($requestData as $card) {\n        foreach ($currentCards as $key => $currentCard) {\n            if ($card['id'] === $currentCard['id']) {\n                $currentCards[$key]['selected'] = $card['selected'];\n            }\n        }\n    }\n\n    return response()->json($currentCards);\n}", "CodeBleu_score": 46.70520862681356}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardCard::all();\n\n    foreach ($cards as $card) {\n        $card->selected = false;\n        $card->save();\n    }\n\n    foreach (request()->all() as $cardId) {\n        $card = DashboardCard::find($cardId);\n        $card->selected = true;\n        $card->save();\n    }\n\n    return response()->json(['cards' => $cards]);\n}", "CodeBleu_score": 32.305398047691675}, {"code": "<?\n public function updateCards(){\n\t    $cards = DashboardCard::all();\n    $requestData = request()->all();\n    foreach ($cards as $card) {\n        $card->selected = false;\n        foreach ($requestData as $data) {\n            if ($card->id == $data['id']) {\n                $card->selected = $data['selected'];\n            }\n        }\n        $card->save();\n    }\n    return response()->json($cards);\n}", "CodeBleu_score": 43.21680355771376}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t    $this->authorize('create', Configuration::class);\n    $this->dispatchBrowserEvent('beforeSave');\n    $configuration = Configuration::create($this->validate());\n    $this->dispatchBrowserEvent('afterSave');\n    $this->flash('success', __('Configuration saved successfully.'));\n    return redirect()->back();\n}", "CodeBleu_score": 34.5235592677043}, {"code": "<?\npublic function store(){\n\t    $this->dispatchEvent('configuration.saving');\n    $configuration = Configuration::create($this->request->all());\n    $this->dispatchEvent('configuration.saved', ['configuration' => $configuration]);\n    Session::flash('success', 'Configuration saved successfully.');\n    return redirect()->back();\n}", "CodeBleu_score": 34.36448747299862}, {"code": "<?\npublic function store(){\n\t    $this->dispatchEvent('configuration.beforeSave');\n    $configuration = Configuration::create($this->request->all());\n    $this->dispatchEvent('configuration.afterSave');\n    Session::flash('success', 'Configuration saved successfully');\n    return redirect()->back();\n}", "CodeBleu_score": 35.6359494434472}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/' . $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 90.66551583260859}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/'. $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 96.27286940382231}, {"code": "<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/' . $path;\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 90.66551583260859}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setSortOrder(list.indexOf(model));\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortService.removeByUserId(userService.getUserId());\n    adminModelSortService.saveBatch(adminModelSorts);\n    return Result.success();\n}", "CodeBleu_score": 42.32486140811356}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSorts = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setModel(model);\n        adminModelSort.setSortOrder(1);\n        adminModelSorts.add(adminModelSort);\n    }\n    adminModelSortRepository.deleteByUser(user);\n    adminModelSortRepository.saveAll(adminModelSorts);\n    return new Result(true);\n}", "CodeBleu_score": 38.18929276182944}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(model);\n        sort.setSortOrder(list.indexOf(model));\n        sort.setUser(user);\n        sortList.add(sort);\n    }\n    adminModelSortRepository.deleteByUser(user);\n    adminModelSortRepository.saveAll(sortList);\n    return new Result(true);\n}", "CodeBleu_score": 35.60889651076221}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 93.17878047282562}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    UserConfiguration userConfiguration = userConfigurationService.getUserConfiguration(customKey);\n    if (userConfiguration != null) {\n        userConfiguration.setValue(json);\n        userConfigurationService.updateUserConfiguration(userConfiguration);\n    } else {\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setCustomKey(customKey);\n        userConfiguration.setValue(json);\n        userConfigurationService.saveUserConfiguration(userConfiguration);\n    }\n    return new Result(true, \"success\");\n}", "CodeBleu_score": 52.47884139254868}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    try {\n        UserConfiguration userConfiguration = userConfigurationService.getUserConfigurationByCustomKey(customKey);\n        if (userConfiguration != null) {\n            userConfiguration.setValue(json);\n            userConfigurationService.saveUserConfiguration(userConfiguration);\n        } else {\n            UserConfiguration newUserConfiguration = new UserConfiguration();\n            newUserConfiguration.setCustomKey(customKey);\n            newUserConfiguration.setValue(json);\n            userConfigurationService.saveUserConfiguration(newUserConfiguration);\n        }\n        return new Result(true, \"Success\");\n    } catch (Exception e) {\n        return new Result(false, \"Failed\");\n    }\n}", "CodeBleu_score": 46.13468201560561}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t    try {\n        UserConfiguration userConfiguration = UserConfiguration.findByCustomKey(customKey);\n        if (userConfiguration != null) {\n            userConfiguration.setValue(json.toString());\n        } else {\n            userConfiguration = new UserConfiguration(customKey, json.toString());\n        }\n        userConfiguration.save();\n        return Result.success();\n    } catch (Exception e) {\n        return Result.fail(e.getMessage());\n    }\n}", "CodeBleu_score": 47.8936027768856}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    return Result.success(userService.queryUserInfo(userId));\n}", "CodeBleu_score": 12.807970699766324}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserMapper.selectById(userId);\n    if (user == null) {\n        return Result.fail(\"\u7528\u6237\u4e0d\u5b58\u5728\");\n    }\n    String departmentName = departmentService.getDepartmentNameByDepartmentId(user.getDepartmentId());\n    user.setDepartmentName(departmentName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 49.44635973270948}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    User user = userService.getUserInfo(userId);\n    if (user == null) {\n        return Result.error(\"user not exist\");\n    }\n    Department department = departmentService.getDepartmentInfo(user.getDepartmentId());\n    if (department == null) {\n        return Result.error(\"department not exist\");\n    }\n    user.setDepartmentName(department.getName());\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 45.86224453276464}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t    int userId = getUserId();\n    List<ReadNotice> readNotices = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNotices.size() > 1) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.setStatus(1);\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.setUserId(userId);\n        readNotice.setStatus(1);\n        readNotice.save();\n    }\n    return ok(Json.toJson(new Result(true, \"success\")));\n}", "CodeBleu_score": 31.818012940131258}, {"code": " public Result readNotice() {\n\t    // Get the user ID\n    String userId = request().username();\n\n    // Check if there are multiple \"readNotice\" entries for the user\n    List<ReadNotice> readNotices = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNotices.size() > 1) {\n        // Update the status to 1 for all matching entries\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else {\n        // Create a new \"readNotice\" entry with status 1\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userId = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n\n    // Return a success result\n    return ok(\"Success\");\n}", "CodeBleu_score": 27.42767149338667}, {"code": " public Result readNotice() {\n\t    Integer userId = session().get(\"userId\");\n    List<ReadNotice> readNotices = ReadNotice.find.query().where().eq(\"userId\", userId).findList();\n    if (readNotices.size() > 1) {\n        for (ReadNotice readNotice : readNotices) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    } else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userId = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n    return ok(\"Success\");\n}", "CodeBleu_score": 29.319301086245076}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    // Get the existing configuration or create a new one with default values\n    AdminConfig adminConfig = adminConfigRepository.findByName(\"companyInfo\");\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{}\");\n    }\n\n    // Update the configuration's value with the provided company information\n    adminConfig.setValue(adminCompanyBO.toJson());\n\n    // Save or update the configuration\n    adminConfigRepository.save(adminConfig);\n}", "CodeBleu_score": 44.538064109914814}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    // Search for an existing configuration with the name \"companyInfo\"\n    AdminConfig adminConfig = adminConfigRepository.findByName(\"companyInfo\");\n\n    // If not found, create a new configuration with default values\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{}\");\n    }\n\n    // Update the configuration's value with the provided company information in JSON format\n    adminConfig.setValue(adminCompanyBO.toString());\n\n    // Save or update the configuration\n    adminConfigRepository.save(adminConfig);\n}", "CodeBleu_score": 44.73088470428866}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    String configName = \"companyInfo\";\n    String configValue = adminCompanyBO.toString();\n    Optional<AdminConfigBO> configOptional = adminConfigRepository.findByName(configName);\n\n    if (configOptional.isPresent()) {\n        AdminConfigBO config = configOptional.get();\n        config.setValue(configValue);\n        adminConfigRepository.save(config);\n    } else {\n        AdminConfigBO config = new AdminConfigBO();\n        config.setName(configName);\n        config.setValue(configValue);\n        adminConfigRepository.save(config);\n    }\n}", "CodeBleu_score": 36.46443544621304}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String key = \"admin_company_config\";\n    String config = (String) getConfig(key);\n    if (config != null) {\n        adminCompanyBO = parseAdminConfig(config);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 42.02213710420333}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    AdminCompanyConfig adminCompanyConfig = adminCompanyConfigService.queryAdminCompanyConfig(key);\n    if (adminCompanyConfig != null) {\n        adminCompanyBO = JSON.parseObject(adminCompanyConfig.getConfigValue(), AdminCompanyBO.class);\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 54.193835451560226}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    AdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n    String adminConfig = AdminCompanyBO.ADMIN_CONFIG;\n    AdminCompanyBO adminCompany = (AdminCompanyBO) getAdminConfig(adminConfig);\n    if (adminCompany != null) {\n        adminCompanyBO = adminCompany;\n    }\n    return adminCompanyBO;\n}", "CodeBleu_score": 41.50574806379698}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(string);\n        adminConfig.setObjectType(\"com.ibm.ws.logging.logConfiguration.LogConfiguration\");\n        adminConfig.setProperty(\"logConfigurationName\", \"welcome\");\n        adminConfig.setProperty(\"logLevel\", \"INFO\");\n        adminConfig.setProperty(\"logFile\", \"welcome.log\");\n        adminConfigList.add(adminConfig);\n    }\n    AdminConfig[] adminConfigArray = adminConfigList.toArray(new AdminConfig[0]);\n    AdminConfig[] existingConfigurations = AdminConfig.list(\"com.ibm.ws.logging.logConfiguration.LogConfiguration\", null, \"logConfigurationName\", \"welcome\");\n    for (AdminConfig existingConfiguration : existingConfigurations) {\n        existingConfiguration.remove();\n    }\n    AdminConfig.saveBatch(adminConfigArray);\n}", "CodeBleu_score": 30.040465844567056}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigList = new ArrayList<AdminConfig>();\n    for (String str : stringList) {\n        AdminConfig adminConfig = AdminConfig.createInstance(\"com.ibm.ws.logging.config.LogConfiguration\", \"LogConfiguration\", AdminConfig.SERVER_RUNTIME);\n        adminConfig.setName(\"LogConfiguration\");\n        adminConfig.setLogWelcomeSpeech(str);\n        adminConfigList.add(adminConfig);\n    }\n    List<AdminConfig> existingConfigs = AdminConfig.list(\"LogConfiguration\", AdminConfig.SERVER_RUNTIME);\n    for (AdminConfig existingConfig : existingConfigs) {\n        if (existingConfig.getName().equals(\"LogConfiguration\")) {\n            existingConfig.remove();\n        }\n    }\n    AdminConfig.save();\n}", "CodeBleu_score": 31.283661120822064}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t", "CodeBleu_score": 4.070653414637172}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // Retrieve the current user ID and user details\n    Long currentUserId = getCurrentUserId();\n    User user = userService.getUserById(currentUserId);\n    String username = user.getUsername();\n\n    // Check the provided password against the stored password using the username and salt\n    String storedPassword = user.getPassword();\n    String salt = user.getSalt();\n    String hashedPassword = hashPassword(adminInitDataBO.getPassword(), username, salt);\n    if (!hashedPassword.equals(storedPassword)) {\n        throw new InvalidPasswordException(\"Invalid password\");\n    }\n\n    // Generate a temporary access code and store it in Redis with a 10-minute expiration\n    String accessCode = generateAccessCode();\n    redisTemplate.opsForValue().set(ACCESS_CODE_KEY, accessCode, 10, TimeUnit.MINUTES);\n\n    return accessCode;\n}", "CodeBleu_score": 38.255985419273266}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    Long userId = UserContext.getUserId();\n    User user = userService.getUserById(userId);\n    if (!user.getUsername().equals(adminInitDataBO.getUsername())) {\n        throw new BusinessException(ErrorCode.USERNAME_ERROR);\n    }\n    String salt = user.getSalt();\n    String password = adminInitDataBO.getPassword();\n    String storedPassword = userService.getPassword(userId);\n    String tempPassword = PasswordUtil.getEncryptedPassword(password, salt);\n    if (!storedPassword.equals(tempPassword)) {\n        throw new BusinessException(ErrorCode.PASSWORD_ERROR);\n    }\n    String accessCode = UUID.randomUUID().toString();\n    redisTemplate.opsForValue().set(RedisKey.USER_ACCESS_CODE + userId, accessCode, 10, TimeUnit.MINUTES);\n    return accessCode;\n}", "CodeBleu_score": 44.48571554967261}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    Integer userId = userService.getCurrentUserId();\n    UserInfo userInfo = userService.getUserInfo(userId);\n    String username = userInfo.getUsername();\n    String salt = userInfo.getSalt();\n    String password = adminInitDataBO.getPassword();\n    String storedPassword = userInfo.getPassword();\n    if (!password.equals(MD5Util.encode(username, password, salt))) {\n        throw new ServiceException(ResultCode.INVALID_PASSWORD);\n    }\n    String accessCode = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    redisService.set(RedisKey.ADMIN_ACCESS_CODE + accessCode, userId, 600);\n    return accessCode;\n}", "CodeBleu_score": 42.858608103854664}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t    String userId = request.getParameter(\"userId\");\n    String key = \"unauthorizedMenuUrl_\" + userId;\n    List<String> unauthorizedMenuUrlList = redisTemplate.opsForList().range(key, 0, -1);\n    String initAuthUrl = request.getRequestURI();\n    if (unauthorizedMenuUrlList.contains(initAuthUrl)) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 44.08012092749489}, {"code": "private boolean verifyInitAuth(){\n\t    // Get the user ID\n    String userId = (String) request.getSession().getAttribute(\"userId\");\n    // Construct the key\n    String key = \"initAuth:\" + userId;\n    // Get the list of unauthorized menu URLs from Redis\n    List<String> initAuthList = redisTemplate.opsForList().range(key, 0, -1);\n    // Check if the initial authentication URL is in the list\n    if (initAuthList.contains(request.getRequestURI())) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 39.10456495910373}, {"code": "private boolean verifyInitAuth(){\n\t    String userId = getUserId();\n    String key = \"init_auth_\" + userId;\n    List<String> urls = redisTemplate.opsForList().range(key, 0, -1);\n    if (urls.contains(request.getRequestURI())) {\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 36.77739957026757}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.29664465964214}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n\n    // Save the list of role-menu associations in batches\n    int batchSize = 1000;\n    for (int i = 0; i < roleMenuList.size(); i += batchSize) {\n        int end = Math.min(i + batchSize, roleMenuList.size());\n        List<AdminRoleMenu> batch = roleMenuList.subList(i, end);\n        adminRoleMenuMapper.batchInsert(batch);\n    }\n}", "CodeBleu_score": 52.118834372520794}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t    // Create a list of AdminRoleMenu objects\n    List<AdminRoleMenu> list = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        list.add(roleMenu);\n    }\n\n    // Save the list of role-menu associations in batches\n    int batchSize = 100;\n    int i = 0;\n    while (i < list.size()) {\n        int toIndex = Math.min(i + batchSize, list.size());\n        List<AdminRoleMenu> subList = list.subList(i, toIndex);\n        adminRoleMenuService.saveBatch(subList);\n        i += batchSize;\n    }\n}", "CodeBleu_score": 52.32847843506331}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t        String index = getSysLogIndex();\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\"createTime\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n        map.remove(\"id\");\n        IndexRequest indexRequest = new IndexRequest(index).source(map);\n        try {\n            restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 54.63742362328239}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getSysLogIndex();\n    Map<String, Object> map = BeanUtils.beanToMap(sysLog);\n    map.put(\"createTime\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index).source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 52.29846931218296}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    String index = getSysLogIndex();\n    Map<String, Object> logMap = BeanUtil.beanToMap(sysLog);\n    logMap.put(\"createTime\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n    logMap.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.id(IDUtil.getUUID());\n    indexRequest.source(logMap);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 54.43278980272635}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            SearchHits hits = searchResponse.getHits();\n            List<SysLog> sysLogList = new ArrayList<>();\n            for (SearchHit hit : hits) {\n                sysLogList.add(JSONUtil.toBean(hit.getSourceAsString(), SysLog.class));\n            }\n            return new BasePage<>(sysLogList, hits.getTotalHits().value);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5206\u9875\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return new BasePage<>();\n    }", "CodeBleu_score": 51.32192111694258}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        BasePage<SysLog> basePage = new BasePage<>();\n        //\u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //\u6392\u5e8f\n        searchSourceBuilder.sort(SortBuilders.fieldSort(querySysLogBO.getType() == null ? \"loginTime\" : \"createTime\").order(SortOrder.DESC));\n        //\u6392\u9664\u5b57\u6bb5\n        searchSourceBuilder.fetchSource(false);\n        //\u6267\u884c\u67e5\u8be2\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            //\u6620\u5c04\u7ed3\u679c\n            List<SysLog> sysLogs = new ArrayList<>();\n            for (SearchHit searchHit : searchResponse.getHits().getHits()) {\n                sysLogs.add(JSONUtil.toBean(searchHit.getSourceAsString(), SysLog.class));\n            }\n            //\u8fd4\u56de\u7ed3\u679c\n            basePage.setList(sysLogs);\n            basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n            basePage.setCurrentPage(querySysLogBO.getPage());\n            basePage.setTotalPage(searchResponse.getHits().getTotalHits().value % querySysLogBO.getLimit() == 0 ? searchResponse.getHits().getTotalHits().value / querySysLogBO.getLimit() : searchResponse.getHits().getTotalHits().value / querySysLogBO.getLimit() + 1);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return basePage;\n    }", "CodeBleu_score": 53.51614325055172}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t        BasePage<SysLog> basePage = new BasePage<>();\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //\u6392\u5e8f\n        searchSourceBuilder.sort(SortBuilders.fieldSort(\"createTime\").order(SortOrder.DESC));\n        //\u6392\u9664\u5b57\u6bb5\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"model\", \"subModelLabel\", \"content\", \"createTime\", \"loginTime\"}, null);\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        try {\n            SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n            basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n            basePage.setPage(querySysLogBO.getPage());\n            basePage.setLimit(querySysLogBO.getLimit());\n            basePage.setRecords(searchResponse.getHits().getHits().stream().map(hit -> JSONUtil.toBean(hit.getSourceAsString(), SysLog.class)).collect(Collectors.toList()));\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n        return basePage;\n    }", "CodeBleu_score": 52.822473344473785}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t    const file = fs.createWriteStream(dest);\n    const response = await axios({\n        url,\n        method: 'GET',\n        responseType: 'stream'\n    });\n    response.data.pipe(file);\n    return new Promise((resolve, reject) => {\n        file.on('finish', () => {\n            file.close();\n            resolve();\n        });\n        file.on('error', err => {\n            fs.unlink(dest);\n            reject(err);\n        });\n    });\n}", "CodeBleu_score": 53.45152212921849}, {"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const response = await axios({\n    url,\n    method: 'GET',\n    responseType: 'stream'\n  });\n\n  response.data.pipe(file);\n\n  return new Promise((resolve, reject) => {\n    file.on('finish', () => {\n      file.close(resolve);\n    });\n    file.on('error', (err) => {\n      fs.unlink(dest);\n      reject(err);\n    });\n  });\n}", "CodeBleu_score": 51.94872917493877}, {"code": "async function downloadFile(url, dest){\n\t  return new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    const request = https.get(url, function (response) {\n      if (response.statusCode === 200) {\n        response.pipe(file);\n        file.on('finish', () => {\n          file.close(() => {\n            resolve();\n          });\n        });\n      } else {\n        fs.unlink(dest, () => {\n          reject(new Error('Network response was not ok.'));\n        });\n      }\n    });\n\n    request.on('error', (err) => {\n      fs.unlink(dest, () => {\n        reject(err);\n      });\n    });\n\n    file.on('error', (err) => {\n      fs.unlink(dest, () => {\n        reject(err);\n      });\n    });\n  });\n}", "CodeBleu_score": 60.237909990810465}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    return Flux.fromIterable(module.getDependentModules())\n            .flatMap(dependentModuleId -> {\n                if (circularDependencyCheckSet.contains(dependentModuleId)) {\n                    log.warn(\"Circular dependency detected for module {}\", module.getId());\n                    return Mono.empty();\n                }\n                circularDependencyCheckSet.add(dependentModuleId);\n                return applicationRepository.findById(dependentModuleId);\n            })\n            .filter(Objects::nonNull)\n            .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n}", "CodeBleu_score": 50.60760510539475}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    if (circularDependencyCheckSet.contains(module.getId())) {\n        log.warn(\"Circular dependency detected for module {}\", module.getId());\n        return Flux.empty();\n    }\n    circularDependencyCheckSet.add(module.getId());\n    return moduleRepository.findAllById(module.getDependsOn())\n            .flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet))\n            .concatWith(Flux.just(module));\n}", "CodeBleu_score": 51.61453262661526}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    if (circularDependencyCheckSet.contains(module.getId())) {\n        log.warn(\"Circular dependency detected for module: {}\", module.getId());\n        return Flux.just(module);\n    }\n    circularDependencyCheckSet.add(module.getId());\n    return moduleRepository.findByDependsOn(module.getId()).flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet));\n}", "CodeBleu_score": 51.44238585792773}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t        Object compType = map.get(\"compType\");\n        if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n            Object comp = map.get(\"comp\");\n            if (comp instanceof Map<?, ?> compMap) {\n                String appId = (String) compMap.get(\"appId\");\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n        }\n\n        map.forEach((key, value) -> {\n            if (value instanceof Map<?, ?> valueMap) {\n                doGetDependentModules(valueMap, dependentModuleIds);\n            }\n            if (value instanceof List<?> valueList) {\n                valueList.forEach(i -> {\n                    if (i instanceof Map<?, ?> iMap) {\n                        doGetDependentModules(iMap, dependentModuleIds);\n                    }\n                });\n            }\n        });\n    }", "CodeBleu_score": 96.95596629593783}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.46826805918255}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    Object compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.46826805918255}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = dataBuffer.toByteArray();\n        DataBufferUtils.release(dataBuffer);\n        if (createThumbnail) {\n            data = resizeImage(dataBuffer);\n        }\n        MediaType contentType = srcContentType;\n        if (createThumbnail) {\n            contentType = MediaType.IMAGE_JPEG;\n        }\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 52.14222078120218}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        byte[] data = resizeImage(dataBuffer);\n        String contentType = createThumbnail ? MediaType.IMAGE_JPEG_VALUE : srcContentType.toString();\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 32.26030851664905}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t        String contentType = srcContentType.toString();\n        if (createThumbnail) {\n            contentType = \"image/jpeg\";\n        }\n        byte[] data = resizeImage(dataBuffer);\n        return new Asset(data, contentType);\n    }", "CodeBleu_score": 33.16345086869273}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return repository.findById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 41.69635812416407}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n                }\n                return exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 46.08696264532049}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return repository.findById(assetId)\n        .map(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n            }\n            return exchange.getResponse().writeWith(Mono.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n        })\n        .switchIfEmpty(Mono.defer(() -> exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND)));\n}", "CodeBleu_score": 42.76186658556368}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (workspaceMode.equals(WorkspaceMode.SAAS)) {\n        return Flux.empty();\n    }\n    return organizationService.findAllByEnterpriseModeEnabled(true).map(org -> {\n        FindAuthConfig findAuthConfig = new FindAuthConfig();\n        findAuthConfig.setOrgId(org.getId());\n        findAuthConfig.setOrgName(org.getName());\n        findAuthConfig.setAuthConfig(org.getAuthConfig());\n        return findAuthConfig;\n    });\n}", "CodeBleu_score": 31.682011333022665}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return this.findAllOrganizationsForEnterpriseMode().map(organization -> {\n        return new FindAuthConfig(organization.getAuthConfig(), organization.getAuthConfig().getType());\n    });\n}", "CodeBleu_score": 17.043614481256615}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    return workspaceModeService.getWorkspaceMode().flatMapMany(workspaceMode -> {\n        if (workspaceMode.isSaas()) {\n            return Flux.empty();\n        } else {\n            return organizationService.getOrganizationsInEnterpriseMode().map(organization -> {\n                return new FindAuthConfig(organization.getId(), organization.getAuthConfig());\n            });\n        }\n    });\n}", "CodeBleu_score": 30.75569430716336}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    MongoDatabase database = mongoTemplate.getDb();\n    MongoClient client = mongoTemplate.getDbFactory().getLegacyClient();\n\n    MongockApplicationRunnerBuilder builder = MongockApplicationRunner.withApplicationContext(springContext)\n            .setDriver(MongoSpring5Driver.withDefaultLock(database, client))\n            .setChangeLogsScanPackage(CHANGE_LOGS_PACKAGE)\n            .setMigrationScanPackage(MIGRATIONS_PACKAGE)\n            .setMigrationRepository(new SpringDataMongoRepository(database, MIGRATIONS_COLLECTION))\n            .setLockQuickConfig(true);\n\n    return builder.build();\n}", "CodeBleu_score": 40.72560285336606}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    MongockSpring5.MongockApplicationRunnerBuilder builder = MongockSpring5.builder();\n    builder.setDriver(MongoSpring5Driver.withDefaultLock(mongoTemplate, \"migrationLock\"));\n    builder.setChangeLogsScanPackage(\"com.example.migration\");\n    builder.setSpringContext(springContext);\n    return builder.build();\n}", "CodeBleu_score": 35.893339703345504}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t    return MongockSpring5.builder()\n        .setDriver(MongoSpring5.withDefaultLock(mongoTemplate))\n        .setApplicationContext(springContext)\n        .setLockQuickConfig(true)\n        .setMigrationScanPackage(\"com.example.migration\")\n        .build();\n}", "CodeBleu_score": 22.03871767882229}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate template = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        template.setReadPreference(ReadPreference.secondaryPreferred());\n        return template;\n    }", "CodeBleu_score": 77.62047882971166}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return getById(libraryQueryId)\n            .flatMap(libraryQuery -> {\n                // get latest library query record's DSL\n                return libraryQueryRecordRepository.findFirstByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n                        .flatMap(libraryQueryRecord -> Mono.just(libraryQueryRecord.getDsl()))\n                        .switchIfEmpty(Mono.just(libraryQuery.getDsl()));\n            });\n}", "CodeBleu_score": 50.410803223079135}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findTopByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n            .flatMap(libraryQuery -> {\n                if (libraryQuery.getDsl() != null) {\n                    return Mono.just(libraryQuery.getDsl());\n                } else {\n                    return libraryQueryRepository.findById(libraryQueryId)\n                            .map(LibraryQuery::getDsl)\n                            .switchIfEmpty(Mono.error(new LibraryQueryNotFoundException(\"Library query not found\")));\n                }\n            });\n}", "CodeBleu_score": 50.30415400555383}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRepository.findTopByLibraryQueryIdOrderByCreatedAtDesc(libraryQueryId)\n            .switchIfEmpty(getById(libraryQueryId))\n            .map(LibraryQuery::getDsl)\n            .switchIfEmpty(deferredError(LIBRARY_QUERY_DSL_NOT_FOUND, \"LIBRARY_QUERY_DSL_NOT_FOUND\"));\n}", "CodeBleu_score": 48.14710501344462}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        long timeout = Long.parseLong(timeoutStr);\n        Mono<QueryExecutionResult> queryExecutionResultMono = executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        if (datasource.getType().equals(DatasourceType.NODE_JS)) {\n            queryExecutionResultMono = executeByNodeJs(datasource, queryConfig, requestParams);\n        }\n        return queryExecutionResultMono\n                .timeout(Duration.ofMillis(timeout))\n                .onErrorResume(TimeoutException.class, e -> Mono.just(QueryExecutionResult.error(new PluginException(e.getMessage()))))\n                .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e)))\n                .doOnError(e -> log.error(\"Execute query error: {}\", e.getMessage()));\n    }", "CodeBleu_score": 46.75280269547039}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeoutDuration = Duration.parse(timeoutStr);\n        var timeout = timeoutDuration.toMillis();\n        if (timeout <= 0) {\n            return Mono.error(new QueryException(\"timeout duration must be positive\"));\n        }\n\n        var startTime = System.currentTimeMillis();\n        var timeoutDurationMono = Mono.delay(timeoutDuration)\n                .doOnNext(v -> {\n                    var elapsed = System.currentTimeMillis() - startTime;\n                    var remaining = timeout - elapsed;\n                    if (remaining > 0) {\n                        log.warn(\"Query timeout, remaining time: {} ms\", remaining);\n                    }\n                });\n\n        return Mono.defer(() -> {\n            var isNodeJs = datasource.isNodeJs();\n            var queryExecutor = datasourceMetaInfoService.getQueryExecutor(datasource.getType());\n            if (isNodeJs) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        })\n                .timeout(timeoutDurationMono, Mono.defer(() -> {\n                    log.warn(\"Query timeout\");\n                    return Mono.error(new PluginException(\"query timeout\"));\n                }))\n                .onErrorResume(QueryException.class, e -> {\n                    log.warn(\"Query error\", e);\n                    return Mono.just(QueryExecutionResult.error(e.getMessage()));\n                })\n                .onErrorResume(PluginException.class, e -> {\n                    log.warn(\"Query error\", e);\n                    return Mono.just(QueryExecutionResult.error(e.getMessage()));\n                })\n                .onErrorResume(e -> {\n                    log.error(\"Query error\", e);\n                    return Mono.just(QueryExecutionResult.error(\"query error\"));\n                });\n    }", "CodeBleu_score": 47.81532750975991}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        var timeout = Duration.ofSeconds(Long.parseLong(timeoutStr));\n        return Mono.defer(() -> {\n            if (datasource.getType().equals(DatasourceType.NODE_JS.getType())) {\n                return executeByNodeJs(datasource, queryConfig, requestParams);\n            } else {\n                return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n            }\n        }).timeout(timeout, Mono.error(new PluginException(ErrorCode.QUERY_TIMEOUT,\n                \"Query timeout, timeout duration: \" + timeout.getSeconds() + \"s\")))\n                .onErrorResume(TimeoutException.class, e -> Mono.error(new PluginException(ErrorCode.QUERY_TIMEOUT,\n                        \"Query timeout, timeout duration: \" + timeout.getSeconds() + \"s\")))\n                .onErrorResume(PluginException.class, e -> Mono.just(new QueryExecutionResult(e.getCode(), e.getMsg())))\n                .onErrorResume(Exception.class, e -> {\n                    log.error(\"Execute query error: \", e);\n                    return Mono.just(new QueryExecutionResult(ErrorCode.QUERY_EXECUTE_ERROR, \"Execute query error\"));\n                });\n    }", "CodeBleu_score": 56.489098605837285}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.defer(() -> {\n            QueryExecutor queryExecutor = queryExecutorFactory.getQueryExecutor(datasource.getType());\n            QueryExecutionContext queryExecutionContext = queryExecutionContextFactory.createQueryExecutionContext(datasource, queryConfig,\n                    requestParams, queryVisitorContext);\n            Connection connection = datasource.getConnectionPool().getConnection();\n            return queryExecutor.executeQuery(queryExecutionContext, connection).onErrorMap(throwable -> {\n                log.error(\"Error executing query\", throwable);\n                return new QueryExecutionException(throwable.getMessage());\n            });\n        });\n    }", "CodeBleu_score": 51.24439399529987}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.fromCallable(() -> {\n            QueryExecutor queryExecutor = getQueryExecutor(datasource);\n            QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n            Connection connection = datasource.getConnection();\n            try {\n                return queryExecutor.execute(queryExecutionContext);\n            } catch (Exception e) {\n                throw new RuntimeException(e);\n            } finally {\n                datasource.releaseConnection(connection);\n            }\n        });\n    }", "CodeBleu_score": 45.57280570738867}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return Mono.defer(() -> {\n            QueryExecutor queryExecutor = getQueryExecutor(datasource);\n            QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n            return Mono.using(datasource.getConnectionPool().acquire(), connection -> {\n                return Mono.fromCompletionStage(queryExecutor.execute(connection, queryExecutionContext));\n            }, Connection::close);\n        });\n    }", "CodeBleu_score": 38.24958340390177}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return 0;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        if (unitInfo.getRight() == -1) {\n            return convertToMs(Double.parseDouble(timeoutStr), \"ms\");\n        }\n        String unit = unitInfo.getLeft();\n        String valueStr = timeoutStr.substring(0, unitInfo.getRight());\n        double value = Double.parseDouble(valueStr);\n        if (value > MAX_QUERY_TIMEOUT_IN_SECONDS) {\n            throw new IllegalArgumentException(String.format(\"Query timeout value %s exceeds maximum allowed value %s\", value, MAX_QUERY_TIMEOUT_IN_SECONDS));\n        }\n        return convertToMs(value, unit);\n    }", "CodeBleu_score": 44.336258893966054}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n    if (unitIndex == -1) {\n        throw new IllegalArgumentException(\"Invalid timeout format: \" + timeoutStr);\n    }\n\n    String valueStr = timeoutStr.substring(0, unitIndex);\n    double value;\n    try {\n        value = Double.parseDouble(valueStr);\n    } catch (NumberFormatException e) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + valueStr);\n    }\n\n    int ms = convertToMs(value, unit);\n    if (ms < 0) {\n        throw new IllegalArgumentException(\"Timeout value must be positive: \" + ms);\n    }\n    if (ms > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed: \" + ms);\n    }\n\n    return ms;\n}", "CodeBleu_score": 64.22650571439623}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MS;\n        }\n        Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n        double value = Double.parseDouble(timeoutStr.substring(0, unitInfo.getRight()));\n        int unitMs = convertToMs(value, unitInfo.getLeft());\n        if (unitMs > MAX_QUERY_TIMEOUT_MS) {\n            throw new IllegalArgumentException(String.format(\"Query timeout %s exceeds maximum allowed value %s\", timeoutStr, MAX_QUERY_TIMEOUT_MS));\n        }\n        return unitMs;\n    }", "CodeBleu_score": 40.100692765486116}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return liveQueryService.getLiveQueriesByApplicationId(application.getId())\n                .flatMapMany(Flux::fromIterable)\n                .flatMap(liveQuery -> {\n                    List<String> datasourceIds = liveQuery.getDatasourceIds();\n                    if (datasourceIds == null || datasourceIds.isEmpty()) {\n                        return Mono.error(new IllegalArgumentException(\"No datasource found in live query\"));\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                    .map(copiedDatasourceId -> Pair.of(datasourceId, copiedDatasourceId)));\n                })\n                .collectList();\n    }", "CodeBleu_score": 48.076816448944996}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return liveQueryService.getLiveQueries(application.getId())\n                .map(liveQueries -> liveQueries.stream()\n                        .map(liveQuery -> liveQuery.getDatasourceId())\n                        .collect(Collectors.toList()))\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new IllegalArgumentException(\"No datasource found\"));\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                            .collectList()\n                            .map(copiedDatasourceIds -> datasourceIds.stream()\n                                    .map(originalDatasourceId -> Pair.of(originalDatasourceId, copiedDatasourceIds.get(datasourceIds.indexOf(originalDatasourceId))))\n                                    .collect(Collectors.toList()));\n                });\n    }", "CodeBleu_score": 35.89990866758745}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return liveQueryService.getLiveQueries(application.getId())\n                .flatMapMany(Flux::fromIterable)\n                .flatMap(liveQuery -> datasourceService.getById(liveQuery.getDatasourceId()))\n                .filter(datasource -> !datasource.isSystemStatic())\n                .map(datasource -> datasource.getId())\n                .distinct()\n                .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                .collectList()\n                .flatMap(copiedDatasourceIds -> {\n                    List<Pair<String, String>> originalAndCopiedDatasourceIds = new ArrayList<>();\n                    for (Datasource datasource : application.getDatasources()) {\n                        if (!datasource.isSystemStatic() && !datasource.isLegacyQuickRestApi() && !datasource.isLegacyOpenblocksApi()) {\n                            originalAndCopiedDatasourceIds.add(new Pair<>(datasource.getId(), copiedDatasourceIds.get(copiedDatasourceIds.indexOf(datasource.getId()))));\n                        }\n                    }\n                    return Mono.just(originalAndCopiedDatasourceIds);\n                });\n    }", "CodeBleu_score": 34.392722672191354}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.get(datasourceId)\n            .map(datasource -> {\n                if (DatasourceType.SYSTEM_STATIC.equals(datasource.getType())) {\n                    return datasource.getId();\n                }\n                if (DatasourceType.LEGACY_QUICK_REST_API.equals(datasource.getType())) {\n                    return datasource.getDetailConfig().get(\"newId\");\n                }\n                if (DatasourceType.LEGACY_OPENBLOCKS_API.equals(datasource.getType())) {\n                    return datasource.getDetailConfig().get(\"newId\");\n                }\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            })\n            .flatMap(Mono::fromSupplier)\n            .flatMap(Mono::just);\n}", "CodeBleu_score": 58.68084278832421}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.get(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC.getValue()) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.getCreationSource() == DatasourceCreationSource.QUICK_REST_API.getValue()\n                        || datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API.getValue()) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 57.96737001788762}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getDatasourceById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getCreationSource() == DatasourceCreationSource.SYSTEM_STATIC.getValue()) {\n                    return Mono.just(datasourceId);\n                }\n\n                if (datasource.getCreationSource() == DatasourceCreationSource.LEGACY_QUICK_REST_API.getValue()\n                        || datasource.getCreationSource() == DatasourceCreationSource.LEGACY_OPENBLOCKS_API.getValue()) {\n                    return Mono.just(datasource.getId());\n                }\n\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            });\n}", "CodeBleu_score": 65.73478139349156}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return mongoUpsertHelper.updateById(user, user.getId())\n                .flatMap(success -> {\n                    if (success) {\n                        return uploadFile(filePart, user.getAvatar())\n                                .flatMap(asset -> {\n                                    if (user.getAvatar() != null) {\n                                        return deleteFile(user.getAvatar())\n                                                .flatMap(deleted -> {\n                                                    if (deleted) {\n                                                        return updateUserAvatar(asset, user.getId());\n                                                    } else {\n                                                        return Mono.just(false);\n                                                    }\n                                                });\n                                    } else {\n                                        return updateUserAvatar(asset, user.getId());\n                                    }\n                                });\n                    } else {\n                        return Mono.just(false);\n                    }\n                });\n    }", "CodeBleu_score": 22.262278287295015}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return Mono.from(filePart.content())\n                .flatMap(content -> {\n                    Asset asset = new Asset();\n                    asset.setContent(content);\n                    asset.setContentType(filePart.headers().getContentType());\n                    return assetService.save(asset);\n                })\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.delete(user.getAvatar())\n                                .flatMap(deleted -> updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 31.59899118843392}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return uploadPhoto(filePart)\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return deletePhoto(user.getAvatar())\n                                .flatMap(deleted -> updateUserAvatar(asset, user.getId()));\n                    } else {\n                        return updateUserAvatar(asset, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 27.155870705249374}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t        User user = new User();\n        user.setName(authUser.getName());\n        user.setState(UserState.NEW);\n        user.setEnabled(true);\n        user.setAvatarLink(authUser.getAvatarLink());\n        if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(\"password\")) {\n            user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\")));\n        }\n        user.setUserConnections(authUser.getUserConnections());\n        user.setNew(true);\n        return create(user);\n    }", "CodeBleu_score": 40.776162422108854}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(State.ACTIVE);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n\n    if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n    }\n\n    user.setUserConnections(authUser.getUserConnections());\n    user.setNew(true);\n\n    return repository.save(user);\n}", "CodeBleu_score": 43.40451238914247}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NEW);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n        user.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(AuthContext.PASSWORD)));\n    }\n    user.setUserConnections(authUser.getUserConnections());\n    user.setNew(true);\n    return repository.save(user);\n}", "CodeBleu_score": 43.60931880283365}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        try {\n            if (user.getEmail() != null) {\n                throw new DuplicateKeyException(\"User already has an email\");\n            }\n            user.setEmail(email);\n            userRepository.save(user);\n            return true;\n        } catch (DuplicateKeyException e) {\n            return false;\n        }\n    }).onErrorResume(e -> {\n        if (e instanceof DuplicateKeyException) {\n            return Mono.just(false);\n        }\n        return Mono.error(e);\n    });\n}", "CodeBleu_score": 33.97345290812457}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.fromCallable(() -> {\n        if (user.getConnections().stream().anyMatch(c -> c.getSource().equals(email))) {\n            throw new DuplicateKeyException(\"Email already bound to user\");\n        }\n        user.getConnections().add(new Connection(email, Connection.Source.EMAIL));\n        return userRepository.save(user).block() != null;\n    }).onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 26.289637930857126}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.just(email)\n        .flatMap(emailSourceRepository::findByEmail)\n        .flatMap(emailSource -> {\n            user.addConnection(new Connection(emailSource, email));\n            return userRepository.save(user);\n        })\n        .map(user -> true)\n        .onErrorResume(DuplicateKeyException.class, error -> Mono.just(false))\n        .onErrorResume(error -> Mono.error(error));\n}", "CodeBleu_score": 23.743088595691315}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .filter(user -> encryptionService.isValidPassword(oldPassword, user.getPassword()))\n            .switchIfEmpty(Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\")))\n            .flatMap(user -> {\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 28.125574999801778}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t        return findById(userId)\n                .map(user -> {\n                    if (encryptionService.isValidPassword(oldPassword, user.getPassword())) {\n                        user.setPassword(encryptionService.encryptPassword(newPassword));\n                        return user;\n                    }\n                    return null;\n                })\n                .flatMap(repository::save)\n                .thenReturn(true)\n                .onErrorReturn(false);\n    }", "CodeBleu_score": 29.70434908668827}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .filter(user -> encryptionService.isValidPassword(oldPassword, user.getPassword()))\n            .map(user -> {\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true)\n            .switchIfEmpty(Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\")));\n}", "CodeBleu_score": 30.357802145486346}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        return getGroups(userId, withoutDynamicGroups)\n                .map(groups -> groups.stream()\n                        .filter(it -> !it.getId().equals(ALL_USERS_GROUP_ID))\n                        .map(it -> {\n                            String localizedName = it.getLocalizedName(locale);\n                            if (StringUtils.isBlank(localizedName)) {\n                                localizedName = it.getName();\n                            }\n                            return ImmutableMap.of(it.getId(), localizedName);\n                        })\n                        .collect(Collectors.toList())\n                );\n    }", "CodeBleu_score": 28.149705492735045}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return Mono.just(List.of(\n                    Map.of(GROUP_ID_KEY, ALL_USERS_GROUP_ID, GROUP_NAME_KEY, ALL_USERS_GROUP_NAME)\n            ));\n        }\n\n        if (withoutDynamicGroups) {\n            return Mono.just(List.of());\n        }\n\n        return getUserDetailGroups(userId, locale)\n                .filter(it -> !it.get(GROUP_ID_KEY).equals(ALL_USERS_GROUP_ID))\n                .map(it -> Map.of(GROUP_ID_KEY, it.get(GROUP_ID_KEY), GROUP_NAME_KEY, it.get(GROUP_NAME_KEY)))\n                .collectList();\n    }", "CodeBleu_score": 29.30993479504541}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return repository.findAllGroups(userId)\n                    .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n                    .map(group -> {\n                        Map<String, String> map = new HashMap<>();\n                        map.put(\"id\", group.getId());\n                        map.put(\"name\", group.getLocalizedName(locale));\n                        return map;\n                    })\n                    .collectList();\n        }\n        return repository.findGroupsByUserIdAndOrganizationId(userId, orgMember.getOrganizationId())\n                .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n                .map(group -> {\n                    Map<String, String> map = new HashMap<>();\n                    map.put(\"id\", group.getId());\n                    map.put(\"name\", group.getLocalizedName(locale));\n                    return map;\n                })\n                .collectList();\n    }", "CodeBleu_score": 31.451601399705066}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.class, UserStatus::getUserId, userId);\n}", "CodeBleu_score": 38.89903907119955}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper.upsert(userStatus, new Query(Criteria.where(\"userId\").is(userId)), UserStatus.class);\n}", "CodeBleu_score": 37.568428984468504}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    return Mono.just(UserStatus.builder().userId(userId).hasShowNewUserGuidance(true).build())\n            .flatMap(userStatus -> mongoUpsertHelper.upsert(userStatus, UserStatus.class,\n                    query(where(\"userId\").is(userId)),\n                    \"userStatus\"));\n}", "CodeBleu_score": 34.29313824006613}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\trunGroup := NewRunGroup()\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.key, p.manager) {\n\t\t\trunGroup.Run(func() {\n\t\t\t\tp.manager.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trunGroup.Wait()\n}", "CodeBleu_score": 34.6995060724331}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tgroup := NewRunGroup()\n\n\tfor partitionName, partition := range c.partitions {\n\t\tif predicatePartition(partitionName, partition) {\n\t\t\tgroup.Run(func() {\n\t\t\t\tfor k, v := range partition.items {\n\t\t\t\t\tif predicateValue(k, v) {\n\t\t\t\t\t\tpartition.Delete(k)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tgroup.Wait()\n}", "CodeBleu_score": 41.448149945086165}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\trunGroup := run.NewGroup()\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.Name(), partition) {\n\t\t\trunGroup.Run(func() {\n\t\t\t\tpartition.ClearMatching(predicateValue)\n\t\t\t})\n\t\t}\n\t}\n\trunGroup.Wait()\n}", "CodeBleu_score": 36.56421656381955}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn (maxItemsTotal * averageWeightPerPartition) / totalWeightQuantity\n}", "CodeBleu_score": 37.575108974202024}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Floor(avgWeightPerPartition * 100))\n}", "CodeBleu_score": 39.837893620956336}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\treturn int(math.Ceil(avgWeightPerPartition * 2.0))\n}", "CodeBleu_score": 39.40691128939564}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    return getConnectionMetadata()\n            .map(metadata -> {\n                Map<String, Object> map = new HashMap<>();\n                if (metadata != null) {\n                    map.put(\"database.product.name\", metadata.getDatabaseProductName());\n                    map.put(\"database.product.version\", metadata.getDatabaseProductVersion());\n                }\n                return map;\n            })\n            .block();\n}", "CodeBleu_score": 40.10749456232149}, {"code": "public Map<String, Object> contributorMap(){\n\t    return getConnectionMetadata().map(metadata -> {\n        Map<String, Object> map = new HashMap<>();\n        if (metadata != null) {\n            map.put(\"database.product.name\", metadata.getDatabaseProductName());\n            map.put(\"database.product.version\", metadata.getDatabaseProductVersion());\n        }\n        return map;\n    }).block();\n}", "CodeBleu_score": 43.45207196941999}, {"code": "public Map<String, Object> contributorMap(){\n\t        return getConnectionMetadata().map(metadata -> {\n            Map<String, Object> result = new HashMap<>();\n            if (metadata != null) {\n                result.put(\"database.product.name\", metadata.getDatabaseProductName());\n                result.put(\"database.version\", metadata.getDatabaseProductVersion());\n            }\n            return result;\n        }).block();\n    }", "CodeBleu_score": 39.80826105525282}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSetting userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setDisableRegistration(true);\n        info.setDisableEmailVerification(true);\n    } else {\n        info.setDisableRegistration(userSetting.isDisableRegistration());\n        info.setDisableEmailVerification(userSetting.isDisableEmailVerification());\n    }\n}", "CodeBleu_score": 38.85647591370406}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSetting userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setRegistration(false);\n        info.setEmailVerification(false);\n    } else {\n        info.setRegistration(userSetting.isRegistration());\n        info.setEmailVerification(userSetting.isEmailVerification());\n    }\n}", "CodeBleu_score": 43.13455799800654}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    UserSetting userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setDisableRegistration(true);\n        info.setDisableEmailVerification(true);\n    } else {\n        info.setDisableRegistration(userSetting.getDisableRegistration());\n        info.setDisableEmailVerification(userSetting.getDisableEmailVerification());\n    }\n}", "CodeBleu_score": 39.18306827004258}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, \"restart\", new ApplicationRestart(this.applicationClassLoader));\n    thread.setContextClassLoader(this.applicationClassLoader);\n    thread.setDaemon(false);\n    thread.start();\n    return \"restart has begun\";\n}", "CodeBleu_score": 56.765695155772256}, {"code": "public Object restart(){\n\t    new ThreadGroup(\"\") {\n        public void uncaughtException(Thread t, Throwable e) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e1) {\n                e1.printStackTrace();\n            }\n            new Thread(new Runnable() {\n                public void run() {\n                    Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                    Thread.currentThread().setDaemon(false);\n                    Thread.currentThread().start();\n                }\n            }).start();\n        }\n    }.uncaughtException(Thread.currentThread(), new Throwable());\n    return \"Restarting...\";\n}", "CodeBleu_score": 21.39711232424838}, {"code": "public Object restart(){\n\t    ThreadGroup tg = new ThreadGroup(\"restart\");\n    Thread t = new Thread(tg, new Runnable() {\n        @Override\n        public void run() {\n            try {\n                Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n                Thread.currentThread().setDaemon(false);\n                Thread.currentThread().start();\n            } catch (Throwable e) {\n                throw new RuntimeException(e);\n            }\n        }\n    });\n    t.start();\n    return \"restart has begun\";\n}", "CodeBleu_score": 39.421354730427964}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n}", "CodeBleu_score": 71.82220753180427}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n}", "CodeBleu_score": 53.821658598136366}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t    configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper, MediaType.APPLICATION_JSON));\n    configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper, MediaType.APPLICATION_JSON));\n}", "CodeBleu_score": 53.821658598136366}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return RouterFunctions.route(\n                GET(\"/console/**\").and(accept(MediaType.TEXT_HTML)),\n                request -> {\n                    if (request.path().contains(\"/assets/\") || request.path().contains(\"/favicon.ico\")) {\n                        return Mono.empty();\n                    }\n                    if (request.uri().getQuery() != null) {\n                        return Mono.empty();\n                    }\n                    if (request.attribute(WebSocketAttributes.WEBSOCKET).isPresent()) {\n                        return Mono.empty();\n                    }\n                    return serveIndex(indexLocation);\n                });\n    }", "CodeBleu_score": 24.316121342654288}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return RouterFunctions.route(\n            RequestPredicates.GET(\"/console/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML)),\n            request -> {\n                if (request.path().contains(\"/console/assets/\")) {\n                    return Mono.empty();\n                }\n                return serveIndex(consoleIndexLocation);\n            });\n    }", "CodeBleu_score": 23.408896779505472}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t        return RouterFunctions.route(\n            GET(\"/console/**\").and(accept(MediaType.TEXT_HTML)),\n            request -> {\n                var consoleIndexLocation = properties.getConsole().getIndexLocation();\n                var consoleIndexPath = request.path().replace(\"/console\", consoleIndexLocation);\n                return serveIndex(consoleIndexPath);\n            })\n            .andRoute(\n                GET(\"/console/**\").and(accept(MediaType.TEXT_HTML)).and(predicate -> !predicate.request().path().contains(\"/console/assets/\")).and(predicate -> !predicate.request().path().contains(\"/console/api/\")).and(predicate -> !predicate.request().path().contains(\"/console/ws/\")),\n                request -> {\n                    var consoleIndexLocation = properties.getConsole().getIndexLocation();\n                    var consoleIndexPath = request.path().replace(\"/console\", consoleIndexLocation);\n                    return serveIndex(consoleIndexPath);\n                })\n            .andRoute(\n                GET(\"/console/assets/**\").and(accept(MediaType.TEXT_HTML)),\n                request -> {\n                    var consoleIndexLocation = properties.getConsole().getIndexLocation();\n                    var consoleIndexPath = request.path().replace(\"/console\", consoleIndexLocation);\n                    return serveIndex(consoleIndexPath);\n                })\n            .andRoute(\n                GET(\"/console/ws/**\").and(accept(MediaType.TEXT_HTML)),\n                request -> {\n                    var consoleIndexLocation = properties.getConsole().getIndexLocation();\n                    var consoleIndexPath = request.path().replace(\"/console\", consoleIndexLocation);\n                    return serveIndex(consoleIndexPath);\n                });\n    }", "CodeBleu_score": 38.73089011076932}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\").and(RequestPredicates.accept(MediaType.TEXT_HTML)),\n            request -> {\n                var indexLocation = \"classpath:/static/index.html\";\n                return serveIndex(indexLocation);\n            });\n    }", "CodeBleu_score": 21.360326182723156}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n                .and(RequestPredicates.not(RequestPredicates.websocket())),\n            this::serveIndex);\n    }", "CodeBleu_score": 27.087734405329183}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t        return RouterFunctions.route(RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.path(\"/uc/assets/**\")))\n                .and(RequestPredicates.not(RequestPredicates.websocket())),\n            request -> serveIndex(ucLocation + \"/index.html\"));\n    }", "CodeBleu_score": 27.643071174950094}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveSessionRepository(new ConcurrentHashMap<>(), sessionProperties.getTimeout().toMillis());\n}", "CodeBleu_score": 13.427161057411935}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    return new InMemoryReactiveSessionRepository<>(new ConcurrentHashMap<>(), sessionTimeout);\n}", "CodeBleu_score": 10.445690525993705}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    MapSessionRepository sessionRepository = new MapSessionRepository(new ConcurrentHashMap<>());\n    sessionRepository.setDefaultMaxInactiveInterval(sessionProperties.getTimeout().toMillis());\n    return new ReactiveMapSessionRepository(sessionRepository);\n}", "CodeBleu_score": 31.654180245603925}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().isEnableTwoFactorAuthentication());\n    return userDetailService;\n}", "CodeBleu_score": 50.74858694132621}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().getEnableTwoFactorAuthentication());\n    return userDetailService;\n}", "CodeBleu_score": 50.821104907728895}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setEnableTwoFactorAuthentication(haloProperties.getSecurity().getEnableTwoFactorAuthentication());\n    return userDetailService;\n}", "CodeBleu_score": 50.821104907728895}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(this.getEmail() != null ? this.getEmail() : \"\");\n    commentOwner.setDisplayName(this.getDisplayName());\n    commentOwner.setAvatar(this.getAvatar());\n    commentOwner.setWebsite(this.getWebsite());\n    return commentOwner;\n}", "CodeBleu_score": 36.264972466309764}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    return new Comment.CommentOwner()\n            .setKind(\"email\")\n            .setEmail(getEmail() != null ? getEmail() : \"\")\n            .setDisplayName(getDisplayName())\n            .setAvatar(new Annotation().setDisplayName(getAvatar()))\n            .setWebsite(new Annotation().setDisplayName(getWebsite()));\n}", "CodeBleu_score": 11.730395368850902}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    Comment.CommentOwner.Builder builder = Comment.CommentOwner.newBuilder();\n    builder.setKind(\"email\");\n    builder.setEmail(this.getEmail() != null ? this.getEmail() : \"\");\n    builder.setDisplayName(this.getDisplayName());\n    builder.setAvatarUrl(this.getAvatarUrl());\n    builder.setWebsiteUrl(this.getWebsiteUrl());\n    return builder.build();\n}", "CodeBleu_score": 22.867526230606313}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.kind == \"email\") {\n        User user = User.getUserByPostOwner(post);\n        return user.email == commentOwner.name;\n    } else {\n        return commentOwner.name == post.owner.name;\n    }\n}", "CodeBleu_score": 19.84126770005494}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.kind == 'email') {\n        User user = User.getByEmail(post.owner.email);\n        if (user == null) {\n            return false;\n        }\n        return user.name == commentOwner.name;\n    }\n    return commentOwner.name == post.owner.name;\n}", "CodeBleu_score": 25.319580568001186}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.kind == \"email\") {\n        User user = User.getByEmail(post.owner.email);\n        if (user != null) {\n            return user.email == commentOwner.name;\n        }\n    }\n    return commentOwner.name == post.owner.name;\n}", "CodeBleu_score": 23.548411927558032}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t        FieldSelectorBuilder fieldSelectorBuilder = new FieldSelectorBuilder();\n        fieldSelectorBuilder.add(labelSelector.getFieldSelector());\n        fieldSelectorBuilder.add(fieldSelector.getFieldSelector());\n        FieldSelector fieldSelector = fieldSelectorBuilder.build();\n        ListOptions listOptions = new ListOptions();\n        listOptions.setFieldSelector(fieldSelector);\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            listOptions.setFieldSelector(fieldSelector.add(\"metadata.ownerName\", getOwnerName()));\n        }\n        if (StringUtils.isNotBlank(getKeyword())) {\n            listOptions.setFieldSelector(fieldSelector.add(\"metadata.name\", getKeyword()));\n        }\n        return listOptions;\n    }", "CodeBleu_score": 30.266322731981603}, {"code": "public ListOptions toListOptions(){\n\t        ListOptions listOptions = new ListOptions();\n        listOptions.setFieldSelector(toFieldSelector());\n        listOptions.setLabelSelector(toLabelSelector());\n        listOptions.setOwnerName(getOwnerName());\n        listOptions.setOwnerKind(getOwnerKind());\n        listOptions.setKeyword(getKeyword());\n        return listOptions;\n    }", "CodeBleu_score": 14.679017610890115}, {"code": "public ListOptions toListOptions(){\n\t        ListOptions listOptions = new ListOptions();\n        listOptions.setFieldSelector(toFieldSelector());\n        if (StringUtils.isNotBlank(getKeyword())) {\n            listOptions.addCondition(new Condition(getKeyword(), Condition.Operator.LIKE));\n        }\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            listOptions.addCondition(new Condition(getOwnerName(), Condition.Operator.EQUAL));\n        }\n        return listOptions;\n    }", "CodeBleu_score": 20.935112957546835}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .flatMap(name -> reactiveCounterService.fetchCounter(name))\n            .map(counter -> new CommentStats(counter.getUpvoteCount(), counter.getDownvoteCount()))\n            .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 39.92004961195634}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.just(commentName)\n        .filter(Objects::nonNull)\n        .flatMap(c -> counterService.fetchCounter(c)\n            .map(counter -> new CommentStats(commentName, counter.getUpvotes())))\n        .switchIfEmpty(Mono.just(new CommentStats(commentName, 0)));\n}", "CodeBleu_score": 40.16093031786696}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    return Mono.justOrEmpty(commentName)\n            .flatMap(name -> counterRepository.findById(name))\n            .map(counter -> new CommentStats(counter.getCount()));\n}", "CodeBleu_score": 34.88201965551641}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason reason = new Subscription.InterestReason();\n    reason.setType(Subscription.InterestReason.Type.REPLY);\n    reason.setCondition(new Subscription.InterestReason.Condition());\n    reason.getCondition().setReplyOwner(identity.name());\n\n    subscribe(subscriber, reason);\n}", "CodeBleu_score": 59.093540405248866}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.Reason reason = new Subscription.Reason();\n    reason.setType(Subscription.Reason.Type.REPLY);\n    reason.setCondition(new Subscription.Reason.Condition());\n    reason.getCondition().setOwner(identity.name());\n\n    Subscription.SubscriptionResult result = Subscription.subscribe(subscriber, reason);\n    result.blockingAwait();\n}", "CodeBleu_score": 56.37604193824182}, {"code": "void subscribeReply(UserIdentity identity){\n\t    Subscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason interestReason = new Subscription.InterestReason();\n    interestReason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n    interestReason.setCondition(new Subscription.InterestReason.Condition());\n    interestReason.getCondition().setOwner(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterestReason(interestReason);\n\n    NotificationCenter.subscribe(subscription, new Subscription.SubscribeCallback() {\n        @Override\n        public void onSuccess() {\n            // Subscription successful\n        }\n\n        @Override\n        public void onFailure(Throwable error) {\n            // Subscription failed\n        }\n    });\n}", "CodeBleu_score": 53.112175804616676}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovalTime(Instant.now());\n        return c;\n    });\n}", "CodeBleu_score": 18.74428604722576}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedAt(Instant.now());\n        return c;\n    });\n}", "CodeBleu_score": 18.58816497902717}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return updateCommentWithRetry(comment.getName(), c -> {\n        c.setApproved(true);\n        c.setApprovedAt(new Date());\n        return c;\n    });\n}", "CodeBleu_score": 17.607784162764588}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->record);\n    }\n\n    return $action;\n}", "CodeBleu_score": 56.06158231436995}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->component = $this;\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record = $this->record;\n    }\n\n    return $action;\n}", "CodeBleu_score": 49.319370624048645}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->component = $this;\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record = $this->record;\n    }\n\n    return $action;\n}", "CodeBleu_score": 45.75040900571027}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirect);\n\n    if ($url !== null) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 78.45133778526704}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $successRedirectUrl = $this->evaluate($this->successRedirectUrl);\n\n    if ($successRedirectUrl) {\n        $this->redirect($successRedirectUrl);\n    }\n\n    return $this;\n}", "CodeBleu_score": 69.83527069689977}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirectUrl);\n\n    if (! empty($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 83.674717042205}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null) {\n        return;\n    }\n\n    if (!method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $this->getTagModel();\n\n    $tagNames = array_map(static function ($tag) {\n        return trim($tag);\n    }, $state['tags']);\n\n    $tags = $tagModel->findOrCreate($tagNames);\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 34.669137011991054}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if ($record === null || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $record->tags();\n    $tagNames = explode(',', $state['tags']);\n    $tagIds = [];\n\n    foreach ($tagNames as $tagName) {\n        $tagName = trim($tagName);\n\n        if (empty($tagName)) {\n            continue;\n        }\n\n        $tag = $tagModel->firstOrCreate(['name' => $tagName]);\n        $tagIds[] = $tag->id;\n    }\n\n    $record->tags()->sync($tagIds);\n}", "CodeBleu_score": 36.67971972489705}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    $tagModelClass = $this->getTagModelClass();\n\n    if ($record === null || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    if (empty($state['tags'])) {\n        $record->tags()->sync([]);\n        return;\n    }\n\n    $tagModel = new $tagModelClass();\n    $tagIds = [];\n\n    foreach ($state['tags'] as $tagName) {\n        $tag = $tagModel->firstOrCreate(['name' => $tagName]);\n        $tagIds[] = $tag->id;\n    }\n\n    $record->tags()->sync($tagIds);\n}", "CodeBleu_score": 33.88112267963675}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, repoName, err := util.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.GetScope(authz.ResourceTypePipeline, spacePath, repoName)\n\tresource := authz.GetResource(authz.ResourceTypePipeline, spacePath, repoName, pipelineIdentifier)\n\n\treturn authorizer.Check(ctx, authorizer.LoadPolicyContext(ctx, session), scope, resource, permission)\n}", "CodeBleu_score": 54.965229131150586}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := util.DissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := util.GetScope(session, spacePath)\n\tresource := util.GetPipelineResource(repoName, pipelineIdentifier)\n\n\treturn authorizer.Check(ctx, authorizer.WithMethod(string(permission)), authorizer.WithSession(session),\n\t\tauthorizer.WithScope(scope), authorizer.WithResource(resource))\n}", "CodeBleu_score": 41.93730322954329}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := dissectRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := authz.NewScope(authz.ResourceTypePipeline, spacePath, repoName)\n\tresource := authz.NewResource(authz.ResourceTypePipeline, spacePath, repoName, pipelineIdentifier)\n\n\treturn authorizer.Check(ctx, authorizer.GetAuthorizedIdentity(ctx, session), scope, resource, permission)\n}", "CodeBleu_score": 53.96701263885376}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := space.Parent(), space.Name()\n\n\tscope := authz.Scope{\n\t\tType: \"space\",\n\t\tID:   parentSpace,\n\t}\n\n\tresource := authz.Resource{\n\t\tType: \"space\",\n\t\tName: name,\n\t}\n\n\treturn authorizer.Check(ctx, authorizer.Session(session), scope, resource, permission)\n}", "CodeBleu_score": 49.33246616968877}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tscope, resource, err := space.ScopeAndResource()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 37.19676699138553}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparentSpace, name := space.Path.Parent(), space.Path.Name()\n\tscope := authz.Scope{\n\t\tType:       authz.TypeSpace,\n\t\tID:         parentSpace.ID,\n\t\tName:       parentSpace.Name,\n\t\tParentName: parentSpace.ParentName,\n\t}\n\tresource := authz.Resource{\n\t\tType:  authz.TypeSpace,\n\t\tID:    space.ID,\n\t\tName:  name,\n\t\tScope: scope,\n\t}\n\treturn authorizer.Check(ctx, authorizer.Session(session), scope, resource, permission)\n}", "CodeBleu_score": 51.22604554339938}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar sanitized any\n\tif err := json.Unmarshal(source, &sanitized); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult, err := json.Marshal(sanitized)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult = bytes.TrimRight(result, \"\n\")\n\n\treturn result, nil\n}", "CodeBleu_score": 40.682537666751514}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar raw interface{}\n\tif err := json.Unmarshal(source, &raw); err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult, err := json.Marshal(raw)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(result, \"\n\"), nil\n}", "CodeBleu_score": 32.28292321908812}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar payload map[string]any\n\tif err := json.Unmarshal(source, &payload); err != nil {\n\t\treturn nil, err\n\t}\n\n\tpayload, err := sanitizePayload(payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tresult, err := json.Marshal(payload)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(result, []byte(\"\n\")), nil\n}", "CodeBleu_score": 37.17617990818905}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 37.90507287867934}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepo, err := c.validateRepoRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err = c.store.GetRepository(ctx, repo.ID)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif !auth.CheckPermission(session, repo, reqPermission) {\n\t\treturn nil, errors.ErrUnauthorized\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 49.249160131208306}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 37.90507287867934}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:   createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.11962240946978}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tsanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:      createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n\n\treturn sanitizers\n}", "CodeBleu_score": 33.035000827936386}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{}\n\n\tcheckSanitizers[enum.CheckPayloadKindEmpty] = createEmptyPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindRaw] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindMarkdown] = createRawPayloadSanitizer()\n\tcheckSanitizers[enum.CheckPayloadKindPipeline] = createPipelinePayloadSanitizer()\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 56.37473794030855}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t    if self.renderer == nil then\n        self.renderer = on_render\n        self.state.on_render = on_render\n    end\n    return self", "CodeBleu_score": 42.287442435125186}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    self.state.on_render = on_render\n    if not self.state.attached then\n        self.state.attached = true\n        self.renderer:attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 58.41751170283791}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t    if self.renderer ~= nil then\n        self.state.on_render = on_render\n    else\n        self.renderer = renderer\n        self.state.on_render = on_render\n        self.renderer.attach_buffer(self)\n    end\n    return self", "CodeBleu_score": 52.419082246883164}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    local buffer = self\n    local filename = buffer:get_filename()\n    if filename ~= nil then\n        local watcher = vim.loop.new_fs_watcher()\n        watcher:set_callback(function(_, events)\n            if events.error then\n                vim.notify(\"Error watching file: \" .. events.error, vim.log.levels.ERROR)\n            elseif events.modified then\n                callback(buffer)\n            end\n        end)\n        watcher:start(filename)\n    end", "CodeBleu_score": 40.770127791976144}, {"code": "function Buffer:watch(callback)\n\t    local filename = vim.api.nvim_buf_get_name(self.id)\n    if filename == nil then\n        return\n    end\n\n    local watcher = vim.loop.new_fs_watcher()\n    vim.schedule(function()\n        local err = watcher:watch(filename, function()\n            if err then\n                vim.notify(err, vim.log.levels.ERROR)\n                return\n            end\n\n            if callback then\n                callback()\n            end\n        end)\n\n        if err then\n            vim.notify(err, vim.log.levels.ERROR)\n        end\n    end)", "CodeBleu_score": 45.042793002016715}, {"code": "function Buffer:watch(callback)\n\t    if not self.buffer:is_valid() then\n        return\n    end\n\n    if not callback then\n        return\n    end\n\n    local filename = self.buffer:filename()\n\n    if not filename then\n        return\n    end\n\n    local watcher = vim.loop.new_fs_watcher()\n\n    watcher:set_callback(function()\n        callback()\n    end)\n\n    watcher:start(filename, {\n        recursive = false,\n        interval = 1000\n    })\n\n    self.watcher = watcher\n\n    -- Check for changes on startup\n    callback()", "CodeBleu_score": 45.6406519422513}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local color = self.color\n  local spec = color.spec\n  local attr = color.attr\n  local highlight_group = color.highlight_group\n\n  if spec.name then\n    local ok, hex = pcall(vim.api.nvim_get_hl_by_name, spec.name, true)\n    if ok then\n      self.hex = hex.foreground\n      return self.hex\n    end\n  end\n\n  local hex = nil\n  if attr == \"foreground\" then\n    hex = spec.foreground\n  elseif attr == \"background\" then\n    hex = spec.background\n  elseif attr == \"foreground_highlight\" then\n    hex = spec.foreground_highlight\n  elseif attr == \"background_highlight\" then\n    hex = spec.background_highlight\n  end\n\n  if hex then\n    self.hex = hex\n    return self.hex\n  end\n\n  local ok, hex = pcall(vim.api.nvim_get_hl_by_name, highlight_group, true)\n  if ok then\n    self.hex = hex.foreground\n    return self.hex\n  end\n\n  return nil", "CodeBleu_score": 54.90326902629191}, {"code": "function Color:to_hex()\n\t  if self.hex then \n    return self.hex \n  end \n  local spec = self.spec \n  local attr = spec.attr \n  local fg = spec.fg \n  local bg = spec.bg \n  local hl = spec.hl \n  local hl_group = spec.hl_group \n  local hl_name = spec.hl_name \n  local hl_spec = spec.hl_spec \n  local hl_link = spec.hl_link \n  local hl_link_spec = spec.hl_link_spec \n  local hl_link_group = spec.hl_link_group \n  local hl_link_name = spec.hl_link_name \n  local hl_link_spec = spec.hl_link_spec \n  local hl_link_group = spec.hl_link_group \n  local hl_link_name = spec.hl_link_name \n  local hl_link_spec = spec.hl_link_spec \n  local hl_link_group = spec.hl_link_group \n  local hl_link_name = spec.hl_link_name \n  local hl_link_spec = spec.hl_link_spec \n  local hl_link_group = spec.hl_link_group \n  local hl_link_name = spec.hl_link_name \n  local hl_link_spec = spec.hl_link_spec \n  local hl_link_group = spec.hl_link_group \n  local hl_link_name = spec.hl_link_name \n  local hl_link_spec = spec.hl_link_spec \n  local hl_link_group = spec.hl_link_group \n  local hl_link_name = spec.hl_link_name \n  local hl_link_spec = spec.hl_link_spec \n  local hl_link_group = spec.hl_link_group \n  local hl_link_name = spec.hl_link_name \n  local hl_link_spec = spec.hl", "CodeBleu_score": 36.01388001851392}, {"code": "function Color:to_hex()\n\t    if self.hex then\n        return self.hex\n    end\n\n    local spec = self:get_spec()\n    local attr = self:get_attr()\n    local highlight_group = attr == \"fg\" and \"Normal\" or \"Normal\"\n\n    local ok, hex = pcall(vim.api.nvim_get_hl_by_name, highlight_group, true)\n    if ok and hex then\n        self.hex = hex.foreground\n    else\n        self.hex = self:convert_to_hex()\n    end\n\n    return self.hex", "CodeBleu_score": 50.87104184549229}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n\n  for i, line in ipairs(lines) do\n    local match_start, match_end = string.find(line, pattern)\n\n    while match_start do\n      buffer:add_highlight(hl, i - 1, match_start, match_end)\n\n      match_start, match_end = string.find(line, pattern, match_end + 1)\n    end\n  end\n\n  return self", "CodeBleu_score": 50.92702440759127}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local ns = self.ns\n\n  for i, line in ipairs(lines) do\n    local col = 1\n    while true do\n      local start, end_ = string.find(line, pattern, col)\n      if not start then break end\n\n      buffer:add_highlight(hl, i, start, end_)\n      col = end_ + 1\n    end\n  end\n\n  return self", "CodeBleu_score": 54.32302316337607}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = buffer:get_lines()\n  local row = 0\n\n  for _, line in ipairs(lines) do\n    local col_top, col_end = line:find(pattern)\n\n    while col_top do\n      buffer:add_highlight(hl, row, col_top, col_end)\n\n      col_top, col_end = line:find(pattern, col_end + 1)\n    end\n\n    row = row + 1\n  end\n\n  return self", "CodeBleu_score": 53.54785703935114}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = Namespace:generate_id(row, col)\n    vim.api.nvim_buf_set_extmark(buffer, id, {\n        virt_text = { { text, hl } },\n        virt_pos = pos,\n        priority = priority,\n    })\n    return id", "CodeBleu_score": 56.68195691739886}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = buffer .. ':' .. row .. ':' .. col\n    vim.api.nvim_buf_set_extmark(buffer, id, {\n        end_row = row,\n        end_col = col,\n        start_row = row,\n        start_col = col,\n        hl_group = hl,\n        text = text,\n        priority = priority,\n        virtual_text = true\n    })\n    return id", "CodeBleu_score": 45.07873819604363}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = vim.fn.hash([[\n\t\trow:]] .. row .. [[\n\t\tcol:]] .. col .. [[\n\t\tpos:]] .. pos .. [[\n\t\tpriority:]] .. priority .. [[\n\t]])\n\tvim.api.nvim_buf_set_extmark(buffer, id, {\n\t\tend_row = row,\n\t\tend_col = col,\n\t\tvirt_text = { { text, hl } },\n\t\tpriority = priority,\n\t\tvirt_text_pos = pos,\n\t})\n\treturn id", "CodeBleu_score": 58.92243181011303}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = string.sub(output, i, i)\n\t\tif c == \"", "CodeBleu_score": 18.057188407712804}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal result = {}\n\tlocal line = \"\"\n\tlocal lines = {}\n\n\tfor i = 1, #output do\n\t\tlocal c = string.sub(output, i, i)\n\t\tline = line .. c\n\t\tif c == \"", "CodeBleu_score": 27.70954347370128}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal output = tostring(output)\n\tlocal line = \"\"\n\tlocal char\n\tfor i = 1, #output do\n\t\tchar = string.sub(output, i, i)\n\t\tif char == \"", "CodeBleu_score": 25.253315982628294}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t  -- Check if a watcher already exists for the specified path\n  if self.watchers[path] then\n    return self.watchers[path]\n  end\n\n  -- Create a new file system event watcher\n  local watcher = vim.loop.new_fs_event()\n\n  -- Start watching the specified path with the given handler\n  watcher:watch(path, {\n    recursive = true,\n    persistent = true,\n  }, handler)\n\n  -- Store the watcher instance in the watchers table\n  self.watchers[path] = watcher\n\n  -- Return the watcher instance\n  return watcher", "CodeBleu_score": 48.69133464247483}, {"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = vim.loop.new_fs_event()\n  watcher:start(path, handler, { recursive = true })\n  return watcher", "CodeBleu_score": 29.754701924931215}, {"code": "function Watcher:watch_file(path, handler)\n\t  local watcher = self.watchers[path]\n  if watcher then\n    return watcher\n  end\n  watcher = vim.loop.new_fs_event()\n  watcher:set_callback(function(_, _, _, _)\n    handler()\n  end)\n  watcher:start(path, \"\")\n  self.watchers[path] = watcher\n  return watcher", "CodeBleu_score": 49.51038777782006}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local hunks, err = self.git.hunks(self.buf)\n  if err then return err end\n\n  local sign_types = {\n    add = {\n      text = '+',\n      hl = 'GitAdd',\n      priority = 1000\n    },\n    delete = {\n      text = '-',\n      hl = 'GitDelete',\n      priority = 1000\n    },\n    change = {\n      text = '~',\n      hl = 'GitChange',\n      priority = 1000\n    },\n    conflict = {\n      text = '?',\n      hl = 'GitConflict',\n      priority = 1000\n    }\n  }\n\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      local sign_type = sign_types[line.type]\n      if sign_type then\n        signs[#signs + 1] = {\n          type = sign_type.text,\n          hl_group = sign_type.hl,\n          line = line.lineno,\n          priority = sign_type.priority\n        }\n      end\n    end\n  end\n\n  vim.fn.sign_define('GitAdd', {text = '+', texthl = 'GitAdd'})\n  vim.fn.sign_define('GitDelete', {text = '-', texthl = 'GitDelete'})\n  vim.fn.sign_define('GitChange', {text = '~', texthl = 'GitChange'})\n  vim.fn.sign_define('GitConflict', {text = '?', texthl = 'GitConflict'})\n\n  vim.fn.sign_define('GitStaged', {text = '\u2713', texthl = 'GitStaged'})\n  vim.fn.sign_define('GitUnstaged', {text = '\u2717', texthl = 'GitUnstaged'})\n\n  self.buf:set_signs(sign", "CodeBleu_score": 41.563791363397804}, {"code": "function GitBuffer:live_hunks()\n\t  local hunks = {}\n  local lines = self.buffer:get_lines(1, -1)\n  local line_count = #lines\n  local line_number = 1\n  local git = self.git\n  local git_object = git:get_object(self.commit)\n  if git_object == nil then\n    return \"git object is nil\"\n  end\n  local git_tree = git_object:get_tree()\n  if git_tree == nil then\n    return \"git tree is nil\"\n  end\n  local git_blob = git_tree:get_blob(self.file)\n  if git_blob == nil then\n    return \"git blob is nil\"\n  end\n  local git_diff = git_blob:get_diff()\n  if git_diff == nil then\n    return \"git diff is nil\"\n  end\n  local git_patch = git_diff:get_patch()\n  if git_patch == nil then\n    return \"git patch is nil\"\n  end\n  local patch_lines = git_patch:get_lines()\n  if patch_lines == nil then\n    return \"patch lines is nil\"\n  end\n  local patch_line_count = #patch_lines\n  local patch_line_number = 1\n  local patch_line = patch_lines[patch_line_number]\n  local line = lines[line_number]\n  while patch_line_number <= patch_line_count do\n    if patch_line:match(\"^@@\") then\n      local hunks_start_line = line_number\n      local hunks_end_line = line_number\n      while patch_line_number <= patch_line_count do\n        patch_line = patch_lines[patch_line_number]\n        if patch_line:match(\"^@@\") then\n          break\n        end\n        if patch_line:match(\"^[+-]\") then\n          hunks_end_line = hunks_end_line + 1\n        end\n        patch_line_number = patch_line_number + 1\n      end\n      local hunks_start_line_number = hunks_start_line\n      local hunks_end_line_number = hun", "CodeBleu_score": 38.60742032214921}, {"code": "function GitBuffer:live_hunks()\n\t  if not self.git then return end\n  local hunks = self.git:live_hunks()\n  if hunks then\n    self:setup_signs(hunks)\n    self:update_signs()\n  end\n  return hunks", "CodeBleu_score": 13.017627208187527}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local temp_file = io.open(os.tmpname(), 'w')\n  temp_file:write(patch.hunk)\n  temp_file:close()\n\n  local _, err = os.execute('git add ' .. temp_file:getname())\n\n  os.remove(temp_file:getname())\n\n  return err", "CodeBleu_score": 39.67705105683152}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local hunk = patch:get_hunk()\n  local patch_content = patch:get_patch()\n  local temp_file = io.open(os.tmpname(), 'w')\n  temp_file:write(patch_content)\n  temp_file:close()\n\n  local cmd = string.format('git apply --cached --unsafe-paths %s', temp_file:get_name())\n  local result, err = os.execute(cmd)\n  os.remove(temp_file:get_name())\n\n  if err then\n    error(err)\n  end\n\n  return result", "CodeBleu_score": 49.222158196154844}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local patch_file = io.open(os.tmpname(), \"w\")\n  patch_file:write(patch)\n  patch_file:close()\n\n  local result, err = os.execute(\"git apply --cached --index --3way \" .. patch_file:get_path())\n\n  if err then\n    os.remove(patch_file:get_path())\n    return err\n  end\n\n  os.remove(patch_file:get_path())\n  return result", "CodeBleu_score": 53.21075841891149}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t        OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\n        request.addHeader(HttpHeaders.AUTHORIZATION, getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(OAuthConstants.OAUTH_VERIFIER, verifier.getValue());\n        request.addBodyParameter(OAuthConstants.OAUTH_TOKEN, requestToken.getToken());\n\n        if (config.getCallback() != null) {\n            request.addBodyParameter(OAuthConstants.OAUTH_CALLBACK, config.getCallback());\n        }\n\n        Response response = request.send();\n        return config.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 56.65303294013848}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t        OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n        request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(\"grant_type\", \"authorization_code\");\n        request.addBodyParameter(\"code\", verifier.getValue());\n        request.addBodyParameter(\"redirect_uri\", config.getCallback());\n        request.addBodyParameter(\"client_id\", config.getApiKey());\n        request.addBodyParameter(\"client_secret\", config.getApiSecret());\n        Response response = request.send();\n        return config.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 52.90263154524079}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t        String url = config.getAccessTokenEndpoint();\n\n        OAuthRequest request = new OAuthRequest(Verb.POST, url);\n\n        request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n        request.addBodyParameter(\"grant_type\", \"authorization_code\");\n        request.addBodyParameter(\"code\", verifier.getValue());\n        request.addBodyParameter(\"redirect_uri\", config.getCallback());\n\n        if (config.hasScope()) {\n            request.addBodyParameter(\"scope\", config.getScope());\n        }\n\n        if (config.hasState()) {\n            request.addBodyParameter(\"state\", config.getState());\n        }\n\n        Response response = request.send();\n\n        return config.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 53.40081869941707}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credentialsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setAuthCache(authCache);\n    log.info(\"Added host to auth cache: \" + host);\n}", "CodeBleu_score": 62.57475712509607}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    context.setCredentialsProvider(new BasicCredentialsProvider());\n    context.getCredentialsProvider().setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n    context.getAuthCache().put(host, new BasicScheme());\n    LOG.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 29.864442399403647}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n    context.setCredentialsProvider(credentialsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n    log.info(\"Added host \" + host + \" to auth cache\");\n}", "CodeBleu_score": 59.05195805158668}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache avatarCache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (avatarCache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n    String key = avatarCache.getCacheKey(source);\n    avatarCache.seedCache(key, source);\n    try {\n        return jenkins.rootUrl + URLEncoder.encode(key, \"UTF-8\") + \"?size=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 54.33749737202491}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is not available\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension is not available\");\n    }\n    String key = source.getKey();\n    if (key == null) {\n        return null;\n    }\n    cache.seed(key, source);\n    try {\n        return jenkins.getRootUrl() + URLEncoder.encode(key, \"UTF-8\") + \"?s=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n    }\n}", "CodeBleu_score": 51.229730257954145}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins not available\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not available\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.seedCache(key, source);\n    try {\n        return jenkins.getRootUrl() + URLEncoder.encode(key, \"UTF-8\") + \"?size=\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(\"UTF-8 encoding not available\", e);\n    }\n}", "CodeBleu_score": 53.46524375332887}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.image = image;\n}", "CodeBleu_score": 46.73628512773445}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 60.00867399110231}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        image = scaleImage(image, 128);\n    }\n    this.image = image;\n}", "CodeBleu_score": 61.33415002087942}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            final CacheEntry entry = future.get();\n            if (entry != null) {\n                image = entry.getImage();\n                lastModified = entry.getLastModified();\n            }\n        } catch (final ExecutionException e) {\n            // ignore\n        } catch (final InterruptedException e) {\n            // ignore\n        }\n        future = null;\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 57.222792210283544}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            ImageCacheEntry entry = future.get();\n            image = entry.getImage();\n            lastModified = entry.getLastModified();\n            future = null;\n        } catch (InterruptedException e) {\n            return true;\n        } catch (ExecutionException e) {\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 55.4800550947266}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            cacheEntry = future.get();\n            image = cacheEntry.image;\n            lastModified = cacheEntry.lastModified;\n            future = null;\n            return false;\n        } catch (InterruptedException e) {\n            return true;\n        } catch (ExecutionException e) {\n            return true;\n        }\n    }\n    return true;\n}", "CodeBleu_score": 55.84927613715368}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t            // Generate the image\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            ImageIO.write(image, \"png\", baos);\n\n            // Flush the image if required\n            if (flushImage) {\n                baos.flush();\n            }\n\n            // Set appropriate headers for caching and content type\n            rsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n            rsp.setHeader(\"Pragma\", \"no-cache\");\n            rsp.setHeader(\"Expires\", \"0\");\n            rsp.setContentType(\"image/png\");\n\n            // Write the byte array to the response output stream\n            rsp.getOutputStream().write(baos.toByteArray());\n        }", "CodeBleu_score": 46.57221782798195}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\n            // Create a new byte array output stream\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\n            // Create a new image\n            Image image = createImage(node);\n\n            // Write the image to the byte array output stream\n            ImageIO.write(image, \"png\", baos);\n\n            // Flush the image if required\n            baos.flush();\n\n            // Set the appropriate headers for caching and content type\n            rsp.setHeader(\"Cache-Control\", \"no-cache\");\n            rsp.setHeader(\"Content-Type\", \"image/png\");\n\n            // Write the byte array to the response output stream\n            rsp.getOutputStream().write(baos.toByteArray());\n        }", "CodeBleu_score": 44.67835873473546}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    rsp.setContentType(\"image/png\");\n    rsp.setHeader(\"Cache-Control\", \"no-cache, no-store, must-revalidate\");\n    rsp.setHeader(\"Pragma\", \"no-cache\");\n    rsp.setDateHeader(\"Expires\", 0);\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    ImageIO.write(generateImage(node), \"png\", baos);\n    baos.flush();\n    baos.close();\n\n    rsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 37.483731489920935}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator, null);\n    }", "CodeBleu_score": 8.924097559869457}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        builder.setConnectionManager(new PoolingHttpClientConnectionManager());\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n        if (authenticator != null) {\n            authenticator.configureContext(context, host);\n        }\n        setClientProxyParams(host, builder);\n        httpClient = builder.build();\n    }", "CodeBleu_score": 47.10302680593384}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        // Setup caching if enabled\n        if (enableCache) {\n            LOGGER.fine(\"Caching enabled\");\n            // Setup team cache\n            if (teamCacheDuration > 0) {\n                LOGGER.fine(\"Team cache duration: \" + teamCacheDuration);\n                teamCache = new LRUCache<String, Team>(teamCacheDuration);\n            }\n            // Setup repositories cache\n            if (repositoriesCacheDuration > 0) {\n                LOGGER.fine(\"Repositories cache duration: \" + repositoriesCacheDuration);\n                repositoriesCache = new LRUCache<String, List<Repository>>(repositoriesCacheDuration);\n            }\n        }\n\n        // Setup HTTP client\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        builder.setConnectionManager(new PoolingHttpClientConnectionManager());\n        builder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n        builder.setDefaultRequestConfig(RequestConfig.custom()\n                .setSocketTimeout(DEFAULT_SOCKET_TIMEOUT)\n                .setConnectTimeout(DEFAULT_CONNECT_TIMEOUT)\n                .setConnectionRequestTimeout(DEFAULT_CONNECTION_REQUEST_TIMEOUT)\n                .build());\n\n        // Setup client proxy parameters\n        setClientProxyParams(BitbucketCloudApiClient.DEFAULT_HOST, builder);\n\n        // Setup HTTP client\n        httpClient = builder.build();\n\n        // Setup HTTP client context\n        context = HttpClientContext.create();\n\n        // Configure context for authentication\n        if (authenticator != null) {\n            authenticator.configureContext(context, BitbucketCloudApiClient.DEFAULT_HOST);\n        }\n    }", "CodeBleu_score": 43.036887990806505}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    if (pullRequest.getFromRef() != null) {\n        BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getFromRef().getName());\n        if (sourceBranch != null) {\n            pullRequest.setSourceClosure(new CommitClosure(sourceBranch.getCommit().getNode()));\n        }\n    }\n    if (pullRequest.getToRef() != null) {\n        BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getToRef().getName());\n        if (destinationBranch != null) {\n            pullRequest.setDestinationClosure(new CommitClosure(destinationBranch.getCommit().getNode()));\n        }\n    }\n}", "CodeBleu_score": 44.88128043241927}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSource().getBranch().getName());\n    if (sourceBranch != null) {\n        pullRequest.getSource().setCommitClosure(new CommitClosure(sourceBranch.getNode()));\n    }\n    BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestination().getBranch().getName());\n    if (destinationBranch != null) {\n        pullRequest.getDestination().setCommitClosure(new CommitClosure(destinationBranch.getNode()));\n    }\n}", "CodeBleu_score": 50.12315355478737}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    try {\n        BitbucketCloudBranch sourceBranch = getBranch(pullRequest.getFromRef().getName());\n        if (sourceBranch != null) {\n            pullRequest.setSourceClosure(new CommitClosure(sourceBranch.getCommit().getHash()));\n        }\n        BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getToRef().getName());\n        if (destinationBranch != null) {\n            pullRequest.setDestinationClosure(new CommitClosure(destinationBranch.getCommit().getHash()));\n        }\n    } catch (IOException | InterruptedException e) {\n        log.error(\"Error setting up closures for pull request: {}\", e.getMessage());\n    }\n}", "CodeBleu_score": 42.14645409552432}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    String jenkinsLocation = getJenkinsLocation(build);\n    if (jenkinsLocation == null) {\n        throw new IllegalStateException(\"Jenkins location is null\");\n    }\n    return new DisplayURLProvider(jenkinsLocation).getDisplayURL(build);\n}", "CodeBleu_score": 47.230598696912004}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    final JenkinsLocationConfiguration location = JenkinsLocationConfiguration.get();\n    if (location == null) {\n        throw new IllegalStateException(\"Jenkins location configuration is not set\");\n    }\n    if (location.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins location URL is not set\");\n    }\n    return DisplayURLProvider.get().getDisplayURL(build);\n}", "CodeBleu_score": 56.98201285418414}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    if (jenkinsLocationConfiguration == null) {\n        throw new IllegalStateException(\"No Jenkins location configuration found\");\n    }\n    if (jenkinsLocationConfiguration.getUrl() == null) {\n        throw new IllegalStateException(\"Jenkins location configuration has no URL\");\n    }\n    return new DisplayURLProvider(build, jenkinsLocationConfiguration.getUrl()).getDisplayURL();\n}", "CodeBleu_score": 49.58612515067899}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n        URL u = new URL(url);\n        if (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n        }\n        if (bitbucket == BitbucketApi.BITBUCKET_SERVER && !u.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Invalid Bitbucket Server URL: \" + url);\n        }\n        return url;\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Invalid Jenkins URL: \" + url, e);\n    }\n}", "CodeBleu_score": 57.436346307360274}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url.startsWith(\"http://localhost\") || url.startsWith(\"http://unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"Jenkins URL cannot be localhost or unconfigured-jenkins-location\");\n    }\n    try {\n        URI uri = new URI(url);\n        if (bitbucket == BitbucketApi.BITBUCKET_SERVER && !uri.getHost().contains(\".\")) {\n            throw new IllegalStateException(\"Bitbucket Server URL must be fully qualified\");\n        }\n        return url;\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Invalid URL: \" + url, e);\n    }\n}", "CodeBleu_score": 52.09440054688442}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    if (url == null || url.isEmpty()) {\n        throw new IllegalStateException(\"Invalid URL: \" + url);\n    }\n    if (url.startsWith(\"http://localhost\") || url.startsWith(\"http://unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\"Invalid URL: \" + url);\n    }\n    if (bitbucket.isBitbucketCloud() && !url.startsWith(\"https://\")) {\n        throw new IllegalStateException(\"Invalid URL: \" + url);\n    }\n    return url;\n}", "CodeBleu_score": 30.758862754543514}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        final BitbucketApi bitbucket = BitbucketApi.create(source.getCredentialsId());\n        final BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(source, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isDisableNotifications()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications disabled\");\n            return;\n        }\n\n        final SCMRevision revision = build.getRevision();\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] No revision found\");\n            return;\n        }\n\n        final String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] No hash found\");\n            return;\n        }\n\n        final String branch = revision.getBranch();\n        if (branch == null) {\n            listener.getLogger().println(\"[Bitbucket] No branch found\");\n            return;\n        }\n\n        final boolean shareBuildKeyBetweenBranchAndPR = context.isShareBuildKeyBetweenBranchAndPR();\n        final String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        listener.getLogger().println(\"[Bitbucket] Notification type: \" + context.getNotificationType());\n\n        switch (context.getNotificationType()) {\n            case BUILD:\n                createStatus(build, listener, bitbucket, key, hash);\n                break;\n            case PULL_REQUEST:\n                createPullRequestStatus(build, listener, bitbucket, key, hash);\n                break;\n            case BOTH:\n                createStatus(build, listener, bitbucket, key, hash);\n                createPullRequestStatus(build, listener, bitbucket, key, hash);\n                break;\n        }\n    }", "CodeBleu_score": 44.32706470707615}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(build, source.getObserver()).withTraits(source.getTraits());\n        if (context.isNotificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Skip notifications\");\n            return;\n        }\n\n        SCMRevision revision = build.getChangeSet().getRevisions().iterator().next();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Skip notifications\");\n            return;\n        }\n\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String branch = getBranch(revision);\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        BitbucketApi bitbucket = new BitbucketApi(context);\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 44.74029979649974}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isNotificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n        SCMRevision revision = build.getChangeSet().getLastBuild().getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled for this revision type\");\n            return;\n        }\n\n        String branch = source.getBranch();\n        boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        String buildKey = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        listener.getLogger().println(\"[Bitbucket] Notifications are enabled\");\n        listener.getLogger().println(\"[Bitbucket] Notification type: \" + context.getNotificationType());\n        listener.getLogger().println(\"[Bitbucket] Build key: \" + buildKey);\n\n        BitbucketApi bitbucket = source.getApi(context);\n\n        createStatus(build, listener, bitbucket, buildKey, hash);\n    }", "CodeBleu_score": 49.50152685634032}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPr) {\n        return build.getParent().getFullName() + \":\" + branch;\n    }\n    return build.getFullName();\n}", "CodeBleu_score": 25.838134500517544}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPr) {\n        return build.getParent().getFullName() + \":\" + branch;\n    } else {\n        return build.getFullName();\n    }\n}", "CodeBleu_score": 26.776329801643296}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPr) {\n        return build.getParent().getFullName() + \"_\" + branch;\n    } else {\n        return build.getFullName();\n    }\n}", "CodeBleu_score": 26.776329801643296}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverURL == null) {\n        serverURL = BitbucketSCMNavigator.getServerURL(serverID);\n        if (serverURL == null) {\n            LOG.warning(\"BitbucketSCMNavigator: no server URL found for server ID \" + serverID);\n        }\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits(serverURL, repositoryPath);\n    }\n    return this;\n}", "CodeBleu_score": 15.26510226108669}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = \"https://bitbucket.org\";\n        LOG.warn(\"Server URL is null. Using default URL: {}\", serverUrl);\n    }\n    if (traits == null) {\n        traits = new BitbucketSCMNavigatorTraits();\n        LOG.warn(\"Traits are null. Using default traits: {}\", traits);\n    }\n    return this;\n}", "CodeBleu_score": 11.566717845809077}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverURL == null) {\n        serverURL = BitbucketSCMNavigator.getServerURL();\n        if (serverURL == null) {\n            LOG.warning(\"BitbucketSCMNavigator.serverURL is null.  Using default value of https://bitbucket.org\");\n            serverURL = \"https://bitbucket.org\";\n        }\n    }\n    if (traits == null) {\n        traits = BitbucketSCMNavigator.getTraits();\n        if (traits == null) {\n            traits = new BitbucketSCMNavigatorTraits();\n        }\n    }\n    return this;\n}", "CodeBleu_score": 16.396783808053332}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = bitbucketRepositoryRepository.findByName(name);\n    if (repository == null) {\n        log.warn(\"Repository not found: {}\", name);\n        return;\n    }\n    if (isMatch) {\n        log.info(\"Repository proposed: {}\", name);\n        repository.setProposed(true);\n        bitbucketRepositoryRepository.save(repository);\n    } else {\n        log.info(\"Repository ignored: {}\", name);\n    }\n}", "CodeBleu_score": 41.486955962393424}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = bitbucketRepositoryRepository.findByName(name);\n    if (isMatch) {\n        log.info(\"Repository {} is proposed\", name);\n        if (repository != null) {\n            repository.setCount(repository.getCount() + 1);\n            bitbucketRepositoryRepository.save(repository);\n        }\n    } else {\n        log.info(\"Repository {} is ignored\", name);\n    }\n}", "CodeBleu_score": 46.476231645889435}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = bitbucketRepositoryService.getByName(name);\n    if (repository == null) {\n        return;\n    }\n    if (isMatch) {\n        proposedCount.incrementAndGet();\n    } else {\n        ignoredCount.incrementAndGet();\n    }\n    log.info(\"{} {}\", repository.getFullName(), isMatch ? \"proposed\" : \"ignored\");\n}", "CodeBleu_score": 48.83210610960712}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (marked == null || rev == null) {\n            return rev;\n        }\n        if (rev instanceof BranchRevision) {\n            BranchRevision branch = (BranchRevision) rev;\n            if (branch.getHash() != null) {\n                if (!commitExists(git, branch.getHash())) {\n                    if (scm.getRefSpecs() == null) {\n                        scm.setRefSpecs(new ArrayList<>());\n                    }\n                    scm.getRefSpecs().add(new RefSpec(branch.getHash()));\n                    listener.getLogger().println(\"Branch \" + branch.getName() + \" has hash \" + branch.getHash() + \" but no such commit exists locally. Adding refspec \" + branch.getHash() + \" to clone.\");\n                    git.fetch(scm.getRemote(), scm.getRefSpecs());\n                }\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 30.305620271933886}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n        if (rev instanceof Branch) {\n            Branch branch = (Branch) rev;\n            String sha1 = branch.getSHA1();\n\n            if (!commitExists(git, sha1)) {\n                listener.getLogger().println(\"Fetching missing commit \" + sha1 + \" for branch \" + branch.getName());\n\n                try {\n                    RefSpecs specs = new RefSpecs();\n                    specs.add(branch.getName() + \":\" + branch.getName());\n                    git.fetch(scm.getRemote(), specs);\n                } catch (GitException e) {\n                    listener.error(e.getMessage());\n                    throw new InterruptedException(e.getMessage());\n                }\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 36.19121887290598}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t\n        if (rev instanceof BranchRevision) {\n            BranchRevision branch = (BranchRevision) rev;\n            if (branch.getName().contains(\"@\")) {\n                String[] parts = branch.getName().split(\"@\");\n                String branchName = parts[0];\n                String sha1 = parts[1];\n                if (!commitExists(git, sha1)) {\n                    // we need to fetch this commit\n                    RefSpec refSpec = new RefSpec(branchName + \"@\" + sha1);\n                    git.fetch(scm.getRemote(), refSpec);\n                }\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 34.16204111168599}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 64.71566022981511}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().getFirst());\n    }\n    return result;\n}", "CodeBleu_score": 59.54694107910306}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n    return result;\n}", "CodeBleu_score": 73.21349911305313}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  // Get the selected resource states, or return if none are selected\n  const selectedResourceStates = resourceStates.filter((resourceState) => resourceState.selected);\n  if (!selectedResourceStates.length) {\n    return;\n  }\n\n  // Map the selected resources to their URIs\n  const resourceUris = selectedResourceStates.map((resourceState) => resourceState.resourceUri);\n\n  // Process the resources by repository\n  const repositoryMap = new Map();\n  resourceUris.forEach((uri) => {\n    const repository = uri.repository;\n    if (!repositoryMap.has(repository)) {\n      repositoryMap.set(repository, []);\n    }\n    repositoryMap.get(repository).push(uri);\n  });\n\n  // Convert the resources to file paths and add them to the repository\n  for (const [repository, resourceUris] of repositoryMap) {\n    const filePaths = resourceUris.map((uri) => uri.fsPath);\n    try {\n      await repository.add(filePaths);\n    } catch (error) {\n      this.logger.error(`Failed to add files to repository ${repository.name}: ${error.message}`);\n      this.showErrorMessage(`Failed to add files to repository ${repository.name}: ${error.message}`);\n    }\n  }\n}", "CodeBleu_score": 41.998731812603566}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t  const selectedResourceStates = resourceStates.filter(state => state.isSelected);\n  if (selectedResourceStates.length === 0) {\n    return;\n  }\n\n  const selectedResourceUris = selectedResourceStates.map(state => state.resource.uri);\n  const selectedRepositories = selectedResourceStates.map(state => state.repository);\n\n  const repositoryToResourcesMap = new Map<Repository, SourceControlResource[]>();\n  for (const resourceUri of selectedResourceUris) {\n    const repository = await this.getRepositoryForResource(resourceUri);\n    const resources = repositoryToResourcesMap.get(repository) || [];\n    resources.push({ uri: resourceUri, repository });\n    repositoryToResourcesMap.set(repository, resources);\n  }\n\n  for (const [repository, resources] of repositoryToResourcesMap) {\n    const filePaths = await this.convertResourcesToFilePaths(resources);\n    await this.addFilesToRepository(repository, filePaths);\n  }\n}", "CodeBleu_score": 44.82174999504753}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selectedResourceStates = resourceStates.filter(resourceState => resourceState.selected);\n    if (selectedResourceStates.length === 0) {\n        return;\n    }\n\n    const resourceStatesByRepository = this.groupByRepository(selectedResourceStates);\n    for (const repository of Object.keys(resourceStatesByRepository)) {\n        const resourceStates = resourceStatesByRepository[repository];\n        const resourcePaths = resourceStates.map(resourceState => resourceState.resource.uri.fsPath);\n        const repositoryPath = repository.uri.fsPath;\n        try {\n            await this.repositoryService.add(repositoryPath, resourcePaths);\n        } catch (error) {\n            this.logger.error(`Failed to add files to repository '${repositoryPath}'`, error);\n            this.showErrorMessage(`Failed to add files to repository '${repositoryPath}'`);\n        }\n    }\n}", "CodeBleu_score": 46.39974589990508}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t    const resourceStates = this.resourceStates;\n    if (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n        const scmResource = await this.scmProvider.getSingleScmResource(this.resourceStates[0]);\n        this.resourceStates = [scmResource];\n    }\n    return this.resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 39.95846708738996}, {"code": "protected async getResourceStates{\n\t    if (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n        const scmResource = await this.getScmResource();\n        if (scmResource) {\n            this.resourceStates = [scmResource];\n        }\n    }\n    return this.resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 31.454525550836905}, {"code": "protected async getResourceStates{\n\t    if (this.resourceStates.length === 0 || !this.resourceStates[0] instanceof Uri) {\n        const resource = await this.getResource();\n        this.resourceStates = [resource];\n    }\n    return this.resourceStates.filter(r => r instanceof Resource);\n}", "CodeBleu_score": 35.710569526906724}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    uri = uri ?? this.fromSvnUri(this.activeEditor.document.uri);\n    if (!uri) {\n      return undefined;\n    }\n    if (uri.scheme === 'svn') {\n      uri = this.file(uri);\n    }\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n    const manager = this.sourceControlManager;\n    const repository = await manager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 47.85770568975115}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    uri = uri ?? window.activeTextEditor?.document.uri;\n    if (uri && uri.scheme === 'svn') {\n      uri = Uri.file(uri.path);\n    }\n    if (!uri || uri.scheme !== 'file') {\n      return undefined;\n    }\n    const sourceControlManager = workspace.getSCMProvider(uri);\n    if (!sourceControlManager) {\n      return undefined;\n    }\n    const repository = await sourceControlManager.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 49.27214587718942}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      uri = this.fromSvnUri(await commands.executeCommand(getSCMResource.command, this.activeEditor?.document.uri));\n    }\n    if (uri.scheme === 'svn') {\n      uri = this.file(uri);\n    }\n    if (uri.scheme === 'file') {\n      const scm = await this.sourceControlManager.getRepository(uri);\n      if (scm) {\n        return scm.getResource(uri);\n      }\n    }\n    return undefined;\n  }", "CodeBleu_score": 35.80731705064708}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remoteRepository = await this.model.getRemoteRepository(element);\n    if (remoteRepository) {\n      const oldRevision = element.oldRevision ? element.oldRevision : 0;\n      const newRevision = element.newRevision ? element.newRevision : 0;\n      if (element.status === 'modified') {\n        this.openDiff(remoteRepository, element.path, oldRevision, newRevision);\n      } else if (element.status === 'added') {\n        this.openFileRemote(remoteRepository, element.path, newRevision);\n      }\n    }\n  }", "CodeBleu_score": 35.344415670817554}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const remoteRepository = await this.model.getRemoteRepository(element);\n    if (remoteRepository) {\n        const remotePath = element.getPath();\n        const remoteRevision = element.getRevision();\n        const remoteFile = remoteRepository.getFile(remotePath, remoteRevision);\n        if (remoteFile) {\n            this.openDiff(remoteFile);\n        }\n    }\n}", "CodeBleu_score": 36.57293943699047}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const repo = await this.model.getRemoteRepository(element.path);\n    if (element.type === 'modified') {\n        await this.openDiff(repo, element.path, element.oldRevision, element.newRevision);\n    } else if (element.type === 'added') {\n        await this.openFileRemote(repo, element.path, element.newRevision);\n    }\n}", "CodeBleu_score": 46.56426930986034}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (clipboard.writeText) {\n        if (item.commit) {\n            switch (what) {\n                case \"message\":\n                    await clipboard.writeText(item.commit.message);\n                    break;\n                case \"revision\":\n                    await clipboard.writeText(item.commit.revision);\n                    break;\n            }\n        } else {\n            window.showErrorMessage(\"This is not a commit.\");\n        }\n    } else {\n        window.showErrorMessage(\"Copy to clipboard not supported.\");\n    }\n}", "CodeBleu_score": 33.11933403349903}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tconst clipboard = vscode.window.createOutputChannel(\"Clipboard\");\n\tif (!clipboard) {\n\t\tvscode.window.showErrorMessage(\"Clipboard not supported\");\n\t\treturn;\n\t}\n\n\tif (item.commit) {\n\t\tclipboard.appendLine(what);\n\t\tclipboard.appendLine(item.commit.message);\n\t\tclipboard.appendLine(item.commit.revision);\n\t\tclipboard.show();\n\t}\n}", "CodeBleu_score": 39.05717962931493}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t    if (!clipboard.writeText) {\n        window.showErrorMessage(\"Clipboard is not supported\");\n        return;\n    }\n    if (item instanceof CommitTreeItem) {\n        if (what === \"message\") {\n            clipboard.writeText(item.commit.message);\n        } else if (what === \"revision\") {\n            clipboard.writeText(item.commit.revision);\n        }\n    }\n}", "CodeBleu_score": 37.386425940506115}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    ServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.90545506037071}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().getClassLoader() : Thread.currentThread().getContextClassLoader();\n    return setClassLoader(classLoader);\n}", "CodeBleu_score": 51.94735932641444}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        return new Gitea(jenkins.getPluginManager().uberClassLoader);\n    }\n    return new Gitea(Gitea.class.getClassLoader());\n}", "CodeBleu_score": 36.52864341079181}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    ClassLoader classLoader = jenkins != null ? jenkins.getPluginManager().getClassLoader() : getClass().getClassLoader();\n    return setClassLoader(classLoader);\n}", "CodeBleu_score": 50.41237161582897}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks || credentialsId != null;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 32.635369472212446}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeUrl(serverUrl);\n    this.manageHooks = manageHooks || credentialsId != null;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeUrl(aliasUrl);\n    if (this.aliasUrl != null) {\n        this.aliasUrl = this.aliasUrl.trim();\n    }\n    if (this.displayName == null) {\n        this.displayName = this.serverUrl;\n    }\n}", "CodeBleu_score": 40.58301380621357}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName != null ? displayName.trim() : null;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks || credentialsId != null;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n}", "CodeBleu_score": 38.90113212704963}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (user.isAdmin()) {\n        serverUrl = normalizeUrl(serverUrl);\n        if (serverUrl == null) {\n            return items;\n        }\n        List<GiteaAuth> auths = GiteaAuth.getAll();\n        for (GiteaAuth auth : auths) {\n            if (auth.getServerUrl().equals(serverUrl)) {\n                items.add(auth.getCredentialsId(), auth.getCredentialsId());\n            }\n        }\n    }\n    return items;\n}", "CodeBleu_score": 36.79674673806021}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (getPortalSettings().isAdministrator()) {\n        serverUrl = normalizeServerUrl(serverUrl);\n        if (serverUrl != null) {\n            List<Credentials> credentials = Credentials.findByServerUrl(serverUrl);\n            for (Credentials credential : credentials) {\n                if (credential.getType() == Credentials.Type.GITEA_AUTH) {\n                    items.add(credential.getId(), credential.getUsername());\n                }\n            }\n        }\n    }\n    return items;\n}", "CodeBleu_score": 38.75343169407439}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    ListBoxModel items = new ListBoxModel();\n    if (user.hasRole(Role.ADMIN)) {\n        items.add(null, \"\");\n    }\n    if (serverUrl != null) {\n        serverUrl = serverUrl.trim();\n        if (!serverUrl.endsWith(\"/\")) {\n            serverUrl += \"/\";\n        }\n        if (serverUrl.startsWith(\"http://\")) {\n            serverUrl = serverUrl.substring(\"http://\".length());\n        } else if (serverUrl.startsWith(\"https://\")) {\n            serverUrl = serverUrl.substring(\"https://\".length());\n        }\n        List<Credentials> credentials = Credentials.get(CredentialsScope.GLOBAL);\n        for (Credentials credential : credentials) {\n            if (credential.getScope() == CredentialsScope.GLOBAL && credential instanceof GiteaAuth) {\n                GiteaAuth giteaAuth = (GiteaAuth) credential;\n                if (serverUrl.equals(giteaAuth.getServerUrl())) {\n                    items.add(credential.getId(), credential.getDisplayName());\n                }\n            }\n        }\n    }\n    return items;\n}", "CodeBleu_score": 33.01459900238529}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        }\n        scheme = scheme.toLowerCase(Locale.ENGLISH);\n        String host = uri.getHost();\n        if (host == null) {\n            host = \"\";\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        }\n        String query = uri.getQuery();\n        if (query == null) {\n            query = \"\";\n        }\n        String fragment = uri.getFragment();\n        if (fragment == null) {\n            fragment = \"\";\n        }\n        StringBuilder sb = new StringBuilder();\n        sb.append(scheme).append(\"://\").append(host);\n        if (port != -1) {\n            sb.append(\":\").append(port);\n        }\n        sb.append(path);\n        if (!query.isEmpty()) {\n            sb.append(\"?\").append(query);\n        }\n        if (!fragment.isEmpty()) {\n            sb.append(\"#\").append(fragment);\n        }\n        String normalizedUrl = sb.toString();\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        return null;\n    }\n}", "CodeBleu_score": 45.21574139150619}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"https\";\n        }\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equalsIgnoreCase(scheme)) {\n                port = 80;\n            } else if (\"https\".equalsIgnoreCase(scheme)) {\n                port = 443;\n            }\n        }\n        String normalizedUrl = scheme + \"://\" + uri.getHost();\n        if (port != -1) {\n            normalizedUrl += \":\" + port;\n        }\n        normalizedUrl += uri.getPath();\n        if (normalizedUrl.endsWith(\"/\")) {\n            normalizedUrl = normalizedUrl.substring(0, normalizedUrl.length() - 1);\n        }\n        return normalizedUrl;\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 44.79242039651728}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n    serverUrl = serverUrl.toLowerCase();\n    serverUrl = serverUrl.replaceAll(\"^http://\", \"\");\n    serverUrl = serverUrl.replaceAll(\"^https://\", \"\");\n    serverUrl = serverUrl.replaceAll(\":80$\", \"\");\n    serverUrl = serverUrl.replaceAll(\":443$\", \"\");\n    serverUrl = serverUrl.replaceAll(\"/$\", \"\");\n    return serverUrl;\n}", "CodeBleu_score": 15.582021126848094}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getUrl(), server.getUrl());\n        } else {\n            items.add(server.getUrl(), displayName);\n        }\n    }\n    return items;\n}", "CodeBleu_score": 50.48158282910984}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getUrl());\n        } else {\n            items.add(displayName, server.getUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 50.63529536009723}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getUrl());\n        } else {\n            items.add(displayName, server.getUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 50.63529536009723}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t        if (servers == null) {\n            this.servers.clear();\n            return;\n        }\n        if (servers.isEmpty()) {\n            this.servers.clear();\n            return;\n        }\n        if (!hasAdminPermission()) {\n            throw new UnauthorizedException();\n        }\n        servers = servers.stream().filter(Objects::nonNull).distinct().filter(server -> !server.getUrl().trim().isEmpty()).collect(Collectors.toList());\n        this.servers.clear();\n        this.servers.addAll(servers);\n        save();\n    }", "CodeBleu_score": 33.27629043970436}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        this.servers = Collections.emptyList();\n    } else {\n        this.servers = servers.stream().filter(Objects::nonNull).filter(s -> !s.getUrl().isEmpty()).distinct().collect(Collectors.toList());\n    }\n    save();\n}", "CodeBleu_score": 22.470180806929736}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (servers == null) {\n        this.servers = Collections.emptyList();\n        return;\n    }\n    if (!Permission.ADMIN.has(getUser())) {\n        throw new AccessDeniedException();\n    }\n    this.servers = servers.stream().filter(Objects::nonNull).map(GiteaServer::normalize).distinct().filter(server -> !server.getUrl().isEmpty()).collect(Collectors.toList());\n    save();\n}", "CodeBleu_score": 27.760310307637415}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    serverUrl = normalizeServerUrl(serverUrl);\n    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    List<GiteaServer> servers = getServers();\n    for (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            this.servers = servers;\n            save();\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 44.63458149107756}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    serverUrl = normalizeServerUrl(serverUrl);\n    List<GiteaServer> eps = getServers();\n    for (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (serverUrl.equals(endpoint.getServerUrl())) {\n            iterator.remove();\n            setServers(eps);\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 47.95314744009652}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t        serverUrl = normalizeServerUrl(serverUrl);\n        if (StringUtils.isBlank(serverUrl)) {\n            return false;\n        }\n        List<GiteaServer> servers = getServers();\n        for (ListIterator<GiteaServer> iterator = servers.listIterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (serverUrl.equals(endpoint.getServerUrl())) {\n                iterator.remove();\n                this.servers = servers;\n                save();\n                return true;\n            }\n        }\n        return false;\n    }", "CodeBleu_score": 42.70230250732394}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\n      TypeMirror typeMirror = el.asType();\n      String type = typeMirror.toString();\n\n      descriptorElements.add(new ConfigElement(el.getSimpleName().toString(), type, attributes));\n    }\n  }", "CodeBleu_score": 46.993442123372745}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n        Map<String, String> attributes = getAttributesFromAnnotation(element, annotation);\n        String type = element.asType().toString();\n        descriptorElements.add(new ConfigElement(attributes, type));\n    }\n}", "CodeBleu_score": 58.48621998736281}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      String type = el.asType().toString();\n      descriptorElements.add(new ConfigElement(attributes, type));\n    }\n  }", "CodeBleu_score": 53.6758831001658}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  for (TypeElement annotation : annotations) {\n    if (annotation.getQualifiedName().toString().replace('$', '.').equals(\n        annotationClass.getCanonicalName())) {\n      return annotation;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 48.86278295506218}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getCanonicalName().replace(\"$\", \".\");\n    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().contentEquals(annotationClassName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 42.909361802733684}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    for (TypeElement annotation : annotations) {\n        if (annotation.getQualifiedName().toString().replace(\"$\", \".\").equals(annotationClass.getCanonicalName())) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 51.68745245318911}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n        \"leave_application_status\": \"Open\",\n        \"cancel_approval\": 0,\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"leave_application_status\": [\n                    \"Open\",\n                    \"Approval Pending\",\n                    \"Approved\",\n                    \"Rejected\",\n                ],\n                \"cancel_approval\": 0,\n            }\n        )\n\n        if approver_id:\n            filters.update({\"approver\": approver_id})\n\n        workflow_states = get_allowed_states_for_workflow(\n            frappe.get_doc(\"Workflow\", \"Leave Application\"), approver_id\n        )\n        if workflow_states:\n            filters.update({\"leave_application_status\": workflow_states})\n\n    else:\n        filters.update(\n            {\n                \"leave_application_status\": [\"Open\", \"Approved\", \"Rejected\"],\n                \"cancel_approval\": 0,\n            }\n        )\n\n    return filters\n\n", "CodeBleu_score": 26.264064032992394}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\tfilters = {\n\t\t\"employee\": employee,\n\t\t\"docstatus\": (\"=\", 1),\n\t\t\"status\": (\"in\", [\"Open\", \"Approved\", \"Rejected\"]),\n\t\t\"docstatus\": (\"=\", 1),\n\t}\n\n\tif approver_id:\n\t\tfilters[\"approver\"] = approver_id\n\t\tfilters[\"status\"] = (\"in\", [\"Open\", \"Approved\", \"Rejected\"])\n\t\tfilters[\"docstatus\"] = (\"=\", 1)\n\n\tif for_approval:\n\t\tfilters[\"status\"] = (\"in\", [\"Open\", \"Approved\", \"Rejected\"])\n\t\tfilters[\"docstatus\"] = (\"=\", 1)\n\t\tfilters[\"name\"] = (\"not in\", [frappe.get_all(\"Leave Application\", filters={\"employee\": employee, \"docstatus\": (\"=\", 1)}, pluck=\"name\")])\n\n\treturn filters\n\n", "CodeBleu_score": 33.74292536199096}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"workflow_state\": \"Open\",\n        \"leave_application_status\": (\"Open\", \"Approved\"),\n    }\n\n    if for_approval:\n        filters.update(\n            {\n                \"leave_application_status\": \"Pending Approval\",\n                \"workflow_state\": \"Pending Approval\",\n            }\n        )\n        if approver_id:\n            filters.update({\"leave_approver\": approver_id})\n        else:\n            filters.update({\"leave_approver\": (\"is\", \"set\")})\n\n    return filters\n\n", "CodeBleu_score": 26.35479279980388}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = datetime.date.today()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_detail.get(\"allocated\", 0),\n            \"balance\": leave_detail.get(\"balance\", 0),\n        }\n    return leave_balance_map\n\n\n", "CodeBleu_score": 42.99976900280333}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = datetime.date.today()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[\"allocated\"],\n            \"balance\": leave_details[\"balance\"],\n        }\n    return leave_balance_map\n\n\n", "CodeBleu_score": 41.81765850123297}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = datetime.date.today()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        allocated_leave = leave_detail[\"allocated_leave\"]\n        balance_leave = leave_detail[\"balance_leave\"]\n        leave_balance_map[leave_type] = {\n            \"allocated_leave\": allocated_leave,\n            \"balance_leave\": balance_leave,\n        }\n    return leave_balance_map\n\n\n\n\n\n", "CodeBleu_score": 42.50702161722392}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if not holiday_list:\n        return []\n    holidays = Holiday.objects.filter(holiday_list=holiday_list, weekly_off=False).order_by('date')\n    for holiday in holidays:\n        holiday.description = strip_tags(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 27.672484456942993}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = query_holidays(holiday_list, exclude_weekly_offs=True)\n    holidays = [\n        {\n            \"date\": holiday.date,\n            \"description\": strip_html(holiday.description),\n            \"is_weekly_off\": holiday.is_weekly_off,\n        }\n        for holiday in holidays\n    ]\n    holidays.sort(key=lambda x: x[\"date\"])\n    return holidays\n\n", "CodeBleu_score": 27.599276206917615}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list_for_employee(employee)\n    if holiday_list is None:\n        return []\n    holidays = query_holidays(holiday_list, exclude_weekly_offs=True)\n    holidays = [\n        {\n            \"date\": holiday.date,\n            \"description\": strip_html(holiday.description),\n        }\n        for holiday in holidays\n    ]\n    return holidays\n\n", "CodeBleu_score": 23.643743835470573}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    if (\n        frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders\")\n        and frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\") == \"Weekly\"\n    ):\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 27.445863526698954}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 5.378922231120049}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminder_in_advance\"):\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 15.103170765968004}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0.0\n    for self_rating in self.self_ratings:\n        self_appraisal_score += (self_rating.rating * 5) * self_rating.weightage\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n\n", "CodeBleu_score": 21.150805471348846}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for rating in self.self_ratings:\n        score = rating.rating * 5 * rating.percentage_weightage / 100\n        total_score += score\n    self.self_appraisal_score = round(total_score, 2)\n\n", "CodeBleu_score": 28.094864435015033}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_score = 0\n    for rating in self.self_ratings:\n        score = rating.rating * 5 * rating.percentage_weightage / 100\n        total_score += score\n    self.self_appraisal_score = round(total_score, 2)\n\n", "CodeBleu_score": 28.094864435015033}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_using_formula:\n        formula = appraisal_cycle.formula\n        if not formula:\n            frappe.throw(_(\"Formula not defined for Appraisal Cycle {0}\").format(appraisal_cycle.name))\n\n        # Retrieve necessary data for calculation\n        total_score = self.get(\"total_score\")\n        average_feedback_score = self.get(\"average_feedback_score\")\n        self_appraisal_score = self.get(\"self_appraisal_score\")\n\n        # Sanitize the formula\n        formula = sanitize_expression(formula)\n\n        # Evaluate the formula with the necessary data\n        try:\n            final_score = eval(formula, {}, {\n                \"total_score\": total_score,\n                \"average_feedback_score\": average_feedback_score,\n                \"self_appraisal_score\": self_appraisal_score\n            })\n        except Exception as e:\n            frappe.throw(_(\"Error evaluating formula: {0}\").format(str(e)))\n\n        # Set the final score with the appropriate precision\n        self.final_score = frappe.utils.round_precision(final_score, precision=2)\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = frappe.utils.round_precision(\n            (self.get(\"total_score\") + self.get(\"average_feedback_score\") + self.get(\"self_appraisal_score\")) / 3,\n            precision=2)\n        self.final_score = final_score\n\n    # Save the updated appraisal document\n    self.save()", "CodeBleu_score": 36.099042923820754}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle_doc.final_score_formula:\n        data = self.get_data_for_final_score_formula()\n        formula = sanitize_expression(appraisal_cycle_doc.final_score_formula)\n        final_score = frappe.safe_eval(formula, data, mode=\"eval\")\n    else:\n        total_score = frappe.db.get_value(\n            \"Appraisal\", self.name, \"total_score\", cache=True\n        )\n        average_feedback_score = frappe.db.get_value(\n            \"Appraisal\", self.name, \"average_feedback_score\", cache=True\n        )\n        self_appraisal_score = frappe.db.get_value(\n            \"Appraisal\", self.name, \"self_appraisal_score\", cache=True\n        )\n        final_score = (\n            total_score + average_feedback_score + self_appraisal_score\n        ) / 3\n\n    self.final_score = round(final_score, appraisal_cycle_doc.precision)\n\n", "CodeBleu_score": 39.80595698229799}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.calculate_final_score_using_formula:\n        self.calculate_final_score_using_formula()\n    else:\n        total_score = self.get_total_score()\n        average_feedback_score = self.get_average_feedback_score()\n        self_appraisal_score = self.get_self_appraisal_score()\n        self.final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n        self.final_score = float(\"{:.2f}\".format(self.final_score))\n\n", "CodeBleu_score": 24.525736640020597}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > fields.Date.today():\n        if self.status != 'on leave':\n            if not self.env['hr.leave.allocation'].search([('employee_id', '=', self.employee_id.id), ('date_from', '<=', self.attendance_date), ('date_to', '>=', self.attendance_date)]):\n                raise UserError(_('You cannot mark attendance for future dates unless the status is \"On Leave\" and there is no leave application for this date.'))\n        else:\n            if self.attendance_date < self.employee_id.date_of_joining:\n                raise UserError(_('You cannot mark attendance earlier than the employee\\'s date of joining.'))\n\n\n", "CodeBleu_score": 26.2726181059933}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > fields.Date.today():\n        if self.status != 'on_leave' or not self.leave_application_id:\n            raise ValidationError('You cannot mark attendance for future dates unless you are on leave or have a leave application.')\n    if self.attendance_date < self.employee_id.date_of_joining:\n        raise ValidationError('You cannot mark attendance for dates earlier than the date of joining.')\n\n\n", "CodeBleu_score": 21.03484182657783}, {"code": "def validate_attendance_date(self)\n\t\n    attendance_date = self.attendance_date\n    if attendance_date > fields.Date.today():\n        if self.status != 'on_leave':\n            if not self.leave_application_id:\n                raise ValidationError(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application.\"))\n        else:\n            if self.leave_application_id:\n                raise ValidationError(_(\"Attendance cannot be marked for future dates if the status is 'On Leave' and there is a leave application.\"))\n    if attendance_date < self.employee_id.date_of_joining:\n        raise ValidationError(_(\"Attendance date cannot be earlier than the employee's date of joining.\"))\n\n\n\n", "CodeBleu_score": 26.099833283931762}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    if self.get_duplicate_attendance_record():\n        frappe.throw(\n            _(\n                \"Attendance Record for Employee {0} on {1} already exists.<br>\"\n                \"<a href='/app/Form/Attendance/{2}'>Click here to view existing record</a>\"\n            ).format(\n                self.employee,\n                self.attendance_date,\n                self.get_duplicate_attendance_record(),\n            ),\n            title=_(\"Duplicate Attendance Record\"),\n        )\n\n", "CodeBleu_score": 29.198766661557514}, {"code": "def validate_duplicate_record(self)\n\t\n    if self.get_duplicate_attendance_record():\n        frappe.throw(\n            _(\n                \"Duplicate attendance record found for {0} on {1}.<br>\"\n                \"Please check <a href='/app/Form/Attendance/{2}'>Attendance Record</a>\"\n            ).format(\n                self.employee_name,\n                self.attendance_date,\n                self.get_duplicate_attendance_record(),\n            ),\n            title=_(\"Duplicate Attendance Record\"),\n        )\n\n", "CodeBleu_score": 29.02418551359754}, {"code": "def validate_duplicate_record(self)\n\t\n    duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                \"Attendance record for {0} on {1} already exists. <br>\"\n                \"<a href='/app/Form/Attendance/{2}'>Click here to view</a>\"\n            ).format(self.employee, self.attendance_date, duplicate),\n            title=_(\"Duplicate Attendance Record\"),\n        )\n\n", "CodeBleu_score": 33.32729208437027}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    # get message details\n    message_details = self.get_message_details()\n    # get email addresses of users in the group\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n    # send email with summary\n    self.send_email(message_details, emails)\n    # update status\n    self.status = \"Sent\"\n    self.save()\n", "CodeBleu_score": 18.45980255554029}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n    if emails:\n        try:\n            send_email(\n                recipients=emails,\n                subject=message_details.get(\"title\"),\n                template=\"daily_work_summary\",\n                args=message_details,\n            )\n            self.status = \"Sent\"\n        except Exception:\n            self.status = \"Error\"\n            frappe.log_error(frappe.get_traceback())\n    else:\n        self.status = \"No User\"\n\n", "CodeBleu_score": 37.56689826827592}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n    if not emails:\n        return\n\n    send_email(\n        recipients=emails,\n        subject=message_details.title,\n        template=\"daily_work_summary\",\n        args=message_details,\n    )\n\n    self.status = \"Sent\"\n    self.save()\n\n", "CodeBleu_score": 41.417548394967014}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.env['hr.applicant'].search([('job_position_id', '=', self.job_position_id.id), ('interview_round_id', '=', self.interview_round_id.id), ('id', '=', self.applicant_id.id)]):\n        raise ValidationError(_(\"Job Applicants are not allowed to appear twice for the same interview round. Please check the existing interview record for the job applicant. Link: %s Job Applicant: %s %s\") % (self.applicant_id.name, self.applicant_id.firstname, self.applicant_id.lastname))\n\n\n\n", "CodeBleu_score": 31.846405598389403}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview_round_id = self.interview_round_id.id\n    job_applicant_id = self.job_applicant_id.id\n    if self.env['hr.applicant.interview'].search([('interview_round_id', '=', interview_round_id), ('job_applicant_id', '=', job_applicant_id)]):\n        raise UserError(_(\"Job applicants are not allowed to appear twice for the same interview round. Please check the existing interview record for the job applicant: %s\") % (self.job_applicant_id.name))\n", "CodeBleu_score": 32.96134767336641}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview_round = self.interview_round\n    job_applicant = self.job_applicant\n    existing_interview = Interview.objects.filter(interview_round=interview_round, job_applicant=job_applicant).exclude(id=self.id).first()\n    if existing_interview:\n        raise ValidationError({'interview_round': 'Job applicants are not allowed to appear twice for the same interview round. See existing interview record: {}'.format(existing_interview.get_absolute_url())})\n\n\n", "CodeBleu_score": 33.673625896497214}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total_rating / num_assessments\n\n\n", "CodeBleu_score": 23.631821208350168}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 23.664157750772162}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.94149257350562}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = Interview(\n        interview_round=doc['interview_round'],\n        designation=doc['designation']\n    )\n    interview.save()\n    if 'interviewers' in doc:\n        for interviewer in doc['interviewers']:\n            interview.interviewers.add(interviewer)\n    return interview\n\n", "CodeBleu_score": 44.824160446937945}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = Interview(interview_round=doc[\"interview_round\"], designation=doc[\"designation\"])\n    if \"interviewers\" in doc:\n        for interviewer in doc[\"interviewers\"]:\n            interview.interview_details.append(InterviewDetails(interviewer=interviewer))\n    return interview\n\n", "CodeBleu_score": 46.146704837664274}, {"code": "def create_interview(doc):\n\t\n    interview = Interview(interview_round=doc.interview_round, designation=doc.designation)\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.add_interviewer(interviewer)\n    return interview\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 28.01401145646323}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_list = []\n    job_offer_query = self.client.service.GetJobOfferList(from_date, to_date, self.designation, self.company, 1)\n    for job_offer in job_offer_query:\n        job_offer_list.append(job_offer.Name)\n    return job_offer_list\n\n\n", "CodeBleu_score": 35.62746375499433}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    # Define the query parameters\n    query = {\n        \"query\": {\n            \"bool\": {\n                \"must\": [\n                    {\"match\": {\"designation\": self.designation}},\n                    {\"match\": {\"company\": self.company}},\n                    {\"match\": {\"status\": \"1\"}},\n                    {\n                        \"range\": {\n                            \"created_at\": {\n                                \"gte\": from_date,\n                                \"lte\": to_date,\n                                \"format\": \"yyyy-MM-dd\",\n                            }\n                        }\n                    },\n                ]\n            }\n        }\n    }\n\n    # Send the query to Elasticsearch\n    response = self.es.search(index=\"job_offers\", body=query)\n\n    # Extract the job offer names from the response\n    job_offers = [hit[\"_source\"][\"name\"] for hit in response[\"hits\"][\"hits\"]]\n\n    # Return the list of job offer names\n    return job_offers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 41.911297293523425}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    try:\n        job_offer = self.db.get_job_offer(from_date, to_date)\n        return job_offer\n    except Exception as e:\n        raise e\n\n\n", "CodeBleu_score": 35.56853937906688}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company and department:\n        total_offers = frappe.db.count(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1], [\"company\", \"=\", company], [\"department\", \"=\", department]])\n        accepted_offers = frappe.db.count(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1], [\"company\", \"=\", company], [\"department\", \"=\", department], [\"status\", \"=\", \"Accepted\"]])\n    elif company:\n        total_offers = frappe.db.count(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1], [\"company\", \"=\", company]])\n        accepted_offers = frappe.db.count(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1], [\"company\", \"=\", company], [\"status\", \"=\", \"Accepted\"]])\n    elif department:\n        total_offers = frappe.db.count(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1], [\"department\", \"=\", department]])\n        accepted_offers = frappe.db.count(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1], [\"department\", \"=\", department], [\"status\", \"=\", \"Accepted\"]])\n    else:\n        total_offers = frappe.db.count(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1]])\n        accepted_offers = frappe.db.count(\"Job Offer\", filters=[[\"docstatus\", \"=\", 1], [\"status\", \"=\", \"Accepted\"]])\n    if total_offers > 0:\n        acceptance_rate = (accepted_offers / total_offers) * 100\n    else:\n        acceptance_rate = 0\n    return acceptance_rate, \"Percent\"\n\n\n", "CodeBleu_score": 29.770953142370608}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"accepted\": 1})\n    if company:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"company\": company})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"accepted\": 1, \"company\": company})\n    if department:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"department\": department})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"accepted\": 1, \"department\": department})\n    if total_offers == 0:\n        return 0\n    else:\n        acceptance_rate = accepted_offers / total_offers * 100\n        return acceptance_rate\n\n\n", "CodeBleu_score": 34.836575922186064}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        job_offers = frappe.get_list(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1}, fields=[\"name\"])\n    elif department:\n        job_offers = frappe.get_list(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1}, fields=[\"name\"])\n    else:\n        job_offers = frappe.get_list(\"Job Offer\", filters={\"docstatus\": 1}, fields=[\"name\"])\n\n    accepted_job_offers = frappe.get_list(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"}, fields=[\"name\"])\n\n    if not job_offers:\n        return 0.0\n\n    acceptance_rate = len(accepted_job_offers) / len(job_offers) * 100\n\n    return {\"value\": acceptance_rate, \"fieldtype\": \"Percent\"}\n\n\n", "CodeBleu_score": 34.382591895042346}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t    final Result result = employerService.register(employerForRegisterDto);\n\n    if (!result.isSuccess())\n        return new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n    return ResponseEntity.ok(result);\n}", "CodeBleu_score": 89.47653384283774}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tCompanyStaff companyStaff = getById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\n\t\tResult result = businessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword()));\n\t\tif (!result.isSuccess()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 45.66227929633499}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Result result = businessRules.run(isStaffExists(companyStaffForUpdateDto.getStaffId()));\n\t\tif (result != null) {\n\t\t\treturn result;\n\t\t}\n\t\tfinal Result result2 = businessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (result2 != null) {\n\t\t\treturn result2;\n\t\t}\n\t\tfinal CompanyStaff companyStaff = this.companyStaffDao.getById(companyStaffForUpdateDto.getStaffId());\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff);\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}", "CodeBleu_score": 48.56766620381352}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal var staff = this.companyStaffDao.getByUserId(companyStaffForUpdateDto.getUserId());\n\t\tif (staff == null)\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\n\t\tfinal var result = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), staff.getPassword());\n\t\tif (!result.isSuccess())\n\t\t\treturn result;\n\n\t\tstaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tstaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(staff);\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}", "CodeBleu_score": 42.07736024539456}]}
