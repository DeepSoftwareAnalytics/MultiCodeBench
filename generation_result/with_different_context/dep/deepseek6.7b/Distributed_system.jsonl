{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    loop_wait = self.loop_wait\n    if loop_wait < 2:\n        loop_wait = 2\n    loop_wait -= 2\n    loop_wait *= 1000\n    return loop_wait, self._connection_method(*args)\n\n", "CodeBleu_score": 45.05608166306765}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    loop_wait = self.loop_wait\n    if loop_wait < 2:\n        loop_wait = 2\n    loop_wait -= 2\n    loop_wait *= 1000\n    return (loop_wait, self._kazoo_connection(*args))\n\n\n", "CodeBleu_score": 43.95492166214954}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    loop_wait = self.loop_wait - 2\n    if loop_wait < 2:\n        loop_wait = 2\n    wait = loop_wait * 1000\n    return (wait, self._connect(*args))\n\n", "CodeBleu_score": 46.115118484593644}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, Config):\n        self._retry_timeout = config.retry_timeout\n        self._loop_wait = config.loop_wait\n        self._ttl = config.ttl\n        self._connect_timeout = config.connect_timeout\n    elif isinstance(config, dict):\n        self._retry_timeout = config.get('retry_timeout', self._retry_timeout)\n        self._loop_wait = config.get('loop_wait', self._loop_wait)\n        self._ttl = config.get('ttl', self._ttl)\n        self._connect_timeout = config.get('connect_timeout', self._connect_timeout)\n    else:\n        raise TypeError(f\"config must be an instance of Config or dict, not {type(config)}\")\n\n    if self._client.handler is not None and isinstance(self._client.handler, PatroniSequentialThreadingHandler):\n        self._client.handler.set_connect_timeout(self._connect_timeout)\n\n    if self._ttl is not None:\n        if not self.set_ttl(self._ttl):\n            if self._loop_wait != self._client.handler.loop_wait:\n                self._client.close_socket()\n\n    self._client.retry.deadline = self._retry_timeout\n\n", "CodeBleu_score": 34.72314807793174}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    self._client.set_retry_timeout(config.retry_timeout)\n    self._client.set_loop_wait(config.loop_wait)\n    if self._client._handler and isinstance(self._client._handler, PatroniSequentialThreadingHandler):\n        self._client.set_connect_timeout(config.loop_wait / 2)\n    if self._client.set_ttl(config.ttl):\n        if self._client.closed:\n            self._client.close()\n        else:\n            self._client.stop()\n            self._client.start()\n\n", "CodeBleu_score": 37.18109885123564}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, Config):\n        config = config.to_dict()\n    if 'loop_wait' in config:\n        self.set_loop_wait(config['loop_wait'])\n    if 'retry_timeout' in config:\n        self.set_retry_timeout(config['retry_timeout'])\n    if 'ttl' in config:\n        self.set_ttl(config['ttl'])\n    if 'connect_timeout' in config:\n        self.set_connect_timeout(config['connect_timeout'])\n    if isinstance(self._client.handler, PatroniSequentialThreadingHandler) and self._client._session_timeout != self._client.handler._connect_timeout:\n        self._client.handler._connect_timeout = self._client._session_timeout\n        self._client.handler._socket.close()\n\n", "CodeBleu_score": 44.552019588396014}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    if not self.exists(path):\n        raise NoNodeError(path)\n    init_state = self.get_node(path + self._INIT_STATE)\n    config = self.get_node(path + self._CONFIG)\n    timeline_history = self.get_node(path + self._TIMELINE_HISTORY)\n    sync_state = self.get_node(path + self._SYNC_STATE)\n    members = self.load_members(path)\n    leader = self.get_leader(path)\n    status = self.get_status(path, leader)\n    failover_state = self.get_failover_state(path)\n    failsafe_config = self.get_failsafe_config(path)\n    return Cluster(\n        init_state=init_state and init_state[0],\n        config=config and config[0],\n        timeline_history=timeline_history and timeline_history[0],\n        sync_state=sync_state and sync_state[0],\n        members=members,\n        leader=leader,\n        status=status,\n        failover_state=failover_state,\n        failsafe_config=failsafe_config,\n    )", "CodeBleu_score": 22.637181089593497}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    # Check if the cluster exists\n    if not self.exists(path):\n        raise NoClusterError(path)\n\n    # Load the cluster initialization state\n    init_state = self.get_node(path + self._INIT)\n    if not init_state:\n        raise NoClusterError(path)\n    init_state = InitState.from_node(init_state[0])\n\n    # Load the cluster configuration\n    config = self.get_node(path + self._CONFIG)\n    if not config:\n        raise NoClusterError(path)\n    config = Config.from_node(config[0])\n\n    # Load the cluster timeline history\n    timelines = self.get_node(path + self._TIMELINES)\n    if not timelines:\n        raise NoClusterError(path)\n    timelines = [Timeline.from_node(timeline) for timeline in timelines[0].split(',')]\n\n    # Load the cluster synchronization state\n    sync_state = self.get_node(path + self._SYNC)\n    if not sync_state:\n        raise NoClusterError(path)\n    sync_state = SyncState.from_node(sync_state[0])\n\n    # Load the cluster members\n    members = self.load_members(path)\n\n    # Load the cluster leader information\n    leader = self.get_node(path + self._LEADER)\n    if leader:\n        leader = Leader.from_node(leader[0])\n\n    # Load the cluster status\n    status = self.get_status(path, leader)\n\n    # Load the cluster failover state\n    failover_state = self.get_node(path + self._FAILOVER)\n    if failover_state:\n        failover_state = FailoverState.from_node(failover_state[0])\n\n    # Load the cluster failsafe configuration\n    failsafe_config = self.get_node(path + self._FAILSAFE)\n    if failsafe_config:\n        failsafe_config = FailsafeConfig.from_node(failsafe_config[0])\n\n    # Create the Cluster", "CodeBleu_score": 34.008803500079324}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    # Load initialization state\n    init_state = self.get_node(path + self._INIT_STATE)\n    if init_state is None:\n        raise NoNodeError(path + self._INIT_STATE)\n    init_state = init_state[0]\n\n    # Load configuration\n    config = self.get_node(path + self._CONFIG)\n    if config is None:\n        raise NoNodeError(path + self._CONFIG)\n    config = config[0]\n\n    # Load timeline history\n    timeline_history = self.get_node(path + self._TIMELINE_HISTORY)\n    if timeline_history is None:\n        raise NoNodeError(path + self._TIMELINE_HISTORY)\n    timeline_history = timeline_history[0]\n\n    # Load synchronization state\n    sync_state = self.get_node(path + self._SYNC_STATE)\n    if sync_state is None:\n        raise NoNodeError(path + self._SYNC_STATE)\n    sync_state = sync_state[0]\n\n    # Load members\n    members = self.load_members(path)\n\n    # Load leader information\n    leader = self.get_node(path + self._LEADER)\n    if leader is not None:\n        leader = self.member(*leader)\n\n    # Load cluster status\n    status = self.get_status(path, leader)\n\n    # Load failover state\n    failover_state = self.get_node(path + self._FAILOVER_STATE)\n    if failover_state is not None:\n        failover_state = failover_state[0]\n\n    # Load failsafe configuration\n    failsafe_config = self.get_node(path + self._FAILSAFE_CONFIG)\n    if failsafe_config is not None:\n        failsafe_config = failsafe_config[0]\n\n    return Cluster(\n        init_state=init_state,\n        config=config,\n        timeline_history=timeline_history,\n        sync_state=sync_state,\n        members=members,\n        leader=leader", "CodeBleu_score": 29.907487228060514}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self.client.create(\n            self.lock_path,\n            value=b\"\",\n            ephemeral=True,\n            makepath=True,\n            sequence=True,\n        )\n        return True\n    except Exception as e:\n        if isinstance(e, zk.ZooKeeperError) and e.code in (\n            zk.ZOO_EXIST,\n            zk.ZOO_CONNECTIONLOSS,\n            zk.ZOO_OPERATIONTIMEOUT,\n        ):\n            raise\n        elif isinstance(e, zk.NodeExistsError):\n            self.logger.info(\"Lock already acquired by another instance\")\n            return False\n        else:\n            self.logger.error(\n                \"Error acquiring leader lock\", exc_info=True, extra={\"error\": e}\n            )\n            return False\n\n", "CodeBleu_score": 42.580664755476036}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        # Create an ephemeral node at the specified path in ZooKeeper\n        self.zk.create(self.leader_path, b\"leader\", ephemeral=True, makepath=True)\n        return True\n    except NodeExistsError:\n        # Another instance has the lock, so return False\n        self.logger.info(\"Another instance has the leader lock\")\n        return False\n    except ZooKeeperError as e:\n        # Handle transient issues by retrying\n        if e.type in (ZooKeeperErrorType.CONNECTIONLOSS, ZooKeeperErrorType.OPERATIONTIMEOUT):\n            self.logger.warning(\"Transient issue, retrying...\")\n            return self.attempt_to_acquire_leader()\n        else:\n            # Raise the exception if it's not a transient issue\n            raise\n    except Exception as e:\n        # Log any other exceptions, but only if it's not a NodeExistsError\n        if not isinstance(e, NodeExistsError):\n            self.logger.exception(\"Unexpected exception while attempting to acquire leader lock\")\n        return False", "CodeBleu_score": 48.40674027171637}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    for _ in range(self.max_retries):\n        try:\n            self.zk.create(self.leader_path, b\"\", ephemeral=True, sequence=True)\n            return True\n        except zk.ZooKeeperError as e:\n            if e.type == zk.ZOO_EXISTS:\n                logging.info(\"Another instance has the leader lock\")\n                return False\n            else:\n                raise\n        except zk.ZooKeeperError as e:\n            if e.type == zk.ZOO_EXISTS:\n                logging.info(\"Another instance has the leader lock\")\n                return False\n            else:\n                raise\n        except Exception as e:\n            if not isinstance(e, zk.NodeExistsError):\n                logging.error(\"Error acquiring leader lock: %s\", e)\n            return False\n    else:\n        logging.info(\"Failed to acquire leader lock after %d retries\", self.max_retries)\n        return False\n\n\n\n", "CodeBleu_score": 50.51260411095879}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self.client_id != leader.session:\n        self._log.warning(\n            \"Leader session ID mismatch. Expected: %s, got: %s\",\n            self.client_id,\n            leader.session,\n        )\n        try:\n            self.delete(self.leader_path, -1)\n        except NoNodeError:\n            self._log.warning(\"Leader ZNode does not exist\")\n        except ConnectionClosedError:\n            self._log.warning(\"Connection to ZooKeeper closed\")\n        except RetryFailedError:\n            self._log.warning(\"Retry failed for leader deletion\")\n        except ZooKeeperError as e:\n            self._log.warning(\"Error deleting leader ZNode: %s\", e)\n            raise e\n        try:\n            self.create(\n                self.leader_path,\n                self.client_id.encode(\"utf-8\"),\n                ephemeral=True,\n                makepath=True,\n            )\n        except ZooKeeperError as e:\n            self._log.warning(\"Error creating leader ZNode: %s\", e)\n            return False\n    return True\n\n\n\n\n", "CodeBleu_score": 45.037460112642165}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    try:\n        if self.client_id != leader.session:\n            try:\n                self.delete(self.leader_path)\n            except NoNodeError:\n                pass\n            except ConnectionClosedError:\n                pass\n            except RetryFailedError:\n                pass\n            except ZooKeeperError as e:\n                logger.error(\"Failed to delete leader ZNode: {}\".format(e))\n                return False\n            try:\n                self.create(self.leader_path, value=self.client_id.encode(\"utf-8\"), ephemeral=True, sequence=True)\n            except ConnectionClosedError:\n                pass\n            except RetryFailedError:\n                pass\n            except ZooKeeperError as e:\n                logger.error(\"Failed to create leader ZNode: {}\".format(e))\n                return False\n            return True\n    except ZooKeeperError as e:\n        logger.error(\"Failed to update leader: {}\".format(e))\n        return False\n\n", "CodeBleu_score": 47.28878316170733}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    try:\n        if self.client_id != leader.session:\n            logging.warning(\n                f\"Leader session mismatch: expected {self.client_id}, got {leader.session}\"\n            )\n            try:\n                self.delete_leader()\n            except NoNodeError:\n                pass\n            except ConnectionClosedError:\n                pass\n            except RetryFailedError:\n                pass\n            return False\n    except NoNodeError:\n        pass\n    except ConnectionClosedError:\n        pass\n    except RetryFailedError:\n        pass\n    try:\n        self.create_leader(self.client_id.encode(\"utf-8\"))\n    except NoNodeError:\n        pass\n    except ConnectionClosedError:\n        pass\n    except RetryFailedError:\n        pass\n    return True\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 35.42028922259447}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\t\n    if self._poll_time is None or time.time() >= self._poll_time:\n        self._poll_time = time.time() + self._poll_interval\n        exhibitors = self._query_exhibitors(self._exhibitors)\n        if exhibitors is None:\n            logging.error('No exhibitors available')\n            return False\n        if exhibitors.get('address') and exhibitors.get('port'):\n            zookeeper_uri = uri('zookeeper', (exhibitors['address'], exhibitors['port']))\n            if zookeeper_uri != self._zookeeper_uri:\n                logging.info('ZooKeeper connection string changed to %s', zookeeper_uri)\n                self._zookeeper_uri = zookeeper_uri\n                return True\n    return False\n\n", "CodeBleu_score": 41.14782982580034}, {"code": "def poll(self) -> bool\n\t\n    if not self._poll_timer.check():\n        return False\n    self._poll_timer.reset()\n    exhibitors = self._query_exhibitors(self._exhibitors)\n    if exhibitors is None:\n        logging.warning('No exhibitors found')\n        return False\n    if not exhibitors:\n        logging.warning('No exhibitors found')\n        return False\n    if 'server' not in exhibitors or 'port' not in exhibitors:\n        logging.warning('Invalid exhibitor data: %s', exhibitors)\n        return False\n    server = exhibitors['server']\n    port = exhibitors['port']\n    if server != self._server or port != self._port:\n        logging.info('Exhibitor changed to %s:%d', server, port)\n        self._server = server\n        self._port = port\n        self._zk_connection_string = self._zk_connection_string_template.format(server=server, port=port)\n        return True\n    return False\n\n", "CodeBleu_score": 37.303020703201426}, {"code": "def poll(self) -> bool\n\t\n    if self._poll_interval is None:\n        return False\n    if self._last_poll is not None and (time.time() - self._last_poll) < self._poll_interval:\n        return False\n    self._last_poll = time.time()\n    data = self._query_exhibitors(self._exhibitors)\n    if data is None:\n        return False\n    servers = []\n    for server in data['servers']:\n        servers.append('{}:{}'.format(server['hostname'], server['port']))\n    servers = sorted(servers)\n    if servers == self._servers:\n        return False\n    self._servers = servers\n    self._update_zookeeper_connection_string()\n    return True\n\n", "CodeBleu_score": 33.39187124458969}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider.poll():\n        self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 96.93873121769799}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider.poll():\n        self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n", "CodeBleu_score": 96.93873121769799}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider.poll():\n        self._client.set_hosts(self._ensemble_provider.zookeeper_hosts)\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n", "CodeBleu_score": 96.93873121769799}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t    this.nodeCache = nodeCache;\n    this.nodeCacheListener = nodeCacheListener;\n}", "CodeBleu_score": 81.45633845775137}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\t    if (zookeeperListener != null) {\n        String group = zookeeperListener.getGroup();\n        String dataId = zookeeperListener.getDataId();\n        log.info(\"Start to unsubscribe from zookeeper, group={}, dataId={}\", group, dataId);\n        try {\n            zookeeperListener.unsubscribe();\n        } catch (Exception e) {\n            log.error(\"Failed to unsubscribe from zookeeper, group={}, dataId={}\", group, dataId, e);\n        }\n    }\n}", "CodeBleu_score": 40.99696921161572}, {"code": "public void destroy(){\n\t    if (zookeeperListener != null) {\n        String group = zookeeperListener.getGroup();\n        String dataId = zookeeperListener.getDataId();\n        log.info(\"unsubscribe group={}, dataId={}\", group, dataId);\n        try {\n            zookeeperListener.unsubscribe();\n        } catch (Exception e) {\n            log.error(\"unsubscribe fail\", e);\n        }\n    }\n}", "CodeBleu_score": 43.76011781675905}, {"code": "public void destroy(){\n\t    if (zookeeperListener != null) {\n        String group = zookeeperListener.getGroup();\n        String dataId = zookeeperListener.getDataId();\n        log.info(\"Unsubscribe from zookeeper, group:{}, dataId:{}\", group, dataId);\n        try {\n            zookeeperListener.unsubscribe();\n        } catch (Exception e) {\n            log.error(\"Unsubscribe from zookeeper fail, group:{}, dataId:{}\", group, dataId, e);\n        }\n    }\n}", "CodeBleu_score": 41.29503233551952}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zkServer = (ZookeeperServer) server;\n        return zkServer.getPayload().getMetadata();\n    }\n    return Collections.emptyMap();\n}", "CodeBleu_score": 62.88280052230495}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        return ((ZookeeperServer) server).getPayload().getMetadata();\n    } else {\n        return Collections.emptyMap();\n    }\n}", "CodeBleu_score": 42.748709058925}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zkServer = (ZookeeperServer) server;\n        return zkServer.getPayload().getMetadata();\n    }\n    return Collections.emptyMap();\n}", "CodeBleu_score": 62.88280052230495}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t        String path = getPath(group, serviceId);\n        NodeCache nodeCache = new NodeCache(curatorFramework, path);\n        NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n            @Override\n            public void nodeChanged() throws Exception {\n                String config = convertConfig(path);\n                zookeeperSubscribeCallback.callback(config);\n            }\n        };\n        ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n        zookeeperListener.addListener();\n        return zookeeperListener;\n    }", "CodeBleu_score": 88.19516540023801}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = String.format(\"/%s/%s/%s/%s\", ZookeeperConfig.ZOOKEEPER_ROOT, group, serviceId, ZookeeperConfig.ZOOKEEPER_CONFIG);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            String config = convertConfig(nodeCache.getCurrentData().getData());\n            zookeeperSubscribeCallback.onConfigChange(config);\n        }\n    };\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    zookeeperListener.addListener();\n    return zookeeperListener;\n}", "CodeBleu_score": 73.55750597145682}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getConfigPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            String config = convertConfig(nodeCache.getCurrentData());\n            zookeeperSubscribeCallback.callback(config);\n        }\n    };\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start();\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    zookeeperListener.addListener();\n    return zookeeperListener;\n}", "CodeBleu_score": 77.36892408979413}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerList serverList = new ZookeeperServerList(config, serviceDiscovery);\n    serverList.setLoadBalancer(new RoundRobinRule());\n    serverList.setServiceId(config.getClientName());\n    return serverList;\n}", "CodeBleu_score": 57.04506973209246}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerList serverList = new ZookeeperServerList(config, serviceDiscovery);\n    serverList.setLoadBalancer(new RoundRobinRule());\n    serverList.setServerListExecutor(new ExecutorServiceImpl(new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue<Runnable>())));\n    serverList.setServiceId(config.getClientName());\n    return serverList;\n}", "CodeBleu_score": 58.83666702105731}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerList zookeeperServerList = new ZookeeperServerList(config, serviceDiscovery);\n    zookeeperServerList.setLoadBalancer(new ZookeeperLoadBalancer(zookeeperServerList));\n    zookeeperServerList.setLoadBalancerListener(new ZookeeperLoadBalancerListener(zookeeperServerList));\n    zookeeperServerList.setServiceId(config.getClientName());\n    return zookeeperServerList;\n}", "CodeBleu_score": 54.059011384013}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = globalConfig ? this.globalGroup : this.group;\n    String dataId = globalConfig ? this.globalDataId : this.dataId;\n    log.info(\"Subscribe config, group: {}, dataId: {}\", group, dataId);\n    try {\n        return zookeeperOperation.subscribeData(group, dataId, new DataListener() {\n            @Override\n            public void receiveConfigInfo(String configInfo) {\n                log.info(\"Receive config info: {}\", configInfo);\n                try {\n                    String newConfig = configInfo;\n                    if (globalConfig) {\n                        newConfig = ConfigService.this.globalConfig.getConfig(dataId);\n                    }\n                    ConfigService.this.config.setConfig(newConfig);\n                    log.info(\"Update config: {}\", newConfig);\n                } catch (Exception e) {\n                    log.error(\"Update config error\", e);\n                }\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"Subscribe config error\", e);\n    }\n    return null;\n}", "CodeBleu_score": 40.97223171625932}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = globalConfig ? this.globalGroup : this.group;\n    String dataId = globalConfig ? this.globalDataId : this.dataId;\n    log.info(\"Subscribe config [{}], group: [{}], dataId: [{}]\", this.serverConfig.getConfigType(), group, dataId);\n    try {\n        return zookeeperOperation.subscribeData(group, dataId, new ZookeeperListener() {\n            @Override\n            public void onDataChange(String data) {\n                log.info(\"Config [{}] changed, group: [{}], dataId: [{}], data: [{}]\", serverConfig.getConfigType(), group, dataId, data);\n                serverConfig.updateConfig(data);\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"Subscribe config [{}] failed, group: [{}], dataId: [{}]\", serverConfig.getConfigType(), group, dataId, e);\n        return null;\n    }\n}", "CodeBleu_score": 40.08753413211863}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = globalConfig ? GlobalConfig.getGroup() : ConfigUtil.getGroup();\n    String dataId = globalConfig ? GlobalConfig.getDataId() : ConfigUtil.getDataId();\n    log.info(\"[Subscribe] group={}, dataId={}\", group, dataId);\n    try {\n        return zookeeperOperation.subscribeData(group, dataId, new ZookeeperListener() {\n            @Override\n            public void notify(String data) {\n                ConfigUtil.updateConfig(data);\n            }\n        });\n    } catch (Exception e) {\n        log.error(\"[Subscribe] Failed to subscribe group={}, dataId={}\", group, dataId, e);\n        return null;\n    }\n}", "CodeBleu_score": 45.6002956290353}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\t    String zookeeperConnectionString = environment.getProperty(\"zookeeper.connectionString\");\n    if (StringUtils.isEmpty(zookeeperConnectionString)) {\n        throw new DiscoveryException(\"Zookeeper connection string is empty\");\n    }\n    int retryCount = Integer.parseInt(environment.getProperty(\"zookeeper.retryCount\"));\n    int sleepTime = Integer.parseInt(environment.getProperty(\"zookeeper.sleepTime\"));\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(zookeeperConnectionString).retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount)).build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 49.024472708108945}, {"code": "public CuratorFramework curatorFramework(){\n\t    String zkConnectionString = getZkConnectionString();\n    if (zkConnectionString.isEmpty()) {\n        throw new DiscoveryException(\"Zookeeper connection string is empty\");\n    }\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(zkConnectionString, new ExponentialBackoffRetry(getRetryCount(), getSleepTime()));\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 21.87129158597083}, {"code": "public CuratorFramework curatorFramework(){\n\t    String zkConnectionString = System.getenv(\"ZOOKEEPER_CONNECTION_STRING\");\n    if (zkConnectionString == null || zkConnectionString.isEmpty()) {\n        throw new DiscoveryException(\"ZOOKEEPER_CONNECTION_STRING is not set\");\n    }\n    int retryCount = Integer.parseInt(System.getenv(\"ZOOKEEPER_RETRY_COUNT\"));\n    int sleepTime = Integer.parseInt(System.getenv(\"ZOOKEEPER_SLEEP_TIME\"));\n    CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(zkConnectionString, new ExponentialBackoffRetry(sleepTime, retryCount));\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 35.15938913110759}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t\n    /**\n     * Creates a new instance of GatewayStrategyRouteZookeeperProcessor.\n     * @return a new instance of GatewayStrategyRouteZookeeperProcessor\n     */\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true, havingValue = \"false\")\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 47.96740817420401}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t\n    /**\n     * Creates a new instance of GatewayStrategyRouteZookeeperProcessor.\n     *\n     * @param discoveryClient the DiscoveryClient to use for locating routes\n     * @param routeLocatorProperties the RouteLocatorProperties to use for configuring the route locator\n     * @return a new instance of GatewayStrategyRouteZookeeperProcessor\n     */\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(name = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(DiscoveryClient discoveryClient, RouteLocatorProperties routeLocatorProperties) {\n        return new GatewayStrategyRouteZookeeperProcessor(discoveryClient, routeLocatorProperties);\n    }\n}", "CodeBleu_score": 40.67495510845882}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t\n    /**\n     * The GatewayStrategyRouteZookeeperProcessor class defines a processor for gateway routes.\nIt includes a constructor that takes a GatewayRouteZookeeperProperties object as a parameter, which is used to configure the processor.\nThe processor is then registered as a bean in the application context with the name \"gatewayStrategyRouteZookeeperProcessor\".\n     */\n    protected static class GatewayStrategyRouteZookeeperProcessor extends AbstractGatewayRouteProcessor<GatewayRouteZookeeperProperties> {\n\n        /**\n         * The constructor takes a GatewayRouteZookeeperProperties object as a parameter, which is used to configure the processor.\n         * @param properties The properties object that contains the configuration for the processor.\n         */\n        public GatewayStrategyRouteZookeeperProcessor(GatewayRouteZookeeperProperties properties) {\n            super(properties);\n        }\n    }\n\n    /**\n     * The bean method returns a new instance of GatewayStrategyRouteZookeeperProcessor.\n     * @param properties The properties object that contains the configuration for the processor.\n     * @return A new instance of GatewayStrategyRouteZookeeperProcessor.\n     */\n    @Bean\n    @ConditionalOnMissingBean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", matchIfMissing = true, havingValue = \"false\")\n    public GatewayStrategyRouteZookeeperProcessor gatewayStrategyRouteZookeeperProcessor(GatewayRouteZookeeperProperties properties) {\n        return new GatewayStrategyRouteZookeeperProcessor(properties);\n    }\n}", "CodeBleu_score": 22.483069130793837}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\t    CuratorFramework curatorFramework = CuratorFrameworkFactory.builder()\n            .connectString(zookeeperProperties.getHosts())\n            .sessionTimeoutMs(zookeeperProperties.getSessionTimeout())\n            .connectionTimeoutMs(zookeeperProperties.getConnectionTimeout())\n            .namespace(zookeeperProperties.getNamespace())\n            .retryPolicy(new RetryNTimes(zookeeperProperties.getRetryCount(), zookeeperProperties.getRetryInterval()))\n            .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 55.01058309205613}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t    CuratorFramework client = CuratorFrameworkFactory.builder().connectString(zkHosts).sessionTimeoutMs(zkSessionTimeout).retryPolicy(new ExponentialBackoffRetry(1000, 3)).namespace(zkNamespace).build();\n    client.start();\n    return client;\n}", "CodeBleu_score": 37.16008093744042}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t    CuratorFramework client = CuratorFrameworkFactory.builder()\n            .connectString(hosts)\n            .sessionTimeoutMs(sessionTimeoutMs)\n            .connectionTimeoutMs(connectionTimeoutMs)\n            .namespace(namespace)\n            .retryPolicy(new ExponentialBackoffRetry(1000, 3))\n            .build();\n    client.start();\n    return client;\n}", "CodeBleu_score": 43.683476803734}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\t    InterProcessMutex mutex = locksMap.get(path);\n    if (mutex == null) {\n        try {\n            mutex = new InterProcessMutex(zookeeperClient, path);\n            if (!mutex.acquire(lockTimeout, TimeUnit.MILLISECONDS)) {\n                throw new DistributedLockException(\"Failed to acquire lock for path: \" + path);\n            }\n            locksMap.put(path, mutex);\n        } catch (Exception e) {\n            throw new DistributedLockException(\"Failed to acquire lock for path: \" + path, e);\n        }\n    } else {\n        try {\n            if (!mutex.acquire(lockTimeout, TimeUnit.MILLISECONDS)) {\n                throw new DistributedLockException(\"Failed to acquire lock for path: \" + path);\n            }\n        } catch (Exception e) {\n            throw new DistributedLockException(\"Failed to acquire lock for path: \" + path, e);\n        }\n    }\n}", "CodeBleu_score": 35.14409965178903}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    InterProcessMutex mutex = locksMap.get(path);\n    if (mutex == null) {\n        try {\n            mutex = new InterProcessMutex(curatorFramework, path);\n            if (!mutex.acquire(lockTimeout, TimeUnit.MILLISECONDS)) {\n                throw new DistributedLockException(\"Failed to acquire lock for path: \" + path);\n            }\n            locksMap.put(path, mutex);\n        } catch (Exception e) {\n            throw new DistributedLockException(\"Failed to acquire lock for path: \" + path, e);\n        }\n    } else {\n        try {\n            if (!mutex.acquire(lockTimeout, TimeUnit.MILLISECONDS)) {\n                throw new DistributedLockException(\"Failed to acquire lock for path: \" + path);\n            }\n        } catch (Exception e) {\n            throw new DistributedLockException(\"Failed to acquire lock for path: \" + path, e);\n        }\n    }\n}", "CodeBleu_score": 35.36016975544854}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    InterProcessMutex mutex = locksMap.get(path);\n    if (mutex == null) {\n        mutex = new InterProcessMutex(zkClient, path);\n        locksMap.put(path, mutex);\n    }\n    try {\n        mutex.acquire();\n    } catch (Exception e) {\n        throw new DistributedLockException(\"Error acquiring lock for path \" + path, e);\n    }\n}", "CodeBleu_score": 27.41059833520636}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t        CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n        String nodePath = nodePath(dtpProperties);\n        if (dtpProperties.getZookeeper().getConfigType() == DtpProperties.Zookeeper.ConfigType.PROPERTIES) {\n            return genPropertiesTypeMap(nodePath, curatorFramework);\n        } else {\n            String configKey = dtpProperties.getZookeeper().getConfigKey();\n            String configPath = ZKPaths.makePath(nodePath, configKey);\n            String value = getVal(configPath, curatorFramework);\n            return ConfigHandler.parse(value);\n        }\n    }", "CodeBleu_score": 49.837419317345876}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t        CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n        String nodePath = nodePath(dtpProperties);\n        DtpProperties.ConfigType configType = dtpProperties.getConfigType();\n        if (configType == DtpProperties.ConfigType.PROPERTIES) {\n            return genPropertiesTypeMap(nodePath, curatorFramework);\n        } else {\n            String configKey = dtpProperties.getConfigKey();\n            String configPath = ZKPaths.makePath(nodePath, configKey);\n            String configValue = getVal(configPath, curatorFramework);\n            return ConfigHandler.parse(configValue);\n        }\n    }", "CodeBleu_score": 47.681140619510884}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t        final CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n        final String nodePath = nodePath(dtpProperties);\n        if (DtpProperties.ConfigType.PROPERTIES == dtpProperties.getConfigType()) {\n            return genPropertiesTypeMap(nodePath, curatorFramework);\n        } else {\n            final String configKey = dtpProperties.getConfigKey();\n            final String configVal = getVal(ZKPaths.makePath(nodePath, configKey), curatorFramework);\n            return ConfigHandler.configToMap(configVal);\n        }\n    }", "CodeBleu_score": 41.43638286134122}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t        DtpProperties dtpProperties = environment.getPropertySources().stream().filter(p -> p instanceof DtpProperties).map(p -> (DtpProperties) p).findFirst().orElse(new DtpProperties());\n        environment.getPropertySources().addLast(new DtpPropertiesPropertySource(DtpProperties.class.getName(), dtpProperties));\n        Map<Object, Object> properties = dtpProperties.getProperties();\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, properties);\n        }\n    }", "CodeBleu_score": 62.9929749076653}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t        DtpProperties dtpProperties = application.getBeanFactory().getBean(DtpProperties.class);\n        Binder.get(environment).bind(\"dtp\", Bindable.ofInstance(dtpProperties));\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, dtpProperties.getProperties());\n        }\n    }", "CodeBleu_score": 53.35721277191611}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t        DtpProperties dtpProperties = application.getBeanFactory().getBean(DtpProperties.class);\n        environment.getPropertySources().addFirst(new DtpPropertySource(dtpProperties));\n        Map<Object, Object> properties = dtpProperties.toMap();\n        if (!checkPropertyExist(environment)) {\n            createZkPropertySource(environment, properties);\n        }\n    }", "CodeBleu_score": 67.34332346547053}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t", "CodeBleu_score": 4.435738909874791}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    if (configInfo == null)\n        throw new ArgumentNullException(nameof(configInfo));\n    if (string.IsNullOrWhiteSpace(configInfo.ConnectionString))\n        throw new ArgumentNullException(nameof(configInfo.ConnectionString));\n    if (configInfo.SessionTimeout == TimeSpan.Zero)\n        throw new ArgumentNullException(nameof(configInfo.SessionTimeout));\n    if (string.IsNullOrWhiteSpace(configInfo.RoutePath))\n        throw new ArgumentNullException(nameof(configInfo.RoutePath));\n    if (string.IsNullOrWhiteSpace(configInfo.SubscriberPath))\n        throw new ArgumentNullException(nameof(configInfo.SubscriberPath));\n    if (string.IsNullOrWhiteSpace(configInfo.CommandPath))\n        throw new ArgumentNullException(nameof(configInfo.CommandPath));\n    if (string.IsNullOrWhiteSpace(configInfo.CachePath))\n        throw new ArgumentNullException(nameof(configInfo.CachePath));\n    if (string.IsNullOrWhiteSpace(configInfo.MqttRoutePath))\n        throw new ArgumentNullException(nameof(configInfo.MqttRoutePath));\n    if (string.IsNullOrWhiteSpace(configInfo.ChRoot))\n        throw new ArgumentNullException(nameof(configInfo.ChRoot));\n    if (configInfo.ReloadOnChange)\n    {\n        builder.Register(ctx =>\n        {\n            var logger = ctx.Resolve<ILogger<ZooKeeperRouteManager>>();\n            var config = GetConfigInfo(configInfo);\n            return new ZooKeeperRouteManager(config, logger);\n        }).As<IServiceRouteManager>().SingleInstance();\n    }\n    else\n    {\n        builder.Register(ctx =>\n        {\n            var logger = ctx.Resolve<ILogger<ZooKeeperRouteManager>>();\n            var config = GetConfigInfo(configInfo);\n            return new ZooKeeperRouteManager(config, logger);\n        }).As<IServiceRouteManager>().SingleInstance();\n    }\n    return this;\n}", "CodeBleu_score": 39.80498670448742}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t", "CodeBleu_score": 4.435738909874791}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t            var config = GetConfigInfo(configInfo);\n            builder.RegisterAdapter(provider => new ZookeeperServiceCommandManager(config, provider.GetService<ILogger<ZookeeperServiceCommandManager>>())).InstancePerLifetimeScope();\n            return this;\n        }", "CodeBleu_score": 25.130848525698923}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t            var config = GetConfigInfo(configInfo);\n            var serviceProvider = builder.Build();\n            var commandManager = new ZookeeperServiceCommandManager(config, serviceProvider);\n            builder.RegisterAdapter(commandManager).InstancePerLifetimeScope();\n            return this;\n        }", "CodeBleu_score": 21.810227728527682}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t            builder.RegisterType<ZookeeperServiceCommandManager>().As<IServiceCommandManager>().InstancePerLifetimeScope();\n            return this;\n        }", "CodeBleu_score": 18.401289737890124}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"File path must be a non-empty string.\", nameof(path));\n    }\n    if (provider == null && Path.IsPathRooted(path)) {\n        throw new ArgumentException($\"The path '{path}' is not rooted.\", nameof(path));\n    }\n    var source = new ZookeeperConfigurationSource(provider, path, optional, reloadOnChange);\n    builder.Add(source);\n    builder.AddZookeeper(source.ReloadOnChange);\n    return builder;\n}", "CodeBleu_score": 46.55240732742668}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"File path must be a non-empty string.\", nameof(path));\n    }\n    if (provider == null && Path.IsPathRooted(path)) {\n        throw new ArgumentException(\"provider must not be null for rooted file paths.\", nameof(provider));\n    }\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n    builder.Add(source);\n    var config = builder.Build();\n    return builder;\n}", "CodeBleu_score": 60.0160936956416}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"File path must be a non-empty string.\", nameof(path));\n    }\n    if (!path.StartsWith(\"/\")) {\n        throw new ArgumentException(\"File path must be an absolute path.\", nameof(path));\n    }\n    if (provider == null && Path.IsPathRooted(path)) {\n        throw new ArgumentNullException(nameof(provider), \"A file provider must be specified when using a rooted file path.\");\n    }\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n    builder.Add(source);\n    builder.Build();\n    return builder;\n}", "CodeBleu_score": 59.69116156865098}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    var updatedRoutes = routes.Select(route => {\n        route.Addresses = route.Addresses.Where(address => !Address.Contains(address)).ToList();\n        return route;\n    });\n    await SetRoutesAsync(updatedRoutes);\n}", "CodeBleu_score": 37.42979000862869}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    var updatedRoutes = routes.Select(r => {\n        var addresses = r.Addresses.Where(a => !Address.Contains(a)).ToList();\n        return new ServiceRoute {\n            Addresses = addresses,\n            Name = r.Name,\n            ServiceType = r.ServiceType\n        };\n    }).ToList();\n    await SetRoutesAsync(updatedRoutes);\n}", "CodeBleu_score": 32.291733648076125}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t            var routes = await GetRoutesAsync();\n            var newRoutes = routes.Select(route => {\n                var newAddresses = route.Addresses.Except(Address);\n                return new ServiceRoute(route.Name, newAddresses);\n            });\n            await SetRoutesAsync(newRoutes);\n        }", "CodeBleu_score": 36.062773578275674}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    foreach (var client in _zookeeperClients) {\n        var routePath = GetRoutePath(client.RoutePath);\n        var existingRoutes = await client.GetRoutesAsync();\n        var routesToDelete = existingRoutes.Where(r => routes.All(x => x.Match(r)) && r.Addresses.Any(x => x.Equals(hostAddr)));\n        foreach (var routeToDelete in routesToDelete) {\n            await client.RemoveRouteAsync(routeToDelete);\n        }\n    }\n}", "CodeBleu_score": 23.84853190357897}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    foreach (var route in routes) {\n        var routePath = GetRoutePath(route);\n        var zkClients = GetZkClients();\n        foreach (var zkClient in zkClients) {\n            var existingRoutes = await zkClient.GetChildrenAsync(routePath);\n            var routesToDelete = existingRoutes.Where(r => !routes.Any(rr => rr.Equals(r)) && r.Contains(hostAddr.Host));\n            foreach (var routeToDelete in routesToDelete) {\n                await zkClient.DeleteAsync($\"{routePath}/{routeToDelete}\");\n            }\n        }\n    }\n}", "CodeBleu_score": 25.85729070975039}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = Path.Combine(hostAddr.Host, hostAddr.Port.ToString());\n    var clients = await _zookeeperClientFactory.GetClientsAsync();\n    foreach (var client in clients) {\n        var existingRoutes = await client.GetChildrenAsync(routePath);\n        var routesToDelete = existingRoutes.Where(r => !routes.Select(x => x.Route).Contains(r)).ToList();\n        foreach (var route in routesToDelete) {\n            if (route.Contains(hostAddr.Host)) {\n                await client.DeleteAsync(Path.Combine(routePath, route));\n            }\n        }\n    }\n}", "CodeBleu_score": 28.366736721852426}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (data == null) {\n        return null;\n    }\n    if (Log.IsDebugEnabled) {\n        Log.Debug($\"ServiceRoute data: {data}\");\n    }\n    var descriptor = await Task.Run(() => JsonConvert.DeserializeObject<ServiceRouteDescriptor>(Encoding.UTF8.GetString(data)));\n    var route = ServiceRouteFactory.Create(descriptor);\n    return route;\n}", "CodeBleu_score": 36.661084489730825}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (data == null)\n        return null;\n    \n    if (Log.IsDebugEnabled)\n        Log.Debug(\"Route data: {0}\", data.ToHexString());\n    \n    var descriptor = ServiceRouteDescriptor.Deserialize(data);\n    var factory = ServiceRouteFactory.GetInstance();\n    var routes = await factory.CreateRoutesAsync(descriptor);\n    return routes.FirstOrDefault();\n}", "CodeBleu_score": 35.40629530998014}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t  if (data == null)\n    return null;\n\n  if (Log.IsDebugEnabled)\n    Log.Debug(\"Route data: \" + data);\n\n  var descriptor = await Task.Run(() => ServiceRouteDescriptor.Deserialize(data));\n  return descriptor.CreateServiceRoute();\n}", "CodeBleu_score": 34.15875825884307}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n    var oldRoute = await GetRoute(oldData);\n    if (newRoute == null || oldRoute == null)\n        return;\n\n    lock (_routes)\n    {\n        var index = _routes.IndexOf(oldRoute);\n        if (index >= 0)\n            _routes[index] = newRoute;\n    }\n\n    OnChanged?.Invoke(new RouteChangeContext(oldRoute, newRoute));\n}", "CodeBleu_score": 39.396816426501815}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n    var oldRoute = _routes.FirstOrDefault(r => DataEquals(r.Data, oldData));\n    if (oldRoute == null)\n        return;\n\n    lock (_routesLock)\n    {\n        var index = _routes.IndexOf(oldRoute);\n        _routes[index] = newRoute;\n    }\n\n    OnChanged?.Invoke(this, new RouteChangeEventArgs(oldRoute, newRoute));\n}", "CodeBleu_score": 38.06517612165706}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n    if (newRoute == null)\n        return;\n\n    ServiceRoute oldRoute = null;\n    lock (_routesLock) {\n        oldRoute = _routes.FirstOrDefault(r => r.NodeId == newRoute.NodeId);\n        if (oldRoute != null)\n            _routes.Remove(oldRoute);\n        _routes.Add(newRoute);\n    }\n\n    OnChanged?.Invoke(this, new NodeChangedEventArgs(oldRoute, newRoute));\n}", "CodeBleu_score": 44.66486595284665}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var existingSubscribers = await GetSubscribers(subscribers.Select(s => s.Name));\n    foreach (var subscriber in existingSubscribers)\n    {\n        var newAddresses = subscribers.FirstOrDefault(s => s.Name == subscriber.Name)?.Addresses;\n        if (newAddresses != null)\n            subscriber.Addresses = subscriber.Addresses.Union(newAddresses).ToArray();\n    }\n    await base.SetSubscribersAsync(existingSubscribers);\n}", "CodeBleu_score": 44.29701484045001}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var existingSubscribers = await GetSubscribers(subscribers.Select(x => x.ServiceName));\n    var newSubscribers = subscribers.ToArray();\n\n    foreach (var subscriber in existingSubscribers)\n    {\n        var newSubscriber = newSubscribers.FirstOrDefault(x => x.ServiceName == subscriber.ServiceName);\n        if (newSubscriber != null)\n        {\n            var newAddresses = newSubscriber.Addresses.ToArray();\n            var existingAddresses = subscriber.Addresses.ToArray();\n            var newAddressesSet = new HashSet<string>(newAddresses, StringComparer.OrdinalIgnoreCase);\n            var existingAddressesSet = new HashSet<string>(existingAddresses, StringComparer.OrdinalIgnoreCase);\n\n            foreach (var address in newAddressesSet)\n            {\n                if (!existingAddressesSet.Contains(address))\n                    subscriber.Addresses.Add(address);\n            }\n        }\n    }\n\n    await base.SetSubscribersAsync(existingSubscribers);\n}", "CodeBleu_score": 32.53677130639653}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var newSubscribers = subscribers.ToArray();\n    var existingSubscribers = await GetSubscribers(newSubscribers.Select(s => s.Name));\n\n    foreach (var newSubscriber in newSubscribers)\n    {\n        var existingSubscriber = existingSubscribers.FirstOrDefault(s => s.Name == newSubscriber.Name);\n        if (existingSubscriber != null)\n        {\n            var newAddresses = newSubscriber.Addresses.ToArray();\n            var existingAddresses = existingSubscriber.Addresses.ToArray();\n            var mergedAddresses = newAddresses.Union(existingAddresses).ToArray();\n            existingSubscriber.Addresses = mergedAddresses;\n        }\n        else\n        {\n            existingSubscribers.Add(newSubscriber);\n        }\n    }\n\n    await base.SetSubscribersAsync(existingSubscribers);\n}", "CodeBleu_score": 29.32431473003781}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var subscribers = new List<ServiceSubscriber>();\n    var rootPath = GetRootPath();\n    foreach (var child in childrens) {\n        var nodePath = Path.Combine(rootPath, child);\n        LogDebug($\"Retrieving subscribers for node: {nodePath}\");\n        var subscriberInfo = await GetSubscriberInfo(nodePath);\n        subscribers.Add(subscriberInfo);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 37.91562716429231}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t  List<ServiceSubscriber> subscribers = new List<ServiceSubscriber>();\n  string rootPath = \"/\" + childrens.FirstOrDefault();\n  foreach (string child in childrens) {\n    string nodePath = rootPath + \"/\" + child;\n    LogDebug($\"Getting subscribers for node {nodePath}\");\n    ServiceSubscriber[] childSubscribers = await GetSubscribers(nodePath);\n    subscribers.AddRange(childSubscribers);\n  }\n  return subscribers.ToArray();\n}", "CodeBleu_score": 33.87571975621659}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var subscribers = new List<ServiceSubscriber>();\n\n    foreach (var child in childrens) {\n        var path = $\"{RootPath}/{child}\";\n        Log.Debug($\"Getting subscribers for child node: {path}\");\n\n        var subscribersResponse = await GetSubscribersAsync(path);\n        var subscribersData = subscribersResponse.Data;\n\n        if (subscribersData != null) {\n            subscribers.AddRange(subscribersData);\n        }\n    }\n\n    return subscribers.ToArray();\n}", "CodeBleu_score": 40.1722810586285}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var (resetEvent, zooKeeper) = await GetZooKeeper();\n    var rootPath = _configInfo.SubscriberPath;\n    if (!rootPath.EndsWith(\"/\"))\n        rootPath += \"/\";\n\n    var exists = await zooKeeper.ExistsAsync(rootPath);\n    if (exists)\n    {\n        var childrens = await zooKeeper.GetChildrenAsync(rootPath);\n        _subscribers = await GetSubscribers(childrens);\n    }\n    else\n    {\n        _logger.LogWarning($\"\u8ba2\u9605\u8005\u8282\u70b9\u4e0d\u5b58\u5728\uff1a{rootPath}\");\n        _subscribers = Array.Empty<ServiceSubscriber>();\n    }\n}", "CodeBleu_score": 48.402074011430926}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var (resetEvent, zooKeeper) = await GetZooKeeper();\n    await resetEvent.WaitAsync();\n\n    var rootPath = _configInfo.SubscriberPath;\n    if (!rootPath.EndsWith(\"/\"))\n        rootPath += \"/\";\n\n    var exists = await zooKeeper.ExistsAsync(rootPath);\n    if (exists)\n    {\n        var childrens = await zooKeeper.GetChildrenAsync(rootPath);\n        _subscribers = await GetSubscribers(childrens);\n    }\n    else\n    {\n        _logger.LogWarning($\"\u8ba2\u9605\u8005\u8282\u70b9\uff1a{rootPath}\u4e0d\u5b58\u5728\u3002\");\n        _subscribers = Array.Empty<ServiceSubscriber>();\n    }\n}", "CodeBleu_score": 49.00460797671021}, {"code": "private async Task EnterSubscribers(){\n\t  if (_subscribers != null)\n    return;\n\n  var (resetEvent, zooKeeper) = await GetZooKeeper();\n  await resetEvent.WaitAsync();\n\n  var rootPath = _configInfo.SubscriberPath;\n  if (!rootPath.EndsWith(\"/\"))\n    rootPath += \"/\";\n\n  var exists = await zooKeeper.Exists(rootPath);\n  if (exists)\n  {\n    var childrens = await zooKeeper.GetChildren(rootPath);\n    _subscribers = await GetSubscribers(childrens);\n  }\n  else\n  {\n    _logger.LogWarning($\"\u8ba2\u9605\u8005\u8282\u70b9\u4e0d\u5b58\u5728\uff0c\u5c06\u4f7f\u7528\u7a7a\u8ba2\u9605\u8005\u5217\u8868\u3002\");\n    _subscribers = Array.Empty<ServiceSubscriber>();\n  }\n}", "CodeBleu_score": 46.30663268899063}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    if (oldData == newData)\n        return;\n\n    var oldCommand = GetServiceCommand(oldData);\n    var newCommand = GetServiceCommand(newData);\n    if (newCommand == null)\n        return;\n\n    var serviceId = newCommand.ServiceId;\n    var commandId = newCommand.CommandId;\n    if (oldCommand != null && oldCommand.ServiceId == serviceId && oldCommand.CommandId == commandId)\n    {\n        _serviceCommands[serviceId] = newCommand;\n        OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(newCommand, oldCommand));\n    }\n    else\n    {\n        _serviceCommands[serviceId] = newCommand;\n        OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(newCommand, null));\n    }\n}", "CodeBleu_score": 38.01975130786355}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t\n    if (oldData == null)\n        oldData = new byte[0];\n\n    if (newData == null)\n        newData = new byte[0];\n\n    if (DataEquals(oldData, newData))\n        return;\n\n    var newDescriptor = GetServiceCommand(newData);\n    if (newDescriptor == null)\n        return;\n\n    var oldDescriptor = GetServiceCommand(oldData);\n\n    if (oldDescriptor == null)\n    {\n        _serviceCommands.Add(newDescriptor);\n        OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(null, newDescriptor));\n        return;\n    }\n\n    if (oldDescriptor.ServiceId != newDescriptor.ServiceId)\n    {\n        _serviceCommands.Add(newDescriptor);\n        OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(oldDescriptor, newDescriptor));\n        return;\n    }\n\n    var oldCommand = oldDescriptor.Command;\n    var newCommand = newDescriptor.Command;\n\n    if (oldCommand == null)\n    {\n        oldDescriptor.Command = newCommand;\n        OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(oldDescriptor, newDescriptor));\n        return;\n    }\n\n    if (newCommand == null)\n    {\n        oldDescriptor.Command = null;\n        OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(oldDescriptor, newDescriptor));\n        return;\n    }\n\n    if (oldCommand.Equals(newCommand))\n        return;\n\n    oldDescriptor.Command = newCommand;\n    OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(oldDescriptor, newDescriptor));\n}", "CodeBleu_score": 42.21579823699844}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newCommand = GetServiceCommand(newData);\n    if (newCommand == null)\n        return;\n\n    var oldCommand = GetServiceCommand(oldData);\n    if (oldCommand == null)\n        return;\n\n    if (oldCommand.ServiceId != newCommand.ServiceId)\n        return;\n\n    var serviceId = newCommand.ServiceId;\n    var service = _services.FirstOrDefault(s => s.Id == serviceId);\n    if (service == null)\n        return;\n\n    var oldCommands = service.Commands;\n    var newCommands = oldCommands.ToList();\n    var oldCommandIndex = newCommands.FindIndex(c => c.Id == oldCommand.Id);\n    if (oldCommandIndex >= 0)\n        newCommands[oldCommandIndex] = newCommand;\n    else\n        newCommands.Add(newCommand);\n\n    service.Commands = newCommands;\n\n    _logger.LogDebug($\"\u670d\u52a1\u547d\u4ee4\u5df2\u66f4\u65b0\uff0c\u670d\u52a1ID\uff1a{serviceId}\uff0c\u65e7\u547d\u4ee4ID\uff1a{oldCommand.Id}\uff0c\u65b0\u547d\u4ee4ID\uff1a{newCommand.Id}\u3002\");\n\n    OnChanged?.Invoke(this, new ServiceCommandChangedEventArgs(service, oldCommand, newCommand));\n}", "CodeBleu_score": 44.27728492000483}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t  switch (watchedEvent.get_Type()) {\n  case EventType.NodeDataChanged:\n    await ZooKeeperClient.GetDataAsync(Path, (data, error) => {\n      if (error != null) {\n        Console.WriteLine(\"Error: \" + error.get_Message());\n        return;\n      }\n      if (data != null) {\n        CurrentData = data;\n        Action(CurrentData, data);\n      }\n    });\n    break;\n  default:\n    break;\n  }\n}", "CodeBleu_score": 50.45253691077167}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t  try {\n    var data = await zooKeeper.GetDataAsync(nodePath);\n    action(data, data);\n    await watcher.Update(data);\n  }\n  catch (KeeperException.NoNodeException) {\n    // Node does not exist, handle as needed\n  }\n}", "CodeBleu_score": 16.52122664825789}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.Type == EventType.NodeDataChanged) {\n        var currentData = await _zooKeeper.GetDataAsync(watchedEvent.Path, _cancellationTokenSource.Token);\n        var newData = await _zooKeeper.GetDataAsync(watchedEvent.Path, _cancellationTokenSource.Token);\n        await _action(currentData, newData);\n        await _watcher.SetDataAsync(newData, _cancellationTokenSource.Token);\n    }\n}", "CodeBleu_score": 24.354042268844463}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    if (builder == null) throw new ArgumentNullException(nameof(builder));\n    builder.Services.AddSingleton<IZookeeperClientProvider>(new DefaultZookeeperClientProvider(configInfo));\n    return builder;\n}", "CodeBleu_score": 30.45060990907757}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    if (builder == null)\n        throw new ArgumentNullException(nameof(builder));\n    if (configInfo == null)\n        throw new ArgumentNullException(nameof(configInfo));\n    builder.Services.AddSingleton<IZookeeperClientProvider>(new DefaultZookeeperClientProvider(configInfo));\n    return builder;\n}", "CodeBleu_score": 42.257570723508}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    if (builder == null)\n        throw new ArgumentNullException(nameof(builder));\n    if (configInfo == null)\n        throw new ArgumentNullException(nameof(configInfo));\n    builder.Services.AddSingleton<IConfigInfo>(configInfo);\n    builder.Services.AddSingleton<IHealthCheckService, DefaultHealthCheckService>();\n    builder.Services.AddSingleton<IAddressSelector, DefaultAddressSelector>();\n    builder.Services.AddSingleton<ILogger<DefaultZookeeperClientProvider>>();\n    builder.Services.AddSingleton<IZookeeperClientProvider, DefaultZookeeperClientProvider>();\n    return builder;\n}", "CodeBleu_score": 49.04808687526444}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t    _logger.LogInformation(\"Adding routes to ZooKeeper\");\n    var zooKeeperClients = await _zooKeeperClientFactory.GetClientsAsync();\n    foreach (var zooKeeperClient in zooKeeperClients) {\n        _logger.LogInformation(\"Adding routes to {0}\", zooKeeperClient.Name);\n        var rootPath = Path.Combine(zooKeeperClient.RootPath, MqttServiceRoutesNodeName);\n        await zooKeeperClient.EnsurePathExistsAsync(rootPath);\n        foreach (var route in routes) {\n            var routePath = Path.Combine(rootPath, route.Path);\n            var routeData = JsonSerializer.Serialize(route);\n            var exists = await zooKeeperClient.ExistsAsync(routePath);\n            if (exists) {\n                var currentRouteData = await zooKeeperClient.GetDataAsync<string>(routePath);\n                if (currentRouteData != routeData) {\n                    _logger.LogInformation(\"Updating route {0}\", routePath);\n                    await zooKeeperClient.SetDataAsync(routePath, routeData);\n                }\n            }\n            else {\n                _logger.LogInformation(\"Adding route {0}\", routePath);\n                await zooKeeperClient.CreateAsync(routePath, routeData);\n            }\n        }\n    }\n    _logger.LogInformation(\"Routes added to ZooKeeper\");\n}", "CodeBleu_score": 41.98436137302487}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t  // Log the process of adding routes\n  _logger.LogInformation(\"Setting up MQTT service routes in ZooKeeper\");\n\n  // Get ZooKeeper clients\n  var clients = _zooKeeperClientFactory.GetAllClients();\n\n  // For each client\n  foreach (var client in clients) {\n    // Ensure the MQTT route path subdirectory exists\n    await client.EnsureExistsAsync(MqttServiceRoutePath);\n\n    // Iterate over the given routes\n    foreach (var route in routes) {\n      // Create or update nodes with serialized route data\n      var nodePath = Path.Combine(MqttServiceRoutePath, route.Name);\n      var data = JsonConvert.SerializeObject(route);\n      await client.CreateOrUpdateAsync(nodePath, data);\n\n      // Log actions taken\n      _logger.LogInformation(\"{Action} MQTT service route {RouteName}\",\n        route.Id == Guid.Empty ? \"Added\" : \"Updated\",\n        route.Name);\n    }\n  }\n\n  // Confirm successful addition of routes\n  _logger.LogInformation(\"Successfully set up MQTT service routes in ZooKeeper\");\n}", "CodeBleu_score": 30.298859199647055}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t  // Log the process of adding routes\n  Console.WriteLine(\"Adding routes to ZooKeeper...\");\n  // Retrieve ZooKeeper clients\n  var zkClients = await GetZooKeeperClientsAsync();\n  // Iterate over each client\n  foreach (var client in zkClients) {\n    // Ensure the MQTT route path subdirectory exists\n    await client.EnsureExistsAsync(MqttRoutePath);\n    // Iterate over the given routes\n    foreach (var route in routes) {\n      // Serialize the route data\n      var data = route.Serialize();\n      // Create or update a node with the serialized data\n      await client.CreateOrUpdateAsync($\"{MqttRoutePath}/{route.Id}\", data);\n      // Log the action taken\n      Console.WriteLine($\"Added route {route.Id} to ZooKeeper\");\n    }\n  }\n  // Confirm successful addition of routes\n  Console.WriteLine(\"Routes added to ZooKeeper successfully\");\n}", "CodeBleu_score": 26.010539287298766}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var routePath = GetRoutePath(hostAddr);\n    var zkClients = await GetZkClientsAsync();\n    foreach (var zkClient in zkClients) {\n        var existingRoutes = await zkClient.GetChildrenAsync(routePath);\n        var routesToDelete = existingRoutes.Where(r => !routes.Any(rr => rr.Equals(new MqttServiceRoute(r))));\n        foreach (var route in routesToDelete) {\n            var routeNodePath = Path.Combine(routePath, route);\n            await zkClient.DeleteAsync(routeNodePath);\n        }\n    }\n}", "CodeBleu_score": 25.349788463679335}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    foreach (var route in routes) {\n        var routePath = GetRoutePath(route);\n        var zkClient = await GetZkClientAsync();\n        var currentRoutes = await zkClient.GetChildrenAsync(routePath);\n        var routesToDelete = currentRoutes.Where(r => !routes.Any(x => x.Address == r));\n        foreach (var routeToDelete in routesToDelete) {\n            if (routeToDelete.Contains(hostAddr.ToString())) {\n                await zkClient.DeleteAsync(Path.Combine(routePath, routeToDelete));\n            }\n        }\n    }\n}", "CodeBleu_score": 27.866420593244456}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var routesToDelete = new List<MqttServiceRoute>();\n    foreach (var route in routes) {\n        if (route.Addresses.Any(addr => addr.Equals(hostAddr))) {\n            routesToDelete.Add(route);\n        }\n    }\n\n    if (routesToDelete.Any()) {\n        var zkClients = _zkClientFactory.GetZkClients();\n        foreach (var zkClient in zkClients) {\n            var existingRoutes = await zkClient.GetRoutesAsync();\n            foreach (var route in existingRoutes) {\n                if (routesToDelete.Any(r => r.Equals(route))) {\n                    var path = _zkPathBuilder.BuildRoutePath(route);\n                    await zkClient.DeleteAsync(path);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 46.14306717910202}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    _logger.LogInformation(\"Setting service caches\");\n    var cachePath = Path.Combine(_zookeeperPath, \"caches\");\n    var zkClients = _zookeeperClientFactory.GetClients();\n    foreach (var zkClient in zkClients) {\n        var cacheExists = await zkClient.ExistsAsync(cachePath);\n        if (!cacheExists) {\n            await zkClient.CreateAsync(cachePath, new byte[0], ZooDefs.Ids.Op.Create);\n        }\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var cacheNodePath = Path.Combine(cachePath, cacheDescriptor.CacheId);\n            var cacheNodeExists = await zkClient.ExistsAsync(cacheNodePath);\n            if (!cacheNodeExists) {\n                var cacheNodeData = JsonConvert.SerializeObject(cacheDescriptor);\n                await zkClient.CreateAsync(cacheNodePath, Encoding.UTF8.GetBytes(cacheNodeData), ZooDefs.Ids.Op.Create);\n                _logger.LogInformation($\"Added cache node: {cacheNodePath}\");\n            } else {\n                var cacheNodeData = await zkClient.GetDataAsync(cacheNodePath);\n                var existingCacheDescriptor = JsonConvert.DeserializeObject<ServiceCacheDescriptor>(Encoding.UTF8.GetString(cacheNodeData));\n                if (existingCacheDescriptor.CacheId != cacheDescriptor.CacheId ||\n                    existingCacheDescriptor.CacheType != cacheDescriptor.CacheType ||\n                    existingCacheDescriptor.CacheSize != cacheDescriptor.CacheSize ||\n                    existingCacheDescriptor.CacheLocation != cacheDescriptor.CacheLocation) {\n                    var updatedCacheNodeData = JsonConvert.SerializeObject(cacheDescriptor);\n                    await zkClient.SetDataAsync(cacheNodePath, Encoding.UTF8.GetBytes(updatedCacheNodeData));\n                    _logger.LogInformation($\"Updated cache node: {cacheNodePath}\");\n                }\n            }\n        }\n    }\n    _logger.LogInformation(\"Successfully set service caches\");\n}", "CodeBleu_score": 47.3024690419343}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    var operation = \"SetCaches\";\n    _logger.LogInformation(\"{Operation} - Begin\", operation);\n    var cachePath = GetCachePath();\n    var zkClients = _zookeeperClientFactory.GetClients();\n    foreach (var zkClient in zkClients) {\n        _logger.LogInformation(\"{Operation} - Ensure cache path exists\", operation);\n        await zkClient.EnsurePathExistsAsync(cachePath);\n        _logger.LogInformation(\"{Operation} - Iterating through cache descriptors\", operation);\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            _logger.LogInformation(\"{Operation} - Serializing cache descriptor\", operation);\n            var cacheDescriptorBytes = JsonSerializer.SerializeToUtf8Bytes(cacheDescriptor);\n            var cacheNodePath = GetCacheNodePath(cacheDescriptor.CacheId);\n            _logger.LogInformation(\"{Operation} - Checking if cache node exists\", operation);\n            var cacheNodeExists = await zkClient.ExistsAsync(cacheNodePath);\n            if (!cacheNodeExists) {\n                _logger.LogInformation(\"{Operation} - Creating cache node\", operation);\n                await zkClient.CreateAsync(cacheNodePath, cacheDescriptorBytes, CreateMode.Persistent);\n            } else {\n                _logger.LogInformation(\"{Operation} - Updating cache node\", operation);\n                await zkClient.SetDataAsync(cacheNodePath, cacheDescriptorBytes);\n            }\n        }\n    }\n    _logger.LogInformation(\"{Operation} - Successfully added service caches\", operation);\n}", "CodeBleu_score": 42.87627212417288}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t  Logger.LogInformation(\"Updating service caches in Zookeeper\");\n  var cachePath = Path.Combine(ZookeeperRootPath, \"caches\");\n  var zkClients = await GetZookeeperClientsAsync();\n  foreach (var zkClient in zkClients) {\n    await EnsurePathExistsAsync(zkClient, cachePath);\n    foreach (var cacheDescriptor in cacheDescriptors) {\n      var cacheNodePath = Path.Combine(cachePath, cacheDescriptor.CacheId.ToString());\n      var cacheData = JsonConvert.SerializeObject(cacheDescriptor);\n      var cacheNodeExists = await NodeExistsAsync(zkClient, cacheNodePath);\n      if (!cacheNodeExists) {\n        await CreateNodeAsync(zkClient, cacheNodePath, cacheData);\n        Logger.LogInformation(\"Added service cache {CacheId}\", cacheDescriptor.CacheId);\n      } else {\n        var existingCacheData = await GetNodeDataAsync(zkClient, cacheNodePath);\n        if (existingCacheData != cacheData) {\n          await SetNodeDataAsync(zkClient, cacheNodePath, cacheData);\n          Logger.LogInformation(\"Updated service cache {CacheId}\", cacheDescriptor.CacheId);\n        }\n      }\n    }\n  }\n  Logger.LogInformation(\"Successfully updated service caches in Zookeeper\");\n}", "CodeBleu_score": 40.390853170915335}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    await zooKeeper.Item1.WaitOneAsync();\n\n    if (!await zooKeeper.Item2.ExistsAsync(path)) {\n        var dirs = path.Split('/');\n        var currentPath = \"\";\n\n        foreach (var dir in dirs) {\n            currentPath += \"/\" + dir;\n\n            if (!await zooKeeper.Item2.ExistsAsync(currentPath)) {\n                await zooKeeper.Item2.CreateAsync(currentPath, null, ZooKeeper.Ids.OPEN_ACL_UNSAFE, CreateMode.Persistent);\n                Console.WriteLine(\"Created directory: \" + currentPath);\n            }\n        }\n    }\n}", "CodeBleu_score": 48.053460187413634}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t  var (manualResetEvent, zooKeeperClient) = zooKeeper;\n  await manualResetEvent.WaitAsync();\n  if (!await zooKeeperClient.ExistsAsync(path)) {\n    var directories = path.Split('/');\n    var currentPath = string.Empty;\n    foreach (var directory in directories) {\n      currentPath += \"/\" + directory;\n      if (!await zooKeeperClient.ExistsAsync(currentPath)) {\n        await zooKeeperClient.CreateAsync(currentPath, new byte[0], ZooKeeperCreateMode.Persistent);\n        Log.Information(\"Created directory {Directory}\", currentPath);\n      }\n    }\n  }\n}", "CodeBleu_score": 37.71410410067228}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var (manualResetEvent, zooKeeperClient) = zooKeeper;\n\n    manualResetEvent.WaitOne();\n\n    if (await zooKeeperClient.ExistsAsync(path) == false) {\n        var subDirectories = path.Split('/').Skip(1);\n\n        var currentPath = \"\";\n\n        foreach (var subDirectory in subDirectories) {\n            currentPath += $\"/{subDirectory}\";\n\n            if (await zooKeeperClient.ExistsAsync(currentPath) == false) {\n                await zooKeeperClient.CreateAsync(currentPath, null, ZooKeeperCreateMode.Persistent);\n            }\n        }\n    }\n}", "CodeBleu_score": 41.07035155005356}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t  var result = new List<(ManualResetEvent, ZooKeeper)>();\n  foreach (var ipAddress in _config.Addresses) {\n    if (await _healthCheckService.IsHealthyAsync(ipAddress)) {\n      var (wait, zk) = CreateZooKeeper(ipAddress);\n      result.Add((wait, zk));\n    }\n  }\n  return result;\n}", "CodeBleu_score": 73.0010390387084}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var ipAddress in _config.Addresses)\n    {\n        if (await _healthCheckService.IsHealthy(ipAddress))\n        {\n            result.Add(CreateZooKeeper(ipAddress));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 79.14975040692023}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var zooKeepers = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var ipAddress in _config.Addresses)\n    {\n        var healthCheckResult = await _healthCheckService.CheckHealthAsync(ipAddress);\n        if (healthCheckResult.IsHealthy)\n        {\n            zooKeepers.Add(CreateZooKeeper(ipAddress));\n        }\n    }\n    return zooKeepers;\n}", "CodeBleu_score": 71.93145063914103}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\t        if (zooKeeper == null) {\n            synchronized (this) {\n                if (zooKeeper == null) {\n                    zooKeeper = new ZooKeeper(getConnectionString(), getSessionTimeout(), this);\n                }\n            }\n        }\n        return zooKeeper;\n    }", "CodeBleu_score": 35.606804966061}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t        synchronized (this) {\n            if (zooKeeper == null) {\n                zooKeeper = new ZooKeeper(getConnectionString(), getSessionTimeout(), this);\n            }\n            return zooKeeper;\n        }\n    }", "CodeBleu_score": 31.848540925128066}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t        if (zooKeeper == null) {\n            synchronized (this) {\n                if (zooKeeper == null) {\n                    if (helper == null) {\n                        helper = new EnsembleProviderHelper(this);\n                    }\n                    zooKeeper = helper.getZooKeeper();\n                }\n            }\n        }\n        return zooKeeper;\n    }", "CodeBleu_score": 37.03393153903829}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    ZooKeeper zk = helper.getZooKeeper();\n    if (zk != null) {\n        if (waitForShutdownTimeoutMs > 0) {\n            zk.register(new Watcher() {\n                @Override\n                public void process(WatchedEvent event) {\n                }\n            });\n            zk.close(waitForShutdownTimeoutMs);\n        } else {\n            zk.close();\n        }\n    }\n}", "CodeBleu_score": 33.62339234767441}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    ZooKeeper zk = getZooKeeper();\n    if (zk != null) {\n        zk.register(new Watcher() {\n            @Override\n            public void process(WatchedEvent event) {\n            }\n        });\n        if (waitForShutdownTimeoutMs > 0) {\n            zk.close(waitForShutdownTimeoutMs);\n        } else {\n            zk.close();\n        }\n    }\n}", "CodeBleu_score": 32.08724821289441}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    ZooKeeper zk = getZooKeeper();\n    if (zk != null) {\n        if (waitForShutdownTimeoutMs > 0) {\n            zk.register(new Watcher() {\n                @Override\n                public void process(WatchedEvent event) {\n                }\n            });\n            zk.close(waitForShutdownTimeoutMs);\n        } else {\n            zk.close();\n        }\n    }\n}", "CodeBleu_score": 32.53145864398879}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t        try (OperationTrace trace = startAdvancedTracer(\"blockUntilConnectedOrTimedOut\")) {\n            internalBlockUntilConnectedOrTimedOut();\n            trace.end();\n            return isConnected();\n        }\n    }", "CodeBleu_score": 21.44191638940604}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t        return blockUntilConnectedOrTimedOut(connectionTimeoutMs);\n    }", "CodeBleu_score": 5.381401295332719}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    if (!state.isStarted()) {\n        throw new IllegalStateException(\"Client is not started\");\n    }\n    OperationTrace trace = startAdvancedTracer(\"blockUntilConnectedOrTimedOut\");\n    try {\n        internalBlockUntilConnectedOrTimedOut();\n        return state.isConnected();\n    } finally {\n        trace.end();\n    }\n}", "CodeBleu_score": 37.00153522764521}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\t    log.info(\"Shutting down {}\", this.getClass().getSimpleName());\n    started = false;\n    try {\n        closeState(waitForShutdownTimeoutMs);\n    } catch (IOException e) {\n        if (Thread.currentThread().isInterrupted()) {\n            log.warn(\"Shutdown interrupted\", e);\n        } else {\n            log.error(\"Failed to shutdown\", e);\n        }\n    }\n}", "CodeBleu_score": 43.822083748854205}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    if (started) {\n        log.info(\"Shutting down {}\", getName());\n        started = false;\n        try {\n            state.close(waitForShutdownTimeoutMs);\n        } catch (IOException e) {\n            if (Thread.interrupted()) {\n                log.warn(\"Shutdown interrupted\", e);\n            } else {\n                log.error(\"Shutdown error\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 51.414174005171745}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    if (started) {\n        log.info(\"Shutting down {}\", serviceName);\n        started = false;\n        try {\n            state.close(waitForShutdownTimeoutMs);\n        } catch (IOException e) {\n            if (!Thread.currentThread().isInterrupted()) {\n                log.error(\"Error while closing {}\", serviceName, e);\n            }\n        }\n    }\n}", "CodeBleu_score": 49.031758989678956}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    // Create a countdown latch to wait for the connection or the timeout\n    CountDownLatch latch = new CountDownLatch(1);\n\n    // Create a watcher to monitor connection events\n    Watcher watcher = new Watcher() {\n        @Override\n        public void eventReceived(WatchedEvent event) {\n            // If the connection state is connected, signal the latch\n            if (event.getState() == Watcher.Event.KeeperState.SyncConnected) {\n                latch.countDown();\n            }\n        }\n\n        @Override\n        public void process(WatchedEvent event) {\n            // Ignore this method\n        }\n    };\n\n    // Add the watcher to the ZooKeeper instance\n    zooKeeper.addWatch(this, watcher, Watcher.Event.KeeperState.SyncConnected);\n\n    // Wait for the connection or the timeout\n    latch.await(connectionTimeout, TimeUnit.MILLISECONDS);\n\n    // Remove the watcher\n    zooKeeper.removeWatch(this, watcher);\n}", "CodeBleu_score": 35.336086048982715}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t}", "CodeBleu_score": 1.4820082928049525}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    // Create a watcher to monitor connection events\n    Watcher watcher = new Watcher() {\n        public void eventReceived(WatchedEvent event) {\n            // If the connection is established, signal the countdown latch\n            if (event.getState() == Watcher.Event.KeeperState.SyncConnected) {\n                latch.countDown();\n            }\n        }\n\n        public void process(WatchedEvent event) {\n        }\n    };\n\n    // Add the watcher to the ZooKeeper instance\n    zk.addWatcher(watcher);\n\n    // Wait for the connection or timeout to be reached\n    latch.await(connectionTimeout, TimeUnit.MILLISECONDS);\n\n    // Remove the watcher\n    zk.removeWatcher(watcher);\n}", "CodeBleu_score": 26.015516386904046}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t        if (doProtected()) {\n            if (!foundNode.equals(protectedNode)) {\n                client.log.debug(\"Protected mode session changed, deleting old node: \" + protectedNode);\n                client.delete().forPath(protectedNode);\n                protectedNode = foundNode;\n                protectedId = client.getZookeeperClient().getSessionId();\n            }\n        }\n        return foundNode;\n    }", "CodeBleu_score": 34.439062537820554}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (doProtected()) {\n        if (!foundNode.startsWith(protectedId)) {\n            throw new KeeperException.NoAuthException(\"Session ID changed\");\n        }\n        String oldNode = foundNode.substring(protectedId.length());\n        client.delete().forPath(oldNode);\n        protectedId = client.getZookeeperClient().getSessionId();\n    }\n    return foundNode;\n}", "CodeBleu_score": 34.170137212318345}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (createMode == CreateMode.EPHEMERAL) {\n        if (doProtected()) {\n            String oldProtectedId = protectedId;\n            String oldProtectedNode = protectedNode;\n            String newProtectedId = client.getZookeeperClient().getZooKeeper().getSessionId();\n            String newProtectedNode = client.getZookeeperClient().getZooKeeper().getSessionId().toString();\n            if (!oldProtectedId.equals(newProtectedId)) {\n                logger.info(\"Session ID changed from \" + oldProtectedId + \" to \" + newProtectedId);\n                client.getZookeeperClient().getZooKeeper().delete(oldProtectedNode, -1);\n                protectedId = newProtectedId;\n                protectedNode = newProtectedNode;\n            }\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 42.25690651072084}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final String operation = \"setAcl\";\n    final Trace trace = Trace.start(operation, path);\n    trace.set(\"acl\", aclList);\n    trace.set(\"result\", null);\n    trace.set(\"status\", null);\n    final Stat result = retry(new Retryable<Stat>() {\n        @Override\n        public Stat run() throws Exception {\n            return zooKeeper.setACL(path, aclList, -1);\n        }\n    });\n    trace.set(\"result\", result);\n    trace.set(\"status\", result == null ? Status.FAILURE : Status.SUCCESS);\n    trace.commit();\n    return result;\n}", "CodeBleu_score": 49.47808391953809}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final Trace trace = Trace.start(\"pathInForeground\", \"path=\" + path);\n    Stat stat;\n    try {\n        stat = zk.setACL(path, aclList, -1);\n    } catch (final KeeperException.NoNodeException e) {\n        stat = zk.create(path, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n    }\n    trace.setResult(stat);\n    trace.commit();\n    return stat;\n}", "CodeBleu_score": 41.0394898193817}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final Tracer tracer = tracerFactory.createTracer(this, \"pathInForeground\", path);\n    final TraceContext traceContext = tracer.start();\n    try {\n        final Stat stat = zooKeeper.setACL(path, aclList, -1);\n        if (stat != null) {\n            tracer.record(new TraceEvent(path, stat));\n            tracer.commit();\n        }\n        return stat;\n    } catch (Exception e) {\n        tracer.record(new TraceEvent(path, e));\n        tracer.commit();\n        throw e;\n    } finally {\n        tracer.close();\n    }\n}", "CodeBleu_score": 36.02515091946486}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t", "CodeBleu_score": 9.224495547481085}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t", "CodeBleu_score": 9.224495547481085}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.client = client;\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    this.payload = payload;\n\n    // Check the member ID is valid\n    if (!thisId.matches(MEMBER_ID_REGEX)) {\n        throw new IllegalArgumentException(\"Invalid member ID: \" + thisId);\n    }\n\n    // Create a CuratorCache for the membership path\n    this.membershipCache = client.newCache(membershipPath, false);\n\n    // Create a PersistentNode with ephemeral mode for the member\n    this.thisNode = new PersistentNode(client, membershipPath, thisId, payload);\n}", "CodeBleu_score": 41.01759860719919}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    // create a node at the given path\n    CompletableFuture<String> createFuture = async.create().forPath(path);\n\n    // then create a watch on the node\n    createFuture.thenAccept(nodeName -> {\n        async.getData().watched().forPath(nodeName).whenComplete((data, exception) -> {\n            if (exception != null) {\n                exception.printStackTrace();\n            } else {\n                System.out.println(\"Node data: \" + new String(data.getData()));\n            }\n        });\n    });\n\n    // handle any exceptions that occur during node creation\n    createFuture.exceptionally(exception -> {\n        exception.printStackTrace();\n        return null;\n    });\n}", "CodeBleu_score": 69.47542226534695}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Node created: \" + name);\n            // Set up a watch on the node\n            CompletionStage<WatchedEvent> watchedStage = async.getData().forPath(path);\n            handleWatchedStage(watchedStage);\n        }\n    });\n}", "CodeBleu_score": 80.73608813167264}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    // create a node at the given path asynchronously\n    CompletableFuture<String> createFuture = async.create().forPath(path);\n\n    // handle the node creation\n    createFuture.thenAccept(name -> {\n        System.out.println(\"Node created at: \" + name);\n\n        // set up a watch on the node to handle future events\n        CompletionStage<WatchedEvent> watchedStage = async.getData().watched().forPath(path);\n        handleWatchedStage(watchedStage);\n    }).exceptionally(exception -> {\n        exception.printStackTrace();\n        return null;\n    });\n}", "CodeBleu_score": 54.143589254544956}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\t    // Process the list of operation results and check if the first result indicates an error.\n    List<OpResult> results = client.multi(transaction);\n    if (results.get(0).getResultCode() != KeeperException.Code.OK) {\n        // If an error is detected, retrieve the corresponding error code and throw a KeeperException with the appropriate code.\n        throw KeeperException.create(results.get(0).getResultCode());\n    }\n    // Return the list of operation results.\n    return results;\n}", "CodeBleu_score": 20.189347880915545}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    // Execute the transaction on the ZooKeeper client\n    List<OpResult> results = client.multi(transaction);\n\n    // Check if the first result indicates an error\n    if (results.get(0).getResultCode() != KeeperException.Code.OK) {\n        // If an error is detected, retrieve the error code\n        KeeperException.Code code = KeeperException.Code.get(results.get(0).getResultCode());\n\n        // Throw a KeeperException with the appropriate code\n        throw KeeperException.create(code, results.get(0).getPath());\n    }\n\n    // Return the list of operation results\n    return results;\n}", "CodeBleu_score": 32.07100278703084}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<OpResult> results = client.multiOp(ops, transaction);\n    OpResult firstResult = results.get(0);\n    if (firstResult.getException() != null) {\n        throw firstResult.getException();\n    }\n    return results;\n}", "CodeBleu_score": 21.49913850429879}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    List<String> serviceNames = serviceDiscovery.getServiceNames();\n    for (String serviceName : serviceNames) {\n        try {\n            List<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.getInstances(serviceName);\n            System.out.println(\"Service: \" + serviceName);\n            for (ServiceInstance<InstanceDetails> instance : instances) {\n                outputInstance(instance);\n            }\n        } catch (NoNodeException e) {\n            System.err.println(\"No instances for service: \" + serviceName);\n        }\n    }\n    serviceDiscovery.closeQuietly();\n}", "CodeBleu_score": 54.181918355775615}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    try {\n        // Query for all service names and their corresponding instances\n        List<String> serviceNames = serviceDiscovery.queryForNames();\n        for (String serviceName : serviceNames) {\n            System.out.println(\"Service: \" + serviceName);\n            List<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\n            for (ServiceInstance<InstanceDetails> instance : instances) {\n                outputInstance(instance);\n            }\n        }\n    } catch (NoNodeException e) {\n        System.err.println(\"No service instances found\");\n    } finally {\n        serviceDiscovery.closeQuietly();\n    }\n}", "CodeBleu_score": 60.610028656989975}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t        System.out.println(\"Service instances:\");\n        try {\n            // Query for all service names and their corresponding instances\n            serviceDiscovery.query().forEach(serviceName -> {\n                System.out.println(\"Service name: \" + serviceName);\n                serviceDiscovery.queryInstances(serviceName).forEach(OutputService::outputInstance);\n            });\n        } catch (NoNodeException e) {\n            System.out.println(\"No instances registered\");\n        }\n        // Close the ServiceDiscovery instance quietly\n        serviceDiscovery.close();\n    }", "CodeBleu_score": 31.709920106562116}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filteredChildren = new ArrayList<>();\n    for (String child : children) {\n        if (!child.equals(READY_NODE)) {\n            filteredChildren.add(child);\n        }\n    }\n    Collections.sort(filteredChildren);\n    return filteredChildren;\n}", "CodeBleu_score": 31.568017390702703}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filteredChildren = children.stream().filter(child -> !child.equals(READY_NODE)).collect(Collectors.toList());\n    Collections.sort(filteredChildren);\n    return filteredChildren;\n}", "CodeBleu_score": 36.454428643179796}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filteredChildren = children.stream().filter(child -> !child.equals(READY_NODE)).collect(Collectors.toList());\n    Collections.sort(filteredChildren);\n    return filteredChildren;\n}", "CodeBleu_score": 36.454428643179796}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t        if (zk != null) {\n            zk.close();\n        }\n        zk = new ZooKeeper(newHost, timeout, this);\n        if (getOption(\"readOnly\").equals(\"true\")) {\n            zk.setReadOnly(true);\n        }\n    }", "CodeBleu_score": 35.12979118780798}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t            if (zk != null) {\n                zk.close();\n            }\n            if (options.containsKey(\"readonly\")) {\n                zk = new ZooKeeper(newHost, timeout, this, ZooKeeper.ReadOnlyMode());\n            } else {\n                zk = new ZooKeeper(newHost, timeout, this);\n            }\n        }", "CodeBleu_score": 38.85305008078644}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t        if (zk != null) {\n            zk.close();\n        }\n        zk = new ZooKeeper(newHost, 10000, this);\n        if (getOption(\"readonly\") != null) {\n            zk.setReadOnly(true);\n        }\n        while (zk.getState() != ZooKeeper.States.CONNECTED) {\n            Thread.sleep(1000);\n        }\n    }", "CodeBleu_score": 37.17973995009206}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    String[] aclStrings = aclString.split(\",\");\n    for (String acl : aclStrings) {\n        String[] aclParts = acl.split(\":\");\n        if (aclParts.length != 3) {\n            outputStream.write((\"Invalid ACL: \" + acl).getBytes());\n            continue;\n        }\n        ACL aclObj = new ACL();\n        aclObj.setId(aclParts[1]);\n        aclObj.setPerms(getPermFromString(aclParts[2]));\n        aclList.add(aclObj);\n    }\n    return aclList;\n}", "CodeBleu_score": 31.259629038679932}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t        List<ACL> aclList = new ArrayList<ACL>();\n        String[] aclStrings = aclString.split(\",\");\n        for (String acl : aclStrings) {\n            String[] aclParts = acl.split(\":\");\n            if (aclParts.length != 3) {\n                outputStream.write((\"Invalid ACL: \" + acl).getBytes());\n            } else {\n                ACL aclObj = new ACL();\n                aclObj.setId(aclParts[1]);\n                aclObj.setPerms(getPermFromString(aclParts[2]));\n                aclList.add(aclObj);\n            }\n        }\n        return aclList;\n    }", "CodeBleu_score": 32.031515099144606}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t        List<ACL> aclList = new ArrayList<ACL>();\n        String[] aclSegments = aclString.split(\",\");\n        for (String aclSegment : aclSegments) {\n            String[] schemeIdPerms = aclSegment.split(\":\");\n            if (schemeIdPerms.length != 3) {\n                outputStream.write((\"Invalid ACL segment: \" + aclSegment).getBytes());\n                continue;\n            }\n            String scheme = schemeIdPerms[0];\n            String id = schemeIdPerms[1];\n            int perm = getPermFromString(schemeIdPerms[2]);\n            ACL acl = new ACL(perm, id);\n            aclList.add(acl);\n        }\n        return aclList;\n    }", "CodeBleu_score": 32.068034909281074}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t        Objects.requireNonNull(pathList);\n        assertZookeeperExists(serverId);\n        if (pathList.size() < 20) {\n            for (String path : pathList) {\n                zookeeperMap.get(serverId).delete(path);\n            }\n        } else {\n            zookeeperMap.get(serverId).deleteAsync(pathList);\n        }\n    }", "CodeBleu_score": 96.80308378969973}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t        Objects.requireNonNull(pathList);\n        assertZookeeperExists(serverId);\n        if (pathList.size() < 20) {\n            for (String path : pathList) {\n                zookeeperMap.get(serverId).delete(path);\n            }\n        } else {\n            zookeeperMap.get(serverId).deleteAsync(pathList);\n        }\n    }", "CodeBleu_score": 96.80308378969973}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    Objects.requireNonNull(pathList);\n    assertZookeeperExists(serverId);\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeperMap.get(serverId).delete(path);\n        }\n    } else {\n        zookeeperMap.get(serverId).deleteAsync(pathList);\n    }\n}", "CodeBleu_score": 99.80465478981657}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t        var factory = new CuratorZookeeperConnectionFactory();\n        var params = ZookeeperParams.builder()\n                .id(id)\n                .url(url)\n                .maxRetries(1)\n                .connectionTimeout(1000)\n                .retryIntervalTime(1000)\n                .sessionTimeout(10000)\n                .build();\n        writer.write(\"Connecting to Zookeeper...\n\");\n        var connection = factory.createAsync(params);\n        writer.write(\"Successfully connected to Zookeeper\n\");\n        var zooKeeperMain = new ZooKeeperMain(connection);\n        return new Terminal(id, url, connection, zooKeeperMain);\n    }", "CodeBleu_score": 58.058202831050956}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    var params = ZookeeperParams.builder()\n            .id(id)\n            .url(url)\n            .maxRetries(1)\n            .connectionTimeout(3000)\n            .retryIntervalTime(1000)\n            .sessionTimeout(3000)\n            .build();\n    var factory = new CuratorZookeeperConnectionFactory();\n    var connection = factory.createAsync(params);\n    writer.write(\"Connecting to Zookeeper...\");\n    var client = connection.getClient();\n    writer.write(\"Connected to Zookeeper\n\");\n    return new Terminal(id, url, connection, new ZooKeeperMain(client));\n}", "CodeBleu_score": 58.281763879873914}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t        var factory = new CuratorZookeeperConnectionFactory();\n        var params = ZookeeperParams.builder()\n                .id(id)\n                .url(url)\n                .aclList(List.of())\n                .maxRetries(3)\n                .connectionTimeout(1000)\n                .retryIntervalTime(1000)\n                .sessionTimeout(10000)\n                .build();\n        writer.append(\"Connecting to Zookeeper instance: \" + url + \"\n\");\n        var connection = factory.createAsync(params, List.of());\n        writer.append(\"Successfully connected to Zookeeper instance: \" + url + \"\n\");\n        var zkMain = new ZooKeeperMain(connection.getClient());\n        return new Terminal(id, url, connection, zkMain);\n    }", "CodeBleu_score": 62.091994007201265}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\t        int retryCount = 0;\n        while (!isConnected()) {\n            try {\n                connect();\n                if (isConnected()) {\n                    return;\n                }\n            } catch (IOException e) {\n                throw new IllegalStateException(e);\n            }\n\n            retryCount++;\n            if (retryCount >= 6) {\n                throw new IllegalStateException(\"Failed to connect after 6 retries\");\n            }\n\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(e);\n            }\n        }\n    }", "CodeBleu_score": 47.89930505518566}, {"code": "public void blockUntilConnected(){\n\t        int retries = 6;\n        while (retries > 0) {\n            try {\n                sshClient.connect();\n                break;\n            } catch (JSchException e) {\n                logger.error(\"Error connecting to SSH server: {}\", e.getMessage());\n                retries--;\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    throw new IllegalStateException(e1);\n                }\n            }\n        }\n\n        if (!sshClient.isConnected()) {\n            throw new IllegalStateException(\"Failed to connect to SSH server after retries\");\n        }\n    }", "CodeBleu_score": 40.41171288760494}, {"code": "public void blockUntilConnected(){\n\t        int attempt = 0;\n        while (attempt < 6) {\n            try {\n                if (sshClient.isConnected()) {\n                    return;\n                }\n                sshClient.connect();\n                return;\n            } catch (Exception e) {\n                log.warn(\"Failed to connect to SSH server: \" + e.getMessage());\n                attempt++;\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e1) {\n                    throw new IllegalStateException(e1);\n                }\n            }\n        }\n        close();\n        throw new IllegalStateException(\"Failed to connect to SSH server\");\n    }", "CodeBleu_score": 45.20044468567548}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"Exception while deleting node\", e);\n        throw new IllegalStateException(\"Exception while deleting node\", e);\n    }\n}", "CodeBleu_score": 67.30944857346235}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"Error deleting node for serverId: {} and pathList: {}\", serverId, pathList, e);\n        throw new IllegalStateException(\"Error deleting node for serverId: \" + serverId + \" and pathList: \" + pathList, e);\n    }\n}", "CodeBleu_score": 59.41087196714885}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.deleteNode(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"Exception while deleting nodes from zookeeper\", e);\n        throw new IllegalStateException(\"Exception while deleting nodes from zookeeper\", e);\n    }\n}", "CodeBleu_score": 65.1819807411585}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfiguration.getId());\n        treeItemCache.remove(id);\n    });\n}", "CodeBleu_score": 92.63209854582692}, {"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfiguration.getId());\n        treeItemCache.remove(id);\n    });\n}", "CodeBleu_score": 92.63209854582692}, {"code": "public void disconnect(String id){\n\t        Platform.runLater(() -> {\n            ServerConfiguration serverConfiguration = configurationDomainService.getById(id).orElseThrow();\n            zookeeperDomainService.disconnect(serverConfiguration.getId());\n            treeItemCache.remove(id);\n        });\n    }", "CodeBleu_score": 90.48842970608284}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfiguration serverConfiguration = getServerConfiguration(serverId);\n    String connectionUrl = getConnectionUrl(serverConfiguration);\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 22.4759454109074}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    // Retrieve the server configuration\n    ServerConfig serverConfig = zookeeperDomainService.getServerConfig(serverId);\n    // Determine the connection URL\n    String connectionUrl = determineConnectionUrl(serverConfig);\n    // Start the terminal\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 24.35875491426442}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfig serverConfig = getServerConfig(serverId);\n    String connectionUrl = getConnectionUrl(serverConfig);\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 20.704421067902373}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\t    try {\n        // Execute the command on the Zookeeper server with the given ID\n        String result = zk.execute(id, command);\n        // Log the result of the command execution with the server ID and command\n        logger.info(\"Server {} executed command {} with result {}\", id, command, result);\n    } catch (Exception e) {\n        // Log the error with the server ID and command\n        logger.error(\"Server {} failed to execute command {} with error {}\", id, command, e.getMessage());\n        // Display an error message indicating that the command execution failed and should be retried\n        System.out.println(\"Command execution failed. Please try again.\");\n    }\n}", "CodeBleu_score": 42.37893228851531}, {"code": "public void executeCommand(String id, String command){\n\t    try {\n        // Execute the command on the Zookeeper server\n        String result = zkClient.executeCommand(id, command);\n        // Display the result of the command\n        System.out.println(\"Result: \" + result);\n    } catch (Exception e) {\n        // Log the error with the server ID and command\n        logger.error(\"Failed to execute command on server \" + id + \": \" + command, e);\n        // Display an error message indicating that the command execution failed and should be retried\n        System.out.println(\"Failed to execute command. Please try again.\");\n    }\n}", "CodeBleu_score": 52.815464544045}, {"code": "public void executeCommand(String id, String command){\n\t    try {\n        ZookeeperServer server = getServer(id);\n        server.executeCommand(command);\n    } catch (Exception e) {\n        logger.error(\"Failed to execute command {} on server {}\", command, id);\n        System.out.println(\"Failed to execute command. Please try again.\");\n    }\n}", "CodeBleu_score": 38.98076089721803}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    try {\n        File file = new File(zookeeperSystemPropertiesFilePath);\n        if (file.exists()) {\n            properties.load(new FileInputStream(file));\n            logger.info(\"Loaded Zookeeper System Properties from file: \" + zookeeperSystemPropertiesFilePath);\n        } else {\n            logger.warn(\"Zookeeper System Properties file does not exist: \" + zookeeperSystemPropertiesFilePath);\n        }\n    } catch (IOException e) {\n        logger.error(\"Error loading Zookeeper System Properties from file: \" + zookeeperSystemPropertiesFilePath, e);\n    }\n    return properties;\n}", "CodeBleu_score": 47.13787908003197}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    try {\n        File file = new File(ZOOKEEPER_SYSTEM_PROPERTIES_FILE_PATH);\n        if (file.exists()) {\n            properties.load(new FileInputStream(file));\n            log.info(\"Loaded Zookeeper System Properties from file: {}\", file.getAbsolutePath());\n        } else {\n            log.warn(\"Zookeeper System Properties file does not exist: {}\", file.getAbsolutePath());\n        }\n    } catch (IOException e) {\n        log.error(\"Error loading Zookeeper System Properties from file: {}\", ZOOKEEPER_SYSTEM_PROPERTIES_FILE_PATH, e);\n    }\n    return properties;\n}", "CodeBleu_score": 47.30931930600886}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    Properties properties = new Properties();\n    try {\n        FileInputStream fileInputStream = new FileInputStream(\"zookeeper.properties\");\n        properties.load(fileInputStream);\n        fileInputStream.close();\n    } catch (FileNotFoundException e) {\n        logger.error(\"File not found: {}\", e.getMessage());\n    } catch (IOException e) {\n        logger.error(\"Error reading file: {}\", e.getMessage());\n    }\n    logger.info(\"Loaded properties: {}\", properties);\n    return properties;\n}", "CodeBleu_score": 45.758808855518794}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties props = new Properties();\n    try {\n        props.load(new StringReader(content));\n    } catch (IOException e) {\n        log.error(\"Failed to load Zookeeper system properties: \" + e.getMessage());\n        showNotification(\"Failed to load Zookeeper system properties: \" + e.getMessage(), Notification.Type.ERROR_MESSAGE);\n        return;\n    }\n    try {\n        props.store(new FileOutputStream(SYS_PROP_PATH), \"Zookeeper system properties\");\n    } catch (IOException e) {\n        log.error(\"Failed to save Zookeeper system properties: \" + e.getMessage());\n        showNotification(\"Failed to save Zookeeper system properties: \" + e.getMessage(), Notification.Type.ERROR_MESSAGE);\n    }\n}", "CodeBleu_score": 38.3657656346525}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    Properties properties = new Properties();\n    try {\n        properties.load(new StringReader(content));\n    } catch (IOException e) {\n        log.error(\"Failed to load properties from content\", e);\n        showErrorNotification(\"Failed to load properties from content\", e.getMessage());\n        return;\n    }\n    try {\n        properties.store(new FileOutputStream(SYS_PROP_PATH), \"\");\n    } catch (IOException e) {\n        log.error(\"Failed to save properties to file\", e);\n        showErrorNotification(\"Failed to save properties to file\", e.getMessage());\n    }\n}", "CodeBleu_score": 35.54972161589913}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    try {\n        Properties properties = new Properties();\n        properties.load(new StringReader(content));\n        try {\n            properties.store(new FileOutputStream(SYS_PROP_PATH), null);\n        } catch (IOException e) {\n            log.error(\"Failed to save Zookeeper system properties\", e);\n            Notification.show(\"Failed to save Zookeeper system properties\", e.getMessage(), Notification.Type.ERROR_MESSAGE);\n        }\n    } catch (IOException e) {\n        log.error(\"Failed to load Zookeeper system properties\", e);\n        Notification.show(\"Failed to load Zookeeper system properties\", e.getMessage(), Notification.Type.ERROR_MESSAGE);\n    }\n}", "CodeBleu_score": 40.33779643761145}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\t        BufferedReader in = null;\n        StringBuilder response = new StringBuilder();\n        try {\n            in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null)\n                response.append(inputLine);\n        } catch (IOException e) {\n            throw new IllegalStateException(\"Cannot read from socket\", e);\n        } finally {\n            cleanup(in);\n        }\n        return response.toString();\n    }", "CodeBleu_score": 49.470816364553386}, {"code": "private String response(Socket client){\n\t        BufferedReader in = null;\n        try {\n            in = new BufferedReader(new InputStreamReader(client.getInputStream()));\n            StringBuilder sb = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                sb.append(line);\n            }\n            return sb.toString();\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        } finally {\n            cleanup(in);\n        }\n    }", "CodeBleu_score": 55.009251972921106}, {"code": "private String response(Socket client){\n\t    StringBuilder sb = new StringBuilder();\n    BufferedReader br = null;\n    try {\n        br = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        String line;\n        while ((line = br.readLine()) != null) {\n            sb.append(line).append(\"\n\");\n        }\n    } catch (IOException e) {\n        throw new IllegalStateException(\"Cannot read from socket\", e);\n    } finally {\n        cleanup(br);\n    }\n    return sb.toString();\n}", "CodeBleu_score": 53.72966386195897}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t        final CuratorFramework client = curatorFramework(params);\n        try {\n            client.start();\n            client.blockUntilConnected(params.getConnectionTimeout(), TimeUnit.MILLISECONDS);\n        } catch (Exception e) {\n            client.close();\n            throw new RuntimeException(e);\n        }\n        return new CuratorZookeeperConnection(client);\n    }", "CodeBleu_score": 49.939702024928025}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    try {\n        CuratorFramework client = curatorFramework(params);\n        client.start();\n        client.blockUntilConnected(5, TimeUnit.SECONDS);\n        return new CuratorZookeeperConnection(client, params);\n    } catch (Exception e) {\n        throw new ZookeeperConnectionException(\"Failed to establish Zookeeper connection\", e);\n    }\n}", "CodeBleu_score": 63.287150799834734}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t    CuratorFramework curatorFramework = curatorFramework(params);\n    curatorFramework.start();\n    try {\n        if (!curatorFramework.blockUntilConnected(5, TimeUnit.SECONDS)) {\n            throw new RuntimeException(\"Zookeeper connection failed\");\n        }\n    } catch (InterruptedException e) {\n        throw new RuntimeException(\"Zookeeper connection failed\", e);\n    } finally {\n        curatorFramework.close();\n    }\n    return new CuratorZookeeperConnection(curatorFramework);\n}", "CodeBleu_score": 57.85983599528962}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (isSync.get()) {\n        logger.info(\"Synchronization is already in progress\");\n        return;\n    }\n    isSync.set(true);\n    logger.info(\"Starting synchronization\");\n    try {\n        String connectionString = zookeeperConfiguration.getConnectionString();\n        if (connectionString == null) {\n            throw new RuntimeException(\"Zookeeper connection string is null\");\n        }\n        curatorFramework = CuratorFrameworkFactory.newClient(connectionString, new RetryNTimes(3, 1000));\n        curatorFramework.start();\n        treeCache = new CuratorTreeCache(curatorFramework, zookeeperConfiguration.getRootPath());\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        treeCache.start();\n    } catch (Exception e) {\n        logger.error(\"Error while starting tree cache\", e);\n        close();\n    }\n}", "CodeBleu_score": 47.27977836467744}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (isSync.get()) {\n        logger.info(\"Synchronization is already in progress\");\n        return;\n    }\n    logger.info(\"Starting synchronization\");\n    try {\n        String connectionString = curatorFramework.getConnectionString();\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners, connectionString, id));\n        treeCache.start();\n    } catch (Exception e) {\n        logger.error(\"Error while starting synchronization\", e);\n        treeCache.close();\n    }\n}", "CodeBleu_score": 45.114596693388975}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    if (isSync.get()) {\n        log.info(\"Synchronization already in progress\");\n        return;\n    }\n    log.info(\"Starting synchronization\");\n    try {\n        // Retrieve the current Zookeeper connection string\n        String zookeeperConnectionString = zookeeperClient.getZookeeperConnectionString();\n        // Create a new CuratorFramework instance\n        curatorFramework = CuratorFrameworkFactory.newClient(zookeeperConnectionString, new RetryNTimes(10, 5000));\n        // Start the CuratorFramework\n        curatorFramework.start();\n        // Create a new TreeCache instance\n        treeCache = new TreeCache(curatorFramework, \"/\");\n        // Add a CuratorTreeCacheListener to the TreeCache\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        // Start the TreeCache\n        treeCache.start();\n        // Set the synchronization flag to true\n        isSync.set(true);\n        // Log the end of the synchronization process\n        log.info(\"Synchronization finished\");\n    } catch (Exception e) {\n        // Log the error and close the TreeCache\n        log.error(\"Error while starting synchronization\", e);\n        treeCache.close();\n    }\n}", "CodeBleu_score": 50.40097266084087}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache pathChildrenCache = new PathChildrenCache(zkClient, path, true);\n    pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 83.50044968427288}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache pathChildrenCache = new PathChildrenCache(zkClient, path, true);\n    pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 83.50044968427288}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache pathChildrenCache = new PathChildrenCache(zkClient, path, true);\n    pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 83.50044968427288}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\t    logger.info(\"Unregistering services...\");\n    for (String path : paths) {\n        try {\n            client.delete().forPath(path);\n        } catch (Exception e) {\n            logger.error(\"Error unregistering service: \" + e.getMessage());\n        }\n    }\n    client.close();\n}", "CodeBleu_score": 62.46045880125762}, {"code": "public void unregisterService(){\n\t    LOGGER.info(\"Start unregistering services\");\n    try {\n        for (String path : servicePaths) {\n            client.delete().forPath(path);\n        }\n    } catch (Exception e) {\n        LOGGER.error(\"Error while unregistering services: {}\", e.getMessage());\n    } finally {\n        try {\n            client.close();\n        } catch (Exception e) {\n            LOGGER.error(\"Error while closing Curator client: {}\", e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 50.50303201824187}, {"code": "public void unregisterService(){\n\t    log.info(\"Starting unregister service\");\n    try {\n        for (String path : paths) {\n            client.delete().forPath(path);\n        }\n    } catch (Exception e) {\n        log.error(\"Error during unregister service\", e);\n    } finally {\n        close();\n    }\n}", "CodeBleu_score": 48.87966879753555}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\t        if (this.client == null) {\n            CompletableFuture<Void> future = new CompletableFuture<>();\n            this.clientReady.addListener((f) -> {\n                try {\n                    this.client.subscribeStateChanges(listener);\n                    future.complete(null);\n                } catch (Exception e) {\n                    future.completeExceptionally(e);\n                }\n            });\n        } else {\n            this.client.subscribeStateChanges(listener);\n        }\n    }", "CodeBleu_score": 30.32063660338249}, {"code": "public void addListener(IZkStateListener listener){\n\t        CompletableFuture<Void> future = new CompletableFuture<>();\n        makeClientReady(future);\n        future.thenAccept(unused -> {\n            client.subscribeStateChanges(listener);\n        });\n    }", "CodeBleu_score": 36.264685098093835}, {"code": "public void addListener(IZkStateListener listener){\n\t        try {\n            CompletableFuture<Void> future = new CompletableFuture<>();\n            this.makeClientReady(future);\n            future.thenAccept(v -> this.client.subscribeStateChanges(listener));\n        } catch (Exception e) {\n            logger.error(\"Got an exception when trying to create zkclient instance, can not connect to zookeeper server, please check!\");\n        }\n    }", "CodeBleu_score": 26.32588281177603}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    this(serverAddr, authority, DEFAULT_RETRY_POLICY, DEFAULT_CONNECTION_TIMEOUT);\n}", "CodeBleu_score": 3.8009042602676124}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    super(serverAddr, authority);\n    this.curatorFramework = CuratorFrameworkFactory.newClient(serverAddr, new RetryNTimes(3, 1000));\n    this.curatorFramework.getConnectionStateListenable().addListener(this);\n    this.curatorFramework.start();\n}", "CodeBleu_score": 11.45984782637673}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    if (serverAddr == null) {\n        throw new IllegalArgumentException(\"serverAddr cannot be null\");\n    }\n    if (authority != null) {\n        this.authority = authority;\n    }\n    this.serverAddr = serverAddr;\n    this.retryPolicy = new ExponentialBackoffRetry(1000, 3);\n    this.connectionTimeoutMs = 10000;\n    this.client = CuratorFrameworkFactory.newClient(serverAddr, retryPolicy);\n    this.client.getConnectionStateListenable().addListener(this.stateChanged);\n    if (authority != null) {\n        this.client.usingCredentials(authority);\n    }\n    try {\n        this.client.start();\n    } catch (Exception e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 25.557094070230917}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ChildListener targetListener = childListeners.get(path);\n    if (targetListener != null) {\n        if (targetListener.equals(listener)) {\n            removeTargetChildListener(path, childTargetListeners.get(path));\n            childListeners.remove(path);\n            childTargetListeners.remove(path);\n        }\n    }\n}", "CodeBleu_score": 54.06431312043141}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    if (path == null) {\n        throw new IllegalArgumentException(\"path cannot be null\");\n    }\n    if (listener == null) {\n        throw new IllegalArgumentException(\"listener cannot be null\");\n    }\n    Map<ChildListener, TargetChildListener> listeners = getChildListeners(path);\n    if (listeners == null) {\n        return;\n    }\n    TargetChildListener targetListener = listeners.remove(listener);\n    if (targetListener != null) {\n        removeTargetChildListener(path, targetListener);\n    }\n}", "CodeBleu_score": 65.5168181892008}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    if (path == null) {\n        throw new IllegalArgumentException(\"path cannot be null\");\n    }\n    if (listener == null) {\n        throw new IllegalArgumentException(\"listener cannot be null\");\n    }\n    Map<ChildListener, TargetChildListener> listeners = this.childListeners.get(path);\n    if (listeners != null) {\n        TargetChildListener targetChildListener = listeners.remove(listener);\n        if (targetChildListener != null) {\n            removeTargetChildListener(path, targetChildListener);\n        }\n    }\n}", "CodeBleu_score": 66.20564501032655}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t", "CodeBleu_score": 1.8025725052776684}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t", "CodeBleu_score": 1.8025725052776684}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (zh == NULL) {\n        return QCONF_ERR_OTHER;\n    }\n\n    int ret = QCONF_OK;\n    string idc_host_str;\n    if (lock_ht_find(ht_idc_host, mu_idc_host, zh, idc_host_str) != QCONF_OK) {\n        return QCONF_ERR_OTHER;\n    }\n    lock_ht_delete(ht_idc_host, mu_idc_host, zh);\n    zookeeper_close(zh);\n\n    vector<string> idc_host_vec;\n    if (qconf_split_string(idc_host_str, \":\", idc_host_vec) != QCONF_OK) {\n        return QCONF_ERR_OTHER;\n    }\n    if (idc_host_vec.size() != 2) {\n        return QCONF_ERR_OTHER;\n    }\n\n    string idc = idc_host_vec[0];\n    string host = idc_host_vec[1];\n    zh = zookeeper_init(host.c_str(), watcher_handle, 10000, 0, 0, 0);\n    if (zh == NULL) {\n        return QCONF_ERR_OTHER;\n    }\n\n    if (init_env(zh, idc) != QCONF_OK) {\n        return QCONF_ERR_OTHER;\n    }\n\n    if (reset_table_watcher() != QCONF_OK) {\n        return QCONF_ERR_OTHER;\n    }\n\n    return QCONF_OK;\n}", "CodeBleu_score": 42.390786459542106}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    // Update internal tables with handle and host information\n    lock_ht_update(zk_handle_ht, zk_handle_mu, zh, idc_host);\n    lock_ht_update(zk_host_ht, zk_host_mu, idc_host, idc);\n\n    // Check connection state of Zookeeper handle\n    if (zoo_state(zh) != ZOO_CONNECTED_STATE) {\n        LOG_ERROR(\"Zookeeper handle is not connected\");\n        return;\n    }\n\n    // Register current host on Zookeeper server\n    string znode_path = \"/\" + idc + \"/\" + idc_host;\n    int ret = zoo_create(zh, znode_path.c_str(), NULL, 0, &ZOO_OPEN_ACL_UNSAFE, ZOO_EPHEMERAL, NULL, 0);\n    if (ret != ZOK) {\n        LOG_ERROR(\"Failed to register host on Zookeeper server: %s\", zerror(ret));\n        return;\n    }\n\n    // Set watcher on notify node\n    string notify_path = \"/\" + idc + \"/notify\";\n    ret = zoo_wget(zh, notify_path.c_str(), notify_watcher, NULL, NULL, NULL);\n    if (ret != ZOK) {\n        LOG_ERROR(\"Failed to set watcher on notify node: %s\", zerror(ret));\n        return;\n    }\n\n    // Add IDC to gray list if watcher fails\n    if (ret != ZOK) {\n        LOG_ERROR(\"Failed to set watcher on notify node: %s\", zerror(ret));\n        lock_ht_update(gray_list_ht, gray_list_mu, idc, true);\n    }\n}", "CodeBleu_score": 46.761873383941}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t", "CodeBleu_score": 4.2583564394715525}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t", "CodeBleu_score": 4.2583564394715525}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\t\n    import hashlib\n    import base64\n    import hmac\n    import binascii\n    import struct\n    import sys\n    if sys.version_info < (3, 0):\n        import sha\n    else:\n        import hashlib as sha\n    if username is None or password is None:\n        return None\n    if isinstance(password, str):\n        password = password.encode('utf-8')\n    if isinstance(username, str):\n        username = username.encode('utf-8')\n    if sys.version_info < (3, 0):\n        h = hmac.new(password, digestmod=sha)\n    else:\n        h = hmac.new(password, digestmod=hashlib.sha1)\n    h.update(username)\n    if sys.version_info < (3, 0):\n        h.update(':')\n    else:\n        h.update(b':')\n    h.update(username)\n    if sys.version_info < (3, 0):\n        h.update(':')\n    else:\n        h.update(b':')\n    h.update(b'zookeeper')\n    if sys.version_info < (3, 0):\n        h.update(':')\n    else:\n        h.update(b':')\n    h.update(b'auth')\n    if sys.version_info < (3, 0):\n        h.update(':')\n    else:\n        h.update(b':')\n    h.update(b'1')\n    if sys.version_info < (3, 0):\n        h.update(':')\n    else:\n        h.update(b':')\n    h.update(b'1')\n    if sys.version_info < (3, 0):\n        h.update(':')\n    else:\n        h.update(b':')\n    h.update(b'1')\n    if sys.version_info < (3, 0):\n        h.update(':')\n    else:\n        h.update(b':')\n    h.update(b'1')\n    if sys.version_", "CodeBleu_score": 32.97110688295142}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    import base64\n    import hashlib\n    import hmac\n    import binascii\n    import struct\n    import time\n    import uuid\n    import zlib\n    import random\n    import string\n    import os\n    import sys\n    import socket\n    import fcntl\n    import struct\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import array\n    import socket\n    import struct\n    import fcntl\n    import", "CodeBleu_score": 5.755589287511017}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    import hashlib\n    import base64\n    import hmac\n    import binascii\n    import struct\n    import time\n    import random\n    import sys\n    import os\n    import re\n    import requests\n    import json\n    import urllib\n    import urllib2\n    import urlparse\n    import httplib\n    import httplib2\n    import socket\n    import ssl\n    import os\n    import sys\n    import re\n    import time\n    import datetime\n    import random\n    import string\n    import base64\n    import hashlib\n    import hmac\n    import binascii\n    import struct\n    import time\n    import random\n    import sys\n    import os\n    import re\n    import requests\n    import json\n    import urllib\n    import urllib2\n    import urlparse\n    import httplib\n    import httplib2\n    import socket\n    import ssl\n    import os\n    import sys\n    import re\n    import time\n    import datetime\n    import random\n    import string\n    import base64\n    import hashlib\n    import hmac\n    import binascii\n    import struct\n    import time\n    import random\n    import sys\n    import os\n    import re\n    import requests\n    import json\n    import urllib\n    import urllib2\n    import urlparse\n    import httplib\n    import httplib2\n    import socket\n    import ssl\n    import os\n    import sys\n    import re\n    import time\n    import datetime\n    import random\n    import string\n    import base64\n    import hashlib\n    import hmac\n    import binascii\n    import struct\n    import time\n    import random\n    import sys\n    import os\n    import re\n    import requests\n    import json\n    import urllib\n    import urllib2\n    import urlparse\n    import httplib\n    import httplib2\n    import socket\n    import ssl\n    import os\n    import sys\n    import re\n    import time\n    import datetime\n    import random\n    import string\n    import base64\n    import hashlib\n    import hmac\n    import bin", "CodeBleu_score": 17.59195941770938}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_path = self.get_lock_path()\n    self.zookeeper_client.sync()\n    lock_value = self.zookeeper_client.get(lock_path)\n    if lock_value is None:\n        return False\n    return lock_value == self.instance_id\n\n", "CodeBleu_score": 42.18751888845618}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_path = self.processing_element.lock_path\n    with self.zookeeper_client.lock(lock_path):\n        lock_value = self.zookeeper_client.get(lock_path)\n        if lock_value is None:\n            return False\n        return lock_value == self.instance_id\n\n", "CodeBleu_score": 42.27403554088621}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element:\n        lock_path = self.processing_element.get_lock_path()\n        self.zk_client.sync()\n        lock_value = self.zk_client.get(lock_path)\n        return lock_value == self.instance_id\n    return False\n\n\n", "CodeBleu_score": 36.47647126398172}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_id, _ = self.processing_element\n    lock_path = \"{path}/{id}\".format(path=self._lock_path, id=lock_id)\n    self.client.sync(lock_path)\n    value, stat = self.client.retry(self.client.get, lock_path)\n    if value == self.id:\n        with self.client.transaction() as tx:\n            tx.delete(lock_path)\n            tx.delete(self._element_path)\n        self.processing_element = None\n        return True\n    return False\n\n", "CodeBleu_score": 56.1506387540744}, {"code": "def consume(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_id, _ = self.processing_element\n    lock_path = \"{path}/{id}\".format(path=self._lock_path, id=lock_id)\n    self.client.sync(lock_path)\n    value, stat = self.client.retry(self.client.get, lock_path)\n    if value == self.id:\n        self.client.sync(self._lock_path)\n        self.client.retry(self.client.delete, lock_path)\n        self.client.sync(self._path)\n        self.client.retry(self.client.delete, self._path)\n        self.processing_element = None\n        return True\n    return False\n\n", "CodeBleu_score": 48.76200095603216}, {"code": "def consume(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_id, _ = self.processing_element\n    lock_path = \"{path}/{id}\".format(path=self._lock_path, id=lock_id)\n    self.client.sync(lock_path)\n    value, stat = self.client.retry(self.client.get, lock_path)\n    if value == self.id:\n        with self.client.transaction() as txn:\n            txn.delete(lock_path)\n            txn.delete(self._entry_path)\n            txn.delete(self._processing_path)\n        self.processing_element = None\n        return True\n    else:\n        return False", "CodeBleu_score": 58.591327025666885}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\t\n    # Read the header\n    header, buffer, offset = self._read_header(read_timeout)\n\n    # PING_XID\n    if header.xid == self.ping_xid:\n        self.logger.log(BLATHER, \"Received ping\")\n        self.ping_flag = False\n        return\n\n    # AUTH_XID\n    if header.xid == self.auth_xid:\n        if header.err:\n            exc = EXCEPTIONS[header.err]()\n            self.logger.debug(\"Received error(xid=%s) %r\", header.xid, exc)\n            self.auth_flag = False\n            self.auth_xid = None\n            self.auth_cb.set_exception(exc)\n        else:\n            self.logger.log(BLATHER, \"Received auth\")\n            self.auth_flag = False\n            self.auth_xid = None\n            self.auth_cb.set(None)\n        return\n\n    # WATCH_XID\n    if header.xid == self.watch_xid:\n        self._read_watch_event(buffer, offset)\n        return\n\n    # Other xids\n    self._read_response(header, buffer, offset)\n\n", "CodeBleu_score": 44.89029273857117}, {"code": "def _read_socket(self, read_timeout)\n\t\n    b = self._read(4, read_timeout)\n    length = int_struct.unpack(b)[0]\n    b = self._read(length, read_timeout)\n    header, offset = ReplyHeader.deserialize(b, 0)\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping response\")\n        self._outstanding_ping = False\n        return\n    if header.xid == AUTH_XID:\n        if header.err:\n            exc = EXCEPTIONS[header.err]()\n            self.logger.error(\"Authentication failed: %s\", exc)\n            self.handler.dispatch_callback(Callback(\"auth\", exc, ()))\n        else:\n            self.logger.log(BLATHER, \"Authentication successful\")\n            self.handler.dispatch_callback(Callback(\"auth\", None, ()))\n        return\n    if header.xid == WATCH_XID:\n        self._read_watch_event(b, offset)\n        return\n    if header.xid == CLOSE_XID:\n        self.logger.log(BLATHER, \"Received close response\")\n        return CLOSE_RESPONSE\n    if header.xid == SET_WATCHES_XID:\n        self.logger.log(BLATHER, \"Received set watches response\")\n        return SET_WATCHES_RESPONSE\n    if header.xid == REGISTER_XID:\n        self.logger.log(BLATHER, \"Received register response\")\n        return REGISTER_RESPONSE\n    if header.xid == REGISTER2_XID:\n        self.logger.log(BLATHER, \"Received register2 response\")\n        return REGISTER2_RESPONSE\n    if header.xid == UNREGISTER_XID:\n        self.logger.log(BLATHER, \"Received unregister response\")\n        return UNREGISTER_RESPONSE\n    if header.xid == UNREGISTER2_XID:\n        self.logger.log(BLATHER, \"Received unregister2 response\")\n", "CodeBleu_score": 39.262600769059105}, {"code": "def _read_socket(self, read_timeout)\n\t\n    # Read the header\n    header, buffer, offset = self._read_header(read_timeout)\n\n    # Process the header\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping\")\n        self._outstanding_ping = False\n        return PING_RESPONSE\n    elif header.xid == AUTH_XID:\n        self.logger.log(BLATHER, \"Received auth response\")\n        if header.err:\n            self.logger.error(\"Authentication failed: %s\", header.err)\n            self._auth_failed = True\n        else:\n            self.logger.debug(\"Authentication successful\")\n            self._auth_failed = False\n        return AUTH_RESPONSE\n    elif header.xid == WATCH_XID:\n        self.logger.log(BLATHER, \"Received watch event\")\n        self._read_watch_event(buffer, offset)\n        return WATCH_RESPONSE\n    else:\n        self.logger.log(BLATHER, \"Received response\")\n        self._read_response(header, buffer, offset)\n        return RESPONSE\n\n", "CodeBleu_score": 46.616027843261605}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\t\n    self.logger.info(\"Starting zk_loop\")\n    self.connection_stopped.clear()\n    while not self.stop_event.is_set():\n        try:\n            self.client.start()\n            self.logger.info(\"Connected to Zookeeper\")\n            self.connection_stopped.set()\n            self.session_callback(False)\n            break\n        except Exception as e:\n            self.logger.warning(\"Failed to connect to Zookeeper: %s\", e)\n            self.stop_event.wait(self.retry_interval)\n    self.logger.info(\"Stopping zk_loop\")\n\n\n", "CodeBleu_score": 44.43901899968028}, {"code": "def zk_loop(self)\n\t\n    self.logger.info(\"Starting Zookeeper loop\")\n    self.connection_stopped.clear()\n    while not self.stopped and not self.connection_stopped.wait(self.retry_interval):\n        try:\n            self.logger.info(\"Connecting to Zookeeper\")\n            self.client.start()\n            self.logger.info(\"Connected to Zookeeper\")\n            self.connection_stopped.set()\n            self.session_callback(False)\n            self.logger.info(\"Stopping Zookeeper loop\")\n        except Exception as e:\n            self.logger.warning(\"Failed to connect to Zookeeper: {}\".format(e))\n    self.connection_stopped.set()\n    self.session_callback(True)\n    self.logger.info(\"Stopped Zookeeper loop\")", "CodeBleu_score": 42.62512039423202}, {"code": "def zk_loop(self)\n\t\n    self.log.info(\"Starting ZooKeeper loop\")\n    self.connection_stopped.clear()\n    while not self.client_stopped.is_set():\n        try:\n            self.connect()\n        except Exception as e:\n            self.log.warning(\"ZooKeeper connection failed: %s\", e)\n            self.connection_stopped.wait(self.retry_interval)\n        else:\n            self.log.info(\"ZooKeeper connection established\")\n            break\n    self.connection_stopped.set()\n    self.session_callback(False)\n    self.log.info(\"Stopping ZooKeeper loop\")\n\n\n", "CodeBleu_score": 42.368619155634946}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    partitions.sort()\n    members.sort()\n    index = members.index(identifier)\n    return partitions[index::len(members)]", "CodeBleu_score": 33.6805163744097}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    idx = members.index(identifier)\n    return partitions[idx::len(members)]\n\n", "CodeBleu_score": 33.50856907528368}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    index = members.index(identifier)\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 33.6805163744097}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self.client.delete, self.create_path)\n    except NoNodeError:\n        pass\n    self._participating = False\n\n", "CodeBleu_score": 41.62245525129934}, {"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self.client.delete, self.create_path)\n    except NoNodeError:\n        pass\n    self.participating = False", "CodeBleu_score": 43.66279553678979}, {"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self.client.delete, self.create_path)\n    except NoNodeError:\n        pass\n    self.participating = False", "CodeBleu_score": 43.66279553678979}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\t    try {\n        if (!isRunning()) {\n            ProcessBuilder pb = new ProcessBuilder(\"hadoop\", \"ftpserver\", \"start\");\n            pb.redirectErrorStream(true);\n            Process p = pb.start();\n            p.waitFor();\n            return Result.success();\n        }\n        return Result.success();\n    } catch (Exception e) {\n        return Result.error(e);\n    }\n}", "CodeBleu_score": 39.16917097508949}, {"code": "public Result start(){\n\t    try {\n        if (server.getStatus() == ServerStatus.STOPPED) {\n            server.start();\n            return Result.success();\n        }\n        return Result.error(\"Server is already running.\");\n    } catch (Exception e) {\n        return Result.error(e.getMessage());\n    }\n}", "CodeBleu_score": 37.04522455359662}, {"code": "public Result start(){\n\t    try {\n        if (!isRunning()) {\n            // Start the server\n            startServer();\n            return new Result(true, \"Server started successfully\");\n        } else {\n            return new Result(false, \"Server is already running\");\n        }\n    } catch (Exception e) {\n        return new Result(false, \"Failed to start server: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 35.63296025595972}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\t    try {\n        if (server.isRunning()) {\n            server.stop();\n            return Result.success(\"FTP server stopped\");\n        } else {\n            return Result.failure(\"FTP server is not running\");\n        }\n    } catch (Exception e) {\n        logger.error(\"Error stopping FTP server\", e);\n        return Result.failure(\"Error stopping FTP server\");\n    }\n}", "CodeBleu_score": 34.752720149534525}, {"code": "public Result stop(){\n\t    if (isRunning()) {\n        try {\n            server.stop();\n            return new Result(true, \"Server stopped successfully\");\n        } catch (Exception e) {\n            log.error(\"Error stopping server\", e);\n            return new Result(false, \"Error stopping server: \" + e.getMessage());\n        }\n    } else {\n        return new Result(false, \"Server is not running\");\n    }\n}", "CodeBleu_score": 35.368270436620485}, {"code": "public Result stop(){\n\t    if (server == null) {\n        return Result.failure(\"Server is not running\");\n    }\n    try {\n        server.stop();\n        server = null;\n        return Result.success(\"Server stopped successfully\");\n    } catch (Exception e) {\n        log.error(\"Error stopping server\", e);\n        return Result.failure(\"Error stopping server: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 36.76963557123719}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\t\tList<Authority> authorities = getAuthorities();\n\n\t\t// check for no authorities at all\n\t\tif (authorities == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tboolean someoneCouldAuthorize = false;\n\t\tfor (Authority authority : authorities) {\n\t\t\tif (authority.canAuthorize(request)) {\n\t\t\t\tsomeoneCouldAuthorize = true;\n\n\t\t\t\trequest = authority.authorize(request);\n\n\t\t\t\t// authorization failed, return null\n\t\t\t\tif (request == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (someoneCouldAuthorize) {\n\t\t\treturn request;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 78.95280555685402}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\t\tList<Authority> authorities = getAuthorities();\n\n\t\t// check for no authorities at all\n\t\tif (authorities == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tboolean someoneCouldAuthorize = false;\n\t\tfor (Authority authority : authorities) {\n\t\t\tif (authority.canAuthorize(request)) {\n\t\t\t\tsomeoneCouldAuthorize = true;\n\n\t\t\t\trequest = authority.authorize(request);\n\n\t\t\t\t// authorization failed, return null\n\t\t\t\tif (request == null) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\n\t\tif (someoneCouldAuthorize) {\n\t\t\treturn request;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 78.95280555685402}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tList<Authority> authorities = getAuthorities();\n\n\t// check for no authorities at all\n\tif (authorities == null) {\n\t\treturn null;\n\t}\n\n\tboolean someoneCouldAuthorize = false;\n\tfor (Authority authority : authorities) {\n\t\tif (authority.canAuthorize(request)) {\n\t\t\tsomeoneCouldAuthorize = true;\n\n\t\t\trequest = authority.authorize(request);\n\n\t\t\t// authorization failed, return null\n\t\t\tif (request == null) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t}\n\n\tif (someoneCouldAuthorize) {\n\t\treturn request;\n\t} else {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 79.9295216055856}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\t    try {\n        FileSystem fs = FileSystem.get(conf);\n        if (fs.mkdirs(new Path(fullPath))) {\n            return true;\n        } else {\n            return false;\n        }\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 63.96685675973808}, {"code": "public boolean mkdir(){\n\t    try {\n        FileSystem fs = FileSystem.get(conf);\n        fs.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 72.54919288594809}, {"code": "public boolean mkdir(){\n\t    try {\n        FileSystem fs = FileSystem.get(conf);\n        fs.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 72.54919288594809}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        dfs.delete(fullPath, true);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 94.76795996911564}, {"code": "public boolean delete(){\n\t\t\ttry {\n\t\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\t\tdfs.delete(fullPath, true);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 95.04522169548919}, {"code": "public boolean delete(){\n\t\t\ttry {\n\t\t\tFileSystem dfs = HdfsOverFtpSystem.getDfs();\n\t\t\tdfs.delete(fullPath, true);\n\t\t\treturn true;\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 95.04522169548919}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\t\ttry {\n\t\tFileSystem fs = FileSystem.get(conf);\n\t\tPath srcPath = new Path(ftpFile.getPath());\n\t\tPath dstPath = new Path(ftpFile.getParent() + \"/\" + ftpFile.getName());\n\t\tfs.rename(srcPath, dstPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 62.66501281796153}, {"code": "public boolean move(FtpFile ftpFile){\n\t\ttry {\n\t\tFileSystem fs = FileSystem.get(new Configuration());\n\t\tPath newPath = new Path(ftpFile.getParent(), ftpFile.getName());\n\t\tfs.rename(path, newPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 61.82185736530806}, {"code": "public boolean move(FtpFile ftpFile){\n\t\ttry {\n\t\tFileSystem fs = FileSystem.get(conf);\n\t\tPath newPath = new Path(ftpFile.getParent() + \"/\" + ftpFile.getName());\n\t\tfs.rename(new Path(path.toString()), newPath);\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 61.54278720137096}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\t\ttry {\n\t\tFileStatus[] status = fs.listStatus(path);\n\t\tFtpFile[] files = new FtpFile[status.length];\n\t\tfor (int i = 0; i < status.length; i++) {\n\t\t\tfiles[i] = new FtpFile(status[i], basePath);\n\t\t}\n\t\treturn Arrays.asList(files);\n\t} catch (IOException e) {\n\t\tlog.error(\"Error listing files in directory: \" + path, e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.188370090022023}, {"code": "public List<FtpFile> listFiles(){\n\t\t\ttry {\n\t\t\tFileStatus[] fileStatuses = fs.listStatus(path);\n\t\t\tList<FtpFile> files = new ArrayList<FtpFile>();\n\t\t\tfor (FileStatus fileStatus : fileStatuses) {\n\t\t\t\tfiles.add(new HdfsFtpFile(fileStatus, baseDir));\n\t\t\t}\n\t\t\treturn Collections.unmodifiableList(files);\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"Failed to list files in directory \" + path, e);\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 20.95634533610492}, {"code": "public List<FtpFile> listFiles(){\n\t\t\ttry {\n\t\t\tFileStatus[] files = fs.listStatus(path);\n\t\t\tList<FtpFile> ftpFiles = new ArrayList<FtpFile>(files.length);\n\t\t\tfor (FileStatus file : files) {\n\t\t\t\tftpFiles.add(new FtpFile(file, basePath));\n\t\t\t}\n\t\t\treturn Collections.unmodifiableList(ftpFiles);\n\t\t} catch (IOException e) {\n\t\t\tlog.error(\"Error listing files\", e);\n\t\t\treturn null;\n\t\t}\n\t}", "CodeBleu_score": 18.880289439795046}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\t\t\tuserDataProp = new Properties();\n\n\t\ttry {\n\t\t\tif (userDataFile.exists()) {\n\t\t\t\tuserDataProp.load(new FileInputStream(userDataFile));\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpServerConfigurationException(\n\t\t\t\t\t\"Failed to load user data file: \" + userDataFile.getPath(),\n\t\t\t\t\te);\n\t\t}\n\n\t\tconvertDeprecatedPropertyNames();\n\n\t\tconfigured = true;\n\t}", "CodeBleu_score": 36.631526696590164}, {"code": "public void configure(){\n\t\t\tconfigState = true;\n\t\tuserDataProp = new Properties();\n\n\t\tif (userDataFile.exists()) {\n\t\t\ttry {\n\t\t\t\tuserDataProp.load(new FileInputStream(userDataFile));\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new FtpServerConfigurationException(\n\t\t\t\t\t\t\"Failed to load user data file \" + userDataFile.getAbsolutePath(),\n\t\t\t\t\t\te);\n\t\t\t}\n\t\t}\n\n\t\tconvertDeprecatedPropertyNames();\n\t}", "CodeBleu_score": 44.043302314617925}, {"code": "public void configure(){\n\t\t\ttry {\n\t\t\tconfigState = true;\n\t\t\tuserDataProp.clear();\n\n\t\t\tif (userDataFile.exists()) {\n\t\t\t\tuserDataProp.load(new FileInputStream(userDataFile));\n\t\t\t}\n\n\t\t\tconvertDeprecatedPropertyNames();\n\t\t} catch (IOException e) {\n\t\t\tthrow new FtpServerConfigurationException(\n\t\t\t\t\t\"Failed to load user data from \" + userDataFile, e);\n\t\t}\n\t}", "CodeBleu_score": 31.5482583962505}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\t    File userDataFile = new File(userDataFilePath);\n    File parentDir = userDataFile.getParentFile();\n    if (!parentDir.exists()) {\n        if (!parentDir.mkdirs()) {\n            throw new ConfigurationException(\"Could not create parent directory for user data file: \" + userDataFilePath);\n        }\n    }\n    try (FileOutputStream fos = new FileOutputStream(userDataFile)) {\n        ObjectOutputStream oos = new ObjectOutputStream(fos);\n        oos.writeObject(userData);\n        oos.flush();\n    } catch (IOException e) {\n        log.error(\"Error writing user data to file: \" + userDataFilePath, e);\n        throw new FtpException(\"Error writing user data to file: \" + userDataFilePath, e);\n    }\n}", "CodeBleu_score": 41.68123572358154}, {"code": "private void saveUserData() throws FtpException{\n\t    File userDataFile = new File(getUserDataFile());\n    if (!userDataFile.getParentFile().exists()) {\n        if (!userDataFile.getParentFile().mkdirs()) {\n            throw new ConfigurationException(\"Unable to create parent directory for user data file: \" + userDataFile.getParentFile().getAbsolutePath());\n        }\n    }\n    try {\n        FileOutputStream fos = new FileOutputStream(userDataFile);\n        try {\n            userData.store(fos, \"\");\n        } finally {\n            fos.close();\n        }\n    } catch (IOException e) {\n        log.error(\"Unable to save user data file: \" + userDataFile.getAbsolutePath(), e);\n        throw new FtpException(\"Unable to save user data file: \" + userDataFile.getAbsolutePath(), e);\n    }\n}", "CodeBleu_score": 37.64726800380731}, {"code": "private void saveUserData() throws FtpException{\n\t    File parentDir = userDataFile.getParentFile();\n    if (!parentDir.exists() && !parentDir.mkdirs()) {\n        throw new ConfigurationException(\"Failed to create user data directory\");\n    }\n    try (FileOutputStream fos = new FileOutputStream(userDataFile)) {\n        userData.save(fos);\n    } catch (IOException e) {\n        log.error(\"Failed to save user data\", e);\n        throw new FtpException(e);\n    }\n}", "CodeBleu_score": 33.05541424533623}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 82.52989637751922}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    }catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 84.85156484416024}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 82.52989637751922}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    LOG.debug(\"Opening file {} with buffer size {}\", path, bufferSize);\n    Path qualifiedPath = qualify(path);\n    LOG.debug(\"Qualified path: {}\", qualifiedPath);\n    try {\n        return seaweedFileSystemStore.open(qualifiedPath, bufferSize);\n    } catch (Exception e) {\n        LOG.warn(\"Failed to open file {} with buffer size {}\", path, bufferSize, e);\n        return null;\n    }\n}", "CodeBleu_score": 38.36725009034944}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    log.info(\"Opening file {} with buffer size {}\", path, bufferSize);\n    Path qualifiedPath = qualify(path);\n    try {\n        return seaweedFileSystemStore.open(qualifiedPath, bufferSize);\n    } catch (IOException e) {\n        log.warn(\"Error opening file {}\", qualifiedPath, e);\n        return null;\n    }\n}", "CodeBleu_score": 31.67592139564762}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    log.info(\"Opening file {} with buffer size {}\", path, bufferSize);\n    Path qualifiedPath = qualify(path);\n    try {\n        return seaweedFileSystemStore.open(qualifiedPath, bufferSize);\n    } catch (Exception e) {\n        log.warn(\"Error opening file {}\", qualifiedPath, e);\n        return null;\n    }\n}", "CodeBleu_score": 32.023704385760176}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\n    LOG.debug(\"rename path: {} => {}\", src, dst);\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n    FilerProto.Entry entry = seaweedFileSystemStore.lookupEntry(dst);\n\n    Path adjustedDst = dst;\n\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n\n    seaweedFileSystemStore.rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 99.96446340328713}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\n    LOG.debug(\"rename path: {} => {}\", src, dst);\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n    FilerProto.Entry entry = seaweedFileSystemStore.lookupEntry(dst);\n\n    Path adjustedDst = dst;\n\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n\n    seaweedFileSystemStore.rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 99.96446340328713}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    LOG.debug(\"rename path: {} => {}\", src, dst);\n\n    if (src.isRoot()) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n    FilerProto.Entry entry = seaweedFileSystemStore.lookupEntry(dst);\n\n    Path adjustedDst = dst;\n\n    if (entry != null) {\n        FileStatus dstFileStatus = getFileStatus(dst);\n        String sourceFileName = src.getName();\n        if (!dstFileStatus.isDirectory()) {\n            return false;\n        }\n        adjustedDst = new Path(dst, sourceFileName);\n    }\n\n    Path qualifiedSrcPath = qualify(src);\n    Path qualifiedDstPath = qualify(adjustedDst);\n\n    seaweedFileSystemStore.rename(qualifiedSrcPath, qualifiedDstPath);\n    return true;\n}", "CodeBleu_score": 99.91986673198495}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\t    if (capability.toLowerCase().equals(\"hsync\")) {\n        return true;\n    }\n    if (capability.toLowerCase().equals(\"hflush\")) {\n        return supportFlush;\n    }\n    return false;\n}", "CodeBleu_score": 46.08689380745844}, {"code": "public boolean hasCapability(String capability){\n\t    if (capability.toLowerCase().equals(\"hsync\")) {\n        return supportSync;\n    } else if (capability.toLowerCase().equals(\"hflush\")) {\n        return supportFlush;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 41.595872990286374}, {"code": "public boolean hasCapability(String capability){\n\t    capability = capability.toLowerCase();\n    if (capability.equals(\"hsync\")) {\n        return true;\n    }\n    if (capability.equals(\"hflush\")) {\n        return supportFlush;\n    }\n    return false;\n}", "CodeBleu_score": 34.89264872858484}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    // If the offset is less than the last flush offset, we can skip the flush.\n    if (offset <= lastFlushOffset) {\n        return;\n    }\n\n    // Write the metadata to the filer client.\n    filerClient.writeMetadata(writtenBytes, offset);\n\n    // Update the last flush offset.\n    lastFlushOffset = offset;\n}", "CodeBleu_score": 36.80544181836141}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset > lastFlushOffset) {\n        // Write metadata to the filer client\n        filerClient.writeMetadata(lastFlushOffset, offset - lastFlushOffset);\n        // Update the last flush offset\n        lastFlushOffset = offset;\n    }\n}", "CodeBleu_score": 36.527040354620745}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (offset == 0) {\n        return;\n    }\n    if (offset > lastFlushOffset) {\n        // Write metadata to the filer client.\n        filerClient.writeMetadata(offset);\n        lastFlushOffset = offset;\n    }\n}", "CodeBleu_score": 37.404235832072594}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t        if (writeOperations.size() > MAX_WRITE_QUEUE_SIZE) {\n            throw new IOException(\"Write queue is full. Max size: \" + MAX_WRITE_QUEUE_SIZE);\n        }\n\n        if (bufferToWrite.remaining() == 0) {\n            return 0;\n        }\n\n        bufferToWrite.flip();\n        int length = bufferToWrite.remaining();\n        if (length == 0) {\n            return 0;\n        }\n\n        final WriteOperation writeOperation = new WriteOperation(writePosition, length);\n        writeOperations.add(writeOperation);\n        writeOperation.task = completionService.submit(new Callable<Integer>() {\n            @Override\n            public Integer call() throws IOException {\n                try {\n                    return service.write(bufferToWrite, writePosition);\n                } catch (IOException e) {\n                    lastError = e;\n                    throw e;\n                }\n            }\n        });\n        return length;\n    }", "CodeBleu_score": 35.868799593609964}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t        // flip the buffer to prepare for reading\n        bufferToWrite.flip();\n        int bytesWritten = bufferToWrite.remaining();\n        if (bytesWritten == 0) {\n            return 0;\n        }\n        // ensure the task queue is not overloaded\n        if (writeOperations.size() > MAX_WRITE_QUEUE_SIZE) {\n            shrinkWriteOperationQueue();\n        }\n        // submit the write task to the completion service\n        WriteOperation writeOperation = new WriteOperation(writePosition, bytesWritten);\n        writeOperation.task = completionService.submit(new Callable<Integer>() {\n            @Override\n            public Integer call() throws IOException {\n                try {\n                    return writeToService(bufferToWrite, writePosition);\n                } catch (IOException e) {\n                    lastError = e;\n                    throw e;\n                }\n            }\n        });\n        // record the write operation and manage the operation queue\n        writeOperations.add(writeOperation);\n        return bytesWritten;\n    }", "CodeBleu_score": 38.77758464890833}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t        if (writeOperations.size() > MAX_QUEUE_SIZE) {\n            throw new IOException(\"Write queue is full\");\n        }\n\n        int length = bufferToWrite.remaining();\n        bufferToWrite.flip();\n        WriteOperation writeOperation = new WriteOperation(bufferToWrite, writePosition, length);\n        writeOperations.add(writeOperation);\n        writeOperation.task = completionService.submit(writeOperation);\n        return length;\n    }", "CodeBleu_score": 30.231754971595485}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\t    while (true) {\n        try {\n            Future<?> future = completionService.take();\n            future.get();\n            return;\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        } catch (ExecutionException e) {\n            throw new IOException(e);\n        }\n    }\n}", "CodeBleu_score": 31.086003930890328}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    try {\n        while (completionService.poll(1, TimeUnit.SECONDS) == null) {\n            // Wait for the next task to complete\n        }\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 18.07985783923868}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    while (true) {\n        try {\n            Future<Void> future = completionService.take();\n            future.get();\n            break;\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new IOException(e);\n        } catch (ExecutionException e) {\n            throw new IOException(e);\n        }\n    }\n}", "CodeBleu_score": 32.23269551713365}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    while (writeOperationQueue.size() > 0 && writeOperationQueue.get(0).isDone()) {\n        WriteOperation completedWriteOperation = writeOperationQueue.remove(0);\n        totalAppendOffset += completedWriteOperation.getLength();\n    }\n}", "CodeBleu_score": 28.94717249365813}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    for (int i = 0; i < writeOperationQueue.size(); i++) {\n        WriteOperation writeOperation = writeOperationQueue.get(i);\n        if (writeOperation.isDone()) {\n            totalAppendOffset += writeOperation.getLength();\n            writeOperationQueue.remove(i);\n            i--;\n        }\n    }\n}", "CodeBleu_score": 38.08730420249289}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    // Iterate through the queue and remove completed tasks\n    for (int i = 0; i < writeOperationQueue.size(); i++) {\n        WriteOperation writeOperation = writeOperationQueue.get(i);\n        if (writeOperation.isDone()) {\n            // Update the total append offset\n            totalAppendOffset += writeOperation.getData().length;\n            // Remove the completed task from the queue\n            writeOperationQueue.remove(i);\n            i--;\n        }\n    }\n}", "CodeBleu_score": 40.5848467287374}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\t\t\tif (user == null) {\n\t\t\tthrow new IllegalArgumentException(\"User cannot be null\");\n\t\t}\n\t\tif (user.getHomeDirectory() == null) {\n\t\t\tthrow new IllegalArgumentException(\"User home directory cannot be null\");\n\t\t}\n\t\tthis.homePath = user.getHomeDirectory();\n\t\tthis.user = user;\n\t}", "CodeBleu_score": 74.75845780004944}, {"code": "protected HdfsFileSystemView(User user){\n\t\t\tif (user == null) {\n\t\t\tthrow new IllegalArgumentException(\"user is null\");\n\t\t}\n\t\tif (user.getHomeDirectory() == null) {\n\t\t\tthrow new IllegalArgumentException(\"user's home directory is null\");\n\t\t}\n\t\tthis.homePath = user.getHomeDirectory().getPath();\n\t\tthis.user = user;\n\t}", "CodeBleu_score": 68.14557410663411}, {"code": "protected HdfsFileSystemView(User user){\n\t\t\tif (user == null) {\n\t\t\tthrow new IllegalArgumentException(\"user cannot be null\");\n\t\t}\n\t\tif (user.getHomeDirectory() == null) {\n\t\t\tthrow new IllegalArgumentException(\"user's home directory cannot be null\");\n\t\t}\n\t\thomePath = user.getHomeDirectory().getPath();\n\t\tthis.user = user;\n\t}", "CodeBleu_score": 68.7085376582062}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path newPath = Path.of(dir);\n    if (newPath.isAbsolute()) {\n        newPath = newPath.normalize();\n    } else {\n        newPath = currentPath.resolve(newPath).normalize();\n    }\n    if (newPath.equals(currentPath.getRoot())) {\n        return false;\n    }\n    if (Files.isDirectory(newPath)) {\n        currentPath = newPath;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 24.620746983458574}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path newPath = Path.of(dir);\n    if (newPath.isAbsolute()) {\n        if (newPath.isDirectory()) {\n            currentPath = newPath;\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        Path newAbsolutePath = currentPath.resolve(newPath);\n        if (newAbsolutePath.isDirectory()) {\n            currentPath = newAbsolutePath;\n            return true;\n        } else {\n            return false;\n        }\n    }\n}", "CodeBleu_score": 25.08992091085337}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path newPath = Path.of(dir);\n    if (newPath.isAbsolute()) {\n        newPath = Path.of(dir).normalize();\n    } else {\n        newPath = Path.of(workingDirectory.toString(), dir).normalize();\n    }\n    if (newPath.getParent() != null && newPath.getParent().equals(Path.of(\"/\"))) {\n        return false;\n    }\n    if (Files.isDirectory(newPath)) {\n        workingDirectory = newPath;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 30.21550411191965}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.filerClient = new FilerClient(host, port, grpcPort, conf);\n    this.accessMode = conf.getEnum(\"seaweedfs.access.mode\", AccessMode.class, AccessMode.DIRECT);\n}", "CodeBleu_score": 31.16116851993208}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.filerClient = new FilerClient(host, port, grpcPort, conf);\n    this.accessMode = conf.get(SeaweedFileSystemStore.ACCESS_MODE);\n}", "CodeBleu_score": 25.520098520600747}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.filerClient = new FilerClient(host, port, grpcPort, conf);\n    this.accessMode = conf.get(\"fs.seaweedfs.accessMode\", \"direct\");\n}", "CodeBleu_score": 27.62533988206454}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Opening file for read: \" + path);\n        }\n        final FilerProto.Entry entry = lookupEntry(path);\n        if (entry == null) {\n            throw new FileNotFoundException(\"File not found: \" + path);\n        }\n        return new SeaweedHadoopInputStream(filerClient, statistics, path);\n    }", "CodeBleu_score": 76.04661619810042}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\n        LOG.info(\"Opening file for read: \" + path);\n        FilerProto.Entry entry = lookupEntry(path);\n        if (entry == null) {\n            throw new FileNotFoundException(path.toString());\n        }\n        return new SeaweedHadoopInputStream(filerClient, statistics, path, entry);\n    }", "CodeBleu_score": 64.75641481965044}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t\n        LOG.debug(\"Opening file for read: {}\", path);\n\n        final FilerProto.Entry entry = lookupEntry(path);\n\n        if (entry == null) {\n\n            throw new FileNotFoundException(\"File not found: \" + path);\n\n        }\n\n        return new SeaweedHadoopInputStream(filerClient, statistics, path, entry);\n\n    }", "CodeBleu_score": 78.49634962109644}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        host = InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n        host = \"localhost\";\n    }\n    mapThreads = conf.getInt(\"map.threads\", 1);\n    filesPerThread = conf.getInt(\"files.per.thread\", 100);\n    pool = Executors.newFixedThreadPool(mapThreads, new ThreadFactory() {\n\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            return t;\n        }\n    });\n}", "CodeBleu_score": 60.56532244811852}, {"code": "public void configure(JobConf conf){\n\t    super.configure(conf);\n    try {\n        hostname = InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n        hostname = \"localhost\";\n    }\n    threadsPerMap = conf.getInt(\"mapred.tasktracker.map.tasks.per.job\", 1);\n    filesPerThread = conf.getInt(\"mapred.tasktracker.map.tasks.per.job\", 1);\n    threadPool = Executors.newFixedThreadPool(threadsPerMap, new DaemonThreadFactory());\n}", "CodeBleu_score": 50.668018549432645}, {"code": "public void configure(JobConf conf){\n\t    this.conf = conf;\n    try {\n        hostname = InetAddress.getLocalHost().getHostName();\n    } catch (UnknownHostException e) {\n        hostname = \"localhost\";\n    }\n    try {\n        filesPerThread = conf.getInt(\"mapred.files.per.thread\", 1);\n        threadsPerMap = conf.getInt(\"mapred.threads.per.map\", 1);\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    pool = Executors.newFixedThreadPool(threadsPerMap, new ThreadFactory() {\n\n        public Thread newThread(Runnable r) {\n            Thread t = new Thread(r);\n            t.setDaemon(true);\n            return t;\n        }\n    });\n}", "CodeBleu_score": 62.289081982659624}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    if (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\");\n    }\n  }", "CodeBleu_score": 94.23896749872512}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    if (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\");\n    }\n  }", "CodeBleu_score": 94.23896749872512}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    if (BgTaskUtil.isRunning(uri.getHost(), \"Trash emptier\")) {\n      return;\n    }\n    try {\n      UserGroupInformation superUser = UserGroupInformation.createRemoteUser(getConf(conf, \"superuser\", \"hdfs\"));\n      emptierFs = superUser.doAs((PrivilegedExceptionAction<FileSystem>) () -> {\n        JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n        fs.initialize(uri, conf);\n        return fs;\n      });\n      BgTaskUtil.startTrashEmptier(uri.getHost(), \"Trash emptier\", emptierFs, new Trash(emptierFs, conf).getEmptier(), TimeUnit.MINUTES.toMillis(10));\n    } catch (Exception e) {\n      throw new IOException(\"start trash failed!\");\n    }\n  }", "CodeBleu_score": 94.23896749872512}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception{\n\t    if (context == null || context.isEmpty()) {\n        throw new Exception(\"Context cannot be null or empty.\");\n    }\n\n    String currentContext = getContext();\n    if (currentContext == null || currentContext.isEmpty()) {\n        setContext(context, null);\n    } else {\n        if (!currentContext.contains(context)) {\n            setContext(currentContext + \",\" + context, null);\n        }\n    }\n}", "CodeBleu_score": 29.767606131581203}, {"code": "public static void setContext(String context) throws Exception{\n\t    if (context == null) {\n        throw new Exception(\"Context cannot be null\");\n    }\n\n    String currentContext = getContext();\n\n    if (currentContext == null) {\n        setContext(context);\n    } else if (!currentContext.contains(context)) {\n        setContext(currentContext + \";\" + context);\n    }\n}", "CodeBleu_score": 23.377700902135814}, {"code": "public static void setContext(String context) throws Exception{\n\t    if (context == null || context.isEmpty()) {\n        throw new Exception(\"Invalid context\");\n    }\n    String currentContext = getContext();\n    if (currentContext == null || currentContext.isEmpty()) {\n        setContext(context);\n    } else {\n        if (!currentContext.contains(context)) {\n            setContext(currentContext + \";\" + context);\n        }\n    }\n}", "CodeBleu_score": 28.95263123558709}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\t  RETURN_NOT_OK(libhdfs_->status());\n  if (hdfs_ == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Not connected to HDFS namenode\"));\n  }\n\n  // Get the file name from the URI\n  const std::string& file_name = uri.to_path();\n\n  // Delete the file from HDFS\n  int ret = hdfsDelete(hdfs_, file_name.c_str(), 0);\n  if (ret != 0) {\n    return LOG_STATUS(Status_HDFSError(\"Failed to delete file \" + file_name));\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 50.612161401305464}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  RETURN_NOT_OK(libhdfs_->status());\n\n  // Get the file name from the URI\n  std::string filename = uri.to_string();\n\n  // Delete the file from HDFS\n  int ret = hdfsDelete(fs, filename.c_str(), 0);\n  if (ret != 0) {\n    return LOG_STATUS(Status_HDFSError(\n        \"Failed to delete file '\" + filename + \"' from HDFS\"));\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 64.6778310972892}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  RETURN_NOT_OK(libhdfs_->status());\n  if (hdfs_ == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Not connected to HDFS namenode\"));\n  }\n\n  int ret = hdfsDelete(hdfs_, uri.c_str());\n  if (ret != 0) {\n    return LOG_STATUS(\n        Status_HDFSError(\"Failed to delete file \" + uri.to_string()));\n  }\n\n  return Status::Ok();\n}", "CodeBleu_score": 58.76513469727461}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (ret) {\n    return LOG_STATUS(Status_HDFSError(\n        \"Cannot sync file; File does not exist in HDFS\"));\n  }\n  hdfsFile fd = libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), O_WRONLY, 0,\n                                       0, 0);\n  if (fd == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\n        \"Cannot sync file; Failed to open file in HDFS\"));\n  }\n  if (libhdfs_->hdfsFlush(fs, fd) != 0) {\n    return LOG_STATUS(Status_HDFSError(\"Cannot sync file; Failed to flush\"));\n  }\n  if (libhdfs_->hdfsCloseFile(fs, fd) != 0) {\n    return LOG_STATUS(Status_HDFSError(\"Cannot sync file; Failed to close\"));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 51.82183293702602}, {"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (!ret) {\n    return Status::Ok();\n  }\n  hdfsFile file = libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), O_WRONLY,\n                                         0, 0, 0);\n  if (file == nullptr) {\n    return LOG_STATUS(\n        Status_HDFSError(\"Failed to open file for sync: \" + uri.to_string()));\n  }\n  if (libhdfs_->hdfsHSync(file) != 0) {\n    libhdfs_->hdfsCloseFile(file);\n    return LOG_STATUS(Status_HDFSError(\"Failed to flush file: \" + uri.to_string()));\n  }\n  if (libhdfs_->hdfsCloseFile(file) != 0) {\n    return LOG_STATUS(Status_HDFSError(\"Failed to close file: \" + uri.to_string()));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 55.094672103604694}, {"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsExists(fs, uri.to_path().c_str());\n  if (!ret) {\n    return Status::Ok();\n  }\n  hdfsFile file = libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), O_WRONLY, 0, 0, 0);\n  if (file == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Failed to open file \" + uri.to_string()));\n  }\n  if (libhdfs_->hdfsFlush(fs, file) < 0) {\n    libhdfs_->hdfsCloseFile(fs, file);\n    return LOG_STATUS(Status_HDFSError(\"Failed to flush file \" + uri.to_string()));\n  }\n  if (libhdfs_->hdfsCloseFile(fs, file) < 0) {\n    return LOG_STATUS(Status_HDFSError(\"Failed to close file \" + uri.to_string()));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 55.83424845813172}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  RETURN_NOT_OK(libhdfs_->status());\n  if (hdfs_ == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Not connected to HDFS namenode\"));\n  }\n\n  hdfsFileInfo* file_info = hdfsGetPathInfo(hdfs_, uri.c_str());\n  if (file_info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Cannot get file info\"));\n  }\n  if (!file_info->mKind) {\n    return LOG_STATUS(Status_HDFSError(\"Path is not a file\"));\n  }\n  *nbytes = file_info->mSize;\n  hdfsFreeFileInfo(file_info, 1);\n  return Status::Ok();\n}", "CodeBleu_score": 44.344842228066994}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  RETURN_NOT_OK(libhdfs_->status());\n  if (hdfs_ == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\"Not connected to HDFS namenode\"));\n  }\n\n  // Connect to the HDFS file system\n  hdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n\n  // Get the file information\n  hdfsFileInfo* file_info = hdfsGetPathInfo(fs, uri.c_str());\n  if (file_info == nullptr) {\n    return LOG_STATUS(\n        Status_HDFSError(\"Cannot get file info for '\" + uri.to_string() + \"'\"));\n  }\n\n  // Check if the path is a file\n  if (!file_info->mKind == HDFS_FILE) {\n    hdfsFreeFileInfo(file_info, 1);\n    return LOG_STATUS(\n        Status_HDFSError(\"Cannot get file size for '\" + uri.to_string() +\n                         \"'; Not a file\"));\n  }\n\n  // Set the size in bytes\n  *nbytes = file_info->mSize;\n\n  // Free the file information\n  hdfsFreeFileInfo(file_info, 1);\n\n  // Disconnect from the HDFS file system\n  hdfsDisconnect(fs);\n\n  return Status::Ok();\n}", "CodeBleu_score": 53.355450341475695}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  // Connect to the HDFS file system\n  hdfsFS fs;\n  RETURN_NOT_OK(connect(&fs));\n\n  // Get the file information\n  hdfsFileInfo* file_info = hdfsGetPathInfo(fs, uri.c_str());\n  if (file_info == nullptr) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file info for '\") + uri.to_string() + \"'\"));\n  }\n\n  // Check if the path is a file\n  if (!file_info->mKind == HDFS_FILE) {\n    hdfsFreeFileInfo(file_info, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size for '\") + uri.to_string() + \"'\"));\n  }\n\n  // Set the size in bytes\n  *nbytes = file_info->mSize;\n\n  // Free the file information\n  hdfsFreeFileInfo(file_info, 1);\n\n  // Return Ok status\n  return Status::Ok();\n}", "CodeBleu_score": 59.84962186753441}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String zkQuorum = null;\n    String znodeParent = null;\n    if (hbaseCfgString != null) {\n        String[] hbaseCfg = hbaseCfgString.split(\",\");\n        for (String cfg : hbaseCfg) {\n            String[] cfgParts = cfg.split(\"=\");\n            if (cfgParts.length == 2) {\n                String key = cfgParts[0].trim();\n                String value = cfgParts[1].trim();\n                if (key.equalsIgnoreCase(\"hbase.zookeeper.quorum\")) {\n                    zkQuorum = value;\n                } else if (key.equalsIgnoreCase(\"hbase.zookeeper.property.clientPort\")) {\n                    if (!zkQuorum.contains(\":\")) {\n                        zkQuorum += \":\" + value;\n                    }\n                } else if (key.equalsIgnoreCase(\"hbase.zookeeper.znode.parent\")) {\n                    znodeParent = value;\n                }\n            }\n        }\n    }\n    if (znodeParent == null) {\n        znodeParent = \"/hbase\";\n    }\n    return Pair.of(zkQuorum, znodeParent);\n}", "CodeBleu_score": 32.61147977507947}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String[] hbaseCfgArray = hbaseCfgString.split(\";\");\n    String zkQuorum = \"\";\n    String znodeParent = \"\";\n    for (String hbaseCfg : hbaseCfgArray) {\n        String[] hbaseCfgPair = hbaseCfg.split(\"=\");\n        if (hbaseCfgPair.length == 2) {\n            String key = hbaseCfgPair[0].trim().toLowerCase();\n            String value = hbaseCfgPair[1].trim();\n            if (key.equals(\"hbase.zookeeper.quorum\")) {\n                zkQuorum = value;\n                if (!zkQuorum.contains(\":\")) {\n                    zkQuorum += \":2181\";\n                }\n            } else if (key.equals(\"hbase.zookeeper.znode.parent\")) {\n                znodeParent = value;\n            }\n        }\n    }\n    if (znodeParent.isEmpty()) {\n        znodeParent = \"/hbase\";\n    }\n    return Pair.of(zkQuorum, znodeParent);\n}", "CodeBleu_score": 33.726502331867174}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String zkQuorum = null;\n    String zkParent = null;\n    String[] configLines = hbaseCfgString.split(\"\n\");\n    for (String line : configLines) {\n        if (line.startsWith(\"hbase.zookeeper.quorum\")) {\n            zkQuorum = line.split(\"=\")[1].trim();\n            if (!zkQuorum.contains(\":\")) {\n                zkQuorum = zkQuorum + \":2181\";\n            }\n        } else if (line.startsWith(\"hbase.zookeeper.znode.parent\")) {\n            zkParent = line.split(\"=\")[1].trim();\n        }\n    }\n    if (zkParent == null) {\n        zkParent = \"/hbase\";\n    }\n    return new Pair<String, String>(zkQuorum, zkParent);\n}", "CodeBleu_score": 41.527605000764304}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    Connection conn = null;\n    try {\n        conn = getJdbcConnection(cfg);\n        String tableName = cfg.getTableName();\n        checkTable(conn, cfg.getNamespace(), tableName, cfg.isThinClient());\n        PTable tableSchema = getTableSchema(conn, tableName);\n        List<String> columns = tableSchema.getColumnNames();\n        List<String> configuredColumns = cfg.getColumns();\n        for (String column : configuredColumns) {\n            if (!columns.contains(column)) {\n                throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.COLUMN_NOT_EXIST_ERROR,\n                        String.format(\"The column [%s] is not exist in the table [%s]\", column, tableName));\n            }\n        }\n    }\n    catch (Exception e) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.VALIDATE_CONFIG_ERROR,\n                \"Failed to validate configuration for HbaseSQLWriter\", e);\n    }\n    finally {\n        try {\n            if (conn != null) {\n                conn.close();\n            }\n        }\n        catch (Exception e) {\n            LOG.warn(\"Failed to close JDBC connection\", e);\n        }\n    }\n}", "CodeBleu_score": 40.6943743186901}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    Connection conn = null;\n    try {\n        conn = getJdbcConnection(cfg);\n        String fullTableName = cfg.getTableName();\n        String namespace = SchemaUtil.getSchemaNameFromFullName(fullTableName);\n        String tableName = SchemaUtil.getTableNameFromFullName(fullTableName);\n        checkTable(conn, namespace, tableName, cfg.isThinClient());\n        PTable table = getTableSchema(conn, fullTableName);\n        List<Column> columns = cfg.getColumns();\n        for (Column column : columns) {\n            if (!table.getColumnNames().contains(column.getName())) {\n                throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.VALIDATE_CONFIG_ERROR,\n                        String.format(\"Column [%s] does not exist in table [%s]\", column.getName(), fullTableName));\n            }\n        }\n    }\n    catch (SQLException e) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.VALIDATE_CONFIG_ERROR,\n                String.format(\"Failed to validate config for hbaseSQLWriter, the error message is: %s\", e.getMessage()), e);\n    }\n    finally {\n        JdbcUtil.closeConnection(conn);\n    }\n}", "CodeBleu_score": 42.89726077195601}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    Connection conn = getJdbcConnection(cfg);\n    String tableName = cfg.getTableName();\n    String namespace = cfg.getNamespace();\n    boolean isThinClient = cfg.isThinClient();\n    checkTable(conn, namespace, tableName, isThinClient);\n    PTable tableSchema = getTableSchema(conn, tableName);\n    List<String> columns = cfg.getColumns();\n    List<String> columnTypes = cfg.getColumnTypes();\n    if (columns.size() != columnTypes.size()) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.CONFIG_INVALID_EXCEPTION,\n                String.format(\"The size of columns[%s] must be equal to columnTypes[%s]\", columns, columnTypes));\n    }\n    for (int i = 0; i < columns.size(); i++) {\n        String column = columns.get(i);\n        String columnType = columnTypes.get(i);\n        if (!tableSchema.getColumn(column).getTypeName().equals(columnType)) {\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.CONFIG_INVALID_EXCEPTION,\n                    String.format(\"The column[%s] type[%s] in configuration is not equal to the column type[%s] in table[%s]\",\n                            column, columnType, tableSchema.getColumn(column).getTypeName(), tableName));\n        }\n    }\n}", "CodeBleu_score": 37.69235378649306}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (kerberosPrincipal != null && kerberosKeytabFilePath != null) {\n        System.setProperty(\"java.security.krb5.conf\", \"/etc/krb5.conf\");\n        UserGroupInformation.setConfiguration(new org.apache.hadoop.conf.Configuration());\n        try {\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            log.error(\"Kerberos login failed: {}\", e.getMessage());\n            throw new RuntimeException(\"Kerberos login failed\", e);\n        }\n    }\n}", "CodeBleu_score": 33.98886211234551}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    try {\n        if (kerberosPrincipal != null && kerberosKeytabFilePath != null) {\n            UserGroupInformation.setConfiguration(new org.apache.hadoop.conf.Configuration());\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        }\n    } catch (IOException e) {\n        LOG.error(\"Failed to login with Kerberos principal: \" + kerberosPrincipal + \" and keytab file: \" + kerberosKeytabFilePath, e);\n        throw new RuntimeException(\"Failed to login with Kerberos principal: \" + kerberosPrincipal + \" and keytab file: \" + kerberosKeytabFilePath, e);\n    }\n}", "CodeBleu_score": 36.9229915405928}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (kerberosPrincipal != null && kerberosKeytabFilePath != null) {\n        try {\n            UserGroupInformation.setConfiguration(new Configuration());\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            log.error(\"Error occurred while logging in using Kerberos: {}\", e.getMessage());\n            throw new RuntimeException(\"Error occurred while logging in using Kerberos: \" + e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 34.12268513111932}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> cols = new HashMap<String, ThinClientPTable.ThinClientPColumn>();\n        ResultSetMetaData meta = rs.getMetaData();\n        int colCount = meta.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = meta.getColumnName(i);\n            if (colName == null) {\n                throw new SQLException(\"column name is null\");\n            }\n            int colType = meta.getColumnType(i);\n            if (colType == Types.NULL) {\n                throw new SQLException(\"column type is null\");\n            }\n            cols.put(colName, new ThinClientPTable.ThinClientPColumn(colName, colType));\n        }\n        return cols;\n    }", "CodeBleu_score": 47.489001138674524}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t    ResultSetMetaData rsmd = rs.getMetaData();\n    Map<String, ThinClientPTable.ThinClientPColumn> cols = new HashMap<String, ThinClientPTable.ThinClientPColumn>();\n    for (int i = 1; i <= rsmd.getColumnCount(); i++) {\n        String name = rsmd.getColumnName(i);\n        if (name == null) {\n            throw new SQLException(\"Column name is null\");\n        }\n        int type = rsmd.getColumnType(i);\n        if (type == Types.NULL) {\n            throw new SQLException(\"Column type is null\");\n        }\n        cols.put(name, new ThinClientPTable.ThinClientPColumn(name, type));\n    }\n    return cols;\n}", "CodeBleu_score": 37.7361088652841}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t    ResultSetMetaData rsmd = rs.getMetaData();\n    int colCount = rsmd.getColumnCount();\n    Map<String, ThinClientPTable.ThinClientPColumn> colType = new HashMap<String, ThinClientPTable.ThinClientPColumn>();\n    for (int i = 1; i <= colCount; i++) {\n        String colName = rsmd.getColumnName(i);\n        if (colName == null) {\n            throw new SQLException(\"Column name is null\");\n        }\n        int colTypeInt = rsmd.getColumnType(i);\n        if (colTypeInt == Types.NULL) {\n            throw new SQLException(\"Column type is null\");\n        }\n        ThinClientPTable.ThinClientPColumn col = new ThinClientPTable.ThinClientPColumn(colName, colTypeInt);\n        colType.put(colName, col);\n    }\n    return colType;\n}", "CodeBleu_score": 45.123417250644195}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\t    PhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    } catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR,\n                \"Failed to truncate \" + tableName + \".\", t);\n    } finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 98.91872507973358}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    PhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    } catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR,\n                \"Failed to truncate \" + tableName + \".\", t);\n    } finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 98.91872507973358}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    PhoenixConnection sqlConn;\n    Admin admin = null;\n    try {\n        sqlConn = conn.unwrap(PhoenixConnection.class);\n        admin = sqlConn.getQueryServices().getAdmin();\n        TableName hTableName = getTableName(tableName);\n        // \u786e\u4fdd\u8868\u5b58\u5728\u3001\u53ef\u7528\n        checkTable(admin, hTableName);\n        // \u6e05\u7a7a\u8868\n        admin.disableTable(hTableName);\n        admin.truncateTable(hTableName, true);\n        LOG.debug(\"Table {} has been truncated.\", tableName);\n    } catch (Throwable t) {\n        // \u6e05\u7a7a\u8868\u5931\u8d25\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_HBASE_ERROR,\n                \"Failed to truncate \" + tableName + \".\", t);\n    } finally {\n        if (admin != null) {\n            closeAdmin(admin);\n        }\n    }\n}", "CodeBleu_score": 98.91872507973358}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath){\n\t    try {\n        if (checkHdfsFileType(filePath, fileType)) {\n            LOG.info(\"File [{}] matches the specified file type [{}].\", filePath, fileType);\n            sourceFiles.add(filePath);\n        }\n        else {\n            String message = String.format(\"File [%s] does not match the specified file type [%s].\",\n                    filePath, fileType);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message);\n        }\n    }\n    catch (Exception e) {\n        LOG.error(\"Failed to add file [{}].\", filePath, e);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, e);\n    }\n}", "CodeBleu_score": 47.369793080456375}, {"code": "private void addSourceFileByType(String filePath){\n\t    try {\n        if (checkHdfsFileType(filePath, fileType)) {\n            LOG.info(\"Add file {} to source files list.\", filePath);\n            sourceFiles.add(filePath);\n        }\n        else {\n            String message = String.format(\"Unsupported file type [%s] for file [%s].\", fileType, filePath);\n            LOG.error(message);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message);\n        }\n    }\n    catch (Exception e) {\n        String message = String.format(\"Failed to add file [%s] to source files list.\", filePath);\n        LOG.error(message, e);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message, e);\n    }\n}", "CodeBleu_score": 49.93862099842586}, {"code": "private void addSourceFileByType(String filePath){\n\t    String fileType = getFileType(filePath);\n    if (StringUtils.equalsIgnoreCase(fileType, HdfsConstant.ORC)) {\n        LOG.info(\"Add orc file {} to source file list\", filePath);\n        sourceFiles.add(filePath);\n    }\n    else if (StringUtils.equalsIgnoreCase(fileType, HdfsConstant.RC)) {\n        LOG.info(\"Add rc file {} to source file list\", filePath);\n        sourceFiles.add(filePath);\n    }\n    else if (StringUtils.equalsIgnoreCase(fileType, HdfsConstant.SEQ)) {\n        LOG.info(\"Add seq file {} to source file list\", filePath);\n        sourceFiles.add(filePath);\n    }\n    else if (StringUtils.equalsIgnoreCase(fileType, HdfsConstant.PARQUET)) {\n        LOG.info(\"Add parquet file {} to source file list\", filePath);\n        sourceFiles.add(filePath);\n    }\n    else if (StringUtils.equalsIgnoreCase(fileType, HdfsConstant.CSV)\n            || StringUtils.equalsIgnoreCase(fileType, HdfsConstant.TEXT)) {\n        LOG.info(\"Add csv file {} to source file list\", filePath);\n        sourceFiles.add(filePath);\n    }\n    else {\n        String message = String.format(\"Unsupported file type: %s, only support [%s]\", fileType,\n                HdfsConstant.SUPPORT_FILE_TYPE);\n        LOG.error(message);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.UNSUPPORTED_FILE_TYPE, message);\n    }\n}", "CodeBleu_score": 39.93296363747092}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t    try {\n        log.info(\"Start reading data from sequence file: {}\", sourceSequenceFilePath);\n        Path path = new Path(sourceSequenceFilePath);\n        SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(readerSliceConfig), path, readerSliceConfig);\n        Writable key = (Writable) reader.getKeyClass().newInstance();\n        Writable value = (Writable) reader.getValueClass().newInstance();\n        while (reader.next(key, value)) {\n            if (value.toString().trim().length() > 0) {\n                StorageReaderUtil.transportRecord(recordSender, value.toString(), taskPluginCollector);\n            }\n        }\n        reader.close();\n    } catch (Exception e) {\n        log.error(\"Failed to read data from sequence file: {}\", sourceSequenceFilePath, e);\n        throw new AddaxException(e.getMessage(), e);\n    }\n}", "CodeBleu_score": 47.64436413587643}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t    try {\n        // Log the start of the reading process\n        taskPluginCollector.log(\"Start reading sequence file: \" + sourceSequenceFilePath);\n        // Open the sequence file\n        SequenceFile.Reader reader = new SequenceFile.Reader(readerSliceConfig, SequenceFile.Reader.file(new Path(sourceSequenceFilePath)));\n        // Create a WritableComparable object for the key\n        WritableComparable key = (WritableComparable) reader.getKeyClass().newInstance();\n        // Create a Writable object for the value\n        Writable value = (Writable) reader.getValueClass().newInstance();\n        // Iterate through the file\n        while (reader.next(key, value)) {\n            // Check if the value is not blank\n            if (value.getClass().getSimpleName().equals(\"BytesWritable\")) {\n                BytesWritable bytesWritable = (BytesWritable) value;\n                if (bytesWritable.getLength() == 0) {\n                    continue;\n                }\n            }\n            // Transport the record using StorageReaderUtil\n            StorageReaderUtil.transportRecord(recordSender, key, value, sourceSequenceFilePath);\n        }\n        // Close the sequence file\n        reader.close();\n    } catch (Exception e) {\n        // Log an error message\n        taskPluginCollector.log(\"Failed to read sequence file: \" + sourceSequenceFilePath, e);\n        // Throw an AddaxException\n        throw new AddaxException(\"Failed to read sequence file: \" + sourceSequenceFilePath, e);\n    }\n}", "CodeBleu_score": 45.58479886718992}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t    try {\n        log.info(\"Start to read sequence file from {}\", sourceSequenceFilePath);\n        SequenceFile.Reader reader = new SequenceFile.Reader(FileSystem.get(readerSliceConfig),\n                new Path(sourceSequenceFilePath), readerSliceConfig);\n        Writable key = (Writable) reader.getKeyClass().newInstance();\n        Writable value = (Writable) reader.getValueClass().newInstance();\n\n        while (reader.next(key, value)) {\n            if (value.getClass() != NullWritable.class) {\n                StorageReaderUtil.transportRecord(recordSender, value, taskPluginCollector);\n            }\n        }\n        reader.close();\n    } catch (Exception e) {\n        log.error(\"Failed to read sequence file from {}\", sourceSequenceFilePath, e);\n        throw new AddaxException(\"Failed to read sequence file from \" + sourceSequenceFilePath, e);\n    }\n}", "CodeBleu_score": 47.15843269801388}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t        try {\n            Path path = new Path(filepath);\n            FileSystem fs = path.getFileSystem(hadoopConf);\n            FSDataInputStream in = fs.open(path);\n            if (specifiedFileType.equalsIgnoreCase(\"ORC\")) {\n                return isORCFile(path, fs, in);\n            }\n            else if (specifiedFileType.equalsIgnoreCase(\"RC\")) {\n                return isRCFile(filepath, in);\n            }\n            else if (specifiedFileType.equalsIgnoreCase(\"Sequence\")) {\n                return isSequenceFile(path, in);\n            }\n            else if (specifiedFileType.equalsIgnoreCase(\"Parquet\")) {\n                return isParquetFile(path);\n            }\n            else if (specifiedFileType.equalsIgnoreCase(\"CSV\")) {\n                return isCSVFile(path, in);\n            }\n            else if (specifiedFileType.equalsIgnoreCase(\"Text\")) {\n                return isTextFile(path, in);\n            }\n            else {\n                throw new Exception(\"Invalid file type specified: \" + specifiedFileType);\n            }\n        }\n        catch (Exception e) {\n            LOG.error(\"An error occurred while checking the file type: {}\", e.getMessage());\n            throw new RuntimeException(\"An error occurred while checking the file type: \" + e.getMessage());\n        }\n    }", "CodeBleu_score": 47.70540669182872}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        Path path = new Path(filepath);\n        FileSystem fs = path.getFileSystem(hadoopConf);\n        FSDataInputStream in = fs.open(path);\n        if (specifiedFileType.equalsIgnoreCase(\"orc\")) {\n            return isORCFile(path, fs, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"rc\")) {\n            return isRCFile(filepath, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"sequence\")) {\n            return isSequenceFile(path, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"parquet\")) {\n            return isParquetFile(path);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"csv\")) {\n            return isCSVFile(path, in);\n        }\n        else if (specifiedFileType.equalsIgnoreCase(\"text\")) {\n            return isTextFile(path, in);\n        }\n        else {\n            LOG.error(\"The specified file type [{}] is not supported.\", specifiedFileType);\n            throw new Exception(\"The specified file type is not supported.\");\n        }\n    }\n    catch (Exception e) {\n        LOG.error(\"An error occurred while checking the file type: {}\", e.getMessage());\n        throw new Exception(\"An error occurred while checking the file type.\");\n    }\n}", "CodeBleu_score": 48.7359787843375}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        // Create a FileSystem instance using the Hadoop Configuration\n        FileSystem fs = FileSystem.get(hadoopConf);\n        Path path = new Path(filepath);\n        FSDataInputStream in = fs.open(path);\n        switch (specifiedFileType) {\n            case \"ORC\":\n                return isORCFile(path, fs, in);\n            case \"RC\":\n                return isRCFile(filepath, in);\n            case \"Sequence\":\n                return isSequenceFile(path, in);\n            case \"Parquet\":\n                return isParquetFile(path);\n            case \"CSV\":\n                return isCSVFile(path, in);\n            case \"Text\":\n                return isTextFile(path, in);\n            default:\n                throw new Exception(\"Unsupported file type: \" + specifiedFileType);\n        }\n    }\n    catch (Exception e) {\n        LOG.error(\"Error checking file type: \" + e.getMessage());\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 36.55917443745928}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\t    try {\n        if (hConnection != null) {\n            hConnection.close();\n        }\n    } catch (IOException e) {\n        throw new HBaseException(e.getMessage(), e, HBaseException.CLOSE_CONNECTION_ERROR);\n    }\n}", "CodeBleu_score": 58.49034268292422}, {"code": "public static void closeConnection(Connection hConnection){\n\t    try {\n        if (hConnection != null) {\n            hConnection.close();\n        }\n    } catch (IOException e) {\n        throw new HBaseConnectionException(e.getMessage(), e);\n    }\n}", "CodeBleu_score": 51.60520038269502}, {"code": "public static void closeConnection(Connection hConnection){\n\t    try {\n        if (hConnection != null) {\n            hConnection.close();\n        }\n    } catch (IOException e) {\n        throw new HBaseConnectionException(\"Unable to close HBase connection\", e, 1000);\n    }\n}", "CodeBleu_score": 54.65694903697382}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw new HBaseIOException(e.getMessage(), e);\n        }\n    }\n}", "CodeBleu_score": 47.549873087233564}, {"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw new HBaseException(e);\n        }\n    }\n}", "CodeBleu_score": 42.36085515818967}, {"code": "public static void closeAdmin(Admin admin){\n\t    if (admin != null) {\n        try {\n            admin.close();\n        } catch (IOException e) {\n            throw new HBaseException(e.getCode(), e.getMessage());\n        }\n    }\n}", "CodeBleu_score": 43.4348246320166}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t", "CodeBleu_score": 2.0379993148048974}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t        String rowKey = new String(cell.getRowArray(), cell.getRowOffset(), cell.getRowLength());\n        long timestamp = cell.getTimestamp();\n        String family = new String(cell.getFamilyArray(), cell.getFamilyOffset(), cell.getFamilyLength());\n        String qualifier = new String(cell.getQualifierArray(), cell.getQualifierOffset(), cell.getQualifierLength());\n        String value = new String(cell.getValueArray(), cell.getValueOffset(), cell.getValueLength());\n        String type = getType(rowKey);\n        String format = getFormat(rowKey);\n        String format2 = getFormat(value);\n        if (format.equals(\"\")) {\n            format = format2;\n        }\n        if (type.equals(\"string\")) {\n            record.addColumn(new Column(rowKey, family, qualifier, timestamp, value, type, format));\n        } else if (type.equals(\"number\")) {\n            record.addColumn(new Column(rowKey, family, qualifier, timestamp, Double.parseDouble(value), type, format));\n        } else if (type.equals(\"boolean\")) {\n            record.addColumn(new Column(rowKey, family, qualifier, timestamp, Boolean.parseBoolean(value), type, format));\n        } else if (type.equals(\"date\")) {\n            record.addColumn(new Column(rowKey, family, qualifier, timestamp, value, type, format));\n        } else if (type.equals(\"datetime\")) {\n            record.addColumn(new Column(rowKey, family, qualifier, timestamp, value, type, format));\n        } else if (type.equals(\"time\")) {\n            record.addColumn(new Column(rowKey, family, qualifier, timestamp, value, type, format));\n        } else if (type.equals(\"timestamp\")) {\n            record.addColumn(new Column(rowKey, family, qualifier, timestamp, value, type, format));\n        } else {\n            record.addColumn(new Column(rowKey, family, qualifier, timestamp, value, type, format));\n        }\n    }", "CodeBleu_score": 30.612977654156804}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t        if (cell == null) {\n            return;\n        }\n        if (cell.getTimestamp() > 0) {\n            record.addColumn(TIMESTAMP, cell.getTimestamp());\n        }\n        if (cell.getRow() != null) {\n            record.addColumn(ROW_KEY, cell.getRow());\n        }\n        if (cell.getFamily() != null) {\n            record.addColumn(FAMILY, cell.getFamily());\n        }\n        if (cell.getQualifier() != null) {\n            record.addColumn(QUALIFIER, cell.getQualifier());\n        }\n        if (cell.getValue() != null) {\n            record.addColumn(VALUE, cell.getValue());\n        }\n    }", "CodeBleu_score": 10.569490112914696}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getStartRowkey();\n    if (startRowkey == null || startRowkey.length() == 0) {\n        return new byte[0];\n    }\n    else {\n        boolean isBinaryRowkey = configuration.isBinaryRowkey();\n        return stringToBytes(startRowkey, isBinaryRowkey);\n    }\n}", "CodeBleu_score": 43.8872919165059}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t        String startRowkey = configuration.get(ConfigurationKeys.START_ROWKEY);\n        if (startRowkey == null) {\n            return Bytes.EMPTY_BYTE_ARRAY;\n        }\n        boolean isBinaryRowkey = configuration.getBoolean(ConfigurationKeys.IS_BINARY_ROWKEY, false);\n        return stringToBytes(startRowkey, isBinaryRowkey);\n    }", "CodeBleu_score": 58.70852089588436}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowKey = configuration.get(Configuration.START_ROW_KEY);\n    if (startRowKey == null || startRowKey.length() == 0) {\n        return new byte[0];\n    }\n    else {\n        boolean isBinaryRowkey = configuration.getBoolean(Configuration.BINARY_ROW_KEY, false);\n        return stringToBytes(startRowKey, isBinaryRowkey);\n    }\n}", "CodeBleu_score": 59.730722716323434}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowKey = configuration.get(START_ROWKEY_PROPERTY);\n    if (startRowKey == null) {\n        return new byte[0];\n    }\n    return startRowKey.getBytes(StandardCharsets.UTF_8);\n}", "CodeBleu_score": 42.19442610308079}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.get(START_ROWKEY);\n    if (startRowkey == null || startRowkey.isEmpty()) {\n        return new byte[0];\n    }\n    return Bytes.toBytes(startRowkey);\n}", "CodeBleu_score": 46.085358153213086}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.get(\"hbase.startrowkey\");\n    if (startRowkey == null || startRowkey.length() == 0) {\n        return new byte[0];\n    }\n    return Bytes.toBytes(startRowkey);\n}", "CodeBleu_score": 45.04005864406339}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    this.key = UUID.fromString(record.key());\n    this.headers = new TbQueueMsgHeaders(record.headers());\n    this.data = record.value();\n}", "CodeBleu_score": 42.67385534550532}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    super(UUID.fromString(record.key()));\n    setHeaders(new TbQueueMsgHeaders(record.headers()));\n    setData(record.value());\n}", "CodeBleu_score": 20.331363307917243}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t    super(UUID.fromString(record.key()), new TbQueueMsgHeaders(record.headers()));\n    data = record.value();\n}", "CodeBleu_score": 23.608262350387587}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    return createTransportNotificationsMsgProducer(getTransportNotificationsSettings());\n}", "CodeBleu_score": 11.022431636824342}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    // Create a Kafka producer template using the specified Kafka settings and a client ID based on the service ID.\n    TbKafkaProducerTemplate<TbProtoQueueMsg<ToTransportMsg>> producerTemplate = new TbKafkaProducerTemplate<>(kafkaSettings, serviceId);\n    // Set the default topic name from the transport notification settings.\n    producerTemplate.setDefaultTopic(transportNotificationsSettings.getTopicName());\n    // Set an admin for the producer.\n    producerTemplate.setAdmin(admin);\n    // Create a Kafka producer instance using the producer template.\n    TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> producer = producerTemplate.createProducer();\n    return producer;\n}", "CodeBleu_score": 42.63937224527293}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t    // Build a Kafka producer template using specified Kafka settings, a client ID based on the service ID, and a default topic name from the transport notification settings.\n    TbKafkaProducerTemplate<TbProtoQueueMsg<ToTransportMsg>> kafkaProducerTemplate = TbKafkaProducerTemplate.<TbProtoQueueMsg<ToTransportMsg>>builder()\n            .bootstrapServers(transportNotificationSettings.getKafkaSettings().getBootstrapServers())\n            .clientId(transportNotificationSettings.getKafkaSettings().getClientId() + \"_\" + serviceId)\n            .keySerializer(TbProtobufSerializer.class)\n            .valueSerializer(TbProtobufSerializer.class)\n            .build();\n    // Create a Kafka producer instance.\n    TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> producer = kafkaProducerTemplate.createProducer(transportNotificationSettings.getKafkaSettings().getDefaultTopic());\n    // Set an admin for the producer.\n    producer.setAdmin(transportNotificationSettings.getKafkaSettings().getAdmin());\n    return producer;\n}", "CodeBleu_score": 36.04948477106645}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t", "CodeBleu_score": 3.1900019824609216}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate<TbProtoQueueMsg<ToCoreNotificationMsg>> kafkaConsumerTemplate = new TbKafkaConsumerTemplate<>(\n            kafkaConsumerSettings,\n            kafkaTopic,\n            kafkaClientId,\n            kafkaGroupId\n    );\n    kafkaConsumerTemplate.setMessageDecoder(this::decodeToCoreNotificationsMsg);\n    kafkaConsumerTemplate.setAdmin(kafkaAdmin);\n    kafkaConsumerTemplate.setStatisticsService(kafkaStatisticsService);\n    return kafkaConsumerTemplate;\n}", "CodeBleu_score": 24.829864269826253}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    return new TbKafkaConsumerTemplate<TbProtoQueueMsg<ToCoreNotificationMsg>>()\n        .withTopic(toCoreNotificationsTopic)\n        .withClientId(toCoreNotificationsConsumerClientId)\n        .withGroupId(toCoreNotificationsConsumerGroupId)\n        .withDecoder(new TbProtoQueueMsgDecoder<ToCoreNotificationMsg>())\n        .withAdmin(admin)\n        .withStatisticsService(statisticsService)\n        .build();\n}", "CodeBleu_score": 13.483324140153572}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n        log.info(\"Unsubscribing from all topics\");\n        consumer.unsubscribe();\n    } else {\n        // Create topics if they don't exist\n        for (String topic : topicNames) {\n            if (!topicExists(topic)) {\n                createTopic(topic);\n            }\n        }\n        // Subscribe to the topics\n        consumer.subscribe(topicNames);\n    }\n}", "CodeBleu_score": 58.81098818138788}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n        log.info(\"Unsubscribing from all topics\");\n        consumer.unsubscribe();\n    } else {\n        log.info(\"Subscribing to topics: {}\", topicNames);\n        // Ensure each topic exists by creating it if necessary\n        for (String topicName : topicNames) {\n            try {\n                if (!adminClient.listTopics().names().get().contains(topicName)) {\n                    adminClient.createTopics(Collections.singleton(new NewTopic(topicName, 1, (short) 1)));\n                }\n            } catch (InterruptedException | ExecutionException e) {\n                log.error(\"Failed to create topic: {}\", topicName, e);\n            }\n        }\n        // Subscribe to the provided topics\n        consumer.subscribe(topicNames);\n    }\n}", "CodeBleu_score": 50.738652312200216}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (topicNames.isEmpty()) {\n        log.info(\"Unsubscribing consumer {} from all topics\", consumerId);\n        consumer.unsubscribe();\n    } else {\n        log.info(\"Subscribing consumer {} to topics {}\", consumerId, topicNames);\n        consumer.subscribe(topicNames);\n    }\n}", "CodeBleu_score": 56.10412404891716}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    Stopwatch stopwatch = Stopwatch.createStarted();\n    List<ConsumerRecord<String, byte[]>> records = new ArrayList<>();\n    ConsumerRecords<String, byte[]> consumerRecords = consumer.poll(durationInMillis);\n    stopwatch.stop();\n    logger.info(\"Polled topic {} in {} ms\", topic, stopwatch.elapsed(TimeUnit.MILLISECONDS));\n    if (consumerRecords.count() == 0) {\n        return Collections.emptyList();\n    }\n    consumerRecords.forEach(records::add);\n    return records;\n}", "CodeBleu_score": 45.09179884522096}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    Stopwatch stopwatch = Stopwatch.createStarted();\n    List<ConsumerRecord<String, byte[]>> records = new ArrayList<>();\n    ConsumerRecords<String, byte[]> consumerRecords = consumer.poll(durationInMillis);\n    stopwatch.stop();\n    LOGGER.info(\"Polled {} records from {} in {} ms\", consumerRecords.count(), topic, stopwatch.elapsed(TimeUnit.MILLISECONDS));\n    if (consumerRecords.count() == 0) {\n        return Collections.emptyList();\n    } else {\n        consumerRecords.forEach(records::add);\n        return records;\n    }\n}", "CodeBleu_score": 49.366501951239485}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    Stopwatch stopwatch = Stopwatch.createStarted();\n    log.info(\"Polling topic: {} for {} ms\", topic, durationInMillis);\n    ConsumerRecords<String, byte[]> consumerRecords = consumer.poll(durationInMillis);\n    stopwatch.stop();\n    log.info(\"Polled topic: {} in {} ms\", topic, stopwatch.elapsed(TimeUnit.MILLISECONDS));\n    if (consumerRecords.count() == 0) {\n        return Collections.emptyList();\n    }\n    return consumerRecords.records(topic).stream().collect(Collectors.toList());\n}", "CodeBleu_score": 42.87189537639134}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t        try {\n            String topic = getTopic(ctx, msg);\n            String key = getKey(ctx, msg);\n            publish(ctx, msg, topic, key);\n        } catch (Exception e) {\n            log.error(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, e);\n            ctx.notifyError(e);\n        }\n    }", "CodeBleu_score": 23.432796282448198}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t        try {\n            String topic = topicPattern.getOrDefault(ctx.getSelfId(), \"\");\n            String key = keyPattern.getOrDefault(ctx.getSelfId(), \"\");\n            publish(ctx, msg, topic, key);\n        } catch (Exception e) {\n            log.error(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, e);\n            ctx.notifyError(e);\n        }\n    }", "CodeBleu_score": 24.52876608854661}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t        try {\n            String topicPattern = config.getTopicPattern();\n            String keyPattern = config.getKeyPattern();\n            if (topicPattern == null || topicPattern.isEmpty()) {\n                log.debug(\"[{}] Topic pattern is not configured\", ctx.getSelfId());\n                ctx.notifyError(TB_ERR_TOPIC_PATTERN_NOT_CONFIGURED);\n                return;\n            }\n            if (keyPattern == null || keyPattern.isEmpty()) {\n                log.debug(\"[{}] Key pattern is not configured\", ctx.getSelfId());\n                ctx.notifyError(TB_ERR_KEY_PATTERN_NOT_CONFIGURED);\n                return;\n            }\n            String topic = topicPattern.replace(TB_MSG_TOPIC_PATTERN, msg.getTopic());\n            String key = keyPattern.replace(TB_MSG_KEY_PATTERN, msg.getKey());\n            publish(ctx, msg, topic, key);\n        } catch (Exception e) {\n            log.debug(\"[{}] Failed to process message: {}\", ctx.getSelfId(), msg, e);\n            ctx.notifyError(TB_ERR_PUBLISH_FAILED);\n        }\n    }", "CodeBleu_score": 41.43842205315225}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    if (ctx.getBoolean(\"addMetadataAsHeaders\")) {\n        publishWithHeaders(ctx, msg, topic, key);\n    } else {\n        publishWithoutHeaders(ctx, msg, topic, key);\n    }\n}", "CodeBleu_score": 14.142179751485953}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    if (metadataAsHeaders) {\n        Headers headers = new RecordHeaders();\n        msg.getMetadata().forEach((k, v) -> headers.add(k, v.toString().getBytes()));\n        send(ctx, msg, topic, key, headers);\n    } else {\n        send(ctx, msg, topic, key);\n    }\n}", "CodeBleu_score": 28.212485450194414}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t", "CodeBleu_score": 5.441118430176013}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\t    try {\n        if (producer != null) {\n            producer.close();\n        }\n    } catch (Exception e) {\n        log.error(\"Failed to close Kafka producer\", e);\n    }\n}", "CodeBleu_score": 68.126018294879}, {"code": "public void destroy(){\n\t    if (this.producer != null) {\n        try {\n            this.producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close producer\", e);\n        }\n    }\n}", "CodeBleu_score": 92.47795522928807}, {"code": "public void destroy(){\n\t    if (this.producer != null) {\n        try {\n            this.producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close producer\", e);\n        }\n    }\n}", "CodeBleu_score": 92.47795522928807}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    return TbQueueProducer.<TbProtoQueueMsg<ToRuleEngineMsg>>builder().withKafkaTemplate(TbKafkaTemplate.builder()\n            .withKafkaProperties(kafkaProperties)\n            .withClientId(serviceInfoProvider.getServiceId())\n            .withDefaultTopic(ruleEngineMsgTopic)\n            .withAdmin(true)\n            .build())\n            .build();\n}", "CodeBleu_score": 26.54866392431246}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    return TbKafkaProducerTemplate.builder()\n        .kafkaSettings(kafkaSettings)\n        .clientId(serviceInfoProvider.getServiceId() + \"-rule-engine-msg-producer\")\n        .defaultTopic(kafkaSettings.getRuleEngineTopic())\n        .admin(admin)\n        .build();\n}", "CodeBleu_score": 22.88590977160748}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    KafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> builder = KafkaProducerTemplateBuilder.newBuilder()\n            .withKafkaSettings(kafkaSettings)\n            .withClientId(serviceInfoProvider.getServiceId())\n            .withDefaultTopic(ruleEngineTopic)\n            .withAdmin(kafkaAdmin);\n    return builder.build();\n}", "CodeBleu_score": 40.246449517480066}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\t        if (isStatsPrintRequired()) {\n            ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n            executorService.scheduleWithFixedDelay(this::logConsumerGroupStats, 0, config.getKafkaResponseTimeout(), TimeUnit.MILLISECONDS);\n        }\n    }", "CodeBleu_score": 8.254720240993409}, {"code": "private void startLogScheduling(){\n\t        ScheduledExecutorService executor = Executors.newSingleThreadScheduledExecutor();\n        executor.scheduleWithFixedDelay(() -> {\n            try {\n                if (isStatsPrintRequired()) {\n                    Map<String, List<GroupTopicStats>> groupStats = getGroupStats();\n                    for (Map.Entry<String, List<GroupTopicStats>> entry : groupStats.entrySet()) {\n                        String groupId = entry.getKey();\n                        List<GroupTopicStats> groupTopicStats = entry.getValue();\n                        if (!groupTopicStats.isEmpty()) {\n                            log.info(\"Consumer group {} has lagging topics: {}\", groupId, groupTopicStats);\n                        }\n                    }\n                }\n            } catch (Exception e) {\n                log.warn(\"Failed to get consumer group stats for groupId {}, error: {}\", groupId, e.getMessage(), e);\n            }\n        }, 0, responseTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    }", "CodeBleu_score": 25.61000018171069}, {"code": "private void startLogScheduling(){\n\t        if (isStatsPrintRequired()) {\n            log.info(\"Starting consumer group statistics logging\");\n            ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n            executorService.scheduleWithFixedDelay(this::logConsumerGroupStats, 0,\n                    kafkaConfig.getKafkaResponseTimeout().toMillis(), TimeUnit.MILLISECONDS);\n        }\n    }", "CodeBleu_score": 10.447833089975058}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\t        Properties props = toProps();\n\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n\n        return props;\n    }", "CodeBleu_score": 89.50348007366593}, {"code": "protected Properties toAdminProps(){\n\t        Properties props = toProps();\n\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n\n        return props;\n    }", "CodeBleu_score": 89.50348007366593}, {"code": "protected Properties toAdminProps(){\n\t        Properties props = toProps();\n\n        props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);\n        props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n\n        return props;\n    }", "CodeBleu_score": 89.50348007366593}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tString scopedName = getScopedName(metricName, group);\n\t\tMap<String, String> tags = getTags(group);\n\t\tif (metric instanceof Counter) {\n\t\t\tCounter counter = (Counter) metric;\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags, counter.getCount());\n\t\t\taddedCounterEvents.add(event);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tGauge gauge = (Gauge) metric;\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags, gauge.getValue());\n\t\t\taddedGaugeEvents.add(event);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\tHistogram histogram = (Histogram) metric;\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags, histogram.getCount(), histogram.getMax(), histogram.getMin(), histogram.getMean(), histogram.getStdDev(), histogram.getP50(), histogram.getP75(), histogram.getP95(), histogram.getP98(), histogram.getP99(), histogram.getP999());\n\t\t\taddedHistogramEvents.add(event);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tMeter meter = (Meter) metric;\n\t\t\tMetricEvent event = new MetricEvent(scopedName, tags, meter.getCount(), meter.getMeanRate(), meter.getOneMinuteRate(), meter.getFiveMinuteRate(), meter.getFifteenMinuteRate());\n\t\t\taddedMeterEvents.add(event);\n\t\t} else {\n\t\t\tLOG.warn(\"Metric type {} is not supported.\", metric.getClass().getSimpleName());\n\t\t}\n\t}", "CodeBleu_score": 42.48145879308771}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tMetricEvent event = new MetricEvent(getScopedName(metricName, group), getTags(group));\n\t\tswitch (metric.getType()) {\n\t\t\tcase COUNTER:\n\t\t\t\taddedCounters.add(new MetricWithEvent<>((Counter) metric, event));\n\t\t\t\tbreak;\n\t\t\tcase GAUGE:\n\t\t\t\taddedGauges.add(new MetricWithEvent<>((Gauge) metric, event));\n\t\t\t\tbreak;\n\t\t\tcase HISTOGRAM:\n\t\t\t\taddedHistograms.add(new MetricWithEvent<>((Histogram) metric, event));\n\t\t\t\tbreak;\n\t\t\tcase METER:\n\t\t\t\taddedMeters.add(new MetricWithEvent<>((Meter) metric, event));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tLOG.warn(\"Metric type {} is not supported.\", metric.getType());\n\t\t\t\tbreak;\n\t\t}\n\t}", "CodeBleu_score": 46.994222196353604}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tif (metric instanceof Counter) {\n\t\t\tCounter counter = (Counter) metric;\n\t\t\tMetricEvent event = new MetricEvent(getScopedName(metricName, group), getTags(group));\n\t\t\tcounterEvents.put(counter, event);\n\t\t\tcounter.addListener(event);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tGauge gauge = (Gauge) metric;\n\t\t\tMetricEvent event = new MetricEvent(getScopedName(metricName, group), getTags(group));\n\t\t\tgaugeEvents.put(gauge, event);\n\t\t\tgauge.addListener(event);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\tHistogram histogram = (Histogram) metric;\n\t\t\tMetricEvent event = new MetricEvent(getScopedName(metricName, group), getTags(group));\n\t\t\thistogramEvents.put(histogram, event);\n\t\t\thistogram.addListener(event);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tMeter meter = (Meter) metric;\n\t\t\tMetricEvent event = new MetricEvent(getScopedName(metricName, group), getTags(group));\n\t\t\tmeterEvents.put(meter, event);\n\t\t\tmeter.addListener(event);\n\t\t} else {\n\t\t\tLOG.warn(\"Metric type {} is not supported.\", metric.getClass().getSimpleName());\n\t\t}\n\t}", "CodeBleu_score": 49.10886097175099}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Map<String, Object> fields = metricEvent.getFields();\n    if (fields == null) {\n        fields = new HashMap<>();\n        metricEvent.setFields(fields);\n    }\n    Object value = gauge.getValue();\n    if (value instanceof Number) {\n        fields.put(field, ((Number) value).doubleValue());\n    } else if (value instanceof String) {\n        fields.put(field, value);\n    } else {\n        fields.put(field, value.toString());\n    }\n    return metricEvent;\n}", "CodeBleu_score": 55.13724267763549}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    if (metricEvent == null) {\n        metricEvent = new MetricEvent();\n    }\n    Map<String, Object> fields = metricEvent.getFields();\n    if (fields == null) {\n        fields = new HashMap<String, Object>();\n        metricEvent.setFields(fields);\n    }\n    Object value = gauge.getValue();\n    if (value instanceof Number) {\n        fields.put(field, ((Number) value).doubleValue());\n    } else if (value instanceof String) {\n        fields.put(field, value);\n    } else {\n        fields.put(field, value.toString());\n    }\n    return metricEvent;\n}", "CodeBleu_score": 56.01383575537785}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Map<String, Object> fields = metricEvent.getFields();\n    if (fields == null) {\n        fields = new HashMap<>();\n        metricEvent.setFields(fields);\n    }\n    Object value = gauge.getValue();\n    if (value instanceof Number) {\n        fields.put(field, ((Number) value).doubleValue());\n    } else if (value instanceof String) {\n        fields.put(field, value);\n    } else {\n        fields.put(field, value.toString());\n    }\n    return metricEvent;\n}", "CodeBleu_score": 55.13724267763549}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\t\tMap<String, String> tags = metricEvent.getTags();\n\t\tString topic = tags.get(\"topic\");\n\t\tString partition = tags.get(\"partition\");\n\t\tString groupId = tags.get(\"groupId\");\n\t\tString key = topic + \"_\" + partition + \"_\" + groupId;\n\t\tMap<String, String> values = gauge.getValue().split(\":\");\n\t\tLong currentOffset = Long.parseLong(values[0]);\n\t\tLong dataTimestamp = Long.parseLong(values[1]);\n\t\tLong committedOffset = Long.parseLong(values[2]);\n\t\tLong lag = currentOffset - committedOffset;\n\t\tLong lagTime = timestamp - dataTimestamp;\n\t\tif (kafkaLagTimes.containsKey(key)) {\n\t\t\tif (lagTime > kafkaLagTimes.get(key)) {\n\t\t\t\tkafkaLagTimes.put(key, lagTime);\n\t\t\t\tmetricEvent.setField(\"kafkaLag\", lag);\n\t\t\t\tmetricEvent.setField(\"kafkaLagTime\", lagTime);\n\t\t\t}\n\t\t} else {\n\t\t\tkafkaLagTimes.put(key, lagTime);\n\t\t\tmetricEvent.setField(\"kafkaLag\", lag);\n\t\t\tmetricEvent.setField(\"kafkaLagTime\", lagTime);\n\t\t}\n\t\tmetricEvent.setTimestamp(timestamp);\n\t\treturn metricEvent;\n\t}", "CodeBleu_score": 46.23838564278581}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t", "CodeBleu_score": 2.8929956351891004}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\t\tMap<String, Long> currentOffsets = new HashMap<>();\n\t\tMap<String, Long> committedOffsets = new HashMap<>();\n\t\tMap<String, Long> kafkaLagTimes = metricEvent.getKafkaLagTimes();\n\t\tfor (Map.Entry<String, String> entry : gauge.getTags().entrySet()) {\n\t\t\tString key = entry.getKey();\n\t\t\tString value = entry.getValue();\n\t\t\tif (key.equals(\"topic\")) {\n\t\t\t\tcurrentOffsets.put(value, Long.parseLong(value.substring(value.lastIndexOf(\"_\") + 1)));\n\t\t\t} else if (key.equals(\"partition\")) {\n\t\t\t\tcommittedOffsets.put(value, Long.parseLong(value.substring(value.lastIndexOf(\"_\") + 1)));\n\t\t\t}\n\t\t}\n\t\tmetricEvent.setCurrentOffsets(currentOffsets);\n\t\tmetricEvent.setCommittedOffsets(committedOffsets);\n\t\tmetricEvent.setTimestamp(timestamp);\n\t\tfor (Map.Entry<String, Long> entry : currentOffsets.entrySet()) {\n\t\t\tString topic = entry.getKey();\n\t\t\tLong currentOffset = entry.getValue();\n\t\t\tif (kafkaLagTimes.containsKey(topic)) {\n\t\t\t\tLong previousOffset = kafkaLagTimes.get(topic);\n\t\t\t\tif (currentOffset.equals(previousOffset)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tkafkaLagTimes.put(topic, currentOffset);\n\t\t}\n\t\tmetricEvent.setKafkaLagTimes(kafkaLagTimes);\n\t\treturn metricEvent;\n\t}", "CodeBleu_score": 33.80734048761413}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t        ParameterTool parameterTool = (ParameterTool) env.getConfig().getGlobalJobParameters();\n        Properties props = buildKafkaProps(parameterTool);\n        FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricEventSchema(), props);\n        if (time != null) {\n            Map<KafkaTopicPartition, Long> offsetByTime = buildOffsetByTime(props, parameterTool, time);\n            consumer.setStartFromSpecificOffsets(offsetByTime);\n        }\n        return env.addSource(consumer);\n    }", "CodeBleu_score": 80.90680236792241}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t        ParameterTool parameterTool = (ParameterTool) env.getConfig().getGlobalJobParameters();\n        Properties props = buildKafkaProps(parameterTool);\n        if (time != null) {\n            Map<KafkaTopicPartition, Long> offsetByTime = buildOffsetByTime(props, parameterTool, time);\n            return env.addSource(new FlinkKafkaConsumer<>(topic, new MetricEventDeserializationSchema(), props))\n                    .setParallelism(parameterTool.getInt(PropertiesConstants.KAFKA_CONSUMER_PARALLELISM, 1))\n                    .assignTimestampsAndWatermarks(new MetricEventWatermarkStrategy())\n                    .name(\"KafkaSource\")\n                    .uid(\"KafkaSource\")\n                    .setStartOffsets(offsetByTime);\n        }\n        return env.addSource(new FlinkKafkaConsumer<>(topic, new MetricEventDeserializationSchema(), props))\n                .setParallelism(parameterTool.getInt(PropertiesConstants.KAFKA_CONSUMER_PARALLELISM, 1))\n                .assignTimestampsAndWatermarks(new MetricEventWatermarkStrategy())\n                .name(\"KafkaSource\")\n                .uid(\"KafkaSource\");\n    }", "CodeBleu_score": 63.21261691660103}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t        ParameterTool parameterTool = (ParameterTool) env.getConfig().getGlobalJobParameters();\n        Properties props = buildKafkaProps(parameterTool);\n        if (time != null) {\n            Map<KafkaTopicPartition, Long> offsetByTime = buildOffsetByTime(props, parameterTool, time);\n            return env.addSource(new FlinkKafkaConsumer<>(topic, new MetricEventDeserializationSchema(), props)).assignTimestampsAndWatermarks(new MetricEventTimestampExtractor()).startFromSpecificOffsets(offsetByTime);\n        }\n        return env.addSource(new FlinkKafkaConsumer<>(topic, new MetricEventDeserializationSchema(), props)).assignTimestampsAndWatermarks(new MetricEventTimestampExtractor());\n    }", "CodeBleu_score": 64.7083007959234}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String consumerGroupId = \"consumer-group-\" + time;\n    props.put(ConsumerConfig.GROUP_ID_CONFIG, consumerGroupId);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    Map<TopicPartition, Long> timeToOffsets = new HashMap<>();\n    List<String> topics = parameterTool.getList(\"kafka.topic.list\", Collections.emptyList());\n    consumer.partitionsFor(topics.get(0)).forEach(partition -> timeToOffsets.put(partition, time));\n    Map<KafkaTopicPartition, Long> partitionToOffsets = consumer.offsetsForTimes(timeToOffsets);\n    consumer.close();\n    return partitionToOffsets;\n}", "CodeBleu_score": 40.02706721231375}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    props.setProperty(\"group.id\", \"buildOffsetByTime\" + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    Map<KafkaTopicPartition, Long> partitionOffsets = new HashMap<>();\n    Map<KafkaTopicPartition, Long> partitionTimes = new HashMap<>();\n    String topic = parameterTool.get(\"topic\");\n    consumer.partitionsFor(topic).forEach(partition -> {\n        partitionTimes.put(new KafkaTopicPartition(topic, partition), time);\n    });\n    consumer.offsetsForTimes(partitionTimes);\n    consumer.assignment().forEach(partition -> {\n        KafkaTopicPartition kafkaTopicPartition = new KafkaTopicPartition(topic, partition.partition());\n        Long offset = consumer.committed(kafkaTopicPartition);\n        partitionOffsets.put(kafkaTopicPartition, offset);\n    });\n    consumer.close();\n    return partitionOffsets;\n}", "CodeBleu_score": 47.320057365392984}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    props.put(ConsumerConfig.GROUP_ID_CONFIG, \"buildOffsetByTime-\" + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<TopicPartition> partitions = consumer.partitionsFor(parameterTool.get(\"topic\"));\n    Map<TopicPartition, Long> timestampsToSearch = partitions.stream().collect(Collectors.toMap(Function.identity(), p -> time));\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(timestampsToSearch);\n    Map<KafkaTopicPartition, Long> partitionOffsets = offsets.entrySet().stream().collect(Collectors.toMap(e -> KafkaTopicPartition.of(e.getKey().topic(), e.getKey().partition()), e -> e.getValue().offset()));\n    consumer.close();\n    return partitionOffsets;\n}", "CodeBleu_score": 45.069577825158255}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties props = new Properties();\n    props.put(\"bootstrap.servers\", \"localhost:9092\");\n    props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    MetricEvent event = new MetricEvent();\n    event.setTimestamp(System.currentTimeMillis());\n    event.setName(\"test_metric\");\n    event.setTags(Arrays.asList(\"tag1\", \"tag2\"));\n    event.setFields(Arrays.asList(new Field(\"field1\", 1.0), new Field(\"field2\", 2.0)));\n\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"test_topic\", event.toString());\n    producer.send(record);\n    System.out.println(\"Sent data: \" + event);\n    producer.flush();\n}", "CodeBleu_score": 48.313873412875616}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties props = new Properties();\n    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n\n    KafkaProducer<String, String> producer = new KafkaProducer<>(props);\n\n    MetricEvent metricEvent = new MetricEvent();\n    metricEvent.setTimestamp(System.currentTimeMillis());\n    metricEvent.setName(\"test_metric\");\n    metricEvent.setTags(Arrays.asList(\"tag1\", \"tag2\"));\n    metricEvent.setFields(Arrays.asList(new Field(\"field1\", 1), new Field(\"field2\", 2.0)));\n\n    ProducerRecord<String, String> record = new ProducerRecord<>(\"test_topic\", metricEvent.toString());\n    producer.send(record);\n    producer.flush();\n\n    System.out.println(\"Sent data: \" + metricEvent.toString());\n}", "CodeBleu_score": 44.88338588129622}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t    Properties props = new Properties();\n    props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\");\n    props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, \"org.apache.kafka.common.serialization.StringSerializer\");\n    props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, \"io.confluent.kafka.serializers.KafkaAvroSerializer\");\n    props.put(\"schema.registry.url\", \"http://localhost:8081\");\n\n    KafkaProducer<String, MetricEvent> producer = new KafkaProducer<>(props);\n\n    MetricEvent metricEvent = new MetricEvent();\n    metricEvent.setTimestamp(System.currentTimeMillis());\n    metricEvent.setName(\"metric_name\");\n    metricEvent.setTags(new HashMap<>());\n    metricEvent.setFields(new HashMap<>());\n\n    ProducerRecord<String, MetricEvent> record = new ProducerRecord<>(\"topic_name\", metricEvent);\n\n    producer.send(record, (metadata, exception) -> {\n        if (exception != null) {\n            System.out.println(\"Error sending data to Kafka: \" + exception.getMessage());\n        } else {\n            System.out.println(\"Sent data to Kafka: \" + record.value());\n        }\n    });\n\n    producer.flush();\n}", "CodeBleu_score": 46.05760136122666}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t        try {\n            if (event.getLevel().isMoreSpecificThan(LogLevel.toLog4jLevel(level)) && !event.getLoggerName().contains(excludeLoggerName)) {\n                kafkaProducer.send(new ProducerRecord<>(topic, subAppend(event)));\n            }\n        } catch (Exception e) {\n            log.warn(\"Failed to send log event to Kafka: {}\", e.getMessage());\n        }\n    }", "CodeBleu_score": 45.17548763204612}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t        if (event.getLevel().isMoreSpecificThan(level) && !event.getLoggerName().contains(\"xxx\")) {\n            try {\n                producer.send(new ProducerRecord<>(topic, subAppend(event)));\n            } catch (Exception e) {\n                log.warn(\"Error sending log event to Kafka: {}\", e.getMessage());\n            }\n        }\n    }", "CodeBleu_score": 45.03942456644964}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t        try {\n            if (event.getLevel().isMoreSpecificThan(Level.toLevel(level)) && !event.getLoggerName().contains(exclude)) {\n                String message = subAppend(event);\n                producer.send(new ProducerRecord<>(topic, message));\n            }\n        } catch (Exception e) {\n            log.warn(\"Error sending log to kafka\", e);\n        }\n    }", "CodeBleu_score": 52.132811630363584}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\n\t\t\"random\",\n\t\t\"uuid\",\n\t\t\"increment\",\n\t\t\"timestamp\",\n\t\t\"hash\",\n\t}\n\tfor _, m := range validMethods {\n\t\tif method == m {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 72.64300262366703}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"hash\", \"random\"}\n\tfor _, validMethod := range validMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 81.14949333235522}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tvalidMethods := []string{\"mqtt\", \"http\"}\n\n\tfor _, validMethod := range validMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\treturn fmt.Errorf(\"unknown topic suffix method: %s\", method)\n}", "CodeBleu_score": 81.31824576691707}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tswitch k.RoutingKey {\n\tcase \"random\":\n\t\treturn uuid.New().String(), nil\n\tcase \"\":\n\t\treturn \"\", fmt.Errorf(\"routingKey is empty\")\n\tdefault:\n\t\tif value, ok := metric.Tags()[k.RoutingTag]; ok {\n\t\t\treturn value, nil\n\t\t}\n\t\treturn k.RoutingKey, nil\n\t}\n}", "CodeBleu_score": 45.66070546075092}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t    if k.RoutingTag != \"\" {\n        if value, ok := metric.Tags()[k.RoutingTag]; ok {\n            return value, nil\n        }\n    }\n\n    if k.RoutingKey == \"random\" {\n        return uuid.New().String(), nil\n    }\n\n    return k.RoutingKey, nil\n}", "CodeBleu_score": 58.349839379498604}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\troutingKey := k.RoutingKey\n\n\tif routingKey == \"random\" {\n\t\troutingKey = uuid.NewV4().String()\n\t}\n\n\tfor _, tag := range metric.TagList() {\n\t\tif tag.Key == k.RoutingTag {\n\t\t\troutingKey = tag.Value\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn routingKey, nil\n}", "CodeBleu_score": 38.43872350186697}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(topicRegexp)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"failed to compile topic regexp %s: %v\", topicRegexp, err)\n\t\t}\n\t\tk.regexps[i] = regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 58.39601748871135}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(topicRegexp)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error compiling topic regexp %q: %v\", topicRegexp, err)\n\t\t}\n\t\tk.regexps[i] = regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 58.478993859371585}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]*regexp.Regexp, len(k.TopicRegexps))\n\tfor i, topicRegexp := range k.TopicRegexps {\n\t\tregexp, err := regexp.Compile(topicRegexp)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error compiling topic regexp %s: %v\", topicRegexp, err)\n\t\t}\n\t\tk.regexps[i] = regexp\n\t}\n\treturn nil\n}", "CodeBleu_score": 58.43510501344098}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\n\tmsg, ok := h.undelivered[track.ID]\n\tif !ok {\n\t\treturn\n\t}\n\n\tmsg.MarkAsDelivered(h.session)\n\tdelete(h.undelivered, track.ID)\n\th.semaphore <- struct{}{}\n}", "CodeBleu_score": 46.71273057765916}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\n\tmsg, ok := h.undelivered[track.DeliveryID]\n\tif !ok {\n\t\treturn\n\t}\n\n\tmsg.Delivered = true\n\th.session.MarkMessage(msg, \"\")\n\tdelete(h.undelivered, track.DeliveryID)\n\th.semaphore <- struct{}{}\n}", "CodeBleu_score": 49.120904220960924}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.Lock()\n\tdefer h.Unlock()\n\n\tmsg, ok := h.undelivered[track.DeliveryID]\n\tif !ok {\n\t\treturn\n\t}\n\n\tmsg.MarkAsDelivered()\n\tdelete(h.undelivered, track.DeliveryID)\n\th.semaphore.Release(1)\n}", "CodeBleu_score": 42.66761316121289}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\n\th.logger.Info(\"start to consume\")\n\n\tfor {\n\t\tselect {\n\t\tcase message := <-claim.Messages():\n\t\t\th.logger.Info(\"receive message\", zap.String(\"value\", string(message.Value)))\n\t\t\tsession.MarkMessage(message, \"\")\n\n\t\t\tif err := h.handler(message); err != nil {\n\t\t\t\treturn err\n\t\t\t}\n\n\t\tcase <-session.Context().Done():\n\t\t\treturn nil\n\t\t}\n\t}\n}", "CodeBleu_score": 47.563322217818374}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx := session.Context()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn nil\n\t\tcase message, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\th.handleMessage(message, session)\n\t\t}\n\t}\n}", "CodeBleu_score": 42.54831508170476}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\n\tctx := session.Context()\n\n\tfor {\n\n\t\tselect {\n\n\t\tcase <-ctx.Done():\n\n\t\t\treturn nil\n\n\t\tcase msg, ok := <-claim.Messages():\n\n\t\t\tif !ok {\n\n\t\t\t\treturn nil\n\n\t\t\t}\n\n\t\t\th.handleMessage(msg, session)\n\n\t\t\tsession.MarkMessage(msg, \"\")\n\n\t\t}\n\n\t}\n\n}", "CodeBleu_score": 54.082434820901526}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\t  checkCondition(logkafka_id.length > 0, IllegalEmptyLogkafkaId)\n  checkCondition(logkafka_id != \".\", IllegalDotLogkafkaId)\n  checkCondition(logkafka_id != \"..\", IllegalDoubleDotLogkafkaId)\n  checkCondition(logkafka_id.length <= 64, IllegalLongLogkafkaId)\n  checkCondition(!logkafka_id.contains(\".\"), IllegalDotLogkafkaId)\n  checkCondition(!logkafka_id.contains(\"/\"), IllegalSlashLogkafkaId)\n  checkCondition(!logkafka_id.contains(\"..\"), IllegalDoubleDotLogkafkaId)\n  checkCondition(logkafka_id.matches(\"^[a-zA-Z0-9_.-]*$\"), IllegalCharacterInLogkafkaId)\n}", "CodeBleu_score": 48.10928859022575}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t  checkCondition(!logkafka_id.isEmpty, IllegalLogkafkaIdEmpty)\n  checkCondition(!logkafka_id.equals(\".\"), IllegalLogkafkaIdEqualsDot)\n  checkCondition(!logkafka_id.equals(\"..\"), IllegalLogkafkaIdEqualsDotDot)\n  checkCondition(logkafka_id.length <= 128, IllegalLogkafkaIdLength)\n  checkCondition(logkafka_id.matches(\"^[a-zA-Z0-9-_]*$\"), IllegalCharacterInLogkafkaId)\n}", "CodeBleu_score": 43.84713249710603}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t  checkCondition(logkafka_id != null, IllegalNullLogkafkaId)\n  checkCondition(logkafka_id != \".\", IllegalEmptyLogkafkaId)\n  checkCondition(logkafka_id != \"..\", IllegalEmptyLogkafkaId)\n  checkCondition(logkafka_id.length <= LogkafkaIdMaxLength, IllegalLengthLogkafkaId)\n  checkCondition(logkafka_id.matches(\"^[a-zA-Z0-9_.-]+$\"), IllegalCharacterInLogkafkaId)\n}", "CodeBleu_score": 41.15974286720476}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t\n    val f = Future {\n      try {\n        kafkaManagerActor ? msg\n      } catch {\n        case e: Throwable =>\n          logger.error(s\"Exception caught in tryWithKafkaManagerActor: ${e.getMessage}\")\n          ApiError.internalServerError(e.getMessage)\n      }\n    }\n\n    f.flatMap {\n      case ApiError(error) =>\n        logger.error(s\"Error in tryWithKafkaManagerActor: $error\")\n        Future.successful(ApiError.internalServerError(error))\n\n      case response =>\n        response.map {\n          case output: Output =>\n            try {\n              Future.successful(ApiError.ok(fn(output)))\n            } catch {\n              case e: Throwable =>\n                logger.error(s\"Exception caught in tryWithKafkaManagerActor: ${e.getMessage}\")\n                Future.successful(ApiError.internalServerError(e.getMessage))\n            }\n        }\n    }\n  }", "CodeBleu_score": 27.787229107353422}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val response = kafkaManagerActor.ask(msg)\n    response.mapTo[ApiError \\/ Output]\n      .recoverWith {\n        case NonFatal(e) =>\n          logger.error(s\"Error in $tag\", e)\n          Future.successful(ApiError.InternalError(e.getMessage))\n      }\n      .map {\n        case ApiError.InternalError(msg) =>\n          ApiError.InternalError(msg)\n        case ApiError.InvalidRequest(msg) =>\n          ApiError.InvalidRequest(msg)\n        case ApiError.NotFound(msg) =>\n          ApiError.NotFound(msg)\n        case ApiError.Unauthorized(msg) =>\n          ApiError.Unauthorized(msg)\n        case ApiError.Unauthenticated(msg) =>\n          ApiError.Unauthenticated(msg)\n        case ApiError.Forbidden(msg) =>\n          ApiError.Forbidden(msg)\n        case ApiError.ServiceUnavailable(msg) =>\n          ApiError.ServiceUnavailable(msg)\n        case ApiError.Unknown(msg) =>\n          ApiError.Unknown(msg)\n        case output =>\n          fn(output)\n      }\n      .recover {\n        case e: Throwable =>\n          logger.error(s\"Error in $tag\", e)\n          ApiError.InternalError(e.getMessage)\n      }\n  }", "CodeBleu_score": 35.008175564020405}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val future = KafkaManagerActor.ask(msg)\n\n    future.map {\n      case Success(output) =>\n        try {\n          fn(output).right\n        } catch {\n          case e: Exception =>\n            log.error(s\"${e.getMessage}\", e)\n            ApiError.internalServerError(e.getMessage).left\n        }\n      case Failure(e) =>\n        log.error(s\"${e.getMessage}\", e)\n        ApiError.internalServerError(e.getMessage).left\n    }\n  }", "CodeBleu_score": 33.63180659006589}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val response = kafkaManagerActor ? msg\n    response.mapTo[ApiError \\/ Output]\n      .recover {\n        case t: Throwable =>\n          ApiError.fromThrowable(t)\n      }\n      .flatMap {\n        case ApiError(_, _, _) =>\n          Future.successful(ApiError.fromThrowable(t))\n        case output =>\n          fn(output)\n      }\n  }", "CodeBleu_score": 46.74561790131866}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val kafkaManagerActor: ActorRef = context.actorOf(KafkaManagerActor.props, \"kafka-manager-actor\")\n    kafkaManagerActor.ask(msg).mapTo[ApiError \\/ Output]\n      .recoverWith {\n      case throwable: Throwable =>\n        Future.successful(ApiError.fromThrowable(throwable))\n    }.flatMap {\n      case ApiError.fromThrowable(throwable) =>\n        Future.successful(ApiError.fromThrowable(throwable))\n      case ApiError.fromStatusCode(statusCode) =>\n        Future.successful(ApiError.fromStatusCode(statusCode))\n      case ApiError.fromString(error) =>\n        Future.successful(ApiError.fromString(error))\n      case output =>\n        fn(output)\n    }\n  }", "CodeBleu_score": 25.559029436121193}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val f = KafkaManagerActor.receive\n    f.map {\n      case r: Output => fn(r)\n      case e: ActorErrorResponse => Future.successful(ApiError(e.error))\n      case t: Throwable => Future.failed(ApiError(t.getMessage))\n    }\n  }", "CodeBleu_score": 43.65171094277555}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val request = KMClusterCommandRequest(clusterName, KMClusterCommand.PreferredLeaderElection(topics))\n    sendCommand(request)\n  }", "CodeBleu_score": 17.071319910818453}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val request = KMClusterCommandRequest(clusterName, PreferredLeaderElection(topics))\n    kafkaManagerActor.ask(request).mapTo[ApiError \\/ ClusterContext]\n  }", "CodeBleu_score": 21.175092631855268}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val request = KMClusterCommandRequest(clusterName, KMCommand.PreferredLeaderElection(topics))\n    kafkaManagerActor ? request\n  }", "CodeBleu_score": 17.11780404634585}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t    implicit val ec = apiExecutionContext\n    getTopicList(clusterName).flatMap {\n      case -\\/(err) => Future.successful(err)\n      case \\/-(topicList) =>\n        val topics = topicList.topics.map(_.name).toSet\n        runPreferredLeaderElection(clusterName, topics)\n    }\n  }", "CodeBleu_score": 62.84896733487395}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t    implicit val ec = apiExecutionContext\n    getTopicList(clusterName).flatMap {\n      case -\\/(err) => Future.successful(-\\/(err))\n      case \\/-(tl) =>\n        val topicList = tl.topics.map(_.name)\n        runPreferredLeaderElection(clusterName, topicList.toSet)\n    }\n  }", "CodeBleu_score": 65.66992557081461}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t    implicit val ec = apiExecutionContext\n    getTopicList(clusterName).flatMap {\n      case -\\/(error) => Future.successful(Left(error))\n      case \\/-(topicList) =>\n        val topicNames = topicList.topics.map(_.name)\n        runPreferredLeaderElection(clusterName, topicNames)\n    }\n  }", "CodeBleu_score": 62.347976946276816}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  implicit val ec = apiExecutionContext\n  val request = KMClusterCommandRequest(clusterName, CMManualPartitionAssignments(assignments))\n  val fut = system.actorSelection(kafkaManagerActor).ask(request)\n  fut.map {\n    case err: ActorErrorResponse => -\\/(ApiError.from(err))\n    case _: CMManualPartitionAssignments => \\/-(true)\n  }.recover { case t: Throwable => -\\/(ApiError.fromThrowable(t)) }\n}", "CodeBleu_score": 34.14644053259306}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  val request = KMClusterCommandRequest(\n    clusterName,\n    CMManualPartitionAssignments(assignments.map {\n      case (topic, assignments) =>\n        (topic, assignments.map {\n          case (brokerId, partitions) =>\n            (brokerId, partitions.toArray)\n        }.toMap)\n    }.toMap)\n  )\n  val result = tryWithKafkaManagerActor(request)(_.result)\n  result.map {\n    case IndexedSeq() => Success\n    case IndexedSeq(error) => Failure(error)\n  }\n}", "CodeBleu_score": 26.27954089084866}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t  val request = CMManualPartitionAssignments(clusterName, assignments)\n  tryWithKafkaManagerActor(request)(_.result)\n}", "CodeBleu_score": 8.23894914249827}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    // Describe the cluster to get the available nodes\n    DescribeClusterResult describeClusterResult = admin.describeCluster();\n    try {\n        // Wait for the nodes to become available\n        describeClusterResult.nodes().get(10, TimeUnit.SECONDS);\n    } catch (TimeoutException e) {\n        // If no nodes are available, throw a ConnectException\n        throw new ConnectException(\"No nodes available in the cluster\");\n    }\n    // Get the first node's ID\n    Node node = describeClusterResult.nodes().get(0);\n    // Get the configuration of the broker\n    Config config = admin.describeConfigs(Collections.singleton(new ConfigResource(ConfigResource.Type.BROKER, node.idString()))).all().get(10, TimeUnit.SECONDS);\n    // If no configurations are received, throw another ConnectException\n    if (config.entries().isEmpty()) {\n        throw new ConnectException(\"No configuration received for broker \" + node.idString());\n    }\n    // Return the broker's configuration\n    return config;\n}", "CodeBleu_score": 49.00455225779772}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    // Describe the cluster to get the available nodes within a specified timeout\n    Collection<Node> nodes = admin.describeCluster().nodes().get(10, TimeUnit.SECONDS);\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"No nodes available in cluster\");\n    }\n    // Select the first node's ID and request its configuration\n    Node node = nodes.iterator().next();\n    Config config = admin.describeConfigs(Collections.singleton(node.id())).all().get(10, TimeUnit.SECONDS);\n    if (config.isEmpty()) {\n        throw new ConnectException(\"No configuration available for node \" + node.id());\n    }\n    // Return the broker's configuration\n    return config.get(node.id());\n}", "CodeBleu_score": 48.02426928131165}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    // Describe the cluster to get the available nodes within a specified timeout\n    DescribeClusterResult describeClusterResult = admin.describeCluster();\n    Cluster cluster = describeClusterResult.cluster();\n    Set<Node> nodes = cluster.nodes();\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"No nodes available in the cluster\");\n    }\n    // Select the first node's ID and request its configuration\n    int nodeId = nodes.iterator().next().id();\n    ConfigsResult configsResult = admin.describeConfigs(Collections.singleton(new ConfigResource(ConfigResource.Type.BROKER, nodeId)));\n    Config config = configsResult.all().get(0).config();\n    if (config == null) {\n        throw new ConnectException(\"No configuration found for broker \" + nodeId);\n    }\n    // Return the broker's configuration\n    return config;\n}", "CodeBleu_score": 56.30962600722965}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\t    return new Validator() {\n        @Override\n        public int validate(final Configuration configuration) {\n            return configuration.getSchemaHistory() == SchemaHistory.KafkaSchemaHistory ? validator.validate(configuration) : 0;\n        }\n    };\n}", "CodeBleu_score": 24.3275587321969}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return new Validator() {\n        @Override\n        public int validate(final Configuration configuration) {\n            if (KafkaSchemaHistory.isEnabled(configuration)) {\n                return validator.validate(configuration);\n            } else {\n                return 0;\n            }\n        }\n    };\n}", "CodeBleu_score": 23.11128260129073}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return new Validator() {\n        @Override\n        public int validate(final Config config) {\n            if (config.getSchemaHistory() == KafkaSchemaHistory) {\n                return validator.validate(config);\n            }\n            return 0;\n        }\n    };\n}", "CodeBleu_score": 24.93663871434449}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    Version currentVersion = parseVersion(getConnectVersion());\n    if (currentVersion.compareTo(TOPIC_CREATION_ENABLE_VERSION) < 0) {\n        return true;\n    }\n    if (config.containsKey(TOPIC_CREATION_ENABLE_PROPERTY)) {\n        return config.get(TOPIC_CREATION_ENABLE_PROPERTY).equals(true);\n    }\n    return true;\n}", "CodeBleu_score": 26.158212742521602}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    if (topicCreationEnabled != null) {\n        return topicCreationEnabled;\n    }\n    Version version = parseVersion(config.get(KafkaConnectVersion.VERSION_CONFIG));\n    boolean enabled = true;\n    if (version.compareTo(parseVersion(\"0.10.1.0\")) < 0) {\n        enabled = false;\n    }\n    else if (version.compareTo(parseVersion(\"0.11.0.0\")) < 0) {\n        enabled = config.getOrDefault(KafkaConnectVersion.TOPIC_CREATION_ENABLE_CONFIG, true).equals(true);\n    }\n    topicCreationEnabled = enabled;\n    return enabled;\n}", "CodeBleu_score": 38.47267821574923}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    // Check if topic creation is enabled\n    if (this.topicCreationEnabled == null) {\n        // Check if topic creation is enabled\n        String topicCreationEnabledStr = config.get(TOPIC_CREATION_ENABLE_CONFIG);\n        if (topicCreationEnabledStr != null) {\n            this.topicCreationEnabled = Boolean.parseBoolean(topicCreationEnabledStr);\n        } else {\n            this.topicCreationEnabled = true;\n        }\n    }\n    return this.topicCreationEnabled;\n}", "CodeBleu_score": 33.15513852907952}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    final String clientId = config.get(\"client.id\");\n    final Properties adminProperties = new Properties();\n    adminProperties.putAll(config);\n    adminProperties.put(\"client.id\", clientId);\n    final SharedTopicAdmin sharedAdmin = new SharedTopicAdmin(adminProperties);\n    return new KafkaOffsetBackingStore(sharedAdmin, clientId, converterForOffsetStore());\n}", "CodeBleu_score": 28.302065969971324}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    if (config == null) {\n        throw new IllegalArgumentException(\"Configuration map must not be null\");\n    }\n    String clientId = config.get(\"client.id\");\n    if (clientId == null) {\n        throw new IllegalArgumentException(\"client.id is a mandatory configuration option\");\n    }\n    Properties adminProps = new Properties();\n    adminProps.putAll(config);\n    adminProps.remove(\"client.id\");\n    adminProps.remove(\"offset.store.converter\");\n    adminProps.remove(\"offset.store.converter.schemas.enable\");\n    SharedTopicAdmin admin = new SharedTopicAdmin(adminProps);\n    Converter converter = converterForOffsetStore();\n    return new KafkaOffsetBackingStore(admin, clientId, converter);\n}", "CodeBleu_score": 32.94926214874808}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t        if (config == null || config.isEmpty()) {\n            throw new IllegalArgumentException(\"Configuration map cannot be null or empty\");\n        }\n\n        String clientId = config.get(\"client.id\");\n        if (clientId == null) {\n            throw new IllegalArgumentException(\"client.id is a mandatory configuration option\");\n        }\n\n        Properties adminProps = new Properties();\n        adminProps.put(\"bootstrap.servers\", config.get(\"bootstrap.servers\"));\n        adminProps.put(\"client.id\", clientId);\n        adminProps.put(\"request.timeout.ms\", config.get(\"request.timeout.ms\"));\n        adminProps.put(\"retry.backoff.ms\", config.get(\"retry.backoff.ms\"));\n\n        SharedTopicAdmin sharedAdmin = new SharedTopicAdmin(adminProps);\n        return new KafkaOffsetBackingStore(sharedAdmin, clientId, converterForOffsetStore());\n    }", "CodeBleu_score": 41.55753027558743}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\t    // Check if the node is an object\n    if (node.isObject()) {\n        // Extract the payload field if present\n        JsonNode payload = node.get(PAYLOAD_FIELD);\n        if (payload != null) {\n            node = payload;\n        }\n\n        // Determine if the key is simple or composite\n        Iterator<String> fieldNames = node.fieldNames();\n        if (fieldNames.hasNext()) {\n            // Simple key\n            String fieldName = fieldNames.next();\n            return reader.readValue(node.get(fieldName), type);\n        } else {\n            // Composite key\n            return reader.readValue(node, type);\n        }\n    }\n\n    // Simple key\n    return reader.readValue(node, type);\n}", "CodeBleu_score": 46.33958198139075}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (node.isObject()) {\n        JsonNode payload = node.get(PAYLOAD_FIELD);\n        if (payload != null) {\n            node = payload;\n        }\n    }\n    if (node.isObject()) {\n        Iterator<String> fieldNames = node.fieldNames();\n        if (fieldNames.hasNext()) {\n            String fieldName = fieldNames.next();\n            if (fieldNames.hasNext()) {\n                return reader.readValue(node);\n            }\n            else {\n                return reader.readValue(node.get(fieldName));\n            }\n        }\n    }\n    return reader.readValue(node);\n}", "CodeBleu_score": 50.7750191203254}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    // Debezium envelope\n    if (config.asEnvelope()) {\n        return reader.readValue(node);\n    }\n    // Extracted format\n    else if (node.has(Envelope.FieldName.KEY)) {\n        return reader.readValue(node.get(Envelope.FieldName.KEY));\n    }\n    // Schema + payload format\n    else if (node.has(PAYLOAD_FIELD)) {\n        node = node.get(PAYLOAD_FIELD);\n    }\n\n    // Simple key\n    if (node.isObject()) {\n        Iterator<String> fieldNames = node.fieldNames();\n        if (fieldNames.hasNext()) {\n            String fieldName = fieldNames.next();\n            if (!fieldNames.hasNext()) {\n                return reader.readValue(node.get(fieldName));\n            }\n        }\n    }\n    // Composite key\n    return reader.readValue(node);\n}", "CodeBleu_score": 54.3263544565636}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t        String topicName = topicNameFor(id, prefix, delimiter);\n        return sanitizeTopicName(topicName);\n    }", "CodeBleu_score": 10.1980996233483}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t        String topicName = topicNameFor(id, prefix, delimiter);\n        if (topicName.isEmpty()) {\n            return topicName;\n        }\n        StringBuilder sanitizedTopicName = new StringBuilder();\n        boolean replaced = false;\n        for (char c : topicName.toCharArray()) {\n            if (isValidTopicNameCharacter(c)) {\n                sanitizedTopicName.append(c);\n            } else {\n                sanitizedTopicName.append(replacementCharacter);\n                replaced = true;\n            }\n        }\n        if (replaced) {\n            logger.warn(\"Topic name '{}' contains invalid characters and has been replaced with '{}'\", topicName, sanitizedTopicName.toString());\n        }\n        return sanitizedTopicName.toString();\n    }", "CodeBleu_score": 47.13175032152195}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t        String topicName = topicNameFor(id, prefix, delimiter);\n        if (topicName.isEmpty()) {\n            return topicName;\n        }\n        StringBuilder sb = new StringBuilder();\n        boolean changed = false;\n        for (int i = 0; i < topicName.length(); i++) {\n            char c = topicName.charAt(i);\n            if (isValidTopicNameCharacter(c)) {\n                sb.append(c);\n            } else {\n                changed = true;\n                sb.append(replacementCharacter);\n            }\n        }\n        if (changed) {\n            logger.warn(\"Invalid topic name character(s) replaced: {}\", topicName);\n        }\n        return sb.toString();\n    }", "CodeBleu_score": 52.83473286137897}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.replacedErrorHandler = replacedErrorHandler;\n    this.retries = replacedErrorHandler == null ? 0 : replacedErrorHandler.getRetries();\n}", "CodeBleu_score": 44.06419961486565}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.replacedErrorHandler = replacedErrorHandler;\n    this.retries = replacedErrorHandler == null ? 0 : replacedErrorHandler.getRetries();\n    this.maxRetries = connectorConfig.getInt(MAX_RETRIES_CONFIG);\n    if (maxRetries < 0) {\n        maxRetries = Integer.MAX_VALUE;\n    }\n}", "CodeBleu_score": 51.57372999464099}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t    this.connectorType = connectorType;\n    this.connectorConfig = connectorConfig;\n    this.queue = queue;\n    this.replacedErrorHandler = replacedErrorHandler;\n    this.retries = replacedErrorHandler != null ? replacedErrorHandler.getRetries() : -1;\n}", "CodeBleu_score": 44.53447053923605}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    Map<String, ConfigValue> validations = configuration.validate(fields);\n    for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n        if (!entry.getValue().errorMessages().isEmpty()) {\n            final ConfigValue value = entry.getValue();\n            throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 88.74964024398695}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    Map<String, ConfigValue> validations = configuration.validate(fields);\n    for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n        if (!entry.getValue().errorMessages().isEmpty()) {\n            final ConfigValue value = entry.getValue();\n            throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 88.74964024398695}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    Map<String, ConfigValue> validations = configuration.validate(fields);\n    for (Map.Entry<String, ConfigValue> entry : validations.entrySet()) {\n        if (!entry.getValue().errorMessages().isEmpty()) {\n            final ConfigValue value = entry.getValue();\n            throw new ConfigException(value.name(), configuration.getString(value.name()), value.errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 88.74964024398695}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\n    if (oldSchema.type().isPrimitive()) {\n        return oldSchema;\n    }\n\n    // Get fields from original schema\n    SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n    for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n        if (isContainedIn(field.name(), nestedFields)) {\n\n            newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n        }\n        else {\n            newSchemabuilder.field(field.name(), field.schema());\n        }\n    }\n\n    LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n    for (int i = 0; i < headers.size(); i++) {\n\n        Header currentHeader = headerToProcess.get(headers.get(i));\n        Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n        LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n        if (currentFieldName.isPresent() && currentHeader != null) {\n            newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n        }\n    }\n    LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n    return newSchemabuilder.build();\n}", "CodeBleu_score": 99.7799116121701}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\n    if (oldSchema.type().isPrimitive()) {\n        return oldSchema;\n    }\n\n    // Get fields from original schema\n    SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n    for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n        if (isContainedIn(field.name(), nestedFields)) {\n\n            newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n        }\n        else {\n            newSchemabuilder.field(field.name(), field.schema());\n        }\n    }\n\n    LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n    for (int i = 0; i < headers.size(); i++) {\n\n        Header currentHeader = headerToProcess.get(headers.get(i));\n        Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n        LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n        if (currentFieldName.isPresent() && currentHeader != null) {\n            newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n        }\n    }\n    LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n    return newSchemabuilder.build();\n}", "CodeBleu_score": 99.7799116121701}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\n        if (oldSchema.type().isPrimitive()) {\n            return oldSchema;\n        }\n\n        // Get fields from original schema\n        SchemaBuilder newSchemabuilder = SchemaUtil.copySchemaBasics(oldSchema, SchemaBuilder.struct());\n        for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n            if (isContainedIn(field.name(), nestedFields)) {\n\n                newSchemabuilder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n            }\n            else {\n                newSchemabuilder.field(field.name(), field.schema());\n            }\n        }\n\n        LOGGER.debug(\"Fields copied from the old schema {}\", newSchemabuilder.fields());\n        for (int i = 0; i < headers.size(); i++) {\n\n            Header currentHeader = headerToProcess.get(headers.get(i));\n            Optional<String> currentFieldName = getFieldName(fields.get(i), fieldName, level);\n            LOGGER.trace(\"CurrentHeader {} - currentFieldName {}\", headers.get(i), currentFieldName);\n            if (currentFieldName.isPresent() && currentHeader != null) {\n                newSchemabuilder = newSchemabuilder.field(currentFieldName.get(), currentHeader.schema());\n            }\n        }\n        LOGGER.debug(\"Fields added from headers {}\", newSchemabuilder.fields());\n        return newSchemabuilder.build();\n    }", "CodeBleu_score": 97.99759105768322}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.contains(SNAPSHOT_KEY) && source.get(SNAPSHOT_KEY).isEnum() && source.get(SNAPSHOT_KEY).getEnumName().equals(SNAPSHOT_ENUM_LOGICAL_NAME)) {\n        String snapshotString = source.getString(SNAPSHOT_KEY).toUpperCase();\n        return SnapshotRecord.valueOf(snapshotString);\n    }\n    return null;\n}", "CodeBleu_score": 38.168542718410826}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.contains(SNAPSHOT_KEY)) {\n        return SnapshotRecord.valueOf(source.getString(SNAPSHOT_KEY).toUpperCase());\n    }\n    return null;\n}", "CodeBleu_score": 16.816485409677895}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source.contains(SNAPSHOT_KEY) && source.get(SNAPSHOT_KEY).isEnum()) {\n        String snapshotString = source.get(SNAPSHOT_KEY).getEnumName();\n        if (snapshotString != null) {\n            snapshotString = snapshotString.toUpperCase();\n            return SnapshotRecord.valueOf(snapshotString);\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.841994164124955}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    try {\n        String[] parts = version.split(\"\\\\.\");\n        if (parts.length > 2) {\n            version = parts[0] + \".\" + parts[1];\n        }\n        parts = version.split(\"-\");\n        return Optional.of(Float.parseFloat(parts[0]));\n    } catch (Exception e) {\n        return Optional.empty();\n    }\n}", "CodeBleu_score": 82.53282856475846}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    try {\n        String[] parts = version.split(\"\\\\.\");\n        if (parts.length > 2) {\n            version = parts[0] + \".\" + parts[1];\n        }\n        parts = version.split(\"-\");\n        return Optional.of(Float.parseFloat(parts[0]));\n    } catch (NumberFormatException e) {\n        return Optional.empty();\n    }\n}", "CodeBleu_score": 79.76388966501831}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    try {\n        String[] parts = version.split(\"\\\\.\");\n        if (parts.length > 2) {\n            version = parts[0] + \".\" + parts[1];\n        }\n        parts = version.split(\"-\");\n        return Optional.of(Float.parseFloat(parts[0]));\n    } catch (NumberFormatException e) {\n        return Optional.empty();\n    }\n}", "CodeBleu_score": 79.76388966501831}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.46877182249885}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.46877182249885}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.46877182249885}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.74751834071806}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.74751834071806}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.EDIT)\n        .operationName(\"deleteConnector\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 95.74751834071806}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    ConnectAction[] connectActions;\n    if (RESTART_ACTIONS.contains(action)) {\n      connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n    } else {\n      connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n    }\n\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(connectActions)\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService\n            .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 97.98462714091751}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    ConnectAction[] connectActions;\n    if (RESTART_ACTIONS.contains(action)) {\n      connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n    } else {\n      connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n    }\n\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(connectActions)\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService\n            .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 97.98462714091751}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    ConnectAction[] connectActions;\n    if (RESTART_ACTIONS.contains(action)) {\n      connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.RESTART};\n    } else {\n      connectActions = new ConnectAction[] {ConnectAction.VIEW, ConnectAction.EDIT};\n    }\n\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(connectActions)\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService\n            .updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 97.98462714091751}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t", "CodeBleu_score": 7.1690436822820445}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t    String clusterName, String connectName, String pluginName, Mono<Map<String, Object>> requestBody,\n        ServerWebExchange exchange) {\n        return kafkaConnectService\n            .validateConnectorPluginConfig(\n                getCluster(clusterName), connectName, pluginName, requestBody)\n            .map(ResponseEntity::ok);\n    }\n}", "CodeBleu_score": 73.5683911189508}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t  public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig(\n      String clusterName, String connectName, String pluginName, @Valid Mono<Map<String, Object>> requestBody,\n      ServerWebExchange exchange) {\n    return kafkaConnectService\n        .validateConnectorPluginConfig(\n            getCluster(clusterName), connectName, pluginName, requestBody)\n        .map(ResponseEntity::ok);\n  }\n}", "CodeBleu_score": 87.4581393457561}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class).initializers(new DynamicConfigurationPropertiesInitializer()).run(args);\n}", "CodeBleu_score": 34.82328288784565}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class).initializers(new DynamicConfigurationInitializer()).run(args);\n}", "CodeBleu_score": 33.12925257950958}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class).initializers(new DynamicConfigurationPropertiesInitializer()).run(args);\n}", "CodeBleu_score": 34.82328288784565}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n        return connector -> true;\n    }\n    return connector -> getStringsForSearch(connector).anyMatch(string -> string.toLowerCase().contains(search.toLowerCase()));\n}", "CodeBleu_score": 64.66732118121476}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n        return connector -> true;\n    }\n    return connector -> getStringsForSearch(connector).anyMatch(string -> string.toLowerCase().contains(search.toLowerCase()));\n}", "CodeBleu_score": 64.66732118121476}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n        return c -> true;\n    }\n    final String searchLowerCase = search.toLowerCase();\n    return c -> getStringsForSearch(c).anyMatch(s -> s.toLowerCase().contains(searchLowerCase));\n}", "CodeBleu_score": 61.19559004198728}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    if (propertiesMap == null) {\n      return new HashMap<>();\n    }\n\n    Map<String, Object> flattenedMap = new HashMap<>();\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = prefix == null ? entry.getKey() : prefix + \".\" + entry.getKey();\n      Object value = entry.getValue();\n      if (value instanceof Map) {\n        flattenedMap.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        flattenedMap.put(key, value);\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 52.786870341597}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    if (propertiesMap == null) {\n      return new HashMap<>();\n    }\n    Map<String, Object> flattenedMap = new HashMap<>();\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = (prefix == null) ? entry.getKey() : prefix + \".\" + entry.getKey();\n      Object value = entry.getValue();\n      if (value instanceof Map) {\n        flattenedMap.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        flattenedMap.put(key, value);\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 49.04963894331548}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattenedMap = new HashMap<>();\n    if (propertiesMap != null) {\n      for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n        String key = prefix != null ? prefix + \".\" + entry.getKey() : entry.getKey();\n        Object value = entry.getValue();\n        if (value instanceof Map) {\n          flattenedMap.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n        } else {\n          flattenedMap.put(key, value);\n        }\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 51.716252903318185}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t", "CodeBleu_score": 2.9334771606863974}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t", "CodeBleu_score": 2.9334771606863974}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t", "CodeBleu_score": 2.9334771606863974}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return aclViewEnabled(adminClient) ? authorizedOperations(clusterDescription).flatMap(authorizedOperations -> {\n        if (authorizedOperations.contains(AuthorizedOperation.ALL) || authorizedOperations.contains(AuthorizedOperation.ALTER)) {\n            return Mono.just(ClusterFeature.KAFKA_ACL_EDIT);\n        } else {\n            return Mono.empty();\n        }\n    }) : Mono.empty();\n}", "CodeBleu_score": 37.939565482522006}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return Mono.just(clusterDescription).flatMap(cd -> {\n        if (aclViewEnabled(adminClient) && authorizedOperations(cd).containsAll(ACL_EDIT_OPERATIONS)) {\n            return Mono.just(KAFKA_ACL_EDIT);\n        } else {\n            return Mono.empty();\n        }\n    });\n}", "CodeBleu_score": 23.689606852979235}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return adminClient.getClusterFeatures().filter(clusterFeatures -> clusterFeatures.contains(ReactiveAdminClient.SupportedFeature.AUTHORIZED_SECURITY_ENABLED)).flatMap(clusterFeatures -> {\n        if (clusterFeatures.contains(ReactiveAdminClient.SupportedFeature.ACL_EDIT)) {\n            return Mono.just(ReactiveAdminClient.SupportedFeature.ACL_EDIT);\n        } else if (clusterDescription.authorizedOperations().contains(AuthorizedOperation.ALL) || clusterDescription.authorizedOperations().contains(AuthorizedOperation.ALTER)) {\n            return Mono.just(ReactiveAdminClient.SupportedFeature.ACL_EDIT);\n        } else {\n            return Mono.empty();\n        }\n    }).map(clusterFeature -> new ClusterFeature(clusterFeature, true));\n}", "CodeBleu_score": 25.213274584044342}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> pollingRange = new TreeMap<>();\n    if (prevRange.isEmpty()) {\n        for (TopicPartition partition : partitions) {\n            long startOffset = partition.beginningOffset();\n            if (seekOperations.contains(partition)) {\n                startOffset = Math.max(startOffset, seekOperations.get(partition));\n            }\n            pollingRange.put(partition, new FromToOffset(startOffset, startOffset + messagesPerPoll));\n        }\n    } else {\n        for (TopicPartition partition : partitions) {\n            FromToOffset prevRangeForPartition = prevRange.get(partition);\n            long startOffset = prevRangeForPartition.to() + 1;\n            if (seekOperations.contains(partition)) {\n                startOffset = Math.max(startOffset, seekOperations.get(partition));\n            }\n            long endOffset = startOffset + messagesPerPoll - 1;\n            if (endOffset > prevRangeForPartition.end()) {\n                endOffset = prevRangeForPartition.end();\n            }\n            pollingRange.put(partition, new FromToOffset(startOffset, endOffset));\n        }\n    }\n    return pollingRange;\n}", "CodeBleu_score": 31.486731334658014}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> pollingRange = new TreeMap<>();\n    int pollCount = Math.min(pollCountPerPartition, maxPollCount);\n    for (TopicPartition topicPartition : seekOperations.keySet()) {\n        long startOffset = seekOperations.get(topicPartition);\n        long endOffset = Math.min(startOffset + pollCount, topicPartition.endOffset());\n        startOffset = Math.max(startOffset, topicPartition.beginOffset());\n        if (prevRange.containsKey(topicPartition)) {\n            FromToOffset prevRangeOffsets = prevRange.get(topicPartition);\n            startOffset = Math.max(startOffset, prevRangeOffsets.fromOffset());\n            endOffset = Math.min(endOffset, prevRangeOffsets.toOffset());\n        }\n        pollingRange.put(topicPartition, new FromToOffset(startOffset, endOffset));\n    }\n    return pollingRange;\n}", "CodeBleu_score": 36.35469145386796}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    TreeMap<TopicPartition, FromToOffset> nextRange = new TreeMap<>();\n    // Initialize the range based on the previous range or seek operations\n    if (prevRange.isEmpty()) {\n        for (TopicPartition tp : seekOperations.getSeekOperations().keySet()) {\n            nextRange.put(tp, new FromToOffset(seekOperations.getSeekOperations().get(tp), Long.MAX_VALUE));\n        }\n    } else {\n        nextRange.putAll(prevRange);\n    }\n    // Calculate the number of messages to poll per partition\n    int pollPerPartition = (int) Math.ceil(maxPollRecords / nextRange.size());\n    // Calculate the start offset for each topic partition\n    for (TopicPartition tp : nextRange.keySet()) {\n        long startOffset = nextRange.get(tp).getFrom();\n        long endOffset = nextRange.get(tp).getTo();\n        if (startOffset == -1) {\n            startOffset = startOffsets.get(tp);\n        }\n        if (endOffset == -1) {\n            endOffset = endOffsets.get(tp);\n        }\n        // Adjust the start offset based on the number of messages to poll\n        if (startOffset + pollPerPartition > endOffset) {\n            startOffset = endOffset - pollPerPartition;\n        }\n        nextRange.put(tp, new FromToOffset(startOffset, endOffset));\n    }\n    return nextRange;\n}", "CodeBleu_score": 37.02787977560235}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t        if (configuration.getBoolean(CK_LEGACY_MODE)) {\n            if (configuration.getString(CK_ZOOKEEPER) == null) {\n                throw new IllegalArgumentException(\"Zookeeper connection string is missing\");\n            }\n            doLaunchLegacy(input);\n        } else {\n            if (configuration.getString(CK_BOOTSTRAP) == null) {\n                throw new IllegalArgumentException(\"Bootstrap servers are missing\");\n            }\n            doLaunchConsumer(input);\n        }\n\n        // schedule a task to update the last second bytes read every second.\n        executor.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));\n            }\n        }, 1, 1, TimeUnit.SECONDS);\n\n        // wait for the server to be running\n        try {\n            serverLatch.await();\n        } catch (InterruptedException e) {\n            LOG.warn(\"Server was interrupted while waiting for server to be running\", e);\n        }\n\n        // register for server lifecycle events\n        lifecycleSubscription = lifecycleEventBus.register(this);\n    }", "CodeBleu_score": 44.52372426300979}, {"code": "public void doLaunch(final MessageInput input){\n\t        if (configuration.getBoolean(CK_LEGACY_MODE, false)) {\n            doLaunchLegacy(input);\n        } else {\n            doLaunchConsumer(input);\n        }\n\n        // schedule a task to update the last second bytes read every second\n        executor.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                lastSecBytesRead.set(lastSecBytesReadTmp.get());\n                lastSecBytesReadTmp.set(0);\n            }\n        }, 1, 1, TimeUnit.SECONDS);\n\n        // wait for the server to be running\n        while (!server.isRunning()) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                LOG.error(\"Interrupted while waiting for server to be running\", e);\n            }\n        }\n\n        // register for server lifecycle events\n        server.registerLifecycleListener(this);\n    }", "CodeBleu_score": 28.08745861847054}, {"code": "public void doLaunch(final MessageInput input){\n\t        if (configuration.getBoolean(CK_LEGACY_MODE)) {\n            if (configuration.getString(CK_ZOOKEEPER) == null) {\n                throw new IllegalArgumentException(\"Legacy mode requires ZooKeeper connection string.\");\n            }\n            doLaunchLegacy(input);\n        } else {\n            if (configuration.getString(CK_BOOTSTRAP) == null) {\n                throw new IllegalArgumentException(\"Consumer mode requires bootstrap servers.\");\n            }\n            doLaunchConsumer(input);\n        }\n\n        // schedule a task to update the last second bytes read every second\n        final ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();\n        executorService.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));\n            }\n        }, 1, 1, TimeUnit.SECONDS);\n\n        // wait for the server to be running\n        while (lifecycle != Lifecycle.RUNNING) {\n            try {\n                Thread.sleep(100);\n            } catch (InterruptedException e) {\n                throw new RuntimeException(e);\n            }\n        }\n\n        // register for server lifecycle events\n        lifecycleStateChange(lifecycle);\n        lifecycleSubscriber.register(this);\n    }", "CodeBleu_score": 39.19859267998041}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        if (config != null && config.length() > 0) {\n            Properties customProps = new Properties();\n            customProps.load(new StringReader(config));\n            props.putAll(customProps);\n        }\n    } catch (IOException e) {\n        log.error(\"Error loading custom properties\", e);\n    }\n}", "CodeBleu_score": 43.37758540252676}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        Properties customProps = new Properties();\n        customProps.load(new StringReader(config.getCustomProperties()));\n        props.putAll(customProps);\n    } catch (IOException e) {\n        LOGGER.error(\"Error loading custom properties: \", e);\n    }\n}", "CodeBleu_score": 40.975432269503955}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        String customProps = getCustomProperties();\n        if (customProps != null) {\n            Properties custom = new Properties();\n            custom.load(new StringReader(customProps));\n            props.putAll(custom);\n        }\n    } catch (IOException e) {\n        log.error(\"Error loading custom properties\", e);\n    }\n}", "CodeBleu_score": 52.051216124763314}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t        final List<Journal.Entry> journalEntries = new ArrayList<>();\n        long totalBytes = 0;\n        for (RawMessageEvent entry : entries) {\n            if (entry == null) {\n                LOG.warn(\"Ignoring null entry\");\n                continue;\n            }\n            journalEntries.add(new Journal.Entry(entry.getOffset(), entry.getData()));\n            totalBytes += entry.getData().length;\n        }\n        if (journalEntries.isEmpty()) {\n            return;\n        }\n        final long start = System.currentTimeMillis();\n        try {\n            writeToJournal(journalEntries);\n        } catch (Exception e) {\n            LOG.error(\"Error writing to journal\", e);\n            throw new MessageQueueException(e);\n        }\n        final long end = System.currentTimeMillis();\n        final long duration = end - start;\n        final double rate = (double) totalBytes / duration;\n        LOG.debug(\"Wrote {} bytes to journal in {}ms ({} bytes/s)\",\n                totalBytes, duration, rate);\n        writtenMessages.inc(entries.size());\n        writtenBytes.inc(totalBytes);\n    }", "CodeBleu_score": 40.192917632047376}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t        // Filter out null entries\n        List<Journal.Entry> journalEntries = entries.stream()\n                .filter(Objects::nonNull)\n                .map(this::mapToJournalEntry)\n                .collect(Collectors.toList());\n\n        // Calculate total message bytes\n        long totalMessageBytes = journalEntries.stream()\n                .mapToLong(Journal.Entry::getBytes)\n                .sum();\n\n        // Attempt to write to journal\n        int retries = 0;\n        while (true) {\n            try {\n                writeToJournal(journalEntries);\n                break;\n            } catch (JournalException e) {\n                if (retries == MAX_RETRIES) {\n                    throw new MessageQueueException(\n                            \"Failed to write to journal after \" + MAX_RETRIES + \" retries\", e);\n                }\n\n                LOG.warn(\"Failed to write to journal, retrying in {} seconds...\",\n                        RETRY_DELAY_SECONDS);\n                try {\n                    Thread.sleep(RETRY_DELAY_SECONDS * 1000);\n                } catch (InterruptedException e1) {\n                    LOG.warn(\"Interrupted while waiting for retry\");\n                }\n                retries++;\n            }\n        }\n\n        // Update metrics\n        messagesWritten.inc(journalEntries.size());\n        bytesWritten.inc(totalMessageBytes);\n    }", "CodeBleu_score": 44.35260647879958}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    // Filter out null entries\n    List<Journal.Entry> nonNullEntries = entries.stream()\n            .filter(Objects::nonNull)\n            .map(entry -> new Journal.Entry(entry.getKey(), entry.getValue()))\n            .collect(Collectors.toList());\n\n    // Calculate total message bytes\n    long totalBytes = nonNullEntries.stream()\n            .mapToLong(Journal.Entry::getBytes)\n            .sum();\n\n    // Attempt to write to journal\n    int retries = 0;\n    while (true) {\n        try {\n            writeToJournal(nonNullEntries);\n            break;\n        } catch (MessageQueueException e) {\n            retries++;\n            if (retries > MAX_RETRIES) {\n                throw e;\n            }\n            long backoff = (long) Math.pow(2, retries) * BACKOFF_INITIAL_MS;\n            LOG.warn(\"Failed to write to journal, retrying in {} ms (attempt {})\", backoff, retries);\n            try {\n                Thread.sleep(backoff);\n            } catch (InterruptedException ex) {\n                throw new MessageQueueException(\"Interrupted while sleeping\", ex);\n            }\n        }\n    }\n\n    // Update metrics\n    totalMessages.addAndGet(entries.size());\n    totalBytesWritten.addAndGet(totalBytes);\n}", "CodeBleu_score": 51.75231728550218}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\t    if (messages == null || messages.size() == 0)\n        return;\n\n    long maxMessageId = messages.get(0).getMessageId();\n    for (Message message : messages) {\n        maxMessageId = Math.max(maxMessageId, message.getMessageId());\n    }\n\n    if (maxMessageId > this.lastAcknowledgedMessageId) {\n        this.lastAcknowledgedMessageId = maxMessageId;\n        this.acknowledgedMessageCount++;\n    }\n}", "CodeBleu_score": 31.857147739856874}, {"code": "public void acknowledge(List<Message> messages){\n\t    if (messages == null) {\n        return;\n    }\n    int maxMessageId = -1;\n    for (Message message : messages) {\n        if (message.getQueueId() > maxMessageId) {\n            maxMessageId = message.getQueueId();\n        }\n    }\n    if (maxMessageId > -1) {\n        this.acknowledge(maxMessageId);\n    }\n}", "CodeBleu_score": 22.651235820033364}, {"code": "public void acknowledge(List<Message> messages){\n\t    // TODO: implement\n}", "CodeBleu_score": 4.565461993424478}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\t    final Set<String> metrics = metricRegistry.getMetrics().keySet();\n    final String journalName = this.getClass().getSimpleName();\n    final String journalNamePrefix = journalName + \".\";\n    final String legacyJournalName = \"akka.persistence.journal.local.\" + journalName;\n    final String legacyJournalNamePrefix = legacyJournalName + \".\";\n    for (final String metric : metrics) {\n        if (metric.startsWith(journalNamePrefix)) {\n            final String legacyMetricName = legacyJournalNamePrefix + metric.substring(journalNamePrefix.length());\n            try {\n                metricRegistry.register(legacyMetricName, metricRegistry.newGauge(metric, metricRegistry.getMetric(metric)));\n            } catch (IllegalArgumentException e) {\n                log.warn(\"Could not register legacy metric '{}' for metric '{}'\", legacyMetricName, metric);\n            }\n        }\n    }\n}", "CodeBleu_score": 35.224023125957025}, {"code": "private void registerLegacyMetrics(){\n\t    final String prefix = LocalKafkaJournal.class.getSimpleName() + \".\";\n    final MetricRegistry registry = new MetricRegistry();\n    for (final Metric metric : registry.getMetrics()) {\n        if (metric.getName().startsWith(prefix)) {\n            final String legacyName = metric.getName().substring(prefix.length());\n            try {\n                registry.register(legacyName, metric);\n            } catch (IllegalArgumentException e) {\n                LOG.warn(\"Failed to register legacy metric for {}: {}\", metric.getName(), e.getMessage());\n            }\n        }\n    }\n}", "CodeBleu_score": 38.3915942116855}, {"code": "private void registerLegacyMetrics(){\n\t    // Filter metrics to include only those starting with the LocalKafkaJournal class name\n    final Set<String> metricsToRegister = metricRegistry.getNames().stream().filter(metricName -> metricName.startsWith(LocalKafkaJournal.class.getSimpleName())).collect(Collectors.toSet());\n\n    // Construct legacy metric names\n    final Map<String, String> legacyMetrics = metricsToRegister.stream().collect(Collectors.toMap(metricName -> metricName, metricName -> metricName.replace(LocalKafkaJournal.class.getSimpleName(), \"KafkaJournal\")));\n\n    // Attempt to register each metric under its legacy name in the metric registry\n    for (final String metricName : metricsToRegister) {\n        final String legacyMetricName = legacyMetrics.get(metricName);\n        try {\n            metricRegistry.get(metricName).register(legacyMetricName);\n        } catch (final IllegalArgumentException e) {\n            logger.warn(\"Failed to register legacy metric for metric {} with legacy name {}\", metricName, legacyMetricName);\n        }\n    }\n}", "CodeBleu_score": 40.41437102588705}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    Timer timer = metricRegistry.timer(metricName);\n    try {\n        metricRegistry.register(metricName, timer);\n    } catch (IllegalArgumentException e) {\n        timer = metricRegistry.timer(metricName);\n    }\n    return timer;\n}", "CodeBleu_score": 31.563586036333458}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.getTimers().get(metricName);\n    }\n}", "CodeBleu_score": 21.97987496955459}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    Timer timer;\n    try {\n        timer = metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        timer = metricRegistry.timer(metricName);\n    }\n    return timer;\n}", "CodeBleu_score": 33.17262453560691}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t        try {\n            metricRegistry.register(name, new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    long size = kafkaLog.size();\n                    if (size == 0) {\n                        return 0L;\n                    }\n                    long committedOffset = kafkaLog.committedOffset();\n                    if (committedOffset == KafkaLog.DEFAULT_OFFSET) {\n                        return getLogEndOffset() - getLogStartOffset();\n                    }\n                    return getLogEndOffset() - committedOffset;\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // Ignore\n        }\n    }", "CodeBleu_score": 58.45731693250799}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t        try {\n            metricRegistry.register(name, new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    long size = kafkaLog.size();\n                    if (size == 0) {\n                        return 0L;\n                    }\n                    long committedOffset = kafkaLog.committedOffset();\n                    if (committedOffset == KafkaLog.DEFAULT_COMMITTED_OFFSET) {\n                        return getLogEndOffset() - getLogStartOffset();\n                    }\n                    return getLogEndOffset() - committedOffset;\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // ignore\n        }\n    }", "CodeBleu_score": 58.59430543880438}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t        try {\n            metricRegistry.register(name, new Gauge<Long>() {\n                @Override\n                public Long getValue() {\n                    long uncommitted = size();\n                    if (uncommitted == 0) {\n                        return 0L;\n                    }\n                    if (getCommittedOffset() == DEFAULT_COMMITTED_OFFSET) {\n                        return getLogEndOffset() - getLogStartOffset();\n                    }\n                    return getLogEndOffset() - getCommittedOffset();\n                }\n            });\n        } catch (IllegalArgumentException e) {\n            // ignore\n        }\n    }", "CodeBleu_score": 59.14013493309898}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        log.debug(\"No messages to flush\");\n        return -1;\n    }\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n    log.debug(\"Writing {} messages to log\", messageSet.size());\n    long lastOffset = kafkaLog.append(messageSet);\n    log.debug(\"Wrote {} messages to log, last offset is {}\", messageSet.size(), lastOffset);\n    return lastOffset;\n}", "CodeBleu_score": 34.32840471859437}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        log.debug(\"No messages to flush\");\n        return -1;\n    }\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n    log.debug(\"Flushing {} messages\", messageSet.size());\n    long offset = kafkaLog.append(messageSet);\n    log.info(\"Wrote {} messages to {} with size {}\", messageSet.size(), kafkaLog.name(), payloadSize);\n    markWrittenMessages(messageSet.size());\n    return offset;\n}", "CodeBleu_score": 36.515175342291606}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        log.debug(\"No messages to flush\");\n        return -1;\n    }\n    ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n    log.debug(\"Flushing {} messages of size {}\", messageSet.size(), payloadSize);\n    long lastWriteOffset = kafkaLog.append(messageSet);\n    log.debug(\"Flushed {} messages to offset {}\", messageSet.size(), lastWriteOffset);\n    return lastWriteOffset;\n}", "CodeBleu_score": 35.53848767843451}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t        // \u52a0\u9501\uff0c\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\n        lock.lock();\n        try {\n            List<AdminClient> adminClientList = adminClientMap.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n\n            // \u5173\u95ed\u5ba2\u6237\u7aef\uff0c\u8d85\u65f6\u65f6\u95f4\u4e3a30\u79d2\n            LOGGER.info(\"close kafka AdminClient start, clusterPhyId:{}\", clusterPhyId);\n            boolean allSuccess = closeAdminClientList(clusterPhyId, adminClientList);\n            if (allSuccess) {\n                LOGGER.info(\"close kafka AdminClient success, clusterPhyId:{}\", clusterPhyId);\n            } else {\n                LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka AdminClient exist failed, clusterPhyId:{}\", clusterPhyId, e);\n        } finally {\n            lock.unlock();\n        }\n    }", "CodeBleu_score": 77.35013879325201}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t        // \u83b7\u53d6\u9501\n        Lock lock = this.getLock(clusterPhyId);\n        lock.lock();\n        try {\n            // \u83b7\u53d6AdminClient\u5217\u8868\n            List<AdminClient> adminClientList = this.adminClientMap.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n            // \u5173\u95edAdminClient\n            LOGGER.info(\"close kafka AdminClient start, clusterPhyId:{}\", clusterPhyId);\n            boolean allSuccess = this.closeAdminClientList(clusterPhyId, adminClientList);\n            if (allSuccess) {\n                LOGGER.info(\"close kafka AdminClient success, clusterPhyId:{}\", clusterPhyId);\n            } else {\n                LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka AdminClient exist failed, clusterPhyId:{}\", clusterPhyId, e);\n        } finally {\n            lock.unlock();\n        }\n    }", "CodeBleu_score": 74.75272344008683}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t        // \u52a0\u9501\n        lock.lock();\n        try {\n            // \u83b7\u53d6\u5173\u8054\u7684AdminClient\u5217\u8868\n            List<AdminClient> adminClientList = adminClientMap.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n\n            // \u5173\u95edAdminClient\n            boolean allSuccess = closeAdminClientList(clusterPhyId, adminClientList);\n\n            // \u6253\u5370\u65e5\u5fd7\n            if (allSuccess) {\n                LOGGER.info(\"close kafka AdminClient success, clusterPhyId:{}\", clusterPhyId);\n            } else {\n                LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId);\n            }\n        } catch (Exception e) {\n            LOGGER.error(\"close kafka AdminClient failed, clusterPhyId:{}\", clusterPhyId, e);\n        } finally {\n            // \u91ca\u653e\u9501\n            lock.unlock();\n        }\n    }", "CodeBleu_score": 71.2208754738421}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            log.error(\"Failed to close AdminClient for cluster {}\", clusterPhyId, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 82.99569828305158}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    boolean success = true;\n    if (adminClientList == null) {\n        return true;\n    }\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            log.error(\"Failed to close AdminClient for clusterPhyId: {}\", clusterPhyId, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 79.43174606881422}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    boolean success = true;\n    if (adminClientList == null) {\n        return true;\n    }\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOGGER.error(\"close adminClient error, clusterPhyId:{}, adminClient:{}\", clusterPhyId, adminClient, e);\n            success = false;\n        }\n    }\n    return success;\n}", "CodeBleu_score": 71.67421723113634}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        int attempts = 5;\n        while (app.isRunning() && attempts > 0) {\n            attempts = attempts - 1;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(e);\n            }\n        }\n        app = null;\n    }\n}", "CodeBleu_score": 93.09752595819398}, {"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        int attempts = 5;\n        while (app.isRunning() && attempts > 0) {\n            attempts = attempts - 1;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(e);\n            }\n        }\n        app = null;\n    }\n}", "CodeBleu_score": 93.09752595819398}, {"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        int attempts = 5;\n        while (app.isRunning() && attempts > 0) {\n            attempts = attempts - 1;\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(e);\n            }\n        }\n        app = null;\n    }\n}", "CodeBleu_score": 93.09752595819398}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner server = new EurekaServerRunner(config);\n    server.enableTls(true);\n    server.setKeystore(getResourceAsStream(\"keystore.jks\"), \"password\".toCharArray());\n    server.setTruststore(getResourceAsStream(\"truststore.jks\"), \"password\".toCharArray());\n    server.start();\n    return server;\n}", "CodeBleu_score": 54.63856795853472}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner eurekaServerRunner = new EurekaServerRunner(config);\n    eurekaServerRunner.enableTls(true);\n    eurekaServerRunner.setKeystore(new File(\"src/test/resources/test-keystore.jks\"), \"password\");\n    eurekaServerRunner.setTruststore(new File(\"src/test/resources/test-truststore.jks\"), \"password\");\n    eurekaServerRunner.start();\n    return eurekaServerRunner;\n}", "CodeBleu_score": 35.70920024768511}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner eurekaServerRunner = new EurekaServerRunner(config);\n    eurekaServerRunner.enableTls(\"keystore.jks\", \"truststore.jks\", \"changeit\", \"changeit\");\n    eurekaServerRunner.setKeystore(\"keystore.jks\");\n    eurekaServerRunner.setTruststore(\"truststore.jks\");\n    eurekaServerRunner.setKeystorePassword(\"changeit\");\n    eurekaServerRunner.setTruststorePassword(\"changeit\");\n    eurekaServerRunner.start();\n    return eurekaServerRunner;\n}", "CodeBleu_score": 34.51960280159593}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner runner = new EurekaClientRunner(config, server, \"testservice\");\n\tenableTlsClient(runner);\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 67.4093929884973}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner client = new EurekaClientRunner(config, server, \"testservice\");\n\tenableTlsClient(client);\n\tclient.start();\n\treturn client;\n}", "CodeBleu_score": 67.34942876140019}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\tEurekaClientRunner runner = new EurekaClientRunner(config, server, \"testservice\");\n\tenableTlsClient(runner);\n\trunner.start();\n\treturn runner;\n}", "CodeBleu_score": 67.4093929884973}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t\t\tKeyTool keyTool = new KeyTool();\n\t\tkeyTool.init();\n\t\tkeyTool.setKeyStorePassword(KEY_PASSWORD);\n\t\tkeyTool.setKeyPassword(KEY_PASSWORD);\n\t\tkeyTool.setValidity(VALIDITY);\n\n\t\tKeyAndCert caCert = keyTool.createCACert(CA_ALIAS);\n\t\tsaveCert(caCert);\n\n\t\tKeyAndCert serverCert = keyTool.createServerCert(SERVER_ALIAS, CA_ALIAS);\n\t\tsaveKeyAndCert(serverCert);\n\n\t\tKeyAndCert clientCert = keyTool.createClientCert(CLIENT_ALIAS, CA_ALIAS);\n\t\tsaveKeyAndCert(clientCert);\n\n\t\tKeyAndCert secondCa = keyTool.createCACert(SECOND_CA_ALIAS);\n\t\tsaveCert(secondCa);\n\n\t\tKeyAndCert secondClient = keyTool.createClientCert(SECOND_CLIENT_ALIAS, SECOND_CA_ALIAS);\n\t\tsaveKeyAndCert(secondClient);\n\t}", "CodeBleu_score": 29.521165689027782}, {"code": "static void createCertificates() throws Exception{\n\t\t\tKeyTool keyTool = KeyTool.getInstance();\n\t\tFile caCertFile = saveCert(keyTool.createCACertificate(CA_PASSWORD));\n\t\tFile serverCertFile = saveCert(keyTool.createServerCertificate(caCertFile, CA_PASSWORD, SERVER_PASSWORD));\n\t\tFile clientCertFile = saveCert(keyTool.createClientCertificate(caCertFile, CA_PASSWORD, CLIENT_PASSWORD));\n\t\tFile secondCaCertFile = saveCert(keyTool.createCACertificate(CA_PASSWORD));\n\t\tFile secondClientCertFile = saveCert(keyTool.createClientCertificate(secondCaCertFile, CA_PASSWORD, CLIENT_PASSWORD));\n\t}", "CodeBleu_score": 23.53136163850965}, {"code": "static void createCertificates() throws Exception{\n\t", "CodeBleu_score": 1.403125619965593}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long timeLimit = System.currentTimeMillis() + seconds * 1000;\n    while (System.currentTimeMillis() < timeLimit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    throw new RuntimeException(\"Assertion failed after \" + seconds + \" seconds\");\n}", "CodeBleu_score": 42.826924463499616}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long startTime = System.currentTimeMillis();\n    long endTime = startTime + (seconds * 1000);\n    while (System.currentTimeMillis() < endTime) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n    }\n    throw new RuntimeException(\"Assertion failed after \" + seconds + \" seconds.\");\n}", "CodeBleu_score": 46.113529425564934}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long startTime = System.currentTimeMillis();\n    long timeLimit = startTime + seconds * 1000;\n    while (System.currentTimeMillis() < timeLimit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n    }\n    throw new RuntimeException(\"Assertion failed after \" + seconds + \" seconds\");\n}", "CodeBleu_score": 47.49115488941945}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tJcaX509v3CertificateBuilder builder = certBuilder(keyPair.getPublic(), ca, ca);\n\t\tbuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\t\tbuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(true));\n\n\t\treturn signCert(builder, keyPair.getPrivate());\n\t}", "CodeBleu_score": 80.97120015337825}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tJcaX509v3CertificateBuilder builder = certBuilder(keyPair.getPublic(), ca, ca);\n\t\tbuilder.addExtension(Extension.keyUsage, false, new KeyUsage(KeyUsage.digitalSignature));\n\t\tbuilder.addExtension(Extension.basicConstraints, false, new BasicConstraints(false));\n\n\t\treturn signCert(builder, keyPair.getPrivate());\n\t}", "CodeBleu_score": 77.81773628431826}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tJcaX509v3CertificateBuilder builder = certBuilder(keyPair.getPublic(), ca, ca);\n\t\tbuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(true));\n\t\tbuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyCertSign));\n\n\t\treturn signCert(builder, keyPair.getPrivate());\n\t}", "CodeBleu_score": 76.61511500489839}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (eurekaHttpClient == null) {\n        try {\n            Field registrationClientField = eurekaTransport.getClass().getDeclaredField(\"registrationClient\");\n            registrationClientField.setAccessible(true);\n            eurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n        } catch (IllegalAccessException e) {\n            logger.error(\"Failed to access registrationClient field\", e);\n        } catch (NoSuchFieldException e) {\n            logger.error(\"Failed to find registrationClient field\", e);\n        }\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 51.31867280074511}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (eurekaHttpClient == null) {\n        try {\n            Field registrationClientField = eurekaTransport.getClass().getDeclaredField(\"registrationClient\");\n            registrationClientField.setAccessible(true);\n            eurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            logger.error(\"Failed to get EurekaHttpClient\", e);\n        }\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 47.75469097168307}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (eurekaHttpClient == null) {\n        try {\n            Field registrationClientField = eurekaTransport.getClass().getDeclaredField(\"registrationClient\");\n            registrationClientField.setAccessible(true);\n            eurekaHttpClient = (EurekaHttpClient) registrationClientField.get(eurekaTransport);\n        } catch (NoSuchFieldException | IllegalAccessException e) {\n            logger.error(\"Error getting eureka http client\", e);\n        }\n    }\n    return eurekaHttpClient;\n}", "CodeBleu_score": 46.91491516920062}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\t    List<Application> apps = eurekaClient.getApplications().getRegisteredApplications();\n    if (apps == null) {\n        return new ArrayList<>();\n    }\n    List<String> names = new ArrayList<>();\n    for (Application app : apps) {\n        if (app.getInstances() != null && !app.getInstances().isEmpty()) {\n            names.add(app.getName().toLowerCase());\n        }\n    }\n    return names;\n}", "CodeBleu_score": 58.50507166457234}, {"code": "public List<String> getServices(){\n\t    List<String> serviceNames = new ArrayList<>();\n    List<Application> applications = eurekaClient.getApplications().getRegisteredApplications();\n    if (applications != null) {\n        for (Application application : applications) {\n            if (application.getInstances().size() > 0) {\n                serviceNames.add(application.getName().toLowerCase());\n            }\n        }\n    }\n    return serviceNames;\n}", "CodeBleu_score": 48.50407344103614}, {"code": "public List<String> getServices(){\n\t\tList<String> serviceNames = new ArrayList<>();\n\tList<Application> applications = this.eurekaClient.getApplications().getRegisteredApplications();\n\tif (applications == null || applications.isEmpty()) {\n\t\treturn serviceNames;\n\t}\n\tfor (Application application : applications) {\n\t\tif (application.getInstances() != null && !application.getInstances().isEmpty()) {\n\t\t\tString serviceName = application.getName().toLowerCase();\n\t\t\tserviceNames.add(serviceName);\n\t\t}\n\t}\n\treturn serviceNames;\n}", "CodeBleu_score": 47.62430638497218}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        if (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor composite = (DiscoveryCompositeHealthContributor) entry.getValue();\n            for (HealthIndicator indicator : composite.getHealthIndicators()) {\n                if (!(indicator instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(indicator.getName(), indicator);\n                }\n            }\n        } else {\n            healthContributors.put(entry.getKey(), entry.getValue());\n        }\n    }\n}", "CodeBleu_score": 46.961258610622856}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        if (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) entry.getValue();\n            for (HealthIndicator indicator : discoveryCompositeHealthContributor.getIndicators()) {\n                if (!(indicator instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(indicator.getName(), indicator);\n                }\n            }\n        } else {\n            healthContributors.put(entry.getKey(), entry.getValue());\n        }\n    }\n}", "CodeBleu_score": 46.233287762246576}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        if (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n            DiscoveryCompositeHealthContributor discoveryCompositeHealthContributor = (DiscoveryCompositeHealthContributor) entry.getValue();\n            for (HealthIndicator indicator : discoveryCompositeHealthContributor.getIndicators()) {\n                if (!(indicator instanceof EurekaHealthIndicator)) {\n                    healthContributors.put(indicator.getId(), indicator);\n                }\n            }\n        } else {\n            healthContributors.put(entry.getKey(), entry.getValue());\n        }\n    }\n}", "CodeBleu_score": 46.260806887892905}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\t    ServiceInstance instance = client.getInstances(\"provider-application\").get(0);\n    URI targetUrl = instance.getUri();\n    String result = restTemplate.postForObject(targetUrl.toString() + \"/echo\", \"Hello, World\", String.class);\n    return result;\n}", "CodeBleu_score": 40.57185771761757}, {"code": "public String hello(){\n\t    ServiceInstance instance = client.getInstances(\"provider-application\").get(0);\n    URI targetUrl = instance.getUri();\n    String result = restTemplate.postForObject(targetUrl.toString() + \"/echo\", \"Hello World\", String.class);\n    return result;\n}", "CodeBleu_score": 40.553155349391524}, {"code": "public String hello(){\n\t    RestTemplate restTemplate = new RestTemplate();\n    ServiceInstance instance = loadBalancerClient.choose(\"provider-application\");\n    URI providerApplicationUri = instance.getUri();\n    String response = restTemplate.postForObject(providerApplicationUri.toString() + \"/echo\", \"Hello, World\", String.class);\n    return response;\n}", "CodeBleu_score": 43.96415743148967}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t    ServiceInstance instance = loadBalancer.choose(\"provider-application\");\n    URI serviceUri = URI.create(String.format(\"http://%s:%s/echo\", instance.getHost(), instance.getPort()));\n    return restTemplate.postForObject(serviceUri, \"Hello World\", String.class);\n}", "CodeBleu_score": 44.27986545867799}, {"code": "public String world(){\n\t    return \"Hello World\";\n}", "CodeBleu_score": 4.104646250711236}, {"code": "public String world(){\n\t    return null;\n}", "CodeBleu_score": 1.7608173339833801}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    synchronized (serverMap) {\n        if (!serverMap.containsKey(serviceName)) {\n            serverMap.put(serviceName, new HashSet<>());\n        }\n        Set<Server> servers = serverMap.get(serviceName);\n        Server server = new Server(ip, port);\n        servers.add(server);\n        logger.info(\"Registered service \" + serviceName + \" with IP \" + ip + \" and port \" + port);\n        return true;\n    }\n}", "CodeBleu_score": 57.65041228024476}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"Registering service: \" + serviceName + \" with IP: \" + ip + \" and port: \" + port);\n    if (!serverMap.containsKey(serviceName)) {\n        serverMap.put(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 53.36343386842197}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    if (!serverMap.containsKey(serviceName)) {\n        serverMap.put(serviceName, new HashSet<>());\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    logger.info(\"Registered service: \" + serviceName + \" at \" + ip + \":\" + port);\n    return true;\n}", "CodeBleu_score": 50.0580489596105}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    log.info(\"Deregistering service {} from {}\", serviceName, ip + \":\" + port);\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        log.error(\"Service {} not found\", serviceName);\n        return false;\n    }\n    Server server = new Server(ip, port);\n    if (!servers.contains(server)) {\n        log.error(\"Server {} not found for service {}\", server, serviceName);\n        return false;\n    }\n    servers.remove(server);\n    if (servers.isEmpty()) {\n        serverMap.remove(serviceName);\n    }\n    log.info(\"Deregistered service {} from {}\", serviceName, ip + \":\" + port);\n    return true;\n}", "CodeBleu_score": 55.74215486241394}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    // Log the deregistration action\n    log.info(\"Deregistering server: \" + serviceName + \"@\" + ip + \":\" + port);\n\n    // Get the set of servers for the given service name\n    Set<Server> servers = serverMap.get(serviceName);\n    if (servers == null) {\n        // If no servers are registered for the service name, return false\n        log.warn(\"No servers registered for service: \" + serviceName);\n        return false;\n    }\n\n    // Create a server object with the given IP and port\n    Server server = new Server(ip, port);\n\n    // Remove the server from the set\n    servers.remove(server);\n\n    // If the set is now empty, remove the key from the map\n    if (servers.isEmpty()) {\n        serverMap.remove(serviceName);\n    }\n\n    // Log the deregistration action\n    log.info(\"Deregistered server: \" + serviceName + \"@\" + ip + \":\" + port);\n\n    // Return true to indicate successful deregistration\n    return true;\n}", "CodeBleu_score": 56.772538380395375}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    // Log the deregistration action\n    log.info(\"Deregistering server {} with IP {} and port {}\", serviceName, ip, port);\n\n    // Remove the server from the set associated with the serviceName in the serverMap\n    serverMap.remove(serviceName, new Server(ip, port));\n\n    // Return true upon successful deregistration\n    return true;\n}", "CodeBleu_score": 37.56859916407233}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = getAttributes(metadata);\n    if (attributes.containsKey(DEFAULT_CONFIGURATION_KEY)) {\n        Object configuration = attributes.get(DEFAULT_CONFIGURATION_KEY);\n        String name = \"default\";\n        registerClientConfiguration(registry, name, configuration);\n    }\n}", "CodeBleu_score": 35.68955172109357}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = getAttributes(metadata);\n    if (attributes.containsKey(RibbonClients.DEFAULT_CONFIGURATION_KEY)) {\n        String name = RibbonClientConfiguration.class.getName();\n        Object configuration = attributes.get(RibbonClients.DEFAULT_CONFIGURATION_KEY);\n        registerClientConfiguration(registry, name, configuration);\n    }\n}", "CodeBleu_score": 43.97500780072077}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t    Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n    if (attributes != null) {\n        Object defaultConfiguration = attributes.get(\"defaultConfiguration\");\n        if (defaultConfiguration != null) {\n            String name = metadata.getClassName() + \".RibbonClientConfiguration\";\n            registerClientConfiguration(registry, name, defaultConfiguration);\n        }\n    }\n}", "CodeBleu_score": 54.35829087379056}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    List<ServiceInstance> instances = getInstances(serviceId);\n    if (instances.isEmpty()) {\n        return null;\n    }\n    int size = instances.size();\n    int index = (int) (System.currentTimeMillis() / 1000) % size;\n    ServiceInstance instance = instances.get(index);\n    return new TutuServiceInstance(serviceId, instance.getHost(), instance.getPort());\n}", "CodeBleu_score": 42.32117760366149}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    // Retrieve the load balancer for the service ID\n    LoadBalancer loadBalancer = loadBalancerMap.get(serviceId);\n\n    // If the load balancer is not found, return null\n    if (loadBalancer == null) {\n        return null;\n    }\n\n    // Choose a server instance from the load balancer based on the service ID and a default context\n    ServiceInstance serverInstance = loadBalancer.chooseServer(serviceId, null);\n\n    // If no server is available, return null\n    if (serverInstance == null) {\n        return null;\n    }\n\n    // Create and return a TutuServiceInstance representing the chosen server's details\n    return new TutuServiceInstance(serverInstance.getServiceId(), serverInstance.getHost(), serverInstance.getPort());\n}", "CodeBleu_score": 46.79890707281259}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    List<ServiceInstance> instances = loadBalancer.chooseServiceInstances(serviceId, request);\n    if (instances.isEmpty()) {\n        return null;\n    }\n    return instances.get(0);\n}", "CodeBleu_score": 32.232931379279854}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    String uri = server.getUri().toString();\n    String host = uri.substring(0, uri.indexOf(\":\"));\n    String port = uri.substring(uri.indexOf(\":\") + 1);\n    String scheme = original.getScheme();\n    String path = original.getPath();\n    String query = original.getQuery();\n    String reconstructedURI = scheme + \"://\" + host + \":\" + port + path;\n    if (query != null) {\n        reconstructedURI += \"?\" + query;\n    }\n    return URI.create(reconstructedURI);\n}", "CodeBleu_score": 30.512321055126947}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    StringBuilder sb = new StringBuilder();\n    sb.append(\"http://\");\n    sb.append(server.getIp());\n    sb.append(\":\");\n    sb.append(server.getPort());\n    sb.append(original.getPath());\n    if (original.getQuery() != null) {\n        sb.append(\"?\");\n        sb.append(original.getQuery());\n    }\n    try {\n        return new URI(sb.toString());\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 60.219868355179294}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        String uri = original.getScheme() + \"://\" + server.getHost() + \":\" + server.getPort() + original.getPath();\n        if (original.getQuery() != null) {\n            uri += \"?\" + original.getQuery();\n        }\n        return new URI(uri);\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 41.15991267238617}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\t    List<TutuServer> serverList = new ArrayList<>();\n    try {\n        String serverAddress = \"http://\" + getServerAddress() + \"/list\";\n        URL url = new URL(serverAddress);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n\n        int responseCode = connection.getResponseCode();\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String inputLine;\n            StringBuilder response = new StringBuilder();\n            while ((inputLine = in.readLine()) != null) {\n                response.append(inputLine);\n            }\n            in.close();\n\n            JSONArray jsonArray = new JSONArray(response.toString());\n            for (int i = 0; i < jsonArray.length(); i++) {\n                JSONObject jsonObject = jsonArray.getJSONObject(i);\n                String ip = jsonObject.getString(\"ip\");\n                int port = jsonObject.getInt(\"port\");\n                TutuServer server = new TutuServer(ip, port);\n                serverList.add(server);\n            }\n        } else {\n            System.out.println(\"Failed to retrieve server list: \" + responseCode);\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return serverList;\n}", "CodeBleu_score": 34.46045189072514}, {"code": "private List<TutuServer> getServer(){\n\t    List<TutuServer> servers = new ArrayList<>();\n    try {\n        String serverAddress = \"http://\" + discoveryServiceAddress + \"/list\";\n        URL url = new URL(serverAddress);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n        connection.setConnectTimeout(1000);\n        connection.setReadTimeout(1000);\n        connection.connect();\n        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String line;\n            StringBuilder response = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                response.append(line);\n            }\n            reader.close();\n            JSONArray jsonArray = new JSONArray(response.toString());\n            for (int i = 0; i < jsonArray.length(); i++) {\n                JSONObject jsonObject = jsonArray.getJSONObject(i);\n                String ip = jsonObject.getString(\"ip\");\n                int port = jsonObject.getInt(\"port\");\n                servers.add(new TutuServer(ip, port));\n            }\n        }\n    } catch (IOException | JSONException e) {\n        e.printStackTrace();\n    }\n    return servers;\n}", "CodeBleu_score": 35.01316464319654}, {"code": "private List<TutuServer> getServer(){\n\t    List<TutuServer> serverList = new ArrayList<TutuServer>();\n    String serverAddress = \"http://127.0.0.1:8080\";\n    String serviceName = \"tutu\";\n\n    try {\n        URL url = new URL(serverAddress + \"/list\");\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Content-Type\", \"application/json\");\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n        String line;\n        StringBuilder response = new StringBuilder();\n        while ((line = reader.readLine()) != null) {\n            response.append(line);\n        }\n        reader.close();\n\n        JSONArray jsonArray = new JSONArray(response.toString());\n        for (int i = 0; i < jsonArray.length(); i++) {\n            JSONObject jsonObject = jsonArray.getJSONObject(i);\n            String ipAddress = jsonObject.getString(\"ipAddress\");\n            int port = jsonObject.getInt(\"port\");\n            TutuServer server = new TutuServer(ipAddress, port);\n            serverList.add(server);\n        }\n    } catch (IOException | JSONException e) {\n        e.printStackTrace();\n    }\n\n    return serverList;\n}", "CodeBleu_score": 31.695782257386213}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t    for (Route route : routes) {\n        if (pathMatcher.match(route.getPattern(), path)) {\n            String targetPath = path.substring(route.getPattern().length());\n            return new Route(targetPath, route.getServiceId());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 33.791565559139904}, {"code": "public Route getMatchingRoute(String path){\n\t    for (Route route : routes) {\n        if (pathMatcher.match(route.getPattern(), path)) {\n            String targetPath = path.substring(route.getPattern().length());\n            return new Route(targetPath, route.getServiceId());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 33.791565559139904}, {"code": "public Route getMatchingRoute(String path){\n\t    for (Route route : routes) {\n        if (pathMatcher.match(route.getPattern(), path)) {\n            String targetPath = path.substring(route.getPattern().length());\n            return new Route(targetPath, route.getServiceId());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 33.791565559139904}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    ClassPathScanningCandidateComponentProvider scanner = getScanner();\n    scanner.setResourceLoader(this.resourceLoader);\n    scanner.setEnvironment(this.environment);\n    scanner.setClassLoader(this.classLoader);\n    scanner.setBeanNameGenerator(this.beanNameGenerator);\n    scanner.setBeanClassFilter(this.beanClassFilter);\n    scanner.setIncludeFilters(this.includeFilters);\n    scanner.setExcludeFilters(this.excludeFilters);\n    scanner.setScannedInterfaces(this.scannedInterfaces);\n    scanner.setAutowireCandidate(this.autowireCandidate);\n    scanner.setAnnotationClassFilter(this.annotationClassFilter);\n    scanner.setUseDefaultFilters(this.useDefaultFilters);\n\n    Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>();\n    for (String basePackage : this.basePackages) {\n        Set<BeanDefinition> candidates = scanner.findCandidateComponents(basePackage);\n        for (BeanDefinition candidate : candidates) {\n            if (candidate instanceof AbstractBeanDefinition) {\n                AbstractBeanDefinition beanDefinition = (AbstractBeanDefinition) candidate;\n                if (beanDefinition.getTargetSource() == null) {\n                    beanDefinition.setTargetType(null);\n                }\n            }\n            beanDefinitions.add(new BeanDefinitionHolder(candidate, candidate.getBeanClassName()));\n        }\n    }\n    for (BeanDefinitionHolder holder : beanDefinitions) {\n        BeanDefinitionReaderUtils.registerBeanDefinition(holder, registry);\n    }\n}", "CodeBleu_score": 27.77994298485958}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    // Get the package name of the importing class\n    String packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n\n    // Scan the package for classes with the @FeignClient annotation\n    Set<String> candidates = ClassPathScanningCandidateComponentProvider.scan(packageName, (metadataReader, metadataReaderFactory) -> metadataReader.getAnnotationMetadata().hasAnnotation(FeignClient.class.getName()));\n\n    // Create a GenericBeanDefinition for each annotated class\n    for (String candidate : candidates) {\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        beanDefinition.getPropertyValues().add(\"type\", ClassUtils.resolveClassName(candidate, this.getClass().getClassLoader()));\n        beanDefinition.getPropertyValues().add(\"contextId\", candidate);\n\n        // Register the bean definition with the BeanDefinitionRegistry using the class name as the bean name\n        registry.registerBeanDefinition(candidate, beanDefinition);\n    }\n}", "CodeBleu_score": 51.14969599451204}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    // Get the package name of the importing class\n    String packageName = importingClassMetadata.getClassName();\n    packageName = packageName.substring(0, packageName.lastIndexOf(\".\"));\n\n    // Scan the package for classes with the @FeignClient annotation\n    Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<BeanDefinitionHolder>();\n    ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n    scanner.addIncludeFilter(new AnnotationTypeFilter(FeignClient.class));\n    for (String beanName : scanner.findCandidateComponents(packageName)) {\n        // Create a GenericBeanDefinition for each annotated class\n        RootBeanDefinition beanDefinition = new RootBeanDefinition();\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        beanDefinition.getPropertyValues().add(\"name\", beanName);\n        beanDefinition.getPropertyValues().add(\"contextId\", beanName);\n        beanDefinition.getPropertyValues().add(\"type\", beanName);\n\n        // Register the bean definition with the BeanDefinitionRegistry\n        beanDefinitions.add(new BeanDefinitionHolder(beanDefinition, beanName));\n    }\n\n    // Register the bean definitions with the BeanDefinitionRegistry\n    for (BeanDefinitionHolder holder : beanDefinitions) {\n        registry.registerBeanDefinition(holder.getBeanName(), holder.getBeanDefinition());\n    }\n}", "CodeBleu_score": 47.29097090057556}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t    return new TutuDiscoveryClient(tutuDiscoveryProperties);\n}", "CodeBleu_score": 74.10612186004828}]}
