{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\tself.ensure_one()\n    attachments = self.env['ir.attachment'].browse(args.get('attachments'))\n    if not attachments:\n        return\n    if not all(attachment.can_read() for attachment in attachments):\n        raise AccessError(_(\"The requested attachments are not readable.\"))\n    if not all(attachment.check_restrictions() for attachment in attachments):\n        raise AccessError(_(\"The requested attachments are not readable.\"))\n    zip_file = io.BytesIO()\n    with ZipFile(zip_file, 'w', ZIP_DEFLATED) as zip_buffer:\n        for attachment in attachments:\n            zip_buffer.writestr(attachment.name, attachment.datas)\n    filename = \"%s.zip\" % self.display_name\n    return request.make_response(zip_file.getvalue(), headers=_get_zip_headers(zip_file.getvalue(), filename))", "CodeBleu_score": 27.50862020750332}, {"code": "def export_zip_documents(self, **args)\n\t# Retrieve attachment IDs from HTTP request arguments\n    attachment_ids = args.get('attachment_ids')\n    if attachment_ids:\n        attachment_ids = literal_eval(attachment_ids)\n    else:\n        attachment_ids = []\n\n    # Verify read access rights and rules for the attachments\n    attachments = self.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n\n    # Build a zip file from the attachments' content\n    zip_file = io.BytesIO()\n    with ZipFile(zip_file, 'w') as zf:\n        for attachment in attachments:\n            if attachment.type == 'binary':\n                content = base64.b64decode(attachment.datas)\n            else:\n                content = attachment.datas\n            zf.writestr(attachment.name, content)\n\n    # Prepare HTTP headers for the zip file and return the zip file as an HTTP response\n    zip_file.seek(0)\n    content = zip_file.read()\n    zip_file.close()\n    filename = 'attachments.zip'\n    return request.make_response(content, headers=_get_zip_headers(content, filename))", "CodeBleu_score": 38.92429711768695}, {"code": "def export_zip_documents(self, **args)\n\tif not self.env.user.has_group('base.group_user'):\n        raise AccessError(_(\"Only users belonging to the '%s' group are allowed to download attachments.\") % ('base.group_user',))\n    attachments = self.env['ir.attachment'].browse(args.get('res_ids'))\n    if not attachments:\n        raise AccessError(_(\"No attachment was specified.\"))\n    for attachment in attachments:\n        attachment.check_access_rule('read')\n    zip_file = io.BytesIO()\n    with ZipFile(zip_file, 'w', ZIP_DEFLATED, allowZip64=True) as zf:\n        for attachment in attachments:\n            zf.writestr(attachment.name, attachment.datas)\n    filename = 'attachments.zip'\n    return request.make_response(zip_file.getvalue(), headers=_get_zip_headers(zip_file.getvalue(), filename))", "CodeBleu_score": 37.02281912801434}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n\n", "CodeBleu_score": 82.86007383787236}, {"code": "def _prepare_home_portal_values(self, counters)\n\tvalues = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 82.86007383787236}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tdate_begin, date_end = self._get_invoices_dates_begin_end(date_begin, date_end)\n    values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    self._update_session_history(values['invoices'])\n    return request.render(\"account.portal_my_invoices\", values)", "CodeBleu_score": 33.8655963208051}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tvalues = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    self._update_session_history(values['invoices'])\n    return request.render(\"portal.portal_my_invoices\", values)", "CodeBleu_score": 28.054605538825662}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\tif not request.env.user.partner_id.customer:\n        raise werkzeug.exceptions.NotFound()\n\n    domain = expression.AND([\n        [('type', '=', 'out_invoice'), ('state', 'in', ['open', 'paid'])],\n        [('type', '=', 'out_refund'), ('state', 'in', ['open', 'paid'])],\n        [('type', '=', 'out_receipt'), ('state', 'in', ['open', 'paid'])],\n    ])\n\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    # default sort by order\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    searchbar_filters = self._get_account_searchbar_filters()\n    # default filter by value\n    if not filterby:\n        filterby = 'all'\n    domain += searchbar_filters[filterby]['domain']\n\n    if date_begin and date_end:\n        domain += [('create_date', '>', date_begin), ('create_date', '<=', date_end)]\n\n    # invoices are sorted by descending date by default\n    invoices = request.env['account.move'].search(domain, order=order, limit=self._items_per_page, offset=self._items_per_page * (page - 1))\n\n    # update session history\n    self._update_history_session(invoices)\n\n    values = self._prepare_portal_layout_values()\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': {  # vals to define the pager.\n            \"url\": '/my/invoices',\n            \"url_args\": {'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n            \"total\": request.env['account.move'].search_count(domain),\n            \"page\": page,\n            \"step\": self._items", "CodeBleu_score": 34.653954907855}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tinvoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.exists():\n        raise werkzeug.exceptions.NotFound()\n    if invoice.state != 'posted':\n        raise werkzeug.exceptions.Forbidden()\n\n    if not access_token:\n        access_token = request.session.get('my_invoices_token')\n    if not access_token:\n        return request.redirect('/my/invoices')\n\n    if not invoice.portal_show_invoice(access_token):\n        raise werkzeug.exceptions.Forbidden()\n\n    if download:\n        if report_type == 'pdf':\n            # download PDF\n            pdf = invoice.with_context(report_type='pdf').sudo()._post_pdf(save_in_attachment=False)\n            if pdf:\n                pdfhttpheaders = [('Content-Type', 'application/pdf'), ('Content-Length', len(pdf))]\n                filename = 'invoice-%s.pdf' % (invoice.number or invoice.id)\n                pdfhttpheaders.append(('Content-Disposition', content_disposition(filename)))\n                return request.make_response(pdf, headers=pdfhttpheaders)\n            else:\n                raise Exception(\"Could not find the PDF document of invoice %s\" % invoice.id)\n        else:\n            # download report in text or html format\n            report_type = report_type or 'html'\n            report_name = 'account.report_invoice'\n            if report_type == 'text':\n                report_name += '_document'\n            report = request.env['ir.actions.report']._get_report_from_name(report_name)\n            return report.sudo().with_context(base_model_name=invoice._name, active_model=invoice._name, active_id=invoice.id).render_qweb_pdf(invoice.id)\n    else:\n        # show HTML or PDF report\n        if report_type == 'pdf':\n            pdf = invoice.with_context(report_type='pdf').sudo()._post_pdf(save", "CodeBleu_score": 40.89934723927687}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\tif not access_token:\n        return request.redirect('/my/invoices')\n\n    invoice = request.env['account.move'].sudo().search([('id', '=', int(invoice_id)), ('state', 'in', ['draft', 'posted']), ('access_token', '=', access_token)])\n    if not invoice:\n        return request.redirect('/my/invoices')\n\n    if invoice.state == 'posted' and download:\n        if report_type == 'pdf':\n            return self._invoice_download_pdf(invoice)\n        else:\n            return self._invoice_download_report(invoice, report_type)\n    else:\n        return self._invoice_get_page_view_values(invoice, access_token, **kw)", "CodeBleu_score": 29.877402171672607}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t# Check access to the invoice\n    invoice = request.env['account.move'].sudo().browse(int(invoice_id))\n    if not invoice.portal_show_invoice:\n        raise werkzeug.exceptions.NotFound()\n    # Check access to the invoice\n    if not invoice.portal_show_invoice:\n        raise werkzeug.exceptions.NotFound()\n\n    # Retrieve legal documents and return them as a zip file if there are multiple attachments\n    if download and invoice.state == 'posted':\n        legal_documents = invoice.sudo().get_portal_attachment_action()\n        if len(legal_documents) > 1:\n            return self._zip_attachments(legal_documents)\n        else:\n            return self._file_download(legal_documents[0])\n\n    # Prepare and show the report\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice, report_type, access_token, download=download)\n\n    # Render the invoice page view\n    return self._invoice_get_page_view_values(invoice, access_token, **kw)", "CodeBleu_score": 29.681783505496544}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t# Get the product templates\n    product_templates = self.env['product.template'].search([('website_published', '=', True), ('website_published_template', '=', True)])\n    # Update the sale taxes\n    if self.account_sale_tax_id:\n        product_templates.write({'taxes_id': [(6, 0, self.account_sale_tax_id.ids)]})\n    # Update the purchase taxes\n    if self.account_purchase_tax_id:\n        product_templates.write({'supplier_taxes_id': [(6, 0, self.account_purchase_tax_id.ids)]})\n    return product_templates\n\n", "CodeBleu_score": 19.74162058165311}, {"code": "def _get_demo_data_products(self, company=False)\n\tif not self.env.user.has_group('product.group_no_one'):\n        return\n    # Get the company's domain\n    company_domain = [('company_id', '=', self.env.company.id)]\n    if company:\n        company_domain = [('company_id', '=', company.id)]\n    # Search for products based on the domain\n    product_templates = self.env['product.template'].search(company_domain)\n    # Update the sale taxes for the products\n    if product_templates:\n        sale_tax_ids = self.env.company.account_sale_tax_id.ids\n        if sale_tax_ids:\n            product_templates.write({'taxes_id': [(6, 0, sale_tax_ids)]})\n    # Update the purchase taxes for the products\n    if product_templates:\n        purchase_tax_ids = self.env.company.account_purchase_tax_id.ids\n        if purchase_tax_ids:\n            product_templates.write({'taxes_id': [(6, 0, purchase_tax_ids)]})\n\n", "CodeBleu_score": 40.377115278311464}, {"code": "def _get_demo_data_products(self, company=False)\n\tProduct = request.env['product.template']\n    Product.search([('domain', '=', company.domain)]).update({'sale_ok': True})\n    if company.account_sale_tax_id:\n        Product.search([('domain', '=', company.domain)]).update({'taxes_id': [(6, 0, company.account_sale_tax_id.ids)]})\n    if company.account_purchase_tax_id:\n        Product.search([('domain', '=', company.domain)]).update({'taxes_id': [(6, 0, company.account_purchase_tax_id.ids)]})\n\n", "CodeBleu_score": 19.96621129220692}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\tdemo_account = self.env['account.account'].search([('company_id', '=', company.id), ('id', '=', xml_id)], limit=1)\n    if not demo_account:\n        domain = [('company_id', '=', company.id), ('user_type_id', '=', account_type.id)]\n        demo_account = self.env['account.account'].search(domain, limit=1)\n    if not demo_account:\n        domain = [('company_id', '=', company.id)]\n        demo_account = self.env['account.account'].search(domain, limit=1)\n    return demo_account\n\n", "CodeBleu_score": 47.157045355639234}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\tdemo_account = self.env['account.account'].search([('company_id', '=', company.id), ('id', '=', xml_id)], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id), ('internal_type', '=', account_type)], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return demo_account\n", "CodeBleu_score": 46.02370467732386}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\taccount = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id', '=', account_type.id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 45.41009268582749}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = Account.objects.filter(account_type=Account.CURRENT_YEAR_EARNINGS)\n    if accounts.count() > 1:\n        raise ValidationError(\n            \"There can only be one account of type 'Current Year Earnings' for each company.\"\n        )\n\n", "CodeBleu_score": 16.672018260043775}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts_by_company = self.filter(account_type=Account.CURRENT_YEAR_EARNINGS).values('company').annotate(num_accounts=Count('company'))\n    for account in accounts_by_company:\n        if account['num_accounts'] > 1:\n            raise ValidationError('There can only be one account with the \"Current Year Earnings\" type for each company.')\n\n\n", "CodeBleu_score": 20.74219956953529}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\taccounts = self.objects.filter(account_type__name=\"Current Year Earnings\")\n    if accounts.count() > 0:\n        companies = accounts.values_list(\"company\", flat=True).distinct()\n        for company in companies:\n            company_accounts = accounts.filter(company=company)\n            if company_accounts.count() > 1:\n                raise ValidationError(\n                    \"There can only be one account of type 'Current Year Earnings' per company.\"\n                )\n\n", "CodeBleu_score": 29.363252114891925}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and domain:\n        domain = expression.AND([domain, [('is_company', '=', False)]])\n        if self._context.get('allowed_company_ids'):\n            domain = expression.AND([domain, [('company_id', 'in', self._context.get('allowed_company_ids'))]])\n        if self._context.get('allowed_company_ids'):\n            domain = expression.AND([domain, [('company_id', 'in', self._context.get('allowed_company_ids'))]])\n        if self._context.get('country_id'):\n            domain = expression.AND([domain, [('country_id', '=', self._context.get('country_id'))]])\n        if self._context.get('show_address'):\n            domain = expression.AND([domain, [('display_name', '!=', False)]])\n        if self._context.get('show_address') and self._context.get('address_display_type'):\n            domain = expression.AND([domain, [('display_name', '!=', False)]])\n        if self._context.get('show_address') and self._context.get('address_display_type'):\n            domain = expression.AND([domain, [('display_name', '!=', False)]])\n        if self._context.get('show_address') and self._context.get('address_display_type'):\n            domain = expression.AND([domain, [('display_name', '!=', False)]])\n        if self._context.get('show_address') and self._context.get('address_display_type'):\n            domain = expression.AND([domain, [('display_name', '!=', False)]])\n        if self._context.get('show_address') and self._context.get('address_display_type'):\n            domain = expression.AND([domain, [('display_name', '!=', False)]])\n        if self._context.get('show_address') and self._context.get('address_display_type'):\n            domain = expression.AND([domain, [('display_name', '!=', False)]])\n        if self._context.get('show_address') and self._context.get('address_", "CodeBleu_score": 33.90941179487196}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name:\n        if self.env.context.get('partner_ids'):\n            return self.search([('id', 'in', self.env.context['partner_ids'])], order=order, limit=limit)\n        return self.env['res.partner']\n    if not domain:\n        domain = []\n    if operator == 'ilike' and not (name or '').strip():\n        domain = ['|', ('name', '=', False), ('name', '!=', False)]\n    else:\n        domain += [('name', operator, name)]\n    return self.search(domain, limit=limit, order=order)\n\n\n", "CodeBleu_score": 34.11592304607538}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\tif not name and domain is None:\n        if self.env.context.get('partner_id'):\n            domain = [('id', 'in', self.env['res.partner'].browse(self.env.context['partner_id']).commercial_partner_id.ids)]\n        else:\n            domain = []\n    if name:\n        search_domain = ['|', ('name', operator, name), ('email', operator, name)]\n        if domain:\n            domain = ['&', domain, search_domain]\n        else:\n            domain = search_domain\n    return self.search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 40.52607121446539}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\tself.ensure_one()\n    if self.id:\n        self._translations_to_copy.copy_translations(new, excluded=excluded)\n    else:\n        super().copy_translations(new, excluded=excluded)", "CodeBleu_score": 18.940077261554414}, {"code": "def copy_translations(self, new, excluded=())\n\tself.ensure_one()\n    if self.env.context.get('default_lang'):\n        excluded = tuple(excluded) + ('name',)\n    else:\n        excluded = tuple(excluded)\n    super().copy_translations(new, excluded=excluded)\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 79.27198960179335}, {"code": "def copy_translations(self, new, excluded=())\n\treturn self.copy_translations(new, excluded=excluded)\n\n", "CodeBleu_score": 5.911892320668851}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    account_move_lines = self.env['account.move.line'].search([('sale_line_ids', 'in', self.ids), ('account_id.internal_type', '=', 'receivable')])\n    if not account_move_lines:\n        return False\n    domain = [('id', 'in', account_move_lines.mapped('move_id').ids)]\n    if self.analytic_account_id:\n        domain += [('analytic_line_ids.analytic_account_id', '=', self.analytic_account_id.id)]\n    return {\n        'name': _('Customer Invoices'),\n        'domain': domain,\n        'res_model': 'account.move',\n        'view_mode': 'tree,form',\n        'type': 'ir.actions.act_window',\n    }", "CodeBleu_score": 31.075757023602936}, {"code": "def action_view_invoice(self)\n\tself.ensure_one()\n    self.search([('type', '=', 'out_invoice')])\n    move_ids = self.env['account.move.line'].search([('account_id.type', '=', 'receivable'), ('account_id.internal_type', '=', 'receivable'), ('account_id.reconcile', '=', False), ('account_id.company_id', '=', self.env.company.id), ('sale_line_ids.order_id', '=', self.id), ('analytic_account_id', '=', self.analytic_account_id.id)])\n    move_ids = move_ids.mapped('move_id').ids\n    return {\n        'name': _('Invoices'),\n        'type': 'ir.actions.act_window',\n        'view_type': 'tree,form',\n        'view_mode': 'tree,form',\n        'res_model': 'account.move',\n        'domain': [('id', 'in', move_ids)],\n        'context': {'type': 'out_invoice', 'show_line_subtotals_tax_excluded': True},\n    }\n\n", "CodeBleu_score": 28.761658276218498}, {"code": "def action_view_invoice(self)\n\t# Ensure a single record context\n    if len(self.ids) != 1:\n        return {}\n    # Search for account move lines related to sale types\n    aml_obj = self.env['account.move.line']\n    domain = [\n        ('move_id.state', 'in', ['posted', 'all']),\n        ('move_id.invoice_payment_state', 'in', ['not_paid', 'all']),\n        ('move_id.invoice_payment_term_id.auto_complete', '=', True),\n        ('move_id.type', 'in', ['out_invoice', 'out_refund']),\n        ('move_id.invoice_line_ids.sale_line_ids.order_id', '=', self.id),\n        ('move_id.invoice_line_ids.sale_line_ids.order_partner_id', '=', self.partner_id.id),\n    ]\n    # Add conditions for the current record's ID and analytic accounts\n    if self.analytic_account_id:\n        domain += [('analytic_account_id', '=', self.analytic_account_id.id)]\n    else:\n        domain += [('analytic_account_id', '=', False)]\n    # Execute the query to get distinct move IDs\n    move_ids = aml_obj.search(domain).mapped('move_id').ids\n    # Return an action dictionary to display customer invoices in tree and form views with specific context and domain settings\n    return {\n        'name': _('Invoices'),\n        'type': 'ir.actions.act_window',\n        'res_model': 'account.move',\n        'view_type': 'tree,form',\n        'domain': [('id', 'in', move_ids)],\n        'context': {\n            'create': False,\n            'edit': False,\n            'default_type': 'out_invoice',\n            'default_invoice_payment_term_id': self.invoice_payment_term_id.id,\n            'default_invoice_line_", "CodeBleu_score": 37.9835097990501}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    account_move_lines = self.env['account.move.line'].search([('account_id.type', '=', 'payable'), ('purchase_line_id', '=', self.id)])\n    move_ids = account_move_lines.mapped('move_id').ids\n    return {\n        'type': 'ir.actions.act_window',\n        'name': 'Vendor Bills',\n        'domain': [('id', 'in', move_ids)],\n        'res_model': 'account.move',\n        'view_type': 'form',\n        'view_mode': 'tree,form',\n        'context': {\n            'create': False,\n            'default_type': 'in_invoice',\n        },\n    }", "CodeBleu_score": 24.538132532025305}, {"code": "def action_view_vendor_bill(self)\n\tself.ensure_one()\n    domain = [('account_id.type', '=', 'payable'), ('account_id.internal_type', '=', 'payable'), ('account_id.reconcile', '=', True), ('account_id.internal_group', '=', 'purchase')]\n    account_move_ids = self.env['account.move.line'].search(domain).mapped('move_id').ids\n    action = self.env.ref('account.action_move_journal_line').read()[0]\n    action['domain'] = [('id', 'in', account_move_ids)]\n    action['context'] = {'default_type': 'in_invoice', 'create': False}\n    return action\n\n\n", "CodeBleu_score": 27.80783202195931}, {"code": "def action_view_vendor_bill(self)\n\tif self.env.context.get('single_record', False):\n        self.env.context.update({\n            'default_move_type': 'in_invoice',\n            'default_type': 'in_invoice',\n            'default_journal_id': self.env.ref('purchase.purchase_journal').id,\n            'default_invoice_date': self.date_order,\n            'default_invoice_origin': self.name,\n            'default_vendor_id': self.partner_id.id,\n            'default_currency_id': self.currency_id.id,\n            'default_payment_term_id': self.payment_term_id.id,\n            'default_fiscal_position_id': self.fiscal_position_id.id,\n            'default_company_id': self.company_id.id,\n            'default_invoice_line_ids': [(0, 0, {\n                'name': line.name,\n                'product_id': line.product_id.id,\n                'product_uom_id': line.product_uom.id,\n                'product_qty': line.product_qty,\n                'price_unit': line.price_unit,\n                'tax_ids': [(6, 0, line.tax_id.ids)],\n                'analytic_account_id': line.analytic_account_id.id,\n                'analytic_tag_ids': [(6, 0, line.analytic_tag_ids.ids)],\n                'date_planned': line.date_planned,\n                'display_type': line.display_type,\n                'invoice_line_tax_ids': [(6, 0, line.invoice_line_tax_ids.ids)],\n                'purchase_line_id': line.id,\n            }) for line in self.order_line],\n            'default_purchase_id': self.id,\n            'default_purchase_line_ids': [(6, 0, self.ids)],\n            'default_purchase_line_id': self.", "CodeBleu_score": 21.69129338868446}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}, {"code": "def write(self, values)\n\tif len(self) != 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 93.03832878063925}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\tif self.env.context.get('create_bank_account'):\n        return self.env['res.partner.bank'].search([], limit=1)\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'bank_id': self.bank_id.id,\n            'acc_type': self.acc_type,\n            'company_id': self.company_id.id,\n            'currency_id': self.currency_id.id,\n            'sequence': self.sequence,\n        })\n    return bank_account\n\n", "CodeBleu_score": 56.17204350985978}, {"code": "def _find_or_create_bank_account(self)\n\tself.ensure_one()\n    if self.env.context.get('bank_account_no_creation'):\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.id)\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.id,\n        })\n    return bank_account.filtered(lambda x: x.company_id.id == self.company_id.id)\n\n", "CodeBleu_score": 53.45761293744105}, {"code": "def _find_or_create_bank_account(self)\n\tif self.env.context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id)\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id\n        })\n    return bank_account\n\n", "CodeBleu_score": 56.184327257747604}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    # If the statement line is in the foreign currency, we need to convert the transaction amount in the foreign currency.\n    # If the statement line is in the company currency, we need to convert the transaction amount in the company currency.\n    if currency == self.foreign_currency_id:\n        transaction_amount = amount_currency\n    elif currency == self.company_currency_id:\n        transaction_amount = balance\n    # If the transaction amount is in the foreign currency, we need to convert the transaction amount in the foreign currency.\n    # If the transaction amount is in the company currency, we need to convert the transaction amount in the company currency.\n    if transaction_currency == currency:\n        transaction_amount = transaction_amount\n    elif transaction_currency == self.foreign_currency_id:\n        transaction_amount = transaction_amount * currency.with_context(date=self.date).rate\n    elif transaction_currency == self.company_currency_id:\n        transaction_amount = transaction_amount / currency.with_context(date=self.date).rate\n    # If the journal amount is in the foreign currency, we need to convert the journal amount in the foreign currency.\n    # If the journal amount is in the company currency, we need to convert the journal amount in the company currency.\n    if journal_currency == currency:\n        journal_amount = journal_amount\n    elif journal_currency == self.foreign_currency_id:\n        journal_amount = journal_amount * currency.with_context(date=self.date).rate\n    elif journal_currency == self.company_currency_id:\n        journal_amount = journal_amount / currency.with_context(date=self.date).rate\n    # If the company amount is in the foreign currency, we need to convert the company amount in the foreign currency.\n    # If the company amount is in the company currency, we need to convert the company amount in the company currency.\n    if company_currency == currency:\n        company_amount = company_amount\n    elif company_currency == self.foreign_", "CodeBleu_score": 27.79417598328555}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    (\n        transaction_amount,\n        transaction_currency,\n        journal_amount,\n        journal_currency,\n        company_amount,\n        company_currency,\n    ) = self._get_accounting_amounts_and_currencies()\n    if currency.is_zero(transaction_amount):\n        return {}\n    if currency.is_zero(journal_amount):\n        return {}\n    if currency.is_zero(company_amount):\n        return {}\n    if transaction_currency.is_zero(transaction_amount):\n        return {}\n    if journal_currency.is_zero(journal_amount):\n        return {}\n    if company_currency.is_zero(company_amount):\n        return {}\n\n    if self.foreign_currency_id:\n        # In case of a foreign currency, we need to ensure that the transaction amount is expressed in the foreign currency\n        # and the balance is expressed in the company currency.\n        if transaction_currency != self.foreign_currency_id:\n            # If the transaction amount is not expressed in the foreign currency, we convert it.\n            transaction_amount = transaction_currency._convert(\n                transaction_amount, self.foreign_currency_id, self.company_id, self.date\n            )\n        if balance.currency_id != self.foreign_currency_id:\n            # If the balance is not expressed in the foreign currency, we convert it.\n            balance = balance.currency_id._convert(balance, self.foreign_currency_id, self.company_id, self.date)\n        if company_currency != self.foreign_currency_id:\n            # If the company amount is not expressed in the foreign currency, we convert it.\n            company_amount = company_currency._convert(\n                company_amount, self.foreign_currency_id, self.company_id, self.date\n            )\n        # We adjust the balance to ensure that the transaction amount and the balance have the same sign.\n        balance = balance.copy()\n        if (transaction_amount > 0 and balance.amount < 0) or (transaction_amount < 0 and balance.amount > 0):\n            balance.amount", "CodeBleu_score": 30.356506959805884}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\tself.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency == self.foreign_currency_id:\n        transaction_amount = balance\n    elif currency == self.company_currency_id:\n        transaction_amount = company_amount\n    else:\n        transaction_amount = amount_currency\n    return {\n        'transaction_amount': transaction_amount,\n        'transaction_currency': transaction_currency,\n        'journal_amount': journal_amount,\n        'journal_currency': journal_currency,\n        'company_amount': company_amount,\n        'company_currency': company_currency,\n    }\n\n", "CodeBleu_score": 16.504283484776902}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\tself.ensure_one()\n    if self.type in ('bank', 'cash'):\n        default_outbound_payment_methods = self._default_outbound_payment_methods()\n        payment_method_line_ids = [(0, 0, {'payment_method_id': payment_method.id}) for payment_method in default_outbound_payment_methods]\n    else:\n        payment_method_line_ids = [(2, line.id) for line in self.outbound_payment_method_ids]\n    self.outbound_payment_method_ids = payment_method_line_ids\n\n", "CodeBleu_score": 39.23118959939664}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            journal.outbound_payment_method_line_ids = self.env['account.payment.method.line'].create([{\n                'payment_method_id': method.id,\n                'journal_id': journal.id,\n            } for method in journal._default_outbound_payment_methods()])\n\n", "CodeBleu_score": 44.30374498132231}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\tfor journal in self:\n        journal.outbound_payment_method_line_ids = False\n        if journal.type in ('bank', 'cash'):\n            payment_methods = journal._default_outbound_payment_methods()\n            journal.outbound_payment_method_line_ids = [(0, 0, {'payment_method_id': method.id}) for method in payment_methods]\n\n", "CodeBleu_score": 40.4170616410858}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\tif not self.date:\n        self.date = fields.Date.today()\n    if self.invoice_date:\n        accounting_date = self.move_id._get_accounting_date(self.invoice_date, self.move_id._affect_tax_report())\n        if accounting_date != self.date:\n            self.date = accounting_date\n            self.env.add_to_compute('account.move.line', ['date', 'move_id'])\n\n", "CodeBleu_score": 27.011333585704822}, {"code": "def _compute_date(self)\n\tif self.invoice_date and not self.date:\n        date = self._get_accounting_date(self.invoice_date, self._affect_tax_report())\n        if date != self.date:\n            self.with_context(do_not_update_date=True).date = date\n            self.env.add_to_compute('account.move', 'date')\n    elif not self.date:\n        self.date = fields.Date.context_today(self)\n\n\n", "CodeBleu_score": 29.305000160598567}, {"code": "def _compute_date(self)\n\tfor move in self:\n        if move.invoice_date and not move.date:\n            if move._affect_tax_report():\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            else:\n                move.date = move.invoice_date\n        if not move.date:\n            move.date = fields.Date.context_today(move)\n\n", "CodeBleu_score": 35.7338032003468}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\tif self.is_sale_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False", "CodeBleu_score": 32.665536209075796}, {"code": "def _compute_invoice_payment_term_id(self)\n\tif self.is_sale_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    elif self.is_purchase_document():\n        if self.partner_id.property_supplier_payment_term_id:\n            self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n        else:\n            self.invoice_payment_term_id = False\n    else:\n        self.invoice_payment_term_id = False\n\n", "CodeBleu_score": 32.665536209075796}, {"code": "def _compute_invoice_payment_term_id(self)\n\tif self.invoice_payment_term_id:\n        return\n    if self.move_type == 'in_invoice' and self.partner_id.property_supplier_payment_term_id:\n        self.invoice_payment_term_id = self.partner_id.property_supplier_payment_term_id.id\n    elif self.move_type == 'out_invoice' and self.partner_id.property_payment_term_id:\n        self.invoice_payment_term_id = self.partner_id.property_payment_term_id.id\n\n\n\n", "CodeBleu_score": 27.37479721332996}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\ttax_group_ids = {}\n    tax_group_ids_by_country = {}\n    tax_group_ids_by_company = {}\n\n    for tax in self:\n        if tax.company_id not in tax_group_ids_by_company:\n            tax_group_ids_by_company[tax.company_id] = {}\n        if tax.country_id not in tax_group_ids_by_country:\n            tax_group_ids_by_country[tax.country_id] = {}\n\n        tax_group_ids_by_company[tax.company_id][tax.id] = False\n        tax_group_ids_by_country[tax.country_id][tax.id] = False\n\n    for tax_group in self.env['account.tax.group'].search([]):\n        if tax_group.company_id not in tax_group_ids_by_company:\n            continue\n        if tax_group.country_id not in tax_group_ids_by_country:\n            continue\n        if tax_group.country_id not in tax_group_ids_by_country[tax_group.company_id]:\n            continue\n        for tax_id in tax_group_ids_by_country[tax_group.company_id][tax_group.country_id]:\n            tax_group_ids[tax_id] = tax_group.id\n            tax_group_ids_by_company[tax.company_id][tax_id] = True\n            tax_group_ids_by_country[tax.country_id][tax_id] = True\n\n    for tax_group in self.env['account.tax.group'].search([]):\n        if tax_group.company_id not in tax_group_ids_by_company:\n            continue\n        if tax_group.country_id:\n            continue\n        for tax_id in tax_group_ids_by_company[tax_group.company_id]:\n            if tax_group_ids_by_country[self.env['res.country'].browse(tax_id).id][tax_id]:\n                continue\n            if tax_group_ids[tax_id]:", "CodeBleu_score": 29.099094770952387}, {"code": " def _compute_tax_group_id(self)\n\t# TODO: this function is not robust to taxes with different rates in the same country.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is not robust to taxes with different rates in the same company.\n    # TODO: this function is", "CodeBleu_score": 0.3125}, {"code": " def _compute_tax_group_id(self)\n\t# group taxes by their country and company\n    tax_groups = self.env['account.tax.group']\n    tax_groups_by_country = self.env['account.tax.group'].search([('tax_ids', 'in', self.ids)], order='country_id, company_id')\n    for tax_group in tax_groups_by_country:\n        tax_groups |= tax_group\n    # search for a tax group with the same country and company\n    for tax in self:\n        tax_group = tax_groups.filtered(lambda g: g.country_id.id == tax.country_id.id and g.company_id.id == tax.company_id.id)\n        if not tax_group:\n            # search for a tax group without a specified country but within the same company\n            tax_group = tax_groups.filtered(lambda g: not g.country_id and g.company_id.id == tax.company_id.id)\n        if tax_group:\n            tax.tax_group_id = tax_group", "CodeBleu_score": 23.517585263491913}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t# Set the database in the session\n    self.get(url)\n\n    # Prepare the POST request data\n    data = {\n        'db': db,\n        'login': login,\n        'password': password,\n    }\n    if force:\n        data['force'] = 'true'\n\n    # Upload the module file\n    with open(module_file, 'rb') as file:\n        response = self.post(url + '/base_import_module/login_upload', data=data, files={'file': file})\n\n    # Check for errors\n    if response.status_code != 200:\n        raise Exception('Server error.')\n    if 'error' in response.text:\n        raise Exception(response.text)\n\n    return response.text\n\n\n", "CodeBleu_score": 43.29300178777507}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\tself.session.get(url)\n    data = {\n        'db': db,\n        'login': login,\n        'password': password,\n        'force': str(force)\n    }\n    with open(module_file, 'rb') as f:\n        files = {'file': f}\n        response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n    if response.status_code != 200:\n        raise Exception(f\"Failed to upload module file to {url}. Status code: {response.status_code}\")\n    return response.text\n\n", "CodeBleu_score": 44.09087587713029}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\timport requests\n\n    # Set database in session\n    requests.get(url + '/web/database/manager?db=' + db)\n\n    # Prepare POST request data\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': force\n    }\n\n    # Read module file\n    with open(module_file, 'rb') as f:\n        module = f.read()\n\n    # Upload module file\n    response = requests.post(url + '/base_import_module/login_upload', data=data, files={'module_file': module})\n\n    # Check if module is installed\n    if response.text.find('Module base_import_module is not installed.') != -1:\n        raise Exception('Module base_import_module is not installed.')\n\n    # Check if module is outdated\n    if response.text.find('Module base_import_module is outdated.') != -1:\n        raise Exception('Module base_import_module is outdated.')\n\n    return response.text\n\n", "CodeBleu_score": 51.930697296321725}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\tfrom odoo.modules.registry import Registry\n    from odoo.tools import config\n    from odoo.tools.translate import TranslationImporter\n\n    # Retrieve configuration settings\n    db_name = config['db_name']\n    overwrite = config['overwrite_existing_translations']\n\n    # Create a new database registry\n    registry = Registry(db_name)\n\n    # Create a new cursor\n    with registry.cursor() as cr:\n        # Create a new translation importer\n        importer = TranslationImporter(cr, 'en_US', 'l10n_be', 'l10n_be_wizard', 'l10n_be_wizard.xml', 'l10n_be_wizard_data.xml')\n\n        # Load the translations\n        importer.load()\n\n        # Save the translations\n        importer.save(overwrite)\n\n", "CodeBleu_score": 45.793249123245225}, {"code": "def import_translation()\n\t# Get configuration settings\n    db_name = config.get('db_name')\n    overwrite_existing = config.get('overwrite_existing')\n\n    # Create new database registry and cursor\n    db = odoo.registry(db_name)\n    with api.Environment.manage():\n        env = api.Environment(db.cursor(), odoo.SUPERUSER_ID, {})\n\n        # Initialize the TranslationImporter\n        importer = TranslationImporter(env)\n        importer.overwrite_existing = overwrite_existing\n        importer.import_translations()\n\n        # Commit the cursor\n        env.cr.commit()\n\n", "CodeBleu_score": 39.56789522707763}, {"code": "def import_translation()\n\tfrom odoo import api, models, tools\n    from odoo.modules.registry import Registry\n    from odoo.tools import config\n    import os\n\n    # Get configuration settings for the database name and whether to overwrite existing translations.\n    db_name = config.get('db_name')\n    overwrite = config.get('overwrite_existing_translations')\n\n    # Create a new database registry.\n    registry = Registry()\n\n    # Use a cursor to initialize a TranslationImporter.\n    with registry.cursor() as cr:\n        # Load translation files based on the specified configuration and save the translations, with the option to overwrite existing ones.\n        tools.trans_load(cr, 'web', 'es_ES', 'es_ES', 'l10n_es_sale_management', verbose=True, overwrite=overwrite)\n\n        # Commit the changes.\n        cr.commit()\n\n", "CodeBleu_score": 35.48774156972871}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tnew_node = Node(name, info, self.depth + 1)\n    new_node.parent = self\n\n    # Inherit certain attributes from the parent if they exist\n    if self.root is not None:\n        new_node.root = self.root\n    if self.root_dir is not None:\n        new_node.root_dir = self.root_dir\n    if self.root_file is not None:\n        new_node.root_file = self.root_file\n    if self.root_name is not None:\n        new_node.root_name = self.root_name\n    if self.root_ext is not None:\n        new_node.root_ext = self.root_ext\n    if self.root_path is not None:\n        new_node.root_path = self.root_path\n\n    # Add the new node to the children list if it's not already present\n    if new_node not in self.children:\n        self.children.append(new_node)\n\n    # Sort the children by name\n    self.children.sort(key=lambda x: x.name)\n\n    return new_node\n\n\n", "CodeBleu_score": 34.97115485549965}, {"code": "def add_child(self, name, info)\n\tif name not in self.children:\n        child = Node(name, info, self.depth+1, self.root)\n        if self.root:\n            child.root = self\n        if self.parent:\n            child.parent = self\n        self.children.append(child)\n        self.children.sort(key=lambda x: x.name)\n    return self.children[self.children.index(name)]\n\n", "CodeBleu_score": 40.18852216866981}, {"code": "def add_child(self, name, info)\n\tif name in self.children:\n        return self.children[name]\n\n    child = Node(name, info)\n    child.depth = self.depth + 1\n\n    if self.max_depth is not None:\n        child.max_depth = self.max_depth - 1\n\n    if self.max_children is not None:\n        child.max_children = self.max_children\n\n    if self.max_info is not None:\n        child.max_info = self.max_info\n\n    self.children[name] = child\n    self.children_list.append(child)\n    self.children_list.sort(key=lambda x: x.name)\n    return child\n\n", "CodeBleu_score": 41.49833514365837}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\tresult = {\n        \"account\": account,\n        \"dates\": dates,\n        \"balances\": [0 for _ in range(len(dates))]\n    }\n    root_type = account.split(\":\")[0]\n    for entry in gl_entries:\n        if entry[\"account\"] == account:\n            if root_type == \"Asset\" or root_type == \"Expense\":\n                result[\"balances\"][dates.index(entry[\"date\"])] += entry[\"amount\"]\n            else:\n                result[\"balances\"][dates.index(entry[\"date\"])] -= entry[\"amount\"]\n    if root_type == \"Asset\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n    elif root_type == \"Liability\" or root_type == \"Equity\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n    return result\n\n", "CodeBleu_score": 24.26865858267835}, {"code": "def build_result(account, dates, gl_entries)\n\t# Initialize the result with the dates and zero balances.\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates)\n    }\n\n    # Determine the account's root type.\n    root_type = account[\"root_type\"]\n\n    # Iterate through the entries.\n    for entry in gl_entries:\n\n        # Determine whether the entry is relevant.\n        if entry[\"account\"] == account[\"name\"]:\n\n            # Determine the index for the date.\n            date_index = dates.index(entry[\"date\"])\n\n            # Update the balance.\n            result[\"balances\"][date_index] += entry[\"amount\"]\n\n    # If the root type is not \"Asset\" or \"Expense,\" negate the balances.\n    if root_type != \"Asset\" and root_type != \"Expense\":\n        for i in range(len(result[\"balances\"])):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n\n    # If the root type is \"Asset,\" \"Liability,\" or \"Equity,\" accumulate the balances.\n    if root_type == \"Asset\" or root_type == \"Liability\" or root_type == \"Equity\":\n        for i in range(1, len(result[\"balances\"])):\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n\n    # Return the result.\n    return result", "CodeBleu_score": 26.53712113816651}, {"code": "def build_result(account, dates, gl_entries)\n\tresult = {}\n    result[\"dates\"] = dates\n    result[\"balances\"] = [0] * len(dates)\n    root_type = account.root_type\n    for entry in gl_entries:\n        if entry.account.id == account.id:\n            date_index = dates.index(entry.date)\n            result[\"balances\"][date_index] += entry.amount\n    if root_type != \"Asset\":\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        result[\"balances\"] = [sum(result[\"balances\"][:i + 1]) for i in range(len(result[\"balances\"]))]\n    return result\n\n", "CodeBleu_score": 28.57645817622203}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\tif self.account_type in (\"Receivable\", \"Payable\") and self.account_type != self.old_account_type:\n        self.account_type = self.old_account_type\n        self.account_type_before_save = self.old_account_type\n        frappe.throw(_(\"Account Type cannot be changed for Receivable or Payable Accounts\"))", "CodeBleu_score": 18.79208077107755}, {"code": "def validate_receivable_payable_account_type(self)\n\tif self.type in ('Receivable', 'Payable') and self.type != self.old_type:\n        if self.account_entries:\n            self.add_comment(_('This account has existing general ledger entries. Changing the account type to a non-receivable/payable type may cause issues in the \"Accounts\" report. Please check the report for any potential issues.'))\n\n", "CodeBleu_score": 18.400780237254345}, {"code": "def validate_receivable_payable_account_type(self)\n\tif self.account_type != \"Receivable\" and self.account_type != \"Payable\":\n        if frappe.db.get_value(\"Account\", self.name, \"account_type\") in [\"Receivable\", \"Payable\"]:\n            if frappe.db.sql(\"\"\"select name from `tabGL Entry` where account = %s and is_cancelled = 0\"\"\", self.name):\n                frappe.msgprint(\n                    \"\"\"Warning: Changing the account type of this account will have an impact on the Accounts Report. To know more, click <a href=\"#Form/Account%20Settings\">here</a>\"\"\",\n                    alert=True,\n                )\n                self.add_comment(\n                    \"Comment\",\n                    _(\"Account Type changed from Receivable/Payable to {0}\").format(self.account_type),\n                )", "CodeBleu_score": 27.018508074173464}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t# Check if the account already has a currency\n    if self.currency:\n        self.currency_explicitly_specified = True\n        return\n\n    # Check if the account has any general ledger entries\n    if self.account_type == 'Expense' or self.account_type == 'Income':\n        if self.account_type == 'Expense':\n            entries = frappe.get_all('GL Entry', filters={'expense_account': self.name})\n        else:\n            entries = frappe.get_all('GL Entry', filters={'income_account': self.name})\n        if entries:\n            # If the account has entries, check if the company has a default currency\n            if self.company:\n                company = frappe.get_doc('Company', self.company)\n                if company.default_currency:\n                    self.currency = company.default_currency\n                    self.currency_explicitly_specified = False\n                    return\n                else:\n                    frappe.throw('Company {0} has no default currency. Please specify a currency for the account {1}'.format(self.company, self.name))\n            else:\n                frappe.throw('Account {0} has general ledger entries, but no company is specified. Please specify a company for the account {0}'.format(self.name))\n        else:\n            # If the account has no entries, assign the company's default currency\n            if self.company:\n                company = frappe.get_doc('Company', self.company)\n                if company.default_currency:\n                    self.currency = company.default_currency\n                    self.currency_explicitly_specified = False\n                    return\n                else:\n                    frappe.throw('Company {0} has no default currency. Please specify a currency for the account {1}'.format(self.company, self.name))\n            else:\n                frappe.throw('Account {0} has no general ledger entries and no company is specified. Please specify a company for the account {0}'.format(self.name))\n    else:\n        # If the account is not an expense or income account, assign the company's default currency", "CodeBleu_score": 35.701151683814714}, {"code": "def validate_account_currency(self)\n\tif not self.currency:\n        self.currency = self.company.currency\n        self.currency_set_explicitly = False\n    else:\n        self.currency_set_explicitly = True\n\n    if self.currency != self.company.currency:\n        # check if there are any existing ledger entries with a different currency\n        entries = frappe.db.sql(\"\"\"\n            SELECT name\n            FROM `tabGL Entry`\n            WHERE account = %(account)s\n            AND currency != %(currency)s\n            AND docstatus = 1\n        \"\"\", {\n            'account': self.name,\n            'currency': self.currency,\n        })\n        if entries:\n            raise frappe.ValidationError(f\"The account currency {self.currency} differs from the currency of existing ledger entries {[entry[0] for entry in entries]}.\")\n\n\n", "CodeBleu_score": 34.7876567916321}, {"code": "def validate_account_currency(self)\n\tif self.currency:\n        self.currency = self.currency\n        self.currency_is_default = False\n    else:\n        self.currency = self.company.default_currency\n        self.currency_is_default = True\n\n    if self.currency != self.company.default_currency:\n        self.validate_currency_with_entries()\n\n", "CodeBleu_score": 20.027273699207843}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\taggregated_entries = {}\n\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key].update(\n                {\n                    \"debit\": flt(aggregated_entries[key][\"debit\"])\n                    + flt(entry.get(\"debit\")),\n                    \"credit\": flt(aggregated_entries[key][\"credit\"])\n                    + flt(entry.get(\"credit\")),\n                    \"debit_in_account_currency\": flt(\n                        aggregated_entries[key][\"debit_in_account_currency\"]\n                    )\n                    + flt(entry.get(\"debit_in_account_currency\")),\n                    \"credit_in_account_currency\": flt(\n                        aggregated_entries[key][\"credit_in_account_currency\"]\n                    )\n                    + flt(entry.get(\"credit_in_account_currency\")),\n                }\n            )\n        else:\n            aggregated_entries[key] = {\n                \"debit\": flt(entry.get(\"debit\")),\n                \"credit\": flt(entry.get(\"credit\")),\n                \"debit_in_account_currency\": flt(entry.get(\"debit_in_account_currency\")),\n                \"credit_in_account_currency\": flt(\n                    entry.get(\"credit_in_account_currency\")\n                ),\n            }\n            aggregated_entries[key].update(key_values)\n\n    return aggregated_entries\n\n", "CodeBleu_score": 37.47791135326947}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t# Initialize a dictionary to merge entries\n    aggregated_entries = {}\n\n    # Iterate through each entry to generate a unique key and corresponding values\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        # If the key is not present in the dictionary, initialize the key with the current entry\n        if key not in aggregated_entries:\n            aggregated_entries[key] = entry\n        # If the key is already present in the dictionary, update the debit, credit, and their respective amounts in account currency\n        else:\n            aggregated_entries[key][\"debit\"] += entry.get(\"debit\")\n            aggregated_entries[key][\"credit\"] += entry.get(\"credit\")\n            aggregated_entries[key][\"debit_in_account_currency\"] += entry.get(\"debit_in_account_currency\")\n            aggregated_entries[key][\"credit_in_account_currency\"] += entry.get(\"credit_in_account_currency\")\n            aggregated_entries[key][\"total_debit_in_account_currency\"] += entry.get(\"total_debit_in_account_currency\")\n            aggregated_entries[key][\"total_credit_in_account_currency\"] += entry.get(\"total_credit_in_account_currency\")\n\n    return aggregated_entries\n\n", "CodeBleu_score": 44.45553034567759}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\taggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key in aggregated_entries:\n            aggregated_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n            aggregated_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n            aggregated_entries[key][\"debit_in_account_currency\"] += flt(\n                entry.get(\"debit_in_account_currency\")\n            )\n            aggregated_entries[key][\"credit_in_account_currency\"] += flt(\n                entry.get(\"credit_in_account_currency\")\n            )\n        else:\n            aggregated_entries[key] = {\n                \"account\": cstr(entry.get(\"account\")),\n                \"account_currency\": cstr(entry.get(\"account_currency\")),\n                \"cost_center\": cstr(entry.get(\"cost_center\")),\n                \"project\": cstr(entry.get(\"project\")),\n                \"debit\": flt(entry.get(\"debit\")),\n                \"credit\": flt(entry.get(\"credit\")),\n                \"debit_in_account_currency\": flt(entry.get(\"debit_in_account_currency\")),\n                \"credit_in_account_currency\": flt(entry.get(\"credit_in_account_currency\")),\n                \"is_opening\": cstr(entry.get(\"is_opening\")),\n                \"company\": cstr(entry.get(\"company\")),\n                \"finance_book\": cstr(entry.get(\"finance_book\")),\n                \"is_period_closing_voucher_entry\": cint(entry.get(\"is_period_closing_voucher_entry\")),\n            }\n\n            for dimension in accounting_dimensions:\n                aggregated_entries[key][dimension] = key_values[dimension]\n\n    return aggregated_entries\n\n", "CodeBleu_score": 35.98078903927764}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.is_invoice:\n        supplier = self.partner_id\n    else:\n        supplier = self.partner_id.commercial_partner_id\n    if supplier.supplier_rank == 'blocked':\n        if self.is_invoice:\n            hold_type = 'invoice'\n        else:\n            hold_type = 'payment'\n        if supplier.block_level == hold_type:\n            if supplier.block_date:\n                if supplier.block_date < date.today():\n                    supplier.supplier_rank = '0'\n                    supplier.block_level = False\n                    supplier.block_date = False\n                    supplier.block_reason = False\n                else:\n                    raise UserError(_('Supplier %s is on hold until %s. You cannot proceed with this operation.') % (supplier.name, supplier.block_date))\n            else:\n                raise UserError(_('Supplier %s is on hold. You cannot proceed with this operation.') % (supplier.name))", "CodeBleu_score": 26.55024092030262}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.type in (\"in_invoice\", \"in_refund\"):\n        supplier = self.partner_id\n    elif self.type in (\"out_invoice\", \"out_refund\"):\n        supplier = self.invoice_partner_id\n    else:\n        return\n    if supplier.supplier_rank == 'blocked':\n        if supplier.block_date:\n            if self.type in (\"in_invoice\", \"in_refund\"):\n                if supplier.block_type == 'invoice':\n                    if supplier.block_date > self.date:\n                        raise UserError(_('The supplier %s is currently on hold and cannot receive any invoices before %s') % (supplier.name, supplier.block_date))\n            elif self.type in (\"out_invoice\", \"out_refund\"):\n                if supplier.block_type == 'refund':\n                    if supplier.block_date > self.date:\n                        raise UserError(_('The supplier %s is currently on hold and cannot receive any refunds before %s') % (supplier.name, supplier.block_date))\n\n\n", "CodeBleu_score": 23.722162656060426}, {"code": "def ensure_supplier_is_not_blocked(self)\n\tif self.is_supplier_blocked():\n        supplier_info = self.get_supplier_info()\n        if supplier_info['hold_type'] == 'invoice' and self.type in ['in_invoice', 'in_refund']:\n            if supplier_info['release_date'] > self.date:\n                raise UserError(\n                    _('The supplier is blocked. Please check the supplier status.')\n                )\n        elif supplier_info['hold_type'] == 'payment' and self.type in ['in_refund', 'in_payment']:\n            if supplier_info['release_date'] > self.date:\n                raise UserError(\n                    _('The supplier is blocked. Please check the supplier status.')\n                )\n\n", "CodeBleu_score": 24.899360307615552}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = frappe.get_all(\n        \"Repost Doctype\",\n        filters={\"voucher_type\": self.doctype},\n        fields=[\"name\", \"parent_doctype\", \"parent_field\"],\n    )\n\n    for repost_doctype in repost_doctypes:\n        repost_vouchers = frappe.get_all(\n            repost_doctype.parent_doctype,\n            filters={\n                repost_doctype.parent_field: [\n                    \"in\",\n                    [\n                        frappe.get_cached_value(\n                            \"Repost Voucher\",\n                            {\"parent\": d.name},\n                            \"voucher_no\",\n                        )\n                        for d in frappe.get_all(\n                            \"Repost Voucher\",\n                            filters={\n                                \"parenttype\": repost_doctype.name,\n                                \"voucher_type\": self.doctype,\n                                \"voucher_no\": self.name,\n                            },\n                        )\n                    ],\n                ]\n            },\n            fields=[\"name\", repost_doctype.parent_field],\n        )\n\n        repost_vouchers_map = {}\n        for repost_voucher in repost_vouchers:\n            repost_vouchers_map.setdefault(\n                repost_voucher.get(repost_doctype.parent_field), []\n            ).append(repost_voucher)\n\n        for parent, repost_vouchers in repost_vouchers_map.items():\n            parent_doc = frappe.get_doc(\n                repost_doctype.parent_doctype, parent\n            )\n            if parent_doc.get(\"repost_vouchers\"):\n                for repost_voucher in repost_vouchers:\n                    parent_doc.repost_vouchers = [\n                        d\n                        for d in parent_doc.repost_vouchers\n                        if d.", "CodeBleu_score": 17.188147919855982}, {"code": "def _remove_references_in_repost_doctypes(self)\n\trepost_doctypes = frappe.get_all(\"Repost Item\", filters={\"voucher_type\": self.doctype}, fields=[\"name\", \"parent_doctype\", \"parent_field\"])\n    for repost_doctype in repost_doctypes:\n        repost_rows = frappe.get_all(repost_doctype.name, filters={\"voucher_type\": self.doctype, \"voucher_no\": self.name}, fields=[\"name\", \"parent\", \"parenttype\", \"parentfield\"])\n        if repost_rows:\n            parent_map = {}\n            for row in repost_rows:\n                parent_map.setdefault(row.parenttype, {}).setdefault(row.parent, []).append(row)\n            for parenttype, parent_rows in parent_map.items():\n                for parent, rows in parent_rows.items():\n                    parent_doc = frappe.get_doc(parenttype, parent)\n                    if parent_doc.doctype == \"Repost Item\":\n                        parent_doc.flags.ignore_validate = True\n                        parent_doc.flags.ignore_links = True\n                        parent_doc.flags.ignore_mandatory = True\n                        parent_doc.flags.ignore_validate_update_after_submit = True\n                        parent_doc.set(repost_doctype.parent_field, [])\n                        parent_doc.save()\n                    else:\n                        parent_doc.flags.ignore_validate = True\n                        parent_doc.flags.ignore_links = True\n                        parent_doc.flags.ignore_mandatory = True\n                        parent_doc.flags.ignore_validate_update_after_submit = True\n                        parent_doc.set(repost_doctype.parent_field, [])\n                        parent_doc.save()\n                        parent_doc.reload()\n                        parent_doc.run_method(\"on_update\")\n\n", "CodeBleu_score": 19.743538067497287}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t# Get the list of repost doctypes\n    repost_doctypes = frappe.get_all(\"Repost Item\", fields=[\"parent\"], filters={\"voucher_type\": self.doctype, \"voucher_no\": self.name})\n    if not repost_doctypes:\n        return\n\n    # Get the map of parent doctype and parent name to rows\n    rows_by_parent = {}\n    for row in repost_doctypes:\n        parent_doctype = row.parent\n        parent_name = frappe.db.get_value(parent_doctype, {\"repost_vouchers\": [\"like\", \"%{}%\".format(self.name)]})\n        if parent_name:\n            rows_by_parent.setdefault(parent_doctype, {})[parent_name] = row\n\n    # Remove the reposts from each parent\n    for parent_doctype, parent_map in rows_by_parent.items():\n        for parent_name, row in parent_map.items():\n            parent = frappe.get_doc(parent_doctype, parent_name)\n            if row.parentfield == \"repost_vouchers\":\n                parent.repost_vouchers = [voucher for voucher in parent.repost_vouchers if voucher != self.name]\n            else:\n                parent.vouchers = [voucher for voucher in parent.vouchers if voucher != self.name]\n            parent.flags.ignore_validate_update_after_submit = True\n            parent.flags.ignore_links = True\n            parent.save()\n", "CodeBleu_score": 26.953249854153288}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.auth()\n        transactions = []\n        total_transactions = 0\n        offset = 0\n        while True:\n            response = self.client.Transactions.get(\n                self.access_token,\n                start_date=start_date,\n                end_date=end_date,\n                account_ids=account_id,\n                count=500,\n                offset=offset,\n            )\n            total_transactions = response[\"total_transactions\"]\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= total_transactions:\n                break\n            offset += 500\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.throw(_(\"Your Plaid account is not connected.\"))\n        else:\n            frappe.throw(_(str(e)))\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            frappe.throw(_(\"Plaid is currently undergoing maintenance.\"))\n        else:\n            frappe.throw(_(str(e)))\n    except requests.Timeout:\n        frappe.throw(_(\"The request timed out.\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transaction retrieval error\")\n        frappe.throw(_(str(e)), title=_(\"Transaction Retrieval Failed\"))\n\n", "CodeBleu_score": 41.59304043874793}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.auth()\n        transactions = []\n        transactions_count = 0\n        transactions_total = 1\n        offset = 0\n        while transactions_count < transactions_total:\n            try:\n                response = self.client.Transactions.get(\n                    self.access_token,\n                    start_date=start_date,\n                    end_date=end_date,\n                    account_ids=[account_id] if account_id else None,\n                    count=500,\n                    offset=offset,\n                )\n            except ItemError as e:\n                if e.code == \"ITEM_LOGIN_REQUIRED\":\n                    pass\n            except APIError as e:\n                if e.code == \"PLANNED_MAINTENANCE\":\n                    pass\n            except requests.Timeout:\n                pass\n            except Exception as e:\n                frappe.log_error(\"Plaid: Transactions error\")\n                frappe.throw(_(str(e)), title=_(\"Transactions Failed\"))\n            transactions_count = len(response[\"transactions\"])\n            transactions_total = response[\"total_transactions\"]\n            offset += transactions_count\n            transactions += response[\"transactions\"]\n        return transactions\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transactions error\")\n        frappe.throw(_(str(e)), title=_(\"Transactions Failed\"))\n\n", "CodeBleu_score": 40.33513732567723}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\ttry:\n        self.auth()\n        transactions = []\n        total_transactions = 0\n        offset = 0\n        while True:\n            response = self.client.Transactions.get(\n                self.access_token,\n                start_date=start_date,\n                end_date=end_date,\n                options={\n                    \"account_ids\": [account_id] if account_id else None,\n                    \"count\": 500,\n                    \"offset\": offset,\n                },\n            )\n            transactions.extend(response[\"transactions\"])\n            total_transactions = response[\"total_transactions\"]\n            if len(transactions) >= total_transactions:\n                break\n            offset += 500\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            raise\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            raise\n    except requests.Timeout:\n        raise\n    except Exception as e:\n        frappe.log_error(\"Plaid: Transaction retrieval error\")\n        frappe.throw(_(str(e)), title=_(\"Transaction Retrieval Failed\"))\n\n", "CodeBleu_score": 44.093319251322235}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\ttry:\n        institution_id = response[\"institution\"][\"institution_id\"]\n        institution_name = response[\"institution\"][\"name\"]\n        access_token = plaid_connector.get_access_token(token)\n        bank_record = frappe.db.get_value(\"Bank\", {\"institution_id\": institution_id})\n        if bank_record is None:\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution_id = institution_id\n            bank.institution_name = institution_name\n            bank.access_token = access_token\n            bank.insert(ignore_permissions=True)\n        else:\n            bank = frappe.get_doc(\"Bank\", bank_record)\n            bank.access_token = access_token\n            bank.save(ignore_permissions=True)\n    except Exception as e:\n        frappe.log_error(\"Plaid: Error adding institution\", e)\n\n", "CodeBleu_score": 39.81980819763463}, {"code": "def add_institution(token, response)\n\ttry:\n        institution_id = response[\"institution\"][\"institution_id\"]\n        institution_name = response[\"institution\"][\"name\"]\n        access_token = plaid_connector.get_access_token(token)\n        bank = frappe.db.exists(\n            \"Bank\", {\"plaid_institution_id\": institution_id}\n        )\n        if bank:\n            bank = frappe.get_doc(\"Bank\", bank)\n            bank.plaid_access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"plaid_institution_id\": institution_id,\n                    \"plaid_access_token\": access_token,\n                    \"bank_name\": institution_name,\n                }\n            )\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(\n            \"Plaid: Error while adding institution. Error: {0}\".format(e)\n        )\n\n", "CodeBleu_score": 48.81393677670332}, {"code": "def add_institution(token, response)\n\ttry:\n        institution = response[\"institution\"]\n        name = institution[\"name\"]\n        institution_id = institution[\"institution_id\"]\n        access_token = plaid_connector.get_access_token(token)\n        bank = frappe.db.get_value(\"Bank\", {\"name\": name})\n        if bank:\n            bank = frappe.get_doc(\"Bank\", bank)\n            bank.plaid_access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"name\": name,\n                    \"plaid_access_token\": access_token,\n                    \"plaid_institution_id\": institution_id,\n                }\n            )\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(\"Plaid: Error adding bank\", exc_info=True)\n\n", "CodeBleu_score": 50.07111207126642}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\tlast_integration_date = frappe.db.get_value(\"Bank\", bank, \"last_integration_date\")\n    end_date = today()\n    start_date = add_days(end_date, -30) if not last_integration_date else last_integration_date\n\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    if transactions:\n        new_transactions = []\n        for transaction in transactions:\n            new_transactions += new_bank_transaction(transaction)\n\n        frappe.db.set_value(\"Bank\", bank, \"last_integration_date\", start_date)\n\n        frappe.log_error(\n            message=_(\"{} new bank transactions added.\").format(len(new_transactions)),\n            title=_(\"Bank Transactions Synced\"),\n        )\n    else:\n        frappe.log_error(\n            message=_(\"No new bank transactions found.\"), title=_(\"Bank Transactions Synced\")\n        )\n\n", "CodeBleu_score": 33.19284960141105}, {"code": "def sync_transactions(bank, bank_account)\n\t# Get the last integration date\n    last_integration_date = frappe.db.get_value(\"Bank\", bank, \"last_integration_date\")\n\n    # Set the start date to the last integration date\n    start_date = last_integration_date\n\n    # Set the end date to today\n    end_date = today()\n\n    # Get the transactions\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions.append(new_bank_transaction(transaction))\n\n    # Update the last integration date\n    if transactions:\n        last_integration_date = getdate(transactions[0][\"date\"])\n\n    frappe.db.set_value(\"Bank\", bank, \"last_integration_date\", last_integration_date)\n\n    # Log the number of new transactions added\n    msg = _(\"{} new transactions added for bank {}.\").format(len(new_transactions), bank) + \" \"\n    msg += _(\"Last integration date set to {}.\").format(last_integration_date)\n    frappe.log_error(message=msg, title=_(\"Plaid Transaction Sync\"))\n\n    return new_transactions\n", "CodeBleu_score": 35.98271547567802}, {"code": "def sync_transactions(bank, bank_account)\n\t# Get the last integration date for the specified bank and bank account\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    # Determine the start and end dates for the transaction retrieval\n    start_date = (\n        getdate(last_integration_date)\n        if last_integration_date\n        else add_days(getdate(nowdate()), -14)\n    )\n    end_date = add_days(getdate(nowdate()), -1)\n\n    # Get the transactions for the specified bank account\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions into new bank transactions\n    new_transactions = []\n    for transaction in transactions:\n        new_transactions += new_bank_transaction(transaction)\n\n    # Update the last integration date\n    if transactions:\n        frappe.db.set_value(\n            \"Bank Account\",\n            bank_account,\n            \"last_integration_date\",\n            getdate(transactions[0][\"date\"]),\n        )\n\n    # Log the number of new transactions added\n    if new_transactions:\n        frappe.log_error(\n            message=_(\"{} new transactions added.\").format(len(new_transactions)),\n            title=_(\"Bank Transactions Synced\"),\n        )\n\n    # Handle any exceptions\n    except Exception as e:\n        frappe.log_error(message=e, title=_(\"Bank Transactions Sync Error\"))\n\n", "CodeBleu_score": 32.307652798729094}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\tquery_uri = self._get_query_uri(entity)\n    total_entries = self._get_total_entries(query_uri)\n    if total_entries:\n        self._publish(\n            {\n                \"event\": \"progress\",\n                \"message\": _(\"Fetching {0}\").format(entity),\n                \"count\": 0,\n                \"total\": total_entries,\n            }\n        )\n        start_position = 1\n        while start_position <= total_entries:\n            try:\n                response = self._get(\n                    f\"{self.api_url}/query?query={query_uri}&minorversion={self.minorversion}\",\n                    headers={\n                        \"Accept\": \"application/json\",\n                        \"Authorization\": f\"Bearer {self.access_token}\",\n                    },\n                )\n                response.raise_for_status()\n                entries = response.json()[\"QueryResponse\"][f\"{entity}\"]\n                self._preprocess_entries(entity, entries)\n                self._save_entries(entity, entries)\n                start_position += 1000\n            except Exception as exc:\n                self._log_error(exc, response.text)\n                raise exc\n\n", "CodeBleu_score": 32.52935875711939}, {"code": "def _migrate_entries(self, entity)\n\tquery_uri = f\"{self.quickbooks_base_url}/company/{self.realm_id}/query?query=select * from {entity}\"\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        total = response.json().get(\"totalCount\")\n        self._publish({\"event\": \"progress\", \"message\": _(\"Total {0}\").format(entity), \"count\": total})\n        for start_position in range(0, total, 1000):\n            query_uri = f\"{self.quickbooks_base_url}/company/{self.realm_id}/query?query=select * from {entity} STARTPOSITION {start_position} MAXRESULTS 1000\"\n            response = self._get(query_uri)\n            if response.status_code == 200:\n                entries = response.json().get(\"QueryResponse\").get(\"{0}Ret\".format(entity))\n                if entries:\n                    self._preprocess_entries(entity, entries)\n                    self._save_entries(entity, entries)\n            else:\n                self._log_error(response.text)\n    else:\n        self._log_error(response.text)\n\n", "CodeBleu_score": 25.82768690918746}, {"code": "def _migrate_entries(self, entity)\n\tquery_uri = f\"{self.base_url}/company/{self.realm_id}/query?query=select * from {entity}\"\n    response = self._get(query_uri)\n    if response.status_code == 200:\n        total = response.json().get(\"totalCount\")\n        if total:\n            self._publish(\n                {\n                    \"event\": \"progress\",\n                    \"message\": _(\"Migrating {0}\").format(entity),\n                    \"count\": 0,\n                    \"total\": total,\n                }\n            )\n            offset = 0\n            while offset < total:\n                query = f\"{query_uri}&minorversion=53&page={offset + 1}&pagesize=1000\"\n                response = self._get(query)\n                if response.status_code == 200:\n                    entries = response.json().get(\"QueryResponse\").get(entity)\n                    entries = self._preprocess_entries(entity, entries)\n                    self._save_entries(entity, entries)\n                else:\n                    self._log_error(response.text)\n                offset += 1000\n        else:\n            self._publish({\"event\": \"progress\", \"message\": _(\"No {0} found\").format(entity)})\n    else:\n        self._log_error(response.text)\n\n", "CodeBleu_score": 31.380697526503493}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\ttry:\n        quickbooks_id = self._get_quickbooks_id(invoice[\"Id\"])\n        if invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\":\n            self._save_sales_invoice(invoice, quickbooks_id)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"ItemBasedExpenseLineDetail\":\n            self._save_expense_invoice(invoice, quickbooks_id)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\":\n            self._save_expense_invoice(invoice, quickbooks_id)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SubTotalLineDetail\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"DiscountLineDetail\":\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SalesItemLineDetail\" and invoice[\"PaymentRefNum\"]:\n            self._save_sales_invoice(invoice, quickbooks_id, is_pos=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"ItemBasedExpenseLineDetail\" and invoice[\"PaymentRefNum\"]:\n            self._save_expense_invoice(invoice, quickbooks_id, is_pos=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"AccountBasedExpenseLineDetail\" and invoice[\"PaymentRefNum\"]:\n            self._save_expense_invoice(invoice, quickbooks_id, is_pos=True)\n        elif invoice[\"Line\"][0][\"DetailType\"] == \"SubTotalLineDetail\" and invoice[\"PaymentRefNum\"]:\n            self._save_sales_invoice(invoice, quickbooks_id, is_return=True, is_pos=True)\n        elif invoice[\"Line\"][0][\"Detail", "CodeBleu_score": 33.02606029467301}, {"code": "def _save_invoice(self, invoice)\n\ttry:\n        if not frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            quickbooks_id = invoice[\"Id\"]\n            is_return = invoice[\"DocNumber\"].startswith(\"R\")\n            is_pos = invoice[\"DocNumber\"].startswith(\"POS\")\n            linked_transactions = self.quickbooks_instance.get_linked_transactions(\n                invoice[\"Id\"],\n                self.start_date,\n                self.end_date,\n            )\n            if not linked_transactions:\n                self._save_sales_invoice(\n                    invoice, quickbooks_id, is_return=is_return, is_pos=is_pos\n                )\n            else:\n                self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice, linked_transactions])\n", "CodeBleu_score": 37.31904318181612}, {"code": "def _save_invoice(self, invoice)\n\ttry:\n        quickbooks_id = self._get_quickbooks_id(invoice)\n        if not frappe.db.exists(\n            {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": quickbooks_id, \"company\": self.company}\n        ):\n            invoice_dict = {\n                \"doctype\": \"Sales Invoice\",\n                \"quickbooks_id\": quickbooks_id,\n                # Quickbooks uses ISO 4217 Code\n                # of course this gonna come back to bite me\n                \"currency\": invoice[\"CurrencyRef\"][\"value\"],\n                # Exchange Rate is provided if multicurrency is enabled\n                # It is not provided if multicurrency is not enabled\n                \"conversion_rate\": invoice.get(\"ExchangeRate\", 1),\n                \"posting_date\": invoice[\"TxnDate\"],\n                # QuickBooks doesn't make Due Date a mandatory field this is a hack\n                \"due_date\": invoice.get(\"DueDate\", invoice[\"TxnDate\"]),\n                \"customer\": frappe.get_all(\n                    \"Customer\",\n                    filters={\n                        \"quickbooks_id\": invoice[\"CustomerRef\"][\"value\"],\n                        \"company\": self.company,\n                    },\n                )[0][\"name\"],\n                \"items\": self._get_si_items(invoice),\n                \"taxes\": self._get_taxes(invoice),\n                # Do not change posting_date upon submission\n                \"set_posting_time\": 1,\n                # QuickBooks doesn't round total\n                \"disable_rounded_total\": 1,\n                \"company\": self.company,\n            }\n            discount = self._get_discount(invoice[\"Line\"])\n            if discount:\n                if invoice[\"ApplyTaxAfterDiscount\"]:\n                    invoice_dict[\"apply_discount_on\"] = \"Net Total\"\n                else:\n                    invoice_dict[\"apply_discount_on\"] = \"Grand Total\"\n                invoice_dict[\"discount_amount\"] = discount[\"Amount\"]", "CodeBleu_score": 28.26641297440252}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# Get the holiday list for the salesperson\n    employee = frappe.db.get_value(\"Sales Person\", sales_person, \"employee\")\n    if employee:\n        holiday_list = get_holiday_list_for_employee(employee)\n    else:\n        holiday_list = frappe.get_cached_value(\"Company\", self.company, \"default_holiday_list\")\n\n    # Get the holidays for the holiday list\n    holidays = frappe.db.sql_list(\n        \"\"\"select holiday_date from `tabHoliday` where parent=%s\"\"\", holiday_list\n    )\n\n    # Get the number of days between the start and end date\n    no_of_days = date_diff(end_date, start_date)\n\n    # Calculate the interval between visits\n    interval = no_of_days // no_of_visit\n\n    # Create a list of schedule dates\n    schedule_list = []\n    schedule_date = start_date\n    for i in range(no_of_visit):\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n\n    # Adjust the schedule dates to avoid holidays\n    for i in range(no_of_visit):\n        if schedule_list[i] in holidays:\n            schedule_list[i] = add_days(schedule_list[i], -1)\n\n    return schedule_list", "CodeBleu_score": 40.83148655504713}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\tif start_date and end_date:\n        if start_date > end_date:\n            frappe.throw(\n                _(\"Start Date cannot be greater than End Date\")\n            )\n\n        schedule_date = start_date\n        schedule_dates = []\n        interval = 0\n\n        if no_of_visit > 1:\n            interval = (\n                date_diff(end_date, start_date) / (no_of_visit - 1)\n            ).days\n\n        for _i in range(no_of_visit):\n            schedule_date = add_days(schedule_date, interval)\n            schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n            schedule_dates.append(schedule_date)\n\n        return schedule_dates\n\n    return []\n", "CodeBleu_score": 36.33333874670336}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t# Get the interval between visits\n    interval = get_interval(start_date, end_date, no_of_visit)\n\n    # Create a list of dates to schedule\n    schedule_list = []\n    schedule_date = start_date\n    while schedule_date <= end_date:\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n\n    # Adjust dates to avoid holidays\n    adjusted_schedule_list = []\n    for schedule_date in schedule_list:\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        adjusted_schedule_list.append(schedule_date)\n\n    return adjusted_schedule_list\n\n", "CodeBleu_score": 26.50189317100099}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n        $handle = $this->actions[$method]['handle'] ?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n            'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n        return response()->json([\n            'success' => true,\n            'error' => false,\n            'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 96.98208134766686}, {"code": "<?\n   public function response($view, $data = []){\n\t$method = request()->get('handle', 'edit');\n\n    $handle = $this->actions[$method]['handle'] ?? 'update';\n    $url = route('bulk-actions.action', $this->path);\n\n    $html = view('components.index.bulkaction.modal', [\n        'url' => $url,\n        'handle' => $handle,\n        'selected' => $data['selected'] ?? $this->getSelectedInput(request()),\n        'html' => view($view, $data)->render(),\n    ])->render();\n\n    return response()->json([\n        'success' => true,\n        'error' => false,\n        'message' => '',\n        'data' => [\n            'title' => $this->findTranslation($this->text),\n            'path' => $url,\n            'handle' => $handle,\n        ],\n        'html' => $html,\n    ]);\n}", "CodeBleu_score": 99.37966003017856}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n    foreach ($contacts as $contact) {\n        try {\n            $contact->delete();\n        } catch (Exception $e) {\n            $this->showError($e);\n        }\n    }\n}", "CodeBleu_score": 52.16076975260672}, {"code": "<?\npublic function deleteContacts($request){\n\t$contacts = $this->getSelectedRecords($request);\n\n    foreach ($contacts as $contact) {\n        try {\n            $contact->delete();\n        } catch (\\Exception $e) {\n            $this->showError(\"Unable to delete contact \" . $contact->name . \". \" . $e->getMessage());\n        }\n    }\n}", "CodeBleu_score": 59.38937885397992}, {"code": "<?\npublic function deleteContacts($request){\n\t$selectedContacts = $this->getSelectedRecords($request);\n\n    foreach ($selectedContacts as $contact) {\n        try {\n            $contact->delete();\n        } catch (\\Exception $e) {\n            $this->showErrorMessage($e->getMessage());\n        }\n    }\n}", "CodeBleu_score": 57.09095406766941}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach($transactions as $transaction) {\n        try {\n            dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash()->error($e->getMessage());\n        }\n    }\n}", "CodeBleu_score": 60.14622064047445}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach($transactions as $transaction) {\n        try {\n            $transaction->delete();\n        } catch(\\Exception $e) {\n            flash($e->getMessage())->error();\n        }\n    }\n}", "CodeBleu_score": 53.98681720038141}, {"code": "<?\npublic function deleteTransactions($request){\n\t$transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $transaction->delete();\n        } catch (Exception $e) {\n            flash()->error($e->getMessage());\n        }\n    }\n}", "CodeBleu_score": 54.57965962276441}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\tif (!$this->shouldValidate()) {\n        return;\n    }\n\n    $this->validator = $validator;\n\n    $this->addRulesToValidator();\n\n    $this->addCustomAttributesToValidator();\n\n    $this->addCustomValuesToValidator();\n\n    $this->addCustomMessagesToValidator();\n\n    $this->addCustomAttributesToMessageBag();\n\n    $this->addCustomMessagesToMessageBag();\n\n    $this->addCustomValuesToMessageBag();\n\n    $this->addCustomAttributesToRequest();\n\n    $this->addCustomMessagesToRequest();\n\n    $this->addCustomValuesToRequest();\n\n    $this->addCustomAttributesToErrorBag();\n\n    $this->addCustomMessagesToErrorBag();\n\n    $this->addCustomValuesToErrorBag();\n}", "CodeBleu_score": 19.81641450006552}, {"code": "<?\npublic function withValidator($validator){\n\t$validator->after(function ($validator) {\n        if ($validator->fails()) {\n            $this->throwValidationException($validator);\n        }\n    });\n}", "CodeBleu_score": 13.772340364431493}, {"code": "<?\npublic function withValidator($validator){\n\t$validator->after(function ($validator) {\n        if ($validator->fails()) {\n            $this->throwValidationException($validator->errors());\n        }\n    });\n}", "CodeBleu_score": 11.897603439808373}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (!$this instanceof ShouldUpdate) {\n        throw new \\Exception('This instance does not implement the ShouldUpdate interface.');\n    }\n\n    if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n        $this->model = $arguments[0];\n    }\n\n    if (isset($arguments[1]) && $arguments[1] instanceof FormRequest) {\n        $this->request = $arguments[1];\n    }\n}", "CodeBleu_score": 51.152151512401545}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (!$this instanceof ShouldUpdate) {\n        return;\n    }\n\n    $model = $this->getModelInstance($arguments[0]);\n    $request = $this->getRequestInstance($arguments[1]);\n\n    $this->setModel($model);\n    $this->setRequest($request);\n}", "CodeBleu_score": 47.62344197362653}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif ($this instanceof ShouldUpdate) {\n        $this->setModel($arguments[0] ?? null);\n        $this->setRequest($arguments[1] ?? null);\n    }\n}", "CodeBleu_score": 20.040267540341443}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t// Check if the request expects a JSON response.\n \tif (request()->expectsJson() && !request()->is('api/*')) {\n\n \t\t// Retrieve the sorting parameter from the request.\n \t\t$sort = request()->sort ? request()->sort : $sort;\n\n \t\t// Apply search and sorting to the query.\n \t\t$query = $query->search(request()->search)->orderBy($sort);\n\n \t\t// Return all records.\n \t\treturn $query->get();\n\n \t} else {\n\n \t\t// Retrieve the sorting parameter from the request.\n \t\t$sort = request()->sort ? request()->sort : $sort;\n\n \t\t// Apply search and sorting to the query.\n \t\t$query = $query->search(request()->search)->orderBy($sort);\n\n \t\t// Return paginated results.\n \t\treturn $query->paginate(request()->limit ? request()->limit : 10);\n\n \t}\n\n }", "CodeBleu_score": 44.86271620428105}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$sort = $this->getSort($sort);\n     $search = $this->getSearch();\n     $query = $query->search($search)->orderBy($sort['column'], $sort['direction']);\n     if ($this->isJsonResponse()) {\n         return $query->get();\n     }\n     return $query->paginate($this->getLimit());\n }", "CodeBleu_score": 42.34186108329395}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t$sort = $this->getSort($sort);\n\n \tif($this->isApiRequest() && !$this->isJsonRequest()) {\n \t\t$this->setPerPage(100000);\n \t}\n\n \treturn $this->applySorting($query, $sort);\n }", "CodeBleu_score": 23.009460082449518}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n    $overdueAmount = 0;\n\n    if ($model->getStatus() === 'paid') {\n        return [$openAmount, $overdueAmount];\n    }\n\n    if ($model->getStatus() === 'partial') {\n        $payments = $model->getPayments();\n        foreach ($payments as $payment) {\n            $openAmount += $payment->getAmount();\n        }\n    }\n\n    if ($model->getStatus() === 'open') {\n        $openAmount += $model->getTotal();\n    }\n\n    if ($model->getStatus() === 'overdue') {\n        $openAmount += $model->getTotal();\n        $overdueAmount = $openAmount;\n    }\n\n    if ($model->getDueDate() < date('Y-m-d')) {\n        $overdueAmount = $openAmount;\n    }\n\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 40.42764145555549}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n    $overdueAmount = 0;\n    if ($model->getStatus() == 'paid') {\n        return [0, 0];\n    }\n    if ($model->getStatus() == 'partial') {\n        $openAmount = $model->getTotalAmount() - $model->getPaidAmount();\n    }\n    if ($model->getDueDate() < date('Y-m-d')) {\n        $overdueAmount = $openAmount;\n    }\n    return [$openAmount, $overdueAmount];\n}", "CodeBleu_score": 33.93576682713167}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$openAmount = 0;\n    $overdueAmount = 0;\n    $today = date_create();\n    $dueDate = date_create($model->dueDate);\n    $documentDate = date_create($model->documentDate);\n    $documentStatus = $model->documentStatus;\n\n    if ($documentStatus == 'paid') {\n        $openAmount = 0;\n        $overdueAmount = 0;\n    } elseif ($documentStatus == 'partial') {\n        foreach ($model->transactions as $transaction) {\n            $openAmount += $transaction->amount;\n        }\n        $overdueAmount = $openAmount;\n    } else {\n        $openAmount = $model->totalAmount;\n        $overdueAmount = $openAmount;\n    }\n\n    if ($today > $dueDate && $documentStatus != 'paid') {\n        $overdueAmount = $openAmount;\n    } elseif ($today < $dueDate && $documentStatus != 'paid') {\n        $overdueAmount = 0;\n    }\n\n    return array($openAmount, $overdueAmount);\n}", "CodeBleu_score": 41.968137783467384}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                    ? $this->forPage($page, $perPage)->get($columns)\n                    : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.41765687946244}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                    ? $this->forPage($page, $perPage)->get($columns)\n                    : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 93.41765687946244}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n        ? $this->forPage($page, $perPage)->get($columns)\n        : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 94.0769748337362}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getReconciliations($request);\n    $this->begin();\n    foreach ($reconciliations as $reconciliation) {\n        $reconciliation->status = 'reconciled';\n        $this->save($reconciliation);\n        $this->markTransactionsReconciled($reconciliation);\n    }\n    $this->commit();\n    return $reconciliations;\n}", "CodeBleu_score": 40.51915870182719}, {"code": "<?\npublic function reconcile($request){\n\t// Get the reconciliations to process\n\t$reconciliations = $this->getReconciliations($request);\n\t\n\t// Process each reconciliation\n\tforeach ($reconciliations as $reconciliation) {\n\t\t\n\t\t// Get the transactions within the reconciliation's date range and account ID\n\t\t$transactions = $this->getTransactions($reconciliation);\n\t\t\n\t\t// Process each transaction\n\t\tforeach ($transactions as $transaction) {\n\t\t\t\n\t\t\t// Mark the transaction as reconciled\n\t\t\t$transaction->reconciled = true;\n\t\t\t\n\t\t\t// Save the transaction\n\t\t\t$transaction->save();\n\t\t}\n\t\t\n\t\t// Mark the reconciliation as reconciled\n\t\t$reconciliation->status = 'reconciled';\n\t\t\n\t\t// Save the reconciliation\n\t\t$reconciliation->save();\n\t}\n}", "CodeBleu_score": 38.953735592159695}, {"code": "<?\npublic function reconcile($request){\n\t$reconciliations = $this->getReconciliations($request);\n    foreach ($reconciliations as $reconciliation) {\n        $this->reconcileReconciliation($reconciliation);\n    }\n}", "CodeBleu_score": 25.70396920300177}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$invitations = $this->getInvitations();\n  $this->deleteInvitations($invitations);\n  $invitation = $this->createInvitation();\n  $this->dispatchNotification($invitation);\n  return $invitation;\n}", "CodeBleu_score": 11.833683286603266}, {"code": "<?\npublic function handle(): UserInvitation{\n\treturn $this->transaction(function () {\n        $this->deleteExistingInvitations();\n\n        $invitation = $this->createInvitation();\n\n        if (! $this->notify($invitation)) {\n            throw new Exception('We were unable to send the invitation email. Please try again.');\n        }\n\n        return $invitation;\n    });\n}", "CodeBleu_score": 16.246033720012456}, {"code": "<?\npublic function handle(): UserInvitation{\n\t// Retrieve and delete existing invitations for the user\n  $user = auth()->user();\n  $existingInvitations = UserInvitation::where('user_id', $user->id)->get();\n  $existingInvitations->each->delete();\n\n  // Create a new invitation with a unique token\n  $invitation = UserInvitation::create([\n    'user_id' => $user->id,\n    'token' => Str::random(32),\n  ]);\n\n  // Attempt to dispatch a notification job to notify the user\n  try {\n    NotifyUserOfInvitation::dispatch($invitation);\n  } catch (Exception $e) {\n    throw new Exception('Unable to send invitation email. Please try again later.');\n  }\n\n  return $invitation;\n}", "CodeBleu_score": 32.489156402174736}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tif (this.isReconciled()) {\n        throw new Error('You cannot authorize a reconciled transaction.');\n    }\n    if (this.isTransfer()) {\n        throw new Error('You cannot authorize a transfer transaction.');\n    }\n}", "CodeBleu_score": 22.181241183991133}, {"code": "<?\npublic function authorize(): void{\n\tif (this.isReconciled()) {\n        throw new Exception(\"Transaction is reconciled\");\n    } else if (this.isTransfer()) {\n        throw new UnauthorizedException(\"Transfer transactions cannot be authorized\");\n    }\n}", "CodeBleu_score": 19.379128220968774}, {"code": "<?\npublic function authorize(): void{\n\tif (this.isReconciled()) {\n        throw new Error('Reconciled transactions cannot be authorized');\n    }\n    if (this.isTransfer()) {\n        throw new Unauthorized();\n    }\n}", "CodeBleu_score": 20.97509849163487}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t// Get the tenant ID from the request's access token\n    int tenantId = getTenantIdFromAccessToken();\n\n    // If the tenant ID is zero, deny access\n    if (tenantId == 0) {\n        return false;\n    }\n\n    // If the tenant ID is non-zero, allow access to the following tables\n    switch (tableName) {\n        case \"Customers\":\n        case \"Orders\":\n        case \"OrderItems\":\n        case \"Products\":\n        case \"Suppliers\":\n        case \"Tenants\":\n            return true;\n        default:\n            return false;\n    }\n}", "CodeBleu_score": 17.781377183561005}, {"code": "public boolean doTableFilter(String tableName){\n\t// Get the tenant ID from the request's access token.\n    int tenantId = getTenantIdFromAccessToken();\n\n    // If the tenant ID is zero, deny access to all tables.\n    if (tenantId == 0) {\n        return false;\n    }\n\n    // If the tenant ID is non-zero, allow access to the following tables.\n    switch (tableName) {\n        case \"Tenant\":\n        case \"User\":\n        case \"UserSession\":\n        case \"UserTenant\":\n            return true;\n        default:\n            return false;\n    }\n}", "CodeBleu_score": 16.311278905926063}, {"code": "public boolean doTableFilter(String tableName){\n\t// Get the tenant ID from the access token.\n    int tenantID = getTenantIDFromAccessToken();\n\n    // If tenant ID is zero, deny access.\n    if (tenantID == 0) {\n        return false;\n    }\n\n    // If tenant ID is non-zero, allow access to specific tables.\n    if (tableName.equals(\"table1\") || tableName.equals(\"table2\") || tableName.equals(\"table3\")) {\n        return true;\n    }\n\n    // Deny access to all other tables.\n    return false;\n}", "CodeBleu_score": 15.003320369682685}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.01345939450465}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 64.10430100685872}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n    try {\n        List<Account> dataList = accountService.findBySelect();\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataList) {\n            for (Account account : dataList) {\n                JSONObject item = new JSONObject();\n                item.put(\"Id\", account.getId());\n                //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n                item.put(\"AccountName\", account.getName());\n                dataArray.add(item);\n            }\n        }\n        res = dataArray.toJSONString();\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.76608761689178}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        try {\n            Map<String, Object> map = new HashMap<>();\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.85966452629012}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.00547499754492}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n        AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n        try {\n            List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n            if(list.size()>0) {\n                ahl = list.get(0);\n            }\n            res.code = 200;\n            res.data = ahl;\n        } catch(Exception e){\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 97.0026346497131}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        JSONArray arr = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = arr;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.58630686661081}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tJSONArray arr = new JSONArray();\n    try {\n        List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n        //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n        JSONObject outer = new JSONObject();\n        outer.put(\"id\", 0);\n        outer.put(\"key\", 0);\n        outer.put(\"value\", 0);\n        outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n        outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n        //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n        JSONArray dataArray = new JSONArray();\n        if (null != dataListFun) {\n            //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n            List<Function> dataList = new ArrayList<>();\n            for (Function fun : dataListFun) {\n                String token = request.getHeader(\"X-Access-Token\");\n                Long tenantId = Tools.getTenantIdByToken(token);\n                if (tenantId!=0L) {\n                    if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                        dataList.add(fun);\n                    }\n                } else {\n                    //\u8d85\u7ba1\n                    dataList.add(fun);\n                }\n            }\n            dataArray = getFunctionList(dataList, type, keyId);\n            outer.put(\"children\", dataArray);\n        }\n        arr.add(outer);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n    }\n    return arr;\n}", "CodeBleu_score": 99.942017737845}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 99.78540551979135}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> configList = systemConfigService.getSystemConfigList();\n        if (configList.size() > 0) {\n            response.setCode(200);\n            response.setData(configList.get(0));\n        } else {\n            response.setCode(500);\n            response.setData(\"No system configuration found.\");\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.setCode(500);\n        response.setData(\"Exception occurred while trying to fetch the current system configuration.\");\n    }\n    return response;\n}", "CodeBleu_score": 38.70075699466106}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n    List<SystemConfig> configList = null;\n\n    try {\n        configList = getService().getSystemConfigList(request);\n        if (configList.size() > 0) {\n            response.setData(configList.get(0));\n        } else {\n            response.setData(null);\n        }\n        response.setCode(200);\n    } catch (Exception e) {\n        e.printStackTrace();\n        response.setCode(500);\n        response.setError(\"Exception occurred while attempting to fetch system configuration information.\");\n    }\n    return response;\n}", "CodeBleu_score": 36.69693492697588}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getCurrentList();\n        if (list.size() > 0) {\n            response.setData(list.get(0));\n        } else {\n            response.setData(null);\n        }\n        response.setCode(200);\n    } catch (Exception e) {\n        response.setCode(500);\n        response.setData(\"\u7cfb\u7edf\u5f02\u5e38\");\n        logger.error(\"\u7cfb\u7edf\u5f02\u5e38\", e);\n    }\n    return response;\n}", "CodeBleu_score": 41.783834396730256}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tString businessPath = request.getParameter(getBusinessPathParam());\n    MultipartFile multipartFile = getMultipartFile(request);\n    if (multipartFile == null) {\n        return getResponseInfo(ResponseCode.FAIL_UPLOAD_FILE_NOT_EXIST);\n    }\n    String fileType = multipartFile.getOriginalFilename().substring(multipartFile.getOriginalFilename().lastIndexOf(\".\") + 1);\n    String fileName = multipartFile.getOriginalFilename();\n    String filePath = businessPath + \"/\" + fileName;\n    try {\n        boolean isUploadSuccess = uploadFile(multipartFile, filePath);\n        if (isUploadSuccess) {\n            return getResponseInfo(ResponseCode.SUCCESS, filePath, fileName);\n        }\n        return getResponseInfo(ResponseCode.FAIL_UPLOAD_FILE_FAIL);\n    } catch (Exception e) {\n        LOGGER.error(\"upload file error\", e);\n        return getResponseInfo(ResponseCode.FAIL_UPLOAD_FILE_FAIL);\n    }\n}", "CodeBleu_score": 32.2608034899727}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\ttry {\n        //Get the business path and file from the request\n        String businessPath = request.getParameter(BUSINESS_PATH_PARAMETER);\n        Part filePart = request.getPart(FILE_PART_NAME);\n        InputStream fileInputStream = filePart.getInputStream();\n\n        //Save the file\n        String filePath = null;\n        if (fileUploadType.equals(LOCAL)) {\n            filePath = saveFileLocally(businessPath, fileInputStream);\n        } else if (fileUploadType.equals(ALIOSS)) {\n            filePath = saveFileToAliOss(businessPath, fileInputStream);\n        }\n\n        //Set the response code and data\n        if (filePath == null) {\n            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n            return new BaseResponseInfo(ResponseCode.ERROR, \"Failed to upload file\");\n        } else {\n            response.setStatus(HttpServletResponse.SC_OK);\n            return new BaseResponseInfo(ResponseCode.SUCCESS, filePath);\n        }\n    } catch (Exception e) {\n        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n        return new BaseResponseInfo(ResponseCode.ERROR, \"Failed to upload file\");\n    }\n}", "CodeBleu_score": 32.789980169616996}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\ttry {\n        // get the file upload type\n        String uploadType = request.getParameter(\"uploadType\");\n        // get the business path\n        String businessPath = request.getParameter(\"businessPath\");\n        // get the file from the request\n        MultipartFile multipartFile = request.getFile(\"file\");\n        // get the file name\n        String fileName = multipartFile.getOriginalFilename();\n        // get the file extension\n        String fileExtension = fileName.substring(fileName.lastIndexOf(\".\"));\n        // get the file name without the extension\n        String fileNameWithoutExtension = fileName.substring(0, fileName.lastIndexOf(\".\"));\n        // get the file bytes\n        byte[] fileBytes = multipartFile.getBytes();\n        // get the file size\n        long fileSize = multipartFile.getSize();\n        // get the file type\n        String fileType = multipartFile.getContentType();\n        // get the file suffix\n        String fileSuffix = fileType.substring(fileType.lastIndexOf(\"/\") + 1);\n        // get the file path\n        String filePath = businessPath + \"/\" + fileName;\n        // get the file name with the file suffix\n        String fileNameWithSuffix = fileNameWithoutExtension + \".\" + fileSuffix;\n        // get the file path with the file suffix\n        String filePathWithSuffix = businessPath + \"/\" + fileNameWithSuffix;\n        // get the file name with the file suffix and extension\n        String fileNameWithSuffixAndExtension = fileNameWithoutExtension + \".\" + fileSuffix + fileExtension;\n        // get the file path with the file suffix and extension\n        String filePathWithSuffixAndExtension = businessPath + \"/\" + fileNameWithSuffixAndExtension;\n        // get the file name with the file suffix, extension, and a random number\n        String fileNameWithSuffixAndExtensionAndRandomNumber = fileNameWithoutExtension + \".\" + fileSuffix + \"-\" + RandomUtils.nextInt(100000000, 999999999) + fileExtension;\n        // get the file path with the file suffix, extension, and a random number\n        String filePathWithS", "CodeBleu_score": 25.788698430093792}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n            String title = jsonObject.getString(\"title\");\n            String head = jsonObject.getString(\"head\");\n            String tip = jsonObject.getString(\"tip\");\n            JSONArray arr = jsonObject.getJSONArray(\"list\");\n            systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 97.04650154584154}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n        int result=0;\n        try{\n            account.setEnabled(true);\n            account.setIsDefault(false);\n            if(account.getInitialAmount()==null) {\n                account.setInitialAmount(BigDecimal.valueOf(0));\n            }\n            if(account.getTotalPrice()==null) {\n                account.setTotalPrice(BigDecimal.valueOf(0));\n            }\n            account.setCreateTime(new Timestamp(System.currentTimeMillis()));\n            account.setUpdateTime(new Timestamp(System.currentTimeMillis()));\n            result=accountMapper.insertSelective(account);\n            logService.insertLog(\"\u8d26\u6237\",\n                    new StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_ADD).append(account.getName()).toString(), request);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 63.68725839984054}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n        int result=0;\n        try{\n            result=accountMapper.insertSelective(account);\n            logService.insertLog(\"\u8d26\u6237\",\n                    new StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_ADD).append(account.getName()).toString(), request);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 53.17691264490227}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tAccount account = JSONObject.parseObject(obj.toJSONString(), Account.class);\n        int result=0;\n        try{\n            result=insertAccount(account);\n            logService.insertLog(\"\u8d26\u6237\",\n                    new StringBuffer(BusinessConstants.LOG_OPERATION_TYPE_ADD).append(account.getName()).toString(), request);\n        }catch(Exception e){\n            JshException.writeFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 50.21117359030642}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return listWithBalanceCountMapper.get(name, serialNo);\n    } catch (Exception e) {\n        log.error(\"Error while getting list with balance count\", e);\n        return null;\n    }\n}", "CodeBleu_score": 30.689693246255175}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return accountMapper.listWithBalanceCount(name, serialNo);\n    } catch (Exception e) {\n        logger.error(\"Error in listWithBalanceCount\", e);\n        return null;\n    }\n}", "CodeBleu_score": 31.295627122776526}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\ttry {\n        return getAccountCount(name, serialNo);\n    } catch (Exception e) {\n        LOG.error(\"Error getting account count\", e);\n        return null;\n    }\n}", "CodeBleu_score": 29.337844952895942}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\ttry {\n\t\tDepotItemMapper mapper = (DepotItemMapper) getContext().getAttributes().get(\"depotItemMapper\");\n\t\treturn mapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting depot item\", e);\n\t\tthrow e;\n\t}\n}", "CodeBleu_score": 38.421478849080245}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\ttry {\n        return depotItemMapper.deleteDepotItem(id);\n    } catch (Exception e) {\n        log.error(\"Error in deleting depot item by id: \" + id, e);\n        throw e;\n    }\n}", "CodeBleu_score": 30.594072322706207}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result = 0;\n    try {\n        result = depotItemMapper.deleteDepotItem(id);\n    } catch (Exception e) {\n        logger.error(\"Error deleting depot item\", e);\n        throw e;\n    }\n    return result;\n}", "CodeBleu_score": 62.745550532950524}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean result = false;\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"nodes/\" + nodeType + \"/\" + nodeKey;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity httpEntity = httpResponse.getEntity();\n\t\t\tif (httpEntity != null) {\n\t\t\t\tString response = EntityUtils.toString(httpEntity);\n\t\t\t\tJSONObject jsonObject = new JSONObject(response);\n\t\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\t\tresult = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 53.54240411318023}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean success = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tsuccess = processResponse(httpResponse);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn success;\n\t}", "CodeBleu_score": 38.62543817016956}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tboolean result = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tresult = processResponse(httpResponse);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 38.625676726804365}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tboolean success = false;\n\t\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tHttpGet httpGet = new HttpGet(protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"/edge/add?edgeType=\" + edgeType + \"&fromType=\" + fromType + \"&toType=\" + toType + \"&from=\" + from + \"&to=\" + to);\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tif (httpResponse != null) {\n\t\t\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\t\t\tif (statusCode == 200) {\n\t\t\t\t\tString json = EntityUtils.toString(httpResponse.getEntity());\n\t\t\t\t\tJSONObject jsonObject = new JSONObject(json);\n\t\t\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\t\t\tsuccess = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn success;\n\t}", "CodeBleu_score": 50.15664538432566}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tCloseableHttpClient httpClient = null;\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\thttpClient = HttpClients.createDefault();\n\t\t\tString url = protocol + \"://\" + host + \":\" + port + withProjectName(projectName) + \"edge/\" + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to;\n\t\t\tHttpGet get = new HttpGet(url);\n\t\t\tget.addHeader(\"Content-Type\", \"application/json\");\n\t\t\tget.addHeader(\"Accept\", \"application/json\");\n\t\t\thttpResponse = httpClient.execute(get);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tString content = EntityUtils.toString(entity);\n\t\t\tJSONObject jsonObject = new JSONObject(content);\n\t\t\tif (jsonObject.has(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 54.983932784407166}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + withProjectName(projectName) + \"edge/add\";\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tHttpGet httpGet = new HttpGet(url);\n\t\t\thttpGet.addHeader(\"Content-Type\", \"application/json\");\n\t\t\tList<NameValuePair> nvps = new ArrayList<NameValuePair>();\n\t\t\tnvps.add(new BasicNameValuePair(\"edgeType\", edgeType));\n\t\t\tnvps.add(new BasicNameValuePair(\"fromType\", fromType));\n\t\t\tnvps.add(new BasicNameValuePair(\"toType\", toType));\n\t\t\tnvps.add(new BasicNameValuePair(\"from\", from));\n\t\t\tnvps.add(new BasicNameValuePair(\"to\", to));\n\t\t\thttpGet.setEntity(new UrlEncodedFormEntity(nvps));\n\t\t\thttpResponse = httpClient.execute(httpGet);\n\t\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject json = new JSONObject(response);\n\t\t\treturn json.has(\"key\");\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 47.81679782915662}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\n\t\t\tthrow new IllegalArgumentException(\"Event and message must not be null\");\n\t\t}\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString json = event.toJSON();\n\t\tString topic = event.getTarget() == null ? \"test\" : event.getTarget();\n\t\tProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}", "CodeBleu_score": 37.89806247360116}, {"code": "public void sendEvent(Event event){\n\tif (event != null && event.getMessage() != null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString json = event.toJSON();\n\t\tString topic = \"test\";\n\t\tif (event.getTarget() != null) {\n\t\t\ttopic = event.getTarget();\n\t\t}\n\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 40.58610878087019}, {"code": "public void sendEvent(Event event){\n\tif(event == null || event.getMessage() == null) {\n\t\t\tSystem.out.println(\"Event or message is null. Cannot send event.\");\n\t\t\treturn;\n\t\t}\n\t\tif(event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setEventTime(System.currentTimeMillis());\n\t\tString json = event.toJsonString();\n\t\tString topic = \"test\";\n\t\tif(event.getTarget() != null) {\n\t\t\ttopic = event.getTarget();\n\t\t}\n\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}", "CodeBleu_score": 41.25673444527833}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t// Initialize an OSS client.\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the file content as an object with the specified name.\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 32.427424182163215}, {"code": "public String upload(String objName, byte[] content){\n\tString url = null;\n    try {\n        // Initialize the OSS client.\n        OSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n        // Upload the object.\n        ossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n        // Shut down the OSS client.\n        ossClient.shutdown();\n        // Return the URL of the uploaded object.\n        url = ossClient.generatePresignedUrl(config.getBucketName(), objName, new Date(System.currentTimeMillis() + 3600 * 1000)).toString();\n    } catch (Exception e) {\n        e.printStackTrace();\n    }\n    return url;\n}", "CodeBleu_score": 37.540870244566506}, {"code": "public String upload(String objName, byte[] content){\n\t// Initialize the OSS client.\n    OSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n    // Upload the object.\n    ossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 32.427424182163215}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tif (ipAddress == null) {\n        return null;\n    }\n    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 31.739499886491686}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.619977153871922}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tIpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return new LocationInfo();\n    }\n    return worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 26.27067021148933}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient == null || highLevelClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient == null || highLevelClient == null) {\n\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\tRestClientBuilder lowLevelClientBuilder = RestClient.builder(hosts.toArray(new HttpHost[0]));\n\t\t\t\tlowLevelClient = lowLevelClientBuilder.build();\n\t\t\t\tRestHighLevelClientBuilder highLevelClientBuilder = new RestHighLevelClient.Builder(lowLevelClientBuilder);\n\t\t\t\thighLevelClient = highLevelClientBuilder.build();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 51.969056953191185}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\tRestClientBuilder restClientBuilder = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()]));\n\t\t\tif (username != null && password != null) {\n\t\t\t\tfinal CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\t\t\t\tcredentialsProvider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\n\t\t\t\trestClientBuilder.setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {\n\t\t\t\t\t\treturn httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tlowLevelClient = restClientBuilder.build();\n\t\t\thighLevelClient = new RestHighLevelClient(lowLevelClient);\n\t\t}\n\t}", "CodeBleu_score": 56.39564471351831}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\treturn;\n\t\t}\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelClient != null && highLevelClient != null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (lowLevelClient == null) {\n\t\t\t\tlowLevelClient = new RestClient(parseHosts(clusterHostList, clusterHostPort));\n\t\t\t}\n\t\t\tif (highLevelClient == null) {\n\t\t\t\thighLevelClient = new RestHighLevelClient(lowLevelClient);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 48.28655220789914}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n\n    for (String host : hostList) {\n        int port = clusterPort;\n        if (host.contains(\":\")) {\n            String[] hostPort = host.split(\":\");\n            host = hostPort[0];\n            port = Integer.parseInt(hostPort[1]);\n        }\n        hosts.add(new HttpHost(host, port));\n    }\n\n    return hosts;\n}", "CodeBleu_score": 42.467315364267996}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        if (host.contains(\":\")) {\n            String[] hostAndPort = host.split(\":\");\n            host = hostAndPort[0];\n            clusterPort = Integer.parseInt(hostAndPort[1]);\n        }\n        hosts.add(new HttpHost(host, clusterPort));\n    }\n    return hosts;\n}", "CodeBleu_score": 43.71150128431522}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tList<HttpHost> hosts = new ArrayList<>();\n    for (String host : clusterHostList.split(\",\")) {\n        if (host.contains(\":\")) {\n            hosts.add(new HttpHost(host.split(\":\")[0], Integer.parseInt(host.split(\":\")[1])));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 36.57959488134748}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\tString task = this.queue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task != null) {\n\t\t\t\tString[] taskParams = task.split(\"\\\\|\");\n\t\t\t\tif (taskParams.length == 2) {\n\t\t\t\t\tString toNumber = taskParams[0];\n\t\t\t\t\tString message = taskParams[1];\n\t\t\t\t\tif (isValidPhoneNumber(toNumber) && isValidMessage(message)) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\t\tSystem.out.println(\"Error sending SMS message to \" + toNumber + \" with content \" + message + \": \" + e.getMessage());\n\t\t\t\t\t\t\tif (this.getSmtpService() != null) {\n\t\t\t\t\t\t\t\tString messageContent = String.format(\"\u5411%s\u53d1\u9001\u6d88\u606f%s\u5931\u8d25.\\r\n%s\", toNumber, message, e.getMessage());\n\t\t\t\t\t\t\t\tthis.getSmtpService().send(\"archerliyaqing@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t\t\t\tthis.getSmtpService().send(\"philip_chang@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t\t\t\tthis.getSmtpService().send(\"clariones@163.com\", \"\u77ed\u4fe1\u670d\u52a1\u5931\u8d25\", messageContent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"Invalid SMS message to \" + toNumber + \" with content \" + message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 33.04906147548214}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\tSmsTask task = null;\n\t\ttry {\n\t\t\ttask = this.queue.poll(30, TimeUnit.SECONDS);\n\t\t\tif (task != null) {\n\t\t\t\tif (task.getType() == SmsTask.Type.PLAIN_TEXT) {\n\t\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\tif (isValidPhoneNumber(toNumber) && isValidMessage(message)) {\n\t\t\t\t\t\tthis.sendPlainTextMessage(toNumber, message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"Invalid message data for task: \" + task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Error sending message for task: \" + task);\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 29.668030168242566}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t\tString message = this.getQueue().poll(30, TimeUnit.SECONDS);\n\t\t\tif (message != null) {\n\t\t\t\ttry {\n\t\t\t\t\tString[] messageParts = message.split(\"\\\\|\");\n\t\t\t\t\tif (messageParts.length != 2) {\n\t\t\t\t\t\tSystem.out.println(\"Invalid message format: \" + message);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tString toNumber = messageParts[0];\n\t\t\t\t\t\tString messageData = messageParts[1];\n\t\t\t\t\t\tif (isValidPhoneNumber(toNumber) && isValidMessage(messageData)) {\n\t\t\t\t\t\t\tsendPlainTextMessage(toNumber, messageData);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tSystem.out.println(\"Invalid message or phone number: \" + message);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.out.println(\"Exception caught: \" + e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 29.20586361500294}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpget = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\t\t\tlog.info(\"Response content: \" + content);\n\t\t\t\treturn content;\n\t\t\t}\n\t\t} finally {\n\t\t\tresponse.close();\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 67.16886010116603}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tString result = \"\";\n\t\ttry {\n\t\t\t// Execute the GET request\n\t\t\tHttpGet request = new HttpGet(uri);\n\t\t\tCloseableHttpResponse response = getHttpClient().execute(request);\n\t\t\ttry {\n\t\t\t\t// Get the response entity\n\t\t\t\tHttpEntity entity = response.getEntity();\n\t\t\t\t// If the response does not enclose an entity, there is no need\n\t\t\t\t// to bother about connection release\n\t\t\t\tif (entity != null) {\n\t\t\t\t\t// A Simple JSON Response Read\n\t\t\t\t\tresult = EntityUtils.toString(entity);\n\t\t\t\t\t// You can use a json library to parse json content instead of parsing it yourself\n\t\t\t\t\t// Log the result\n\t\t\t\t\tSystem.out.println(result);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tthrow ex;\n\t\t}\n\t\treturn result;\n\t}", "CodeBleu_score": 49.057176573496854}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlogger.info(\"Response content: \" + content);\n\t\treturn content;\n\t}", "CodeBleu_score": 68.61097612695866}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tObject[] root = decodeNodeToMap(doc.getDocumentElement(), doTrim);\n\tif (root == null || root.length < 2){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) root[1];\n}", "CodeBleu_score": 53.91491368143796}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tfactory.setNamespaceAware(true);\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tObject[] root = decodeNodeToMap(document.getDocumentElement(), doTrim);\n\tif (root == null || root.length < 2){\n\t\treturn null;\n\t}\n\treturn (Map<String, Object>) root[1];\n}", "CodeBleu_score": 51.5475471060963}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument doc = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\t\tObject[] root = decodeNodeToMap(doc.getFirstChild(), doTrim);\n\t\tif (root == null || root.length < 2){\n\t\t\treturn null;\n\t\t}\n\t\treturn (Map<String, Object>) root[1];\n\t}", "CodeBleu_score": 52.66386930676554}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tfinal boolean isPostponeMissingSchedules = sysConfigBL.getBooleanValue(SYS_Config_Postpone_Missing_Schedules, false, orderRecord.getAD_Client_ID(), orderRecord.getAD_Org_ID());\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tlogger.debug(\"Order {} is eligible for auto-processing; enqueuing auto-ship-and-invoice task.\", orderRecord);\n\t\tenqueueAutoShipAndInvoiceTask(orderRecord);\n\t}\n\telse if (isPostponeMissingSchedules)\n\t{\n\t\tlogger.debug(\"Order {} is not eligible for auto-processing; enqueuing schedule creation task.\", orderRecord);\n\t\tenqueueScheduleCreationTask(orderRecord);\n\t}\n\telse\n\t{\n\t\tlogger.debug(\"Order {} is not eligible for auto-processing and schedules are not postponed; nothing to do.\", orderRecord);\n\t}\n}", "CodeBleu_score": 40.833593603197485}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean eligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\tfinal String transactionName = eligibleForAutoProcessing ? TRANSACTION_NAME_AUTO_SHIP_AND_INVOICE : TRANSACTION_NAME_CREATE_MISSING_SCHEDULES;\n\n\tfinal I_C_Order order = InterfaceWrapperHelper.create(orderRecord, I_C_Order.class);\n\tfinal OrderId orderId = OrderId.ofRepoId(order.getC_Order_ID());\n\tfinal AsyncBatchId asyncBatchId = AsyncBatchId.ofRepoIdOrNull(order.getC_Async_Batch_ID());\n\n\tfinal Properties ctx = InterfaceWrapperHelper.getCtx(orderRecord);\n\tfinal String trxName = InterfaceWrapperHelper.getTrxName(orderRecord);\n\n\tfinal I_C_Order orderRecordToUse = eligibleForAutoProcessing ? orderRecord : InterfaceWrapperHelper.create(ctx, orderId.getRepoId(), I_C_Order.class, trxName);\n\n\tfinal GenerateSchedulesRequest request = GenerateSchedulesRequest.builder()\n\t\t\t.orderId(orderId)\n\t\t\t.asyncBatchId(asyncBatchId)\n\t\t\t.eligibleForAutoProcessing(eligibleForAutoProcessing)\n\t\t\t.build();\n\n\tfinal GenerateSchedulesRequest requestToUse = eligibleForAutoProcessing ? request : request.withEligibleForAutoProcessing(false);\n\n\tfinal GenerateSchedulesRequest requestToLog = requestToUse.withOrderRecord(orderRecordToUse);\n\n\tlogInfo(\"Scheduling \" + transactionName + \" for \" + requestToLog, orderRecordToUse);\n\n\tfinal IWorkPackageQueue queue = Services.get(IWorkPackageQueueFactory.class).getQueueForEnqueuing(ctx, GenerateSchedulesWorkpackageProcessor.class);\n\n\tqueue.newBlock()\n\t\t\t.newWorkpackage()\n\t\t\t.setUserInChargeId(UserId.ofRepoId(orderRecord.getSalesRep_ID()))\n\t\t\t.addElement", "CodeBleu_score": 38.38897756942183}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tfinal String trxName = Services.get(ITrxManager.class).getThreadInheritedTrxName();\n\n\tfinal I_C_Order order = InterfaceWrapperHelper.create(orderRecord, I_C_Order.class);\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tlog.debug(\"Order {} is eligible for auto-processing. Scheduling it for auto-shipment and invoicing.\", order);\n\t\tscheduler.schedule(order, trxName);\n\t}\n\telse\n\t{\n\t\tlog.debug(\"Order {} is not eligible for auto-processing. Scheduling it for missing shipment schedules creation.\", order);\n\t\tscheduler.scheduleMissingSchedulesCreation(order, trxName);\n\t}\n}", "CodeBleu_score": 45.029722456713394}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = $this->userProvider->retrieveByCredentials($request->only('email'));\n\n    if ($user && $this->limiter->tooManyAttempts($request, $this->throttleKey($request))) {\n        $this->fireLockoutEvent($request);\n\n        $this->throwLockoutResponse($request);\n    }\n\n    if ($user && Auth::attempt(['email' => $request->email, 'password' => $request->password])) {\n        return $user;\n    }\n\n    if ($user === null) {\n        return null;\n    }\n\n    if ($this->limiter->tooManyAttempts($request, $this->throttleKey($request))) {\n        $this->fireLockoutEvent($request);\n\n        $this->throwLockoutResponse($request);\n    }\n\n    $this->limiter->hit($request, $this->throttleKey($request));\n\n    $this->fireFailedEvent($request, $user);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 43.83953963428407}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 40.08501213918848}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t$user = User::where('email', $request->email)->first();\n\n    if (!$user || !Hash::check($request->password, $user->password)) {\n        $this->fireFailedEvent($request, $user);\n\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 40.08501213918848}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.45277447053542}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.45277447053542}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n\n    throw ValidationException::withMessages([\n        $this->username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 67.45277447053542}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t$this->user = $request->session()->get('user');\n    $this->user = User::find($this->user->id);\n    if($this->user) {\n        $this->data['twofactor'] = $this->user->twofactor;\n        $this->data['remember'] = $request->session()->get('remember');\n        $this->data['publicKey'] = $this->user->publicKey;\n        return view('TwoFactorChallenge', $this->data);\n    }\n}", "CodeBleu_score": 35.20482923293046}, {"code": "<?\npublic function toResponse($request){\n\t$session = $request->session();\n    $user_id = $session->get('user_id');\n    $user = User::find($user_id);\n    $response = [];\n    if ($user) {\n        $webauthn_user = WebAuthnUser::find($user_id);\n        if ($webauthn_user) {\n            $webauthn_user->load('credentials');\n            $webauthn_user->setUserHandle($user->email);\n            $webauthn_user->setName($user->name);\n            $webauthn_user->setDisplayName($user->name);\n            $webauthn_user->setIcon($user->avatar);\n            $webauthn_user->setAuthenticatorSelection($this->authenticatorSelection);\n            $publicKey = $webauthn_user->prepareAssertion();\n            $response['publicKey'] = $publicKey;\n        }\n        $response['remember'] = $session->get('remember');\n        $response['twofactor'] = $user->twofactor;\n    }\n    return view('auth.twofactor', $response);\n}", "CodeBleu_score": 43.96104783444703}, {"code": "<?\npublic function toResponse($request){\n\t$user = $request->session()->get('user');\n    $user = User::find($user->id);\n    if ($user) {\n        $publicKey = $user->getPublicKey();\n        $request->session()->put('publicKey', $publicKey);\n        $data = [\n            'publicKey' => $publicKey,\n            'rememberMe' => $request->session()->get('rememberMe'),\n            'twoFactorEnabled' => $user->two_factor_enabled\n        ];\n        return view('TwoFactorChallenge', $data);\n    } else {\n        return view('TwoFactorChallenge', ['error' => 'User not found']);\n    }\n}", "CodeBleu_score": 42.569724674322515}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$user = $this->getUserOrCreate($socialite);\n    $this->checkUserAssociation($request, $user, $driver);\n    $this->createUserToken($user, $driver, $socialite);\n\n    return Auth::login($user);\n}", "CodeBleu_score": 28.39481150867606}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t// check if user is already authenticated\n    if ($user = Auth::user()) {\n        // check if user is already associated with the given socialite token\n        if ($userToken = $user->getUserToken($driver, $socialite->getId())) {\n            // check if the user is already associated with another account\n            $this->checkUserAssociation($request, $user, $driver);\n\n            // update user token\n            $this->updateUserToken($userToken, $socialite);\n\n            // return authenticated user\n            return $user;\n        }\n\n        // check if there is an existing user with the given socialite token\n        if ($user = $this->getUserByToken($driver, $socialite)) {\n            // associate the user with the current user\n            $user->associateWith($userToken);\n\n            // return authenticated user\n            return $user;\n        }\n\n        // create a new user token for the current user\n        $userToken = $this->createUserToken($user, $driver, $socialite);\n\n        // return authenticated user\n        return $user;\n    }\n\n    // check if there is an existing user with the given socialite token\n    if ($user = $this->getUserByToken($driver, $socialite)) {\n        // check if the user is already associated with another account\n        $this->checkUserAssociation($request, $user, $driver);\n\n        // update user token\n        $this->updateUserToken($user->getUserToken($driver, $socialite->getId()), $socialite);\n\n        // return authenticated user\n        return $user;\n    }\n\n    // get the user from the database or create a new one\n    $user = $this->getUserOrCreate($socialite);\n\n    // associate the user with the current user\n    $user->associateWith($userToken);\n\n    // return authenticated user\n    return $user;\n}", "CodeBleu_score": 45.26939489571231}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t// Check if there is an existing user token for the given driver and socialite user ID.\n    $token = UserToken::where('driver', $driver)->where('driver_id', $socialite->getId())->first();\n\n    // If found, retrieve the associated user and verify the user association.\n    if ($token) {\n        $user = $token->user;\n        $this->checkUserAssociation($request, $user, $driver);\n\n        // If not, create a new user or associate the socialite token with an existing user.\n    } else {\n        $user = $this->getUserOrCreate($socialite);\n        $token = $this->createUserToken($user, $driver, $socialite);\n    }\n\n    // Authenticate the user.\n    Auth::login($user, true);\n\n    // Return the authenticated user.\n    return $user;\n}", "CodeBleu_score": 58.526279784094214}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->retrieveUser($request);\n    if (!$user) {\n        return false;\n    }\n\n    $credentials = $this->filterCredentials($request);\n\n    if (!$this->validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 51.228514360907496}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->retrieveUser($request);\n\n    if (! $user) {\n        return false;\n    }\n\n    try {\n        $this->validateAssertion($user, $this->filterCredentials($request));\n    } catch (Throwable $e) {\n        $this->fireFailedEvent($request, $user);\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return true;\n}", "CodeBleu_score": 50.17670940607427}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $this->retrieveUser($request);\n    if (is_null($user)) {\n        return false;\n    }\n    $credentials = $this->filterCredentials($request);\n    if (! Webauthn::validateAssertion($user, $credentials)) {\n        $this->fireFailedEvent($request, $user);\n        $this->throwFailedAuthenticationException($request);\n    }\n    return true;\n}", "CodeBleu_score": 51.40836777117551}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tif (!$email) {\n        $this->logger->error('No email address provided');\n        return null;\n    }\n\n    try {\n        return $this->userRepository->findByEmail($email);\n    } catch (Exception $e) {\n        $this->logger->error('Error finding user by email: ' . $e->getMessage());\n        return null;\n    }\n}", "CodeBleu_score": 37.48719085772896}, {"code": "<?\nprivate function user(): ?User{\n\tif (!$email) {\n        log.error('No email provided.');\n        return null;\n    }\n\n    try {\n        return User.getByEmail($email);\n    } catch (Exception $e) {\n        log.error(\"User not found.\", ['exception' => $e]);\n        return null;\n    }\n}", "CodeBleu_score": 33.98299909209347}, {"code": "<?\nprivate function user(): ?User{\n\t$email = $request->input('email');\n    if (!$email) {\n        Log::error('No email provided.');\n        return null;\n    }\n    try {\n        $user = User::where('email', $email)->firstOrFail();\n        return $user;\n    } catch (Exception $e) {\n        Log::error('Unable to find user for reset password', ['email' => $email]);\n        return null;\n    }\n}", "CodeBleu_score": 60.13994401414695}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch') {\n        if (config('scout.flush')) {\n            $indexes = config('meilisearch.indexes');\n            foreach ($indexes as $index) {\n                $this->artisan('Flushing Meilisearch index', 'scout:flush', [\n                    'model' => $index['model'],\n                ]);\n            }\n            $this->info('Meilisearch indexes flushed');\n        }\n    }\n}", "CodeBleu_score": 42.553351818724536}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') && config('scout.flush')) {\n        foreach (config('scout.indexes') as $index) {\n            $this->callSilent('scout:flush', [\n                'model' => $index['model'],\n            ]);\n        }\n        $this->info('Scout indexes flushed.');\n    }\n}", "CodeBleu_score": 29.02894762342499}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $this->artisan('Flushing Scout indexes', 'scout:flush');\n    }\n}", "CodeBleu_score": 19.64057655810009}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $resource->getVCard();\n\n    if (!$vcard) {\n        $vcard = new VCard();\n        $vcard->setUID(Str::uuid());\n    }\n\n    $this->exporters(get_class($resource))\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 19.375359664328762}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $resource->readVCard();\n\n    if ($vcard === null) {\n        $vcard = new VCard();\n        $vcard->setUID(Str::uuid()->toString());\n    }\n\n    $vcard->setSource($this->getSource($resource));\n\n    foreach ($this->exporters(get_class($resource)) as $exporter) {\n        $exporter->export($vcard, $resource);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 23.091623803996235}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t$vcard = $resource->getVCard();\n\n    if ($vcard === null) {\n        $vcard = $this->createVCard($resource);\n    }\n\n    $vcard->setUID($vcard->getUID() ?? $this->generateUID($resource));\n\n    $this->exporters(get_class($resource))\n        ->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n    return $vcard;\n}", "CodeBleu_score": 21.882476673899124}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getObject($addressBookId, $cardUri);\n    if ($object instanceof IContact) {\n        $this->dispatch(new DestroyContact($object));\n        return true;\n    }\n    if ($object instanceof IGroup) {\n        $this->dispatch(new DestroyGroup($object));\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 36.78377759863179}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getObject($addressBookId, $cardUri);\n\n\tif ($object instanceof \\Sabre\\CardDAV\\ICard) {\n\t\t$this->dispatch(new Job\\DeleteCard($object));\n\t\treturn true;\n\t} else if ($object instanceof \\Sabre\\CardDAV\\ICard) {\n\t\t$this->dispatch(new Job\\DeleteGroup($object));\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 33.04744231466293}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$object = $this->getCard($addressBookId, $cardUri);\n\n\tif ($object instanceof IContact) {\n\t\t$job = new Job('OC_Contacts_Addressbook_Contact::destroy', [$object->getId()]);\n\t\t$this->jobList->add($job);\n\t} elseif ($object instanceof IGroup) {\n\t\t$job = new Job('OC_Contacts_Addressbook_Group::destroy', [$object->getId()]);\n\t\t$this->jobList->add($job);\n\t} else {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 37.23809499461825}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t$file = request()->file('file');\n    if (!$file) {\n        return response()->json(['message' => 'No file provided'], 400);\n    }\n\n    $leadActivity = LeadActivity::create([\n        'lead_id' => $data['lead_id'],\n        'user_id' => auth()->id(),\n        'type' => $data['type'],\n        'subject' => $data['subject'],\n        'description' => $data['description'],\n    ]);\n\n    $filePath = $file->store('lead_activity_files');\n\n    $leadActivityFile = LeadActivityFile::create([\n        'lead_activity_id' => $leadActivity->id,\n        'name' => $file->getClientOriginalName(),\n        'path' => $filePath,\n    ]);\n\n    return response()->json($leadActivityFile, 201);\n}", "CodeBleu_score": 52.04540487164716}, {"code": "<?\npublic function upload(array $data){\n\t$user = Auth::user();\n    $lead = Lead::findOrFail($data['lead_id']);\n\n    if (!$request->hasFile('file')) {\n        return;\n    }\n\n    $file = $request->file('file');\n    $filename = $file->getClientOriginalName();\n    $path = $file->storeAs('lead_activities', $filename);\n\n    $activity = $lead->activities()->create([\n        'user_id' => $user->id,\n        'activity' => $data['activity'],\n        'notes' => $data['notes'],\n    ]);\n\n    $activity->attachments()->create([\n        'filename' => $filename,\n        'bytes' => $file->getSize(),\n        'mime' => $file->getClientMimeType(),\n        'path' => $path,\n    ]);\n\n    return $activity;\n}", "CodeBleu_score": 49.21307590763108}, {"code": "<?\npublic function upload(array $data){\n\t// Check if a file is present in the request.\n    if (!$request->hasFile('file')) {\n        return;\n    }\n\n    // Get the authenticated user.\n    $user = Auth::user();\n\n    // Create a new lead activity record.\n    $activity = new LeadActivity([\n        'user_id' => $user->id,\n        'lead_id' => $data['lead_id'],\n        'activity_type_id' => $data['activity_type_id'],\n        'description' => $data['description'],\n    ]);\n\n    // Save the new lead activity record.\n    $activity->save();\n\n    // Get the file from the request.\n    $file = $request->file('file');\n\n    // Create a new file record.\n    $file = new File([\n        'user_id' => $user->id,\n        'lead_activity_id' => $activity->id,\n        'name' => $file->getClientOriginalName(),\n        'path' => $file->store('files'),\n    ]);\n\n    // Save the new file record.\n    $file->save();\n\n    // Return the new file record.\n    return $file;\n}", "CodeBleu_score": 50.583042148184234}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif ($exception instanceof ModelNotFoundException) {\n        return $this->response('admin::layouts.blank', 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return $this->response('admin::layouts.blank', 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return $this->response('admin::layouts.blank', 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        return $this->response('admin::layouts.blank', $exception->getStatusCode());\n    }\n}", "CodeBleu_score": 35.2629158157709}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif (request()->is('admin/*')) {\n        if ($exception instanceof ModelNotFoundException) {\n            return $this->response('admin::layouts.blank', 404);\n        }\n\n        if ($exception instanceof PDOException) {\n            return $this->response('admin::layouts.blank', 500);\n        }\n\n        if ($exception instanceof ParseError) {\n            return $this->response('admin::layouts.blank', 500);\n        }\n\n        return $this->response('admin::layouts.blank', 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } else {\n        $statusCode = 500;\n    }\n\n    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        return $this->response('shop::customers.signup.index', 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return $this->response('shop::customers.signup.index', 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return $this->response('shop::customers.signup.index', 500);\n    }\n\n    return $this->response('shop::customers.signup.index', 500);\n}", "CodeBleu_score": 36.89518440314735}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t$statusCode = 500;\n    $response = [\n        'message' => trans('admin::app.common.something-went-wrong')\n    ];\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n    } elseif ($exception instanceof ModelNotFoundException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof PDOException) {\n        $statusCode = 404;\n    } elseif ($exception instanceof ParseError) {\n        $statusCode = 404;\n    }\n\n    if ($exception instanceof ModelNotFoundException) {\n        $response['message'] = trans('admin::app.common.resource-not-found');\n    }\n\n    if (request()->expectsJson()) {\n        return response()->json($response, $statusCode);\n    }\n\n    if (request()->is('admin/*')) {\n        return response()->view(\"admin::errors.{$statusCode}\", [], $statusCode);\n    }\n\n    return redirect()->route('admin.session.create');\n}", "CodeBleu_score": 46.02219451876997}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}, {"code": "<?\nprivate function response($path, $statusCode){\n\tif (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 97.23540440263329}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t$ids = $this->request->get('ids');\n    $is_done = $this->request->get('is_done');\n\n    $count = 0;\n\n    foreach ($ids as $id) {\n\n        $activity = Activity::find($id);\n\n        if (!$activity) {\n            continue;\n        }\n\n        $activity->is_done = $is_done;\n\n        event(new ActivityUpdated($activity));\n\n        $activity->save();\n\n        event(new ActivityUpdated($activity));\n\n        $count++;\n    }\n\n    if ($count > 0) {\n        return response()->json(['status' => 'success', 'count' => $count]);\n    }\n\n    return response()->json(['status' => 'error']);\n}", "CodeBleu_score": 42.13288658768575}, {"code": "<?\npublic function massUpdate(){\n\t$request = $this->getRequest();\n    $response = $this->getResponse();\n    $data = $request->getContent();\n    $activities = json_decode($data);\n\n    $count = 0;\n    foreach ($activities as $activity) {\n        $activityId = $activity->id;\n        $isDone = $activity->is_done;\n\n        $activity = $this->getActivityTable()->getActivity($activityId);\n        $activity->is_done = $isDone;\n        $this->getEventManager()->trigger('updateActivityPre', $this, array('activity' => $activity));\n        $this->getActivityTable()->saveActivity($activity);\n        $this->getEventManager()->trigger('updateActivityPost', $this, array('activity' => $activity));\n        $count++;\n    }\n\n    $response->setContent(\\Zend\\Json\\Json::encode(array('count' => $count)));\n    return $response;\n}", "CodeBleu_score": 36.98293731333477}, {"code": "<?\npublic function massUpdate(){\n\t$activityIds = $this->request->data['activityIds'];\n\t$isDone = $this->request->data['isDone'];\n\t$numUpdated = 0;\n\tforeach ($activityIds as $activityId) {\n\t\t$activity = $this->Activity->findById($activityId);\n\t\tif ($activity) {\n\t\t\t$this->Activity->id = $activityId;\n\t\t\t$this->Activity->saveField('is_done', $isDone);\n\t\t\t$numUpdated++;\n\t\t}\n\t}\n\t$this->set(array(\n\t\t'success' => true,\n\t\t'numUpdated' => $numUpdated,\n\t\t'_serialize' => array('success', 'numUpdated')\n\t));\n}", "CodeBleu_score": 30.99989993980456}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t// Get the activity IDs from the request.\n \t$ids = request('ids');\n\n \t// Iterate over the IDs, deleting each activity.\n \tforeach ($ids as $id) {\n\n \t\t// Dispatch the deleting event.\n \t\t$activity = Activity::find($id);\n \t\tevent(new Deleting($activity));\n\n \t\t// Delete the activity.\n \t\t$activity->delete();\n\n \t\t// Dispatch the deleted event.\n \t\tevent(new Deleted($activity));\n \t}\n\n \t// Return a JSON response indicating a successful destruction.\n \treturn response()->json(['success' => true]);\n }", "CodeBleu_score": 21.878321616932507}, {"code": "<?\n public function massDestroy(){\n\t$activityIds = request('activityIds');\n\n    foreach ($activityIds as $activityId) {\n        $activity = Activity::findOrFail($activityId);\n\n        event(new ActivityDeleting($activity));\n        $activity->delete();\n        event(new ActivityDeleted($activity));\n    }\n\n    return response()->json([\n        'message' => 'Activities deleted successfully',\n    ]);\n}", "CodeBleu_score": 34.904883633252446}, {"code": "<?\n public function massDestroy(){\n\t$ids = request('ids');\n\n    foreach ($ids as $id) {\n\n        $activity = $this->activityRepository->find($id);\n\n        event(new ActivityDeleted($activity));\n\n        $this->activityRepository->delete($id);\n    }\n\n    return response()->json([\n        'success' => true,\n        'message' => trans('admin::app.datagrid.mass-ops.delete-success', ['resource' => 'activities'])\n    ]);\n}", "CodeBleu_score": 33.56186944389113}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$data = file_get_contents(\"php://input\");\n  $request = json_decode($data);\n  $cards = $this->getCards();\n\n  foreach ($request as $req) {\n    foreach ($cards as $card) {\n      if ($card->id == $req->id) {\n        $card->selected = $req->selected;\n      }\n    }\n  }\n\n  $this->updateCards($cards);\n  echo json_encode($cards);\n}", "CodeBleu_score": 31.29605552254499}, {"code": "<?\n public function updateCards(){\n\t// Get the current cards\n    $cards = $this->getCards();\n\n    // Get the request data\n    $request = $this->getRequest();\n\n    // Iterate through the request data\n    foreach($request as $data) {\n\n        // Find the card that matches the request data\n        foreach($cards as &$card) {\n\n            // If the card matches the request data\n            if($card['id'] == $data['id']) {\n\n                // Update the card's 'selected' status\n                $card['selected'] = $data['selected'];\n\n                // Break out of the loop\n                break;\n            }\n        }\n    }\n\n    // Return the updated cards as a JSON response\n    return $this->response($cards);\n}", "CodeBleu_score": 36.44891436892218}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n     $request = $this->getRequest();\n     $data = json_decode($request->getContent());\n\n     foreach ($data as $card) {\n         foreach ($cards as $key => $value) {\n             if ($value['id'] == $card->id) {\n                 $cards[$key]['selected'] = $card->selected;\n             }\n         }\n     }\n\n     return new JsonResponse($cards);\n }", "CodeBleu_score": 42.09858328928691}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t// Dispatch the before event\n\tEvent::dispatch('system.configuration.beforeStore', [$this->request]);\n\n\t// Create the configuration\n\t$configuration = Configuration::create($this->request->all());\n\n\t// Dispatch the after event\n\tEvent::dispatch('system.configuration.afterStore', [$configuration]);\n\n\t// Flash a success message to the session\n\tFlash::success(Lang::get('system::configuration.successStore'));\n\n\t// Redirect to the previous page\n\treturn Redirect::back();\n}", "CodeBleu_score": 28.373868445954088}, {"code": "<?\npublic function store(){\n\t$this->dispatchEvent('beforeStore');\n\n\t$this->config = $this->createConfig($this->request->all());\n\n\t$this->dispatchEvent('afterStore');\n\n\t$this->flash->success(sprintf(lang('admin::lang.alert_success'), lang($this->getConfigName() . 'name')));\n\n\treturn $this->redirectBack();\n}", "CodeBleu_score": 25.813299003814006}, {"code": "<?\npublic function store(){\n\t// Validate the request data\n\t$this->validate();\n\n\t// Dispatch the before store event\n\t$this->dispatch(new BeforeStoreConfiguration($this->request));\n\n\t// Create the configuration\n\t$configuration = $this->createConfiguration($this->request);\n\n\t// Dispatch the after store event\n\t$this->dispatch(new AfterStoreConfiguration($configuration, $this->request));\n\n\t// Flash a success message to the session\n\t$this->flash->success('Configuration saved successfully!');\n\n\t// Redirect to the previous page\n\treturn $this->redirect($this->previousUrl());\n\n}", "CodeBleu_score": 23.6926965366654}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/'. $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 95.8380790389966}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> sortList = new ArrayList<>();\n    for (String model : list) {\n        sortList.add(new AdminModelSort(user, model, 1));\n    }\n    adminModelSortRepository.deleteAll(adminModelSortRepository.findAllByUser(user));\n    adminModelSortRepository.saveAll(sortList);\n    return new ResponseEntity(new SuccessResult(true), HttpStatus.OK);\n}", "CodeBleu_score": 28.301829097609016}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> sortList = new ArrayList<AdminModelSort>();\n\tfor (String modelName : list) {\n\t\tAdminModelSort sort = new AdminModelSort();\n\t\tsort.setModelName(modelName);\n\t\tsort.setSortOrder(1);\n\t\tsort.setUserId(getUserId());\n\t\tsortList.add(sort);\n\t}\n\tAdminModelSort.deleteAll(AdminModelSort.class, \"userId = ?\", getUserId());\n\tAdminModelSort.saveInTx(sortList);\n\treturn success();\n}", "CodeBleu_score": 27.982903509166572}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tList<AdminModelSort> sortList = new ArrayList<>();\n    for(String model : list) {\n        AdminModelSort sort = new AdminModelSort();\n        sort.setModel(model);\n        sort.setSortOrder(0);\n        sort.setUser(user);\n        sortList.add(sort);\n    }\n    adminModelSortRepository.deleteAll(adminModelSortRepository.findAllByUser(user));\n    adminModelSortRepository.saveAll(sortList);\n    return success();\n}", "CodeBleu_score": 33.90273638724039}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n        return R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.setModuleSetting(adminConfig);\n    return Result.ok();\n}", "CodeBleu_score": 91.23739104804888}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t// Retrieve the user configuration by the custom key\n    UserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n\n    // If the configuration exists, update its value with the provided JSON\n    if (userConfiguration != null) {\n        userConfiguration.setValue(json.toString());\n        userConfigurationRepository.save(userConfiguration);\n    }\n\n    // If not, create a new user configuration with the provided JSON and save it\n    else {\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setCustomKey(customKey);\n        userConfiguration.setValue(json.toString());\n        userConfigurationRepository.save(userConfiguration);\n    }\n\n    // Return a successful result\n    return new ResponseEntity<>(HttpStatus.OK);\n}", "CodeBleu_score": 57.42823341463308}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t// Retrieve the user configuration by the custom key.\n    UserConfiguration userConfiguration = userConfigurationRepository.findByCustomKey(customKey);\n\n    // If the configuration exists, update its value with the provided JSON.\n    if (userConfiguration != null) {\n        userConfiguration.setValue(json.toString());\n        userConfigurationRepository.save(userConfiguration);\n    }\n\n    // If not, create a new user configuration with the provided JSON and save it.\n    else {\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setCustomKey(customKey);\n        userConfiguration.setValue(json.toString());\n        userConfigurationRepository.save(userConfiguration);\n    }\n\n    // Return a successful result.\n    return new ResponseEntity<>(HttpStatus.OK);\n}", "CodeBleu_score": 57.42823341463308}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t// Get the user configuration by the provided key\n    UserConfiguration userConfiguration = userConfigurationService.findByUserIdAndCustomKey(getUserId(), customKey);\n\n    // If the configuration exists, update its value with the provided JSON\n    if (userConfiguration != null) {\n        userConfiguration.setValue(json.toString());\n        userConfigurationService.update(userConfiguration);\n    }\n    // If not, create a new user configuration with the provided JSON and save it\n    else {\n        userConfiguration = new UserConfiguration();\n        userConfiguration.setUserId(getUserId());\n        userConfiguration.setCustomKey(customKey);\n        userConfiguration.setValue(json.toString());\n        userConfigurationService.create(userConfiguration);\n    }\n\n    // Return a successful result\n    return new Result(Result.SUCCESS);\n}", "CodeBleu_score": 50.27067143367331}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = userService.findUserById(userId);\n    if (user == null) {\n        return Result.fail(\"User not found\");\n    }\n\n    Department department = departmentService.findDepartmentById(user.getDepartmentId());\n    if (department != null) {\n        user.setDepartmentName(department.getDepartmentName());\n    }\n\n    user.setSalt(null);\n    user.setPassword(null);\n    return Result.success(user);\n}", "CodeBleu_score": 46.713611239270705}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserService.findById(userId);\n    user.setDepartmentName(departmentService.findById(user.getDepartmentId()).getName());\n    user.setSalt(null);\n    user.setPassword(null);\n    return new Result<>(user);\n}", "CodeBleu_score": 39.58858653342135}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\tAdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return Result.error(ResultCode.USER_NOT_EXIST);\n    }\n\n    Department department = departmentService.getById(user.getDepartmentId());\n    if (department != null) {\n        user.setDepartmentName(department.getName());\n    }\n\n    user.setSalt(null);\n    user.setPassword(null);\n\n    return Result.ok(user);\n}", "CodeBleu_score": 47.32660830232859}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t// Get the user ID\n    String userId = session(\"userId\");\n\n    // Check if there are multiple \"readNotice\" entries for the user\n    List<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userId\", userId).findList();\n\n    // If there are multiple entries, update the status to 1 for all matching entries\n    if (readNoticeList.size() > 1) {\n        for (ReadNotice readNotice : readNoticeList) {\n            readNotice.status = 1;\n            readNotice.update();\n        }\n    }\n\n    // If there is only one entry, create a new \"readNotice\" entry with status 1 and save it\n    else if (readNoticeList.size() == 1) {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userId = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n\n    // If there are no entries, create a new \"readNotice\" entry with status 1 and save it\n    else {\n        ReadNotice readNotice = new ReadNotice();\n        readNotice.userId = userId;\n        readNotice.status = 1;\n        readNotice.save();\n    }\n\n    return ok();\n}", "CodeBleu_score": 28.497069422120525}, {"code": " public Result readNotice() {\n\t// Get the current user ID\n \tString currentUserId = session().get(\"userid\");\n\n \t// Check if there are multiple \"readNotice\" entries for the current user\n \tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"userid\", currentUserId).findList();\n\n \t// If there are multiple entries, update all of them to status 1\n \tif (readNoticeList.size() > 1) {\n \t\tfor (ReadNotice readNotice : readNoticeList) {\n \t\t\treadNotice.status = 1;\n \t\t\treadNotice.save();\n \t\t}\n \t}\n\n \t// If there is only one entry, create a new one with status 1\n \telse if (readNoticeList.size() == 1) {\n \t\tReadNotice readNotice = new ReadNotice();\n \t\treadNotice.userid = currentUserId;\n \t\treadNotice.status = 1;\n \t\treadNotice.save();\n \t}\n\n \t// If there are no entries, create a new one with status 1\n \telse {\n \t\tReadNotice readNotice = new ReadNotice();\n \t\treadNotice.userid = currentUserId;\n \t\treadNotice.status = 1;\n \t\treadNotice.save();\n \t}\n\n \treturn ok(success.render());\n }", "CodeBleu_score": 26.08796142151285}, {"code": " public Result readNotice() {\n\tUser user = User.find.byId(request().username());\n\t\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"user\", user).findList();\n\t\t\n\t\tif (readNotices.size() > 1) {\n\t\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\t\treadNotice.read = true;\n\t\t\t\treadNotice.update();\n\t\t\t}\n\t\t} else if (readNotices.size() == 0) {\n\t\t\tReadNotice readNotice = new ReadNotice();\n\t\t\treadNotice.user = user;\n\t\t\treadNotice.read = true;\n\t\t\treadNotice.save();\n\t\t}\n\t\t\n\t\treturn ok();\n\t}", "CodeBleu_score": 24.626293554850346}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\ttry {\n        // Get the configuration object\n        Configuration config = Configuration.get(\"companyInfo\");\n        // If the configuration does not exist, create a new one\n        if (config == null) {\n            config = new Configuration();\n            config.setName(\"companyInfo\");\n        }\n        // Update the configuration's value with the provided company information in JSON format\n        config.setValue(adminCompanyBO.toJson());\n        // Save or update the configuration\n        config.save();\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 31.642573328630746}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t// Search for an existing configuration with the name \"companyInfo\"\n    AdminConfigurationBO adminConfigBO = adminService.getAdminConfiguration(new AdminConfigurationKeyBO(\"companyInfo\"));\n\n    // If the configuration is not found, create a new one\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigurationBO();\n        adminConfigBO.setAdminConfigurationKey(new AdminConfigurationKeyBO(\"companyInfo\"));\n    }\n\n    // Set the configuration value to the provided company information in JSON format\n    adminConfigBO.setAdminConfigurationValue(adminCompanyBO.toJson());\n\n    // Save or update the configuration\n    adminService.saveAdminConfiguration(adminConfigBO);\n}", "CodeBleu_score": 37.38808231754488}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t// Search for an existing configuration with the name \"companyInfo.\"\n    List<AdminConfigBO> adminConfigBOList = adminCompanyBO.getAdminConfigBOList();\n    AdminConfigBO adminConfigBO = null;\n    for (AdminConfigBO configBO : adminConfigBOList) {\n        if (configBO.getConfigName().equals(\"companyInfo\")) {\n            adminConfigBO = configBO;\n            break;\n        }\n    }\n    // If not found, create a new configuration with default values.\n    if (adminConfigBO == null) {\n        adminConfigBO = new AdminConfigBO();\n        adminConfigBO.setConfigName(\"companyInfo\");\n        adminConfigBO.setConfigValue(\"{\\\"companyName\\\": \\\"\\\", \\\"companyAddress\\\": \\\"\\\", \\\"companyPhone\\\": \\\"\\\", \\\"companyEmail\\\": \\\"\\\", \\\"companyWebsite\\\": \\\"\\\"}\");\n        adminConfigBOList.add(adminConfigBO);\n    }\n    // Update the configuration's value with the provided company information in JSON format.\n    CompanyInfo companyInfo = adminCompanyBO.getCompanyInfo();\n    String companyInfoJson = \"{\\\"companyName\\\": \\\"\" + companyInfo.getCompanyName() + \"\\\", \\\"companyAddress\\\": \\\"\" + companyInfo.getCompanyAddress() + \"\\\", \\\"companyPhone\\\": \\\"\" + companyInfo.getCompanyPhone() + \"\\\", \\\"companyEmail\\\": \\\"\" + companyInfo.getCompanyEmail() + \"\\\", \\\"companyWebsite\\\": \\\"\" + companyInfo.getCompanyWebsite() + \"\\\"}\";\n    adminConfigBO.setConfigValue(companyInfoJson);\n    // Save or update the configuration.\n    adminCompanyBO.setAdminConfigBOList(adminConfigBOList);\n    adminCompanyBO.update();\n}", "CodeBleu_score": 31.860426493588655}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO acbo = new AdminCompanyBO();\n    try {\n        // Retrieve the admin configuration for the company.\n        String adminConfig = AdminConfig.getConfig(getCompany(), \"AdminCompany\");\n        // If admin configuration is found, parse the configuration into an AdminCompanyBO object.\n        if (!StringUtil.isEmpty(adminConfig)) {\n            acbo = (AdminCompanyBO)ObjectUtil.getObject(acbo, adminConfig);\n        }\n    } catch (Exception e) {\n        // Log the error.\n        Debug.logError(e, \"Error retrieving admin configuration for company: \" + getCompany(), MODULE);\n    }\n    return acbo;\n}", "CodeBleu_score": 36.17462582410576}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\n    // Retrieve the admin configuration for this company.\n    AdminConfig adminConfig = AdminConfig.get(company);\n    if (adminConfig == null) {\n        return adminCompany;\n    }\n\n    // Retrieve the configuration value.\n    String configValue = adminConfig.getConfigValue();\n    if (configValue == null) {\n        return adminCompany;\n    }\n\n    // Parse the configuration value into an AdminCompanyBO object.\n    adminCompany = AdminCompanyBO.parse(configValue);\n    return adminCompany;\n}", "CodeBleu_score": 38.11377890648105}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t// Retrieve the admin configuration for this company.\n    AdminCompanyBO adminConfig = (AdminCompanyBO) Company.getCompany().getAdminConfig(AdminCompanyBO.class, \"AdminCompanyBO\");\n    // If the admin configuration was found, parse it into an AdminCompanyBO object.\n    if (adminConfig != null) {\n        adminConfig = (AdminCompanyBO) ObjectHelper.getObject(AdminCompanyBO.class, adminConfig.getConfiguration());\n    } else {\n        // If no admin configuration was found, create a new instance.\n        adminConfig = new AdminCompanyBO();\n    }\n    return adminConfig;\n}", "CodeBleu_score": 48.39647797220949}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> configs = new ArrayList<AdminConfig>();\n\n    for (String string : stringList) {\n        AdminConfig config = new AdminConfig();\n        config.setName(LOG_WELCOME_SPEECH_CONFIG_NAME);\n        config.setValue(string);\n        configs.add(config);\n    }\n\n    admin.setConfig(configs);\n\n}", "CodeBleu_score": 37.129433888444005}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> configList = new ArrayList<>();\n     for (String string : stringList) {\n         AdminConfig config = new AdminConfig();\n         config.setProperty(\"name\", \"logWelcomeSpeech\");\n         config.setProperty(\"value\", string);\n         configList.add(config);\n     }\n     AdminConfig.removeConfigs(configList);\n     AdminConfig.saveConfigs(configList);\n }", "CodeBleu_score": 52.36729410515333}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n     for (String string : stringList) {\n         AdminConfig config = new AdminConfig();\n         config.setProperty(\"log.welcome.speech\", string);\n         configList.add(config);\n     }\n     AdminConfig.removeConfigs(configList);\n     AdminConfig.saveConfigs(configList);\n }", "CodeBleu_score": 42.91352898369042}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t// Retrieve the current user ID and user details\n    AdminBO adminBO = getAdminBO(adminInitDataBO.getUsername());\n\n    // Check the provided password against the stored password using the username and salt\n    if (!verifyPassword(adminInitDataBO.getPassword(), adminBO.getPassword(), adminBO.getSalt())) {\n        throw new InvalidPasswordException(\"Invalid password\");\n    }\n\n    // Generate a temporary access code\n    String accessCode = generateAccessCode();\n\n    // Store the access code in Redis with a 10-minute expiration\n    storeAccessCode(adminBO.getId(), accessCode);\n\n    // Return the access code\n    return accessCode;\n\n}", "CodeBleu_score": 20.19600335666696}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t// Retrieve the current user ID and user details\n    String userId = adminInitDataBO.getUserId();\n    String username = adminInitDataBO.getUsername();\n    String salt = adminInitDataBO.getSalt();\n\n    // Check the provided password against the stored password\n    if (!PasswordUtils.verifyUserPassword(adminInitDataBO.getPassword(), username, salt)) {\n        throw new InvalidPasswordException(\"Invalid password\");\n    }\n\n    // Generate a temporary access code\n    String accessCode = UUID.randomUUID().toString();\n\n    // Store the access code in Redis with a 10-minute expiration\n    redisTemplate.opsForValue().set(userId, accessCode, 10, TimeUnit.MINUTES);\n\n    // Return the access code\n    return accessCode;\n}", "CodeBleu_score": 30.14402813523364}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t// Retrieve the current user ID and user details.\n    String userId = adminInitDataBO.getUserId();\n    String username = adminInitDataBO.getUsername();\n    String salt = adminInitDataBO.getSalt();\n    String storedPassword = adminInitDataBO.getPassword();\n\n    // Check the provided password against the stored password using the username and salt.\n    if (!checkPassword(username, salt, adminInitDataBO.getPassword(), storedPassword)) {\n        // The password is incorrect.\n        throw new InvalidPasswordException();\n    }\n\n    // Generate a temporary access code.\n    String accessCode = generateAccessCode();\n\n    // Store the access code in Redis with a 10-minute expiration.\n    redisService.setAccessCode(userId, accessCode, 10);\n\n    // Return the access code.\n    return accessCode;\n}", "CodeBleu_score": 28.314688744333406}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tString userId = session.getAttribute(\"userId\").toString();\n    String key = \"menu:\" + userId;\n    String unauthMenuUrls = redis.get(key);\n    if (unauthMenuUrls != null) {\n        String[] unauthUrls = unauthMenuUrls.split(\",\");\n        for (String unauthUrl : unauthUrls) {\n            if (unauthUrl.equals(request.getRequestURI())) {\n                return true;\n            }\n        }\n    }\n    return false;\n}", "CodeBleu_score": 37.80812765775552}, {"code": "private boolean verifyInitAuth(){\n\t// Retrieve the user ID\n    String userID = session.getAttribute(\"userID\");\n\n    // Construct the key\n    String key = \"unauth:\" + userID;\n\n    // Retrieve the list of unauthorized menu URLs\n    List<String> unauth = redis.lrange(key, 0, -1);\n\n    // Check if the initial authentication URL is in the list\n    if (unauth.contains(request.getRequestURI())) {\n        return true;\n    } else {\n        return false;\n    }\n\n}", "CodeBleu_score": 34.431390796571534}, {"code": "private boolean verifyInitAuth(){\n\tdef userId = session.getAttribute(\"userId\")\n    def key = \"userId:\" + userId + \":unauthUrls\"\n    def unauthUrls = redisService.get(key)\n    if (unauthUrls == null) {\n        return false\n    } else {\n        if (unauthUrls.contains(request.getRequestURI())) {\n            return true\n        } else {\n            return false\n        }\n    }\n}", "CodeBleu_score": 29.655854849361095}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\n    for (Integer menuId : menuIdList) {\n        AdminRoleMenu roleMenu = new AdminRoleMenu();\n        roleMenu.setRoleId(roleId);\n        roleMenu.setMenuId(menuId);\n        roleMenuList.add(roleMenu);\n    }\n    adminRoleMenuService.saveBatch(roleMenuList);\n}", "CodeBleu_score": 57.695415529969765}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tadminRoleMenuDao.saveBatch(roleMenuList);\n}", "CodeBleu_score": 47.53686807216162}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<AdminRoleMenu>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\troleMenuList.add(roleMenu);\n\t}\n\tadminRoleMenuDao.saveBatch(roleMenuList);\n}", "CodeBleu_score": 47.53686807216162}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n    Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n    map.put(\"createTime\", DateUtil.formatDateTime(sysLog.getCreateTime()));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 54.40009843524955}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n    Map<String, Object> map = new HashMap<>(16);\n    map.put(\"requestIp\", sysLog.getRequestIp());\n    map.put(\"requestUri\", sysLog.getRequestUri());\n    map.put(\"requestMethod\", sysLog.getRequestMethod());\n    map.put(\"requestParams\", sysLog.getRequestParams());\n    map.put(\"requestBody\", sysLog.getRequestBody());\n    map.put(\"responseBody\", sysLog.getResponseBody());\n    map.put(\"createTime\", sysLog.getCreateTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n    map.put(\"createBy\", sysLog.getCreateBy());\n    map.put(\"type\", sysLog.getType());\n    map.put(\"remark\", sysLog.getRemark());\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u5f02\u6b65\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 47.27865229961568}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\n    Map<String, Object> map = objectMapper.convertValue(sysLog, new TypeReference<Map<String, Object>>() {\n    });\n    map.put(\"createTime\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n    map.remove(\"id\");\n    IndexRequest indexRequest = new IndexRequest(index);\n    indexRequest.source(map);\n    try {\n        restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n    } catch (IOException e) {\n        log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n}", "CodeBleu_score": 58.18066071136081}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tSearchRequest searchRequest = new SearchRequest(getSysLogIndex(querySysLogBO.getType()));\n    searchRequest.source(createSearchSourceBuilder(querySysLogBO));\n    BasePage<SysLog> basePage = new BasePage<>();\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        List<SysLog> sysLogList = Arrays.stream(searchResponse.getHits().getHits()).map(SearchHit::getSourceAsMap).map(this::mapToSysLog).collect(Collectors.toList());\n        basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n        basePage.setPage(querySysLogBO.getPage());\n        basePage.setSize(querySysLogBO.getLimit());\n        basePage.setRecords(sysLogList);\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5206\u9875\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n    return basePage;\n}", "CodeBleu_score": 49.68057897294554}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tBasePage<SysLog> basePage = new BasePage<>();\n    // \u521d\u59cb\u5316\u67e5\u8be2\u6761\u4ef6\n    SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n    // \u6392\u5e8f\n    searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n    // \u8bbe\u7f6e\u4e0d\u9700\u8981\u8fd4\u56de\u7684\u5b57\u6bb5\n    String[] excludes = new String[]{\"content\", \"subModelLabel\"};\n    searchSourceBuilder.fetchSource(excludes, null);\n    // \u6267\u884c\u641c\u7d22\u8bf7\u6c42\n    SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n    searchRequest.source(searchSourceBuilder);\n    try {\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        // \u83b7\u53d6\u603b\u6761\u6570\n        long totalHits = searchResponse.getHits().getTotalHits().value;\n        // \u83b7\u53d6\u5f53\u524d\u9875\u6570\u636e\n        List<SysLog> list = Arrays.stream(searchResponse.getHits().getHits()).map(hit -> {\n            SysLog sysLog = JSON.parseObject(hit.getSourceAsString(), SysLog.class);\n            sysLog.setId(hit.getId());\n            return sysLog;\n        }).collect(Collectors.toList());\n        // \u8bbe\u7f6e\u8fd4\u56de\u6570\u636e\n        basePage.setTotal(totalHits);\n        basePage.setList(list);\n        basePage.setPage(querySysLogBO.getPage());\n        basePage.setLimit(querySysLogBO.getLimit());\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5206\u9875\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n    return basePage;\n}", "CodeBleu_score": 53.57957533223362}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tBasePage<SysLog> basePage = new BasePage<>();\n    try {\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        //\u6392\u5e8f\n        searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n        //\u8bbe\u7f6e\u8fd4\u56de\u5b57\u6bb5\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"model\", \"subModelLabel\", \"content\", \"createTime\"}, null);\n        //\u6267\u884c\u67e5\u8be2\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        searchRequest.source(searchSourceBuilder);\n        SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        //\u83b7\u53d6\u603b\u6570\n        long totalHits = searchResponse.getHits().getTotalHits().value;\n        //\u83b7\u53d6\u67e5\u8be2\u7ed3\u679c\n        SearchHit[] searchHits = searchResponse.getHits().getHits();\n        //\u8bbe\u7f6e\u5206\u9875\n        basePage.setTotal(totalHits);\n        basePage.setPage(querySysLogBO.getPage());\n        basePage.setLimit(querySysLogBO.getLimit());\n        //\u8bbe\u7f6e\u6570\u636e\n        List<SysLog> sysLogList = new ArrayList<>();\n        for (SearchHit searchHit : searchHits) {\n            SysLog sysLog = JSONUtil.toBean(searchHit.getSourceAsString(), SysLog.class);\n            sysLog.setId(searchHit.getId());\n            sysLogList.add(sysLog);\n        }\n        basePage.setData(sysLogList);\n    } catch (IOException e) {\n        log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n    }\n    return basePage;\n}", "CodeBleu_score": 57.366885166333795}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n    const request = https.get(url, response => {\n        response.pipe(file);\n        file.on('finish', () => {\n            file.close();\n        });\n    });\n    await new Promise((resolve, reject) => {\n        file.on('error', err => {\n            file.close();\n            fs.unlink(dest, () => {});\n            reject(err);\n        });\n        request.on('error', err => {\n            file.close();\n            fs.unlink(dest, () => {});\n            reject(err);\n        });\n        request.on('response', response => {\n            if (response.statusCode !== 200) {\n                file.close();\n                fs.unlink(dest, () => {});\n                reject(new Error(`Download failed with status code ${response.statusCode}`));\n            }\n        });\n        request.on('end', () => {\n            resolve();\n        });\n    });\n}", "CodeBleu_score": 46.622680222840316}, {"code": "async function downloadFile(url, dest){\n\treturn new Promise((resolve, reject) => {\n    const file = fs.createWriteStream(dest);\n    https.get(url, (response) => {\n      response.pipe(file);\n      file.on('finish', () => {\n        file.close();\n        resolve();\n      });\n    }).on('error', (err) => {\n      fs.unlink(dest, () => {\n        reject(err);\n      });\n    });\n  });\n}", "CodeBleu_score": 61.41394970416159}, {"code": "async function downloadFile(url, dest){\n\tconst file = fs.createWriteStream(dest);\n    const request = https.get(url, function(response) {\n        response.pipe(file);\n        file.on('finish', function() {\n            file.close();\n        });\n    });\n    await new Promise((resolve, reject) => {\n        file.on('finish', resolve);\n        file.on('error', reject);\n    });\n}", "CodeBleu_score": 48.95482915614432}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn module.getDependentModules().stream()\n        .filter(dependentModuleId -> !circularDependencyCheckSet.contains(dependentModuleId))\n        .map(dependentModuleId -> {\n          circularDependencyCheckSet.add(dependentModuleId);\n          return moduleRepository.findById(dependentModuleId);\n        })\n        .reduce(Flux.empty(), Flux::concat)\n        .onErrorResume(error -> {\n          logger.warn(\"Failed to retrieve dependent modules for module with ID '{}'.\", module.getId(), error);\n          return Flux.empty();\n        });\n}", "CodeBleu_score": 50.91350119588858}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn Flux.fromIterable(module.getDependencies())\n        .filter(id -> !circularDependencyCheckSet.contains(id))\n        .doOnNext(id -> circularDependencyCheckSet.add(id))\n        .flatMap(id -> getModuleById(id))\n        .onErrorContinue((err, id) -> log.warn(\"Error while resolving dependencies for module {}: {}\", id, err.getMessage()))\n        .doOnNext(dep -> circularDependencyCheckSet.remove(dep.getId()));\n}", "CodeBleu_score": 56.70612844763719}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\treturn Flux.fromIterable(module.getDependencies())\n        .filter(dependencyId -> !circularDependencyCheckSet.contains(dependencyId))\n        .doOnNext(dependencyId -> circularDependencyCheckSet.add(dependencyId))\n        .flatMap(this::getModule)\n        .doOnError(error -> LOGGER.warn(\"Unable to retrieve dependent module for module with ID {}.\", module.getId(), error))\n        .onErrorResume(error -> Mono.empty());\n}", "CodeBleu_score": 56.509911999886164}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tObject compType = map.get(\"compType\");\n    if (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n        Object comp = map.get(\"comp\");\n        if (comp instanceof Map<?, ?> compMap) {\n            String appId = (String) compMap.get(\"appId\");\n            if (StringUtils.isNotBlank(appId)) {\n                dependentModuleIds.add(appId);\n            }\n        }\n    }\n\n    map.forEach((key, value) -> {\n        if (value instanceof Map<?, ?> valueMap) {\n            doGetDependentModules(valueMap, dependentModuleIds);\n        }\n        if (value instanceof List<?> valueList) {\n            valueList.forEach(i -> {\n                if (i instanceof Map<?, ?> iMap) {\n                    doGetDependentModules(iMap, dependentModuleIds);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 99.34601889482744}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tAsset asset = new Asset();\n        if (createThumbnail) {\n            asset.setContentType(\"image/jpeg\");\n            asset.setData(resizeImage(dataBuffer));\n        } else {\n            asset.setContentType(srcContentType.toString());\n            asset.setData(dataBuffer.asByteBuffer().array());\n        }\n        return asset;\n    }", "CodeBleu_score": 30.165268029186116}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = createThumbnail ? resizeImage(dataBuffer) : dataBuffer.asByteArray();\n        MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        DataBufferUtils.release(dataBuffer);\n        return Asset.builder()\n                .data(SdkBytes.fromByteArray(data))\n                .contentType(contentType.toString())\n                .build();\n    }", "CodeBleu_score": 42.56825094838309}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tbyte[] data = createThumbnail ? resizeImage(dataBuffer) : dataBuffer.asByteArray();\n        MediaType contentType = createThumbnail ? MediaType.IMAGE_JPEG : srcContentType;\n        DataBufferUtils.release(dataBuffer);\n        return Asset.builder()\n                .contentType(contentType)\n                .data(data)\n                .build();\n    }", "CodeBleu_score": 42.022639230663536}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n        .flatMap(asset -> {\n            ServerHttpResponse response = exchange.getResponse();\n            response.setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                response.getHeaders().set(HttpHeaders.CONTENT_TYPE, asset.getContentType());\n            }\n            DataBuffer dataBuffer = response.bufferFactory().wrap(asset.getData());\n            return response.writeWith(Mono.just(dataBuffer));\n        });\n}", "CodeBleu_score": 57.06740307486721}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn getById(assetId)\n            .flatMap(asset -> {\n                exchange.getResponse().setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    exchange.getResponse().getHeaders().setContentType(MediaType.parseMediaType(asset.getContentType()));\n                }\n                DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n                return exchange.getResponse().writeWith(Mono.just(dataBuffer));\n            });\n}", "CodeBleu_score": 53.46391804347188}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\treturn repository.findById(assetId)\n        .flatMap(asset -> {\n            exchange.getResponse().setStatusCode(HttpStatus.OK);\n            if (asset.getContentType() != null) {\n                exchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n            }\n            return exchange.getResponse().writeWith(Mono.just(asset.getData()));\n        })\n        .switchIfEmpty(Mono.defer(() -> {\n            exchange.getResponse().setStatusCode(HttpStatus.NOT_FOUND);\n            return exchange.getResponse().setComplete();\n        }));\n}", "CodeBleu_score": 43.21266521396169}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn Flux.defer(() -> {\n        if (workspaceMode == WorkspaceMode.SAAS) {\n            return Flux.empty();\n        }\n        return findAllOrganizations()\n            .flatMap(organization -> {\n                return findAuthConfigsForOrganization(organization.id);\n            });\n    });\n}", "CodeBleu_score": 30.610963709414268}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\treturn Flux.create(sink -> {\n        if (workspaceMode == WorkspaceMode.SAAS) {\n            sink.complete();\n        } else {\n            organizationService.findAll()\n                    .flatMap(organization -> {\n                        return authConfigService.findByOrganizationId(organization.getId())\n                                .map(authConfig -> {\n                                    return new FindAuthConfig(authConfig, organization);\n                                });\n                    })\n                    .subscribe(sink::next, sink::error, sink::complete);\n        }\n    });\n}", "CodeBleu_score": 30.605049943394025}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t// If the workspace is SAAS, we don't need to fetch any auth configs.\n    if (workspace.workspaceType == WorkspaceType.SAAS) {\n        return Flux.empty()\n    }\n\n    // Otherwise, fetch all orgs and map them to auth configs.\n    return findAllOrgs().flatMap { org ->\n        Flux.just(org.id).flatMap { orgID ->\n            Flux.from(org.getAuthentication()).map { auth ->\n                FindAuthConfig(\n                    orgID = orgID,\n                    orgName = org.name,\n                    orgDisplayName = org.displayName,\n                    authName = auth.name,\n                    authType = auth.type,\n                    authID = auth.id,\n                    authEnabled = auth.enabled\n                )\n            }\n        }\n    }\n}", "CodeBleu_score": 24.65112050846573}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\tMongoClient mongoClient = mongoTemplate.getMongoDbFactory().getMongoClient();\n    MongoDatabase db = mongoClient.getDatabase(mongoTemplate.getDb().getName());\n\n    return MongockSpring5.builder()\n            .setDriver(new MongoSync4Driver(db, \"mongockChangeLog\"))\n            .setLockRepositoryName(\"mongockLock\")\n            .addChangeLogsScanPackage(\"com.example.demo.mongock\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 44.38498519976763}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n            .setDriver(mongoTemplate.getDb().getMongoClient())\n            .setDbName(mongoTemplate.getDb().getName())\n            .addChangeLogsScanPackage(\"com.example.demo.changelog\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 30.581788250197416}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n            .setDriver(mongoTemplate)\n            .addChangeLogsScanPackage(\"com.example.demo.migration\")\n            .setSpringContext(springContext)\n            .buildApplicationRunner();\n}", "CodeBleu_score": 26.218137360512227}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.21973361724991}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t// Set the read preference to \"secondaryPreferred\"\n  ReadPreference readPreference = ReadPreference.secondaryPreferred();\n\n  // Create a new ReactiveMongoTemplate instance\n  ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n  // Set the read preference\n  reactiveMongoTemplate.setReadPreference(readPreference);\n\n  // Return the configured ReactiveMongoTemplate\n  return reactiveMongoTemplate;\n}", "CodeBleu_score": 60.59882120529048}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n    reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n    return reactiveMongoTemplate;\n}", "CodeBleu_score": 77.21973361724991}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getById(libraryQueryId)\n                .map(LibraryQuery::getDsl)\n                .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n                .flatMap(dsl -> getLiveDSL(dsl, libraryQueryId));\n    }", "CodeBleu_score": 40.08556609579131}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn getById(libraryQueryId)\n                .flatMap(libraryQuery -> {\n                    if (libraryQuery.getDsl() != null) {\n                        return Mono.just(libraryQuery.getDsl());\n                    } else {\n                        return getDSLById(libraryQuery.getDslId());\n                    }\n                });\n    }", "CodeBleu_score": 43.3122695713211}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findLatestById(libraryQueryId)\n                .switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"))\n                .flatMap(libraryQuery -> {\n                    if (StringUtils.hasText(libraryQuery.getDsl())) {\n                        return Mono.just(libraryQuery.getDsl());\n                    }\n                    return libraryQueryService.getById(libraryQueryId)\n                            .flatMap(libraryQuery1 -> Mono.justOrEmpty(libraryQuery1.getDsl()));\n                })\n                .flatMap(dsl -> {\n                    try {\n                        return Mono.just(objectMapper.readValue(dsl, new TypeReference<>() {\n                        }));\n                    } catch (JsonProcessingException e) {\n                        return Mono.error(new AppsmithException(AppsmithError.INVALID_JSON_IN_LIBRARY_QUERY, dsl));\n                    }\n                });\n    }", "CodeBleu_score": 40.91707952977005}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDuration timeoutDuration = Duration.ofMillis(Long.parseLong(timeoutStr));\n        return executeWithTimeout(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext)\n                .onErrorResume(e -> {\n                    if (e instanceof TimeoutException) {\n                        return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR, \"Query execution timed out. Please increase timeout.\"));\n                    } else if (e instanceof AppsmithPluginException) {\n                        return Mono.error(e);\n                    } else {\n                        log.error(\"Unhandled exception while executing query.\", e);\n                        return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"Unhandled error while executing query.\"));\n                    }\n                });\n    }", "CodeBleu_score": 42.980262641569176}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDuration timeoutDuration = Duration.ofMillis(Long.parseLong(timeoutStr));\n        return executeQuery(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext);\n    }", "CodeBleu_score": 22.914765817999523}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\ttry {\n            Duration timeoutDuration = Duration.parse(timeoutStr);\n            return Mono.defer(() -> {\n                if (datasource.getType().equals(PluginType.JS)) {\n                    return executeByNodeJs(datasource, queryConfig, requestParams);\n                } else {\n                    return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n                }\n            })\n                    .timeout(timeoutDuration)\n                    .onErrorMap(TimeoutException.class, e -> new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_QUERY_TIMEOUT_ERROR,\n                            \"Query execution timed out. Please check if your query has the proper syntax or modify the timeout duration.\"\n                    ))\n                    .onErrorMap(e -> {\n                        if (e instanceof AppsmithPluginException) {\n                            return e;\n                        }\n                        log.error(\"Error executing query: \", e);\n                        return new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"Query execution failed with error \" + e.getMessage());\n                    })\n                    .map(result -> {\n                        log.debug(\"Query execution result: {}\", result);\n                        return result;\n                    });\n        } catch (Exception e) {\n            log.error(\"Error executing query: \", e);\n            return Mono.error(new AppsmithPluginException(AppsmithPluginError.PLUGIN_ERROR, \"Query execution failed with error \" + e.getMessage()));\n        }\n    }", "CodeBleu_score": 56.34853151779324}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t// Get the query executor for the datasource type\n    QueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource.getDatasourceConfiguration().getType());\n\n    // Build the query execution context\n    QueryExecutionContext queryExecutionContext = queryExecutor.getExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n    // Acquire a connection from the datasource connection pool\n    return datasourceConnectionManager.getConnection(datasource)\n            .flatMap(connection -> {\n                // Execute the query using the connection\n                return queryExecutor.execute(connection, queryExecutionContext);\n            })\n            .onErrorMap(error -> {\n                // Handle any errors that occur during query execution\n                if (error instanceof StaleConnectionException) {\n                    return new AppsmithPluginException(\n                            AppsmithPluginError.PLUGIN_ERROR,\n                            \"Connection is no longer available. Please retry.\"\n                    );\n                }\n\n                return error;\n            })\n            .flatMap(result -> {\n                // Release the connection back into the connection pool\n                return datasourceConnectionManager.release(datasource, connection)\n                        .thenReturn(result);\n            });\n}", "CodeBleu_score": 44.923309314359784}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\tlog.debug(\"Executing query locally for datasource {}\", datasource.getName());\n    final QueryExecutor queryExecutor = queryExecutorProvider.getExecutor(datasource.getDatasourceConfiguration());\n    final QueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n    final ConnectionContext connectionContext = new ConnectionContext(datasource.getDatasourceConfiguration());\n    return Mono.using(() -> connectionContext.init(),\n            connection -> queryExecutor.execute(connection, queryExecutionContext),\n            ConnectionContext::destroy)\n            .onErrorMap(error -> {\n                log.error(\"Error executing query locally for datasource {}: {}\", datasource.getName(), error.getMessage());\n                return new AppsmithPluginException(\n                        AppsmithPluginError.PLUGIN_ERROR,\n                        \"Error executing query locally for datasource \" + datasource.getName() + \": \" + error.getMessage()\n                );\n            });\n}", "CodeBleu_score": 42.494636102157266}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t// Get the query executor for the datasource type\n    QueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource.getDatasourceConfiguration());\n\n    // Build the query execution context\n    QueryExecutionContext queryExecutionContext = queryExecutor.getExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n    // Acquire a connection from the datasource connection pool\n    Mono<Connection> connectionMono = pluginExecutorHelper.getConnectionMono(datasource, false);\n\n    // Execute the query using the connection\n    Mono<QueryExecutionResult> queryExecutionResultMono = connectionMono.flatMap(connection -> {\n        // Execute the query\n        Mono<QueryExecutionResult> resultMono = queryExecutor.execute(connection, queryExecutionContext);\n\n        // Close the connection after the query has been executed\n        return resultMono.flatMap(result -> {\n            return pluginExecutorHelper.closeConnection(connection)\n                    .thenReturn(result);\n        });\n    });\n\n    // Handle any errors that occur during execution\n    return queryExecutionResultMono.onErrorMap(error -> {\n        // Close the connection if an error occurs\n        return pluginExecutorHelper.closeConnection(connectionMono)\n                .then(Mono.error(error));\n    });\n}", "CodeBleu_score": 49.00336392738845}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MS;\n    }\n\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n    String valueStr = timeoutStr.substring(0, unitIndex);\n    double value = NumberUtils.toDouble(valueStr);\n    int valueInMs = convertToMs(value, unit);\n\n    if (valueInMs < 0) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + valueStr);\n    }\n\n    if (valueInMs > MAX_QUERY_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout value exceeds the maximum allowed value of \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n    }\n\n    return valueInMs;\n}", "CodeBleu_score": 55.88470342261601}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_TIMEOUT_MS;\n    }\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n    double value = Double.parseDouble(timeoutStr.substring(0, unitIndex));\n    int timeoutMs = convertToMs(value, unit);\n    if (timeoutMs < MIN_TIMEOUT_MS || timeoutMs > MAX_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Query timeout must be between \" + MIN_TIMEOUT_MS + \" and \" + MAX_TIMEOUT_MS + \" ms\");\n    }\n    return timeoutMs;\n}", "CodeBleu_score": 47.97836288819342}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_TIMEOUT_MS;\n    }\n\n    Pair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n    String unit = unitInfo.getLeft();\n    int unitIndex = unitInfo.getRight();\n\n    String numericValue = timeoutStr.substring(0, unitIndex);\n    if (!StringUtils.isNumeric(numericValue)) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + numericValue);\n    }\n    double value = Double.parseDouble(numericValue);\n    if (value <= 0) {\n        throw new IllegalArgumentException(\"Invalid timeout value: \" + value);\n    }\n\n    int ms = convertToMs(value, unit);\n    if (ms > MAX_TIMEOUT_MS) {\n        throw new IllegalArgumentException(\"Timeout value exceeds maximum allowed: \" + ms);\n    }\n\n    return ms;\n}", "CodeBleu_score": 55.049650833783616}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tif (application.getPublishedAppLayout() == null) {\n            return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"application layout\"));\n        }\n\n        List<String> datasourceIds = application.getPublishedAppLayout().getPublishedLayouts().stream()\n                .map(layout -> layout.getDsl().getDatasourceList())\n                .flatMap(Collection::stream)\n                .map(DatasourceDTO::getId)\n                .collect(Collectors.toList());\n\n        if (datasourceIds.isEmpty()) {\n            return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"datasource\"));\n        }\n\n        return Flux.fromIterable(datasourceIds)\n                .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                        .map(copiedDatasourceId -> Pair.of(datasourceId, copiedDatasourceId)))\n                .collectList();\n    }", "CodeBleu_score": 63.61521618566245}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t// Fetch all the live queries from the application\n        return newPageService.findByApplicationId(application.getId(), READ_LIVE_QUERIES_PAGES, false)\n                .flatMap(page -> newActionService.getUnpublishedActions(new PageDTO(page, null, null, null), READ_ACTIONS_FROM_PAGES))\n                .flatMap(action -> {\n                    if (action.getPluginType().equals(PluginType.API)) {\n                        return Mono.just(action);\n                    }\n                    return Mono.empty();\n                })\n                .collectList()\n                .flatMap(actions -> {\n                    if (actions.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.ACTION, INVALID_JSON));\n                    }\n\n                    Set<String> datasourceIds = new HashSet<>();\n                    for (BaseDomain action : actions) {\n                        ActionDTO unpublishedAction = (ActionDTO) action;\n                        datasourceIds.add(unpublishedAction.getDatasource().getId());\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                    .map(copiedDatasourceId -> Pair.of(datasourceId, copiedDatasourceId)))\n                            .collectList();\n                });\n    }", "CodeBleu_score": 49.05964991996284}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn getDatasourceIdsFromQueries(application)\n                .flatMap(datasourceIds -> {\n                    if (datasourceIds.isEmpty()) {\n                        return Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, \"queries\", \"application\"));\n                    }\n                    return Flux.fromIterable(datasourceIds)\n                            .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                                    .map(copiedDatasourceId -> new Pair<>(datasourceId, copiedDatasourceId)))\n                            .collectList();\n                });\n    }", "CodeBleu_score": 41.56079243388262}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystemGenerated()) {\n                    return Mono.just(datasourceId);\n                } else if (datasource.getCreationSource().equals(DatasourceCreationSource.LEGACY_QUICK_API.getValue())) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.getCreationSource().equals(DatasourceCreationSource.LEGACY_OPENBLOCKS_API.getValue())) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 60.8672414254473}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.getById(datasourceId)\n            .switchIfEmpty(Mono.error(new AppsmithException(AppsmithError.NO_RESOURCE_FOUND, FieldName.DATASOURCE, datasourceId)))\n            .flatMap(datasource -> {\n                if (datasource.getIsSystemGenerated()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.getDatasourceType() == Datasource.Type.LEGACY_REST_API) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.getDatasourceType() == Datasource.Type.OPENBLOCKS_API) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 52.32480913151698}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\treturn datasourceService.findById(datasourceId, READ_DATASOURCES)\n            .flatMap(datasource -> {\n                if (datasource.getIsSystemDatasource()) {\n                    return Mono.just(datasource.getId());\n                } else if (datasource.getType().equals(Datasource.Type.LEGACY_REST_API)\n                        || datasource.getType().equals(Datasource.Type.LEGACY_OPENBLOCKS_API)) {\n                    return Mono.just(datasource.getId());\n                } else {\n                    return createNewDatasourceFrom(organizationId, visitorId, datasource);\n                }\n            });\n}", "CodeBleu_score": 62.07680500572344}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.uploadAsset(filePart).flatMap(newAvatar -> {\n            if (user.getAvatar() != null) {\n                return assetService.deleteAsset(user.getAvatar()).then(updateUserAvatar(newAvatar, user.getId()));\n            } else {\n                return updateUserAvatar(newAvatar, user.getId());\n            }\n        });\n    }", "CodeBleu_score": 27.52595190078605}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn assetService.uploadAsset(filePart)\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.deleteAsset(user.getAvatar())\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 31.225637089580566}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\treturn uploadAsset(filePart, user.getId())\n                .flatMap(newAvatar -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.deleteById(user.getAvatar())\n                                .then(updateUserAvatar(newAvatar, user.getId()));\n                    } else {\n                        return updateUserAvatar(newAvatar, user.getId());\n                    }\n                });\n    }", "CodeBleu_score": 29.22293399799798}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getUsername());\n    user.setState(authUser.getState());\n    user.setEnabled(authUser.isEnabled());\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getAuthSource().equals(AuthSource.EMAIL) && authUser.getAuthContext().containsKey(AuthContext.PASSWORD)) {\n        user.setPassword(encryptionService.encryptPassword((String) authUser.getAuthContext().get(AuthContext.PASSWORD)));\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return create(user);\n}", "CodeBleu_score": 45.7021841797186}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getAuthName());\n    user.setState(authUser.getAuthState());\n    user.setEnabled(authUser.isEnabled());\n    user.setAvatar(authUser.getAvatarUrl());\n    if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().containsKey(AuthContext.AUTH_PASSWORD)) {\n        String password = authUser.getAuthContext().get(AuthContext.AUTH_PASSWORD);\n        user.setPassword(encryptionService.encryptPassword(password));\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNew(true);\n    return create(user);\n}", "CodeBleu_score": 50.46829234611945}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tUser user = new User();\n    user.setName(authUser.getName());\n    user.setState(authUser.getState());\n    user.setEnabled(authUser.isEnabled());\n    user.setAvatarUrl(authUser.getAvatarUrl());\n    if (authUser.getAuthSource() == AuthSource.EMAIL && authUser.getAuthContext().get(\"password\") != null) {\n        user.setPassword(encryptionService.encryptPassword((String) authUser.getAuthContext().get(\"password\")));\n    }\n    user.setNew(true);\n    user.setConnections(new HashSet<>(authUser.getConnections()));\n    return create(user);\n}", "CodeBleu_score": 43.945144504529374}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn emailSource.createConnection(email)\n        .map(emailConnection -> {\n            user.getConnections().add(emailConnection);\n            return user;\n        })\n        .flatMap(userRepository::save)\n        .map(user -> true)\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new EmailAlreadyBoundException(email)));\n}", "CodeBleu_score": 23.962400721860032}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn emailSource.createConnection(email)\n        .map(connection -> {\n            user.getConnections().add(connection);\n            return user;\n        })\n        .flatMap(userService::save)\n        .map(user -> true)\n        .onErrorResume(DuplicateKeyException.class, e -> {\n            return Mono.error(new EmailAlreadyBoundException());\n        });\n}", "CodeBleu_score": 25.255178583615457}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\treturn Mono.just(user)\n        .map(user -> {\n            Connection connection = new Connection();\n            connection.setProviderId(\"email\");\n            connection.setProviderUserId(email);\n            connection.setDisplayName(email);\n            connection.setProfileUrl(null);\n            connection.setImageUrl(null);\n            connection.setAccessToken(null);\n            connection.setSecret(null);\n            connection.setRefreshToken(null);\n            connection.setExpireTime(null);\n            user.getConnections().add(connection);\n            return user;\n        })\n        .flatMap(user -> userRepository.save(user))\n        .map(user -> true)\n        .onErrorResume(DuplicateKeyException.class, e -> Mono.just(false));\n}", "CodeBleu_score": 34.834107632469944}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .filter(user -> encryptionService.checkPassword(oldPassword, user.getPassword()))\n            .switchIfEmpty(Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\")))\n            .map(user -> {\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 31.750824616124145}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.isValidPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\"));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user);\n            })\n            .thenReturn(true);\n}", "CodeBleu_score": 27.733848782207833}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n            .map(user -> {\n                if (!encryptionService.checkPassword(oldPassword, user.getPassword())) {\n                    throw new BizException(BizError.INVALID_PASSWORD);\n                }\n\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return user;\n            })\n            .flatMap(repository::save)\n            .thenReturn(true);\n}", "CodeBleu_score": 29.60201842457958}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn groupService.findAllByMember(orgMember.getOrganizationId(), orgMember.getId(), withoutDynamicGroups)\n                .map(groups -> groups.stream()\n                        .filter(group -> !group.getId().equals(Group.ALL_USERS_GROUP_ID))\n                        .map(group -> Map.of(\n                                \"id\", group.getId(),\n                                \"name\", group.getLocalizedName(locale)\n                        ))\n                        .collect(Collectors.toList())\n                );\n    }", "CodeBleu_score": 26.106462149984484}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\treturn groupRepository.findAllByUserId(userId)\n                .collectList()\n                .flatMap(it -> {\n                    List<String> groupIds = it.stream()\n                            .map(Group::getId)\n                            .collect(Collectors.toList());\n\n                    return groupRepository.findAllByOrganizationIdAndUserIdIn(orgMember.getOrganizationId(), groupIds)\n                            .collectList()\n                            .map(groups -> {\n                                List<Map<String, String>> result = new ArrayList<>();\n\n                                for (Group group : groups) {\n                                    if (group.getId().equals(ALL_USERS_GROUP_ID)) {\n                                        continue;\n                                    }\n\n                                    if (withoutDynamicGroups && group.getDynamicMembership()) {\n                                        continue;\n                                    }\n\n                                    result.add(Map.of(\n                                            \"id\", group.getId(),\n                                            \"name\", group.getName().get(locale)\n                                    ));\n                                }\n\n                                return result;\n                            });\n                });\n    }", "CodeBleu_score": 31.712191350448542}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tif (orgMember.getAdmin()) {\n            return groupService.getGroups(userId, orgMember.getOrganizationId(), null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,\n                    null, null, null, null, null, null, null, null, null, null, null,", "CodeBleu_score": 12.457847948637754}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper(userStatus);\n}", "CodeBleu_score": 31.321755292189167}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper(userStatus);\n}", "CodeBleu_score": 31.321755292189167}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tUserStatus userStatus = new UserStatus();\n    userStatus.setUserId(userId);\n    userStatus.setHasShowNewUserGuidance(true);\n    return mongoUpsertHelper(userStatus, UserStatus.class, \"user_status\", \"user_id\");\n}", "CodeBleu_score": 36.95055402924633}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\t// Run the clearing operation in a run group.\n\tc.runGroup.Add(1)\n\tgo func() {\n\t\tdefer c.runGroup.Done()\n\n\t\t// Iterate over each partition and clear matching entries.\n\t\tfor k, p := range c.partitions {\n\t\t\tif predicatePartition(k, p) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}\n\t\t}\n\t}()\n}", "CodeBleu_score": 36.01692037211121}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(p)\n\t\t}\n\t}\n\n\twg.Wait()\n}", "CodeBleu_score": 39.00747298666458}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t// Ensure partition predicate is not nil\n    if predicatePartition == nil {\n        panic(\"Partition predicate is required\")\n    }\n\n    // Ensure value predicate is not nil\n    if predicateValue == nil {\n        panic(\"Value predicate is required\")\n    }\n\n    // Create a run group to handle clearing matching entries across multiple partitions concurrently\n    var wg sync.WaitGroup\n    wg.Add(len(c.partitions))\n    for partitionName, partition := range c.partitions {\n        go func(partitionName string, partition PartitionManager) {\n            defer wg.Done()\n\n            // Clear matching entries if the partition satisfies the partition predicate\n            if predicatePartition(partitionName, partition) {\n                partition.ClearMatching(predicateValue)\n            }\n        }(partitionName, partition)\n    }\n\n    // Wait for all tasks to complete\n    wg.Wait()\n}", "CodeBleu_score": 42.91864825489251}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(((maxItemsTotal * avgWeightPerPartition) / 100) + 1)\n}", "CodeBleu_score": 36.75870948186872}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn int(math.Ceil(float64(maxItemsTotal) * float64(avgWeightPerPartition) / float64(totalWeightQuantity)))\n}", "CodeBleu_score": 48.13344975234648}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\tif maxItemsTotal <= 0 || totalWeightQuantity <= 0 || numPartitions <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\n\treturn (maxItemsTotal * avgWeightPerPartition) / totalWeightQuantity\n}", "CodeBleu_score": 37.891830341652565}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\tMap<String, Object> contributorMap = new HashMap<>();\n    getConnectionMetadata()\n        .subscribe(metadata -> {\n            if (metadata != null) {\n                contributorMap.put(\"databaseProductName\", metadata.getDatabaseProductName());\n                contributorMap.put(\"databaseVersion\", metadata.getDatabaseVersion());\n            }\n        });\n    return contributorMap;\n}", "CodeBleu_score": 38.981677978785946}, {"code": "public Map<String, Object> contributorMap(){\n\treturn getConnectionMetadata()\n            .map(metadata -> {\n                Map<String, Object> map = new HashMap<>();\n                map.put(DATABASE_PRODUCT_NAME, metadata.getDatabaseProductName());\n                map.put(DATABASE_PRODUCT_VERSION, metadata.getDatabaseProductVersion());\n                return map;\n            })\n            .onErrorReturn(Collections.emptyMap())\n            .block();\n    }", "CodeBleu_score": 32.09714131979589}, {"code": "public Map<String, Object> contributorMap(){\n\treturn getConnectionMetadata()\n        .map(metadata -> {\n            Map<String, Object> map = new HashMap<>();\n            if (metadata != null) {\n                map.put(\"database.productName\", metadata.getDatabaseProductName());\n                map.put(\"database.version\", metadata.getDatabaseProductVersion());\n            }\n            return map;\n        })\n        .block();\n}", "CodeBleu_score": 40.773399509616695}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tUserSettings userSettings = configMap.getUserSettings();\n    if (userSettings == null) {\n        info.setAllowRegistration(false);\n        info.setEmailVerification(false);\n    } else {\n        info.setAllowRegistration(userSettings.isAllowRegistration());\n        info.setEmailVerification(userSettings.isEmailVerification());\n    }\n}", "CodeBleu_score": 42.40588016439461}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tUserSetting userSetting = configMap.getUserSetting();\n    if (userSetting == null) {\n        info.setRegistrationEnabled(false);\n        info.setEmailVerificationRequired(false);\n    } else {\n        info.setRegistrationEnabled(userSetting.isRegistrationEnabled());\n        info.setEmailVerificationRequired(userSetting.isEmailVerificationRequired());\n    }\n}", "CodeBleu_score": 43.469289062525654}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tUserSettings userSettings = configMap.getUserSettings();\n\tif (userSettings == null) {\n\t\tinfo.setRegistrationEnabled(false);\n\t\tinfo.setEmailVerification(false);\n\t} else {\n\t\tinfo.setRegistrationEnabled(userSettings.isRegistrationEnabled());\n\t\tinfo.setEmailVerification(userSettings.isEmailVerification());\n\t}\n}", "CodeBleu_score": 35.80616151495009}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\tThreadGroup threadGroup = new ThreadGroup(\"restart\");\n    Thread thread = new Thread(threadGroup, new Runnable() {\n        public void run() {\n            try {\n                ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n                Class<?> clazz = classLoader.loadClass(\"org.apache.catalina.startup.Bootstrap\");\n                Object instance = clazz.newInstance();\n                clazz.getDeclaredMethod(\"main\", String[].class).invoke(instance, (Object)new String[]{});\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    });\n    thread.setContextClassLoader(Thread.currentThread().getContextClassLoader());\n    thread.setDaemon(false);\n    thread.start();\n    return \"Restarting...\";\n}", "CodeBleu_score": 46.084576414662706}, {"code": "public Object restart(){\n\ttry {\n        ThreadGroup threadGroup = new ThreadGroup(\"restart\");\n        Thread thread = new Thread(threadGroup, new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                try {\n                    ClassLoader classLoader = ClassLoader.getSystemClassLoader();\n                    Class<?> clazz = classLoader.loadClass(\"com.github.h01d.weather.ui.activity.MainActivity\");\n                    Method method = clazz.getMethod(\"restart\", new Class[0]);\n                    method.invoke(null, new Object[0]);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        });\n        thread.setContextClassLoader(ClassLoader.getSystemClassLoader());\n        thread.setDaemon(false);\n        thread.start();\n        return \"Restarting...\";\n    } catch (Exception e) {\n        return e.getMessage();\n    }\n}", "CodeBleu_score": 43.94531730922058}, {"code": "public Object restart(){\n\tThreadGroup threadGroup = new ThreadGroup(\"RestartThreadGroup\");\n    Thread restartThread = new Thread(threadGroup, \"RestartThread\", this::restartProcess);\n    restartThread.setContextClassLoader(getClass().getClassLoader());\n    restartThread.setDaemon(false);\n    restartThread.start();\n    return \"Restarting application...\";\n}", "CodeBleu_score": 52.39739826631119}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n    configurer.defaultCodecs().jackson2JsonDecoder(new ObjectMapper());\n}", "CodeBleu_score": 40.05581845650464}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n    configurer.defaultCodecs().jackson2JsonDecoder(new ObjectMapper());\n}", "CodeBleu_score": 40.05581845650464}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\tconfigurer.defaultCodecs().jackson2JsonDecoder(new ObjectMapper());\n    configurer.defaultCodecs().jackson2JsonEncoder(new ObjectMapper());\n}", "CodeBleu_score": 41.17916802373143}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        GET(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(not(accept(MediaType.APPLICATION_JSON))),\n        this::serveIndex\n    );\n}", "CodeBleu_score": 18.90076979575279}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n        GET(path(\"/console/**\")\n            .and(path(\"/console/assets/**\").negate())\n            .and(accept(MediaType.TEXT_HTML))\n            .and(requestPredicate(r -> !r.getHeaders().getUpgrade().contains(\"websocket\"))))\n            .and(path(\"/console/\").negate()),\n        this::serveIndex);\n}", "CodeBleu_score": 33.28801911345508}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn RouterFunctions.route(\n            GET(\"/console/**\")\n                .and(accept(MediaType.TEXT_HTML))\n                .and(not(requestPredicate(WebSocketMessage.class))),\n            this::serveIndex\n        );\n    }", "CodeBleu_score": 20.147963180893953}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.WEBSOCKET)),\n            this::serveIndex);\n    }", "CodeBleu_score": 19.467310237850747}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n        RequestPredicates.GET(\"/uc/**\")\n            .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n            .and(RequestPredicates.not(RequestPredicates.webSocket())),\n        this::serveIndex);\n}", "CodeBleu_score": 22.76824391400355}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\treturn RouterFunctions.route(\n            RequestPredicates.GET(\"/uc/**\")\n                .and(RequestPredicates.accept(MediaType.TEXT_HTML))\n                .and(RequestPredicates.not(RequestPredicates.webSocket())),\n            this::serveIndex);\n    }", "CodeBleu_score": 23.29084209994341}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new ReactiveMapSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 11.026070332541828}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\tMapSessionRepository sessionRepository = new MapSessionRepository(new ConcurrentHashMap<>());\n    sessionRepository.setDefaultMaxInactiveInterval(config.server.session.timeout);\n    return new ReactiveIndexedSessionRepository(sessionRepository);\n}", "CodeBleu_score": 30.01819649360295}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\treturn new MapReactiveSessionRepository(new ConcurrentHashMap<>());\n}", "CodeBleu_score": 11.026070332541828}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService defaultUserDetailService = new DefaultUserDetailService(userService, roleService);\n    defaultUserDetailService.setEnableTwoFactor(haloProperties.getSecurity().getTwoFactor().isEnabled());\n    return defaultUserDetailService;\n}", "CodeBleu_score": 47.81252674899259}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService();\n    userDetailsService.setUserService(userService);\n    userDetailsService.setRoleService(roleService);\n    userDetailsService.setTwoFactorEnabled(haloProperties.getSecurity().getTwoFactor().isEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 39.21613939417724}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\tDefaultUserDetailService userDetailService = new DefaultUserDetailService(userService, roleService);\n    userDetailService.setTwoFactorAuthenticationEnabled(haloProperties.getSecurity().isTwoFactorAuthentication());\n    return userDetailService;\n}", "CodeBleu_score": 51.45204068559619}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n  owner.setKind(\"email\");\n  owner.setEmail(email != null ? email : \"\");\n  owner.setDisplayName(displayName);\n  owner.setAvatar(new Comment.CommentAvatar());\n  owner.setWebsite(new Comment.CommentWebsite());\n  return owner;\n}", "CodeBleu_score": 28.91307451274004}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner commentOwner = new Comment.CommentOwner();\n  commentOwner.setKind(\"email\");\n  commentOwner.setEmail(email != null ? email : \"\");\n  commentOwner.setDisplayName(displayName);\n  commentOwner.setAvatar(new Comment.Avatar());\n  commentOwner.setWebsite(new Comment.Website());\n  return commentOwner;\n}", "CodeBleu_score": 36.859924237517276}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\tComment.CommentOwner owner = new Comment.CommentOwner();\n  owner.setKind(\"email\");\n  owner.setEmail(getEmail() == null ? \"\" : getEmail());\n  owner.setDisplayName(getDisplayName());\n  owner.setAvatar(getAvatar());\n  owner.setWebsite(getWebsite());\n  return owner;\n}", "CodeBleu_score": 24.16637287540465}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.getKind() == \"email\") {\n        User user = getUserByEmail(commentOwner.getName());\n        if (user == null) {\n            return false;\n        }\n        return user.getUserId() == post.getOwnerId();\n    } else {\n        return commentOwner.getName() == post.getOwnerName();\n    }\n}", "CodeBleu_score": 29.482677193839603}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tif (commentOwner.kind == \"email\") {\n    User postOwner = User.get(post.owner);\n    if (postOwner.email == commentOwner.name) {\n      return true;\n    }\n  } else if (commentOwner.name == post.owner) {\n    return true;\n  }\n  return false;\n}", "CodeBleu_score": 19.617923295767575}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tString postOwner = post.getOwner();\n  String commentOwnerName = commentOwner.getName();\n  String commentOwnerKind = commentOwner.getKind();\n  if (commentOwnerKind.equals(\"email\")) {\n    User user = User.getUser(commentOwnerName);\n    if (user != null) {\n      return user.getEmail().equals(postOwner);\n    }\n  }\n  return commentOwnerName.equals(postOwner);\n}", "CodeBleu_score": 44.12518242472469}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n    String fieldSelector = null;\n    if (StringUtils.isNotBlank(labelSelector)) {\n        fieldSelector = labelSelector;\n    }\n    if (StringUtils.isNotBlank(fieldSelector)) {\n        if (StringUtils.isNotBlank(ownerName)) {\n            fieldSelector = fieldSelector + \",\" + getFieldSelectorForOwner(ownerName, ownerKind);\n        }\n        if (StringUtils.isNotBlank(keyword)) {\n            fieldSelector = fieldSelector + \",\" + getFieldSelectorForKeyword(keyword);\n        }\n        listOptions.setFieldSelector(fieldSelector);\n    }\n    return listOptions;\n}", "CodeBleu_score": 30.07363610352087}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n        String fieldSelector = getFieldSelector(labelSelector, fieldSelector);\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            fieldSelector = addCondition(fieldSelector, \"ownerName\", getOwnerName());\n        }\n        if (StringUtils.isNotBlank(getKeyword())) {\n            fieldSelector = addCondition(fieldSelector, \"keyword\", getKeyword());\n        }\n        if (StringUtils.isNotBlank(getOwnerKind())) {\n            fieldSelector = addCondition(fieldSelector, \"ownerKind\", getOwnerKind());\n        }\n        listOptions.setFieldSelector(fieldSelector);\n        return listOptions;\n    }", "CodeBleu_score": 34.26000690446039}, {"code": "public ListOptions toListOptions(){\n\tListOptions listOptions = new ListOptions();\n    String fieldSelector = new StringBuilder()\n            .append(getFieldSelector(queryParams))\n            .append(getLabelSelector(queryParams))\n            .append(getOwnerName(queryParams))\n            .append(getOwnerKind(queryParams))\n            .append(getKeyword(queryParams))\n            .toString();\n    listOptions.setFieldSelector(fieldSelector);\n    return listOptions;\n}", "CodeBleu_score": 24.861315476447192}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.justOrEmpty(commentName)\n        .flatMap(name -> this.comments.get(name))\n        .map(count -> new CommentStats(commentName, count))\n        .switchIfEmpty(Mono.just(new CommentStats(commentName, 0)));\n}", "CodeBleu_score": 30.600739496720102}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.justOrEmpty(commentName)\n      .flatMap(comment -> counterService.getCounter(comment))\n      .map(count -> new CommentStats(commentName, count))\n      .defaultIfEmpty(new CommentStats(commentName, 0));\n}", "CodeBleu_score": 31.424407358702133}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\treturn Mono.justOrEmpty(commentName)\n            .flatMap(comment -> commentCounter.get(comment))\n            .map(CommentStats::new)\n            .switchIfEmpty(Mono.just(new CommentStats()));\n}", "CodeBleu_score": 32.628476296757135}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.Interest interest = new Subscription.Interest();\n    interest.setReason(Subscription.Interest.Reason.REPLY);\n    interest.setCondition(identity.name());\n\n    Subscription.Builder builder = new Subscription.Builder();\n    builder.setSubscriber(subscriber);\n    builder.setInterest(interest);\n\n    Subscription subscription = builder.build();\n    NotificationCenter.getInstance().subscribe(subscription).blockingAwait();\n}", "CodeBleu_score": 52.14059857384711}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.InterestReason reason = new Subscription.InterestReason();\n    reason.setType(Subscription.InterestReason.Type.REPLIED_TO);\n    reason.setCondition(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setReason(reason);\n\n    notificationCenter.subscribe(subscription).block();\n}", "CodeBleu_score": 55.281827189589826}, {"code": "void subscribeReply(UserIdentity identity){\n\tSubscription.Subscriber subscriber = createSubscriber(identity);\n    if (subscriber == null) {\n        return;\n    }\n\n    Subscription.Interest interest = new Subscription.Interest();\n    interest.setReason(Subscription.Interest.Reason.REPLIED_TO);\n    interest.setCondition(identity.name());\n\n    Subscription subscription = new Subscription();\n    subscription.setSubscriber(subscriber);\n    subscription.setInterest(interest);\n\n    try {\n        notificationCenter.subscribe(subscription).get();\n    } catch (InterruptedException | ExecutionException e) {\n        e.printStackTrace();\n    }\n}", "CodeBleu_score": 51.59821763554007}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> c.toBuilder().setApproved(true).setApprovedTime(Instant.now()).build());\n}", "CodeBleu_score": 13.878913093992464}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(), c -> c.toBuilder()\n        .setApproved(true)\n        .setApprovedTime(Timestamp.from(Instant.now()))\n        .build());\n}", "CodeBleu_score": 16.25386297941587}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\treturn updateCommentWithRetry(comment.getName(),\n        c -> new Comment(c.getName(), c.getAuthor(), c.getContent(), true, Instant.now()));\n}", "CodeBleu_score": 15.445773352384304}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.12938463243702}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.12938463243702}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n        $action->mount($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->setRecord($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 59.56306078261265}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->getSuccessRedirectUrl();\n\n    if (! empty($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 58.880849056082404}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirect);\n\n    if (! empty($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 78.94201902174218}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\tif ($url = $this->getSuccessRedirectUrl()) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 54.730593787316074}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif (!$record || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagClass = $record->tags()->getRelated();\n\n    $tags = $tagClass::findOrCreateFromNames($state['tags'] ?? []);\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 25.467647156248184}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t$tags = $this->getTags($record);\n\n    if ($tags !== null) {\n        $tagNames = $this->getTagNames($state);\n        $tagIds = $this->getTagIds($tags, $tagNames);\n\n        $this->syncTagsWithRecord($record, $tagIds);\n    }\n}", "CodeBleu_score": 18.16287418939841}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\tif ($record === null || !method_exists($record, 'tags')) {\n        return;\n    }\n\n    $tagModel = $this->getTagModel();\n    $tagIds = $this->getTagIdsFromNames($state['tags'] ?? []);\n\n    $record->tags()->sync($tagIds);\n}", "CodeBleu_score": 21.901014912984508}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// parse the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := parsePath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// create the scope and resource for the pipeline\n\tscope := authz.NewScope(spacePath)\n\tresource := authz.NewResource(spacePath + \"/\" + repoName + \"/\" + pipelineIdentifier)\n\n\t// perform the authorization check\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 49.57139517485698}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName := path.Split(repoPath)\n\t// create a scope and resource for the pipeline\n\tscope := authz.NewScope(spacePath)\n\tresource := authz.NewResource(repoName + \"/pipelines/\" + pipelineIdentifier)\n\t// perform the authorization check\n\terr := authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}", "CodeBleu_score": 41.00567560253205}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t// parse the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := parseRepoPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// create a scope for the pipeline\n\tscope := authz.CreateScope(spacePath, repoName, pipelineIdentifier)\n\t// create a resource for the pipeline\n\tresource := authz.CreateResource(spacePath, repoName, pipelineIdentifier)\n\t// perform the authorization check\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}", "CodeBleu_score": 53.96334216546179}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t// Get the parent space and name.\n\tparentSpace, name := space.ParentPath()\n\n\t// Create a scope and resource.\n\tscope := authz.SpaceScope(parentSpace)\n\tresource := authz.SpaceResource(parentSpace, name)\n\n\t// Call the Check function.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 34.38757768416074}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tscope := authz.ScopeFromSpace(space)\n\tresource := authz.ResourceFromSpace(space)\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 30.343795362315973}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\tif space == nil {\n\t\treturn fmt.Errorf(\"space is nil\")\n\t}\n\tif space.ParentSpaceID == nil {\n\t\treturn fmt.Errorf(\"space parent space id is nil\")\n\t}\n\tif space.ParentSpaceID.String() == \"\" {\n\t\treturn fmt.Errorf(\"space parent space id is empty\")\n\t}\n\tif space.Name == nil {\n\t\treturn fmt.Errorf(\"space name is nil\")\n\t}\n\tif *space.Name == \"\" {\n\t\treturn fmt.Errorf(\"space name is empty\")\n\t}\n\n\tparentSpaceID := *space.ParentSpaceID\n\tparentSpace, err := store.GetSpace(ctx, parentSpaceID)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif parentSpace == nil {\n\t\treturn fmt.Errorf(\"parent space is nil\")\n\t}\n\tif parentSpace.Name == nil {\n\t\treturn fmt.Errorf(\"parent space name is nil\")\n\t}\n\tif *parentSpace.Name == \"\" {\n\t\treturn fmt.Errorf(\"parent space name is empty\")\n\t}\n\n\tscope := authz.SpaceScope(parentSpaceID, *parentSpace.Name)\n\tresource := authz.SpaceResource(parentSpaceID, *space.Name)\n\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 47.45797247486199}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\terr := json.Unmarshal(source, &data)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal source JSON: %w\", err)\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to marshal sanitized JSON: %w\", err)\n\t}\n\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 37.789238170970734}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tif err := json.Unmarshal(source, data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 31.171974279576663}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tif len(source) == 0 {\n\t\treturn json.Marshal(data)\n\t}\n\n\tvar sanitized json.RawMessage\n\tif err := json.Unmarshal(source, &sanitized); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal source JSON: %w\", err)\n\t}\n\n\tif err := json.Unmarshal(sanitized, data); err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to unmarshal source JSON: %w\", err)\n\t}\n\n\tsanitized, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, fmt.Errorf(\"failed to marshal sanitized JSON: %w\", err)\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 42.01347231916842}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\tif err := c.validateRepoRef(ctx, repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.RepoStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif err := c.checkSessionAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 47.023042360140884}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate the repository reference.\n\tif err := c.validateRepoRef(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch the repository.\n\trepo, err := c.RepoStore.GetByName(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the session's access to the repository.\n\tif err := c.checkSessionAccess(session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.4000965541906}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t// Validate repository reference.\n\tif err := c.validateRepoRef(repoRef); err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Fetch repository.\n\trepo, err := c.RepositoryStore.Get(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\t// Check access permissions.\n\tif err := c.checkAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 45.349900825354396}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:      createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 30.285268359673694}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:     createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown:  createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:       createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline:  createPipelinePayloadSanitizer(),\n\t\tenum.CheckPayloadKindJSON:      createJSONPayloadSanitizer(),\n\t\tenum.CheckPayloadKindJSONArray: createJSONPayloadSanitizer(),\n\t}\n}", "CodeBleu_score": 34.131160573701116}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\tsanitizers := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\n\tsanitizers[enum.EmptyPayloadKind] = createEmptyPayloadSanitizer()\n\tsanitizers[enum.RawPayloadKind] = createRawPayloadSanitizer()\n\tsanitizers[enum.MarkdownPayloadKind] = createRawPayloadSanitizer()\n\tsanitizers[enum.PipelinePayloadKind] = createPipelinePayloadSanitizer()\n\n\treturn sanitizers\n}", "CodeBleu_score": 60.382771723617765}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n\tif not self.state.attached then\n\t\tself:attach()\n\tend\n\treturn self", "CodeBleu_score": 39.50493218719079}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n  if not self.state.attached then\n    self.state.attached = true\n    self.state.renderer:attach(self)\n  end\n  return self", "CodeBleu_score": 58.134920649591514}, {"code": "function Buffer:attach_to_renderer(on_render)\n\tself.state.on_render = on_render\n\tif not self.state.attached then\n\t\tself.state.attached = true\n\t\tself.renderer:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 54.85509252133145}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\tif not self.valid then\n\t\treturn\n\tend\n\tif not callback then\n\t\treturn\n\tend\n\tlocal filename = self.filename\n\tif not filename then\n\t\treturn\n\tend\n\tlocal function watcher()\n\t\tlocal success, err = pcall(callback, self)\n\t\tif not success then\n\t\t\tlog.error(err)\n\t\tend\n\tend\n\tlocal function watch_buffer()\n\t\tif not self.valid then\n\t\t\treturn\n\t\tend\n\t\tif not self.filename then\n\t\t\treturn\n\t\tend\n\t\tlocal filename = self.filename\n\t\tif not filename then\n\t\t\treturn\n\t\tend\n\t\tlocal success, err = pcall(fs.watch_file, filename, watcher)\n\t\tif not success then\n\t\t\tlog.error(err)\n\t\tend\n\tend\n\twatch_buffer()\n\tself:on_detach(function()\n\t\tfs.unwatch_file(filename)\n\tend)", "CodeBleu_score": 41.75636561046704}, {"code": "function Buffer:watch(callback)\n\tif not self.valid then\n        log.error(\"Cannot watch buffer: buffer is invalid\")\n        return\n    end\n\n    if not callback or type(callback) ~= \"function\" then\n        log.error(\"Cannot watch buffer: callback is not a function\")\n        return\n    end\n\n    local filename = self.filename\n\n    if not filename then\n        log.error(\"Cannot watch buffer: buffer has no filename\")\n        return\n    end\n\n    if not self.watcher then\n        self.watcher = FileWatcher:new(filename)\n    end\n\n    self.watcher:watch(function(event)\n        if event == \"write\" then\n            callback(self)\n        end\n    end)", "CodeBleu_score": 39.26310869330415}, {"code": "function Buffer:watch(callback)\n\tif self.valid and callback then\n        local filename = self:filename()\n        if filename then\n            local watcher = vim.loop.new_fs_event()\n            watcher:start(filename, {\n                interval = 1000,\n                recrawl = 1000,\n                stat = true,\n            }, function(err, fd, events)\n                if err then\n                    vim.api.nvim_err_writeln(err)\n                else\n                    callback(self)\n                end\n            end)\n        end\n    end", "CodeBleu_score": 42.36206023935692}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\tif self.hex then return self.hex end\n  local spec = self.spec\n  local attr = self.attr\n  local color = spec[attr]\n  local rgb = vim.fn.synIDattr(vim.fn.hlID(color), \"fg#\")\n  if rgb == \"\" then rgb = vim.fn.synIDattr(vim.fn.hlID(color), \"bg#\") end\n  if rgb == \"\" then return \"NONE\" end\n  self.hex = rgb\n  return rgb", "CodeBleu_score": 54.68367068260677}, {"code": "function Color:to_hex()\n\tif self.hex then return self.hex end\n\n    local spec = self:to_spec()\n    local attr = spec.fg and 'fg' or 'bg'\n    local color = self.highlight[attr]\n\n    if color then\n        local hex = color:gsub('^#', '')\n        self.hex = hex\n        return hex\n    end", "CodeBleu_score": 49.46883174290213}, {"code": "function Color:to_hex()\n\tif self.hex then return self.hex end\n  local attr = self.fg and 'fg' or 'bg'\n  local color = self.gui and 'gui' or 'cterm'\n  local hex = self.gui and self.hex or self.cterm\n\n  if not hex then\n    local gui_color = self.gui or self.cterm\n    local success, result = pcall(vim.api.nvim_get_hl_by_name, gui_color, true)\n    if success then\n      local c = result[attr][color]\n      if c then\n        hex = string.format('#%06x', c)\n        self[color] = hex\n      end\n    end\n  end\n  return hex", "CodeBleu_score": 52.189590984150755}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal bufnr = buffer.bufnr\n  local lines = vim.api.nvim_buf_get_lines(bufnr, 0, -1, false)\n\n  for _, line in ipairs(lines) do\n    local start_col, end_col = line:find(pattern)\n    if start_col then\n      vim.api.nvim_buf_add_highlight(bufnr, self.id, hl, 0, start_col - 1, end_col)\n    end\n  end\n\n  return self", "CodeBleu_score": 43.577231854647124}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n\n  for i, line in ipairs(lines) do\n    local start_col, end_col = line:find(pattern)\n\n    if start_col then\n      buffer:add_highlight(hl, i - 1, start_col - 1, end_col)\n    end\n  end\n\n  return self", "CodeBleu_score": 43.649001341712015}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\tlocal lines = buffer:get_lines()\n  local row = 0\n\n  for _, line in ipairs(lines) do\n    row = row + 1\n\n    local start_col, end_col = line:find(pattern)\n\n    if start_col then\n      buffer:add_highlight(hl, row - 1, start_col - 1, end_col)\n    end\n  end\n\n  return self", "CodeBleu_score": 47.229112842010736}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = row .. ':' .. col\n    if pos == 'eol' then\n        col = -1\n    end\n    local opts = {\n        id = id,\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        hl_mode = 'combine',\n        priority = priority\n    }\n    vim.api.nvim_buf_set_extmark(buffer, self.namespace, row, col, opts)\n    return id", "CodeBleu_score": 70.0736987812442}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t-- If the row and column are not provided, use the current cursor position\n    if not row or not col then\n        row, col = unpack(vim.api.nvim_win_get_cursor(0))\n    end\n\n    -- If the position is not provided, use the current cursor position\n    if not pos then\n        pos = \"eol\"\n    end\n\n    -- If the priority is not provided, use the default priority\n    if not priority then\n        priority = 100\n    end\n\n    -- Create a unique ID based on the row and column\n    local id = tostring(row) .. \"-\" .. tostring(col)\n\n    -- Set the extmark with the given text, highlight, position, and priority\n    vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row - 1, col - 1, {\n        virt_text = { { text, hl } },\n        virt_text_pos = pos,\n        priority = priority,\n    })\n\n    -- Return the generated ID\n    return id", "CodeBleu_score": 59.20971750247408}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\tlocal id = row .. ':' .. col\n  if pos == 'eol' then\n    col = -1\n  end\n  if pos == 'overlay' then\n    priority = 100\n  end\n  vim.api.nvim_buf_set_extmark(buffer, self.namespace, id, row, col, {\n    virt_text = { { text, hl } },\n    virt_text_pos = pos,\n    priority = priority,\n  })\n  return id", "CodeBleu_score": 67.55690328338729}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 19.43225080373123}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n\tfor i=1,#output do\n\t\tlocal c = output:sub(i,i)\n\t\tif c == \"", "CodeBleu_score": 15.25688543530808}, {"code": "function Spawn:parse_result(output, callback)\n\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == \"", "CodeBleu_score": 22.130899078755167}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t-- Check if a watcher already exists for the specified path\n\tlocal watcher = self.watchers[path]\n\tif watcher then\n\t\t-- If a watcher already exists, return it\n\t\treturn watcher\n\tend\n\n\t-- Create a new file system event watcher using Neovim's loop\n\twatcher = vim.loop.new_fs_event()\n\t-- Start watching the specified path with the given handler\n\tvim.loop.fs_event_start(watcher, path, {\n\t\trecursive = true,\n\t}, handler)\n\n\t-- Store the watcher instance in the watchers table\n\tself.watchers[path] = watcher\n\t-- Return the watcher instance\n\treturn watcher", "CodeBleu_score": 50.884515418440344}, {"code": "function Watcher:watch_file(path, handler)\n\tif self.watchers[path] then return self.watchers[path] end\n\tlocal watcher = vim.loop.new_fs_event()\n\tvim.loop.fs_event_start(watcher, path, {\n\t\trecursive = false,\n\t\tstat = false,\n\t\twatch_dir = false,\n\t}, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 61.69987086443718}, {"code": "function Watcher:watch_file(path, handler)\n\tif not self.watchers[path] then\n    local watcher = vim.loop.new_fs_event()\n    vim.loop.fs_event_start(watcher, path, {\n      interval = 1000,\n      recursive = false,\n    }, handler)\n    self.watchers[path] = watcher\n  end\n  return self.watchers[path]", "CodeBleu_score": 57.94897326595032}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t-- Retrieve the buffer lines.\n\tlocal buffer_lines = self:buffer_lines()\n\tif type(buffer_lines) == \"string\" then\n\t\treturn buffer_lines\n\tend\n\n\t-- Calculate the hunks for the buffer.\n\tlocal hunks, err = self.git_object:hunks(buffer_lines)\n\tif type(hunks) == \"string\" then\n\t\treturn hunks\n\tend\n\n\t-- Set up the signs for each hunk.\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk) do\n\n\t\t\t-- Set the sign priority based on the hunk type.\n\t\t\tlocal priority\n\t\t\tif line.type == \"add\" then\n\t\t\t\tpriority = 10\n\t\t\telseif line.type == \"change\" then\n\t\t\t\tpriority = 20\n\t\t\telseif line.type == \"delete\" then\n\t\t\t\tpriority = 30\n\t\t\telse\n\t\t\t\treturn \"Error: Unknown hunk type: \" .. line.type\n\t\t\tend\n\n\t\t\t-- Set the sign name.\n\t\t\tlocal name\n\t\t\tif line.type == \"add\" then\n\t\t\t\tname = \"GitGutterAdd\"\n\t\t\telseif line.type == \"change\" then\n\t\t\t\tname = \"GitGutterChange\"\n\t\t\telseif line.type == \"delete\" then\n\t\t\t\tname = \"GitGutterDelete\"\n\t\t\telse\n\t\t\t\treturn \"Error: Unknown hunk type: \" .. line.type\n\t\t\tend\n\n\t\t\t-- Set the sign.\n\t\t\tself:set_sign(line.buffer_line_number, name, priority)\n\t\tend\n\tend\n\n\t-- Update the buffer's signs.\n\tself:update_signs()\n\n\t-- Return the hunks.\n\treturn hunks", "CodeBleu_score": 33.04270937582837}, {"code": "function GitBuffer:live_hunks()\n\tlocal bufnr = self.bufnr\n  local git_obj = self.git_obj\n  \n  -- Get the buffer lines.\n  local buffer_lines = {}\n  for _, line in ipairs(vim.api.nvim_buf_get_lines(bufnr, 0, -1, true)) do\n    table.insert(buffer_lines, line)\n  end\n  \n  -- Calculate the hunks.\n  local hunks, err = git_obj:hunks(buffer_lines)\n  if err then\n    return nil, err\n  end\n  \n  -- Set up the signs for each line in the hunks.\n  for _, hunk in ipairs(hunks) do\n    \n    -- Set up the sign for the start line.\n    local start_line = hunk.start\n    local start_type = hunk.type\n    self.signs[start_line] = {\n      type = start_type,\n      count = 1,\n    }\n    \n    -- Set up the signs for the other lines in the hunk.\n    for line = start_line + 1, hunk.vend do\n      self.signs[line] = {\n        type = start_type,\n        count = 0,\n      }\n    end\n    \n  end\n  \n  -- Update the buffer's signs.\n  self:update_signs()\n  \n  return hunks", "CodeBleu_score": 43.806762479269175}, {"code": "function GitBuffer:live_hunks()\n\t-- Get the buffer lines.\n  local lines = self.buffer.lines\n  \n  -- Get the hunks.\n  local hunks, err = self.git:hunks(lines)\n  if err then return nil, err end\n  \n  -- Set up signs for each line in the hunks.\n  self.hunks = {}\n  for _, hunk in ipairs(hunks) do\n    \n    -- Set up the hunk.\n    local hunk_entry = {\n      type = hunk.type,\n      top = hunk.top,\n      bot = hunk.bot,\n      lines = {},\n    }\n    table.insert(self.hunks, hunk_entry)\n    \n    -- Set up signs for each line in the hunk.\n    for line = hunk.top, hunk.bot do\n      \n      -- Set up the line.\n      local line_entry = {\n        type = hunk.type,\n        top = hunk.top,\n        bot = hunk.bot,\n        line = line,\n        text = lines[line],\n      }\n      table.insert(hunk_entry.lines, line_entry)\n      \n      -- Set up the sign.\n      self.signs:add(line, {\n        name = self.signs.names[hunk.type],\n        priority = self.signs.priorities[hunk.type],\n      })\n      \n    end\n    \n  end\n  \n  -- Update the buffer signs.\n  self.signs:update()\n  \n  -- Return the hunks.\n  return self.hunks\n  ", "CodeBleu_score": 48.98759971465079}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal temp_file = os.tmpname()\n  local f = io.open(temp_file, 'wb')\n  f:write(patch)\n  f:close()\n\n  local status, err = os.execute(self.git_command .. ' apply --cached --unidiff-zero - ' .. temp_file)\n\n  os.remove(temp_file)\n\n  if not status then\n    return err\n  end", "CodeBleu_score": 50.53992967947152}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal tmp_file = os.tmpname()\n  local f = io.open(tmp_file, 'wb')\n  f:write(patch)\n  f:close()\n\n  local _, err = self.git_object:command('apply', '--cached', '--unidiff-zero', '--whitespace=nowarn', '--recount', tmp_file)\n  os.remove(tmp_file)\n\n  return err", "CodeBleu_score": 45.77297106998784}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\tlocal temp_file = fs.get_temp_file()\n  fs.write_file(temp_file, patch)\n  local _, err = self:stage_hunk(temp_file)\n  fs.remove_file(temp_file)\n  return err", "CodeBleu_score": 42.23798740203516}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\n    // Add the request token and verifier to the request body\n    request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n    request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n\n    // Add the request token and verifier to the request header\n    request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\n    // Send the request\n    Response response = request.send();\n\n    // Extract the access token from the response\n    return config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 58.93896461531231}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n        request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n        request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n        request.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n        Response response = request.send();\n        return api.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 61.23652572774678}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t// create the access token request\n        OAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n        request.addBodyParameter(\"oauth_verifier\", verifier.getValue());\n        request.addBodyParameter(\"oauth_token\", requestToken.getToken());\n\n        // sign the request\n        service.signRequest(config.getApiKey(), config.getApiSecret(), requestToken, verifier, request);\n\n        // send the request\n        Response response = request.send();\n\n        // extract the access token from the response\n        return service.getAccessTokenExtractor().extract(response.getBody());\n    }", "CodeBleu_score": 58.45701537310375}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(\n            new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(username, password));\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Added host \" + host + \" to authentication cache\");\n}", "CodeBleu_score": 52.22172984858106}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()),\n            new UsernamePasswordCredentials(this.username, this.password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n    log.info(\"Adding host \" + host.getHostName() + \" to authentication cache.\");\n}", "CodeBleu_score": 49.265202354328444}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n    credsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()),\n        new UsernamePasswordCredentials(user, password));\n    AuthCache authCache = new BasicAuthCache();\n    BasicScheme basicAuth = new BasicScheme();\n    authCache.put(host, basicAuth);\n    context.setCredentialsProvider(credsProvider);\n    context.setAuthCache(authCache);\n}", "CodeBleu_score": 51.64933055478532}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"No avatar cache found\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.getCacheEntry(key, source);\n    String url = jenkins.getRootUrl() + cache.getUrlName() + \"/\" + size + \"/\" + URLEncoder.encode(key, \"UTF-8\");\n    return url;\n}", "CodeBleu_score": 45.51815347072944}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"Avatar cache is null\");\n    }\n    String key = cache.getKey(source);\n    String url = jenkins.getRootUrl() + cache.getUrlName() + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    return url;\n}", "CodeBleu_score": 43.74290217165804}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tJenkins jenkins = Jenkins.getInstance();\n    if (jenkins == null) {\n        throw new IllegalStateException(\"Jenkins instance is null\");\n    }\n    AvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache instance is null\");\n    }\n    String key = cache.getCacheKey(source);\n    cache.getCacheEntry(key, source);\n    try {\n        return jenkins.getRootUrl() + cache.getUrlName() + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 52.252710714124426}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128);\n    } else {\n        this.image = image;\n    }\n}", "CodeBleu_score": 55.002421977434715}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = image;\n    this.lastModified = lastModified;\n    if (image.getWidth() > 128 || image.getHeight() > 128) {\n        this.image = scaleImage(image, 128);\n    }\n    if (lastModified < 0) {\n        this.lastModified = System.currentTimeMillis();\n    }\n}", "CodeBleu_score": 57.996443280120324}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\n    this.image = scaleImage(image, 128);\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 47.745069446638965}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    try {\n        Image img = future.get();\n        if (img != null) {\n            image = img;\n            lastModified = System.currentTimeMillis();\n        }\n        future = null;\n    } catch (InterruptedException | ExecutionException e) {\n        // do nothing\n    }\n    return true;\n}", "CodeBleu_score": 43.97579538326103}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n        return false;\n    }\n    try {\n        entry = future.get();\n        image = entry.getImage();\n        lastModified = entry.getLastModified();\n        future = null;\n        return false;\n    } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n        return true;\n    } catch (ExecutionException e) {\n        future = null;\n        return true;\n    }\n}", "CodeBleu_score": 42.04405428780071}, {"code": "private synchronized boolean pending(){\n\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tCacheEntry entry = future.get();\n\t\t\tif (entry != null) {\n\t\t\t\timage = entry.image;\n\t\t\t\tlastModified = entry.lastModified;\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// Ignore\n\t\t}\n\t\tfuture = null;\n\t}\n\treturn true;\n}", "CodeBleu_score": 47.100610410353106}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.setContentType(\"image/png\");\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        ImageIO.write(createImage(req, node), \"png\", baos);\n        baos.flush();\n    } catch (BadImageByteCountException e) {\n        // If there's an error writing the image, return a 404.\n        rsp.sendError(HttpServletResponse.SC_NOT_FOUND);\n        return;\n    }\n    rsp.setHeader(\"Cache-Control\",\"max-age=3600, must-revalidate\");\n    rsp.setHeader(\"Expires\", formatDate(System.currentTimeMillis()+3600000L));\n    rsp.setContentLength(baos.size());\n    rsp.getOutputStream().write(baos.toByteArray());\n}", "CodeBleu_score": 44.56254586746168}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.setHeader(\"Cache-Control\",\"no-cache, no-store, must-revalidate\");\n    rsp.setHeader(\"Pragma\",\"no-cache\");\n    rsp.setHeader(\"Expires\",\"0\");\n    rsp.setContentType(\"image/png\");\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    try {\n        if (node instanceof AbstractProject) {\n            AbstractProject<?,?> project = (AbstractProject) node;\n            if (project.getLastBuild() == null) {\n                // no build. show the project icon\n                project.getIconColor().generateImage(baos, hudson.model.Hudson.getInstance().getRootUrl());\n            } else {\n                // if we just use StaplerRequest.getRootPath it will point to the project\n                // and we'll serve the last good build, which isn't what we want.\n                // so compute the path to Hudson.\n                String url = hudson.model.Hudson.getInstance().getRootUrl();\n                if(url.endsWith(\"/\"))\n                    url = url.substring(0,url.length()-1);\n                project.getLastBuild().getIconColor().generateImage(baos, url);\n            }\n        } else {\n            node.getIconColor().generateImage(baos, req.getContextPath());\n        }\n    } catch (SAXException e) {\n        throw new ServletException(e);\n    }\n    rsp.setContentLength(baos.size());\n    OutputStream os = rsp.getOutputStream();\n    baos.writeTo(os);\n    os.close();\n}", "CodeBleu_score": 36.39659376988964}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\tif (node instanceof AbstractProject) {\n        AbstractProject<?, ?> project = (AbstractProject<?, ?>) node;\n        // TODO: add a test to verify that the project is in fact building.\n        //       the test should not use mock objects\n        if (project.isBuilding()) {\n            // TODO: add a test to verify that the project is in fact building.\n            //       the test should not use mock objects\n            rsp.sendRedirect2(req.getContextPath() + '/' + project.getUrl() + \"lastBuild/api/json\");\n            return;\n        }\n    }\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    // TODO: add a test to verify that the project is in fact building.\n    //       the test should not use mock objects\n    if (node instanceof AbstractProject) {\n        AbstractProject<?, ?> project = (AbstractProject<?, ?>) node;\n        if (project.isBuilding()) {\n            // TODO: add a test to verify that the project is in fact building.\n            //       the test should not use mock objects\n            rsp.sendRedirect2(req.getContextPath() + '/' + project.getUrl() + \"lastBuild/api/json\");\n            return;\n        }\n    }\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    // TODO: add a test to verify that the project is in fact building.\n    //       the test should not use mock objects\n    if (node instanceof AbstractProject) {\n        AbstractProject<?, ?> project = (AbstractProject<?, ?>) node;\n        if (project.isBuilding()) {\n            // TODO: add a test to verify that the project is in fact building.\n            //       the test should not use mock objects\n            rsp.sendRedirect2(req.getContextPath() + '/' + project.getUrl() + \"lastBuild/api/json\");\n            return;\n        }\n    }\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    // TODO: add a test to verify that the project is in fact building.\n    //       the test should not use mock objects\n    if (node instanceof AbstractProject) {\n        AbstractProject<?, ?> project = (AbstractProject", "CodeBleu_score": 36.75897751356299}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        builder.setConnectionManager(new PoolingHttpClientConnectionManager());\n        builder.setRetryHandler(new BitbucketCloudApiClient.HttpRequestRetryHandler());\n\n        if (authenticator != null) {\n            authenticator.configureBuilder(builder);\n            authenticator.configureContext(context);\n        }\n\n        setClientProxyParams(BITBUCKET_BASE_URL, builder);\n\n        client = builder.build();\n    }", "CodeBleu_score": 48.65153706291554}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClients.custom();\n\n        // Setup caching\n        if (enableCache) {\n            CacheConfig cacheConfig = new CacheConfig();\n            cacheConfig.setMaxCacheEntries(1000);\n            cacheConfig.setMaxObjectSize(8192);\n\n            // Setup cache for teams\n            CacheConfig teamCacheConfig = new CacheConfig();\n            teamCacheConfig.setMaxCacheEntries(1000);\n            teamCacheConfig.setMaxObjectSize(8192);\n            teamCacheConfig.setSharedCache(false);\n            CacheConfig repositoriesCacheConfig = new CacheConfig();\n            repositoriesCacheConfig.setMaxCacheEntries(1000);\n            repositoriesCacheConfig.setMaxObjectSize(8192);\n            repositoriesCacheConfig.setSharedCache(false);\n            cacheConfig.setNestedCacheConfig(TEAMS_URI, teamCacheConfig);\n            cacheConfig.setNestedCacheConfig(REPOSITORIES_URI, repositoriesCacheConfig);\n\n            // Setup cache for repositories\n            CacheConfig repositoryCacheConfig = new CacheConfig();\n            repositoryCacheConfig.setMaxCacheEntries(1000);\n            repositoryCacheConfig.setMaxObjectSize(8192);\n            repositoryCacheConfig.setSharedCache(false);\n            cacheConfig.setNestedCacheConfig(REPOSITORY_URI, repositoryCacheConfig);\n\n            // Setup cache for commits\n            CacheConfig commitsCacheConfig = new CacheConfig();\n            commitsCacheConfig.setMaxCacheEntries(1000);\n            commitsCacheConfig.setMaxObjectSize(8192);\n            commitsCacheConfig.setSharedCache(false);\n            cacheConfig.setNestedCacheConfig(COMMITS_URI, commitsCacheConfig);\n\n            // Setup cache for pull requests\n            CacheConfig pullRequestsCacheConfig = new CacheConfig();", "CodeBleu_score": 35.42156713232393}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        if (authenticator != null) {\n            authenticator.configureHttpClient(this);\n        }\n        HttpClientBuilder builder = HttpClients.custom().setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n                .setConnectionManager(new PoolingHttpClientConnectionManager()).setRetryHandler(new HttpRequestRetryHandler() {\n                    @Override\n                    public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {\n                        return executionCount < 3;\n                    }\n                });\n        setClientProxyParams(BitbucketCloudEndpoint.HOST_URL, builder);\n        client = builder.build();\n    }", "CodeBleu_score": 44.371122320684776}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tBitbucketCloudBranch sourceBranch = pullRequest.getSourceBranch();\n    if (sourceBranch != null) {\n        String branchName = sourceBranch.getDisplayId();\n        String branchRawNode = sourceBranch.getRawNode();\n        if (branchRawNode != null) {\n            CommitClosure closure = new CommitClosure(branchRawNode);\n            closures.put(branchName, closure);\n        }\n    }\n\n    BitbucketCloudBranch destinationBranch = pullRequest.getDestinationBranch();\n    if (destinationBranch != null) {\n        String branchName = destinationBranch.getDisplayId();\n        String branchRawNode = destinationBranch.getRawNode();\n        if (branchRawNode != null) {\n            CommitClosure closure = new CommitClosure(branchRawNode);\n            closures.put(branchName, closure);\n        }\n    }\n}", "CodeBleu_score": 37.008018493116126}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tif (pullRequest.getSource().getCommit() != null) {\n        pullRequest.getSource().setCommitClosure(new CommitClosure(pullRequest.getSource().getCommit().getHash(), this));\n    }\n    if (pullRequest.getDestination().getCommit() != null) {\n        pullRequest.getDestination().setCommitClosure(new CommitClosure(pullRequest.getDestination().getCommit().getHash(), this));\n    }\n}", "CodeBleu_score": 32.92004248085074}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tBitbucketCloudBranch sourceBranch = getBranch(pullRequest.getSourceBranch());\n    if (sourceBranch != null) {\n        pullRequest.setSourceBranchCommitClosure(new CommitClosure(sourceBranch.getRawNode()));\n    }\n    BitbucketCloudBranch destinationBranch = getBranch(pullRequest.getDestinationBranch());\n    if (destinationBranch != null) {\n        pullRequest.setDestinationBranchCommitClosure(new CommitClosure(destinationBranch.getRawNode()));\n    }\n}", "CodeBleu_score": 48.55749673711118}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration globalConfig = JenkinsLocationConfiguration.get();\n    if (globalConfig == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null. Cannot get root URL.\");\n    }\n    String rootURL = globalConfig.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration.getUrl() returned null. Cannot get root URL.\");\n    }\n    return DisplayURLProvider.get().getRootURL(build);\n}", "CodeBleu_score": 55.26215783167465}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration globalConfig = JenkinsLocationConfiguration.get();\n    if (globalConfig == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null\");\n    }\n    String url = globalConfig.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration URL is null\");\n    }\n    return DisplayURLProvider.get().getRoot();\n}", "CodeBleu_score": 53.70335204424245}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration config = JenkinsLocationConfiguration.get();\n    if (config == null) {\n        throw new IllegalStateException(\"JenkinsLocationConfiguration is null\");\n    }\n    String rootURL = config.getUrl();\n    if (rootURL == null) {\n        throw new IllegalStateException(\"Jenkins root URL is null\");\n    }\n    return DisplayURLProvider.get().getRoot();\n}", "CodeBleu_score": 54.86720517699359}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        new URL(url)\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed: ${url}\", e)\n    }\n\n    if (url.contains('localhost')) {\n        throw new IllegalStateException(\"Jenkins URL must not contain localhost: ${url}\")\n    }\n\n    if (url.contains('unconfigured-jenkins-location')) {\n        throw new IllegalStateException(\"Jenkins URL must not contain unconfigured-jenkins-location: ${url}\")\n    }\n\n    if (bitbucket.isBitbucketCloud() && !url.contains('.')) {\n        throw new IllegalStateException(\"Bitbucket Cloud Jenkins URL must be fully qualified: ${url}\")\n    }\n\n    return url\n}", "CodeBleu_score": 43.76487973124675}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        new URL(url)\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(\"The Jenkins URL is malformed: ${url}\", e)\n    }\n    if (url.contains('localhost') || url.contains('unconfigured-jenkins-location')) {\n        throw new IllegalStateException(\"The Jenkins URL must not contain localhost or unconfigured-jenkins-location: ${url}\")\n    }\n    if (bitbucket.isCloud()) {\n        if (!url.contains('.')) {\n            throw new IllegalStateException(\"The Jenkins URL must be fully qualified: ${url}\")\n        }\n    }\n    return url\n}", "CodeBleu_score": 39.105600630022074}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\ttry {\n        URI uri = new URI(url);\n        String host = uri.getHost();\n        if (host == null || host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n            throw new IllegalStateException(\"Jenkins URL must be fully qualified. It cannot use localhost or unconfigured-jenkins-location as the hostname.\");\n        }\n        if (bitbucket instanceof BitbucketCloudApiClient) {\n            if (host.endsWith(\"bitbucket.org\")) {\n                throw new IllegalStateException(\"Jenkins URL must be fully qualified. It cannot use bitbucket.org as the hostname.\");\n            }\n        }\n        return uri.toString();\n    } catch (URISyntaxException e) {\n        throw new IllegalStateException(\"Jenkins URL is malformed.\", e);\n    }\n}", "CodeBleu_score": 58.6694178548566}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t// initialize the Bitbucket context\n        final BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        // check if notifications are disabled\n        if (context.isDisableNotifications()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled. Skipping notifications.\");\n            return;\n        }\n\n        // retrieve the SCM revision\n        final SCMRevision revision = source.fetch(build.getParent(), context, build.getEnvironment(listener));\n        final String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Unable to retrieve revision hash. Skipping notifications.\");\n            return;\n        }\n\n        // determine whether to share the build key between branch and PR\n        final boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        final String branch = build.getEnvironment(listener).get(SOURCE_BRANCH);\n        final String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        final String name = build.getFullDisplayName(); // use the build number as the display name of the status\n\n        // initialize the Bitbucket client\n        final String url = context.getBitbucketServerUrl();\n        final String credentialsId = context.getCredentialsId();\n        final String projectName = context.getProjectName();\n        final String repositoryName = context.getRepositoryName();\n        final String mirrorName = context.getMirrorName();\n        final BitbucketApi bitbucket = context.newBitbucketApi(build.getParent(), url, credentialsId, projectName, repositoryName, mirrorName);\n\n        // create and send the build status notification\n        final String description = StringUtils.defaultIfBlank(build.getDescription(), \"This commit looks good.\");\n        final BitbucketBuildStatus.Status state = BitbucketBuildStatus.Status.SUCCESSFUL;\n        final String urlString = getRootURL(build);\n        checkURL(urlString, bitbucket);\n        final BitbucketChangesetCommentNotifier notifier = new BitbucketChangesetComment", "CodeBleu_score": 45.69068743971246}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tfinal BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isDisableNotifications()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled in the source configuration.\");\n            return;\n        }\n\n        final SCMRevision revision = SCMRevisionAction.getRevision(build, source);\n        if (revision == null) {\n            listener.getLogger().println(\"[Bitbucket] Could not retrieve the revision for the build. No notification will be sent.\");\n            return;\n        }\n\n        final String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Could not retrieve the hash for the revision. No notification will be sent.\");\n            return;\n        }\n\n        final String branch = getBranch(revision);\n        if (branch == null) {\n            listener.getLogger().println(\"[Bitbucket] Could not retrieve the branch for the revision. No notification will be sent.\");\n            return;\n        }\n\n        final boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n\n        if (revision instanceof PullRequestSCMRevision) {\n            listener.getLogger().println(\"[Bitbucket] Sending notification for pull request #\" + ((PullRequestSCMRevision) revision).getPullRequestNumber());\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Sending notification for branch \" + branch);\n        }\n\n        final String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        final BitbucketApi bitbucket = context.newApi();\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 48.22712164515169}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\tfinal BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.disableNotifications()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled in the source configuration\");\n            return;\n        }\n\n        final SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        final String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Unable to determine commit hash\");\n            return;\n        }\n\n        final String branch = revision.getHead().getName();\n        final boolean shareBuildKeyBetweenBranchAndPR = context.shareBuildKeyBetweenBranchAndPR();\n        final String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n        final String notificationType;\n        if (revision instanceof PullRequestSCMRevision) {\n            notificationType = \"pull request\";\n        } else if (revision instanceof AbstractGitSCMSource.SCMRevisionImpl) {\n            notificationType = \"branch\";\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Unsupported revision type: \" + revision.getClass().getName());\n            return;\n        }\n\n        listener.getLogger().println(\"[Bitbucket] Notifying \" + notificationType + \" status for commit \" + hash);\n\n        final BitbucketApi bitbucket = context.newBitbucketApi(build.getParent());\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 52.41032067434098}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString buildKey = null\n    String jobName = build.getParent().getFullName()\n    if (shareBuildKeyBetweenBranchAndPR) {\n        buildKey = jobName + '/' + branch\n    } else {\n        buildKey = jobName\n    }\n    return buildKey\n}", "CodeBleu_score": 38.737695516806376}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString key\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = build.getParent().getFullName() + \"/\" + branch\n    } else {\n        key = build.getParent().getFullName()\n    }\n    return key\n}", "CodeBleu_score": 48.07656768540019}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\tString jobFullName = build.getParent().getFullName()\n    String key = jobFullName\n    if (shareBuildKeyBetweenBranchAndPR) {\n        key = \"${jobFullName}-${branch}\"\n    }\n    return key\n}", "CodeBleu_score": 33.73100540777454}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = BitbucketSCMNavigator.DescriptorImpl.getServerUrl();\n    }\n    if (traits == null) {\n        traits = new ArrayList<SCMTrait<?>>();\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitSet(BitbucketSCMSource.Trait.PROJECT)) {\n            traits.add(new BitbucketSCMSource.ProjectMatches(BitbucketSCMNavigator.DescriptorImpl.getProjectName()));\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitSet(BitbucketSCMSource.Trait.REPOSITORY)) {\n            traits.add(new BitbucketSCMSource.RepositoryMatches(BitbucketSCMNavigator.DescriptorImpl.getRepositoryName()));\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitSet(BitbucketSCMSource.Trait.BRANCH)) {\n            traits.add(new BranchDiscoveryTrait(true, false));\n        }\n        if (BitbucketSCMNavigator.DescriptorImpl.isTraitSet(BitbucketSCMSource.Trait.TAG)) {\n            traits.add(new TagDiscoveryTrait(true, false));\n        }\n    }\n    return this;\n}", "CodeBleu_score": 30.755480164630512}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = getServerUrlFromServerName(serverName)\n    }\n    if (serverUrl == null) {\n        logger.warning(\"BitbucketSCMNavigator.serverUrl is null after converting from serverName '${serverName}'\")\n    }\n    if (traits == null) {\n        traits = [new BitbucketSCMSourceTrait(id: 'io.jenkins.plugins.bitbucket.BitbucketSCMSourceTrait',\n                                              class: 'io.jenkins.plugins.bitbucket.BitbucketSCMSourceTrait',\n                                              regex: null)]\n    }\n    return this\n}", "CodeBleu_score": 16.033744729780192}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (serverUrl == null) {\n        serverUrl = getBitbucketServerUrl()\n    }\n    if (traits == null) {\n        traits = [new BitbucketSCMSourceTrait(credentialsId: credentialsId,\n                sshCredentialsId: sshCredentialsId,\n                ignoreOnPushNotifications: ignoreOnPushNotifications)]\n        if (trait('jenkins.plugins.git.traits.CleanAfterCheckoutTrait')) {\n            traits << new BitbucketSCMSourceTrait(cleanAfterCheckout: true)\n        }\n        if (trait('jenkins.plugins.git.traits.CleanBeforeCheckoutTrait')) {\n            traits << new BitbucketSCMSourceTrait(cleanBeforeCheckout: true)\n        }\n        if (trait('jenkins.plugins.git.traits.CloneOptionTrait')) {\n            traits << new BitbucketSCMSourceTrait(honorRefspec: true)\n        }\n        if (trait('jenkins.plugins.git.traits.DiscoverOtherRefsTrait')) {\n            traits << new BitbucketSCMSourceTrait(discoverPRFromForks: true,\n                    discoverPRFromOrigin: true)\n        }\n        if (trait('jenkins.plugins.git.traits.PruneStaleBranchTrait')) {\n            traits << new BitbucketSCMSourceTrait(pruneBranches: true)\n        }\n        if (trait('jenkins.plugins.git.traits.SubmoduleOptionTrait')) {\n            traits << new BitbucketSCMSourceTrait(disableSubmodules: true)\n        }\n        if (trait('jenkins.plugins.git.traits.UserExclusionTrait')) {\n            traits << new BitbucketSCMSourceTrait(excludeUsers: excludeUsers)\n        }\n        if (trait('jenkins.scm.impl.trait.WildcardSCMSourceFilterTrait')) {\n            traits << new BitbucketSCMSourceTrait(includes: includes, excludes: excludes)\n        }\n    }\n    return this\n}", "CodeBleu_score": 26.59929078194106}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\tRepository repo = Repository.findByName(name);\n    if (isMatch) {\n        echo \"Proposed repository: ${name}\"\n        proposedCount++\n    } else {\n        echo \"Ignored repository: ${name}\"\n    }\n}", "CodeBleu_score": 36.3485975567823}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tRepository repository = Repository.findByName(name);\n    if (repository != null) {\n        if (isMatch) {\n            logger.info(\"Proposing repository: \" + repository.getName());\n            proposedCount++;\n        } else {\n            logger.info(\"Ignoring repository: \" + repository.getName());\n        }\n    }\n}", "CodeBleu_score": 47.64344914675388}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\tRepository repo = Repository.get(name);\n  if (isMatch) {\n    logger.info(\"Proposing repository {}\", name);\n    proposedCount++;\n  } else {\n    logger.info(\"Ignoring repository {}\", name);\n  }\n}", "CodeBleu_score": 37.70330639898572}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tif (rev.getBranches().isEmpty()) {\n            // This is a hash, so it should be a tag or a remote branch.\n            // If it's a tag, we don't need to do anything.\n            // If it's a remote branch, we need to fetch it.\n            //\n            // TODO: This is a bit of a hack. It would be better if we could detect whether the commit exists locally or not.\n            // TODO: We should also check whether the commit exists on the remote.\n            if (rev.getHash().length() == 40) {\n                // This is a commit hash.\n                if (commitExists(git, rev.getHash())) {\n                    // The commit exists locally.\n                    return rev;\n                } else {\n                    // The commit doesn't exist locally.\n                    // We need to fetch it.\n                    //\n                    // TODO: This is a bit of a hack. It would be better if we could detect whether the commit exists locally or not.\n                    // TODO: We should also check whether the commit exists on the remote.\n                    //\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.\n                    // TODO: This doesn't work for GitHub Enterprise.", "CodeBleu_score": 18.013375206918784}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tList<RefSpec> refSpecs = new ArrayList<>();\n        String remote = scm.getUserRemoteConfigs().get(0).getUrl();\n        String branch = rev.getBranches().iterator().next().getName();\n        String sha1 = rev.getSha1String();\n        if (sha1.length() == 40) {\n            if (!commitExists(git, sha1)) {\n                String refSpec = \"+\" + sha1 + \":\" + branch;\n                listener.getLogger().println(\"Fetching \" + refSpec + \" from \" + remote + \"...\");\n                refSpecs.add(new RefSpec(refSpec));\n            }\n        }\n        if (!refSpecs.isEmpty()) {\n            listener.getLogger().println(\"Fetching missing objects from \" + remote + \"...\");\n            git.fetch_().from(remote, refSpecs.toArray(new RefSpec[refSpecs.size()])).execute();\n        }\n        return rev;\n    }", "CodeBleu_score": 44.937604766208764}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t// If the revision is a branch with a hash, we need to find the commit that it points to.\n        if (rev instanceof Branch && ((Branch) rev).getSHA1() != null) {\n            String branchName = ((Branch) rev).getName();\n            String sha1 = ((Branch) rev).getSHA1();\n            if (!commitExists(git, sha1)) {\n                listener.getLogger().println(\"Commit \" + sha1 + \" does not exist locally. Fetching...\");\n                // We need to find the remote repository that has the commit.\n                String remoteUrl = null;\n                for (RemoteConfig remote : scm.getRepositories()) {\n                    if (remote.getURIs().size() > 0) {\n                        try {\n                            remoteUrl = remote.getURIs().get(0).toPrivateString();\n                            listener.getLogger().println(\"Fetching from \" + remoteUrl + \"...\");\n                            git.fetch_().from(remoteUrl, remote.getName() + \"/\" + branchName).execute();\n                            if (commitExists(git, sha1)) {\n                                listener.getLogger().println(\"Fetched \" + sha1 + \" from \" + remoteUrl);\n                                break;\n                            }\n                        } catch (GitException e) {\n                            listener.getLogger().println(\"Failed to fetch from \" + remoteUrl + \": \" + e.getMessage());\n                        }\n                    }\n                }\n                if (!commitExists(git, sha1)) {\n                    listener.getLogger().println(\"Failed to fetch \" + sha1 + \" from any remote repository.\");\n                }\n            }\n        }\n        return rev;\n    }", "CodeBleu_score": 34.157855274717505}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (links == null) {\n        return null;\n    }\n\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, BitbucketHref> entry : links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue().get(0));\n    }\n\n    return result;\n}", "CodeBleu_score": 67.20855077451951}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (this.links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n    for (Map.Entry<String, BitbucketHref> entry : this.links.entrySet()) {\n        result.put(entry.getKey(), entry.getValue());\n    }\n    return result;\n}", "CodeBleu_score": 59.24632670004615}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\tif (this.links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : this.links.entrySet()) {\n        if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n            result.put(entry.getKey(), entry.getValue().get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 88.35733310554733}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tconst selection = resourceStates.filter(s => s.selected);\n\tif (selection.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourceByRepository = groupBy(selection, s => s.resourceUri);\n\tfor (const [, resources] of resourceByRepository) {\n\t\tconst paths = resources.map(r => r.resourceUri.fsPath);\n\t\tconst repository = await this.model.getRepository(resources[0].resourceUri);\n\t\tconst result = await repository.add(paths);\n\t\tif (result) {\n\t\t\tconst message = localize('confirm add', \"Added {0} files to the repository.\", resources.length);\n\t\t\tvscode.window.showInformationMessage(message);\n\t\t}\n\t}\n}", "CodeBleu_score": 50.065392464547806}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t// Display a message box to the user.\n\tvscode.window.showInformationMessage('Hello World!');\n}", "CodeBleu_score": 6.0634090352283625}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\tconst resourceStates = await window.showQuickPick([\n        { label: 'Add', description: 'Add file to repository' },\n        { label: 'Delete', description: 'Delete file from repository' }\n    ], { placeHolder: 'Select action to perform on selected files...' });\n    if (!resourceStates) {\n        return;\n    }\n\n    for (const { repository, resources } of groupBy(resourceStates, s => s.resourceUri.toString())) {\n        const paths = resources.map(r => repository.provider.path);\n        try {\n            await repository.provider.add(paths);\n        } catch (err) {\n            window.showErrorMessage(`Error running add for ${paths}: ${err}`);\n        }\n    }\n}", "CodeBleu_score": 39.06300869830531}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tif (this.resourceStates.length === 0 || !(this.resourceStates[0] instanceof Uri)) {\n    const resource = await this.getSCMResource();\n    this.resourceStates = [resource];\n  }\n  return this.resourceStates.filter((resourceState) => resourceState instanceof Resource);\n}", "CodeBleu_score": 35.079800406339444}, {"code": "protected async getResourceStates{\n\tif (resourceStates.length === 0) {\n\t\tconst resource = await this.getSCMResource();\n\t\tresourceStates = [resource];\n\t} else if (!(resourceStates[0] instanceof Uri)) {\n\t\tconst resource = await this.getSCMResource(resourceStates[0].resourceUri);\n\t\tresourceStates = [resource];\n\t}\n\n\treturn resourceStates.filter(resource => resource instanceof Resource);\n}", "CodeBleu_score": 48.17631459846148}, {"code": "protected async getResourceStates{\n\tif (resourceStates.length === 0 || !(resourceStates[0] instanceof Uri)) {\n\t\tconst scmResourceState = await this.getSCMResourceState();\n\n\t\tif (scmResourceState) {\n\t\t\tresourceStates = [scmResourceState];\n\t\t}\n\t}\n\n\treturn resourceStates.filter(resourceState => resourceState instanceof Resource);\n}", "CodeBleu_score": 35.60934260597715}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tif (!uri) {\n      const activeEditor = window.activeTextEditor;\n      if (!activeEditor) {\n        return undefined;\n      }\n      uri = activeEditor.document.uri;\n    }\n    if (uri.scheme === 'svn') {\n      uri = uri.with({ scheme: 'file' });\n    }\n    if (uri.scheme !== 'file') {\n      return undefined;\n    }\n    const repository = await this.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 44.45873949397967}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri ?? window.activeTextEditor?.document.uri;\n    if (!uri) {\n      return undefined;\n    }\n\n    uri = uri.scheme === \"svn\" ? uri.with({ scheme: \"file\" }) : uri;\n    const repository = await this.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 36.95406155661643}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi = uri ?? window.activeTextEditor?.document.uri;\n    if (!uri) {\n      return undefined;\n    }\n\n    uri = uri.scheme === 'svn' ? uri.with({ scheme: 'file' }) : uri;\n    const repository = this.getRepository(uri);\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResourceFromFile(uri);\n  }", "CodeBleu_score": 37.14288589645939}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepository = await this.model.getRemoteRepository(element.path);\n\n    if (element.action === 'M') {\n        this.openDiff(element.path, remoteRepository, element.revision - 1, element.revision);\n    } else if (element.action === 'A') {\n        this.openFileRemote(element.path, remoteRepository, element.revision);\n    }\n}", "CodeBleu_score": 41.42820984035095}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepository = await this.model.getRemoteRepository(element);\n    if (remoteRepository) {\n        if (element.isAdded) {\n            this.openFileRemote(remoteRepository, element.newPath, element.newRevision);\n        } else {\n            this.openDiff(remoteRepository, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n        }\n    }\n}", "CodeBleu_score": 41.766920752109456}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst remoteRepository = await this.model.getRemoteRepository(element);\n    if (remoteRepository) {\n        if (element.changeType === PathChangeType.Modified) {\n            this.openDiff(remoteRepository, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n        } else if (element.changeType === PathChangeType.Added) {\n            this.openFileRemote(remoteRepository, element.newPath, element.newRevision);\n        }\n    }\n}", "CodeBleu_score": 43.82924944509244}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (item.commit) {\n\t\tif (what === 'revision') {\n\t\t\tclipboard.writeText(item.commit.hash);\n\t\t} else if (what === 'message') {\n\t\t\tclipboard.writeText(item.commit.message);\n\t\t}\n\t} else {\n\t\twindow.showErrorMessage(`${what} not available for this item`);\n\t}\n}", "CodeBleu_score": 24.53722989948373}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tif (!vscode.env.clipboard.writeText) {\n\t\tvscode.window.showErrorMessage(\"Clipboard is not supported\");\n\t\treturn;\n\t}\n\n\tif (item.type === LogTreeItemType.Commit) {\n\t\tawait vscode.env.clipboard.writeText(item.commit.hash);\n\t} else if (item.type === LogTreeItemType.File) {\n\t\tawait vscode.env.clipboard.writeText(item.file.hash);\n\t} else {\n\t\tawait vscode.env.clipboard.writeText(item.ref.hash);\n\t}\n}", "CodeBleu_score": 31.020984435345365}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\tconst clipboard = await import(\"clipboardy\");\n  const window = await import(\"vscode\").then(m => m.window);\n\n  if (!clipboard.hasSync()) {\n    window.showErrorMessage(\"Copying to the clipboard is not supported.\");\n    return;\n  }\n\n  if (item.commit) {\n    switch (what) {\n      case \"message\":\n        clipboard.writeSync(item.commit.message);\n        break;\n      case \"revision\":\n        clipboard.writeSync(item.commit.revision);\n        break;\n    }\n  }\n}", "CodeBleu_score": 48.019246245204684}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\treturn open(null);\n}", "CodeBleu_score": 2.2655930395820763}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tServiceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\n    long priority = 0L;\n    GiteaConnectionFactory best = null;\n    for (GiteaConnectionFactory factory : loader) {\n        if (factory.canOpen(this)) {\n            long p = factory.priority(this);\n            if (best == null || p > priority) {\n                best = factory;\n                priority = p;\n            }\n        }\n    }\n    if (best != null) {\n        return best.open(this);\n    }\n    throw new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 99.73738841450992}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tif (Jenkins.getInstance() != null) {\n    return Jenkins.getInstance().getPluginManager().uberClassLoader.loadClass(Gitea.class)\n  } else {\n    return this.getClass().getClassLoader().loadClass(Gitea.class)\n  }\n}", "CodeBleu_score": 25.907912709586633}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkinsInstance = Jenkins.getInstance();\n    ClassLoader classLoader = null;\n    if (jenkinsInstance != null) {\n        classLoader = jenkinsInstance.getPluginManager().uberClassLoader;\n    } else {\n        classLoader = getClass().getClassLoader();\n    }\n    return new Gitea(classLoader);\n}", "CodeBleu_score": 48.23228863378707}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tJenkins jenkinsInstance = Jenkins.getInstance();\n    if (jenkinsInstance != null) {\n        return new Gitea(jenkinsInstance.getPluginManager().uberClassLoader);\n    }\n    return new Gitea(this.getClass().getClassLoader());\n}", "CodeBleu_score": 37.49765490915695}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.manageHooks = manageHooks\n    this.displayName = displayName ?: deriveDisplayName(serverUrl)\n    this.serverUrl = normalizeServerUrl(serverUrl)\n    this.credentialsId = manageHooks ? credentialsId : null\n    this.aliasUrl = normalizeAliasUrl(aliasUrl)\n}", "CodeBleu_score": 37.00131873724547}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n    this.displayName = displayName != null ? displayName : getDefaultDisplayName();\n}", "CodeBleu_score": 45.44593052095271}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = displayName;\n    this.serverUrl = serverUrl;\n    this.manageHooks = manageHooks;\n    this.credentialsId = credentialsId;\n    this.aliasUrl = aliasUrl;\n}", "CodeBleu_score": 22.844341233136088}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tListBoxModel items = new ListBoxModel();\n\n    // check if user has administrative permissions\n    if (!Jenkins.getInstance().hasPermission(Jenkins.ADMINISTER)) {\n        return items;\n    }\n\n    // normalize server URL\n    if (serverUrl != null) {\n        serverUrl = serverUrl.trim();\n        if (serverUrl.endsWith(\"/\")) {\n            serverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n        }\n    }\n\n    // get all credentials\n    List<DomainRequirement> domainRequirements = new ArrayList<DomainRequirement>();\n    domainRequirements.add(new GiteaServerDomainRequirement(serverUrl));\n    List<StandardCredentials> credentials = CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.getInstance(), ACL.SYSTEM, domainRequirements);\n\n    // get all GiteaAuth credentials\n    for (StandardCredentials credential : credentials) {\n        if (credential instanceof GiteaAuth) {\n            GiteaAuth giteaAuth = (GiteaAuth) credential;\n            if (giteaAuth.getServerUrl() != null && giteaAuth.getServerUrl().equals(serverUrl)) {\n                items.add(giteaAuth.getDisplayName(), giteaAuth.getId());\n            }\n        }\n    }\n\n    return items;\n}", "CodeBleu_score": 36.92337539729462}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tListBoxModel items = new ListBoxModel();\n    if (serverUrl != null && !serverUrl.isEmpty()) {\n        try {\n            // Check if user has admin permissions\n            if (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n                return items;\n            }\n            // Normalize server URL\n            serverUrl = serverUrl.trim();\n            if (!serverUrl.endsWith(\"/\")) {\n                serverUrl = serverUrl + \"/\";\n            }\n            // Check if server URL is a valid Gitea server\n            if (!Gitea.validateServerUrl(serverUrl)) {\n                return items;\n            }\n            // Get all credentials for the given server URL\n            List<DomainRequirement> domainRequirements = URIRequirementBuilder.fromUri(serverUrl).build();\n            List<StandardCredentials> credentials = CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM, domainRequirements);\n            // Check if credentials have GiteaAuth token\n            for (StandardCredentials credential : credentials) {\n                if (credential instanceof GiteaAuth) {\n                    items.add(credential.getId(), credential.getId());\n                }\n            }\n        } catch (Exception e) {\n            LOGGER.log(Level.WARNING, \"Failed to populate credentials dropdown list\", e);\n        }\n    }\n    return items;\n}", "CodeBleu_score": 41.42319707586331}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tListBoxModel model = new ListBoxModel();\n    if (serverUrl.length() == 0) {\n        model.add(Messages.GiteaSCMSource_credentials_id_empty(), \"\");\n        return model;\n    }\n    String normalizedServerUrl = serverUrl.replaceAll(\"/$\", \"\");\n    if (!normalizedServerUrl.startsWith(\"http://\") && !normalizedServerUrl.startsWith(\"https://\")) {\n        normalizedServerUrl = \"http://\" + normalizedServerUrl;\n    }\n    boolean hasAdminPermission = false;\n    try {\n        hasAdminPermission = Jenkins.get().hasPermission(Jenkins.ADMINISTER);\n    } catch (Throwable t) {\n        // ignore\n    }\n    if (hasAdminPermission) {\n        model.add(Messages.GiteaSCMSource_credentials_id_system_administrator(), \"\");\n    }\n    model.withAll(CredentialsProvider.lookupCredentials(StandardUsernamePasswordCredentials.class,\n            Jenkins.get(), ACL.SYSTEM,\n            Collections.<DomainRequirement>emptyList()));\n    model.withAll(CredentialsProvider.lookupCredentials(GiteaAuth.class,\n            Jenkins.get(), ACL.SYSTEM,\n            URIRequirementBuilder.fromUri(normalizedServerUrl).build()));\n    return model;\n}", "CodeBleu_score": 40.35593125702612}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return \"\";\n    }\n\n    try {\n        // Create a URI object from the server URL\n        URI uri = new URI(serverUrl);\n\n        // Normalize the scheme and host\n        String scheme = uri.getScheme();\n        if (scheme == null) {\n            scheme = \"http\";\n        } else {\n            scheme = scheme.toLowerCase(Locale.ENGLISH);\n        }\n        String host = uri.getHost();\n        if (host == null) {\n            host = \"\";\n        } else {\n            host = host.toLowerCase(Locale.ENGLISH);\n        }\n\n        // Normalize the port\n        int port = uri.getPort();\n        if (port == -1) {\n            if (\"http\".equals(scheme)) {\n                port = 80;\n            } else if (\"https\".equals(scheme)) {\n                port = 443;\n            }\n        }\n\n        // Normalize the path\n        String path = uri.getPath();\n        if (path == null) {\n            path = \"\";\n        } else {\n            path = path.trim();\n        }\n\n        // Create a new URI object with the normalized values\n        URI normalized = new URI(scheme, null, host, port, path, null, null);\n\n        // Return the normalized URL\n        return normalized.toString().trim();\n    } catch (URISyntaxException e) {\n        // Ignore exception and return original URL\n        return serverUrl.trim();\n    }\n}", "CodeBleu_score": 48.95843641455721}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (StringUtils.isBlank(serverUrl)) {\n        return serverUrl;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n\n        if (uri.getHost() == null) {\n            return serverUrl;\n        }\n\n        if (uri.getScheme() == null) {\n            return serverUrl;\n        }\n\n        if (uri.getPort() == 80 && \"http\".equals(uri.getScheme())) {\n            uri = new URI(\"http\", uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n        }\n\n        if (uri.getPort() == 443 && \"https\".equals(uri.getScheme())) {\n            uri = new URI(\"https\", uri.getUserInfo(), uri.getHost(), -1, uri.getPath(), uri.getQuery(), uri.getFragment());\n        }\n\n        return uri.toString();\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 37.576530606740285}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        uri = new URI(uri.getScheme(), uri.getUserInfo(), uri.getHost(), uri.getPort(), uri.getPath(), uri.getQuery(), uri.getFragment());\n        String url = uri.toString();\n\n        if (url.endsWith(\"/\")) {\n            url = url.substring(0, url.length() - 1);\n        }\n\n        return url;\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 32.189574602243205}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel m = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        m.add(server.getDisplayName(), server.getServerUrl());\n    }\n    return m;\n}", "CodeBleu_score": 32.29724315514155}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 53.57985829471772}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 53.57985829471772}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n        if (servers == null) {\n            servers = Collections.emptyList();\n        }\n        servers = servers.stream().filter(Objects::nonNull).filter(s -> !StringUtils.isEmpty(s.getServerUrl())).distinct().collect(Collectors.toList());\n        this.servers = servers;\n        save();\n    }", "CodeBleu_score": 30.194256856275675}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n        List<GiteaServer> newServers = new ArrayList<>();\n        if (servers != null) {\n            for (GiteaServer server : servers) {\n                String serverUrl = server.getServerUrl();\n                if (StringUtils.isNotBlank(serverUrl)) {\n                    newServers.add(server);\n                }\n            }\n        }\n        this.servers = newServers;\n        save();\n    }", "CodeBleu_score": 39.9761221799692}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tJenkins jenkins = Jenkins.get();\n        if (!jenkins.hasPermission(Jenkins.ADMINISTER)) {\n            throw new AccessDeniedException(\"You must have administer permissions to set Gitea servers\");\n        }\n        List<GiteaServer> newServers = new ArrayList<>();\n        if (servers != null) {\n            for (GiteaServer server : servers) {\n                if (server != null && !server.getServerUrl().isEmpty()) {\n                    newServers.add(server);\n                }\n            }\n        }\n        this.servers = newServers;\n        save();\n    }", "CodeBleu_score": 40.1920977620498}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n        serverUrl = normalizeServerUrl(serverUrl);\n        boolean removed = false;\n        List<GiteaServer> newServers = new ArrayList<>();\n        for (GiteaServer endpoint : getServers()) {\n            if (serverUrl.equals(endpoint.getServerUrl())) {\n                removed = true;\n            } else {\n                newServers.add(endpoint);\n            }\n        }\n        servers = newServers;\n        save();\n        return removed;\n    }", "CodeBleu_score": 46.155829006701374}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tif (serverUrl == null) {\n            return false;\n        }\n        serverUrl = normalizeServerUrl(serverUrl);\n        boolean removed = false;\n        List<GiteaServer> eps = new ArrayList<>(Util.fixNull(servers));\n        for (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (serverUrl.equals(normalizeServerUrl(endpoint.getServerUrl()))) {\n                iterator.remove();\n                removed = true;\n            }\n        }\n        if (removed) {\n            servers = eps;\n            save();\n        }\n        return removed;\n    }", "CodeBleu_score": 54.940253085468925}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tserverUrl = normalizeServerUrl(serverUrl);\n        boolean removed = false;\n        for (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext(); ) {\n            GiteaServer endpoint = iterator.next();\n            if (serverUrl.equals(normalizeServerUrl(endpoint.getServerUrl()))) {\n                iterator.remove();\n                removed = true;\n            }\n        }\n        if (removed) {\n            save();\n        }\n        return removed;\n    }", "CodeBleu_score": 50.43323520663549}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n      String type = el.asType().toString();\n      Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n      DescriptorElement element = new DescriptorElement(type, attributes);\n      descriptorElements.add(element);\n    }\n  }", "CodeBleu_score": 46.439926159274705}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n    Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n    attributes.put(\"type\", el.asType().toString());\n    descriptorElements.add(new ConfigElement(el, attributes));\n  }\n}", "CodeBleu_score": 40.95800440136094}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tfor (Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n    String type = el.asType().toString();\n    Map<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n    descriptorElements.add(new ConfigElement(type, attributes));\n  }\n}", "CodeBleu_score": 47.85887430995926}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getName();\n        if (qualifiedName.replace('$', '.').equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 39.320566559491844}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getCanonicalName();\n        targetName = targetName.replace('$', '.');\n        if (qualifiedName.equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 37.49084481929194}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tfor (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n        String targetName = annotationClass.getCanonicalName();\n        if (qualifiedName.equals(targetName)) {\n            return annotation;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 39.10552680345314}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"status\": [\"!=\", \"Cancelled\"],\n    }\n    if for_approval:\n        filters.update({\n            \"workflow_state\": get_allowed_states_for_workflow(\n                frappe.get_doc(\"Workflow\", \"Leave Application\"),\n                approver_id or frappe.session.user\n            ),\n            \"owner\": [\"!=\", employee]\n        })\n    else:\n        filters.update({\n            \"owner\": employee,\n        })\n    return filters", "CodeBleu_score": 28.641865526947303}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n        \"employee\": employee,\n        \"status\": \"Open\",\n    }\n    if for_approval:\n        filters.update({\n            \"status\": [\"in\", get_allowed_states_for_workflow(get_workflow(\"Leave Application\"), approver_id)],\n            \"employee_name\": [\"!=\", employee]\n        })\n    else:\n        filters.update({\n            \"status\": [\"not in\", [\"Canceled\", \"Rejected\"]]\n        })\n    return filters", "CodeBleu_score": 28.48150512318368}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\tfilters = {\n\t\t\"employee\": employee,\n\t\t\"status\": \"Open\",\n\t}\n\n\tif approver_id:\n\t\tfilters.update({\n\t\t\t\"approver\": approver_id,\n\t\t})\n\n\tif for_approval:\n\t\tfilters.update({\n\t\t\t\"status\": [\"!=\", \"Rejected\"],\n\t\t\t\"employee\": [\"!=\", employee],\n\t\t})\n\telse:\n\t\tfilters.update({\n\t\t\t\"status\": [\"!=\", \"Cancelled\"],\n\t\t})\n\n\treturn filters\n\n", "CodeBleu_score": 23.972633383806723}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\tcurrent_date = get_current_date()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"balance\"],\n        }\n\n    return leave_balance_map", "CodeBleu_score": 37.87010064088753}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\ttoday = date.today()\n    leave_details = get_leave_details(employee, today.year)\n    leave_balance_map = {}\n    for leave in leave_details:\n        leave_balance_map[leave.leave_type] = {\n            \"Allocated Leaves\": leave.total_leaves_allocated,\n            \"Leaves Taken\": leave.total_leaves_taken,\n            \"Balance Leaves\": leave.total_leaves_allocated - leave.total_leaves_taken\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 40.08512219193013}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\ttoday = date.today()\n    leave_details = get_leave_details(employee, today.year)\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_balance_map[leave_detail.leave_type] = {\n            \"allocated_leaves\": leave_detail.total_leaves_allocated,\n            \"balance_leaves\": leave_detail.remaining_leaves\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.739476007251184}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\"\"\"\n        SELECT\n            `tabHoliday`.holiday_date,\n            `tabHoliday`.description\n        FROM `tabHoliday`\n        WHERE\n            `tabHoliday`.parent = %(holiday_list)s\n            AND `tabHoliday`.weekly_off IS NULL\n        ORDER BY `tabHoliday`.holiday_date ASC\n    \"\"\", {\"holiday_list\": holiday_list}, as_dict=True)\n    for holiday in holidays:\n        holiday.description = frappe.utils.strip_html(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 35.01934865499493}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\tholiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n    holidays = frappe.db.sql(\"\"\"\n        SELECT\n            hd.holiday_date AS date,\n            hd.description\n        FROM `tabHoliday` AS h\n        INNER JOIN `tabHoliday List` AS hl ON hl.name = h.parent\n        INNER JOIN `tabHoliday Date` AS hd ON hd.parent = h.name\n        WHERE\n            hl.name = %(holiday_list)s\n            AND hd.holiday_date > CURDATE()\n            AND hd.weekly_off IS NULL\n        ORDER BY hd.holiday_date\n    \"\"\", {\"holiday_list\": holiday_list}, as_dict=True)\n    for holiday in holidays:\n        holiday[\"description\"] = frappe.utils.strip_html(holiday[\"description\"])\n    return holidays\n\n\n", "CodeBleu_score": 35.511474399751904}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t# Get the holiday list for the employee\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n\n    # If no holiday list is found, return an empty list\n    if not holiday_list:\n        return []\n\n    # Query the holidays from the database, excluding weekly offs, and order them by date\n    holidays = frappe.db.sql(\n        \"\"\"\n        SELECT\n            name,\n            description\n        FROM `tabHoliday`\n        WHERE\n            parent=%(holiday_list)s\n            AND holiday_date >= %(start)s\n            AND holiday_date <= %(end)s\n            AND holiday_date NOT IN (\n                SELECT\n                    holiday_date\n                FROM `tabHoliday`\n                WHERE\n                    parent=%(holiday_list)s\n                    AND holiday_date >= %(start)s\n                    AND holiday_date <= %(end)s\n                    AND repeat_on=\"Weekly\"\n            )\n        ORDER BY\n            holiday_date\n        \"\"\",\n        {\n            \"holiday_list\": holiday_list,\n            \"start\": start,\n            \"end\": end,\n        },\n        as_dict=1,\n    )\n\n    # Strip HTML from the holiday descriptions and return the list of holidays\n    for holiday in holidays:\n        holiday.description = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 29.094112298980768}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\thr_settings = frappe.get_single(\"HR Settings\")\n    if hr_settings.enable_holiday_reminder and hr_settings.frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 19.176041525419915}, {"code": "def send_reminders_in_advance_weekly()\n\thr_settings = frappe.get_doc(\"HR Settings\")\n    if hr_settings.send_holiday_reminder_in_advance and hr_settings.frequency_of_sending_holiday_reminder == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 21.11982665053241}, {"code": "def send_reminders_in_advance_weekly()\n\tif frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminders_in_advance\"):\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 14.970933881829316}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\ttotal_score = 0\n    for rating in self.self_ratings:\n        total_score += rating.rating * rating.percentage_weightage / 100\n    self.self_appraisal_score = round(total_score, 2)\n\n", "CodeBleu_score": 25.849590479217472}, {"code": "def calculate_self_appraisal_score(self)\n\ttotal_score = 0\n    for entry in self.self_ratings:\n        score = entry.rating * entry.weightage\n        total_score += score\n    self.self_appraisal_score = round(total_score, 2)\n\n\n", "CodeBleu_score": 31.789844038844954}, {"code": "def calculate_self_appraisal_score(self)\n\ttotal_score = 0\n    for self_rating in self.self_ratings:\n        total_score += (self_rating.rating * self_rating.percentage_weightage)\n    self.self_appraisal_score = round(total_score, 2)\n\n", "CodeBleu_score": 25.710963475512855}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\tappraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        formula = appraisal_cycle.final_score_formula\n        if not formula:\n            frappe.throw(\n                _(\n                    \"Please enter a formula for calculating the final score in the Appraisal Cycle {0}.\"\n                ).format(frappe.bold(self.appraisal_cycle)),\n                title=_(\"Missing Formula\"),\n            )\n        formula = sanitize_expression(formula)\n        if not formula:\n            frappe.throw(\n                _(\n                    \"Please enter a valid formula for calculating the final score in the Appraisal Cycle {0}.\"\n                ).format(frappe.bold(self.appraisal_cycle)),\n                title=_(\"Invalid Formula\"),\n            )\n        self.final_score = frappe.safe_eval(formula, None, {\"doc\": self})\n    else:\n        self.final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n    self.final_score = round(self.final_score, appraisal_cycle.score_precision)\n\n", "CodeBleu_score": 32.80097125358504}, {"code": "def calculate_final_score(self)\n\t# Retrieve the appraisal cycle document\n    cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # Check if the final score should be calculated based on a formula\n    if cycle_doc.calculate_final_score_based_on_formula:\n        # Gather necessary data\n        employee = frappe.get_doc(\"Employee\", self.employee)\n        appraisal_details = frappe.get_all(\n            \"Appraisal Detail\",\n            fields=[\"score\", \"weightage\"],\n            filters={\"parent\": self.name},\n        )\n        feedback_details = frappe.get_all(\n            \"Appraisal Feedback\",\n            fields=[\"score\"],\n            filters={\"parent\": self.name},\n        )\n\n        # Sanitize the formula\n        formula = sanitize_expression(cycle_doc.final_score_formula)\n\n        # Evaluate the formula\n        final_score = frappe.safe_eval(\n            formula,\n            {\n                \"employee\": employee,\n                \"appraisal\": self,\n                \"appraisal_details\": appraisal_details,\n                \"feedback_details\": feedback_details,\n            },\n        )\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (\n            self.total_score + self.average_feedback_score + self.self_appraisal_score\n        ) / 3\n\n    # Set the final score with the appropriate precision\n    self.final_score = round(final_score, cycle_doc.final_score_precision)\n\n    return self.final_score\n\n", "CodeBleu_score": 39.95796533029438}, {"code": "def calculate_final_score(self)\n\t# Get the appraisal cycle document\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n\n        # Get the formula from the appraisal cycle document\n        formula = appraisal_cycle.final_score_formula\n\n        # Sanitize the formula\n        formula = sanitize_expression(formula)\n\n        # Get the variables from the appraisal document\n        gross_pay = self.gross_pay\n        total_score = self.total_score\n        feedback_score = self.feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        # Evaluate the formula\n        final_score = eval(formula)\n\n    else:\n        # Calculate the final score as the average of the total score, feedback score, and self-appraisal score\n        final_score = (total_score + feedback_score + self_appraisal_score) / 3\n\n    # Set the final score with the appropriate precision\n    self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n\n", "CodeBleu_score": 27.2025802010446}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\tif getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status != \"On Leave\" or self.leave_application:\n            frappe.throw(_(\"Attendance cannot be marked for future dates\"))\n\n    if getdate(self.attendance_date) < getdate(self.employee.date_of_joining):\n        frappe.throw(_(\"Attendance cannot be marked before the employee's joining date\"))\n\n", "CodeBleu_score": 28.195074698012284}, {"code": "def validate_attendance_date(self)\n\tif self.status == \"Present\" or self.status == \"Half Day\":\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            frappe.throw(_(\"You cannot mark attendance for future dates\"))\n        elif getdate(self.attendance_date) < getdate(self.employee.date_of_joining):\n            frappe.throw(_(\"Attendance Date cannot be earlier than the Employee's Date of Joining\"))\n    elif self.status == \"On Leave\" and self.employee:\n        leave_record = frappe.db.sql(\"\"\"select half_day from `tabLeave Application`\n            where employee = %s and %s between from_date and to_date\n            and docstatus = 1\"\"\", (self.employee, self.attendance_date), as_dict=True)\n        if not leave_record:\n            frappe.throw(_(\"No leave record found for this employee\"))\n        else:\n            self.half_day = leave_record[0].half_day\n    else:\n        frappe.throw(_(\"Attendance Status must be 'Present', 'Absent' or 'On Leave'\"))", "CodeBleu_score": 39.382137636362344}, {"code": "def validate_attendance_date(self)\n\tif getdate(self.attendance_date) > getdate(nowdate()):\n        if self.status != \"On Leave\" or frappe.db.get_value(\"Leave Application\", {\"employee\": self.employee, \"from_date\": self.attendance_date, \"docstatus\": 1}, \"name\"):\n            frappe.throw(_(\"Attendance can not be marked for future dates\"))\n\n    if getdate(self.attendance_date) < getdate(self.employee_doj):\n        frappe.throw(_(\"Attendance can not be marked before employee's joining date\"))\n\n\n", "CodeBleu_score": 33.14509957339942}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\tduplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            frappe._(\n                \"Duplicate Attendance Record found for Employee {0} on {1} {2}\".format(\n                    self.employee,\n                    self.attendance_date,\n                    frappe.utils.get_link_to_form(\n                        \"Attendance\", duplicate_record, self.employee\n                    ),\n                )\n            )\n        )", "CodeBleu_score": 27.30007349654929}, {"code": "def validate_duplicate_record(self)\n\tduplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            frappe._(\n                \"Duplicate Attendance Record found for employee {0} on {1}. <br> <a href='/app/attendance/{2}'>Click here to view the existing record</a>\"\n            ).format(self.employee, self.attendance_date, duplicate_record),\n            frappe.DuplicateEntryError,\n        )\n\n", "CodeBleu_score": 28.126557084171406}, {"code": "def validate_duplicate_record(self)\n\tduplicate_attendance_record = self.get_duplicate_attendance_record()\n\n    if duplicate_attendance_record:\n        frappe.throw(\n            f\"Duplicate Attendance Record found for Employee {self.employee} on {self.attendance_date} <br><br>\"\n            f\"<a href='/app/attendance/{duplicate_attendance_record}'>View Attendance Record</a>\"\n        )\n\n", "CodeBleu_score": 10.525213470207621}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\tif not self.message:\n        frappe.throw(_(\"Please add a message to send\"))\n\n    # get email addresses of users in the group\n    email_addresses = get_user_emails_from_group(self)\n\n    # get message details\n    message_details = self.get_message_details()\n\n    # send email\n    frappe.sendmail(\n        recipients=email_addresses,\n        sender=frappe.session.user,\n        subject=message_details[\"title\"],\n        content=frappe.render_template(\"templates/emails/daily_work_summary.html\", message_details),\n        delayed=False,\n    )\n\n    # update status\n    self.status = \"Sent\"\n    self.save()\n", "CodeBleu_score": 38.39599771773303}, {"code": "def send_summary(self)\n\tif self.status == \"Sent\":\n        return\n\n    message_details = self.get_message_details()\n    emails = self.get_user_emails_from_group(self.daily_work_summary_group)\n\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details[\"title\"],\n        message=frappe.render_template(\"daily_work_summary/daily_work_summary.html\", message_details),\n        delayed=True,\n    )\n\n    self.status = \"Sent\"\n    self.save()\n", "CodeBleu_score": 49.778186053622896}, {"code": "def send_summary(self)\n\tif self.status == \"Sent\":\n        return\n\n    # Get message details\n    message_details = self.get_message_details()\n    # Get email addresses of users in the group\n    email_addresses = get_user_emails_from_group(self.daily_work_summary_group)\n    # Send email\n    frappe.sendmail(\n        recipients=email_addresses,\n        sender=frappe.session.user,\n        subject=_(\"Daily Work Summary for {0}\").format(\n            global_date_format(self.creation)\n        ),\n        message=frappe.render_template(\n            \"one_fm/daily_work_summary/daily_work_summary.html\",\n            message_details,\n        ),\n        delayed=False,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n    # Update status\n    self.status = \"Sent\"\n    self.save()\n\n", "CodeBleu_score": 54.4972720117906}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant and self.job_opening:\n        job_applicant = self.job_applicant\n        job_opening = self.job_opening\n        interview_round = self.interview_round\n        existing_interview_records = frappe.db.sql(\"\"\"select name, interview_round from `tabInterview Schedule` where job_applicant = %s and job_opening = %s and name != %s and interview_round = %s\"\"\", (job_applicant, job_opening, self.name, interview_round))\n        if existing_interview_records:\n            existing_interview_record = existing_interview_records[0]\n            frappe.throw(\n                _(\"Job Applicant {0} is already scheduled for Interview Round {1} in <a href='/desk#Form/Interview Schedule/{2}'>Interview Schedule {2}</a>\").format(\n                    job_applicant, interview_round, existing_interview_record[0]),\n                title=_(\"Duplicate Interview Record\")\n            )\n\n", "CodeBleu_score": 38.548750533642625}, {"code": "def validate_duplicate_interview(self)\n\tif self.job_applicant:\n        existing_interviews = frappe.get_all(\"Interview\", filters={\"job_applicant\": self.job_applicant, \"interview_round\": self.interview_round, \"docstatus\": 1}, fields=[\"name\"])\n        if existing_interviews:\n            frappe.throw(f\"Job Applicant {self.job_applicant} is already scheduled for an interview in {self.interview_round} round. <br> <a href='{existing_interviews[0].name}'>Click here</a> to go to the existing interview record.\", title=\"Duplicate Interview Record\")\n\n", "CodeBleu_score": 48.72139085836436}, {"code": "def validate_duplicate_interview(self)\n\tjob_applicant = self.job_applicant\n    job_opening = self.job_opening\n    interview_round = self.interview_round\n    if job_applicant and job_opening and interview_round:\n        interview_round_name = interview_round.name\n        job_applicant_name = job_applicant.name\n        job_opening_name = job_opening.name\n        existing_interview = frappe.db.get_value(\"Interview\", {\"job_applicant\": job_applicant.name, \"job_opening\": job_opening.name, \"interview_round\": interview_round.name})\n        if existing_interview:\n            existing_interview_doc = frappe.get_doc(\"Interview\", existing_interview)\n            existing_interview_link = get_link_to_form(\"Interview\", existing_interview_doc.name)\n            frappe.throw(_(\"Job Applicant {0} has already been interviewed for Job Opening {1} in Interview Round {2}. Please check {3} for more details.\").format(job_applicant_name, job_opening_name, interview_round_name, existing_interview_link))\n\n\n\n", "CodeBleu_score": 39.89487264454876}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\tratings = [assessment.rating for assessment in self.skill_assessments if assessment.rating]\n    if ratings:\n        self.average_rating = sum(ratings) / len(ratings)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.54030211017834}, {"code": "def calculate_average_rating(self)\n\ttotal = 0\n    count = 0\n    for assessment in self.assessments:\n        if assessment.rating:\n            total += assessment.rating\n            count += 1\n    if count == 0:\n        self.average_rating = 0\n    else:\n        self.average_rating = total / count", "CodeBleu_score": 26.984220246774104}, {"code": "def calculate_average_rating(self)\n\tif self.assessments.count() == 0:\n        self.average_rating = 0\n    else:\n        total = sum([assessment.rating for assessment in self.assessments.all() if assessment.rating])\n        self.average_rating = total / self.assessments.count()\n\n", "CodeBleu_score": 28.17990163945011}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\tif isinstance(doc, str):\n        doc = json.loads(doc)\n\n    interview = frappe.new_doc(\"Interview\")\n    interview.update(doc)\n    interview.save()\n\n    return interview\n\n", "CodeBleu_score": 34.350287765298724}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\"interview_details\", {\n                \"interviewer\": interviewer.interviewer,\n                \"interviewer_name\": interviewer.interviewer_name,\n                \"designation\": interviewer.designation\n            })\n    return interview\n\n\n\n\n", "CodeBleu_score": 41.32472017047078}, {"code": "def create_interview(doc):\n\tinterview = frappe.new_doc(\"Interview\")\n    if isinstance(doc, str):\n        interview.interview_round = doc\n    else:\n        interview.interview_round = doc.get(\"interview_round\")\n        interview.designation = doc.get(\"designation\")\n        interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 37.096927339486676}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\treturn frappe.db.sql(\"\"\"select name from `tabJob Offer` where designation = %s and company = %s and date_of_creation between %s and %s and docstatus = 1\"\"\", (self.designation, self.company, from_date, to_date), as_dict=True)\n\n", "CodeBleu_score": 27.216485765200314}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offers = frappe.get_all('Job Offer',\n                                 filters={\n                                     'designation': self.designation,\n                                     'company': self.company,\n                                     'document_status': 1,\n                                     'creation': ['between', (from_date, to_date)]\n                                 },\n                                 fields=['name']\n                                 )\n\n    return job_offers\n\n", "CodeBleu_score": 49.9843611032897}, {"code": "def get_job_offer(self, from_date, to_date)\n\tjob_offer_list = frappe.db.sql(\"\"\"SELECT name FROM `tabJob Offer` WHERE creation BETWEEN %s AND %s AND designation = %s AND company = %s AND docstatus = 1\"\"\", (from_date, to_date, self.designation, self.company), as_dict=True)\n    return job_offer_list\n\n\n", "CodeBleu_score": 34.58075845985748}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\ttotal_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1})\n    accepted_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"status\": \"Accepted\"})\n    if company:\n        total_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"company\": company})\n        accepted_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"status\": \"Accepted\", \"company\": company})\n    if department:\n        total_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"department\": department})\n        accepted_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"status\": \"Accepted\", \"department\": department})\n    if company and department:\n        total_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"company\": company, \"department\": department})\n        accepted_offers = frappe.db.count(\"Job Offer\", {\"docstatus\": 1, \"status\": \"Accepted\", \"company\": company, \"department\": department})\n    if accepted_offers == 0:\n        return 0\n    else:\n        return round((accepted_offers / total_offers) * 100, 1)\n\n", "CodeBleu_score": 30.194217379900522}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tfrom frappe.utils import nowdate\n    from frappe.utils import getdate\n    from frappe.utils import add_days\n    from frappe.utils import add_to_date\n    from frappe.utils import get_link_to_form\n    from frappe.utils import get_url\n    from frappe.utils import cint\n    from frappe.utils import cstr\n    from frappe.utils import flt\n    from frappe.utils import now\n    from frappe.utils import rounded\n    from frappe.utils import money_in_words\n    from frappe.utils import fmt_money\n    from frappe.utils import escape_html\n    from frappe.utils import random_string\n    from frappe.utils import unique\n    from frappe.utils import get_fullname\n    from frappe.utils import has_gravatar\n    from frappe.utils import get_gravatar_url\n    from frappe.utils import strip_html\n    from frappe.utils import strip_html_tags\n    from frappe.utils import sanitize_html\n    from frappe.utils import sanitize_code\n    from frappe.utils import get_url_to_form\n    from frappe.utils import get_url_to_list\n    from frappe.utils import get_url_to_report\n    from frappe.utils import get_absolute_url\n    from frappe.utils import get_url_to_report_export\n    from frappe.utils import get_url_to_report_export_all\n    from frappe.utils import get_url_to_report_export_page\n    from frappe.utils import get_url_to_report_export_page_all\n    from frappe.utils import get_url_to_report_export_page_all_with_filter\n    from frappe.utils import get_url_to_report_export_page_with_filter\n    from frappe.utils import get_url_to_report_export_with_filter\n    from frappe.utils import get_url_to_report_export_all_with_filter\n    from frappe.utils import get_url_to_report_export_all_with_", "CodeBleu_score": 5.174357288340863}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\tfilters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"})\n    if total_offers == 0:\n        return 0\n    return {\"value\": round(accepted_offers / total_offers * 100, 2), \"type\": \"Percent\"}\n\n", "CodeBleu_score": 58.966198834302595}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.18597485788202}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.staffNotFound);\n\t\t}\n\t\tfinal Result result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (result.isFailure()) {\n\t\t\treturn result;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tcompanyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult(Messages.staffUpdated);\n\t}", "CodeBleu_score": 47.83921069677037}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\t\tfinal Result passwordMatchResult = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\t\tif (passwordMatchResult.isFailure()) {\n\t\t\treturn passwordMatchResult;\n\t\t}\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffRepository.save(companyStaff);\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 49.85414402280824}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = this.companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\n\t\tif (companyStaff == null) {\n\t\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t\t}\n\n\t\tfinal Result result = this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword());\n\n\t\tif (result.isFailure()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\n\t\tthis.companyStaffRepository.save(companyStaff);\n\n\t\treturn new SuccessResult(Messages.companyStaffUpdated);\n\t}", "CodeBleu_score": 48.95343700422515}]}
