{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\tvar dllDir = GetDirectedDllDirectory();\n    var dllPath = Path.Combine(dllDir, dllName);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n    {\n        var kernel32 = LoadLibrary(dllPath);\n        if (kernel32 == IntPtr.Zero)\n        {\n            throw new Win32Exception();\n        }\n    }\n    else\n    {\n        var kernel32 = dlopen(dllPath, RTLD_NOW);\n        if (kernel32 == IntPtr.Zero)\n        {\n            var err = dlerror();\n            throw new Exception(\"dlopen failed: \" + err);\n        }\n    }\n}", "CodeBleu_score": 37.361992735149435}, {"code": "public static void PreloadDll(string dllName){\n\tvar dllDirectory = GetDirectedDllDirectory();\n    var dllPath = Path.Combine(dllDirectory, dllName);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        var kernel32 = LoadLibrary(dllPath);\n    } else {\n        dlopen(dllPath, RTLD_NOW);\n    }\n}", "CodeBleu_score": 37.789995146798645}, {"code": "public static void PreloadDll(string dllName){\n\tvar directedDllDir = GetDirectedDllDirectory();\n\n    var dllPath = Path.Combine(directedDllDir, dllName);\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        var kernel32 = LoadLibrary(dllPath);\n        if (kernel32 == IntPtr.Zero) {\n            throw new Win32Exception();\n        }\n    }\n    else {\n        var ret = dlopen(dllPath, RTLD_NOW);\n        if (ret == IntPtr.Zero) {\n            throw new DllNotFoundException();\n        }\n    }\n}", "CodeBleu_score": 32.10148068648795}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (assetsFileList.TryGetValue(originalPath, out var assetsFile)) {\n        Logger.Warning(\"Skipped duplicate file {0}\", originalPath);\n        return;\n    }\n\n    assetsFile = new SerializedFile(reader, originalPath, this);\n    CheckStrippedVersion(assetsFile);\n    assetsFileList.Add(originalPath, assetsFile);\n}", "CodeBleu_score": 26.05480983024439}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (assetsFileList.TryGetValue(originalPath, out var assetsFile))\n    {\n        reader.Dispose();\n        return;\n    }\n    try\n    {\n        assetsFile = new SerializedFile(reader, originalPath);\n        if (unityVersion != null)\n            assetsFile.SetVersion(unityVersion);\n        CheckStrippedVersion(assetsFile);\n    }\n    catch (Exception e)\n    {\n        Logger.Error(e, $\"Failed to load assets file {originalPath}\");\n        reader.Dispose();\n        return;\n    }\n    assetsFileList.Add(originalPath, assetsFile);\n}", "CodeBleu_score": 41.054955178891674}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (assetsFileList.TryGetValue(originalPath, out var assetsFile)) {\n        Logger.Warning(null, $\"Skipped loading assets file {originalPath} because it has already been loaded.\");\n        return;\n    }\n\n    assetsFile = new SerializedFile(reader, originalPath, unityVersion);\n    CheckStrippedVersion(assetsFile);\n    assetsFileList.Add(originalPath, assetsFile);\n}", "CodeBleu_score": 27.67685125480117}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\tif (Path == path)\n\t\treturn this;\n\tforeach (var child in children) {\n\t\tvar frame = child.FindFrameByPath(path);\n\t\tif (frame != null)\n\t\t\treturn frame;\n\t}\n\treturn null;\n}", "CodeBleu_score": 47.67454510878588}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tif (Path == path)\n    {\n        return this;\n    }\n    foreach (var child in children)\n    {\n        var frame = child.FindFrameByPath(path);\n        if (frame != null)\n        {\n            return frame;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 60.87413777089403}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tvar name = path.Substring(path.LastIndexOf(\"/\") + 1);\n    foreach (var child in FindChilds(name))\n    {\n        if (child.Path == path)\n        {\n            return child;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 65.325945544268}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\tusing (var compressedStream = new MemoryStream(reader.Data))\n    using (var zipStream = new GZipStream(compressedStream, CompressionMode.Decompress))\n    using (var resultStream = new MemoryStream()) {\n        zipStream.CopyTo(resultStream);\n        return new FileReader(resultStream.ToArray());\n    }\n}", "CodeBleu_score": 30.999759749994173}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\tMemoryStream memStream = new MemoryStream();\n    reader.BaseStream.CopyTo(memStream);\n    memStream.Seek(0, SeekOrigin.Begin);\n    using (GZipStream decompressionStream = new GZipStream(memStream, CompressionMode.Decompress)) {\n        MemoryStream output = new MemoryStream();\n        decompressionStream.CopyTo(output);\n        output.Seek(0, SeekOrigin.Begin);\n        return new FileReader(output);\n    }\n}", "CodeBleu_score": 37.13518505908328}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\tusing (var compressedStream = reader.ToStream())\n    using (var zipStream = new GZipStream(compressedStream, CompressionMode.Decompress))\n    using (var resultStream = new MemoryStream()) {\n        zipStream.CopyTo(resultStream);\n        return new FileReader(resultStream.ToArray());\n    }\n}", "CodeBleu_score": 31.252229642656708}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tParseStrings(switchForms, commandStrings, null);\n\t\t}", "CodeBleu_score": 16.94860329922513}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tParseStrings(switchForms, commandStrings, null);\n\t\t}", "CodeBleu_score": 16.94860329922513}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\tParseStrings(switchForms, commandStrings, null);\n\t\t}", "CodeBleu_score": 16.94860329922513}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t// Extract image data, width, height, texture format, version, platform, and output size from a given Texture2D object.\n    m_ImageData = m_Texture2D.imageData;\n    m_Width = m_Texture2D.width;\n    m_Height = m_Texture2D.height;\n    m_TextureFormat = m_Texture2D.format;\n    m_Version = m_Texture2D.version;\n    m_Platform = m_Texture2D.platform;\n    m_OutputSize = m_Texture2D.outputSize;\n}", "CodeBleu_score": 54.78478164397346}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\tm_Texture2D = m_Texture2D;\n    m_Texture2D.GetImageData();\n    m_Texture2D.GetWidth();\n    m_Texture2D.GetHeight();\n    m_Texture2D.GetTextureFormat();\n    m_Texture2D.GetVersion();\n    m_Texture2D.GetPlatform();\n    m_Texture2D.GetOutputSize();\n}", "CodeBleu_score": 31.550420195177274}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t// Extract and set properties\n    this.m_ImageData = m_Texture2D.imageContentsHash.ToList();\n    this.m_Width = m_Texture2D.width;\n    this.m_Height = m_Texture2D.height;\n    this.m_TextureFormat = m_Texture2D.m_TextureFormat;\n    this.m_Version = m_Texture2D.m_Version;\n    this.m_Platform = m_Texture2D.m_Platform;\n    this.m_OutputSize = m_Texture2D.m_StreamData.size;\n}", "CodeBleu_score": 34.718946963603656}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n    if (sp.arraySize == 0) return \"Nothing\";\n    for (int i = 0; i < sp.arraySize; i++) {\n        SerializedProperty item = sp.GetArrayElementAtIndex(i);\n        if (item.FindPropertyRelative(\"active\").boolValue) {\n            result.Add(item.FindPropertyRelative(\"name\").stringValue);\n        }\n    }\n    if (result.Count == 0) return \"Nothing\";\n    string names = \"\";\n    for (int i = 0; i < result.Count; i++) {\n        if (i == 0) names += result[i];\n        else names += \", \" + result[i];\n    }\n    return names;\n}", "CodeBleu_score": 43.0116266460944}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tSerializedProperty item = sp.GetArrayElementAtIndex(i);\n\t\tif (item.FindPropertyRelative(\"active\").boolValue) {\n\t\t\tresult.Add(item.FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t}\n\treturn string.Join(\", \", result.ToArray());\n}", "CodeBleu_score": 34.83808047694072}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tif (sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"active\").boolValue) {\n\t\t\tresult.Add(sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue);\n\t\t}\n\t}\n\tif (result.Count == 0) {\n\t\treturn \"Nothing\";\n\t} else {\n\t\treturn string.Join(\", \", result.ToArray());\n\t}\n}", "CodeBleu_score": 36.43139559317841}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t// If the property is not active, add it to the menu\n    if (!sp.Contains(prop.Name)) {\n        // Create a menu item for the property\n        menu.AddItem(new GUIContent(prop.Name), false, () => {\n            // If adding is allowed, add the property to the array\n            if (add) {\n                sp.Add(prop.Name);\n            }\n            // Otherwise, remove the property from the array\n            else {\n                sp.Remove(prop.Name);\n            }\n            // Apply the changes to the serialized object\n            sp.serializedObject.ApplyModifiedProperties();\n        });\n    }\n}", "CodeBleu_score": 27.587104960624163}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\tif (prop.isActive) {\n\t\tif (add) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name), false, (o) => {\n\t\t\t\tif (sp.arraySize == 0) {\n\t\t\t\t\tsp.arraySize = 1;\n\t\t\t\t}\n\t\t\t\tsp.GetArrayElementAtIndex(0).stringValue = prop.name;\n\t\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif (!add) {\n\t\t\tmenu.AddItem(new GUIContent(prop.name), false, (o) => {\n\t\t\t\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\t\t\t\tif (sp.GetArrayElementAtIndex(i).stringValue == prop.name) {\n\t\t\t\t\t\tsp.DeleteArrayElementAtIndex(i);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsp.serializedObject.ApplyModifiedProperties();\n\t\t\t});\n\t\t}\n\t}\n}", "CodeBleu_score": 33.47358039670477}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\tstring propName = prop.name;\n    if (!sp.propertyType.Equals(SerializedPropertyType.String)) {\n        Debug.LogError(\"ShaderProperties: AddMenu - sp is not a string array!\");\n        return;\n    }\n\n    bool active = sp.arraySize > 0;\n    for (int i = 0; i < sp.arraySize; i++) {\n        if (sp.GetArrayElementAtIndex(i).stringValue.Equals(propName)) {\n            active = true;\n            break;\n        }\n    }\n\n    if (add) {\n        if (!active) {\n            menu.AddItem(new GUIContent(prop.displayName), false, () => {\n                sp.InsertArrayElementAtIndex(sp.arraySize);\n                sp.GetArrayElementAtIndex(sp.arraySize - 1).stringValue = propName;\n                sp.serializedObject.ApplyModifiedProperties();\n            });\n        }\n    } else {\n        if (active) {\n            menu.AddItem(new GUIContent(prop.displayName), false, () => {\n                for (int i = 0; i < sp.arraySize; i++) {\n                    if (sp.GetArrayElementAtIndex(i).stringValue.Equals(propName)) {\n                        sp.DeleteArrayElementAtIndex(i);\n                        sp.serializedObject.ApplyModifiedProperties();\n                        break;\n                    }\n                }\n            });\n        }\n    }\n}", "CodeBleu_score": 37.552431438021316}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tbool changed = false;\n\n\t// Check if the x, y, and z values are approximately equal or have multiple different values\n\tbool showSingleFloat = false;\n\tbool showXyzControls = false;\n\tif (showXyz) {\n\t\tfloat x = sp.FindPropertyRelative(\"x\").floatValue;\n\t\tfloat y = sp.FindPropertyRelative(\"y\").floatValue;\n\t\tfloat z = sp.FindPropertyRelative(\"z\").floatValue;\n\t\tshowXyzControls = !Mathf.Approximately(x, y) || !Mathf.Approximately(x, z);\n\t\tshowSingleFloat = !showXyzControls && Mathf.Approximately(x, y) && Mathf.Approximately(x, z);\n\t}\n\n\t// Draw the appropriate UI controls\n\tEditorGUI.BeginChangeCheck();\n\tif (showXyzControls) {\n\t\tEditorGUILayout.PropertyField(sp);\n\t} else if (showSingleFloat) {\n\t\tfloat value = sp.FindPropertyRelative(\"x\").floatValue;\n\t\tvalue = EditorGUILayout.FloatField(sp.displayName, value);\n\t\tsp.FindPropertyRelative(\"x\").floatValue = value;\n\t\tsp.FindPropertyRelative(\"y\").floatValue = value;\n\t\tsp.FindPropertyRelative(\"z\").floatValue = value;\n\t} else {\n\t\tfloat value = sp.FindPropertyRelative(\"x\").floatValue;\n\t\tvalue = EditorGUILayout.FloatField(sp.displayName, value);\n\t\tsp.FindPropertyRelative(\"x\").floatValue = value;\n\t}\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tchanged = true;\n\t}\n\n\t// Draw the toggle button to switch between single float and Vector3 display modes\n\tEditorGUI.BeginChangeCheck();\n\tshowXyz = EditorGUILayout.ToggleLeft(\"Show XYZ Controls\", showXyz);\n\tif (EditorGUI.EndChangeCheck()) {\n\t\tchanged = true;\n\t}\n\n\treturn changed;\n}", "CodeBleu_score": 44.02609665765442}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t//Get the x, y, and z values from the property.\n\tfloat x = sp.vector3Value.x;\n\tfloat y = sp.vector3Value.y;\n\tfloat z = sp.vector3Value.z;\n\t\n\t//Check if the values are approximately equal.\n\tbool valuesApproxEqual = Mathf.Approximately(x, y) && Mathf.Approximately(x, z);\n\t\n\t//Check if the values are different.\n\tbool valuesDifferent = !Mathf.Approximately(x, y) || !Mathf.Approximately(x, z);\n\t\n\t//If the values are different, show the toggle button.\n\tif (valuesDifferent) {\n\t\t//Begin a horizontal group.\n\t\tEditorGUILayout.BeginHorizontal();\n\t\t\n\t\t//Draw the toggle button.\n\t\tshowXyz = EditorGUILayout.Toggle(showXyz, GUILayout.Width(14f));\n\t\t\n\t\t//End the horizontal group.\n\t\tEditorGUILayout.EndHorizontal();\n\t}\n\t\n\t//If the values are different, draw the property as a Vector3.\n\tif (valuesDifferent && showXyz) {\n\t\t//Draw the property as a Vector3.\n\t\tsp.vector3Value = EditorGUILayout.Vector3Field(\"\", sp.vector3Value);\n\t}\n\t//If the values are different, draw the property as a float.\n\telse if (valuesDifferent && !showXyz) {\n\t\t//Draw the property as a float.\n\t\tx = EditorGUILayout.FloatField(\"\", x);\n\t\t\n\t\t//Set the property to the new value.\n\t\tsp.vector3Value = new Vector3(x, x, x);\n\t}\n\t//If the values are approximately equal, draw the property as a float.\n\telse if (valuesApproxEqual) {\n\t\t//Draw the property as a float.\n\t\tx = EditorGUILayout.FloatField(\"\", x);\n\t\t\n\t\t//Set the property to the new value.\n\t\tsp.vector3Value = new Vector3(x, x,", "CodeBleu_score": 34.05664655394229}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t//Check if x, y, and z are equal or not\n    bool xyzEqual = sp.FindPropertyRelative(\"x\").floatValue == sp.FindPropertyRelative(\"y\").floatValue && sp.FindPropertyRelative(\"x\").floatValue == sp.FindPropertyRelative(\"z\").floatValue;\n\n    //Check if x, y, and z have multiple values\n    bool xyzMultiple = sp.FindPropertyRelative(\"x\").hasMultipleDifferentValues || sp.FindPropertyRelative(\"y\").hasMultipleDifferentValues || sp.FindPropertyRelative(\"z\").hasMultipleDifferentValues;\n\n    //Draw the property field\n    if (xyzEqual && !xyzMultiple) {\n        //If x, y, and z are equal and don't have multiple values, draw a single float field\n        EditorGUILayout.PropertyField(sp.FindPropertyRelative(\"x\"), GUIContent.none);\n    } else {\n        //If x, y, and z are not equal or have multiple values, draw a Vector3 field\n        EditorGUILayout.PropertyField(sp, GUIContent.none);\n    }\n\n    //Draw a toggle button to switch between single float and Vector3 display modes\n    showXyz = EditorGUILayout.ToggleLeft(\"Show XYZ\", showXyz);\n\n    return showXyz;\n}", "CodeBleu_score": 25.71490621258895}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\tMaterial customMat = null;\n\tif (customMaterials == null) {\n\t\tcustomMaterials = new List<CustomMaterial>();\n\t}\n\tforeach (CustomMaterial mat in customMaterials) {\n\t\tif (mat.baseMat == baseMat && mat.texture == texture && mat.id == id && mat.props == props) {\n\t\t\tmat.count++;\n\t\t\tcustomMat = mat.customMat;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (customMat == null) {\n\t\tcustomMat = new Material(baseMat);\n\t\tcustomMat.mainTexture = texture;\n\t\tcustomMat.SetInt(\"_ID\", id);\n\t\tcustomMat.SetInt(\"_Props\", props);\n\t\tcustomMaterials.Add(new CustomMaterial(customMat, baseMat, texture, id, props));\n\t}\n\treturn customMat;\n}", "CodeBleu_score": 28.1524375193543}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\tif (baseMat == null) {\n        Debug.LogError(\"Base material is null!\");\n        return null;\n    }\n    if (texture == null) {\n        Debug.LogError(\"Texture is null!\");\n        return null;\n    }\n    Material customMat = null;\n    //Debug.Log(\"baseMat.name: \" + baseMat.name);\n    //Debug.Log(\"texture.name: \" + texture.name);\n    //Debug.Log(\"id: \" + id);\n    //Debug.Log(\"props: \" + props);\n    //Debug.Log(\"customMaterials.Count: \" + customMaterials.Count);\n    //Debug.Log(\"customMaterials: \" + customMaterials);\n    //Debug.Log(\"customMaterials[0]: \" + customMaterials[0]);\n    for (int i = 0; i < customMaterials.Count; i++) {\n        //Debug.Log(\"customMaterials[i].baseMat.name: \" + customMaterials[i].baseMat.name);\n        //Debug.Log(\"customMaterials[i].texture.name: \" + customMaterials[i].texture.name);\n        //Debug.Log(\"customMaterials[i].id: \" + customMaterials[i].id);\n        //Debug.Log(\"customMaterials[i].props: \" + customMaterials[i].props);\n        if (customMaterials[i].baseMat.name == baseMat.name && customMaterials[i].texture.name == texture.name && customMaterials[i].id == id && customMaterials[i].props == props) {\n            customMat = customMaterials[i].mat;\n            customMaterials[i].count++;\n            //Debug.Log(\"Found a match!\");\n            break;\n        }\n    }\n    if (customMat == null) {\n        //Debug.Log(\"No match found!\");\n        customMat = new Material(baseMat);\n        customMat.SetTexture(\"_MainTex\", texture);\n        customMat.SetInt(\"_Id\", id);\n        customMat.SetInt(\"_Props\", props);\n        customMaterials.Add(new CustomMaterial(customMat, baseMat, texture", "CodeBleu_score": 32.683740069613684}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t//Debug.Log(\"Adding Custom Material\");\n    //Debug.Log(\"Base Material: \" + baseMat.name);\n    //Debug.Log(\"Texture: \" + texture.name);\n    //Debug.Log(\"ID: \" + id);\n    //Debug.Log(\"Props: \" + props);\n    //Debug.Log(\"\");\n\n    //Check if a matching custom material already exists\n    foreach (CustomMaterial cm in customMaterials) {\n        if (cm.baseMat == baseMat && cm.texture == texture && cm.id == id && cm.props == props) {\n            //Debug.Log(\"Matching custom material found\");\n            //Debug.Log(\"Count: \" + cm.count);\n            //Debug.Log(\"\");\n            cm.count++;\n            return cm.material;\n        }\n    }\n\n    //Debug.Log(\"No matching custom material found\");\n    //Debug.Log(\"Creating new custom material\");\n\n    //Create a new custom material\n    CustomMaterial newCustomMaterial = new CustomMaterial();\n    newCustomMaterial.baseMat = baseMat;\n    newCustomMaterial.texture = texture;\n    newCustomMaterial.id = id;\n    newCustomMaterial.props = props;\n    newCustomMaterial.count = 1;\n    newCustomMaterial.material = new Material(baseMat);\n    newCustomMaterial.material.SetTexture(\"_MainTex\", texture);\n    newCustomMaterial.material.SetInt(\"_ID\", id);\n    newCustomMaterial.material.SetInt(\"_Props\", props);\n    customMaterials.Add(newCustomMaterial);\n\n    //Debug.Log(\"New custom material added\");\n    //Debug.Log(\"Count: \" + newCustomMaterial.count);\n    //Debug.Log(\"\");\n\n    return newCustomMaterial.material;\n}", "CodeBleu_score": 29.90942431872561}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\tif (customMat == null) {\n\t\tDebug.LogError(\"Remove: material is null\");\n\t\treturn;\n\t}\n\tif (!customMat.name.StartsWith(\"CustomMaterial\")) {\n\t\tDebug.LogError(\"Remove: material is not a custom material\");\n\t\treturn;\n\t}\n\tint index = -1;\n\tfor (int i = 0; i < entries.Count; i++) {\n\t\tif (entries[i].material == customMat) {\n\t\t\tindex = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (index == -1) {\n\t\tDebug.LogError(\"Remove: material is not in the list of entries\");\n\t\treturn;\n\t}\n\tentries[index].count--;\n\tif (entries[index].count <= 0) {\n\t\tDestroy(customMat);\n\t\tentries[index].material = null;\n\t\tentries[index].data = null;\n\t\tentries.RemoveAt(index);\n\t}\n}", "CodeBleu_score": 33.191540454348846}, {"code": "public static void Remove(Material customMat){\n\tif (customMat == null) {\n\t\tDebug.LogError(\"[CustomMaterials] Remove: Attempted to remove a null material.\");\n\t\treturn;\n\t}\n\tfor (int i = 0; i < entries.Count; i++) {\n\t\tif (entries[i].mat == customMat) {\n\t\t\tentries[i].count--;\n\t\t\tif (entries[i].count <= 0) {\n\t\t\t\tif (entries[i].mat != null) {\n\t\t\t\t\tDestroyImmediate(entries[i].mat);\n\t\t\t\t}\n\t\t\t\tentries.RemoveAt(i);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t}\n\tDebug.LogError(\"[CustomMaterials] Remove: Attempted to remove a material that was not in the list.\");\n}", "CodeBleu_score": 33.46730655388449}, {"code": "public static void Remove(Material customMat){\n\tif (customMat == null) {\n        Debug.LogError(\"Custom material is null.\");\n        return;\n    }\n\n    for (int i = 0; i < entries.Count; i++) {\n        if (entries[i].customMat == customMat) {\n            entries[i].count--;\n            if (entries[i].count <= 0) {\n                entries[i].customMat.Destroy();\n                entries[i].customMat = null;\n                entries[i].data = null;\n                entries.RemoveAt(i);\n            }\n            return;\n        }\n    }\n}", "CodeBleu_score": 37.4066352452299}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\tList<ParticleSystem> systems = new List<ParticleSystem>();\n\n    // Collect all child particle systems\n    foreach (ParticleSystem system in root.GetComponentsInChildren<ParticleSystem>()) {\n        // If the system is not associated with this UIParticle instance, remove it from the list\n        if (system.GetComponent<UIParticle>() != this) {\n            systems.Remove(system);\n        }\n        else {\n            // Otherwise, add it to the list\n            systems.Add(system);\n        }\n    }\n\n    // Adjust the texture sheet animation settings for each system\n    foreach (ParticleSystem system in systems) {\n        // If the system has a SpriteRenderer, use its sprite\n        if (system.GetComponent<SpriteRenderer>() != null) {\n            SpriteRenderer renderer = system.GetComponent<SpriteRenderer>();\n            if (renderer.sprite != null) {\n                // If the sprite is associated with a texture sheet, use the texture sheet's sprite settings\n                if (renderer.sprite.associatedTextureSheet != null) {\n                    SpriteSheet sheet = renderer.sprite.associatedTextureSheet;\n                    system.textureSheetAnimation.enabled = true;\n                    system.textureSheetAnimation.mode = ParticleSystemAnimationMode.Sprites;\n                    system.textureSheetAnimation.flipBook.enabled = true;\n                    system.textureSheetAnimation.flipBook.mode = ParticleSystemAnimationMode.Sprites;\n                    system.textureSheetAnimation.flipBook.spriteCount = sheet.sprites.Length;\n                    system.textureSheetAnimation.flipBook.rowCount = sheet.rows;\n                    system.textureSheetAnimation.flipBook.animation = sheet.animation;\n                    system.textureSheetAnimation.flipBook.randomRow = sheet.randomRow;\n                    system.textureSheetAnimation.flipBook.frameOverTime = sheet.frameOverTime;\n                    system.textureSheetAnimation.flipBook.frameOverTimeMultiplier = sheet.frameOverTimeMultiplier;\n                }\n                // Otherwise, use the sprite's settings\n                else {", "CodeBleu_score": 28.046645114022027}, {"code": "private void RefreshParticles(GameObject root){\n\t// Get all particle systems in the hierarchy\n    ParticleSystem[] particleSystems = root.GetComponentsInChildren<ParticleSystem>();\n\n    // Remove any particle systems that are not associated with this UIParticle instance\n    particleSystems = particleSystems.Where(x => x.GetComponent<UIParticle>() != null).ToArray();\n\n    // Update the texture sheet animation settings on the particle systems\n    foreach (ParticleSystem particleSystem in particleSystems) {\n        var textureSheetAnimation = particleSystem.textureSheetAnimation;\n        textureSheetAnimation.mode = ParticleSystemAnimationMode.Sprites;\n        textureSheetAnimation.flipBook = true;\n        textureSheetAnimation.randomRow = false;\n        textureSheetAnimation.rowIndex = 0;\n    }\n\n    // Call RefreshParticles on the updated list of particle systems\n    ParticleSystem.RefreshParticles(particleSystems);\n}", "CodeBleu_score": 32.142327923220506}, {"code": "private void RefreshParticles(GameObject root){\n\t// Get all particle systems\n    ParticleSystem[] particleSystems = root.GetComponentsInChildren<ParticleSystem>();\n\n    // Remove particle systems that are not associated with this UIParticle instance\n    particleSystems = particleSystems.Where(p => p.GetComponent<UIParticle>() == this).ToArray();\n\n    // Adjust texture sheet animation settings if necessary\n    foreach (ParticleSystem particleSystem in particleSystems) {\n        if (particleSystem.textureSheetAnimation.enabled) {\n            // Adjust texture sheet animation settings\n            particleSystem.textureSheetAnimation.mode = ParticleSystemAnimationMode.Sprites;\n            particleSystem.textureSheetAnimation.flipBook = true;\n            particleSystem.textureSheetAnimation.randomRow = false;\n            particleSystem.textureSheetAnimation.rowIndex = 0;\n        }\n    }\n\n    // Call RefreshParticles on the updated list of particle systems\n    ParticleSystem.RefreshParticles(particleSystems);\n}", "CodeBleu_score": 30.551760703667142}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t// This is the current assembly.\n    Assembly currentAssembly = Assembly.GetExecutingAssembly();\n\n    // This is the list of types that implement the IColorSwapManager interface.\n    IEnumerable<Type> types = currentAssembly.GetTypes().Where(t => t.GetInterfaces().Contains(typeof(IColorSwapManager)));\n\n    // This is the list of types that implement the IColorSwapManager interface, and are not marked as abstract.\n    IEnumerable<Type> concreteTypes = types.Where(t => !t.IsAbstract);\n\n    // This is the list of types that implement the IColorSwapManager interface, and are not marked as abstract, and are not generic.\n    IEnumerable<Type> concreteNonGenericTypes = concreteTypes.Where(t => !t.IsGenericType);\n\n    // This is the list of types that implement the IColorSwapManager interface, and are not marked as abstract, and are not generic, and have a parameterless constructor.\n    IEnumerable<Type> concreteNonGenericTypesWithParameterlessConstructor = concreteNonGenericTypes.Where(t => t.GetConstructor(Type.EmptyTypes) != null);\n\n    // This is the list of types that implement the IColorSwapManager interface, and are not marked as abstract, and are not generic, and have a parameterless constructor, and are not marked as obsolete.\n    IEnumerable<Type> concreteNonGenericTypesWithParameterlessConstructorAndNotObsolete = concreteNonGenericTypesWithParameterlessConstructor.Where(t => !Attribute.IsDefined(t, typeof(ObsoleteAttribute)));\n\n    // This is the list of types that implement the IColorSwapManager interface, and are not marked as abstract, and are not generic, and have a parameterless constructor, and are not marked as obsolete, and are not the ColorSwapManagerBase type.\n    IEnumerable<Type> concreteNonGenericTypesWithParameterlessConstructorAndNotObsoleteAndNotBase = concreteNonGenericTypesWithParameterlessConstructorAndNotObsolete.Where(t => t != typeof(ColorSwapManagerBase));\n\n    // This is the list of types that implement the IColorSwapManager interface, and are not marked as abstract, and are not generic, and have a parameterless constructor, and are not marked as obsolete, and", "CodeBleu_score": 40.400571267879606}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tvar colorSwapManagerTypes = Assembly.GetExecutingAssembly().GetTypes().Where(t => typeof(IColorSwapManager).IsAssignableFrom(t) && !t.IsInterface && !t.IsAbstract);\n\n    foreach (var colorSwapManagerType in colorSwapManagerTypes) {\n        containerBuilder.RegisterType(colorSwapManagerType).As<IColorSwapManager>().SingleInstance();\n    }\n}", "CodeBleu_score": 38.8104336923428}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tvar types = AppDomain.CurrentDomain.GetAssemblies()\n        .SelectMany(s => s.GetTypes())\n        .Where(p => typeof(IColorSwapManager).IsAssignableFrom(p) && !p.IsInterface && !p.IsAbstract);\n\n    foreach (var type in types) {\n        containerBuilder.RegisterType(type).As<IColorSwapManager>().SingleInstance();\n    }\n}", "CodeBleu_score": 40.49790777581819}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t// Set the IP address and port.\n    this.ipAddress = ipAddress;\n    this.port = port;\n\n    // Wait for the serializer to be initialized.\n    await this.serializer.Initialization;\n\n    // Initiate a reservation negotiation using the current state.\n    await this.NegotiateReservationAsync();\n}", "CodeBleu_score": 37.359173106522086}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t// Set the IP address and port.\n    this.ipAddress = ipAddress;\n    this.port = port;\n\n    // Wait for the serializer to initialize.\n    await this.serializer.InitializeAsync();\n\n    // Initiate the reservation negotiation.\n    await this.NegotiateReservationAsync(this.currentState);\n}", "CodeBleu_score": 36.69213433957344}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\tif (this.serializer == null) {\n         this.serializer = new Serializer(this.connection);\n         await this.serializer.InitializeAsync();\n     }\n\n     this.connection.IPAddress = ipAddress;\n     this.connection.Port = port;\n     this.connection.Connect();\n\n     this.state.InitiateReservationNegotiation(this.connection);\n }", "CodeBleu_score": 31.751115030553244}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tif (sessionConnectionState == null) {\n        throw new ArgumentNullException(\"sessionConnectionState\");\n    }\n\n    if (sessionConnectionState == this.sessionConnectionState) {\n        return;\n    }\n\n    this.sessionConnectionState = sessionConnectionState;\n\n    if (this.ConnectionStateChanged != null) {\n        this.ConnectionStateChanged(this, new EventArgs());\n    }\n\n    if (this.sessionConnectionState == MultiplayerSessionConnectionState.SessionReserved) {\n        this.LogPlayerName();\n    }\n}", "CodeBleu_score": 32.16834413547092}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tif (sessionConnectionState == null) {\n        throw new ArgumentNullException(\"sessionConnectionState\");\n    }\n\n    if (sessionConnectionState == this.sessionConnectionState) {\n        return;\n    }\n\n    this.sessionConnectionState = sessionConnectionState;\n\n    switch (sessionConnectionState) {\n        case IMultiplayerSessionConnectionState.Disconnected:\n            Debug.Log(\"MultiplayerSession: Disconnected\");\n            break;\n        case IMultiplayerSessionConnectionState.Connecting:\n            Debug.Log(\"MultiplayerSession: Connecting\");\n            break;\n        case IMultiplayerSessionConnectionState.Connected:\n            Debug.Log(\"MultiplayerSession: Connected\");\n            break;\n        case IMultiplayerSessionConnectionState.SessionReserved:\n            Debug.Log(\"MultiplayerSession: SessionReserved\");\n            break;\n        case IMultiplayerSessionConnectionState.SessionReady:\n            Debug.Log(\"MultiplayerSession: SessionReady\");\n            break;\n        default:\n            Debug.Log(\"MultiplayerSession: Unknown state\");\n            break;\n    }\n\n    if (this.ConnectionStateChanged != null) {\n        this.ConnectionStateChanged(this, new EventArgs());\n    }\n}", "CodeBleu_score": 26.651933289598894}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tif (sessionConnectionState == null) {\n        throw new ArgumentNullException(\"sessionConnectionState\");\n    }\n\n    if (sessionConnectionState == ConnectionState) {\n        return;\n    }\n\n    if (sessionConnectionState == MultiplayerSessionConnectionState.SessionReserved) {\n        // Update the player name in the log.\n        Log.LogPlayerName(PlayerName);\n    }\n\n    ConnectionState = sessionConnectionState;\n    Log.LogConnectionStateChanged(sessionConnectionState);\n    ConnectionStateChanged?.Invoke(this, sessionConnectionState);\n}", "CodeBleu_score": 39.490063068431716}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\ttry {\n        await client.StartAsync();\n        await client.ConnectAsync(ipAddress, serverPort, \"SomeConnectionKey\");\n        client.PeerConnectedEvent += OnPeerConnected;\n        client.PeerDisconnectedEvent += OnPeerDisconnected;\n        client.NetworkReceiveEvent += OnNetworkReceive;\n        client.NetworkErrorEvent += OnNetworkError;\n        client.NetworkLatencyUpdateEvent += OnNetworkLatencyUpdate;\n        client.ConnectionRequestEvent += OnConnectionRequest;\n        client.PeerDiscoveredEvent += OnPeerDiscovered;\n        client.DiscoveryResponseEvent += OnDiscoveryResponse;\n        client.DiscoveryRequestEvent += OnDiscoveryRequest;\n\n        // Wait for connection event for up to 2000 milliseconds.\n        if (connectionEvent.WaitOne(2000)) {\n            // Reset the event.\n            connectionEvent.Reset();\n        }\n    }\n    catch (Exception ex) {\n        Console.WriteLine($\"The client failed to start with the following exception: {ex}\");\n    }\n}", "CodeBleu_score": 40.29095044756515}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t// Initialize the client\n    client = new LiteNetLibClient();\n    client.Start(ipAddress, serverPort);\n\n    // Wait for the client to connect to the server\n    await Task.Run(() => client.ConnectEvent.WaitOne(2000));\n    client.ConnectEvent.Reset();\n\n}", "CodeBleu_score": 42.68431904982827}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t// If the client is already running, we don't want to start it again.\n    if (client.IsRunning) {\n        return;\n    }\n\n    // Initialize the client\n    client.Initialize();\n\n    // Start the client\n    client.Start();\n\n    // Attempt to connect to the server\n    client.Connect(ipAddress, serverPort);\n\n    // Wait for a connection event\n    await client.WaitForConnectionAsync(2000);\n\n    // Reset the connection event\n    client.ResetConnectionEvent();\n}", "CodeBleu_score": 43.49699871686262}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\tSubRoot cyclops = CyclopsManager.GetCyclops(id);\n    if (cyclops != null) {\n        SubFire fire = cyclops.subFire;\n        if (fire != null) {\n            SubFireButton fireSuppressionButton = fire.GetComponentInChildren<SubFireButton>();\n            if (fireSuppressionButton != null) {\n                StartCoroutine(StartFireSuppressionSystem(fire));\n                fireSuppressionButton.StartCooldown();\n            }\n        }\n    }\n}", "CodeBleu_score": 31.969914731617948}, {"code": "public void StartFireSuppression(NitroxId id){\n\tCyclops cyclops = CyclopsManager.GetCyclops(id);\n    if(cyclops == null) {\n        return;\n    }\n    SubFire fire = cyclops.GetComponentInChildren<SubFire>();\n    if(fire == null) {\n        return;\n    }\n    fire.subRoot.fireSuppressionState = false;\n    fire.subRoot.BroadcastMessage(\"NewAlarmState\", null, SendMessageOptions.DontRequireReceiver);\n    fire.subRoot.voiceNotificationManager.PlayVoiceNotification(fire.subRoot.fireSuppressionNotification, false, true);\n    fire.StartCoroutine(StartFireSuppressionSystem(fire));\n    fire.subRoot.fireSuppressionButton.BeginCooldown();\n}", "CodeBleu_score": 40.39876930969532}, {"code": "public void StartFireSuppression(NitroxId id){\n\tCyclops cyclops = CyclopsManager.GetCyclops(id);\n    if (cyclops == null) return;\n    SubFire fire = cyclops.subRoot.fire;\n    if (fire == null) return;\n    if (fire.fireSuppressionActive) return;\n    if (fire.subRoot.fireSuppressionState) return;\n    if (fire.subRoot.fireSuppressionButton == null) return;\n    fire.subRoot.fireSuppressionButton.StartCooldown();\n    fire.StartCoroutine(StartFireSuppressionSystem(fire));\n}", "CodeBleu_score": 49.82746545666053}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\tif (subRoot.GetInstanceID() != this.subRoot.GetInstanceID())\n        return;\n\n    var damagePointId = GetDamagePointId(damagePoint);\n\n    if (damagePointId == DamagePointId.None)\n        return;\n\n    var packet = new CyclopsDamagePointRepairPacket {\n        SubRootId = subRoot.GetInstanceID(),\n        DamagePointId = damagePointId,\n        RepairAmount = repairAmount\n    };\n\n    this.packetSender.SendPacket(packet);\n}", "CodeBleu_score": 34.6665768597299}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t// Verify the SubRoot ID\n    if (subRoot.GetInstanceID() != this.subRoot.GetInstanceID()) {\n        return;\n    }\n\n    // Identify the specific damage point\n    string damagePointName = damagePoint.name;\n    string damagePointID = damagePoint.GetInstanceID().ToString();\n\n    // Create a repair packet with the relevant details\n    RepairPacket repairPacket = new RepairPacket(damagePointID, damagePointName, repairAmount);\n\n    // Send this packet using a packet sender\n    this.packetSender.Send(repairPacket);\n}", "CodeBleu_score": 33.476514079915425}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\tif (subRoot.GetInstanceID() != this.subRoot.GetInstanceID()) return;\n\n    var damagePointID = damagePoint.GetInstanceID();\n\n    var repairPacket = new CyclopsDamagePointRepairPacket {\n        SubRootID = subRoot.GetInstanceID(),\n        DamagePointID = damagePointID,\n        RepairAmount = repairAmount\n    };\n\n    this.packetSender.SendToServer(repairPacket);\n}", "CodeBleu_score": 32.60648964552957}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId))\n            {\n                return;\n            }\n\n            if (subRoot.health <= 0)\n            {\n                return;\n            }\n\n            CyclopsDamageInfoData? damageInfoData = null;\n\n            if (info.HasValue)\n            {\n                damageInfoData = new CyclopsDamageInfoData(info.Value.damage, info.Value.health, info.Value.damageType);\n            }\n\n            CyclopsDamageData[] damageData = GetActiveDamagePoints(subRoot).Select(i => new CyclopsDamageData(i)).ToArray();\n            CyclopsFireData[] fireData = GetActiveRoomFires(subRoot.subFire).ToArray();\n\n            CyclopsDamagePacket packet = new CyclopsDamagePacket(subRootId, damageInfoData, damageData, fireData);\n\n            NitroxPacketManager.SendToAll(packet);\n        }", "CodeBleu_score": 48.790586074047425}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId)) {\n        return;\n    }\n\n    if (subRoot.healthManager.currentHealth <= 0) {\n        return;\n    }\n\n    CyclopsDamageInfoData damageInfo = null;\n    if (info.HasValue) {\n        damageInfo = new CyclopsDamageInfoData(info.Value.damageType, info.Value.damage);\n    }\n\n    CyclopsDamageData damageData = new CyclopsDamageData(subRootId, damageInfo, GetActiveDamagePoints(subRoot), GetActiveRoomFires(subRoot.subFire));\n\n    CyclopsDamage packet = new CyclopsDamage(damageData);\n    CyclopsBroadcast.SendToAll(packet);\n}", "CodeBleu_score": 40.667676401416614}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subRootId))\n    {\n        return;\n    }\n\n    CyclopsDamageInfoData damageInfo = info.HasValue ? new CyclopsDamageInfoData(info.Value) : null;\n\n    CyclopsDamageData[] damagePoints = GetActiveDamagePoints(subRoot).Select(i => new CyclopsDamageData(subRoot.damageManager.damagePoints[i])).ToArray();\n\n    CyclopsFireData[] fireData = GetActiveRoomFires(subRoot.subFire).ToArray();\n\n    CyclopsDamage packet = new CyclopsDamage(subRootId, damageInfo, damagePoints, fireData);\n\n    SendPacket(packet);\n}", "CodeBleu_score": 27.753511421674826}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        GameObject gameObject = GetGameObject(entity.Id);\n        if (gameObject != null) {\n            GameObject.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 56.639471676765886}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        if (entity.Id == null) {\n            continue;\n        }\n        RemoveEntityHierarchy(entity);\n        GameObject go = GetGameObject(entity.Id);\n        if (go != null) {\n            UnityEngine.Object.Destroy(go);\n        }\n    }\n}", "CodeBleu_score": 56.6945372456159}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n\n        GameObject gameObject;\n        if (entityGameObjectMap.TryGetValue(entity.Id, out gameObject)) {\n            Object.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 63.290271364004816}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntities.ContainsKey(entity.ParentID)) {\n        pendingParentEntities.Add(entity.ParentID, new List<Entity>());\n    }\n    pendingParentEntities[entity.ParentID].Add(entity);\n}", "CodeBleu_score": 32.85215434467082}, {"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntities.ContainsKey(entity.ParentID)) {\n        pendingParentEntities[entity.ParentID] = new List<Entity>();\n    }\n\n    pendingParentEntities[entity.ParentID].Add(entity);\n}", "CodeBleu_score": 38.108137768180434}, {"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntities.ContainsKey(entity.ParentId)) {\n        pendingParentEntities.Add(entity.ParentId, new List<Entity>());\n    }\n    pendingParentEntities[entity.ParentId].Add(entity);\n}", "CodeBleu_score": 33.2932454945344}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tExosuitArmAction armAction;\n    if (cooldown == clawArm.GetPickupCooldown()) {\n        armAction = ExosuitArmAction.START_USE_TOOL;\n    } else if (cooldown == clawArm.GetPunchCooldown()) {\n        armAction = ExosuitArmAction.ALT_HIT;\n    } else {\n        Debug.LogError(\"Unknown claw arm action: \" + cooldown);\n        return;\n    }\n\n    BroadcastArmAction(clawArm.GetTechType(), clawArm, armAction, null, null);\n}", "CodeBleu_score": 62.88769905337315}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tExosuitArmAction armAction = ExosuitArmAction.START_USE_TOOL;\n    if (Math.Abs(cooldown - clawArm.pickupCooldown) < 0.01f) {\n        armAction = ExosuitArmAction.START_USE_TOOL;\n    } else if (Math.Abs(cooldown - clawArm.punchCooldown) < 0.01f) {\n        armAction = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error(\"Unknown claw action\");\n    }\n\n    BroadcastArmAction(clawArm.exosuit.GetTechType(), clawArm, armAction, null, null);\n}", "CodeBleu_score": 48.81177541907004}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\tExosuitArmAction armAction;\n    if (clawArm.GetPickupCooldown() == cooldown) {\n        armAction = ExosuitArmAction.START_USE_TOOL;\n    } else if (clawArm.GetPunchCooldown() == cooldown) {\n        armAction = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error($\"ExosuitClawArm action not found for cooldown {cooldown}\");\n        return;\n    }\n    BroadcastArmAction(clawArm.GetTechType(), clawArm, armAction, null, null);\n}", "CodeBleu_score": 55.42572944458022}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tif (gameObject == null) {\n        LogError(\"GameObject is null\");\n        return;\n    }\n    if (parent == null) {\n        LogError(\"Parent is null\");\n        return;\n    }\n\n    if (techType == TechType.None) {\n        LogError(\"TechType is None\");\n        return;\n    }\n\n    var parentId = parent.GetComponent<PrefabIdentifier>().Id;\n    var gameObjectId = gameObject.GetComponent<PrefabIdentifier>().Id;\n\n    var metadata = CraftData.GetTechData(techType);\n    if (metadata == null) {\n        LogError(\"Metadata is null\");\n        return;\n    }\n\n    var installedBatteryEntity = new InstalledBatteryEntity {\n        parentId = parentId,\n        gameObjectId = gameObjectId,\n        techType = techType,\n        capacity = metadata.battery.capacity,\n        charge = metadata.battery.charge\n    };\n\n    MessageSender.SendToServer(MessageHelper.CreateEntitySpawnedByClient(installedBatteryEntity));\n}", "CodeBleu_score": 36.69756101530195}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tif (gameObject == null) {\n        Log.Error(\"GameObject is null\");\n        return;\n    }\n\n    if (parent == null) {\n        Log.Error(\"Parent is null\");\n        return;\n    }\n\n    if (techType == TechType.None) {\n        Log.Error(\"TechType is None\");\n        return;\n    }\n\n    var parentID = parent.GetComponent<PrefabIdentifier>().Id;\n    var gameObjectID = gameObject.GetComponent<PrefabIdentifier>().Id;\n\n    if (parentID == null) {\n        Log.Error(\"ParentID is null\");\n        return;\n    }\n\n    if (gameObjectID == null) {\n        Log.Error(\"GameObjectID is null\");\n        return;\n    }\n\n    var entity = CraftData.GetEntityTemplate(gameObjectID);\n\n    if (entity == null) {\n        Log.Error(\"Entity is null\");\n        return;\n    }\n\n    var installedBattery = new InstalledBatteryEntity {\n        parent = parentID,\n        prefabID = gameObjectID,\n        techType = techType,\n        model = entity.model,\n        name = entity.name,\n        description = entity.description\n    };\n\n    var message = new EntitySpawnedByClient {\n        entity = installedBattery\n    };\n\n    MessageSender.SendToServer(message);\n}", "CodeBleu_score": 39.82174697523691}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tif (!gameObject || !parent) {\n        return;\n    }\n\n    ulong parentId = CraftData.GetEntityID(parent);\n    ulong entityId = CraftData.GetEntityID(gameObject);\n\n    if (entityId == 0 || parentId == 0) {\n        return;\n    }\n\n    if (entityId == parentId) {\n        return;\n    }\n\n    EntityMetadata entityMetadata = CraftData.GetEntityMetadata(entityId);\n\n    if (!entityMetadata) {\n        return;\n    }\n\n    InstalledBatteryEntity battery = new InstalledBatteryEntity(entityId, parentId, entityMetadata, techType);\n    MessageSender.Send(battery);\n}", "CodeBleu_score": 52.601012765136026}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\tif (gameObject == null)\n        return;\n\n    if (gameObject.TryGetComponent(out RemotelyControlled remotelyControlled))\n        remotelyControlled.RemoveControl();\n\n    if (!gameObject.TryGetComponent(out NitroxEntity nitroxEntity))\n    {\n        NitroxId itemId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n        nitroxEntity = gameObject.AddComponent<NitroxEntity>();\n        nitroxEntity.Id = itemId;\n    }\n\n    if (gameObject.TryGetComponent(out Pickupable pickupable))\n        pickupable.PickedUp();\n\n    if (!gameObject.TryGetComponent(out NitroxEntity parentNitroxEntity))\n    {\n        NitroxId parentId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n        parentNitroxEntity = gameObject.AddComponent<NitroxEntity>();\n        parentNitroxEntity.Id = parentId;\n    }\n\n    if (!gameObject.TryGetComponent(out NitroxEntity playerNitroxEntity))\n    {\n        NitroxId playerId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n        playerNitroxEntity = gameObject.AddComponent<NitroxEntity>();\n        playerNitroxEntity.Id = playerId;\n    }\n\n    if (!gameObject.TryGetComponent(out NitroxEntity pickupNitroxEntity))\n    {\n        NitroxId pickupId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n        pickupNitroxEntity = gameObject.AddComponent<NitroxEntity>();\n        pickupNitroxEntity.Id = pickupId;\n    }\n\n    if (!gameObject.TryGetComponent(out NitroxEntity vehicleNitroxEntity))\n    {\n        Nit", "CodeBleu_score": 39.33237693652357}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t// If we're already picking up an object, ignore this event.\n    if (PickingUpObject != null) return;\n\n    // Set the object we're picking up.\n    PickingUpObject = gameObject;\n\n    // If the object has a RemotelyControlled component, remove it.\n    RemoveAnyRemoteControl(gameObject);\n\n    // Check if the object has an ID. If not, generate a new one.\n    if (!gameObject.TryGetNitroxId(out NitroxId itemId)) {\n        itemId = NitroxEntity.GenerateNew();\n        gameObject.AddNitroxId(itemId);\n    }\n\n    // Stop broadcasting the entity's position.\n    PositionBroadcaster.StopBroadcasting(itemId);\n\n    // Convert the object to an inventory item.\n    InventoryItemEntity inventoryItemEntity = ConvertToInventoryItemEntity(gameObject, EntityMetadataManager);\n\n    // Mark the item as spawned.\n    SpawnedObjects.Add(itemId);\n\n    // Log the pickup event.\n    Log.Info($\"[Items] Player picked up item {itemId} ({inventoryItemEntity.ClassId})\");\n\n    // Create a PickupItem packet.\n    var packet = new PickupItem(itemId, inventoryItemEntity);\n\n    // Send the packet.\n    SendPacket(packet);\n\n    // Reset the object we're picking up.\n    PickingUpObject = null;\n}", "CodeBleu_score": 55.387376765202966}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\tif (gameObject == null) {\n        return;\n    }\n\n    PickingUpObject = gameObject;\n    RemoveAnyRemoteControl(gameObject);\n\n    // Newly created objects are always placed into the player's inventory.\n    if (!Player.main.TryGetNitroxId(out NitroxId ownerId)) {\n        throw new InvalidOperationException(\"[Items] Player has no id! Couldn't parent InventoryItem.\");\n    }\n\n    NitroxId itemId = NitroxEntity.GetIdOrGenerateNew(gameObject); // id may not exist, create if missing\n    string classId = gameObject.RequireComponent<PrefabIdentifier>().ClassId;\n    Optional<EntityMetadata> metadata = EntityMetadataManager.Extract(gameObject);\n    List<Entity> children = GetPrefabChildren(gameObject, itemId, EntityMetadataManager).ToList();\n\n    InventoryItemEntity inventoryItemEntity = new(itemId, classId, techType.ToDto(), metadata.OrNull(), ownerId, children);\n    BatteryChildEntityHelper.TryPopulateInstalledBattery(gameObject, inventoryItemEntity.ChildEntities, itemId);\n\n    StopPositionBroadcasting(gameObject);\n    ConvertToInventoryItemEntity(gameObject, EntityMetadataManager);\n    MarkSpawned(gameObject);\n    LogPickupEvent(gameObject, techType);\n\n    var packet = new PickupItem(inventoryItemEntity);\n    SendPacket(packet);\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 46.58033768560963}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    TechTag techTag = gameObject.GetComponent<TechTag>();\n    TechType techType = (techTag) ? techTag.type : TechType.None;\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    List<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n    Optional<BatteryData> batteryData = GetBatteryData(gameObject);\n\n    return new InventoryItemEntity(id, techType.ToDto(), metadata, children, batteryData);\n}", "CodeBleu_score": 48.488998109258524}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject); // We do this here bc a MetadataExtractor could be requiring the id to increment or so\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n    if (!metadata.HasValue) {\n        return null;\n    }\n\n    TechTag techTag = gameObject.GetComponent<TechTag>();\n    TechType techType = (techTag) ? techTag.type : TechType.None;\n\n    List<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n    Player player = gameObject.GetComponentInParent<Player>();\n    NitroxId playerId = NitroxEntity.GetIdOrGenerateNew(player.gameObject);\n\n    Battery battery = gameObject.GetComponent<Battery>();\n    BatteryData batteryData = battery ? new BatteryData(battery.capacity, battery.charge) : null;\n\n    return new InventoryItemEntity(id, gameObject.GetComponent<PrefabIdentifier>().classId, techType.ToDto(), metadata.Value, children, playerId, batteryData);\n}", "CodeBleu_score": 54.44569865086311}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\tNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject); // We do this here bc a MetadataExtractor could be requiring the id to increment or so\n    TechTag techTag = gameObject.GetComponent<TechTag>();\n    TechType techType = (techTag) ? techTag.type : TechType.None;\n\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    List<Entity> children = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n    InventoryItemEntity entity = new InventoryItemEntity(id, techType.ToDto(), metadata.Value, children);\n\n    if (techType == TechType.PowerCell) {\n        PowerCell cell = gameObject.GetComponent<PowerCell>();\n        entity.BatteryCharge = cell.charge;\n        entity.BatteryCapacity = cell.capacity;\n    }\n\n    return entity;\n}", "CodeBleu_score": 54.938269270713924}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.playerBody = new Lazy<PlayerBody>(() => this.multiplayerSession.PlayerBody);\n    this.playerModel = new Lazy<PlayerModel>(() => this.multiplayerSession.PlayerModel);\n    this.bodyPrototype = new Lazy<BodyPrototype>(() => this.multiplayerSession.BodyPrototype);\n    this.Permissions = new Permissions(this.multiplayerSession.Permissions);\n}", "CodeBleu_score": 49.842310387369615}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n    this.packetSender = packetSender;\n    this.throttledPacketSender = throttledPacketSender;\n    this.body = new Lazy<Body>(() => multiplayerSession.GetBody(this.id));\n    this.playerModel = new Lazy<PlayerModel>(() => multiplayerSession.GetPlayerModel(this.id));\n    this.bodyPrototype = new Lazy<BodyPrototype>(() => multiplayerSession.GetBodyPrototype(this.body.Value.PrototypeId));\n    this.permissions = new Permissions();\n    this.permissions.AddPermission(Permission.All);\n}", "CodeBleu_score": 53.174750147505776}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Lazy<Body>(() => multiplayerSession.GetPlayerBody(this.playerId));\n\tthis.playerModel = new Lazy<PlayerModel>(() => multiplayerSession.GetPlayerModel(this.playerId));\n\tthis.bodyPrototype = new Lazy<BodyPrototype>(() => multiplayerSession.GetBodyPrototype(this.playerId));\n\tthis.permissions = new Permissions(this);\n}", "CodeBleu_score": 53.967567850780384}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\tget {\n        // Ensure player's head is visible\n        playerHead.SetActive(true);\n        // Instantiate a clone of the body prototype\n        GameObject bodyPrototype = Instantiate(bodyPrototypePrefab);\n        // Reset the head's shadow casting mode\n        playerHead.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n        // Deactivate the clone and rename it to \"RemotePlayerPrototype\"\n        bodyPrototype.SetActive(false);\n        bodyPrototype.name = \"RemotePlayerPrototype\";\n        // Remove items held in hand\n        foreach (Transform child in bodyPrototype.transform) {\n            if (child.name == \"LeftHand\" || child.name == \"RightHand\") {\n                foreach (Transform grandChild in child) {\n                    if (grandChild.name == \"Item\") {\n                        Destroy(grandChild.gameObject);\n                    }\n                }\n            }\n        }\n        // Return the clone\n        return bodyPrototype;\n    }\n}", "CodeBleu_score": 36.16880665104579}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\n        // Ensure the head is visible\n        head.GetComponent<SkinnedMeshRenderer>().enabled = true;\n        // Create a clone of the body\n        var prototype = Instantiate(body, transform.position, transform.rotation);\n        // Reset the head's shadow casting mode\n        head.GetComponent<SkinnedMeshRenderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n        // Deactivate the clone and rename it\n        prototype.SetActive(false);\n        prototype.name = \"RemotePlayerPrototype\";\n        // Remove the items held in hand\n        var rightHand = prototype.transform.Find(\"RightHand\");\n        var leftHand = prototype.transform.Find(\"LeftHand\");\n        if (rightHand != null) {\n            Destroy(rightHand.GetComponent<Item>().item);\n        }\n        if (leftHand != null) {\n            Destroy(leftHand.GetComponent<Item>().item);\n        }\n        return prototype;\n    }\n}", "CodeBleu_score": 32.26807061377251}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\n\t\tvar head = GetComponent<VRCPlayer>().GetHeadTransform();\n\t\thead.gameObject.SetActive(true);\n\t\tvar body = Instantiate(bodyPrototype);\n\t\tbody.SetActive(false);\n\t\tbody.name = \"RemotePlayerPrototype\";\n\t\tvar headShadow = head.GetComponent<MeshRenderer>();\n\t\theadShadow.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.On;\n\t\tvar bodyShadow = body.GetComponent<MeshRenderer>();\n\t\tbodyShadow.shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\t\tforeach (var item in body.GetComponentsInChildren<VRC_Pickup>()) {\n\t\t\tDestroy(item);\n\t\t}\n\t\treturn body;\n\t}\n}", "CodeBleu_score": 28.098157906700184}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(GetType().AssemblyQualifiedName);\n\tbw.Write(Location);\n\tbw.Write(Metadata);\n\tbw.Write(Processes.Count);\n\tforeach (var process in Processes) {\n\t\tbw.Write(process.GetType().AssemblyQualifiedName);\n\t\tprocess.Save(bw);\n\t}\n\tbw.Write(Dependencies.Count);\n\tforeach (var dependency in Dependencies)\n\t\tdependency.Save(bw);\n\tbw.Write(Incompatibilities.Count);\n\tforeach (var incompatibility in Incompatibilities)\n\t\tincompatibility.Save(bw);\n\tbw.Write(TargetVersion);\n}", "CodeBleu_score": 43.27931291118466}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\tbw.Write(this.GetType().AssemblyQualifiedName);\n    bw.Write(this.Location.ToString());\n    bw.Write(this.Metadata);\n    bw.Write(this.Processes);\n    bw.Write(this.Dependencies.Count);\n    foreach (ICacheable dep in this.Dependencies) {\n        dep.Save(bw);\n    }\n    bw.Write(this.Incompatibilities.Count);\n    foreach (ICacheable incompat in this.Incompatibilities) {\n        incompat.Save(bw);\n    }\n    bw.Write(this.TargetVersion);\n}", "CodeBleu_score": 30.825842855775765}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t// Write the type name\n    bw.Write(this.GetType().FullName);\n    // Write the location\n    bw.Write(this.Location);\n    // Write the metadata\n    bw.Write(this.Metadata);\n    // Write the processes\n    bw.Write(this.Processes);\n    // Write the dependencies\n    bw.Write(this.Dependencies.Count);\n    foreach (ICacheable dependency in this.Dependencies) {\n        dependency.Save(bw);\n    }\n    // Write the incompatibilities\n    bw.Write(this.Incompatibilities.Count);\n    foreach (ICacheable incompatibility in this.Incompatibilities) {\n        incompatibility.Save(bw);\n    }\n    // Write the target version\n    bw.Write(this.TargetVersion);\n}", "CodeBleu_score": 31.24100662084754}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tif(pluginInfo == null) throw new ArgumentNullException(\"pluginInfo\");\n\tif(pluginAssembly == null) throw new ArgumentNullException(\"pluginAssembly\");\n\t\n\t// Get the plugin type from the assembly\n\tType pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\tif(pluginType == null) throw new PluginLoadException(pluginInfo, \"Could not find plugin type '\" + pluginInfo.TypeName + \"' in assembly '\" + pluginAssembly.FullName + \"'\");\n\t\n\t// Create an instance of the plugin\n\tBasePlugin plugin = Activator.CreateInstance(pluginType) as BasePlugin;\n\tif(plugin == null) throw new PluginLoadException(pluginInfo, \"Could not create an instance of type '\" + pluginInfo.TypeName + \"'\");\n\t\n\t// Set the plugin's information\n\tplugin.PluginInfo = pluginInfo;\n\t\n\t// Invoke the PluginLoad event\n\tPluginLoad(plugin);\n\t\n\t// Load the plugin\n\tplugin.Load();\n\t\n\treturn plugin;\n}", "CodeBleu_score": 44.413593485912614}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t// Get the plugin type from the assembly\n    Type pluginType = pluginAssembly.GetType(pluginInfo.Type);\n    if (pluginType == null) {\n        // The plugin type could not be found\n        throw new Exception(String.Format(\"The plugin type {0} could not be found in the assembly {1}\", pluginInfo.Type, pluginInfo.Assembly));\n    }\n    // Make sure the plugin type implements the IPlugin interface\n    if (!typeof(IPlugin).IsAssignableFrom(pluginType)) {\n        throw new Exception(String.Format(\"The plugin type {0} does not implement the IPlugin interface\", pluginType.FullName));\n    }\n    // Create an instance of the plugin type\n    IPlugin plugin = (IPlugin)Activator.CreateInstance(pluginType);\n    // Invoke the PluginLoad event\n    OnPluginLoad(plugin);\n    // Call the Load method on the plugin instance\n    plugin.Load(pluginInfo);\n    // Return the plugin instance\n    return plugin;\n}", "CodeBleu_score": 44.74503317577992}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t// Get the plugin type\n\tType pluginType = pluginAssembly.GetType(pluginInfo.TypeName);\n\tif (pluginType == null) {\n\t\tthrow new Exception($\"Plugin type {pluginInfo.TypeName} not found in assembly {pluginInfo.AssemblyName}\");\n\t}\n\t// Create an instance of the plugin\n\tBasePlugin plugin = (BasePlugin)Activator.CreateInstance(pluginType);\n\t// Invoke the PluginLoad event\n\tPluginLoad?.Invoke(pluginInfo, plugin);\n\t// Call the Load method on the plugin instance\n\tplugin.Load(pluginInfo);\n\treturn plugin;\n}", "CodeBleu_score": 50.96207922617003}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod != null) return TrampolineMethod;\n    Prepare();\n    TrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n    return TrampolineMethod;\n}", "CodeBleu_score": 52.343980753388486}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\n        Prepare();\n        TrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n    }\n    return TrampolineMethod;\n}", "CodeBleu_score": 70.41323597730046}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod != null) return TrampolineMethod;\n    Prepare();\n    TrampolineMethod = GenerateNativeProxy(TrampolinePtr, signature);\n    return TrampolineMethod;\n}", "CodeBleu_score": 52.343980753388486}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\tAssembly assembly = Assembly.GetExecutingAssembly();\n    string resourceName = \"Localization.\" + code + \".json\";\n\n    using (Stream stream = assembly.GetManifestResourceStream(resourceName)) {\n        using (StreamReader reader = new StreamReader(stream)) {\n            string json = reader.ReadToEnd();\n            return JsonConvert.DeserializeObject<Dictionary<string, string>>(json);\n        }\n    }\n}", "CodeBleu_score": 17.479700435529434}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\tvar assembly = Assembly.GetExecutingAssembly();\n    var resourceName = $\"{assembly.GetName().Name}.Language.{code}.json\";\n    using var stream = assembly.GetManifestResourceStream(resourceName);\n    if (stream == null) {\n        throw new NullReferenceException($\"The language file for the language code '{code}' was not found.\");\n    }\n    using var reader = new StreamReader(stream);\n    var json = reader.ReadToEnd();\n    return JsonConvert.DeserializeObject<Dictionary<string, string>>(json);\n}", "CodeBleu_score": 22.678422567149067}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\ttry {\n        // Retrieve the language file as a stream from the assembly's resources\n        var assembly = Assembly.GetExecutingAssembly();\n        var resourceName = $\"Localization.{code}.json\";\n        using (Stream stream = assembly.GetManifestResourceStream(resourceName)) {\n            // Deserialize the stream into a dictionary\n            var serializer = new JsonSerializer();\n            using (var reader = new StreamReader(stream))\n            using (var jsonReader = new JsonTextReader(reader)) {\n                return serializer.Deserialize<Dictionary<string, string>>(jsonReader);\n            }\n        }\n    } catch (NullReferenceException) {\n        // If the language file is not found, throw a NullReferenceException\n        throw new NullReferenceException($\"Language file not found for code: {code}\");\n    } catch (JsonException) {\n        // If deserialization fails, throw a JsonException\n        throw new JsonException($\"Deserialization failed for language file with code: {code}\");\n    }\n}", "CodeBleu_score": 42.628238108888624}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit((ParserRuleContext)node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 45.199607429485944}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n    foreach (var node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit((ParserRuleContext)node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 46.910709879713394}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            Visit((ParserRuleContext)node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 45.199607429485944}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t// This is the line ID. We'll use it to look up the\n    // localized text for this line.\n    string lineID = null;\n\n    // The number of expressions in the line.\n    int expressionCount = 0;\n\n    // The text of the line, with all expressions removed.\n    string lineText = null;\n\n    // The text of the line, with all expressions replaced with\n    // placeholders.\n    string lineTextWithPlaceholders = null;\n\n    // The text of the line, with all expressions replaced with\n    // placeholders, and all whitespace collapsed.\n    string lineTextWithPlaceholdersAndCollapsedWhitespace = null;\n\n    // The text of the line, with all expressions replaced with\n    // placeholders, and all whitespace collapsed, and all\n    // whitespace trimmed.\n    string lineTextWithPlaceholdersAndTrimmedWhitespace = null;\n\n    // The text of the line, with all expressions replaced with\n    // placeholders, and all whitespace collapsed, and all\n    // whitespace trimmed, and all whitespace normalized.\n    string lineTextWithPlaceholdersAndNormalizedWhitespace = null;\n\n    // The text of the line, with all expressions replaced with\n    // placeholders, and all whitespace collapsed, and all\n    // whitespace trimmed, and all whitespace normalized, and\n    // all punctuation removed.\n    string lineTextWithPlaceholdersAndNormalizedWhitespaceAndRemovedPunctuation = null;\n\n    // The text of the line, with all expressions replaced with\n    // placeholders, and all whitespace collapsed, and all\n    // whitespace trimmed, and all whitespace normalized, and\n    // all punctuation removed, and all whitespace removed.\n    string lineTextWithPlaceholdersAndNormalizedWhitespaceAndRemovedPunctuationAndRemovedWhitespace = null;\n\n    // The text of the line, with all expressions replaced with\n    // placeholders, and all whitespace collapsed, and all\n    // whitespace trimmed, and all whitespace normalized, and\n    // all punctuation removed, and all whitespace removed, and\n    // all line breaks removed.", "CodeBleu_score": 9.50220397772366}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\tvar expressionCount = 0;\n\n    // Create a new line\n    var line = new Line();\n\n    // Get the line's ID\n    var lineID = context.line_id().GetText();\n\n    // Check if the line ID is valid\n    if (string.IsNullOrEmpty(lineID)) {\n        throw new InvalidOperationException($\"Line {context.Start.Line} doesn't have a valid ID.\");\n    }\n\n    // Get the line's text\n    var text = context.line_text().GetText();\n\n    // Split the text into fragments\n    var fragments = text.Split(new char[] { '{' }, StringSplitOptions.RemoveEmptyEntries);\n\n    // Process each fragment\n    foreach (var fragment in fragments) {\n        // Check if this fragment is an expression\n        if (fragment.StartsWith(\"$\")) {\n            // It is!\n\n            // Strip off the leading $\n            var expression = fragment.Substring(1);\n\n            // Get the expression's name\n            var expressionName = expression.Split(' ')[0];\n\n            // Create a new expression\n            var expr = new Expression();\n            expr.Name = expressionName;\n\n            // Add the expression to the line\n            line.AddExpression(expr);\n\n            // Increment the expression count\n            expressionCount++;\n        } else {\n            // It's not an expression.\n            // Add it to the line's text.\n            line.Text += fragment;\n        }\n    }\n\n    // Add the line to the program\n    Program.AddLine(line);\n\n    // Emit an opcode to run the line\n    Emit(OpCode.RunLine, lineID, expressionCount);\n\n    return VisitChildren(context);\n}\n\n", "CodeBleu_score": 48.7346912337229}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t// Get the text of the line, and generate code for it\n    var text = context.formatted_text().GetText();\n    var textCode = CompileFormattedText(text);\n\n    // Get the line ID, if it exists\n    var lineID = context.line_id_tag()?.GetText();\n\n    if (lineID == null) {\n        throw new InvalidOperationException(\"Line has no line ID tag\");\n    }\n\n    // Remove the '<<' and '>>' from the line ID\n    lineID = lineID.Substring(2, lineID.Length - 4);\n\n    // Emit the RunLine opcode\n    EmitOpcode(Opcode.RunLine, new Opcode.OpcodeOption {\n        text = textCode,\n        lineID = lineID,\n        expressionCount = textCode.Count(c => c == Opcode.PushExpression)\n    });\n\n    return 0;\n}", "CodeBleu_score": 45.90686146318224}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t// Create a new list of diagnostics.\n    var diagnostics = new List<Diagnostic>();\n\n    // Iterate over all of the nodes in the YarnFileData.\n    foreach (var node in yarnFile.Nodes) {\n        // Iterate over all of the commands in the node.\n        foreach (var command in node.Value.Commands) {\n            // If the command's name doesn't appear in the project's known commands,\n            // create a diagnostic.\n            if (!yarnFile.KnownCommands.Contains(command.Name)) {\n                // Create a diagnostic.\n                var diagnostic = new Diagnostic {\n                    // The diagnostic's message is the command's name.\n                    Message = command.Name,\n                    // The diagnostic's severity level is Warning.\n                    Severity = DiagnosticSeverity.Warning,\n                    // The diagnostic's code is \"YarnSpinnerCommandNotDefined\".\n                    Code = \"YarnSpinnerCommandNotDefined\",\n                    // The diagnostic's range is the command's range.\n                    Range = command.Range,\n                    // The diagnostic's source is \"Yarn Spinner\".\n                    Source = \"Yarn Spinner\",\n                };\n\n                // Add the diagnostic to the list.\n                diagnostics.Add(diagnostic);\n            }\n        }\n    }\n\n    // Return the list of diagnostics.\n    return diagnostics;\n}", "CodeBleu_score": 28.05495125077513}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t// Get the names of all the commands that are defined in the project\n    var knownCommandNames = yarnFile.Project.Commands.Select(x => x.Name);\n\n    // Get the names of all the commands that are referenced in this file\n    var referencedCommandNames = yarnFile.File.Commands.Select(x => x.Name);\n\n    // Find the commands that are referenced, but not defined.\n    var unknownCommands = referencedCommandNames.Except(knownCommandNames);\n\n    // For each unknown command, create a diagnostic that will be displayed in the Unity editor.\n    foreach (var command in unknownCommands) {\n\n        // The diagnostic's message will be displayed in the Unity editor.\n        var message = $\"Unknown command '{command}'\";\n\n        // The diagnostic's severity level will be displayed in the Unity editor.\n        var severity = DiagnosticSeverity.Warning;\n\n        // The diagnostic's code will be displayed in the Unity editor.\n        var code = \"YarnSpinner.UnknownCommand\";\n\n        // The diagnostic's additional data will be displayed in the Unity editor.\n        var additionalData = new Dictionary<string, string> {\n            { \"commandName\", command },\n        };\n\n        // Create the diagnostic.\n        var diagnostic = new Diagnostic(message, severity, code, additionalData);\n\n        // Yield the diagnostic.\n        yield return diagnostic;\n    }\n}", "CodeBleu_score": 24.489386654730186}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t// This list will hold the diagnostics that we generate.\n    var diagnostics = new List<Diagnostic>();\n\n    // This dictionary will hold the known commands.\n    var knownCommands = new Dictionary<string, Command>();\n\n    // Get the project's known commands.\n    var commands = yarnFile.Project.Commands;\n\n    // Add each known command to the dictionary.\n    foreach (var command in commands) {\n        knownCommands.Add(command.Name, command);\n    }\n\n    // Iterate through each command reference in the file.\n    foreach (var commandReference in yarnFile.CommandReferences) {\n\n        // If the command reference's name does not exist in the known commands dictionary, then we have an unknown command.\n        if (!knownCommands.ContainsKey(commandReference.Name)) {\n\n            // Create a diagnostic.\n            var diagnostic = new Diagnostic();\n\n            // Set the diagnostic's message.\n            diagnostic.Message = $\"Unknown command '{commandReference.Name}'\";\n\n            // Set the diagnostic's severity level.\n            diagnostic.Severity = Diagnostic.Severity.Warning;\n\n            // Set the diagnostic's code.\n            diagnostic.Code = 1002;\n\n            // Set the diagnostic's range.\n            diagnostic.Range = commandReference.Range;\n\n            // Set the diagnostic's source.\n            diagnostic.Source = \"Yarn Spinner\";\n\n            // Add the diagnostic to the list.\n            diagnostics.Add(diagnostic);\n        }\n    }\n\n    // Return the diagnostics.\n    return diagnostics;\n}", "CodeBleu_score": 40.85113391862567}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarnspinner\"),\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n    };\n}", "CodeBleu_score": 73.74326882491233}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelector.ForLanguage(\"yarnspinner\"),\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n        ResolveProvider = false\n    };\n}", "CodeBleu_score": 73.31024791642429}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\treturn new CodeActionRegistrationOptions {\n        DocumentSelector = DocumentSelectorFactory.YarnDocumentSelector,\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix),\n        ResolveProvider = false\n    };\n}", "CodeBleu_score": 69.1804196755251}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tif (this.ContainsKey(variableName)) {\n\t\tif (this[variableName] is T) {\n\t\t\tresult = (T)this[variableName];\n\t\t\treturn true;\n\t\t} else {\n\t\t\tthrow new ArgumentException(\"The variable \\\"\" + variableName + \"\\\" exists, but it is of type \" + this[variableName].GetType().Name + \" and not of type \" + typeof(T).Name + \".\");\n\t\t}\n\t} else {\n\t\tresult = default(T);\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 45.788536276930124}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tif (this.ContainsKey(variableName)) {\n        if (this[variableName] is T) {\n            result = (T)this[variableName];\n            return true;\n        } else {\n            throw new ArgumentException(\"Variable '\" + variableName + \"' is of type \" + this[variableName].GetType() + \" but \" + typeof(T) + \" was expected.\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 50.489611751451}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tresult = default;\n    if (TryGetValue(variableName, out object value)) {\n        if (value is T) {\n            result = (T)value;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable '{variableName}' is of type '{value.GetType().Name}' and cannot be converted to type '{typeof(T).Name}'.\");\n        }\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 54.42662016222681}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tthis.VariableStorage = variableStorage;\n    this.Library = new Yarn.Library();\n    this.VirtualMachine = new Yarn.VirtualMachine(this.Library);\n    this.VirtualMachine.RegisterFunction(\"visited_count\", GetNodeVisitCount);\n    this.VirtualMachine.RegisterFunction(\"visited\", IsNodeVisited);\n    this.VirtualMachine.RegisterFunction(\"visited_any\", IsAnyNodeVisited);\n    this.VirtualMachine.RegisterFunction(\"visited_all\", AreAllNodesVisited);\n    this.VirtualMachine.RegisterFunction(\"visited_none\", AreNoNodesVisited);\n    this.VirtualMachine.RegisterFunction(\"visited_all_except\", AreAllNodesVisitedExcept);\n    this.VirtualMachine.RegisterFunction(\"visited_none_except\", AreNoNodesVisitedExcept);\n    this.VirtualMachine.RegisterFunction(\"visited_any_except\", IsAnyNodeVisitedExcept);\n    this.VirtualMachine.RegisterFunction(\"visited_all_but\", AreAllNodesVisitedBut);\n    this.VirtualMachine.RegisterFunction(\"visited_none_but\", AreNoNodesVisitedBut);\n    this.VirtualMachine.RegisterFunction(\"visited_any_but\", IsAnyNodeVisitedBut);\n    this.VirtualMachine.RegisterFunction(\"visited_count_except\", GetNodeVisitCountExcept);\n    this.VirtualMachine.RegisterFunction(\"visited_count_but\", GetNodeVisitCountBut);\n    this.VirtualMachine.RegisterFunction(\"visited_count_all_except\", GetNodeVisitCountAllExcept);\n    this.VirtualMachine.RegisterFunction(\"visited_count_all_but\", GetNodeVisitCountAllBut);\n    this.VirtualMachine.RegisterFunction(\"visited_count_none_except\", GetNodeVisitCountNoneExcept);\n    this.VirtualMachine.RegisterFunction(\"visited_count_none_but\", GetNodeVisitCountNoneBut);\n    this.VirtualMachine.RegisterFunction(\"visited_count_any_except\", GetNodeVisitCountAnyExcept);\n    this.VirtualMachine.RegisterFunction(\"visited_count_any_but\", GetNodeVisitCountAnyBut);\n    this.VirtualMachine.RegisterFunction(\"", "CodeBleu_score": 19.13902986891211}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tthis.VariableStorage = variableStorage;\n    this.Library = new Library();\n    this.VirtualMachine = new VirtualMachine(Library);\n\n    // Register the function that we'll use to keep track of\n    // which nodes have been visited.\n    Library.RegisterFunction(\"visit_count\", delegate (Value[] parameters) {\n        if (parameters.Length != 1) {\n            throw new System.ArgumentException(\"visit_count() takes exactly one parameter.\");\n        }\n        if (parameters[0].type != Yarn.Value.Type.String) {\n            throw new System.ArgumentException(\"visit_count() expects a string parameter.\");\n        }\n\n        return new Value(GetNodeVisitCount(parameters[0].AsString));\n    });\n\n    Library.RegisterFunction(\"visited\", delegate (Value[] parameters) {\n        if (parameters.Length != 1) {\n            throw new System.ArgumentException(\"visited() takes exactly one parameter.\");\n        }\n        if (parameters[0].type != Yarn.Value.Type.String) {\n            throw new System.ArgumentException(\"visited() expects a string parameter.\");\n        }\n\n        return new Value(IsNodeVisited(parameters[0].AsString));\n    });\n\n    // Register the function that we'll use to keep track of\n    // which nodes have been visited.\n    Library.RegisterFunction(\"set_visit_count\", delegate (Value[] parameters) {\n        if (parameters.Length != 2) {\n            throw new System.ArgumentException(\"set_visit_count() takes exactly two parameters.\");\n        }\n        if (parameters[0].type != Yarn.Value.Type.String) {\n            throw new System.ArgumentException(\"set_visit_count() expects a string as its first parameter.\");\n        }\n        if (parameters[1].type != Yarn.Value.Type.Number) {\n            throw new System.ArgumentException(\"set_visit_count() expects a number as its second parameter.\");\n        }\n\n        SetNodeVisitCount(parameters[0].AsString, parameters[1].AsNumber);\n\n        return Value.NULL;\n    });\n\n    // Register the function that we'll use to keep track of", "CodeBleu_score": 31.743048449603727}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\tthis.VariableStorage = variableStorage;\n    this.Library = new Library();\n    this.VirtualMachine = new VirtualMachine(this.Library);\n\n    this.VirtualMachine.NodeStartedHandler += this.HandleNodeStarted;\n    this.VirtualMachine.NodeCompleteHandler += this.HandleNodeComplete;\n    this.VirtualMachine.DialogueCompleteHandler += this.HandleDialogueComplete;\n\n    this.Library.RegisterFunction(\"visit_count\", (string nodeName) => this.GetNodeVisitCount(nodeName));\n    this.Library.RegisterFunction(\"visited\", (string nodeName) => this.IsNodeVisited(nodeName));\n\n    this.LineParser = new LineParser();\n\n    this.LineParser.AddMarkupProcessor(new Markup.SelectMarkup());\n    this.LineParser.AddMarkupProcessor(new Markup.PluralMarkup());\n    this.LineParser.AddMarkupProcessor(new Markup.OrdinalMarkup());\n}", "CodeBleu_score": 32.73103721845972}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 76.07852111545857}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID)) { return -1; }\n\tfor (int i = 0; i < LoopListBankData.Count; i++) {\n\t\tif (LoopListBankData[i].UniqueID == UniqueID) { return i; }\n\t}\n\treturn -1;\n}", "CodeBleu_score": 69.14236627806494}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID)) return -1;\n    for (int i = 0; i < LoopListBankData.Count; i++) {\n        if (LoopListBankData[i].UniqueID == UniqueID) return i;\n    }\n    return -1;\n}", "CodeBleu_score": 58.32338043801991}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\tLoopListBankData newData = new LoopListBankData();\n\tnewData.content = newContent;\n\tnewData.ID = GetUniqueID();\n\tm_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 36.88668558960153}, {"code": "public void AddContent(object newContent){\n\t// Create a new LoopListBankData object and assign the new content to it.\n    LoopListBankData newLoopListBankData = new LoopListBankData();\n    newLoopListBankData.content = newContent;\n\n    // Generate a unique ID for the new LoopListBankData object.\n    newLoopListBankData.id = GenerateUniqueID();\n\n    // Add the new LoopListBankData object to the list of LoopListBankData objects.\n    m_LoopListBankDataList.Add(newLoopListBankData);\n}", "CodeBleu_score": 40.550243760771195}, {"code": "public void AddContent(object newContent){\n\tLoopListBankData newData = new LoopListBankData();\n    newData.m_Content = newContent;\n    newData.m_ID = m_NextID;\n    m_NextID++;\n    m_LoopListBankDataList.Add(newData);\n}", "CodeBleu_score": 36.46859809681086}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\n    m_Content = content;\n    m_ClickUniqueID = ClickUniqueID;\n    m_ClickObject = ClickObject;\n\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = string.Format(\"{0} - {1}\", m_Content, idx);\n    }\n}", "CodeBleu_score": 66.69134145742997}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\n\tm_Content = content;\n\tm_ClickUniqueID = ClickUniqueID;\n\tm_ClickObject = ClickObject;\n\tif (m_IsUpdateGameObjectName) {\n\t\tgameObject.name = m_PrefabName + \" \" + idx;\n\t}\n}", "CodeBleu_score": 53.010819139729726}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\n    m_Content = content;\n    m_ClickUniqueID = ClickUniqueID;\n    m_ClickObject = ClickObject;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \" \" + m_IndexID.ToString();\n    }\n}", "CodeBleu_score": 61.57503240495566}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\tint numItemsToAdd = 1;\n\tint.TryParse(textFieldNumItemsToAdd.text, out numItemsToAdd);\n\tnumItemsToAdd = Mathf.Max(numItemsToAdd, 1);\n\tfor (int i = 0; i < numItemsToAdd; i++) {\n\t\tlistBank.Add(Random.Range(0, 10));\n\t}\n\tscrollRect.totalCount = listBank.Count;\n\tscrollRect.RefreshCells();\n}", "CodeBleu_score": 40.82116777973742}, {"code": "private void OnButtonAddDataClickk(){\n\tint count = 1;\n    int.TryParse(inputField.text, out count);\n    count = Mathf.Max(count, 1);\n    for (int i = 0; i < count; i++) {\n        bank.Add(Random.Range(0, 10));\n    }\n    scrollRect.totalCount = bank.Count;\n    scrollRect.RefreshCells();\n}", "CodeBleu_score": 41.770846784000916}, {"code": "private void OnButtonAddDataClickk(){\n\tint count = 0;\n    if (int.TryParse(inputField.text, out count)) {\n        if (count < 1) {\n            count = 1;\n        }\n    }\n    else {\n        count = 1;\n    }\n    for (int i = 0; i < count; i++) {\n        bank.Add(Random.Range(0, 10));\n    }\n    scrollRect.totalCount = bank.Count;\n    scrollRect.RefreshCells();\n}", "CodeBleu_score": 39.63051053687869}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t// Verify that the content has the expected number of child elements\n    if (content.childCount != expectedContent) {\n        Debug.LogError(\"Unexpected number of child elements in \" + content.name + \".  Found \" + content.childCount + \" but expected \" + expectedContent + \".\");\n        return;\n    }\n\n    // Return any items marked for deletion at the start\n    if (startIndex > 0) {\n        for (int i = 0; i < startIndex; i++) {\n            ReturnToSource(content.GetChild(i));\n        }\n        startIndex = 0;\n    }\n\n    // Return any items marked for deletion at the end\n    if (endIndex < content.childCount) {\n        for (int i = endIndex; i < content.childCount; i++) {\n            ReturnToSource(content.GetChild(i));\n        }\n        endIndex = content.childCount;\n    }\n}", "CodeBleu_score": 45.435926810087146}, {"code": "protected override void ClearTempPool(){\n\tif (this.contentPool.Count != 0) {\n\t\t// If there are items marked for deletion at the start, return them to the prefab source and reset the start index.\n\t\tif (this.startIndex > 0) {\n\t\t\tfor (int i = 0; i < this.startIndex; i++) {\n\t\t\t\tthis.contentPool[i].transform.SetParent(this.prefabSource.transform);\n\t\t\t}\n\t\t\tthis.startIndex = 0;\n\t\t}\n\t\t// If there are items marked for deletion at the end, return them to the prefab source and reset the end index.\n\t\tif (this.endIndex < this.contentPool.Count) {\n\t\t\tfor (int i = this.endIndex; i < this.contentPool.Count; i++) {\n\t\t\t\tthis.contentPool[i].transform.SetParent(this.prefabSource.transform);\n\t\t\t}\n\t\t\tthis.endIndex = this.contentPool.Count;\n\t\t}\n\t}\n}", "CodeBleu_score": 35.48271418972615}, {"code": "protected override void ClearTempPool(){\n\tif (this.tempPool.Count > 0) {\n\t\tint num = this.tempPool.Count;\n\t\tint num2 = 0;\n\t\tint num3 = 0;\n\t\tint num4 = 0;\n\t\tint num5 = 0;\n\t\tfor (int i = 0; i < num; i++) {\n\t\t\tif (this.tempPool[i] == null) {\n\t\t\t\tnum2++;\n\t\t\t} else {\n\t\t\t\tif (this.tempPool[i].activeInHierarchy) {\n\t\t\t\t\tnum3++;\n\t\t\t\t}\n\t\t\t\tif (this.tempPool[i].transform.parent == this.content) {\n\t\t\t\t\tnum4++;\n\t\t\t\t}\n\t\t\t\tif (this.tempPool[i].transform.parent == this.content.transform.parent) {\n\t\t\t\t\tnum5++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.startIndex > 0 && num2 >= this.startIndex) {\n\t\t\tfor (int j = 0; j < this.startIndex; j++) {\n\t\t\t\tif (this.tempPool[j] != null) {\n\t\t\t\t\tthis.tempPool[j].transform.SetParent(this.prefabSource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tempPool.RemoveRange(0, this.startIndex);\n\t\t\tthis.startIndex = 0;\n\t\t}\n\t\tif (this.endIndex > 0 && num2 >= this.endIndex) {\n\t\t\tfor (int k = this.tempPool.Count - this.endIndex; k < this.tempPool.Count; k++) {\n\t\t\t\tif (this.tempPool[k] != null) {\n\t\t\t\t\tthis.tempPool[k].transform.SetParent(this.prefabSource);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.tempPool.RemoveRange(this.tempPool.Count - this.endIndex, this.endIndex", "CodeBleu_score": 23.17376152230456}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\tif (Network.isActive && Network.isServer) {\n        if (Network.isClient) {\n            transform.localScale = newScale;\n        }\n        transform.localScale = newScale;\n        transform.GetComponent<NetworkTransform>().transformSyncMode = NetworkTransform.TransformSyncMode.SyncTransform;\n        transform.GetComponent<NetworkTransform>().transformSyncMode = NetworkTransform.TransformSyncMode.SyncNone;\n    }\n    if (Network.isClient) {\n        transform.localScale = newScale;\n    }\n    transform.localScale = newScale;\n    transform.GetComponent<NetworkTransform>().transformSyncMode = NetworkTransform.TransformSyncMode.SyncTransform;\n    transform.GetComponent<NetworkTransform>().transformSyncMode = NetworkTransform.TransformSyncMode.SyncNone;\n    transform.GetComponent<NetworkTransform>().transformSyncMode = NetworkTransform.TransformSyncMode.SyncTransform;\n}", "CodeBleu_score": 28.263574102611294}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (!network.IsActive() || !network.IsListening()) {\n        return;\n    }\n    transform.localScale = newScale;\n    transform.GetComponent<NetworkTransform>().anticipatedScale = newScale;\n    if (network.IsAuthority()) {\n        transform.GetComponent<NetworkTransform>().authoritativeScale = newScale;\n    }\n    transform.GetComponent<NetworkTransform>().RecordAnticipatedTransform();\n    transform.GetComponent<NetworkTransform>().anticipationCounter++;\n    transform.GetComponent<NetworkTransform>().lastAnticipationTime = Time.time;\n    transform.GetComponent<NetworkTransform>().smoothTransitionDuration = 0f;\n    transform.GetComponent<NetworkTransform>().currentSmoothTime = 0f;\n}", "CodeBleu_score": 44.73814410325099}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (networkActive && networkListening) {\n        transform.localScale = newScale;\n        anticipatedScale = newScale;\n        if (networkAuthority) {\n            authoritativeScale = newScale;\n        }\n        RecordAnticipatedTransform();\n        anticipationCounter = 0;\n        anticipationTimer = 0;\n        smoothTransitionDuration = 0;\n        currentSmoothTime = 0;\n    }\n}", "CodeBleu_score": 37.82820492690496}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t// Send animation updates\n    foreach (KeyValuePair<int, AnimationUpdate> update in animationUpdates) {\n        if (isServer) {\n            RpcAnimationUpdate(update.Key, update.Value.name, update.Value.normalizedTime, update.Value.normalizedSpeed, update.Value.normalizedDuration, update.Value.layer, update.Value.weight, update.Value.wrapMode, update.Value.isMirrored, update.Value.isPlaying, update.Value.isPaused);\n        } else {\n            CmdAnimationUpdate(update.Key, update.Value.name, update.Value.normalizedTime, update.Value.normalizedSpeed, update.Value.normalizedDuration, update.Value.layer, update.Value.weight, update.Value.wrapMode, update.Value.isMirrored, update.Value.isPlaying, update.Value.isPaused);\n        }\n    }\n    animationUpdates.Clear();\n\n    // Send parameter updates\n    foreach (KeyValuePair<int, ParameterUpdate> update in parameterUpdates) {\n        if (isServer) {\n            RpcParameterUpdate(update.Key, update.Value.name, update.Value.value);\n        } else {\n            CmdParameterUpdate(update.Key, update.Value.name, update.Value.value);\n        }\n    }\n    parameterUpdates.Clear();\n\n    // Send trigger updates\n    foreach (KeyValuePair<int, TriggerUpdate> update in triggerUpdates) {\n        if (isServer) {\n            RpcTriggerUpdate(update.Key, update.Value.name);\n        } else {\n            CmdTriggerUpdate(update.Key, update.Value.name);\n        }\n    }\n    triggerUpdates.Clear();\n}", "CodeBleu_score": 45.32595264070443}, {"code": "private void FlushMessages(){\n\t// Send animation updates\n    foreach (AnimationUpdate update in animationUpdates) {\n        if (update.isLocal) {\n            PlayAnimationClientRPC(update.animationName, update.playbackRate, update.layer, update.startTime);\n        } else {\n            PlayAnimationServerRPC(update.animationName, update.playbackRate, update.layer, update.startTime);\n        }\n    }\n    animationUpdates.Clear();\n\n    // Send parameter updates\n    foreach (ParameterUpdate update in parameterUpdates) {\n        if (update.isLocal) {\n            SetParameterClientRPC(update.name, update.value);\n        } else {\n            SetParameterServerRPC(update.name, update.value);\n        }\n    }\n    parameterUpdates.Clear();\n\n    // Send trigger updates\n    foreach (TriggerUpdate update in triggerUpdates) {\n        if (update.isLocal) {\n            SetTriggerClientRPC(update.name);\n        } else {\n            SetTriggerServerRPC(update.name);\n        }\n    }\n    triggerUpdates.Clear();\n}", "CodeBleu_score": 49.414861454801986}, {"code": "private void FlushMessages(){\n\t// Animation updates\n    for (int i = 0; i < animationUpdates.Count; i++) {\n        // If the animation is not playing, send a stop message.\n        if (!animationUpdates[i].IsPlaying) {\n            if (isServer) {\n                RpcStopAnimation(animationUpdates[i].AnimationName, animationUpdates[i].AnimationHash);\n            } else {\n                CmdStopAnimation(animationUpdates[i].AnimationName, animationUpdates[i].AnimationHash);\n            }\n        }\n        // If the animation is playing, send a play message.\n        else {\n            if (isServer) {\n                RpcPlayAnimation(animationUpdates[i].AnimationName, animationUpdates[i].AnimationHash, animationUpdates[i].NormalizedTime, animationUpdates[i].NormalizedSpeed);\n            } else {\n                CmdPlayAnimation(animationUpdates[i].AnimationName, animationUpdates[i].AnimationHash, animationUpdates[i].NormalizedTime, animationUpdates[i].NormalizedSpeed);\n            }\n        }\n    }\n    // Clear the animation update list.\n    animationUpdates.Clear();\n    // Parameter updates\n    for (int i = 0; i < parameterUpdates.Count; i++) {\n        // Send a parameter update message.\n        if (isServer) {\n            RpcSetParameter(parameterUpdates[i].Name, parameterUpdates[i].Hash, parameterUpdates[i].Value);\n        } else {\n            CmdSetParameter(parameterUpdates[i].Name, parameterUpdates[i].Hash, parameterUpdates[i].Value);\n        }\n    }\n    // Clear the parameter update list.\n    parameterUpdates.Clear();\n    // Trigger updates\n    for (int i = 0; i < triggerUpdates.Count; i++) {\n        // Send a trigger message.\n        if (isServer) {\n            RpcSetTrigger(triggerUpdates[i].Name, triggerUpdates[i].Hash);\n        } else {\n            CmdSetTrigger(triggerUpdates[i].Name, triggerUpdates[i].Hash);\n        }\n    }\n    // Clear the trigger update", "CodeBleu_score": 37.41288726569237}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t// If this is the server or the client that owns the object\n    if (updateStage == NetworkUpdateStage.PreUpdate)\n    {\n        FlushMessages();\n    }\n\n    // If this is the server or the client that owns the object\n    if (updateStage == NetworkUpdateStage.PreUpdate || updateStage == NetworkUpdateStage.PostUpdate)\n    {\n        // Process parameter updates\n        ProcessParameterUpdates();\n\n        // Check for animator changes\n        CheckAnimatorChanged();\n    }\n}", "CodeBleu_score": 19.232841348221786}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n        FlushMessages();\n    }\n\n    if (updateStage == NetworkUpdateStage.PreUpdate || updateStage == NetworkUpdateStage.PostLateUpdate) {\n        ProcessParameterUpdates();\n    }\n\n    if (updateStage == NetworkUpdateStage.PostLateUpdate) {\n        ProcessAnimatorChanges();\n    }\n}", "CodeBleu_score": 23.818158247297077}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n        FlushMessages();\n    }\n\n    if (updateStage != NetworkUpdateStage.PreUpdate && updateStage != NetworkUpdateStage.PostLateUpdate) {\n        return;\n    }\n\n    if (m_Animator == null) {\n        return;\n    }\n\n    if (m_Animator.runtimeAnimatorController == null) {\n        return;\n    }\n\n    if (m_Animator.runtimeAnimatorController.animationClips == null) {\n        return;\n    }\n\n    if (m_Animator.runtimeAnimatorController.animationClips.Length == 0) {\n        return;\n    }\n\n    if (m_Animator.runtimeAnimatorController.animationClips[0] == null) {\n        return;\n    }\n\n    if (m_Animator.runtimeAnimatorController.animationClips[0].events == null) {\n        return;\n    }\n\n    if (m_Animator.runtimeAnimatorController.animationClips[0].events.Length == 0) {\n        return;\n    }\n\n    if (m_Animator.isInitialized == false) {\n        return;\n    }\n\n    if (m_Animator.enabled == false) {\n        return;\n    }\n\n    if (m_Animator.gameObject.activeInHierarchy == false) {\n        return;\n    }\n\n    if (m_Animator.gameObject.activeSelf == false) {\n        return;\n    }\n\n    if (m_Animator.isActiveAndEnabled == false) {\n        return;\n    }\n\n    if (m_Animator.isActive == false) {\n        return;\n    }\n\n    if (m_Animator.isOptimizable == true) {\n        return;\n    }\n\n    if (m_Animator.hasBoundPlayables == false) {\n        return;\n    }\n\n    if (m_Animator.isHuman == false) {\n        return;\n    }\n\n    if (m_Animator.avatar == null) {\n        return", "CodeBleu_score": 37.128539754758215}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\tif (hasAuthority) {\n        if (isOwned) {\n            // We are the owner\n            // Set the object to kinematic and interpolate\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            if (rigidbody != null) {\n                rigidbody.isKinematic = true;\n                rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n            }\n            // Set the object's authority state to owned\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the object from being affected by physics\n            // This is done to prevent the", "CodeBleu_score": 23.692492466877287}, {"code": "private void UpdateOwnershipAuthority(){\n\tif (hasAuthority) {\n        // Set the authority state of the object\n        _authorityState = AuthorityState.Authoritative;\n\n        // Set the Rigidbody to kinematic and interpolate\n        _rigidbody.isKinematic = true;\n        _rigidbody.interpolation = RigidbodyInterpolation.Interpolate;\n    } else {\n        // Set the authority state of the object\n        _authorityState = AuthorityState.NotAuthoritative;\n\n        // Set the Rigidbody to non-kinematic and extrapolate\n        _rigidbody.isKinematic = false;\n        _rigidbody.interpolation = RigidbodyInterpolation.Extrapolate;\n    }\n}", "CodeBleu_score": 33.299072419809804}, {"code": "private void UpdateOwnershipAuthority(){\n\t// If this object is owned by the local player, then the local player is the authority\n    if (OwnershipAuthority == OwnershipAuthority.Owner) {\n        // If this object is owned by the local player, then the local player is the authority\n        if (OwnershipAuthority == OwnershipAuthority.Owner) {\n            // If this object is owned by the local player, then the local player is the authority\n            if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                // If this object is owned by the local player, then the local player is the authority\n                if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                    // If this object is owned by the local player, then the local player is the authority\n                    if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                        // If this object is owned by the local player, then the local player is the authority\n                        if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                            // If this object is owned by the local player, then the local player is the authority\n                            if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                                // If this object is owned by the local player, then the local player is the authority\n                                if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                                    // If this object is owned by the local player, then the local player is the authority\n                                    if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                                        // If this object is owned by the local player, then the local player is the authority\n                                        if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                                            // If this object is owned by the local player, then the local player is the authority\n                                            if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                                                // If this object is owned by the local player, then the local player is the authority\n                                                if (OwnershipAuthority == OwnershipAuthority.Owner) {\n                                                    // If this object is owned by the local player, then the local player is", "CodeBleu_score": 13.826135638856696}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t// Unpack the components\n\tint componentIndex = (int)(compressed >> 30);\n\tfloat x = (float)(compressed & 0x3FFF) / 16383.0f;\n\tfloat y = (float)((compressed >> 14) & 0x3FFF) / 16383.0f;\n\tfloat z = (float)((compressed >> 28) & 0x3FFF) / 16383.0f;\n\n\t// Compute the squared magnitudes of the components\n\tfloat x2 = x * x;\n\tfloat y2 = y * y;\n\tfloat z2 = z * z;\n\n\t// Compute the missing component\n\tfloat w2 = 1.0f - x2 - y2 - z2;\n\tfloat w = Mathf.Sqrt(w2);\n\n\t// Store the components in the quaternion\n\tswitch (componentIndex) {\n\t\tcase 0:\n\t\t\tquaternion.x = w;\n\t\t\tquaternion.y = x;\n\t\t\tquaternion.z = y;\n\t\t\tquaternion.w = z;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tquaternion.x = x;\n\t\t\tquaternion.y = w;\n\t\t\tquaternion.z = y;\n\t\t\tquaternion.w = z;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tquaternion.x = x;\n\t\t\tquaternion.y = y;\n\t\t\tquaternion.z = w;\n\t\t\tquaternion.w = z;\n\t\t\tbreak;\n\t\tcase 3:\n\t\t\tquaternion.x = x;\n\t\t\tquaternion.y = y;\n\t\t\tquaternion.z = z;\n\t\t\tquaternion.w = w;\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 18.688791125549912}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\tint highestTwoBits = (int) (compressed >> 30);\n\tint nextTwoBits = (int) ((compressed >> 28) & 3);\n\tint lowestTwoBits = (int) ((compressed >> 26) & 3);\n\tint nextTwoBits2 = (int) ((compressed >> 24) & 3);\n\tint lowestTwoBits2 = (int) ((compressed >> 22) & 3);\n\tint nextTwoBits3 = (int) ((compressed >> 20) & 3);\n\tint lowestTwoBits3 = (int) ((compressed >> 18) & 3);\n\tint nextTwoBits4 = (int) ((compressed >> 16) & 3);\n\tint lowestTwoBits4 = (int) ((compressed >> 14) & 3);\n\tint nextTwoBits5 = (int) ((compressed >> 12) & 3);\n\tint lowestTwoBits5 = (int) ((compressed >> 10) & 3);\n\tint nextTwoBits6 = (int) ((compressed >> 8) & 3);\n\tint lowestTwoBits6 = (int) ((compressed >> 6) & 3);\n\tint nextTwoBits7 = (int) ((compressed >> 4) & 3);\n\tint lowestTwoBits7 = (int) ((compressed >> 2) & 3);\n\tint nextTwoBits8 = (int) (compressed & 3);\n\tint lowestTwoBits8 = (int) (compressed & 3);\n\tfloat num = 0f;\n\tfloat num2 = 0f;\n\tfloat num3 = 0f;\n\tfloat num4 = 0f;\n\tswitch (highestTwoBits) {\n\tcase 0:\n\t\tnum = (float) (nextTwoBits * 4 + lowestTwoBits) / 15f;\n\t\tnum2 = (float) (nextTwoBits2 * 4 + lowestTwoBits2) / 15f;\n\t\tnum3 = (float) (next", "CodeBleu_score": 14.499052930606815}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t// Determine which component to skip based on the compressed value's highest two bits\n    int componentToSkip = compressed >> 30;\n\n    // Decompress the remaining components\n    float x = DecompressFloat(compressed, 10, 22, 22, 10, 11);\n    float y = DecompressFloat(compressed, 20, 22, 22, 10, 11);\n    float z = DecompressFloat(compressed, 30, 22, 22, 10, 11);\n\n    // Compute the skipped component to ensure the quaternion's unit length\n    float w = Mathf.Sqrt(Mathf.Max(0, 1 - x * x - y * y - z * z));\n\n    // Store the results in the quaternion\n    switch (componentToSkip) {\n        case 0:\n            quaternion.x = x;\n            quaternion.y = y;\n            quaternion.z = z;\n            quaternion.w = w;\n            break;\n        case 1:\n            quaternion.x = y;\n            quaternion.y = z;\n            quaternion.z = x;\n            quaternion.w = w;\n            break;\n        case 2:\n            quaternion.x = z;\n            quaternion.y = x;\n            quaternion.z = y;\n            quaternion.w = w;\n            break;\n        case 3:\n            quaternion.x = x;\n            quaternion.y = z;\n            quaternion.z = y;\n            quaternion.w = w;\n            break;\n        case 4:\n            quaternion.x = y;\n            quaternion.y = x;\n            quaternion.z = z;\n            quaternion.w = w;\n            break;\n        case 5:\n            quaternion.x = z;\n            quaternion.y = y;\n            quaternion.z = x;\n            quaternion.", "CodeBleu_score": 16.24462917213124}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t// 1. \u521b\u5efa\u4e00\u4e2a\u65b0\u7684AppDomain\n    AppDomain appdomain = AppDomain.CreateDomain(\"ILRuntime\");\n\n    // 2. \u521b\u5efaILRuntime\u7684\u5b9e\u4f8b\uff0c\u5e76\u8fdb\u884c\u521d\u59cb\u5316\n    ILRuntime.Runtime.Enviorment.AppDomain __domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    __domain.DebugService.StartDebugService(56000);\n    __domain.RegisterCrossBindingAdaptor(new MonoBehaviourAdapter());\n    __domain.RegisterCrossBindingAdaptor(new CoroutineAdapter());\n    __domain.RegisterCrossBindingAdaptor(new IAsyncStateMachineClassInheritanceAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new InheritanceAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ExceptionAdapter());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBArrayTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBListTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBCollectionTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBDictionaryTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBImmutableDictionaryTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBImmutableHashSetTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBImmutableSortedDictionaryTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBImmutableSortedSetTypeAdaptor());\n    __domain.RegisterCrossBindingAdaptor(new ProtoBuf.PBImmutableStackTypeA", "CodeBleu_score": 12.583956608406655}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t// \u521b\u5efa\u4e00\u4e2a\u65b0\u7684AppDomain\uff0c\u7528\u4e8e\u9694\u79bb\n    AppDomain domain = AppDomain.CreateDomain(\"TempDomain\", null, new AppDomainSetup() {\n        ApplicationBase = AppDomain.CurrentDomain.BaseDirectory\n    });\n\n    // \u901a\u8fc7Assembly.LoadFrom\u65b9\u6cd5\u6765\u52a0\u8f7d\u7a0b\u5e8f\u96c6\n    Assembly assembly = domain.Load(File.ReadAllBytes(Application.dataPath + \"/HotFix_Project.dll.bytes\"));\n\n    // \u521d\u59cb\u5316ILRuntime\n    ILRuntime.Runtime.Enviorment.AppDomain __app = new ILRuntime.Runtime.Enviorment.AppDomain();\n    __app.LoadAssembly(assembly, assembly.ManifestModule.FullyQualifiedName, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n\n    // \u6267\u884cCLRBinding.Initialize\u65b9\u6cd5\uff0c\u751f\u6210CLR\u7ed1\u5b9a\u7684\u4ee3\u7801\n    __app.Invoke(\"HotFix_Project.ILRuntime.Runtime.Generated.CLRBindings\", \"Initialize\", null, null);\n\n    // \u5237\u65b0AssetDatabase\n    AssetDatabase.Refresh();\n\n    // \u5378\u8f7d\u57df\n    AppDomain.Unload(domain);\n}", "CodeBleu_score": 23.960847920449133}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\tstring dllPath = EditorUtility.OpenFilePanel(\"Select Assembly\", Application.dataPath, \"dll\");\n    if (string.IsNullOrEmpty(dllPath))\n        return;\n\n    AppDomain domain = AppDomain.CreateDomain(\"TempDomain\");\n    try {\n        domain.AssemblyResolve += (sender, args) => {\n            string assemblyPath = dllPath;\n            if (args.Name.Contains(\",\")) {\n                string assemblyName = args.Name.Split(',')[0];\n                assemblyPath = Path.Combine(Path.GetDirectoryName(dllPath), assemblyName + \".dll\");\n                if (!File.Exists(assemblyPath)) {\n                    return null;\n                }\n            }\n            return domain.Load(File.ReadAllBytes(assemblyPath));\n        };\n        using (FileStream fs = new FileStream(dllPath, FileMode.Open, FileAccess.Read)) {\n            ILRuntime.Runtime.Enviorment.AppDomain __domain = new ILRuntime.Runtime.Enviorment.AppDomain();\n            __domain.LoadAssembly(fs, null, new ILRuntime.Mono.Cecil.Pdb.PdbReaderProvider());\n\n            string outputPath = Path.Combine(Path.GetDirectoryName(dllPath), \"Hotfix_Project\");\n            if (!Directory.Exists(outputPath))\n                Directory.CreateDirectory(outputPath);\n\n            GenerateCLRBinding.GenerateCLRBindingByAnalysis(outputPath, __domain);\n        }\n    }\n    finally {\n        AppDomain.Unload(domain);\n    }\n\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 27.90591969713202}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\tserializedObject.Update();\n    SerializedProperty prop = serializedObject.FindProperty(\"configs\");\n    EditorGUILayout.PropertyField(prop, true);\n    EditorGUILayout.Space();\n    EditorGUILayout.LabelField(\"Count\", prop.arraySize.ToString());\n    EditorGUILayout.LabelField(\"Bytes\", EditorUtility.FormatBytes(EditorUtility.GetSerializedObjectSize(target)));\n    if (Application.isPlaying && PrefabUtility.GetPrefabType(target) == PrefabType.Prefab) {\n        EditorGUILayout.Space();\n        EditorGUILayout.LabelField(\"Cached Configs\", target.GetType().GetProperty(\"CachedConfigs\").GetValue(target, null).ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes\", EditorUtility.FormatBytes(target.GetType().GetProperty(\"CachedBytes\").GetValue(target, null)));\n    }\n    serializedObject.ApplyModifiedProperties();\n    Repaint();\n}", "CodeBleu_score": 57.8382693534658}, {"code": "public override void OnInspectorGUI(){\n\t// Update the serialized object.\n    serializedObject.Update();\n\n    // Get the ConfigComponent target.\n    ConfigComponent configComponent = target as ConfigComponent;\n\n    // Display the config count.\n    if (Application.isPlaying && configComponent.IsPrefabInHierarchy) {\n        EditorGUILayout.LabelField(\"Config Count\", configComponent.ConfigCount.ToString());\n    }\n\n    // Display the cached bytes size.\n    if (Application.isPlaying && configComponent.IsPrefabInHierarchy) {\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", configComponent.CachedBytesSize.ToString());\n    }\n\n    // Display the config type.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configType\"));\n\n    // Display the config path.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configPath\"));\n\n    // Display the config name.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configName\"));\n\n    // Display the config extension.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configExtension\"));\n\n    // Display the config mode.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configMode\"));\n\n    // Display the config encryption.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configEncryption\"));\n\n    // Display the config compression.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configCompression\"));\n\n    // Display the config clear.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configClear\"));\n\n    // Display the config clear interval.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configClearInterval\"));\n\n    // Display the config clear interval units.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configClearIntervalUnits\"));\n\n    // Display the config clear interval units.\n    EditorGUILayout.PropertyField(serializedObject.FindProperty(\"_configClearIntervalUnits\"));\n\n    // Display the config clear interval units.", "CodeBleu_score": 47.95875115326855}, {"code": "public override void OnInspectorGUI(){\n\t// Update the serialized object\n    serializedObject.Update();\n\n    // Display the ConfigComponent\n    EditorGUILayout.PropertyField(configComponentProperty, true);\n\n    // If the application is playing and the target is a prefab in the hierarchy\n    if (Application.isPlaying && PrefabUtility.IsPartOfPrefabAsset(target)) {\n        // Display the config count\n        EditorGUILayout.LabelField(\"Config Count\", configComponentProperty.objectReferenceValue.GetConfigCount().ToString());\n\n        // Display the cached bytes size\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", configComponentProperty.objectReferenceValue.GetCachedBytesSize().ToString());\n    }\n\n    // Display the Configs property\n    EditorGUILayout.PropertyField(configsProperty, true);\n\n    // If the application is playing\n    if (Application.isPlaying) {\n        // Display the Configs property in a disabled group\n        EditorGUI.BeginDisabledGroup(true);\n        EditorGUILayout.PropertyField(configsProperty, true);\n        EditorGUI.EndDisabledGroup();\n    }\n\n    // Apply changes to the serialized object\n    serializedObject.ApplyModifiedProperties();\n\n    // Repaint the inspector\n    Repaint();\n}", "CodeBleu_score": 58.09036938765295}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\tHashSet<string> defaultScenes = new HashSet<string> {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/Game.unity\",\n        \"Assets/Scenes/GameOver.unity\"\n    };\n\n    List<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n\n    foreach (string scene in defaultScenes) {\n        scenes.Add(new EditorBuildSettingsScene(scene, true));\n    }\n\n    EditorBuildSettings.scenes = scenes.ToArray();\n    Debug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 56.80800382440694}, {"code": "public static void DefaultScenes(){\n\tvar defaultScenes = new HashSet<string>() {\n\t\t\"Assets/Scenes/MainMenu.unity\",\n\t\t\"Assets/Scenes/Game.unity\",\n\t\t\"Assets/Scenes/GameOver.unity\"\n\t};\n\n\tvar scenes = new List<EditorBuildSettingsScene>();\n\n\tfor (int i = 0; i < EditorBuildSettings.scenes.Length; i++) {\n\t\tvar scene = EditorBuildSettings.scenes[i];\n\t\tif (defaultScenes.Contains(scene.path)) {\n\t\t\tscenes.Add(scene);\n\t\t}\n\t}\n\n\tEditorBuildSettings.scenes = scenes.ToArray();\n\tDebug.Log(\"Scenes set to default\");\n}", "CodeBleu_score": 44.83791797566406}, {"code": "public static void DefaultScenes(){\n\t//Create a HashSet of default scene names\n    HashSet<string> defaultScenes = new HashSet<string>();\n    defaultScenes.Add(\"Assets/Scenes/MainMenu.unity\");\n    defaultScenes.Add(\"Assets/Scenes/Main.unity\");\n    defaultScenes.Add(\"Assets/Scenes/GameOver.unity\");\n\n    //Convert the HashSet of default scene names into a list of EditorBuildSettingsScene objects\n    List<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n    foreach (string scene in defaultScenes) {\n        scenes.Add(new EditorBuildSettingsScene(scene, true));\n    }\n\n    //Update the EditorBuildSettings with the list of EditorBuildSettingsScene objects\n    EditorBuildSettings.scenes = scenes.ToArray();\n\n    //Log that the scenes have been set to the default\n    Debug.Log(\"Scenes have been set to default\");\n}", "CodeBleu_score": 63.83226494369156}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\tEditorGUI.BeginChangeCheck();\n\n    // Draws the popup menu for selecting a helper type\n    int selectedIndex = EditorGUILayout.Popup(selectedIndex, helperTypeNames);\n\n    // If the selected index is -1, it means no helper type is selected\n    if (selectedIndex == -1) {\n        // Draws the custom helper field\n        EditorGUILayout.PropertyField(customHelper);\n\n        // If the custom helper is not set, displays an error message\n        if (!customHelper.objectReferenceValue) {\n            EditorGUILayout.HelpBox(\"Please select a helper type or specify a custom helper.\", MessageType.Error);\n        }\n    }\n    else {\n        // Sets the selected helper type\n        helperType.enumValueIndex = selectedIndex;\n    }\n\n    // If the selected index changed, updates the selected index accordingly\n    if (EditorGUI.EndChangeCheck()) {\n        selectedIndex = helperType.enumValueIndex;\n    }\n}", "CodeBleu_score": 33.29838587258288}, {"code": "public void Draw(){\n\t// If the helper type is not set, show an error message.\n    if (SelectedIndex == -1) {\n        EditorGUILayout.HelpBox(\"No helper type selected.\", MessageType.Error);\n    }\n\n    // If the helper type is set, show a dropdown menu for selecting a helper type.\n    else {\n        // Get the helper type name.\n        string helperTypeName = HelperTypeNames[SelectedIndex];\n\n        // Get the helper type.\n        Type helperType = HelperTypes[SelectedIndex];\n\n        // Get the helper type display name.\n        string helperTypeDisplayName = FieldNameForDisplay(helperTypeName);\n\n        // Get the helper type field name.\n        string helperTypeFieldName = $\"{helperTypeName}Helper\";\n\n        // Get the helper type field.\n        FieldInfo helperTypeField = typeof(T).GetField(helperTypeFieldName);\n\n        // Get the helper type field value.\n        object helperTypeFieldValue = helperTypeField.GetValue(Target);\n\n        // Get the helper type field value type.\n        Type helperTypeFieldValueType = helperTypeFieldValue.GetType();\n\n        // If the helper type field value is null, show an error message.\n        if (helperTypeFieldValue == null) {\n            EditorGUILayout.HelpBox($\"{helperTypeDisplayName} is not set.\", MessageType.Error);\n        }\n\n        // If the helper type field value is not null, show a dropdown menu for selecting a helper type.\n        else {\n            // Get the helper type field value display name.\n            string helperTypeFieldValueDisplayName = FieldNameForDisplay(helperTypeFieldValueType.Name);\n\n            // Show a dropdown menu for selecting a helper type.\n            EditorGUILayout.BeginHorizontal();\n            EditorGUILayout.PrefixLabel(helperTypeDisplayName);\n            if (GUILayout.Button(helperTypeFieldValueDisplayName, EditorStyles.popup)) {\n                // Show the helper type dropdown menu.\n                GenericMenu helperTypeMenu = new GenericMenu();\n                for (int i = 0; i < HelperTypeNames.Length; i++) {\n                    string helperTypeName = HelperTypeNames[i];", "CodeBleu_score": 32.188121461618216}, {"code": "public void Draw(){\n\t", "CodeBleu_score": 0.774837219396175}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\tRemoveScriptingDefineSymbols(new string[] { \"LOGGING\" });\n\t\n\tforeach (LogLevel logLevel in Enum.GetValues(typeof(LogLevel))) {\n\t\tif (logLevel < LogLevel.None) {\n\t\t\tRemoveScriptingDefineSymbols(new string[] { logLevel.ToString() });\n\t\t}\n\t}\n}", "CodeBleu_score": 15.662061429817081}, {"code": "public static void DisableAllLogs(){\n\tRemoveScriptingDefineSymbols(new string[] { \"LOG_ALL\" });\n\tRemoveScriptingDefineSymbols(new string[] { \"LOG_INFO\", \"LOG_WARNING\", \"LOG_ERROR\", \"LOG_EXCEPTION\" });\n}", "CodeBleu_score": 9.955206630347543}, {"code": "public static void DisableAllLogs(){\n\tRemoveSymbol(LOGGING_SYMBOL);\n\tforeach(LogLevel level in Enum.GetValues(typeof(LogLevel))) {\n\t\tif(level <= LogLevel.None) {\n\t\t\tRemoveSymbol(LOGGING_SYMBOL + level.ToString());\n\t\t}\n\t}\n}", "CodeBleu_score": 18.870542485122748}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\tGameFrameworkComponent component = null;\n\tGameFrameworkComponent currentComponent = GameFramework.GameFrameworkComponent.FirstComponent;\n\twhile (currentComponent != null) {\n\t\tif (currentComponent.GetType() == type) {\n\t\t\tcomponent = currentComponent;\n\t\t\tbreak;\n\t\t}\n\t\tcurrentComponent = currentComponent.NextComponent;\n\t}\n\treturn component;\n}", "CodeBleu_score": 43.930512815797385}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\tGameFrameworkComponent component = GameFrameworkComponent.first;\n\n\twhile (component != null) {\n\t\tif (component.GetType() == type) {\n\t\t\treturn component;\n\t\t}\n\n\t\tcomponent = component.next;\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 46.44285886133355}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\tGameFrameworkComponent component = null;\n\tGameFrameworkComponent nextComponent = null;\n\t\n\tcomponent = GameFramework.gameFrameworkComponent;\n\t\n\twhile (component != null) {\n\t\tif (component.GetType() == type) {\n\t\t\treturn component;\n\t\t}\n\t\t\n\t\tnextComponent = component.nextGameFrameworkComponent;\n\t\t\n\t\tcomponent = nextComponent;\n\t}\n\t\n\treturn null;\n}", "CodeBleu_score": 39.492646290409574}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\tDebug.Log(\"Shutdown: \" + shutdownType);\n\n    if (BaseComponent.Instance != null) {\n        BaseComponent.Instance.Shutdown();\n    }\n\n    ClearGameFrameworkComponents();\n\n    switch (shutdownType) {\n        case ShutdownType.Restart:\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            Application.Quit();\n            break;\n        case ShutdownType.None:\n            break;\n    }\n}", "CodeBleu_score": 28.19320594219301}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t// Log the shutdown action\n\tDebug.Log(\"Shutting down game framework...\");\n\n\t// Shutdown the BaseComponent if it exists\n\tif (BaseComponent.instance != null) {\n\t\tBaseComponent.instance.Shutdown();\n\t}\n\n\t// Clear all game framework components\n\tBaseComponent.ClearAllComponents();\n\n\t// Depending on the shutdown type, restart the game scene, quit the application, or do nothing if the type is None\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.Restart:\n\t\t\tSceneManager.LoadScene(SceneManager.GetActiveScene().name);\n\t\t\tbreak;\n\t\tcase ShutdownType.Quit:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t\tcase ShutdownType.None:\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 22.271030241531946}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t// Log the shutdown type\n    Debug.Log(\"Shutting down with type: \" + shutdownType);\n\n    // Shutdown the BaseComponent\n    if(BaseComponent.Instance != null) {\n        BaseComponent.Instance.Shutdown();\n    }\n\n    // Clear the Game Framework components\n    ClearGameFrameworkComponents();\n\n    // Handle the shutdown type\n    switch(shutdownType) {\n        case ShutdownType.Restart:\n            // Restart the game scene\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            // Quit the application\n            Application.Quit();\n            break;\n        case ShutdownType.None:\n            // Do nothing\n            break;\n    }\n}", "CodeBleu_score": 28.46173385248222}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\tbase.Awake();\n    configManager = GameFrameworkEntry.GetModule<ConfigManager>();\n    if (configManager == null) {\n        Log.Fatal(\"ConfigManager is null.\");\n    }\n\n    configManager.ReadDataSuccess += OnReadDataSuccess;\n    configManager.ReadDataFailure += OnReadDataFailure;\n    if ((loadType & LoadType.Update) != 0) {\n        configManager.UpdateDataSuccess += OnUpdateDataSuccess;\n        configManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n\n    if ((loadType & LoadType.DependencyAsset) != 0) {\n        configManager.LoadDependencyAssetSuccess += OnLoadDependencyAssetSuccess;\n        configManager.LoadDependencyAssetFailure += OnLoadDependencyAssetFailure;\n    }\n}", "CodeBleu_score": 54.8687033074126}, {"code": "protected override void Awake(){\n\tbase.Awake();\n\n    // Obtain the configuration manager from the GameFrameworkEntry module\n    ConfigurationManager = GameFrameworkEntry.ConfigurationManager;\n\n    // Check if the configuration manager is valid\n    if (ConfigurationManager == null) {\n        Debug.LogFatal(\"ConfigurationManager is invalid. Check GameFrameworkEntry for initialization errors.\");\n    }\n\n    // Subscribe to events for reading data success and failure\n    ConfigurationManager.ReadDataSuccess += OnReadDataSuccess;\n    ConfigurationManager.ReadDataFailure += OnReadDataFailure;\n\n    // Subscribe to events for update and dependency asset events based on specific flags\n    if (UpdateConfigurationWhenAssetUpdates) {\n        ConfigurationManager.UpdateConfigurationWhenAssetUpdates = true;\n        ConfigurationManager.UpdateConfigurationWhenAssetUpdatesSuccess += OnUpdateConfigurationWhenAssetUpdatesSuccess;\n        ConfigurationManager.UpdateConfigurationWhenAssetUpdatesFailure += OnUpdateConfigurationWhenAssetUpdatesFailure;\n    }\n    if (UpdateConfigurationWhenDependencyAssetUpdates) {\n        ConfigurationManager.UpdateConfigurationWhenDependencyAssetUpdates = true;\n        ConfigurationManager.UpdateConfigurationWhenDependencyAssetUpdatesSuccess += OnUpdateConfigurationWhenDependencyAssetUpdatesSuccess;\n        ConfigurationManager.UpdateConfigurationWhenDependencyAssetUpdatesFailure += OnUpdateConfigurationWhenDependencyAssetUpdatesFailure;\n    }\n}", "CodeBleu_score": 29.651101454453915}, {"code": "protected override void Awake(){\n\tbase.Awake();\n\n    // Obtain the configuration manager from the GameFrameworkEntry module\n    if (!Entry.TryGetModule(out IConfigurationManager configurationManager)) {\n        Debug.LogFatal(\"ConfigurationManager not found\");\n    }\n\n    // Check if the configuration manager is valid\n    if (configurationManager == null) {\n        Debug.LogFatal(\"ConfigurationManager is null\");\n    }\n\n    // Assign the configuration manager\n    this.configurationManager = configurationManager;\n\n    // Subscribe to events for reading data success and failure\n    this.configurationManager.ReadDataSuccess += OnReadDataSuccess;\n    this.configurationManager.ReadDataFailure += OnReadDataFailure;\n\n    // Subscribe to events for update and dependency asset events based on specific flags\n    if (this.updateFlag) {\n        this.configurationManager.UpdateDataSuccess += OnUpdateDataSuccess;\n        this.configurationManager.UpdateDataFailure += OnUpdateDataFailure;\n    }\n\n    if (this.dependencyAssetFlag) {\n        this.configurationManager.DependencyAssetSuccess += OnDependencyAssetSuccess;\n        this.configurationManager.DependencyAssetFailure += OnDependencyAssetFailure;\n    }\n}", "CodeBleu_score": 38.41847353141215}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t// Check if the config asset is a TextAsset\n    TextAsset textAsset = configAsset as TextAsset;\n\n    if (textAsset == null) {\n        Debug.LogWarning(\"Invalid config asset type: \" + configAssetName);\n        return false;\n    }\n\n    // Check if the config asset ends with a specific byte extension\n    if (configAssetName.EndsWith(\".bytes\")) {\n        // Parse the data as bytes\n        return ReadBytes(configManager, textAsset.bytes, userData);\n    }\n    else {\n        // Parse the data as text\n        return ReadText(configManager, textAsset.text, userData);\n    }\n}", "CodeBleu_score": 62.544258198360545}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tif (!(configAsset is TextAsset)) {\n\t\tDebug.LogWarning(\"Config asset must be a TextAsset.\");\n\t\treturn false;\n\t}\n\n\tstring configData = (configAsset as TextAsset).text;\n\n\tif (configData.Length == 0) {\n\t\tDebug.LogWarning(\"Config asset is empty.\");\n\t\treturn false;\n\t}\n\n\tif (configData.EndsWith(\".bytes\")) {\n\t\treturn ReadDataBytes(configManager, configData);\n\t}\n\telse {\n\t\treturn ReadDataText(configManager, configData);\n\t}\n}", "CodeBleu_score": 47.027829429990675}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\tTextAsset configTextAsset = configAsset as TextAsset;\n\n    if (configTextAsset == null) {\n        Debug.LogWarning(\"Config asset is not a TextAsset!\");\n        return false;\n    }\n\n    string configAssetExtension = configAssetName.Substring(configAssetName.LastIndexOf(\".\") + 1);\n    if (configAssetExtension == \"bytes\") {\n        return ReadBytes(configManager, configTextAsset.bytes, userData);\n    } else {\n        return ReadText(configManager, configTextAsset.text, userData);\n    }\n}", "CodeBleu_score": 66.95045677740576}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\tbool success = true;\n\ttry {\n\t\tusing (MemoryStream stream = new MemoryStream(configBytes, startIndex, length)) {\n\t\t\tusing (BinaryReader reader = new BinaryReader(stream)) {\n\t\t\t\twhile (stream.Position < length) {\n\t\t\t\t\tstring name = reader.ReadString();\n\t\t\t\t\tstring value = reader.ReadString();\n\t\t\t\t\tif (!configManager.AddConfig(name, value)) {\n\t\t\t\t\t\tsuccess = false;\n\t\t\t\t\t\tif (configManager.GetConfig(name) != null) {\n\t\t\t\t\t\t\tDebug.LogWarning(\"Config \" + name + \" already exists in config manager \" + configManager.Name + \".\");\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tDebug.LogWarning(\"Config \" + name + \" is invalid and could not be added to config manager \" + configManager.Name + \".\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\tDebug.LogException(e);\n\t\tsuccess = false;\n\t}\n\treturn success;\n}", "CodeBleu_score": 47.762530913701816}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t// Create a MemoryStream from the byte array.\n    using (MemoryStream stream = new MemoryStream(configBytes, startIndex, length)) {\n        // Create a BinaryReader from the MemoryStream.\n        using (BinaryReader reader = new BinaryReader(stream)) {\n            // Read the number of config entries.\n            int entryCount = reader.ReadInt32();\n\n            // For each config entry...\n            for (int i = 0; i < entryCount; i++) {\n                // Read the name of the config entry.\n                string name = reader.ReadString();\n                // Read the value of the config entry.\n                string value = reader.ReadString();\n\n                // Attempt to add the config entry.\n                if (!configManager.AddConfig(name, value)) {\n                    // Log a warning if the config entry could not be added.\n                    Debug.LogWarning(\"Could not add config entry \\\"\" + name + \"\\\" with value \\\"\" + value + \"\\\".\");\n                }\n            }\n        }\n    }\n\n    // Return true to indicate that the data was parsed successfully.\n    return true;\n}", "CodeBleu_score": 39.739973422160936}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t// Create a MemoryStream and BinaryReader from the byte array\n    MemoryStream stream = new MemoryStream(configBytes, startIndex, length, false);\n    BinaryReader reader = new BinaryReader(stream);\n\n    // Read the number of config entries\n    int entryCount = reader.ReadInt32();\n\n    // Read each config entry\n    for (int i = 0; i < entryCount; i++) {\n        // Read the config name\n        string name = reader.ReadString();\n\n        // Read the config value\n        string value = reader.ReadString();\n\n        // Add the config entry to the config manager\n        if (!configManager.AddConfig(name, value)) {\n            // Log a warning that the config entry could not be added\n            Log.Warning(\"Could not add config entry: \" + name + \" = \" + value);\n\n            // Return false to indicate that the config entry could not be added\n            return false;\n        }\n    }\n\n    // Return true to indicate that the config data was parsed successfully\n    return true;\n}", "CodeBleu_score": 38.501110805864705}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\tif (configAsset == null) {\n\t\tthrow new ArgumentNullException(\"configAsset\");\n\t}\n\n\tif (configManager == null) {\n\t\tthrow new ArgumentNullException(\"configManager\");\n\t}\n\n\tif (configManager.ResourceComponent == null) {\n\t\tthrow new InvalidOperationException(\"configManager.ResourceComponent is null\");\n\t}\n\n\tconfigManager.ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 45.426801909613644}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\tif (configAsset == null) {\n        throw new ArgumentNullException(\"configAsset\");\n    }\n\n    if (configManager == null) {\n        throw new ArgumentNullException(\"configManager\");\n    }\n\n    if (!(configAsset is Resource)) {\n        throw new ArgumentException(string.Format(\"configAsset must be of type {0}\", typeof(Resource).FullName), \"configAsset\");\n    }\n\n    Resource resource = (Resource)configAsset;\n    resource.UnloadAsset();\n}", "CodeBleu_score": 40.874986401736486}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t// Get the resource component.\n    IResource resourceComponent = configManager.GetResourceComponent();\n\n    // Unload the asset.\n    resourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 43.29172854113146}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\treturn new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n}", "CodeBleu_score": 12.494486123932775}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\treturn new ActiveSceneChangedEventArgs(lastActiveScene, activeScene);\n    }", "CodeBleu_score": 12.758916683457343}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\treturn new ActiveSceneChangedEventArgs()\n            {\n                LastActiveScene = lastActiveScene,\n                ActiveScene = activeScene\n            };\n        }", "CodeBleu_score": 19.118662526565398}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\n\t\tDebug.LogError(\"Scene asset name is null or empty.\");\n\t}\n\n\tif (!sceneAssetName.StartsWith(\"Assets/\")) {\n\t\tDebug.LogError(\"Scene asset name must start with \\\"Assets/\\\".\");\n\t}\n\n\tif (!sceneAssetName.EndsWith(\".unity\")) {\n\t\tDebug.LogError(\"Scene asset name must end with \\\".unity\\\".\");\n\t}\n\n\tSceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 52.88642605855702}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (sceneAssetName == null) {\n        Debug.LogError(\"Scene asset name cannot be null.\");\n        return;\n    }\n    if (!sceneAssetName.StartsWith(\"Assets/\")) {\n        Debug.LogError(\"Scene asset name must start with \\\"Assets/\\\"\");\n        return;\n    }\n    if (!sceneAssetName.EndsWith(\".unity\")) {\n        Debug.LogError(\"Scene asset name must end with \\\".unity\\\"\");\n        return;\n    }\n    SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 52.74818835260198}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\n        Debug.LogError(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\")) {\n        Debug.LogError(\"Scene asset name must start with \\\"Assets/\\\".\");\n        return;\n    }\n\n    if (!sceneAssetName.EndsWith(\".unity\")) {\n        Debug.LogError(\"Scene asset name must end with \\\".unity\\\".\");\n        return;\n    }\n\n    SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 62.33999602482927}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\tUE_LOG(LogBinariesPatchFeature, Display, TEXT(\"BinariesPatchFeatureModule::StartupModule\"));\n\t\n\tFModuleManager::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::HandleModularFeatureRegistered);\n\tFModuleManager::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::HandleModularFeatureUnregistered);\n\n\tfor (const FModularFeature& ModularFeature : FModuleManager::Get().GetModularFeatureImplementations(BinariesPatchFeatureName)) {\n\t\tRegisterFeature(ModularFeature);\n\t}\n}", "CodeBleu_score": 39.87182072351373}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t// Register for when modular features are registered or unregistered.\n\tFModuleManager::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tFModuleManager::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n\n\t// Get a list of registered modular features.\n\tTArray<FModularFeature*> RegisteredModularFeatures;\n\tFModuleManager::Get().QueryModularFeatures(FBinariesPatchFeatureName, RegisteredModularFeatures);\n\n\t// Loop through each registered feature and append its name to the binaries patch feature enumerations.\n\tfor (FModularFeature* RegisteredModularFeature : RegisteredModularFeatures) {\n\t\tFBinariesPatchFeatureName::Type FeatureName = RegisteredModularFeature->GetName();\n\t\tif (FeatureName != FBinariesPatchFeatureName::None) {\n\t\t\tFBinariesPatchFeatureName::Append(FeatureName);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.858608224454045}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t// Register for the callbacks for when modular features are registered or unregistered.\n\tFModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::HandleModularFeatureRegistered);\n\tFModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::HandleModularFeatureUnregistered);\n\n\t// Retrieve registered feature implementations and append their names to the binaries patch feature enumerations.\n\tTArray<IBinariesPatchFeature*> binariesPatchFeatures = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesPatchFeature>(IBinariesPatchFeature::GetModularFeatureName());\n\tfor (IBinariesPatchFeature* binariesPatchFeature : binariesPatchFeatures) {\n\t\tif (binariesPatchFeature != nullptr) {\n\t\t\tEFeatureBinariesPatchType binariesPatchType = binariesPatchFeature->GetBinariesPatchType();\n\t\t\tif (binariesPatchType != EFeatureBinariesPatchType::None) {\n\t\t\t\tEFeatureBinariesPatchType* binariesPatchTypePtr = BinariesPatchFeatureTypeMap.Find(binariesPatchFeature->GetModularFeatureName());\n\t\t\t\tif (binariesPatchTypePtr == nullptr) {\n\t\t\t\t\tBinariesPatchFeatureTypeMap.Add(binariesPatchFeature->GetModularFeatureName(), binariesPatchType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.077566481173136}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\tTArray<FString> result;\n    TMap<FString, FString> ParsedCommandlineMap;\n    FCommandLine::Parse(FCommandLine::Get(), ParsedCommandlineMap);\n    if (ParsedCommandlineMap.Contains(Token)) {\n        FString Value = *ParsedCommandlineMap.Find(Token);\n        Value.ParseIntoArray(result, TEXT(\",\"), true);\n    }\n    return result;\n}", "CodeBleu_score": 61.0986917650086}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\tTArray<FString> result;\n\tTMap<FString, FString> ParamsMap;\n\tTArray<FString> Switches;\n\tUCommandlet::ParseCommandLine(*Commandline, ParamsMap, Switches);\n\n\tif (!ParamsMap.Contains(Token)) {\n\t\treturn result;\n\t}\n\n\tFString ParamsStr = *ParamsMap.Find(Token);\n\tTArray<FString> Params;\n\tParamsStr.ParseIntoArray(Params, TEXT(\",\"), true);\n\n\tfor (const auto& Param : Params) {\n\t\tresult.Add(Param);\n\n\t}\n\n\treturn result;\n}", "CodeBleu_score": 62.68297178071081}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\tTArray<FString> result;\n\tTMap<FString, FString> ParamsMap;\n\tTArray<FString> Params;\n\tFString LeftS;\n\tFString RightS;\n\tFString CommandlineCopy = Commandline;\n\twhile (CommandlineCopy.Split(TEXT(\"-\"), &LeftS, &RightS, ESearchCase::CaseSensitive)) {\n\t\tFString Param;\n\t\tFString Value;\n\t\tif (RightS.Split(TEXT(\" \"), &Param, &Value, ESearchCase::CaseSensitive)) {\n\t\t\tParamsMap.Add(Param, Value);\n\t\t}\n\t\tCommandlineCopy = RightS;\n\t}\n\n\tif (ParamsMap.Contains(Token)) {\n\t\tFString ParamsStr = ParamsMap[Token];\n\t\tTArray<FString> ParamsArray;\n\t\tParamsStr.ParseIntoArray(ParamsArray, TEXT(\",\"), true);\n\t\tfor (FString& Param : ParamsArray) {\n\t\t\tresult.Add(Param);\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 58.0554280660803}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\tbool isCookCommandlet = false;\n\tif (IsCommandlet()) {\n\t\tFString commandletName = GetCommandletName();\n\t\tif (!commandletName.IsEmpty()) {\n\t\t\tcommandletName.ToLower();\n\t\t\tif (commandletName.Contains(\"cook\")) {\n\t\t\t\tisCookCommandlet = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn isCookCommandlet;\n}", "CodeBleu_score": 38.16438141161558}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\tif (IsRunningCommandlet()) {\n\t\tFString CommandletName = GetCommandletName();\n\t\tif (CommandletName.Len() > 0) {\n\t\t\tif (CommandletName.Contains(TEXT(\"cook\"))) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 23.266380852284087}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t// Check if a commandlet is running\n\tif (IsRunningCommandlet()) {\n\n\t\t// Get the commandlet name\n\t\tFString CommandletName = GetCommandletName();\n\n\t\t// Check if the commandlet name is not empty\n\t\tif (!CommandletName.IsEmpty()) {\n\n\t\t\t// Check if the commandlet name is \"cook\" (case-insensitive)\n\t\t\tif (CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n\n\t\t\t\t// Return true\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return false\n\treturn false;\n}", "CodeBleu_score": 27.456597634310864}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\tTArray<FString> Tokens;\n\tTArray<FString> Switches;\n\tTMap<FString, FString> ParamVals;\n\tUFlibPatchParserHelper::ParseCommandLine(*Params, Tokens, Switches, ParamVals);\n\n\tFString CommandletName = FPaths::GetCleanFilename(Tokens[0]);\n\tFString ProjectName = FPaths::GetBaseFilename(Tokens[0]);\n\tFString ProjectPath = FPaths::GetPath(Tokens[0]);\n\tFString ProjectDirectory = FPaths::Combine(*ProjectPath, *ProjectName);\n\n\tif (Switches.Contains(TEXT(\"-server\"))) {\n\t\tFString ServerAddress;\n\t\tFString ServerName;\n\t\tFString ServerPassword;\n\t\tFString ServerMap;\n\t\tFString ServerParameters;\n\t\tFString ServerGame;\n\t\tFString ServerLog;\n\t\tFString ServerLogCmd;\n\t\tFString ServerLogCmdParms;\n\t\tFString ServerLogCmdParmsNoQuotes;\n\t\tFString ServerLogCmdParmsNoQuotesNoEquals;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpace;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpaceNoPlus;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpaceNoPlusNoAt;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpaceNoPlusNoAtNoColon;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpaceNoPlusNoAtNoColonNoQuestion;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpaceNoPlusNoAtNoColonNoQuestionNoAmpersand;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpaceNoPlusNoAtNoColonNoQuestionNoAmpersandNoDollar;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpaceNoPlusNoAtNoColonNoQuestionNoAmpersandNoDollarNoPercent;\n\t\tFString ServerLogCmdParmsNoQuotesNoEqualsNoSpaceNoPlusNoAtNoCol", "CodeBleu_score": 30.656466610366838}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\tTArray<FString> Tokens;\n\tTArray<FString> Switches;\n\tTMap<FString, FString> ParamVals;\n\tUFlibPatchParserHelper::ParseCommandLine(*Params, Tokens, Switches, ParamVals);\n\tFString CommandletName;\n\tfor (const auto& Token : Tokens) {\n\t\tif (!Token.StartsWith(TEXT(\"-\"))) {\n\t\t\tCommandletName = Token;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (CommandletName.IsEmpty()) {\n\t\tCommandletName = TEXT(\"Unknown\");\n\t}\n\n\tif (UFlibPatchParserHelper::GetBoolOption(*Params, TEXT(\"Server\"))) {\n\t\tFString ProjectName = UFlibPatchParserHelper::GetStringOption(*Params, TEXT(\"ProjectName\"), TEXT(\"\"));\n\t\tFString ProjectVersion = UFlibPatchParserHelper::GetStringOption(*Params, TEXT(\"ProjectVersion\"), TEXT(\"\"));\n\t\tFString ProjectID = UFlibPatchParserHelper::GetStringOption(*Params, TEXT(\"ProjectID\"), TEXT(\"\"));\n\t\tFString ProjectChannel = UFlibPatchParserHelper::GetStringOption(*Params, TEXT(\"ProjectChannel\"), TEXT(\"\"));\n\t\tFString ProjectPlatform = UFlibPatchParserHelper::GetStringOption(*Params, TEXT(\"ProjectPlatform\"), TEXT(\"\"));\n\t\tif (ProjectName.IsEmpty()) {\n\t\t\tProjectName = TEXT(\"Unknown\");\n\t\t}\n\n\t\tif (ProjectVersion.IsEmpty()) {\n\t\t\tProjectVersion = TEXT(\"Unknown\");\n\t\t}\n\n\t\tif (ProjectID.IsEmpty()) {\n\t\t\tProjectID = TEXT(\"Unknown\");\n\t\t}\n\n\t\tif (ProjectChannel.IsEmpty()) {\n\t\t\tProjectChannel = TEXT(\"Unknown\");\n\t\t}\n\n\t\tif (ProjectPlatform.IsEmpty()) {\n\t\t\tProjectPlatform = TEXT(\"Unknown\");\n\t\t}\n\n\t\tFString CounterName = FString::Printf(TEXT(\"%s_%s_%s_%s_%s", "CodeBleu_score": 38.15023743059842}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\tFString CommandLine = Params;\n\tTArray<FString> Tokens;\n\tTArray<FString> Switches;\n\tTMap<FString, FString> ParamVals;\n\tUFlibPatchParserHelper::ParseCommandLine(*CommandLine, Tokens, Switches, ParamVals);\n\n\tif (Switches.Contains(TEXT(\"-server\"))) {\n\t\tUFlibPatchParserHelper::GetServerProjectFile(ServerProjectFile);\n\t\tUFlibPatchParserHelper::GetServerConfig(ServerConfig);\n\t\tUFlibPatchParserHelper::GetServerName(ServerName);\n\t\tUFlibPatchParserHelper::GetServerHost(ServerHost);\n\t\tUFlibPatchParserHelper::GetServerPort(ServerPort);\n\t\tUFlibPatchParserHelper::GetServerPassword(ServerPassword);\n\t\tUFlibPatchParserHelper::GetServerLog(ServerLog);\n\t\tUFlibPatchParserHelper::GetServerLogPath(ServerLogPath);\n\t\tUFlibPatchParserHelper::GetServerLogMode(ServerLogMode);\n\t\tUFlibPatchParserHelper::GetServerLogLevel(ServerLogLevel);\n\t\tUFlibPatchParserHelper::GetServerLogFile(ServerLogFile);\n\t\tUFlibPatchParserHelper::GetServerLogTime(ServerLogTime);\n\t\tUFlibPatchParserHelper::GetServerLogMax(ServerLogMax);\n\t\tUFlibPatchParserHelper::GetServerLogMaxBackup(ServerLogMaxBackup);\n\t\tUFlibPatchParserHelper::GetServerLogCategory(ServerLogCategory);\n\t\tUFlibPatchParserHelper::GetServerLogCmd(ServerLogCmd);\n\t\tUFlibPatchParserHelper::GetServerLogQuiet(ServerLogQuiet);\n\t\tUFlibPatchParserHelper::GetServerLogVerbose(ServerLogVerbose);\n\t\tUFlibPatchParserHelper::GetServerLogVeryVerbose(ServerLogVeryVerbose);\n\t\tUFlibPatchParserHelper::GetServerLogSuppress(ServerLogSuppress);\n\t\tUFlibPatchParserHelper::GetServerLogSuppress", "CodeBleu_score": 29.289280413360174}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\tbool bIsAppleMetalPlatform = false;\n\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tPlatformName.ToUpperInline();\n\t\tbIsAppleMetalPlatform = PlatformName.StartsWith(TEXT(\"IOS\")) || PlatformName.StartsWith(TEXT(\"MAC\")) || PlatformName.StartsWith(TEXT(\"TVOS\"));\n\t}\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 40.6902870828696}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\tbool bIsAppleMetalPlatform = false;\n\tif (TargetPlatform) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tif (PlatformName.StartsWith(\"IOS\", ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(\"Mac\", ESearchCase::IgnoreCase) ||\n\t\t\tPlatformName.StartsWith(\"TVOS\", ESearchCase::IgnoreCase)) {\n\t\t\tbIsAppleMetalPlatform = true;\n\t\t}\n\t}\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 40.6351870580522}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\tbool bIsAppleMetalPlatform = false;\n\n\tif (TargetPlatform != nullptr) {\n\t\tFString PlatformName = TargetPlatform->PlatformName();\n\t\tPlatformName.ToUpperInline();\n\n\t\tif (PlatformName.StartsWith(TEXT(\"IOS\")) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"MAC\")) ||\n\t\t\tPlatformName.StartsWith(TEXT(\"TVOS\"))) {\n\t\t\tbIsAppleMetalPlatform = true;\n\t\t}\n\t}\n\n\treturn bIsAppleMetalPlatform;\n}", "CodeBleu_score": 42.8798574796697}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t//UE_LOG(LogTemp, Warning, TEXT(\"NotifyUObjectCreated\"));\n\tif (Object == nullptr) {\n\t\treturn;\n\t}\n\tUPackage* Package = Cast<UPackage>(Object);\n\tif (Package != nullptr) {\n\t\tif (Package->GetOutermost() == nullptr) {\n\t\t\treturn;\n\t\t}\n\t\tif (Package->GetOutermost()->IsValidLowLevel() == false) {\n\t\t\treturn;\n\t\t}\n\t\tif (Package->HasAnyFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects) == false) {\n\t\t\treturn;\n\t\t}\n\t\tif (IsAlwayPostLoadClasses(Package, Package) == false) {\n\t\t\treturn;\n\t\t}\n\t\tif (CookerAssetsSet.Contains(Package) == false && AllAssetsSet.Contains(Package) == true) {\n\t\t\tPackageObjectsMap.Add(Package, Object);\n\t\t\tFreezeObjects.Add(Object);\n\t\t\tPackage->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.79300903684997}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t//UE_LOG(LogTemp, Warning, TEXT(\"Object Created: %s\"), *Object->GetName());\n\tif (!Object) {\n\t\treturn;\n\t}\n\tUPackage* Package = Object->GetOutermost();\n\tif (!Package) {\n\t\treturn;\n\t}\n\tif (CookerAssetsSet.Contains(Package)) {\n\t\treturn;\n\t}\n\tif (AllAssetsSet.Contains(Package)) {\n\t\tif (IsAlwayPostLoadClasses(Package, Object)) {\n\t\t\treturn;\n\t\t}\n\t\tPackageObjectsMap.FindOrAdd(Package).Add(Object);\n\t\tFreezeObjects.Add(Object);\n\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t}\n}", "CodeBleu_score": 37.23707237582513}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\tif (Object == nullptr) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA<UPackage>()) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA<UField>()) {\n\t\treturn;\n\t}\n\n\tif (Object->IsA<ULinkerPlaceholderExportObject>()) {\n\t\treturn;\n\t}\n\n\tUPackage* Package = Object->GetOutermost();\n\tif (Package == nullptr) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_NeedPostLoad)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_NeedPostLoadSubobjects)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_WasLoaded)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_WasFiltered)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_WasIgnored)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_ClassDefaultObject)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_ArchetypeObject)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_BeginDestroyed)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_FinishDestroyed)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_InheritableComponentTemplate)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_RootSet)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_TagGarbageTemp)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_PendingKill)) {\n\t\treturn;\n\t}\n\n\tif (Package->HasAnyFlags(RF_Unreachable)) {", "CodeBleu_score": 31.433916744694084}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (FRecord* BulkDataRecord : Record.BulkDataRecords)\n\t{\n\t\tif (BulkDataRecord->BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t{\n\t\t\t// This bulk data is inlined, so we don't need to do anything\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (BulkDataRecord->BulkDataFlags & BULKDATA_PayloadAtEndOfFile)\n\t\t{\n\t\t\t// This bulk data is at the end of the file, so we don't need to do anything\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (BulkDataRecord->BulkDataFlags & BULKDATA_SizeAtEndOfFile)\n\t\t{\n\t\t\t// This bulk data is at the end of the file, so we don't need to do anything\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (BulkDataRecord->BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t{\n\t\t\t// This bulk data is inlined, so we don't need to do anything\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (BulkDataRecord->BulkDataFlags & BULKDATA_BadDataVersion)\n\t\t{\n\t\t\t// This bulk data is inlined, so we don't need to do anything\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (BulkDataRecord->BulkDataFlags & BULKDATA_Unused)\n\t\t{\n\t\t\t// This bulk data is inlined, so we don't need to do anything\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (BulkDataRecord->BulkDataFlags & BULKDATA_NoExport)\n\t\t{\n\t\t\t// This bulk data is inlined, so we don't need to do anything\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (BulkDataRecord->BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t{\n\t\t\t// This bulk data is inlined, so we don't need to do anything", "CodeBleu_score": 25.724387489824153}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (FRecord::FSubRecordIterator SubRecordIt(Record); SubRecordIt; ++SubRecordIt)\n\t{\n\t\tFSubRecord& SubRecord = *SubRecordIt;\n\t\tif (SubRecord.IsBulkData())\n\t\t{\n\t\t\tFSubRecord::FBulkData& BulkData = SubRecord.GetBulkData();\n\t\t\tif (BulkData.bIsExport)\n\t\t\t{\n\t\t\t\tFExportBulkData& ExportBulkData = BulkData.GetExportBulkData();\n\t\t\t\tFExportBulkDataEntry* ExportBulkDataEntry = new FExportBulkDataEntry(ExportBulkData.BulkDataFlags, ExportBulkData.GetBulkDataSize(), ExportBulkData.GetBulkData());\n\t\t\t\tContext.ExportBulkData.Add(ExportBulkData.BulkDataFlags, ExportBulkDataEntry);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tFOutputFile* OutputFile = new FOutputFile(SubRecord.GetName(), BulkData.GetBulkData(), BulkData.GetBulkDataSize(), BulkData.BulkDataFlags);\n\t\t\t\tContext.OutputFiles.Add(OutputFile);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 40.919424905050604}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (FRecord* Child : Record.Children)\n\t{\n\t\tif (Child->Type == FRecord::BulkData)\n\t\t{\n\t\t\tFBulkDataHeader& BulkDataHeader = *(FBulkDataHeader*)Child->Data;\n\t\t\tif (BulkDataHeader.BulkDataFlags & BULKDATA_ForceInlinePayload)\n\t\t\t{\n\t\t\t\t// Inlined bulk data is stored in the record itself.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkDataHeader.BulkDataFlags & BULKDATA_OptionalPayload)\n\t\t\t{\n\t\t\t\t// Optional bulk data is not stored at all.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (BulkDataHeader.BulkDataFlags & BULKDATA_Size64)\n\t\t\t{\n\t\t\t\tFRecord* Size64 = Child->FindChild(FName(TEXT(\"Size64\")));\n\t\t\t\tif (Size64)\n\t\t\t\t{\n\t\t\t\t\tBulkDataHeader.BulkDataSize64 = *(int64*)Size64->Data;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (BulkDataHeader.BulkDataFlags & BULKDATA_StoreInSeparateFile)\n\t\t\t{\n\t\t\t\t// Separate bulk data is stored in a separate file.\n\t\t\t\tFString FileName = Child->FindChild(FName(TEXT(\"BulkDataName\")))->FindChild(FName(TEXT(\"Data\")))->StringData;\n\t\t\t\tFString FilePath = FString::Printf(TEXT(\"%s/%s\"), *Context.BulkDataDirectory, *FileName);\n\n\t\t\t\tFOutputFile* OutputFile = Context.OutputFiles.Find(FilePath);\n\t\t\t\tif (!OutputFile)\n\t\t\t\t{\n\t\t\t\t\tOutputFile = &Context.OutputFiles.Add(FilePath);\n\t\t\t\t\tOutputFile->Filename = FileName;\n\t\t\t\t\tOutputFile->Flags |= FOutputFile", "CodeBleu_score": 36.66298927064335}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Context.bIsExportDiff) {\n\t\tif (Context.DiffExportRecord.Num() == Context.ExportRecord.Num()) {\n\t\t\treturn;\n\t\t}\n\t}\n\tTArray<uint8> Footer;\n\tFBufferArchive Archive(Footer);\n\tFExportBundleHeader Header;\n\tHeader.Tag = FExportBundleHeader::PackageFileTag;\n\tHeader.Version = FExportBundleHeader::PackageFileVersion;\n\tHeader.HeaderSize = sizeof(FExportBundleHeader);\n\tArchive << Header;\n\tfor (const auto& Export : Context.ExportRecord) {\n\t\tif (Context.bIsExportDiff) {\n\t\t\tif (Context.DiffExportRecord.Contains(Export.Key)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tExport.Value.ExportBuffers.Add(Footer);\n\t}\n}", "CodeBleu_score": 43.43968452330756}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Context.bIsExportDiff) {\n\t\tif (Context.DiffInfo.bIsDiffFinished) {\n\t\t\treturn;\n\t\t}\n\t\tif (!Context.DiffInfo.bIsDiffFinished && Context.DiffInfo.bIsDiffFinished) {\n\t\t\treturn;\n\t\t}\n\t}\n\tif (Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished && Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished && Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished && Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished && Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished && Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished && Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished && Context.ExportInfo.bIsExportFinished) {\n\t\treturn;\n\t}\n\tif (Context.ExportInfo.bIsExportFinished) {\n\t\treturn", "CodeBleu_score": 18.19003074896851}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Context.bIsDiff) {\n\t\tif (Context.ExportedFiles.Num() == 0) {\n\t\t\tContext.bIsDiff = false;\n\t\t\treturn;\n\t\t}\n\t}\n\tif (Context.ExportedFiles.Num() > 0) {\n\t\tTArray<uint8> Footer;\n\t\tFooter.AddUninitialized(sizeof(FPackageFileTag));\n\t\tFMemory::Memcpy(Footer.GetData(), &(FPackageFileTag::GetPackageTag()), sizeof(FPackageFileTag));\n\t\tfor (auto& ExportedFile : Context.ExportedFiles) {\n\t\t\tExportedFile.ExportBuffers.Add(Footer);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.72900251953588}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement) {\n\t\tbWantsToSprint = CharacterMovement->bWantsToSprint;\n\t\tbWantsToAimDownSights = CharacterMovement->bWantsToAimDownSights;\n\t}\n}", "CodeBleu_score": 84.12197636274729}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t}", "CodeBleu_score": 9.247902185169739}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t}", "CodeBleu_score": 9.247902185169739}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\treturn NULL;\n}", "CodeBleu_score": 5.671458607076233}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\treturn NULL;\n}", "CodeBleu_score": 5.671458607076233}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\treturn NULL;\n}", "CodeBleu_score": 5.671458607076233}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t}", "CodeBleu_score": 2.750515142824237}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t}", "CodeBleu_score": 2.750515142824237}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t}", "CodeBleu_score": 2.750515142824237}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tUAbilitySystemComponent* AbilitySystem = EffectRemoved.GetOwningAbilitySystemComponent();\n\tif(AbilitySystem) {\n\t\tTArray<FGameplayTag> GrantedTags;\n\t\tTArray<FGameplayTag> AssetTags;\n\t\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\t\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\t\tif(GrantedTags.Contains(EffectGameplayTag) || AssetTags.Contains(EffectGameplayTag)) {\n\t\t\tOnEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.79434537218123}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tif (EffectRemoved.Spec.Def->GetGameplayEffectTags().HasTag(EffectGameplayTag) || EffectRemoved.Spec.CapturedSourceTags.HasTag(EffectGameplayTag)) {\n\t\tOnEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t}\n}", "CodeBleu_score": 38.22993758931263}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\treturn NULL;\n}", "CodeBleu_score": 5.431334758320041}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\treturn NULL;\n}", "CodeBleu_score": 5.431334758320041}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\treturn NULL;\n}", "CodeBleu_score": 5.431334758320041}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t}", "CodeBleu_score": 4.472107289483353}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tif(EffectRemoved.Spec.Def) {\n\t\tif(EffectRemoved.Spec.Def->OwnedTagsContainer.HasTag(EffectGameplayTag)) {\n\t\t\tOnStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t\t}\n\t\tif(EffectRemoved.Spec.Def->GrantedTagsContainer.HasTag(EffectGameplayTag)) {\n\t\t\tOnStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.866796437895864}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tUAbilitySystemComponent* ASC = EffectRemoved.AbilitySystemComponent.Get();\n\tif (ASC == nullptr) {\n\t\treturn;\n\t}\n\n\tUAbilitySystemComponent* SourceASC = EffectRemoved.Spec.GetContext().GetOriginalInstigatorAbilitySystemComponent();\n\n\tif (ASC == nullptr) {\n\t\treturn;\n\t}\n\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTag(EffectGameplayTag) || GrantedTags.HasTag(EffectGameplayTag)) {\n\t\tFGameplayTagContainer InstigatorTags;\n\t\tif (SourceASC != nullptr) {\n\t\t\tSourceASC->GetOwnedGameplayTags(InstigatorTags);\n\t\t}\n\n\t\tFGameplayTagContainer SourceTags;\n\t\tEffectRemoved.Spec.GetAllSourceTags(SourceTags);\n\n\t\tFGameplayTagContainer TargetTags;\n\t\tEffectRemoved.Spec.GetAllTargetTags(TargetTags);\n\n\t\tFGameplayTagContainer SpecAssetTags;\n\t\tEffectRemoved.Spec.GetAllAssetTags(SpecAssetTags);\n\n\t\tFGameplayTagContainer SpecGrantedTags;\n\t\tEffectRemoved.Spec.GetAllGrantedTags(SpecGrantedTags);\n\n\t\tFGameplayTagContainer SpecSourceTags;\n\t\tEffectRemoved.Spec.GetAllSourceTags(SpecSourceTags);\n\n\t\tFGameplayTagContainer SpecTargetTags;\n\t\tEffectRemoved.Spec.GetAllTargetTags(SpecTargetTags);\n\n\t\tFGameplayTagContainer SpecDefTags;\n\t\tEffectRemoved.Spec.GetAllDefinitionTags(SpecDefTags);\n\n\t\tFGameplayTagContainer SpecPassedTags;\n\t\tEffectRemoved.Spec.GetAllPassedInTags(SpecPassedTags);\n\n\t\tFGameplayTagContainer SpecCapturedSourceTags;\n\t\tEffectRemoved.Spec.GetAllCapturedSourceTags(SpecCapturedSourceTags", "CodeBleu_score": 59.24922122225749}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t}", "CodeBleu_score": 10.576843315760415}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t}", "CodeBleu_score": 5.5821451492039476}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t// Remove the cancellation handler from the ability\n\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay)\n\t{\n\t\tAbility->OnGameplayAbilityCancelled.Remove(AbilityCancelledHandle);\n\t}\n\n\t// Stop playing the montage if the ability has ended and the stop flag is set\n\tif (AbilityEnded && bStopWhenAbilityEnds)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\t// Remove the event tag container delegate from the ability system component, if valid\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->OnGameplayEvent.Remove(GameplayEventDelegateHandle);\n\t}\n\n\t// Call the base class's OnDestroy method\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 72.76713619751631}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t// Remove the cancellation callback\n\tif (Ability)\n\t{\n\t\tAbility->OnGameplayAbilityCancelled.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnAbilityCancelled);\n\t}\n\n\t// Stop the montage if the ability ended and the stop flag is set\n\tif (AbilityEnded && bStopWhenAbilityEnds)\n\t{\n\t\tStopPlayingMontage();\n\t}\n\n\t// Remove the event tag container delegate\n\tif (AbilitySystemComponent.IsValid())\n\t{\n\t\tAbilitySystemComponent->OnGameplayEvent.RemoveDynamic(this, &UGDAT_PlayMontageAndWaitForEvent::OnGameplayEvent);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 71.77685548386215}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t// If the ability ended, check if we should stop the montage\n\tif (AbilityEnded) {\n\t\tif (bStopWhenAbilityEnds) {\n\t\t\tStopPlayingMontage();\n\t\t}\n\t}\n\n\t// Remove the cancellation handler from the ability\n\tif (Ability) {\n\t\tAbility->OnGameplayAbilityCancelled.Remove(AbilityCancelledHandle);\n\t}\n\n\t// Remove the event tag container delegate from the ability system component\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->OnGameplayEvent.Remove(EventTagDelegateHandle);\n\t}\n\n\t// Call the base class's OnDestroy method\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 70.44829931919836}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\treturn false;\n}", "CodeBleu_score": 3.758120540592659}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\treturn false;\n}", "CodeBleu_score": 3.758120540592659}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\treturn false;\n}", "CodeBleu_score": 3.758120540592659}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t}", "CodeBleu_score": 3.964808670140682}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t}", "CodeBleu_score": 3.964808670140682}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\tUSBTService_CheckAttackRange_execTickNode(this, &OwnerComp, NodeMemory, DeltaSeconds);\n}", "CodeBleu_score": 8.771394401964315}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\tAAIController* AIController = OwnerComp.GetAIOwner();\n\tAPawn* AIPawn = AIController->GetPawn();\n\tUAttributeComponent* AttributeComponent = AIPawn->FindComponentByClass<UAttributeComponent>();\n\tif (AttributeComponent) {\n\t\tAttributeComponent->ApplyHealthChange(AttributeComponent->GetMaxHealth(), AIPawn);\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 52.45336881453721}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\tAActor* self = OwnerComp.GetAIOwner()->GetPawn();\n\tif (self) {\n\t\tUAttributeComponent* attr = self->FindComponentByClass<UAttributeComponent>();\n\t\tif (attr) {\n\t\t\tattr->HealthChange(attr->GetMaxHealth());\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 58.70469929821511}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\tAMyBaseCharacter* MyPawn = Cast<AMyBaseCharacter>(OwnerComp.GetAIOwner()->GetPawn());\n\n\tif (MyPawn) {\n\t\tUAttributeComponent* MyAttributeComponent = MyPawn->GetAttributeComponent();\n\t\tif (MyAttributeComponent) {\n\t\t\tMyAttributeComponent->HealthChange(MyAttributeComponent->GetMaxHealth());\n\t\t}\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 60.01967374479143}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t}", "CodeBleu_score": 4.671944925657298}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t}", "CodeBleu_score": 4.671944925657298}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t}", "CodeBleu_score": 4.671944925657298}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* Tickables = World->GetSubsystem<USTickablesSubsystem>();\n\tif (Tickables) {\n\t\tTickables->RemoveTickable(this);\n\t}\n}", "CodeBleu_score": 70.4628010366919}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\n\tif (UWorld* World = GetWorld()) {\n\t\tif (auto* TickableSubsystem = World->GetGameInstance()->GetSubsystem<USTickableSubsystem>()) {\n\t\t\tTickableSubsystem->UnregisterTickable(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 55.92581308281635}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickableComponent* TickableComponent = Cast<USTickableComponent>(this);\n\tif (TickableComponent) {\n\t\tTickableComponent->DeRegisterTickFunction();\n\t}\n}", "CodeBleu_score": 54.32590577491645}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n\t// Check if the owner implements the significance interface\n\tif (USignificanceInterface* SignificanceInterface = Cast<USignificanceInterface>(GetOwner()))\n\t{\n\t\t// If so, set the significance interface\n\t\tSignificanceInterface = SignificanceInterface;\n\t}\n\telse\n\t{\n\t\t// If not, log an error and disable managing significance\n\t\tUE_LOG(LogTemp, Error, TEXT(\"Owner of significance component does not implement the significance interface.\"));\n\t\tbManageSignificance = false;\n\t}\n\n\t// If managing significance is enabled, register the component with the manager\n\tif (bManageSignificance)\n\t{\n\t\t// If bWaitOneFrame is true, schedule the component to register with the manager for the next tick\n\t\tif (bWaitOneFrame)\n\t\t{\n\t\t\tGetWorld()->GetTimerManager().SetTimer(RegisterTimer, this, &USSignificanceComponent::RegisterWithManager, 0.0f, false);\n\t\t}\n\t\t// If bWaitOneFrame is false, register the component with the manager now\n\t\telse\n\t\t{\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\t// Manage particle significance\n\tManageParticleSignificance();\n}", "CodeBleu_score": 49.89199698200243}, {"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (UObject* Owner = GetOwner()) {\n\t\t\tif (!Owner->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n\t\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"Significance component owner does not implement significance interface.\"));\n\t\t\t}\n\t\t}\n\t\tif (bWaitOneFrame) {\n\t\t\tFTimerHandle TimerHandle;\n\t\t\tGetWorld()->GetTimerManager().SetTimer(TimerHandle, this, &USSignificanceComponent::RegisterWithManager, 0.0f, false);\n\t\t} else {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\tif (bManageParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleSystemComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n\t\t\tParticleSystemComponent->bAutoManageSignificance = false;\n\t\t\tParticleSystemComponent->SetSignificanceManager(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 60.99345652096891}, {"code": "void USSignificanceComponent::BeginPlay(){\n\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (!GetOwner()->GetClass()->ImplementsInterface(USignificanceInterface::StaticClass())) {\n\t\t\tUE_LOG(LogTemp, Error, TEXT(\"Actor %s does not implement the significance interface\"), *GetOwner()->GetName());\n\t\t}\n\n\t\tif (bWaitOneFrame) {\n\t\t\tFTimerHandle TimerHandle;\n\t\t\tGetWorldTimerManager().SetTimer(TimerHandle, this, &USSignificanceComponent::RegisterWithManager, 0.01f, false);\n\t\t}\n\t\telse {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\t// Manage particle significance\n\tif (bManageParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleComponents);\n\n\t\tfor (UParticleSystemComponent* ParticleComponent : ParticleComponents) {\n\t\t\tParticleComponent->bAutoManageSignificance = false;\n\t\t}\n\t}\n}", "CodeBleu_score": 62.68098045458411}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t// Retrieve the significance manager from the world\n\tUWorld* World = GetWorld();\n\tif (World == nullptr) {\n\t\treturn;\n\t}\n\tUSignificanceManager* SignificanceManager = World->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\tif (SignificanceManager == nullptr) {\n\t\treturn;\n\t}\n\n\t// Define two lambda functions for calculating significance and handling post-significance updates\n\tauto CalcSignificanceLambda = [this](const FTransform& Viewpoint) -> float {\n\t\treturn CalcSignificance(Viewpoint);\n\t};\n\tauto PostSignificanceUpdateLambda = [this](float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(OldSignificance, Significance, bFinal);\n\t};\n\n\t// Register the component with the manager using the owner's class name as the tag and specifies the lambda functions for significance calculation and updates\n\tSignificanceManager->RegisterObject(GetOwner(), GetOwner()->GetClass()->GetName(), CalcSignificanceLambda, PostSignificanceUpdateLambda);\n}", "CodeBleu_score": 55.059910750320505}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\tif (bRegistered)\n\t{\n\t\treturn;\n\t}\n\n\tbRegistered = true;\n\n\t// Get the significance manager from the world\n\tUWorld* World = GetWorld();\n\tif (World == nullptr)\n\t{\n\t\treturn;\n\t}\n\tUSignificanceManager* SignificanceManager = World->GetGameInstance()->GetSignificanceManager();\n\tif (SignificanceManager == nullptr)\n\t{\n\t\treturn;\n\t}\n\n\t// Define the lambda functions for calculating significance and handling post-significance updates\n\tauto CalcSignificanceLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, const FTransform& Viewpoint) -> float {\n\t\treturn CalcSignificance(ObjectInfo, Viewpoint);\n\t};\n\tauto PostSignificanceUpdateLambda = [this](USignificanceManager::FManagedObjectInfo* ObjectInfo, float OldSignificance, float Significance, bool bFinal) {\n\t\tPostSignificanceUpdate(ObjectInfo, OldSignificance, Significance, bFinal);\n\t};\n\n\t// Register the component with the manager using the owner's class name as the tag and specifies the lambda functions for significance calculation and updates\n\tSignificanceManager->RegisterObject(GetOwner(), GetOwner()->GetClass()->GetName(), CalcSignificanceLambda, PostSignificanceUpdateLambda);\n}", "CodeBleu_score": 70.19662066023069}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\tif (!GetWorld()) return;\n\n\tif (GetWorld()->GetNetMode() == ENetMode::NM_Client) return;\n\n\tif (GetOwner()->IsPendingKill()) return;\n\n\tif (!GetOwner()->IsActorBeingDestroyed()) {\n\t\tauto SignificanceManager = GetWorld()->GetGameInstance()->GetSubsystem<USignificanceManager>();\n\n\t\tif (!SignificanceManager) {\n\t\t\tUE_LOG(LogGame, Error, TEXT(\"SignificanceManager is nullptr\"));\n\t\t\treturn;\n\t\t}\n\n\t\tauto ObjectInfo = SignificanceManager->RegisterObject(GetOwner(), GetOwner()->GetClass()->GetFName(), [this](const FTransform& Viewpoint) {\n\t\t\treturn CalcSignificance(Viewpoint);\n\t\t}, [this](float OldSignificance, float Significance, bool bFinal) {\n\t\t\tPostSignificanceUpdate(OldSignificance, Significance, bFinal);\n\t\t});\n\n\t\tif (ObjectInfo) {\n\t\t\tObjectInfo->bIsVisible = bVisible;\n\t\t}\n\n\t\tSignificanceManager->SetObjectVisible(ObjectInfo, bVisible);\n\t}\n}", "CodeBleu_score": 51.751489288152605}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\treturn false;\n}", "CodeBleu_score": 6.854586066260151}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\treturn false;\n}", "CodeBleu_score": 6.854586066260151}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\treturn false;\n}", "CodeBleu_score": 6.854586066260151}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t}", "CodeBleu_score": 7.060714295012057}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t}", "CodeBleu_score": 7.060714295012057}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t}", "CodeBleu_score": 7.060714295012057}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\tif(!MapName.IsEmpty()) {\n\t\tFLoadingScreenAttributes LoadingScreen;\n\t\tLoadingScreen.WidgetLoadingScreen = CreateWidget<UUserWidget>(GetWorld(), LoadingScreenWidgetClass);\n\t\tLoadingScreen.MoviePlayerLoadingScreen = CreateWidget<UUserWidget>(GetWorld(), MoviePlayerWidgetClass);\n\t\tLoadingScreen.bUseMoviePlayer = true;\n\t\tLoadingScreen.MapName = MapName;\n\n\t\tLoadingScreens.Add(MapName, LoadingScreen);\n\n\t\tUGameplayStatics::SetLoadingScreenAttributes(LoadingScreen);\n\t}\n}", "CodeBleu_score": 61.91845484153649}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\tUGameplayStatics::BeginLoadingScreen(MapName, TEXT(\"LoadingScreen\"), TEXT(\"LoadingScreenWidget\"));\n}", "CodeBleu_score": 30.791408999660693}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\tUFUNCTION_FULL_NAME(\"LoadingScreenSubsystem\", \"BeginLoadingScreen\");\n\tstatic auto fn = UObject::FindObject<UFunction>(\"Function LoadingScreenSubsystem.LoadingScreenSubsystem_C.BeginLoadingScreen\");\n\n\tULoadingScreenSubsystem_BeginLoadingScreen_Params params;\n\tparams.MapName = MapName;\n\n\tauto flags = fn->FunctionFlags;\n\n\tUObject::ProcessEvent(fn, &params);\n\tfn->FunctionFlags = flags;\n\n}", "CodeBleu_score": 34.613676661199996}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t}", "CodeBleu_score": 3.0164811217143837}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t}", "CodeBleu_score": 3.0164811217143837}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t}", "CodeBleu_score": 3.0164811217143837}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\treturn 0.0f;\n}", "CodeBleu_score": 3.7710551015692317}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\treturn 0.0f;\n}", "CodeBleu_score": 3.7710551015692317}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\treturn 0.0f;\n}", "CodeBleu_score": 3.7710551015692317}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t}", "CodeBleu_score": 6.118911449916524}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t}", "CodeBleu_score": 6.118911449916524}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t}", "CodeBleu_score": 6.118911449916524}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\treturn false;\n}", "CodeBleu_score": 12.574366486742239}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\treturn false;\n}", "CodeBleu_score": 12.574366486742239}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\treturn false;\n}", "CodeBleu_score": 12.574366486742239}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\treturn false;\n}", "CodeBleu_score": 7.150835912949022}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\treturn false;\n}", "CodeBleu_score": 7.150835912949022}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\treturn false;\n}", "CodeBleu_score": 7.150835912949022}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tif (!InstigatorPawn) {\n\t\treturn;\n\t}\n\n\tUAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\tif (!AttributeComponent) {\n\t\treturn;\n\t}\n\n\tif (AttributeComponent->GetHealth() == AttributeComponent->GetMaxHealth()) {\n\t\treturn;\n\t}\n\n\tif (!InstigatorPawn->GetController()->CanRemoveCredits(CreditCost)) {\n\t\treturn;\n\t}\n\n\tInstigatorPawn->GetController()->RemoveCredits(CreditCost);\n\tAttributeComponent->ApplyHealthChange(HealthChange);\n\tTriggerCooldown();\n}", "CodeBleu_score": 44.10903155491456}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tif (InstigatorPawn) {\n\t\tUAttributeComponent* InstigatorAttributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\t\tif (InstigatorAttributeComponent) {\n\t\t\tif (InstigatorAttributeComponent->GetCurrentHealth() < InstigatorAttributeComponent->GetMaxHealth()) {\n\t\t\t\tif (InstigatorAttributeComponent->RemoveCredits(CreditsCost)) {\n\t\t\t\t\tInstigatorAttributeComponent->ApplyHealthChange(HealthChange);\n\t\t\t\t\tTriggerCooldown();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.506958573637405}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\tif (InstigatorPawn != nullptr) {\n\t\tUAttributeComponent* attributeComponent = InstigatorPawn->FindComponentByClass<UAttributeComponent>();\n\t\tif (attributeComponent != nullptr) {\n\t\t\tif (attributeComponent->GetHealth() < attributeComponent->GetMaxHealth()) {\n\t\t\t\tif (InstigatorPawn->GetController()->GetPlayerState()->TryRemoveCredits(Cost)) {\n\t\t\t\t\tattributeComponent->ApplyHealthChange(HealthChange);\n\t\t\t\t\tTriggerCooldown();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.00739756318333}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t/*\n\t\tSpawn the impact visual effect at the projectile's location\n\t*/\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ExplosionEffect, GetActorLocation(), GetActorRotation());\n\n\t/*\n\t\tPlay the impact sound at the projectile's location\n\t*/\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ExplosionSound, GetActorLocation());\n\n\t/*\n\t\tShake the camera\n\t*/\n\tAPlayerController* PlayerController = Cast<APlayerController>(GetWorld()->GetFirstPlayerController());\n\tif(PlayerController) {\n\t\tPlayerController->ClientPlayCameraShake(ExplosionShake);\n\t}\n\n\t/*\n\t\tRelease the projectile back to the actor pool\n\t*/\n\tActorPool->Release(this);\n}", "CodeBleu_score": 53.129823824350396}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t/*\n\t * The projectile's location is retrieved from the projectile's location component.\n\t */\n\tFVector Location = GetActorLocation();\n\n\t/*\n\t * The projectile's rotation is retrieved from the projectile's rotation component.\n\t */\n\tFRotator Rotation = GetActorRotation();\n\n\t/*\n\t * The projectile's impact visual effect is spawned at the projectile's location and rotation.\n\t */\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactParticle, Location, Rotation);\n\n\t/*\n\t * The projectile's impact sound is played at the projectile's location.\n\t */\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, Location);\n\n\t/*\n\t * The projectile's camera shake is triggered at the projectile's location.\n\t */\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactCameraShake, Location);\n\n\t/*\n\t * The projectile is released back to the actor pool using the actor pooling subsystem.\n\t */\n\tActorPoolingSubsystem->ReleaseActorToPool(this);\n}", "CodeBleu_score": 52.78205866943188}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t/*\n\t * The impact visual effect is spawned at the projectile's location.\n\t */\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactFX, GetActorLocation());\n\t/*\n\t * The impact sound is played at the projectile's location.\n\t */\n\tUGameplayStatics::PlaySoundAtLocation(GetWorld(), ImpactSound, GetActorLocation());\n\t/*\n\t * A camera shake is triggered at the projectile's location.\n\t */\n\tUGameplayStatics::SpawnEmitterAtLocation(GetWorld(), ImpactShake, GetActorLocation());\n\t/*\n\t * The projectile is released back to the actor pool using the actor pooling subsystem.\n\t */\n\tUGameplayStatics::EndSpawningActor(this, SpawnTransform);\n}", "CodeBleu_score": 43.53007289722458}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\treturn NULL;\n}", "CodeBleu_score": 4.82383825489265}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\treturn NULL;\n}", "CodeBleu_score": 4.82383825489265}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\treturn NULL;\n}", "CodeBleu_score": 4.82383825489265}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t}", "CodeBleu_score": 6.287841583637895}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t}", "CodeBleu_score": 6.287841583637895}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t}", "CodeBleu_score": 6.287841583637895}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear existing player and actor data from the save game\n\tCurrentSaveGame.PlayerData.Empty();\n\tCurrentSaveGame.ActorData.Empty();\n\n\t// Get the game state\n\tAGameStateBase* GameState = GetWorld()->GetGameState();\n\tif (GameState == nullptr) {\n\t\tUE_LOG(LogSaveGameSubsystem, Error, TEXT(\"Failed to get game state\"));\n\t\treturn;\n\t}\n\n\t// Save player data for each player in the game state\n\tfor (int32 i = 0; i < GameState->PlayerArray.Num(); i++) {\n\t\tAPlayerState* PlayerState = GameState->PlayerArray[i];\n\t\tif (PlayerState == nullptr) {\n\t\t\tUE_LOG(LogSaveGameSubsystem, Error, TEXT(\"Failed to get player state\"));\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Get the player controller\n\t\tAPlayerController* PlayerController = UGameplayStatics::GetPlayerController(this, i);\n\t\tif (PlayerController == nullptr) {\n\t\t\tUE_LOG(LogSaveGameSubsystem, Error, TEXT(\"Failed to get player controller\"));\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Get the player character\n\t\tAPawn* PlayerPawn = PlayerController->GetPawn();\n\t\tif (PlayerPawn == nullptr) {\n\t\t\tUE_LOG(LogSaveGameSubsystem, Error, TEXT(\"Failed to get player pawn\"));\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Save the player data\n\t\tFPlayerData PlayerData;\n\t\tPlayerData.PlayerName = PlayerState->PlayerName;\n\t\tPlayerData.PlayerId = PlayerState->UniqueId.ToString();\n\t\tPlayerData.PlayerLocation = PlayerPawn->GetActorLocation();\n\t\tPlayerData.PlayerRotation = PlayerPawn->GetActorRotation();\n\t\tCurrentSaveGame.PlayerData.Add(PlayerData);\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorI", "CodeBleu_score": 51.45709282512642}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear out the current save game data\n\tCurrentSaveGame.PlayerData.Empty();\n\tCurrentSaveGame.ActorData.Empty();\n\n\t// Get the game state\n\tAGameStateBase* GameState = GetWorld()->GetGameState();\n\tif (GameState) {\n\t\t// Save player data for each player in the game state\n\t\tfor (int i = 0; i < GameState->PlayerArray.Num(); i++) {\n\t\t\tAPlayerState* PlayerState = GameState->PlayerArray[i];\n\t\t\tif (PlayerState) {\n\t\t\t\tFPlayerSaveData PlayerData;\n\t\t\t\tPlayerData.PlayerName = PlayerState->PlayerName;\n\t\t\t\tPlayerData.PlayerId = PlayerState->PlayerId;\n\t\t\t\tPlayerData.UniqueId = PlayerState->UniqueId;\n\t\t\t\tCurrentSaveGame.PlayerData.Add(PlayerData);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world, saving those that implement a specific interface\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\t\tif (Actor) {\n\t\t\t// Cast the actor to the interface\n\t\t\tISaveGameActorInterface* SaveGameActor = Cast<ISaveGameActorInterface>(Actor);\n\t\t\tif (SaveGameActor) {\n\t\t\t\t// Get the actor's transform and serialized data\n\t\t\t\tFTransform Transform = Actor->GetTransform();\n\t\t\t\tFString SerializedData = SaveGameActor->GetSaveGameActorData();\n\n\t\t\t\t// Save the actor data, including name, transform, and serialized data\n\t\t\t\tFActorSaveData ActorData;\n\t\t\t\tActorData.ActorName = Actor->GetName();\n\t\t\t\tActorData.Transform = Transform;\n\t\t\t\tActorData.SerializedData = SerializedData;\n\t\t\t\tCurrentSaveGame.ActorData.Add(ActorData);", "CodeBleu_score": 54.805605482453416}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear out any existing player data\n\tCurrentSaveGame.PlayerData.Empty();\n\n\t// Get the game state\n\tAGameStateBase* GameState = GetWorld()->GetGameState();\n\n\t// Save player data for each player\n\tfor (int32 i = 0; i < GameState->PlayerArray.Num(); ++i) {\n\t\tAPlayerState* PlayerState = GameState->PlayerArray[i];\n\t\tif (PlayerState) {\n\t\t\tFPlayerSaveData PlayerData;\n\t\t\tPlayerData.PlayerName = PlayerState->PlayerName;\n\t\t\tPlayerData.PlayerID = PlayerState->UniqueId.ToString();\n\t\t\tPlayerData.Transform = PlayerState->GetPawn()->GetTransform();\n\t\t\tCurrentSaveGame.PlayerData.Add(PlayerData);\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (TActorIterator<AActor> ActorItr(GetWorld()); ActorItr; ++ActorItr) {\n\t\tAActor* Actor = *ActorItr;\n\t\tif (Actor) {\n\t\t\t// Check to see if this actor implements the SaveGameActor interface\n\t\t\tUSaveGameActor* SaveGameActor = Cast<USaveGameActor>(Actor->GetClass()->GetDefaultObject());\n\t\t\tif (SaveGameActor) {\n\t\t\t\t// This actor implements the SaveGameActor interface, so save it\n\t\t\t\tFActorSaveData ActorData;\n\t\t\t\tActorData.ActorName = Actor->GetName();\n\t\t\t\tActorData.Transform = Actor->GetTransform();\n\t\t\t\tActorData.SerializedData = SaveGameActor->Serialize(Actor);\n\t\t\t\tCurrentSaveGame.ActorData.Add(ActorData);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tWriteSaveGameToSlot(CurrentSaveGame.SaveSlotName, CurrentSaveGame);\n\n\t// Broadcast the OnSaveGameComplete event\n\tOnSaveGameComplete.Broadcast();\n}", "CodeBleu_score": 57.100400577654774}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t// Theme selector\n    ImGui::Text(\"Theme\");\n    ImGui::SameLine();\n    if (ImGui::BeginCombo(\"##Theme\", theme_names[theme_index])) {\n        for (int n = 0; n < theme_names.size(); n++) {\n            bool is_selected = (theme_index == n);\n            if (ImGui::Selectable(theme_names[n], is_selected)) {\n                theme_index = n;\n                if (n == 0) {\n                    ImGui::StyleColorsDark();\n                }\n                else if (n == 1) {\n                    ImGui::StyleColorsLight();\n                }\n                else if (n == 2) {\n                    ImGui::StyleColorsClassic();\n                }\n            }\n            if (is_selected) {\n                ImGui::SetItemDefaultFocus();\n            }\n        }\n        ImGui::EndCombo();\n    }\n    // Font size selector\n    ImGui::Text(\"Font size\");\n    ImGui::SameLine();\n    ImGui::PushItemWidth(100);\n    if (ImGui::InputInt(\"##Font size\", &font_size)) {\n        ImGui::GetIO().FontGlobalScale = (float)font_size / 13.0;\n    }\n    ImGui::PopItemWidth();\n}", "CodeBleu_score": 40.64753163198854}, {"code": "void FrameworkConfig::draw_themes(){\n\tImGui::Begin(\"Theme\");\n    ImGui::Text(\"Select a theme:\");\n    ImGui::Combo(\"Theme\", &theme_index, theme_names, theme_count);\n    ImGui::Text(\"Font Size:\");\n    ImGui::SliderFloat(\"Font Size\", &font_size, 10.0f, 30.0f);\n    if (font_size != old_font_size) {\n        old_font_size = font_size;\n        ImGui::GetIO().FontGlobalScale = font_size;\n    }\n    ImGui::End();\n}", "CodeBleu_score": 40.440856477492346}, {"code": "void FrameworkConfig::draw_themes(){\n\tImGui::Begin(\"Themes\", &show_themes);\n    ImGui::Text(\"Select a theme:\");\n    ImGui::Separator();\n    ImGui::RadioButton(\"Dark\", &theme, 0); ImGui::SameLine();\n    ImGui::RadioButton(\"Light\", &theme, 1);\n    ImGui::Separator();\n    ImGui::Text(\"Font size:\");\n    ImGui::SliderFloat(\"##FontSize\", &font_size, 10.0f, 30.0f);\n    ImGui::End();\n\n    if (font_size != prev_font_size) {\n        prev_font_size = font_size;\n        ImGui::GetIO().FontGlobalScale = font_size;\n    }\n}", "CodeBleu_score": 39.63534086392505}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Menu Key:\");\n    ImGui::SameLine();\n    ImGui::PushItemWidth(100);\n    if (ImGui::BeginCombo(\"##menu_key\", key_names[menu_key])) {\n        for (int i = 0; i < 256; i++) {\n            bool is_selected = (menu_key == i);\n            if (ImGui::Selectable(key_names[i], is_selected)) {\n                menu_key = i;\n            }\n            if (is_selected) {\n                ImGui::SetItemDefaultFocus();\n            }\n        }\n        ImGui::EndCombo();\n    }\n    ImGui::PopItemWidth();\n\n    ImGui::Text(\"Show Cursor Key:\");\n    ImGui::SameLine();\n    ImGui::PushItemWidth(100);\n    if (ImGui::BeginCombo(\"##show_cursor_key\", key_names[show_cursor_key])) {\n        for (int i = 0; i < 256; i++) {\n            bool is_selected = (show_cursor_key == i);\n            if (ImGui::Selectable(key_names[i], is_selected)) {\n                show_cursor_key = i;\n            }\n            if (is_selected) {\n                ImGui::SetItemDefaultFocus();\n            }\n        }\n        ImGui::EndCombo();\n    }\n    ImGui::PopItemWidth();\n\n    ImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\n    ImGui::Text(\"Log Level:\");\n    ImGui::SameLine();\n    ImGui::PushItemWidth(100);\n    if (ImGui::BeginCombo(\"##log_level\", log_level_names[log_level])) {\n        for (int i = 0; i < 6; i++) {\n            bool is_selected = (log_level ==", "CodeBleu_score": 35.95335643788649}, {"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Framework Settings\");\n    ImGui::Separator();\n    ImGui::Text(\"Menu Key: \");\n    ImGui::SameLine();\n    ImGui::Text(std::to_string(menu_key).c_str());\n    ImGui::Text(\"Show Cursor: \");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##show_cursor\", &show_cursor);\n    ImGui::Text(\"Remember Menu State: \");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##remember_menu_state\", &remember_menu_state);\n    ImGui::Text(\"L3 + R3 Toggle: \");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##l3_r3_toggle\", &l3_r3_toggle);\n    ImGui::Text(\"Always Show Cursor: \");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##always_show_cursor\", &always_show_cursor);\n    ImGui::Text(\"Log Level: \");\n    ImGui::SameLine();\n    ImGui::SliderInt(\"##log_level\", &log_level, 0, 6);\n    if (ImGui::Button(\"Save\")) {\n        if (log_level >= 0 && log_level <= 6) {\n            spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n            save_config();\n        }\n    }\n}", "CodeBleu_score": 47.90608821665879}, {"code": "void FrameworkConfig::draw_main() {\n\tImGui::Text(\"Menu Key:\");\n    ImGui::SameLine();\n    if (ImGui::Button(menu_key_names[menu_key])) {\n        menu_key = (menu_key + 1) % menu_key_names.size();\n    }\n    ImGui::SameLine();\n    ImGui::Text(\"Show Cursor:\");\n    ImGui::SameLine();\n    if (ImGui::Button(show_cursor_key_names[show_cursor_key])) {\n        show_cursor_key = (show_cursor_key + 1) % show_cursor_key_names.size();\n    }\n    ImGui::SameLine();\n    ImGui::Text(\"Remember Menu State:\");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##Remember Menu State\", &remember_menu_state);\n    ImGui::SameLine();\n    ImGui::Text(\"L3 + R3 Toggle:\");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##L3 + R3 Toggle\", &l3_r3_toggle);\n    ImGui::SameLine();\n    ImGui::Text(\"Always Show Cursor:\");\n    ImGui::SameLine();\n    ImGui::Checkbox(\"##Always Show Cursor\", &always_show_cursor);\n    ImGui::SameLine();\n    ImGui::Text(\"Log Level:\");\n    ImGui::SameLine();\n    if (ImGui::Button(log_level_names[log_level])) {\n        log_level = (log_level + 1) % log_level_names.size();\n    }\n    if (log_level < 0 || log_level >= log_level_names.size()) {\n        log_level = 0;\n    }\n    ImGui::SameLine();\n    ImGui::Text(log_level_names[log_level]);\n    if (ImGui::Button(\"Save\")) {\n        save();\n    }\n    ImGui::SameLine();\n    if (ImGui::Button(\"Load\")) {\n        load();\n    }\n    ImGui::SameLine();", "CodeBleu_score": 46.9461688704907}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t// Create a new OpenStreetMap parser\n\tFOSMFileParser* OpenStreetMapParser = new FOSMFileParser( FeedbackContext );\n\n\t// Create a new XML parser\n\tFFastXml* XMLParser = FFastXml::CreateEmptyParser();\n\n\t// If we're loading a file\n\tif ( bIsFilePathActuallyTextBuffer == false ) {\n\n\t\t// Load the file\n\t\tif ( XMLParser->LoadFile( OSMFilePath, 1000000 ) == false ) {\n\n\t\t\t// Log an error message\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to load OpenStreetMap file: %s\" ), *OSMFilePath );\n\n\t\t\t// Delete the XML parser\n\t\t\tdelete XMLParser;\n\n\t\t\t// Delete the OpenStreetMap parser\n\t\t\tdelete OpenStreetMapParser;\n\n\t\t\t// Return failure\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// If we're loading a text buffer\n\telse {\n\n\t\t// Load the text buffer\n\t\tif ( XMLParser->LoadText( OSMFilePath ) == false ) {\n\n\t\t\t// Log an error message\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to load OpenStreetMap text buffer\" ) );\n\n\t\t\t// Delete the XML parser\n\t\t\tdelete XMLParser;\n\n\t\t\t// Delete the OpenStreetMap parser\n\t\t\tdelete OpenStreetMapParser;\n\n\t\t\t// Return failure\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Set the XML parser to use the OpenStreetMap parser\n\tXMLParser->SetParseData( OpenStreetMapParser );\n\n\t// Parse the XML\n\tif ( XMLParser->Parse() == false ) {\n\n\t\t// Log an error message\n\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to parse OpenStreetMap file: %s\" ), *OSMFilePath );\n\n\t\t// Delete the XML parser\n\t\tdelete XML", "CodeBleu_score": 45.44988991580453}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t// Create a new FFastXml parser\n\tFFastXml* Parser = new FFastXml();\n\t// Set the FFastXml parser's element callback\n\tParser->SetElementCallback( this, &FOSMFile::ProcessOSMFileElement );\n\t// Set the FFastXml parser's character callback\n\tParser->SetCharacterCallback( this, &FOSMFile::ProcessOSMFileCharacterData );\n\t// Set the FFastXml parser's comment callback\n\tParser->SetCommentCallback( this, &FOSMFile::ProcessOSMFileComment );\n\n\t// Set the FFastXml parser's error callback\n\tParser->SetErrorCallback( this, &FOSMFile::ProcessOSMFileError );\n\n\t// Set the FFastXml parser's warning callback\n\tParser->SetWarningCallback( this, &FOSMFile::ProcessOSMFileWarning );\n\n\t// Set the FFastXml parser's buffer size\n\tParser->SetBufferSize( 1024 * 1024 * 8 );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetSilentMode( false );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetShouldInferSchema( true );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetShouldOutputInferredSchema( true );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetShouldOutputInferredSchemaToFile( true );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetInferredSchemaOutputFile( TEXT( \"C:/Temp/InferredSchema.xml\" ) );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetShouldOutputInferredSchemaToScreen( true );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetShouldOutputInferredSchemaToFile( true );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetShouldOutputInferredSchemaToFile( true );\n\n\t// Set the FFastXml parser's silent mode\n\tParser->SetShouldOutputInferredSchemaToFile( true );\n\n\t// Set the FFastXml", "CodeBleu_score": 18.19125366548783}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t// If the file path is not actually a text buffer, make sure the file exists\n\tif ( !bIsFilePathActuallyTextBuffer ) {\n\t\tif ( !FPaths::FileExists( OSMFilePath ) ) {\n\t\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: File path does not exist.\" ) );\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Create an FFastXml parser\n\tFFastXml* Parser = FFastXml::CreateInstance();\n\tif ( !Parser ) {\n\t\tUE_LOG( LogTemp, Error, TEXT( \"FOSMFile::LoadOpenStreetMapFile: Failed to create FFastXml parser.\" ) );\n\t\treturn false;\n\t}\n\n\t// Set the parser's error handler\n\tParser->SetErrorHandler( this );\n\n\t// Set the parser's element handler\n\tParser->SetElementHandler( this );\n\n\t// Set the parser's character data handler\n\tParser->SetCharacterDataHandler( this );\n\n\t// Set the parser's comment handler\n\tParser->SetCommentHandler( this );\n\n\t// Set the parser's processing instruction handler\n\tParser->SetProcessingInstructionHandler( this );\n\n\t// Set the parser's attribute handler\n\tParser->SetAttributeHandler( this );\n\n\t// Set the parser's end element handler\n\tParser->SetEndElementHandler( this );\n\n\t// Set the parser's end document handler\n\tParser->SetEndDocumentHandler( this );\n\n\t// Set the parser's start document handler\n\tParser->SetStartDocumentHandler( this );\n\n\t// Set the parser's start element handler\n\tParser->SetStartElementHandler( this );\n\n\t// Set the parser's warning handler\n\tParser->SetWarningHandler( this );\n\n\t// Set the parser's buffer size\n\tParser->SetBufferSize( 1024 * 1024 * 10 );\n\n\t// Set the parser's comment handling mode\n\tParser->SetCommentHandlingMode( ECommentHandlingMode::eProcessComments );\n\n\t// Set the parser's whitespace handling mode", "CodeBleu_score": 33.95152826934668}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (StreetMapActor) {\n\t\t\tStreetMapActor->GetStreetMapComponent()->SetStreetMap(StreetMap);\n\t\t}\n\t}\n}", "CodeBleu_score": 70.80631417509207}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\t\tif (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 70.49053355099221}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tif (AStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor)) {\n\t\t\tif (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n\t\t\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 70.49053355099221}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif (StreetMapComponent.IsValid()) {\n\t\tStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 68.2752997426824}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif (StreetMapComponent != nullptr) {\n\t\tStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 80.58772867065929}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\tif(LastDetailBuilderPtr != nullptr)\n\t{\n\t\tLastDetailBuilderPtr->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 75.23419299170196}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t}", "CodeBleu_score": 2.7170239024121736}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t}", "CodeBleu_score": 2.7170239024121736}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tRegisterAssetTypeAction(AssetTools);\n\tRegisterStreetMapStyle();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(UStreetMapComponent::StaticClass()->GetFName(), FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 66.22222366681568}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\treturn NULL;\n}", "CodeBleu_score": 5.2908050067320165}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\treturn NULL;\n}", "CodeBleu_score": 5.2908050067320165}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\treturn NULL;\n}", "CodeBleu_score": 5.2908050067320165}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\tTArray<FAFAbilityInputID> InputIDs;\n\tInputIDs.Add(EFAAbilityInputID::Confirm);\n\tAARGameMode* GameMode = Cast<AARGameMode>(GetWorld()->GetAuthGameMode());\n\tGameMode->ServerBindAbility(ServerHandle, InputIDs);\n}", "CodeBleu_score": 63.216066346110836}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\tTArray<FAFAbilityInputID> Ability01InputIDs;\n\tAbility01InputIDs.Add(FAFAbilityInputID(EFAAbilityInputType::Confirm, EKeys::SpaceBar));\n\tAbility01InputIDs.Add(FAFAbilityInputID(EFAAbilityInputType::Confirm, EKeys::LeftMouseButton));\n\tFAbilitySpecBinding Binding;\n\tBinding.AbilitySpecHandle = ServerHandle;\n\tBinding.InputIDs = Ability01InputIDs;\n\tAbilitySpecBindings.Add(Binding);\n}", "CodeBleu_score": 53.81120991063791}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\tTestAbility01Handle = ServerHandle;\n\n\tTArray<FAFAbilityInputID> InputIDs;\n\tInputIDs.Add(EFAAbilityInputID::Confirm);\n\n\tServerHandle.BindAbilityToInputIDs(InputIDs);\n}", "CodeBleu_score": 62.977763257033715}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\tif ((Controller != NULL) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 98.03286449525625}, {"code": "void AARCharacter::MoveForward(float Value){\n\tif ((Controller != NULL) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 98.03286449525625}, {"code": "void AARCharacter::MoveForward(float Value){\n\tif ((Controller != NULL) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 98.03286449525625}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\treturn FVector{};\n}", "CodeBleu_score": 6.233362392089299}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\treturn FVector{};\n}", "CodeBleu_score": 6.233362392089299}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\treturn FVector{};\n}", "CodeBleu_score": 6.233362392089299}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tif (Role == ROLE_Authority) {\n\t\tif (SpawnedEnemies.Contains(InEnemy)) {\n\t\t\tSpawnedEnemies.Remove(InEnemy);\n\t\t}\n\n\t\tif (SpawnedEnemies.Num() < MinEnemies) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 71.2726247987597}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tif (Role == ROLE_Authority)\n\t{\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinEnemies)\n\t\t{\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 61.88427587593712}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\tif (Role == ROLE_Authority)\n\t{\n\t\tSpawnedEnemies.Remove(InEnemy);\n\n\t\tif (SpawnedEnemies.Num() < MinEnemies)\n\t\t{\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 61.88427587593712}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString result;\n\treturn result;\n}", "CodeBleu_score": 9.644597431761836}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString result = Super::ApproveLogin(Options);\n\tTArray<FString> Parsed;\n\tOptions.ParseIntoArray(Parsed, TEXT(\",\"), true);\n\tfor (FString& Params : Parsed) {\n\t\tFString Key, Value;\n\t\tParams.Split(TEXT(\"=\"), &Key, &Value);\n\t\tif (Key == TEXT(\"PlayerId\")) {\n\t\t\tUE_LOG(LogTemp, Warning, TEXT(\"PlayerId: %s\"), *Value);\n\t\t}\n\t}\n\treturn result;\n}", "CodeBleu_score": 55.438392182585105}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\tFString result;\n\treturn result;\n}", "CodeBleu_score": 9.644597431761836}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\tFString username = UsernameInput->GetText().ToString();\n\tFString displayName = DisplayNameInput->GetText().ToString();\n\tFString password = PasswordInput->GetText().ToString();\n\tFString confirmPassword = ConfirmPasswordInput->GetText().ToString();\n\n\tif (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty() || confirmPassword.IsEmpty()) {\n\t\tFString warningMessage = \"Please fill in all fields!\";\n\t\tFString okButtonText = \"Ok\";\n\t\tShowWarningPopup(warningMessage, okButtonText);\n\t\treturn;\n\t}\n\n\tif (password != confirmPassword) {\n\t\tFString warningMessage = \"Passwords do not match!\";\n\t\tFString okButtonText = \"Ok\";\n\t\tShowWarningPopup(warningMessage, okButtonText);\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tRegisterButton->SetIsEnabled(false);\n\n\tUGameInstance* gameInstance = GetGameInstance();\n\tif (gameInstance == nullptr) {\n\t\treturn;\n\t}\n\n\tUARGameInstance* arGameInstance = Cast<UARGameInstance>(gameInstance);\n\tif (arGameInstance == nullptr) {\n\t\treturn;\n\t}\n\n\tarGameInstance->RegisterNewPlayer(username, displayName, password);\n}", "CodeBleu_score": 52.29298481910993}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t// Get the username, display name, and password from the input fields.\n\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\t// Check if any of the fields are empty.\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\n\t\t// Display a warning message.\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Yellow, TEXT(\"All fields must be filled in.\"));\n\n\t\treturn;\n\t}\n\n\t// Hide the register button.\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t// Call the RegisterNewPlayer method from the game instance to register the new player.\n\tAARGameMode* GameMode = Cast<AARGameMode>(UGameplayStatics::GetGameMode(GetWorld()));\n\tGameMode->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 46.13643607108825}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t// Get the username, display name, and password from the input fields\n\tFString username = UsernameField->GetText().ToString();\n\tFString displayName = DisplayNameField->GetText().ToString();\n\tFString password = PasswordField->GetText().ToString();\n\n\t// Check if any of the fields are empty\n\tif (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty()) {\n\t\t// Display a warning message\n\t\tGEngine->AddOnScreenDebugMessage(-1, 5.f, FColor::Red, \"Please fill out all fields.\");\n\t}\n\telse {\n\t\t// Hide the register button\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\t\t// Call the RegisterNewPlayer method from the game instance\n\t\tAARGameMode* gameMode = Cast<AARGameMode>(GetWorld()->GetAuthGameMode());\n\t\tgameMode->RegisterNewPlayer(username, displayName, password);\n\t}\n}", "CodeBleu_score": 43.4028232049536}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.Target.IsValid()) {\n\t\tconst FVector& DamageLocation = InMod.Target->GetActorLocation();\n\t\tconst FVector2D ScreenLocation = Project(DamageLocation);\n\n\t\tAFloatingCombatText::ShowFloatingCombatText(InMod.NewValue, ScreenLocation, FColor::Red);\n\t}\n}", "CodeBleu_score": 28.85564653661038}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.TargetActor == NULL) {\n\t\treturn;\n\t}\n\tFVector ScreenLocation;\n\tif (ProjectWorldLocationToScreenWithDistance(InMod.TargetActor->GetActorLocation(), ScreenLocation)) {\n\t\tSetFloatingCombatText(InMod.NewValue, ScreenLocation);\n\t}\n}", "CodeBleu_score": 26.311375689052323}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif(InMod.Target.IsValid()) {\n\t\tFVector2D ScreenLocation;\n\t\tProjectWorldLocationToScreen(InMod.Target->GetActorLocation(), ScreenLocation);\n\t\tFloatingCombatTextManager->SetFloatingCombatText(InMod.Value, ScreenLocation, FLinearColor::Red);\n\t}\n}", "CodeBleu_score": 27.505017575405034}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t}", "CodeBleu_score": 3.4944055265683636}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t}", "CodeBleu_score": 3.4944055265683636}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t}", "CodeBleu_score": 3.4944055265683636}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tif (!Owner)\n\t\treturn;\n\n\tAARCharacter* Character = Cast<AARCharacter>(Owner);\n\n\tif (!Character)\n\t\treturn;\n\n\tUARAbilityComponent* AbilityComponent = Character->GetAbilityComponent();\n\n\tif (!AbilityComponent)\n\t\treturn;\n\n\tUARWeaponAbilityBase* Ability = AbilityComponent->GetServerAbility(InAbilityTag, LocalIndex);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 61.19972995694917}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tAARCharacter* Owner = Cast<AARCharacter>(GetOwner());\n\n\tif (!Owner)\n\t\treturn;\n\n\tUGAAbilityComponent* AbilityComponent = Owner->GetAbilityComponent();\n\n\tif (!AbilityComponent)\n\t\treturn;\n\n\tUGAAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag);\n\n\tif (!Ability)\n\t\treturn;\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 57.128658878243996}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\tif (!OwnerCharacter) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"OwnerCharacter is nullptr in OnWeaponReady\"))\n\t\treturn;\n\t}\n\n\tUARAbilityComponent* AbilityComponent = OwnerCharacter->GetAbilityComponent();\n\tif (!AbilityComponent) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"AbilityComponent is nullptr in OnWeaponReady\"))\n\t\treturn;\n\t}\n\n\tUARWeaponAbilityBase* Ability = AbilityComponent->GetAbilityByHandle(InAbilityTag);\n\tif (!Ability) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Ability is nullptr in OnWeaponReady\"))\n\t\treturn;\n\t}\n\n\tSetAbilityToItem(LocalIndex, Ability);\n}", "CodeBleu_score": 47.28049800242139}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = \"None\";\n\t\tData.SocketName = \"None\";\n\t\tData.Position = FVector(0, 0, 0);\n\t\tData.Rotation = FRotator(0, 0, 0);\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tif (CurrentWeaponIndex == LocalIndex)\n\t\t{\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t}\n}", "CodeBleu_score": 70.44118642592376}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = TEXT(\"\");\n\t\tData.SocketName = TEXT(\"\");\n\t\tData.Position = FVector(0, 0, 0);\n\t\tData.Rotation = FRotator(0, 0, 0);\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t\tServerHolster(Data);\n\t\tif (CurrentWeaponIndex == LocalIndex)\n\t\t{\n\t\t\tUnequip(LocalIndex);\n\t\t}\n\t}\n}", "CodeBleu_score": 68.25074476307199}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tif (AARCharacter* Character = Cast<AARCharacter>(POwner))\n\t{\n\t\tif (CurrentWeaponIndex == LocalIndex)\n\t\t{\n\t\t\tUnequip(CurrentWeaponIndex);\n\t\t}\n\t\tFARWeaponRPC Data;\n\t\tData.Weapon = \"\";\n\t\t//Data.SocketName = InWeapon->Socket;\n\t\tData.Position = FVector(0, 0, 0);\n\t\tData.Rotation = FRotator(0, 0, 0);\n\t\tData.AttachSlot = static_cast<EARWeaponPosition>(LocalIndex);\n\t\tSetWeapon(Data, GroupToComponent[LocalIndex]);\n\t}\n}", "CodeBleu_score": 56.619621961430845}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t}", "CodeBleu_score": 4.448538495377839}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer()) {\n        UMoviePlayer* MoviePlayer = GetMoviePlayer();\n        if (MoviePlayer) {\n            MoviePlayer->OnPrepareDownloadableContent.RemoveAll(this);\n            MoviePlayer->OnMovieClipUnregistered.RemoveAll(this);\n            MoviePlayer->OnMovieClipFinished.RemoveAll(this);\n        }\n    }\n}", "CodeBleu_score": 31.882633442457752}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t}", "CodeBleu_score": 4.448538495377839}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (GetDefault<ULoadingScreenSettings>()->bEnabled)\n\t{\n\t\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\t\tLoadingScreenSettings->bStartup = false;\n\t\tSetupLoadingScreen(*LoadingScreenSettings);\n\t}\n}", "CodeBleu_score": 47.183712253062524}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (UAsyncLoadingScreenLibrary::IsLoadingScreenEnabled()) {\n\t\tUAsyncLoadingScreenLibrary::SetStartup(false);\n\t\tSetupLoadingScreen(UAsyncLoadingScreenLibrary::GetDefaultLoadingScreenSettings());\n\t}\n}", "CodeBleu_score": 30.75950412093641}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\t// Check if the loading screen is enabled\n\tif (GetDefault<ULoadingScreenSettings>()->bEnabled) {\n\t\t// Setup the loading screen\n\t\tSetupLoadingScreen(GetDefault<ULoadingScreenSettings>()->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 38.2715785528135}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\n\tconst ULoadingScreenSettings* LoadingScreenSettings = GetDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings) {\n\t\tStartupBackgroundImages = LoadingScreenSettings->StartupBackgroundImages;\n\t\tDefaultBackgroundImages = LoadingScreenSettings->DefaultBackgroundImages;\n\t}\n}", "CodeBleu_score": 35.66206965558612}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\tLoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\t// Load startup background images\n\tfor (FString& image : LoadingScreenSettings->StartupLoadingScreen.Images) {\n\t\tStartupBackgroundImages.Add(LoadImage(image));\n\t}\n\t// Load default background images\n\tfor (FString& image : LoadingScreenSettings->DefaultLoadingScreen.Images) {\n\t\tDefaultBackgroundImages.Add(LoadImage(image));\n\t}\n}", "CodeBleu_score": 38.700631535228204}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\tRemoveAllBackgroundImages();\n\tULoadingScreenSettings* LoadingScreenSettings = GetMutableDefault<ULoadingScreenSettings>();\n\tif (LoadingScreenSettings) {\n\t\tif (LoadingScreenSettings->StartupLoadingScreen.LoadingScreenType == ELoadingScreenType::Splash) {\n\t\t\tfor (int32 i = 0; i < LoadingScreenSettings->StartupLoadingScreen.Images.Num(); i++) {\n\t\t\t\tif (LoadingScreenSettings->StartupLoadingScreen.Images[i].ImageType == EImageType::Exact) {\n\t\t\t\t\tStartupBackgroundImages.Add(LoadingScreenSettings->StartupLoadingScreen.Images[i].Image);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tTArray<FString> Files;\n\t\t\t\t\tIFileManager::Get().FindFilesRecursive(Files, *(LoadingScreenSettings->StartupLoadingScreen.Images[i].Image.Path), *(LoadingScreenSettings->StartupLoadingScreen.Images[i].Image.Wildcard), true, false);\n\t\t\t\t\tfor (int32 j = 0; j < Files.Num(); j++) {\n\t\t\t\t\t\tStartupBackgroundImages.Add(FSoftObjectPath(Files[j]));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (LoadingScreenSettings->DefaultLoadingScreen.LoadingScreenType == ELoadingScreenType::Splash) {\n\t\t\tfor (int32 i = 0; i < LoadingScreenSettings->DefaultLoadingScreen.Images.Num(); i++) {\n\t\t\t\tif (LoadingScreenSettings->DefaultLoadingScreen.Images[i].ImageType == EImageType::Exact) {\n\t\t\t\t\tDefaultBackgroundImages.Add(LoadingScreenSettings->DefaultLoadingScreen.Images[i].Image);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tTArray<FString> Files;\n\t\t\t\t\tIFileManager::Get().FindFilesRecursive(Files, *(LoadingScreenSettings->DefaultLoadingScreen.Images[i].Image.Path), *(LoadingScreenSettings->DefaultLoadingScreen.Images[i].Image", "CodeBleu_score": 42.258892270288214}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\tif (bIsActive) {\n\t\tif (bIsFadingIn) {\n\t\t\t// Fade in\n\t\t\tAlpha += InDeltaTime * FadeSpeed;\n\t\t\tif (Alpha >= MaxAlpha) {\n\t\t\t\tAlpha = MaxAlpha;\n\t\t\t\tbIsFadingIn = false;\n\t\t\t}\n\t\t} else {\n\t\t\t// Fade out\n\t\t\tAlpha -= InDeltaTime * FadeSpeed;\n\t\t\tif (Alpha <= MinAlpha) {\n\t\t\t\tAlpha = MinAlpha;\n\t\t\t\tbIsFadingIn = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 38.79329643080538}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\tif (InCurrentTime >= AnimationStartTime) {\n\t\tfloat Alpha = FMath::Clamp(FMath::TruncToFloat((InCurrentTime - AnimationStartTime) * AnimationSpeed), 0.f, 1.f);\n\t\tif (Alpha == 1.f) {\n\t\t\tAnimationDirection = -1.f;\n\t\t} else if (Alpha == 0.f) {\n\t\t\tAnimationDirection = 1.f;\n\t\t}\n\t\tSetTextRenderColorAndOpacity(FLinearColor(1.f, 1.f, 1.f, Alpha));\n\t}\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 27.37887559379148}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t// If the text is not visible, do not animate.\n\tif (!IsVisible()) {\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\n\t// Get the elapsed time since the animation started.\n\tfloat ElapsedTime = (float)(InCurrentTime - AnimationStartTime);\n\n\t// Calculate the alpha value based on the elapsed time.\n\tfloat Alpha = FMath::Sin(ElapsedTime * AnimationSpeed) * AnimationAmplitude + AnimationAmplitude;\n\n\t// Set the text's alpha value.\n\tSetTextRenderAlpha(Alpha);\n\n\t// Continue animating.\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 22.68277501686044}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\tbool ready = false;\n\tdata_lock.lock();\n\tif (index != -1) {\n\t\tready = true;\n\t}\n\tdata_lock.unlock();\n\treturn ready;\n}", "CodeBleu_score": 45.93809252190116}, {"code": "bool FRaceAwaiter::await_ready(){\n\tstd::unique_lock<std::mutex> lock(data->mutex);\n\tif (data->index != -1) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 39.97635749107569}, {"code": "bool FRaceAwaiter::await_ready(){\n\tlock_guard<mutex> lk(mtx);\n\treturn index != -1;\n}", "CodeBleu_score": 5.3430315770175225}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tif (bCleanup) {\n        if (((FindPathState*)State)->QueryID != INVALID_QUERY_ID) {\n            AbortFindPath(((FindPathState*)State)->QueryID);\n            ((FindPathState*)State)->QueryID = INVALID_QUERY_ID;\n        }\n        free(State);\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 27.572557851841857}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tif (bCleanup) {\n        if (State) {\n            AbortFindPath(State);\n            delete State;\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 17.29000652458026}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\tif (bCleanup) {\n\t\tif (State != nullptr) {\n\t\t\t// Cleanup the async find path request\n\t\t\tFNavMeshPathfindingAsyncData* NavMeshPathfindingAsyncData = (FNavMeshPathfindingAsyncData*)State;\n\t\t\tNavMeshPathfindingAsyncData->Pathfinder->AbortPathfinding(*NavMeshPathfindingAsyncData);\n\t\t\tdelete NavMeshPathfindingAsyncData;\n\t\t}\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 25.94955876571313}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE:\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (!get_viewport()->get_audio_listener_2d()) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NOTIFICATION_EXIT_TREE:\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (is_current()) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 54.05090338413956}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE:\n\t\t\tif (!is_part_of_edited_scene() && !is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NOTIFICATION_EXIT_TREE:\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 47.58607142499188}, {"code": "void AudioListener2D::_notification(int p_what){\n\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE:\n\t\t\tif (!is_part_of_edited_scene() && !get_viewport()->get_audio_listener_2d()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase NOTIFICATION_EXIT_TREE:\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 47.743373905883615}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (!active || AudioDriverDummy::thread) {\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(todo, buffer_frames);\n\t\taudio_server_process(to_mix, mix_buffer, true);\n\t\tfor (int i = 0; i < to_mix * 2; i++) {\n\t\t\tp_buffer[i] = mix_buffer[i];\n\t\t}\n\n\t\ttodo -= to_mix;\n\t\tp_buffer += to_mix * 2;\n\t}\n}", "CodeBleu_score": 45.27133840860862}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (!active || !thread_exited) {\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\tint32_t *buf = p_buffer;\n\n\twhile (todo) {\n\t\tlock();\n\n\t\tint to_mix = MIN(todo, mix_rate);\n\n\t\taudio_server_process(to_mix, buf, true);\n\t\tbuf += to_mix * 2;\n\t\ttodo -= to_mix;\n\n\t\tunlock();\n\t}\n}", "CodeBleu_score": 32.36648962790267}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\tif (!active) {\n\t\treturn;\n\t}\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(todo, buffer_size - mix_offset);\n\n\t\tif (AudioServer::get_singleton()) {\n\t\t\tAudioServer::get_singleton()->_driver_process(to_mix, buffer.ptr() + (mix_offset * 2));\n\t\t}\n\n\t\tfor (int i = 0; i < to_mix; i++) {\n\t\t\tint32_t sample = buffer[(mix_offset + i) * 2 + 0] + buffer[(mix_offset + i) * 2 + 1];\n\t\t\tsample >>= mix_volume;\n\n\t\t\tif (sample < -0x8000) {\n\t\t\t\tsample = -0x8000;\n\t\t\t} else if (sample > 0x7FFF) {\n\t\t\t\tsample = 0x7FFF;\n\t\t\t}\n\n\t\t\tp_buffer[i] = sample;\n\t\t}\n\n\t\ttodo -= to_mix;\n\t\tp_buffer += to_mix;\n\t\tmix_offset += to_mix;\n\n\t\tif (mix_offset >= buffer_size) {\n\t\t\tmix_offset = 0;\n\t\t}\n\t}\n}", "CodeBleu_score": 48.33216455968128}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\tif (gravity_is_point) {\n\n\t\tfloat distance_squared = gravity_vector.distance_squared_to(p_position);\n\t\tif (distance_squared == 0) {\n\t\t\tr_gravity = Vector2(0, 0);\n\t\t} else {\n\t\t\tfloat distance = Math::sqrt(distance_squared);\n\t\t\tr_gravity = gravity_vector.direction_to(p_position) * (gravity * gravity_distance_scale / distance_squared);\n\t\t}\n\t} else {\n\t\tr_gravity = gravity_vector * gravity;\n\t}\n}", "CodeBleu_score": 32.213215367169504}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\tif (gravity_is_point) {\n\t\tVector2 rel = p_position - gravity_vec;\n\t\tfloat dist = rel.length();\n\t\tif (dist == 0)\n\t\t\tdist = CMP_EPSILON;\n\t\tfloat g = gravity * gravity_distance_scale / (dist * dist);\n\t\tr_gravity += rel.normalized() * g;\n\t} else {\n\t\tr_gravity += gravity_vec * gravity;\n\t}\n}", "CodeBleu_score": 34.143523528840994}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\tif (gravity_is_point) {\n\n\t\tVector2 rel = (p_position - gravity_vec) * gravity_distance_scale;\n\t\tfloat dist = rel.length();\n\t\tif (dist > 0) {\n\t\t\tr_gravity += rel.normalized() * gravity * pow(dist, -gravity_point_attenuation);\n\t\t}\n\t} else {\n\t\tr_gravity += gravity_vec * gravity;\n\t}\n}", "CodeBleu_score": 32.56040514400231}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t//ERR_FAIL_COND(joint_list.size() == 0);\n\n\tList<Constraint2D *> *joint_list = &constraint_list;\n\n\tfor (List<Constraint2D *>::Element *E = joint_list->front(); E; E = E->next()) {\n\n\t\tif (E->get()->is_disabled())\n\t\t\tcontinue;\n\n\t\tBody2D *B = E->get()->get_body_a();\n\t\tif (B) {\n\t\t\tif (B->get_mode() == MODE_RIGID) {\n\t\t\t\tif (!B->is_active()) {\n\t\t\t\t\tB->set_active(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tB = E->get()->get_body_b();\n\t\tif (B) {\n\t\t\tif (B->get_mode() == MODE_RIGID) {\n\t\t\t\tif (!B->is_active()) {\n\t\t\t\t\tB->set_active(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 34.669258979477604}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\tif (mode == MODE_RIGID) {\n\n\t\tif (active)\n\t\t\treturn;\n\n\t\tPhysics2DServer::get_singleton()->body_set_state(get_rid(), Physics2DServer::BODY_STATE_TRANSFORM, get_global_transform());\n\n\t\tfor (List<Constraint2D *>::Element *E = constraint_list.front(); E; E = E->next()) {\n\n\t\t\tif (E->get()->is_enabled()) {\n\n\t\t\t\tBody2D *B = NULL;\n\t\t\t\tif (E->get()->get_body_a() == this)\n\t\t\t\t\tB = E->get()->get_body_b();\n\t\t\t\telse\n\t\t\t\t\tB = E->get()->get_body_a();\n\n\t\t\t\tif (B && B->get_mode() == MODE_RIGID && !B->is_active()) {\n\n\t\t\t\t\tB->set_active(true);\n\t\t\t\t\tB->wakeup_neighbours();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 30.288403848352868}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tif (constraints[i].body_a == this) {\n\t\t\tif (!constraints[i].body_b->is_active && constraints[i].body_b->mode == RIGID) {\n\t\t\t\tconstraints[i].body_b->is_active = true;\n\t\t\t}\n\t\t} else if (constraints[i].body_b == this) {\n\t\t\tif (!constraints[i].body_a->is_active && constraints[i].body_a->mode == RIGID) {\n\t\t\t\tconstraints[i].body_a->is_active = true;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 33.095500309973716}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\tERR_FAIL_COND(!is_inside_tree());\n\n\tSpatial *space=this;\n\n\twhile(space) {\n\n\t\tif (space->cast_to<Area3D>())\n\t\t\tbreak;\n\t\telse {\n\t\t\tspace=space->get_parent_spatial();\n\t\t}\n\t}\n\n\tERR_FAIL_COND(!space);\n\n\tArea3D *area = space->cast_to<Area3D>();\n\n\tif (!area->monitoring)\n\t\treturn; //nothing to do\n\n\tif (area->monitor_query_list().find(this)==-1)\n\t\tarea->add_monitor_query(this);\n}", "CodeBleu_score": 42.62709832206196}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\tERR_FAIL_COND(!is_inside_tree());\n\tSpatial *s = this;\n\twhile(s) {\n\t\tSpatial *ss = Object::cast_to<Spatial>(s->get_parent());\n\t\tif (ss)\n\t\t\ts = ss;\n\t\telse\n\t\t\tbreak;\n\t}\n\n\tif (!s)\n\t\treturn;\n\n\tSpatial *space = Object::cast_to<Spatial>(s);\n\tif (!space)\n\t\treturn;\n\tif (!space->is_inside_tree())\n\t\treturn;\n\n\tPhysicsDirectSpaceState3D *ss = PhysicsServer3D::get_singleton()->space_get_direct_state(space->get_world_3d()->get_space());\n\tif (!ss)\n\t\treturn;\n\n\tif (monitor_query_list.in_list())\n\t\treturn; //already queued\n\n\tmonitor_query_list.add(&ss->monitor_query_list);\n}", "CodeBleu_score": 42.9533796589448}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\tERR_FAIL_COND(!is_inside_tree());\n\tSpatial *space = get_world()->get_space();\n\tif (!space)\n\t\treturn;\n\n\tif (!is_monitoring_enabled())\n\t\treturn;\n\n\tif (monitor_query_list.in_list())\n\t\treturn; //already queued\n\n\tspace->get_broadphase()->add_area(this);\n}", "CodeBleu_score": 32.89231922377244}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t/*\n\t * This function, _update_transform_dependent, updates the transform-dependent properties of a 3D body.\nIt recalculates the center of mass and principal inertia axes using the body's current transform.\nIt then updates the inertia tensor by transforming the inverse inertia with the principal inertia axes.\n\t */\n\n\tTransform xform = get_global_transform();\n\n\tVector3 origin = xform.origin;\n\tBasis basis = xform.basis;\n\n\t// Recalculate the center of mass\n\tcenter_of_mass = basis.xform(center_of_mass_offset);\n\n\t// Recalculate the principal inertia axes\n\tprincipal_inertia_axes = basis.xform(principal_inertia_axes_offset);\n\n\t// Recalculate the inertia tensor\n\tinertia = basis.xform(inverse_inertia_tensor).xform(principal_inertia_axes).xform(inverse_inertia_tensor).inverse();\n\n\t// Recalculate the center of mass\n\tcenter_of_mass = basis.xform(center_of_mass_offset);\n\n\t// Recalculate the principal inertia axes\n\tprincipal_inertia_axes = basis.xform(principal_inertia_axes_offset);\n\n\t// Recalculate the inertia tensor\n\tinertia = basis.xform(inverse_inertia_tensor).xform(principal_inertia_axes).xform(inverse_inertia_tensor).inverse();\n}", "CodeBleu_score": 40.91635527466018}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\tTransform xform = get_transform();\n\tVector3 origin = xform.origin;\n\n\tBasis gt = xform.basis.orthonormalized();\n\tset_transform(Transform(gt, origin));\n\n\tif (!body_mode) {\n\t\tPhysicsServer::get_singleton()->body_set_state(get_rid(), PhysicsServer::BODY_STATE_TRANSFORM, xform);\n\t}\n\n\tif (mass > 0) {\n\t\t_update_inertia();\n\t}\n}", "CodeBleu_score": 26.799913761956024}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\tTransform xform = get_global_transform();\n\tVector3 origin = xform.origin;\n\tBasis basis = xform.basis;\n\n\t// Recalculate principal axes\n\tVector3 x = basis.get_axis(0);\n\tVector3 y = basis.get_axis(1);\n\tVector3 z = basis.get_axis(2);\n\n\t// Recalculate center of mass\n\tVector3 com = origin + basis.xform(center_of_mass);\n\n\t// Recalculate inertia tensor\n\tBasis inertia_tensor = basis.xform(inverse_inertia_tensor).xform(basis.inverse());\n\n\tPhysicsServer::get_singleton()->body_set_state(get_rid(), PhysicsServer::BODY_STATE_TRANSFORM, xform);\n\tPhysicsServer::get_singleton()->body_set_state(get_rid(), PhysicsServer::BODY_STATE_CENTER_OF_MASS, com);\n\tPhysicsServer::get_singleton()->body_set_state(get_rid(), PhysicsServer::BODY_STATE_INERTIA_TENSOR, inertia_tensor);\n}", "CodeBleu_score": 38.2084478488213}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tAudioServer *audio_server = AudioServer::get_singleton();\n\tif (!audio_server)\n\t\treturn;\n\n\taudio_server->lock();\n\n\taudio_server->update();\n\n\taudio_server->global_lock();\n\n\taudio_server->set_device_list(get_device_list());\n\taudio_server->set_device(get_device());\n\n\taudio_server->set_mix_rate(get_mix_rate());\n\n\taudio_server->set_bus_layout(get_bus_layout());\n\n\taudio_server->unlock();\n\n\taudio_server->process(p_frames, p_buffer);\n\n\taudio_server->unlock();\n}", "CodeBleu_score": 59.52324256028285}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->_driver_process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 97.39525990362006}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\n\tAudioServer *as = AudioServer::get_singleton();\n\tif (!as)\n\t\treturn;\n\n\tas->audio_server_process(p_frames, p_buffer);\n}", "CodeBleu_score": 68.88921829654092}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tprint_line(\"Removing feed \" + p_feed->get_name() + \" from CameraServer.\");\n\t\t\tfeeds.remove(i);\n\t\t\temit_signal(\"feed_removed\", p_feed->get_id());\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 53.4097774920439}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tString details = p_feed->get_feed_details();\n\t\t\tif (details.empty()) {\n\t\t\t\tdetails = \"No details provided\";\n\t\t\t}\n\t\t\tprint_line(\"Removing feed \" + p_feed->get_feed_name() + \" (\" + details + \")\");\n\t\t\tfeeds.remove(i);\n\t\t\temit_signal(\"feed_removed\", p_feed->get_feed_id());\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 60.86976778817339}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t// Check if feed exists\n\tif (!feed_exists(p_feed)) {\n\t\t// Feed doesn't exist, return\n\t\treturn;\n\t}\n\n\t// Feed exists, remove it\n\tfeeds.erase(p_feed->get_id());\n\n\t// Log feed details\n\tString log_msg = \"Removed feed \" + p_feed->get_id() + \" (\" + p_feed->get_name() + \")\";\n\tprint_line(log_msg);\n\n\t// Emit signal\n\temit_signal(\"feed_removed\", p_feed->get_id());\n}", "CodeBleu_score": 32.13170342075887}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tCCASSERT(action != nullptr, \"action must be non-nullptr\");\n\n\tEaseRateAction* easeRateAction = new EaseRateAction();\n\tif (easeRateAction->initWithAction(action, rate)) {\n\t\teaseRateAction->autorelease();\n\t\treturn easeRateAction;\n\t}\n\n\tdelete easeRateAction;\n\treturn nullptr;\n}", "CodeBleu_score": 65.348885934779}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction *easeRateAction = new EaseRateAction();\n\tif (easeRateAction != nullptr && easeRateAction->initWithAction(action, rate)) {\n\t\teaseRateAction->autorelease();\n\t\treturn easeRateAction;\n\t}\n\tCC_SAFE_DELETE(easeRateAction);\n\treturn nullptr;\n}", "CodeBleu_score": 68.30616844233019}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction *ret = new EaseRateAction();\n    if (ret) {\n        if (ret->initWithAction(action, rate)) {\n            ret->autorelease();\n        }\n        else {\n            CC_SAFE_RELEASE_NULL(ret);\n        }\n    }\n\n    return ret; \n}", "CodeBleu_score": 47.57189607253207}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\telse {\n\t\tfor (Node* child : node->getChildren()) {\n\t\t\tNode* result = findChildByNameRecursively(child, childName);\n\t\t\tif (result != nullptr) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 48.954053252353646}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n        return node;\n    }\n    else {\n        for (Node* child : node->getChildren()) {\n            Node* foundChild = findChildByNameRecursively(child, childName);\n            if (foundChild != nullptr) {\n                return foundChild;\n            }\n        }\n    }\n    return nullptr;\n}", "CodeBleu_score": 55.524872772452895}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\telse {\n\t\tfor (auto child : node->getChildren()) {\n\t\t\tNode* foundChild = findChildByNameRecursively(child, childName);\n\t\t\tif (foundChild != nullptr) {\n\t\t\t\treturn foundChild;\n\t\t\t}\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 49.96613033520423}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\tif (target) {\n        if (fadeInMap.find(target) != fadeInMap.end()) {\n            if (fadeInMap[target] == this) {\n                fadeInMap.erase(target);\n            }\n        }\n        \n        if (fadeOutMap.find(target) != fadeOutMap.end()) {\n            if (fadeOutMap[target] == this) {\n                fadeOutMap.erase(target);\n            }\n        }\n        \n        if (runningMap.find(target) != runningMap.end()) {\n            if (runningMap[target] == this) {\n                runningMap.erase(target);\n            }\n        }\n    }\n}", "CodeBleu_score": 42.77294827264751}, {"code": "void Animate3D::removeFromMap(){\n\tif (target) {\n        // Remove from fade-in map\n        if (fadeInMap.find(target) != fadeInMap.end()) {\n            if (fadeInMap[target] == this) {\n                fadeInMap.erase(target);\n            }\n        }\n\n        // Remove from fade-out map\n        if (fadeOutMap.find(target) != fadeOutMap.end()) {\n            if (fadeOutMap[target] == this) {\n                fadeOutMap.erase(target);\n            }\n        }\n\n        // Remove from running animation map\n        if (runningAnimationMap.find(target) != runningAnimationMap.end()) {\n            if (runningAnimationMap[target] == this) {\n                runningAnimationMap.erase(target);\n            }\n        }\n    }\n}", "CodeBleu_score": 43.00210358778098}, {"code": "void Animate3D::removeFromMap(){\n\tif (target) {\n\t\tif (fadeInMap.find(target) != fadeInMap.end()) {\n\t\t\tif (fadeInMap[target] == this) {\n\t\t\t\tfadeInMap.erase(target);\n\t\t\t}\n\t\t}\n\t\tif (fadeOutMap.find(target) != fadeOutMap.end()) {\n\t\t\tif (fadeOutMap[target] == this) {\n\t\t\t\tfadeOutMap.erase(target);\n\t\t\t}\n\t\t}\n\t\tif (runningMap.find(target) != runningMap.end()) {\n\t\t\tif (runningMap[target] == this) {\n\t\t\t\trunningMap.erase(target);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 37.17287590491305}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tAnimation3D* animation = nullptr;\n\tstd::string key = fileName + animationName;\n\tauto it = _animation3DCache.find(key);\n\tif (it != _animation3DCache.end()) {\n\t\tanimation = it->second;\n\t} else {\n\t\tanimation = new Animation3D();\n\t\tif (animation && animation->initWithFile(fileName, animationName)) {\n\t\t\t_animation3DCache.insert(key, animation);\n\t\t} else {\n\t\t\tdelete animation;\n\t\t\tanimation = nullptr;\n\t\t}\n\t}\n\treturn animation;\n}", "CodeBleu_score": 48.6884413679365}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tAnimation3D* animation = nullptr;\n    auto key = fileName + animationName;\n    animation = (Animation3D*)AnimationCache::getInstance()->getAnimation(key);\n    if (animation == nullptr) {\n        animation = new Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            AnimationCache::getInstance()->addAnimation(animation, key);\n        } else {\n            CC_SAFE_RELEASE(animation);\n        }\n    }\n    \n    return animation;\n}", "CodeBleu_score": 53.843301722776594}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\tstd::string key = fileName + animationName;\n    Animation3D* animation = (Animation3D*)Animation3DCache::getInstance()->get(key);\n    if (animation)\n        return animation;\n\n    animation = new Animation3D();\n    animation->autorelease();\n    animation->initWithFile(fileName, animationName);\n\n    Animation3DCache::getInstance()->add(key, animation);\n\n    return animation;\n}", "CodeBleu_score": 49.13710039957575}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor (auto iter = _animations.begin(); iter != _animations.end();) {\n        auto animation = iter->second;\n        if (animation->_referenceCount == 1) {\n            animation->release();\n            iter = _animations.erase(iter);\n        } else {\n            ++iter;\n        }\n    }\n}", "CodeBleu_score": 59.320194182447295}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor (auto& iter : _animationCaches) {\n        if (iter.second->getReferenceCount() == 1) {\n            iter.second->release();\n            _animationCaches.erase(iter.first);\n        }\n    }\n}", "CodeBleu_score": 42.94709268358694}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor (auto it = _animations.begin(); it != _animations.end(); ) {\n        if (it->second.refCount == 1) {\n            it->second.animation->release();\n            it = _animations.erase(it);\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 68.24661446467479}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tauto billboard = new BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    delete billboard;\n    return nullptr;\n}", "CodeBleu_score": 59.691499609147634}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tBillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 79.84023598357491}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\tauto ret = new (std::nothrow) BillBoard();\n    if (ret && ret->initWithTexture(texture, mode))\n    {\n        ret->autorelease();\n        return ret;\n    }\n    CC_SAFE_DELETE(ret);\n    return nullptr;\n}", "CodeBleu_score": 60.39744961628214}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty() || _path == path)\n        return true;\n    \n    if (path.find_last_of('.') == std::string::npos)\n    {\n        CCLOG(\"warning: Invalid path: %s\", path.c_str());\n        return false;\n    }\n    \n    // Get file extension\n    std::string extension = path.substr(path.find_last_of('.') + 1);\n    \n    if (extension == \"c3t\")\n    {\n        if (loadJson(path))\n        {\n            _path = path;\n            getModelRelativePath(path);\n            return true;\n        }\n    }\n    else if (extension == \"c3b\")\n    {\n        if (loadBinary(path))\n        {\n            _path = path;\n            getModelRelativePath(path);\n            return true;\n        }\n    }\n    else\n    {\n        CCLOG(\"warning: Unsupported extension: %s\", extension.c_str());\n    }\n    \n    clear();\n    return false;\n}", "CodeBleu_score": 52.88274080398304}, {"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty() || path == _path)\n        return true;\n    \n    if (path.find_last_of(\".\") != std::string::npos) {\n        std::string ext = path.substr(path.find_last_of(\".\"));\n        if (ext == \".c3t\")\n            return loadJson(path);\n        else if (ext == \".c3b\")\n            return loadBinary(path);\n    }\n    \n    CCLOG(\"warning: Unsupported format for bundle: %s\", path.c_str());\n    return false;\n}", "CodeBleu_score": 42.87067668795626}, {"code": "bool Bundle3D::load(const std::string& path){\n\tif (path.empty() || path == _path)\n        return false;\n\n    if (path.find(\".c3t\") != std::string::npos)\n    {\n        if (!loadJson(path))\n        {\n            clear();\n            CCLOG(\"warning: Failed to load json file: %s\", path.c_str());\n            return false;\n        }\n    }\n    else if (path.find(\".c3b\") != std::string::npos)\n    {\n        if (!loadBinary(path))\n        {\n            clear();\n            CCLOG(\"warning: Failed to load binary file: %s\", path.c_str());\n            return false;\n        }\n    }\n    else\n    {\n        CCLOG(\"warning: Invalid file type: %s\", path.c_str());\n        return false;\n    }\n\n    _path = path;\n    return true;\n}", "CodeBleu_score": 47.91939470691031}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t// reset\n    skindata->skinBoneNames.clear();\n    skindata->skinBoneOriginMatrices.clear();\n    skindata->inverseBindPoseMatrices.clear();\n    skindata->boneChild.clear();\n    skindata->rootBoneIndex = -1;\n    skindata->nodeBoneNames.clear();\n    skindata->nodeBoneOriginMatrices.clear();\n\n    if (_version == \"1.0\")\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 52.47088188876796}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\tif (!skindata) return false;\n\n    skindata->resetData();\n\n    if (_binary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 66.89276195464406}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\tif (_version == \"1.2\" || _version == \"1.3\") {\n        if (!seekToFirstType(BUNDLE_TYPE_MESHSKIN)) {\n            return false;\n        }\n\n        if (_binary) {\n            return loadSkinDataBinary(skindata);\n        }\n        else {\n            return loadSkinDataJson(skindata);\n        }\n    }\n    else {\n        return false;\n    }\n}", "CodeBleu_score": 65.95244117318506}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n    size_t bytesToRead = (size * nmemb);\n    size_t bytesRead = 0;\n\n    if (bytesToRead > decoder->dataSize - decoder->dataPosition) {\n        bytesToRead = decoder->dataSize - decoder->dataPosition;\n    }\n\n    if (bytesToRead > 0) {\n        memcpy(ptr, decoder->data + decoder->dataPosition, bytesToRead);\n        decoder->dataPosition += bytesToRead;\n        bytesRead = bytesToRead;\n    }\n\n    return bytesRead;\n}", "CodeBleu_score": 51.40728392457055}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tsize_t nBytes = 0;\n    if (size != 0 && nmemb != 0) {\n        nBytes = size * nmemb;\n        if (nBytes > file->getRemainingDataSize()) {\n            nBytes = file->getRemainingDataSize();\n        }\n        if (nBytes > 0) {\n            memcpy(ptr, file->getData() + file->getCurrentPosition(), nBytes);\n            file->setCurrentPosition(file->getCurrentPosition() + nBytes);\n        }\n    }\n    return nBytes;\n}", "CodeBleu_score": 41.68069403755638}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n    size_t bytesToRead = size * nmemb;\n    size_t bytesRead = 0;\n\n    if (bytesToRead > 0) {\n        if (decoder->fileSize - decoder->filePosition < bytesToRead) {\n            bytesToRead = decoder->fileSize - decoder->filePosition;\n        }\n\n        if (bytesToRead > 0) {\n            memcpy(ptr, decoder->fileData + decoder->filePosition, bytesToRead);\n            decoder->filePosition += bytesToRead;\n            bytesRead = bytesToRead;\n        }\n    }\n\n    return bytesRead;\n}", "CodeBleu_score": 50.18094180334565}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t_pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 45.524746453505664}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t_pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 45.524746453505664}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t_pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 45.524746453505664}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> lock(s_downloaderMutex);\n    auto it = s_downloaderMap.find(id);\n    if (it != s_downloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 65.26986777177251}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> lock(s_DownloaderAndroidMutex);\n    auto it = s_DownloaderAndroidMap.find(id);\n    if (it != s_DownloaderAndroidMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 65.26195401411094}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\tstd::lock_guard<std::mutex> lock(_downloaderMutex);\n    auto it = _downloaderMap.find(id);\n    if (it != _downloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 65.00518440415476}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\tif isLoop == nil then\n        isLoop = true\n    end\n    audio.playMusic(filename, isLoop)", "CodeBleu_score": 33.441528406493035}, {"code": "function M.playMusic(filename, isLoop)\n\tlocal loop = isLoop or false\n\taudio.playMusic(filename, loop)", "CodeBleu_score": 31.61610230750248}, {"code": "function M.playMusic(filename, isLoop)\n\tlocal loop = isLoop or false\n    audio.playMusic(filename, loop)", "CodeBleu_score": 32.26677261646999}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}, {"code": "function ccs.TriggerObj:detect()\n\tend\n", "CodeBleu_score": 4.586004115149374}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}, {"code": "function ccs.TriggerObj:removeAll()\n\tend\n", "CodeBleu_score": 4.959221278886332}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\tlocal effect = self.hurtAnimation:clone()\n\teffect:setBillboard(true)\n\teffect:setScale(0.5)\n\teffect:setPosition(target:getPosition())\n\teffect:setCameraMask(target:getCameraMask())\n\teffect:runAction(\n\t\tcc.Sequence:create(\n\t\t\tcc.Animate:create(effect),\n\t\t\tcc.CallFunc:create(function() effect:removeFromParent() end)\n\t\t)\n\t)\n\ttarget:addChild(effect)", "CodeBleu_score": 42.79742332584157}, {"code": "function BasicCollider:hurtEffect(target)\n\tlocal effect = self.hurtAnimation:clone()\n\teffect:setPosition(target:getPosition())\n\teffect:setScale(target:getScale())\n\teffect:setCameraMask(self.cameraMask)\n\teffect:play()\n\teffect:setOnFinished(function()\n\t\teffect:remove()\n\tend)\n\ttarget:addChild(effect)", "CodeBleu_score": 33.85813640517708}, {"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtAnimation = self.hurtAnimation\n\tlocal hurtEffect = MOAIProp.new()\n\thurtEffect:setDeck(hurtAnimation)\n\thurtEffect:setScl(self.hurtEffectScale,self.hurtEffectScale,1)\n\thurtEffect:setLoc(0,0,0)\n\thurtEffect:setBillboard(true)\n\thurtEffect:setShader(self.hurtEffectShader)\n\thurtEffect:setShaderUniform(\"u_color\",{self.hurtEffectColor[1],self.hurtEffectColor[2],self.hurtEffectColor[3],self.hurtEffectColor[4]})\n\thurtEffect:setShaderUniform(\"u_time\",0)\n\thurtEffect:setShaderUniform(\"u_timeScale\",self.hurtEffectTimeScale)\n\thurtEffect:setShaderUniform(\"u_scale\",self.hurtEffectScale)\n\thurtEffect:setShaderUniform(\"u_speed\",self.hurtEffectSpeed)\n\thurtEffect:setShaderUniform(\"u_alpha\",self.hurtEffectAlpha)\n\thurtEffect:setShaderUniform(\"u_alphaFade\",self.hurtEffectAlphaFade)\n\thurtEffect:setShaderUniform(\"u_alphaPulse\",self.hurtEffectAlphaPulse)\n\thurtEffect:setShaderUniform(\"u_alphaPulseScale\",self.hurtEffectAlphaPulseScale)\n\thurtEffect:setShaderUniform(\"u_alphaPulseSpeed\",self.hurtEffectAlphaPulseSpeed)\n\thurtEffect:setShaderUniform(\"u_alphaPulsePhase\",self.hurtEffectAlphaPulsePhase)\n\thurtEffect:setShaderUniform(\"u_alphaPulseFade\",self.hurtEffectAlphaPulseFade)\n\thurtEffect:setShaderUniform(\"u_alphaPulseFadePhase\",self.hurtEffectAlphaPulseFadePhase)\n\thurtEffect:setShaderUniform(\"u_alphaPulseFadeSpeed\",self.hurtEffectAlphaPulse", "CodeBleu_score": 38.95772963349135}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t--[[\n    This variable is used to store the object's parent.\n    ]]\n    local parent = self:getParent()\n\n    --[[\n    This variable is used to store the object's parent's parent.\n    ]]\n    local grandParent = parent:getParent()\n\n    --[[\n    This variable is used to store the object's parent's parent's parent.\n    ]]\n    local grandGrandParent = grandParent:getParent()\n\n    --[[\n    This variable is used to store the object's parent's parent's parent's parent.\n    ]]\n    local grandGrandGrandParent = grandGrandParent:getParent()\n\n    --[[\n    This variable is used to store the object's parent's parent's parent's parent's parent.\n    ]]\n    local grandGrandGrandGrandParent = grandGrandGrandParent:getParent()\n\n    --[[\n    This variable is used to store the object's parent's parent's parent's parent's parent's parent.\n    ]]\n    local grandGrandGrandGrandGrandParent = grandGrandGrandGrandParent:getParent()\n\n    --[[\n    This variable is used to store the object's parent's parent's parent's parent's parent's parent's parent.\n    ]]\n    local grandGrandGrandGrandGrandGrandParent = grandGrandGrandGrandGrandParent:getParent()\n\n    --[[\n    This variable is used to store the object's parent's parent's parent's parent's parent's parent's parent's parent.\n    ]]\n    local grandGrandGrandGrandGrandGrandGrandParent = grandGrandGrandGrandGrandGrandParent:getParent()\n\n    --[[\n    This variable is used to store the object's parent's parent's parent's parent's parent's parent's parent's parent's parent.\n    ]]\n    local grandGrandGrandGrandGrandGrandGrandGrandParent = grandGrandGrandGrandGrandGrandGrandParent:getParent()\n\n    --", "CodeBleu_score": 21.66825761646113}, {"code": "function MageNormalAttack:onTimeOut()\n\tlocal particleSystem = self.particleSystem\n    local particleSystem2 = self.particleSystem2\n    local sprite = self.sprite\n    local spriteTexture = self.spriteTexture\n    local spriteScale = self.spriteScale\n    local spriteScale2 = self.spriteScale2\n    local spriteScale3 = self.spriteScale3\n    local spriteScale4 = self.spriteScale4\n    local spriteScale5 = self.spriteScale5\n    local spriteScale6 = self.spriteScale6\n    local spriteScale7 = self.spriteScale7\n    local spriteScale8 = self.spriteScale8\n    local spriteScale9 = self.spriteScale9\n    local spriteScale10 = self.spriteScale10\n    local spriteScale11 = self.spriteScale11\n    local spriteScale12 = self.spriteScale12\n    local spriteScale13 = self.spriteScale13\n    local spriteScale14 = self.spriteScale14\n    local spriteScale15 = self.spriteScale15\n    local spriteScale16 = self.spriteScale16\n    local spriteScale17 = self.spriteScale17\n    local spriteScale18 = self.spriteScale18\n    local spriteScale19 = self.spriteScale19\n    local spriteScale20 = self.spriteScale20\n    local spriteScale21 = self.spriteScale21\n    local spriteScale22 = self.spriteScale22\n    local spriteScale23 = self.spriteScale23\n    local spriteScale24 = self.spriteScale24\n    local spriteScale25 = self.spriteScale25\n    local spriteScale26 = self.spriteScale26\n    local spriteScale27 = self.spriteScale27\n    local spriteScale28 = self.spriteScale28\n    local spriteScale29 = self.spriteScale29\n    local spriteScale30 = self.spriteScale30\n    local spriteScale31 = self.spriteScale31\n    local spriteScale32 = self.spriteScale32\n    local spriteScale33 = self", "CodeBleu_score": 22.493899202889576}, {"code": "function MageNormalAttack:onTimeOut()\n\t-- stop the particle systems\n    self.particleSystem:stop()\n    self.particleSystem2:stop()\n    -- remove the object after a delay\n    self:performWithDelay(function()\n        self:removeSelf()\n    end, 1000)\n\n    -- create and configure a new particle system\n    self.particleSystem = display.newEmitter(self.particleSystemConfig)\n    self.particleSystem:setPosition(self.x, self.y)\n    self.particleSystem:setRotation(self.rotation)\n    self.particleSystem:setSpeed(self.particleSystemConfig.speed)\n    self.particleSystem:setParticleLifetime(self.particleSystemConfig.lifetime)\n    self.particleSystem:setGravity(self.particleSystemConfig.gravity.x, self.particleSystemConfig.gravity.y)\n    self.particleSystem:setEmissionRate(self.particleSystemConfig.emissionRate)\n    self.particleSystem:setColor(self.particleSystemConfig.color)\n    self.particleSystem:setParticleLifeForce(self.particleSystemConfig.lifeForce)\n    self.particleSystem:setParticleSize(self.particleSystemConfig.size)\n    self.particleSystem:setParticleRotation(self.particleSystemConfig.rotation)\n    self.particleSystem:setParticleRotationVariance(self.particleSystemConfig.rotationVariance)\n    self.particleSystem:setParticleDirection(self.particleSystemConfig.direction)\n    self.particleSystem:setParticleDirectionVariance(self.particleSystemConfig.directionVariance)\n    self.particleSystem:setParticleRadialAcceleration(self.particleSystemConfig.radialAcceleration)\n    self.particleSystem:setParticleRadialAccelerationVariance(self.particleSystemConfig.radialAccelerationVariance)\n    self.particleSystem:setParticleTangentialAcceleration(self.particleSystemConfig.tangentialAcceleration)\n    self.particleSystem:setParticle", "CodeBleu_score": 33.783200738994225}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\tif hero.name == \"Knight\" then\n\t\tself.heroKnight.fill.effect = grayShader\n\t\tself.heroKnightFrame.fill.effect = grayShader\n\telseif hero.name == \"Mage\" then\n\t\tself.heroMage.fill.effect = grayShader\n\t\tself.heroMageFrame.fill.effect = grayShader\n\telseif hero.name == \"Archer\" then\n\t\tself.heroArcher.fill.effect = grayShader\n\t\tself.heroArcherFrame.fill.effect = grayShader\n\tend\n\t\n\tif hero.name == \"Knight\" then\n\t\tself.heroKnight.fill:setFillColor(1, 1, 1, 1)\n\t\tself.heroKnightFrame.fill:setFillColor(1, 1, 1, 1)\n\telseif hero.name == \"Mage\" then\n\t\tself.heroMage.fill:setFillColor(1, 1, 1, 1)\n\t\tself.heroMageFrame.fill:setFillColor(1, 1, 1, 1)\n\telseif hero.name == \"Archer\" then\n\t\tself.heroArcher.fill:setFillColor(1, 1, 1, 1)\n\t\tself.heroArcherFrame.fill:setFillColor(1, 1, 1, 1)\n\tend\n\t\n\tif hero.name == \"Knight\" then\n\t\tself.heroKnight.fill:setFillColor(0.5, 0.5, 0.5, 1)\n\t\tself.heroKnightFrame.fill:setFillColor(0.5, 0.5, 0.5, 1)\n\telseif hero.name == \"Mage\" then\n\t\tself.heroMage.fill:setFillColor(0.5, 0.5, 0.5, 1)\n\t\tself.heroMageFrame.fill:setFillColor(0.5, 0.5, 0.5,", "CodeBleu_score": 36.67880945755627}, {"code": "function BattlefieldUI:heroDead(hero)\n\tif hero.name == \"Knight\" then\n    self.knightDead = true\n    self.knightFrame:setShader(self.greyShader)\n    self.knightImage:setShader(self.greyShader)\n  elseif hero.name == \"Mage\" then\n    self.mageDead = true\n    self.mageFrame:setShader(self.greyShader)\n    self.mageImage:setShader(self.greyShader)\n  elseif hero.name == \"Archer\" then\n    self.archerDead = true\n    self.archerFrame:setShader(self.greyShader)\n    self.archerImage:setShader(self.greyShader)\n  end\n  hero.angerFullSignal:disconnect()\n  hero.angerFullSignal = nil\n  hero.angerCloneSignal:disconnect()\n  hero.angerCloneSignal = nil", "CodeBleu_score": 47.18590083069492}, {"code": "function BattlefieldUI:heroDead(hero)\n\tif hero.name == \"Knight\" then\n\t\tself.heroes.knight.image:setFillColor(100, 100, 100)\n\t\tself.heroes.knight.frame:setFillColor(100, 100, 100)\n\telseif hero.name == \"Mage\" then\n\t\tself.heroes.mage.image:setFillColor(100, 100, 100)\n\t\tself.heroes.mage.frame:setFillColor(100, 100, 100)\n\telseif hero.name == \"Archer\" then\n\t\tself.heroes.archer.image:setFillColor(100, 100, 100)\n\t\tself.heroes.archer.frame:setFillColor(100, 100, 100)\n\tend\n\n\tif hero.name == \"Knight\" then\n\t\tself.heroes.knight.angerFullSignal:setFillColor(100, 100, 100)\n\t\tself.heroes.knight.angerClone:setFillColor(100, 100, 100)\n\telseif hero.name == \"Mage\" then\n\t\tself.heroes.mage.angerFullSignal:setFillColor(100, 100, 100)\n\t\tself.heroes.mage.angerClone:setFillColor(100, 100, 100)\n\telseif hero.name == \"Archer\" then\n\t\tself.heroes.archer.angerFullSignal:setFillColor(100, 100, 100)\n\t\tself.heroes.archer.angerClone:setFillColor(100, 100, 100)\n\tend\n\n\tself.heroes[hero.name].angerFullSignal.isVisible = false\n\tself.hero", "CodeBleu_score": 36.27805910242866}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\tlocal pos, lookAt\n\tif (specialCameraActive) then\n\t\tpos = camera:getPosition()\n\t\tlookAt = camera:getLookAt()\n\t\tpos:interpolate(specialCameraTarget, specialCameraSpeed * dt)\n\t\tlookAt:interpolate(specialCameraLookAt, specialCameraSpeed * dt)\n\t\tcamera:setPosition(pos)\n\t\tcamera:setLookAt(lookAt)\n\telse\n\t\tlocal heroes = getHeroes()\n\t\tif (#heroes == 0) then\n\t\t\t-- there are no heroes, so just return\n\t\t\treturn\n\t\tend\n\t\tlocal focusPoint = getFocusPointOfHeros(heroes)\n\t\tpos = camera:getPosition()\n\t\tlookAt = camera:getLookAt()\n\t\tpos:interpolate(focusPoint, cameraSpeed * dt)\n\t\tlookAt:interpolate(focusPoint, cameraSpeed * dt)\n\t\tcamera:setPosition(pos)\n\t\tcamera:setLookAt(lookAt)\n\tend", "CodeBleu_score": 30.163725574216983}, {"code": "local function moveCamera(dt)\n\t-- If there is a special camera active, move the camera to the special target\n    if specialCamera then\n        -- Get the special target\n        local specialTarget = specialCamera.target\n        -- Get the special camera position\n        local specialCameraPosition = specialCamera.position\n        -- Get the special camera look at point\n        local specialCameraLookAt = specialCamera.lookAt\n        -- Get the special camera orientation\n        local specialCameraOrientation = specialCamera.orientation\n        -- Get the special camera speed\n        local specialCameraSpeed = specialCamera.speed\n\n        -- Get the special camera position and orientation\n        local specialCameraPositionX, specialCameraPositionY, specialCameraPositionZ = specialCameraPosition:get()\n        local specialCameraOrientationX, specialCameraOrientationY, specialCameraOrientationZ = specialCameraOrientation:get()\n\n        -- Get the special camera look at point\n        local specialCameraLookAtX, specialCameraLookAtY, specialCameraLookAtZ = specialCameraLookAt:get()\n\n        -- Get the special target position\n        local specialTargetX, specialTargetY, specialTargetZ = specialTarget:get()\n\n        -- Calculate the distance between the special camera position and the special target\n        local specialDistance = ((specialCameraPositionX - specialTargetX)^2 + (specialCameraPositionY - specialTargetY)^2 + (specialCameraPositionZ - specialTargetZ)^2)^0.5\n\n        -- If the special camera is not at the special target, interpolate the special camera position towards the special target\n        if specialDistance > 0.00001 then\n            -- Calculate the special camera position interpolation\n            local specialCameraPositionInterpolationX = (specialCameraPositionX - specialTargetX) / specialDistance\n            local specialCameraPositionInterpolationY = (specialCameraPositionY - specialTargetY) / specialDistance\n            local specialCameraPositionInterpolationZ = (specialCameraPositionZ - specialTargetZ) / specialDistance\n\n            -- Calculate the special camera position interpolation length\n            local specialCameraPositionInterpolationLength = (specialCameraPositionInterpolationX^2 + specialCameraPositionInterpolationY^2 + specialCameraPositionInterpolationZ^2)^0.5\n\n            -- Calculate the special camera position interpolation\n            local specialCameraPositionInterpolationX = specialCamera", "CodeBleu_score": 28.844073138217468}, {"code": "local function moveCamera(dt)\n\tlocal camera = getCamera()\n\tlocal cameraPos = getCameraPosition()\n\tlocal cameraLookAt = getCameraLookAt()\n\tlocal cameraTarget = getCameraTarget()\n\tlocal cameraTargetPos = getCameraTargetPosition()\n\tlocal cameraTargetLookAt = getCameraTargetLookAt()\n\tlocal cameraTargetLookAtPos = getCameraTargetLookAtPosition()\n\tlocal cameraTargetLookAtPosX = cameraTargetLookAtPos[1]\n\tlocal cameraTargetLookAtPosY = cameraTargetLookAtPos[2]\n\tlocal cameraTargetLookAtPosZ = cameraTargetLookAtPos[3]\n\tlocal cameraTargetPosX = cameraTargetPos[1]\n\tlocal cameraTargetPosY = cameraTargetPos[2]\n\tlocal cameraTargetPosZ = cameraTargetPos[3]\n\tlocal cameraTargetLookAtX = cameraTargetLookAt[1]\n\tlocal cameraTargetLookAtY = cameraTargetLookAt[2]\n\tlocal cameraTargetLookAtZ = cameraTargetLookAt[3]\n\tlocal cameraPosX = cameraPos[1]\n\tlocal cameraPosY = cameraPos[2]\n\tlocal cameraPosZ = cameraPos[3]\n\tlocal cameraLookAtX = cameraLookAt[1]\n\tlocal cameraLookAtY = cameraLookAt[2]\n\tlocal cameraLookAtZ = cameraLookAt[3]\n\tlocal cameraTargetLookAtPosX = cameraTargetLookAtPos[1]\n\tlocal cameraTargetLookAtPosY = cameraTargetLookAtPos[2]\n\tlocal cameraTargetLookAtPosZ = cameraTargetLookAtPos[3]\n\tlocal cameraTargetPosX = cameraTargetPos[1]\n\tlocal cameraTargetPosY = cameraTargetPos[2]\n\tlocal cameraTargetPosZ = cameraTargetPos[3]\n\tlocal cameraTargetLookAtX = cameraTargetLookAt[1]\n\tlocal cameraTargetLookAtY = cameraTargetLookAt[2]\n\tlocal cameraTargetLookAtZ = cameraTargetLookAt[3]\n\tlocal cameraTargetLookAtPosX = cameraTargetLookAtPos[1]\n\tlocal cameraTargetLookAtPosY = cameraTargetLookAtPos[2]\n\tlocal cameraTargetLookAtPosZ = cameraTargetLookAtPos[3]\n\tlocal cameraTargetPosX = cameraTargetPos", "CodeBleu_score": 18.80082812540085}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\tlocal heroes = HeroManager:getHeroes()\n\tfor _,hero in pairs(heroes) do\n\t\tlocal effectNode = hero:getEffectNode()\n\t\tif effectNode then\n\t\t\teffectNode:setPos(hero:getPos())\n\t\tend\n\tend", "CodeBleu_score": 31.479599461501927}, {"code": "local function updateParticlePos()\n\tfor i, hero in pairs(HeroManager.heroes) do\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:SetPosition(hero.position)\n\t\tend\n\tend", "CodeBleu_score": 21.68553709399648}, {"code": "local function updateParticlePos()\n\tlocal heroes = HeroManager:getHeroes()\n    for _, hero in pairs(heroes) do\n        if hero:getEffectNode() then\n            hero:getEffectNode():setPosition(hero:getPosition())\n        end\n    end", "CodeBleu_score": 33.63036103091326}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\tlocal hero = self.view:getChildByTag(self.currentHeroTag)\n  local race = hero:getChildByName(\"race\"):getCascadeBoundingBox():getName()\n  local audio = \"audio/\" .. race .. \"/rotate\"\n  audio = cc.SimpleAudioEngine:getInstance():playEffect(audio)", "CodeBleu_score": 32.31113875957018}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\tlocal hero = self:getChildByTag(1)\n    local raceType = hero:getRaceType()\n    if raceType == 0 then\n        audio.play(self.knightAudio)\n    elseif raceType == 1 then\n        audio.play(self.archerAudio)\n    elseif raceType == 2 then\n        audio.play(self.mageAudio)\n    end", "CodeBleu_score": 42.59583318368766}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\tlocal hero = self.view:getChildByTag(1)\n\tlocal race = hero:getComponent(\"ComExtensionData\"):getCustomProperty(\"race\")\n\tif race == \"knight\" then\n\t\taudio.playMusic(\"sound/knight_select.mp3\",false)\n\telseif race == \"archer\" then\n\t\taudio.playMusic(\"sound/archer_select.mp3\",false)\n\telseif race == \"mage\" then\n\t\taudio.playMusic(\"sound/mage_select.mp3\",false)\n\tend", "CodeBleu_score": 37.83093986597598}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\tlocal hero_knight = HeroKnight:new()\n\thero_knight:SetPosition(100, 100)\n\thero_knight:SetLayer(self.layer_heroes)\n\thero_knight:SetMode(Hero.Mode.Idle)\n\tself.hero_manager:AddHero(hero_knight)\n\t\n\tlocal hero_mage = HeroMage:new()\n\thero_mage:SetPosition(150, 100)\n\thero_mage:SetLayer(self.layer_heroes)\n\thero_mage:SetMode(Hero.Mode.Idle)\n\tself.hero_manager:AddHero(hero_mage)\n\t\n\tlocal hero_archer = HeroArcher:new()\n\thero_archer:SetPosition(200, 100)\n\thero_archer:SetLayer(self.layer_heroes)\n\thero_archer:SetMode(Hero.Mode.Idle)\n\tself.hero_manager:AddHero(hero_archer)", "CodeBleu_score": 49.32612787334657}, {"code": "function GameMaster:AddHeros()\n\t--Create Knight\n\tlocal knight = Hero(self.world, self, \"Knight\", 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 10", "CodeBleu_score": 11.368052616910166}, {"code": "function GameMaster:AddHeros()\n\t--[[\n    This function, AddHeros, creates and adds three hero characters (Knight, Mage, Archer) to the game.", "CodeBleu_score": 6.731852210177025}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\tlocal boss = Rat(self.map.objectLayers[2].objects[1].x, self.map.objectLayers[2].objects[1].y, self.map.objectLayers[2].objects[1].width, self.map.objectLayers[2].objects[1].height)\n\tboss.camera = self.camera\n\tboss.layer = self.map.objectLayers[2]\n\tboss.layer:add(boss)\n\tboss.facing = 'right'\n\tboss.isBoss = true\n\tboss.aiEnabled = false\n\tboss.isAlive = true\n\tboss:bounceOut()\n\tboss.aiEnabled = true\n\tself.monsterManager:addMonster(boss)", "CodeBleu_score": 44.79308254184943}, {"code": "function GameMaster:showBoss()\n\tlocal boss = Rat(self.map, self.player)\n  boss:setCameraMask(self.camera)\n  self.layer:addChild(boss)\n  boss:setPosition(self.map:tileToWorld(self.map:getWidth()/2, self.map:getHeight()/2))\n  boss:setFacing(1)\n  boss:setAIEnabled(false)\n  boss:bounceOut()\n  boss:setAIEnabled(true)\n  MonsterManager:addMonster(boss)", "CodeBleu_score": 37.078642472017}, {"code": "function GameMaster:showBoss()\n\t-- Create a new Rat object\n  local boss = Rat(self.map)\n  -- Set the camera mask to the boss layer\n  boss.camera = self.layers.boss\n  -- Add the boss to the current layer\n  self.layers.boss:insert(boss)\n  -- Set the boss's position and facing direction\n  boss.x = self.map.width * self.map.tilewidth\n  boss.y = self.map.height * self.map.tileheight\n  boss.direction = \"left\"\n  -- Disable AI initially\n  boss.aiEnabled = false\n  -- Perform a bounce-out move\n  boss:bounceOut()\n  -- Enable AI afterward\n  boss.aiEnabled = true\n  -- Add the boss to the MonsterManager list\n  self.monsterManager:addMonster(boss)", "CodeBleu_score": 38.01976598128248}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\tlocal anim3d = Animation3D.new(file)\n\tlocal anim = Animate3D.new(anim3d, begin, finish)\n\tanim:setSpeed(speed)\n\tanim:retain()\n\treturn anim", "CodeBleu_score": 40.57230549511657}, {"code": "function createAnimation(file, begin, finish, speed)\n\tlocal anim = Animation3D.new(file)\n\tlocal animate = Animate3D.new(anim, begin, finish, speed)\n\tanimate:setSpeed(speed)\n\tanimate:retain()\n\treturn animate", "CodeBleu_score": 42.06494648754584}, {"code": "function createAnimation(file, begin, finish, speed)\n\tlocal anim = Animation3D(file)\n\tlocal anim3d = Animate3D(anim, begin, finish)\n\tanim3d:setSpeed(speed)\n\tanim3d:retain()\n\treturn anim3d", "CodeBleu_score": 36.36916202607164}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\tfor i,v in pairs(table) do\n\t\ttable[i] = nil\n\tend", "CodeBleu_score": 34.743565617748054}, {"code": "function removeAll(table)\n\tfor i = 1, #table do\n\t\ttable[i]:remove()\n\tend", "CodeBleu_score": 27.283495185761243}, {"code": "function removeAll(table)\n\tfor i=#table, 1, -1 do \n\t\ttable[i] = nil \n\tend ", "CodeBleu_score": 32.779036680804566}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 60.59377770413003}, {"code": "function delayExecute(target, func, delay)\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 60.59377770413003}, {"code": "function delayExecute(target, func, delay)\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(delay), cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 60.59377770413003}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\tlocal font = \"fonts/Marker Felt.ttf\"\n\tlocal size = 24\n\tlocal text = {\n\t\t\"L\", \"o\", \"a\", \"d\", \"i\", \"n\", \"g\"\n\t}\n\tlocal y = display.contentHeight * 0.5\n\tlocal x = display.contentWidth * 0.5\n\tlocal spacing = 10\n\tlocal width = 0\n\n\tself._loading = {}\n\n\tfor i = 1, #text do\n\t\tlocal label = display.newText{\n\t\t\ttext = text[i],\n\t\t\tfont = font,\n\t\t\tfontSize = size,\n\t\t\tx = x,\n\t\t\ty = y,\n\t\t\talpha = 0\n\t\t}\n\t\tlayer:insert(label)\n\t\ttransition.to(label, {time = 500, alpha = 1})\n\t\twidth = width + label.contentWidth + spacing\n\tend", "CodeBleu_score": 37.14703113205006}, {"code": "function LoadingScene:addLoadingText(layer)\n\tlocal text = {\n        \"Loading\",\n        \"Loading.\",\n        \"Loading..\",\n        \"Loading...\"\n    }\n    self._loading = {}\n    for i = 1, #text do\n        local label = cc.Label:createWithTTF(text[i], \"fonts/Marker Felt.ttf\", 32)\n        label:setColor(cc.c3b(0, 0, 0))\n        label:setPosition(display.cx, display.cy + 32 * (i - 1))\n        layer:addChild(label)\n        table.insert(self._loading, label)\n    end", "CodeBleu_score": 37.67954740246922}, {"code": "function LoadingScene:addLoadingText(layer)\n\t-- Create the loading text labels\n    local loading = {}\n    local fontSize = 24\n    local font = native.systemFontBold\n    local textColor = { 0.8, 0.8, 0.8 }\n    local x = display.contentCenterX\n    local y = display.contentCenterY\n\n    -- Create the \"Loading\" label\n    loading[1] = display.newText(layer, \"Loading...\", x, y - 40, font, fontSize)\n    loading[1]:setFillColor(unpack(textColor))\n\n    -- Create the \"Please wait\" label\n    loading[2] = display.newText(layer, \"Please wait...\", x, y, font, fontSize)\n    loading[2]:setFillColor(unpack(textColor))\n\n    -- Store the labels in the object\n    self._loading = loading", "CodeBleu_score": 41.09672698185374}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\tlocal scene = Scene.create()\n\tscene:setName(\"MainMenuScene\")\n\tlocal layer = MainMenuLayer.create()\n\tlayer:setName(\"MainMenuLayer\")\n\tscene:addChild(layer)\n\treturn scene", "CodeBleu_score": 57.318504551047454}, {"code": "function MainMenuScene.create()\n\t-- Create a new scene object.\n    local scene = Scene.new()\n\n    -- Create a new layer.\n    local layer = Layer.new()\n\n    -- Create a new text object.\n    local text = Text.new(\"Main Menu\", 100, 200)\n\n    -- Set the font size.\n    text:setFontSize(60)\n\n    -- Add the text object to the layer.\n    layer:addChild(text)\n\n    -- Add the layer to the scene.\n    scene:addChild(layer)\n\n    -- Return the scene object.\n    return scene", "CodeBleu_score": 57.63352765694323}, {"code": "function MainMenuScene.create()\n\tlocal scene = Scene.new()\n\n    --[[\n    The layer object is the container for all the visual objects in the scene.\n    ]]\n    local layer = Layer.new()\n\n    --[[\n    The background object is a visual object that can be added to a layer.\n    It is used to display a solid color in the background of the scene.\n    ]]\n    local background = Background.create()\n    background:setType(Background.Type.COLOR)\n    background:setColor(Color.new(0.95, 0.95, 0.95))\n    layer:addChild(background)\n\n    --[[\n    The text object is a visual object that can be added to a layer.\n    It is used to display a text string in the scene.\n    ]]\n    local text = Text.create(\"Main Menu\", \"fonts/DejaVuSerif.ttf\", 24)\n    text:setPosition(Vector2.new(240, 160))\n    layer:addChild(text)\n\n    --[[\n    The button object is a visual object that can be added to a layer.\n    It is used to display a button in the scene.\n    ]]\n    local button = Button.create(\"Start\", \"fonts/DejaVuSerif.ttf\", 24)\n    button:setPosition(Vector2.new(240, 200))\n    button:addEventListener(\"click\", MainMenuScene.onStartClick)\n    layer:addChild(button)\n\n    --[[\n    The button object is a visual object that can be added to a layer.\n    It is used to display a button in the scene.\n    ]]\n    local button = Button.create(\"Exit\", \"fonts/DejaVuSerif.ttf\", 24)\n    button:setPosition(Vector2.new(240, 240))\n    button:addEventListener(\"click\", MainMenuScene.onExitClick)\n    layer:addChild(button)\n\n    --[[\n    Add the layer to the scene.\n    ]]\n    scene:addChild(layer)\n\n    --[[\n    Return the configured scene object.\n    ]]", "CodeBleu_score": 47.36894618017448}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t--[[\n    The for loop checks for collisions between the given object and all alive heroes.\n    ]]\n    for i = 1, HeroManager.getHeroCount() do\n        local hero = HeroManager.getHero(i)\n        if hero.isAlive then\n            if object.x < hero.x + hero.width and object.x + object.width > hero.x and object.y < hero.y + hero.height and object.y + object.height > hero.y then\n                solveCollision(object, hero)\n            end\n        end\n    end\n\n    --[[\n    The for loop checks for collisions between the given object and all alive monsters.\n    ]]\n    for i = 1, MonsterManager.getMonsterCount() do\n        local monster = MonsterManager.getMonster(i)\n        if monster.isAlive then\n            if object.x < monster.x + monster.width and object.x + object.width > monster.x and object.y < monster.y + monster.height and object.y + object.height > monster.y then\n                solveCollision(object, monster)\n            end\n        end\n    end", "CodeBleu_score": 45.855342308753094}, {"code": "local function collision(object)\n\n\t--[[\n    The for loop checks for collisions between the given object and all heroes.\n    ]]\n    for i = 1, HeroManager.getCount() do\n        local hero = HeroManager.getHero(i)\n        if object.x < hero.x + hero.width and object.x + object.width > hero.x and object.y < hero.y + hero.height and object.y + object.height > hero.y then\n            solveCollision(object, hero)\n        end\n    end\n\n    --[[\n    The for loop checks for collisions between the given object and all monsters.\n    ]]\n    for i = 1, MonsterManager.getCount() do\n        local monster = MonsterManager.getMonster(i)\n        if object.x < monster.x + monster.width and object.x + object.width > monster.x and object.y < monster.y + monster.height and object.y + object.height > monster.y then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 46.52393956270309}, {"code": "local function collision(object)\n\n\t--[[\n    The function solveCollision(object, otherObject) is called to resolve the collision between the given object and the other object.\n    ]]\n    local function solveCollision(object, otherObject)\n        --[[\n        The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n        ]]\n        local function checkCollision(object, otherObject)\n            --[[\n            The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n            ]]\n            local function checkCollision(object, otherObject)\n                --[[\n                The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n                ]]\n                local function checkCollision(object, otherObject)\n                    --[[\n                    The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n                    ]]\n                    local function checkCollision(object, otherObject)\n                        --[[\n                        The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n                        ]]\n                        local function checkCollision(object, otherObject)\n                            --[[\n                            The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n                            ]]\n                            local function checkCollision(object, otherObject)\n                                --[[\n                                The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n                                ]]\n                                local function checkCollision(object, otherObject)\n                                    --[[\n                                    The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n                                    ]]\n                                    local function checkCollision(object, otherObject)\n                                        --[[\n                                        The function checkCollision(object, otherObject) is called to check if the given object is colliding with the other object.\n                                        ]]\n                                        local function check", "CodeBleu_score": 17.570438749856944}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t-- Hero collision\n    for i = #heroManager.heroes, 1, -1 do\n        local hero = heroManager.heroes[i]\n        if hero.isAlive then\n            -- Hero-Monster collision\n            for j = #monsterManager.monsters, 1, -1 do\n                local monster = monsterManager.monsters[j]\n                if monster.isAlive and collision(hero, monster) then\n                    hero.isAlive = false\n                    monster.isAlive = false\n                    heroManager.heroes[i] = nil\n                    monsterManager.monsters[j] = nil\n                    heroManager.numHeroes = heroManager.numHeroes - 1\n                    monsterManager.numMonsters = monsterManager.numMonsters - 1\n                    heroManager.heroes[i] = nil\n                    monsterManager.monsters[j] = nil\n                    break\n                end\n            end\n\n            -- Hero-Bullet collision\n            for j = #bulletManager.bullets, 1, -1 do\n                local bullet = bulletManager.bullets[j]\n                if bullet.isAlive and collision(hero, bullet) then\n                    bullet.isAlive = false\n                    bulletManager.bullets[j] = nil\n                    bulletManager.numBullets = bulletManager.numBullets - 1\n                    break\n                end\n            end\n\n            -- Hero-Health collision\n            for j = #healthManager.healths, 1, -1 do\n                local health = healthManager.healths[j]\n                if health.isAlive and collision(hero, health) then\n                    health.isAlive = false\n                    healthManager.healths[j] = nil\n                    healthManager.numHealths = healthManager.numHealths - 1\n                    hero.health = hero.health + 1\n                    break\n                end\n            end\n\n            -- Hero-Key collision\n            for j = #keyManager.keys, 1, -1 do\n                local key = keyManager.", "CodeBleu_score": 36.21863999926453}, {"code": "function collisionDetect(dt)\n\tfor i = #heroManager.list, 1, -1 do\n\t\tlocal hero = heroManager.list[i]\n\t\tif hero.isAlive then\n\t\t\tcollision(hero)\n\t\t\tif isOutOfBound(hero) then\n\t\t\t\thero.isAlive = false\n\t\t\t\thero.isDead = true\n\t\t\t\thero.currentAnimation = hero.deathAnimation\n\t\t\t\thero.currentAnimation:resume()\n\t\t\t\thero.currentAnimation:setSpeed(0.2)\n\t\t\t\thero.currentAnimation:play()\n\t\t\t\thero.currentAnimation:pauseAtEnd()\n\t\t\t\thero.currentAnimation:setMode('once')\n\t\t\tend\n\t\telse\n\t\t\tif hero.isDead and hero.currentAnimation.isOver then\n\t\t\t\theroManager:remove(hero)\n\t\t\tend\n\t\tend\n\tend\n\tfor i = #monsterManager.list, 1, -1 do\n\t\tlocal monster = monsterManager.list[i]\n\t\tif monster.isAlive then\n\t\t\tcollision(monster)\n\t\t\tif isOutOfBound(monster) then\n\t\t\t\tmonster.isAlive = false\n\t\t\t\tmonster.isDead = true\n\t\t\t\tmonster.currentAnimation = monster.deathAnimation\n\t\t\t\tmonster.currentAnimation:resume()\n\t\t\t\tmonster.currentAnimation:setSpeed(0.2)\n\t\t\t\tmonster.currentAnimation:play()\n\t\t\t\tmonster.currentAnimation:pauseAtEnd()\n\t\t\t\tmonster.currentAnimation:setMode('once')\n\t\t\tend\n\t\telse\n\t\t\tif monster.isDead and monster.currentAnimation.isOver then\n\t\t\t\tmonsterManager:remove(monster)\n\t\t\tend\n\t\tend\n\tend", "CodeBleu_score": 35.552177560284036}, {"code": "function collisionDetect(dt)\n\t-- Iterate through HeroManager list in reverse order\n\tfor i = #HeroManager, 1, -1 do\n\t\tlocal hero = HeroManager[i]\n\t\t-- If hero is alive, perform collision detection and boundary checks\n\t\tif hero.alive then\n\t\t\t-- If hero is colliding with a monster, kill the monster\n\t\t\tif collision(hero, monster) then\n\t\t\t\tmonster.alive = false\n\t\t\t\t-- If hero is colliding with a coin, kill the coin\n\t\t\telseif collision(hero, coin) then\n\t\t\t\tcoin.alive = false\n\t\t\t\t-- If hero is colliding with a key, kill the key\n\t\t\telseif collision(hero, key) then\n\t\t\t\tkey.alive = false\n\t\t\t\t-- If hero is colliding with a door, kill the door\n\t\t\telseif collision(hero, door) then\n\t\t\t\tdoor.alive = false\n\t\t\t\t-- If hero is colliding with a bomb, kill the bomb\n\t\t\telseif collision(hero, bomb) then\n\t\t\t\tbomb.alive = false\n\t\t\t\t-- If hero is colliding with a trap, kill the trap\n\t\t\telseif collision(hero, trap) then\n\t\t\t\ttrap.alive = false\n\t\t\t\t-- If hero is colliding with a portal, kill the portal\n\t\t\telseif collision(hero, portal) then\n\t\t\t\tportal.alive = false\n\t\t\t\t-- If hero is colliding with a spike, kill the hero\n\t\t\telseif collision(hero, spike) then\n\t\t\t\thero.alive = false\n\t\t\t\t-- If hero is colliding with a wall, update its position\n\t\t\telseif collision(hero, wall) then\n\t\t\t\thero.x, hero.y = wall.x + wall.width/2, wall.y + wall.height/2\n\t\t\t\t-- If hero is out of bounds, kill it\n\t\t\telseif isOutOfBound(hero) then", "CodeBleu_score": 40.29245652771128}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\tif self.specialAttackSound then\n\t\tself.specialAttackSound:play()\n\tend\n\tif self.specialAttackCollider then\n\t\tself.specialAttackCollider:destroy()\n\tend\n\tself.specialAttackCollider = Collider(self.x, self.y, self.specialAttackColliderShape, self.specialAttackColliderFilter, self.specialAttackColliderGroup)\n\tself.specialAttackCollider.actor = self\n\tself.specialAttackCollider.damage = self.specialAttackDamage\n\tself.specialAttackCollider.knockback = self.specialAttackKnockback\n\tself.specialAttackCollider.stun = self.specialAttackStun\n\tself.specialAttackCollider.actorDirection = self.direction\n\tself.specialAttackCollider.actorFacingDirection = self.facingDirection\n\tself.specialAttackCollider.actorAttack = self.specialAttack\n\tself.specialAttackCollider.actorSpecialAttack = self.specialAttack\n\tself.specialAttackCollider.actorSpecialAttackCollider = self.specialAttackCollider\n\tself.specialAttackCollider.actorSpecialAttackSound = self.specialAttackSound\n\tself.specialAttackCollider:setLinearVelocity(self.specialAttackSpeed * self.facingDirection, 0)", "CodeBleu_score": 36.42337358156782}, {"code": "function Actor:specialAttack()\n\tlocal attack = self.specialAttack\n  local x, y = self.x, self.y\n  local facing = self.facing\n  \n  if self.specialAttack.type == \"projectile\" then\n    for i = 1, attack.count do\n      local angle = attack.angle + (i - 1) * (attack.angleSpacing or 0)\n      local speed = attack.speed\n      local dx, dy = speed * math.cos(angle), speed * math.sin(angle)\n      local collider = Collider(x, y, attack.width, attack.height, dx, dy, attack.damage, attack.type, attack.stunLength, attack.knockback, attack.pierce, attack.ignoreWall)\n      collider.owner = self\n      collider.attack = attack\n      collider.facing = facing\n      collider.color = self.color\n      collider.anim = self.anim\n      collider.anim.dir = facing\n      collider.sprite = self.sprite\n      collider.sprite.dir = facing\n      collider.sprite.anim = attack.anim\n      collider.sprite.speed = attack.animSpeed\n      collider.sprite.offset = attack.animOffset\n      collider.sprite.scaleX = attack.scaleX\n      collider.sprite.scaleY = attack.scaleY\n      collider.sprite.alpha = attack.alpha\n      collider.sprite.priority = attack.priority\n      collider.sprite.aboveEverything = attack.aboveEverything\n      collider.sprite.belowEverything = attack.belowEverything\n      collider.sprite.aboveMap = attack.aboveMap\n      collider.sprite.belowMap = attack.belowMap\n      collider.sprite.aboveObjects = attack.aboveObjects\n      collider.sprite.belowObjects = attack.belowObjects\n      collider.sprite.aboveParticles = attack.aboveParticles\n      collider.sprite.belowParticles = attack.belowParticles\n      collider.sprite.aboveUI = attack.aboveUI\n      collider.sprite.belowUI = attack", "CodeBleu_score": 32.3165203478654}, {"code": "function Actor:specialAttack()\n\t--[[\n\t\tThe actor's special attack properties are stored in a table called self.specialAttack.\n\t\tThe table contains the following fields:\n\t\t\t- name: The name of the special attack.\n\t\t\t- damage: The damage of the special attack.\n\t\t\t- range: The range of the special attack.\n\t\t\t- speed: The speed of the special attack.\n\t\t\t- width: The width of the special attack.\n\t\t\t- height: The height of the special attack.\n\t\t\t- sound: The sound effect of the special attack.\n\t\t\t- hitSound: The sound effect of the special attack hitting an enemy.\n\t\t\t- hitEffect: The particle effect of the special attack hitting an enemy.\n\t]]\n\tlocal attack = self.specialAttack\n\t\n\t--[[\n\t\tThe actor's current position is stored in a table called self.position.\n\t\tThe table contains the following fields:\n\t\t\t- x: The x-coordinate of the actor.\n\t\t\t- y: The y-coordinate of the actor.\n\t]]\n\tlocal position = self.position\n\t\n\t--[[\n\t\tThe actor's current facing direction is stored in a table called self.facing.\n\t\tThe table contains the following fields:\n\t\t\t- x: The x-component of the actor's facing direction.\n\t\t\t- y: The y-component of the actor's facing direction.\n\t]]\n\tlocal facing = self.facing\n\t\n\t--[[\n\t\tThe actor's current animation is stored in a table called self.animation.\n\t\tThe table contains the following fields:\n\t\t\t- name: The name of the current animation.\n\t\t\t- frame: The current frame of the current animation.\n\t\t\t- frames: The total number of frames of the current animation.\n\t]]\n\tlocal animation = self.animation\n\t\n\t--[[\n\t\tThe actor's current animation is stored in a table called self.animation.\n\t\tThe table contains the following fields:\n\t\t\t- name: The name of the current animation.\n\t\t\t- frame: The current frame of the current animation.\n\t\t\t- frames: The", "CodeBleu_score": 28.001974188686603}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\tif self.angry ~= trueFalse then\n\t\tself.angry = trueFalse\n\t\tif self.angry then\n\t\t\tself.sprite:setTexture(\"slime_angry\")\n\t\telse\n\t\t\tself.sprite:setTexture(\"slime\")\n\t\tend\n\tend", "CodeBleu_score": 54.93347715539213}, {"code": "function Slime:angryFace(trueFalse)\n\tif trueFalse == true then\n        if self.angry == false then\n            self.angry = true\n            self.sprite:setTexture(\"slime_angry\")\n        end\n    else\n        if self.angry == true then\n            self.angry = false\n            self.sprite:setTexture(\"slime_normal\")\n        end\n    end", "CodeBleu_score": 52.84427731087202}, {"code": "function Slime:angryFace(trueFalse)\n\tif trueFalse then\n        if self.angry == false then\n            self.angry = true\n            self.sprite:setTexture(self.angryTexture)\n        end\n    else\n        if self.angry == true then\n            self.angry = false\n            self.sprite:setTexture(self.normalTexture)\n        end\n    end", "CodeBleu_score": 47.520684372088496}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n    var width = paint.measureText(char.toString()).toInt()\n    var height = ceil(metric.height).toInt()\n    if (width == 0) {\n        height = getFontSize()\n        width = height\n    }\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    val data = IntArray(width * height)\n    bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 88.90917100088332}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n    var width = paint.measureText(char.toString()).toInt()\n    var height = ceil(metric.height).toInt()\n    if (width == 0) {\n        height = getFontSize()\n        width = height\n    }\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    val data = IntArray(width * height)\n    bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 88.90917100088332}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tval metric = getMetrics()  // Use our interpretation instead of paint.fontMetrics because it fixes some bad metrics\n    var width = paint.measureText(char.toString()).toInt()\n    var height = ceil(metric.height).toInt()\n    if (width == 0) {\n        height = getFontSize()\n        width = height\n    }\n\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(char.toString(), 0f, metric.leading + metric.ascent + 1f, paint)\n\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    val data = IntArray(width * height)\n    bitmap.getPixels(data, 0, width, 0, 0, width, height) // faster than bitmap[x, y]\n    for (x in 0 until width) {\n        for (y in 0 until height) {\n            pixmap.drawPixel(x, y, Integer.rotateLeft(data[x + (y * width)], 8))\n        }\n    }\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 88.90917100088332}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t// When we loaded, we returned a \"content://\" URI as file location.\n        val suggestedUri = Uri.parse(suggestedLocation)\n        val fileName = getFilename(suggestedUri, suggestedLocation)\n\n        val onFileChosen = { uri: Uri ->\n            var stream: OutputStream? = null\n            try {\n                stream = contentResolver.openOutputStream(uri, \"rwt\")\n                stream!!.writer().use { it.write(data) }\n                onSaved(uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openSaveFileChooser(fileName, suggestedUri, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.20868685899666}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\tval onFileChosen = {uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val text = stream!!.reader().use { it.readText() }\n                onLoaded(text, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 96.30834471808528}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.47914115987437}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.47914115987437}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tval intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n    intent.type = \"application/json\"\n    intent.putExtra(Intent.EXTRA_TITLE, fileName)\n    if (uri.scheme == \"content\")\n        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 99.47914115987437}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.77992497409063}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.77992497409063}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tif (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return\n    val name = appContext.resources.getString(R.string.Notify_ChannelInfo_Short)\n    val descriptionText = appContext.resources.getString(R.string.Notify_ChannelInfo_Long)\n    val importance = NotificationManager.IMPORTANCE_HIGH\n    val mChannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance)\n    mChannel.description = descriptionText\n    mChannel.setShowBadge(true)\n    mChannel.lockscreenVisibility = NotificationCompat.VISIBILITY_PUBLIC\n\n    val notificationManager = appContext.getSystemService(AndroidApplication.NOTIFICATION_SERVICE) as NotificationManager\n    notificationManager.createNotificationChannel(mChannel)\n}", "CodeBleu_score": 99.77992497409063}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\tval defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.6625162225946}, {"code": "fun packImages(workingPath: String){\n\tval defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.6625162225946}, {"code": "fun packImages(workingPath: String){\n\tval defaultSettings = getDefaultSettings()\n\n    // Scan for Image folders and build one atlas each\n    packImagesPerMod(workingPath, \"$workingPath/assets/\", defaultSettings)\n\n    // pack for mods\n    val modDirectory = File(\"mods\")\n    if (!modDirectory.exists())\n        return\n    for (mod in modDirectory.listFiles()!!) {\n        if (mod.isHidden)\n            continue\n        try {\n            packImagesPerMod(mod.path, mod.path, defaultSettings)\n        } catch (ex: Throwable) {\n            ex.printStackTrace()\n        }\n    }\n}", "CodeBleu_score": 99.6625162225946}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\twithGLContext {\n        worldScreen!!.dispose()\n        setScreen(LoadingScreen(getScreen()))\n        worldScreen = loadGame(gameInfo!!, autoPlay = worldScreen!!.autoPlay, callFromLoadScreen = true)\n        setScreen(worldScreen!!)\n    }\n}", "CodeBleu_score": 24.0087975529016}, {"code": "suspend fun reloadWorldscreen(){\n\tval worldScreen = worldScreen\n    if (worldScreen != null) {\n        worldScreen.dispose()\n        setScreen(WorldScreen(worldScreen.gameInfo, worldScreen.autoPlay, worldScreen.getPlayerToViewAs(), worldScreen.getRestoreState()))\n    }\n}", "CodeBleu_score": 46.084912100028774}, {"code": "suspend fun reloadWorldscreen(){\n\tval worldScreen = worldScreen!!\n    val gameInfo = gameInfo!!\n\n    val newWorldScreen = loadGame(gameInfo, worldScreen.getRestoreState())\n    worldScreen.dispose()\n    worldScreen.setScreen(newWorldScreen)\n}", "CodeBleu_score": 35.62116708623393}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\tif (isInitialized) {\n        // We're already initialized, so we can just go to the main menu\n        return MainMenuScreen()\n    } else {\n        // We're not initialized yet, so we'll need to do that first\n        return MainMenuScreen()\n    }\n}", "CodeBleu_score": 19.351805257530163}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tval mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.pushScreen(MainMenuScreen())\n    return mainMenuScreen\n}", "CodeBleu_score": 44.27080014296892}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tval mainMenuScreen = MainMenuScreen()\n    mainMenuScreen.setAsRootScreen()\n    return mainMenuScreen\n}", "CodeBleu_score": 43.4768488096417}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t// Calling AWT after Gdx is fully initialized seems icky, but seems to have no side effects\n        // Found no equivalent in Gdx - available _desktop_ surface without taskbars etc\n        // *for the primary monitor* - no saving window sizes that span over several monitors\n        val maximumWindowBounds = getMaximumWindowBounds()\n\n        // Make sure an inappropriate saved size doesn't make the window unusable\n        val (width, height) = settings.windowState.coerceIn(maximumWindowBounds)\n\n        // Kludge - see also DesktopLauncher - without, moving the window might revert to the size stored in config\n        (Lwjgl3Application::class.java).getDeclaredField(\"config\").run {\n            isAccessible = true\n            get(Gdx.app) as Lwjgl3ApplicationConfiguration\n        }.setWindowedMode(width, height)\n\n        Gdx.graphics.setWindowedMode(width, height)\n\n        return width == maximumWindowBounds.width && height == maximumWindowBounds.height\n    }", "CodeBleu_score": 98.13445566958438}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}, {"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}, {"code": "private fun getLinuxDistro(): String{\n\tval osRelease: Map<String,String> = try {\n        FileHandle(\"/etc/os-release\")\n            .readString()\n            .split('\n')\n            .map { it.split('=') }\n            .filter { it.size == 2 }\n            .associate { it[0] to it[1].removeSuffix(\"\\\"\").removePrefix(\"\\\"\") }\n    } catch (_: Throwable) { mapOf() }\n    if (\"NAME\" !in osRelease) return \"\"\n    return osRelease[\"PRETTY_NAME\"] ?: \"${osRelease[\"NAME\"]} ${osRelease[\"VERSION\"]}\"\n}", "CodeBleu_score": 93.94444509467124}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\ttry {\n        when {\n            HostServices.isWindows -> {\n                // Windows flashes both the taskbar button and the title bar.\n                // This has a side effect of bringing the window to focus.\n                HostServices.showDocument(HostServices.getDocumentBase().toString())\n            }\n            HostServices.isMac -> {\n                // Macs flash the dock icon.\n                HostServices.showDocument(HostServices.getDocumentBase().toString())\n            }\n            HostServices.isUnix -> {\n                // Linux/Unix hosts can use the KDialog binary to flash the taskbar button.\n                val process = ProcessBuilder(\"kdialog\", \"--passivepopup\", \"New message\", \"5\", \"\").start()\n                process.waitFor(5, TimeUnit.SECONDS)\n            }\n        }\n    } catch (e: Exception) {\n        logger.error(\"Exception while attempting to flash window\", e)\n    }\n}", "CodeBleu_score": 43.61113437048104}, {"code": "private fun flashWindow(){\n\ttry {\n        when {\n            System.getProperty(\"os.name\").contains(\"mac\", true) -> {\n                Runtime.getRuntime().exec(arrayOf(\"osascript\", \"-e\", \"tell app \\\"${System.getProperty(\"app.name\")}\\\" to activate\"))\n            }\n            System.getProperty(\"os.name\").contains(\"win\", true) -> {\n                Runtime.getRuntime().exec(arrayOf(\"cmd.exe\", \"/c\", \"start\", \"cmd.exe\", \"/c\", \"echo ^G\"))\n            }\n            else -> {\n                Runtime.getRuntime().exec(arrayOf(\"xdotool\", \"search\", \"--name\", System.getProperty(\"app.name\"), \"windowfocus\"))\n            }\n        }\n    } catch (e: Exception) {\n        logger.error(\"Failed to flash window\", e)\n    }\n}", "CodeBleu_score": 44.72724066995117}, {"code": "private fun flashWindow(){\n\ttry {\n        when {\n            System.getProperty(\"os.name\").contains(\"mac\", true) -> {\n                val clazz = Class.forName(\"com.apple.eawt.Application\")\n                val method = clazz.getMethod(\"getApplication\")\n                val application = method.invoke(null)\n                val requestUserAttention = clazz.getMethod(\"requestUserAttention\", Boolean::class.javaPrimitiveType)\n                requestUserAttention.invoke(application, true)\n            }\n            System.getProperty(\"os.name\").contains(\"win\", true) -> {\n                val clazz = Class.forName(\"com.sun.jna.platform.win32.User32\")\n                val method = clazz.getMethod(\"FindWindow\", String::class.java, String::class.java)\n                val hWnd = method.invoke(null, null, null)\n                val flashWindow = clazz.getMethod(\"FlashWindow\", Long::class.java, Boolean::class.java)\n                flashWindow.invoke(null, hWnd, true)\n            }\n            else -> {\n                // Fallback method\n                val clazz = Class.forName(\"java.awt.Window\")\n                val method = clazz.getMethod(\"setAlwaysOnTop\", Boolean::class.javaPrimitiveType)\n                method.invoke(this, true)\n                val alwaysOnTop = clazz.getMethod(\"isAlwaysOnTop\")\n                Thread.sleep(500)\n                method.invoke(this, !alwaysOnTop.invoke(this) as Boolean)\n            }\n        }\n    } catch (e: Exception) {\n        logger.error(\"Failed to flash window\", e)\n    }\n}", "CodeBleu_score": 38.478620828339}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\tLog.d(TAG, \"onFullBackup()\");\n\t\n\t// Backup the shared preferences file\n\ttry {\n\t\tdata.writeEntityHeader(SHARED_PREFS_FILE, SHARED_PREFS_FILE.length());\n\t\tdata.writeEntityData(getSharedPrefsFile(), SHARED_PREFS_FILE.length());\n\t} catch (IOException e) {\n\t\tLog.e(TAG, \"Unable to write shared preferences file to the Full Backup Data Output\", e);\n\t}\n\t\n\t// Backup the rankings file\n\ttry {\n\t\tdata.writeEntityHeader(RANKINGS_FILE, RANKINGS_FILE.length());\n\t\tdata.writeEntityData(getRankingsFile(), RANKINGS_FILE.length());\n\t} catch (IOException e) {\n\t\tLog.e(TAG, \"Unable to write rankings file to the Full Backup Data Output\", e);\n\t}\n\t\n\t// Backup the badges file\n\ttry {\n\t\tdata.writeEntityHeader(BADGES_FILE, BADGES_FILE.length());\n\t\tdata.writeEntityData(getBadgesFile(), BADGES_FILE.length());\n\t} catch (IOException e) {\n\t\tLog.e(TAG, \"Unable to write badges file to the Full Backup Data Output\", e);\n\t}\n\t\n\t// Backup the journal entries file\n\ttry {\n\t\tdata.writeEntityHeader(JOURNAL_FILE, JOURNAL_FILE.length());\n\t\tdata.writeEntityData(getJournalFile(), JOURNAL_FILE.length());\n\t} catch (IOException e) {\n\t\tLog.e(TAG, \"Unable to write journal entries file to the Full Backup Data Output\", e);\n\t}\n}", "CodeBleu_score": 21.428471993309078}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\tFile base = new File(Environment.getExternalStorageDirectory(), \"Android/data/\" + mContext.getPackageName());\n\tFile sharedPrefs = getFile(base, \"shared_prefs\");\n\tFile rankings = getFile(base, \"files/rankings\");\n\tFile badges = getFile(base, \"files/badges\");\n\tFile journal = getFile(base, \"files/journal\");\n\n\ttry {\n\t\tif (sharedPrefs != null) {\n\t\t\tdata.writeEntityHeader(sharedPrefs, sharedPrefs.length());\n\t\t\tFileInputStream in = new FileInputStream(sharedPrefs);\n\t\t\tbyte[] buffer = new byte[8192];\n\t\t\tint bytesRead;\n\t\t\twhile ((bytesRead = in.read(buffer)) != -1) {\n\t\t\t\tdata.writeEntityData(buffer, 0, bytesRead);\n\t\t\t}\n\t\t\tin.close();\n\t\t}\n\t\tif (rankings != null) {\n\t\t\tdata.writeEntityHeader(rankings, rankings.length());\n\t\t\tFileInputStream in = new FileInputStream(rankings);\n\t\t\tbyte[] buffer = new byte[8192];\n\t\t\tint bytesRead;\n\t\t\twhile ((bytesRead = in.read(buffer)) != -1) {\n\t\t\t\tdata.writeEntityData(buffer, 0, bytesRead);\n\t\t\t}\n\t\t\tin.close();\n\t\t}\n\t\tif (badges != null) {\n\t\t\tdata.writeEntityHeader(badges, badges.length());\n\t\t\tFileInputStream in = new FileInputStream(badges);\n\t\t\tbyte[] buffer = new byte[8192];\n\t\t\tint bytesRead;\n\t\t\twhile ((bytesRead = in.read(buffer)) != -1) {\n\t\t\t\tdata.writeEntityData(buffer, 0, bytesRead);\n\t\t\t}\n\t\t\tin.close();\n\t\t}\n\t\tif (journal != null) {\n\t\t\tdata.writeEntityHeader(journal, journal.length());\n\t\t\tFileInputStream in =", "CodeBleu_score": 17.4173787381755}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\tFile base = new File(mContext.getFilesDir(), \"\");\n\t\tFile file = getFile(base, \"shared_prefs\");\n\t\tif (file != null){\n\t\t\ttry {\n\t\t\t\tdata.writeEntityHeader(file, file.length());\n\t\t\t\twriteFile(data, file);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tfile = getFile(base, \"ranking\");\n\t\tif (file != null){\n\t\t\ttry {\n\t\t\t\tdata.writeEntityHeader(file, file.length());\n\t\t\t\twriteFile(data, file);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tfile = getFile(base, \"badges\");\n\t\tif (file != null){\n\t\t\ttry {\n\t\t\t\tdata.writeEntityHeader(file, file.length());\n\t\t\t\twriteFile(data, file);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tfile = getFile(base, \"journal\");\n\t\tif (file != null){\n\t\t\ttry {\n\t\t\t\tdata.writeEntityHeader(file, file.length());\n\t\t\t\twriteFile(data, file);\n\t\t\t} catch (IOException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 29.47959182917671}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n        return networkInfo != null && !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.getType() != ConnectivityManager.TYPE_MOBILE;\n    }\n}", "CodeBleu_score": 46.501134137256905}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        return connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo activeNetworkInfo = ((ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();\n        return activeNetworkInfo != null && activeNetworkInfo.isConnected() && (activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIFI || activeNetworkInfo.getType() == ConnectivityManager.TYPE_WIMAX || activeNetworkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetworkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 62.98229833469009}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        ConnectivityManager connectivityManager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);\n        NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n        return networkInfo != null && !connectivityManager.isActiveNetworkMetered();\n    } else {\n        NetworkInfo networkInfo = ((ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();\n        return networkInfo != null && networkInfo.getType() == ConnectivityManager.TYPE_WIFI;\n    }\n}", "CodeBleu_score": 50.15519745519703}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\tif ( hero.isAlive() ) {\n\t\thero.heal( hero.getMaxHP() );\n\t\thero.cure();\n\t\thero.cureEquippedItems();\n\t\thero.satisfyHunger();\n\t\thero.restore();\n\t\thero.sprite.emitter().burst( Speck.factory( Speck.HEALING ), 5 );\n\t\thero.sprite.showStatus( CharSprite.POSITIVE, Messages.get(this, \"heal\") );\n\t\tSample.INSTANCE.play( Assets.Sounds.HEAL );\n\t\treturn true;\n\t} else {\n\t\thero.sprite.showStatus( CharSprite.NEGATIVE, Messages.get(this, \"dead\") );\n\t\tSample.INSTANCE.play( Assets.Sounds.DEATH );\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 38.4156691551693}, {"code": "protected boolean affectHero( Hero hero ){\n\tif (hero.isDead()) {\n\t\treturn false;\n\t}\n\t\n\thero.restoreHealth();\n\t\n\thero.cure();\n\t\n\thero.cureAll();\n\t\n\thero.satisfy();\n\t\n\thero.restoreHealth();\n\t\n\thero.sprite.emitter().burst( Speck.factory( Speck.HEALING ), 5 );\n\thero.sprite.showStatus( CharSprite.NEUTRAL, Messages.get(this, \"affected\") );\n\t\n\tSample.INSTANCE.play( Assets.Sounds.HEALING );\n\t\n\treturn true;\n}", "CodeBleu_score": 35.55598736091755}, {"code": "protected boolean affectHero( Hero hero ){\n\tif ( hero.isAlive() ) {\n        hero.restoreHealth();\n        hero.heal();\n        hero.cureAilments();\n        hero.cureCurses();\n        hero.satisfyHunger();\n        hero.setHealth( hero.getMaxHealth() );\n        hero.getWorld().playSound( \"restore.wav\", hero.getLocation() );\n        hero.getWorld().addLog( hero.getLogName() + \" is restored!\" );\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 20.386747066825038}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\tif (item == null) return null;\n  if (item.isWaterskin() && !item.isFull()) {\n    item.fill();\n    return item;\n  }\n  if (item.isAnkh() && !item.isBlessed()) {\n    item.setBlessed(true);\n    return item;\n  }\n  if (item.isUncursable()) return null;\n  if (item.isCursed()) {\n    item.setCursed(false);\n    return item;\n  }\n  return null;\n}", "CodeBleu_score": 30.047336804454165}, {"code": "protected Item affectItem( Item item, int pos ){\n\tif (item.type == ItemType.WATERSKIN && item.state < item.maxState) {\n    item.state = item.maxState;\n    return new Item(ItemType.WATERSKIN);\n  } else if (item.type == ItemType.ANKH && !item.isBlessed) {\n    item.isBlessed = true;\n    return new Item(ItemType.ANKH);\n  } else if (item.type == ItemType.UNCURSABLE && item.isCursed) {\n    item.isCursed = false;\n    return new Item(ItemType.UNCURSABLE);\n  }\n  return null;\n}", "CodeBleu_score": 22.890158185252858}, {"code": "protected Item affectItem( Item item, int pos ){\n\tif (item.getType() == ItemType.WATERSKIN) {\n        if (item.getState() == ItemState.EMPTY) {\n            item.setState(ItemState.FULL);\n            item.setImage(Image.WATERSKIN_FULL);\n            return item;\n        }\n    }\n    else if (item.getType() == ItemType.ANKH) {\n        if (item.getState() == ItemState.UNBLESSED) {\n            item.setState(ItemState.BLESSED);\n            item.setImage(Image.ANKH_BLESSED);\n            return item;\n        }\n    }\n    else if (item.getType() == ItemType.CURSED_SWORD) {\n        if (item.getState() == ItemState.CURSED) {\n            item.setState(ItemState.UNCURSED);\n            item.setImage(Image.SWORD);\n            return item;\n        }\n    }\n    return null;\n}", "CodeBleu_score": 29.678686878828703}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tif (enemy.getAlignment() == Alignment.ENEMY) {\n        enemy.applyBuff(buffCls);\n        enemy.rollForLoot(hero);\n        hero.addKill(enemy);\n        hero.updateAscensionChallenges();\n        if (hero instanceof Monk) {\n            ((Monk) hero).processMonkBuffs();\n        }\n    }\n}", "CodeBleu_score": 20.079972723129107}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tif (enemy.isAlly()) {\n        enemy.addBuff(buffCls);\n        enemy.setAlly(false);\n        if (hero.getClass().getSimpleName().equals(\"Monk\")) {\n            hero.addBuff(MonkBuff.class);\n        }\n        hero.addExperience(enemy.getExperience());\n        hero.addKill();\n        hero.addEnergy(enemy.getEnergy());\n        if (hero.getLevel() > enemy.getLevel()) {\n            hero.addEnergy(enemy.getEnergy());\n        }\n        if (hero.getLevel() < enemy.getLevel()) {\n            hero.addExperience(enemy.getExperience() / 2);\n        }\n        if (hero.getLevel() == enemy.getLevel()) {\n            hero.addExperience(enemy.getExperience());\n        }\n        if (hero.getClass().getSimpleName().equals(\"Monk\")) {\n            hero.addEnergy(enemy.getEnergy());\n        }\n        hero.addEnergy(enemy.getEnergy());\n        if (hero.getLevel() > enemy.getLevel()) {\n            hero.addEnergy(enemy.getEnergy());\n        }\n        if (hero.getLevel() < enemy.getLevel()) {\n            hero.addExperience(enemy.getExperience() / 2);\n        }\n        if (hero.getLevel() == enemy.getLevel()) {\n            hero.addExperience(enemy.getExperience());\n        }\n        if (hero.getClass().getSimpleName().equals(\"Monk\")) {\n            hero.addEnergy(enemy.getEnergy());\n        }\n        hero.addEnergy(enemy.getEnergy());\n        if (hero.getLevel() > enemy.getLevel()) {\n            hero.addEnergy(enemy.getEnergy());\n        }\n        if (hero.getLevel() < enemy.getLevel()) {", "CodeBleu_score": 23.274345771924875}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\tif (enemy.getAlignment() == Alignment.ENEMY) {\n        enemy.addBuff(buffCls);\n        enemy.rollForLoot(hero);\n        enemy.updateKillStatistics(hero);\n        enemy.processAscensionChallenges(hero);\n        if (hero.getAlignment() == Alignment.HERO) {\n            if (hero instanceof Monk) {\n                ((Monk) hero).addEnergy(enemy.getLevel() - hero.getLevel());\n            }\n            hero.addExperience(enemy.getLevel() - hero.getLevel());\n        }\n    }\n}", "CodeBleu_score": 26.3922288797695}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\tif (isAscensionChallengeActive()) {\n\t\tif (enemy.isTransformed()) {\n\t\t\tenemy.revertTransform();\n\t\t}\n\t\tif (enemy.isBoss()) {\n\t\t\treturn;\n\t\t}\n\t\tif (!enemy.isBoosted()) {\n\t\t\tif (enemy.isElite()) {\n\t\t\t\tif (getAscensionChallengeStacks() > 1) {\n\t\t\t\t\tsetAscensionChallengeStacks(getAscensionChallengeStacks() - 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (getAscensionChallengeStacks() > 0) {\n\t\t\t\t\tsetAscensionChallengeStacks(getAscensionChallengeStacks() - 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (getAscensionChallengeStacks() < 10) {\n\t\t\tlogWeakening();\n\t\t}\n\t\tif (getHero().getLevel() == 20) {\n\t\t\tif (getHero().getExperience() < getHero().getExperienceNeededForNextLevel()) {\n\t\t\t\tgetHero().addExperience(1);\n\t\t\t}\n\t\t}\n\t\tgetHero().refreshBuffIndicators();\n\t}\n}", "CodeBleu_score": 12.23795563480513}, {"code": "public static void processEnemyKill(Char enemy){\n\tif (hero.hasEffect(AscensionChallenge.ID)) {\n        if (enemy.type == EnemyType.ELITE) {\n            enemy.type = EnemyType.NORMAL;\n            enemy.sprite.setAnimation(EnemyAnimation.NORMAL);\n            enemy.sprite.setColor(Color.WHITE);\n        }\n        if (enemy.type == EnemyType.BOSS) {\n            enemy.type = EnemyType.NORMAL;\n            enemy.sprite.setAnimation(EnemyAnimation.NORMAL);\n            enemy.sprite.setColor(Color.WHITE);\n        }\n        if (enemy.type == EnemyType.ELITE_BOSS) {\n            enemy.type = EnemyType.BOSS;\n            enemy.sprite.setAnimation(EnemyAnimation.BOSS);\n            enemy.sprite.setColor(Color.WHITE);\n        }\n        if (enemy.type == EnemyType.ELITE_BOSS_FINAL) {\n            enemy.type = EnemyType.BOSS;\n            enemy.sprite.setAnimation(EnemyAnimation.BOSS);\n            enemy.sprite.setColor(Color.WHITE);\n        }\n        if (enemy.type == EnemyType.BOSS_FINAL) {\n            enemy.type = EnemyType.NORMAL;\n            enemy.sprite.setAnimation(EnemyAnimation.NORMAL);\n            enemy.sprite.setColor(Color.WHITE);\n        }\n        if (enemy.type == EnemyType.ELITE_FINAL) {\n            enemy.type = EnemyType.NORMAL;\n            enemy.sprite.setAnimation(EnemyAnimation.NORMAL);\n            enemy.sprite.setColor(Color.WHITE);\n        }\n        if (enemy.type == EnemyType.FINAL) {\n            enemy.type = EnemyType.NORMAL;\n            enemy.sprite.setAnimation(EnemyAnimation.NORMAL);\n            enemy.sprite.setColor(Color.WHITE);\n        }", "CodeBleu_score": 13.848348277687581}, {"code": "public static void processEnemyKill(Char enemy){\n\tif (hero.hasBuff(AscensionChallenge.ID)) {\n        if (enemy.type == EnemyType.ELITE) {\n            enemy.type = EnemyType.NORMAL;\n        }\n        if (enemy.type == EnemyType.BOSS) {\n            enemy.type = EnemyType.ELITE;\n        }\n        if (enemy.type == EnemyType.BOSS_ELITE) {\n            enemy.type = EnemyType.BOSS;\n        }\n        if (enemy.hasBuff(EnemyStrength.ID)) {\n            return;\n        }\n        int stacks = hero.getBuff(AscensionChallenge.ID).stacks;\n        switch (enemy.type) {\n            case NORMAL:\n                stacks -= 1;\n                break;\n            case ELITE:\n                stacks -= 2;\n                break;\n            case BOSS:\n                stacks -= 3;\n                break;\n            case BOSS_ELITE:\n                stacks -= 4;\n                break;\n        }\n        if (stacks <= 5) {\n            log(\"The challenge is weakening!\");\n        }\n        hero.getBuff(AscensionChallenge.ID).stacks = stacks;\n        if (hero.level() == 25) {\n            hero.exp += 1;\n        }\n        hero.refreshHeroBuffIndicators();\n    }\n}", "CodeBleu_score": 24.29537861503982}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\tif (m.isAscensionDemon()) {\n\t\treturn 10;\n\t}\n\tif (m.isGhoul()) {\n\t\treturn 7;\n\t}\n\tif (m.isMiniboss()) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.hasBuff(\"Block Ascension\")) {\n\t\treturn m.getExp();\n\t}\n\tif (m.isTransformed()) {\n\t\treturn AscensionCorruptResist(m.getOriginalMob());\n\t}\n\treturn m.getExp();\n}", "CodeBleu_score": 17.48093092046255}, {"code": "public static int AscensionCorruptResist(Mob m){\n\tif (m.isTransformed()) {\n\t\tm = m.getOriginal();\n\t}\n\tif (m.getBuff(\"BlockAscension\") != null) {\n\t\treturn m.getExp();\n\t}\n\tif (m.getId() == 2001) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2002) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2003) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2004) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2005) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2006) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2007) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2008) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2009) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2010) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2011) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2012) {\n\t\treturn Math.max(13, m.getExp());\n\t}\n\tif (m.getId() == 2013) {\n\t\treturn Math.max(1", "CodeBleu_score": 15.294991346410653}, {"code": "public static int AscensionCorruptResist(Mob m){\n\tif (m.getBuff(\"Ascension\") != null) {\n\t\treturn m.getBuff(\"Ascension\").getInt(\"Resist\");\n\t} else if (m.getBuff(\"AscensionBlock\") != null) {\n\t\treturn m.getExp();\n\t} else if (m.getBuff(\"Transformed\") != null) {\n\t\tMob original = m.getBuff(\"Transformed\").getMob(\"Original\");\n\t\treturn AscensionCorruptResist(original);\n\t} else if (m.getBuff(\"RipperDemon\") != null) {\n\t\treturn 10;\n\t} else if (m.getBuff(\"Ghoul\") != null) {\n\t\treturn 7;\n\t} else if (m.isType(\"Skeleton\") || m.isType(\"Zombie\") || m.isType(\"Ghost\") || m.isType(\"Ghoul\") || m.isType(\"Ghast\") || m.isType(\"Specter\") || m.isType(\"Wraith\") || m.isType(\"Golem\") || m.isType(\"Demon\") || m.isType(\"Goblin\") || m.isType(\"Goblin Warrior\") || m.isType(\"Goblin King\") || m.isType(\"Skeleton King\") || m.isType(\"Zombie King\") || m.isType(\"Ghost King\") || m.isType(\"Ghoul King\") || m.isType(\"Ghast King\") || m.isType(\"Specter King\") || m.isType(\"Wraith King\") || m.isType(\"Golem King\") || m.isType(\"Demon King\") || m.isType(\"Goblin Lord\") || m.isType(\"Goblin Lord King\") || m.isType(\"Goblin Lord King\") || m.isType(\"Goblin Lord King\") || m.isType(\"Goblin Lord King\") || m.isType(\"Goblin Lord King\") || m.isType(\"Goblin Lord King\") || m.isType(\"Goblin Lord King\") || m.isType(\"Goblin Lord King\") || m.", "CodeBleu_score": 24.694757354788162}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\tif (enemy.isAlive() || enemy.getHealth() == enemy.getMaxHealth()){\n\t\tif (count == 0){\n\t\t\tcomboTimer = 0;\n\t\t\tcount++;\n\t\t\tcomboTime = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer = 0;\n\t\t\tcomboTimer =", "CodeBleu_score": 10.057317864312004}, {"code": "public void hit( Char enemy ){\n\tif (enemy.isDead() || enemy.getHealth() == enemy.getMaxHealth()) {\n\t\tif (enemy.isDead()) {\n\t\t\tcomboTimer = comboTimer + (int) (comboTimer * (talents.get(Talent.Cleave) * 0.2));\n\t\t} else {\n\t\t\tcomboTimer = comboTimer + (int) (comboTimer * (talents.get(Talent.Cleave) * 0.1));\n\t\t}\n\t\tcomboTimer = Math.min(comboTimer, 100);\n\t}\n\tif (count == 0) {\n\t\tinitialComboTime = comboTimer;\n\t}\n\tcount++;\n\tif (count == 1) {\n\t\tactionIndicator.add(new ActionIndicator(\"Combo\", 0, 100, 100, 100, 100));\n\t} else if (count == 2) {\n\t\tactionIndicator.add(new ActionIndicator(\"Double Combo\", 0, 100, 100, 100, 100));\n\t} else if (count == 3) {\n\t\tactionIndicator.add(new ActionIndicator(\"Triple Combo\", 0, 100, 100, 100, 100));\n\t} else if (count == 4) {\n\t\tactionIndicator.add(new ActionIndicator(\"Quad Combo\", 0, 100, 100, 100, 100));\n\t} else if (count == 5) {\n\t\tactionIndicator.add(new ActionIndicator(\"Penta Combo\", 0, 100, 100, 100, 100));\n\t} else if (count == 6) {\n\t\tactionIndicator.add(new ActionIndicator(\"Hexa Combo\", 0, 100, 100, 100, 100));\n\t} else if (count == 7) {\n\t\tactionIndicator.add(new ActionIndicator", "CodeBleu_score": 30.842544905146816}, {"code": "public void hit( Char enemy ){\n\tif (enemy.getHealth() > 0 && !enemy.hasBuff(Buff.CORRUPTION)) {\n\t\t\tcount++;\n\t\t\t\n\t\t\tif (count > 1) {\n\t\t\t\t\n\t\t\t\tif (comboTimer == 0) {\n\t\t\t\t\tcomboTimer = (int) (System.currentTimeMillis() / 1000);\n\t\t\t\t\tinitialComboTime = comboTimer;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (enemy.getHealth() == enemy.getMaxHealth()) {\n\t\t\t\t\tcomboTimer = (int) (System.currentTimeMillis() / 1000);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (hero.getTalentPoints(Talent.CLEAVE) > 0) {\n\t\t\t\t\tcomboTimer += 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (hero.getTalentPoints(Talent.CLEAVE) > 1) {\n\t\t\t\t\tcomboTimer += 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (hero.getTalentPoints(Talent.CLEAVE) > 2) {\n\t\t\t\t\tcomboTimer += 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (hero.getTalentPoints(Talent.CLEAVE) > 3) {\n\t\t\t\t\tcomboTimer += 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (hero.getTalentPoints(Talent.CLEAVE) > 4) {\n\t\t\t\t\tcomboTimer += 1;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (hero.getTalentPoints(Talent.CLEAVE) > 5) {\n\t\t\t\t\tcomboTimer += 1;", "CodeBleu_score": 26.13525126238716}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\tint cap = super.capacity();\n\t\t\tfor (Item item : items){\n\t\t\t\tif (item instanceof Bag){\n\t\t\t\t\tcap++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null){\n\t\t\t\t//secondary weapons still occupy an inv. slot\n\t\t\t\tcap--;\n\t\t\t}\n\t\t\treturn cap;\n\t\t}", "CodeBleu_score": 94.29099892143115}, {"code": "public int capacity(){\n\tint cap = super.capacity();\n\tfor (Item item : items) {\n\t\tif (item instanceof Bag) {\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null) {\n\t\t// secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 88.82702000839635}, {"code": "public int capacity(){\n\tint cap = super.capacity();\n\tfor (Item item : items){\n\t\tif (item instanceof Bag){\n\t\t\tcap++;\n\t\t}\n\t}\n\tif (Dungeon.hero != null && Dungeon.hero.belongings.secondWep != null){\n\t\t//secondary weapons still occupy an inv. slot\n\t\tcap--;\n\t}\n\treturn cap;\n}", "CodeBleu_score": 96.3219810028674}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\tint ht = 100 + (int)(level * 0.6);\n  if ( hasRingOfMight ) ht += 50;\n  if ( hasElixirOfMight ) ht += 50;\n  ht *= htMultiplier;\n  ht = max( ht, 100 );\n  ht = min( ht, 500 );\n  if ( boostHP ) hp = ht;\n  ht = max( ht, hp );\n  hp = min( hp, ht );\n}", "CodeBleu_score": 17.65649175026792}, {"code": "public void updateHT( boolean boostHP ){\n\tint ht = 10 + level * 10;\n  if (hasRingOfMight) {\n    ht += 10;\n  }\n  if (hasElixirOfMight) {\n    ht += 20;\n  }\n  if (hasRingOfHealth) {\n    ht += 20;\n  }\n  if (hasElixirOfHealth) {\n    ht += 40;\n  }\n  if (hasRingOfLife) {\n    ht += 80;\n  }\n  if (hasElixirOfLife) {\n    ht += 160;\n  }\n  if (hasRingOfRegen) {\n    ht += 160;\n  }\n  if (hasElixirOfRegen) {\n    ht += 320;\n  }\n  if (hasRingOfEnergy) {\n    ht += 320;\n  }\n  if (hasElixirOfEnergy) {\n    ht += 640;\n  }\n  if (hasRingOfVitality) {\n    ht += 640;\n  }\n  if (hasElixirOfVitality) {\n    ht += 1280;\n  }\n  if (hasRingOfPower) {\n    ht += 1280;\n  }\n  if (hasElixirOfPower) {\n    ht += 2560;\n  }\n  if (hasRingOfSpirit) {\n    ht += 2560;\n  }\n  if (hasElixirOfSpirit) {\n    ht += 5120;\n  }\n  if (hasRingOfMind) {\n    ht += 5120;\n  }\n  if (hasElixirOfMind) {\n    ht += 10240;\n  }\n  if (hasRingOfSoul) {\n    ht += 10240;", "CodeBleu_score": 11.608133425916545}, {"code": "public void updateHT( boolean boostHP ){\n\t// The base formula for HT is 100 + 10 per level.\n  float newHT = 100 + 10 * level;\n\n  // The RingOfMight buff adds 10% of HT per level.\n  if (ringOfMight) {\n    newHT *= 1.1;\n  }\n\n  // The ElixirOfMight buff adds 10% of HT per level.\n  if (elixirOfMight) {\n    newHT *= 1.1;\n  }\n\n  // The multiplier from the PotionOfHealth buff is applied.\n  newHT *= potionOfHealthMultiplier;\n\n  // If boostHP is true, HP is set to the new HT value.\n  if (boostHP) {\n    hp = newHT;\n  }\n\n  // The new HT value is set.\n  ht = newHT;\n\n  // HP is clamped to the new HT value.\n  if (hp > ht) {\n    hp = ht;\n  }\n}", "CodeBleu_score": 14.518758309685273}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\tif ( enemy.isEnemy() || enemy.isNeutralMimic() ) {\n        if ( wep.attemptAttack( enemy ) ) {\n            setThrownWeapon( wep );\n            enemy.attackedBy( this );\n            clearThrownWeapon();\n            if ( isGladiator() || isDuelist() ) {\n                if ( enemy.isAlive() ) {\n                    if ( isGladiator() ) {\n                        applyBuff( new GladiatorBuff( this ) );\n                    } else if ( isDuelist() ) {\n                        applyBuff( new DuelistBuff( this ) );\n                    }\n                }\n            }\n            return true;\n        }\n    }\n    return false;\n}", "CodeBleu_score": 15.13419292501767}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\tif ( enemy.isAligned( Char.Alignment.ENEMY ) || enemy.isAligned( Char.Alignment.NEUTRAL ) ) {\n\t\tboolean attackHit = wep.attack( enemy );\n\t\tif ( attackHit ) {\n\t\t\twep.setThrown();\n\t\t\tif ( this.isAligned( Char.Alignment.PLAYER ) ) {\n\t\t\t\tif ( this.isAligned( Char.Alignment.GLADIATOR ) ) {\n\t\t\t\t\tthis.applyBuff( new ComboBuff( 1, 1 ) );\n\t\t\t\t} else if ( this.isAligned( Char.Alignment.DUELIST ) ) {\n\t\t\t\t\tthis.applyBuff( new ComboBuff( 1, 1 ) );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\twep.clearThrown();\n\t\treturn attackHit;\n\t}\n\treturn false;\n}", "CodeBleu_score": 23.39632488331866}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\tif (enemy.isEnemy() || enemy.isNeutral()) {\n        wep.setThrown();\n        boolean hit = attack(enemy, wep.getDamage());\n        wep.clearThrown();\n        if (hit) {\n            if (this.isGladiator() || this.isDuelist()) {\n                if (this.isGladiator()) {\n                    this.applyBuff(new GladiatorBuff(this, 1));\n                } else if (this.isDuelist()) {\n                    this.applyBuff(new DuelistBuff(this, 1));\n                }\n            }\n        }\n        return hit;\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 18.34271072826679}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t// TODO: Implement this method\n\treturn 0;\n}", "CodeBleu_score": 3.6697007180374475}, {"code": "public int attackSkill( Char target ){\n\tint skill = baseAttackSkill;\n\t\tint distance = Math.abs( (int) (location.x - target.getLocation().x) + (int) (location.y - target.getLocation().y) );\n\t\tif (distance <= 1) {\n\t\t\tskill = (int) (skill * 1.5);\n\t\t}\n\t\telse if (distance <= 2) {\n\t\t\tskill = (int) (skill * 1.2);\n\t\t}\n\t\telse if (distance <= 3) {\n\t\t\tskill = (int) (skill * 1.1);\n\t\t}\n\t\telse if (distance <= 4) {\n\t\t\tskill = (int) (skill * 1.05);\n\t\t}\n\t\telse if (distance <= 5) {\n\t\t\tskill = (int) (skill * 1.025);\n\t\t}\n\t\telse if (distance <= 6) {\n\t\t\tskill = (int) (skill * 1.0125);\n\t\t}\n\t\telse if (distance <= 7) {\n\t\t\tskill = (int) (skill * 1.00625);\n\t\t}\n\t\telse if (distance <= 8) {\n\t\t\tskill = (int) (skill * 1.003125);\n\t\t}\n\t\telse if (distance <= 9) {\n\t\t\tskill = (int) (skill * 1.0015625);\n\t\t}\n\t\telse if (distance <= 10) {\n\t\t\tskill = (int) (skill * 1.00078125);\n\t\t}\n\t\telse if (distance <= 11) {\n\t\t\tskill = (int) (skill * 1.000390625);\n\t\t}\n\t\telse if (distance <= 12) {\n\t\t\tskill = (int) (skill * 1.0001953", "CodeBleu_score": 25.47506266641711}, {"code": "public int attackSkill( Char target ){\n\tint attackSkill = 0;\n\tint weaponType = weapon.getWeaponType();\n\tint distance = 1;\n\tif (target.getLocation() != null) distance = Math.abs(target.getLocation().getX() - location.getX()) + Math.abs(target.getLocation().getY() - location.getY());\n\tif (distance > 1) distance = 2;\n\tif (weaponType == 0) {\n\t\tattackSkill = (int) (baseAttackSkill * (1 + (0.05 * distance)) * (1 + (0.05 * (buffs.get(\"accuracy\") / 100.0))));\n\t} else if (weaponType == 1) {\n\t\tattackSkill = (int) (baseAttackSkill * (1 + (0.05 * distance)) * (1 + (0.05 * (buffs.get(\"accuracy\") / 100.0))));\n\t} else if (weaponType == 2) {\n\t\tattackSkill = (int) (baseAttackSkill * (1 + (0.05 * distance)) * (1 + (0.05 * (buffs.get(\"accuracy\") / 100.0))));\n\t} else if (weaponType == 3) {\n\t\tattackSkill = (int) (baseAttackSkill * (1 + (0.05 * distance)) * (1 + (0.05 * (buffs.get(\"accuracy\") / 100.0))));\n\t}\n\treturn attackSkill;\n}", "CodeBleu_score": 26.43130000553702}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (this.time.count == 0) tick()\n  repeat(repeats) {\n    this.start()\n    operation()\n    this.stop()\n    this.tick()\n  }\n  if (printResults) {\n    prettyPrint()\n  }\n}", "CodeBleu_score": 99.37659596685258}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 99.35775302985722}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.43524387232338}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n\n    this.related.forEach((cell) => {\n      cell.tiles.sprites.forEach((sprite) => {\n        if (sprite.visible) sprite.setTint(0xaa0000);\n      });\n    });\n\n    if (this.tiles.heightmap) {\n      if (this.tiles.heightmap.polygon.top){\n        this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n      }\n      if (this.tiles.heightmap.polygon.slope){\n        this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n      }\n    }\n  }", "CodeBleu_score": 98.43524387232338}, {"code": "onPointerOver (){\n\tthis.scene.city.map.selectedCell.x = this.x;\n  this.scene.city.map.selectedCell.y = this.y;\n\n  this.tiles.sprites.forEach((sprite) => {\n    if (sprite.visible) sprite.setTint(0xaa0000);\n  });\n\n  this.related.forEach((cell) => {\n    cell.tiles.sprites.forEach((sprite) => {\n      if (sprite.visible) sprite.setTint(0xaa0000);\n    });\n  });\n\n  if (this.tiles.heightmap) {\n    if (this.tiles.heightmap.polygon.top){\n      this.tiles.heightmap.polygon.top.fillAlpha = 0.5;\n    }\n    if (this.tiles.heightmap.polygon.slope){\n      this.tiles.heightmap.polygon.slope.fillAlpha = 0.5;\n    }\n  }\n}", "CodeBleu_score": 99.81974561561256}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.51017054556951}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.51017054556951}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\n      return null;\n\n    if (this.current >= this.lightThreshold && this.current < this.heavyThreshold)\n      return 'light';\n\n    if (this.current >= this.heavyThreshold)\n      return 'heavy';\n  }", "CodeBleu_score": 73.51017054556951}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\tthis.currentValue = this.getStartingValue();\n    this.lightThreshold = this.getLightThreshold();\n    this.heavyThreshold = this.getHeavyThreshold();\n    this.trafficDensity = this.getTrafficDensity();\n}", "CodeBleu_score": 10.819586779146054}, {"code": "restart: function (){\n\tthis.setCurrentValue(this.getInitialValue());\n    this.setTrafficDensity(this.getTrafficDensity());\n    this.setSpeed(this.getSpeed());\n    this.setTrafficLight(this.getTrafficLight());\n    this.setTime(0);\n    this.setCarsPassed(0);\n    this.setCarsWaiting(0);\n    this.setCarsWaitingMax(0);\n    this.setCarsWaitingAvg(0);\n    this.setCarsWaitingTotal(0);\n    this.setCarsWaitingTime(0);\n    this.setCarsWaitingTimeAvg(0);\n    this.setCarsWaitingTimeTotal(0);\n    this.setCarsWaitingTimeMax(0);\n    this.setCarsWaitingTimeMin(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.setCarsWaitingTimeStdDev(0);\n    this.", "CodeBleu_score": 38.011896131135714}, {"code": "restart: function (){\n\tthis.currentValue = this.startValue;\n    this.updateTrafficLight();\n    this.updateTrafficDensityText();\n    this.updateTrafficDensityGraph();\n    this.updateVehicleCount();\n    this.updateVehicleSpeed();\n}", "CodeBleu_score": 10.807583634624013}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\tvar shower,\n\t\tseries = this,\n\t\tchart = series.chart;\n\n\t// if the series is not visible, don't run the animation\n\tif (!series.visible) {\n\t\treturn false;\n\t}\n\n\t// the series animation is set up by the chart\n\tif (chart.renderer.globalAnimation) {\n\t\tshower = chart.renderer.shower;\n\t}\n\n\t// if no parameters are given, re-run existing parameters\n\tif (color === undefined) {\n\t\tcolor = series.options.flash.color;\n\t\tduration = series.options.flash.duration;\n\t\tforce = series.options.flash.force;\n\t\talpha = series.options.flash.alpha;\n\n\t// if one parameter is given, re-run with existing or default settings\n\t} else if (duration === undefined) {\n\t\tduration = series.options.flash.duration;\n\t\tforce = series.options.flash.force;\n\t\talpha = series.options.flash.alpha;\n\n\t// if two parameters are given, re-run with existing or default settings\n\t} else if (force === undefined) {\n\t\tforce = series.options.flash.force;\n\t\talpha = series.options.flash.alpha;\n\n\t// if three parameters are given, re-run with existing or default settings\n\t} else if (alpha === undefined) {\n\t\talpha = series.options.flash.alpha;\n\t}\n\n\t// if the series is not animated, don't run the animation\n\tif (!series.animate) {\n\t\treturn false;\n\t}\n\n\t// if the color is undefined, don't run the animation\n\tif (color === undefined) {\n\t\treturn false;\n\t}\n\n\t// if the duration is undefined, don't run the animation\n\tif (duration === undefined) {\n\t\treturn false;\n\t}\n\n\t// if the force is undefined, don't run the animation\n\tif (force === undefined) {\n\t\treturn false;\n\t}\n\n\t// if the alpha is undefined, don't run the animation\n\tif (alpha === undefined) {\n\t\treturn false;", "CodeBleu_score": 39.23984389903009}, {"code": "flash: function (color, duration, force, alpha){\n\tif (this.flashEffect && !force) {\n\t\treturn false;\n\t}\n\n\tvar pos = this.getPosition(),\n\t\tsize = this.getSize(),\n\t\tctx = this.getContext();\n\n\tif (!alpha) {\n\t\talpha = 0.25;\n\t}\n\n\tif (!duration) {\n\t\tduration = 50;\n\t}\n\n\tif (!color) {\n\t\tcolor = 'white';\n\t}\n\n\tthis.clearEffect();\n\n\tctx.fillStyle = color;\n\tctx.globalAlpha = alpha;\n\tctx.fillRect(pos.x, pos.y, size.w, size.h);\n\n\tthis.flashEffect = true;\n\tthis.flashAlpha = alpha;\n\n\tvar self = this;\n\tsetTimeout(function () {\n\t\tself.clearEffect();\n\t}, duration);\n\n\treturn true;\n}", "CodeBleu_score": 39.70403475003587}, {"code": "flash: function (color, duration, force, alpha){\n\tvar i,\n\t\tcurrentlyFading,\n\t\tstages = [],\n\t\tstart,\n\t\tresult,\n\t\tflashObject = this.renderer.flashObject,\n\t\tpreviousFlash = this.flashObjects;\n\n\tif (this.element) { // #1884\n\n\t\t// Don't run the animation if the object is hidden\n\t\tif (!this.visible) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the object is already fading, extend the animation. If the object is\n\t\t// fading in the opposite direction, queue a fade:out and fade:in\n\t\tif (this.renderer.isAnimating(this.element, 'opacity')) {\n\t\t\ti = previousFlash.length;\n\t\t\twhile (i--) {\n\t\t\t\t// Check the first item in the queue. If the duration is the same\n\t\t\t\t// and the color is the same, extend the animation by adding the\n\t\t\t\t// visual duration to the total duration.\n\t\t\t\tif (previousFlash[i].duration === duration && previousFlash[i].color === color) {\n\t\t\t\t\tpreviousFlash[i].duration += duration || 0;\n\t\t\t\t\tpreviousFlash[i].to = (previousFlash[i].pos + (duration || 0)) / 2;\n\t\t\t\t\t// If it is fading in the opposite direction, queue a fade:in\n\t\t\t\t\t// followed by a fade:out\n\t\t\t\t} else if (previousFlash[i].to > previousFlash[i].pos) {\n\t\t\t\t\tpreviousFlash.unshift(merge(previousFlash[i]));\n\t\t\t\t\tpreviousFlash[0].duration = 0;\n\t\t\t\t\tpreviousFlash[0].to = previousFlash[0].pos;\n\t\t\t\t\tpreviousFlash[i].from = previousFlash[i].pos + (duration || 0);\n\t\t\t\t\tpreviousFlash[i].to += (duration || 0);\n\t\t\t\t}\n\t\t\t\t// If it is fading", "CodeBleu_score": 35.33357988818023}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\tvar layer = new FluidLayer(this.game);\n    layer.fluid = this.fluid;\n    if (addToWorld) {\n        this.addToWorld(layer);\n    }\n    if (children) {\n        layer.add(children);\n    }\n    return layer;\n}", "CodeBleu_score": 35.680079896377}, {"code": "createFluidLayer: function (children, addToWorld){\n\tif (addToWorld === undefined) { addToWorld = true; }\n\n    var layer = new FluidLayer(this.game, children);\n\n    if (addToWorld) {\n        this.layers.push(layer);\n    }\n\n    return layer;\n}", "CodeBleu_score": 47.05587533903021}, {"code": "createFluidLayer: function (children, addToWorld){\n\tif (children === undefined) {\n        children = [];\n    }\n    if (addToWorld === undefined) {\n        addToWorld = true;\n    }\n    var layer = new FluidLayer(this.game, this.world, this.camera, this.bounds, this.gravity);\n    this.layers.push(layer);\n    if (addToWorld) {\n        this.world.add(layer);\n    }\n    for (var i = 0; i < children.length; i++) {\n        layer.add(children[i]);\n    }\n    return layer;\n}", "CodeBleu_score": 62.636020961635296}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.flexLayer(0, 0, this.game.width, this.game.height);\n\n    layer.x = this.game.width / 2;\n    layer.y = this.game.height / 2;\n\n    layer.scale.x = 1;\n    layer.scale.y = 1;\n\n    this.layers.push(layer);\n\n    if (children)\n    {\n        layer.addMultiple(children);\n    }\n\n    return layer;\n\n}", "CodeBleu_score": 53.648338397402554}, {"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.flexLayer();\n  layer.x = this.game.width / 2;\n  layer.y = this.game.height / 2;\n  layer.bounds = new Phaser.Rectangle(0, 0, this.game.width, this.game.height);\n  layer.scale.set(1);\n  this.layers.push(layer);\n  if (children) {\n    layer.addMultiple(children);\n  }\n  return layer;\n}", "CodeBleu_score": 49.50982258150676}, {"code": "createFullLayer: function (children){\n\tvar layer = this.game.add.flexLayer(0, 0, this.game.width, this.game.height);\n\tlayer.scale.set(1);\n\tthis.layers.push(layer);\n\tif (children) {\n\t\tchildren.forEach(function (child) {\n\t\t\tlayer.add(child);\n\t\t});\n\t}\n\treturn layer;\n}", "CodeBleu_score": 49.52045769372175}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\tvar wrapper = this,\n\t\tanimate = wrapper.animate,\n\t\trenderer = wrapper.renderer,\n\t\thasCrop = wrapper.crop,\n\t\tcrop,\n\t\tcropArray,\n\t\tret;\n\n\tif (rect) {\n\t\trect = wrapper.parseClipRectr(rect);\n\t\tcrop = wrapper.crop;\n\n\t\tif (!crop) {\n\t\t\twrapper.crop = crop = {\n\t\t\t\tx: rect.x,\n\t\t\t\ty: rect.y,\n\t\t\t\twidth: rect.width,\n\t\t\t\theight: rect.height\n\t\t\t};\n\t\t\t\n\t\t\t// If a crop already existed, update it.\n\t\t\tif (hasCrop) {\n\t\t\t\tanimate(crop, crop);\n\t\t\t} else {\n\t\t\t\tcropArray = [crop.x, crop.y, crop.width, crop.height];\n\t\t\t\t\n\t\t\t\t// If the shape is not added to the DOM, add it.\n\t\t\t\tif (!wrapper.added) {\n\t\t\t\t\twrapper.add(renderer.g);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Add the clipping rectangle\n\t\t\t\twrapper.clipRect = renderer.clipRect(cropArray[0], cropArray[1], cropArray[2], cropArray[3]);\n\t\t\t\t\n\t\t\t\t// Add the element\n\t\t\t\twrapper.clipRect.add(wrapper.element);\n\t\t\t}\n\t\t}\n\n\t\t// Animate to the new crop rectangle\n\t\tif (animate) {\n\t\t\tanimate(crop, {\n\t\t\t\tx: rect.x,\n\t\t\t\ty: rect.y,\n\t\t\t\twidth: rect.width,\n\t\t\t\theight: rect.height\n\t\t\t});\n\t\t}\n\n\t\tret = crop;\n\n\t// If called without parameters\n\t} else if (hasCrop) {\n\t\tret = wrapper.c", "CodeBleu_score": 20.740546167193713}, {"code": "crop: function (rect, copy){\n\tvar wrapper = this,\n        obj = wrapper.objectCrop;\n\n    if (rect) {\n        if (!obj) {\n            wrapper.objectCrop = obj = {\n                x: rect.x || 0,\n                y: rect.y || 0,\n                width: rect.width || 0,\n                height: rect.height || 0\n            };\n        } else {\n            obj.x = rect.x || obj.x;\n            obj.y = rect.y || obj.y;\n            obj.width = rect.width || obj.width;\n            obj.height = rect.height || obj.height;\n        }\n        obj.copy = copy;\n\n        wrapper.updateCrop();\n    } else {\n        wrapper.resetFrame();\n    }\n}", "CodeBleu_score": 31.48122159267281}, {"code": "crop: function (rect, copy){\n\tvar options = this.options,\n\t\tcropped = options.center && (options.crop || options.width || options.height),\n\t\thasARect = isObject(rect),\n\t\trectIsNew = !this.cropped && hasARect,\n\t\trectIsUpdated = hasARect && !rectIsNew,\n\t\trectIsRemoved = rectIsUpdated && (rect.width <= 0 && rect.height <= 0),\n\t\tresetOrUpdateCrop = function () {\n\t\t\tif (rectIsRemoved) {\n\t\t\t\tthis.resetCrop();\n\t\t\t} else if (rectIsUpdated) {\n\t\t\t\tthis.updateCrop(rect);\n\t\t\t} else if (copy) { // Reset with crop\n\t\t\t\tthis.setCrop(options.crop.width, options.crop.height, options.crop.left, options.crop.top);\n\t\t\t}\n\t\t};\n\n\t// Initialize Crop\n\tif (options.center && !options.crop && !options.width && !options.height && hasARect) {\n\t\toptions.crop = {\n\t\t\twidth: rect.width,\n\t\t\theight: rect.height,\n\t\t\tleft: rect.left,\n\t\t\ttop: rect.top\n\t\t};\n\t}\n\n\t// Make sure that the crop rectangle is up-to-date\n\tif (cropped && !rectIsRemoved) {\n\t\tthis.updateCrop();\n\t}\n\n\t// Set pre-crop size\n\tif (options.center && !options.width && !options.height && hasARect) {\n\t\toptions.width = rect.width;\n\t\toptions.height = rect.height;\n\t}\n\n\t// Set pre-crop position\n\tif (options.center && !options.left && !options.top && hasARect) {\n\t\toptions.left = rect.left;\n\t\toptions.top = rect.top;\n\t}\n\n\t// Set crop rectangle and render\n\tif (rectIsNew) {\n\t\tthis.setCrop(rect.width,", "CodeBleu_score": 25.743509041728814}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\tvar newPoints,\n\t\tcollision,\n\t\taxis,\n\t\tsequences = [[], []],\n\t\tsequencesCopy = [],\n\t\ti,\n\t\tj,\n\t\thasCollision,\n\t\ttranslate = function (point) {\n\t\t\treturn {\n\t\t\t\tx: point.x + (axis === 'x' ? x : 0),\n\t\t\t\ty: point.y + (axis === 'y' ? y : 0)\n\t\t\t};\n\t\t};\n\n\t// If the points are not changed, hance the object itself\n\tif (!x && !y) {\n\t\treturn this;\n\t}\n\n\tnewPoints = [];\n\n\tfor (i = 0; i < this.points.length; i++) {\n\t\tnewPoints.push(translate(this.points[i]));\n\t}\n\n\tthis.points = newPoints;\n\n\t// get the new axis extremes\n\tfor (i = 0; i < this.axes.length; i++) {\n\t\taxis = this.axes[i];\n\t\tsequences[0][i] = [this.getExtremes(axis, this.points)[0]];\n\t\tsequences[1][i] = [this.getExtremes(axis, this.points)[1]];\n\t}\n\n\t// Get the new extremes for the axes\n\tfor (i = 0; i < this.axes.length; i++) {\n\t\taxis = this.axes[i];\n\t\tsequencesCopy[i] = sequences[0][i];\n\t\tsequencesCopy[i + this.axes.length] = sequences[1][i];\n\t}\n\n\tthis.tree = this.tree.split(this, sequencesCopy, this.dimensions);\n\n\t// Check for collisions\n\tfor (i = 0; i < this.axes.length; i++) {\n\t\taxis = this.axes[i];\n\t\tfor (j = 0; j < sequences[0][i].length; j++) {\n\t\t\tsequences[0][i][j] = translate(sequences[0][i][", "CodeBleu_score": 24.64704551148745}, {"code": "move: function (x, y, wrap){\n\tvar point = this.getTranslate();\n    if (x) {\n        this.moveH(x, wrap);\n    }\n    if (y) {\n        this.moveV(y, wrap);\n    }\n    return this;\n}", "CodeBleu_score": 61.81428209363783}, {"code": "move: function (x, y, wrap){\n\tvar horiz = this.moveH(x, wrap),\n\t\tvert = this.moveV(y, wrap);\n\n\treturn horiz || vert ? this.placed : false;\n}", "CodeBleu_score": 36.363577513620235}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.frameFrozen) {\n        return false;\n    }\n\n    var key = this.getStateFrameKey(state);\n\n    if (key === null) {\n        return false;\n    }\n\n    this.frameName = key;\n    this.frame = this.game.cache.getFrameByName(this.sprite.key, key);\n\n    this.sprite.setFrame(this.frame);\n\n    return true;\n\n}", "CodeBleu_score": 34.963785614982186}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.freezeFrames) {\n\t\treturn false;\n\t}\n\n\tvar frame = this.getFrame(state);\n\tif (frame) {\n\t\tthis.frame = frame;\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 31.00982425608904}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\tif (this.freezeFrames) {\n        return false;\n    }\n    var frame = this.frame[state];\n    if (typeof frame === \"string\" || typeof frame === \"number\") {\n        this.frameName = frame;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 44.32194825078934}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\tif (typeof quantity === 'object')\n    {\n        return this.game.plugins.add(Phaser.Weapon, quantity);\n    }\n    else\n    {\n        return this.game.plugins.add(Phaser.Weapon, key, quantity, key, frame, group, bulletClass);\n    }\n\n}", "CodeBleu_score": 32.293542795870074}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\tif (typeof quantity === 'undefined') { quantity = 1; }\n    if (typeof key === 'undefined') { key = null; }\n    if (typeof frame === 'undefined') { frame = null; }\n    if (typeof group === 'undefined') { group = this.game.world; }\n    if (typeof bulletClass === 'undefined') { bulletClass = Phaser.Bullet; }\n\n    var weapon = this.game.plugins.add(Phaser.Weapon);\n\n    weapon.bulletClass = bulletClass;\n\n    weapon.createBullets(quantity, key, frame, group);\n\n    return weapon;\n\n}", "CodeBleu_score": 59.51673576720074}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\tif (bulletClass === undefined) { bulletClass = Phaser.Bullet; }\n\n    this.add.weapon(quantity, key, frame, group, bulletClass);\n\n    return this.weapon;\n\n}", "CodeBleu_score": 30.091767910122485}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t// If culling is enabled, calculate the face normal and only draw the triangle if it is facing the camera\n    if (cull) {\n        // Calculate the face normal\n        var a = points[0];\n        var b = points[1];\n        var c = points[2];\n        var normal = Phaser.Utils.normalize(Phaser.Utils.cross(b.subtract(a), c.subtract(a)));\n        // Only draw the triangle if it is facing the camera\n        if (normal.dot(this.camera.position) < 0) {\n            this.moveTo(points[0].x, points[0].y);\n            this.lineTo(points[1].x, points[1].y);\n            this.lineTo(points[2].x, points[2].y);\n            this.lineTo(points[0].x, points[0].y);\n        }\n    }\n    // Otherwise, directly draw the triangle without culling\n    else {\n        this.moveTo(points[0].x, points[0].y);\n        this.lineTo(points[1].x, points[1].y);\n        this.lineTo(points[2].x, points[2].y);\n        this.lineTo(points[0].x, points[0].y);\n    }\n}", "CodeBleu_score": 36.64137780018955}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\tvar p1 = points[0];\n    var p2 = points[1];\n    var p3 = points[2];\n\n    // Calculate the face normal\n    var n = Phaser.Math.getNormal(p1, p2, p3);\n\n    // If culling is enabled, only draw the triangle if it is facing the camera\n    if (cull) {\n        var camera = this.game.camera;\n        var cameraDirection = new Phaser.Point(camera.x - this.x, camera.y - this.y);\n        if (Phaser.Point.dot(n, cameraDirection) > 0) {\n            return;\n        }\n    }\n\n    // Draw the triangle\n    this.beginFill(this.fillColor, this.fillAlpha);\n    this.moveTo(p1.x, p1.y);\n    this.lineTo(p2.x, p2.y);\n    this.lineTo(p3.x, p3.y);\n    this.endFill();\n}", "CodeBleu_score": 30.93665599781923}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t// Calculate normal\n    var normal = new Phaser.Point();\n    normal.x = (points[0].y - points[1].y) * (points[2].z - points[1].z) - (points[0].z - points[1].z) * (points[2].y - points[1].y);\n    normal.y = (points[0].z - points[1].z) * (points[2].x - points[1].x) - (points[0].x - points[1].x) * (points[2].z - points[1].z);\n    normal.z = (points[0].x - points[1].x) * (points[2].y - points[1].y) - (points[0].y - points[1].y) * (points[2].x - points[1].x);\n\n    // Normalize\n    var len = Math.sqrt(normal.x * normal.x + normal.y * normal.y + normal.z * normal.z);\n    normal.x /= len;\n    normal.y /= len;\n    normal.z /= len;\n\n    // Dot product\n    var dot = this.camera.position.x * normal.x + this.camera.position.y * normal.y + this.camera.position.z * normal.z;\n\n    // Culling\n    if (!cull || dot < 0) {\n        this.moveTo(points[0].x, points[0].y);\n        this.lineTo(points[1].x, points[1].y);\n        this.lineTo(points[2].x, points[2].y);\n        this.lineTo(points[0].x, points[0].y);\n    }\n}", "CodeBleu_score": 29.652684845111533}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\tvar video = this.video,\n        videoElement = video.element,\n        readyState = videoElement.readyState;\n\n    if (readyState > 3) {\n        clearTimeout(this.videoTimeout);\n        this.videoTimeout = null;\n        this.retries = 0;\n        if (this.retries === 0) {\n            this.setSource(video);\n            this.updateTexture(video);\n        }\n    } else if (readyState === 0) { // Not yet initialized\n        if (this.retries === 0) {\n            // Set the source and start loading\n            this.setSource(video);\n        }\n        if (this.retries < 3) {\n            this.retries++;\n            this.videoTimeout = setTimeout(\n                this.checkVideoProgress.bind(this),\n                this.retries * 1000\n            );\n        } else {\n            // Failed to load after three attempts\n            this.retries = 0;\n            this.videoTimeout = null;\n            this.setSource(video);\n            this.updateTexture(video);\n        }\n    } else if (readyState < 3) {\n        if (this.retries < 3) {\n            this.retries++;\n            this.videoTimeout = setTimeout(\n                this.checkVideoProgress.bind(this),\n                this.retries * 1000\n            );\n        } else {\n            // Failed to load after three attempts\n            this.retries = 0;\n            this.videoTimeout = null;\n            this.setSource(video);\n            this.updateTexture(video);\n        }\n    }\n}", "CodeBleu_score": 21.246295375353846}, {"code": "checkVideoProgress: function (){\n\tif (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n        this.video.removeEventListener('progress', this.checkVideoProgress);\n        this.video.removeEventListener('timeupdate', this.checkVideoProgress);\n        this.video.removeEventListener('canplaythrough', this.checkVideoProgress);\n        this.video.removeEventListener('canplay', this.checkVideoProgress);\n        this.video.removeEventListener('loadedmetadata', this.checkVideoProgress);\n        this.video.removeEventListener('loadeddata', this.checkVideoProgress);\n        this.video.removeEventListener('durationchange', this.checkVideoProgress);\n\n        if (this.video.videoWidth > 0 && this.video.videoHeight > 0) {\n            this.videoWidth = this.video.videoWidth;\n            this.videoHeight = this.video.videoHeight;\n            this.updateTexture();\n        }\n\n        if (this.video.duration) {\n            this.duration = this.video.duration;\n        }\n\n        this.video.play();\n    } else {\n        this.videoRetries--;\n\n        if (this.videoRetries === 0) {\n            console.warn('Unable to load video source', this.source);\n        }\n\n        setTimeout(this.checkVideoProgress, 1000);\n    }\n}", "CodeBleu_score": 25.206757186987574}, {"code": "checkVideoProgress: function (){\n\tvar video = this.video;\n    var readyState = video.readyState;\n\n    if (readyState >= 3) {\n\n        // Update the texture with the video contents.\n        this.updateTexture(video);\n\n    } else {\n\n        // Retry until the video is ready.\n        this.retryCount--;\n        if (this.retryCount <= 0) {\n            console.warn('Unable to load video source:', this.src);\n        } else {\n            this.timeout = setTimeout(this.checkVideoProgress.bind(this), 1000);\n        }\n\n    }\n\n}", "CodeBleu_score": 33.172084695813055}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\tvar self = this,\n        now = +new Date(),\n        onDown = self.onDown,\n        onUp = self.onUp,\n        onChange = self.onChange,\n        onHold = self.onHold,\n        timeout = self.timeout,\n        repeat = self.repeat,\n        key = self.key,\n        point = self.point,\n        touches = self.touches,\n        keyCodes = self.keyCodes;\n\n    // Normalize parameters\n    if (typeof event === 'string') {\n        value = event;\n        event = {};\n    }\n\n    // Ignore invalid points\n    if (point && (!isNumber(point.x) || !isNumber(point.y))) {\n        point = undefined;\n    }\n\n    // Ignore start if active and key is not changing\n    if (self.active && value === self.value) {\n        return;\n    }\n\n    // Set active state\n    self.active = true;\n\n    // Reset initial values\n    self.value = value;\n    self.keyCode = key && keyCodes[value];\n    self.touch = point;\n    self.alt = event.altKey;\n    self.shift = event.shiftKey;\n    self.ctrl = event.ctrlKey;\n    self.meta = event.metaKey;\n    self.startTime = now;\n    self.runTime = 0;\n    self.count = 0;\n    self.repeatCount = 0;\n\n    // Run the onDown callback\n    if (onDown) {\n        onDown.call(self, event);\n    }\n\n    // Run the onChange callback\n    if (onChange) {\n        onChange.call(self, event);\n    }\n\n    // Repeat\n    if (repeat) {\n        self.runTimer = function () {\n            timeout(function () {\n                if (self.active) {\n                    self.repeatCount++;\n                    if (onHold) {\n                        onHold.call(self, event);\n                    }\n                    self.runTimer();\n                }\n            }, repeat);\n        };\n        self.run", "CodeBleu_score": 22.406311241253547}, {"code": "start: function (event, value){\n\tif (this.state !== 'down') {\n        this.state = 'down';\n        this.startTime = +new Date();\n        this.repeatCount = 0;\n        this.event = event;\n        this.value = value;\n        this.fire('down', event, this.value);\n    }\n}", "CodeBleu_score": 36.31243374896413}, {"code": "start: function (event, value){\n\tvar state = this.state;\n    if (state) {\n        return;\n    }\n    this.state = state = {\n        down: true,\n        startTime: (new Date()).getTime(),\n        elapsed: 0,\n        repeat: 0,\n        value: value,\n        event: event\n    };\n    if (event) {\n        state.ctrl = event.ctrlKey;\n        state.alt = event.altKey;\n        state.shift = event.shiftKey;\n        state.meta = event.metaKey;\n    }\n    this.fire('down', state);\n}", "CodeBleu_score": 37.14352256974793}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\tvar chart = this.chart;\n\n\t// Prevent IE from dragging the placeholder image (#850)\n\tif (chart.pointer.selectionMarker && event.target === chart.pointer.selectionMarker.element) {\n\t\tevent.preventDefault();\n\t}\n\n\t// When clicking outside a path, call mouseUp to deselect\n\tif (chart.hoverPoint) {\n\t\tthis.reset();\n\t}\n\n\t// record the start position\n\tthis.mouseDownX = event.chartX;\n\tthis.mouseDownY = event.chartY;\n\n\tif (chart.options.chart.type === 'xrange') {\n\t\tthis.mouseDownX = chart.xAxis[0].toValue(event.chartX);\n\t}\n\n\t// the event handler options are passed in as an argument\n\tthis.runPointActions(event);\n\n\tthis.unDocMouseMove = addEvent(doc, 'mousemove', function (e) {\n\t\tvar chart = this.chart,\n\t\t\tfixed = chart.options.chart.fixed,\n\t\t\tmouseIsDown = this.mouseIsDown;\n\n\t\tif (!fixed && mouseIsDown) {\n\t\t\tthis.pinch(e);\n\t\t} else {\n\t\t\tthis.onDocumentMouseMove(e);\n\t\t}\n\t}, this);\n\n\tthis.unDocMouseUp = addEvent(doc, 'mouseup', function (e) {\n\t\tthis.drop(e);\n\t}, this);\n\n\tthis.mouseIsDown = true;\n}", "CodeBleu_score": 32.839270612233676}, {"code": "onMouseDown: function (event){\n\tthis.mouseDownX = event.pageX;\n\tthis.mouseDownY = event.pageY;\n\n\t// issue #295, dragging not always working in Firefox\n\tif (event.type === 'mousedown' && event.button === 0) {\n\t\tthis.chart.cancelClick = false;\n\t\tif (this.chart.options.draggable) {\n\t\t\tthis.chart.mouseIsDown = event.type;\n\t\t}\n\t}\n\n\t// issue #300, clicking on axis labels\n\tif (event.target.tagName === 'SPAN') {\n\t\tevent.preventDefault();\n\t}\n\n\t// record the start position\n\tthis.mouseDownX = this.mouseDownY = null;\n\n\t// the default action is to select an area\n\tif (this.chart.options.draggable) {\n\t\tthis.dragStart(event);\n\t}\n\n\t// issue #370\n\t// in some cases, onMouseDown on the container is not called.\n\t// It is called on the document instead. For example, #506, #518, #528\n\tif (this.zoomHor) {\n\t\tthis.mouseDownX = event.pageX;\n\t}\n\tif (this.zoomVert) {\n\t\tthis.mouseDownY = event.pageY;\n\t}\n\n\t// optionally move the tooltip\n\tif (this.followTouchMove && touchEvent) {\n\t\tthis.tooltip.followTouchMove(event);\n\t}\n}", "CodeBleu_score": 45.33423825148539}, {"code": "onMouseDown: function (event){\n\tthis.mouseDownEvent = event;\n\tif (this.cancelNextClick) {\n\t\tthis.cancelNextClick = false;\n\t\tevent.preventDefault();\n\t}\n\tif (this.hasDragged) {\n\t\tthis.hasDragged = false;\n\t\tthis.cancelNextClick = true;\n\t}\n\n\tif (this.mouseButtonEnabled !== 0) {\n\t\tthis.processClick(event);\n\t}\n\n\tif (this.mouseButtonEnabled === 2) {\n\t\tthis.isZooming = true;\n\t}\n\n\tif (this.mouseButtonEnabled !== 2) {\n\t\tthis.isPanning = true;\n\t}\n\n\tif (this.mouseButtonEnabled === 2) {\n\t\tthis.initZoom(event);\n\t}\n\n\tif (this.mouseButtonEnabled !== 2) {\n\t\tthis.initPan(event);\n\t}\n\n\tthis.mouseDown = true;\n\n\tif (this.mouseDownHandler) {\n\t\tthis.mouseDownHandler(event);\n\t}\n}", "CodeBleu_score": 31.794003663317955}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\tthis.onMouseUp(event);\n    if (this.options.draggable) {\n        this.mouseDown = false;\n    }\n}", "CodeBleu_score": 24.352532424045727}, {"code": "onMouseUpGlobal: function (event){\n\tvar chart = this;\n\n\t// Prevent the click from bubbling up to the container\n\tif (chart.options.bubbling) {\n\t\tevent.stopPropagation();\n\t}\n\n\t// If the event has a button, use it to determine which button was clicked.\n\t// Otherwise, check the button setting and assume it was the left button.\n\tvar button = event.button;\n\tif (!button) {\n\t\tbutton = chart.options.chart.pointer.button;\n\t}\n\n\t// If we're not clicking on the chart, ignore it.\n\tif (!chart.isInsidePlot(event.chartX - chart.plotLeft, event.chartY - chart.plotTop)) {\n\t\treturn;\n\t}\n\n\t// If we're dragging or have dragged (#438), don't run click handlers\n\tif (chart.mouseIsDown || chart.hasDragged) {\n\t\treturn;\n\t}\n\n\t// If the button is not the left button, or if we're in a form, ignore it.\n\tif (button !== 0 || (chart.container && chart.container.tagName === 'FORM')) {\n\t\treturn;\n\t}\n\n\t// Set the chart as the active element\n\tif (!H.state.clickedInside) {\n\t\tH.state.clickedInside = true;\n\t\tH.state.activeElement = chart.renderTo;\n\t}\n\n\t// Set the point as the active element\n\tH.state.activeElement = event.target;\n\n\t// Fire the click event\n\tfireEvent(chart, 'click', event);\n\n\t// Fire the global click event\n\tfireEvent(H, 'click', event);\n}", "CodeBleu_score": 11.977133539627141}, {"code": "onMouseUpGlobal: function (event){\n\t// console.log(\"onMouseUpGlobal\");\n    this.onMouseUp(event);\n    this.onMouseUpGlobalCallback(event);\n}", "CodeBleu_score": 19.79087203999058}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\tif (this.enabled && this.game.inputEnabled) {\n        this.game.input.touchEntered(this, event);\n        this.touchEnterCallback.call(this.touchEnterContext, this, event);\n        if (this.preventDefault) {\n            event.preventDefault();\n        }\n    }\n}", "CodeBleu_score": 48.57881306060096}, {"code": "onTouchEnter: function (event){\n\tthis.touchEnterEvent = event;\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback(event);\n    }\n    if (this.game.inputEnabled && this.inputEnabled) {\n        event.preventDefault();\n    }\n}", "CodeBleu_score": 58.111561316744286}, {"code": "onTouchEnter: function (event){\n\tif (this.enabled && this.gameInputEnabled && this.touchEnterCallback) {\n        this.touchEnterCallback(event);\n    }\n    if (this.enabled && this.gameInputEnabled && this.preventDefaultTouchEnter) {\n        event.preventDefault();\n    }\n}", "CodeBleu_score": 38.227200357199806}]}
