{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    ids = args.get('ids', [])\n    if not ids:\n        return request.not_found()\n    ids = [int(x) for x in ids.split(',')]\n    if not ids:\n        return request.not_found()\n    # read access rights and rules for the attachments\n    attachment_obj = request.env['ir.attachment']\n    attachment_ids = attachment_obj.search([('id', 'in', ids)])\n    if not attachment_ids:\n        return request.not_found()\n    # build zip file content\n    zip_content = io.BytesIO()\n    zip_file = zipfile.ZipFile(zip_content, 'w', zipfile.ZIP_DEFLATED)\n    for attachment in attachment_ids:\n        zip_file.writestr(attachment.datas_fname, base64.b64decode(attachment.datas))\n    zip_file.close()\n    # prepare HTTP headers for the zip file\n    zip_content.seek(0)\n    headers = _get_zip_headers(zip_content.read(), attachment_ids[0].datas_fname)\n    return request.make_response(zip_content.read(), headers=headers)", "CodeBleu_score": 38.45771390946639}, {"code": "def export_zip_documents(self, **args)\n\t\n    # get the attachments\n    attachment_ids = args.get('attachment_ids', '').split(',')\n    if not attachment_ids:\n        return request.not_found()\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    # verify access rights and rules\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.redirect('/web/403')\n    if not attachments.check_access_rule('read'):\n        return request.redirect('/web/403')\n    # build the zip file\n    zip_file = BytesIO()\n    with zipfile.ZipFile(zip_file, 'w') as z:\n        for attachment in attachments:\n            z.writestr(attachment.name, attachment.datas)\n    zip_file.seek(0)\n    # prepare HTTP headers\n    filename = 'attachments.zip'\n    headers = _get_zip_headers(zip_file.read(), filename)\n    # return the zip file as an HTTP response\n    return request.make_response(zip_file.read(), headers=headers)\n\n", "CodeBleu_score": 35.94607650181259}, {"code": "def export_zip_documents(self, **args)\n\t\n    ids = args.get('ids')\n    if not ids:\n        return self.make_response(data=None, status=400)\n    ids = ids.split(',')\n    try:\n        ids = [int(id) for id in ids]\n    except ValueError:\n        return self.make_response(data=None, status=400)\n    attachments = self.env['ir.attachment'].sudo().browse(ids)\n    if not attachments.read(['datas', 'datas_fname']):\n        return self.make_response(data=None, status=403)\n    zip_content = io.BytesIO()\n    with zipfile.ZipFile(zip_content, 'w') as zip_file:\n        for attachment in attachments:\n            zip_file.writestr(attachment.datas_fname, base64.b64decode(attachment.datas))\n    zip_content.seek(0)\n    return self.make_response(zip_content.read(), headers=_get_zip_headers(zip_content.read(), 'attachments.zip'))", "CodeBleu_score": 37.156914050007856}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        invoice_count = request.env['account.move'].search_count(self._get_invoices_domain('out'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        bill_count = request.env['account.move'].search_count(self._get_invoices_domain('in'), limit=1) \\\n            if request.env['account.move'].check_access_rights('read', raise_exception=False) else 0\n        values['bill_count'] = bill_count\n    return values\n", "CodeBleu_score": 83.04199035766811}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = request.env['ir.config_parameter'].sudo().get_param('account.my_invoices_history')\n    history = request.session.get('my_invoices_history')\n    if history:\n        history = history.split(',')\n        history = list(map(int, history))\n        values.update({'history': history})\n    return request.render(\"portal.portal_my_invoices\", values)\n", "CodeBleu_score": 47.007582884393365}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = [invoice.id for invoice in values['invoices']]\n    return request.render(\"portal.portal_my_invoices\", values)\n", "CodeBleu_score": 35.87532456346165}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t values = self._prepare_my_invoices_values(page, date_begin, date_end, sortby, filterby)\n    request.session['my_invoices_history'] = values.get('invoice_ids')\n    return request.render(\"portal.portal_my_invoices\", values)\n", "CodeBleu_score": 34.26548867577753}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    try:\n        invoice_sudo = self._document_check_access('account.invoice', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my/home')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice_sudo, report_type, download, **kw)\n\n    if report_type == 'pdfzip':\n        legal_docs = self._get_legal_docs(invoice_sudo)\n        if legal_docs:\n            return self._get_pdfzip(invoice_sudo, legal_docs)\n\n    if report_type == 'pdf':\n        return self._get_pdf(invoice_sudo)\n\n    values = self._prepare_portal_layout_values()\n    values.update({\n        'invoice': invoice_sudo,\n        'page_name': 'invoice',\n        'partner_id': invoice_sudo.commercial_partner_id.id,\n       'report_type': 'html',\n    })\n    return request.render(\"account.portal_invoice_page\", values)\n\n", "CodeBleu_score": 38.38619764047454}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    try:\n        invoice_sudo = self.env['account.move'].browse(int(invoice_id)).sudo()\n    except (ValueError, TypeError):\n        invoice_sudo = self.env['account.move']\n    if invoice_sudo:\n        try:\n            invoice_sudo.check_access_rights('read')\n            invoice_sudo.check_access_rule('read')\n        except AccessError:\n            invoice_sudo = self.env['account.move']\n    if not invoice_sudo:\n        return request.redirect('/my/invoices')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice_sudo, report_type, download)\n\n    if report_type == 'control_sheet':\n        return self._show_control_sheet(invoice_sudo, download)\n\n    if download:\n        return self._download_invoice(invoice_sudo)\n\n    return request.render(\"account.portal_invoice_page\", self._invoice_get_page_view_values(invoice_sudo, access_token))\n\n", "CodeBleu_score": 34.84886647200226}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t    try:\n        invoice_sudo = self._document_check_access('account.invoice', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my/home')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice_sudo, report_type, download, **kw)\n\n    if download:\n        legal_docs = self._get_legal_docs(invoice_sudo)\n        if legal_docs:\n            return self._get_legal_docs_zip(invoice_sudo, legal_docs)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render(\"portal.portal_my_invoice_page\", values)\n", "CodeBleu_score": 33.74673313802343}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        company_domain = [('company_id', '=', company.id)]\n    else:\n        company_domain = []\n    product_template_obj = self.env['product.template']\n    product_template_ids = product_template_obj.search(company_domain)\n    if company and company.account_sale_tax_id:\n        for product in product_template_ids:\n            if not product.taxes_id:\n                product.taxes_id = company.account_sale_tax_id\n            elif not company.account_sale_tax_id in product.taxes_id:\n                product.taxes_id += company.account_sale_tax_id\n    if company and company.account_purchase_tax_id:\n        for product in product_template_ids:\n            if not product.supplier_taxes_id:\n                product.supplier_taxes_id = company.account_purchase_tax_id\n            elif not company.account_purchase_tax_id in product.supplier_taxes_id:\n                product.supplier_taxes_id += company.account_purchase_tax_id\n    return product_template_ids\n\n", "CodeBleu_score": 29.93845577212934}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    if company:\n        domain = [('company_id', '=', company.id)]\n    else:\n        domain = []\n    product_template_obj = self.env['product.template']\n    product_template_ids = product_template_obj.search(domain)\n    for product_template in product_template_ids:\n        if company and company.account_sale_tax_id:\n            product_template.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n        if company and company.account_purchase_tax_id:\n            product_template.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n\n", "CodeBleu_score": 32.486118072100346}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    # Get the product templates\n    product_template_ids = self.env['product.template'].search([('company_id', '=', company.id)])\n    # Update the sale taxes for these products\n    if company.account_sale_tax_id:\n        for product_template in product_template_ids:\n            product_template.taxes_id = [(4, company.account_sale_tax_id.id, None)]\n    # Update the purchase taxes for these products\n    if company.account_purchase_tax_id:\n        for product_template in product_template_ids:\n            product_template.supplier_taxes_id = [(4, company.account_purchase_tax_id.id, None)]\n\n", "CodeBleu_score": 25.197455418735526}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].xmlid_to_object(xml_id)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n\n", "CodeBleu_score": 41.628564989840896}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account_obj = self.env['account.account']\n    account = account_obj.with_context(force_company=company.id).search([('code', '=', xml_id)], limit=1)\n    if not account:\n        account = account_obj.with_context(force_company=company.id).search([('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = account_obj.with_context(force_company=company.id).search([], limit=1)\n    return account\n\n", "CodeBleu_score": 39.36023176869894}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    demo_account = self.env.ref(xml_id, raise_if_not_found=False)\n    if not demo_account or demo_account.company_id!= company:\n        demo_account = self.env['account.account'].search(\n            [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not demo_account:\n        demo_account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return demo_account\n\n", "CodeBleu_score": 41.43708164212639}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    accounts = self.env['account.account'].search([\n        ('company_id', '=', self.company_id.id),\n        ('user_type_id.type', '=', 'liquidity'),\n        ('user_type_id.name', '=', 'Current Year Earnings')\n    ]).filtered(lambda a: a.currency_id == self.currency_id)\n    if len(accounts) > 1:\n        raise ValidationError(_('There can only be one account of type \"Current Year Earnings\" per company.'))\n\n", "CodeBleu_score": 22.49174325294326}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == \"Current Year Earnings\":\n        accounts = Account.objects.filter(account_type=\"Current Year Earnings\").values(\"company\").annotate(count=Count(\"id\"))\n        if len(accounts) > 0:\n            for account in accounts:\n                if account[\"count\"] > 1:\n                    raise ValidationError(\n                        \"There is already an account with the 'Current Year Earnings' type for this company.\"\n                    )\n\n", "CodeBleu_score": 32.47052903157838}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    if self.account_type == \"Current Year Earnings\":\n        current_year_earnings_accounts = Account.objects.filter(account_type=\"Current Year Earnings\").values(\"company\").annotate(count=Count(\"id\")).filter(count__gt=1)\n        if current_year_earnings_accounts.exists():\n            raise ValidationError(_(\"There can be only one account with the 'Current Year Earnings' type for each company.\"))\n\n", "CodeBleu_score": 34.90144117249864}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name:\n        if self._context.get('search_default_unreconciled'):\n            domain = self._get_reconciliation_domain(domain)\n        if self._context.get('search_default_paid'):\n            domain = self._get_paid_domain(domain)\n        if self._context.get('search_default_posted'):\n            domain = self._get_posted_domain(domain)\n        if self._context.get('search_default_customer'):\n            domain = self._get_customer_domain(domain)\n        if self._context.get('search_default_supplier'):\n            domain = self._get_supplier_domain(domain)\n        if self._context.get('search_default_draft'):\n            domain = self._get_draft_domain(domain)\n        if self._context.get('search_default_open'):\n            domain = self._get_open_domain(domain)\n        if self._context.get('search_default_overdue'):\n            domain = self._get_overdue_domain(domain)\n        if self._context.get('search_default_today'):\n            domain = self._get_today_domain(domain)\n        if self._context.get('search_default_not_paid'):\n            domain = self._get_not_paid_domain(domain)\n        if self._context.get('search_default_unpaid'):\n            domain = self._get_unpaid_domain(domain)\n        if self._context.get('search_default_all'):\n            domain = self._get_all_domain(domain)\n        if self._context.get('search_default_journal_ids'):\n            domain = self._get_journal_domain(domain)\n        if self._context.get('search_default_account_ids'):\n            domain = self._get_account_domain(domain)\n        if self._context.get('search_default_partner_ids'):\n            domain = self._get_partner_domain(domain)\n        if self._context.get('search_default_date_from'):\n            domain = self._get_date_from_domain(domain)\n        if self._context.get('search_default_date_to'):\n            domain = self._get_date_to_domain(domain)\n        if self._context.get('search_default_period_ids'):\n            domain = self._", "CodeBleu_score": 32.62674558156286}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name:\n        if operator in expression.NEGATIVE_TERM_OPERATORS:\n            domain = expression.AND([domain, [('name', operator, name)]])\n        else:\n            search_domain = expression.OR([\n                ['|', ('code', '=', name), ('name', operator, name)],\n                ['|', ('code', operator, name), ('name', '=', name)]\n            ])\n            if domain is not None:\n                search_domain = expression.AND([search_domain, domain])\n            search_domain = expression.AND([search_domain, [('company_id', '=', self.env.company.id)]])\n            account_ids = self.search(search_domain, limit=limit, order=order).ids\n            if not account_ids and operator == 'ilike':\n                account_ids = self.search(expression.AND([search_domain, [('code', '=', name)]])).ids\n            return account_ids\n    if self.env.context.get('account_account_account_type_view'):\n        account_type_ids = self.env['account.account.type'].search([('view_id', '=', self.env.context.get('account_account_account_type_view'))]).ids\n        domain = expression.AND([domain, [('user_type_id', 'in', account_type_ids)]])\n    if self.env.context.get('account_account_account_tag_view'):\n        account_tag_ids = self.env['account.account.tag'].search([('view_id', '=', self.env.context.get('account_account_account_tag_view'))]).ids\n        domain = expression.AND([domain, [('tag_ids', 'in', account_tag_ids)]])\n    return super(AccountAccount, self)._name_search(name, domain=domain, operator=operator, limit=limit, order=order)\n\n", "CodeBleu_score": 46.642739249414866}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name:\n        # search by name\n        recs = self.search([('name', operator, name)] + (domain or []), limit=limit, order=order)\n    else:\n        # search by the context\n        context = self._context or {}\n        if context.get('search_default_code_category') and context.get('search_default_code'):\n            recs = self.search([('code_category', '=', context['search_default_code_category']), ('code', '=', context['search_default_code'])] + (domain or []), limit=limit, order=order)\n        elif context.get('search_default_code_category'):\n            recs = self.search([('code_category', '=', context['search_default_code_category'])] + (domain or []), limit=limit, order=order)\n        elif context.get('search_default_code'):\n            recs = self.search([('code', '=', context['search_default_code'])] + (domain or []), limit=limit, order=order)\n        else:\n            recs = self.search(domain or [], limit=limit, order=order)\n    return recs.name_get()\n", "CodeBleu_score": 38.34388481778418}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n\n", "CodeBleu_score": 81.43897356168036}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    super().copy_translations(new, excluded=tuple(excluded)+('name',))\n    if new.name == _('%s (copy)', self.name):\n        name_field = self._fields['name']\n        self.env.cache.update_raw(new, name_field, [{\n            lang: _('%s (copy)', tr)\n            for lang, tr in name_field._get_stored_translations(self).items()\n        }], dirty=True)\n", "CodeBleu_score": 81.43897356168036}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['domain'] = [('id', 'in', self.invoice_ids.ids)]\n    action['context'] = {'default_partner_id': self.partner_id.id, 'default_partner_shipping_id': self.partner_shipping_id.id}\n    return action\n\n", "CodeBleu_score": 19.950803823859687}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    invoices = self.env['account.move'].search([('sale_id', '=', self.id), ('type', '=', 'out_invoice')])\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    if len(invoices) > 1:\n        action['domain'] = [('id', 'in', invoices.ids)]\n    elif len(invoices) == 1:\n        action['views'] = [(self.env.ref('account.view_move_form').id, 'form')]\n        action['res_id'] = invoices.ids[0]\n    else:\n        action = {'type': 'ir.actions.act_window_close'}\n    return action\n\n", "CodeBleu_score": 29.312133774224662}, {"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_out_invoice_type').read()[0]\n    action['context'] = {\n        'default_partner_id': self.partner_id.id,\n        'default_partner_shipping_id': self.partner_shipping_id.id,\n        'default_partner_invoice_id': self.partner_invoice_id.id,\n        'default_company_id': self.company_id.id,\n        'default_currency_id': self.currency_id.id,\n        'default_user_id': self.user_id.id,\n        'default_team_id': self.team_id.id,\n        'default_payment_term_id': self.payment_term_id.id,\n        'default_fiscal_position_id': self.fiscal_position_id.id,\n        'default_invoice_origin': self.name,\n        'default_invoice_payment_ref': self.reference,\n        'default_invoice_payment_term_id': self.payment_term_id.id,\n        'default_invoice_user_id': self.user_id.id,\n        'default_invoice_team_id': self.team_id.id,\n        'default_invoice_partner_bank_id': self.partner_bank_id.id,\n        'default_invoice_partner_id': self.partner_id.id,\n        'default_invoice_journal_id': self.journal_id.id,\n        'default_type': 'out_invoice',\n        'default_sale_order_id': self.id,\n        'default_analytic_account_id': self.analytic_account_id.id,\n        'default_analytic_tag_ids': [(6, 0, self.analytic_tag_ids.ids)],\n        'default_partner_bank_id': self.partner_bank_id.id,\n        'default_partner_id': self.partner_id.id,\n        'default_company_id': self.company_id.id,\n        'default_currency_id': self.currency_id.id,\n        'default_user_id': self.user_id.id,\n        'default_team_id': self.", "CodeBleu_score": 21.281202108692916}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {\n        'default_type': 'in_invoice',\n        'default_purchase_id': self.id,\n    }\n    action['domain'] = [('id', 'in', self.mapped('invoice_ids').ids)]\n    return action\n\n", "CodeBleu_score": 20.879944491809272}, {"code": "def action_view_vendor_bill(self)\n\t\n    if self.ids and len(self.ids) == 1:\n        res = self.read(['partner_id', 'type'])[0]\n        res['domain'] = \"[('partner_id', '=', \" + str(res['partner_id'][0]) + \"), ('account_id.type', '=', 'payable'), ('move_id.state', '!=', 'cancel'), ('move_id.purchase_id', '=', \" + str(self.ids[0]) + \")]\"\n        res['context'] = \"{'default_type':'in_invoice', 'type':'in_invoice'}\"\n        return {\n            'name': _('Vendor Bills'),\n            'view_type': 'form',\n            'view_mode': 'tree,form',\n           'res_model': 'account.move',\n            'type': 'ir.actions.act_window',\n            'context': res['context'],\n            'domain': res['domain'],\n        }\n    return True\n\n", "CodeBleu_score": 30.895597497956786}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    action = self.env.ref('account.action_move_in_invoice_type').read()[0]\n    action['context'] = {'default_type': 'in_invoice', 'default_purchase_id': self.id}\n    action['domain'] = [('id', 'in', self.mapped('invoice_ids').ids)]\n    return action\n\n", "CodeBleu_score": 20.564638956283133}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n\n", "CodeBleu_score": 90.03869238361304}, {"code": "def write(self, values)\n\t    if len(self)!= 1 and 'attachment_ids' in values:\n        values.pop('attachment_ids')\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        result = super().write(values)\n    return result\n", "CodeBleu_score": 90.03869238361304}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self._context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    if not self.env.context.get('company_id'):\n        raise UserError(_('You must set a company ID in the context.'))\n    if not self.env.context.get('partner_id'):\n        raise UserError(_('You must set a partner ID in the context.'))\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.env.context['partner_id']),\n        ('company_id', '=', self.env.context['company_id'])\n    ], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.env.context['partner_id'],\n            'company_id': self.env.context['company_id'],\n            'bank_id': self.bank_id.id,\n            'bank_name': self.bank_id.name,\n           'state': self.state,\n            'country_id': self.country_id.id,\n            'currency_id': self.currency_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 50.945292176287104}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self._context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank']\n    account_number = self._context.get('account_number')\n    partner_id = self._context.get('partner_id')\n    if not account_number or not partner_id:\n        return self.env['res.partner.bank']\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', account_number),\n        ('partner_id', '=', partner_id),\n        ('company_id', '=', self.env.company.id),\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': account_number,\n            'partner_id': partner_id,\n            'company_id': self.env.company.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 57.85637698198114}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.env['ir.config_parameter'].sudo().get_param('l10n_ch_payment_order.skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    bank_account = self.env['res.partner.bank'].search([\n        ('acc_number', '=', self.acc_number),\n        ('partner_id', '=', self.partner_id.id),\n        ('company_id', '=', self.company_id.id),\n    ])\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.acc_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 59.08894109303768}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if currency == transaction_currency:\n        transaction_amount = abs(transaction_amount)\n        balance = abs(balance)\n    elif currency == journal_currency:\n        transaction_amount = abs(journal_amount)\n        balance = abs(balance)\n    elif currency == company_currency:\n        transaction_amount = abs(company_amount)\n        balance = abs(balance)\n    elif currency!= transaction_currency and currency!= journal_currency and currency!= company_currency:\n        if transaction_currency:\n            transaction_amount = transaction_amount / self.currency_rate\n            balance = balance / self.currency_rate\n        elif journal_currency:\n            transaction_amount = journal_amount / self.currency_rate\n            balance = balance / self.currency_rate\n        elif company_currency:\n            transaction_amount = company_amount / self.currency_rate\n            balance = balance / self.currency_rate\n    return {\n        'transaction_amount': transaction_amount,\n        'balance': balance,\n        'amount_currency': amount_currency,\n    }\n\n", "CodeBleu_score": 31.843901897538746}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    # Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n    # from the journal entry linked to the statement line.\n    # All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n\n    # If the transaction currency is not the same as the company currency,\n    # we need to convert the transaction amount to the company currency.\n    # We use the exchange rate from the statement line to do so.\n    if transaction_currency and company_currency and transaction_currency!= company_currency:\n        transaction_amount = self._convert_amount(transaction_amount, transaction_currency, company_currency, self.date)\n\n    # If the transaction amount is not the same as the company amount,\n    # we need to convert the company amount to the transaction amount.\n    # We use the exchange rate from the statement line to do so.\n    if company_amount!= transaction_amount:\n        company_amount = self._convert_amount(company_amount, company_currency, transaction_currency, self.date)\n\n    # If the journal currency is not the same as the company currency,\n    # we need to convert the journal amount to the company currency.\n    # We use the exchange rate from the statement line to do so.\n    if journal_currency and company_currency and journal_currency!= company_currency:\n        journal_amount = self._convert_amount(journal_amount, journal_currency, company_currency, self.date)\n\n    # If the journal amount is not the same as the company amount,\n    # we need to convert the company amount to the journal amount.\n    # We use the exchange rate from the statement line to do so.\n    if journal_amount!= company_amount:\n        journal_amount = self._convert_amount(journal_amount, company_currency, journal_currency, self.date)\n\n    # If the transaction currency is not the same as the journal currency,\n    # we need to convert the transaction amount to the journal currency.\n    # We use the exchange rate from the statement line to do so.\n    if transaction_currency and journal_currency and transaction_currency!= journal_currency:\n        transaction_amount = self._convert_amount(transaction_amount, transaction_currency, journal_currency,", "CodeBleu_score": 20.56131117362411}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    # Compute the amounts in the company currency\n    if currency == company_currency:\n        # If the transaction currency is the company currency, we can directly use the amounts from the accounting entries\n        company_amount = balance\n        company_currency_amount = company_amount\n    elif currency == journal_currency:\n        # If the transaction currency is the journal currency, we can compute the company currency amount using the journal currency rate\n        company_currency_amount = journal_amount * self.journal_entry_id.currency_rate\n    elif currency == transaction_currency:\n        # If the transaction currency is the same as the requested currency, we can use the transaction amount directly\n        company_currency_amount = transaction_amount\n    else:\n        # Otherwise, we need to compute the company currency amount using the transaction currency rate\n        company_currency_amount = transaction_amount * self.journal_entry_id.currency_rate\n    # Adjust the transaction amount and balance if the transaction currency is different from the company currency\n    if transaction_currency!= company_currency:\n        # Adjust the transaction amount if the transaction currency is different from the company currency\n        transaction_amount = company_currency_amount * self.journal_entry_id.currency_rate_inverse\n        # Adjust the balance if the transaction currency is different from the company currency\n        balance = company_currency_amount * self.journal_entry_id.currency_rate_inverse\n    return {\n        'transaction_amount': transaction_amount,\n        'balance': balance,\n        'company_currency_amount': company_currency_amount,\n    }\n", "CodeBleu_score": 24.830016633251294}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {'payment_method_id': method.id})\n                ]\n\n", "CodeBleu_score": 34.14124539574535}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {\n                        'payment_method_id': method.id,\n                       'sequence': method.sequence,\n                    })\n                ]\n\n", "CodeBleu_score": 39.04214935124504}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        journal.outbound_payment_method_line_ids.unlink()\n        if journal.type in ('bank', 'cash'):\n            for method in journal._default_outbound_payment_methods:\n                journal.outbound_payment_method_line_ids = [\n                    (0, 0, {'payment_method_id': method.id})]\n\n", "CodeBleu_score": 34.17918203749936}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t   for move in self:\n        if move.date and move.date_last_stage_update:\n            continue\n        invoice_date = move.invoice_date\n        if not invoice_date:\n            invoice_date = move.date\n        if not invoice_date:\n            invoice_date = fields.Date.context_today(self)\n        has_tax = move._affect_tax_report()\n        move.date = move._get_accounting_date(invoice_date, has_tax)\n        if move.date!= invoice_date:\n            move.env.recompute()\n\n", "CodeBleu_score": 36.3047777445835}, {"code": "def _compute_date(self)\n\t   for move in self:\n        if not move.date:\n            if move.invoice_date:\n                move.date = move._get_accounting_date(move.invoice_date, move._affect_tax_report())\n            else:\n                move.date = fields.Date.context_today(move)\n        if move.date!= move._get_accounting_date(move.invoice_date, move._affect_tax_report()):\n            move.env.recompute()\n\n", "CodeBleu_score": 34.14851100537199}, {"code": "def _compute_date(self)\n\t   for move in self:\n        if move.invoice_date and move.move_type not in move.get_sale_types(include_receipts=True):\n            invoice_date = fields.Date.from_string(move.invoice_date)\n            has_tax = move._affect_tax_report()\n            accounting_date = move._get_accounting_date(invoice_date, has_tax)\n            if accounting_date!= move.date:\n                move.date = accounting_date\n                move.env.recompute()\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n\n", "CodeBleu_score": 43.41954758595221}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document():\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id or False\n        elif move.is_purchase_document():\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id or False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 40.53891519606493}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document():\n            if move.partner_id.sale_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.sale_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document():\n            if move.partner_id.purchase_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.purchase_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 39.526568200855905}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_sale_document():\n            if move.partner_id.customer_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.customer_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        elif move.is_purchase_document():\n            if move.partner_id.supplier_payment_term_id:\n                move.invoice_payment_term_id = move.partner_id.supplier_payment_term_id.id\n            else:\n                move.invoice_payment_term_id = False\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 39.85953598927628}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group'].search([])\n    tax_groups_by_country_company = defaultdict(list)\n    for tax_group in tax_groups:\n        tax_groups_by_country_company[(tax_group.country_id, tax_group.company_id)].append(tax_group)\n    for tax in self:\n        tax_group_id = False\n        for tax_group in tax_groups_by_country_company[(tax.country_id, tax.company_id)]:\n            if not tax_group.country_id:\n                tax_group_id = tax_group.id\n                break\n        if not tax_group_id:\n            tax_group_id = tax_groups_by_country_company[(False, tax.company_id)][0].id\n        tax.tax_group_id = tax_group_id\n\n", "CodeBleu_score": 27.65633374011529}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    tax_group_ids = []\n    for tax in self:\n        tax_group_id = tax_groups.search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group_id:\n            tax_group_id = tax_groups.search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n        tax_group_ids.append(tax_group_id.id if tax_group_id else False)\n    return tax_group_ids\n", "CodeBleu_score": 22.57299640877834}, {"code": " def _compute_tax_group_id(self)\n\t\n    tax_groups = self.env['account.tax.group']\n    tax_group_map = {}\n    for tax in self:\n        tax_group_map.setdefault((tax.country_id, tax.company_id), [])\n        tax_group_map[(tax.country_id, tax.company_id)].append(tax)\n    for (country_id, company_id), taxes in tax_group_map.items():\n        tax_group_domain = [\n            ('country_id', '=', country_id),\n            ('company_id', '=', company_id),\n        ]\n        tax_group = tax_groups.search(tax_group_domain, limit=1)\n        if not tax_group:\n            tax_group_domain = [\n                ('country_id', '=', False),\n                ('company_id', '=', company_id),\n            ]\n            tax_group = tax_groups.search(tax_group_domain, limit=1)\n        if tax_group:\n            for tax in taxes:\n                tax.tax_group_id = tax_group\n        else:\n            raise UserError(_('No tax group found for taxes with country %s and company %s.') % (country_id.name, company_id.name))\n", "CodeBleu_score": 32.33431132365819}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    if not os.path.isfile(module_file):\n        raise FileNotFoundError(module_file)\n    if not os.path.exists(module_file):\n        raise FileNotFoundError(module_file)\n    if not os.access(module_file, os.R_OK):\n        raise PermissionError(module_file)\n\n    self.session.get(url + '/web')\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n    }\n    with open(module_file, 'rb') as f:\n        files = {\n           'module': f,\n        }\n        response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n    if 'The module is not installed or is outdated' in response.text:\n        raise Exception('The module is not installed or is outdated')\n    return response.text\n\n", "CodeBleu_score": 50.19994912714796}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    self.session.post(url, data={\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force\n    })\n    with open(module_file, 'rb') as file:\n        response = self.session.post(url + '/base_import_module/login_upload', files={\n           'module': file\n        })\n    if response.status_code!= 200:\n        raise Exception(response.text)\n    return response.text\n\n", "CodeBleu_score": 38.21735361294998}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    # Set the database in the session\n    self.set_db(db)\n    # Prepare POST request data\n    data = {\n        'login': login,\n        'password':,\n        'db': db,\n        'force': force,\n    }\n    # Upload the module file\n    response = self.post(url + '/web/base_import_module/login_upload', data, files={'file': module_file})\n    # Check if the server has the required module installed or is outdated\n    if response.status_code!= 200:\n        raise Exception(f\"Server does not have the required module installed or is outdated. Response: {response.text}\")\n    return response.text\n\n", "CodeBleu_score": 35.10787346477609}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    config = ConfigParser()\n    config.read(os.path.join(os.path.dirname(__file__), 'config.ini'))\n    dbname = config.get('translation', 'dbname')\n    overwrite = config.getboolean('translation', 'overwrite')\n\n    registry = odoo.registry(dbname)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr)\n        importer.load_translations(overwrite=overwrite)\n\n", "CodeBleu_score": 44.986825920869244}, {"code": "def import_translation()\n\t\n    dbname = config.get('db_name')\n    overwrite = config.get('overwrite')\n    registry = Registry(dbname)\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, overwrite=overwrite)\n        importer.load_translations()\n        importer.save_translations()\n\n", "CodeBleu_score": 36.277708789323796}, {"code": "def import_translation()\n\t\n    # Retrieve configuration settings\n    dbname = odoo.tools.config['db_name']\n    overwrite = odoo.tools.config['overwrite_translation']\n\n    # Create a new database registry\n    registry = odoo.registry(dbname)\n\n    # Use a cursor to initialize a TranslationImporter\n    with registry.cursor() as cr:\n        importer = TranslationImporter(cr, dbname)\n\n        # Load translation files based on the specified configuration\n        importer.load_modules(overwrite=overwrite)\n\n        # Save the translations, with the option to overwrite existing ones\n        importer.save(overwrite=overwrite)\n\n", "CodeBleu_score": 33.72713018080763}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    if name in self.children_dict:\n        return self.children_dict[name]\n    new_node = Node(name, info)\n    new_node.depth = self.depth + 1\n    new_node.parent = self\n    new_node.children = []\n    new_node.children_dict = {}\n    new_node.children_names = []\n    new_node.children_info = []\n    if hasattr(self, \"parent\"):\n        new_node.parent_name = self.parent_name\n        new_node.parent_info = self.parent_info\n    if hasattr(self, \"grandparent\"):\n        new_node.grandparent_name = self.grandparent_name\n        new_node.grandparent_info = self.grandparent_info\n    if hasattr(self, \"greatgrandparent\"):\n        new_node.greatgrandparent_name = self.greatgrandparent_name\n        new_node.greatgrandparent_info = self.greatgrandparent_info\n    self.children.append(new_node)\n    self.children_dict[name] = new_node\n    self.children_names.append(name)\n    self.children_info.append(info)\n    self.children.sort(key=lambda x: x.name)\n    self.children_names.sort()\n    return new_node\n\n", "CodeBleu_score": 35.31606770285601}, {"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        new_node.parent = self\n        new_node.children = []\n        new_node.is_leaf = True\n        if self.parent:\n            new_node.parent_path = self.parent_path + [self.name]\n            new_node.parent_path_str = self.parent_path_str + \"/\" + self.name\n        else:\n            new_node.parent_path = []\n            new_node.parent_path_str = \"\"\n        self.children.append(new_node)\n        self.children.sort(key=lambda x: x.name)\n        return new_node\n    else:\n        return self.children[name]\n\n", "CodeBleu_score": 40.790661612509}, {"code": "def add_child(self, name, info)\n\t\n    if name not in [child.name for child in self.children]:\n        new_node = Node(name, info)\n        new_node.depth = self.depth + 1\n        new_node.parent = self\n        new_node.children = []\n        if hasattr(self, \"info\"):\n            new_node.info = self.info\n        if hasattr(self, \"name\"):\n            new_node.name = self.name\n        self.children.append(new_node)\n        self.children = sorted(self.children, key=lambda child: child.name)\n        return new_node\n    else:\n        return None\n\n", "CodeBleu_score": 38.40481464419262}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n    root_type = account.get_root_type()\n    for entry in gl_entries:\n        entry_date = entry.get_date()\n        if entry_date in dates:\n            entry_amount = entry.get_amount(account)\n            entry_index = dates.index(entry_date)\n            result[\"balances\"][entry_index] += entry_amount\n    if root_type not in [\"Asset\", \"Expense\"]:\n        for i in range(len(result[\"balances\"])):\n            result[\"balances\"][i] = -result[\"balances\"][i]\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        for i in range(1, len(result[\"balances\"])):\n            result[\"balances\"][i] += result[\"balances\"][i - 1]\n    return result\n\n", "CodeBleu_score": 30.192067172446773}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"dates\": dates,\n        \"balances\": [0] * len(dates),\n    }\n    root_type = account.root_type\n    for entry in gl_entries:\n        entry_date = entry.date\n        entry_date_index = dates.index(entry_date)\n        entry_amount = entry.amount\n        entry_account = entry.account\n        if entry_account.root_type == root_type:\n            result[\"balances\"][entry_date_index] += entry_amount\n        elif root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n            result[\"balances\"][entry_date_index:] = [\n                x + entry_amount for x in result[\"balances\"][entry_date_index:]\n            ]\n    if root_type not in [\"Asset\", \"Expense\"]:\n        result[\"balances\"] = [-x for x in result[\"balances\"]]\n    return result\n\n", "CodeBleu_score": 26.064252766017514}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = {\n        \"account\": account,\n        \"dates\": dates,\n        \"balances\": {date: 0 for date in dates},\n    }\n    root_type = account.root_type\n    for entry in gl_entries:\n        entry_date = entry.date\n        if entry_date in result[\"dates\"]:\n            balance = result[\"balances\"][entry_date]\n            if root_type in [\"Asset\", \"Expense\"]:\n                balance += entry.amount\n            else:\n                balance -= entry.amount\n            result[\"balances\"][entry_date] = balance\n    if root_type in [\"Asset\", \"Liability\", \"Equity\"]:\n        balance = 0\n        for date in result[\"dates\"]:\n            balance += result[\"balances\"][date]\n            result[\"balances\"][date] = balance\n    return result\n\n", "CodeBleu_score": 23.11918568228673}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n\n    # Get the account record\n    account = self.env[\"account.account\"].browse(self.id)\n\n    # Check if the account type is changing from \"Receivable\" or \"Payable\" to a non-receivable/payable type\n    if account.user_type_id.type in [\"receivable\", \"payable\"] and self.user_type_id.type not in [\"receivable\", \"payable\"]:\n        # Check if there are existing general ledger entries for the account\n        if self.env[\"account.move.line\"].search([(\"account_id\", \"=\", self.id)]):\n            # Generate a warning message\n            message = _(\n                \"Changing the account type from 'Receivable' or 'Payable' to a non-receivable/payable type may cause issues in the 'Accounts' report. Please verify that the account is not used in any transactions before making this change.\"\n            )\n            # Add a comment to the account record\n            self.message_post(body=message)\n\n", "CodeBleu_score": 17.917118301784004}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.type in (\"receivable\", \"payable\"):\n        if self.type!= self._origin.type:\n            if self.env[\"account.move.line\"].search_count([(\"account_id\", \"=\", self.id)]):\n                self.message_post(\n                    body=\"Changing the account type from 'Receivable' or 'Payable' to a non-receivable/payable type may cause issues in the 'Accounts' report. Please verify the data and make any necessary adjustments.\"\n                )\n                self.comment = (\n                    self.comment or \"\"\n                ) + \"Changing the account type from 'Receivable' or 'Payable' to a non-receivable/payable type may cause issues in the 'Accounts' report. Please verify the data and make any necessary adjustments.\"\n\n", "CodeBleu_score": 22.070672349996677}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"receivable\", \"payable\"] and self.account_type!= self.account_type_before_save:\n        if self.env[\"account.move.line\"].search_count([(\"account_id\", \"=\", self.id)]):\n            self.message_post(\n                body=_(\"Potential issue in the 'Accounts' report. Please check the report for accuracy.\"),\n                message_type=\"comment\",\n            )\n\n", "CodeBleu_score": 18.375878662651516}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.currency_id:\n        self.currency_id.check_company(self.company_id)\n    else:\n        self.currency_id = self.company_id.currency_id\n    self.currency_id.check_account_type(self.user_type_id.type)\n    if self.currency_id!= self.company_id.currency_id:\n        self.currency_explicit = True\n    if self.currency_id!= self.company_id.currency_id:\n        self.currency_id = self.company_id.currency_id\n    if self.currency_id!= self.company_id.currency_id:\n        raise UserError(_('You cannot change the currency of an account that already has journal entries with a different currency.'))\n\n", "CodeBleu_score": 27.6057659783086}, {"code": "def validate_account_currency(self)\n\t\n\n    # If the account currency is not explicitly set, set it to the company's default currency\n    if not self.currency_id:\n        self.currency_id = self.company_id.currency_id.id\n\n    # If the account currency is different from the company's default currency, check for existing general ledger entries with a different currency\n    if self.currency_id!= self.company_id.currency_id.id:\n        # Check for existing general ledger entries with a different currency\n        ledger_entries = self.env['account.move.line'].search([('account_id', '=', self.id), ('currency_id', '!=', self.currency_id.id)])\n        if ledger_entries:\n            raise UserError(_(\"Cannot change the currency of an account with existing general ledger entries with a different currency.\"))\n\n    # Mark the account currency as explicitly specified\n    self.currency_id_is_explicit = True\n\n", "CodeBleu_score": 37.60841422049212}, {"code": "def validate_account_currency(self)\n\t\n    if self.currency_id and self.currency_id!= self.company_id.currency_id:\n        if self.env['account.move.line'].search([('account_id', '=', self.id)]):\n            raise UserError(_('You cannot change the currency of an account that already has journal entries.'))\n        self.currency_id.write({'active': True})\n    elif not self.currency_id:\n        self.currency_id = self.company_id.currency_id\n    self.currency_id.write({'active': True})\n    self.currency_id_is_explicitly_set = bool(self.currency_id)\n\n", "CodeBleu_score": 28.292445686748852}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = key_values\n            merged_entries[key][\"debit\"] = 0\n            merged_entries[key][\"credit\"] = 0\n            merged_entries[key][\"debit_in_account_currency\"] = 0\n            merged_entries[key][\"credit_in_account_currency\"] = 0\n\n        merged_entries[key][\"debit\"] += cflt(entry.get(\"debit\"))\n        merged_entries[key][\"credit\"] += cflt(entry.get(\"credit\"))\n        merged_entries[key][\"debit_in_account_currency\"] += cflt(entry.get(\"debit_in_account_currency\"))\n        merged_entries[key][\"credit_in_account_currency\"] += cflt(entry.get(\"credit_in_account_currency\"))\n\n    return merged_entries\n", "CodeBleu_score": 46.528789487954256}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    aggregated_entries = {}\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n        if key not in aggregated_entries:\n            aggregated_entries[key] = {\n                \"debit\": 0.0,\n                \"credit\": 0.0,\n                \"debit_in_account_currency\": 0.0,\n                \"credit_in_account_currency\": 0.0,\n                \"key_values\": key_values,\n            }\n        aggregated_entries[key][\"debit\"] += flt(entry.get(\"debit\"))\n        aggregated_entries[key][\"credit\"] += flt(entry.get(\"credit\"))\n        aggregated_entries[key][\"debit_in_account_currency\"] += flt(\n            entry.get(\"debit_in_account_currency\")\n        )\n        aggregated_entries[key][\"credit_in_account_currency\"] += flt(\n            entry.get(\"credit_in_account_currency\")\n        )\n\n    return aggregated_entries\n\n", "CodeBleu_score": 43.47012575272383}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n\n    aggregated_entries = {}\n\n    for entry in entries:\n        key, key_values = generate_key(entry, accounting_dimensions)\n\n        if key not in aggregated_entries:\n            aggregated_entries[key] = key_values\n            aggregated_entries[key][\"debit\"] = 0\n            aggregated_entries[key][\"credit\"] = 0\n            aggregated_entries[key][\"debit_in_account_currency\"] = 0\n            aggregated_entries[key][\"credit_in_account_currency\"] = 0\n\n        aggregated_entries[key][\"debit\"] += cint(entry.get(\"debit\"))\n        aggregated_entries[key][\"credit\"] += cint(entry.get(\"credit\"))\n        aggregated_entries[key][\"debit_in_account_currency\"] += cint(entry.get(\"debit_in_account_currency\"))\n        aggregated_entries[key][\"credit_in_account_currency\"] += cint(entry.get(\"credit_in_account_currency\"))\n\n    return aggregated_entries\n\n", "CodeBleu_score": 43.974818500202936}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier_id.blocked and self.supplier_id.hold_type == self.type:\n        if self.supplier_id.release_date < self.date:\n            raise ValidationError(\n                _(\"The supplier is blocked for this document, please contact your accounting manager.\")\n            )\n    elif self.supplier_id.blocked:\n        raise ValidationError(\n            _(\"The supplier is blocked for this document, please contact your accounting manager.\")\n        )\n\n", "CodeBleu_score": 18.080827922572993}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type =='supplier_payment':\n        supplier = frappe.get_doc('Supplier', self.supplier)\n    elif self.transaction_type == 'buying_invoice':\n        supplier = frappe.get_doc('Supplier', self.supplier)\n    if supplier.block_supplier:\n        if supplier.block_type == self.transaction_type:\n            if supplier.release_date < self.posting_date:\n                frappe.throw(\n                    frappe._(\"Supplier is blocked until {0}\").format(supplier.release_date))\n\n", "CodeBleu_score": 24.08058540917324}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.transaction_type =='supplier_payment':\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold:\n            if supplier.hold_type == 'payment':\n                if supplier.release_date and supplier.release_date <= today():\n                    supplier.on_hold = 0\n                    supplier.save()\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold. Cannot proceed with the transaction.\").format(supplier.name))\n    elif self.transaction_type == 'buying_invoice':\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold:\n            if supplier.hold_type == 'invoice':\n                if supplier.release_date and supplier.release_date <= today():\n                    supplier.on_hold = 0\n                    supplier.save()\n                else:\n                    frappe.throw(_(\"Supplier {0} is on hold. Cannot proceed with the transaction.\").format(supplier.name))\n\n", "CodeBleu_score": 29.34516813040909}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if not self.doctype.is_submittable:\n        return\n    if not self.meta.get_field(\"repost_vouchers\"):\n        return\n    repost_doctypes = frappe.get_all(\n        \"DocType\",\n        filters={\"allow_reposting\": 1},\n        fields=[\"name\", \"module\"],\n        order_by=\"name\",\n    )\n    if not repost_doctypes:\n        return\n    voucher_type = self.doctype\n    voucher_number = self.name\n    repost_vouchers = []\n    for doctype in repost_doctypes:\n        if doctype.module == self.meta.module:\n            continue\n        repost_vouchers.extend(\n            frappe.get_all(\n                doctype.name,\n                filters={\n                    \"voucher_type\": voucher_type,\n                    \"voucher_number\": voucher_number,\n                },\n                fields=[\"name\", \"parent\", \"parenttype\"],\n            )\n        )\n    if not repost_vouchers:\n        return\n    repost_vouchers_by_parent = {}\n    for repost_voucher in repost_vouchers:\n        if repost_voucher.parenttype not in repost_vouchers_by_parent:\n            repost_vouchers_by_parent[repost_voucher.parenttype] = {}\n        if repost_voucher.parent not in repost_vouchers_by_parent[\n            repost_voucher.parenttype\n        ]:\n            repost_vouchers_by_parent[repost_voucher.parenttype][\n                repost_voucher.parent\n            ] = []\n        repost_vouchers_by_parent[repost_voucher.parenttype][\n            repost_voucher.parent\n        ].append(repost_voucher.name)\n    for parenttype in repost_vouchers_by_parent:\n        for parent in repost_vouchers_by_parent[parenttype]:\n            parent_doc = frappe.get_doc(parenttype, parent)\n            if parent_doc.meta.get_field(\"repost_vouchers\"):\n                parent_doc.repost_vouchers = [\n                    voucher\n                    for voucher in parent_doc.repost_vouchers\n                    if voucher.voucher_number!= voucher_number\n               ", "CodeBleu_score": 20.68912743378251}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    from frappe.model.utils import get_link_fields\n\n    repost_doctypes = frappe.get_all(\"DocType\", filters={\"is_repost\": 1})\n    if not repost_doctypes:\n        return\n\n    voucher_type = self.doctype\n    voucher_number = self.name\n\n    for doctype in repost_doctypes:\n        doctype = doctype.name\n        link_fields = get_link_fields(doctype)\n        if voucher_type in link_fields:\n            rows = frappe.get_all(\n                doctype,\n                filters={\n                    \"voucher_type\": voucher_type,\n                    \"voucher_number\": voucher_number,\n                },\n                fields=[\"name\", \"parent\", \"parenttype\"],\n            )\n            if rows:\n                parent_map = {}\n                for row in rows:\n                    parent_map.setdefault(row.parenttype, []).append(row.parent)\n\n                for parenttype, parents in parent_map.items():\n                    for parent in parents:\n                        parent_doc = frappe.get_doc(parenttype, parent)\n                        if parent_doc.get(\"repost_vouchers\"):\n                            parent_doc.set(\"repost_vouchers\", [])\n                        else:\n                            parent_doc.set(\"vouchers\", [])\n                        parent_doc.flags.ignore_links = True\n                        parent_doc.flags.ignore_validate = True\n                        parent_doc.save()\n\n", "CodeBleu_score": 30.31671896974547}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = get_repost_doctypes(self)\n    if not repost_doctypes:\n        return\n    voucher_type = self.doctype\n    voucher_number = self.name\n    voucher_map = {}\n    for doctype in repost_doctypes:\n        voucher_map[doctype] = frappe.db.sql(\n            \"\"\"\n            SELECT parent, parenttype\n            FROM `tab{doctype}`\n            WHERE voucher_type = %(voucher_type)s\n            AND voucher_number = %(voucher_number)s\n            \"\"\".format(\n                doctype=doctype\n            ),\n            values={\n                \"voucher_type\": voucher_type,\n                \"voucher_number\": voucher_number,\n            },\n            as_dict=True,\n        )\n    for doctype, vouchers in voucher_map.items():\n        for voucher in vouchers:\n            parent = frappe.get_doc(voucher.parenttype, voucher.parent)\n            if doctype in parent.meta.get_table_fields():\n                parent.set(doctype, [])\n            else:\n                parent.set(\"vouchers\", [])\n            parent.flags.ignore_links = True\n            parent.flags.ignore_validate = True\n            parent.save()\n\n", "CodeBleu_score": 28.23858474324806}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        query_params = {\n            \"start_date\": start_date,\n            \"end_date\": end_date,\n            \"options\": {\"count\": 250, \"offset\": 0},\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n        transactions = []\n        while True:\n            response = self.client.Transactions.get(**query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) < response[\"total_transactions\"]:\n                query_params[\"options\"][\"offset\"] += query_params[\"options\"][\"count\"]\n            else:\n                break\n        return transactions\n    except ItemError as e:\n        frappe.log_error(\"Plaid: Item error\")\n        frappe.throw(_(str(e)), title=_(\"Item Error\"))\n    except PlaidError as e:\n        frappe.log_error(\"Plaid: Plaid error\")\n        frappe.throw(_(str(e)), title=_(\"Plaid Error\"))\n    except requests.Timeout:\n        frappe.log_error(\"Plaid: Timeout error\")\n        frappe.throw(_(\"Timeout Error\"), title=_(\"Timeout Error\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: General error\")\n        frappe.throw(_(str(e)), title=_(\"General Error\"))\n\n", "CodeBleu_score": 40.06211455469458}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        transactions = []\n        offset = 0\n        while True:\n            response = self.client.Transactions.get(\n                self.access_token, start_date, end_date, options={\n                    \"account_ids\": [account_id],\n                    \"count\": 500,\n                    \"offset\": offset\n                }\n            )\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            offset += 500\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.log_error(\"Plaid: Item login required\")\n            frappe.throw(_(\"Item login required\"), title=_(\"Authentication Failed\"))\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            frappe.log_error(\"Plaid: Planned maintenance\")\n            frappe.throw(_(\"Planned maintenance\"), title=_(\"Planned Maintenance\"))\n    except requests.Timeout:\n        frappe.log_error(\"Plaid: Timeout\")\n        frappe.throw(_(\"Timeout\"), title=_(\"Timeout\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: Authentication error\")\n        frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n", "CodeBleu_score": 40.80014786594904}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        query_params = {\n            \"options\": {\"pending\": True, \"include_pending\": True},\n            \"count\": 500,\n            \"offset\": 0,\n        }\n        if account_id:\n            query_params[\"account_ids\"] = [account_id]\n        if start_date:\n            query_params[\"start_date\"] = start_date\n        if end_date:\n            query_params[\"end_date\"] = end_date\n        transactions = []\n        while True:\n            response = self.client.Transactions.get(**query_params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            query_params[\"offset\"] += query_params[\"count\"]\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.log_error(\"Plaid: Item login required\")\n            frappe.throw(_(str(e)), title=_(\"Item Login Required\"))\n        elif e.code == \"ITEM_NOT_ACTIVE\":\n            frappe.log_error(\"Plaid: Item not active\")\n            frappe.throw(_(str(e)), title=_(\"Item Not Active\"))\n        else:\n            frappe.log_error(\"Plaid: Item error\")\n            frappe.throw(_(str(e)), title=_(\"Item Error\"))\n    except APIError as e:\n        if e.code == \"PLANNED_MAINTENANCE\":\n            frappe.log_error(\"Plaid: Planned maintenance\")\n            frappe.throw(_(str(e)), title=_(\"Planned Maintenance\"))\n        else:\n            frappe.log_error(\"Plaid: API error\")\n            frappe.throw(_(str(e)), title=_(\"API Error\"))\n    except requests.Timeout:\n        frappe.log_error(\"Plaid: Timeout\")\n        frappe.throw(_(\"Timeout\"), title=_(\"Timeout\"))\n    except Exception as e:\n        frappe.log_error(\"Plaid: Error\")\n        frappe.throw(_(str(e)), title=_(\"Error\"))", "CodeBleu_score": 38.27379561215222}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        access_token = PlaidConnector.get_access_token(token)\n        bank = frappe.get_doc(\"Bank\", {\"institution\": response[\"institution\"][\"name\"]})\n        if not bank:\n            bank = frappe.new_doc(\"Bank\")\n            bank.institution = response[\"institution\"][\"name\"]\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(f\"Error adding institution: {e}\")\n\n", "CodeBleu_score": 44.53565608815655}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution_id = response[\"institution\"][\"institution_id\"]\n        institution_name = response[\"institution\"][\"name\"]\n        access_token = PlaidConnector().get_access_token(token)\n        bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution_id})\n        if not bank.name:\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"institution_id\": institution_id,\n                    \"institution_name\": institution_name,\n                    \"access_token\": access_token,\n                }\n            )\n            bank.insert()\n        else:\n            bank.access_token = access_token\n            bank.save()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 46.842008032597974}, {"code": "def add_institution(token, response)\n\t\n    try:\n        public_token = token\n        response = response\n        plaid_connector = PlaidConnector()\n        access_token = plaid_connector.get_access_token(public_token)\n        bank_exists = frappe.db.exists(\"Bank\", {\"institution_id\": response[\"institution_id\"]})\n        if not bank_exists:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = response[\"institution_name\"]\n            bank.institution_id = response[\"institution_id\"]\n            bank.access_token = access_token\n            bank.save(ignore_permissions=True)\n        else:\n            bank = frappe.get_doc(\"Bank\", {\"institution_id\": response[\"institution_id\"]})\n            bank.access_token = access_token\n            bank.save(ignore_permissions=True)\n    except Exception as e:\n        frappe.log_error(f\"Error adding bank institution: {e}\")\n\n", "CodeBleu_score": 44.17070260825018}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        last_integration_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_integration_date\"\n        )\n        if not last_integration_date:\n            last_integration_date = getdate(get_last_day_of_month(nowdate()))\n        start_date = last_integration_date + relativedelta(days=1)\n        end_date = getdate(get_last_day_of_month(nowdate()))\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            for transaction in transactions:\n                new_bank_transaction(transaction)\n            frappe.db.set_value(\n                \"Bank Account\", bank_account, \"last_integration_date\", end_date\n            )\n            frappe.msgprint(\n                f\"Synced {len(transactions)} transactions for {bank_account}.\"\n            )\n        else:\n            frappe.msgprint(\n                f\"No new transactions found for {bank_account} since {last_integration_date}.\"\n            )\n    except Exception as e:\n        frappe.log_error(\n            title=\"Error syncing transactions\",\n            message=f\"Error syncing transactions for {bank_account}: {e}\",\n        )\n", "CodeBleu_score": 36.785286656759666}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    # Get the last integration date for the bank and bank account\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n\n    # Set the start date to the last integration date or 30 days ago, whichever is later\n    start_date = last_integration_date or add_to_date(nowdate(), days=-30)\n\n    # Set the end date to today\n    end_date = nowdate()\n\n    # Get the transactions for the specified bank and bank account within the date range\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    # Process the transactions into new bank transactions\n    for transaction in transactions:\n        new_bank_transaction(transaction)\n\n    # Update the last integration date to the date of the oldest transaction\n    oldest_transaction_date = min(\n        [transaction[\"date\"] for transaction in transactions], default=None\n    )\n    if oldest_transaction_date:\n        frappe.db.set_value(\n            \"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date\n        )\n\n    # Log the number of new transactions added\n    frappe.log_info(\n        f\"Added {len(transactions)} new transactions for {bank_account} from {start_date} to {end_date}\"\n    )\n\n", "CodeBleu_score": 27.47705396570872}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    last_integration_date = frappe.db.get_value(\n        \"Bank Account\", bank_account, \"last_integration_date\"\n    )\n    start_date = last_integration_date or getdate(datetime.now())\n    end_date = getdate(datetime.now())\n\n    transactions = get_transactions(bank, bank_account, start_date, end_date)\n\n    if transactions:\n        for transaction in transactions:\n            new_bank_transaction(transaction)\n\n    if transactions:\n        oldest_transaction_date = min(\n            [getdate(transaction[\"date\"]) for transaction in transactions]\n        )\n        frappe.db.set_value(\n            \"Bank Account\", bank_account, \"last_integration_date\", oldest_transaction_date\n        )\n\n    frappe.log_info(\n        f\"Added {len(transactions)} new transactions for {bank_account}\"\n    )\n\n", "CodeBleu_score": 27.855126628414382}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = f\"https://quickbooks.api.intuit.com/v3/company/{self.company_id}/{entity}\"\n    total = self._get_total(query_uri)\n    if total:\n        for i in range(0, total, 1000):\n            query_uri = f\"{query_uri}?startindex={i}&limit=1000\"\n            response = self._get(query_uri)\n            if response.ok:\n                entries = response.json().get(f\"{entity}s\", {}).get(\"QueryResponse\", {}).get(entity, [])\n                entries = self._preprocess_entries(entity, entries)\n                self._save_entries(entity, entries)\n            else:\n                self._log_error(\n                    f\"Error fetching {entity}s from QuickBooks\",\n                    response.text,\n                )", "CodeBleu_score": 32.620912040958096}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = f\"query?query=select * from {entity}\"\n    total = self._get(f\"{self.base_url}/{query_uri}\").json()[\"QueryResponse\"][entity][\n        \"totalCount\"\n    ]\n    for offset in range(0, total, 1000):\n        entries = self._get(\n            f\"{self.base_url}/{query_uri}&offset={offset}&limit=1000\"\n        ).json()[\"QueryResponse\"][entity][\"Bill\"]\n        entries = self._preprocess_entries(entity, entries)\n        self._save_entries(entity, entries)\n    self._publish({\"event\": \"progress\", \"message\": _(\"Done\")})\n", "CodeBleu_score": 29.082921069484602}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    total = self._get_total(query_uri)\n    if total:\n        for start_pos in range(1, total + 1, 1000):\n            entries = self._get_entries(query_uri, start_pos)\n            entries = self._preprocess_entries(entity, entries)\n            self._save_entries(entity, entries)", "CodeBleu_score": 18.70750130442609}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = self._get_quickbooks_id(invoice)\n        if invoice[\"LinkedTxn\"]:\n            for linked_txn in invoice[\"LinkedTxn\"]:\n                if linked_txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                    break\n        else:\n            self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])\n", "CodeBleu_score": 42.71151663787068}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = self._get_quickbooks_id(invoice)\n        if invoice[\"LinkedTxn\"]:\n            for txn in invoice[\"LinkedTxn\"]:\n                if txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                    return\n        self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice, quickbooks_id])\n", "CodeBleu_score": 40.79762107470524}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        quickbooks_id = self._get_quickbooks_id(invoice[\"Id\"])\n        if invoice[\"LinkedTxn\"]:\n            for txn in invoice[\"LinkedTxn\"]:\n                if txn[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_invoice_as_journal_entry(invoice, quickbooks_id)\n                    return\n        self._save_sales_invoice(invoice, quickbooks_id)\n    except Exception as e:\n        self._log_error(e, [invoice])\n\n", "CodeBleu_score": 42.034590729767295}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    if no_of_visit > 0:\n        # Calculate the interval between visits\n        interval = (end_date - start_date).days // no_of_visit\n        # Iterate to create the schedule\n        for i in range(no_of_visit):\n            schedule_date = add_days(start_date, interval * i)\n            # Adjust the schedule date to avoid holidays\n            schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n            schedule_list.append(schedule_date)\n    return schedule_list\n\n", "CodeBleu_score": 31.438896868298606}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    interval = round(float(no_of_visit) / float(self.total_no_of_visits))\n    schedule_date = start_date\n\n    for _i in range(int(self.total_no_of_visits)):\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n\n    return schedule_list\n\n", "CodeBleu_score": 27.355250172667557}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    schedule_list = []\n    schedule_date = start_date\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n    if interval == 0:\n        interval = 1\n    for i in range(no_of_visit):\n        schedule_date = self.validate_schedule_date_for_holiday_list(schedule_date, sales_person)\n        schedule_list.append(schedule_date)\n        schedule_date = add_days(schedule_date, interval)\n    return schedule_list\n", "CodeBleu_score": 30.629143135508908}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\tetermine the method to handle the request\n        $method = request()->get('handle', 'edit');\n\n// Construct a URL for bulk actions\n        $handle = $this->actions[$method]['handle']?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n// Render HTML content for a modal using the specified view and data\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n// Return a JSON response with success status, message, data, and the rendered HTML\n        return response()->json([\n           'success' => true,\n            'error' => false,\n           'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 90.36171841322862}, {"code": "<?\n   public function response($view, $data = []){\n\tetermine the method to handle the request\n        $method = request()->get('handle', 'edit');\n\n// Construct a URL for bulk actions\n        $handle = $this->actions[$method]['handle']?? 'update';\n        $url = route('bulk-actions.action', $this->path);\n\n// Render HTML content for a modal using the specified view and data\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n// Return a JSON response with the success status, message, data, and the rendered HTML\n        return response()->json([\n           'success' => true,\n            'error' => false,\n           'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 90.36171841322862}, {"code": "<?\n   public function response($view, $data = []){\n\tet the handle for the current bulk action method\n        $method = request()->get('handle', 'edit');\n        $handle = $this->actions[$method]['handle']?? 'update';\n\n// Construct the URL for bulk actions\n        $url = route('bulk-actions.action', $this->path);\n\n// Render the HTML content for the modal\n        $html = view('components.index.bulkaction.modal', [\n            'url' => $url,\n            'handle' => $handle,\n           'selected' => $data['selected']?? $this->getSelectedInput(request()),\n            'html' => view($view, $data)->render(),\n        ])->render();\n\n// Return the JSON response with the success status, message, data, and HTML content\n        return response()->json([\n           'success' => true,\n            'error' => false,\n           'message' => '',\n            'data' => [\n                'title' => $this->findTranslation($this->text),\n                'path' => $url,\n                'handle' => $handle,\n            ],\n            'html' => $html,\n        ]);\n    }", "CodeBleu_score": 90.18645148649722}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\t\t$contacts = $this->getSelectedRecords($request);\n\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t} catch (\\Exception $e) {\n\t\t\treturn redirect()->back()->withErrors($e->getMessage());\n\t\t}\n\t}\n\n\treturn redirect()->back()->with('message', 'Contacts deleted successfully');\n}", "CodeBleu_score": 55.11204267410652}, {"code": "<?\npublic function deleteContacts($request){\n\t\ttry {\n\t\t$contacts = $this->getSelectedRecords($request);\n\t\tforeach ($contacts as $contact) {\n\t\t\t$contact->delete();\n\t\t}\n\t\treturn redirect()->back()->with('success', 'Contacts deleted successfully!');\n\t} catch (\\Exception $e) {\n\t\treturn redirect()->back()->with('error', 'An error occurred while deleting the contacts: '. $e->getMessage());\n\t}\n}", "CodeBleu_score": 50.76349409615929}, {"code": "<?\npublic function deleteContacts($request){\n\t\t$contacts = $this->getSelectedRecords($request);\n\t$deletedContacts = 0;\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$contact->delete();\n\t\t\t$deletedContacts++;\n\t\t} catch (Exception $e) {\n\t\t\treturn redirect()->back()->with('error', 'There was an error deleting the contact(s).');\n\t\t}\n\t}\n\treturn redirect()->back()->with('success', \"{$deletedContacts} contact(s) were deleted successfully.\");\n}", "CodeBleu_score": 45.13397394665886}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\tdispatch(new DeleteTransaction($transaction));\n\t\t} catch (Exception $e) {\n\t\t\tflash()->error('Error', 'An error occurred while deleting the transaction.');\n\t\t}\n\t}\n}", "CodeBleu_score": 51.540980189398255}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\tdispatch(new DeleteTransaction($transaction));\n\t\t} catch (\\Exception $e) {\n\t\t\tflash($e->getMessage())->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 58.3870069176754}, {"code": "<?\npublic function deleteTransactions($request){\n\t\t$transactions = $this->getSelectedRecords($request);\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (\\Exception $e) {\n\t\t\tflash('An error occurred while deleting the transaction. Please try again.')->error();\n\t\t}\n\t}\n}", "CodeBleu_score": 62.25016273092812}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($this->requestClass)) {\n\t\treturn;\n\t}\n\t$request = app($this->requestClass);\n\tif (!$request instanceof FormRequest) {\n\t\treturn;\n\t}\n\t$data = $this->getData();\n\tforeach ($data as $row) {\n\t\t$request->initialize($row);\n\t\t$rules = $this->prepareRules($request->rules());\n\t\t$validator->after(function ($validator) use ($request, $rules) {\n\t\t\ttry {\n\t\t\t\t$request->validate($rules);\n\t\t\t} catch (ValidationException $e) {\n\t\t\t\t$validator->errors()->merge($e->errors());\n\t\t\t\tthrow $e;\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 36.27914453877872}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($this->request)) {\n\t\treturn;\n\t}\n\n\tif (!is_a($this->request, FormRequest::class, true)) {\n\t\treturn;\n\t}\n\n\t$request = app($this->request);\n\n\tforeach ($this->data as $key => $row) {\n\t\t$request->initialize(\n\t\t\t$row,\n\t\t\t$request->query->all(),\n\t\t\t$request->request->all(),\n\t\t\t$request->attributes->all(),\n\t\t\t$request->cookies->all(),\n\t\t\t$request->files->all(),\n\t\t\t$request->server->all()\n\t\t);\n\n\t\t$rules = $this->prepareRules($request->rules());\n\n\t\ttry {\n\t\t\t$validator->validate($key, $row, $rules);\n\t\t} catch (ValidationException $e) {\n\t\t\t$validator->addFailures($e->validator->errors());\n\t\t\tthrow $e;\n\t\t}\n\t}\n}", "CodeBleu_score": 35.37327374738075}, {"code": "<?\npublic function withValidator($validator){\n\t\tif (!class_exists($requestClass = $this->container->make(static::class))) {\n\t\treturn;\n\t}\n\n\tif (!$requestClass instanceof FormRequest) {\n\t\treturn;\n\t}\n\n\t$request = $this->container->make($requestClass);\n\n\tforeach ($this->data as $key => $value) {\n\t\t$request->initialize([], [$key => $value]);\n\t\t$rules = $request->prepareRules([$key => $value]);\n\n\t\ttry {\n\t\t\t$validator->validate([$key => $value], $rules);\n\t\t} catch (ValidationException $e) {\n\t\t\t$validator->addFailures($e->validator->errors());\n\t\t\tthrow $e;\n\t\t}\n\t}\n}", "CodeBleu_score": 37.78167944006447}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\t$this->model = $this->getModelInstance($arguments[0]);\n\t$this->request = $this->getRequestInstance($arguments[1]);\n}", "CodeBleu_score": 28.731900203540228}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif (count($arguments) < 2) {\n\t\treturn;\n\t}\n\n\t$model = $arguments[0];\n\t$request = $arguments[1];\n\n\tif ($model instanceof Model) {\n\t\t$this->model = $model;\n\t}\n\n\tif ($request instanceof Request) {\n\t\t$this->request = $request;\n\t}\n}", "CodeBleu_score": 50.19651067488504}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\t\tif (!($this->model instanceof ShouldUpdate)) {\n\t\treturn;\n\t}\n\n\tif ($arguments[0] instanceof Model) {\n\t\t$this->model = $arguments[0];\n\t}\n\n\tif ($arguments[1] instanceof Request) {\n\t\t$this->request = $arguments[1];\n\t}\n}", "CodeBleu_score": 53.087111031242905}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\t$search = $request->input('search');\n\t$limit = $request->input('limit')?: 20;\n\n\t$query->orderBy($sort, 'asc');\n\n\tif ($search) {\n\t\t$query->where('name', 'like', \"%$search%\");\n\t}\n\n\tif ($request->expectsJson() &&!$request->wantsJson()) {\n\t\treturn $query->get();\n\t}\n\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 49.92681195477672}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\n\t// Search\n\tif ($request->filled('search')) {\n\t\t$search = $request->input('search');\n\t\t$query->where('name', 'like', \"%$search%\");\n\t}\n\n\t// Sort\n\tif ($request->filled('sort')) {\n\t\t$sort = $request->input('sort');\n\t}\n\t$query->orderBy($sort);\n\n\t// Limit\n\tif ($request->filled('limit')) {\n\t\t$limit = $request->input('limit');\n\t} else {\n\t\t$limit = config('app.pagination_limit');\n\t}\n\n\t// JSON\n\tif ($request->expectsJson() &&!$request->wantsJson()) {\n\t\treturn $query->get();\n\t}\n\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 50.93210090866269}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\t$search = $request->search;\n\t$limit = $request->limit?? 50;\n\t$sort = $request->sort?? $sort;\n\t$dir = $request->dir?? 'asc';\n\t$query = $query->search($search);\n\t$query = $query->orderBy($sort, $dir);\n\tif($request->expectsJson() &&!$request->wantsJson()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 50.239754755337216}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\t$dueDate = null;\n\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'open' => 0,\n\t\t\t'overdue' => 0,\n\t\t];\n\t}\n\n\tif ($model->status == 'partial') {\n\t\t$open = $model->transactions->sum('amount');\n\t\t$overdue = $model->transactions->sum('amount');\n\t}\n\n\tif ($model->due_date) {\n\t\t$dueDate = Carbon::parse($model->due_date);\n\t}\n\n\tif ($dueDate && $dueDate->isPast()) {\n\t\t$overdue = $model->total - $open;\n\t\t$open = 0;\n\t}\n\n\treturn [\n\t\t'open' => $open,\n\t\t'overdue' => $overdue,\n\t];\n}", "CodeBleu_score": 41.193149821790435}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$totals = array('open' => 0, 'overdue' => 0);\n\n\tif ($model->status == 'paid') {\n\t\treturn $totals;\n\t}\n\n\t$payments = $model->getPayments();\n\t$totals['open'] = $model->amount;\n\tforeach ($payments as $payment) {\n\t\t$totals['open'] -= $payment->amount;\n\t}\n\n\tif ($model->due_date < date('Y-m-d')) {\n\t\t$totals['overdue'] = $totals['open'];\n\t}\n\n\treturn $totals;\n}", "CodeBleu_score": 32.07477065333763}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'open' => 0,\n\t\t\t'overdue' => 0\n\t\t];\n\t}\n\n\tforeach ($model->transactions as $transaction) {\n\t\tif ($transaction->status == 'partial') {\n\t\t\t$open += $transaction->amount;\n\t\t}\n\t}\n\n\tif ($model->due_date < date('Y-m-d')) {\n\t\t$overdue = $open;\n\t} else {\n\t\t$open = $open;\n\t}\n\n\treturn [\n\t\t'open' => $open,\n\t\t'overdue' => $overdue\n\t];\n}", "CodeBleu_score": 34.48714620432183}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$perPage = $perPage?: $this->model->getPerPage();\n\t$results = $this->model->forPage($page, $perPage)->get($columns);\n\treturn $this->paginator($results, $perPage, $page, $pageName);\n}", "CodeBleu_score": 46.02006140413473}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->perPage;\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$offset = ($page * $perPage) - $perPage;\n\t$total = $this->toBase()->getCountForPagination();\n\t$results = $total? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\treturn new Paginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 69.26817066686047}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\t$total = $this->toBase()->getCountForPagination();\n\t$results = $total? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\treturn $this->paginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 73.94212171116514}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::where('status', 'pending')\n\t\t->whereIn('id', $request->reconciliations)\n\t\t->get();\n\n\t$reconciliations->each(function($reconciliation) {\n\t\t$reconciliation->status ='reconciled';\n\t\t$reconciliation->save();\n\n\t\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t\t->where('date', '>=', $reconciliation->start_date)\n\t\t\t->where('date', '<=', $reconciliation->end_date)\n\t\t\t->get();\n\n\t\t$transactions->each(function($transaction) {\n\t\t\t$transaction->reconciled = true;\n\t\t\t$transaction->save();\n\t\t});\n\t});\n}", "CodeBleu_score": 35.32867773930821}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = $this->getReconciliations($request);\n\t$this->reconcileReconciliations($reconciliations);\n\t$this->reconcileTransactions($reconciliations);\n}", "CodeBleu_score": 17.00473921405223}, {"code": "<?\npublic function reconcile($request){\n\t\t$reconciliations = Reconciliation::whereIn('id', $request->reconciliation_ids)->get();\n\n\tforeach ($reconciliations as $reconciliation) {\n\t\t$reconciliation->status ='reconciled';\n\t\t$reconciliation->save();\n\n\t\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t\t->whereBetween('date', [$reconciliation->start_date, $reconciliation->end_date])\n\t\t\t->get();\n\n\t\tforeach ($transactions as $transaction) {\n\t\t\t$transaction->reconciled = true;\n\t\t\t$transaction->save();\n\t\t}\n\t}\n}", "CodeBleu_score": 40.02580669811241}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t\t$invitations = $this->user->invitations()->get();\n\t$this->user->invitations()->delete();\n\n\t$invitation = $this->user->invitations()->create([\n\t\t'token' => Str::random(40),\n\t]);\n\n\ttry {\n\t\tdispatch(new SendUserInvitationNotification($invitation));\n\t} catch (\\Exception $e) {\n\t\tthrow new \\Exception('Failed to send user invitation notification');\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 24.65155560456876}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$this->user->invitations()->delete();\n\n\t$invitation = $this->user->invitations()->create([\n\t\t'token' => Str::random(32),\n\t]);\n\n\ttry {\n\t\tNotification::send($this->user, new UserInvitationNotification($invitation));\n\t} catch (\\Exception $e) {\n\t\tthrow new \\Exception(\"Could not dispatch notification for user invitation: {$e->getMessage()}\");\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 22.77879624398387}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$invitation = $this->user->invitations()->first();\n\tif ($invitation) {\n\t\t$invitation->delete();\n\t}\n\t$invitation = $this->user->invitations()->create([\n\t\t'token' => Str::random(64),\n\t]);\n\ttry {\n\t\tdispatch(new NotifyUserInvitation($invitation));\n\t} catch (Exception $e) {\n\t\tthrow new Exception('Failed to dispatch notification job');\n\t}\n\treturn $invitation;\n}", "CodeBleu_score": 25.147024222866822}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\t\tif (this.reconciled) {\n\t\tthrow new Exception(\"Transaction is reconciled\");\n\t}\n\n\tif (this.transfer) {\n\t\tthrow new Exception(\"Unauthorized\");\n\t}\n}", "CodeBleu_score": 13.27910756198496}, {"code": "<?\npublic function authorize(): void{\n\t\tif (this.reconciled) {\n\t\tthrow new Exception(\"Transaction has been reconciled. It cannot be authorized.\");\n\t}\n\tif (this.transfer) {\n\t\tthrow new Exception(\"Transfer transactions cannot be authorized.\");\n\t}\n}", "CodeBleu_score": 15.541183807690583}, {"code": "<?\npublic function authorize(): void{\n\t\tif (this.isReconciled()) {\n\t\tthrow new Exception(\"Transaction has already been reconciled\");\n\t}\n\n\tif (this.isTransfer()) {\n\t\tthrow new Exception(\"Unauthorized\");\n\t}\n}", "CodeBleu_score": 14.813617995810151}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\n\tif (tableName.equals(\"user\") || tableName.equals(\"tenant\") || tableName.equals(\"role\") || tableName.equals(\"user_role\") || tableName.equals(\"user_tenant\")) {\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 15.121074567406867}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId == 0) {\n\t\treturn false;\n\t}\n\tif (tableName.equals(\"table1\") || tableName.equals(\"table2\")) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 9.3345742239732}, {"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId!= 0) {\n\t\treturn tableName.equals(\"table1\") || tableName.equals(\"table2\") || tableName.equals(\"table3\");\n\t}\n\treturn false;\n}", "CodeBleu_score": 10.546152758528594}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.38599822289982}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setSqlSessionFactoryBeanName(\"sqlSessionFactory\");\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 63.20374477183781}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 89.60914056154388}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t// \u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t// \u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 88.00684955475506}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\tString res = null;\n\ttry {\n\t\tList<Account> dataList = accountService.findBySelect();\n\t\t//\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataList) {\n\t\t\tfor (Account account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t//\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tres = dataArray.toJSONString();\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 89.60914056154388}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    Map<String, Object> map = new HashMap<>();\n    List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n    Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n    map.put(\"rows\", list);\n    map.put(\"total\", count);\n    res.code = 200;\n    res.data = map;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.97474181301101}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t// The BaseResponseInfo class is a custom response class that encapsulates the response data, code, and message.\n        BaseResponseInfo res = new BaseResponseInfo();\n        try {\n// The Map data structure is used to store the response data.\n            Map<String, Object> map = new HashMap<>();\n// The listWithBalance method is a custom method that retrieves a paginated list of accounts with their balances based on the provided name and serial number parameters.\n            List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n// The listWithBalanceCount method is a custom method that retrieves the count of accounts based on the provided name and serial number parameters.\n            Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n// The list and count are added to the response data.\n            map.put(\"rows\", list);\n            map.put(\"total\", count);\n// The response code and data are set.\n            res.code = 200;\n            res.data = map;\n        } catch(Exception e){\n// If an exception occurs, the error is logged and the response code and message are set accordingly.\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 96.63668997888338}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n try {\n     Map<String, Object> map = new HashMap<>();\n     List<AccountVo4List> list = accountService.listWithBalance(StringUtil.toNull(name), StringUtil.toNull(serialNo), (currentPage-1)*pageSize, pageSize);\n     Long count = accountService.listWithBalanceCount(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n     map.put(\"rows\", list);\n     map.put(\"total\", count);\n     res.code = 200;\n     res.data = map;\n } catch(Exception e){\n     logger.error(e.getMessage(), e);\n     res.code = 500;\n     res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 97.67282107022605}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.69534125623498}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.69534125623498}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.69534125623498}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo res = new BaseResponseInfo();\n AccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n try {\n List<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n if(list.size()>0) {\n ahl = list.get(0);\n }\n res.code = 200;\n res.data = ahl;\n } catch(Exception e){\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 94.57826146411088}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\tAccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\n\ttry {\n\t\tList<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\n\t\tif(list.size()>0) {\n\t\t\tahl = list.get(0);\n\t\t}\n\t\tres.code = 200;\n\t\tres.data = ahl;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.35401849353183}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\nAccountHeadVo4ListEx ahl = new AccountHeadVo4ListEx();\ntry {\nList<AccountHeadVo4ListEx> list = accountHeadService.getDetailByNumber(billNo);\nif(list.size()>0) {\nahl = list.get(0);\n}\nres.code = 200;\nres.data = ahl;\n} catch(Exception e){\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 93.10196490118327}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tJSONArray arr = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = arr;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 93.09403548262796}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\n    List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n    //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n    JSONObject outer = new JSONObject();\n    outer.put(\"id\", 0);\n    outer.put(\"key\", 0);\n    outer.put(\"value\", 0);\n    outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n    outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    if (null!= dataListFun) {\n        //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n        List<Function> dataList = new ArrayList<>();\n        for (Function fun : dataListFun) {\n            String token = request.getHeader(\"X-Access-Token\");\n            Long tenantId = Tools.getTenantIdByToken(token);\n            if (tenantId!=0L) {\n                if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                    dataList.add(fun);\n                }\n            } else {\n                //\u8d85\u7ba1\n                dataList.add(fun);\n            }\n        }\n        dataArray = getFunctionList(dataList, type, keyId);\n        outer.put(\"children\", dataArray);\n    }\n    arr.add(outer);\n} catch (Exception e) {\n    logger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 95.73246367685468}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\n    List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n    //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n    JSONObject outer = new JSONObject();\n    outer.put(\"id\", 0);\n    outer.put(\"key\", 0);\n    outer.put(\"value\", 0);\n    outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n    outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    if (null!= dataListFun) {\n        //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n        List<Function> dataList = new ArrayList<>();\n        for (Function fun : dataListFun) {\n            String token = request.getHeader(\"X-Access-Token\");\n            Long tenantId = Tools.getTenantIdByToken(token);\n            if (tenantId!=0L) {\n                if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                    dataList.add(fun);\n                }\n            } else {\n                //\u8d85\u7ba1\n                dataList.add(fun);\n            }\n        }\n        dataArray = getFunctionList(dataList, type, keyId);\n        outer.put(\"children\", dataArray);\n    }\n    arr.add(outer);\n} catch (Exception e) {\n    logger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 95.73246367685468}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tONArray arr = new JSONArray();\ntry {\n    List<Function> dataListFun = functionService.findRoleFunction(\"0\");\n    //\u5f00\u59cb\u62fc\u63a5json\u6570\u636e\n    JSONObject outer = new JSONObject();\n    outer.put(\"id\", 0);\n    outer.put(\"key\", 0);\n    outer.put(\"value\", 0);\n    outer.put(\"title\", \"\u529f\u80fd\u5217\u8868\");\n    outer.put(\"attributes\", \"\u529f\u80fd\u5217\u8868\");\n    //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n    JSONArray dataArray = new JSONArray();\n    if (null!= dataListFun) {\n        //\u6839\u636e\u6761\u4ef6\u4ece\u5217\u8868\u91cc\u9762\u79fb\u9664\"\u7cfb\u7edf\u7ba1\u7406\"\n        List<Function> dataList = new ArrayList<>();\n        for (Function fun : dataListFun) {\n            String token = request.getHeader(\"X-Access-Token\");\n            Long tenantId = Tools.getTenantIdByToken(token);\n            if (tenantId!=0L) {\n                if(!(\"\u7cfb\u7edf\u7ba1\u7406\").equals(fun.getName())) {\n                    dataList.add(fun);\n                }\n            } else {\n                //\u8d85\u7ba1\n                dataList.add(fun);\n            }\n        }\n        dataArray = getFunctionList(dataList, type, keyId);\n        outer.put(\"children\", dataArray);\n    }\n    arr.add(outer);\n} catch (Exception e) {\n    logger.error(e.getMessage(), e);\n}\nreturn arr;\n}", "CodeBleu_score": 95.73246367685468}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n    PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n    res.code = 200;\n    res.data = platformConfig;\n} catch(Exception e){\n    logger.error(e.getMessage(), e);\n    res.code = 500;\n    res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 96.42693528602554}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tres.code = 200;\n\t\tres.data = platformConfig;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 94.00192888523921}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tres.code = 200;\n\t\tres.data = platformConfig;\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 94.00192888523921}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfiguration> systemConfigurationList = systemConfigurationService.getSystemConfigurationList();\n\t\tif (systemConfigurationList!= null && systemConfigurationList.size() > 0) {\n\t\t\tresponse.setResponseCode(200);\n\t\t\tresponse.setResponseData(systemConfigurationList.get(0));\n\t\t} else {\n\t\t\tresponse.setResponseCode(404);\n\t\t\tresponse.setResponseData(\"No system configuration found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"Error retrieving system configuration\", e);\n\t\tresponse.setResponseCode(500);\n\t\tresponse.setResponseData(\"Error retrieving system configuration\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 29.901319091330556}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setMessage(\"No system configuration found\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"Exception occurred while retrieving system configuration\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(\"Exception occurred while retrieving system configuration\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.307202508273335}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tSystemConfigurationInfo systemConfigurationInfo = systemConfigurationService.getCurrentInfo();\n\t\tresponse.setCode(200);\n\t\tresponse.setData(systemConfigurationInfo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error getting current system configuration information.\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setData(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 31.97237237931797}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile multipartFile = multipartRequest.getFile(\"file\");\n\t\tString fileName = multipartFile.getOriginalFilename();\n\t\tString suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n\t\tString newFileName = UUID.randomUUID().toString() + suffix;\n\t\tif (StringUtils.isEmpty(businessPath)) {\n\t\t\tresponseInfo.setCode(ResponseCode.PARAMETER_ERROR);\n\t\t\tresponseInfo.setMessage(\"businessPath is null\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\tString uploadType = request.getParameter(\"uploadType\");\n\t\tif (StringUtils.isEmpty(uploadType)) {\n\t\t\tresponseInfo.setCode(ResponseCode.PARAMETER_ERROR);\n\t\t\tresponseInfo.setMessage(\"uploadType is null\");\n\t\t\treturn responseInfo;\n\t\t}\n\t\tif (UploadType.LOCAL.getValue().equals(uploadType)) {\n\t\t\tString path = businessPath + File.separator + newFileName;\n\t\t\tFile file = new File(path);\n\t\t\tFile parentFile = file.getParentFile();\n\t\t\tif (!parentFile.exists()) {\n\t\t\t\tparentFile.mkdirs();\n\t\t\t}\n\t\t\tmultipartFile.transferTo(file);\n\t\t\tresponseInfo.setCode(ResponseCode.SUCCESS);\n\t\t\tresponseInfo.setMessage(\"upload success\");\n\t\t\tresponseInfo.setData(newFileName);\n\t\t} else if (UploadType.ALI_OSS.getValue().equals(uploadType)) {\n\t\t\tString path = businessPath + File.separator + newFileName;\n\t\t\tAliOssUtil.putObject(path, multipartFile.getInputStream());\n\t\t\tresponseInfo.setCode(ResponseCode.SUCCESS);\n\t\t\tresponseInfo.setMessage(\"upload success\");\n\t\t\tresponseInfo.setData(newFileName);\n\t\t} else {\n\t\t\tresponseInfo.setCode(ResponseCode.PARAMETER_ERROR);\n\t\t\tresponseInfo.setMessage(\"uploadType is wrong\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlog.error(\"upload error\", e);\n\t\tresponseInfo.setCode(ResponseCode.SYSTEM_ERROR);\n\t\tresponseInfo.setMessage(\"upload error\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 33.49147390201461}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo respInfo = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n\t\tif (file == null) {\n\t\t\trespInfo.setCode(ResponseCode.ERROR);\n\t\t\trespInfo.setMsg(\"\u6587\u4ef6\u4e3a\u7a7a\");\n\t\t\treturn respInfo;\n\t\t}\n\t\tString fileName = file.getOriginalFilename();\n\t\tString suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n\t\tString newFileName = UUID.randomUUID().toString().replace(\"-\", \"\") + suffix;\n\t\tString filePath = businessPath + newFileName;\n\t\tif (uploadType.equals(\"local\")) {\n\t\t\tString uploadPath = uploadPath + businessPath;\n\t\t\tFile dir = new File(uploadPath);\n\t\t\tif (!dir.exists()) {\n\t\t\t\tdir.mkdirs();\n\t\t\t}\n\t\t\tFile targetFile = new File(uploadPath, newFileName);\n\t\t\tfile.transferTo(targetFile);\n\t\t} else if (uploadType.equals(\"oss\")) {\n\t\t\tString endpoint = ossEndpoint;\n\t\t\tString accessKeyId = ossAccessKeyId;\n\t\t\tString accessKeySecret = ossAccessKeySecret;\n\t\t\tString bucketName = ossBucketName;\n\t\t\tString objectName = filePath;\n\t\t\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\t\t\tossClient.putObject(bucketName, objectName, new ByteArrayInputStream(file.getBytes()));\n\t\t\tossClient.shutdown();\n\t\t}\n\t\trespInfo.setCode(ResponseCode.SUCCESS);\n\t\trespInfo.setMsg(\"\u4e0a\u4f20\u6210\u529f\");\n\t\trespInfo.setData(filePath);\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u6587\u4ef6\u4e0a\u4f20\u5f02\u5e38\", e);\n\t\trespInfo.setCode(ResponseCode.ERROR);\n\t\trespInfo.setMsg(\"\u4e0a\u4f20\u5931\u8d25\");\n\t}\n\treturn respInfo;\n}", "CodeBleu_score": 33.13404805968212}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo responseInfo = new BaseResponseInfo();\n\ttry {\n\t\t// Get the business path from the request\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\t// Get the uploaded file from the request\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile multipartFile = multipartRequest.getFile(\"file\");\n\t\t// Get the file upload type from the request\n\t\tString uploadType = request.getParameter(\"uploadType\");\n\t\t// Handle file upload based on the type\n\t\tif (\"local\".equals(uploadType)) {\n\t\t\t// Upload file locally\n\t\t\tString filePath = localFileUploadService.upload(multipartFile, businessPath);\n\t\t\t// Set the response code and data\n\t\t\tresponseInfo.setCode(0);\n\t\t\tresponseInfo.setData(filePath);\n\t\t} else if (\"oss\".equals(uploadType)) {\n\t\t\t// Upload file to AliOss\n\t\t\tString ossUrl = aliOssFileUploadService.upload(multipartFile, businessPath);\n\t\t\t// Set the response code and data\n\t\t\tresponseInfo.setCode(0);\n\t\t\tresponseInfo.setData(ossUrl);\n\t\t} else {\n\t\t\t// Set the response code and data\n\t\t\tresponseInfo.setCode(1);\n\t\t\tresponseInfo.setData(\"Invalid upload type\");\n\t\t}\n\t} catch (Exception e) {\n\t\t// Log any exceptions\n\t\tlog.error(\"Error uploading file\", e);\n\t\t// Set the response code and data\n\t\tresponseInfo.setCode(1);\n\t\tresponseInfo.setData(\"Error uploading file\");\n\t}\n\treturn responseInfo;\n}", "CodeBleu_score": 35.99974742128745}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t", "CodeBleu_score": 4.729595274043694}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n     String title = jsonObject.getString(\"title\");\n     String head = jsonObject.getString(\"head\");\n     String tip = jsonObject.getString(\"tip\");\n     JSONArray arr = jsonObject.getJSONArray(\"list\");\n     systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n } catch (Exception e) {\n     logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 97.57780111726153}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\ttry {\n    String title = jsonObject.getString(\"title\");\n    String head = jsonObject.getString(\"head\");\n    String tip = jsonObject.getString(\"tip\");\n    JSONArray arr = jsonObject.getJSONArray(\"list\");\n    systemConfigService.exportExcelByParam(title, head, tip, arr, response);\n} catch (Exception e) {\n    logger.error(e.getMessage(), e);\n}\n}", "CodeBleu_score": 96.87016267702839}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setAccountName(obj.getString(\"accountName\"));\n\t\taccount.setAccountSerialNo(obj.getString(\"accountSerialNo\"));\n\t\taccount.setAccountType(obj.getString(\"accountType\"));\n\t\taccount.setAccountStatus(obj.getString(\"accountStatus\"));\n\t\taccount.setAccountRemark(obj.getString(\"accountRemark\"));\n\t\taccount.setAccountCreateTime(obj.getString(\"accountCreateTime\"));\n\t\taccount.setAccountUpdateTime(obj.getString(\"accountUpdateTime\"));\n\t\taccount.setAccountCreateUser(obj.getString(\"accountCreateUser\"));\n\t\taccount.setAccountUpdateUser(obj.getString(\"accountUpdateUser\"));\n\t\taccount.setAccountBalance(obj.getDouble(\"accountBalance\"));\n\t\taccount.setAccountIsDefault(obj.getString(\"accountIsDefault\"));\n\t\taccount.setAccountIsEnable(obj.getString(\"accountIsEnable\"));\n\t\taccount.setAccountIsDelete(obj.getString(\"accountIsDelete\"));\n\t\taccount.setAccountDeleteTime(obj.getString(\"accountDeleteTime\"));\n\t\taccount.setAccountDeleteUser(obj.getString(\"accountDeleteUser\"));\n\t\tresult = accountMapper.insert(account);\n\t\tlogger.info(\"Insert account successfully, the account id is \" + account.getId());\n\t\tJshLog.log(request, \"Insert account successfully, the account id is \" + account.getId());\n\t} catch (Exception e) {\n\t\tJshException.insertFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 31.851170767088238}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t", "CodeBleu_score": 3.3888212609146513}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account=new Account();\n\taccount.setCreateTime(new Date());\n\taccount.setUpdateTime(new Date());\n\taccount.setVersion(0);\n\taccount.setAmount(obj.getDouble(\"amount\"));\n\taccount.setName(obj.getString(\"name\"));\n\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\taccount.setUserId(obj.getLong(\"userId\"));\n\taccount.setEnable(1);\n\taccount.setEnableTime(new Date());\n\taccount.setDisableTime(null);\n\taccount.setRemark(obj.getString(\"remark\"));\n\tint result=0;\n\ttry{\n\t\tresult=accountMapper.insert(account);\n\t\tif(result==1){\n\t\t\t//log\n\t\t\tJshLog log=new JshLog();\n\t\t\tlog.setCreateTime(new Date());\n\t\t\tlog.setUpdateTime(new Date());\n\t\t\tlog.setVersion(0);\n\t\t\tlog.setAccount(account.getName());\n\t\t\tlog.setIp(request.getRemoteAddr());\n\t\t\tlog.setOperation(\"insertAccount\");\n\t\t\tlog.setResult(result);\n\t\t\tlog.setUserId(account.getUserId());\n\t\t\tlog.setUserName(account.getName());\n\t\t\tlog.setRemark(obj.toJSONString());\n\t\t\tjshLogService.insert(log);\n\t\t}\n\t}catch(Exception e){\n\t\tJshException.insertFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 36.36221473105944}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error in listWithBalanceCount\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 26.30127738361744}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn accountMapper.listWithBalanceCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tLOGGER.error(e.getMessage());\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 24.876880575600225}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\ttry {\n\t\treturn listWithBalanceCountMapper(name, serialNo);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error listing account count with balance\", e);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 24.990934245999995}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(e.getMessage(), e);\n\t\tthrow new Exception(\"\u5220\u9664\u4ed3\u5e93\u7269\u54c1\u5931\u8d25\");\n\t}\n\treturn result;\n}", "CodeBleu_score": 56.01222973264128}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\tDepotItem depotItem = depotItemMapper.selectByPrimaryKey(id);\n\t\tif (depotItem == null) {\n\t\t\tthrow new Exception(\"DepotItem not found with id: \" + id);\n\t\t}\n\t\tdepotItemMapper.deleteByPrimaryKey(id);\n\t\treturn 1;\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error deleting DepotItem with id: \" + id, e);\n\t\tthrow e;\n\t}\n}", "CodeBleu_score": 31.713199303884082}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\ttry {\n\t\treturn depotItemMapper.deleteDepotItem(id);\n\t} catch (Exception e) {\n\t\tlog.error(\"Error deleting depot item\", e);\n\t\tthrow e;\n\t}\n}", "CodeBleu_score": 24.95298029232894}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClientBuilder.create().build();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tString response = EntityUtils.toString(httpResponse.getEntity());\n\t\tif (response.contains(nodeKey)) {\n\t\t\treturn true;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 45.23552460192093}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + withProjectName(projectName) + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode() == 200) {\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity!= null) {\n\t\t\t\tString response = EntityUtils.toString(entity);\n\t\t\t\tif (response.contains(\"key\")) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.23607277402217}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tURIBuilder uriBuilder = new URIBuilder();\n\t\turiBuilder.setScheme(protocol).setHost(host).setPort(port)\n\t\t\t\t.setPath(withProjectName(projectName) + nodeType + \"/\" + nodeKey);\n\t\tURI uri = uriBuilder.build();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tint statusCode = httpResponse.getStatusLine().getStatusCode();\n\t\tif (statusCode == 200) {\n\t\t\tString responseBody = EntityUtils.toString(httpResponse.getEntity());\n\t\t\tJSONObject responseObject = new JSONObject(responseBody);\n\t\t\tString responseKey = responseObject.getString(\"key\");\n\t\t\tif (responseKey!= null &&!responseKey.isEmpty()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.85804601684424}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tURIBuilder builder = new URIBuilder();\n\t\tbuilder.setScheme(protocol).setHost(host).setPort(port).setPath(withProjectName(projectName) + \"addEdge\");\n\t\tbuilder.setParameter(\"edgeType\", edgeType).setParameter(\"fromType\", fromType).setParameter(\"toType\", toType).setParameter(\"from\", from).setParameter(\"to\", to);\n\t\tURI uri = builder.build();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\tJSONObject response = new JSONObject(responseString);\n\t\tif (response.has(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 51.2074092274073}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tURIBuilder uriBuilder = new URIBuilder();\n\t\turiBuilder.setScheme(protocol).setHost(host).setPort(port)\n\t\t\t\t.setPath(withProjectName(projectName) + \"addEdge\")\n\t\t\t\t.setParameter(\"edgeType\", edgeType)\n\t\t\t\t.setParameter(\"fromType\", fromType)\n\t\t\t\t.setParameter(\"toType\", toType)\n\t\t\t\t.setParameter(\"from\", from)\n\t\t\t\t.setParameter(\"to\", to);\n\t\tURI uri = uriBuilder.build();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode()!= 200) {\n\t\t\tSystem.out.println(\"Failed to add edge\");\n\t\t\treturn false;\n\t\t}\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, \"UTF-8\");\n\t\tJSONObject response = new JSONObject(responseString);\n\t\tif (response.has(\"key\")) {\n\t\t\tSystem.out.println(\"Edge added successfully\");\n\t\t\treturn true;\n\t\t} else {\n\t\t\tSystem.out.println(\"Failed to add edge\");\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 47.50040386499328}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tloseableHttpClient httpClient = null;\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\thttpClient = HttpClients.createDefault();\n\t\tURIBuilder builder = new URIBuilder();\n\t\tbuilder.setScheme(getProtocol()).setHost(getHost()).setPort(getPort())\n\t\t\t\t.setPath(withProjectName(projectName) + \"addEdge\")\n\t\t\t\t.setParameter(\"edgeType\", edgeType).setParameter(\"fromType\", fromType)\n\t\t\t\t.setParameter(\"toType\", toType).setParameter(\"from\", from)\n\t\t\t\t.setParameter(\"to\", to);\n\t\tURI uri = builder.build();\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\thttpResponse = httpClient.execute(httpGet);\n\t\tif (httpResponse.getStatusLine().getStatusCode()!= 200) {\n\t\t\treturn false;\n\t\t}\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tInputStream instream = entity.getContent();\n\t\t\tString result = IOUtils.toString(instream, \"UTF-8\");\n\t\t\tinstream.close();\n\t\t\tif (result.contains(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n\treturn false;\n}", "CodeBleu_score": 48.82302938060326}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setTime(System.currentTimeMillis());\n\t\tString json = gson.toJson(event);\n\t\tProducerRecord<String, String> record = new ProducerRecord<>(topic, json);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}\n}", "CodeBleu_score": 27.436389657896328}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null) {\n\t\treturn;\n\t}\n\tif (event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(acquireTestingLocation());\n\t}\n\tevent.setEventTime(System.currentTimeMillis());\n\tString jsonString = event.toJSONString();\n\tif (jsonString == null) {\n\t\treturn;\n\t}\n\tString topic = (event.getTarget() == null)? \"test\" : event.getTarget();\n\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 49.42389102724384}, {"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(acquireTestingLocation());\n\t\t}\n\t\tevent.setEventTime(new Date());\n\t\tString json = event.toJson();\n\t\tif (json!= null) {\n\t\t\tString topic = event.getTarget()!= null? event.getTarget() : \"test\";\n\t\t\tProducerRecord<String, String> record = new ProducerRecord<String, String>(topic, json);\n\t\t\tproducer.send(record);\n\t\t\tproducer.flush();\n\t\t}\n\t}\n}", "CodeBleu_score": 38.98594564202755}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\tOSSClient ossClient = null;\n\ttry {\n\t\tossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\t\tossClient.putObject(config.getBucket(), objName, new ByteArrayInputStream(content));\n\t\treturn ossClient.generatePresignedUrl(config.getBucket(), objName, new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 7)).toString();\n\t} catch (OSSException oe) {\n\t\tSystem.out.println(\"Caught an OSSException, which means your request made it to OSS, \"\n\t\t\t\t+ \"but was rejected with an error response for some reason.\");\n\t\tSystem.out.println(\"Error Message: \" + oe.getErrorCode());\n\t\tSystem.out.println(\"Error Code:       \" + oe.getErrorCode());\n\t\tSystem.out.println(\"Request ID:      \" + oe.getRequestId());\n\t\tSystem.out.println(\"Host ID:           \" + oe.getHostId());\n\t} catch (ClientException ce) {\n\t\tSystem.out.println(\"Caught an ClientException, which means the client encountered \"\n\t\t\t\t+ \"a serious internal problem while trying to communicate with OSS, \"\n\t\t\t\t+ \"such as not being able to access the network.\");\n\t\tSystem.out.println(\"Error Message: \" + ce.getMessage());\n\t} catch (Exception e) {\n\t\tSystem.out.println(\"Caught an Exception, which means your request made it to OSS, \"\n\t\t\t\t+ \"but was rejected with an error response for some reason.\");\n\t\tSystem.out.println(\"Error Message: \" + e.getMessage());\n\t} finally {\n\t\tif (ossClient!= null) {\n\t\t\tossClient.shutdown();\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 36.118911253954764}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Initialize the OSS client with access credentials.\n\tOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n\t// Upload the file content as an object with the specified name.\n\tossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSS client.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + config.getBucketName() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 37.45759151378263}, {"code": "public String upload(String objName, byte[] content){\n\t// Initialize the OSS client with access credentials.\nOSSClient ossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n// Upload the file content as an object with the specified name.\nossClient.putObject(config.getBucketName(), objName, new ByteArrayInputStream(content));\n// Shut down the OSS client.\nossClient.shutdown();\n// Return the URL of the uploaded object.\nreturn config.getEndpoint() + \"/\" + config.getBucketName() + \"/\" + objName;\n}", "CodeBleu_score": 34.59196541479448}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tsureIpToLocationWorker();\n\tIpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 28.02114921302912}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tureIpToLocationWorker();\nIpToLocationWorker worker = getIpToLocationWorker();\nif (worker == null) {\nreturn new LocationInfo(ipAddress, \"unknown\", \"unknown\");\n}\nreturn worker.ipToLocation(ipAddress);\n}", "CodeBleu_score": 27.935958218470653}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 25.682262785839637}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.lowLevelClient!= null && this.restHighLevelClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this.lock) {\n\t\tif (this.lowLevelClient!= null && this.restHighLevelClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(getClusterHostList(), getClusterHostPort());\n\t\tthis.lowLevelClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\tthis.restHighLevelClient = new RestHighLevelClient(this.lowLevelClient);\n\t}\n}", "CodeBleu_score": 59.08357984924157}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient == null || restHighLevelClient == null) {\n\t\tsynchronized (this) {\n\t\t\tif (lowLevelRestClient == null || restHighLevelClient == null) {\n\t\t\t\tList<HttpHost> hosts = parseHosts(clusterHostList, clusterHostPort);\n\t\t\t\tlowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\t\t\trestHighLevelClient = new RestHighLevelClient(lowLevelRestClient);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 60.71228045252969}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (this.lowLevelRestClient!= null && this.restHighLevelClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (this.lowLevelRestClient!= null && this.restHighLevelClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tList<HttpHost> hosts = parseHosts(this.clusterHostList, this.clusterHostPort);\n\t\tthis.lowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\tthis.restHighLevelClient = new RestHighLevelClient(this.lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 56.72464907763629}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0];\n\t\tint port = hostParts.length > 1? Integer.parseInt(hostParts[1]) : clusterPort;\n\t\thosts.add(new HttpHost(hostName, port));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 42.55080362016007}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tif (host.contains(\":\")) {\n\t\t\tString[] hostParts = host.split(\":\");\n\t\t\tString hostName = hostParts[0];\n\t\t\tint port = Integer.parseInt(hostParts[1]);\n\t\t\thosts.add(new HttpHost(hostName, port));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 45.722036010964345}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostParts = host.split(\":\");\n\t\tString hostName = hostParts[0];\n\t\tint port = clusterPort;\n\t\tif (hostParts.length > 1) {\n\t\t\tport = Integer.parseInt(hostParts[1]);\n\t\t}\n\t\thosts.add(new HttpHost(hostName, port, \"http\"));\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 40.48224621903213}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\ttry {\n\t\t\t// poll for tasks with a 30-second timeout\n\t\t\tTask task = this.getTaskQueue().poll(30, TimeUnit.SECONDS);\n\t\t\tif (task!= null) {\n\t\t\t\tif (task.getType() == TaskType.PLAIN_TEXT_MESSAGE) {\n\t\t\t\t\t// extract the recipient number and message data from the task\n\t\t\t\t\tString toNumber = task.getToNumber();\n\t\t\t\t\tString message = task.getMessage();\n\t\t\t\t\t// validate the data\n\t\t\t\t\tif (toNumber == null || message == null) {\n\t\t\t\t\t\tthrow new IllegalArgumentException(\"Missing toNumber or message\");\n\t\t\t\t\t}\n\t\t\t\t\t// send the message\n\t\t\t\t\tthis.sendPlainTextMessage(toNumber, message);\n\t\t\t\t} else {\n\t\t\t\t\t// log an error message\n\t\t\t\t\tSystem.err.println(\"Unknown task type: \" + task.getType());\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\t// log an error message\n\t\t\tSystem.err.println(\"Error processing task: \" + e.getMessage());\n\t\t}\n\t}\n}", "CodeBleu_score": 27.37606413951445}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\tMessage message = this.messageQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (message!= null) {\n\t\t\tif (message.getType() == Message.PLAIN_TEXT_MESSAGE) {\n\t\t\t\tString toNumber = message.getToNumber();\n\t\t\t\tString messageData = message.getMessageData();\n\t\t\t\ttry {\n\t\t\t\t\tvalidateMessageData(messageData);\n\t\t\t\t\tsendPlainTextMessage(toNumber, messageData);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tSystem.err.println(\"Error sending message: \" + e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 24.430099837684736}, {"code": "protected void pollingWork() throws InterruptedException{\n\twhile (true) {\n\t\t// Retrieve a task from the queue.\n\t\tTask task = this.taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task!= null) {\n\t\t\t// Process the task.\n\t\t\ttry {\n\t\t\t\tif (task instanceof PlainTextMessageTask) {\n\t\t\t\t\tPlainTextMessageTask plainTextMessageTask = (PlainTextMessageTask) task;\n\t\t\t\t\tString toNumber = plainTextMessageTask.getToNumber();\n\t\t\t\t\tString message = plainTextMessageTask.getMessage();\n\t\t\t\t\tsendPlainTextMessage(toNumber, message);\n\t\t\t\t} else {\n\t\t\t\t\tlogger.error(\"Unknown task type: \" + task.getClass());\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\"Error processing task: \" + task, e);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 26.143534181245677}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpGet = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\tlog.info(\"Response content: \" + content);\n\treturn content;\n}", "CodeBleu_score": 68.49136740552919}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t// Create a new HTTP client\n\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\n\t// Create a new HTTP GET request\n\tHttpGet httpget = new HttpGet(uri);\n\n\t// Execute the request and get the response\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\n\t// Get the response entity\n\tHttpEntity entity = response.getEntity();\n\n\t// Convert the response entity to a UTF-8 encoded string\n\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\n\t// Log the content\n\tSystem.out.println(\"Response content: \" + content);\n\n\t// Close the response and the HTTP client\n\tEntityUtils.consume(entity);\n\tresponse.close();\n\thttpclient.close();\n\n\t// Return the content\n\treturn content;\n}", "CodeBleu_score": 61.431053682946455}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\ttry (CloseableHttpClient httpclient = getHttpClient()) {\n\t\tHttpGet httpGet = new HttpGet(uri);\n\t\tCloseableHttpResponse response = httpclient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString content = EntityUtils.toString(entity, \"UTF-8\");\n\t\tlogger.info(content);\n\t\treturn content;\n\t}\n}", "CodeBleu_score": 55.19496110114894}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilder builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode rootNode = document.getFirstChild();\n\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put((String) rootValue[0], rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 60.26531363105363}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\tNode root = document.getDocumentElement();\n\tObject[] rootValue = decodeNodeToMap(root, doTrim);\n\tif (rootValue == null || rootValue.length < 2){\n\t\treturn null;\n\t}\n\tMap<String, Object> result = new HashMap<String, Object>();\n\tresult.put((String)rootValue[0], rootValue[1]);\n\treturn result;\n}", "CodeBleu_score": 66.29587599220892}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t/\t\tSystem.out.println(\"Now read messageXmlStr \" + messageXmlStr);\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n\t\tDocument document = builder.parse(new InputSource(new StringReader(messageXmlStr)));\n\t\tNode rootNode = document.getFirstChild();\n\t\tObject[] rootValue = decodeNodeToMap(rootNode, doTrim);\n\t\tif (rootValue == null || rootValue.length < 2){\n\t\t\treturn null;\n\t\t}\n\t\tMap<String, Object> result = new HashMap<String, Object>();\n\t\tresult.put((String) rootValue[0], rootValue[1]);\n\t\treturn result;\n\t}", "CodeBleu_score": 65.92749332722788}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing) {\n\t\tlog.info(\n\t\t\t\"Order is eligible for auto-processing. Enqueueing order for automatic shipping and invoicing using transaction name.\");\n\t\tenqueueOrderForAutoProcessing(orderRecord);\n\t} else {\n\t\tlog.info(\"Order is not eligible for auto-processing. Scheduling the creation of missing shipment schedules if they are not postponed.\");\n\t\tscheduleShipmentSchedulesCreation(orderRecord);\n\t}\n}", "CodeBleu_score": 23.307045612872567}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing)\n\t{\n\t\tlog.info(\"Order #\" + orderRecord.getDocumentNo() + \" is eligible for auto-processing. Enqueuing order for automatic shipping and invoicing using the transaction name.\");\n\t\tenqueueOrderForAutoShippingAndInvoicing(orderRecord);\n\t}\n\telse\n\t{\n\t\tlog.info(\"Order #\" + orderRecord.getDocumentNo() + \" is not eligible for auto-processing. Scheduling the creation of missing shipment schedules if they are not postponed.\");\n\t\tscheduleGenerateSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 25.688528623606466}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\tfinal boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n\n\tif (isEligibleForAutoProcessing) {\n\t\tlog.info(\"Order is eligible for auto-processing: \" + orderRecord);\n\t\tenqueueAutoShipAndInvoice(orderRecord);\n\t} else {\n\t\tlog.info(\"Order is not eligible for auto-processing: \" + orderRecord);\n\t\tenqueueGenerateSchedules(orderRecord);\n\t}\n}", "CodeBleu_score": 22.487103640333714}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tuser = $this->provider->retrieveByCredentials($request->only('email'));\n\n\tif ($user &&! Hash::check($request->password, $user->getAuthPassword())) {\n\t\t$this->fireFailedEvent($request, $user);\n\n\t\treturn null;\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 23.985425008229765}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\t", "CodeBleu_score": 7.08955223880597}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementLoginAttempts($request);\n\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 65.1912759393993}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t$this->incrementLoginAttempts($request);\n\nthrow new ValidationException($request, [\n$this->username() => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 62.02174904476354}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t\t$this->incrementLoginAttempts($request);\n\tthrow ValidationException::withMessages([\n\t\t$this->username() => [trans('auth.failed')],\n\t]);\n}", "CodeBleu_score": 65.1912759393993}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t\t$user = Auth::user();\n\tif ($user) {\n\t\t$publicKey = PublicKey::where('user_id', $user->id)->first();\n\t\t$responseData = [\n\t\t\t'enabled' => $user->two_factor_auth_enabled,\n\t\t\t'remember' => $request->session()->get('remember'),\n\t\t\t'publicKey' => $publicKey\n\t\t];\n\t\treturn view('TwoFactorChallenge', $responseData);\n\t}\n}", "CodeBleu_score": 36.76980921696806}, {"code": "<?\npublic function toResponse($request){\n\t\t$user_id = session()->get('user_id');\n\t$user = User::find($user_id);\n\tif ($user) {\n\t\t$publicKey = $user->publicKey;\n\t\t$data = [\n\t\t\t'enabled' => $user->two_factor_enabled,\n\t\t\t'remember' => $request->remember\n\t\t];\n\t\treturn view('TwoFactorChallenge', [\n\t\t\t'publicKey' => $publicKey,\n\t\t\t'data' => $data\n\t\t]);\n\t}\n}", "CodeBleu_score": 37.1150086518114}, {"code": "<?\npublic function toResponse($request){\n\t\t$userId = session('userId');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$webAuthn = new WebAuthn();\n\t\t$publicKey = $webAuthn->getPublicKey($user);\n\n\t\t$data = [\n\t\t\t'enabled' => $user->two_factor_enabled,\n\t\t\t'remember' => session('remember')\n\t\t];\n\n\t\treturn view('TwoFactorChallenge', [\n\t\t\t'publicKey' => $publicKey,\n\t\t\t'data' => $data\n\t\t]);\n\t} else {\n\t\treturn redirect('/');\n\t}\n}", "CodeBleu_score": 37.75629678419171}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = $this->getUserToken($driver, $socialite->getId());\n\n\tif ($userToken) {\n\t\t$user = $userToken->user;\n\n\t\t$this->checkUserAssociation($request, $user, $driver);\n\n\t\treturn $user;\n\t}\n\n\treturn $this->createUserToken($this->getUserOrCreate($socialite), $driver, $socialite)->user;\n}", "CodeBleu_score": 43.113608710483525}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\tif ($token = $this->findToken($driver, $socialite)) {\n\t\t$user = $token->user;\n\t\t$this->checkUserAssociation($request, $user, $driver);\n\t} else {\n\t\t$user = $this->getUserOrCreate($socialite);\n\t\t$this->createUserToken($user, $driver, $socialite);\n\t}\n\n\treturn $user;\n}", "CodeBleu_score": 43.72999237100923}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$userToken = UserToken::where('driver', $driver)\n\t\t->where('driver_id', $socialite->getId())\n\t\t->first();\n\n\tif ($userToken) {\n\t\t$user = $userToken->user;\n\t\t$this->checkUserAssociation($request, $user, $driver);\n\t\treturn $user;\n\t}\n\n\t$user = $this->getUserOrCreate($socialite);\n\t$userToken = $this->createUserToken($user, $driver, $socialite);\n\n\treturn $user;\n}", "CodeBleu_score": 52.54927780370744}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t", "CodeBleu_score": 8.482142857142858}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tRetrieve the user from the request\n\t$user = $this->retrieveUser($request);\n\n\tif (! $user) {\n\t\treturn false;\n\t}\n\n\t// Validate the assertion using the filtered credentials from the request\n\tif (! $this->validateCredentials($request, $user)) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\t$this->throwFailedAuthenticationException($request);\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 48.95008661071799}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t(! $user = $this->retrieveUser($request)) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->filterCredentials($request);\n\n\tif (! $this->webauthn->validate($user, $credentials)) {\n\t\t$this->fireFailedEvent($request, $user);\n\t\t$this->throwFailedAuthenticationException($request);\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 51.16753326578356}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\tif (!isset($this->email)) {\n\t\t$this->logger->error(\"No email provided\");\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn $this->userRepository->findOneByEmail($this->email);\n\t} catch (Exception $e) {\n\t\t$this->logger->error(\"Error retrieving user: \". $e->getMessage());\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 24.638419311833058}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->email)) {\n\t\t$this->log->error('No email provided to find user');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\t$user = User::where('email', $this->email)->first();\n\t\treturn $user;\n\t} catch (Exception $e) {\n\t\t$this->log->error('Error finding user', ['error' => $e->getMessage()]);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 51.337103464356495}, {"code": "<?\nprivate function user(): ?User{\n\tif (empty($this->email)) {\n\t\t$this->log->error('Email is required to retrieve a user.');\n\t\treturn null;\n\t}\n\n\ttry {\n\t\treturn $this->userRepository->findByEmail($this->email);\n\t} catch (Exception $e) {\n\t\t$this->log->error('Failed to retrieve a user by email.', [\n\t\t\t'email' => $this->email,\n\t\t\t'exception' => $e,\n\t\t]);\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 30.480004814431517}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') && config('scout.flush')) {\n\t\t$indexes = collect(config('scout.meilisearch.indexes'));\n\t\t$indexes->each(function ($settings, $indexName) {\n\t\t\t$tableName = $settings['prefix']. $indexName;\n\t\t\t$this->artisan('scout:flush', ['model' => $tableName]);\n\t\t});\n\t\t$this->info('Scout indexes flushed.');\n\t}\n}", "CodeBleu_score": 44.63248654700757}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') ==='meilisearch') {\n\t\tforeach (config('scout.meilisearch.indexes') as $index) {\n\t\t\t$tableName = $index['table_name']?? $index['prefix'].'searchable';\n\t\t\t$this->artisan('scout:flush', [\n\t\t\t\t'model' => $tableName,\n\t\t\t]);\n\t\t}\n\t\t$this->info('Indexes flushed');\n\t}\n}", "CodeBleu_score": 48.250958089418575}, {"code": "<?\nprotected function scoutFlush(): void{\n\tif (config('scout.driver') ==='meilisearch' && config('scout.flush')) {\n\t\t$indexes = config('scout.meilisearch.indexes');\n\t\tforeach ($indexes as $index) {\n\t\t\t$tableName = $index['prefix']. Str::snake(class_basename($index['model']));\n\t\t\t$this->artisan(\n\t\t\t\t'Flushing index for '. $index['model'],\n\t\t\t\t'scout:flush',\n\t\t\t\t['model' => $index['model'], '--index' => $tableName]\n\t\t\t);\n\t\t}\n\t\t$this->info('Indexes flushed!');\n\t}\n}", "CodeBleu_score": 39.54584965190391}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\ttry {\n\t\t$vcard = $this->read($resource);\n\t\tif (!$vcard->hasUid()) {\n\t\t\t$vcard->setUid(Uuid::uuid4());\n\t\t}\n\t} catch (VCardException) {\n\t\t$vcard = new VCard();\n\t\t$vcard->setVersion('4.0');\n\t\t$vcard->setFormattedName($resource->getFormattedName());\n\t\t$vcard->setUid(Uuid::uuid4());\n\t\t$vcard->setPhoto($resource->getPhoto());\n\t}\n\n\t$this->exporters($resource::class)\n\t\t->each(fn (ExportVCardResource $exporter) => $exporter->export($resource, $vcard));\n\n\treturn $vcard;\n}", "CodeBleu_score": 26.51876947930421}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\t$vcard = $this->read($resource);\n\n\tif ($vcard === null) {\n\t\t$vcard = new VCard();\n\t\t$vcard->setUid(Uuid::uuid4()->toString());\n\n\t\tif ($resource instanceof Contact) {\n\t\t\t$vcard->addName($resource->name);\n\t\t} elseif ($resource instanceof Group) {\n\t\t\t$vcard->addName($resource->name);\n\t\t}\n\t}\n\n\t$this->exporters($resource::class)\n\t\t->each(fn (ExportVCardResource $exporter): void => $exporter->export($vcard, $resource));\n\n\treturn $vcard;\n}", "CodeBleu_score": 27.183278039841618}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t\ttry {\n\t\t$vcard = $this->read($resource);\n\t\tif (!$vcard->has('uid')) {\n\t\t\t$vcard->add('uid', $this->generateUid($resource));\n\t\t}\n\t} catch (VCardReadException $e) {\n\t\t$vcard = $this->create($resource);\n\t}\n\n\t$this->exporters($resource->getType())\n\t\t->each(fn (ExportVCardResource $exporter) => $exporter->export($vcard, $resource));\n\n\treturn $vcard;\n}", "CodeBleu_score": 23.25736206969635}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$addressBook = $this->getAddressBook($addressBookId);\n\tif ($addressBook === null) {\n\t\treturn false;\n\t}\n\n\t$object = $addressBook->getObjectByUri($cardUri);\n\tif ($object === null) {\n\t\treturn false;\n\t}\n\n\tif ($object instanceof Contact) {\n\t\t$this->jobList->add(new DestroyContactJob($object->getId()));\n\t\treturn true;\n\t}\n\n\tif ($object instanceof Group) {\n\t\t$this->jobList->add(new DestroyGroupJob($object->getId()));\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 32.70778042614108}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$object = $this->getObject($addressBookId, $cardUri);\n\tif ($object instanceof Contact) {\n\t\t$this->dispatcher->dispatch(new DestroyContact($object->getId()), 'high');\n\t\treturn true;\n\t}\n\tif ($object instanceof Group) {\n\t\t$this->dispatcher->dispatch(new DestroyGroup($object->getId()), 'high');\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 42.3440036365874}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\n}", "CodeBleu_score": 6.450974931308237}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\tif (!isset($_FILES['file'])) {\n\t\treturn;\n\t}\n\n\t$activity = $this->createActivity($data);\n\t$file = $this->createFile($activity);\n\n\treturn $file;\n}", "CodeBleu_score": 18.441233004234768}, {"code": "<?\npublic function upload(array $data){\n\t\tif (!isset($_FILES['file'])) {\n\t\treturn;\n\t}\n\n\t$leadActivity = $this->createLeadActivity($data);\n\t$file = $this->createFile($_FILES['file'], $leadActivity);\n\n\treturn $file;\n}", "CodeBleu_score": 24.086042483472458}, {"code": "<?\npublic function upload(array $data){\n\t\t$leadActivity = $this->createLeadActivity($data);\n\t$file = $this->request->file('file');\n\n\tif (!$file) {\n\t\treturn $leadActivity;\n\t}\n\n\t$path = $file->store('public/lead_activity_files');\n\t$file = $this->files->create([\n\t\t'name' => $file->getClientOriginalName(),\n\t\t'path' => $path,\n\t\t'lead_activity_id' => $leadActivity->id\n\t]);\n\n\treturn $leadActivity;\n}", "CodeBleu_score": 40.22706309638803}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tf (request()->expectsJson()) {\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\t\treturn response()->json(['message' => trans('admin::app.common.not-found')], 404);\n\t\t}\n\n\t\tif ($exception instanceof PDOException) {\n\t\t\treturn response()->json(['message' => trans('admin::app.common.something-went-wrong')], 500);\n\t\t}\n\n\t\tif ($exception instanceof ParseError) {\n\t\t\treturn response()->json(['message' => trans('admin::app.common.something-went-wrong')], 500);\n\t\t}\n\n\t\treturn response()->json(['message' => trans('admin::app.common.something-went-wrong')], 500);\n\t}\n\n\tif (request()->route()->getPrefix() == 'admin') {\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\t\treturn redirect()->route('admin.session.create');\n\t\t}\n\n\t\tif ($exception instanceof PDOException) {\n\t\t\treturn redirect()->route('admin.session.create');\n\t\t}\n\n\t\tif ($exception instanceof ParseError) {\n\t\t\treturn redirect()->route('admin.session.create');\n\t\t}\n\n\t\treturn redirect()->route('admin.session.create');\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\t$statusCode = $exception->getStatusCode();\n\n\t\tif ($statusCode == 404) {\n\t\t\treturn $this->response('shop', $statusCode);\n\t\t}\n\n\t\treturn $this->response('shop', 500);\n\t}\n\n\treturn $this->response('shop', 500);\n}", "CodeBleu_score": 37.39712680139497}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\troute = request()->route();\n\n\tif ($route->getPrefix() == 'admin') {\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\t\treturn $this->response('admin::errors.404', 404);\n\t\t}\n\n\t\tif ($exception instanceof PDOException) {\n\t\t\treturn $this->response('admin::errors.500', 500);\n\t\t}\n\n\t\tif ($exception instanceof ParseError) {\n\t\t\treturn $this->response('admin::errors.500', 500);\n\t\t}\n\t}\n\n\tif ($route->getPrefix() == 'customer') {\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\t\treturn $this->response('customer::errors.404', 404);\n\t\t}\n\n\t\tif ($exception instanceof PDOException) {\n\t\t\treturn $this->response('customer::errors.500', 500);\n\t\t}\n\n\t\tif ($exception instanceof ParseError) {\n\t\t\treturn $this->response('customer::errors.500', 500);\n\t\t}\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\t$statusCode = $exception->getStatusCode();\n\n\t\tif ($statusCode == 404) {\n\t\t\tif ($route->getPrefix() == 'admin') {\n\t\t\t\treturn $this->response('admin::errors.404', 404);\n\t\t\t}\n\n\t\t\treturn $this->response('customer::errors.404', 404);\n\t\t}\n\n\t\treturn $this->response('customer::errors.500', 500);\n\t}\n}", "CodeBleu_score": 34.18726106719542}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tf (request()->expectsJson()) {\n\t\treturn response()->json([\n\t\t\t'message' => isset($this->jsonErrorMessages[$exception->getStatusCode()])\n\t\t\t\t? $this->jsonErrorMessages[$exception->getStatusCode()]\n\t\t\t\t: trans('admin::app.common.something-went-wrong')\n\t\t], $exception->getStatusCode());\n\t}\n\n\tif (request()->route()->getPrefix() == config('admin.route.prefix')) {\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\t\treturn $this->response('admin', 404);\n\t\t}\n\n\t\tif ($exception instanceof PDOException) {\n\t\t\treturn $this->response('admin', 500);\n\t\t}\n\n\t\tif ($exception instanceof ParseError) {\n\t\t\treturn $this->response('admin', 500);\n\t\t}\n\n\t\tif ($exception instanceof HttpException) {\n\t\t\treturn $this->response('admin', $exception->getStatusCode());\n\t\t}\n\n\t\tif ($exception instanceof NotFoundHttpException) {\n\t\t\treturn $this->response('admin', 404);\n\t\t}\n\n\t\treturn $this->response('admin', 500);\n\t}\n\n\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn $this->response('shop', 404);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn $this->response('shop', 500);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn $this->response('shop', 500);\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\treturn $this->response('shop', $exception->getStatusCode());\n\t}\n\n\tif ($exception instanceof NotFoundHttpException) {\n\t\treturn $this->response('shop', 404);\n\t}\n\n\treturn $this->response('shop', 500);\n}", "CodeBleu_score": 29.785527351970654}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\n    return response()->json([\n       'message' => isset($this->jsonErrorMessages[$statusCode])\n           ? $this->jsonErrorMessages[$statusCode]\n            : trans('admin::app.common.something-went-wrong')\n    ], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 90.33354981240745}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.95236850860614}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => isset($this->jsonErrorMessages[$statusCode])\n? $this->jsonErrorMessages[$statusCode]\n: trans('admin::app.common.something-went-wrong')\n], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 86.95236850860614}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t\t$this->log->debug(\"massUpdate()\");\n\t$this->log->debug(\"massUpdate() - request: \".print_r($this->request,true));\n\n\t$this->log->debug(\"massUpdate() - activity_ids: \".$this->request->activity_ids);\n\t$this->log->debug(\"massUpdate() - is_done: \".$this->request->is_done);\n\n\t$activity_ids = explode(\",\", $this->request->activity_ids);\n\t$is_done = $this->request->is_done;\n\n\t$num_updated = 0;\n\n\tforeach ($activity_ids as $activity_id) {\n\t\t$activity = new Activity($activity_id);\n\n\t\tif ($activity->is_done!= $is_done) {\n\t\t\t$activity->is_done = $is_done;\n\n\t\t\t$activity->save();\n\n\t\t\t$this->log->debug(\"massUpdate() - activity: \".print_r($activity,true));\n\n\t\t\t$this->log->debug(\"massUpdate() - dispatching ActivityEvent::UPDATED\");\n\t\t\t$event = new ActivityEvent(ActivityEvent::UPDATED, $activity);\n\t\t\t$this->dispatcher->dispatch(ActivityEvent::UPDATED, $event);\n\n\t\t\t$num_updated++;\n\t\t}\n\t}\n\n\tif ($num_updated > 0) {\n\t\t$this->log->debug(\"massUpdate() - $num_updated activities updated\");\n\t\t$this->response->success = true;\n\t} else {\n\t\t$this->log->debug(\"massUpdate() - no activities updated\");\n\t\t$this->response->success = false;\n\t\t$this->response->error = \"No activities were updated\";\n\t}\n}", "CodeBleu_score": 25.897952446440698}, {"code": "<?\npublic function massUpdate(){\n\t\t// Get the request data\n\t$requestData = $this->getRequestData();\n\n\t// Check if the request data is valid\n\tif (!isset($requestData['activity_ids']) ||!is_array($requestData['activity_ids'])) {\n\t\t$this->response->setStatusCode(400);\n\t\treturn $this->response->setContent('Invalid request data');\n\t}\n\n\t// Get the activity repository\n\t$activityRepository = $this->entityManager->getRepository(Activity::class);\n\n\t// Iterate over the activity IDs\n\t$updatesCount = 0;\n\tforeach ($requestData['activity_ids'] as $activityId) {\n\t\t// Get the activity\n\t\t$activity = $activityRepository->find($activityId);\n\t\tif (!$activity) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Dispatch the pre-update event\n\t\t$preUpdateEvent = new ActivityEvent($activity);\n\t\t$this->eventDispatcher->dispatch($preUpdateEvent, ActivityEvent::PRE_UPDATE);\n\n\t\t// Update the activity's 'is_done' status\n\t\t$activity->setIsDone(true);\n\t\t$this->entityManager->flush();\n\n\t\t// Dispatch the post-update event\n\t\t$postUpdateEvent = new ActivityEvent($activity);\n\t\t$this->eventDispatcher->dispatch($postUpdateEvent, ActivityEvent::POST_UPDATE);\n\n\t\t$updatesCount++;\n\t}\n\n\t// Return the response\n\tif ($updatesCount > 0) {\n\t\treturn $this->response->setContent(json_encode(['success' => true,'message' => 'Activities updated successfully']));\n\t} else {\n\t\treturn $this->response->setContent(json_encode(['success' => false,'message' => 'No activities updated']));\n\t}\n}", "CodeBleu_score": 35.16646076028659}, {"code": "<?\npublic function massUpdate(){\n\t\t$activityIds = $this->input->post('activityIds');\n\t$isDone = $this->input->post('isDone');\n\t$count = 0;\n\n\tforeach ($activityIds as $activityId) {\n\t\t$activity = $this->activity_model->get($activityId);\n\t\t$this->events->trigger('before_activity_mass_update', $activity, $isDone);\n\t\t$this->activity_model->update($activityId, array('is_done' => $isDone));\n\t\t$this->events->trigger('after_activity_mass_update', $activity, $isDone);\n\t\t$count++;\n\t}\n\n\tif ($count > 0) {\n\t\t$this->session->set_flashdata('message', sprintf(lang('activities_mass_update_success'), $count));\n\t} else {\n\t\t$this->session->set_flashdata('error', sprintf(lang('activities_mass_update_error'), $count));\n\t}\n\n\techo json_encode(array('success' => ($count > 0)));\n\tdie();\n}", "CodeBleu_score": 37.55348808594669}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t\t// Get the request data\n\t$requestData = request()->all();\n\n\t// Get the activity IDs to delete\n\t$activityIds = $requestData['ids'];\n\n\t// Iterate over the activity IDs\n\tforeach ($activityIds as $activityId) {\n\t\t// Dispatch the before activity delete event\n\t\tActivity::dispatch('beforeActivityDelete', $activityId);\n\n\t\t// Delete the activity\n\t\tActivity::where('id', $activityId)->delete();\n\n\t\t// Dispatch the after activity delete event\n\t\tActivity::dispatch('afterActivityDelete', $activityId);\n\t}\n\n\t// Return a JSON response indicating a successful destruction\n\treturn response()->json(['success' => true]);\n}", "CodeBleu_score": 28.817539706649463}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = explode(',', request('ids'));\n\tActivity::whereIn('id', $ids)->get()->each(function ($activity) {\n\t\t$activity->delete();\n\t});\n\treturn response()->json(trans('global.actions.mass_destroyed'));\n}", "CodeBleu_score": 20.566805472835966}, {"code": "<?\n public function massDestroy(){\n\t\t$ids = $this->request->input('ids');\n\tif ($ids == null) {\n\t\treturn $this->sendError('Activity IDs not provided');\n\t}\n\t$activities = Activity::whereIn('id', $ids)->get();\n\tforeach ($activities as $activity) {\n\t\t$activity->delete();\n\t}\n\treturn $this->sendResponse($ids, 'Activities deleted successfully');\n}", "CodeBleu_score": 23.457265096535117}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n\t$requestData = json_decode(file_get_contents('php://input'), true);\n\n\tforeach ($cards as $key => $card) {\n\t\tforeach ($requestData as $request) {\n\t\t\tif ($card['id'] == $request['id']) {\n\t\t\t\t$cards[$key]['selected'] = $request['selected'];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn json_encode($cards);\n}", "CodeBleu_score": 38.73403880249533}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n\t$request = json_decode(file_get_contents('php://input'));\n\tforeach ($cards as $card) {\n\t\tforeach ($request as $key => $value) {\n\t\t\tif ($card->id == $key) {\n\t\t\t\t$card->selected = $value;\n\t\t\t}\n\t\t}\n\t}\n\treturn response()->json($cards);\n}", "CodeBleu_score": 33.17271144428311}, {"code": "<?\n public function updateCards(){\n\t$cards = $this->getCards();\n\t$requestData = $this->getRequestData();\n\n\tforeach ($cards as $card) {\n\t\tforeach ($requestData as $request) {\n\t\t\tif ($card->id == $request['id']) {\n\t\t\t\t$card->selected = $request['selected'];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn $this->json($cards);\n}", "CodeBleu_score": 33.40953509004539}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t$this->dispatch(new Configuring($this->request));\n\n\t$config = Config::create($this->request->all());\n\n\t$this->dispatch(new Configured($config));\n\n\tflash('Configuration saved');\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 29.004977975417916}, {"code": "<?\npublic function store(){\n\t\t$this->dispatch(new BeforeCreatingConfiguration($this->request->all()));\n\n\t$configuration = $this->repository->create($this->request->all());\n\n\t$this->dispatch(new AfterCreatingConfiguration($configuration));\n\n\tflash()->success(trans('configurations.messages.created'));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 34.01433463570432}, {"code": "<?\npublic function store(){\n\t\t$this->dispatch(new ConfigurationSaving($configuration));\n\t$configuration = Configuration::create($this->request->all());\n\t$this->dispatch(new ConfigurationSaved($configuration));\n\tflash()->success('Configuration created successfully.');\n\treturn redirect()->back();\n}", "CodeBleu_score": 31.507952440667154}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t\t$path = request()->route()->parameters()['path'];\n\n\t$fileName = 'configuration/'. $path;\n\n\t$config = $this->configurationRepository->findOneByField('value', $fileName);\n\n\treturn Storage::download($config['value']);\n}", "CodeBleu_score": 94.01680707275804}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}, {"code": "<?\npublic function download(){\n\t$path = request()->route()->parameters()['path'];\n\n$fileName = 'configuration/'. $path;\n\n$config = $this->configurationRepository->findOneByField('value', $fileName);\n\nreturn Storage::download($config['value']);\n}", "CodeBleu_score": 93.99332601784117}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t//TODO: Implement method\n\treturn null;\n}", "CodeBleu_score": 4.8605767515403375}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\treturn new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);\n\n}", "CodeBleu_score": 6.531666657841696}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t\t// TODO: Implement...\n\t\n\treturn null;\n}", "CodeBleu_score": 4.8605767515403375}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\nif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\nreturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n}\nadminConfig.setStatus(moduleSetting.getStatus());\nadminConfigService.setModuleSetting(adminConfig);\nreturn Result.ok();\n}", "CodeBleu_score": 90.29061502427011}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.setModuleSetting(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 90.3314367438484}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getName())) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_MODULE_CLOSE_ERROR);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.setModuleSetting(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 90.3314367438484}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\ttry {\n\t\tUserConfiguration userConfiguration = userConfigurationService.queryCustomSetting(customKey, json);\n\t\treturn new Result(true, userConfiguration);\n\t} catch (Exception e) {\n\t\treturn new Result(false, e.getMessage());\n\t}\n}", "CodeBleu_score": 23.197840627366233}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\ttry{\n\t\tUserConfiguration userConfiguration = userConfigurationService.queryCustomSetting(customKey, json);\n\t\treturn new Result(true, userConfiguration);\n\t}catch(Exception e){\n\t\te.printStackTrace();\n\t\treturn new Result(false, e.getMessage());\n\t}\n}", "CodeBleu_score": 23.616345058922924}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\t// TODO - implement UserConfigurationController.queryCustomSetting\n\tthrow new UnsupportedOperationException();\n}", "CodeBleu_score": 9.708326880357601}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = userRepository.queryUserInfo(userId);\n\tif (user == null) {\n\t\treturn new Result<AdminUser>(ResultCode.FAIL, \"User not found\");\n\t}\n\tuser.setDepartmentName(departmentRepository.queryDepartmentName(user.getDepartmentId()));\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn new Result<AdminUser>(ResultCode.SUCCESS, user);\n}", "CodeBleu_score": 36.150000818208774}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserDao.queryUserInfo(userId);\n\tif (user == null) {\n\t\treturn Result.createErrorResult(ErrorCode.USER_NOT_EXIST);\n\t}\n\tuser.setDepartmentName(departmentDao.queryDepartmentName(user.getDepartmentId()));\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn Result.createSuccessResult(user);\n}", "CodeBleu_score": 37.67541894551223}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserDao.queryUserInfo(userId);\n\tif (user == null) {\n\t\treturn new Result<AdminUser>(ResultCode.USER_NOT_FOUND);\n\t}\n\tDepartment department = departmentDao.queryDepartmentInfo(user.getDepartmentId());\n\tif (department!= null) {\n\t\tuser.setDepartmentName(department.getName());\n\t}\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn new Result<AdminUser>(ResultCode.SUCCESS, user);\n}", "CodeBleu_score": 43.821718686438096}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t\tString user_id = session(\"user_id\");\n\tList<ReadNotice> readNoticeList = ReadNotice.find.where().eq(\"user_id\", user_id).findList();\n\tif(readNoticeList.size() > 1) {\n\t\tReadNotice.updateAll(user_id, 1);\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.user_id = user_id;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\treturn ok(\"success\");\n}", "CodeBleu_score": 21.685942400757597}, {"code": " public Result readNotice() {\n\t\tString userId = session().get(\"userId\");\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"user_id\", userId).findList();\n\tif (readNotices.size() > 1) {\n\t\tfor (ReadNotice readNotice : readNotices) {\n\t\t\treadNotice.status = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t} else if (readNotices.size() == 1) {\n\t\tReadNotice readNotice = readNotices.get(0);\n\t\treadNotice.status = 1;\n\t\treadNotice.update();\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.user_id = userId;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\treturn ok();\n}", "CodeBleu_score": 25.762483003021412}, {"code": " public Result readNotice() {\n\t\tString userID = session(\"userID\");\n\tif (userID == null) {\n\t\treturn ok(index.render(\"You are not logged in.\"));\n\t}\n\tList<ReadNotice> readNotices = ReadNotice.find.where().eq(\"userID\", userID).findList();\n\tif (readNotices.size() > 0) {\n\t\tfor (int i = 0; i < readNotices.size(); i++) {\n\t\t\tReadNotice readNotice = readNotices.get(i);\n\t\t\treadNotice.status = 1;\n\t\t\treadNotice.update();\n\t\t}\n\t} else {\n\t\tReadNotice readNotice = new ReadNotice();\n\t\treadNotice.userID = userID;\n\t\treadNotice.status = 1;\n\t\treadNotice.save();\n\t}\n\treturn ok(index.render(\"Success\"));\n}", "CodeBleu_score": 27.29231804374631}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\t// Retrieve the existing configuration with the name \"companyInfo\"\n\tConfiguration existingConfig = configurationService.getConfiguration(\"companyInfo\");\n\t// If the configuration does not exist, create a new configuration with default values\n\tif (existingConfig == null) {\n\t\texistingConfig = new Configuration();\n\t\texistingConfig.setName(\"companyInfo\");\n\t\texistingConfig.setDefaultValue(DEFAULT_COMPANY_INFO);\n\t}\n\t// Update the configuration's value with the provided company information in JSON format\n\texistingConfig.setValue(adminCompanyBO.toJson());\n\t// Save or update the configuration\n\tconfigurationService.saveOrUpdateConfiguration(existingConfig);\n}", "CodeBleu_score": 31.096335506948908}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tConfiguration config = configurationService.getConfiguration(\"companyInfo\");\n\tif (config == null) {\n\t\tconfig = new Configuration();\n\t\tconfig.setName(\"companyInfo\");\n\t}\n\tconfig.setValue(JsonUtil.toJson(adminCompanyBO));\n\tconfigurationService.saveOrUpdate(config);\n}", "CodeBleu_score": 30.35460561228612}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tString name = \"companyInfo\";\n\tAdminConfigBO adminConfigBO = adminConfigService.getAdminConfig(name);\n\tif (adminConfigBO == null) {\n\t\tadminConfigBO = new AdminConfigBO();\n\t\tadminConfigBO.setName(name);\n\t\tadminConfigBO.setValue(JSONUtil.getJsonString(adminCompanyBO));\n\t\tadminConfigService.saveAdminConfig(adminConfigBO);\n\t} else {\n\t\tadminConfigBO.setValue(JSONUtil.getJsonString(adminCompanyBO));\n\t\tadminConfigService.updateAdminConfig(adminConfigBO);\n\t}\n}", "CodeBleu_score": 35.38603907337946}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tAdminCompanyBO adminCompanyBO = new AdminCompanyBO();\n\tString adminConfig = adminConfigService.queryAdminConfig(AdminConfigKey.COMPANY_CONFIG);\n\tif (adminConfig!= null) {\n\t\tadminCompanyBO = parseAdminCompanyBO(adminConfig);\n\t}\n\treturn adminCompanyBO;\n}", "CodeBleu_score": 37.82926495366748}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\t// TODO: implement this method\n\t// Ensure that you remove @generated or mark it @generated NOT\n\tthrow new UnsupportedOperationException();\n}", "CodeBleu_score": 5.10153008901563}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t\tString key = getAdminConfigKey();\n\tAdminCompanyBO adminCompany = new AdminCompanyBO();\n\tString value = queryConfig(key);\n\tif (value!= null) {\n\t\tadminCompany = parseAdminConfig(value);\n\t}\n\treturn adminCompany;\n}", "CodeBleu_score": 26.538730944233052}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n\tfor (String string : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setSpeech(string);\n\t\tconfig.setLogConfigurationName(getLogConfigurationName());\n\t\tconfigList.add(config);\n\t}\n\tremoveLogWelcomeSpeech();\n\tadminConfigService.saveBatch(configList);\n}", "CodeBleu_score": 40.50167176363665}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tList<AdminConfig> configList = new ArrayList<AdminConfig>();\n\tfor(String string : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setName(string);\n\t\tconfig.setSpeech(string);\n\t\tconfig.setLanguage(\"en-US\");\n\t\tconfigList.add(config);\n\t}\n\tList<AdminConfig> existingConfigs = adminConfigRepository.findAllByConfigName(LOG_WELCOME_SPEECH);\n\tif(existingConfigs.size() > 0) {\n\t\tadminConfigRepository.delete(existingConfigs);\n\t}\n\tadminConfigRepository.save(configList);\n}", "CodeBleu_score": 41.91802270835143}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t\tif (stringList == null) {\n\t\treturn;\n\t}\n\tList<AdminConfig> configs = new ArrayList<AdminConfig>();\n\tfor (String str : stringList) {\n\t\tAdminConfig config = new AdminConfig();\n\t\tconfig.setName(str);\n\t\tconfig.setLogConfigName(LOG_CONFIG_NAME);\n\t\tconfig.setLogType(LogType.WELCOME);\n\t\tconfigs.add(config);\n\t}\n\tList<AdminConfig> existingConfigs = adminConfigDao.getLogWelcomeSpeech(LOG_CONFIG_NAME);\n\tadminConfigDao.removeBatch(existingConfigs);\n\tadminConfigDao.saveBatch(configs);\n}", "CodeBleu_score": 39.85123874766518}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString userId = adminInitDataBO.getUserId();\n\tString password = ();\n\tString username = adminInitDataBO.getUsername();\n\tString salt = adminInitDataBO.getSalt();\n\n\tif (password == null) {\n\t\tthrow new RuntimeException(\"Invalid password\");\n\t}\n\n\tString encryptedPassword = encryptPassword(username, password, salt);\n\n\tif (!encryptedPassword.equals(password)) {\n\t\tthrow new RuntimeException(\"Invalid password\");\n\t}\n\n\tString code = generateCode();\n\tredisTemplate.opsForValue().set(userId, code, 10, TimeUnit.MINUTES);\n\n\treturn code;\n}", "CodeBleu_score": 29.355252933537034}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\tString code = null;\n\ttry {\n\t\t// Retrieve the current user ID and user details, including the username\n\t\tString userId = adminInitDataBO.getUserId();\n\t\tString username = adminInitDataBO.getUsername();\n\t\tString password = ();\n\n\t\t// Check the provided password against the stored password using the username and salt\n\t\tString salt = adminInitDataBO.getSalt();\n\t\tString hashedPassword = hashPassword(password, salt);\n\t\tString storedPassword = adminInitDataBO.getPassword();\n\n\t\tif (hashedPassword.equals(storedPassword)) {\n\t\t\t// Generate a temporary access code and store it in Redis with a 10-minute expiration\n\t\t\tcode = generateCode(userId, username);\n\t\t\tredisTemplate.opsForValue().set(code, userId, 10, TimeUnit.MINUTES);\n\t\t} else {\n\t\t\t// Throw an exception indicating an invalid password\n\t\t\tthrow new RuntimeException(\"Invalid password\");\n\t\t}\n\t} catch (Exception e) {\n\t\tthrow new RuntimeException(\"Error verifying password: \" + e.getMessage());\n\t}\n\n\treturn code;\n}", "CodeBleu_score": 31.338305226105916}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t// Retrieve the current user ID and user details, including the username\n\tLong userId = adminInitDataBO.getUserId();\n\tUser user = userRepository.findById(userId).orElseThrow(() -> new ResourceNotFoundException(\"User\", \"id\", userId));\n\tString username = user.getUsername();\n\n\t// Check the provided password against the stored password using the username and salt\n\tString password = ();\n\tString salt = user.getSalt();\n\tString hashedPassword = hashPassword(password, salt);\n\tif (!hashedPassword.equals(user.getPassword())) {\n\t\tthrow new InvalidPasswordException(\"Invalid password\");\n\t}\n\n\t// Generate a temporary access code, store it in Redis with a 10-minute expiration, and return the code\n\tString accessCode = UUID.randomUUID().toString();\n\tredisTemplate.opsForValue().set(accessCode, userId, 10, TimeUnit.MINUTES);\n\treturn accessCode;\n}", "CodeBleu_score": 41.47672073968934}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\t\t// Retrieve the user ID\n\tString userId = getUserId();\n\t// Construct a key\n\tString key = \"unauthorized_menu_\" + userId;\n\t// Fetch the list of unauthorized menu URLs from Redis\n\tSet<String> unauthorizedMenu = redisTemplate.opsForSet().members(key);\n\t// Check if the initial authentication URL is in the list\n\tif (unauthorizedMenu.contains(request.getRequestURI())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 33.94109041581193}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = userId + \":initAuth\";\n\tSet<String> urls = redisTemplate.opsForSet().members(key);\n\tif (urls!= null && urls.contains(getInitAuthUrl())) {\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 33.4863632387572}, {"code": "private boolean verifyInitAuth(){\n\t\tString userId = getUserId();\n\tString key = userId + \"_unauthorized\";\n\tString initAuthUrl = getInitAuthUrl();\n\tif (initAuthUrl == null) {\n\t\treturn false;\n\t}\n\tJedis jedis = null;\n\ttry {\n\t\tjedis = getJedis();\n\t\tList<String> unauthorizedUrls = jedis.lrange(key, 0, -1);\n\t\tif (unauthorizedUrls.contains(initAuthUrl)) {\n\t\t\treturn true;\n\t\t}\n\t} finally {\n\t\tif (jedis!= null) {\n\t\t\tjedis.close();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 33.90986967936257}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\tif(menuIdList == null || menuIdList.size() == 0) {\n\t\treturn;\n\t}\n\tList<AdminRoleMenu> list = new ArrayList<AdminRoleMenu>();\n\tfor(Integer menuId : menuIdList) {\n\t\tAdminRoleMenu rm = new AdminRoleMenu();\n\t\trm.setRoleId(roleId);\n\t\trm.setMenuId(menuId);\n\t\tlist.add(rm);\n\t}\n\t// Save the list of role-menu associations in batches\n\tbatchSave(list);\n}", "CodeBleu_score": 42.78751520866766}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// Remove all existing role-menu associations\n\tAdminRoleMenuExample adminRoleMenuExample = new AdminRoleMenuExample();\n\tadminRoleMenuExample.createCriteria().andRoleIdEqualTo(roleId);\n\tadminRoleMenuMapper.deleteByExample(adminRoleMenuExample);\n\n\t// Add new role-menu associations\n\tList<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n\t\tadminRoleMenu.setRoleId(roleId);\n\t\tadminRoleMenu.setMenuId(menuId);\n\t\tadminRoleMenuList.add(adminRoleMenu);\n\t}\n\tif (adminRoleMenuList.size() > 0) {\n\t\tadminRoleMenuMapper.batchInsert(adminRoleMenuList);\n\t}\n}", "CodeBleu_score": 56.22745621658072}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t\t// Create a list of AdminRoleMenu objects, each containing a role ID and a menu ID.\n\tList<AdminRoleMenu> list = new ArrayList<>();\n\tfor (Integer menuId : menuIdList) {\n\t\tAdminRoleMenu roleMenu = new AdminRoleMenu();\n\t\troleMenu.setRoleId(roleId);\n\t\troleMenu.setMenuId(menuId);\n\t\tlist.add(roleMenu);\n\t}\n\t// Save the list of role-menu associations in batches.\n\tbatchSave(list);\n}", "CodeBleu_score": 50.91879829914539}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t\nString index = getSysLogIndex();\nMap<String, Object> map = BeanMapUtil.beanToMap(sysLog);\nmap.put(\"createTime\", DateUtil.formatDate(sysLog.getCreateTime()));\nmap.remove(\"id\");\nIndexRequest indexRequest = new IndexRequest(index);\nindexRequest.source(map);\ntry {\n    restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\n    log.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 50.916811132381554}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\tString index = getSysLogIndex();\n\tMap<String, Object> map = BeanMapUtil.beanToMap(sysLog);\n\tmap.put(\"createTime\", LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\n\tmap.remove(\"id\");\n\tIndexRequest indexRequest = new IndexRequest(index);\n\tindexRequest.source(map);\n\ttry {\n\t\trestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n\t} catch (IOException e) {\n\t\tlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n\t}\n}", "CodeBleu_score": 48.35271041336987}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getSysLogIndex();\nMap<String, Object> map = BeanMapUtils.beanToMap(sysLog);\nmap.put(\"createTime\", sysLog.getCreateTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\")));\nmap.remove(\"id\");\nIndexRequest indexRequest = new IndexRequest(index);\nindexRequest.source(map);\ntry {\nrestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u4fdd\u5b58\u7cfb\u7edf\u65e5\u5fd7\u5f02\u5e38,msg:{}\", e.getMessage());\n}\n}", "CodeBleu_score": 48.61785141142665}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\tRequest searchRequest = new SearchRequest();\nSearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n//\u8bbe\u7f6e\u6392\u5e8f\nsearchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n//\u8bbe\u7f6e\u4e0d\u8fd4\u56de\u7684\u5b57\u6bb5\nsearchSourceBuilder.fetchSource(new String[]{\"userId\", \"model\", \"subModelLabel\", \"subModelValue\", \"content\", \"createTime\"}, null);\nsearchRequest.source(searchSourceBuilder);\nsearchRequest.indices(getSysLogIndex());\nSearchResponse searchResponse = null;\ntry {\nsearchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\nlog.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n}\nSearchHits searchHits = searchResponse.getHits();\nList<SysLog> sysLogList = new ArrayList<>();\nfor (SearchHit hit : searchHits) {\nMap<String, Object> sourceAsMap = hit.getSourceAsMap();\nSysLog sysLog = new SysLog();\nsysLog.setUserId(Long.valueOf(sourceAsMap.get(\"userId\").toString()));\nsysLog.setModel(sourceAsMap.get(\"model\").toString());\nsysLog.setSubModelLabel(sourceAsMap.get(\"subModelLabel\").toString());\nsysLog.setSubModelValue(sourceAsMap.get(\"subModelValue\").toString());\nsysLog.setContent(sourceAsMap.get(\"content\").toString());\nsysLog.setCreateTime(sourceAsMap.get(\"createTime\").toString());\nsysLogList.add(sysLog);\n}\nBasePage<SysLog> basePage = new BasePage<>();\nbasePage.setTotal(searchHits.getTotalHits().value);\nbasePage.setPage(querySysLogBO.getPage());\nbasePage.setList(sysLogList);\nreturn basePage;\n}", "CodeBleu_score": 55.666163331847116}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\ttialize search criteria\n        SearchRequest searchRequest = new SearchRequest(getSysLogIndex());\n        SearchSourceBuilder searchSourceBuilder = createSearchSourceBuilder(querySysLogBO);\n        searchSourceBuilder.sort(\"createTime\", SortOrder.DESC);\n        searchSourceBuilder.fetchSource(new String[]{\"id\", \"userId\", \"userName\", \"model\", \"subModel\", \"subModelLabel\", \"ip\", \"createTime\"}, null);\n        searchRequest.source(searchSourceBuilder);\n// Execute search request\n        SearchResponse searchResponse = null;\n        try {\n            searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\"\u67e5\u8be2\u7cfb\u7edf\u65e5\u5fd7\u5217\u8868\u5f02\u5e38,msg:{}\", e.getMessage());\n        }\n// Map search results to SysLog objects\n        List<SysLog> sysLogList = new ArrayList<>();\n        if (searchResponse!= null && searchResponse.getHits()!= null) {\n            for (SearchHit hit : searchResponse.getHits()) {\n                SysLog sysLog = new SysLog();\n                sysLog.setId(hit.getId());\n                sysLog.setUserId(hit.getSourceAsMap().get(\"userId\").toString());\n                sysLog.setUserName(hit.getSourceAsMap().get(\"userName\").toString());\n                sysLog.setModel(hit.getSourceAsMap().get(\"model\").toString());\n                sysLog.setSubModel(hit.getSourceAsMap().get(\"subModel\").toString());\n                sysLog.setSubModelLabel(hit.getSourceAsMap().get(\"subModelLabel\").toString());\n                sysLog.setIp(hit.getSourceAsMap().get(\"ip\").toString());\n                sysLog.setCreateTime(DateUtil.parse(hit.getSourceAsMap().get(\"createTime\").toString()));\n                sysLogList.add(sysLog);\n            }\n        }\n// Populate BasePage object with results\n        BasePage<SysLog> basePage = new BasePage<>();\n        basePage.setList(sysLogList);\n        basePage.setTotal(searchResponse.getHits().getTotalHits().value);\n        basePage.setCurrent(querySysLogBO.getPage());\n        return basePage;\n    }", "CodeBleu_score": 52.72667667350712}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, response => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', err => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}", "CodeBleu_score": 54.139109885405844}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\tconst request = https.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on('finish', () => {\n\t\t\t\tfile.close();\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on('error', (err) => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}", "CodeBleu_score": 57.3253331212956}, {"code": "async function downloadFile(url, dest){\n\t\tconst file = fs.createWriteStream(dest);\n\tconst response = await axios({\n\t\tmethod: 'GET',\n\t\turl,\n\t\tresponseType:'stream'\n\t});\n\tresponse.data.pipe(file);\n\treturn new Promise((resolve, reject) => {\n\t\tfile.on('finish', () => {\n\t\t\tfile.close();\n\t\t\tresolve();\n\t\t});\n\t\tfile.on('error', (err) => {\n\t\t\tfs.unlink(dest);\n\t\t\treject(err);\n\t\t});\n\t});\n}", "CodeBleu_score": 51.46311742801126}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t if (circularDependencyCheckSet.contains(module.getId())) {\n log.warn(\"Circular dependency detected for module {}. Skipping dependent modules.\", module.getId());\n return Flux.empty();\n }\n circularDependencyCheckSet.add(module.getId());\n return module.getDependencies()\n.flatMap(dependency -> getModule(dependency.getId()))\n.flatMap(dependentModule -> getDependentModules(dependentModule, circularDependencyCheckSet))\n.concatWith(Mono.just(module));\n }", "CodeBleu_score": 48.5592488403732}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return this.applicationRepository.findByDependenciesContaining(module.getId())\n.flatMap(application -> {\n if (circularDependencyCheckSet.contains(application.getId())) {\n return Mono.empty();\n } else {\n circularDependencyCheckSet.add(application.getId());\n return this.getDependentModules(application, circularDependencyCheckSet)\n.concatWith(Mono.just(application));\n }\n })\n.onErrorResume(error -> {\n log.warn(\"Error while retrieving dependent modules for module {}: {}\", module.getId(), error.getMessage());\n return Mono.empty();\n });\n}", "CodeBleu_score": 46.99676893815708}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t return module.getDependencies()\n.flatMap(this::getApplication)\n.filter(m ->!circularDependencyCheckSet.contains(m.getId()))\n.doOnNext(m -> circularDependencyCheckSet.add(m.getId()))\n.flatMap(m -> getDependentModules(m, circularDependencyCheckSet))\n.concatWith(Mono.just(module));\n }", "CodeBleu_score": 48.30406118835433}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?,?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?,?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?,?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 86.95507148986474}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?,?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?,?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?,?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 86.95507148986474}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tct compType = map.get(\"compType\");\n\tif (compType instanceof String compTypeStr && compTypeStr.equals(\"module\")) {\n\t\tObject comp = map.get(\"comp\");\n\t\tif (comp instanceof Map<?,?> compMap) {\n\t\t\tString appId = (String) compMap.get(\"appId\");\n\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t}\n\t\t}\n\t}\n\n\tmap.forEach((key, value) -> {\n\t\tif (value instanceof Map<?,?> valueMap) {\n\t\t\tdoGetDependentModules(valueMap, dependentModuleIds);\n\t\t}\n\t\tif (value instanceof List<?> valueList) {\n\t\t\tvalueList.forEach(i -> {\n\t\t\t\tif (i instanceof Map<?,?> iMap) {\n\t\t\t\t\tdoGetDependentModules(iMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}", "CodeBleu_score": 86.95507148986474}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t // Read the image data from the DataBuffer\n byte[] imageData = dataBuffer.asByteArray();\n DataBufferUtils.release(dataBuffer);\n\n // Resize the image if createThumbnail is true\n if (createThumbnail) {\n imageData = resizeImage(dataBuffer);\n }\n\n // Set the content type to JPEG if createThumbnail is true, otherwise retain the original content type\n MediaType contentType = createThumbnail? MediaType.IMAGE_JPEG : srcContentType;\n\n // Create a new Asset with the processed image data and content type\n Asset asset = new Asset();\n asset.setData(imageData);\n asset.setContentType(contentType);\n\n return asset;\n }", "CodeBleu_score": 50.78221782095353}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t byte[] data = dataBuffer.asByteArray();\n if (createThumbnail) {\n data = resizeImage(dataBuffer);\n }\n String contentType = createThumbnail? MediaType.IMAGE_JPEG_VALUE : srcContentType.toString();\n Asset asset = new Asset().data(data).contentType(contentType);\n DataBufferUtils.release(dataBuffer);\n return asset;\n }", "CodeBleu_score": 44.86749353967057}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t // Read the image data from the DataBuffer\n byte[] imageData = dataBuffer.asInputStream().readAllBytes();\n DataBufferUtils.release(dataBuffer);\n\n // Resize the image if createThumbnail is true\n if (createThumbnail) {\n imageData = resizeImage(dataBuffer);\n }\n\n // Set the content type to JPEG if creating a thumbnail, otherwise retain the original content type\n MediaType contentType = createThumbnail? MediaType.IMAGE_JPEG : srcContentType;\n\n // Create the Asset with the processed image data and content type\n return Asset.builder()\n.contentType(contentType.toString())\n.data(imageData)\n.build();\n }", "CodeBleu_score": 50.72788628188562}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getById(assetId)\n\t\t\t.map(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n\t\t\t\t}\n\t\t\t\treturn asset;\n\t\t\t})\n\t\t\t.flatMap(asset -> {\n\t\t\t\tDataBufferFactory bufferFactory = exchange.getResponse().bufferFactory();\n\t\t\t\treturn exchange.getResponse().writeWith(Flux.just(bufferFactory.wrap(asset.getData())));\n\t\t\t});\n}", "CodeBleu_score": 43.18705784835633}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(asset.getContentType());\n\t\t\t\t}\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 37.046391681053535}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t\treturn getById(assetId)\n\t\t\t.flatMap(asset -> {\n\t\t\t\texchange.getResponse().setStatusCode(HttpStatus.OK);\n\t\t\t\tif (asset.getContentType()!= null) {\n\t\t\t\t\texchange.getResponse().getHeaders().setContentType(MediaType.valueOf(asset.getContentType()));\n\t\t\t\t}\n\t\t\t\treturn exchange.getResponse().writeWith(Mono.just(asset.getData()));\n\t\t\t});\n}", "CodeBleu_score": 37.60931832848876}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (this.workspaceMode == WorkspaceMode.SAAS) {\n\t\treturn Flux.empty();\n\t} else {\n\t\treturn this.organizationRepository.findAllByWorkspaceMode(WorkspaceMode.ENTERPRISE)\n\t\t\t\t.flatMap(org -> this.authConfigRepository.findByOrganizationId(org.getId())\n\t\t\t\t\t\t.map(authConfig -> new FindAuthConfig(authConfig.getId(), authConfig.getOrganizationId(), authConfig.getAuthType(), authConfig.getAuthConfig())));\n\t}\n}", "CodeBleu_score": 30.933401274308792}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (isSaas()) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.findAllEnterpriseOrganizations()\n\t\t\t.flatMap(org -> authConfigService.findAuthConfigByOrganization(org)\n\t\t\t\t\t.map(authConfig -> new FindAuthConfig(org.getId(), authConfig)));\n}", "CodeBleu_score": 23.943328861089864}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t\tif (WorkspaceMode.SAAS.equals(workspaceMode)) {\n\t\treturn Flux.empty();\n\t}\n\treturn findAllOrganizationsForEnterpriseMode()\n\t\t\t.flatMap(organization -> Flux.fromIterable(organization.getAuthConfigs()))\n\t\t\t.map(authConfig -> new FindAuthConfig(authConfig.getAuthType(), authConfig.getAuthId(), authConfig.getOrganizationId(), authConfig.getAuthName()));\n}", "CodeBleu_score": 30.041854488080766}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t.setDriver(MongoDriver.withDefaultLock(mongoTemplate))\n\t\t.addChangeLogsScanPackage(\"com.example.demo.db.changelog\")\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 21.168433959750747}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockApplicationRunner.withDefaultSpringRunner()\n\t\t.setApplicationContext(springContext)\n\t\t.setDriver(\n\t\t\tMongoDriver.withDefaultLock(mongoTemplate.getDb())\n\t\t\t\t.setWriteConcern(WriteConcern.MAJORITY)\n\t\t\t\t.setReadConcern(ReadConcern.MAJORITY)\n\t\t\t\t.build()\n\t\t)\n\t\t.setPackageToScan(\"com.example.demo.changelog\")\n\t\t.build();\n}", "CodeBleu_score": 31.414340017304283}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t.setDriver(mongoTemplate.getDb().getMongo())\n\t\t.setWriteConcern(WriteConcern.MAJORITY)\n\t\t.setReadConcern(ReadConcern.MAJORITY)\n\t\t.setPackageToScan(\"com.github.cloudyrock.mongock.driver.mongodb.springdata.v3.springboot.test.changelogs\")\n\t\t.setSpringContext(springContext)\n\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 31.1817739364429}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\tReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\treactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\treturn reactiveMongoTemplate;\n}", "CodeBleu_score": 76.68946433531822}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t// Create a new ReactiveMongoTemplate instance using the provided MongoDB factory and mapping converter\nReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n// Set the read preference to \"secondaryPreferred\"\nreactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\n// Return the configured ReactiveMongoTemplate\nreturn reactiveMongoTemplate;\n}", "CodeBleu_score": 77.0636964475727}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t\n// Create a ReactiveMongoTemplate instance using the provided MongoDB factory and mapping converter\nReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n\n// Set the read preference to \"secondaryPreferred\"\nreactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n\n// Return the configured ReactiveMongoTemplate\nreturn reactiveMongoTemplate;\n}", "CodeBleu_score": 77.0636964475727}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t.flatMap(libraryQuery -> {\n\t\t\tif (libraryQuery.getDsl()!= null) {\n\t\t\t\treturn Mono.just(libraryQuery.getDsl());\n\t\t\t} else {\n\t\t\t\treturn libraryQueryService.getLiveDSL(libraryQueryId);\n\t\t\t}\n\t\t})\n\t\t.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"));\n}", "CodeBleu_score": 43.27033118062295}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\treturn libraryQueryRepository.findById(libraryQueryId)\n\t\t\t.flatMap(libraryQuery -> {\n\t\t\t\tif (libraryQuery.getDsl()!= null) {\n\t\t\t\t\treturn Mono.just(libraryQuery.getDsl());\n\t\t\t\t} else {\n\t\t\t\t\treturn libraryQueryRepository.findLatestLibraryQueryByLibraryQueryId(libraryQueryId)\n\t\t\t\t\t\t\t.flatMap(latestLibraryQuery -> {\n\t\t\t\t\t\t\t\tif (latestLibraryQuery!= null) {\n\t\t\t\t\t\t\t\t\treturn Mono.just(latestLibraryQuery.getDsl());\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn Mono.error(new RuntimeException(\"No library query found for ID: \" + libraryQueryId));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n}", "CodeBleu_score": 44.52554580517607}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\teturn libraryQueryRepository.findById(libraryQueryId)\n.flatMap(libraryQuery -> {\nif (libraryQuery.getDsl()!= null) {\nreturn Mono.just(libraryQuery.getDsl());\n} else {\nreturn libraryQueryService.getDSL(libraryQueryId)\n.map(dsl -> {\nlibraryQuery.setDsl(dsl);\nreturn dsl;\n});\n}\n})\n.switchIfEmpty(deferredError(LIBRARY_QUERY_NOT_FOUND, \"LIBRARY_QUERY_NOT_FOUND\"));\n}", "CodeBleu_score": 45.7142600812083}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDetermine the timeout duration based on the timeoutStr parameter\n        Duration timeoutDuration = Duration.ofMillis(10000);\n        if (timeoutStr!= null) {\n            try {\n                timeoutDuration = Duration.ofMillis(Long.parseLong(timeoutStr));\n            } catch (NumberFormatException e) {\n                log.warn(\"Failed to parse timeoutStr: \" + timeoutStr + \" to long. Using default timeout duration\");\n            }\n        }\n// 2. Defer the query execution based on the datasource type\n        if (datasourceMetaInfoService.isNodeJsDatasource(datasource.getType())) {\n            return executeByNodeJs(datasource, queryConfig, requestParams)\n                   .timeout(timeoutDuration)\n                   .onErrorMap(TimeoutException.class, e -> new PluginException(PluginError.PLUGIN_ERROR_CODE_TIMEOUT_ERROR, \"Query execution timed out\"))\n                   .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getMessage())))\n                   .onErrorResume(e -> Mono.just(QueryExecutionResult.error(\"Failed to execute query: \" + e.getMessage())));\n        } else {\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                   .timeout(timeoutDuration)\n                   .onErrorMap(TimeoutException.class, e -> new PluginException(PluginError.PLUGIN_ERROR_CODE_TIMEOUT_ERROR, \"Query execution timed out\"))\n                   .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getMessage())))\n                   .onErrorResume(e -> Mono.just(QueryExecutionResult.error(\"Failed to execute query: \" + e.getMessage())));\n        }\n    }", "CodeBleu_score": 48.660245395643805}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t the timeout duration based on the timeoutStr parameter\n        Duration timeoutDuration = Duration.ofSeconds(Long.parseLong(timeoutStr));\n\n// Determine the execution type based on the datasource type\n        Mono<QueryExecutionResult> executionMono;\n        if (DatasourceType.PLUGIN.equals(datasource.getType())) {\n            executionMono = executeByNodeJs(datasource, queryConfig, requestParams);\n        } else {\n            executionMono = executeLocally(datasource, queryConfig, requestParams, queryVisitorContext);\n        }\n\n// Defer the execution and handle timeout exceptions\n        return executionMono.timeout(timeoutDuration)\n               .onErrorResume(TimeoutException.class, ex -> {\n                    String message = String.format(\"Query execution timed out after %s seconds.\", timeoutDuration.getSeconds());\n                    return Mono.just(QueryExecutionResult.error(new PluginException(PluginErrorCode.PLUGIN_QUERY_EXECUTION_TIMEOUT, message)));\n                })\n               .onErrorResume(PluginException.class, ex -> {\n                    String message = String.format(\"Query execution failed with error: %s\", ex.getMessage());\n                    return Mono.just(QueryExecutionResult.error(new PluginException(PluginErrorCode.PLUGIN_QUERY_EXECUTION_ERROR, message)));\n                })\n               .onErrorResume(Exception.class, ex -> {\n                    logger.error(\"Error while executing query\", ex);\n                    return Mono.just(QueryExecutionResult.error(new PluginException(PluginErrorCode.PLUGIN_QUERY_EXECUTION_ERROR, \"Error while executing query\")));\n                });\n    }", "CodeBleu_score": 48.435927079162276}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\tDetermine the timeout duration\n        Duration timeout = Duration.ofSeconds(10);\n        try {\n            timeout = Duration.parse(timeoutStr);\n        } catch (Exception e) {\n            log.error(\"Failed to parse timeout string\", e);\n        }\n\n// 2. Execute the query based on the datasource type\n        if (datasource.getType().equals(DatasourceType.NODEJS.name())) {\n            return executeByNodeJs(datasource, queryConfig, requestParams)\n                   .timeout(timeout)\n                   .onErrorResume(TimeoutException.class, e -> Mono.error(new PluginException(PluginExceptionType.TIMEOUT, \"Query execution timed out\")))\n                   .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getMessage())))\n                   .onErrorResume(e -> {\n                        log.error(\"Failed to execute query on datasource with type NODEJS\", e);\n                        return Mono.just(QueryExecutionResult.error(\"Failed to execute query\"));\n                    });\n        } else {\n            return executeLocally(datasource, queryConfig, requestParams, queryVisitorContext)\n                   .timeout(timeout)\n                   .onErrorResume(TimeoutException.class, e -> Mono.error(new PluginException(PluginExceptionType.TIMEOUT, \"Query execution timed out\")))\n                   .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getMessage())))\n                   .onErrorResume(e -> {\n                        log.error(\"Failed to execute query on datasource with type {}\", datasource.getType(), e);\n                        return Mono.just(QueryExecutionResult.error(\"Failed to execute query\"));\n                    });\n        }\n    }", "CodeBleu_score": 46.19637346484507}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// Get the query executor for the datasource\n\tQueryExecutor queryExecutor = getQueryExecutor(datasource);\n\tif (queryExecutor == null) {\n\t\treturn Mono.error(new RuntimeException(\"No query executor found for datasource type: \" + datasource.getType()));\n\t}\n\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n\t// Acquire a connection from the datasource connection pool\n\treturn datasource.getConnection()\n\t\t\t.flatMap(connection -> {\n\t\t\t\t// Execute the query using the connection\n\t\t\t\treturn queryExecutor.execute(queryExecutionContext, connection);\n\t\t\t})\n\t\t\t.onErrorResume(throwable -> {\n\t\t\t\t// Handle any errors that occur during execution\n\t\t\t\tlog.error(\"Error executing query locally\", throwable);\n\t\t\t\treturn Mono.error(new RuntimeException(\"Error executing query locally\", throwable));\n\t\t\t});\n}", "CodeBleu_score": 40.462282916598966}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\t// Retrieve the appropriate query executor based on the datasource type\n\tQueryExecutor queryExecutor = queryExecutorRegistry.getQueryExecutor(datasource.getType());\n\t// Build the query execution context\n\tQueryExecutionContext queryExecutionContext = queryExecutionContextFactory.buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\t// Acquire a connection from the datasource connection pool\n\treturn datasourceConnectionPool.acquireConnection(datasource)\n\t\t\t// Execute the query using the connection\n\t\t\t.flatMap(connection -> queryExecutor.execute(connection, queryExecutionContext))\n\t\t\t// Handle any errors that occur during execution\n\t\t\t.onErrorResume(throwable -> {\n\t\t\t\t// Log the error\n\t\t\t\tlog.error(\"Error executing query locally\", throwable);\n\t\t\t\t// Return an error response\n\t\t\t\treturn Mono.just(QueryExecutionResult.error(throwable.getMessage()));\n\t\t\t});\n}", "CodeBleu_score": 46.28052320451946}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t\n// Get the query executor for the datasource type\n    QueryExecutor queryExecutor = queryExecutorFactory.getQueryExecutor(datasource.getType());\n\n// Build the query execution context\n    QueryExecutionContext queryExecutionContext = buildQueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n// Acquire a connection from the datasource connection pool\n    return datasource.getConnection()\n           .flatMap(connection -> {\n                try {\n                    // Execute the query using the connection\n                    return queryExecutor.execute(connection, queryExecutionContext);\n                } catch (Exception e) {\n                    // Handle any errors that occur during execution\n                    return Mono.error(e);\n                }\n            })\n           .onErrorResume(throwable -> Mono.error(new QueryExecutionException(throwable.getMessage(), throwable)));\n}", "CodeBleu_score": 49.76484990442335}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tf (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\ttry {\n\t\tPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n\t\tint valueIndex = unitInfo.getSecond();\n\t\tif (valueIndex == -1) {\n\t\t\tthrow new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr);\n\t\t}\n\t\tString valueStr = timeoutStr.substring(0, valueIndex);\n\t\tdouble value = Double.parseDouble(valueStr);\n\t\tint ms = convertToMs(value, unitInfo.getFirst());\n\t\tif (ms > MAX_QUERY_TIMEOUT_MS) {\n\t\t\tthrow new IllegalArgumentException(\"Query timeout cannot exceed \" + MAX_QUERY_TIMEOUT_MS + \"ms\");\n\t\t}\n\t\treturn ms;\n\t} catch (NumberFormatException e) {\n\t\tthrow new IllegalArgumentException(\"Invalid timeout string: \" + timeoutStr, e);\n\t}\n}", "CodeBleu_score": 47.91823435874729}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MS;\n}\nPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\nif (unitInfo.getRight() == -1) {\nthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n}\nint value = convertToMs(Double.parseDouble(timeoutStr.substring(0, unitInfo.getRight())), unitInfo.getLeft());\nif (value < 0) {\nthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n}\nif (value > MAX_QUERY_TIMEOUT_MS) {\nthrow new IllegalArgumentException(\"Query timeout too large: \" + timeoutStr);\n}\nreturn value;\n}", "CodeBleu_score": 42.81575128933757}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tf (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MS;\n\t}\n\tPair<String, Integer> unitInfo = getUnitInfo(timeoutStr);\n\tint unitIndex = unitInfo.getSecond();\n\tif (unitIndex == -1) {\n\t\tthrow new IllegalArgumentException(\"Invalid query timeout: \" + timeoutStr);\n\t}\n\tString unit = unitInfo.getFirst();\n\tString valueStr = timeoutStr.substring(0, unitIndex);\n\tdouble value = Double.parseDouble(valueStr);\n\tint timeoutMs = convertToMs(value, unit);\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_MS) {\n\t\tthrow new IllegalArgumentException(\"Query timeout exceeds the maximum allowed timeout: \" + timeoutStr);\n\t}\n\treturn timeoutMs;\n}", "CodeBleu_score": 51.943474795450264}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t// Get the live queries from the given application\nList<Query> liveQueries = application.getLiveQueries();\n\n// If no queries are found, return an error\nif (liveQueries.isEmpty()) {\n    return Mono.error(new RuntimeException(\"No queries found in application.\"));\n}\n\n// Get the datasource IDs from the live queries\nList<String> datasourceIds = liveQueries.stream()\n       .map(Query::getDatasourceId)\n       .collect(Collectors.toList());\n\n// Copy each datasource to the current organization\nreturn Flux.fromIterable(datasourceIds)\n       .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n               .map(newDatasourceId -> Pair.of(datasourceId, newDatasourceId)))\n       .collectList();\n}", "CodeBleu_score": 62.2911674605111}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t// get live queries from the application\nreturn applicationService.getLiveQueries(application.getId())\n       .flatMap(liveQueries -> {\n            // extract datasource IDs from the live queries\n            List<String> datasourceIds = liveQueries.stream()\n                   .map(liveQuery -> liveQuery.getDatasourceId())\n                   .distinct()\n                   .collect(Collectors.toList());\n\n            // if no queries are found, return an error\n            if (datasourceIds.isEmpty()) {\n                return Mono.error(new RuntimeException(\"No queries found in the application\"));\n            }\n\n            // copy each datasource to the current organization\n            return Flux.fromIterable(datasourceIds)\n                   .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId))\n                   .collectList()\n                   .map(copiedDatasourceIds -> {\n                        // create a list of original and copied datasource ID pairs\n                        List<Pair<String, String>> datasourceIdPairs = new ArrayList<>();\n                        for (int i = 0; i < datasourceIds.size(); i++) {\n                            datasourceIdPairs.add(new Pair<>(datasourceIds.get(i), copiedDatasourceIds.get(i)));\n                        }\n                        return datasourceIdPairs;\n                    });\n        });\n}", "CodeBleu_score": 49.00107691115244}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\treturn queryService.getQueries(application.getId())\n           .flatMap(queries -> {\n                if (queries.isEmpty()) {\n                    return Mono.error(new NotFoundException(\"No queries found in application \" + application.getId()));\n                }\n\n                List<String> datasourceIds = queries.stream()\n                       .map(Query::getDatasourceId)\n                       .distinct()\n                       .collect(Collectors.toList());\n\n                return Flux.fromIterable(datasourceIds)\n                       .flatMap(datasourceId -> doCopyDatasource(currentOrganizationId, datasourceId, visitorId)\n                               .map(newDatasourceId -> Pair.of(datasourceId, newDatasourceId)))\n                       .collectList();\n            });\n}", "CodeBleu_score": 57.86615904963745}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.get(datasourceId)\n\n       .flatMap(datasource -> {\n            if (DatasourceType.SYSTEM_STATIC.equals(datasource.getType())) {\n                return Mono.just(datasourceId);\n            } else if (DatasourceType.LEGACY_QUICK_REST_API.equals(datasource.getType())) {\n                return Mono.just(LEGACY_QUICK_REST_API_DATASOURCE_ID);\n            } else if (DatasourceType.LEGACY_OPENBLOCKS_API.equals(datasource.getType())) {\n                return Mono.just(LEGACY_OPENBLOCKS_API_DATASOURCE_ID);\n            } else {\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            }\n        });\n}", "CodeBleu_score": 43.85529223448447}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.get(datasourceId)\n   .flatMap(datasource -> {\n        if (DatasourceType.SYSTEM_STATIC.equals(datasource.getType())) {\n            return Mono.just(datasourceId);\n        } else if (DatasourceType.QUICK_REST_API.equals(datasource.getType()) || DatasourceType.OPENBLOCKS_API.equals(datasource.getType())) {\n            return Mono.just(datasource.getDetailConfig().get(\"datasourceId\").toString());\n        } else {\n            return createNewDatasourceFrom(organizationId, visitorId, datasource);\n        }\n    });\n}", "CodeBleu_score": 49.480605713489254}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\teturn datasourceService.findById(datasourceId)\n\n       .flatMap(datasource -> {\n            if (DatasourceType.SYSTEM_STATIC.equals(datasource.getType())) {\n                return Mono.just(datasourceId);\n            } else if (DatasourceType.LEGACY_QUICK_REST_API.equals(datasource.getType())) {\n                return Mono.just(DatasourceId.LEGACY_QUICK_REST_API.getId());\n            } else if (DatasourceType.LEGACY_OPENBLOCKS.equals(datasource.getType())) {\n                return Mono.just(DatasourceId.LEGACY_OPENBLOCKS.getId());\n            } else {\n                return createNewDatasourceFrom(organizationId, visitorId, datasource);\n            }\n        });\n}", "CodeBleu_score": 52.51313461096254}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return uploadAvatar(filePart)\n.flatMap(newAvatar -> {\n if (user.getAvatar()!= null) {\n return removeOldAvatar(user.getAvatar())\n.then(updateUserAvatar(newAvatar, user.getId()));\n } else {\n return updateUserAvatar(newAvatar, user.getId());\n }\n });\n }", "CodeBleu_score": 20.912041562743195}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return uploadAvatar(filePart)\n.flatMap(asset -> {\n if (user.getAvatar()!= null) {\n return removeUserAvatar(user.getAvatar())\n.then(updateUserAvatar(asset, user.getId()));\n } else {\n return updateUserAvatar(asset, user.getId());\n }\n });\n }", "CodeBleu_score": 19.374137381861647}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t return uploadFile(filePart)\n.flatMap(newAvatar -> removeUserAvatar(user)\n.flatMap(removed -> updateUserAvatar(newAvatar, user.getId())));\n }", "CodeBleu_score": 15.163985001465052}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tturn Mono.just(authUser)\n\t\t\t.map(a -> {\n\t\t\t\tUser user = new User();\n\t\t\t\tuser.setName(a.getName());\n\t\t\t\tuser.setState(a.getState());\n\t\t\t\tuser.setEnabled(a.isEnabled());\n\t\t\t\tuser.setAvatarLink(a.getAvatarLink());\n\t\t\t\tif (a.getAuthSource().equals(AuthSource.email.name()) && a.getAuthContext().containsKey(\"password\")) {\n\t\t\t\t\tuser.setPassword(encryptionService.encryptPassword(a.getAuthContext().get(\"password\").toString()));\n\t\t\t\t}\n\t\t\t\tuser.setConnections(a.getConnections());\n\t\t\t\tuser.setNew(true);\n\t\t\t\treturn user;\n\t\t\t})\n\t\t\t.flatMap(repository::save);\n}", "CodeBleu_score": 36.672452208197306}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tturn Mono.just(authUser)\n\t\t.map(this::createUserFromAuthUser)\n\t\t.map(this::setPassword)\n\t\t.map(this::createConnectionsFromAuthUser)\n\t\t.map(this::markAsNew)\n\t\t.flatMap(repository::save);\n}", "CodeBleu_score": 5.868544715904754}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\ter user = new User();\n\tuser.setName(authUser.getName());\n\tuser.setState(User.State.ACTIVE);\n\tuser.setEnabled(true);\n\tuser.setAvatarLink(authUser.getAvatarLink());\n\tif (authUser.getAuthSource() == AuthUser.AuthSource.EMAIL && authUser.getAuthContext()!= null) {\n\t\tuser.setPassword(encryptionService.encryptPassword(authUser.getAuthContext().get(\"password\").toString()));\n\t}\n\tuser.setConnections(authUser.getConnections());\n\tuser.setNew(true);\n\treturn create(user);\n}", "CodeBleu_score": 36.35568341739495}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn userRepository.findByEmail(email)\n\t\t.flatMap(existingUser -> Mono.error(new DuplicateKeyException(\"Email already in use\")))\n\t\t.switchIfEmpty(userRepository.save(user.addConnection(email)))\n\t\t.map(savedUser -> true);\n}", "CodeBleu_score": 12.93312120717175}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn emailSource.findByEmail(email)\n\t\t.flatMap(emailSource -> {\n\t\t\tuser.getConnections().add(new Connection(emailSource));\n\t\t\treturn userRepository.save(user);\n\t\t})\n\t\t.flatMap(user -> Mono.just(true))\n\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.just(false))\n\t\t.onErrorResume(e -> Mono.error(new RuntimeException(\"Unable to bind email\")));\n}", "CodeBleu_score": 23.706803586985913}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t\treturn this.emailSource.findUserByEmail(email)\n\t\t.flatMap(existingUser -> {\n\t\t\tif (existingUser.getId()!= user.getId()) {\n\t\t\t\treturn Mono.error(new DuplicateKeyException(\"Email already in use\"));\n\t\t\t} else {\n\t\t\t\treturn Mono.just(existingUser);\n\t\t\t}\n\t\t})\n\t\t.defaultIfEmpty(user)\n\t\t.flatMap(existingUser -> {\n\t\t\tif (existingUser == user) {\n\t\t\t\tuser.addConnection(new Connection(email, emailSource.getProvider()));\n\t\t\t\treturn this.userRepository.save(user);\n\t\t\t} else {\n\t\t\t\treturn Mono.just(existingUser);\n\t\t\t}\n\t\t})\n\t\t.map(updatedUser -> {\n\t\t\tif (updatedUser == user) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n}", "CodeBleu_score": 27.874334731204353}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n   .map(user -> {\n        if (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\n            throw new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD);\n        }\n        user.setPassword(encryptionService.encryptPassword(newPassword));\n        return user;\n    })\n   .flatMap(repository::save)\n   .thenReturn(true);\n}", "CodeBleu_score": 29.182920800731964}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n.flatMap(user -> {\nif (!encryptionService.isPasswordValid(user.getPassword(), oldPassword)) {\nreturn Mono.error(new BizException(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\", FieldName.PASSWORD));\n}\nreturn setPassword(userId, newPassword);\n})\n.thenReturn(true);\n}", "CodeBleu_score": 16.486134834015957}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\turn findById(userId)\n   .flatMap(user -> {\n        if (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\n            return Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.PASSWORD));\n        }\n\n        user.setPassword(encryptionService.encryptPassword(newPassword));\n        return repository.save(user);\n    })\n   .thenReturn(true);\n}", "CodeBleu_score": 24.963796601057602}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tturn groupService.getGroupsForMember(orgMember)\n\t\t\t.filter(group ->!withoutDynamicGroups ||!group.isDynamic())\n\t\t\t.filter(group ->!group.isAllUsersGroup())\n\t\t\t.map(group -> {\n\t\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\t\tgroupMap.put(\"id\", group.getId());\n\t\t\t\tgroupMap.put(\"name\", group.getName(locale));\n\t\t\t\treturn groupMap;\n\t\t\t})\n\t\t\t.collectList();\n}", "CodeBleu_score": 25.201709738296074}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tturn userGroupService.getGroupsByUserId(userId)\n\t\t\t.filter(group ->!group.isAllUsersGroup())\n\t\t\t.filter(group ->!withoutDynamicGroups ||!group.isDynamic())\n\t\t\t.filter(group -> {\n\t\t\t\tif (orgMember.isAdmin()) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn group.isDynamic() || orgMember.getGroups().contains(group.getId());\n\t\t\t})\n\t\t\t.map(group -> {\n\t\t\t\tMap<String, String> groupMap = new HashMap<>();\n\t\t\t\tgroupMap.put(GROUP_ID, group.getId());\n\t\t\t\tgroupMap.put(GROUP_NAME, group.getName(locale));\n\t\t\t\treturn groupMap;\n\t\t\t})\n\t\t\t.collectList();\n}", "CodeBleu_score": 30.601749333473}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\tturn groupService.getGroups(userId, orgMember, withoutDynamicGroups)\n           .filter(group ->!group.getId().equals(ALL_USERS_GROUP_ID))\n           .map(group -> {\n                Map<String, String> groupMap = new HashMap<>();\n                groupMap.put(GROUP_ID_KEY, group.getId());\n                groupMap.put(GROUP_NAME_KEY, group.getName(locale));\n                return groupMap;\n            })\n           .collectList();\n}", "CodeBleu_score": 26.278598743467068}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId);\n\tuserStatus.setHasShowNewUserGuidance(true);\n\treturn mongoUpsertHelper.upsert(userStatus, UserStatus.class, UserStatus::getUserId);\n}", "CodeBleu_score": 33.43278731727198}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\tUserStatus userStatus = new UserStatus(userId, true);\n\treturn mongoUpsertHelper.upsert(userStatus);\n}", "CodeBleu_score": 27.225741869732705}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t\treturn mongoUpsertHelper.upsert(\n\t\t\tUserStatus.class,\n\t\t\tnew Query(Criteria.where(\"userId\").is(userId)),\n\t\t\tnew Update().set(\"hasShowNewUserGuidance\", true),\n\t\t\tUserStatus.class)\n\t\t\t.map(updateResult -> updateResult.getModifiedCount() > 0);\n}", "CodeBleu_score": 22.27453234911203}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\tfor _, p := range c.partitions {\n\t\tif predicatePartition(p.Name(), p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\twg.Done()\n\t\t\t}(p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 36.213971458625586}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar wg sync.WaitGroup\n\tfor _, partition := range c.partitions {\n\t\tif predicatePartition(partition.Name(), partition) {\n\t\t\twg.Add(1)\n\t\t\tgo func(p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(partition)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 36.16684897368904}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"partition predicate cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"value predicate cannot be nil\")\n\t}\n\tvar wg sync.WaitGroup\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\twg.Add(1)\n\t\t\tgo func(k string, p PartitionManager) {\n\t\t\t\tdefer wg.Done()\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t}(k, p)\n\t\t}\n\t}\n\twg.Wait()\n}", "CodeBleu_score": 41.550018795279385}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn maxItemsTotal / averageWeightPerPartition\n}", "CodeBleu_score": 30.931659145910096}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn maxItemsTotal * averageWeightPerPartition\n}", "CodeBleu_score": 30.86747161432175}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := totalWeightQuantity / numPartitions\n\treturn maxItemsTotal / avgWeightPerPartition\n}", "CodeBleu_score": 30.970899024004204}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tthis.getConnectionMetadata().subscribe(metadata -> {\n\t\tif (metadata!= null) {\n\t\t\tmap.put(\"database\", metadata.getDatabaseProductName());\n\t\t\tmap.put(\"version\", metadata.getDatabaseProductVersion());\n\t\t}\n\t});\n\treturn map;\n}", "CodeBleu_score": 38.577395649172765}, {"code": "public Map<String, Object> contributorMap(){\n\t\treturn this.getConnectionMetadata()\n\t\t.map(metadata -> {\n\t\t\tMap<String, Object> map = new HashMap<>();\n\t\t\tif (metadata!= null) {\n\t\t\t\tmap.put(\"database\", metadata.getDatabaseProductName());\n\t\t\t\tmap.put(\"version\", metadata.getDatabaseProductVersion());\n\t\t\t}\n\t\t\treturn map;\n\t\t})\n\t\t.block();\n}", "CodeBleu_score": 40.27849119501513}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tConnectionMetadata metadata = this.getConnectionMetadata().block();\n\tif (metadata!= null) {\n\t\tcontributorMap.put(\"database\", metadata.getDatabaseProductName());\n\t\tcontributorMap.put(\"version\", metadata.getDatabaseProductVersion());\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 47.45941680577015}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// Get the user settings from the configuration map\n\tMap<String, Object> userSettings = (Map<String, Object>) configMap.get(USER_SETTINGS);\n\n\t// If the user settings are null, disable registration and email verification\n\tif (userSettings == null) {\n\t\tinfo.setRegistrationEnabled(false);\n\t\tinfo.setEmailVerificationEnabled(false);\n\t} else {\n\t\t// Update the GlobalInfo object with the retrieved settings for registration and email verification\n\t\tinfo.setRegistrationEnabled(Boolean.parseBoolean(userSettings.get(REGISTRATION_ENABLED).toString()));\n\t\tinfo.setEmailVerificationEnabled(Boolean.parseBoolean(userSettings.get(EMAIL_VERIFICATION_ENABLED).toString()));\n\t}\n}", "CodeBleu_score": 45.43314651910394}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\tMap<String, Object> userSettings = configMap.get(GlobalInfo.USER_SETTINGS);\n\tif (userSettings == null) {\n\t\tinfo.setRegistrationEnabled(false);\n\t\tinfo.setEmailVerificationEnabled(false);\n\t} else {\n\t\tinfo.setRegistrationEnabled(Boolean.parseBoolean(userSettings.get(GlobalInfo.REGISTRATION_ENABLED).toString()));\n\t\tinfo.setEmailVerificationEnabled(Boolean.parseBoolean(userSettings.get(GlobalInfo.EMAIL_VERIFICATION_ENABLED).toString()));\n\t}\n}", "CodeBleu_score": 37.71485946127305}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t\t// Get the user settings from the configuration map\n\tdef userSettings = configMap.get(\"userSettings\")\n\n\t// If the user settings are null, disable registration and email verification on registration in the GlobalInfo object\n\tif (userSettings == null) {\n\t\tinfo.setRegistrationEnabled(false)\n\t\tinfo.setRegistrationEmailVerificationEnabled(false)\n\t} else {\n\t\t// Update the GlobalInfo object with the retrieved settings for registration and email verification\n\t\tinfo.setRegistrationEnabled(userSettings.get(\"registrationEnabled\") == \"true\")\n\t\tinfo.setRegistrationEmailVerificationEnabled(userSettings.get(\"registrationEmailVerificationEnabled\") == \"true\")\n\t}\n}", "CodeBleu_score": 30.94047485237531}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThreadGroup restartGroup = new ThreadGroup(\"restart\");\n\tThread restartThread = new Thread(restartGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\t\t\trestart();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"restarting\";\n}", "CodeBleu_score": 39.18281077734296}, {"code": "public Object restart(){\n\t\t// Create a new thread group and thread to execute the restart process\n\tThreadGroup threadGroup = new ThreadGroup(\"Restart\");\n\tThread restartThread = new Thread(threadGroup, new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\t// Set the thread as non-daemon and assign the application class loader as its context class loader\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\n\t\t\t\t// Restart the application\n\t\t\t\trestartApplication();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Start the restart thread\n\trestartThread.start();\n\n\t// Return a message indicating the restart has begun\n\treturn \"Restart initiated\";\n}", "CodeBleu_score": 42.93256641343568}, {"code": "public Object restart(){\n\t\tThreadGroup restartGroup = new ThreadGroup(\"RestartGroup\");\n\tThread restartThread = new Thread(restartGroup, new Runnable() {\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(getClass().getClassLoader());\n\t\t\t\trestartApplication();\n\t\t\t} catch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t});\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"Restarting application...\";\n}", "CodeBleu_score": 44.30276677809769}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n}", "CodeBleu_score": 46.654924134376564}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n configurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n }", "CodeBleu_score": 47.02052549432227}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t\tconfigurer.defaultCodecs().jackson2JsonDecoder(objectMapper);\n\tconfigurer.defaultCodecs().jackson2JsonEncoder(objectMapper);\n}", "CodeBleu_score": 46.654924134376564}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/console/**\")\n\t\t\t.and(RequestPredicates.path(\"/console/assets/**\").negate())\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.header(HttpHeaders.CONNECTION, \"Upgrade\").negate()),\n\t\tthis::serveIndex);\n}", "CodeBleu_score": 23.335005796805692}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/console/**\").and(RequestPredicates.path(\"/console/assets/**\").negate())\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML)).and(RequestPredicates.header(\"Upgrade\").negate()),\n\t\tthis::serveIndex\n\t);\n}", "CodeBleu_score": 22.70171234214636}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\teturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/console/**\")\n\t\t\t.and(RequestPredicates.path(\"/console/assets/**\").negate())\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.header(\"Upgrade\").negate()),\n\t\tthis::serveIndex\n\t);\n}", "CodeBleu_score": 22.78410620026106}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.path(\"/uc/assets/**\").negate())\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.header(HttpHeaders.CONNECTION, \"Upgrade\").negate()),\n\t\tthis::serveIndex\n\t);\n}", "CodeBleu_score": 23.142023636580163}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\teturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.path(\"/uc/assets/**\").negate())\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.header(\"Upgrade\").negate()),\n\t\trequest -> serveIndex(request, \"classpath:/static/uc/index.html\"));\n}", "CodeBleu_score": 24.796542957676802}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tar ucIndexLocation = \"/uc/index.html\";\n\treturn RouterFunctions.route(\n\t\tRequestPredicates.GET(\"/uc/**\")\n\t\t\t.and(RequestPredicates.path(\"/uc/assets/**\").negate())\n\t\t\t.and(RequestPredicates.accept(MediaType.TEXT_HTML))\n\t\t\t.and(RequestPredicates.header(\"Upgrade\").negate()),\n\t\trequest -> serveIndex(ucIndexLocation)\n\t);\n}", "CodeBleu_score": 25.765995095401777}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tdef sessionRepository = new ReactiveMapSessionRepository(new ConcurrentHashMap())\n\tsessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(sessionConfig.timeout))\n\treturn sessionRepository\n}", "CodeBleu_score": 19.37299932774809}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\t// Create a new reactive session repository with a concurrent hash map\n\tReactiveIndexedSessionRepository<MapSession> sessionRepository = new ReactiveIndexedSessionRepository<>(new ConcurrentHashMap<>());\n\n\t// Configure the session timeout based on properties from the session and server configurations\n\tsessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(sessionProperties.getTimeout()));\n\tsessionRepository.setCleanupInterval(Duration.ofSeconds(serverProperties.getShutdown().getTimeout().getSeconds()));\n\n\t// Return the configured repository\n\treturn sessionRepository;\n}", "CodeBleu_score": 37.15687485096409}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t\tdef sessionRepository = new MapReactiveSessionRepository<MapSession>(new ConcurrentHashMap())\n\tsessionRepository.setDefaultMaxInactiveInterval(Duration.ofSeconds(sessionConfig.maxInactiveInterval))\n\treturn sessionRepository\n}", "CodeBleu_score": 21.56314828485671}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n\tuserDetailsService.setUserService(userService)\n\tuserDetailsService.setRoleService(roleService)\n\tuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.security.twoFactorAuthentication.enabled)\n\treturn userDetailsService\n}", "CodeBleu_score": 31.57755636028835}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService)\n\tuserDetailsService.setTwoFactorAuthenticationEnabled(haloProperties.security.twoFactorAuthentication.enabled)\n\treturn userDetailsService\n}", "CodeBleu_score": 33.5003558288269}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t\tDefaultUserDetailService userDetailsService = new DefaultUserDetailService()\n\tuserDetailsService.userService = userService\n\tuserDetailsService.roleService = roleService\n\tuserDetailsService.twoFactorAuthenticationEnabled = haloProperties.security.twoFactorAuthentication.enabled\n\tuserDetailsService\n}", "CodeBleu_score": 28.408632354077064}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setEmail(email);\n\towner.setDisplayName(displayName);\n\towner.setAvatar(new Comment.CommentOwner.Avatar());\n\towner.setWebsite(new Comment.CommentOwner.Website());\n\treturn owner;\n}", "CodeBleu_score": 28.441977107934562}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setEmail(email);\n\towner.setDisplayName(displayName);\n\towner.setAvatar(new Comment.CommentOwner.Avatar());\n\towner.setWebsite(new Comment.CommentOwner.Website());\n\treturn owner;\n}", "CodeBleu_score": 28.441977107934562}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t\tComment.CommentOwner owner = new Comment.CommentOwner();\n\towner.setKind(\"email\");\n\towner.setDisplayName(getDisplayName());\n\towner.setEmail(getEmail()!= null? getEmail() : \"\");\n\towner.setAvatar(new Comment.CommentOwner.Avatar());\n\towner.setWebsite(new Comment.CommentOwner.Website());\n\treturn owner;\n}", "CodeBleu_score": 26.07979841069204}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.kind == \"email\") {\n\t\tUser user = fetchUser(post.owner.id);\n\t\treturn user.email == commentOwner.name;\n\t} else {\n\t\treturn commentOwner.name == post.owner.name;\n\t}\n}", "CodeBleu_score": 15.621457083414889}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.kind == \"email\") {\n\t\tUser user = getUserByEmail(commentOwner.name);\n\t\treturn user.name == post.owner.name;\n\t} else {\n\t\treturn commentOwner.name == post.owner.name;\n\t}\n}", "CodeBleu_score": 15.736948310140459}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t\tif (commentOwner.kind == \"identity\") {\n\t\treturn commentOwner.name == post.owner;\n\t} else if (commentOwner.kind == \"email\") {\n\t\tUser user = fetchUser(post.owner);\n\t\treturn user.email == commentOwner.name;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 16.647083586807966}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\ttOptions listOptions = new ListOptions();\n\n// Build field selector\nList<String> fields = new ArrayList<>();\nfor (String field : fieldSelectors) {\n    fields.add(field);\n}\n\n// Add keyword and owner name conditions\nif (StringUtils.isNotBlank(keyword)) {\n    fields.add(\"name\");\n    fields.add(\"description\");\n    listOptions.addCondition(new Condition(\"name\", Condition.Operator.LIKE, \"%\" + keyword + \"%\"));\n    listOptions.addCondition(new Condition(\"description\", Condition.Operator.LIKE, \"%\" + keyword + \"%\"));\n}\nif (StringUtils.isNotBlank(ownerName)) {\n    listOptions.addCondition(new Condition(\"ownerName\", Condition.Operator.EQUAL, ownerName));\n}\n\n// Set field selector in ListOptions\nif (!fields.isEmpty()) {\n    listOptions.setFields(fields);\n}\n\nreturn listOptions;\n}", "CodeBleu_score": 27.193114676155766}, {"code": "public ListOptions toListOptions(){\n\tstOptions listOptions = new ListOptions();\n\tlistOptions.setLabelSelector(getLabelSelector());\n\tlistOptions.setFieldSelector(getFieldSelector());\n\tif (StringUtils.isNotBlank(getKeyword())) {\n\t\tlistOptions.addCondition(new Condition(Condition.Operator.LIKE, \"name\", \"%\" + getKeyword() + \"%\"));\n\t}\n\tif (StringUtils.isNotBlank(getOwnerName())) {\n\t\tlistOptions.addCondition(new Condition(Condition.Operator.EQ, \"ownerName\", getOwnerName()));\n\t}\n\tif (StringUtils.isNotBlank(getOwnerKind())) {\n\t\tlistOptions.addCondition(new Condition(Condition.Operator.EQ, \"ownerKind\", getOwnerKind()));\n\t}\n\treturn listOptions;\n}", "CodeBleu_score": 22.554827854202543}, {"code": "public ListOptions toListOptions(){\n\ttOptions options = new ListOptions();\n\n// Build field selector\nStringBuilder fieldSelector = new StringBuilder();\nfor (String selector : fieldSelectors) {\n    if (fieldSelector.length() > 0) {\n        fieldSelector.append(\",\");\n    }\n    fieldSelector.append(selector);\n}\noptions.fieldSelector(fieldSelector.toString());\n\n// Add conditions based on keyword and owner name\nif (StringUtils.isNotBlank(keyword)) {\n    options.addCondition(new ConditionBuilder().withField(\"name\").contains(keyword).build());\n}\nif (StringUtils.isNotBlank(ownerName)) {\n    options.addCondition(new ConditionBuilder().withField(\"owner.name\").equals(ownerName).build());\n}\n\nreturn options;\n}", "CodeBleu_score": 25.887790746587815}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\tif (commentName == null) {\n\t\treturn Mono.empty();\n\t}\n\treturn counterRepository.findById(commentName)\n\t\t\t.map(counter -> new CommentStats(commentName, counter.getUpvotes()));\n}", "CodeBleu_score": 33.25076737589274}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t\t.flatMap(name -> redisTemplate.opsForValue().get(name))\n\t\t\t.map(counter -> new CommentStats(commentName, counter.intValue()));\n}", "CodeBleu_score": 31.87178600095253}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t\treturn Mono.justOrEmpty(commentName)\n\t\t.flatMap(name -> counterRepository.findById(name))\n\t\t.map(counter -> new CommentStats(commentName, counter.getUpvotes()));\n}", "CodeBleu_score": 32.207189229042186}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription.Subscriber subscriber = createSubscriber(identity);\n\tif (subscriber == null) {\n\t\treturn;\n\t}\n\n\tInterestReason reason = new InterestReason();\n\treason.setReasonType(InterestReason.ReasonType.SOMEONE_REPLIED_TO_YOU);\n\treason.setCondition(new Condition(Condition.ConditionType.EQUALS, \"repliedOwner\", identity.name()));\n\n\tSubscription subscription = new Subscription();\n\tsubscription.setSubscriber(subscriber);\n\tsubscription.setInterestReason(reason);\n\n\ttry {\n\t\tSubscription.subscribe(subscription);\n\t} catch (InterruptedException e) {\n\t\t// Handle exception\n\t}\n}", "CodeBleu_score": 47.13697343268342}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription.Subscriber subscriber = createSubscriber(identity);\n\tif (subscriber == null) {\n\t\treturn;\n\t}\n\n\tSubscription.InterestReason reason = new Subscription.InterestReason();\n\treason.setReasonType(\"someone replied to you\");\n\treason.setCondition(String.format(\"repliedOwner == \\\"%s\\\"\", identity.name()));\n\n\tSubscription subscription = new Subscription();\n\tsubscription.setSubscriber(subscriber);\n\tsubscription.setInterestReasons(Collections.singletonList(reason));\n\n\tSubscription.SubscriptionResponse response = notificationCenter.subscribe(subscription);\n\tresponse.block();\n}", "CodeBleu_score": 49.67859375044603}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tSubscription.Subscriber subscriber = createSubscriber(identity);\n\tif (subscriber == null) {\n\t\treturn;\n\t}\n\n\t// Set up an interest reason for the subscription\n\tSubscription.InterestReason reason = new Subscription.InterestReason();\n\treason.setType(Subscription.InterestReason.Type.SOMEONE_REPLIED_TO_YOU);\n\treason.setCondition(new Subscription.Condition(Subscription.Condition.Type.OWNER_NAME, identity.name()));\n\n\t// Subscribe the user to the notification center\n\tSubscription subscription = new Subscription(subscriber, reason);\n\tnotificationCenter.subscribe(subscription).get();\n}", "CodeBleu_score": 53.92893923916392}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\turn updateCommentWithRetry(comment.getName(), c -> {\n\t\tc.setApproved(true);\n\t\tc.setApprovedAt(Instant.now());\n\t\treturn c;\n\t});\n}", "CodeBleu_score": 17.902261937390595}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\trn updateCommentWithRetry(comment.getName(), c -> {\nc.setApproved(true);\nc.setApprovedAt(OffsetDateTime.now());\nreturn c;\n});\n}", "CodeBleu_score": 17.793633689306272}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\trn updateCommentWithRetry(comment.getName(), c -> {\n    c.setApproved(true);\n    c.setApprovedAt(OffsetDateTime.now());\n    return c;\n});\n}", "CodeBleu_score": 18.580409101715926}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif (! $action instanceof MountableAction) {\n\t\treturn $action;\n\t}\n\n\t$action->livewire($this);\n\n\tif ($action instanceof HasRecord && $this instanceof HasRecord) {\n\t\t$action->record($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 74.5293784829549}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif (! $action instanceof MountableAction) {\n\t\treturn $action;\n\t}\n\n\t$action->associateWithLivewireComponent($this);\n\n\tif ($this instanceof HasRecord && $action instanceof HasRecord) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 72.76552663020682}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\n\tif ($action instanceof HasRecord && $this instanceof HasRecord) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 56.58294062505325}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->redirect($this->getSuccessRedirectUrl());\n\n\treturn $this;\n}", "CodeBleu_score": 19.218186566400085}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$this->redirect(\n\t\t$this->evaluate($this->getSuccessRedirectUrl())\n\t);\n\n\treturn $this;\n}", "CodeBleu_score": 23.235056240839878}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$url = $this->evaluate($this->getSuccessRedirectUrl());\n\n\tif (filled($url)) {\n\t\t$this->redirect($url);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 70.33444239442024}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (!$record) {\n\t\treturn;\n\t}\n\n\tif (!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModel = $record->tags()->getModel();\n\n\t$tagIds = $this->getTagIds($tagModel, $state);\n\n\t$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 22.021131668721775}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (empty($record)) {\n\t\treturn;\n\t}\n\n\tif (!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModelClass = $record->tags()->getRelated()->getMorphClass();\n\n\t$tagNames = array_map(function ($tag) {\n\t\treturn trim($tag);\n\t}, explode(',', $state['tags']));\n\n\t$tags = $tagModelClass::findOrCreate($tagNames);\n\n\t$record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 35.09007974603999}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t\tif (!$record ||!method_exists($record, 'tags')) {\n\t\treturn;\n\t}\n\n\t$tagModelClass = $record->tags()->getRelated();\n\n\t$tagNames = Arr::pluck($state, 'name');\n\n\t$tags = $tagModelClass::whereIn('name', $tagNames)->get();\n\n\t$tagIds = [];\n\n\tforeach ($tagNames as $tagName) {\n\t\t$tag = $tags->firstWhere('name', $tagName);\n\n\t\tif (!$tag) {\n\t\t\t$tag = $tagModelClass::create(['name' => $tagName]);\n\t\t}\n\n\t\t$tagIds[] = $tag->id;\n\t}\n\n\t$record->tags()->sync($tagIds);\n}", "CodeBleu_score": 37.22957620261014}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path to obtain the space path and repository name\n\tspacePath, repoName, err := dissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := authz.Scope{\n\t\tType:      authz.ScopeTypeSpace,\n\t\tInstance:  spacePath,\n\t\tName:      repoName,\n\t\tAttribute: authz.AttributeRepo,\n\t}\n\tresource := authz.Resource{\n\t\tType:      authz.ResourceTypePipeline,\n\t\tInstance:  pipelineIdentifier,\n\t\tAttribute: authz.AttributePipeline,\n\t}\n\n\t// Perform the permission check\n\terr = authorizer.Check(ctx, session, scope, resource, permission)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 57.056466010561394}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// dissect the repo path to obtain the space path and repo name\n\tspacePath, repoName, err := dissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// create a scope and resource for the pipeline\n\tscope := authz.Scope{\n\t\tType: authz.Space,\n\t\tName: spacePath,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.Pipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 58.64533941411205}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := util.GetSpaceRepoFromRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := authz.NewScope(authz.SpaceResourceType, spacePath)\n\tresource := authz.NewResource(authz.PipelineResourceType, pipelineIdentifier)\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 47.45372455222639}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif space == nil {\n\t\treturn nil\n\t}\n\t// Get the parent space and name\n\tparentSpace, name := space.GetParentSpaceAndName()\n\t// Create a scope and resource based on the parent space and name\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tName: parentSpace,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tName: name,\n\t}\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 62.323519992555966}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tspacePath := space.Path\n\tspacePath = strings.TrimPrefix(spacePath, \"/\")\n\tspacePath = strings.TrimSuffix(spacePath, \"/\")\n\tspacePathParts := strings.Split(spacePath, \"/\")\n\tspaceName := spacePathParts[len(spacePathParts)-1]\n\tspacePathParts = spacePathParts[:len(spacePathParts)-1]\n\tspacePath = \"/\" + strings.Join(spacePathParts, \"/\")\n\tif spacePath == \"\" {\n\t\tspacePath = \"/\"\n\t}\n\n\treturn Check(\n\t\tctx,\n\t\tauthorizer,\n\t\tsession,\n\t\tspacePath,\n\t\tspaceName,\n\t\tpermission,\n\t)\n}", "CodeBleu_score": 32.51735422239298}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space and name\n\tparentSpace, name := space.GetParentSpaceAndName()\n\n\t// Create a scope and resource based on the parent space and name\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tID:   parentSpace.ID,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tID:   space.ID,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 55.04070133362381}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tmarshalled, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = marshalled\n\t}\n\n\tvar decoded any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(decoded)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(sanitized, \"\n\"), nil\n}", "CodeBleu_score": 35.25473243311234}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\tvar v any\n\tif err := json.Unmarshal(source, &v); err!= nil {\n\t\treturn nil, err\n\t}\n\tb, err := json.Marshal(v)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\treturn json.RawMessage(strings.TrimSuffix(string(b), \"\n\")), nil\n}", "CodeBleu_score": 32.752610764397765}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\n\tvar sanitized json.RawMessage\n\tif err := json.Unmarshal(source, &sanitized); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized, err := json.Marshal(sanitized)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized = bytes.TrimRight(sanitized, \"\n\")\n\treturn sanitized, nil\n}", "CodeBleu_score": 41.23317676549378}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference\n\tif!c.repoValidator.IsValid(repoRef) {\n\t\treturn nil, fmt.Errorf(\"invalid repository reference: %s\", repoRef)\n\t}\n\n\t// Fetch the repository using the reference\n\trepo, err := c.repoManager.GetRepository(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository\n\tif!c.repoManager.HasPermission(ctx, session, repo, reqPermission) {\n\t\treturn nil, fmt.Errorf(\"permission denied: %s\", reqPermission)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 50.27503487201446}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\t// Validate the repository reference.\n\trepoRef = strings.TrimSpace(repoRef)\n\tif repoRef == \"\" {\n\t\treturn nil, errtypes.BadRequest(\"repository reference is required\")\n\t}\n\n\t// Fetch the repository using the reference.\n\trepo, err := c.repo.GetByReference(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\t// Check the required permissions for the session on the repository.\n\tif!session.HasPermission(repo.ID, reqPermission) {\n\t\treturn nil, errtypes.Forbidden(\"access denied to repository\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.03878849738011}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.getRepo(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.checkRepoAccess(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 34.23665298987297}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\theckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.36051513209091}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\theckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty:    createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw:      createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.596877499629926}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\theckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: createEmptyPayloadSanitizer(),\n\t\tenum.CheckPayloadKindMarkdown: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindRaw: createRawPayloadSanitizer(),\n\t\tenum.CheckPayloadKindPipeline: createPipelinePayloadSanitizer(),\n\t}\n\n\treturn checkSanitizers\n}", "CodeBleu_score": 33.36051513209091}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.renderer then\n\t\tself.state.renderer = self.renderer\n\t\tself.state.buffer = self\n\tend\n\treturn self", "CodeBleu_score": 51.81183011494264}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.renderer then\n\t\tself.state.renderer = Renderer(self)\n\t\tself.state.renderer:attach_to_screen(self.state.screen)\n\tend\n\treturn self", "CodeBleu_score": 54.12466670353353}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\tif not self.state.attached_to_renderer then\n\t\tself.state.attached_to_renderer = true\n\t\tself.renderer:attach_buffer(self)\n\tend\n\treturn self", "CodeBleu_score": 56.64039992626611}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\tif not self:isValid() then return end\n\tif not callback then return end\n\n\tlocal filename = self:getFilename()\n\tif not filename then return end\n\n\tlocal watcher = self.watcher\n\tif not watcher then\n\t\twatcher = vim.loop.new_fs_poll()\n\t\tself.watcher = watcher\n\tend\n\n\tlocal ok, err = watcher:start(filename, 1000, function(err)\n\t\tif err then\n\t\t\tvim.notify(\"Error watching file: \".. err, vim.log.levels.ERROR)\n\t\telse\n\t\t\tcallback()\n\t\tend\n\tend)\n\n\tif not ok then\n\t\tvim.notify(\"Error watching file: \".. err, vim.log.levels.ERROR)\n\tend", "CodeBleu_score": 43.85621081085381}, {"code": "function Buffer:watch(callback)\n\t\tif not self:is_valid() then\n\t\tlog.error(\"Buffer is not valid\")\n\t\treturn\n\tend\n\n\tif not callback then\n\t\tlog.error(\"No callback provided\")\n\t\treturn\n\tend\n\n\tlocal filename = self:get_filename()\n\tif not filename then\n\t\tlog.error(\"Buffer has no filename\")\n\t\treturn\n\tend\n\n\tlocal watcher = self:get_watcher()\n\tif not watcher then\n\t\tlog.error(\"Buffer has no watcher\")\n\t\treturn\n\tend\n\n\twatcher:start(filename, callback)", "CodeBleu_score": 39.509117910315986}, {"code": "function Buffer:watch(callback)\n\t\tif self.valid and callback then\n\t\tself.watch_callback = callback\n\t\tself:watch_start()\n\tend", "CodeBleu_score": 20.85323289434224}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = vim.api.nvim_get_hl_by_name(self.name, true)\n\tlocal attr = self.is_fg and 'foreground' or 'background'\n\tlocal color = spec[attr]\n\n\tif not color then\n\t\treturn nil\n\tend\n\n\tlocal hex = string.format('#%06x', color)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 51.017804369767504}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\tlocal spec = self.color.spec\n\tlocal attr = self.color.attr\n\tlocal hl = api.nvim_get_hl_by_name(attr, {\n\t\trgb = true,\n\t})\n\tif hl and hl.foreground then\n\t\tself.hex = string.format(\"#%02x%02x%02x\", hl.foreground.red, hl.foreground.green, hl.foreground.blue)\n\t\treturn self.hex\n\tend\n\tlocal fg = spec.foreground\n\tlocal bg = spec.background\n\tif attr == \"foreground\" then\n\t\tself.hex = string.format(\"#%02x%02x%02x\", fg.red, fg.green, fg.blue)\n\telseif attr == \"background\" then\n\t\tself.hex = string.format(\"#%02x%02x%02x\", bg.red, bg.green, bg.blue)\n\tend\n\treturn self.hex", "CodeBleu_score": 51.871026224025975}, {"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal attr = self.attr\n\n\tlocal highlight = vim.api.nvim_get_hl_by_name(attr, true)\n\tif not highlight then\n\t\treturn\n\tend\n\n\tlocal color = highlight[spec]\n\tif not color then\n\t\treturn\n\tend\n\n\tlocal hex = '#'.. color:sub(3)\n\tself.hex = hex\n\treturn hex", "CodeBleu_score": 54.98694943082373}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor row, line in ipairs(lines) do\n\t\tfor col_top, col_end in line:gmatch(pattern) do\n\t\t\tbuffer:add_highlight(hl, row - 1, col_top - 1, col_end)\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 37.81030406290456}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\n\tfor row, line in ipairs(lines) do\n\t\tfor col in line:gmatch(pattern) do\n\t\t\tbuffer:add_highlight(hl, row - 1, col - 1, col + #pattern - 1)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 37.31125358244841}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = buffer:get_lines()\n\tfor i, line in ipairs(lines) do\n\t\tlocal col_start = 1\n\t\twhile true do\n\t\t\tlocal col_start, col_end = line:find(pattern, col_start)\n\t\t\tif not col_start then break end\n\t\t\tbuffer:add_highlight(hl, i - 1, col_start - 1, col_end - 1)\n\t\t\tcol_start = col_end + 1\n\t\tend\n\tend\n\treturn self", "CodeBleu_score": 49.7715382678942}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = tostring(row).. tostring(col)\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.virtual_text_ns, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos or \"overlay\",\n\t\tpriority = priority or 100,\n\t})\n\tNamespace.virtual_text_ids[id] = extmark\n\treturn id", "CodeBleu_score": 59.526026952976096}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format(\"%d:%d\", row, col)\n\tlocal extmark = vim.api.nvim_buf_set_extmark(buffer, Namespace.namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tvirt_text_priority = priority,\n\t})\n\tNamespace.virtual_text_map[id] = extmark\n\treturn id", "CodeBleu_score": 56.41450920450139}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = tostring(row).. \":\".. tostring(col)\n\tNamespace.virtual_text_ids[buffer] = Namespace.virtual_text_ids[buffer] or {}\n\tNamespace.virtual_text_ids[buffer][id] = vim.api.nvim_buf_set_extmark(buffer, Namespace.virtual_text_namespace, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority\n\t})\n\treturn id", "CodeBleu_score": 55.259480286912186}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor i = 1, #output do\n\t\tlocal c = output:sub(i, i)\n\t\tif c == \"", "CodeBleu_score": 19.46243135253033}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = \"\"\n\tfor c in output:gmatch\".\" do\n\t\tif c == \"", "CodeBleu_score": 7.124137223422994}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self:get_watcher(path)\n\tif not watcher then\n\t\twatcher = self.loop:new_fs_event(path, {recursive = true}, handler)\n\t\twatcher:start()\n\t\tself.watchers[path] = watcher\n\tend\n\treturn watcher", "CodeBleu_score": 38.811534611437935}, {"code": "function Watcher:watch_file(path, handler)\n\t\tlocal watcher = self.watchers[path]\n\tif watcher then\n\t\treturn watcher\n\tend\n\n\twatcher = self.loop:new_fs_event()\n\twatcher:start(path, {recursive = true}, handler)\n\tself.watchers[path] = watcher\n\treturn watcher", "CodeBleu_score": 42.8149787603512}, {"code": "function Watcher:watch_file(path, handler)\n\t\t-- If the path is already being watched, return the existing watcher\n\tif self.watchers[path] then\n\t\treturn self.watchers[path]\n\tend\n\n\t-- Create a new file system event watcher using Neovim's loop\n\tlocal watcher = vim.loop.new_fs_event()\n\n\t-- Start watching the specified path with the given handler\n\twatcher:start(path, {}, handler)\n\n\t-- Store the watcher in the watchers table\n\tself.watchers[path] = watcher\n\n\t-- Return the watcher instance\n\treturn watcher", "CodeBleu_score": 42.753951541431356}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n\tlocal hunks = self.git:live_hunks(lines)\n\tif hunks.error then\n\t\treturn hunks\n\tend\n\n\tlocal signs = {}\n\tlocal hunk_signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal sign_id = vim.api.nvim_buf_set_extmark(self.bufnr, ns, hunk.start, 0, {\n\t\t\tid = hunk.id,\n\t\t\tgroup = signs_group,\n\t\t\thl_group = \"GitSignsAdd\",\n\t\t\tpriority = 100,\n\t\t})\n\t\thunk_signs[hunk.id] = sign_id\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = vim.api.nvim_buf_set_extmark(self.bufnr, ns, line, 0, {\n\t\t\t\tid = line,\n\t\t\t\tgroup = signs_group,\n\t\t\t\thl_group = \"GitSigns\".. line_type_to_sign_type(line.type),\n\t\t\t\tpriority = 100,\n\t\t\t})\n\t\t\tsigns[line.id] = sign_id\n\t\tend\n\tend\n\tself.hunk_signs = hunk_signs\n\tself.signs = signs\n\treturn hunks", "CodeBleu_score": 44.62881868856244}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = vim.api.nvim_buf_get_lines(self.bufnr, 0, -1, false)\n\tlocal hunks, err = self.git:hunks(lines)\n\tif err then return nil, err end\n\tself:set_signs(hunks)\n\tself:update_signs()\n\treturn hunks", "CodeBleu_score": 18.247356587299144}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self.buffer:lines()\n\tlocal hunks, err = self.git:hunks(lines)\n\tif err then return nil, err end\n\tself:set_hunk_signs(hunks)\n\tself:set_signs(self.hunk_signs)\n\treturn hunks", "CodeBleu_score": 17.721686475386733}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal tmp_file = os.tmpname()\n\tlocal f = io.open(tmp_file, 'w')\n\tf:write(patch)\n\tf:close()\n\n\tlocal _, err = self.git.stage_hunk(self.git, tmp_file)\n\n\tos.remove(tmp_file)\n\treturn err", "CodeBleu_score": 47.893870739063686}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal hunk = patch.hunks[1]\n\tlocal filepath = self.path.. '/'.. patch.file\n\tlocal temp_file = os.tmpname()\n\tlocal command = string.format('git -C %s apply --cached --unidiff-zero -p1 -- %s', self.path, temp_file)\n\n\tlocal f = io.open(temp_file, 'w')\n\tf:write(hunk.content)\n\tf:close()\n\n\tlocal _, _, exit_code = os.execute(command)\n\tos.remove(temp_file)\n\n\tif exit_code ~= 0 then\n\t\treturn false, string.format('Failed to stage hunk from patch: %s', patch.file)\n\tend\n\n\treturn true", "CodeBleu_score": 43.39676402786371}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal hunk = patch.hunk\n\tlocal filepath = patch.filepath\n\tlocal tmp_filepath = filepath.. '.tmp'\n\tlocal tmp_file = io.open(tmp_filepath, 'w')\n\n\tif not tmp_file then\n\t\treturn nil, 'Failed to open temporary file for writing'\n\tend\n\n\ttmp_file:write(patch.content)\n\ttmp_file:close()\n\n\tlocal _, stderr = self.repo:run_command('git', { 'add', '-p', '-f', '--', tmp_filepath })\n\n\tos.remove(tmp_filepath)\n\n\tif stderr then\n\t\treturn nil, stderr\n\tend\n\n\treturn true", "CodeBleu_score": 40.54861556012644}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenUrl());\nrequest.addHeader(OAuthConstants.HEADER_AUTHORIZATION, getHttpBasicAuthHeaderValue());\nrequest.addBodyParameter(OAuthConstants.PARAM_GRANT_TYPE, OAuthConstants.PARAM_GRANT_TYPE_VERIFIER);\nrequest.addBodyParameter(OAuthConstants.PARAM_CLIENT_ID, config.getApiKey());\nrequest.addBodyParameter(OAuthConstants.PARAM_CLIENT_SECRET, config.getApiSecret());\nrequest.addBodyParameter(OAuthConstants.PARAM_VERIFIER, verifier.getValue());\nrequest.addBodyParameter(OAuthConstants.PARAM_TOKEN, requestToken.getToken());\nResponse response = service.execute(request);\nreturn config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 49.27071256911927}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint(), config);\nrequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\nrequest.addBodyParameter(\"grant_type\", \"authorization_code\");\nrequest.addBodyParameter(\"code\", verifier.getValue());\nrequest.addBodyParameter(\"redirect_uri\", config.getCallback());\n\nResponse response = request.send();\n\nreturn config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 59.61584641147726}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(Verb.POST, config.getAccessTokenEndpoint());\n\trequest.addHeader(\"Authorization\", getHttpBasicAuthHeaderValue());\n\trequest.addBodyParameter(\"grant_type\", \"authorization_code\");\n\trequest.addBodyParameter(\"code\", verifier.getValue());\n\trequest.addBodyParameter(\"redirect_uri\", config.getCallbackUrl());\n\tResponse response = request.send();\n\treturn config.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 55.926395342946854}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(USERNAME, PASSWORD));\n\tcontext.setCredentialsProvider(credsProvider);\n\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setAuthCache(authCache);\n\n\tlog.info(\"Added host {} to the auth cache\", host);\n}", "CodeBleu_score": 61.04394219040367}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credsProvider = new BasicCredentialsProvider();\n\tcredsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), new UsernamePasswordCredentials(username, password));\n\tcontext.setCredentialsProvider(credsProvider);\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setAuthCache(authCache);\n\tlogger.info(\"Added host {} to auth cache\", host);\n}", "CodeBleu_score": 61.0568127702211}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentials credentials = new UsernamePasswordCredentials(username, password);\n\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(new AuthScope(host.getHostName(), host.getPort()), credentials);\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(new BasicAuthCache());\n\tcontext.getAuthCache().put(host, new BasicScheme());\n\tlogger.info(\"Added credentials for \" + host.getHostName() + \" to auth cache\");\n}", "CodeBleu_score": 49.719608982136954}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tenkins jenkins = Jenkins.getInstanceOrNull();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is not available\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"No AvatarCache instance is available\");\n\t}\n\tString key = cache.generateKey(source);\n\tcache.seed(key, source);\n\ttry {\n\t\treturn jenkins.getRootUrl() + ActionURI + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding is not supported\", e);\n\t}\n}", "CodeBleu_score": 50.74427283201057}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tnkins instance = Jenkins.getInstance();\nAvatarCache cache = instance.getExtensionList(AvatarCache.class).get(0);\nif (cache == null) {\nthrow new IllegalStateException(\"No AvatarCache instance\");\n}\nString key = cache.seed(source);\nString encodedKey = Base64.encode(key.getBytes(Charset.forName(\"UTF-8\")));\nreturn instance.getRootUrl() + ActionURI + \"/\" + encodedKey + \"/\" + size;\n}", "CodeBleu_score": 41.83130411029043}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\tenkins jenkins = Jenkins.getInstance();\n\tif (jenkins == null) {\n\t\tthrow new IllegalStateException(\"Jenkins instance is not available\");\n\t}\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(0);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"AvatarCache is not available\");\n\t}\n\tString key = cache.seed(source);\n\tString url = jenkins.getRootUrl() + ActionURI + \"/\" + key;\n\ttry {\n\t\turl += \"/\" + URLEncoder.encode(size, \"UTF-8\");\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(e);\n\t}\n\treturn url;\n}", "CodeBleu_score": 47.9609750241046}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = scaleImage(image, 128);\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t} else {\n\t\tthis.lastModified = lastModified;\n\t}\n}", "CodeBleu_score": 42.87218665618131}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\tthis.source = source;\nthis.image = image;\nthis.lastModified = lastModified;\nif (this.lastModified < 0) {\nthis.lastModified = System.currentTimeMillis();\n}\nif (image.getWidth() > 128 || image.getHeight() > 128) {\nthis.image = scaleImage(image, 128);\n}\n}", "CodeBleu_score": 53.59244790537071}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tthis.image = scaleImage(image, 128);\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t} else {\n\t\tthis.lastModified = lastModified;\n\t}\n}", "CodeBleu_score": 42.87218665618131}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null)\n\t\treturn false;\n\ttry {\n\t\tif (future.isDone()) {\n\t\t\tCacheEntry e = future.get();\n\t\t\tif (e!= null) {\n\t\t\t\timage = e.image;\n\t\t\t\tlastModified = e.lastModified;\n\t\t\t}\n\t\t\tfuture = null;\n\t\t}\n\t} catch (Exception e) {\n\t\tfuture = null;\n\t}\n\treturn future!= null;\n}", "CodeBleu_score": 40.54029955515873}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tImageCacheEntry entry = future.get();\n\t\t\timage = entry.image;\n\t\t\tlastModified = entry.lastModified;\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\tfuture = null;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.854837885457236}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\tif (future.isDone()) {\n\t\ttry {\n\t\t\tcache = future.get();\n\t\t\tif (cache!= null) {\n\t\t\t\timage = cache.getImage();\n\t\t\t\tlastModified = cache.getLastModified();\n\t\t\t}\n\t\t} catch (InterruptedException e) {\n\t\t\t// ignore\n\t\t} catch (ExecutionException e) {\n\t\t\t// ignore\n\t\t}\n\t\tfuture = null;\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.54534044438371}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\trsp.setContentType(\"image/png\");\n\trsp.setHeader(\"Cache-Control\", \"must-revalidate,no-cache,no-store\");\n\trsp.setHeader(\"Pragma\", \"no-cache\");\n\trsp.setDateHeader(\"Expires\", 0);\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\ttry {\n\t\tgenerateImage(baos, node);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\trsp.setStatus(500);\n\t\treturn;\n\t}\n\trsp.setContentLength(baos.size());\n\tbaos.writeTo(rsp.getOutputStream());\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 36.98764692967649}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\trsp.addHeader(\"Cache-Control\", \"must-revalidate,no-cache,no-store\");\n\trsp.addHeader(\"Pragma\", \"no-cache\");\n\trsp.addHeader(\"Expires\", \"0\");\n\trsp.setContentType(\"image/png\");\n\tByteArrayOutputStream os = new ByteArrayOutputStream();\n\ttry {\n\t\tdraw(os);\n\t} catch (IOException e) {\n\t\te.printStackTrace(Logger.getLogger(getClass().getName()));\n\t}\n\trsp.setContentLength(os.size());\n\tos.writeTo(rsp.getOutputStream());\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 36.95140360294917}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t\trsp.setContentType(\"image/png\");\n\trsp.setHeader(\"Cache-Control\", \"must-revalidate,no-cache,no-store\");\n\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n\ttry {\n\t\tgeneratePng(baos, node);\n\t} catch (IOException e) {\n\t\te.printStackTrace(new PrintStream(baos));\n\t}\n\trsp.getOutputStream().write(baos.toByteArray());\n\trsp.getOutputStream().flush();\n}", "CodeBleu_score": 34.193249498917574}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t     super(owner, projectKey, repositoryName);\n        this.enableCache = enableCache;\n        this.teamCacheDuration = teamCacheDuration;\n        this.repositoriesCacheDuration = repositoriesCacheDuration;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        HttpClientBuilder builder = HttpClientBuilder.create();\n        builder.setKeepAliveStrategy(new BitbucketCloudKeepAliveStrategy());\n        builder.setConnectionManager(new BasicHttpClientConnectionManager());\n        builder.setRetryHandler(new BitbucketCloudRetryHandler());\n        setClientProxyParams(BITBUCKET_CLOUD_API_URL, builder);\n\n        if (authenticator!= null) {\n            authenticator.configureContext(context, new HttpHost(BITBUCKET_CLOUD_API_URL));\n            builder.setDefaultCredentialsProvider(context.getCredentialsProvider());\n        }\n\n        client = builder.build();\n    }", "CodeBleu_score": 45.56780278293422}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t     this(enableCache, teamCacheDuration, repositoriesCacheDuration, owner, projectKey, repositoryName, authenticator, null);\n    this.enableCache = enableCache;\n    this.teamCacheDuration = teamCacheDuration;\n    this.repositoriesCacheDuration = repositoriesCacheDuration;\n    this.owner = owner;\n    this.projectKey = projectKey;\n    this.repositoryName = repositoryName;\n    this.authenticator = authenticator;\n    this.context = null;\n\n    if (enableCache) {\n        teamCache = CacheBuilder.newBuilder()\n               .expireAfterWrite(teamCacheDuration, TimeUnit.MINUTES)\n               .build();\n        repositoriesCache = CacheBuilder.newBuilder()\n               .expireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES)\n               .build();\n    }\n\n    HttpClientBuilder builder = HttpClientBuilder.create();\n    builder.setKeepAliveStrategy(new BitbucketCloudKeepAliveStrategy());\n    builder.setConnectionManager(new PoolingHttpClientConnectionManager());\n    builder.setRetryHandler(new BitbucketCloudRetryHandler());\n    if (authenticator!= null) {\n        configureContext(builder);\n    }\n    setClientProxyParams(BITBUCKET_CLOUD_API_URL, builder);\n    client = builder.build();\n}", "CodeBleu_score": 46.776484844863745}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tenableCache = enableCache;\nthis.teamCacheDuration = teamCacheDuration;\nthis.repositoriesCacheDuration = repositoriesCacheDuration;\nthis.owner = owner;\nthis.projectKey = projectKey;\nthis.repositoryName = repositoryName;\nthis.authenticator = authenticator;\n\nif (enableCache) {\n    teamCache = CacheBuilder.newBuilder().expireAfterWrite(teamCacheDuration, TimeUnit.MINUTES).build();\n    repositoriesCache = CacheBuilder.newBuilder().expireAfterWrite(repositoriesCacheDuration, TimeUnit.MINUTES).build();\n}\n\nHttpClientBuilder builder = HttpClients.custom();\nbuilder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\nbuilder.setConnectionManager(new BasicHttpClientConnectionManager());\nbuilder.setRetryHandler(new DefaultHttpRequestRetryHandler(3, true));\n\nif (authenticator!= null) {\n    authenticator.configureContext(context, null);\n    builder.setDefaultCredentialsProvider(context.getCredentialsProvider());\n}\n\nsetClientProxyParams(BITBUCKET_CLOUD_URL, builder);\n\nclient = builder.build();\n}", "CodeBleu_score": 48.02298433219471}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t(pullRequest.getDestination()!= null) {\n\t\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n\t\tif (destinationBranch!= null) {\n\t\t\tString destinationNode = destinationBranch.getRawNode();\n\t\t\tif (destinationNode!= null) {\n\t\t\t\tdestinationBranch.setCommitClosure(new CommitClosure(destinationNode));\n\t\t\t}\n\t\t}\n\t}\n\tBitbucketCloudBranch sourceBranch = pullRequest.getSource();\n\tif (sourceBranch!= null) {\n\t\tString sourceNode = sourceBranch.getRawNode();\n\t\tif (sourceNode!= null) {\n\t\t\tsourceBranch.setCommitClosure(new CommitClosure(sourceNode));\n\t\t}\n\t}\n}", "CodeBleu_score": 36.319011419136515}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tbucketCloudBranch sourceBranch = pullRequest.getSource();\n\tif (sourceBranch!= null) {\n\t\tString sourceBranchRawNode = sourceBranch.getRawNode();\n\t\tif (sourceBranchRawNode!= null) {\n\t\t\tpullRequest.setSourceCommitClosure(new CommitClosure(sourceBranchRawNode));\n\t\t}\n\t}\n\n\tBitbucketCloudBranch destinationBranch = pullRequest.getDestination();\n\tif (destinationBranch!= null) {\n\t\tString destinationBranchRawNode = destinationBranch.getRawNode();\n\t\tif (destinationBranchRawNode!= null) {\n\t\t\tpullRequest.setDestinationCommitClosure(new CommitClosure(destinationBranchRawNode));\n\t\t}\n\t}\n}", "CodeBleu_score": 35.802764381466105}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\ting sourceBranch = pullRequest.getSource().getBranch().getName();\n\tString destinationBranch = pullRequest.getDestination().getBranch().getName();\n\tString sourceCommit = pullRequest.getSource().getCommit().getHash();\n\tString destinationCommit = pullRequest.getDestination().getCommit().getHash();\n\tif (sourceCommit!= null) {\n\t\tcommitClosures.put(sourceBranch, new CommitClosure(sourceCommit));\n\t}\n\tif (destinationCommit!= null) {\n\t\tcommitClosures.put(destinationBranch, new CommitClosure(destinationCommit));\n\t}\n}", "CodeBleu_score": 37.46427543589314}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration locationConfiguration = JenkinsLocationConfiguration.get()\n\tString rootURL = locationConfiguration.getUrl()\n\tif (rootURL == null) {\n\t\tthrow new IllegalStateException(\"Root URL is null\")\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build)\n}", "CodeBleu_score": 52.391835671775986}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tdef jenkinsLocationConfiguration = JenkinsLocationConfiguration.get()\n\tif (jenkinsLocationConfiguration == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is null\")\n\t}\n\tif (jenkinsLocationConfiguration.getUrl() == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is null\")\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build)\n}", "CodeBleu_score": 49.73779683732882}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration config = JenkinsLocationConfiguration.get()\n\tif (config == null || config.getUrl() == null) {\n\t\tthrow new IllegalStateException(\"Jenkins location configuration is not set.\")\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build)\n}", "CodeBleu_score": 57.954136830537685}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\ttry {\n\t\tURI uri = new URI(url);\n\t\tif (!uri.isAbsolute()) {\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t\t}\n\t\tif (uri.getHost().equalsIgnoreCase(\"localhost\")) {\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t\t}\n\t\tif (uri.getHost().equalsIgnoreCase(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t\t}\n\t\tif (bitbucket.isCloud() &&!uri.getHost().contains(\".\")) {\n\t\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t\t}\n\t} catch (URISyntaxException e) {\n\t\tthrow new IllegalStateException(\"Invalid Jenkins URL: \" + url);\n\t}\n\treturn url;\n}", "CodeBleu_score": 53.15662184742007}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tif (url.contains(\"localhost\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL cannot contain 'localhost'.\")\n\t}\n\tif (url.contains(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL cannot contain 'unconfigured-jenkins-location'.\")\n\t}\n\tif (bitbucket instanceof BitbucketCloudApi &&!url.contains(\".\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified.\")\n\t}\n\treturn url\n}", "CodeBleu_score": 28.881446513723997}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t\tURI uri = URI.create(url);\n\tString host = uri.getHost();\n\tif (host == null) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed: \" + url);\n\t}\n\tif (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n\t\tthrow new IllegalStateException(\"Jenkins URL must not use 'localhost' or 'unconfigured-jenkins-location' as the host: \" + url);\n\t}\n\tif (bitbucket instanceof BitbucketCloudApi) {\n\t\tif (!uri.isAbsolute() || uri.getScheme() == null ||!uri.getScheme().equals(\"https\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified and use HTTPS: \" + url);\n\t\t}\n\t}\n\treturn url;\n}", "CodeBleu_score": 44.04568109467814}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\ttialize the Bitbucket context and check if notifications are disabled\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isNotificationDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n// Retrieve the SCM revision and its hash\n        SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Unable to determine commit hash\");\n            return;\n        }\n\n// Determine whether to share the build key between branch and PR\n        boolean shareBuildKeyBetweenBranchAndPR = context.isShareBuildKeyBetweenBranchAndPR();\n\n// Log the notification type\n        if (revision instanceof PullRequestSCMRevision) {\n            listener.getLogger().println(\"[Bitbucket] Sending pull request notification\");\n        } else if (revision instanceof BranchSCMRevision) {\n            listener.getLogger().println(\"[Bitbucket] Sending branch notification\");\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Sending commit notification\");\n        }\n\n// Construct the build key and initialize the Bitbucket client\n        String branch = ((AbstractGitSCMSource.SCMRevisionImpl) revision).getBranch();\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n        BitbucketApi bitbucket = BitbucketApiFactory.createApi(source.getServerUrl(), source.getCredentialsId());\n\n// Create and send the build status notification\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 53.74471593500644}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t Bitbucket context\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none())\n               .withTraits(source.getTraits());\n\n// Check if notifications are disabled\n        if (!context.isNotificationsEnabled()) {\n            listener.getLogger().println(\"[Bitbucket] Build notifications are disabled\");\n            return;\n        }\n\n// Get SCM revision and its hash\n        SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        String hash = getHash(revision);\n        if (hash == null) {\n            listener.getLogger().println(\"[Bitbucket] Could not determine commit hash\");\n            return;\n        }\n\n// Determine whether to share the build key between branch and PR\n        boolean shareBuildKeyBetweenBranchAndPR = context.isShareBuildKeyBetweenBranchAndPR();\n\n// Log the notification type\n        if (revision instanceof PullRequestSCMRevision) {\n            listener.getLogger().println(\"[Bitbucket] Sending Pull Request build status notification\");\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Sending branch build status notification\");\n        }\n\n// Construct the build key\n        String branch = getBranch(revision);\n        String key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n// Initialize the Bitbucket client\n        BitbucketApi bitbucket = source.getBitbucketApi();\n        if (bitbucket == null) {\n            listener.getLogger().println(\"[Bitbucket] Could not determine Bitbucket client\");\n            return;\n        }\n\n// Create and send the build status notification\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 51.51878592890435}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t Bitbucket context and check if notifications are disabled\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\nif (context.isDisableChangeNotifications()) {\n    listener.getLogger().println(\"[Bitbucket] Change notifications are disabled\");\n    return;\n}\n\n// Get SCM revision and its hash\nSCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\nString hash = getHash(revision);\nif (hash == null) {\n    listener.getLogger().println(\"[Bitbucket] Unable to determine commit hash\");\n    return;\n}\n\n// Determine whether to share the build key between branch and PR\nboolean shareBuildKeyBetweenBranchAndPR = context.isShareBuildKeyBetweenBranchAndPR();\n\n// Log the notification type\nif (revision instanceof PullRequestSCMRevision) {\n    listener.getLogger().println(\"[Bitbucket] Sending pull request notification\");\n} else if (revision instanceof AbstractGitSCMSource.SCMRevisionImpl) {\n    listener.getLogger().println(\"[Bitbucket] Sending branch notification\");\n} else {\n    listener.getLogger().println(\"[Bitbucket] Sending notification\");\n}\n\n// Construct the build key\nString branch = null;\nif (revision instanceof AbstractGitSCMSource.SCMRevisionImpl) {\n    branch = ((AbstractGitSCMSource.SCMRevisionImpl) revision).getBranch();\n}\nString key = getBuildKey(build, branch, shareBuildKeyBetweenBranchAndPR);\n\n// Initialize the Bitbucket client\nBitbucketApi bitbucket = source.getBitbucketClient(context, listener);\n\n// Create and send the build status notification\ncreateStatus(build, listener, bitbucket, key, hash);\n}", "CodeBleu_score": 52.89252994086493}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t", "CodeBleu_score": 9.114675412326998}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n-        return \"${build.parent.fullName}/${branch}\"\n-    } else {\n-        return build.parent.fullName\n-    }\n+    return shareBuildKeyBetweenBranchAndPR? \"${build.parent.fullName}/${branch}\" : build.parent.fullName\n }", "CodeBleu_score": 26.247392885643308}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t    if (shareBuildKeyBetweenBranchAndPR) {\n-        return build.getParent().getFullName() + branch\n-    }\n-    return build.getFullDisplayName()\n+    if (shareBuildKeyBetweenBranchAndPR && branch!= null) {\n+        return build.getParent().getFullName() + branch\n+    }\n+    return build.getFullDisplayName()\n }", "CodeBleu_score": 35.612974531946115}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t", "CodeBleu_score": 0.5550920304044025}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (serverUrl == null) {\n\t\tserverUrl = BitbucketSCMNavigator.DEFAULT_SERVER_URL\n\t}\n\tif (serverUrl == null) {\n\t\tLOGGER.warning(\"Could not resolve server URL\")\n\t}\n\tif (traits == null) {\n\t\ttraits = new ArrayList<BitbucketSCMNavigatorRequest.BitbucketSCMNavigatorTrait>()\n\t\ttraits.add(new BitbucketSCMNavigatorRequest.BitbucketSCMNavigatorTrait(new BitbucketSCMNavigatorRequest.BitbucketSCMNavigatorTrait.BitbucketSCMNavigatorTraitImpl()))\n\t}\n\treturn this\n}", "CodeBleu_score": 20.370276965023415}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t", "CodeBleu_score": 0.5550920304044025}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = getRepository(name);\n\tif (repository == null) {\n\t\treturn;\n\t}\n\n\tif (isMatch) {\n\t\tproposedRepositories.add(repository);\n\t\tlogger.info(\"Proposed repository: {}\", repository.getName());\n\t} else {\n\t\tignoredRepositories.add(repository);\n\t\tlogger.info(\"Ignored repository: {}\", repository.getName());\n\t}\n}", "CodeBleu_score": 44.54164664278172}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repository = repositoryService.findByName(name);\n\tif (repository == null) {\n\t\tlog.warn(\"Repository {} not found\", name);\n\t\treturn;\n\t}\n\tif (isMatch) {\n\t\tlog.info(\"Proposed repository {}/{}\", repository.getOwner(), repository.getName());\n\t\tproposedCount++;\n\t} else {\n\t\tlog.info(\"Ignored repository {}/{}\", repository.getOwner(), repository.getName());\n\t}\n}", "CodeBleu_score": 51.33559645282565}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tRepository repo = repositoryService.getRepository(name);\n\tif (repo!= null) {\n\t\tif (isMatch) {\n\t\t\tlog.info(\"Proposed: \" + repo.getFullName());\n\t\t\tproposed++;\n\t\t} else {\n\t\t\tlog.info(\"Ignored: \" + repo.getFullName());\n\t\t}\n\t}\n}", "CodeBleu_score": 42.34764783278224}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tString remote = scm.getRemote();\n\tString branch = scm.getBranch();\n\tString cloneLink = scm.getCloneLink();\n\tString sha1 = rev.getSha1String();\n\n\t// If the revision is a branch, we need to check if it exists locally\n\tif (branch!= null &&!commitExists(git, sha1)) {\n\t\t// Create a RefSpec for the branch\n\t\tRefSpec refSpec = new RefSpec(sha1 + \":refs/remotes/origin/\" + branch);\n\n\t\t// Fetch the branch from the remote repository\n\t\ttry {\n\t\t\tgit.fetch(remote, cloneLink, refSpec);\n\t\t} catch (GitException e) {\n\t\t\tthrow new InterruptedException(e.getMessage());\n\t\t}\n\t}\n\n\treturn rev;\n}", "CodeBleu_score": 32.13566596934351}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\tString remote = scm.getRemote();\n\tString branch = scm.getBranch();\n\tString sha1 = rev.getSha1String();\n\tif (branch.contains(sha1)) {\n\t\tif (branch.contains(\"refs/heads/\")) {\n\t\t\tbranch = branch.substring(branch.indexOf(\"refs/heads/\") + \"refs/heads/\".length());\n\t\t}\n\t\tlistener.getLogger().println(\"Checking out branch \" + branch + \" at commit \" + sha1);\n\t\tif (!commitExists(git, sha1)) {\n\t\t\tlistener.getLogger().println(\"Commit \" + sha1 + \" doesn't exist locally. Fetching it from the remote repository.\");\n\t\t\tList<RefSpec> refSpecs = new ArrayList<RefSpec>();\n\t\t\trefSpecs.add(new RefSpec(\"+refs/heads/\" + branch + \":refs/remotes/origin/\" + branch));\n\t\t\tgit.fetch(remote, refSpecs);\n\t\t}\n\t}\n\treturn rev;\n}", "CodeBleu_score": 40.85853031898297}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t//        if (rev == null) {\n//            return null;\n//        }\n//\n//        String sha1 = rev.getSha1String();\n//\n//        if (commitExists(git, sha1)) {\n//            return rev;\n//        }\n//\n//        String remote = scm.getRemote();\n//        String branch = scm.getBranch();\n//        String cloneLink = scm.getCloneLink();\n//\n//        if (remote == null || remote.trim().isEmpty() || branch == null || branch.trim().isEmpty() || cloneLink == null || cloneLink.trim().isEmpty()) {\n//            return rev;\n//        }\n//\n//        String refSpec = String.format(\"+refs/heads/%s:refs/remotes/%s/%s\", branch, remote, branch);\n//        git.fetchFrom(remote, refSpec, true, listener);\n//\n//        if (!commitExists(git, sha1)) {\n//            listener.getLogger().format(\"Failed to fetch commit %s from remote %s%n\", sha1, remote);\n//            return rev;\n//        }\n//\n//        return rev;\n        return rev;\n    }", "CodeBleu_score": 8.172271809259497}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 64.78779591133828}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 64.78779591133828}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t\tif (links == null) {\n\t\treturn null;\n\t}\n\tMap<String, BitbucketHref> result = new HashMap<String, BitbucketHref>();\n\tfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n\t\tresult.put(entry.getKey(), entry.getValue().get(0));\n\t}\n\treturn result;\n}", "CodeBleu_score": 64.78779591133828}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst selectedResources = resourceStates.filter(resource => resource.resourceUri);\n\tif (selectedResources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst resourcesByRepository = groupBy(selectedResources, resource => resource.resourceUri.scheme);\n\tfor (const [repositoryScheme, resources] of resourcesByRepository) {\n\t\tconst repository = this.repositories.find(repository => repository.scheme === repositoryScheme);\n\t\tif (!repository) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst filePaths = resources.map(resource => resource.resourceUri.fsPath);\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\tthis.logger.error(error);\n\t\t\twindow.showErrorMessage(`Failed to add files to ${repository.name} repository`);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.55618350486153}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tif (resourceStates.length === 0) {\n\t\tresourceStates = this.sourceControl.selected;\n\t}\n\n\tconst repositories = new Map<string, string[]>();\n\tconst resources = resourceStates.map(state => {\n\t\tconst repository = state.resourceUri.scheme === 'file'? state.resourceUri.fsPath : state.resourceUri.authority;\n\t\tconst resource = state.resourceUri.fsPath;\n\n\t\tif (!repositories.has(repository)) {\n\t\t\trepositories.set(repository, []);\n\t\t}\n\n\t\trepositories.get(repository)!.push(resource);\n\n\t\treturn resource;\n\t});\n\n\tfor (const [repository, resources] of repositories) {\n\t\ttry {\n\t\t\tawait this.git.add(repository, resources);\n\t\t} catch (error) {\n\t\t\tthis.logger.error(error);\n\t\t\tthis.message.error(error);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.154587976503166}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst selectedResources = resourceStates.length === 0? this.sourceControl.selectedSources : resourceStates;\n\n\tif (selectedResources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst uris = selectedResources.map(resource => resource.resourceUri);\n\tconst repositories = await this.getRepositories(uris);\n\n\tfor (const repository of repositories) {\n\t\tconst filePaths = uris.map(uri => this.workspace.asRelativePath(uri.fsPath));\n\n\t\ttry {\n\t\t\tawait repository.add(filePaths);\n\t\t} catch (error) {\n\t\t\tthis.logger.error(error);\n\t\t\tthis.window.showErrorMessage(`Failed to add files to repository: ${error.message}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.25510484202014}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t\tif (this.resourceStates.length === 0 ||!(this.resourceStates[0].resource instanceof Uri)) {\n\t\tawait this.updateResourceStates();\n\t}\n\n\treturn this.resourceStates.filter(resourceState => resourceState.resource instanceof Uri);\n}", "CodeBleu_score": 20.015235722473484}, {"code": "protected async getResourceStates{\n\t", "CodeBleu_score": 3.381342689188379}, {"code": "protected async getResourceStates{\n\t\tif (this.resourceStates.isEmpty() ||!(this.resourceStates.get(0) instanceof Uri)) {\n\t\tthis.resourceStates = await this.scmProvider.getResourceStates(this.resource);\n\t}\n\treturn this.resourceStates.filter(Resource);\n}", "CodeBleu_score": 12.887509719920414}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\tri === undefined) {\n\t\tconst activeTextEditor = window.activeTextEditor;\n\t\tif (activeTextEditor === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\turi = activeTextEditor.document.uri;\n\t}\n\tif (uri.scheme ==='svn') {\n\t\turi = uri.with({ scheme: 'file' });\n\t}\n\tif (uri.scheme!== 'file') {\n\t\treturn undefined;\n\t}\n\tconst sourceControlManager = this.sourceControlManager;\n\tif (sourceControlManager === undefined) {\n\t\treturn undefined;\n\t}\n\tconst repository = await sourceControlManager.getRepository(uri);\n\tif (repository === undefined) {\n\t\treturn undefined;\n\t}\n\treturn repository.getResourceFromFile(uri);\n}", "CodeBleu_score": 41.357862315668946}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi) {\n\t\tconst editor = window.activeTextEditor;\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\t\turi = editor.document.uri;\n\t}\n\tif (uri.scheme ==='svn') {\n\t\turi = Uri.file(uri.fsPath);\n\t}\n\tconst sourceControlManager = this.sourceControlManager;\n\tif (!sourceControlManager) {\n\t\treturn undefined;\n\t}\n\tconst repository = await sourceControlManager.getRepository(uri);\n\tif (!repository) {\n\t\treturn undefined;\n\t}\n\treturn repository.getResourceFromFile(uri);\n}", "CodeBleu_score": 45.133955902404665}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\turi) {\n\t\tconst activeTextEditor = window.activeTextEditor;\n\t\tif (!activeTextEditor) {\n\t\t\treturn undefined;\n\t\t}\n\t\turi = activeTextEditor.document.uri;\n\t}\n\tif (uri.scheme ==='svn') {\n\t\turi = this.fromSvnUri(uri);\n\t}\n\tif (uri.scheme!== 'file') {\n\t\treturn undefined;\n\t}\n\tconst sourceControlManager = this.sourceControlManager;\n\tif (!sourceControlManager) {\n\t\treturn undefined;\n\t}\n\tconst repository = await sourceControlManager.getRepository(uri);\n\tif (!repository) {\n\t\treturn undefined;\n\t}\n\treturn repository.getResourceFromFile(uri);\n}", "CodeBleu_score": 47.58337300582962}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remoteRepo = await this.model.getRemoteRepository(element);\n\tif (element.type ==='modified') {\n\t\tthis.openDiff(element.oldPath, element.oldRevision, element.newPath, element.newRevision, remoteRepo);\n\t} else if (element.type === 'added') {\n\t\tthis.openFileRemote(element.newPath, element.newRevision, remoteRepo);\n\t}\n}", "CodeBleu_score": 35.61750481600946}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remoteRepo = await this.model.getRemoteRepository(element.path);\n\tif (!remoteRepo) {\n\t\treturn;\n\t}\n\tconst remoteUrl = remoteRepo.getRemoteUrl(element.path);\n\tif (element.type ==='modified') {\n\t\tconst oldUrl = remoteUrl + '@' + element.oldRevision;\n\t\tconst newUrl = remoteUrl + '@' + element.newRevision;\n\t\tthis.openDiff(oldUrl, newUrl);\n\t} else {\n\t\tthis.openFileRemote(remoteUrl, element.newRevision);\n\t}\n}", "CodeBleu_score": 41.709609955630626}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t\tconst remoteRepository = await this.model.getRemoteRepository(element);\n\tif (remoteRepository) {\n\t\tif (element.changeType === ChangeType.Modified) {\n\t\t\tconst oldPath = element.oldPath;\n\t\t\tconst oldRevision = element.oldRevision;\n\t\t\tconst newPath = element.newPath;\n\t\t\tconst newRevision = element.newRevision;\n\t\t\tconst diffCommand = `svn diff -r ${oldRevision}:${newRevision} ${oldPath}`;\n\t\t\tthis.openDiff(diffCommand);\n\t\t} else if (element.changeType === ChangeType.Added) {\n\t\t\tconst path = element.newPath;\n\t\t\tconst revision = element.newRevision;\n\t\t\tconst url = await remoteRepository.getUrl(path, revision);\n\t\t\tthis.openFileRemote(url, revision);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.29475809078455}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage('Your platform is not supported.');\n\t\treturn;\n\t}\n\n\tconst commit = item.commit;\n\tconst message = what ==='message'? commit.message : commit.revision;\n\tclipboard.writeText(message);\n}", "CodeBleu_score": 34.55996248835025}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!clipboard.writeText) {\n\t\twindow.showErrorMessage(\"Clipboard is not supported.\");\n\t\treturn;\n\t}\n\n\tconst commit = item.commit;\n\tif (commit) {\n\t\tconst text = what === \"revision\"? commit.revision : commit.message;\n\t\tclipboard.writeText(text);\n\t}\n}", "CodeBleu_score": 38.954652632738764}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!navigator.clipboard) {\n\t\twindow.showErrorMessage('Clipboard is not supported in your browser.');\n\t\treturn;\n\t}\n\n\tconst commit = item.commit;\n\tconst message = what ==='message'? commit.message : commit.revision;\n\tawait navigator.clipboard.writeText(message);\n}", "CodeBleu_score": 36.299429713075945}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\n    if (factory.canOpen(this)) {\n        long p = factory.priority(this);\n        if (best == null || p > priority) {\n            best = factory;\n            priority = p;\n        }\n    }\n}\nif (best!= null) {\n    return best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.84738976920913}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\n    if (factory.canOpen(this)) {\n        long p = factory.priority(this);\n        if (best == null || p > priority) {\n            best = factory;\n            priority = p;\n        }\n    }\n}\nif (best!= null) {\n    return best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.84738976920913}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\terviceLoader<GiteaConnectionFactory> loader = ServiceLoader.load(GiteaConnectionFactory.class, classLoader);\nlong priority = 0L;\nGiteaConnectionFactory best = null;\nfor (GiteaConnectionFactory factory : loader) {\n    if (factory.canOpen(this)) {\n        long p = factory.priority(this);\n        if (best == null || p > priority) {\n            best = factory;\n            priority = p;\n        }\n    }\n}\nif (best!= null) {\n    return best.open(this);\n}\nthrow new IOException(\"No implementation for connecting to \" + serverUrl);\n}", "CodeBleu_score": 93.84738976920913}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tJenkins jenkins = Jenkins.getInstanceOrNull()\n\tClassLoader classLoader = jenkins!= null? jenkins.pluginManager.uberClassLoader : getClass().classLoader\n\treturn new Gitea(classLoader)\n}", "CodeBleu_score": 45.82669133221912}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tthis.classLoader = Jenkins.get().getPluginManager().uberClassLoader\n\treturn this\n}", "CodeBleu_score": 24.229109717025644}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t\tGitea gitea = this;\n\tif (Jenkins.getInstance()!= null) {\n\t\tgitea.setClassLoader(Jenkins.getInstance().pluginManager.uberClassLoader);\n\t} else {\n\t\tgitea.setClassLoader(Gitea.class.getClassLoader());\n\t}\n\treturn gitea;\n}", "CodeBleu_score": 28.410840655251455}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = StringUtils.trim(displayName);\n\tthis.serverUrl = StringUtils.trim(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = StringUtils.trim(credentialsId);\n\tthis.aliasUrl = StringUtils.trim(aliasUrl);\n\tthis.aliasUrl = StringUtils.trimToEmpty(aliasUrl);\n\tif (StringUtils.isBlank(displayName)) {\n\t\tthis.displayName = getDisplayNameFromUrl();\n\t}\n\tif (StringUtils.isBlank(aliasUrl)) {\n\t\tthis.aliasUrl = serverUrl;\n\t}\n}", "CodeBleu_score": 42.477332597728555}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tsuper(displayName, serverUrl, credentialsId);\n\tthis.manageHooks = manageHooks;\n\tthis.aliasUrl = aliasUrl!= null? aliasUrl.trim() : null;\n}", "CodeBleu_score": 20.952787290718483}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t\tthis.displayName = StringUtils.defaultIfBlank(displayName, serverUrl);\n\tthis.serverUrl = normalizeUrl(serverUrl);\n\tthis.manageHooks = manageHooks;\n\tthis.credentialsId = credentialsId;\n\tthis.aliasUrl = normalizeUrl(aliasUrl);\n}", "CodeBleu_score": 30.238745355954823}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel();\n\t}\n\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn new StandardListBoxModel();\n\t}\n\n\treturn new StandardListBoxModel()\n\t\t\t.withEmptySelection()\n\t\t\t.withMatching(\n\t\t\t\t\tCredentialsMatchers.always(),\n\t\t\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\t\t\tJenkins.get(),\n\t\t\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t\t\t\t\t)\n\t\t\t);\n}", "CodeBleu_score": 37.60198349078973}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(null);\n\t}\n\n\tserverUrl = Util.fixEmpty(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn new StandardListBoxModel().includeCurrentValue(null);\n\t}\n\n\tserverUrl = GiteaServer.normalizeServerUrl(serverUrl);\n\n\tList<GiteaCredentials> creds = CredentialsProvider.lookupCredentials(GiteaCredentials.class, Jenkins.get(), ACL.SYSTEM, Collections.emptyList());\n\tList<GiteaCredentials> matchingCreds = new ArrayList<>();\n\tfor (GiteaCredentials cred : creds) {\n\t\tif (cred.getServerUrl().equals(serverUrl)) {\n\t\t\tmatchingCreds.add(cred);\n\t\t}\n\t}\n\n\treturn new StandardListBoxModel().includeAs(ACL.SYSTEM, Jenkins.get(), matchingCreds, CredentialsMatchers.always());\n}", "CodeBleu_score": 43.69252312484172}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tif (!Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\treturn new StandardListBoxModel();\n\t}\n\n\tserverUrl = Util.fixEmptyAndTrim(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn new StandardListBoxModel();\n\t}\n\n\tserverUrl = serverUrl.trim();\n\tif (serverUrl.endsWith(\"/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t}\n\n\tList<StandardUsernamePasswordCredentials> credentials = CredentialsProvider.lookupCredentials(\n\t\tStandardUsernamePasswordCredentials.class,\n\t\tJenkins.get(),\n\t\tACL.SYSTEM,\n\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t);\n\n\treturn new StandardListBoxModel()\n\t\t.includeEmptyValue()\n\t\t.includeAs(\n\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\tStandardUsernamePasswordCredentials.class,\n\t\t\t\tJenkins.get(),\n\t\t\t\tACL.SYSTEM,\n\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t\t\t),\n\t\t\tCredentialsMatchers.always()\n\t\t)\n\t\t.includeAs(\n\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\tGiteaAuth.class,\n\t\t\t\tJenkins.get(),\n\t\t\t\tACL.SYSTEM,\n\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t\t\t),\n\t\t\tCredentialsMatchers.always()\n\t\t);\n}", "CodeBleu_score": 42.214733857056444}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme().toLowerCase();\n\t\tint port = uri.getPort();\n\t\tif (port!= -1) {\n\t\t\tif (port == 80 && \"http\".equals(scheme)) {\n\t\t\t\tport = -1;\n\t\t\t} else if (port == 443 && \"https\".equals(scheme)) {\n\t\t\t\tport = -1;\n\t\t\t}\n\t\t}\n\t\treturn scheme + \"://\" + uri.getHost() + (port == -1? \"\" : \":\" + port) + uri.getPath();\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 35.03646002296481}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\tserverUrl = serverUrl.toLowerCase();\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme();\n\t\tString host = uri.getHost();\n\t\tint port = uri.getPort();\n\t\tif (scheme == null) {\n\t\t\tscheme = \"http\";\n\t\t}\n\t\tif (host == null) {\n\t\t\thost = \"localhost\";\n\t\t}\n\t\tif (port == -1) {\n\t\t\tif (\"http\".equals(scheme)) {\n\t\t\t\tport = 80;\n\t\t\t} else if (\"https\".equals(scheme)) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\tserverUrl = scheme + \"://\" + host;\n\t\tif (port!= -1) {\n\t\t\tserverUrl += \":\" + port;\n\t\t}\n\t\tserverUrl += uri.getPath();\n\t\tif (serverUrl.endsWith(\"/\")) {\n\t\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t\t}\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 41.09435640336093}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn null;\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme().toLowerCase();\n\t\tString host = uri.getHost().toLowerCase();\n\t\tint port = uri.getPort();\n\t\tString path = uri.getPath();\n\t\tif (path.length() == 0) {\n\t\t\tpath = \"/\";\n\t\t}\n\t\tif (port == -1) {\n\t\t\tif (\"http\".equals(scheme)) {\n\t\t\t\tport = 80;\n\t\t\t} else if (\"https\".equals(scheme)) {\n\t\t\t\tport = 443;\n\t\t\t}\n\t\t}\n\t\treturn (new URI(scheme, null, host, port, path, null, null)).toString();\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 34.13926659045162}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString name = server.getDisplayName();\n\t\tif (name == null || name.isEmpty()) {\n\t\t\tname = server.getServerUrl();\n\t\t}\n\t\titems.add(name, server.getServerUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 44.72257347010613}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tif (server.getDisplayName() == null || server.getDisplayName().isEmpty()) {\n\t\t\titems.add(server.getUrl());\n\t\t} else {\n\t\t\titems.add(server.getDisplayName(), server.getUrl());\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 37.34434392912031}, {"code": "public ListBoxModel getServerItems(){\n\tListBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString displayName = server.getDisplayName();\n\t\tif (displayName == null || displayName.isEmpty()) {\n\t\t\tdisplayName = server.getUrl();\n\t\t}\n\t\titems.add(displayName, server.getUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 46.88125686085829}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission(Jenkins.ADMINISTER);\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null && server.getUrl()!= null &&!server.getUrl().isEmpty()) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\tthis.servers = newServers;\n\tsave();\n}", "CodeBleu_score": 27.257493702351436}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission(Jenkins.ADMINISTER);\n\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tservers = servers.stream()\n\t\t\t.map(server -> server.getUrl() == null? null : server.getUrl().trim())\n\t\t\t.filter(StringUtils::isNotBlank)\n\t\t\t.map(url -> new GiteaServer(url))\n\t\t\t.distinct()\n\t\t\t.collect(Collectors.toList());\n\tthis.servers = servers;\n\tsave();\n}", "CodeBleu_score": 29.314044781578797}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tcheckPermission(Jenkins.ADMINISTER);\n\tif (servers == null) {\n\t\tservers = Collections.emptyList();\n\t}\n\tList<GiteaServer> newServers = new ArrayList<>();\n\tfor (GiteaServer server : servers) {\n\t\tif (server!= null &&!server.getUrl().isEmpty()) {\n\t\t\tnewServers.add(server);\n\t\t}\n\t}\n\tif (!newServers.equals(this.servers)) {\n\t\tthis.servers = newServers;\n\t\tsave();\n\t}\n}", "CodeBleu_score": 30.913917404597157}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\terverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> eps = new ArrayList<>(Util.fixNull(servers));\n\tfor (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (serverUrl.equals(endpoint.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t}\n\t}\n\tif (eps.equals(servers)) {\n\t\treturn false;\n\t}\n\tthis.servers = eps;\n\tsave();\n\treturn true;\n}", "CodeBleu_score": 49.94959709288675}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\terverUrl = normalizeServerUrl(serverUrl);\n\tif (serverUrl == null) {\n\t\treturn false;\n\t}\n\tboolean removed = false;\n\tfor (Iterator<GiteaServer> iterator = servers.iterator(); iterator.hasNext();) {\n\t\tGiteaServer server = iterator.next();\n\t\tif (serverUrl.equals(server.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t\tremoved = true;\n\t\t}\n\t}\n\tif (removed) {\n\t\tsave();\n\t}\n\treturn removed;\n}", "CodeBleu_score": 46.24057308509349}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\tist<GiteaServer> eps = getServers();\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tfor (ListIterator<GiteaServer> iterator = eps.listIterator(); iterator.hasNext(); ) {\n\t\tGiteaServer endpoint = iterator.next();\n\t\tif (serverUrl.equals(endpoint.getServerUrl())) {\n\t\t\titerator.remove();\n\t\t}\n\t}\n\tsetServers(eps);\n\treturn!eps.equals(getServers());\n}", "CodeBleu_score": 39.84111386265065}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t(Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\t\tString type = el.asType().toString();\n\t\tdescriptorElements.add(new DescriptorElement(attributes, type));\n\t}\n}", "CodeBleu_score": 42.33491876851447}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t(Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\t\tString type = el.asType().toString();\n\t\tdescriptorElements.add(new DescriptorElement(attributes, type));\n\t}\n}", "CodeBleu_score": 42.33491876851447}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t(Element el : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tMap<String, String> attributes = getAttributesFromAnnotation(el, annotation);\n\t\tattributes.put(\"type\", el.asType().toString());\n\t\tdescriptorElements.add(new DescriptorElement(el, attributes));\n\t}\n}", "CodeBleu_score": 35.34791928054142}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString annotationName = annotation.getQualifiedName().toString();\n\t\tString targetName = annotationClass.getName().replace('$', '.');\n\t\tif (annotationName.equals(targetName) || annotationName.startsWith(targetName + \".\")) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.40531060627524}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tfor (TypeElement annotation : annotations) {\n\t\tString annotationName = annotation.getQualifiedName().toString();\n\t\tString targetName = annotationClass.getName().replace('$', '.');\n\t\tif (annotationName.equals(targetName) || annotationName.startsWith(targetName + \".\")) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.40531060627524}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t\tString annotationClassName = annotationClass.getCanonicalName();\n\tfor (TypeElement annotation : annotations) {\n\t\tString qualifiedName = annotation.getQualifiedName().toString();\n\t\tif (qualifiedName.replace('$', '.').equals(annotationClassName)) {\n\t\t\treturn annotation;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.78668478023672}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee, \"docstatus\": 1}\n    if for_approval:\n        filters.update(\n            {\n                \"status\": [\"!=\", \"Approved\"],\n                \"approver_id\": approver_id or employee,\n                \"approver_id\": [\"!=\", employee],\n            }\n        )\n    else:\n        filters.update({\"status\": \"Open\"})\n\n    workflow = get_workflow_for_doctype(\"Leave Application\")\n    if workflow:\n        filters[\"workflow_state\"] = get_allowed_states_for_workflow(workflow, employee)\n\n    return filters\n\n", "CodeBleu_score": 33.662001412253304}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n    }\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"approver_id\"] = approver_id\n        filters[\"name\"] = [\"not in\", get_leave_applications_by_employee(employee, \"Open\")]\n    else:\n        filters[\"status\"] = [\"!=\", \"Canceled\"]\n\n    return filters\n\n", "CodeBleu_score": 26.869519058989233}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\"employee\": employee}\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        if approver_id:\n            filters[\"approver_id\"] = approver_id\n            filters[\"status\"] = \"Open\"\n            filters[\"workflow_state\"] = [\"!=\", \"Rejected\"]\n        else:\n            filters[\"workflow_state\"] = [\"!=\", \"Rejected\"]\n            filters[\"status\"] = \"Open\"\n            filters[\"approver_id\"] = [\"!=\", employee]\n    else:\n        filters[\"status\"] = [\"not in\", [\"Rejected\", \"Canceled\"]]\n    return filters\n\n", "CodeBleu_score": 28.304640612156835}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    leave_balance_map = {}\n    current_date = datetime.date.today()\n    leave_details = get_leave_details(employee)\n    for leave_type in leave_details:\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_details[leave_type][\"allocated\"],\n            \"balance\": leave_details[leave_type][\"allocated\"] - leave_details[leave_type][\"taken\"],\n            \"expiry\": leave_details[leave_type][\"expiry\"]\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 39.38809786896569}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = date.today()\n    leave_details = get_leave_details(employee)\n    leave_balance_map = {}\n    for leave in leave_details:\n        leave_balance_map[leave['leave_type']] = {\n            'allocated': leave['allocated'],\n            'balance': leave['balance'],\n            'taken': leave['taken'],\n            'pending': leave['pending'],\n            'balance_on_date': leave['balance'] - leave['taken'] + leave['pending']\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 35.35405706321085}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = datetime.date.today()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave in leave_details:\n        leave_balance_map[leave[\"leave_type\"]] = {\n            \"allocated\": leave[\"allocated\"],\n            \"balance\": leave[\"balance\"],\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 35.88636358734622}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    holidays = []\n\n    try:\n        holiday_list = HolidayList.objects.get(employee=employee)\n    except HolidayList.DoesNotExist:\n        return holidays\n\n    holidays = Holiday.objects.filter(holiday_list=holiday_list).exclude(holiday_type=\"Weekly off\").order_by(\"date\")\n\n    for holiday in holidays:\n        holiday.description = strip_tags(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 27.661240757923416}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n\n    # Get the holiday list for the employee\n    holiday_list = get_holiday_list_for_employee(employee)\n\n    # If no holiday list is found, return an empty list\n    if holiday_list is None:\n        return []\n\n    # Query the holidays from the database, excluding weekly offs\n    holidays = Holiday.query.filter(Holiday.date >= holiday_list.start_date, Holiday.date <= holiday_list.end_date, Holiday.type!= \"Weekly off\").order_by(Holiday.date).all()\n\n    # Strip HTML from the holiday descriptions\n    for holiday in holidays:\n        holiday.description = strip_tags(holiday.description)\n\n    # Return the list of holidays\n    return holidays\n\n", "CodeBleu_score": 30.393632738753695}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = get_holiday_list(employee)\n    if not holiday_list:\n        return []\n    holidays = Holiday.objects.filter(holiday_list=holiday_list).exclude(holiday_type=\"Weekly Off\").order_by(\"date\")\n    for holiday in holidays:\n        holiday.description = strip_tags(holiday.description)\n    return holidays\n\n", "CodeBleu_score": 28.17478554529561}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_single(\"HR Settings\")\n    if settings.send_holiday_reminders and settings.frequency_of_holiday_reminders == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 19.77921167176331}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    hr_settings = frappe.get_single(\"HR Settings\")\n    if hr_settings.send_advance_holiday_reminders and hr_settings.advance_reminder_frequency == \"Weekly\":\n        send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 21.26401237317528}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_advance_holiday_reminders\"):\n        return\n    if frappe.db.get_single_value(\"HR Settings\", \"advance_holiday_reminders_frequency\")!= \"Weekly\":\n        return\n    send_advance_holiday_reminders(\"Weekly\")\n\n", "CodeBleu_score": 36.932476255790846}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings.all():\n        self_appraisal_score += (self_rating.rating * 5) * (self_rating.weightage / 100)\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n    self.save()\n\n", "CodeBleu_score": 25.577278275371683}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for self_rating in self.self_ratings.all():\n        self_appraisal_score += self_rating.rating * 5 * self_rating.weightage / 100\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n    self.save()\n\n", "CodeBleu_score": 25.36388123297201}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    self_appraisal_score = 0\n    for entry in self.self_ratings:\n        self_appraisal_score += entry.rating * 5 * (entry.weightage / 100)\n    self.self_appraisal_score = round(self_appraisal_score, 2)\n\n", "CodeBleu_score": 32.874124613513864}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = self.env[\"hr.appraisal.cycle\"].browse(self.appraisal_cycle_id.id)\n    if appraisal_cycle.calculate_final_score_formula:\n        formula = appraisal_cycle.calculate_final_score_formula\n        if formula:\n            formula = sanitize_expression(formula)\n            if formula:\n                try:\n                    total_score = self.total_score\n                    average_feedback_score = self.average_feedback_score\n                    self_appraisal_score = self.self_appraisal_score\n                    final_score = eval(formula)\n                    self.final_score = round(final_score, 2)\n                except Exception as e:\n                    raise ValidationError(f\"Error while evaluating the final score formula: {e}\")\n            else:\n                raise ValidationError(\"Invalid final score formula\")\n        else:\n            raise ValidationError(\"Final score formula is empty\")\n    else:\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n        final_score = (total_score + average_feedback_score + self_appraisal_score) / 3\n        self.final_score = round(final_score, 2)\n\n", "CodeBleu_score": 27.26935737088513}, {"code": "def calculate_final_score(self)\n\t\n\n    # Get the appraisal cycle document\n    appraisal_cycle = self.env[\"hr.appraisal.cycle\"].browse(self.appraisal_cycle_id.id)\n\n    # Check if the final score should be calculated based on a formula\n    if appraisal_cycle.calculate_final_score_formula:\n        # Gather necessary data\n        total_score = self.total_score\n        average_feedback_score = self.average_feedback_score\n        self_appraisal_score = self.self_appraisal_score\n\n        # Sanitize the formula\n        formula = sanitize_expression(appraisal_cycle.final_score_formula)\n\n        # Evaluate the formula\n        try:\n            final_score = eval(formula)\n        except Exception as e:\n            raise ValidationError(f\"Error evaluating final score formula: {e}\")\n    else:\n        # Calculate the final score as the average of the total score, average feedback score, and self-appraisal score\n        final_score = (self.total_score + self.average_feedback_score + self.self_appraisal_score) / 3\n\n    # Set the final score with the appropriate precision\n    self.final_score = round(final_score, appraisal_cycle.final_score_precision)\n\n", "CodeBleu_score": 33.808686219761036}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = self.env[\"hr.appraisal.cycle\"].browse(self.appraisal_cycle_id.id)\n    if appraisal_cycle.final_score_formula:\n        data = {}\n        data[\"total_score\"] = self.total_score\n        data[\"average_feedback_score\"] = self.average_feedback_score\n        data[\"self_appraisal_score\"] = self.self_appraisal_score\n        data[\"appraisal_cycle\"] = appraisal_cycle\n        data[\"employee\"] = self.employee_id\n        data[\"employee_id\"] = self.employee_id.id\n        data[\"department\"] = self.employee_id.department_id\n        data[\"department_id\"] = self.employee_id.department_id.id\n        data[\"job\"] = self.employee_id.job_id\n        data[\"job_id\"] = self.employee_id.job_id.id\n        data[\"appraisal\"] = self\n        data[\"appraisal_id\"] = self.id\n        data[\"self\"] = self\n        data[\"_\"] = _\n        data[\"__\"] = __\n        data[\"_lt\"] = _lt\n        data[\"_le\"] = _le\n        data[\"_eq\"] = _eq\n        data[\"_ne\"] = _ne\n        data[\"_ge\"] = _ge\n        data[\"_gt\"] = _gt\n        data[\"_in\"] = _in\n        data[\"_not_in\"] = _not_in\n        data[\"_contains\"] = _contains\n        data[\"_not_contains\"] = _not_contains\n        data[\"_ilike\"] = _ilike\n        data[\"_not_ilike\"] = _not_ilike\n        data[\"_like\"] = _like\n        data[\"_not_like\"] = _not_like\n        data[\"_parent_name\"] = _parent_name\n        data[\"_parent_store\"] = _parent_store\n        data[\"_prefetch\"] = _prefetch\n        data[\"_prefetch_count\"] = _prefetch_count\n        data[\"_prefetch_all\"] = _prefetch_all\n        data[\"_prefetch_ref\"] = _prefetch_ref\n        data[\"_prefetch_ref_list\"] = _prefetch_ref_list\n        data[\"_prefetch_children\"] = _prefetch", "CodeBleu_score": 21.275962737824713}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date < self.employee_id.date_of_joining:\n        raise ValidationError(\"Attendance date cannot be earlier than the employee's date of joining.\")\n\n    if self.attendance_date > fields.Date.today():\n        if self.status!= \"On Leave\":\n            raise ValidationError(\"Attendance cannot be marked for future dates unless the employee is on leave.\")\n        elif self.leave_application_id:\n            raise ValidationError(\"Attendance cannot be marked for future dates if there is a leave application.\")\n\n", "CodeBleu_score": 24.667870537247214}, {"code": "def validate_attendance_date(self)\n\t\n    if self.employee_id.date_of_joining and self.employee_id.date_of_joining > self.attendance_date:\n        raise ValidationError(_(\"You cannot mark attendance before joining date!\"))\n    if self.attendance_date > fields.Date.today():\n        if self.status!= \"On Leave\":\n            raise ValidationError(_(\"You cannot mark attendance for future dates unless you are on leave!\"))\n        if not self.leave_application_id:\n            raise ValidationError(_(\"You cannot mark attendance for future dates unless you are on leave and have a leave application!\"))\n\n", "CodeBleu_score": 25.8866621983945}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > fields.Date.today():\n        if self.status!= 'On Leave':\n            raise ValidationError(\"You cannot mark attendance for future dates unless the status is 'On Leave' and there is no leave application.\")\n    if self.attendance_date < self.employee_id.date_of_joining:\n        raise ValidationError(\"You cannot mark attendance for a date earlier than the employee's date of joining.\")\n\n", "CodeBleu_score": 19.690924048774058}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t   duplicate_record = self.get_duplicate_attendance_record()\n    if duplicate_record:\n        frappe.throw(\n            _(\n                f\"Attendance record for employee {self.employee} on {self.attendance_date} already exists. <a href='#Form/Attendance/{duplicate_record}' target='_blank'>View Attendance</a>\"\n            )\n        )\n\n", "CodeBleu_score": 22.841807834204005}, {"code": "def validate_duplicate_record(self)\n\t   duplicate = self.get_duplicate_attendance_record()\n    if duplicate:\n        frappe.throw(\n            _(\n                f\"Attendance record already exists for {self.employee} on {self.attendance_date}. <a href='#Form/Attendance/{duplicate}'>Click here to open it</a>\"\n            )\n        )\n\n", "CodeBleu_score": 24.800836488210436}, {"code": "def validate_duplicate_record(self)\n\t   if self.get_duplicate_attendance_record:\n        frappe.throw(\n            _(\n                \"Attendance record already exists for employee {0} on {1}. <a href='#Form/Attendance/{2}'>Click here</a> to view the existing record.\"\n            ).format(self.employee, self.attendance_date, self.get_duplicate_attendance_record),\n            title=_(\"Duplicate Attendance Record\"),\n        )\n", "CodeBleu_score": 29.856527973562898}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    if not self.email_sent_to:\n        frappe.throw(_(\"Email Sent To is mandatory\"))\n\n    if not self.message:\n        frappe.throw(_(\"Message is mandatory\"))\n\n    if not self.daily_work_summary_group:\n        frappe.throw(_(\"Daily Work Summary Group is mandatory\"))\n\n    message_details = self.get_message_details\n    message_details.update(\n        dict(\n            sender_name=frappe.session.user,\n            sender_image=frappe.session.user_image,\n            subject=_(\"Daily Work Summary\"),\n        )\n    )\n\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n    if not emails:\n        frappe.throw(_(\"No user found in the group\"))\n\n    email_args = {\n        \"recipients\": emails,\n        \"message\": message_details,\n        \"header\": _(\"Daily Work Summary\"),\n        \"subject\": message_details.get(\"subject\"),\n        \"sender\": frappe.session.user,\n        \"communication_type\": \"Communication\",\n        \"reference_doctype\": self.doctype,\n        \"reference_name\": self.name,\n        \"send_email\": True,\n        \"send_me_a_copy\": False,\n        \"print_html\": True,\n    }\n    email = frappe.get_doc(email_args)\n    email.insert(ignore_permissions=True)\n    email.send()\n    self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 42.44039659112618}, {"code": "def send_summary(self)\n\t\n    message_details = self.get_message_details()\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n    if emails:\n        send_email(\n            recipients=emails,\n            subject=message_details.get(\"title\"),\n            message=frappe.get_template(\"templates/emails/daily_work_summary.html\").render(\n                message_details\n            ),\n            header=message_details.get(\"title\"),\n            reference_doctype=self.doctype,\n            reference_name=self.name,\n        )\n        self.db_set(\"status\", \"Sent\")\n", "CodeBleu_score": 46.711412206423795}, {"code": "def send_summary(self)\n\t\n    # get message details\n    message_details = self.get_message_details()\n\n    # get email addresses of users in the specified group\n    emails = get_user_emails_from_group(self.daily_work_summary_group)\n\n    # send email\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details[\"title\"],\n        message=frappe.get_template(\"templates/emails/daily_work_summary.html\").render(message_details),\n        header=\"Work Summary\",\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n\n    # update status to \"Sent\"\n    self.status = \"Sent\"\n    self.save()\n\n", "CodeBleu_score": 48.191630857405556}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant_id and self.job_applicant_id.interview_ids:\n        for interview in self.job_applicant_id.interview_ids:\n            if interview.round_id == self.round_id and interview.id!= self.id:\n                raise ValidationError(_(\"You cannot have two interviews for the same job applicant in the same round. \n", "CodeBleu_score": 21.693382288088035}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.interview_round_id:\n        existing_interview = self.env['hr.applicant.interview'].search([\n            ('applicant_id', '=', self.applicant_id.id),\n            ('interview_round_id', '=', self.interview_round_id.id),\n            ('id', '!=', self.id)\n        ])\n        if existing_interview:\n            raise ValidationError(_(\n                'Job applicant is not allowed to appear twice for the same interview round. Please check the existing interview record: <a href=# data-oe-model=hr.applicant.interview data-oe-id=%d>%s</a> for job applicant: <a href=# data-oe-model=hr.applicant data-oe-id=%d>%s</a>' % (\n                    existing_interview.id, existing_interview.name, self.applicant_id.id, self.applicant_id.name)))\n\n", "CodeBleu_score": 44.57344613209136}, {"code": "def validate_duplicate_interview(self)\n\t\n    if self.applicant_id and self.round_id:\n        duplicate_interview = db.session.query(Interview).filter(Interview.applicant_id == self.applicant_id, Interview.round_id == self.round_id).first()\n        if duplicate_interview and duplicate_interview.id!= self.id:\n            raise Exception(f\"Job applicant {self.applicant.name} is not allowed to appear twice for the same interview round. Existing interview record: {duplicate_interview.id} - {duplicate_interview.round.name}\")\n\n", "CodeBleu_score": 43.64123088204558}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 27.55571226650465}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    num_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            num_assessments += 1\n    if num_assessments > 0:\n        self.average_rating = total_rating / num_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 25.423236665617033}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    number_of_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating is not None:\n            total_rating += assessment.rating\n            number_of_assessments += 1\n    if number_of_assessments > 0:\n        self.average_rating = total_rating / number_of_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.731622895481564}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = Interview(round=doc[\"round\"], designation=doc[\"designation\"])\n    if \"interviewers\" in doc:\n        interview.interviewers = doc[\"interviewers\"]\n    return interview\n\n", "CodeBleu_score": 39.86554735592146}, {"code": "def create_interview(doc):\n\t\n    interview = {\n        \"interview_round\": doc[\"interview_round\"],\n        \"designation\": doc[\"designation\"],\n        \"interview_details\": []\n    }\n    if \"interviewers\" in doc:\n        interview[\"interview_details\"] = doc[\"interviewers\"]\n    return interview\n\n", "CodeBleu_score": 21.392225204437192}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = Interview()\n    interview.round = doc['round']\n    interview.designation = doc['designation']\n    if 'interviewers' in doc:\n        interview.interviewers = doc['interviewers']\n    return interview\n\n", "CodeBleu_score": 39.937248689244136}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    for job_offer in self.job_offer_ids:\n        if job_offer.state =='submitted' and job_offer.designation_id.name == self.name and job_offer.company_id.name == self.company_id.name and job_offer.date_created >= from_date and job_offer.date_created <= to_date:\n            job_offers.append(job_offer.name)\n    return job_offers\n\n", "CodeBleu_score": 38.62501986637199}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer_names = []\n    job_offers = self.env['hr.job'].search([('create_date', '>=', from_date), ('create_date', '<=', to_date), ('state', '=','submitted')])\n    for job_offer in job_offers:\n        job_offer_names.append(job_offer.name)\n    return job_offer_names\n\n", "CodeBleu_score": 35.83638530034943}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = []\n    for job_offer in self.job_offer_ids:\n        if job_offer.document_status == '1' and job_offer.designation_id.id == self.id and job_offer.company_id.id == self.company_id.id and job_offer.date_created >= from_date and job_offer.date_created <= to_date:\n            job_offers.append(job_offer.name)\n    return job_offers\n\n", "CodeBleu_score": 38.923250934209186}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_offers = frappe.db.sql(f\"\"\"\n        SELECT COUNT(*) FROM `tabJob Offer`\n        WHERE docstatus = 1\n        {get_company_filter(company)}\n        {get_department_filter(department)}\n    \"\"\", as_dict=True)[0]['COUNT(*)']\n\n    accepted_offers = frappe.db.sql(f\"\"\"\n        SELECT COUNT(*) FROM `tabJob Offer`\n        WHERE docstatus = 1\n        AND status = 'Accepted'\n        {get_company_filter(company)}\n        {get_department_filter(department)}\n    \"\"\", as_dict=True)[0]['COUNT(*)']\n\n    if total_offers == 0:\n        return 0\n    else:\n        return accepted_offers / total_offers * 100\n\n", "CodeBleu_score": 18.1869955576908}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"company\": company, \"docstatus\": 1, \"status\": \"Accepted\"})\n    elif department:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"department\": department, \"docstatus\": 1, \"status\": \"Accepted\"})\n    else:\n        total_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n        accepted_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"})\n\n    if total_offers == 0:\n        return 0\n    else:\n        return round((accepted_offers / total_offers) * 100, 2)\n\n", "CodeBleu_score": 35.44466410358725}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    if company:\n        total_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company='{company}'\"\"\", as_dict=True\n        )\n        accepted_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND company='{company}' AND status='Accepted'\"\"\",\n            as_dict=True,\n        )\n    elif department:\n        total_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND department='{department}'\"\"\", as_dict=True\n        )\n        accepted_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND department='{department}' AND status='Accepted'\"\"\",\n            as_dict=True,\n        )\n    else:\n        total_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1\"\"\", as_dict=True\n        )\n        accepted_offers = frappe.db.sql(\n            f\"\"\"SELECT COUNT(*) FROM `tabJob Offer` WHERE docstatus=1 AND status='Accepted'\"\"\",\n            as_dict=True,\n        )\n\n    acceptance_rate = accepted_offers[0][\"COUNT(*)\"] / total_offers[0][\"COUNT(*)\"] * 100\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 23.449304560633937}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess())\n\t\treturn new ResponseEntity<>(result, HttpStatus.BAD_REQUEST);\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 90.1853799484973}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\tfinal Result result = arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaff.getPassword());\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn new SuccessResult();\n}", "CodeBleu_score": 44.59081553215738}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal CompanyStaff companyStaff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (companyStaff == null) {\n\t\treturn new ErrorResult(Messages.companyStaffNotFound);\n\t}\n\tif (!companyStaff.getPassword().equals(companyStaffForUpdateDto.getPassword())) {\n\t\treturn new ErrorResult(Messages.invalidPassword);\n\t}\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(companyStaff);\n\treturn new SuccessResult();\n}", "CodeBleu_score": 39.09817547120005}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal var staff = companyStaffRepository.findById(companyStaffForUpdateDto.getId()).orElse(null);\n\tif (staff == null) {\n\t\treturn new ErrorResult(Messages.staffNotFound);\n\t}\n\tfinal var result = arePasswordMatch(staff.getPassword(), companyStaffForUpdateDto.getPassword());\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\tstaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tstaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffRepository.save(staff);\n\treturn new SuccessResult();\n}", "CodeBleu_score": 42.575085267877014}]}
