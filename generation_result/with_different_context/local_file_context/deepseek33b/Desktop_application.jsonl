{"instance_id": "a6e254b7b855", "generation_result": [{"code": "translateTemplate(template, keystrokesByCommand){\n\t    for (let item of this.flattenMenuTemplate(template)) {\n        item.metadata = item.metadata || {};\n        if (item.command) {\n            const keystrokes = keystrokesByCommand[item.command];\n            if (keystrokes) {\n                const firstKeystroke = keystrokes[0];\n                if (item.label.includes(' ')) item.label = firstKeystroke;\n                else item.accelerator = firstKeystroke;\n            }\n\n            item.click = () => global.atomApplication.sendCommand(item.command);\n            if (!item.command.startsWith('application:'))\n                item.metadata.windowSpecific = true;\n        }\n\n        if (item.submenu) this.translateTemplate(item.submenu, keystrokesByCommand);\n    }\n\n    return template;\n}", "CodeBleu_score": 51.69506752370604}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t    for (let item of template) {\n      item.metadata = item.metadata || {};\n      if (item.command) {\n        const keystrokes = keystrokesByCommand[item.command];\n        if (keystrokes) {\n          const keystroke = keystrokes[0];\n          if (item.label.includes(' ')) {\n            item.label = keystroke;\n          } else {\n            item.accelerator = keystroke;\n          }\n        }\n        item.click = () => global.atomApplication.sendCommand(item.command);\n        if (!item.command.startsWith('application:')) {\n          item.metadata.windowSpecific = true;\n        }\n      }\n      if (item.submenu) {\n        this.translateTemplate(item.submenu, keystrokesByCommand);\n      }\n    }\n    return template;\n  }", "CodeBleu_score": 59.16420685397692}, {"code": "translateTemplate(template, keystrokesByCommand){\n\t    for (const item of template) {\n      if (item.metadata == null) {\n        item.metadata = {};\n      }\n\n      if (item.command) {\n        const keystrokes = keystrokesByCommand[item.command];\n        if (keystrokes) {\n          const keystroke = keystrokes[0];\n          if (keystroke.includes(' ')) {\n            item.label = `${item.label} ${keystroke}`;\n          } else {\n            item.accelerator = keystroke;\n          }\n        }\n\n        if (!item.command.startsWith('application:')) {\n          item.click = () => global.atomApplication.sendCommand(item.command);\n          item.metadata.windowSpecific = true;\n        }\n      }\n\n      if (item.submenu) {\n        this.translateTemplate(item.submenu, keystrokesByCommand);\n      }\n    }\n\n    return template;\n  }", "CodeBleu_score": 62.14580306406777}]}
{"instance_id": "c4ff073b485f", "generation_result": [{"code": "flattenMenuItems(menu){\n\t    const items = [];\n    for (const item of menu.items) {\n        items.push(item);\n        if (item.submenu)\n            items.push(...this.flattenMenuItems(item.submenu));\n    }\n    return items;\n}", "CodeBleu_score": 39.78374711176668}, {"code": "flattenMenuItems(menu){\n\t    let items = [];\n    for (let item of menu.items) {\n        items.push(item);\n        if (item.submenu) {\n            items = items.concat(this.flattenMenuItems(item.submenu));\n        }\n    }\n    return items;\n}", "CodeBleu_score": 47.664903854630914}, {"code": "flattenMenuItems(menu){\n\t    let items = [];\n    for (let item of menu.items) {\n        items.push(item);\n        if (item.submenu) {\n            items = items.concat(this.flattenMenuItems(item.submenu));\n        }\n    }\n    return items;\n}", "CodeBleu_score": 47.664903854630914}]}
{"instance_id": "dba487230999", "generation_result": [{"code": "const encryptOptions = (options, secret) =>{\n\t  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  const encryptedContent = Buffer.concat([\n    cipher.update(JSON.stringify(options)),\n    cipher.final()\n  ]);\n  const authTag = cipher.getAuthTag();\n  return JSON.stringify({\n    authTag: authTag.toString('hex'),\n    encryptedContent: encryptedContent.toString('hex'),\n    iv: iv.toString('hex')\n  });\n}", "CodeBleu_score": 54.37849283184666}, {"code": "const encryptOptions = (options, secret) =>{\n\t  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  const encryptedContent = Buffer.concat([\n    cipher.update(JSON.stringify(options), 'utf8'),\n    cipher.final()\n  ]);\n  const authTag = cipher.getAuthTag();\n  return JSON.stringify({\n    authTag: authTag.toString('hex'),\n    encryptedContent: encryptedContent.toString('hex'),\n    iv: iv.toString('hex')\n  });\n}", "CodeBleu_score": 56.17549212412727}, {"code": "const encryptOptions = (options, secret) =>{\n\t  const jsonString = JSON.stringify(options);\n  const iv = crypto.randomBytes(16);\n  const cipher = crypto.createCipheriv('aes-256-gcm', secret, iv);\n  const encrypted = cipher.update(jsonString, 'utf8', 'hex');\n  const tag = cipher.getAuthTag().toString('hex');\n  const encryptedOptions = JSON.stringify({\n    encrypted,\n    iv: iv.toString('hex'),\n    tag\n  });\n  return encryptedOptions;\n}", "CodeBleu_score": 56.73543759881334}]}
{"instance_id": "7efe3d7cee0f", "generation_result": [{"code": "createClickHandlers(template){\n\t    for (const item of template) {\n      if (item.command) {\n        item.commandDetail = {\n          windowId: this.atomWindow.id,\n          contextCommand: true\n        };\n        item.click = (item, focusedWindow) => {\n          global.atomApplication.sendCommandToWindow(item.command, this.atomWindow, focusedWindow, item.commandDetail);\n        };\n      }\n      if (item.submenu) {\n        this.createClickHandlers(item.submenu);\n      }\n    }\n  }", "CodeBleu_score": 55.523933959227854}, {"code": "createClickHandlers(template){\n\t    template.forEach((item, index) => {\n      if (item.command) {\n        if (!item.commandDetail) {\n          item.commandDetail = {\n            windowId: this.atomWindow.id,\n            window: this.atomWindow\n          };\n        }\n        item.commandDetail.contextCommand = true;\n        item.click = () => {\n          global.atomApplication.sendCommandToWindow(item.command, item.commandDetail);\n        };\n      }\n\n      if (item.submenu) {\n        this.createClickHandlers(item.submenu);\n      }\n    });\n  }", "CodeBleu_score": 68.74225958103428}, {"code": "createClickHandlers(template){\n\t    template.forEach((item) => {\n      if (item.command) {\n        item.commandDetail = {\n          command: item.command,\n          contextCommand: true\n        };\n        item.click = () => {\n          global.atomApplication.sendCommand(this.atomWindow.id, item.commandDetail.command);\n        };\n      }\n      if (item.submenu) {\n        this.createClickHandlers(item.submenu);\n      }\n    });\n  }", "CodeBleu_score": 57.350198307790315}]}
{"instance_id": "851df56cc3b9", "generation_result": [{"code": "async didSavePath(window, path){\n\t    const recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (!recoveryFile) return;\n\n    try {\n      await recoveryFile.release();\n    } catch (err) {\n      console.log(\n        `Couldn't release ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${\n          err.message\n        }`\n      );\n      return;\n    }\n\n    this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n    this.recoveryFilesByFilePath.delete(path);\n  }", "CodeBleu_score": 77.67873014027711}, {"code": "async didSavePath(window, path){\n\t    const recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (!recoveryFile) return;\n\n    try {\n      await recoveryFile.release();\n    } catch (err) {\n      console.log(\n        `Couldn't release ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n      );\n      return;\n    }\n\n    this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n    this.recoveryFilesByFilePath.delete(path);\n  }", "CodeBleu_score": 80.68984421360058}, {"code": "async didSavePath(window, path){\n\t    const recoveryFile = this.recoveryFilesByFilePath.get(path);\n    if (!recoveryFile) return;\n\n    try {\n      await recoveryFile.release();\n    } catch (err) {\n      console.log(\n        `Couldn't release ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n      );\n      return;\n    }\n\n    const windows = this.windowsByRecoveryFile.get(recoveryFile);\n    windows.delete(window);\n    if (windows.size === 0) {\n      this.windowsByRecoveryFile.delete(recoveryFile);\n    }\n\n    const recoveryFiles = this.recoveryFilesByWindow.get(window);\n    recoveryFiles.delete(recoveryFile);\n    if (recoveryFiles.size === 0) {\n      this.recoveryFilesByWindow.delete(window);\n    }\n\n    this.recoveryFilesByFilePath.delete(path);\n  }", "CodeBleu_score": 70.07601447280302}]}
{"instance_id": "37d777933a87", "generation_result": [{"code": "async didCrashWindow(window){\n\t  const recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (recoveryFiles == null) return;\n\n  for (const recoveryFile of recoveryFiles) {\n    try {\n      await recoveryFile.recover();\n    } catch (err) {\n      console.log(\n        `Couldn't recover ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${err.message}`\n      );\n      dialog.showMessageBox({\n        type: 'error',\n        message: `Couldn't recover ${recoveryFile.path}`,\n        detail: `The file at ${recoveryFile.path} has been corrupted. It has been replaced with the recovery file at ${recoveryFile.recoveryPath}.`,\n      });\n    }\n\n    this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n    this.recoveryFilesByFilePath.delete(recoveryFile.path);\n  }\n\n  await Promise.all(\n    [...recoveryFiles].map((recoveryFile) => recoveryFile.release())\n  );\n}", "CodeBleu_score": 36.793425683996716}, {"code": "async didCrashWindow(window){\n\t  const recoveryFiles = this.recoveryFilesByWindow.get(window);\n  if (recoveryFiles == null) return;\n\n  for (const recoveryFile of recoveryFiles) {\n    try {\n      await recoveryFile.recover();\n    } catch (err) {\n      console.log(\n        `Couldn't recover ${recoveryFile.path}. Code: ${err.code}. Message: ${err.message}`\n      );\n      dialog.showErrorBox(\n        `Couldn't recover ${recoveryFile.path}`,\n        `The file ${recoveryFile.path} has been corrupted by an unresponsive window. The recovery file for this file has been left in ${recoveryFile.recoveryPath}.`\n      );\n    }\n\n    this.recoveryFilesByFilePath.delete(recoveryFile.path);\n    this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n    this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n  }\n}", "CodeBleu_score": 33.53182473982794}, {"code": "async didCrashWindow(window){\n\t    const recoveryFiles = this.recoveryFilesByWindow.get(window);\n    if (recoveryFiles == null) return;\n\n    for (const recoveryFile of recoveryFiles) {\n      try {\n        await recoveryFile.recover();\n      } catch (err) {\n        console.log(\n          `Couldn't recover ${recoveryFile.recoveryPath}. Code: ${err.code}. Message: ${\n            err.message\n          }`\n        );\n        dialog.showErrorBox(\n          'Couldn\\'t recover file',\n          `The file ${recoveryFile.path} is corrupted. It has been recovered to ${\n            recoveryFile.recoveryPath\n          }.`\n        );\n      }\n\n      this.recoveryFilesByWindow.get(window).delete(recoveryFile);\n      this.windowsByRecoveryFile.get(recoveryFile).delete(window);\n      this.recoveryFilesByFilePath.delete(recoveryFile.path);\n    }\n  }", "CodeBleu_score": 34.42814566816426}]}
{"instance_id": "935916bc7ea0", "generation_result": [{"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    const dirname = Path.dirname(destination);\n    mkdirp(dirname, error => {\n      if (error) reject(error);\n      else {\n        const readStream = fs.createReadStream(source);\n        const writeStream = fs.createWriteStream(destination, { mode });\n        readStream.on('error', reject);\n        writeStream.on('error', reject);\n        readStream.on('close', resolve);\n        readStream.pipe(writeStream);\n      }\n    });\n  });\n}", "CodeBleu_score": 61.24601540328608}, {"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    mkdirp(Path.dirname(destination), error => {\n      if (error) return reject(error);\n\n      const readStream = fs.createReadStream(source);\n      const writeStream = fs.createWriteStream(destination, { mode });\n\n      readStream.on('error', reject);\n      writeStream.on('error', reject);\n      writeStream.on('finish', resolve);\n\n      readStream.pipe(writeStream);\n    });\n  });\n}", "CodeBleu_score": 63.0943024259502}, {"code": "async function copyFile(source, destination, mode){\n\t  return new Promise((resolve, reject) => {\n    mkdirp(Path.dirname(destination), error => {\n      if (error) {\n        return reject(error);\n      }\n\n      const readStream = fs.createReadStream(source);\n      const writeStream = fs.createWriteStream(destination, { mode });\n      readStream.on('error', reject);\n      writeStream.on('error', reject);\n      readStream.on('close', resolve);\n      readStream.pipe(writeStream);\n    });\n  });\n}", "CodeBleu_score": 61.24387210490671}]}
{"instance_id": "5410353afedd", "generation_result": [{"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  const SquirrelUpdate = require('../squirrel-update');\n\n  const squirrelCommand = process.argv[1];\n  return SquirrelUpdate.handleStartupEvent(squirrelCommand);\n}", "CodeBleu_score": 96.10746179369295}, {"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  const SquirrelUpdate = require('../squirrel-update');\n\n  const squirrelCommand = process.argv[1];\n  return SquirrelUpdate.handleStartupEvent(squirrelCommand);\n}", "CodeBleu_score": 96.10746179369295}, {"code": "function handleStartupEventWithSquirrel(){\n\t  if (process.platform !== 'win32') {\n    return false;\n  }\n\n  const SquirrelUpdate = require('../squirrel-update');\n  const squirrelCommand = process.argv[1];\n  return SquirrelUpdate.handleStartupEvent(squirrelCommand, app);\n}", "CodeBleu_score": 86.8271199654428}]}
{"instance_id": "5fb2d4f077cb", "generation_result": [{"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform === 'win32' && filePath) {\n    return filePath.replace(/^([a-z]):/, (match, driveLetter) => driveLetter.toUpperCase() + ':');\n  } else {\n    return filePath;\n  }\n}", "CodeBleu_score": 77.19323079143116}, {"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform === 'win32' && filePath) {\n    return filePath.replace(/^([a-z]):/, (_, lowerCaseDriveLetter) => lowerCaseDriveLetter.toUpperCase());\n  }\n\n  return filePath;\n}", "CodeBleu_score": 65.77618543926798}, {"code": "function normalizeDriveLetterName(filePath){\n\t  if (process.platform === 'win32' && filePath) {\n    return filePath.replace(/^([a-z]):\\\\/, (match, driveLetter) => driveLetter.toUpperCase() + ':\\\\');\n  }\n\n  return filePath;\n}", "CodeBleu_score": 67.53964439861262}]}
{"instance_id": "e61a087ae10f", "generation_result": [{"code": "register(callback){\n\t    let count = this.parts.length;\n    let results = [];\n    this.parts.forEach(part => {\n      new Registry({\n        hive: 'HKCU',\n        key: `${this.key}\\\\${part.key || ''}`\n      }).set(part.name, part.type, part.value, err => {\n        results.push(err == null);\n        if (--count === 0) {\n          callback(results.every(result => result));\n        }\n      });\n    });\n  }", "CodeBleu_score": 37.773749782353576}, {"code": "register(callback){\n\t    let i = 0;\n    const parts = this.parts;\n\n    const next = () => {\n      if (i >= parts.length) {\n        return callback();\n      }\n\n      const part = parts[i++];\n      const key = `${this.key}\\\\${part.key || ''}`;\n\n      new Registry({\n        hive: 'HKCU',\n        key\n      }).create((err, reg) => {\n        if (err) {\n          return callback(err);\n        }\n\n        reg.set(part.name, part.type, part.value, err => {\n          if (err) {\n            return callback(err);\n          }\n\n          next();\n        });\n      });\n    };\n\n    next();\n  }", "CodeBleu_score": 42.28741361235405}, {"code": "register(callback){\n\t  let i = 0;\n  const parts = this.parts;\n  const partsLength = parts.length;\n  const registerNextPart = () => {\n    if (i < partsLength) {\n      const part = parts[i];\n      const key = new Registry({\n        hive: 'HKCU',\n        key: `${this.key}\\\\${part.key}`\n      });\n      key.update({\n        [part.name]: part.value\n      }, err => {\n        if (err) {\n          callback(err);\n        } else {\n          i++;\n          registerNextPart();\n        }\n      });\n    } else {\n      callback();\n    }\n  };\n  registerNextPart();\n}", "CodeBleu_score": 39.973772934125066}]}
{"instance_id": "35b1a1ac391a", "generation_result": [{"code": "showSaveDialog(options, callback){\n\t    if (typeof callback === 'function') {\n      // Async version: pass options directly to Electron but set sane defaults\n      options = Object.assign(\n        { title: 'Save', defaultPath: '', buttonLabel: 'Save' },\n        options\n      );\n      remote.dialog\n        .showSaveDialog(remote.getCurrentWindow(), options)\n        .then(result => {\n          callback(result.filePath);\n        });\n    } else {\n      // Legacy sync version: options can only have `message`, `defaultPath`, and `buttonLabel`\n      options = Object.assign(\n        { title: 'Save', defaultPath: '', buttonLabel: 'Save' },\n        options\n      );\n      return remote.dialog.showSaveDialogSync(\n        remote.getCurrentWindow(),\n        options\n      );\n    }\n  }", "CodeBleu_score": 52.21338801193487}, {"code": "showSaveDialog(options, callback){\n\t    if (typeof callback === 'function') {\n      // Async version: pass options directly to Electron but set sane defaults\n      options = Object.assign(\n        { title: 'Save File', defaultPath: '', buttonLabel: 'Save' },\n        options\n      );\n      remote.dialog\n        .showSaveDialog(remote.getCurrentWindow(), options)\n        .then(result => {\n          callback(result.filePath);\n        });\n    } else {\n      // Legacy sync version: options can only have `defaultPath`\n      if (typeof options === 'string') options = { defaultPath: options };\n      return remote.dialog.showSaveDialogSync(remote.getCurrentWindow(), options);\n    }\n  }", "CodeBleu_score": 61.9534225806055}, {"code": "showSaveDialog(options, callback){\n\t    if (typeof callback === 'function') {\n      // Async version: pass options directly to Electron but set sane defaults\n      options = Object.assign(\n        {\n          title: 'Save File',\n          buttonLabel: 'Save',\n          nameFieldLabel: 'Name',\n          showsTagField: false,\n          properties: ['createDirectory'],\n          defaultPath: getUserHome(),\n        },\n        options\n      );\n      remote.dialog\n        .showSaveDialog(remote.getCurrentWindow(), options)\n        .then(result => {\n          callback(result.filePath);\n        });\n    } else {\n      // Legacy sync version: options can only have `title`, `defaultPath`, `buttonLabel`, `filters`, and `properties`\n      let { title, defaultPath, buttonLabel, filters, properties } = options;\n      if (typeof options === 'string') {\n        defaultPath = options;\n        options = {};\n      }\n      return remote.dialog.showSaveDialogSync(\n        remote.getCurrentWindow(),\n        {\n          title,\n          defaultPath,\n          buttonLabel,\n          filters,\n          properties,\n        }\n      );\n    }\n  }", "CodeBleu_score": 50.09221888383377}]}
{"instance_id": "a7e394aca19e", "generation_result": [{"code": "async restoreWindowDimensions(){\n\t    const dimensions = this.getWindowDimensions();\n    if (!this.isValidDimensions(dimensions)) {\n      const defaultDimensions = this.getDefaultWindowDimensions();\n      await this.setWindowDimensions(defaultDimensions);\n    }\n    return this.getWindowDimensions();\n  }", "CodeBleu_score": 29.779678003900834}, {"code": "async restoreWindowDimensions(){\n\t    const { windowDimensions } = this.getLoadSettings();\n    if (windowDimensions) {\n      if (this.isValidDimensions(windowDimensions)) {\n        await this.setWindowDimensions(windowDimensions);\n      } else {\n        localStorage.removeItem('defaultWindowDimensions');\n      }\n    } else {\n      await this.setWindowDimensions(this.getDefaultWindowDimensions());\n    }\n    return this.windowDimensions;\n  }", "CodeBleu_score": 27.498275474215472}, {"code": "async restoreWindowDimensions(){\n\t    let { width, height } = this.getWindowDimensions();\n    if (!this.isValidDimensions({ width, height })) {\n      const dimensions = this.getDefaultWindowDimensions();\n      width = dimensions.width;\n      height = dimensions.height;\n      await this.setWindowDimensions(dimensions);\n    }\n    return { width, height };\n  }", "CodeBleu_score": 24.577153195911887}]}
{"instance_id": "c39fbfaa6502", "generation_result": [{"code": "installShellCommandsInteractively(){\n\t    const dialog = require('electron').dialog;\n\n    function showErrorDialog(error) {\n      dialog.showErrorBox('Installation Error', error.message);\n    }\n\n    this.installAtomCommandInteractively()\n      .then(() => this.installApmCommandInteractively())\n      .then(() => {\n        dialog.showMessageBox({\n          type: 'info',\n          buttons: ['OK'],\n          message: 'Commands installed successfully',\n          detail: 'The \"atom\" and \"apm\" commands have been installed. You can now use these commands from the terminal.'\n        });\n      })\n      .catch(showErrorDialog);\n  }", "CodeBleu_score": 24.027153001538665}, {"code": "installShellCommandsInteractively(){\n\t", "CodeBleu_score": 0.844498191678412}, {"code": "installShellCommandsInteractively(){\n\t    const showErrorDialog = (error) => {\n      this.applicationDelegate.showMessageDialog({\n        type: 'error',\n        message: 'Failed to install shell commands',\n        detail: error.message,\n      });\n    };\n\n    this.installAtomCommandInteractively()\n      .then(() => this.installApmCommandInteractively())\n      .then(() => {\n        this.applicationDelegate.showMessageDialog({\n          type: 'info',\n          message: 'Shell commands installed successfully',\n          detail: 'The \"atom\" and \"apm\" commands have been added to your PATH. Restart your terminal for the changes to take effect.',\n        });\n      })\n      .catch(showErrorDialog);\n  }", "CodeBleu_score": 43.0553087853203}]}
{"instance_id": "09d527496128", "generation_result": [{"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t    if (process.platform !== 'darwin') {\n      return callback(null, commandName);\n    }\n\n    const destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n    fs.readlink(destinationPath, (error, symlinkPath) => {\n      if (error && error.code !== 'ENOENT') {\n        return callback(error);\n      }\n\n      if (symlinkPath === commandPath) {\n        return callback(null, commandName);\n      }\n\n      if (askForPrivilege) {\n        this.applicationDelegate.sudo(\n          {\n            command: `ln -sf ${commandPath} ${destinationPath}`,\n            callback: (error, stdout, stderr) => {\n              if (error) {\n                return callback(error);\n              }\n\n              callback(null, commandName);\n            }\n          },\n          callback\n        );\n      } else {\n        fs.symlink(commandPath, destinationPath, callback);\n      }\n    });\n  }", "CodeBleu_score": 54.98736340559541}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t  if (process.platform !== 'darwin') {\n    return callback(null, commandName);\n  }\n\n  const destinationPath = path.join(this.getInstallDirectory(), commandName);\n\n  fs.readlink(destinationPath, (error, symlinkPath) => {\n    if (error && error.code !== 'ENOENT') {\n      return callback(error);\n    }\n\n    if (symlinkPath === commandPath) {\n      return callback(null, commandName);\n    }\n\n    if (askForPrivilege) {\n      return this.installCommandWithElevatedPrivilege(commandPath, destinationPath, callback);\n    } else {\n      return this.installCommandWithNormalPrivilege(commandPath, destinationPath, callback);\n    }\n  });\n}", "CodeBleu_score": 51.56657803155037}, {"code": "installCommand(commandPath, commandName, askForPrivilege, callback){\n\t  if (process.platform !== 'darwin') {\n    callback(null, commandName);\n    return;\n  }\n\n  const destinationPath = path.join(this.getInstallDirectory(), commandName);\n  fs.readlink(destinationPath, (error, symlinkPath) => {\n    if (error != null) {\n      if (error.code === 'ENOENT') {\n        this.installCommandWithPrivilege(commandPath, destinationPath, callback);\n      } else {\n        callback(error);\n      }\n      return;\n    }\n\n    if (symlinkPath === commandPath) {\n      callback(null, commandName);\n      return;\n    }\n\n    if (askForPrivilege) {\n      this.installCommandWithPrivilege(commandPath, destinationPath, callback);\n    } else {\n      callback(new Error(`Permission denied: ${destinationPath}`));\n    }\n  });\n}", "CodeBleu_score": 50.497114368454255}]}
{"instance_id": "4807d5d43396", "generation_result": [{"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t    let goalColumn;\n    if (moveToEndOfSelection && this.selection.isReversed()) {\n      goalColumn = this.selection.getGoalScreenRange().start.column;\n    }\n\n    const [newRow, newColumn] = this.getScreenPosition();\n    this.setScreenPosition([newRow - rowCount, goalColumn ?? newColumn]);\n  }", "CodeBleu_score": 36.3377921190118}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t    let { row, column } = this.getBufferPosition();\n    let goalColumn;\n\n    if (moveToEndOfSelection && this.selection.isEmpty()) {\n      const range = this.getCurrentLineBufferRange();\n      goalColumn = range.end.column;\n      if (this.selection.isReversed()) {\n        goalColumn = range.start.column;\n      }\n    }\n\n    if (goalColumn != null) {\n      column = goalColumn;\n    }\n\n    this.setBufferPosition([Math.max(0, row - rowCount), column], {\n      autoscroll: false,\n    });\n\n    if (this.editor.isFoldedAtBufferRow(row)) {\n      this.goalColumn = column;\n    } else {\n      this.goalColumn = null;\n    }\n  }", "CodeBleu_score": 37.61088501592178}, {"code": "moveUp(rowCount = 1, { moveToEndOfSelection } = {}){\n\t    const goalColumn = this.getGoalColumn();\n    let newBufferPosition;\n    if (moveToEndOfSelection && this.selection.isEmpty()) {\n      newBufferPosition = this.getBufferPosition();\n    }\n    else {\n      newBufferPosition = this.getBufferPosition().translate([-rowCount, 0]);\n    }\n    const newScreenPosition = this.editor.clipScreenPosition(\n      newBufferPosition,\n      { skipSoftWrapIndentation: true }\n    );\n    this.setScreenPosition(newScreenPosition, {\n      autoscroll: this.isLastCursor(),\n    });\n    if (goalColumn != null) {\n      this.goalColumn = goalColumn;\n    }\n  }", "CodeBleu_score": 38.53722785381915}]}
{"instance_id": "a18da78a3351", "generation_result": [{"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t    const decorationsByMarker = {};\n    this.decorationCountsByLayer.forEach((count, markerLayer) => {\n      const markers = markerLayer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow - 1]\n      });\n      const layerDecorations = this.layerDecorationsByMarkerLayer.get(markerLayer);\n      const hasMarkerDecorations = this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n      for (let i = 0; i < markers.length; i++) {\n        const marker = markers[i];\n        if (!marker.isValid()) continue;\n\n        let decorationsForMarker = decorationsByMarker[marker.id];\n        if (decorationsForMarker == null) {\n          decorationsForMarker = [];\n          decorationsByMarker[marker.id] = decorationsForMarker;\n        }\n\n        if (layerDecorations) {\n          layerDecorations.forEach(layerDecoration => {\n            const properties = layerDecoration.getPropertiesForMarker(marker) || layerDecoration.getProperties();\n            decorationsForMarker.push({\n              properties,\n              layer: layerDecoration.getLayer()\n            });\n          });\n        }\n\n        if (hasMarkerDecorations) {\n          const decorationsForMarker = this.decorationsByMarker.get(marker);\n          if (decorationsForMarker) {\n            decorationsForMarker.forEach(decoration => {\n              decorationsForMarker.push({\n                properties: decoration.getProperties(),\n                layer: decoration.getLayer()\n              });\n            });\n          }\n        }\n      }\n    });\n\n    return decorationsByMarker;\n  }", "CodeBleu_score": 42.10909676595627}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t    const decorationsByMarker = {};\n\n    for (const layer of this.displayLayer.getMarkerLayers()) {\n      const markers = layer.findMarkers({\n        intersectsScreenRowRange: [startScreenRow, endScreenRow - 1]\n      });\n\n      for (const marker of markers) {\n        if (!marker.isValid()) continue;\n\n        const decorations = this.decorationsByMarker.get(marker);\n        if (decorations) {\n          decorationsByMarker[marker.id] = decorations;\n        }\n      }\n    }\n\n    return decorationsByMarker;\n  }", "CodeBleu_score": 63.54848741439284}, {"code": "decorationsForScreenRowRange(startScreenRow, endScreenRow){\n\t  const decorationsByMarker = {};\n\n  this.decorationCountsByLayer.forEach((count, markerLayer) => {\n    const markers = markerLayer.findMarkers({\n      intersectsScreenRowRange: [startScreenRow, endScreenRow - 1]\n    });\n    const layerDecorations = this.layerDecorationsByMarkerLayer.get(\n      markerLayer\n    );\n    const hasMarkerDecorations =\n      this.markerDecorationCountsByLayer.get(markerLayer) > 0;\n\n    for (let i = 0; i < markers.length; i++) {\n      const marker = markers[i];\n      if (!marker.isValid()) continue;\n\n      let decorationsForMarker = decorationsByMarker[marker.id];\n      if (decorationsForMarker == null) {\n        decorationsForMarker = [];\n        decorationsByMarker[marker.id] = decorationsForMarker;\n      }\n\n      if (layerDecorations) {\n        layerDecorations.forEach(layerDecoration => {\n          const properties =\n            layerDecoration.getPropertiesForMarker(marker) ||\n            layerDecoration.getProperties();\n          decorationsForMarker.push(properties);\n        });\n      }\n\n      if (hasMarkerDecorations) {\n        const decorationsForMarker = this.decorationsByMarker.get(marker);\n        if (decorationsForMarker) {\n          decorationsForMarker.forEach(decoration => {\n            decorationsForMarker.push(decoration.getProperties());\n          });\n        }\n      }\n    }\n  });\n\n  return decorationsByMarker;\n}", "CodeBleu_score": 43.01485113579606}]}
{"instance_id": "950f6b74f379", "generation_result": [{"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n      const error = new Error('Cannot decorate a destroyed marker layer');\n      error.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\n      if (markerLayer.destroyStackTrace != null) {\n        error.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n      }\n      throw error;\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let decorationsForMarkerLayer = this.decorationsByMarkerLayer.get(markerLayer);\n    if (!decorationsForMarkerLayer) {\n      decorationsForMarkerLayer = new Set();\n      this.decorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n    }\n    decorationsForMarkerLayer.add(decoration);\n    this.observeDecoratedLayer(markerLayer, true);\n    this.editor.didAddDecoration(decoration);\n    this.emitDidUpdateDecorations();\n    this.emitter.emit('did-add-decoration', decoration);\n    return decoration;\n  }", "CodeBleu_score": 65.58316151505441}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n      const error = new Error('Cannot decorate a destroyed marker layer');\n      error.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\n      if (markerLayer.destroyStackTrace != null) {\n        error.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n      }\n      throw error;\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(\n      markerLayer\n    );\n    if (!decorationsForMarkerLayer) {\n      decorationsForMarkerLayer = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n    }\n    decorationsForMarkerLayer.add(decoration);\n    this.observeDecoratedLayer(markerLayer, true);\n    this.emitDidUpdateDecorations();\n    return decoration;\n  }", "CodeBleu_score": 69.02136890018949}, {"code": "decorateMarkerLayer(markerLayer, decorationParams){\n\t    if (markerLayer.isDestroyed()) {\n      const error = new Error('Cannot decorate a destroyed marker layer');\n      error.metadata = { markerLayerIsDestroyed: markerLayer.isDestroyed() };\n      if (markerLayer.destroyStackTrace != null) {\n        error.metadata.destroyStackTrace = markerLayer.destroyStackTrace;\n      }\n      throw error;\n    }\n    markerLayer = this.displayLayer.getMarkerLayer(markerLayer.id);\n    const decoration = new LayerDecoration(markerLayer, this, decorationParams);\n    let decorationsForMarkerLayer = this.layerDecorationsByMarkerLayer.get(\n      markerLayer\n    );\n    if (!decorationsForMarkerLayer) {\n      decorationsForMarkerLayer = new Set();\n      this.layerDecorationsByMarkerLayer.set(markerLayer, decorationsForMarkerLayer);\n    }\n    decorationsForMarkerLayer.add(decoration);\n    this.observeDecoratedLayer(markerLayer, true);\n    this.emitDidUpdateDecorations();\n    this.emitter.emit('did-add-decoration', decoration);\n    return decoration;\n  }", "CodeBleu_score": 67.6273024089425}]}
{"instance_id": "ab015a5cc75d", "generation_result": [{"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t    const count = this.decorationCountsByLayer.get(layer) || 0;\n    this.decorationCountsByLayer.set(layer, count + 1);\n\n    if (count === 0) {\n      const disposable = layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this));\n      this.disposablesByLayer.set(layer, disposable);\n    }\n\n    if (isMarkerDecoration) {\n      const markerDecorationCount = this.markerDecorationCountsByLayer.get(layer) || 0;\n      this.markerDecorationCountsByLayer.set(layer, markerDecorationCount + 1);\n    }\n  }", "CodeBleu_score": 56.38149977390705}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t    const decorationCounts = this.decorationCountsByLayer.get(layer);\n    if (decorationCounts == null) {\n      this.decorationCountsByLayer.set(layer, 1);\n      const disposable = layer.onDidUpdate(() => this.emitDidUpdateDecorations());\n      this.decorationCountsDisposablesByLayer.set(layer, disposable);\n      if (isMarkerDecoration) {\n        this.markerDecorationCountsByLayer.set(layer, 1);\n      }\n    } else {\n      this.decorationCountsByLayer.set(layer, decorationCounts + 1);\n      if (isMarkerDecoration) {\n        const markerDecorationCounts = this.markerDecorationCountsByLayer.get(layer);\n        if (markerDecorationCounts == null) {\n          this.markerDecorationCountsByLayer.set(layer, 1);\n        } else {\n          this.markerDecorationCountsByLayer.set(layer, markerDecorationCounts + 1);\n        }\n      }\n    }\n  }", "CodeBleu_score": 40.6889590314661}, {"code": "observeDecoratedLayer(layer, isMarkerDecoration){\n\t    const decorationCountsByLayer = this.decorationCountsByLayer;\n    const markerDecorationCountsByLayer = this.markerDecorationCountsByLayer;\n    const count = (decorationCountsByLayer.get(layer) || 0) + 1;\n    decorationCountsByLayer.set(layer, count);\n    if (isMarkerDecoration) {\n      const count = (markerDecorationCountsByLayer.get(layer) || 0) + 1;\n      markerDecorationCountsByLayer.set(layer, count);\n    }\n    if (count === 1) {\n      layer.onDidUpdate(this.emitDidUpdateDecorations.bind(this));\n      this.decorationCountsSubscriptionsByLayer.set(layer, layer.onDidDestroy(() => {\n        this.decorationCountsSubscriptionsByLayer.delete(layer);\n        decorationCountsByLayer.delete(layer);\n        markerDecorationCountsByLayer.delete(layer);\n        this.emitDidUpdateDecorations();\n      }));\n    }\n  }", "CodeBleu_score": 45.59868684285463}]}
{"instance_id": "9d7f091a1b67", "generation_result": [{"code": "finishLoading(){\n\t    this.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      ModuleCache.add(this.path, this.metadata);\n      this.loadStylesheets();\n      this.mainModulePath = this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 63.31343223496131}, {"code": "finishLoading(){\n\t    this.measure('loadTime', () => {\n      this.path = path.join(this.packageManager.resourcePath, this.path);\n      ModuleCache.add(this.path, this.metadata);\n      this.loadStylesheets();\n      this.mainModulePath = this.getMainModulePath();\n    });\n  }", "CodeBleu_score": 63.31343223496131}, {"code": "finishLoading(){\n\t  this.measure('loadTime', () => {\n    this.path = path.join(this.packageManager.resourcePath, this.path);\n    this.mainModulePath = this.getMainModulePath();\n    this.moduleCache.add(this.path, this.metadata);\n    this.loadStylesheets();\n    return this.mainModulePath;\n  });\n}", "CodeBleu_score": 54.47450333476556}]}
{"instance_id": "a06630788868", "generation_result": [{"code": "dblclickHandler(){\n\t    const doubleClickAction = this.applicationDelegate.getUserDefault('AppleActionOnDoubleClick', 'string');\n    if (doubleClickAction === 'Minimize') {\n      this.applicationDelegate.minimizeWindow();\n    } else if (doubleClickAction === 'Maximize') {\n      if (this.applicationDelegate.isWindowMaximized()) {\n        this.applicationDelegate.unmaximizeWindow();\n      } else {\n        this.applicationDelegate.maximizeWindow();\n      }\n    }\n  }", "CodeBleu_score": 47.87044198477325}, {"code": "dblclickHandler(){\n\t    const doubleClickAction = this.applicationDelegate.getUserDefault('AppleActionOnDoubleClick', 'string');\n    if (doubleClickAction === 'Minimize') {\n      this.applicationDelegate.minimizeWindow();\n    } else if (doubleClickAction === 'Maximize') {\n      if (this.applicationDelegate.isWindowMaximized()) {\n        this.applicationDelegate.unmaximizeWindow();\n      } else {\n        this.applicationDelegate.maximizeWindow();\n      }\n    }\n  }", "CodeBleu_score": 47.87044198477325}, {"code": "dblclickHandler(){\n\t    const doubleClickAction = this.applicationDelegate.getUserDefault('AppleActionOnDoubleClick', 'string');\n    if (doubleClickAction === 'Minimize') {\n      this.applicationDelegate.minimizeWindow();\n    } else if (doubleClickAction === 'Maximize') {\n      if (this.applicationDelegate.isWindowMaximized()) {\n        this.applicationDelegate.unmaximizeWindow();\n      } else {\n        this.applicationDelegate.maximizeWindow();\n      }\n    }\n  }", "CodeBleu_score": 47.87044198477325}]}
{"instance_id": "fd29bc5fd921", "generation_result": [{"code": "_openSettingsWindow (category){\n\t  const { _windowManager } = this\n  const settingsWindow = _windowManager.getSettingsWindow()\n  if (settingsWindow) {\n    settingsWindow.send('mt::change-tab', category)\n    if (isMacOS()) {\n      settingsWindow.bringToFront()\n    } else {\n      settingsWindow.moveToTop()\n    }\n  } else {\n    this._createSettingWindow(category)\n  }\n}", "CodeBleu_score": 37.57425449612112}, {"code": "_openSettingsWindow (category){\n\t    const setting = this._windowManager.get(WindowType.SETTING)\n    if (setting) {\n      setting.webContents.send('mt::settings-change-tab', category)\n      if (process.platform === 'darwin') {\n        setting.focus()\n      } else {\n        setting.moveTop()\n      }\n    } else {\n      this._createSettingWindow(category)\n    }\n  }", "CodeBleu_score": 47.597546944344316}, {"code": "_openSettingsWindow (category){\n\t    const { _windowManager } = this\n    const window = _windowManager.getActiveSettingsWindow()\n    if (window) {\n      window.webContents.send('mt::settings-change-tab', category)\n      if (process.platform === 'darwin') {\n        window.focus()\n      } else {\n        window.bringToFront()\n      }\n    } else {\n      this._createSettingWindow(category)\n    }\n  }", "CodeBleu_score": 38.54499217247823}]}
{"instance_id": "b9c797e2b719", "generation_result": [{"code": "findBestWindowToOpenIn (fileList){\n\t    if (!Array.isArray(fileList) || fileList.length === 0) {\n      return []\n    }\n\n    const lastActiveEditorId = this.getActiveEditorId()\n    const editorWindows = this.getWindowsByType(WindowType.EDITOR)\n    const windowCount = editorWindows.length\n\n    if (windowCount <= 1) {\n      return [{ windowId: lastActiveEditorId, fileList }]\n    }\n\n    // Calculate scores for each file across all editor windows\n    const scores = new Map()\n    for (const { id: windowId, win } of editorWindows) {\n      const files = win.getFiles()\n      for (const file of files) {\n        const score = this._getScore(file, windowId)\n        if (!scores.has(file)) {\n          scores.set(file, { score, windowId })\n        } else {\n          const currentScore = scores.get(file)\n          if (score > currentScore.score) {\n            scores.set(file, { score, windowId })\n          }\n        }\n      }\n    }\n\n    // Select the best window for each file\n    const result = []\n    for (const file of fileList) {\n      if (scores.has(file)) {\n        const { windowId } = scores.get(file)\n        const existingWindow = result.find(item => item.windowId === windowId)\n        if (existingWindow) {\n          existingWindow.fileList.push(file)\n        } else {\n          result.push({ windowId, fileList: [file] })\n        }\n      } else {\n        const existingWindow = result.find(item => item.windowId === lastActiveEditorId)\n        if (existingWindow) {\n          existingWindow.fileList.push(file)\n        } else {\n          result.push({ windowId: lastActiveEditorId, fileList: [file] })\n        }\n      }\n    }\n\n    return result\n  }", "CodeBleu_score": 39.182630448634434}, {"code": "findBestWindowToOpenIn (fileList){\n\t    if (!fileList || !fileList.length) {\n      return []\n    }\n    const { windows } = this\n    const lastActiveEditorId = this.getActiveEditorId()\n    const numWindows = windows.size\n    if (numWindows <= 1) {\n      return [{ windowId: lastActiveEditorId, fileList }]\n    }\n\n    const scores = new Map()\n    for (const [windowId, window] of windows) {\n      if (window.type !== WindowType.EDITOR) {\n        continue\n      }\n      const { files } = window\n      for (const file of fileList) {\n        if (files.has(file)) {\n          continue\n        }\n        let score = scores.get(file) || 0\n        if (windowId === lastActiveEditorId) {\n          score += 10\n        } else {\n          score += 1\n        }\n        scores.set(file, score)\n      }\n    }\n\n    const result = []\n    for (const file of fileList) {\n      let bestWindowId = lastActiveEditorId\n      let bestScore = scores.get(file) || 0\n      for (const [windowId, window] of windows) {\n        if (window.type !== WindowType.EDITOR) {\n          continue\n        }\n        const { files } = window\n        if (files.has(file)) {\n          continue\n        }\n        const score = scores.get(file) || 0\n        if (score > bestScore) {\n          bestScore = score\n          bestWindowId = windowId\n        }\n      }\n      const existing = result.find((item) => item.windowId === bestWindowId)\n      if (existing) {\n        existing.fileList.push(file)\n      } else {\n        result.push({ windowId: bestWindowId, fileList: [file] })\n      }\n    }\n\n    return result\n  }", "CodeBleu_score": 43.011016368873285}, {"code": "findBestWindowToOpenIn (fileList){\n\t    if (!Array.isArray(fileList)) {\n      return []\n    }\n\n    const activeEditorId = this.getActiveEditorId()\n    const windows = this.getWindowsByType(WindowType.EDITOR)\n    const numWindows = windows.length\n\n    if (numWindows <= 1) {\n      return [{ windowId: activeEditorId, fileList }]\n    }\n\n    const scores = new Map()\n    for (const { id: windowId, win: window } of windows) {\n      const { files } = window\n      for (const file of fileList) {\n        const score = files.getScore(file)\n        if (score > (scores.get(file) || 0)) {\n          scores.set(file, score)\n        }\n      }\n    }\n\n    const result = []\n    for (const file of fileList) {\n      const score = scores.get(file)\n      let bestWindowId = null\n      for (const { id: windowId, win: window } of windows) {\n        if (window.files.has(file)) {\n          continue\n        }\n        if (window.files.getScore(file) === score) {\n          bestWindowId = windowId\n          break\n        }\n      }\n      if (bestWindowId == null) {\n        bestWindowId = activeEditorId\n      }\n      result.push({ windowId: bestWindowId, fileList: [file] })\n    }\n\n    return result\n  }", "CodeBleu_score": 40.578782684297416}]}
{"instance_id": "bcd3eb76bbac", "generation_result": [{"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8'\n  let isBom = false\n  for (const [cedEncoding, bomEncoding] of Object.entries(BOM_ENCODINGS)) {\n    if (checkSequence(buffer, bomEncoding)) {\n      encoding = cedEncoding\n      isBom = true\n      break\n    }\n  }\n  if (autoGuessEncoding) {\n    const guessedEncoding = ced(buffer)\n    if (guessedEncoding) {\n      encoding = CED_ICONV_ENCODINGS[guessedEncoding] || guessedEncoding.toLowerCase()\n    }\n  }\n  return { encoding, isBom }\n}", "CodeBleu_score": 51.85934743686899}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8'\n  let isBom = false\n  for (const [bomEncoding, bomSequence] of Object.entries(BOM_ENCODINGS)) {\n    if (checkSequence(buffer, bomSequence)) {\n      encoding = bomEncoding\n      isBom = true\n      break\n    }\n  }\n  if (autoGuessEncoding) {\n    const guess = ced(buffer)\n    if (guess) {\n      encoding = CED_ICONV_ENCODINGS[guess] || guess.toLowerCase()\n    }\n  }\n  return { encoding, isBom }\n}", "CodeBleu_score": 52.404174518091516}, {"code": "export const guessEncoding = (buffer, autoGuessEncoding) =>{\n\t  let encoding = 'utf8'\n  let isBom = false\n  for (const [enc, bom] of Object.entries(BOM_ENCODINGS)) {\n    if (checkSequence(buffer, bom)) {\n      encoding = enc\n      isBom = true\n      break\n    }\n  }\n  if (autoGuessEncoding) {\n    const guessed = ced(buffer)\n    encoding = CED_ICONV_ENCODINGS[guessed] || guessed.toLowerCase()\n  }\n  return {\n    encoding,\n    isBom\n  }\n}", "CodeBleu_score": 47.80744041131676}]}
{"instance_id": "a2525337ad24", "generation_result": [{"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  // Extract line ending and encoding options.\n  const { lineEnding, encoding, bom } = options\n  // Default the file extension to '.md' if not provided.\n  const fileExtension = path.extname(pathname)\n  if (fileExtension === '') {\n    pathname += '.md'\n  }\n  // Convert line endings if needed.\n  if (lineEnding !== 'auto') {\n    content = convertLineEndings(content, lineEnding)\n  }\n  // Encode the content into a buffer.\n  let buffer = iconv.encode(content, encoding)\n  // Add BOM if specified.\n  if (bom) {\n    buffer = Buffer.concat([ BOMS[encoding], buffer ])\n  }\n  // Write the buffer to the file.\n  return writeFile(pathname, buffer)\n}", "CodeBleu_score": 41.587119094671024}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const { lineEnding, encoding, bom } = options\n  const ext = path.extname(pathname)\n  const normalizedPath = ext ? pathname : path.join(pathname, '.md')\n  const converted = convertLineEndings(content, lineEnding)\n  const encoded = iconv.encode(converted, encoding, { addBOM: bom })\n  return writeFile(normalizedPath, encoded)\n}", "CodeBleu_score": 42.177286990824335}, {"code": "export const writeMarkdownFile = (pathname, content, options) =>{\n\t  const { lineEnding, encoding, bom } = options\n\n  // Get the file extension from the pathname or default to '.md'.\n  const ext = path.extname(pathname) || '.md'\n\n  // If the line endings need adjustment, convert them accordingly.\n  if (lineEnding && (LF_LINE_ENDING_REG.test(content) || CRLF_LINE_ENDING_REG.test(content))) {\n    content = convertLineEndings(content, lineEnding)\n  }\n\n  // Encode the content into a buffer using the specified encoding and BOM setting.\n  const buffer = iconv.encode(content, encoding, { addBOM: bom })\n\n  // Write the buffer to the file at the given pathname.\n  writeFile(pathname, buffer)\n}", "CodeBleu_score": 54.96216209787333}]}
{"instance_id": "1c01cc82b2d4", "generation_result": [{"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('getKeyboardInfo', () => getKeyboardInfo())\n\n  ipcMain.handle('dumpKeyboardInfo', async () => {\n    const tempFilePath = path.join(os.tmpdir(), 'keyboard-info.json')\n    try {\n      await fsPromises.writeFile(tempFilePath, JSON.stringify(getKeyboardInfo(), null, 2))\n      await shell.openPath(tempFilePath)\n    } catch (error) {\n      log.error('Failed to write keyboard info to file:', error)\n    }\n  })\n}", "CodeBleu_score": 40.458678210094405}, {"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('getKeyboardInfo', () => getKeyboardInfo())\n  ipcMain.handle('dumpKeyboardInfo', async () => {\n    const keyboardInfo = getKeyboardInfo()\n    try {\n      const tempDir = os.tmpdir()\n      const filePath = path.join(tempDir, 'keyboard-info.json')\n      await fsPromises.writeFile(filePath, JSON.stringify(keyboardInfo, null, 2), 'utf8')\n      shell.openPath(filePath)\n    } catch (err) {\n      log.error('Failed to write keyboard info to file:', err)\n    }\n  })\n}", "CodeBleu_score": 41.824920435427416}, {"code": "export const registerKeyboardListeners = () =>{\n\t  ipcMain.handle('getKeyboardInfo', () => getKeyboardInfo())\n\n  ipcMain.handle('dumpKeyboardInfo', async () => {\n    const keyboardInfo = getKeyboardInfo()\n    const filePath = path.join(os.tmpdir(), 'keyboard-info.json')\n    try {\n      await fsPromises.writeFile(filePath, JSON.stringify(keyboardInfo, null, 2), 'utf8')\n      shell.openPath(filePath)\n    } catch (error) {\n      log.error('Error writing keyboard info to file:', error)\n    }\n  })\n}", "CodeBleu_score": 42.11729869986168}]}
{"instance_id": "fa0bb388c99d", "generation_result": [{"code": "_prepareKeyMapper (){\n\t    const keyboardInfo = getKeyboardInfo()\n    const keyboardLayout = keyboardInfo.layout\n    const keyboardKeymap = keyboardInfo.keymap\n    log.debug(`[Keybindings] Keyboard layout: ${keyboardLayout}`)\n    log.debug(`[Keybindings] Keyboard keymap: ${keyboardKeymap}`)\n\n    electronLocalshortcut.setKeyboardLayout(keyboardLayout, keyboardKeymap)\n\n    keyboardLayoutMonitor.on('change', (layout, keymap) => {\n      log.debug(`[Keybindings] Keyboard layout changed: ${layout}`)\n      log.debug(`[Keybindings] Keyboard keymap changed: ${keymap}`)\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 32.89294100997213}, {"code": "_prepareKeyMapper (){\n\t    const { layout, keymap } = getKeyboardInfo()\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    keyboardLayoutMonitor.on('keyboardLayoutChanged', ({ layout, keymap }) => {\n      log.debug(`[keybindings] Keyboard layout changed to ${layout} (${keymap}).`)\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n    })\n  }", "CodeBleu_score": 67.61085572532181}, {"code": "_prepareKeyMapper (){\n\t    const { getKeyboardInfo, keyboardLayoutMonitor } = require('../keyboard')\n\n    const keyboardInfo = getKeyboardInfo()\n    const { layout, keymap } = keyboardInfo\n    electronLocalshortcut.setKeyboardLayout(layout, keymap)\n\n    keyboardLayoutMonitor.on('keyboard-layout-changed', (event, layout, keymap) => {\n      electronLocalshortcut.setKeyboardLayout(layout, keymap)\n      if (appEnvironment.isDevMode) {\n        log.debug(`[Keybindings] Keyboard layout changed: ${layout} ${keymap}`)\n      }\n    })\n  }", "CodeBleu_score": 39.927128894181585}]}
{"instance_id": "0438f43329c9", "generation_result": [{"code": "fixSystemConfig (){\n\t    const { systemConfig, userConfig } = this\n    const { proxy: userProxyConfig } = userConfig.store\n    const { enable: proxyEnable, server: proxyServer, bypass: proxyBypass } = userProxyConfig\n    const { 'bt-tracker': btTracker } = systemConfig.store\n    const { 'all-proxy': allProxy, 'no-proxy': noProxy } = systemConfig.store\n\n    // Remove unrecognized options from aria2c configuration\n    const systemConfigKeys = Object.keys(systemConfig.store)\n    const systemConfigKeysToRemove = systemConfigKeys.filter(key => !this.systemConfigOptions.includes(key))\n    systemConfigKeysToRemove.forEach(key => systemConfig.delete(key))\n\n    // Check user proxy configuration and update system configuration if enabled and properly set\n    if (proxyEnable) {\n      if (proxyServer && proxyBypass) {\n        systemConfig.set('all-proxy', proxyServer)\n        systemConfig.set('no-proxy', proxyBypass)\n      } else {\n        systemConfig.delete('all-proxy')\n        systemConfig.delete('no-proxy')\n      }\n    } else {\n      systemConfig.delete('all-proxy')\n      systemConfig.delete('no-proxy')\n    }\n\n    // Address 'spawn ENAMETOOLONG' issue on Windows by reducing tracker string length\n    if (is.windows() && btTracker.length > 1000) {\n      const reducedTrackerString = reduceTrackerString(btTracker)\n      systemConfig.set('bt-tracker', reducedTrackerString)\n    }\n\n    // Update system configuration with user configuration\n    Object.keys(userConfig.store).forEach(key => {\n      const userConfigValue = userConfig.get(key)\n      const systemConfigValue = systemConfig.get(key)\n      if (userConfigValue !== systemConfigValue) {\n        systemConfig.set(key, userConfigValue)\n      }\n    })\n  }", "CodeBleu_score": 26.570777719847747}, {"code": "fixSystemConfig (){\n\t", "CodeBleu_score": 0.6435209714972053}, {"code": "fixSystemConfig (){\n\t", "CodeBleu_score": 0.6435209714972053}]}
{"instance_id": "6d6fef58cde3", "generation_result": [{"code": "closeClient (){\n\t    if (client) {\n      client.destroy((err) => {\n        if (err) {\n          logger.warn('[Motrix] UPnPManager failed to close client')\n        } else {\n          client = null\n        }\n      })\n    }\n  }", "CodeBleu_score": 54.22007915196292}, {"code": "closeClient (){\n\t    if (client) {\n      client.destroy((err) => {\n        if (err) {\n          logger.warn('[Motrix] UPnPManager failed to close UPnP client')\n        } else {\n          client = null\n        }\n      })\n    }\n  }", "CodeBleu_score": 54.27734855214163}, {"code": "closeClient (){\n\t    if (client) {\n        client.destroy((err) => {\n            if (err) {\n                logger.warn('[Motrix] UPnPManager close client failed, error: ', err)\n                return\n            }\n\n            client = null\n        })\n    }\n}", "CodeBleu_score": 56.964287078334074}]}
{"instance_id": "b32ad6f9757b", "generation_result": [{"code": "getTouchBarByPage (page){\n\t    let bar = this.bars[page]\n    if (!bar) {\n      try {\n        bar = new TouchBar(this.build(this.template[page]))\n        this.bars[page] = bar\n      } catch (error) {\n        logger.error('Failed to create TouchBar', error)\n      }\n    }\n    return bar\n  }", "CodeBleu_score": 48.491658272042415}, {"code": "getTouchBarByPage (page){\n\t  if (!this.bars[page]) {\n    try {\n      this.bars[page] = new TouchBar(this.build(this.template[page]))\n    } catch (e) {\n      logger.error(`Failed to build TouchBar for page ${page}: ${e}`)\n    }\n  }\n  return this.bars[page]\n}", "CodeBleu_score": 26.906481370695513}, {"code": "getTouchBarByPage (page){\n\t    let bar = this.bars[page]\n    if (!bar) {\n      try {\n        bar = new TouchBar(this.build(this.template[page]))\n        this.bars[page] = bar\n      } catch (e) {\n        logger.error(`Failed to build TouchBar for page ${page}`)\n      }\n    }\n    return bar\n  }", "CodeBleu_score": 44.66592273265619}]}
{"instance_id": "f860bf9bf687", "generation_result": [{"code": "handleWindowClose (pageOptions, page, window){\n\t  window.on('close', (event) => {\n      if (pageOptions.bindCloseToHide && !this.willQuit) {\n        event.preventDefault()\n        if (window.isFullScreen()) {\n          window.setFullScreen(false)\n        }\n        window.hide()\n      }\n      this.emit('window-closed', { page, bounds: window.getBounds() })\n    })\n  }", "CodeBleu_score": 58.4634981979618}, {"code": "handleWindowClose (pageOptions, page, window){\n\t  window.on('close', (event) => {\n    if (pageOptions.bindCloseToHide && !this.willQuit) {\n      event.preventDefault()\n      if (window.isFullScreen()) {\n        window.once('leave-full-screen', () => {\n          window.hide()\n        })\n        window.setFullScreen(false)\n      } else {\n        window.hide()\n      }\n    }\n\n    const bounds = window.getBounds()\n    this.emit('window-closed', { page, bounds })\n  })\n}", "CodeBleu_score": 90.58957175899283}, {"code": "handleWindowClose (pageOptions, page, window){\n\t    window.on('close', (event) => {\n      const { bindCloseToHide } = pageOptions\n      if (bindCloseToHide && !this.willQuit) {\n        event.preventDefault()\n        if (window.isFullScreen()) {\n          window.setFullScreen(false)\n        }\n        window.hide()\n      }\n\n      const bounds = window.getBounds()\n      this.emit('window-closed', { page, bounds })\n    })\n  }", "CodeBleu_score": 66.96990196607896}]}
{"instance_id": "ae062f5e98e3", "generation_result": [{"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t  return new Promise((resolve, reject) => {\n    const appPath = app.getAppPath()\n    const appName = app.getName()\n    const applicationsFolder = '/Applications'\n    const targetPath = `${applicationsFolder}/${appName}.app`\n\n    // Check if the app is already in the Applications folder\n    if (appPath.startsWith(applicationsFolder)) {\n      resolve()\n      return\n    }\n\n    // Check if the target path already exists\n    if (existsSync(targetPath)) {\n      reject(new Error(errorMsg))\n      return\n    }\n\n    // Move the app to the Applications folder\n    access(appPath, constants.F_OK, (err) => {\n      if (err) {\n        reject(new Error(errorMsg))\n        return\n      }\n\n      shell.moveItemToTrash(appPath)\n        .then(() => {\n          shell.moveItemToApplications(appName)\n            .then(() => {\n              resolve()\n            })\n            .catch((err) => {\n              reject(new Error(errorMsg))\n            })\n        })\n        .catch((err) => {\n          reject(new Error(errorMsg))\n        })\n    })\n  })\n}", "CodeBleu_score": 41.06709730750517}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t  return new Promise((resolve, reject) => {\n    const appPath = app.getAppPath()\n    const appName = app.getName()\n    const appExecutable = app.getPath('exe')\n    const appFolder = appPath.replace(appName, '').replace(appExecutable, '')\n    const applicationsFolder = '/Applications/'\n    const destination = applicationsFolder + appName + '.app'\n\n    if (appFolder === applicationsFolder) {\n      resolve()\n      return\n    }\n\n    access(destination, constants.F_OK, (err) => {\n      if (!err) {\n        reject(new Error(errorMsg))\n        return\n      }\n\n      if (existsSync(appPath) && lstatSync(appPath).isDirectory()) {\n        shell.moveItemToTrash(destination)\n          .then(() => {\n            shell.moveItemToApplications(appPath)\n              .then(() => {\n                resolve()\n              })\n              .catch((err) => {\n                reject(err)\n              })\n          })\n          .catch((err) => {\n            reject(err)\n          })\n      } else {\n        reject(new Error(errorMsg))\n      }\n    })\n  })\n}", "CodeBleu_score": 46.46586568111028}, {"code": "export const moveAppToApplicationsFolder = (errorMsg = '') =>{\n\t  return new Promise((resolve, reject) => {\n    const appPath = app.getAppPath()\n    const appName = app.getName()\n    const homePath = app.getPath('home')\n    const applicationsFolder = resolve(homePath, 'Applications')\n    const appDestination = resolve(applicationsFolder, appName)\n\n    access(applicationsFolder, constants.W_OK, (err) => {\n      if (err) {\n        reject(errorMsg)\n      } else {\n        shell.moveItemToTrash(appPath)\n        shell.moveItemToTrash(appDestination)\n        app.moveToApplicationsFolder()\n        resolve()\n      }\n    })\n  })\n}", "CodeBleu_score": 44.21057229210854}]}
{"instance_id": "294de13d4a02", "generation_result": [{"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.info('Copying icon');\n\n  const icon = options.icon;\n\n  if (!icon) {\n    log.warn('No icon specified, skipping');\n    return;\n  }\n\n  if (options.platform === 'darwin' || options.platform === 'mas') {\n    if (options.tray !== 'false') {\n      log.info('Copying tray icon');\n      await fs.copy(icon, path.join(appPath, 'icon.png'));\n    }\n  } else {\n    await convertIconIfNecessary(icon, appPath);\n  }\n}", "CodeBleu_score": 25.03430543495142}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.info('Copying icons if necessary');\n  const icon = options.icon;\n  if (!icon) {\n    log.warn('No icon specified. Skipping icon copy.');\n    return;\n  }\n  if (isWindows() && options.tray !== false) {\n    log.info('Copying tray icon');\n    await fs.copy(icon, path.join(appPath, 'resources', 'app', 'icon.png'));\n  } else {\n    log.info('Copying application icon');\n    await convertIconIfNecessary(icon, appPath);\n  }\n}", "CodeBleu_score": 24.82050307634974}, {"code": "async function copyIconsIfNecessary(\n  options: AppOptions,\n  appPath: string,\n): Promise<void>{\n\t  log.info('Copying icon');\n\n  if (!options.icon) {\n    log.warn('No icon specified, skipping');\n    return;\n  }\n\n  if (\n    (process.platform === 'darwin' || process.platform === 'mas') &&\n    options.tray !== 'false'\n  ) {\n    log.info('Copying tray icon');\n    const trayIconPath = path.join(appPath, 'resources', 'app', 'icon.png');\n    await fs.copy(options.icon, trayIconPath);\n  }\n\n  const iconExtension = isWindows() ? '.ico' : '.png';\n  const iconFileName = `icon${iconExtension}`;\n  const iconPath = path.join(appPath, iconFileName);\n  await fs.copy(options.icon, iconPath);\n}", "CodeBleu_score": 39.68531568413052}]}
{"instance_id": "3728778a6e34", "generation_result": [{"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  log.debug('Preparing app');\n  log.debug('Copying app');\n  try {\n    await fs.copy(src, dest);\n  } catch (err) {\n    log.error('Error copying app', err);\n    throw err;\n  }\n\n  log.debug('Writing app config');\n  const appConfig = getAppConfig(options);\n  fs.writeFileSync(\n    path.join(dest, 'appConfig.json'),\n    JSON.stringify(appConfig),\n  );\n\n  if (options.bookmarksMenu) {\n    log.debug('Copying bookmarks menu');\n    try {\n      await fs.copy(\n        path.join(__dirname, '../app/bookmarksMenu'),\n        path.join(dest, 'bookmarksMenu'),\n      );\n    } catch (err) {\n      log.error('Error copying bookmarks menu', err);\n    }\n  }\n\n  try {\n    await maybeCopyScripts(options.inject, dest);\n  } catch (err) {\n    log.error('Error copying injection scripts', err);\n  }\n\n  const normalizedAppName = changeAppPackageJsonName(\n    dest,\n    options.name ?? DEFAULT_APP_NAME,\n    options.targetUrl,\n  );\n\n  setAppBundleId(dest, normalizedAppName);\n}", "CodeBleu_score": 46.371421767627254}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  log.debug(`Copying app from ${src} to ${dest}`);\n  try {\n    await fs.copy(src, dest);\n  } catch (err) {\n    log.error(`Error copying app from ${src} to ${dest}`, err);\n    throw err;\n  }\n\n  const appConfig = getAppConfig(options);\n  const appConfigPath = path.join(dest, 'appConfig.json');\n  log.debug(`Writing app config to ${appConfigPath}`);\n  fs.writeFileSync(appConfigPath, JSON.stringify(appConfig, null, 2));\n\n  if (options.packager.bookmarksMenu) {\n    const bookmarksMenuPath = path.join(\n      dest,\n      'app',\n      'menus',\n      'bookmarksMenu.js',\n    );\n    log.debug(`Copying bookmarksMenu.js to ${bookmarksMenuPath}`);\n    try {\n      await fs.copy(\n        path.join(__dirname, '..', 'app', 'menus', 'bookmarksMenu.js'),\n        bookmarksMenuPath,\n      );\n    } catch (err) {\n      log.error(`Error copying bookmarksMenu.js to ${bookmarksMenuPath}`, err);\n    }\n  }\n\n  await maybeCopyScripts(options.nativefier.inject, dest);\n\n  const normalizedAppName = changeAppPackageJsonName(\n    dest,\n    options.packager.name ?? DEFAULT_APP_NAME,\n    options.packager.targetUrl,\n  );\n  options.packager.helperBundleId = getHelperBundleId(normalizedAppName);\n}", "CodeBleu_score": 58.22678341483888}, {"code": "export async function prepareElectronApp(\n  src: string,\n  dest: string,\n  options: AppOptions,\n): Promise<void>{\n\t  log.debug('Copying app from', src, 'to', dest);\n  try {\n    await fs.copy(src, dest);\n  } catch (err) {\n    log.error('Failed to copy app.', err);\n    throw err;\n  }\n\n  log.debug('Writing app config to', path.join(dest, 'appConfig.json'));\n  const appConfig = getAppConfig(options);\n  fs.writeFileSync(\n    path.join(dest, 'appConfig.json'),\n    JSON.stringify(appConfig, null, 2),\n  );\n\n  if (options.bookmarksMenu) {\n    log.debug('Copying bookmarks menu');\n    try {\n      await fs.copy(options.bookmarksMenu, path.join(dest, 'bookmarks-menu'));\n    } catch (err) {\n      log.error('Failed to copy bookmarks menu.', err);\n    }\n  }\n\n  try {\n    await maybeCopyScripts(options.inject, dest);\n  } catch (err) {\n    log.error('Failed to copy injection scripts.', err);\n  }\n\n  const normalizedAppName = changeAppPackageJsonName(\n    dest,\n    options.name ?? DEFAULT_APP_NAME,\n    options.targetUrl,\n  );\n  setAppBundleId(dest, normalizedAppName);\n}", "CodeBleu_score": 46.435461039274365}]}
{"instance_id": "281c20f209ba", "generation_result": [{"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  log.debug(`Downloading ${fileUrl}`);\n  return axios\n    .get(fileUrl, {\n      responseType: 'arraybuffer',\n    })\n    .then((response) => {\n      if (response.data) {\n        return {\n          data: response.data,\n          ext: path.extname(fileUrl).substring(1),\n        };\n      }\n\n      return undefined;\n    });\n}", "CodeBleu_score": 77.57705370757982}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  log.debug(`Downloading ${fileUrl}`);\n  return axios\n    .get(fileUrl, {\n      responseType: 'arraybuffer',\n    })\n    .then((response) => {\n      if (response.data) {\n        return {\n          data: response.data,\n          ext: path.extname(fileUrl).substring(1),\n        };\n      }\n      return undefined;\n    })\n    .catch((err) => {\n      log.error(`Error downloading ${fileUrl}: ${err}`);\n      return undefined;\n    });\n}", "CodeBleu_score": 71.85878045025461}, {"code": "export function downloadFile(\n  fileUrl: string,\n): Promise<DownloadResult | undefined>{\n\t  log.debug(`Downloading ${fileUrl}`);\n\n  return axios\n    .get(fileUrl, {\n      responseType: 'arraybuffer',\n    })\n    .then((response) => {\n      if (response.data) {\n        const ext = path.extname(fileUrl).substring(1);\n        return {\n          data: response.data,\n          ext,\n        };\n      }\n      return undefined;\n    })\n    .catch((error) => {\n      log.error(`Failed to download ${fileUrl}:`, error);\n      return undefined;\n    });\n}", "CodeBleu_score": 69.63829026770071}]}
{"instance_id": "e71c0b9dab4a", "generation_result": [{"code": "export function camelCased(str: string): string{\n\t  return str\n    .split('-')\n    .filter((word) => word !== '')\n    .map((word, index) =>\n      index === 0 ? word : word.charAt(0).toUpperCase() + word.slice(1),\n    )\n    .join('');\n}", "CodeBleu_score": 55.442024566140724}, {"code": "export function camelCased(str: string): string{\n\t  return str\n    .split('-')\n    .filter((word) => word.length > 0)\n    .map((word, index) => {\n      if (index === 0) {\n        return word;\n      }\n      return word.charAt(0).toUpperCase() + word.slice(1);\n    })\n    .join('');\n}", "CodeBleu_score": 65.11834468627931}, {"code": "export function camelCased(str: string): string{\n\t  return str\n    .split(\"-\")\n    .filter((word) => word !== \"\")\n    .map((word, index) =>\n      index === 0 ? word : word[0].toUpperCase() + word.slice(1)\n    )\n    .join(\"\");\n}", "CodeBleu_score": 54.27838514240405}]}
{"instance_id": "c93f0f7bfa03", "generation_result": [{"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  const sanitizedFilename = sanitize(filenameToSanitize);\n  if (platform === 'linux') {\n    return sanitizedFilename\n      .replace(/ /g, '')\n      .replace(/[^a-z0-9.-]/gi, '');\n  }\n  log.warn(\n    `The filename ${sanitizedFilename} is not safe for use on file systems other than NTFS and FAT32.`,\n  );\n  if (sanitizedFilename.length === 0) {\n    log.warn(\n      `The filename ${filenameToSanitize} is empty after sanitization. Using ${DEFAULT_APP_NAME} as a fallback.`,\n    );\n    return DEFAULT_APP_NAME;\n  }\n  log.warn(\n    `The filename ${filenameToSanitize} is being sanitized to ${sanitizedFilename}.`,\n  );\n  return sanitizedFilename;\n}", "CodeBleu_score": 53.66072202224231}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  let filename = sanitize(filenameToSanitize);\n\n  if (platform === 'linux') {\n    // remove invalid characters on Linux\n    filename = filename.replace(/[*|\":<>[\\]\\\\/']/g, '');\n  }\n\n  // remove spaces\n  filename = filename.replace(/\\s/g, '');\n\n  if (filename.length === 0) {\n    filename = DEFAULT_APP_NAME;\n    log.warn('The filename is empty, using default name instead.');\n  }\n\n  log.debug(`Sanitized filename: ${filename}`);\n\n  return filename;\n}", "CodeBleu_score": 60.297273204329315}, {"code": "export function sanitizeFilename(\n  platform: string | undefined,\n  filenameToSanitize: string,\n): string{\n\t  let sanitizedFilename = sanitize(filenameToSanitize);\n\n  if (platform === 'linux') {\n    sanitizedFilename = sanitizedFilename.replace(/[^\\x20-\\x7E]/g, '');\n    sanitizedFilename = sanitizedFilename.replace(/\\s+/g, ' ');\n  }\n\n  if (sanitizedFilename.length === 0) {\n    log.warn(\n      'The filename is empty after sanitization. The default app name will be used instead.',\n    );\n    sanitizedFilename = DEFAULT_APP_NAME;\n  }\n\n  log.debug(`Sanitized filename: ${sanitizedFilename}`);\n\n  return sanitizedFilename;\n}", "CodeBleu_score": 58.99226047396062}]}
{"instance_id": "ac4bf3ef1fa8", "generation_result": [{"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration = typeof savedCache.duration === \"string\" ? parseInt(savedCache.duration, 10) : savedCache.duration\n\n    return savedCache.time + duration < new Date().getTime()\n}", "CodeBleu_score": 44.19558850717904}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration = parseInt(savedCache.duration as string, 10)\n    return savedCache.time + duration < new Date().getTime()\n}", "CodeBleu_score": 29.803553022676837}, {"code": "isExpired(savedCache: QueryResultCacheOptions): boolean {\n\t    const duration = parseInt(savedCache.duration as any, 10)\n\n    if (isNaN(duration)) {\n        return false\n    }\n\n    return savedCache.time + duration < new Date().getTime()\n}", "CodeBleu_score": 33.39238433414359}]}
{"instance_id": "6b8f5c8fc4ec", "generation_result": [{"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument === undefined) {\n        return Date.now()\n    }\n\n    const timestamp = parseInt(timestampOptionArgument, 10)\n    if (isNaN(timestamp) || timestamp < 0) {\n        throw new TypeORMError(\n            `Migration \"${timestampOptionArgument}\" is not a valid timestamp.`,\n        )\n    }\n\n    return timestamp\n}", "CodeBleu_score": 42.78110993719038}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument !== undefined) {\n        if (isNaN(timestampOptionArgument) || timestampOptionArgument < 0) {\n            throw new TypeORMError(\n                `Timestamp must be a non-negative number.`,\n            )\n        }\n        return parseInt(timestampOptionArgument, 10)\n    }\n    return new Date().getTime()\n}", "CodeBleu_score": 42.0125232313346}, {"code": "static getTimestamp(timestampOptionArgument: any): number{\n\t    if (timestampOptionArgument === undefined) {\n        return Date.now()\n    }\n\n    if (isNaN(timestampOptionArgument) || timestampOptionArgument < 0) {\n        throw new TypeORMError(\n            `Timestamp must be a non-negative number.`,\n        )\n    }\n\n    return timestampOptionArgument\n}", "CodeBleu_score": 49.50734236808732}]}
{"instance_id": "747bea9d7ad9", "generation_result": [{"code": " async dropDatabase(): Promise<void>{\n\t    if (!this.isInitialized)\n      throw new CannotExecuteNotConnectedError(this.name);\n\n    const queryRunner = this.createQueryRunner();\n    const database = this.driver.database;\n    const databases = this.entityMetadatas.reduce((dbs, entityMetadata) => {\n      return entityMetadata.database\n        ? dbs.concat(entityMetadata.database as string)\n        : dbs;\n    }, [] as string[]);\n    const uniqueDatabases = [...new Set(databases.length ? databases : [database])];\n\n    try {\n      await Promise.all(\n        uniqueDatabases.map(db => {\n          return queryRunner.clearDatabase(db);\n        }),\n      );\n    } finally {\n      await queryRunner.release();\n    }\n  }", "CodeBleu_score": 33.63185184339284}, {"code": " async dropDatabase(): Promise<void>{\n\t    if (!this.isInitialized)\n        throw new CannotExecuteNotConnectedError(this.name);\n\n    const queryRunner = this.driver.createQueryRunner(\"master\");\n\n    try {\n        const databaseNames = this.metadata.findDatabaseNames();\n\n        if (databaseNames.length > 1) {\n            for (const databaseName of databaseNames) {\n                await queryRunner.clearDatabase(databaseName);\n            }\n        } else {\n            await queryRunner.clearDatabase();\n        }\n    } finally {\n        await queryRunner.release();\n    }\n}", "CodeBleu_score": 37.876841647749835}, {"code": " async dropDatabase(): Promise<void>{\n\t    if (!this.isInitialized)\n        throw new CannotExecuteNotConnectedError(this.name)\n\n    const queryRunner = this.driver.createQueryRunner(\"master\")\n\n    try {\n        const databaseNames = this.entityMetadatas.reduce(\n            (dbs, entityMetadata) => {\n                return dbs.add(entityMetadata.database || \"\")\n            },\n            new Set<string>(),\n        )\n\n        for (const databaseName of databaseNames) {\n            await queryRunner.clearDatabase(databaseName)\n        }\n    } finally {\n        await queryRunner.release()\n    }\n}", "CodeBleu_score": 35.00115675422947}]}
{"instance_id": "7dce3d050d72", "generation_result": [{"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`QueryBuilder isn't supported by MongoDB.`)\n\n        const aliasName = alias || this.manager.getMetadata(entityOrRunner as any).name\n\n        return new SelectQueryBuilder(\n            entityOrRunner as any,\n            aliasName,\n            this.manager,\n            queryRunner,\n        )\n    }", "CodeBleu_score": 35.23692587278032}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Query Builder isn't supported by MongoDB.`)\n\n        if (entityOrRunner instanceof QueryRunner) {\n            return new SelectQueryBuilder<Entity>(\n                entityOrRunner.manager,\n                entityOrRunner,\n            )\n        }\n\n        if (alias) {\n            const metadata = this.getMetadata(entityOrRunner)\n            return new SelectQueryBuilder<Entity>(\n                this.manager,\n                queryRunner,\n                alias,\n                metadata,\n            )\n        }\n\n        return new SelectQueryBuilder<Entity>(this.manager, entityOrRunner)\n    }", "CodeBleu_score": 53.32191616245752}, {"code": "createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>{\n\t        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (entityOrRunner instanceof QueryRunner) {\n            if (entityOrRunner.isReleased)\n                throw new QueryRunnerProviderAlreadyReleasedError()\n\n            return new SelectQueryBuilder(entityOrRunner, alias)\n        }\n\n        if (alias) {\n            const metadata = this.findMetadata(entityOrRunner)\n            if (!metadata) throw new EntityMetadataNotFoundError(entityOrRunner)\n\n            return new SelectQueryBuilder(alias, metadata)\n        }\n\n        return new SelectQueryBuilder(entityOrRunner || queryRunner)\n    }", "CodeBleu_score": 52.92383432277007}]}
{"instance_id": "4413268e1791", "generation_result": [{"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = this.connection.getMetadata(entityClass)\n        const mergeIntoEntity = metadata.create(this.queryRunner)\n        try {\n            this.plainObjectToEntityTransformer.transform(\n                mergeIntoEntity,\n                entityLike,\n                metadata,\n                true,\n            )\n            return mergeIntoEntity\n        } catch (err) {\n            return undefined\n        }\n    }", "CodeBleu_score": 49.567479044472925}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass)\n        const mergeIntoEntity = metadata.create(this.queryRunner)\n        const transformed = this.plainObjectToEntityTransformer.transform(\n            mergeIntoEntity,\n            entityLike,\n            metadata,\n        )\n        if (transformed) {\n            Object.assign(mergeIntoEntity, entityLike)\n            return mergeIntoEntity\n        }\n        return undefined\n    }", "CodeBleu_score": 58.59756780625165}, {"code": "async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined>{\n\t        const metadata = this.connection.getMetadata(entityClass)\n        const entity = metadata.create(this.queryRunner)\n        const transformed = this.plainObjectToEntityTransformer.transform(\n            entity,\n            entityLike,\n            metadata,\n        )\n        if (transformed) {\n            return this.merge(entityClass, entity, entityLike)\n        }\n        return undefined\n    }", "CodeBleu_score": 56.651522636557615}]}
{"instance_id": "c635d2b9bbdf", "generation_result": [{"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"flex flex-col gap-1\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-sm text-gray-500\">Compression</p>\n        <p className=\"text-sm text-gray-500\">{compression}%</p>\n      </div>\n      <div className=\"relative w-full\">\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          value={compression}\n          onChange={handleCompressionChange}\n          className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n        />\n        <div className=\"absolute top-0 left-0 w-full h-2 bg-gray-200 rounded-lg\"></div>\n        <div\n          className=\"absolute top-0 left-0 h-2 bg-blue-500 rounded-lg\"\n          style={{ width: `${compression}%` }}\n        ></div>\n      </div>\n      {compression > 0 && (\n        <p className=\"text-sm text-gray-500\">\n          Note: PNG, JPG, and WebP compression are lossy, meaning that some\n          information is lost in the process of reducing the file size.\n        </p>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 54.60912068983084}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"flex items-center justify-between\">\n        <p className=\"text-sm text-gray-500\">Compression: {compression}%</p>\n        {compression > 0 && (\n          <p className=\"text-xs text-gray-400\">\n            PNG, JPG, and WebP compression can reduce file size, but may also\n            result in a loss of image quality.\n          </p>\n        )}\n      </div>\n      <input\n        type=\"range\"\n        min={0}\n        max={100}\n        value={compression}\n        onChange={handleCompressionChange}\n        className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n        style={{\n          background: `linear-gradient(\n            to right,\n            #22c55e ${compression}%,\n            #d9d9d9 ${compression}%\n          )`,\n        }}\n      />\n    </div>\n  );\n}", "CodeBleu_score": 52.04179730807552}, {"code": "export function CompressionInput({\n  compression,\n  handleCompressionChange,\n}: CompressionInputProps){\n\t  return (\n    <div className=\"flex flex-col gap-2\">\n      <div className=\"flex items-center justify-between\">\n        <label htmlFor=\"compression\">Compression:</label>\n        <span>{compression}%</span>\n      </div>\n      <input\n        type=\"range\"\n        min=\"0\"\n        max=\"100\"\n        value={compression}\n        onChange={handleCompressionChange}\n        id=\"compression\"\n        className=\"w-full\"\n      />\n      {compression > 0 && (\n        <div className=\"text-sm\">\n          <p>\n            PNG, JPG, and WebP compression work differently. PNG is a lossless\n            format, meaning that no data is lost when the image is compressed.\n            JPG and WebP, on the other hand, are lossy formats, meaning that some\n            data is lost when the image is compressed.\n          </p>\n          <p>\n            PNG is a good format for images with sharp edges and solid colors,\n            while JPG and WebP are better for images with gradients and smooth\n            colors.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}", "CodeBleu_score": 53.63152690187643}]}
{"instance_id": "636802ba89ba", "generation_result": [{"code": "findAttributesWithPrefix(type, name){\n\t        name = name.trim().toLowerCase();\n\n        if (name.startsWith('#') || name.startsWith('~')) {\n            name = name.substr(1);\n        }\n\n        const key = `${type}-${name}`;\n\n        let result = [];\n\n        for (const idx in this.attributeIndex) {\n            if (idx.startsWith(key)) {\n                result = result.concat(this.attributeIndex[idx]);\n            }\n        }\n\n        return result;\n    }", "CodeBleu_score": 62.79724158667693}, {"code": "findAttributesWithPrefix(type, name){\n\t    name = name.trim().toLowerCase();\n\n    if (name.startsWith('#') || name.startsWith('~')) {\n        name = name.substr(1);\n    }\n\n    const result = [];\n\n    for (const index in this.attributeIndex) {\n        if (index.startsWith(`${type}-${name}`)) {\n            result.push(...this.attributeIndex[index]);\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 38.755163728873484}, {"code": "findAttributesWithPrefix(type, name){\n\t    name = name.trim().toLowerCase();\n\n    if (name.startsWith('#') || name.startsWith('~')) {\n        name = name.substr(1);\n    }\n\n    const key = `${type}-${name}`;\n    const result = [];\n\n    for (const index in this.attributeIndex) {\n        if (index.startsWith(key)) {\n            result.push(...this.attributeIndex[index]);\n        }\n    }\n\n    return result.flat();\n}", "CodeBleu_score": 58.11286678968946}]}
{"instance_id": "5fafa24f5463", "generation_result": [{"code": "function branchUpdated(branchRow){\n\t    const childNote = becca.notes[branchRow.noteId];\n\n    if (childNote) {\n        childNote.flatTextCache = null;\n        childNote.sortParents();\n\n        if (childNote.parents.length > 0) {\n            // subtree notes might lose some inherited attributes\n            childNote.invalidateSubTree();\n        }\n    }\n\n    const parentNote = becca.notes[branchRow.parentNoteId];\n\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 90.37432045265363}, {"code": "function branchUpdated(branchRow){\n\t    const childNote = becca.notes[branchRow.noteId];\n\n    if (childNote) {\n        childNote.flatTextCache = null;\n        childNote.sortParents();\n\n        if (childNote.parents.length > 0) {\n            // subtree notes might lose some inherited attributes\n            childNote.invalidateSubTree();\n        }\n    }\n\n    const parentNote = becca.notes[branchRow.parentNoteId];\n\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 90.37432045265363}, {"code": "function branchUpdated(branchRow){\n\t    const childNote = becca.notes[branchRow.noteId];\n\n    if (childNote) {\n        childNote.flatTextCache = null;\n        childNote.sortParents();\n\n        if (childNote.parents.length > 0) {\n            // subtree notes might lose some inherited attributes\n            childNote.invalidateSubTree();\n        }\n    }\n\n    const parentNote = becca.notes[branchRow.parentNoteId];\n\n    if (parentNote) {\n        parentNote.sortChildren();\n    }\n}", "CodeBleu_score": 90.37432045265363}]}
{"instance_id": "80b2322b7b29", "generation_result": [{"code": "function trimMime(mime){\n\t    if (!mime || mime === 'text/html') {\n        return mime;\n    }\n\n    if (mimeCache[mime]) {\n        return mimeCache[mime];\n    }\n\n    const mimeParts = mime.split('/');\n\n    if (mimeParts[0] === 'text' || mimeParts[0] === 'application') {\n        mimeParts.shift();\n    }\n\n    if (mimeParts[1] && mimeParts[1].startsWith('x-')) {\n        mimeParts[1] = mimeParts[1].substr(2);\n    }\n\n    mimeCache[mime] = mimeParts.join('/');\n\n    return mimeParts.join('/');\n}", "CodeBleu_score": 48.064425105486016}, {"code": "function trimMime(mime){\n\t    if (!mime || mime === 'text/html') {\n        return mime;\n    }\n\n    if (!mimeCache[mime]) {\n        const parts = mime.split('/');\n\n        const prefixesToIgnore = ['text/', 'application/'];\n\n        for (const prefix of prefixesToIgnore) {\n            if (parts[0] === prefix) {\n                parts.shift();\n            }\n        }\n\n        const firstPart = parts[0];\n\n        if (firstPart.startsWith('-x')) {\n            parts[0] = firstPart.substr(2);\n        }\n\n        mimeCache[mime] = parts.join('/');\n    }\n\n    return mimeCache[mime];\n}", "CodeBleu_score": 48.865342569680884}, {"code": "function trimMime(mime){\n\t    if (!mime || mime === 'text/html') {\n        return mime;\n    }\n\n    if (!mimeCache[mime]) {\n        const parts = mime.split('/');\n\n        let result = parts[0];\n\n        if (parts[0] === 'text' || parts[0] === 'application') {\n            result = parts[1];\n        }\n\n        if (result.startsWith('-x')) {\n            result = result.substr(2);\n        }\n\n        mimeCache[mime] = result;\n    }\n\n    return mimeCache[mime];\n}", "CodeBleu_score": 57.52569799822802}]}
{"instance_id": "5d211ed69fed", "generation_result": [{"code": "function buildDateLimits(baseNote){\n\t    const createdDate = dateUtils.parseDateTime(baseNote.getPojo().dateCreated);\n\n    const minDate = createdDate.minusMinutes(10);\n    const minExcludedDate = createdDate.minusMinutes(5);\n    const maxExcludedDate = createdDate.plusMinutes(5);\n    const maxDate = createdDate.plusMinutes(10);\n\n    return {\n        minDate: minDate.toISOString(),\n        minExcludedDate: minExcludedDate.toISOString(),\n        maxExcludedDate: maxExcludedDate.toISOString(),\n        maxDate: maxDate.toISOString()\n    };\n}", "CodeBleu_score": 32.5938785701276}, {"code": "function buildDateLimits(baseNote){\n\t    const date = dateUtils.parseLocalDateTime(baseNote.getDateString());\n    const timestamp = date.getTime();\n\n    const minDate = dateUtils.addMinutesToLocalDateTime(date, -15);\n    const minExcludedDate = dateUtils.addMinutesToLocalDateTime(date, -30);\n    const maxExcludedDate = dateUtils.addMinutesToLocalDateTime(date, 30);\n    const maxDate = dateUtils.addMinutesToLocalDateTime(date, 15);\n\n    return {\n        minDate: minDate.toISOString(),\n        minExcludedDate: minExcludedDate.toISOString(),\n        maxExcludedDate: maxExcludedDate.toISOString(),\n        maxDate: maxDate.toISOString(),\n    };\n}", "CodeBleu_score": 30.41728923787217}, {"code": "function buildDateLimits(baseNote){\n\t    const creationDate = dateUtils.parseLocalDateTime(baseNote.getPojo().dateCreated);\n    const creationTimestamp = creationDate.getTime();\n\n    return {\n        minDate: dateUtils.utcDateTimeStr(creationTimestamp - 1000 * 60 * 60 * 24 * 30),\n        minExcludedDate: dateUtils.utcDateTimeStr(creationTimestamp - 1000 * 60 * 60 * 24 * 30 * 3),\n        maxExcludedDate: dateUtils.utcDateTimeStr(creationTimestamp + 1000 * 60 * 60 * 24 * 30 * 3),\n        maxDate: dateUtils.utcDateTimeStr(creationTimestamp + 1000 * 60 * 60 * 24 * 30)\n    };\n}", "CodeBleu_score": 37.86599063783066}]}
{"instance_id": "5ef14ada992c", "generation_result": [{"code": "_setContent(content, opts = {}){\n\t    if (content === null || content === undefined) {\n        throw new Error(`Content cannot be null or undefined for ${this.constructor.name}`);\n    }\n\n    if (content instanceof Buffer) {\n        content = content.toString('base64');\n    }\n\n    if (typeof content !== 'string') {\n        throw new Error(`Content must be a string or a buffer for ${this.constructor.name}`);\n    }\n\n    const hash = utils.hash(content);\n\n    if (this.isProtected && !protectedSessionService.isProtectedSessionAvailable()) {\n        throw new Error(`Cannot set content for protected entity ${this.constructor.name} without protected session`);\n    }\n\n    const forceSave = opts.forceSave || false;\n    const forceFrontendReload = opts.forceFrontendReload || false;\n\n    sql.transactional(() => {\n        if (this.blobId && !forceSave) {\n            const oldBlob = blobService.getBlob(this.blobId);\n\n            if (oldBlob.contentHash === hash) {\n                return;\n            }\n        }\n\n        const blob = blobService.saveBlob({\n            content: content,\n            hash: hash,\n            isProtected: this.isProtected\n        });\n\n        if (this.blobId && blob.blobId === this.blobId) {\n            // nothing changed\n            return;\n        }\n\n        this.blobId = blob.blobId;\n\n        if (this.blobId) {\n            // remove old blob if not used\n            const oldBlob = blobService.getBlob(this.blobId);\n\n            if (oldBlob && !oldBlob.isUsed) {\n                blobService.deleteBlob(oldBlob);\n            }\n        }\n\n        this.save({ forceFrontendReload });\n    });\n}", "CodeBleu_score": 46.98848330834032}, {"code": "_setContent(content, opts = {}){\n\t", "CodeBleu_score": 0.8467755637509736}, {"code": "_setContent(content, opts = {}){\n\t    if (content === null || content === undefined) {\n        throw new Error(`Content cannot be null or undefined`);\n    }\n\n    if (typeof content === 'string') {\n        content = Buffer.from(content, 'utf8');\n    }\n\n    const unencryptedHash = utils.hash(content);\n\n    if (this.isProtected) {\n        if (!protectedSessionService.isProtectedSessionAvailable()) {\n            throw new Error(\"Cannot set content of protected entity outside protected session\");\n        }\n\n        content = protectedSessionService.encrypt(content);\n    }\n\n    const blobId = blobService.saveBlob(content, this.blobId, { forceSave: opts.forceSave });\n\n    if (blobId !== this.blobId || opts.forceSave) {\n        this.blobId = blobId;\n\n        if (opts.forceFrontendReload) {\n            this.utcDateModified = dateUtils.utcNowDateTime();\n        }\n\n        this.save();\n    }\n\n    this.hash = unencryptedHash;\n\n    return this;\n}", "CodeBleu_score": 44.732088122426205}]}
{"instance_id": "6f76c3417cdb", "generation_result": [{"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getDateNoteForToday();\n\n    const {note} = await server.post('notes', {\n        parentNoteId: inboxNote.noteId,\n        title: 'New note',\n        content: '',\n        type: 'text',\n        mime: 'text/html',\n        isProtected: false\n    });\n\n    const {noteId} = await server.post('notes/' + note.noteId + '/ensure-entity-change-is-known');\n\n    await server.get('notes/' + noteId + '/open-in-tab');\n\n    await server.get('notes/' + noteId + '/focus-title');\n}", "CodeBleu_score": 51.56207725073565}, {"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getDateNoteForToday();\n\n    const note = await server.post('notes/' + inboxNote.noteId + '/children');\n\n    note.content = '<p></p>';\n    note.type = 'text';\n    note.mime = 'text/html';\n    note.isProtected = false;\n\n    await server.put('notes/' + note.noteId, note);\n\n    const tabContext = {\n        noteId: note.noteId,\n        hoistedNoteId: note.noteId,\n        activeTabContext: 'note'\n    };\n\n    appContext.tabManager.openTabContext(tabContext);\n\n    await utils.sleep(1000);\n\n    const $title = $(\"#note-title-row-\" + note.noteId + \" .title-text\");\n\n    if ($title.length) {\n        $title[0].focus();\n\n        document.getSelection().selectAllChildren($title[0]);\n    }\n}", "CodeBleu_score": 43.107785111924926}, {"code": "async createNoteIntoInboxCommand(){\n\t    const inboxNote = await dateNoteService.getDateNoteForToday();\n\n    const { note } = await server.post('notes/' + inboxNote.noteId + '/children');\n\n    note.parentNoteId = inboxNote.noteId;\n    note.isProtected = false;\n    note.type = 'text';\n    note.mime = 'text/html';\n    note.title = 'New note';\n    note.content = '<p></p>';\n\n    await server.post('notes/' + note.noteId + '/entity-changes');\n\n    this.tabManager.openInTab(note.noteId, true);\n\n    const $title = $('#note-title-' + note.noteId);\n\n    $title.trigger('focus');\n    $title.get(0).setSelectionRange(0, 0);\n}", "CodeBleu_score": 41.03589986958526}]}
{"instance_id": "2b91c618a874", "generation_result": [{"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t        const note = await server.get(`notes/${noteId}`);\n\n        if (note.hoisted) {\n            await server.put(`notes/${note.noteId}/unhoist`);\n            appContext.triggerEvent('noteUnhoisted', {noteId: note.noteId});\n        }\n        else if (!note.isSearch) {\n            await server.put(`notes/${note.noteId}/hoist`);\n            appContext.triggerEvent('noteHoisted', {noteId: note.noteId});\n        }\n    }", "CodeBleu_score": 38.57835908049498}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t        const note = await server.get(`notes/${noteId}`);\n\n        if (!note.isHoisted) {\n            await server.put(`notes/${noteId}/hoisting`);\n\n            appContext.triggerEvent('hoistingNoteOn', {noteId});\n        } else {\n            await server.delete(`notes/${noteId}/hoisting`);\n\n            appContext.triggerEvent('hoistingNoteOff', {noteId});\n        }\n\n        // we need to refresh the active note context to reflect the changes\n        if (noteId === appContext.tabManager.getActiveContextNoteId()) {\n            await appContext.tabManager.refreshActiveNoteContext();\n        }\n    }", "CodeBleu_score": 36.82131748723092}, {"code": " async toggleNoteHoistingCommand({noteId = appContext.tabManager.getActiveContextNoteId()}){\n\t        const note = await server.get(`notes/${noteId}`);\n\n        if (note.hoisted) {\n            await server.put(`notes/${noteId}/unhoist`);\n        }\n        else {\n            const activeNoteContext = appContext.tabManager.getActiveNoteContext();\n\n            if (note.type !== 'search') {\n                await server.put(`notes/${noteId}/hoist`);\n            }\n\n            // we need to update the active note context after hoisting\n            activeNoteContext.note = note;\n        }\n    }", "CodeBleu_score": 49.407429499728686}]}
{"instance_id": "8df5414bda15", "generation_result": [{"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = utils.generateHash(notePath, hoistedNoteId, viewScope);\n\n    if (utils.isElectron()) {\n        const {ipcRenderer} = utils.dynamicRequire('@electron/remote');\n\n        ipcRenderer.send('open-in-window', hash);\n    }\n    else {\n        const url = utils.dynamicRequire('@electron/remote').getGlobal('triliumUrl') + `#${hash}`;\n\n        window.open(url, '_blank', 'width=800,height=600');\n    }\n}", "CodeBleu_score": 48.593673900532934}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = utils.generateHash(notePath + (hoistedNoteId || \"\") + (viewScope || \"\"));\n\n    if (utils.isElectron()) {\n        const ipcRenderer = utils.dynamicRequire('@electron/remote').ipcRenderer;\n\n        ipcRenderer.send('open-new-window', {hash});\n    }\n    else {\n        const url = utils.dynamicRequire('@electron/remote').getGlobal('triliumServerUrl') + '?hash=' + hash;\n\n        window.open(url, '_blank', 'width=800,height=500');\n    }\n}", "CodeBleu_score": 46.16969067709199}, {"code": "async openInWindowCommand({notePath, hoistedNoteId, viewScope}){\n\t    const hash = utils.generateHash([notePath, hoistedNoteId, viewScope]);\n\n    if (utils.isElectron()) {\n        const ipcRenderer = utils.dynamicRequire('@electron/remote').ipcRenderer;\n\n        ipcRenderer.send('open-in-window', {hash});\n    }\n    else {\n        const url = utils.dynamicRequire('@electron/remote').getGlobal('triliumServerUrl') + '?hash=' + hash;\n\n        window.open(url, '_blank', 'width=1200,height=800');\n    }\n}", "CodeBleu_score": 48.113392442118574}]}
{"instance_id": "bd6dc0a79a5b", "generation_result": [{"code": "async runActiveNoteCommand(){\n\t    const activeContext = appContext.tabManager.getActiveContext();\n\n    if (activeContext.note.type !== 'code') {\n        return;\n    }\n\n    const noteId = activeContext.note.noteId;\n\n    if (activeContext.note.mime.startsWith('text/javascript')) {\n        const bundle = await bundleService.getBundle(noteId);\n\n        await bundleService.executeBundle(bundle);\n    }\n    else if (activeContext.note.mime.startsWith('text/sql')) {\n        const {results} = await server.post(`notes/${noteId}/execute`);\n\n        if (results.error) {\n            toastService.showError(results.error);\n        }\n        else {\n            toastService.showMessage(\"Note executed\");\n\n            appContext.triggerEvent('noteExecuted', { results });\n        }\n    }\n    else {\n        const {results} = await server.post(`notes/${noteId}/execute`);\n\n        if (results.error) {\n            toastService.showError(results.error);\n        }\n        else {\n            toastService.showMessage(\"Note executed\");\n\n            appContext.triggerEvent('noteExecuted', { results });\n        }\n    }\n}", "CodeBleu_score": 41.78268919030144}, {"code": "async runActiveNoteCommand(){\n\t    const activeNoteContext = appContext.tabManager.getActiveContext();\n\n    if (activeNoteContext.note.type !== 'code') {\n        return;\n    }\n\n    if (activeNoteContext.note.mime === 'application/javascript') {\n        const bundle = await bundleService.getBundle(activeNoteContext.note.noteId);\n\n        bundleService.execute(bundle);\n    }\n    else if (activeNoteContext.note.mime === 'text/x-sqlite-schema') {\n        const query = activeNoteContext.note.content;\n\n        try {\n            const res = await server.post('sql/execute', {query});\n\n            toastService.showMessageOnNote(activeNoteContext.note.noteId, `${res.message}`);\n\n            appContext.triggerEvent('sql-executed', {\n                noteId: activeNoteContext.note.noteId,\n                query,\n                result: res.result\n            });\n        }\n        catch (e) {\n            toastService.showMessageOnNote(activeNoteContext.note.noteId, `Error executing query: ${e.message}`);\n        }\n    }\n    else {\n        const res = await server.post('execute/backend', {\n            noteId: activeNoteContext.note.noteId,\n            notePath: activeNoteContext.note.notePath\n        });\n\n        toastService.showMessageOnNote(activeNoteContext.note.noteId, `${res.message}`);\n    }\n}", "CodeBleu_score": 41.252163843463265}, {"code": "async runActiveNoteCommand(){\n\t    const activeContext = appContext.tabManager.getActiveContext();\n\n    if (!activeContext || activeContext.note.type !== 'code') {\n        return;\n    }\n\n    if (activeContext.note.mime === 'text/javascript') {\n        const bundle = await bundleService.getBundle(activeContext.note.noteId);\n\n        if (!bundle) {\n            toastService.showMessage(`Note ${activeContext.note.title} is not bundled yet.`);\n            return;\n        }\n\n        bundleService.run(bundle, activeContext.note.noteId);\n    }\n    else if (activeContext.note.mime === 'text/x-sqlite-schema') {\n        const result = await server.post('execute/sql', {\n            noteId: activeContext.note.noteId,\n            sql: activeContext.note.content\n        });\n\n        if (result.error) {\n            toastService.showMessage(`Error executing note ${activeContext.note.title}: ${result.error}`);\n        }\n        else {\n            toastService.showMessage(`Note ${activeContext.note.title} executed successfully.`);\n\n            appContext.triggerEvent('sqlNoteExecuted', {\n                note: activeContext.note,\n                result: result.rows\n            });\n        }\n    }\n    else {\n        const result = await server.post('execute/backend', {\n            noteId: activeContext.note.noteId,\n            script: activeContext.note.content\n        });\n\n        if (result.error) {\n            toastService.showMessage(`Error executing note ${activeContext.note.title}: ${result.error}`);\n        }\n        else {\n            toastService.showMessage(`Note ${activeContext.note.title} executed successfully.`);\n        }\n    }\n}", "CodeBleu_score": 40.061402678678284}]}
{"instance_id": "233cf4163968", "generation_result": [{"code": "async isReadOnly(){\n\t    if (this.note.isReadOnlyDisabled()) {\n        return false;\n    }\n\n    if (!this.note || !this.note.type) {\n        return true;\n    }\n\n    if (this.note.isReadOnly()) {\n        return true;\n    }\n\n    if (this.viewScope.viewMode === 'source') {\n        return true;\n    }\n\n    const blob = await this.note.getBlob();\n\n    if (blob.contentLength > this.getReadOnlySizeLimit()) {\n        if (!this.note.isAutoReadOnlyDisabled()) {\n            return true;\n        }\n    }\n\n    return false;\n}", "CodeBleu_score": 51.304893439113606}, {"code": "async isReadOnly(){\n\t    if (this.note.isReadOnlyDisabled()) {\n        return false;\n    }\n\n    if (!this.note || !['text', 'code'].includes(this.note.type)) {\n        return true;\n    }\n\n    if (this.viewScope.viewMode === 'source') {\n        return true;\n    }\n\n    const blob = await this.note.getBlob();\n\n    if (!blob) {\n        return false;\n    }\n\n    const contentLength = blob.contentLength;\n\n    const limit = this.note.type === 'text'\n        ? config.get('textNoteSizeLimit')\n        : config.get('codeNoteSizeLimit');\n\n    if (contentLength > limit && !this.note.isLabelTruthy('autoReadOnlyDisabled')) {\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 73.15352368581667}, {"code": "async isReadOnly(){\n\t    if (this.isReadOnlyDisabled()) {\n        return false;\n    }\n\n    if (!this.note) {\n        return false;\n    }\n\n    if (this.note.type !== 'text' && this.note.type !== 'code') {\n        return false;\n    }\n\n    if (this.viewScope.viewMode === 'source') {\n        return true;\n    }\n\n    if (this.note.isLabelTruthy('readOnly')) {\n        return true;\n    }\n\n    const blob = await this.note.getBlob();\n\n    if (blob.contentLength > this.getReadOnlySizeLimit()) {\n        return !this.note.isLabelTruthy('autoReadOnlyDisabled');\n    }\n\n    return false;\n}", "CodeBleu_score": 60.54550384298463}]}
{"instance_id": "bca77fc5e32c", "generation_result": [{"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t    const activeContext = this.getActiveContext();\n\n    if (activeContext) {\n        // on mobile, we want to create a new tab as a child of the active tab\n        const existingContext = activeContext.getChildContextByHoistedNoteId(hoistedNoteId);\n\n        if (existingContext) {\n            await this.activateNoteContext(existingContext.ntxId);\n\n            return existingContext;\n        }\n        else {\n            const newContext = new NoteContext(activeContext, {\n                ntxId,\n                hoistedNoteId,\n                mainNtxId\n            });\n\n            activeContext.addChild(newContext);\n\n            this.triggerEvent('newNoteContextCreated', newContext);\n\n            return newContext;\n        }\n    }\n    else {\n        // on desktop, we create a new tab as a child of the root context\n        const rootContext = this.getRootContext();\n\n        const newContext = new NoteContext(rootContext, {\n            ntxId,\n            hoistedNoteId,\n            mainNtxId\n        });\n\n        rootContext.addChild(newContext);\n\n        this.triggerEvent('newNoteContextCreated', newContext);\n\n        return newContext;\n    }\n}", "CodeBleu_score": 38.381847274411506}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t    const activeNoteContext = this.getActiveContext();\n    let noteContext;\n\n    if (activeNoteContext) {\n        noteContext = activeNoteContext.findChildByHoistedNoteId(hoistedNoteId);\n    }\n\n    if (!noteContext) {\n        noteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n\n        if (activeNoteContext) {\n            activeNoteContext.addChild(noteContext);\n        } else {\n            this.noteContexts.push(noteContext);\n        }\n\n        this.triggerEvent('newNoteContextCreated', { noteContext });\n    }\n\n    return noteContext;\n}", "CodeBleu_score": 56.45597641604353}, {"code": "async openEmptyTab(ntxId = null, hoistedNoteId = 'root', mainNtxId = null){\n\t  const activeNoteContext = this.getActiveContext();\n\n  let noteContext;\n\n  if (activeNoteContext) {\n    // on mobile, we can't open new tab, so we just reuse the active one\n    noteContext = activeNoteContext;\n  } else {\n    // on desktop, we open a new tab\n    noteContext = this.noteContexts.find(nc => nc.hoistedNoteId === hoistedNoteId);\n  }\n\n  if (!noteContext) {\n    noteContext = new NoteContext(ntxId, hoistedNoteId, mainNtxId);\n\n    this.noteContexts.push(noteContext);\n\n    this.triggerEvent('newNoteContextCreated', noteContext);\n  }\n\n  return noteContext;\n}", "CodeBleu_score": 46.72091471111032}]}
{"instance_id": "fa8b5627c077", "generation_result": [{"code": "sortChildren(){\n\t    const childToPosition = {};\n\n    for (const childNoteId in this.childToBranch) {\n        const branchId = this.childToBranch[childNoteId];\n        const position = noteAttributeCache.getNoteAttribute(childNoteId, 'position');\n\n        childToPosition[childNoteId] = position;\n    }\n\n    this.children.sort((a, b) => {\n        const aPosition = childToPosition[a];\n        const bPosition = childToPosition[b];\n\n        if (aPosition === undefined && bPosition === undefined) {\n            return 0;\n        } else if (aPosition === undefined) {\n            return 1;\n        } else if (bPosition === undefined) {\n            return -1;\n        } else {\n            return aPosition - bPosition;\n        }\n    });\n}", "CodeBleu_score": 41.277045607538135}, {"code": "sortChildren(){\n\t    const branchPositions = {};\n\n    for (const branchId of Object.values(this.childToBranch)) {\n        const branch = this.froca.getNote(branchId);\n\n        if (branch) {\n            branchPositions[branchId] = branch.position;\n        }\n    }\n\n    this.children.sort((a, b) => {\n        const aPos = branchPositions[this.childToBranch[a]] ?? 0;\n        const bPos = branchPositions[this.childToBranch[b]] ?? 0;\n\n        return aPos - bPos;\n    });\n}", "CodeBleu_score": 58.643526030379164}, {"code": "sortChildren(){\n\t    const branchPositions = {};\n\n    for (const branchId of Object.values(this.childToBranch)) {\n        const position = noteAttributeCache.get(branchId, 'position');\n\n        if (position !== null) {\n            branchPositions[branchId] = position;\n        }\n    }\n\n    this.children.sort((a, b) => {\n        const aPos = branchPositions[this.childToBranch[a]] || 0;\n        const bPos = branchPositions[this.childToBranch[b]] || 0;\n\n        return aPos - bPos;\n    });\n}", "CodeBleu_score": 55.95002386211022}]}
{"instance_id": "51a1ff6e218f", "generation_result": [{"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    branchIdsToMove = filterRootNote(branchIdsToMove);\n    branchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (newParentBranch.noteId === hoistedNoteService.getHoistedNoteId()) {\n        toastService.showError('Cannot move notes to the hoisted note.');\n        return;\n    }\n\n    if (newParentBranch.getNote().type === 'search') {\n        toastService.showError('Cannot move notes to search.');\n        return;\n    }\n\n    for (const branchIdToMove of branchIdsToMove) {\n        const resp = await server.put(`branches/${branchIdToMove}/move/${newParentBranchId}`);\n\n        if (!resp.success) {\n            toastService.showError(resp.message);\n            return;\n        }\n    }\n}", "CodeBleu_score": 70.01938995751895}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (newParentBranch.noteId === hoistedNoteService.getHoistedNoteId()) {\n        toastService.showError('Cannot move notes into the hoisted note.');\n        return;\n    }\n\n    branchIdsToMove = filterRootNote(branchIdsToMove);\n\n    for (const branchIdToMove of branchIdsToMove) {\n        const branchToMove = froca.getBranch(branchIdToMove);\n\n        if (branchToMove.noteId === hoistedNoteService.getHoistedNoteId()) {\n            toastService.showError('Cannot move the hoisted note.');\n            return;\n        }\n\n        if (branchToMove.getNote().type === 'search') {\n            toastService.showError('Cannot move search results.');\n            return;\n        }\n\n        const resp = await server.put(`branches/${branchIdToMove}/move/${newParentBranchId}`);\n\n        if (!resp.success) {\n            toastService.showError(resp.message);\n            return;\n        }\n    }\n}", "CodeBleu_score": 75.04836308010103}, {"code": "async function moveToParentNote(branchIdsToMove, newParentBranchId){\n\t    branchIdsToMove = filterRootNote(branchIdsToMove);\n    branchIdsToMove = filterSearchBranches(branchIdsToMove);\n\n    const newParentBranch = froca.getBranch(newParentBranchId);\n\n    if (['root', '_lbRoot', '_lbAvailableLaunchers', '_lbVisibleLaunchers'].includes(newParentBranch.noteId)) {\n        toastService.showError('Cannot move notes here.');\n        return;\n    }\n\n    for (const branchIdToMove of branchIdsToMove) {\n        const branchToMove = froca.getBranch(branchIdToMove);\n\n        if (branchToMove.noteId === hoistedNoteService.getHoistedNoteId()) {\n            toastService.showError('Cannot move notes here.');\n            return;\n        }\n\n        if (branchToMove.getParentNote().type === 'search') {\n            continue;\n        }\n\n        const resp = await server.put(`branches/${branchIdToMove}/move/${newParentBranchId}`);\n\n        if (!resp.success) {\n            toastService.showError(resp.message);\n            return;\n        }\n    }\n}", "CodeBleu_score": 74.14496423326219}]}
{"instance_id": "2ffcc8140af6", "generation_result": [{"code": "async function activateParentNotePath(){\n\t    const activeContext = froca.getActiveContext();\n\n    const parentNotePath = activeContext.notePath.slice(0, -1);\n\n    if (parentNotePath.length > 0) {\n        froca.setActiveNotePath(parentNotePath);\n    }\n}", "CodeBleu_score": 53.957266594332154}, {"code": "async function activateParentNotePath(){\n\t    const activeContext = appContext.getActiveContext();\n    const parentNotePath = activeContext.notePath.slice(0, -1);\n\n    if (parentNotePath.length > 0) {\n        appContext.setActiveNotePath(parentNotePath);\n    }\n}", "CodeBleu_score": 55.82023476828639}, {"code": "async function activateParentNotePath(){\n\t    const activeContext = froca.getActiveContext();\n    const parentNotePath = activeContext.notePath.slice(0, -1);\n\n    if (parentNotePath.length > 0) {\n        await froca.setActiveNotePath(parentNotePath);\n    }\n}", "CodeBleu_score": 54.224571315305695}]}
{"instance_id": "04b13e7ad9f6", "generation_result": [{"code": "async function copy(branchIds){\n\t    clipboardBranchIds = branchIds;\n    clipboardMode = 'copy';\n\n    const htmlLinks = [];\n\n    for (const branchId of branchIds) {\n        const branch = froca.getBranch(branchId);\n        const note = await branch.getNote();\n\n        const link = linkService.createReferenceLink(note.noteId, note.title);\n\n        htmlLinks.push(link.html);\n    }\n\n    utils.writeToClipboard(htmlLinks.join('\n'));\n\n    toastService.showMessage(`Copied ${branchIds.length} note(s) to the clipboard`);\n}", "CodeBleu_score": 48.93604732003286}, {"code": "async function copy(branchIds){\n\t    clipboardBranchIds = branchIds;\n    clipboardMode = 'copy';\n\n    const links = [];\n\n    for (const branchId of clipboardBranchIds) {\n        const link = await linkService.createLinkToBranch(branchId);\n\n        links.push(link);\n    }\n\n    const htmlLinks = links.map(link => linkService.renderLink(link));\n\n    const html = htmlLinks.join('\n');\n\n    utils.copyToClipboard(html);\n\n    toastService.showMessage(`${clipboardBranchIds.length} branches copied to clipboard.`);\n}", "CodeBleu_score": 49.41310220434326}, {"code": "async function copy(branchIds){\n\t    clipboardBranchIds = branchIds;\n    clipboardMode = 'copy';\n\n    if (utils.isElectron()) {\n        const {clipboard} = require('electron');\n\n        const linkHtmls = [];\n\n        for (const branchId of branchIds) {\n            const linkHtml = await linkService.createLinkHtml(branchId);\n\n            linkHtmls.push(linkHtml);\n        }\n\n        clipboard.writeHTML(linkHtmls.join('<br/>'));\n\n        toastService.showMessage('Branches copied to clipboard.');\n    }\n    else {\n        toastService.showMessage('Copy not supported in this environment.');\n    }\n}", "CodeBleu_score": 59.340733742140564}]}
{"instance_id": "b3a6cce6e5ce", "generation_result": [{"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  // Flatten the list\n  data.list = flatten(data.list)\n\n  // Iterate through each item\n  data.list.map((item) => {\n    // For items of type 'folder', initialize the children property as an empty array if it is not already an array\n    if (item.type === FolderModeType.folder && !Array.isArray(item.children)) {\n      item.children = []\n    }\n\n    // For items of type 'group', initialize the include property as an empty array if it is not already an array\n    if (item.type === FolderModeType.group && !Array.isArray(item.include)) {\n      item.include = []\n    }\n\n    // For items of type 'folder' or 'group', set the content property to an empty string\n    if (item.type === FolderModeType.folder || item.type === FolderModeType.group) {\n      item.content = ''\n    }\n  })\n\n  return data\n}", "CodeBleu_score": 60.63562358668088}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  const new_list = flatten(data.list)\n\n  new_list.map((item) => {\n    if (item.type === FolderModeType.folder) {\n      if (!item.children) item.children = []\n    }\n    if (item.type === FolderModeType.group) {\n      if (!item.include) item.include = []\n    }\n    item.content = ''\n  })\n\n  return { ...data, list: new_list }\n}", "CodeBleu_score": 44.234706673088375}, {"code": "export const cleanHostsList = (data: IHostsBasicData): IHostsBasicData => 26{\n\t  data.list = flatten(data.list)\n\n  data.list.map((item) => {\n    if (item.type === FolderModeType.folder) {\n      if (!item.children) {\n        item.children = []\n      }\n    } else if (item.type === FolderModeType.group) {\n      if (!item.include) {\n        item.include = []\n      }\n    } else {\n      item.content = ''\n    }\n  })\n\n  return data\n}", "CodeBleu_score": 49.73001052500292}]}
{"instance_id": "a494fe11a98c", "generation_result": [{"code": "const addHistory = async (content: string) =>{\n\t  const id = uuid4()\n  const now = Date.now()\n  const history = { id, content, timestamp: now }\n  const limit = await configGet('history_limit')\n  if (limit && limit > 0) {\n    const list = await getHistoryList()\n    const count = list.length\n    if (count >= limit) {\n      const del_count = count - limit + 1\n      for (let i = 0; i < del_count; i++) {\n        await deleteHistory(list[i].id)\n      }\n    }\n  }\n  await swhdb.insert('history', history)\n  return history\n}", "CodeBleu_score": 38.29937034593969}, {"code": "const addHistory = async (content: string) =>{\n\t  const id = uuid4()\n  const time = new Date().toISOString()\n  await swhdb.history.insert({ id, time, content })\n  const limit = Number(await configGet('history_limit'))\n  if (limit > 0) {\n    const list = await getHistoryList()\n    if (list.length > limit) {\n      const to_delete = list.slice(limit)\n      for (const item of to_delete) {\n        await deleteHistory(item.id)\n      }\n    }\n  }\n  return id\n}", "CodeBleu_score": 31.298001605714393}, {"code": "const addHistory = async (content: string) =>{\n\t  const { history_limit } = await configGet()\n  if (isNaN(history_limit) || history_limit <= 0) return\n\n  const id = uuid4()\n  const timestamp = Date.now()\n  await swhdb.history.insert({ id, content, timestamp })\n\n  const list = await getHistoryList()\n  if (list.length > history_limit) {\n    const to_delete = list.slice(history_limit)\n    await deleteHistory(to_delete.map(x => x.id))\n  }\n\n  broadcast(events.history.updated)\n}", "CodeBleu_score": 33.49654532641009}]}
{"instance_id": "bd1413e33a8a", "generation_result": [{"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const dataFolder = getDataFolder()\n  const filename = 'hosts.json'\n  const file = path.join(dataFolder, filename)\n  const defaultData = {\n    version: version.version,\n    hosts: [],\n    groups: [],\n  }\n\n  if (!fs.existsSync(file)) {\n    return defaultData\n  }\n\n  const content = fs.readFileSync(file, 'utf8')\n  try {\n    const data = JSON.parse(content)\n    return cleanHostsList(data)\n  } catch (e) {\n    console.error(`read old data failed: ${e.message}`)\n    return defaultData\n  }\n}", "CodeBleu_score": 53.26915723540885}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const dataFile = path.join(getDataFolder(), 'data.json')\n  const defaultData: IHostsBasicData = {\n    version: VersionType.v4,\n    hosts: cleanHostsList([]),\n    groups: [],\n    rules: [],\n    enabled: true,\n    createdAt: 0,\n    updatedAt: 0,\n  }\n\n  if (!fs.existsSync(dataFile)) {\n    return defaultData\n  }\n\n  const content = fs.readFileSync(dataFile, 'utf8')\n  try {\n    const data = JSON.parse(content)\n    return cleanHostsList(data)\n  } catch (e) {\n    console.error('[readOldData]', e)\n    return defaultData\n  }\n}", "CodeBleu_score": 53.825226965248476}, {"code": "const readOldData = async (): Promise<IHostsBasicData> =>{\n\t  const oldDataFile = path.join(getDataFolder(), 'hosts.json')\n  const defaultData: IHostsBasicData = {\n    version: VersionType.v4,\n    hosts: [],\n  }\n\n  if (!fs.existsSync(oldDataFile)) {\n    return defaultData\n  }\n\n  const content = fs.readFileSync(oldDataFile, 'utf-8')\n  try {\n    const data = JSON.parse(content)\n    return cleanHostsList(data)\n  } catch (e) {\n    console.error(e)\n    return defaultData\n  }\n}", "CodeBleu_score": 55.79615546052234}]}
{"instance_id": "1a746af7c945", "generation_result": [{"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!global.swhdb) {\n    let data_dir: string = await getDataFolder()\n    let db_dir: string = path.join(data_dir, 'swh')\n    swhdb = new PotDb(db_dir)\n    console.log(`swh db: ${swhdb.dir}`)\n    global.swhdb = swhdb\n  }\n  return swhdb\n}", "CodeBleu_score": 63.889278267520076}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!global.swhdb) {\n    let data_dir: string = await getDataFolder()\n    let db_dir: string = path.join(data_dir, 'swh')\n    swhdb = new PotDb(db_dir)\n    console.log(`swh db: ${swhdb.dir}`)\n    global.swhdb = swhdb\n  }\n  return swhdb\n}", "CodeBleu_score": 63.889278267520076}, {"code": "async function getSwhDb(): Promise<PotDb>{\n\t  if (!global.swhdb) {\n    let data_dir = await getDataFolder()\n    let db_dir = path.join(data_dir, 'swh')\n    swhdb = new PotDb(db_dir)\n    console.log(`swh db: ${swhdb.dir}`)\n    global.swhdb = swhdb\n  }\n  return swhdb\n}", "CodeBleu_score": 59.80444775221757}]}
{"instance_id": "375d71e6f391", "generation_result": [{"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t  if (!hosts.refresh_interval || !hosts.url) {\n    return false\n  }\n  if (!hosts.last_refresh_ts) {\n    return true\n  }\n  const ts_now = Date.now()\n  const ts_elapsed = ts_now - hosts.last_refresh_ts\n  if (ts_elapsed > hosts.refresh_interval * 1000) {\n    return true\n  }\n  return false\n}", "CodeBleu_score": 33.63878078993083}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t  const { refresh_interval, url } = hosts\n  if (!refresh_interval || !url) return false\n  if (!hosts.last_refresh_ts) return true\n  const ts_now = Date.now()\n  const ts_elapsed = ts_now - hosts.last_refresh_ts\n  if (ts_elapsed > refresh_interval * 1000) return true\n  return false\n}", "CodeBleu_score": 38.7868040838439}, {"code": "const isNeedRefresh = (hosts: IHostsListObject): boolean => {\n\t  if (!hosts.refresh_interval) return false\n  if (!hosts.url) return false\n  if (!hosts.last_refresh_ts) return true\n  const ts_now = Date.now()\n  const ts_elapsed = ts_now - hosts.last_refresh_ts\n  return ts_elapsed > hosts.refresh_interval\n}", "CodeBleu_score": 27.692960318884552}]}
{"instance_id": "e9824782738b", "generation_result": [{"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  return new Promise((resolve, reject) => {\n    const callbackId = `callback_${x_get_idx++}_${Date.now()}`\n    ipcRenderer.once(callbackId, (event, error, data) => {\n      if (error) {\n        reject(error)\n      } else {\n        resolve(data)\n      }\n    })\n    ipcRenderer.send('call_action', action, callbackId, ...params)\n  })\n}", "CodeBleu_score": 54.35011573884007}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  return new Promise((resolve, reject) => {\n    const callback_id = `_${x_get_idx++}`\n    ipcRenderer.once(callback_id, (event, data) => {\n      if (data.success) {\n        resolve(data.data)\n      } else {\n        reject(data.message)\n      }\n    })\n    ipcRenderer.send('action', { action, params, callback_id })\n  })\n}", "CodeBleu_score": 46.22612558029656}, {"code": "const callAction = (action: keyof Actions, ...params: any[]) => {\n\t  return new Promise((resolve, reject) => {\n    const callbackId = 'x_' + (++x_get_idx)\n    ipcRenderer.once(callbackId, (event, data) => {\n      if (data.success) {\n        resolve(data.data)\n      } else {\n        reject(data.data)\n      }\n    })\n    ipcRenderer.send('action', { action, params, callbackId })\n  })\n}", "CodeBleu_score": 44.40539143622965}]}
{"instance_id": "027bc2903865", "generation_result": [{"code": "const loadContent = async (is_new = false) =>{\n\t  if (!ref_cm.current) {\n    await wait(100)\n    loadContent(is_new)\n    return\n  }\n\n  let content = ''\n  if (hosts_id === '0') {\n    content = await agent.hosts.getSystemHosts()\n  } else {\n    content = await agent.hosts.getHostsContent(hosts_id)\n  }\n\n  setContent(content)\n  ref_cm.current.setValue(content)\n  if (is_new) {\n    ref_cm.current.clearHistory()\n  }\n}", "CodeBleu_score": 48.24245030435459}, {"code": "const loadContent = async (is_new = false) =>{\n\t  if (!ref_cm.current) {\n    await wait(100)\n    return loadContent()\n  }\n\n  let content = ''\n  if (hosts_id === '0') {\n    content = await agent.hosts.getSystemHosts()\n  } else {\n    content = await agent.hosts.getHostsContent(hosts_id)\n  }\n\n  setContent(content)\n  ref_cm.current.setValue(content)\n  if (is_new) {\n    ref_cm.current.clearHistory()\n  }\n}", "CodeBleu_score": 47.277071432593345}, {"code": "const loadContent = async (is_new = false) =>{\n\t  if (!ref_cm.current) {\n    await wait(50)\n    return loadContent(is_new)\n  }\n\n  let content = ''\n  if (hosts_id === '0') {\n    content = await agent.hosts.getSystemHosts()\n  } else {\n    content = await agent.hosts.getHostsContent(hosts_id)\n  }\n\n  setContent(content)\n  ref_cm.current.setValue(content)\n  if (is_new) {\n    ref_cm.current.clearHistory()\n  }\n}", "CodeBleu_score": 45.45760199178885}]}
{"instance_id": "199f8fb90016", "generation_result": [{"code": "const onGutterClick = (n: number) =>{\n\t  let cm_editor = ref_cm.current\n  if (is_read_only || !cm_editor) return\n\n  let info = cm_editor.getLineHandle(n)\n  let line = info.text\n  if (!line || line.trim().length === 0) return\n\n  let comment = '# '\n  if (line.startsWith(comment)) {\n    line = line.substring(comment.length)\n  } else {\n    line = comment + line\n  }\n\n  cm_editor.replaceRange(line, { line: n, ch: 0 }, { line: n, ch: line.length })\n}", "CodeBleu_score": 56.08322672874395}, {"code": "const onGutterClick = (n: number) =>{\n\t  let cm_editor = ref_cm.current\n  if (is_read_only || !cm_editor) return\n\n  let info = cm_editor.getLineHandle(n)\n  if (!info) return\n\n  let line = info.text\n  if (!line || line.trim() === '') return\n\n  if (line.trim().startsWith('#')) {\n    line = line.replace(/^#/, '')\n  } else {\n    line = '# ' + line\n  }\n\n  cm_editor.replaceRange(line, { line: n, ch: 0 }, { line: n, ch: line.length })\n}", "CodeBleu_score": 65.90310695922743}, {"code": "const onGutterClick = (n: number) =>{\n\t  let cm_editor = ref_cm.current\n  if (is_read_only || !cm_editor) return\n  let info = cm_editor.getLineHandle(n)\n  if (!info.text || info.text.trim() === '') return\n\n  let line = info.text\n  if (line.startsWith('#')) {\n    line = line.substring(1).trimStart()\n  } else {\n    line = '# ' + line\n  }\n  cm_editor.replaceRange(line, { line: n, ch: 0 }, { line: n, ch: info.text.length })\n}", "CodeBleu_score": 57.76011400123895}]}
{"instance_id": "000e8aa4c16c", "generation_result": [{"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    clear();\n    m_args = args;\n    m_hasError = false;\n    if (m_args.isEmpty()) {\n        return false;\n    }\n    auto actualIt = m_args.constBegin();\n    Node* actualNode = &m_rootNode;\n    bool ok = true;\n    while (actualIt != m_args.constEnd()) {\n        QString argument = *actualIt;\n        if (argument.startsWith(QLatin1String(\"-\"))) {\n            if (argument == QLatin1String(\"-\")) {\n                // - is not a valid argument\n                err << QStringLiteral(\"'-' is not a valid argument.\");\n                ok = false;\n                break;\n            }\n            if (argument.startsWith(QLatin1String(\"--\"))) {\n                if (argument == QLatin1String(\"--version\")) {\n                    if (actualIt + 1 == m_args.constEnd()) {\n                        out << QStringLiteral(\"Flameshot %1\").arg(GlobalValues::versionString());\n                        return true;\n                    } else {\n                        err << QStringLiteral(\"The option '--version' must be the only argument.\");\n                        ok = false;\n                        break;\n                    }\n                }\n                ok = processOptions(m_args, actualIt, actualNode);\n            } else {\n                ok = processOptions(m_args, actualIt, actualNode);\n            }\n        } else {\n            ok = processArgs(m_args, actualIt, actualNode);\n        }\n        if (!ok) {\n            break;\n        }\n        ++actualIt;\n    }\n    if (!ok) {\n        err << QStringLiteral(\"Try '%1 --help' for more information.\").arg(qApp->applicationName());\n    }\n    return ok;\n}", "CodeBleu_score": 52.8205505236644}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t    m_foundArgs.clear();\n    m_foundOptions.clear();\n    bool ok = true;\n    // check version\n    if (args.contains(QLatin1String(\"-v\")) || args.contains(QLatin1String(\"--version\"))) {\n        out << QStringLiteral(\"Flameshot %1\").arg(APP_VERSION);\n        if (args.length() > 1) {\n            err << QStringLiteral(\"The option -v/--version is not compatible with other options.\");\n            ok = false;\n        }\n        return ok;\n    }\n    // check help\n    if (args.contains(QLatin1String(\"-h\")) || args.contains(QLatin1String(\"--help\"))) {\n        out << m_description;\n    out << optionsToString(m_rootNode.options, m_rootNode.subNodes);\n        if (args.length() > 1) {\n            err << QStringLiteral(\"The option -h/--help is not compatible with other options.\");\n            ok = false;\n        }\n        return ok;\n    }\n    // process\n    Node* actualNode = &m_rootNode;\n    for (auto it = args.cbegin(); it != args.cend(); ++it) {\n        QString arg = *it;\n        // check if it is an option\n        if (arg.startsWith(QLatin1String(\"-\"))) {\n            ok = processOptions(args, it, actualNode);\n        } else {\n            ok = processArgs(args, it, actualNode);\n        }\n        if (!ok) {\n            break;\n        }\n    }\n    if (!ok) {\n        err << QStringLiteral(\"Try '%1 -h' for more information.\").arg(qApp->applicationName());\n    }\n    return ok;\n}", "CodeBleu_score": 61.00722068876233}, {"code": "bool CommandLineParser::parse(const QStringList& args){\n\t", "CodeBleu_score": 1.6015576757374008}]}
{"instance_id": "2f02436b366f", "generation_result": [{"code": "void ButtonListView::updateComponents(){\n\t    QList<CaptureTool::Type> listTypes = ConfigHandler().getButtons();\n    for (int i = 0; i < this->count(); ++i) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type bType = m_buttonTypeByName[item->text()];\n        if (listTypes.contains(bType)) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 70.86847304147584}, {"code": "void ButtonListView::updateComponents(){\n\t    auto listTypes = ConfigHandler().getButtons();\n    auto listTypesIterable = CaptureToolButton::getIterableButtonTypes();\n\n    for (int i = 0; i < this->count(); ++i) {\n        QListWidgetItem* item = this->item(i);\n        CaptureTool::Type bType = m_buttonTypeByName[item->text()];\n        if (listTypes.contains(bType)) {\n            item->setCheckState(Qt::Checked);\n        } else {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 76.69540945053043}, {"code": "void ButtonListView::updateComponents(){\n\t    // Get the list of button types from the configuration\n    m_listButtons = ConfigHandler().getButtons();\n\n    // Get an iterable list of button types from CaptureToolButton\n    auto listTypes = CaptureToolButton::getIterableButtonTypes();\n\n    // Iterate over the list of button types\n    for (const CaptureTool::Type t : listTypes) {\n        // Get the name of the current button type\n        QString name = CaptureToolButton::getNameByType(t);\n\n        // Find the corresponding item in the list widget\n        QListWidgetItem* item = findItem(name, Qt::MatchExactly);\n\n        // If the item is found and the button type is in the configuration list, set the item's check state to checked\n        if (item && m_listButtons.contains(t)) {\n            item->setCheckState(Qt::Checked);\n        }\n        // If the item is found and the button type is not in the configuration list, set the item's check state to unchecked\n        else if (item) {\n            item->setCheckState(Qt::Unchecked);\n        }\n    }\n}", "CodeBleu_score": 60.88314234576663}]}
{"instance_id": "578e98634572", "generation_result": [{"code": "void ColorPickerEditor::addPreset(){\n\t    QColor color = QColor(m_colorInput->text());\n    if (color.isValid()) {\n        if (m_colorList.contains(color)) {\n            QMessageBox::warning(this,\n                                 tr(\"Color already exists\"),\n                                 tr(\"The color already exists in the preset list.\"));\n            return;\n        }\n\n        if (m_colorList.size() == GlobalValues::userColorCount()) {\n            QMessageBox::warning(this,\n                                 tr(\"Maximum presets reached\"),\n                                 tr(\"The maximum number of presets has been reached.\"));\n            return;\n        }\n\n        m_colorList.append(color);\n        m_config.setUserColors(m_colorList);\n        m_colorpicker->setPresets(m_colorList);\n        m_colorEdit->setText(color.name(QColor::HexRgb));\n    } else {\n        QMessageBox::warning(this,\n                             tr(\"Invalid color\"),\n                             tr(\"The color is not valid.\"));\n    }\n}", "CodeBleu_score": 51.19430955319048}, {"code": "void ColorPickerEditor::addPreset(){\n\t    QColor color = m_colorInput->text();\n    if (color.isValid()) {\n        for (int i = 0; i < m_colorList.size(); i++) {\n            if (color == m_colorList[i]) {\n                QMessageBox::information(\n                  this,\n                  tr(\"Preset already exists\"),\n                  tr(\"This preset already exists in the list\"));\n                return;\n            }\n        }\n        if (m_colorList.size() == 17) {\n            QMessageBox::information(\n              this,\n              tr(\"Preset limit reached\"),\n              tr(\"You have reached the maximum allowed presets\"));\n            return;\n        }\n        m_colorList.append(color);\n        m_config.setUserColors(m_colorList);\n        m_colorpicker->updatePresets(m_colorList);\n        m_colorEdit->setText(m_colorList[m_colorList.size() - 1].name(QColor::HexRgb));\n        m_selectedIndex = m_colorList.size() - 1;\n        m_config.setDrawColor(m_colorList[m_selectedIndex]);\n    }\n}", "CodeBleu_score": 50.76918921663314}, {"code": "void ColorPickerEditor::addPreset(){\n\t    QColor color(m_colorInput->text());\n    if (color.isValid()) {\n        if (m_colorList.contains(color)) {\n            QMessageBox::information(this,\n                                 tr(\\\"Color Already Exists\\\"),\n                                 tr(\\\"The selected color already exists in the preset list.\\\"));\n            return;\n        }\n\n        if (m_colorList.size() >= GlobalValues::s_maxUserColors) {\n            QMessageBox::critical(this,\n                                 tr(\\\"Preset Limit Reached\\\"),\n                                 tr(\\\"The maximum number of presets has been reached.\\\"));\n            return;\n        }\n\n        m_colorList.append(color);\n        m_config.setUserColors(m_colorList);\n    }\n    else {\n        QMessageBox::critical(this,\n                             tr(\\\"Invalid Color\\\"),\n                             tr(\\\"The selected color is invalid.\\\"));\n    }\n}", "CodeBleu_score": 43.89620408819807}]}
{"instance_id": "3f8c1770cd2e", "generation_result": [{"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n  m_layout = new QHBoxLayout(this);\n  m_vLayout = new QVBoxLayout();\n  m_hLayout = new QHBoxLayout();\n  m_layout->setAlignment(Qt::AlignCenter);\n  m_vLayout->setAlignment(Qt::AlignCenter);\n  m_hLayout->setAlignment(Qt::AlignCenter);\n  m_layout->setSpacing(0);\n  m_vLayout->setSpacing(0);\n  m_hLayout->setSpacing(0);\n  m_vLayout->setContentsMargins(0, 0, 0, 0);\n  m_hLayout->setContentsMargins(0, 0, 0, 0);\n  m_layout->setContentsMargins(0, 0, 0, 0);\n  m_vLayout->addSpacing(15);\n  m_hLayout->addSpacing(15);\n  m_layout->addLayout(m_vLayout);\n  m_vLayout->addLayout(m_hLayout);\n  m_vLayout->addSpacing(15);\n  m_hLayout->addSpacing(15);\n  m_layout->addLayout(m_vLayout);\n  setLayout(m_layout);\n  initButtons();\n  initColorWheel();\n  updateComponents();\n}", "CodeBleu_score": 53.14267170193979}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t  setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n  m_vLayout = new QVBoxLayout();\n  m_hLayout = new QHBoxLayout();\n  m_hLayout->setContentsMargins(0, 0, 0, 0);\n  m_vLayout->setAlignment(Qt::AlignCenter);\n  m_vLayout->setSpacing(fontMetrics().height() / 2);\n  m_hLayout->setSpacing(0);\n  m_vLayout->addSpacing(fontMetrics().height());\n  m_hLayout->addLayout(m_vLayout);\n  m_hLayout->addSpacerItem(new QSpacerItem(0, 0, QSizePolicy::Expanding, QSizePolicy::Expanding));\n  setLayout(m_hLayout);\n  initButtons();\n  m_colorWheel = new color_widgets::ColorWheel(this);\n  m_colorWheel->setSizePolicy(QSizePolicy::Expanding, QSizePolicy::Expanding);\n  m_vLayout->addWidget(m_colorWheel);\n  updateComponents();\n}", "CodeBleu_score": 56.82579715012089}, {"code": "UIcolorEditor::UIcolorEditor(QWidget* parent)\n  : QWidget(parent){\n\t", "CodeBleu_score": 8.500866798722518}]}
{"instance_id": "ad86ef280917", "generation_result": [{"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    bool ok = true;\n    QPixmap p(ScreenGrabber().grabEntireDesktop(ok));\n    if (ok) {\n        QRect geometry = ScreenGrabber().desktopGeometry();\n        QRect region = req.initialSelection();\n        if (region.isNull()) {\n            region = geometry;\n        } else {\n            p = p.copy(region);\n        }\n        if (req.tasks() & CaptureRequest::PIN) {\n            // change geometry for pin task\n            req.addPinTask(region);\n        }\n        exportCapture(p, geometry, req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 80.5921774073075}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    bool ok = true;\n    QPixmap p(ScreenGrabber().grabEntireDesktop(ok));\n    if (ok) {\n        QRect geometry = ScreenGrabber().desktopGeometry();\n        QRect region = req.initialSelection();\n        if (region.isNull()) {\n            region = geometry;\n        } else {\n            region = region.intersected(geometry);\n            p = p.copy(region);\n        }\n        if (req.tasks() & CaptureRequest::PIN) {\n            // change geometry for pin task\n            req.addPinTask(region);\n        }\n        exportCapture(p, geometry, req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 78.134649213024}, {"code": "void Flameshot::full(const CaptureRequest& req){\n\t    if (!resolveAnyConfigErrors()) {\n        return;\n    }\n\n    bool ok = true;\n    QPixmap p(ScreenGrabber().grabEntireDesktop(ok));\n    if (ok) {\n        QRect geometry = ScreenGrabber().desktopGeometry();\n        QRect region = req.initialSelection();\n        if (region.isNull()) {\n            region = ScreenGrabber().desktopGeometry();\n        } else {\n            p = p.copy(region);\n        }\n        if (req.tasks() & CaptureRequest::PIN) {\n            // change geometry for pin task\n            req.addPinTask(region);\n        }\n        exportCapture(p, geometry, req);\n    } else {\n        emit captureFailed();\n    }\n}", "CodeBleu_score": 81.51283766674709}]}
{"instance_id": "42abe47d0da0", "generation_result": [{"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n        return;\n    }\n\n    QByteArray data;\n    QDataStream stream(&data, QIODevice::WriteOnly);\n    stream << capture;\n    QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n    m << data;\n    call(m);\n}", "CodeBleu_score": 89.64146214592199}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n        return;\n    }\n\n    QByteArray data;\n    QDataStream stream(&data, QIODevice::WriteOnly);\n    stream << capture;\n    QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n    m << data;\n    call(m);\n}", "CodeBleu_score": 89.64146214592199}, {"code": "void FlameshotDaemon::copyToClipboard(const QPixmap& capture){\n\t    if (instance()) {\n        instance()->attachScreenshotToClipboard(capture);\n        return;\n    }\n\n    QByteArray data;\n    QDataStream stream(&data, QIODevice::WriteOnly);\n    stream << capture;\n    QDBusMessage m = createMethodCall(QStringLiteral(\"attachScreenshotToClipboard\"));\n    m << data;\n    call(m);\n}", "CodeBleu_score": 89.64146214592199}]}
{"instance_id": "4276c0025e1f", "generation_result": [{"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    // This variable is necessary because the signal doesn't get blocked on\n    // windows for some reason\n    m_clipboardSignalBlocked = true;\n    saveToClipboard(text);\n    clipboard->blockSignals(false);\n\n    if (!notification.isEmpty()) {\n        // Log notification\n        qDebug() << \"Saved text to clipboard.\";\n        if (ConfigHandler().showDesktopNotification()) {\n            sendTrayNotification(notification,\n                                QStringLiteral(\"Flameshot Info\"),\n                                QStringLiteral(\"flameshot\"),\n                                1000);\n        }\n    }\n}", "CodeBleu_score": 69.0731768366323}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    // This variable is necessary because the signal doesn't get blocked on\n    // windows for some reason\n    m_clipboardSignalBlocked = true;\n    if (!notification.isEmpty()) {\n        qDebug() << \"Copying text to clipboard...\";\n    }\n    clipboard->setText(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 81.18278526916612}, {"code": "void FlameshotDaemon::attachTextToClipboard(const QString& text,\n                                            const QString& notification){\n\t    m_hostingClipboard = true;\n    QClipboard* clipboard = QApplication::clipboard();\n    clipboard->blockSignals(true);\n    m_clipboardSignalBlocked = true;\n    if (!notification.isEmpty()) {\n        sendTrayNotification(notification, tr(\"Text copied to clipboard\"), 5000);\n    }\n    clipboard->setText(text);\n    clipboard->blockSignals(false);\n}", "CodeBleu_score": 82.10186533485913}]}
{"instance_id": "ef69a941bff6", "generation_result": [{"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    emit requestAction(REQ_CAPTURE_DONE);\n    emit requestAction(REQ_ADD_EXTERNAL_WIDGETS);\n    emit requestAction(REQ_CLOSE_GUI);\n}", "CodeBleu_score": 20.973918853512767}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    // \u53d1\u9001\u622a\u56fe\u5b8c\u6210\u4fe1\u53f7\n    emit requestAction(REQ_CAPTURE_DONE_OK);\n\n    // \u5982\u679c\u622a\u56fe\u4efb\u52a1\u5305\u542bPIN\u4efb\u52a1\uff0c\u5219\u8c03\u6574\u9009\u62e9\u533a\u57df\u5e76\u6dfb\u52a0PIN\u4efb\u52a1\n    if (context.tasks.contains(PIN_TASK)) {\n        // \u83b7\u53d6\u7a97\u53e3\u504f\u79fb\u91cf\n        const auto widgetOffset = context.widgetOffset;\n\n        // \u8c03\u6574\u9009\u62e9\u533a\u57df\n        context.selection += widgetOffset;\n\n        // \u6dfb\u52a0PIN\u4efb\u52a1\n        context.tasks.append(PIN_TASK);\n    }\n\n    // \u53d1\u9001\u5173\u95edGUI\u8bf7\u6c42\n    emit requestAction(REQ_CLOSE_GUI);\n}", "CodeBleu_score": 55.61463526395822}, {"code": "void AcceptTool::pressed(CaptureContext& context){\n\t    emit requestAction(REQ_CAPTURE_DONE);\n    if (context.tasks.contains(PIN_TASK)) {\n        context.tasks.removeAll(PIN_TASK);\n        QVector<QRect> rects = context.selectedScreens;\n        QRect widgetRect = context.widget->rect();\n        for (QRect& rect : rects) {\n            rect.setX(rect.x() - widgetRect.x());\n            rect.setY(rect.y() - widgetRect.y());\n        }\n        context.tasks.append({ PIN_TASK, rects });\n    }\n    emit requestAction(REQ_CLOSE_GUI);\n}", "CodeBleu_score": 56.60268954579066}]}
{"instance_id": "954477282486", "generation_result": [{"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    int oldSize = m_appList.size();\n\n    QStringList filters;\n    filters << QStringLiteral(\"*.desktop\");\n    QFileInfoList fileInfoList = dir.entryInfoList(filters, QDir::Files);\n\n    for (const QFileInfo& fileInfo : fileInfoList) {\n        if (fileInfo.fileName().startsWith(QLatin1String(\".\"))) {\n            continue;\n        }\n\n        DesktopAppData appData;\n        bool ok = parseDesktopFile(fileInfo.absoluteFilePath(), appData);\n        if (ok) {\n            m_appList.append(appData);\n        }\n    }\n\n    return m_appList.size() - oldSize;\n}", "CodeBleu_score": 52.84509143620386}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    int oldAppListSize = m_appList.size();\n    QStringList files = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"));\n    for (const QString& file : files) {\n        if (file.startsWith(QLatin1Char('.'))) {\n            continue;\n        }\n        bool ok = false;\n        DesktopAppData appData = parseDesktopFile(dir.absoluteFilePath(file), ok);\n        if (ok) {\n            m_appList.append(appData);\n        }\n    }\n    return m_appList.size() - oldAppListSize;\n}", "CodeBleu_score": 64.22372477902111}, {"code": "int DesktopFileParser::processDirectory(const QDir& dir){\n\t    int oldLength = m_list.size();\n    QStringList entries = dir.entryList(QStringList() << QStringLiteral(\"*.desktop\"));\n    for (const QString& fileName : entries) {\n        if (fileName.startsWith(QLatin1String(\".\"))) {\n            continue;\n        }\n        bool ok = false;\n        DesktopAppData appData = parseDesktopFile(dir.absoluteFilePath(fileName), ok);\n        if (ok) {\n            m_list.append(appData);\n        }\n    }\n    return m_list.size() - oldLength;\n}", "CodeBleu_score": 61.62079851394113}]}
{"instance_id": "e17fc5c9d6d0", "generation_result": [{"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t    QMap<QString, QVector<DesktopAppData>> res;\n    for (const DesktopAppData& app : qAsConst(m_appList)) {\n        for (const QString& category : categories) {\n            if (app.categories.contains(category)) {\n                res[category].append(app);\n            }\n        }\n    }\n    return res;\n}", "CodeBleu_score": 99.81554482702538}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t    QMap<QString, QVector<DesktopAppData>> result;\n    for (const DesktopAppData& app : m_appList) {\n        for (const QString& category : categories) {\n            if (app.categories.contains(category)) {\n                result[category].append(app);\n            }\n        }\n    }\n    return result;\n}", "CodeBleu_score": 86.72404675085677}, {"code": "QMap<QString, QVector<DesktopAppData>> DesktopFileParser::getAppsByCategory(\n  const QStringList& categories){\n\t    QMap<QString, QVector<DesktopAppData>> res;\n    for (const QString& category : categories) {\n        res[category] = QVector<DesktopAppData>();\n    }\n    for (const DesktopAppData& app : qAsConst(m_appList)) {\n        for (const QString& category : categories) {\n            if (app.categories.contains(category)) {\n                res[category].append(app);\n            }\n        }\n    }\n    return res;\n}", "CodeBleu_score": 91.69809141661423}]}
{"instance_id": "1e9cb2fcafe5", "generation_result": [{"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t    QString completePath = properScreenshotPath(path);\n    QFile file(completePath);\n    if (!file.open(QIODevice::WriteOnly)) {\n        QString msg = QObject::tr(\"Flameshot couldn't save the screenshot\");\n        if (messagePrefix != \"\") {\n            msg = messagePrefix + \" \" + msg;\n        }\n        msg += \":\n\" + file.errorString();\n        FlameshotDaemon::instance()->showTrayNotification(msg,\n                                                          QStringLiteral(\"flameshot\"),\n                                                          QStringLiteral(\"save\"));\n        qWarning() << msg;\n        return false;\n    }\n    QByteArray byteArray;\n    QBuffer buffer(&byteArray);\n    buffer.open(QIODevice::WriteOnly);\n    QString format = \"PNG\";\n    QString filename = completePath;\n    QStringList parts = filename.split(\".\");\n    QString lastPart = parts.last();\n    if (lastPart.toUpper() == \"PNG\") {\n        capture.save(&buffer, \"PNG\");\n    } else if (lastPart.toUpper() == \"JPG\" || lastPart.toUpper() == \"JPEG\") {\n        capture.save(&buffer, \"JPG\", 90);\n    } else {\n        capture.save(&buffer, \"PNG\");\n        format = \"PNG\";\n    }\n    file.write(byteArray);\n    file.close();\n    QString msg = messagePrefix + \" \" + QObject::tr(\"Capture saved as\") + \" \" + completePath;\n    FlameshotDaemon::instance()->showTrayNotification(msg,\n                                                      QStringLiteral(\"flameshot\"),\n                                                      QStringLiteral(\"save\"));\n    qInfo() << msg;\n    return true;\n}", "CodeBleu_score": 44.749655318085566}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t    QString completePath = properScreenshotPath(path);\n    QFile file(completePath);\n    file.open(QIODevice::WriteOnly);\n    QByteArray byteArray;\n    QBuffer buffer(&byteArray);\n    buffer.open(QIODevice::WriteOnly);\n    QString format = \"png\";\n    if (path.endsWith(\".jpg\", Qt::CaseInsensitive)) {\n        format = \"jpg\";\n    }\n    capture.save(&buffer, format.toUpper().toLatin1().constData(), 95);\n    file.write(byteArray);\n    file.close();\n    QString saveMessage = messagePrefix + completePath;\n    if (file.error() == QFile::NoError) {\n        LOG(INFO) << saveMessage << \" SUCCESS\";\n        return true;\n    } else {\n        LOG(ERROR) << saveMessage << \" FAIL: \" << file.errorString();\n        return false;\n    }\n}", "CodeBleu_score": 36.59674739491449}, {"code": "bool saveToFilesystem(const QPixmap& capture,\n                      const QString& path,\n                      const QString& messagePrefix){\n\t    QString completePath = properScreenshotPath(path);\n    QFile file(completePath);\n    if (!file.open(QIODevice::WriteOnly)) {\n        qWarning() << \"Save to filesystem: error opening file \" << file.fileName();\n        return false;\n    }\n    QByteArray byteArray;\n    QBuffer buffer(&byteArray);\n    buffer.open(QIODevice::WriteOnly);\n    QString format = \"PNG\";\n    if (completePath.endsWith(\".jpg\", Qt::CaseInsensitive)) {\n        format = \"JPG\";\n    }\n    capture.save(&buffer, format.toLocal8Bit().constData(), 90);\n    file.write(byteArray);\n    file.close();\n    QString saveMessage = messagePrefix + \" \" + completePath;\n    if (file.error() == QFile::NoError) {\n        FlameshotDaemon::instance()->info(saveMessage);\n        return true;\n    } else {\n        QString errorMessage = QObject::tr(\"Error from write: \") + file.errorString();\n        FlameshotDaemon::instance()->error(saveMessage + \"\n\" + errorMessage);\n        return false;\n    }\n}", "CodeBleu_score": 43.981022686805105}]}
{"instance_id": "ba67f6b4e974", "generation_result": [{"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\n\tfor (const auto &modpack_id : load_order) {\n\t\tauto info = this->available.at(modpack_id);\n\t\tthis->active.emplace(modpack_id, info);\n\t\tlog::log(MSG(info) << \"Activated modpack: \" << info.id);\n\t}\n}", "CodeBleu_score": 65.14401829341769}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (auto &modpack_id : load_order) {\n\t\tauto &modpack = this->available.at(modpack_id);\n\t\tthis->active.emplace(modpack.id, modpack);\n\t\tlog::log(MSG(info) << \"Activating modpack: \" << modpack.id);\n\t}}", "CodeBleu_score": 58.51718428778903}, {"code": "void ModManager::activate_modpacks(const std::vector<std::string> &load_order) {\n\t\tthis->active.clear();\n\tfor (auto &modpack_id : load_order) {\n\t\tauto &modpack = this->available.at(modpack_id);\n\t\tmodpack.activate(*this);\n\t\tlog::log(MSG(info) << \"Activated modpack \" << modpack.id);\n\t}\n}", "CodeBleu_score": 56.760742855400835}]}
{"instance_id": "da92dbc3907b", "generation_result": [{"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::unordered_set<std::string> requested_modpacks(load_order.begin(), load_order.end());\n\tstd::unordered_set<std::string> available_modpacks;\n\tfor (const auto &[modpack_id, modpack] : this->available) {\n\t\tavailable_modpacks.insert(modpack_id);\n\t\tif (!requested_modpacks.contains(modpack_id)) {\n\t\t\tcontinue;\n\t\t}\n\t\tfor (const auto &dependency : modpack.dependencies) {\n\t\t\tif (!available_modpacks.contains(dependency)) {\n\t\t\t\tthrow Error(MSG(err) << \"Requested modpack \\\"\" << modpack_id << \"\\\" has unsatisfied dependency \\\"\" << dependency << \"\\\"\");\n\t\t\t}\n\t\t}\n\t\tfor (const auto &conflict : modpack.conflicts) {\n\t\t\tif (available_modpacks.contains(conflict)) {\n\t\t\t\tthrow Error(MSG(err) << \"Requested modpack \\\"\" << modpack_id << \"\\\" conflicts with \\\"\" << conflict << \"\\\"\");\n\t\t\t}\n\t\t}\n\t}\n\tfor (const auto &modpack_id : load_order) {\n\t\tif (!available_modpacks.contains(modpack_id)) {\n\t\t\tthrow Error(MSG(err) << \"Requested modpack \\\"\" << modpack_id << \"\\\" is not available\");\n\t\t}\n\t}\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 59.64325965068578}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::unordered_set<std::string> requested_modpacks(load_order.begin(), load_order.end());\n\tfor (const auto &modpack_id : requested_modpacks) {\n\t\tif (this->available.find(modpack_id) == this->available.end()) {\n\t\t\tthrow Error(MSG(err) << \\\"Requested modpack is not available: \\\" << modpack_id);\n\t\t}\n\n\t\tauto &modpack = this->available.at(modpack_id);\n\t\tfor (const auto &dependency : modpack.dependencies) {\n\t\t\tif (requested_modpacks.find(dependency) == requested_modpacks.end()) {\n\t\t\t\tthrow Error(MSG(err) << \\\"Modpack \\\" << modpack_id << \\\" requires modpack \\\" << dependency << \\\" to be loaded.\\\");\n\t\t\t}\n\t\t}\n\n\t\tfor (const auto &conflict : modpack.conflicts) {\n\t\t\tif (requested_modpacks.find(conflict) != requested_modpacks.end()) {\n\t\t\t\tthrow Error(MSG(err) << \\\"Modpack \\\" << modpack_id << \\\" conflicts with modpack \\\" << conflict << \\\".\\\");\n\t\t\t}\n\t\t}\n\t}\n\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 57.61104708358702}, {"code": "void ModManager::set_load_order(const std::vector<std::string> &load_order) {\n\t\tstd::unordered_set<std::string> requested_modpacks(load_order.begin(), load_order.end());\n\n\tfor (const auto &modpack_id : requested_modpacks) {\n\t\tif (!this->available.contains(modpack_id)) {\n\t\t\tthrow Error(MSG(err) << \\\"Requested modpack is not available: \\\" << modpack_id);\n\t\t}\n\n\t\tauto &modpack = this->available.at(modpack_id);\n\n\t\tfor (const auto &dependency_id : modpack.dependencies) {\n\t\t\tif (!this->available.contains(dependency_id)) {\n\t\t\t\tthrow Error(MSG(err) << \\\"Modpack dependency is not available: \\\" << dependency_id);\n\t\t\t}\n\t\t}\n\n\t\tfor (const auto &conflict_id : modpack.conflicts) {\n\t\t\tif (requested_modpacks.contains(conflict_id)) {\n\t\t\t\tthrow Error(MSG(err) << \\\"Modpack conflict detected: \\\" << conflict_id);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis->load_order = load_order;\n}", "CodeBleu_score": 56.791861668986286}]}
{"instance_id": "103e298ff430", "generation_result": [{"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not this->available) {\n\t\tthrow Error{MSG(err) << \"Audio resources are not available!\"};\n\t}\n\n\tfor (const auto &sound_file : sound_files) {\n\t\tauto key = std::make_pair(sound_file.category, sound_file.id);\n\t\tif (this->resources.find(key) != this->resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto resource = std::make_shared<Resource>(sound_file, this->device_format);\n\t\tthis->resources.insert({key, resource});\n\t}\n}", "CodeBleu_score": 73.32420277466466}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not this->available) {\n\t\treturn;\n\t}\n\n\tfor (auto &sound_file : sound_files) {\n\t\tauto key = std::make_pair(sound_file.category, sound_file.id);\n\n\t\tif (this->resources.find(key) != this->resources.end()) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto resource = std::make_shared<Resource>(sound_file.path);\n\t\tthis->resources.insert({key, resource});\n\t}\n}", "CodeBleu_score": 81.64573033688069}, {"code": "void AudioManager::load_resources(const std::vector<resource_def> &sound_files){\n\t\tif (not this->available) {\n\t\tlog::log(MSG(warn) << \\\"Audio device is not available!\\\");\n\t\treturn;\n\t}\n\n\tfor (auto &sound_file : sound_files) {\n\t\tauto key = hash_combine(sound_file.category, sound_file.id);\n\n\t\tif (this->resources.contains(key)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tauto resource = std::make_shared<Resource>(sound_file.path, this->job_manager);\n\t\tthis->resources.insert({key, resource});\n\t}\n}", "CodeBleu_score": 69.2858877537473}]}
{"instance_id": "700caeffaaac", "generation_result": [{"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow Error{MSG(err) << \"Audio manager is not available!\"};\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\n\tif (this->resources.find(key) == std::end(this->resources)) {\n\t\tthrow Error{MSG(err) << \"Sound resource does not exist!\"};\n\t}\n\n\tauto resource = this->resources.at(key);\n\n\treturn Sound{this->shared_from_this(), std::make_shared<SoundImpl>(resource)};\n}", "CodeBleu_score": 49.69352377167038}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow Error{MSG(err) << \"Audio manager is not available.\"};\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\n\tif (this->resources.find(key) == std::end(this->resources)) {\n\t\tthrow Error{MSG(err) << \"Sound resource does not exist.\"};\n\t}\n\n\tauto resource = this->resources.at(key);\n\tauto sound_impl = std::make_shared<SoundImpl>(resource);\n\treturn Sound{this->shared_from_this(), sound_impl};\n}", "CodeBleu_score": 54.48742454423583}, {"code": "Sound AudioManager::get_sound(category_t category, int id){\n\t\tif (not this->available) {\n\t\tthrow Error(MSG(err) << \"AudioManager is not available!\");\n\t}\n\n\tauto key = std::make_tuple(category, id);\n\n\tif (this->resources.find(key) == std::end(this->resources)) {\n\t\tthrow Error(MSG(err) << \"Sound resource does not exist!\");\n\t}\n\n\tauto resource = this->resources.at(key);\n\treturn Sound{this, resource};\n}", "CodeBleu_score": 48.39299093300897}]}
{"instance_id": "2a0c1f0acd9f", "generation_result": [{"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tif (not this->available) {\n\t\treturn;\n\t}\n\n\tauto category = sound->get_category();\n\tauto &playing_list = this->playing_sounds[category];\n\n\t// TODO: check if sound already exists in playing list\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 77.71442673639304}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tif (not this->available) {\n\t\treturn;\n\t}\n\n\tauto category = sound->get_category();\n\tauto &playing_list = this->playing_sounds.at(category);\n\n\t// TODO: check if sound already exists in playing list\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 79.3444724269889}, {"code": "void AudioManager::add_sound(const std::shared_ptr<SoundImpl> &sound){\n\t\tif (not this->available) {\n\t\treturn;\n\t}\n\n\tauto category = sound->get_category();\n\tauto &playing_list = this->playing_sounds[category];\n\tplaying_list.push_back(sound);\n}", "CodeBleu_score": 77.71442673639304}]}
{"instance_id": "2c5f1f9b99b3", "generation_result": [{"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\n\tif (this->state != ClockState::RUNNING) {\n\t\treturn;\n\t}\n\n\tauto now = simclock_t::now();\n\tauto elapsed_time = now - this->last_check;\n\n\tif (elapsed_time.count() == 0) {\n\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\treturn;\n\t}\n\n\tif (elapsed_time.count() > this->max_tick_time) {\n\t\telapsed_time = std::chrono::duration_cast<simclock_t::duration>(std::chrono::duration<int64_t, std::milli>(this->max_tick_time));\n\t}\n\n\tthis->sim_time += std::chrono::duration_cast<std::chrono::duration<int64_t, std::milli>>(elapsed_time * this->speed);\n\tthis->sim_real_time += elapsed_time;\n\tthis->last_check = now;\n}", "CodeBleu_score": 63.65017689116335}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\tif (this->state == ClockState::RUNNING) {\n\t\tauto now = simclock_t::now();\n\t\tauto elapsed = now - this->last_check;\n\n\t\tif (elapsed.count() == 0) {\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\t\telapsed = simclock_t::now() - this->last_check;\n\t\t}\n\n\t\tif (elapsed.count() > this->max_tick_time) {\n\t\t\telapsed = std::chrono::duration_cast<std::chrono::duration<int64_t, std::milli>>(std::chrono::milliseconds(this->max_tick_time));\n\t\t}\n\n\t\tauto sim_elapsed = std::chrono::duration_cast<std::chrono::duration<int64_t, std::milli>>(elapsed * this->speed);\n\n\t\tthis->sim_time += sim_elapsed;\n\t\tthis->sim_real_time += elapsed;\n\t\tthis->last_check = now;\n\t}\n}", "CodeBleu_score": 64.84784269863019}, {"code": "void Clock::update_time(){\n\t\tstd::unique_lock lock{this->mutex};\n\tif (this->state == ClockState::RUNNING) {\n\t\tauto now = simclock_t::now();\n\t\tauto elapsed_time = now - this->last_check;\n\t\tif (elapsed_time.count() == 0) {\n\t\t\tstd::this_thread::sleep_for(std::chrono::milliseconds(1));\n\t\t\treturn;\n\t\t}\n\t\tif (elapsed_time.count() > this->max_tick_time) {\n\t\t\telapsed_time = std::chrono::duration_cast<simclock_t::duration>(std::chrono::duration<float, std::milli>(this->max_tick_time));\n\t\t}\n\t\tthis->sim_time += std::chrono::duration_cast<std::chrono::milliseconds>(elapsed_time * this->speed);\n\t\tthis->sim_real_time += std::chrono::duration_cast<std::chrono::milliseconds>(elapsed_time);\n\t\tthis->last_check = now;\n\t}\n}", "CodeBleu_score": 66.8214081520749}]}
{"instance_id": "c660f2541c89", "generation_result": [{"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = this->scene_pos[1] - scene_pos[1];\n\tfloat xz_distance = std::sqrt(std::pow(this->scene_pos[0] - scene_pos[0], 2) + std::pow(this->scene_pos[2] - scene_pos[2], 2));\n\tfloat x_delta = xz_distance * std::sin(std::atan(y_delta / xz_distance));\n\tfloat z_delta = xz_distance * std::cos(std::atan(y_delta / xz_distance));\n\tEigen::Vector3f new_pos = Eigen::Vector3f(this->scene_pos[0] - x_delta, this->scene_pos[1], this->scene_pos[2] - z_delta);\n\tthis->move(new_pos);\n}", "CodeBleu_score": 52.42290539324295}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = this->scene_pos[1] - scene_pos[1];\n\tfloat xz_distance = std::sqrt(std::pow(this->scene_pos[0] - scene_pos[0], 2) + std::pow(this->scene_pos[2] - scene_pos[2], 2));\n\tthis->scene_pos[0] = this->scene_pos[0] - xz_distance;\n\tthis->scene_pos[1] = this->scene_pos[1] + y_delta;\n\tthis->scene_pos[2] = this->scene_pos[2] - xz_distance;\n\tthis->move_to(this->scene_pos);\n}", "CodeBleu_score": 46.18448931849564}, {"code": "void Camera::look_at_scene(Eigen::Vector3f scene_pos){\n\t\tfloat y_delta = this->scene_pos[1] - scene_pos[1];\n\tfloat xz_distance = std::sqrt(std::pow(this->scene_pos[0] - scene_pos[0], 2) + std::pow(this->scene_pos[2] - scene_pos[2], 2));\n\tfloat x_delta = xz_distance * std::sin(std::atan(y_delta / xz_distance));\n\tfloat z_delta = xz_distance * std::cos(std::atan(y_delta / xz_distance));\n\tEigen::Vector3f new_scene_pos = this->scene_pos;\n\tnew_scene_pos[0] -= x_delta;\n\tnew_scene_pos[2] -= z_delta;\n\tthis->move_to(new_scene_pos);\n}", "CodeBleu_score": 52.03827483514403}]}
{"instance_id": "3b2d44963495", "generation_result": [{"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n\n    if (url.isLocalFile()) {\n        QString filePath = url.toLocalFile();\n        QString fileType = QFileInfo(filePath).suffix().toLower();\n\n        if (fileType == \"sf2\" || fileType == \"sf3\") {\n            return DragTarget::SoundFont;\n        }\n\n        if (extensionInstaller()->isFileSupported(filePath)) {\n            return DragTarget::Extension;\n        }\n    }\n\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 78.10357903932493}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n\n    if (url.isLocalFile()) {\n        const QString filePath = url.toLocalFile();\n        const QString fileType = io::syffix(filePath);\n\n        if (fileType == audio::SYM_SF2) {\n            return DragTarget::SoundFont;\n        }\n\n        if (extensionInstaller()->isSupported(filePath)) {\n            return DragTarget::Extension;\n        }\n    }\n\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 77.7170134977975}, {"code": "ApplicationActionController::DragTarget ApplicationActionController::dragTarget(const QUrl& url) const{\n\t    if (projectFilesController()->isUrlSupported(url)) {\n        return DragTarget::ProjectFile;\n    }\n\n    if (url.isLocalFile()) {\n        QString filePath = url.toLocalFile();\n        QString fileType = io::syffix(filePath);\n\n        if (fileType == audio::SYM_SF2) {\n            return DragTarget::SoundFont;\n        }\n\n        if (extensionInstaller()->isFileSupported(filePath)) {\n            return DragTarget::Extension;\n        }\n    }\n\n    return DragTarget::Unknown;\n}", "CodeBleu_score": 79.6810969775493}]}
{"instance_id": "81a3cd2e265e", "generation_result": [{"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    std::vector<muse::io::path_t> projects = configuration()->sessionProjectsPaths();\n    if (projects.empty()) {\n        return;\n    }\n\n    auto it = std::find(projects.begin(), projects.end(), projectPath);\n    if (it != projects.end()) {\n        projects.erase(it);\n        configuration()->setSessionProjectsPaths(projects);\n    }\n}", "CodeBleu_score": 78.35943180629694}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    io::paths_t projects = configuration()->sessionProjectsPaths();\n    if (projects.empty()) {\n        return;\n    }\n\n    projects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n    configuration()->setSessionProjectsPaths(projects);\n}", "CodeBleu_score": 99.70284049177205}, {"code": "void SessionsManager::removeProjectFromSession(const muse::io::path_t& projectPath){\n\t    io::paths_t projects = configuration()->sessionProjectsPaths();\n    if (projects.empty()) {\n        return;\n    }\n\n    projects.erase(std::remove(projects.begin(), projects.end(), projectPath), projects.end());\n    configuration()->setSessionProjectsPaths(projects);\n}", "CodeBleu_score": 99.70284049177205}]}
{"instance_id": "98a514c0b62f", "generation_result": [{"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n\n    for (const ThemeInfo& theme: allThemes()) {\n        if (theme.codeKey == HIGH_CONTRAST_WHITE_THEME_CODE || theme.codeKey == HIGH_CONTRAST_BLACK_THEME_CODE) {\n            result << ThemeConverter::toMap(theme);\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 96.00312735625933}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n\n    for (const ThemeInfo& theme : allThemes()) {\n        if (theme.codeKey == HIGH_CONTRAST_WHITE_THEME_CODE || theme.codeKey == HIGH_CONTRAST_BLACK_THEME_CODE) {\n            result << ThemeConverter::toMap(theme);\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 99.61977592754579}, {"code": "QVariantList AppearancePreferencesModel::highContrastThemes() const{\n\t    QVariantList result;\n\n    for (const ThemeInfo& theme: allThemes()) {\n        if (theme.codeKey == HIGH_CONTRAST_WHITE_THEME_CODE || theme.codeKey == HIGH_CONTRAST_BLACK_THEME_CODE) {\n            result << ThemeConverter::toMap(theme);\n        }\n    }\n\n    return result;\n}", "CodeBleu_score": 96.00312735625933}]}
{"instance_id": "ceff09bc116b", "generation_result": [{"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n\n    std::function<void(const PreferencePageItem*)> childPages = [&result, &childPages](const PreferencePageItem* parent) {\n        for (const PreferencePageItem* child: parent->childrenItems()) {\n            QVariantMap obj;\n            obj[\"id\"] = child->id();\n            obj[\"path\"] = child->path();\n            result << obj;\n\n            childPages(child);\n        }\n    };\n\n    childPages(m_rootItem);\n\n    return result;\n}", "CodeBleu_score": 47.68702402177711}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n\n    std::function<void(PreferencePageItem*)> childPages = [&result, &childPages](PreferencePageItem* item) {\n        for (PreferencePageItem* child: item->childrenItems()) {\n            QVariantMap childPage;\n            childPage[\"id\"] = child->id();\n            childPage[\"path\"] = child->path();\n            result << childPage;\n            childPages(child);\n        }\n    };\n\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 45.858257790065935}, {"code": "QVariantList PreferencesModel::availablePages() const{\n\t    QVariantList result;\n\n    std::function<void(const PreferencePageItem*)> childPages;\n    childPages = [&result, &childPages](const PreferencePageItem* parent) {\n        for (PreferencePageItem* child : parent->childrenItems()) {\n            QVariantMap page;\n            page[\"id\"] = child->id();\n            page[\"path\"] = child->path();\n            result << page;\n            childPages(child);\n        }\n    };\n\n    childPages(m_rootItem);\n    return result;\n}", "CodeBleu_score": 49.562294409475115}]}
{"instance_id": "88e5ca72d3e0", "generation_result": [{"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList items;\n    std::vector<io::path> recentScorePaths = recentFilesController()->recentScorePaths();\n\n    for (const io::path& path : recentScorePaths) {\n        MenuItem* item = makeMenuItem();\n        item->setId(item->makeId());\n        item->setArgs(ActionData::make_arg1<io::path>(path));\n        item->setEnabled(true);\n        item->setSelectable(true);\n\n        if (cloud::isCloudProject(path)) {\n            item->setIcon(cloudProjectIcon());\n        }\n\n        items << item;\n    }\n\n    return items;\n}", "CodeBleu_score": 34.74823133820655}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList items;\n    RecentFiles recentFiles = recentFilesProvider()->recentFilesList();\n\n    for (const RecentFile& file : recentFiles) {\n        MenuItem* item = new MenuItem(this);\n        item->setId(QString(\"recent_file_%1\").arg(file.name));\n        item->setArgs(ActionData::make_arg1<QString>(file.url.toString()));\n        item->setAction(file.url.isLocalFile() ? \"file-open\" : \"cloud-open\");\n        item->setIcon(file.url.isLocalFile() ? IconCode::Code::NONE : IconCode::Code::FILE_OPEN_CLOUD);\n        item->setTitle(file.displayName);\n        item->setEnabled(true);\n        item->setSelectable(true);\n        items << item;\n    }\n\n    return items;\n}", "CodeBleu_score": 45.48047173607949}, {"code": "MenuItemList AppMenuModel::makeRecentScoresItems(){\n\t    MenuItemList items;\n    std::vector<io::path> recentScorePaths = recentFilesController()->recentFilesList();\n\n    for (const io::path& path : recentScorePaths) {\n        MenuItem* item = makeMenuItem();\n        item->id = makeActionCode(path.toQString());\n        item->title = io::filename(path);\n        item->args = ActionData::make_arg1<io::path>(path);\n        item->enabled = true;\n        item->selectable = true;\n\n        if (cloud::isCloudProject(path)) {\n            item->icon = IconCode::Code::CLOUD;\n        }\n\n        items << item;\n    }\n\n    return items;\n}", "CodeBleu_score": 37.28910924490074}]}
{"instance_id": "855288a783a5", "generation_result": [{"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (!navigationController()->isStarted()) {\n        saveMUNavigationSystemState();\n    }\n\n    if (isMenuOpened() && menuId == openedMenuId()) {\n        return;\n    }\n\n    if (!byHover && isMenuOpened()) {\n        restoreMUNavigationSystemState();\n    }\n\n    if (navigationController()->isStarted()) {\n        navigationController()->setHighlight(true);\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 55.02530637306943}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (navigationController()->isStarted()) {\n        if (!byHover && isMenuOpened()) {\n            return;\n        }\n\n        if (navigationController()->isStarted()) {\n            if (isMenuOpened()) {\n                restoreMUNavigationSystemState();\n            } else {\n                saveMUNavigationSystemState();\n            }\n        }\n\n        navigationController()->setHighlightedMenuId(menuId);\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 57.391956724804274}, {"code": "void NavigableAppMenuModel::openMenu(const QString& menuId, bool byHover){\n\t    if (!navigationController()->isNavigationStarted()) {\n        saveMUNavigationSystemState();\n    }\n\n    if (isMenuOpened()) {\n        return;\n    }\n\n    if (!byHover && !isMenuOpened()) {\n        if (navigationController()->isNavigationStarted()) {\n            navigationController()->setHighlightedMenuId(menuId);\n        } else {\n            restoreMUNavigationSystemState();\n        }\n    }\n\n    emit requestOpenMenu(menuId, byHover);\n}", "CodeBleu_score": 62.85096225180222}]}
{"instance_id": "d31bdc9d40b6", "generation_result": [{"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    ViewMode currentViewMode = notation() ? notation()->viewMode() : ViewMode::PAGE;\n\n    for (const auto& item : ALL_MODE_MAP) {\n        if (item.first == currentViewMode) {\n            MenuItem* menuItem = makeMenuItem(item.second);\n\n            if (item.first == ViewMode::LINE || item.first == ViewMode::SYSTEM) {\n                menuItem->setTitle(qtrc(\"appshell\", \"Continuous view\"));\n            }\n\n            return QVariant::fromValue(menuItem);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 62.265485852743474}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    ViewMode currentViewMode = ViewMode::PAGE;\n    if (notation()) {\n        currentViewMode = notation()->viewMode();\n    }\n\n    for (const auto& item : ALL_MODE_MAP) {\n        if (item.first == currentViewMode) {\n            MenuItem* menuItem = makeMenuItem(item.second);\n            if (item.first == ViewMode::LINE || item.first == ViewMode::SYSTEM) {\n                menuItem->setTitle(TranslatableString::untranslatable(\"Continuous view\"));\n            }\n            return QVariant::fromValue(menuItem);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 56.810754759086734}, {"code": "QVariant NotationStatusBarModel::currentViewMode(){\n\t    ViewMode currentViewMode = ViewMode::PAGE;\n    if (notation()) {\n        currentViewMode = notation()->viewMode();\n    }\n\n    for (const auto& item : ALL_MODE_MAP.keys()) {\n        if (item == currentViewMode) {\n            MenuItem* menuItem = makeMenuItem(ALL_MODE_MAP.value(item));\n            if (item == ViewMode::LINE || item == ViewMode::SYSTEM) {\n                menuItem->setTitle(qtrc(\"appshell\", \"Continuous view\"));\n            }\n            return QVariant::fromValue(menuItem);\n        }\n    }\n\n    return QVariant();\n}", "CodeBleu_score": 60.464408428548836}]}
{"instance_id": "f161c1b938c8", "generation_result": [{"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    IF_ASSERT_FAILED(notation) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    mu::engraving::Score* score = notation->elements()->msScore();\n    IF_ASSERT_FAILED(score) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QBuffer buffer;\n    buffer.open(QIODevice::WriteOnly);\n\n    bool ok = Braille::writeScore(score, &buffer);\n    if (!ok) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QByteArray data = buffer.data();\n    buffer.close();\n\n    destinationDevice.write(data);\n\n    return true;\n}", "CodeBleu_score": 72.89014408442065}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    IF_ASSERT_FAILED(notation) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    Score* score = notation->elements()->msScore();\n    if (!score) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QBuffer buf;\n    buf.open(QIODevice::WriteOnly);\n    bool ok = Braille::writeScore(score, &buf);\n\n    if (!ok) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QByteArray data = buf.data();\n    return writeData(destinationDevice, data);\n}", "CodeBleu_score": 59.948977573424166}, {"code": "muse::Ret BrailleWriter::write(notation::INotationPtr notation, muse::io::IODevice& destinationDevice, const Options&){\n\t    IF_ASSERT_FAILED(notation) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    Score* score = notation->elements()->msScore();\n    IF_ASSERT_FAILED(score) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QBuffer buf;\n    buf.open(QIODevice::WriteOnly);\n    bool ok = Braille::writeScore(score, &buf);\n    if (!ok) {\n        return make_ret(Ret::Code::UnknownError);\n    }\n\n    QByteArray data = buf.data();\n    destinationDevice.write(data);\n\n    return true;\n}", "CodeBleu_score": 70.54856040680079}]}
{"instance_id": "192825616947", "generation_result": [{"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n\n    if (lines.empty()) {\n        return \"\";\n    }\n\n    std::string braille_translation = braille_translate(table_name, lines[0]);\n\n    for (size_t i = 1; i < lines.size(); ++i) {\n        braille_translation += \" \" + braille_translate(table_name, lines[i]);\n    }\n\n    return braille_translation;\n}", "CodeBleu_score": 69.07185653136804}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n\n    if (lines.empty()) {\n        return std::string();\n    }\n\n    std::string braille_text = braille_translate(table_name, lines[0]);\n\n    for (size_t i = 1; i < lines.size(); ++i) {\n        std::string line_braille = braille_translate(table_name, lines[i]);\n        braille_text += \" \" + line_braille;\n    }\n\n    return braille_text;\n}", "CodeBleu_score": 66.71485250628484}, {"code": "std::string braille_long_translate(const char* table_name, std::string txt){\n\t    std::vector<std::string> lines = split_string(txt, 256);\n    if (lines.empty()) {\n        return \"\";\n    }\n\n    std::string braille = braille_translate(table_name, lines[0]);\n    for (size_t i = 1; i < lines.size(); ++i) {\n        braille += \" \" + braille_translate(table_name, lines[i]);\n    }\n    return braille;\n}", "CodeBleu_score": 68.64943540617912}]}
{"instance_id": "9cfd1739fffa", "generation_result": [{"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    auto tmp = std::make_shared<ProxyEntity>();\n    if (!tmp->FromJsonString(ReadFile(jsonPath))) {\n        return nullptr;\n    }\n    //\n    std::shared_ptr<ProxyEntity> ent;\n    if (tmp->type == \"shadowsocks\") {\n        ent = std::make_shared<ShadowSocksBean>();\n    } else if (tmp->type == \"v2ray\") {\n        ent = std::make_shared<V2RayBean>();\n    } else if (tmp->type == \"trojan\") {\n        ent = std::make_shared<TrojanBean>();\n    } else if (tmp->type == \"naive\") {\n        ent = std::make_shared<NaiveBean>();\n    } else {\n        return nullptr;\n    }\n    //\n    if (ent->version == -114514) {\n        return nullptr;\n    }\n    //\n    ent->load_control = true;\n    ent->fn = jsonPath;\n    ent->Load();\n    return ent;\n}", "CodeBleu_score": 44.77362402260528}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    auto tmp = std::make_shared<ProxyEntity>();\n    auto err = tmp->FromJson(JsonFromFile(jsonPath));\n    if (!err.isEmpty()) {\n        return nullptr;\n    }\n    auto type = tmp->type;\n    if (type == \"ss\") {\n        tmp = std::make_shared<SSProxyEntity>();\n    } else if (type == \"ssr\") {\n        tmp = std::make_shared<SSRProxyEntity>();\n    } else if (type == \"vmess\") {\n        tmp = std::make_shared<VMessProxyEntity>();\n    } else if (type == \"trojan\") {\n        tmp = std::make_shared<TrojanProxyEntity>();\n    } else if (type == \"snell\") {\n        tmp = std::make_shared<SnellProxyEntity>();\n    } else if (type == \"hysteria\") {\n        tmp = std::make_shared<HysteriaProxyEntity>();\n    } else {\n        return nullptr;\n    }\n    tmp->fn = jsonPath;\n    tmp->_load_control = true;\n    err = tmp->FromJson(JsonFromFile(jsonPath));\n    if (!err.isEmpty()) {\n        return nullptr;\n    }\n    if (tmp->version == -114514) {\n        return nullptr;\n    }\n    return tmp;\n}", "CodeBleu_score": 43.88354035282778}, {"code": "std::shared_ptr<ProxyEntity> ProfileManager::LoadProxyEntity(const QString &jsonPath){\n\t    auto ent = std::make_shared<ProxyEntity>();\n    if (!ent->FromJsonString(ReadFileString(jsonPath))) {\n        return nullptr;\n    }\n    auto type = ent->bean->type;\n    if (type == \"ss\") {\n        ent = std::make_shared<SSBean>();\n    } else if (type == \"ssr\") {\n        ent = std::make_shared<SSRBean>();\n    } else if (type == \"trojan\") {\n        ent = std::make_shared<TrojanBean>();\n    } else if (type == \"vless\") {\n        ent = std::make_shared<VLESSBean>();\n    } else {\n        return nullptr;\n    }\n    if (ent->bean->version == -114514) {\n        return nullptr;\n    }\n    ent->isLoaded = true;\n    ent->fn = jsonPath;\n    ent->Load();\n    return ent;\n}", "CodeBleu_score": 45.824976397182716}]}
{"instance_id": "d2d7a08c10d4", "generation_result": [{"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    auto url = QUrl(link);\n    if (!url.isValid()) return false;\n\n    auto protocol = url.scheme();\n    if (protocol != \"https\" && protocol != \"quic\") return false;\n\n    name = url.fragment(QUrl::FullyDecoded);\n    serverAddress = url.host();\n    serverPort = url.port();\n    username = url.userName();\n    password = url.password();\n\n    return !(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n}", "CodeBleu_score": 93.03765976696704}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    auto url = QUrl(link);\n    if (!url.isValid()) return false;\n    auto protocol = url.scheme();\n    if (protocol != \"https\" && protocol != \"quic\") return false;\n\n    name = url.fragment(QUrl::FullyDecoded);\n    serverAddress = url.host();\n    serverPort = url.port();\n    username = url.userName();\n    password = url.password();\n\n    return !(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n}", "CodeBleu_score": 93.03765976696704}, {"code": "bool NaiveBean::TryParseLink(const QString &link) {\n\t    auto url = QUrl(link);\n    if (!url.isValid()) return false;\n\n    auto protocol = url.scheme();\n    if (protocol != \"https\" && protocol != \"quic\") return false;\n\n    name = url.fragment(QUrl::FullyDecoded);\n    serverAddress = url.host();\n    serverPort = url.port();\n    username = url.userName();\n    password = url.password();\n\n    return !(username.isEmpty() || password.isEmpty() || serverAddress.isEmpty());\n}", "CodeBleu_score": 93.03765976696704}]}
{"instance_id": "2f666eafb5f4", "generation_result": [{"code": "bool JsonStore::Save(){\n\t    if (callback_before_save != nullptr) callback_before_save();\n    if (no_save) return false;\n\n    auto data = ToJsonBytes();\n    if (data == lastSavedData) return false;\n\n    QFile file(file_path);\n    if (!file.open(QIODevice::WriteOnly)) {\n        qWarning() << \"Cannot open file\" << file_path;\n        return false;\n    }\n\n    file.write(data);\n    file.close();\n\n    lastSavedData = data;\n    return true;\n}", "CodeBleu_score": 58.2253168360756}, {"code": "bool JsonStore::Save(){\n\t    if (callback_before_save != nullptr) callback_before_save();\n    if (!_enableSave) return false;\n\n    auto content = ToJsonBytes();\n\n    if (content == _lastContent) return false;\n    _lastContent = content;\n\n    QFile file(filePath);\n    if (!file.open(QIODevice::WriteOnly)) {\n        qWarning() << \"Config File Open Failed\" << filePath;\n        return false;\n    }\n\n    file.write(content);\n    file.close();\n\n    return true;\n}", "CodeBleu_score": 58.124524429805255}, {"code": "bool JsonStore::Save(){\n\t    if (callback_before_save != nullptr) callback_before_save();\n    if (!allow_save) return false;\n\n    auto content = ToJsonBytes();\n    if (content == last_saved_content) return false;\n\n    last_saved_content = content;\n\n    QFile file(file_path);\n    if (!file.open(QIODevice::WriteOnly)) {\n        qWarning() << \"Failed to open file for writing:\" << file_path;\n        return false;\n    }\n\n    file.write(content);\n    file.close();\n    return true;\n}", "CodeBleu_score": 58.50185650942951}]}
{"instance_id": "1fb63372333c", "generation_result": [{"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    auto *timer = new QTimer(obj);\n    timer->setSingleShot(true);\n    QObject::connect(timer, &QTimer::timeout, [=]() {\n        callback();\n        timer->deleteLater();\n    });\n    timer->start(timeout);\n}", "CodeBleu_score": 64.56372457213875}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    auto *timer = new QTimer();\n    timer->setSingleShot(true);\n    QObject::connect(timer, &QTimer::timeout, [=]() {\n        // main thread\n        callback();\n        timer->deleteLater();\n    });\n    timer->setInterval(timeout);\n    timer->moveToThread(obj->thread());\n    timer->start();\n}", "CodeBleu_score": 63.64775503843849}, {"code": "void setTimeout(const std::function<void()> &callback, QObject *obj, int timeout){\n\t    // Create a new QTimer object\n    auto *timer = new QTimer();\n    // Connect the timeout signal of the timer to the callback function\n    QObject::connect(timer, &QTimer::timeout, [=]() {\n        // Execute the callback function\n        callback();\n        // Delete the timer object\n        timer->deleteLater();\n    });\n    // Set the timer to delete itself after executing the callback\n    timer->setSingleShot(true);\n    // Start the timer with the given timeout interval\n    timer->start(timeout);\n}", "CodeBleu_score": 55.09757742911319}]}
{"instance_id": "150b7aeeeb35", "generation_result": [{"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return {};\n    }\n\n    QVariant statusCodeVariant = networkReply->attribute(QNetworkRequest::HttpStatusCodeAttribute);\n    if (statusCodeVariant.isValid()) {\n        statusCode = QNetworkReply::NetworkError(statusCodeVariant.toInt());\n    } else {\n        statusCode = QNetworkReply::NoError;\n    }\n\n    if (statusCode != QNetworkReply::NoError) {\n        return {};\n    }\n\n    QVariant grpcStatusCodeVariant = networkReply->rawHeader(GrpcStatusHeader);\n    if (grpcStatusCodeVariant.isValid()) {\n        bool ok;\n        int grpcStatusCode = grpcStatusCodeVariant.toString().toInt(&ok);\n        if (ok) {\n            if (grpcStatusCode != 0) {\n                QVariant grpcStatusMessageVariant = networkReply->rawHeader(GrpcStatusMessage);\n                if (grpcStatusMessageVariant.isValid()) {\n                    qWarning() << \\\"gRPC error: \\\" << grpcStatusMessageVariant.toString();\n                }\n                statusCode = QNetworkReply::ProtocolUnknownError;\n                return {};\n            }\n        }\n    }\n\n    QByteArray data = networkReply->readAll();\n    if (data.size() < GrpcMessageSizeHeaderSize) {\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return {};\n    }\n\n    int messageSize = qFromBigEndian(*reinterpret_cast<const int *>(data.data() + 1));\n    if (messageSize < 0 || messageSize > data.size() - GrpcMessageSizeHeaderSize) {\n        statusCode = QNetworkReply::ProtocolUnknownError;\n        return {};\n    }\n\n    return data.mid(GrpcMessageSizeHeaderSize, messageSize);\n}", "CodeBleu_score": 55.85919216304536}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return {};\n    }\n\n    auto headers = networkReply->rawHeaderPairs();\n    for (const auto &header : headers) {\n        if (QString::fromLatin1(header.first).toLower() == GrpcStatusHeader) {\n            auto statusCode = header.second.toInt();\n            if (statusCode != 0) {\n                auto statusMessage = networkReply->rawHeader(GrpcStatusMessage);\n                qWarning() << \"gRPC error:\" << statusCode << statusMessage;\n                statusCode = QNetworkReply::ProtocolUnknownError;\n                return {};\n            }\n        }\n    }\n\n    statusCode = QNetworkReply::NoError;\n    auto data = networkReply->readAll();\n    return data.mid(GrpcMessageSizeHeaderSize);\n}", "CodeBleu_score": 64.46017941476019}, {"code": "static QByteArray processReply(QNetworkReply *networkReply, QNetworkReply::NetworkError &statusCode) {\n\t    if (networkReply->error() != QNetworkReply::NoError) {\n        statusCode = networkReply->error();\n        return {};\n    }\n\n    // Check for gRPC errors\n    QVariant statusCodeVariant = networkReply->attribute(QNetworkRequest::HttpStatusCodeAttribute);\n    if (statusCodeVariant.isValid()) {\n        int httpStatusCode = statusCodeVariant.toInt();\n        if (httpStatusCode >= 400) {\n            QVariant statusMessageVariant = networkReply->attribute(QNetworkRequest::HttpReasonPhraseAttribute);\n            QString statusMessage = statusMessageVariant.toString();\n            qWarning() << \"gRPC server returned error:\" << statusMessage;\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return {};\n        }\n    }\n\n    // Check for gRPC errors using custom headers\n    QVariant grpcStatusCodeVariant = networkReply->header(QNetworkRequest::CustomVerbHeader);\n    if (grpcStatusCodeVariant.isValid()) {\n        int grpcStatusCode = grpcStatusCodeVariant.toInt();\n        if (grpcStatusCode != 0) {\n            QVariant grpcStatusMessageVariant = networkReply->header(QNetworkRequest::CustomVerbHeader);\n            QString grpcStatusMessage = grpcStatusMessageVariant.toString();\n            qWarning() << \"gRPC server returned error:\" << grpcStatusMessage;\n            statusCode = QNetworkReply::ProtocolUnknownError;\n            return {};\n        }\n    }\n\n    // No errors, return the response data\n    statusCode = QNetworkReply::NoError;\n    QByteArray responseData = networkReply->readAll();\n    return responseData.mid(GrpcMessageSizeHeaderSize);\n}", "CodeBleu_score": 56.01156665741654}]}
{"instance_id": "ecaaeadcf213", "generation_result": [{"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    libcore::LoadConfigResp reply;\n    auto status = default_grpc_channel->Call(\"Start\", request, &reply, 10000);\n    if (status != QNetworkReply::NetworkError::NoError) {\n        NOT_OK\n    }\n    *rpcOK = reply.error_message().empty();\n    return QString::fromStdString(reply.error_message());\n}", "CodeBleu_score": 61.404317060801276}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    libcore::LoadConfigResp reply;\n    auto status = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n    if (status != QNetworkReply::NetworkError::NoError) {\n        *rpcOK = false;\n        onError(QString(\"QNetworkReply::NetworkError code: %1\n\").arg(status));\n        return \"\";\n    }\n    *rpcOK = true;\n    return QString::fromStdString(reply.error_message());\n}", "CodeBleu_score": 63.09643536105314}, {"code": "QString Client::Start(bool *rpcOK, const libcore::LoadConfigReq &request){\n\t    libcore::LoadConfigResp reply;\n    auto status = default_grpc_channel->Call(\"Start\", request, &reply, 500);\n    if (status != QNetworkReply::NetworkError::NoError) {\n        NOT_OK\n    }\n    *rpcOK = true;\n    return reply.error_message();\n}", "CodeBleu_score": 65.30179378414856}]}
{"instance_id": "7f3365d1207f", "generation_result": [{"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\\\"\\\");\n    if (NekoGui::dataStore->inbound_auth.isEmpty()) {\n        ui->inbound_auth->setIcon(QIcon(\\\"assets/neko-icon/auth/none.png\\\"));\n        return;\n    }\n    ui->inbound_auth->setIcon(QIcon(\\\"assets/neko-icon/auth/lock.png\\\"));\n}", "CodeBleu_score": 52.67458343518242}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t    ui->inbound_auth->setText(\\\"\\\");\n    if (NekoGui::dataStore->inbound_auth != \\\"\\\") {\n        ui->inbound_auth->setIcon(QIcon(\\\":/ui/icons/lock.png\\\"));\n    } else {\n        ui->inbound_auth->setIcon(QIcon(\\\":/ui/icons/unlock.png\\\"));\n    }\n\n}", "CodeBleu_score": 53.74721984959545}, {"code": "void DialogBasicSettings::refresh_auth(){\n\t", "CodeBleu_score": 3.8878730011524407}]}
{"instance_id": "34f643ad7662", "generation_result": [{"code": "void DialogManageGroups::on_add_clicked(){\n\t    auto *ent = new Group();\n    auto dialog = new DialogEditGroup(ent, this);\n    dialog->exec();\n    delete dialog;\n    if (dialog->result() == QDialog::Accepted) {\n        NekoGui::profileManager->AddGroup(ent);\n        NekoGui::profileManager->groupsTabOrder.push_back(ent->id);\n        AddGroupToListIfExist(ent->id)\n        emit refresh_groups();\n    }\n}", "CodeBleu_score": 68.03001104602882}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t    auto ent = new Group();\n    auto dialog = new DialogEditGroup(ent, this);\n    dialog->exec();\n    delete dialog;\n    if (dialog->result() == QDialog::Accepted) {\n        NekoGui::profileManager->AddGroup(ent);\n        AddGroupToListIfExist(ent->id)\n        emit refresh_manage_groups();\n    }\n}", "CodeBleu_score": 62.303064361015984}, {"code": "void DialogManageGroups::on_add_clicked(){\n\t    auto ent = NekoGui::profileManager->AddGroup();\n    auto dialog = new DialogEditGroup(ent, this);\n    dialog->setAttribute(Qt::WA_DeleteOnClose);\n    dialog->show();\n    connect(dialog, &QDialog::accepted, this, [=] {\n        NekoGui::profileManager->groupsTabOrder.push_back(ent->id);\n        AddGroupToListIfExist(ent->id)\n        emit refresh_list();\n    });\n}", "CodeBleu_score": 60.72935580449332}]}
{"instance_id": "bfac51f6c4a7", "generation_result": [{"code": "void DialogManageRoutes::accept(){\n\t", "CodeBleu_score": 4.07132740121978}, {"code": "void DialogManageRoutes::accept(){\n\t    //\n    if (active_routing != NekoGui::dataStore->active_routing) {\n        NekoGui::dataStore->routing_list[active_routing] = NekoGui::dataStore->routing.get();\n        NekoGui::dataStore->active_routing = active_routing;\n        emit NekoGui::dataStore->routing_list_updated();\n        //\n        if (NekoGui::dataStore->routing_list.size() > 1) {\n            NekoGui::dataStore->info_message = tr(\"Routing has changed. Please restart core.\");\n        }\n    }\n    //\n    NekoGui::dataStore->routing_list[active_routing] = NekoGui::dataStore->routing.get();\n    NekoGui::dataStore->routing_list[active_routing][\"name\"] = active_routing;\n    //\n    emit NekoGui::dataStore->routing_list_updated();\n    //\n    QDialog::accept();\n}", "CodeBleu_score": 45.95306759686471}, {"code": "void DialogManageRoutes::accept(){\n\t    //\n    if (active_routing != NekoGui::dataStore->active_routing) {\n        auto msg = QString(\"Route changed to <b>%1</b>\").arg(active_routing);\n        MessageBoxInfo(msg);\n    }\n    //\n    NekoGui::dataStore->routing.get()[active_routing] = NekoGui::dataStore->routing_editor;\n    //\n    NekoGui::dataStore->routing_editor.name = active_routing;\n    NekoGui::dataStore->routing_editor.type = \"custom\";\n    //\n    NekoGui::dataStore->routing_editor.custom_outbound = NekoGui::dataStore->routing_editor.custom_outbound.replace(\"outbound:\", \"\");\n    //\n    NekoGui::dataStore->active_routing = active_routing;\n    //\n    emit NekoGui::dataStore->routing_editor_changed();\n    //\n    close();\n}", "CodeBleu_score": 38.62570610891799}]}
{"instance_id": "ce56331f659f", "generation_result": [{"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    mPath.setPath(path);\n    SharedTileset tileset;\n\n    xml.setDevice(device);\n\n    if (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n        tileset = readTileset();\n    } else {\n        xml.raiseError(tr(\"Not a tileset file.\"));\n    }\n\n    mReadingExternalTileset = false;\n    return tileset;\n}", "CodeBleu_score": 78.04773102293}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    mPath.setPath(path);\n    SharedTileset tileset;\n\n    xml.setDevice(device);\n    mReadingExternalTileset = true;\n\n    if (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n        tileset = readTileset();\n    } else {\n        xml.raiseError(tr(\"Not a tileset file.\"));\n    }\n\n    mReadingExternalTileset = false;\n    return tileset;\n}", "CodeBleu_score": 84.0205729506749}, {"code": "SharedTileset MapReaderPrivate::readTileset(QIODevice *device, const QString &path){\n\t    mError.clear();\n    mPath.setPath(path);\n    SharedTileset tileset;\n\n    xml.setDevice(device);\n\n    if (xml.readNextStartElement() && xml.name() == QLatin1String(\"tileset\")) {\n        mReadingExternalTileset = true;\n        tileset = readTileset();\n    } else {\n        xml.raiseError(tr(\"Not a tileset.\"));\n    }\n\n    mReadingExternalTileset = false;\n    return tileset;\n}", "CodeBleu_score": 83.08561479844224}]}
{"instance_id": "c4502706d0af", "generation_result": [{"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n        SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n        return nullptr;\n    }\n\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 99.73708748859264}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n        SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n        return nullptr;\n    }\n\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 99.73708748859264}, {"code": "static HMODULE WINAPI LoadLibraryExWHook(LPCWSTR lpLibFileName, HANDLE hFile, DWORD dwFlags){\n\t    if (lpLibFileName && isImageBlacklistedW(lpLibFileName)) {\n        SetLastError(ERROR_ACCESS_DISABLED_BY_POLICY);\n        return nullptr;\n    }\n\n    return s_RealLoadLibraryExW(lpLibFileName, hFile, dwFlags);\n}", "CodeBleu_score": 99.73708748859264}]}
{"instance_id": "d8b05a05cfe6", "generation_result": [{"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    // Create an HTTP client for the specified computer\n    QNetworkAccessManager* http = computer->getHttpClient();\n\n    // Determine the cache path for the box art\n    QString filePath = getFilePathForBoxArt(computer, appId);\n\n    // Attempt to download the box art image using the HTTP client\n    QNetworkReply* reply = http->get(QNetworkRequest(QUrl(QString(\\\"https://%1:%2/boxart/%3\\\").arg(computer->address).arg(computer->port).arg(appId))));\n    QEventLoop loop;\nloop.exec();\n\n    QByteArray imageData = reply->readAll();\n    delete reply;\n\n    // If the image is successfully downloaded and is not null\n    if (!imageData.isNull()) {\n        // Save the image to the cache path\n        QFile cacheFile(filePath);\n        if (cacheFile.open(QIODevice::WriteOnly)) {\n            cacheFile.write(imageData);\n            cacheFile.close();\n\n            // Return the local file URL of the cached image\n            return QUrl::fromLocalFile(cacheFile.fileName());\n        }\n    }\n\n    // Ensure any zero-byte file is removed\n    if (QFileInfo(filePath).size() == 0) {\n        QFile::remove(filePath);\n    }\n\n    // If the image download fails, return an empty URL\n    return QUrl();\n}", "CodeBleu_score": 49.446484952245164}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    // Create an HTTP client for this computer\n    QNetworkAccessManager* http = m_HttpClients.value(computer->uuid, NULL);\n    if (http == NULL) {\n        http = new QNetworkAccessManager(this);\n        m_HttpClients.insert(computer->uuid, http);\n    }\n\n    // Determine the cache path for this box art\n    QString filePath = getFilePathForBoxArt(computer, appId);\n\n    // Download the box art image\n    QNetworkRequest request(QUrl(computer->boxartUrl + QString::number(appId)));\n    QNetworkReply* reply = http->get(request);\n    QEventLoop loop;\n    connect(reply, &QNetworkReply::finished, &loop, &QEventLoop::quit);\n    loop.exec();\n\n    // Save the image to the cache path\n    if (reply->error() == QNetworkReply::NoError) {\n        QByteArray imageData = reply->readAll();\n        if (!imageData.isEmpty()) {\n            QImage image;\n            if (image.loadFromData(imageData)) {\n                QImageWriter writer(filePath);\n                if (writer.write(image)) {\n                    return QUrl::fromLocalFile(filePath);\n                }\n            }\n        }\n    }\n\n    // Ensure any zero-byte file is removed\n    QFile file(filePath);\n    if (file.exists() && file.size() == 0) {\n        file.remove();\n    }\n\n    // Return an empty URL if the image download failed\n    return QUrl();\n}", "CodeBleu_score": 46.27274899906511}, {"code": "QUrl BoxArtManager::loadBoxArtFromNetwork(NvComputer* computer, int appId){\n\t    // Create an HTTP client for this computer\n    NvHTTP http(computer, m_accessManager);\n\n    // Determine the cache path for this box art\n    QString cachePath = getFilePathForBoxArt(computer, appId);\n\n    // Download the box art image using the HTTP client\n    QImage image = http.getImage(QString(\\\"/boxart/%1\\\").arg(appId));\n\n    // If the image is not null, save it to the cache path\n    if (!image.isNull()) {\n        // Save the image to the cache path\n        if (image.save(cachePath)) {\n            // Return the local file URL of the cached image\n            return QUrl::fromLocalFile(cachePath);\n        }\n        else {\n            // Ensure any zero-byte file is removed\n            QFile cacheFile(cachePath);\n            if (cacheFile.exists() && cacheFile.size() == 0) {\n                cacheFile.remove();\n            }\n        }\n    }\n\n    // Return an empty URL if the image download fails\n    return QUrl();\n}", "CodeBleu_score": 66.40151932037892}]}
{"instance_id": "40201ad62fc4", "generation_result": [{"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t    QHostAddress bestGlobalV6 = getBestGlobalAddressV6(addresses);\n\n    bool addedHost = false;\n    for (const QHostAddress& address : addresses) {\n        if (address.protocol() == QAbstractSocket::IPv4Protocol) {\n            addHost(computer->service.hostname(), address, computer->service.port());\n            addedHost = true;\n            break;\n        }\n    }\n\n    if (!addedHost) {\n        if (bestGlobalV6.isNull()) {\n            qWarning() << \"Could not find a suitable IPv4 or IPv6 address for mDNS host:\" << computer->service.hostname();\n        }\n        else {\n            if (bestGlobalV6.isInSubnet(QHostAddress(\"fe80::\"), 10)) {\n                // Link-local\n                qInfo() << \"Ignoring link-local address:\" << bestGlobalV6;\n            }\n            else if (bestGlobalV6.isInSubnet(QHostAddress(\"fec0::\"), 10)) {\n                qInfo() << \"Ignoring site-local address:\" << bestGlobalV6;\n            }\n            else if (bestGlobalV6.isInSubnet(QHostAddress(\"fc00::\"), 7)) {\n                qInfo() << \"Ignoring ULA:\" << bestGlobalV6;\n            }\n            else if (bestGlobalV6.isInSubnet(QHostAddress(\"2002::\"), 16)) {\n                qInfo() << \"Ignoring 6to4 address:\" << bestGlobalV6;\n            }\n            else if (bestGlobalV6.isInSubnet(QHostAddress(\"2001::\"), 32)) {\n                qInfo() << \"Ignoring Teredo address:\" << bestGlobalV6;\n            }\n            else {\n                addHost(computer->service.hostname(), bestGlobalV6, computer->service.port());\n            }\n        }\n    }\n\n    m_PendingResolution.removeOne(computer);\n    computer->deleteLater();\n}", "CodeBleu_score": 60.653677851212116}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t", "CodeBleu_score": 3.2626930800247504}, {"code": "void ComputerManager::handleMdnsServiceResolved(MdnsPendingComputer* computer,\n                                                QVector<QHostAddress>& addresses){\n\t", "CodeBleu_score": 3.2626930800247504}]}
{"instance_id": "6a765d35d3a7", "generation_result": [{"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QMutexLocker lock(&m_ComputerMutex);\n\n    QByteArray currentSerializedData = computer->serialize(true);\n    QByteArray lastSerializedData = computer->lastSerializedData();\n\n    if (currentSerializedData != lastSerializedData) {\n        computer->setLastSerializedData(currentSerializedData);\n\n        QMutexLocker lock(&m_DelayedFlushMutex);\n        m_NeedsDelayedFlush = true;\n        m_DelayedFlushCondition.wakeOne();\n    }\n}", "CodeBleu_score": 48.38320288985909}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QWriteLocker lock(&m_Lock);\n\n    // Read the computer's data\n    QByteArray serialized = computer->serialize();\n\n    // If the current serialized data differs from the last saved state,\n    // queue a request to save the hosts to QSettings\n    if (serialized != m_KnownHosts[computer->uuid]->serialized) {\n        m_KnownHosts[computer->uuid]->serialized = serialized;\n        saveHosts();\n    }\n}", "CodeBleu_score": 54.90949735332769}, {"code": "void ComputerManager::saveHost(NvComputer *computer){\n\t    QMutexLocker locker(&m_Lock);\n    QByteArray serialized = computer->serialize(false);\n\n    if (serialized != computer->m_Serialized) {\n        computer->m_Serialized = serialized;\n        m_NeedsSave = true;\n        QMetaObject::invokeMethod(this, \"saveHosts\", Qt::QueuedConnection);\n    }\n}", "CodeBleu_score": 43.08914246350203}]}
{"instance_id": "01df52cf216b", "generation_result": [{"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    QWriteLocker writeLocker(&lock);\n\n    if (appList == newAppList) {\n        return false;\n    }\n\n    // Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n    for (int i = 0; i < appList.size(); i++) {\n        for (int j = 0; j < newAppList.size(); j++) {\n            if (appList[i].id == newAppList[j].id) {\n                newAppList[j].hidden = appList[i].hidden;\n                newAppList[j].directLaunch = appList[i].directLaunch;\n                break;\n            }\n        }\n    }\n\n    // Update the app list with the new list\n    appList = newAppList;\n\n    // Sort the app list\n    std::sort(appList.begin(), appList.end(), [](const NvApp& a, const NvApp& b) {\n        return a.name < b.name;\n    });\n\n    return true;\n}", "CodeBleu_score": 64.3809029535003}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    QWriteLocker writeLocker(&lock);\n\n    // Check if the new app list is different from the current app list\n    if (newAppList == appList) {\n        return false;\n    }\n\n    // Propagate client-side attributes such as hidden and directLaunch from the existing apps to the corresponding new apps based on their IDs\n    for (NvApp& newApp : newAppList) {\n        for (const NvApp& existingApp : appList) {\n            if (newApp.id == existingApp.id) {\n                newApp.hidden = existingApp.hidden;\n                newApp.directLaunch = existingApp.directLaunch;\n                break;\n            }\n        }\n    }\n\n    // Update the app list with the new list\n    appList = newAppList;\n\n    // Sort the app list\n    std::sort(appList.begin(), appList.end(), [](const NvApp& a, const NvApp& b) {\n        return a.name.toLower() < b.name.toLower();\n    });\n\n    return true;\n}", "CodeBleu_score": 75.69011807866083}, {"code": "bool NvComputer::updateAppList(QVector<NvApp> newAppList){\n\t    QWriteLocker locker(&lock);\n\n    // Compare the app lists\n    if (apps == newAppList) {\n        return false;\n    }\n\n    // Propagate client-side attributes from the existing apps to the corresponding new apps\n    for (NvApp& newApp : newAppList) {\n        for (const NvApp& existingApp : apps) {\n            if (newApp.id == existingApp.id) {\n                newApp.hidden = existingApp.hidden;\n                newApp.directLaunch = existingApp.directLaunch;\n                break;\n            }\n        }\n    }\n\n    // Update the app list\n    apps = newAppList;\n\n    // Sort the app list by name\n    std::sort(apps.begin(), apps.end(), [](const NvApp& a, const NvApp& b) {\n        return a.name < b.name;\n    });\n\n    return true;\n}", "CodeBleu_score": 74.67567080134704}]}
{"instance_id": "527d363b3a18", "generation_result": [{"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setupCommonOptions();\n    parser.setApplicationDescription(\n        \"Quit an app on a specified host.\n\"\n        \"\n\"\n        \"Usage: moonlight quit <host>\"\n    );\n    parser.addPositionalArgument(\"action\", \"Action to execute\", \"<action>\");\n    parser.addPositionalArgument(\"host\", \"Host to quit\", \"<host>\");\n    parser.parse(args);\n    parser.handleHelpAndVersionOptions();\n    parser.handleUnknownOptions();\n\n    auto posArgs = parser.positionalArguments();\n    if (posArgs.size() != 2) {\n        parser.showError(\"Invalid number of arguments\");\n    }\n\n    m_Host = posArgs.at(1);\n}", "CodeBleu_score": 62.96673339794532}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setupCommonOptions();\n    parser.setApplicationDescription(\n        \"\n\"\n        \"Quit an app on a specified host.\n\"\n        \"\n\"\n        \"Usage: moonlight quit <host>\n\"\n        \"\n\"\n        \"Available options:\n\"\n        \"  --help, -h         Show this help message\n\"\n        \"  --version          Show the version number\"\n    );\n    parser.addPositionalArgument(\"action\", \"Action to execute\", \"<action>\");\n    parser.addPositionalArgument(\"host\", \"Host to quit app on\", \"<host>\");\n    parser.parse(args);\n    parser.handleHelpAndVersionOptions();\n    parser.handleUnknownOptions();\n\n    auto posArgs = parser.positionalArguments();\n    if (posArgs.size() != 2) {\n        parser.showError(\"Missing host argument\");\n    }\n\n    m_Host = posArgs.at(1);\n}", "CodeBleu_score": 61.18286202749044}, {"code": "void QuitCommandLineParser::parse(const QStringList &args){\n\t    CommandLineParser parser;\n    parser.setupCommonOptions();\n    parser.setApplicationDescription(\n        \"\n\"\n        \"Quits an app on a specified host.\n\"\n        \"\n\"\n        \"Usage: moonlight quit <host>\n\"\n        \"\n\"\n        \"Options:\n\"\n        \"  --help             Displays this help.\n\"\n        \"  --version          Displays version information.\n\"\n        \"\n\"\n        \"Arguments:\n\"\n        \"  host               Hostname or IP of the PC running Moonlight\n\"\n        \"\n\"\n        \"Examples:\n\"\n        \"  moonlight quit 192.168.0.101\n\"\n        \"  moonlight quit myhostname\n\"\n    );\n    parser.addPositionalArgument(\"action\", \"Action to execute\", \"<action>\");\n    parser.addPositionalArgument(\"host\", \"Hostname or IP of the PC running Moonlight\", \"<host>\");\n    parser.parse(args);\n\n    parser.handleHelpAndVersionOptions();\n    parser.handleUnknownOptions();\n\n    if (parser.positionalArguments().size() != 2) {\n        parser.showError(\"Host is required\");\n    }\n\n    m_Host = parser.positionalArguments().at(1);\n}", "CodeBleu_score": 55.86514125225882}]}
{"instance_id": "dca3348795d4", "generation_result": [{"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int nyears = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(nyears);\n  auto instance = QDateWrap::constructor.New(\n      {Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 95.91702332762189}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int nyears = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(nyears);\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n      env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 99.8086421681636}, {"code": "Napi::Value QDateWrap::addYears(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int nyears = info[0].As<Napi::Number>().Int32Value();\n  QDate date = this->instance->addYears(nyears);\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n      env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 99.8086421681636}]}
{"instance_id": "3f8f791368dc", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  QDate date = QDate::currentDate();\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 94.44835087500087}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  QDate date = QDate::currentDate();\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 94.44835087500087}, {"code": "Napi::Value StaticDateWrapMethods::currentDate(const Napi::CallbackInfo& info) {\n\t  Napi::Env env = info.Env();\n  QDate date = QDate::currentDate();\n  auto instance = QDateWrap::constructor.New({Napi::External<QDate>::New(\n      env, new QDate(date.year(), date.month(), date.day()))});\n  return instance;\n}", "CodeBleu_score": 99.75105108378361}]}
{"instance_id": "64d1b8308f8f", "generation_result": [{"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int year = info[0].As<Napi::Number>().Int32Value();\n  bool result = QDate::isLeapYear(year);\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 85.09442921362546}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int year = info[0].As<Napi::Number>().Int32Value();\n  bool result = QDate::isLeapYear(year);\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 85.09442921362546}, {"code": "Napi::Value StaticDateWrapMethods::isLeapYear(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  int year = info[0].As<Napi::Number>().Int32Value();\n  bool result = QDate::isLeapYear(year);\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 85.09442921362546}]}
{"instance_id": "aef23b7ae456", "generation_result": [{"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object dateObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* dateWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(dateObject);\n  qint64 result = this->instance->daysTo(*dateWrap->getInternalInstance());\n  return Napi::Number::New(env, result);\n}", "CodeBleu_score": 80.77070110112443}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object dateObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* dateWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(dateObject);\n  qint64 result = this->instance->daysTo(*dateWrap->getInternalInstance());\n  return Napi::Number::New(env, result);\n}", "CodeBleu_score": 80.77070110112443}, {"code": "Napi::Value QDateTimeWrap::daysTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QDateTimeWrap* otherDate =\n      Napi::ObjectWrap<QDateTimeWrap>::Unwrap(info[0].As<Napi::Object>());\n  qint64 result = this->instance->daysTo(*otherDate->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 70.99641029320658}]}
{"instance_id": "6acfa242f879", "generation_result": [{"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* otherWrap =\n      Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n  qint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 99.81057543009109}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* otherWrap = Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n  qint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 99.17700545527862}, {"code": "Napi::Value QDateTimeWrap::msecsTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Object otherObject = info[0].As<Napi::Object>();\n  QDateTimeWrap* otherWrap =\n      Napi::ObjectWrap<QDateTimeWrap>::Unwrap(otherObject);\n  qint64 result = this->instance->msecsTo(*otherWrap->getInternalInstance());\n  return Napi::Value::From(env, result);\n}", "CodeBleu_score": 99.81057543009109}]}
{"instance_id": "fd6c4b070349", "generation_result": [{"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t    Napi::Env env = info.Env();\n    int row = info[0].As<Napi::Number>().Int32Value();\n    QModelIndexWrap* parentWrap =\n        Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\n    QModelIndex* parent = parentWrap->getInternalInstance();\n    bool result = this->instance->rowIntersectsSelection(row, *parent);\n    return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 88.19564142809995}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t    const Napi::CallbackInfo& info\n}", "CodeBleu_score": 3.73033082209074}, {"code": "Napi::Value QItemSelectionModelWrap::rowIntersectsSelection{\n\t  Napi::Env env = info.Env();\n  int row = info[0].As<Napi::Number>().Int32Value();\n  QModelIndexWrap* parentWrap =\n      Napi::ObjectWrap<QModelIndexWrap>::Unwrap(info[1].As<Napi::Object>());\n  QModelIndex* parent = parentWrap->getInternalInstance();\n  bool result = this->instance->rowIntersectsSelection(row, *parent);\n  return Napi::Boolean::New(env, result);\n}", "CodeBleu_score": 87.99390357729305}]}
{"instance_id": "05bc5ac254cf", "generation_result": [{"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QSizeWrap* otherSizeWrap =\n      Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\n  QSize* otherSize = otherSizeWrap->getInternalInstance();\n  QSize result = this->instance->expandedTo(*otherSize);\n  auto resultInstance = QSizeWrap::constructor.New(\n      {Napi::External<QSize>::New(env, new QSize(result))});\n  return resultInstance;\n}", "CodeBleu_score": 99.85425703292626}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QSizeWrap* otherSizeWrap =\n      Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\n  QSize* otherSize = otherSizeWrap->getInternalInstance();\n  QSize result = this->instance->expandedTo(*otherSize);\n  auto resultInstance = QSizeWrap::constructor.New(\n      {Napi::External<QSize>::New(env, new QSize(result))});\n  return resultInstance;\n}", "CodeBleu_score": 99.85425703292626}, {"code": "Napi::Value QSizeWrap::expandedTo(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QSizeWrap* otherSizeWrap =\n      Napi::ObjectWrap<QSizeWrap>::Unwrap(info[0].As<Napi::Object>());\n  QSize* otherSize = otherSizeWrap->getInternalInstance();\n  QSize result = this->instance->expandedTo(*otherSize);\n  auto resultInstance = QSizeWrap::constructor.New(\n      {Napi::External<QSize>::New(env, new QSize(result))});\n  return resultInstance;\n}", "CodeBleu_score": 99.85425703292626}]}
{"instance_id": "1efa69400994", "generation_result": [{"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t    QApplication::desktopFileName().toStdString().c_str()\n}", "CodeBleu_score": 18.01094363227766}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t  Napi::Env env = info.Env();\n  QString result = QApplication::desktopFileName();\n  return Napi::String::New(env, result.toStdString());\n}", "CodeBleu_score": 74.80835223713915}, {"code": "Napi::Value StaticQApplicationWrapMethods::desktopFileName{\n\t    Napi::Value desktopFileName(const Napi::CallbackInfo& info) {\n        Napi::Env env = info.Env();\n        QString result = QApplication::desktopFileName();\n        return Napi::String::New(env, result.toStdString());\n    }\n}", "CodeBleu_score": 87.29937472756818}]}
{"instance_id": "1f5a560eaaa6", "generation_result": [{"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData =\n      this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  QMimeData* mimeDataClone = new QMimeData();\n  // QMimeData has no copy constructor so I do this\n  QMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\n  auto instance = QMimeDataWrap::constructor.New(\n      {Napi::External<QMimeData>::New(env, mimeDataClone)});\n  return instance;\n}", "CodeBleu_score": 91.44267503712058}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  QMimeData* mimeDataClone = new QMimeData();\n  // QMimeData has no copy constructor so I do this\n  QMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\n  auto instance = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, mimeDataClone)});\n  return instance;\n}", "CodeBleu_score": 87.55728818046491}, {"code": "Napi::Value QClipboardWrap::mimeData(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  Napi::Number mode = info[0].As<Napi::Number>();\n  QMimeData* mimeData = this->instance->mimeData(static_cast<QClipboard::Mode>(mode.Int32Value()));\n  QMimeData* mimeDataClone = new QMimeData();\n  // QMimeData has no copy constructor so I do this\n  QMimeDataWrap::cloneFromMimeDataToData(mimeData, mimeDataClone);\n\n  auto instance = QMimeDataWrap::constructor.New({Napi::External<QMimeData>::New(env, mimeDataClone)});\n  return instance;\n}", "CodeBleu_score": 87.55728818046491}]}
{"instance_id": "2c6dfc2d7eec", "generation_result": [{"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QObject* source = this->instance->source();\n  if (source == nullptr) {\n    return env.Null();\n  }\n  return QObjectWrap::fromQObject(env, source);\n}", "CodeBleu_score": 63.61708936415975}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QObject* source = this->instance->source();\n  return QObjectWrap::constructor.New({Napi::External<QObject>::New(env, source)});\n}", "CodeBleu_score": 73.68239074902567}, {"code": "Napi::Value QDragWrap::source(const Napi::CallbackInfo& info){\n\t  Napi::Env env = info.Env();\n  QObject* source = this->instance->source();\n  if (source) {\n    auto instance = QObjectWrap::constructor.New({Napi::External<QObject>::New(env, source)});\n    return instance;\n  }\n  return env.Null();\n}", "CodeBleu_score": 90.9809774776402}]}
{"instance_id": "29908bfd3b4b", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (e.X < Option.Grid.Left || e.X > Width - Option.Grid.Right || e.Y < Option.Grid.Top || e.Y > Height - Option.Grid.Bottom) {\n        SelectIndex = -1;\n        return;\n    }\n    SelectIndex = (int)((e.X - Option.Grid.Left) / DrawBarWidth);\n    if (SelectIndex >= 0 && SelectIndex < Bars[0].Count) {\n        if (Bars[0][SelectIndex].Tips != tip.Text) tip.Text = Bars[0][SelectIndex].Tips;\n        tip.AutoSize = true;\n        tip.AutoSize = false;\n        if (tip.Width + e.X > Width - Option.Grid.Right) tip.Location = new Point(e.X - tip.Width - 10, e.Y + 10);\n        else tip.Location = new Point(e.X + 10, e.Y + 10);\n    }\n    tip.Visible = SelectIndex >= 0 && SelectIndex < Bars[0].Count;\n}", "CodeBleu_score": 36.171545526407485}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n\n    try {\n        if (e.Location.X > Option.Grid.Left && e.Location.X < DrawRect.Right && e.Location.Y > Option.Grid.Top && e.Location.Y < DrawRect.Bottom) {\n            SelectIndex = (int)((e.Location.X - Option.Grid.Left) / DrawBarWidth);\n            if (SelectIndex >= 0 && SelectIndex < Option.XAxis.Data.Count) {\n                if (Bars.Count > 0) {\n                    tip.Text = Bars[0][SelectIndex].Tips;\n                    tip.Size = TextRenderer.MeasureText(tip.Text, tip.Font);\n                }\n            }\n        }\n        else {\n            SelectIndex = -1;\n        }\n\n        tip.Visible = SelectIndex >= 0;\n        if (tip.Visible) {\n            tip.Location = new Point(e.Location.X + 20, e.Location.Y + 20);\n            if (tip.Location.X + tip.Width > DrawRect.Right) {\n                tip.Location = new Point(DrawRect.Right - tip.Width - 20, tip.Location.Y);\n            }\n\n            if (tip.Location.Y + tip.Height > DrawRect.Bottom) {\n                tip.Location = new Point(tip.Location.X, DrawRect.Bottom - tip.Height - 20);\n            }\n        }\n    }\n    catch (Exception ex) {\n        Console.WriteLine(ex.Message);\n    }\n}", "CodeBleu_score": 51.73485120226302}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (e.X < Option.Grid.Left || e.X > Width - Option.Grid.Right || e.Y < Option.Grid.Top || e.Y > Height - Option.Grid.Bottom) {\n        SelectIndex = -1;\n        return;\n    }\n    SelectIndex = (int)((e.X - DrawOrigin.X) / DrawBarWidth);\n    if (SelectIndex < 0 || SelectIndex >= Option.XAxis.Data.Count) {\n        SelectIndex = -1;\n        return;\n    }\n    try {\n        if (Bars.TryGetValue(0, out List<BarInfo> bars)) {\n            if (SelectIndex >= 0 && SelectIndex < bars.Count) {\n                tip.Text = bars[SelectIndex].Tips;\n                tip.UpdateSize();\n                tip.Location = new Point(e.X, e.Y);\n                if (tip.Location.X + tip.Width > Width - Option.Grid.Right) tip.Location = new Point(Width - Option.Grid.Right - tip.Width, e.Y);\n                if (tip.Location.Y + tip.Height > Height - Option.Grid.Bottom) tip.Location = new Point(e.X, Height - Option.Grid.Bottom - tip.Height);\n                tip.Visible = true;\n            }\n        }\n    }\n    catch (Exception ex) {\n        Console.WriteLine(ex.Message);\n    }\n}", "CodeBleu_score": 43.326534380920435}]}
{"instance_id": "c04d17af6942", "generation_result": [{"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !Option.Drawing) return;\n\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        DrawToolTip(g, Option.ToolTip);\n    }\n\n    DrawSeries(g);\n    DrawAxis(g);\n    DrawTitle(g);\n\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        DrawToolTip(g, Option.ToolTip);\n    }\n\n    DrawLegend(g);\n    DrawScale(g);\n}", "CodeBleu_score": 75.4529203496334}, {"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null) return;\n\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        DrawToolTip(g);\n    }\n\n    DrawSeries(g);\n    DrawAxis(g);\n    DrawTitle(g);\n\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        DrawToolTip(g);\n    }\n\n    DrawLegend(g);\n    DrawAxisScale(g);\n}", "CodeBleu_score": 68.23010296480861}, {"code": "protected override void DrawOption(Graphics g){\n\t    if (Option == null || !Option.Draw) return;\n\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        DrawToolTip(g, Option.ToolTip);\n    }\n\n    DrawSeries(g);\n    DrawAxis(g);\n    DrawTitle(g);\n\n    if (Option.ToolTip != null && Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        DrawToolTip(g, Option.ToolTip);\n    }\n\n    DrawLegend(g);\n    DrawAxisScale(g);\n}", "CodeBleu_score": 75.77548796276491}]}
{"instance_id": "1f16e1f824d0", "generation_result": [{"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (SelectIndex < 0) return;\n    if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        int x = DrawOrigin.X + (int)(SelectIndex * DrawBarWidth);\n        g.DrawLine(new Pen(Color.Black, 1), x, DrawOrigin.Y, x, Height - Option.Grid.Bottom);\n    } else if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        int x = DrawOrigin.X + (int)(SelectIndex * DrawBarWidth);\n        int w = (int)(DrawBarWidth * 0.5);\n        g.FillRectangle(new SolidBrush(Color.FromArgb(100, 100, 100, 100)), x - w, DrawOrigin.Y, w * 2, Height - Option.Grid.Bottom);\n    }\n}", "CodeBleu_score": 48.80247990851985}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (SelectIndex < 0) return;\n\n    if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        int x = (int)(DrawOrigin.X + SelectIndex * DrawBarWidth + DrawBarWidth / 2);\n        int y = DrawOrigin.Y;\n        int w = 1;\n        int h = DrawSize.Height;\n        g.DrawLine(Option.ToolTip.LineStyle, new Point(x, y), new Point(x, y + h));\n    }\n\n    if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        int x = (int)(DrawOrigin.X + SelectIndex * DrawBarWidth);\n        int y = DrawOrigin.Y;\n        int w = (int)DrawBarWidth;\n        int h = DrawSize.Height;\n        g.FillRectangle(Option.ToolTip.BackColor, new Rectangle(x, y, w, h));\n    }\n}", "CodeBleu_score": 58.33823198041645}, {"code": "protected virtual void DrawToolTip(Graphics g){\n\t    if (Option.ToolTip == null) return;\n    if (SelectIndex < 0) return;\n\n    if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Line) {\n        int x = DrawOrigin.X + SelectIndex * DrawBarWidth + DrawBarWidth / 2;\n        int y = DrawOrigin.Y + Option.Grid.Top;\n        int w = 1;\n        int h = DrawSize.Height;\n        using (Pen pen = new Pen(Color.Black, 1)) {\n            g.DrawLine(pen, x, y, x, y + h);\n        }\n    }\n    else if (Option.ToolTip.AxisPointer.Type == UIAxisPointerType.Shadow) {\n        int x = DrawOrigin.X + SelectIndex * DrawBarWidth;\n        int y = DrawOrigin.Y + Option.Grid.Top;\n        int w = DrawBarWidth;\n        int h = DrawSize.Height;\n        using (SolidBrush brush = new SolidBrush(Color.FromArgb(100, 0, 0, 0))) {\n            g.FillRectangle(brush, x, y, w, h);\n        }\n    }\n}", "CodeBleu_score": 50.069489782091004}]}
{"instance_id": "63eac2c0afaa", "generation_result": [{"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t            if (title == null || string.IsNullOrEmpty(title.Text)) {\n                return;\n            }\n\n            SizeF titleSize = g.MeasureString(title.Text, title.Font);\n            Rectangle titleRect = new Rectangle((int)((Width - titleSize.Width) / 2), (int)((Height - titleSize.Height) / 2), (int)titleSize.Width, (int)titleSize.Height);\n            g.DrawString(title.Text, title.Font, title.ForeColor, titleRect, title.Alignment);\n\n            if (!string.IsNullOrEmpty(title.SubText)) {\n                Font subFont = new Font(title.Font.FontFamily, title.Font.Size * 0.8f, FontStyle.Regular);\n                SizeF subSize = g.MeasureString(title.SubText, subFont);\n                Rectangle subRect = new Rectangle((int)((Width - subSize.Width) / 2), (int)((Height - subSize.Height) / 2) + (int)titleSize.Height + TextInterval, (int)subSize.Width, (int)subSize.Height);\n                g.DrawString(title.SubText, subFont, title.ForeColor, subRect, title.Alignment);\n                subFont.Dispose();\n            }\n        }", "CodeBleu_score": 37.6143177384608}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t            if (title == null || title.Text == null) return;\n\n            var titleFont = title.Font.DPIScaleFont(UIStyles.DefaultTitleFontSize);\n            var titleSize = g.MeasureString(title.Text, titleFont);\n\n            var titleRect = new RectangleF(title.Left, title.Top, titleSize.Width, titleSize.Height);\n            var titleStringFormat = new StringFormat();\n            titleStringFormat.Alignment = title.TextAlignment;\n            titleStringFormat.LineAlignment = title.TextLineAlignment;\n\n            g.DrawString(title.Text, titleFont, title.ForeColor, titleRect, titleStringFormat);\n\n            if (title.SubText == null) return;\n\n            var subTitleFont = title.SubFont.DPIScaleFont(UIStyles.DefaultSubTitleFontSize);\n            var subTitleSize = g.MeasureString(title.SubText, subTitleFont);\n\n            var subTitleRect = new RectangleF(title.Left, title.Top + titleSize.Height, subTitleSize.Width, subTitleSize.Height);\n            var subTitleStringFormat = new StringFormat();\n            subTitleStringFormat.Alignment = title.SubTextAlignment;\n            subTitleStringFormat.LineAlignment = title.SubTextLineAlignment;\n\n            g.DrawString(title.SubText, subTitleFont, title.ForeColor, subTitleRect, subTitleStringFormat);\n        }", "CodeBleu_score": 34.805825410573235}, {"code": " protected void DrawTitle(Graphics g, UITitle title){\n\t            if (title == null || title.Text.IsNullOrEmpty()) return;\n            SizeF textSize = g.MeasureString(title.Text, title.Font);\n            g.DrawString(title.Text, title.Font, title.ForeColor.GetSolidBrush(), new RectangleF(0, 0, textSize.Width, textSize.Height), title.TextAlignment.GetStringFormat());\n            if (title.SubText.IsNullOrEmpty()) return;\n            Font tempFont = new Font(title.Font.FontFamily, title.Font.Size * 0.8f, title.Font.Style);\n            SizeF subTextSize = g.MeasureString(title.SubText, tempFont);\n            g.DrawString(title.SubText, tempFont, title.ForeColor.GetSolidBrush(), new RectangleF(0, textSize.Height, subTextSize.Width, subTextSize.Height), title.TextAlignment.GetStringFormat());\n        }", "CodeBleu_score": 44.79061408000388}]}
{"instance_id": "fcb55d34cb20", "generation_result": [{"code": "protected override void CreateEmptyOption(){\n\t    if (emptyOption != null) return;\n    emptyOption = new Option();\n    emptyOption.Title.Text = \\\"Doughnut Chart\\\";\n    emptyOption.Title.Subtext = \\\"SunnyUI\\\";\n    emptyOption.Legend.Orient = LegendOrient.Horizontal;\n    emptyOption.Legend.Left = Legend.Left.Center;\n    emptyOption.Legend.Top = Legend.Top.Bottom;\n    emptyOption.Tooltip.Trigger = Tooltip.TriggerType.Item;\n    emptyOption.Tooltip.Formatter = \\\"{a} <br/>{b} : {c} ({d}%)\\\";\n    emptyOption.Tooltip.ShowContent = true;\n\n            var series = new Series();\n            series.Name = \\\"\u8bbf\u95ee\u6765\u6e90\\\";\n            series.Type = SeriesType.Doughnut;\n            series.Radius = new string[] { \\\"30%\\\", \\\"70%\\\" };\n            series.Center = new string[] { \\\"50%\\\", \\\"50%\\\" };\n            series.RoseType = RoseType.None;\n\n            series.Data = new List<SeriesData>();\n            series.Data.Add(new SeriesData() { Name = \\\"\u76f4\u63a5\u8bbf\u95ee\\\", Value = 335 });\n            series.Data.Add(new SeriesData() { Name = \\\"\u90ae\u4ef6\u8425\u9500\\\", Value = 310 });\n            series.Data.Add(new SeriesData() { Name = \\\"\u8054\u76df\u5e7f\u544a\\\", Value = 234 });\n            series.Data.Add(new SeriesData() { Name = \\\"\u89c6\u9891\u5e7f\u544a\\\", Value = 135 });\n            series.Data.Add(new SeriesData() { Name = \\\"\u641c\u7d22\u5f15\u64ce\\\", Value = 1548 });\n\n            emptyOption.Series.Add(series);\n        }", "CodeBleu_score": 25.46368063342821}, {"code": "protected override void CreateEmptyOption(){\n\t    if (emptyOption != null) return;\n    emptyOption = new EChartsOption();\n    emptyOption.title.text = \\\"Doughnut Chart\\\";\n    emptyOption.title.subtext = \\\"Doughnut Chart Subtitle\\\";\n    var series = new EChartsSeries();\n    series.name = \\\"Doughnut Series\\\";\n    series.center = new[] { 50, 50 };\n    series.radius = new[] { 0, \\\"75%\\\" };\n    series.type = \\\"pie\\\";\n    series.roseType = \\\"radius\\\";\n    series.data = new EChartsSeriesData[]\n    {\n        new EChartsSeriesData() { name = \\\"Category 1\\\", value = 10 },\n        new EChartsSeriesData() { name = \\\"Category 2\\\", value = 20 },\n        new EChartsSeriesData() { name = \\\"Category 3\\\", value = 30 },\n        new EChartsSeriesData() { name = \\\"Category 4\\\", value = 40 },\n        new EChartsSeriesData() { name = \\\"Category 5\\\", value = 50 }\n    };\n    emptyOption.series = new EChartsSeries[] { series };\n}", "CodeBleu_score": 25.91577252697383}, {"code": "protected override void CreateEmptyOption(){\n\t    if (emptyOption != null) return;\n    emptyOption = new Option();\n    emptyOption.Title.Text = \\\"Doughnut Chart\\\";\n    emptyOption.Title.Subtext = \\\"Empty\\\";\n    emptyOption.Tooltip.Trigger = TooltipTrigger.Item;\n    emptyOption.Tooltip.Formatter = \\\"{a} <br/>{b} : {c} ({d}%)\\\";\n    emptyOption.Tooltip.AxisPointer.Type = TooltipAxisPointerType.Shadow;\n    emptyOption.Tooltip.Position = TooltipPosition.Right;\n    emptyOption.Legend.Orient = Orient.Vertical;\n    emptyOption.Legend.Left = \\\"right\\\";\n    emptyOption.Legend.Top = \\\"middle\\\";\n    emptyOption.Legend.SelectedMode = SelectedMode.Single;\n\n    var series = new Series();\n    series.Name = \\\"Doughnut\\\";\n    series.Type = SeriesType.Doughnut;\n    series.Radius = \\\"55%\\\";\n    series.Center = new object[] { \\\"50%\\\", \\\"50%\\\" };\n    series.RoseType = RoseType.None;\n\n    series.Data.Add(new DataItem() { Name = \\\"A\\\", Value = 100 });\n    series.Data.Add(new DataItem() { Name = \\\"B\\\", Value = 50 });\n    series.Data.Add(new DataItem() { Name = \\\"C\\\", Value = 30 });\n    series.Data.Add(new DataItem() { Name = \\\"D\\\", Value = 20 });\n    series.Data.Add(new DataItem() { Name = \\\"E\\\", Value = 10 });\n    emptyOption.Series.Add(series);\n\n    emptyOption.Init();\n}", "CodeBleu_score": 25.073898648649774}]}
{"instance_id": "7c0a5f0b8f45", "generation_result": [{"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n    for (int i = 0; i <= Count; i++) {\n        if (AxisType == UIAxisType.DateTime) {\n            DateTimeInt64 dateTime = new DateTimeInt64(Start);\n            dateTime.AddMilliseconds(i * IntervalMilliseconds);\n            values[i] = dateTime.ToDouble();\n        } else {\n            values[i] = Start + i * Interval;\n        }\n    }\n    return values;\n}", "CodeBleu_score": 74.1390169850904}, {"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n    for (int i = 0; i <= Count; i++) {\n        if (AxisType == UIAxisType.DateTime) {\n            DateTimeInt64 dateTime = new DateTimeInt64(Start);\n            values[i] = dateTime.AddMilliseconds(IntervalMilliseconds * i).Ticks;\n        } else {\n            values[i] = Start + Interval * i;\n        }\n    }\n    return values;\n}", "CodeBleu_score": 71.91371661077376}, {"code": "public double[] LabelValues(){\n\t    double[] values = new double[Count + 1];\n    for (int i = 0; i <= Count; i++) {\n        if (AxisType == UIAxisType.DateTime) {\n            DateTimeInt64 dateTime = new DateTimeInt64(Start);\n            values[i] = dateTime.AddMilliseconds(IntervalMilliseconds * i).ToDouble();\n        }\n        else {\n            values[i] = Start + Interval * i;\n        }\n    }\n    return values;\n}", "CodeBleu_score": 74.90538715892733}]}
{"instance_id": "dfdbaee67b59", "generation_result": [{"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    using (Pen pen = new Pen(color, width)) {\n        IntPtr hdc = Win32.GetWindowDC(m.HWnd);\n        if (hdc != IntPtr.Zero) {\n            using (Graphics g = Graphics.FromHdc(hdc)) {\n                g.SmoothingMode = SmoothingMode.AntiAlias;\n                g.DrawRectangle(pen, new Rectangle(0, 0, control.Width - 1, control.Height - 1));\n            }\n            Win32.ReleaseDC(m.HWnd, hdc);\n        }\n    }\n}", "CodeBleu_score": 49.856979671509755}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    using (Pen pen = new Pen(color, width)) {\n        IntPtr hdc = Win32.GetDC(m.HWnd);\n        if (hdc != IntPtr.Zero) {\n            using (Graphics g = Graphics.FromHdc(hdc)) {\n                g.SmoothingMode = SmoothingMode.AntiAlias;\n                g.DrawRectangle(pen, 0, 0, control.Width - 1, control.Height - 1);\n            }\n            Win32.ReleaseDC(m.HWnd, hdc);\n        }\n    }\n}", "CodeBleu_score": 52.14593129076137}, {"code": "public static void ResetBorderColor(Message m, Control control, int width, Color color){\n\t    using (Pen pen = new Pen(color, width)) {\n        IntPtr hdc = Win32.GetWindowDC(m.HWnd);\n        if (hdc != IntPtr.Zero) {\n            using (Graphics g = Graphics.FromHdc(hdc)) {\n                g.SmoothingMode = SmoothingMode.AntiAlias;\n                g.DrawRectangle(pen, new Rectangle(0, 0, control.Width - 1, control.Height - 1));\n            }\n            Win32.ReleaseDC(m.HWnd, hdc);\n        }\n    }\n}", "CodeBleu_score": 49.856979671509755}]}
{"instance_id": "aec16c2608df", "generation_result": [{"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    // Get the control's window handle\n    IntPtr hWnd = ctrl.Handle;\n\n    // Get the control's window device context\n    IntPtr hDC = Win32.User.GetWindowDC(hWnd);\n\n    // Get the control's window rectangle\n    RECT rect = new RECT();\n    Win32.User.GetWindowRect(hWnd, ref rect);\n\n    // Create a compatible DC and bitmap\n    IntPtr hMemDC = Win32.Gdi32.CreateCompatibleDC(hDC);\n    IntPtr hBitmap = Win32.Gdi32.CreateCompatibleBitmap(hDC, rect.Width, rect.Height);\n\n    // Select the bitmap into the compatible DC\n    IntPtr hOldBitmap = Win32.Gdi32.SelectObject(hMemDC, hBitmap);\n\n    // Print the control's window content into the bitmap\n    Win32.Gdi32.PrintWindow(hWnd, hMemDC, 0);\n\n    // Create a Bitmap object from the HBitmap\n    Bitmap bitmap = Bitmap.FromHbitmap(hBitmap);\n\n    // Delete the used objects\n    Win32.Gdi32.SelectObject(hMemDC, hOldBitmap);\n    Win32.Gdi32.DeleteObject(hBitmap);\n    Win32.Gdi32.DeleteDC(hMemDC);\n    Win32.User.ReleaseDC(hWnd, hDC);\n\n    return bitmap;\n}", "CodeBleu_score": 52.73178622373257}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    // Get the device context of the control's window\n    IntPtr hdcSrc = Win32.User.GetWindowDC(ctrl.Handle);\n    // Create a compatible DC with the same properties as the source DC\n    IntPtr hdcDest = Win32.Gdi32.CreateCompatibleDC(hdcSrc);\n    // Create a compatible bitmap with the same dimensions as the control's window\n    IntPtr hBitmap = Win32.Gdi32.CreateCompatibleBitmap(hdcSrc, ctrl.Width, ctrl.Height);\n    // Select the compatible bitmap into the compatible DC\n    IntPtr hOld = Win32.Gdi32.SelectObject(hdcDest, hBitmap);\n    // Print the control's window content into the compatible bitmap\n    Win32.Gdi32.PrintWindow(ctrl.Handle, hdcDest, 0);\n    // Create a Bitmap object from the HBitmap\n    Bitmap bmp = Image.FromHbitmap(hBitmap);\n    // Delete the used objects\n    Win32.Gdi32.SelectObject(hdcDest, hOld);\n    Win32.Gdi32.DeleteDC(hdcDest);\n    Win32.Gdi32.DeleteObject(hBitmap);\n    Win32.User.ReleaseDC(ctrl.Handle, hdcSrc);\n    // Return the Bitmap\n    return bmp;\n}", "CodeBleu_score": 61.409800202034006}, {"code": "public static Bitmap SaveToImage(this Control ctrl){\n\t    // Get the control's window handle\n    IntPtr hWnd = ctrl.Handle;\n\n    // Get the device context of the control's window\n    IntPtr hDC = Win32.User.GetWindowDC(hWnd);\n\n    // Create a compatible DC\n    IntPtr hMemDC = Win32.Gdi32.CreateCompatibleDC(hDC);\n\n    // Get the control's window rectangle\n    Win32.User.RECT rc = new Win32.User.RECT();\n    Win32.User.GetWindowRect(hWnd, ref rc);\n\n    // Calculate the width and height of the control\n    int width = rc.right - rc.left;\n    int height = rc.bottom - rc.top;\n\n    // Create a compatible bitmap\n    IntPtr hBitmap = Win32.Gdi32.CreateCompatibleBitmap(hDC, width, height);\n\n    // Select the bitmap into the compatible DC\n    IntPtr hOldBitmap = Win32.Gdi32.SelectObject(hMemDC, hBitmap);\n\n    // Print the control's window content into the bitmap\n    Win32.Gdi32.PrintWindow(hWnd, hMemDC, 0);\n\n    // Create a Bitmap object from the HBitmap\n    Bitmap bmp = Image.FromHbitmap(hBitmap);\n\n    // Delete the used objects\n    Win32.Gdi32.SelectObject(hMemDC, hOldBitmap);\n    Win32.Gdi32.DeleteObject(hBitmap);\n    Win32.Gdi32.DeleteDC(hMemDC);\n    Win32.User.ReleaseDC(hWnd, hDC);\n\n    return bmp;\n}", "CodeBleu_score": 53.933120004319946}]}
{"instance_id": "8cbc60785194", "generation_result": [{"code": "public static void RemoveClickEvent(this Button button){\n\t    var field = typeof(Control).GetField(\\\"EventClick\\\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (field == null) return;\n    var key = field.GetValue(button);\n    var events = button.Events[key];\n    if (events != null) button.Events[key] = null;\n}", "CodeBleu_score": 27.013567028829993}, {"code": "public static void RemoveClickEvent(this Button button){\n\t    if (button.IsNull()) return;\n    var field = typeof(Control).GetField(\\\"EventClick\\\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (field != null) {\n        object key = field.GetValue(button);\n        if (key != null) {\n            var events = button.GetType().GetProperty(\\\"Events\\\", BindingFlags.NonPublic | BindingFlags.Instance);\n            if (events != null) {\n                var eventHandlerList = events.GetValue(button, null) as EventHandlerList;\n                if (eventHandlerList != null) {\n                    var eventHandler = eventHandlerList[key] as EventHandler;\n                    if (eventHandler != null) {\n                        button.Click -= eventHandler;\n                    }\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 42.32820908683509}, {"code": "public static void RemoveClickEvent(this Button button){\n\t    var field = typeof(Control).GetField(\"EventClick\", BindingFlags.Static | BindingFlags.NonPublic);\n    if (field == null) return;\n    var key = field.GetValue(button);\n    if (key == null) return;\n    var events = button.GetType().GetProperty(\"Events\", BindingFlags.NonPublic | BindingFlags.Instance);\n    if (events == null) return;\n    var eventHandlerList = (EventHandlerList)events.GetValue(button, null);\n    if (eventHandlerList == null) return;\n    var clickEvent = eventHandlerList.GetType().GetField(\"Click\", BindingFlags.Public | BindingFlags.Instance);\n    if (clickEvent == null) return;\n    var clickEventHandler = (EventHandler)clickEvent.GetValue(eventHandlerList);\n    if (clickEventHandler == null) return;\n    eventHandlerList.RemoveHandler(key, clickEventHandler);\n}", "CodeBleu_score": 34.05617076269064}]}
{"instance_id": "107200db7c81", "generation_result": [{"code": "public static string CheckVersion(){\n\t    const string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        } else {\n            return \".NET Framework 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 83.80916805754254}, {"code": "public static string CheckVersion(){\n\t    const string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return CheckFor45PlusVersion((int)ndpKey.GetValue(\"Release\"));\n        }\n        else {\n            return \".NET Framework Version 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 86.2538086038277}, {"code": "public static string CheckVersion(){\n\t    const string subkey = @\"SOFTWARE\\Microsoft\\NET Framework Setup\\NDP\\v4\\Full\\\";\n    using (RegistryKey ndpKey = RegistryKey.OpenBaseKey(RegistryHive.LocalMachine, RegistryView.Registry32).OpenSubKey(subkey)) {\n        if (ndpKey != null && ndpKey.GetValue(\"Release\") != null) {\n            return \".NET Framework Version: \" + CheckFor45PlusVersion((int) ndpKey.GetValue(\"Release\"));\n        } else {\n            return \".NET Framework Version 4.5 or later is not detected.\";\n        }\n    }\n}", "CodeBleu_score": 87.18823466219888}]}
{"instance_id": "0078e6ce17ce", "generation_result": [{"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    if (source == target) {\n        throw new ArgumentException(\"Copying pixels from one bitmap to the same bitmap is not supported\", nameof(source));\n    }\n\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    using (var fastSource = source.FastLock())\n    using (var fastTarget = target.FastLock()) {\n        long stride = fastSource.Stride;\n        long targetStride = fastTarget.Stride;\n        for (int y = 0; y < source.Height; y++) {\n            long offsetSrc = y * stride;\n            long offsetDest = y * targetStride;\n            memcpy(fastTarget._scan0 + offsetDest, fastSource._scan0 + offsetSrc, stride);\n        }\n    }\n\n    return true;\n}", "CodeBleu_score": 67.52055178655408}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    // Check if the source and target bitmaps are the same\n    if (source == target) {\n        throw new ArgumentException(\"Cannot copy pixels from a bitmap to itself\", nameof(source));\n    }\n\n    // Check if the source and target bitmaps have the same dimensions and pixel format\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    // Lock the source and target bitmaps for fast memory access\n    using (var fastSource = source.FastLock())\n    using (var fastTarget = target.FastLock()) {\n        // Copy the pixel data from the source to the target\n        memcpy(fastTarget._scan0, fastSource._scan0, (ulong)fastSource.Stride * (ulong)fastSource.Height);\n    }\n\n    return true;\n}", "CodeBleu_score": 72.74187600474995}, {"code": "public static bool CopyPixels(Bitmap source, Bitmap target){\n\t    // Throw exception when trying to copy same bitmap over\n    if (source == target) {\n        throw new ArgumentException(\"Copying pixels across the same bitmap is not supported\", nameof(source));\n    }\n\n    if (source.Width != target.Width || source.Height != target.Height || source.PixelFormat != target.PixelFormat) {\n        return false;\n    }\n\n    using (var fastSource = source.FastLock())\n    using (var fastTarget = target.FastLock()) {\n        memcpy(fastTarget._scan0, fastSource._scan0, (ulong)fastSource.Stride * (ulong)fastSource.Height);\n    }\n\n    return true;\n}", "CodeBleu_score": 78.04187310381886}]}
{"instance_id": "b554f6ffc7b1", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    PointF pt = new PointF(e.X, e.Y);\n    if (e.Button == MouseButtons.Left) {\n        SetPercent(pt);\n    }\n}", "CodeBleu_score": 57.74367453659847}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    PointF pt = new PointF(e.X, e.Y);\n    if (e.Button == MouseButtons.Left) {\n        SetPercent(pt);\n    }\n}", "CodeBleu_score": 57.74367453659847}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    PointF pt = new PointF(e.X, e.Y);\n    if (e.Button == MouseButtons.Left) {\n        SetPercent(pt);\n    }\n}", "CodeBleu_score": 57.74367453659847}]}
{"instance_id": "67a92ed0480f", "generation_result": [{"code": "protected void DrawColorBar(Graphics dc){\n\t    RectangleF r = BarRectangle;\n    if (m_color2 == Color.Empty) {\n        using Brush brush = new SolidBrush(m_color1);\n        dc.FillRectangle(brush, r);\n    } else if (m_color3 == Color.Empty) {\n        using Brush brush = new SolidBrush(m_color2);\n        dc.FillRectangle(brush, r);\n    } else {\n        using Brush brush = new SolidBrush(m_color1);\n        dc.FillRectangle(brush, r);\n        using Brush brush2 = new SolidBrush(m_color2);\n        r.X += r.Width / 2;\n                r.Width = r.Width / 2;\n                dc.FillRectangle(brush2, r);\n                using Brush brush3 = new SolidBrush(m_color3);\n                r.X += r.Width / 2;\n                r.Width = r.Width / 2;\n                dc.FillRectangle(brush3, r);\n            }\n            DrawSelector(dc, r, Orientation, Percent);\n        }", "CodeBleu_score": 38.343032949953304}, {"code": "protected void DrawColorBar(Graphics dc){\n\t    RectangleF r = BarRectangle;\n    float percent = Percent;\n    if (percent < 0)\n        percent = 0;\n    if (percent > 1)\n        percent = 1;\n\n    if (m_color2 == Color.Empty)\n        DrawColorBar(dc, r, m_color1, percent);\n    else\n        DrawColorBar(dc, r, m_color1, m_color2, percent);\n\n    if (m_color3 != Color.Empty)\n        DrawColorBar(dc, r, m_color2, m_color3, percent);\n\n    DrawSelector(dc, r, Orientation, percent);\n}", "CodeBleu_score": 37.986806503039716}, {"code": "protected void DrawColorBar(Graphics dc){\n\t    RectangleF r = BarRectangle;\n    if (Color2 == Color.Empty) {\n        using SolidBrush brush = new SolidBrush(Color1);\n        dc.FillRectangle(brush, r);\n        DrawSelector(dc, r, Orientation, Percent);\n    } else if (Color3 == Color.Empty) {\n        using SolidBrush brush = new SolidBrush(Color1);\n        dc.FillRectangle(brush, r);\n        brush.Color = Color2;\n        float width = r.Width / 2;\n        dc.FillRectangle(brush, r.X + width, r.Y, r.Width - width, r.Height);\n        DrawSelector(dc, r, Orientation, Percent);\n    } else {\n        using SolidBrush brush = new SolidBrush(Color1);\n        dc.FillRectangle(brush, r);\n        brush.Color = Color2;\n        float width = r.Width / 3;\n        dc.FillRectangle(brush, r.X + width, r.Y, r.Width - width * 2, r.Height);\n        brush.Color = Color3;\n        dc.FillRectangle(brush, r.X + width * 2, r.Y, r.Width - width * 2, r.Height);\n        DrawSelector(dc, r, Orientation, Percent);\n    }\n}", "CodeBleu_score": 44.79326639033301}]}
{"instance_id": "eb7915323235", "generation_result": [{"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = itemForm.Visible ? SymbolDropDown : SymbolNormal;\n    Invalidate();\n}", "CodeBleu_score": 40.203434266601114}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = itemForm.Visible ? SymbolDropDown : SymbolNormal;\n    Invalidate();\n}", "CodeBleu_score": 40.203434266601114}, {"code": "private void ItemForm_VisibleChanged(object sender, EventArgs e){\n\t    dropSymbol = itemForm.Visible ? SymbolDropDown : SymbolNormal;\n    Invalidate();\n}", "CodeBleu_score": 40.203434266601114}]}
{"instance_id": "f39e3f212069", "generation_result": [{"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n\n    if (!edit.Visible) {\n        if (string.IsNullOrEmpty(Text)) {\n            g.DrawString(Watermark, Font, new SolidBrush(WatermarkColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height), new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });\n        }\n        else {\n            g.DrawString(Text, Font, new SolidBrush(ForeColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height), new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });\n        }\n    }\n\n    g.FillRectangle(new SolidBrush(Color.FromArgb(100, 100, 100, 100)), edit.Right, 0, 1, Height);\n\n    if (ClearButtonVisible) {\n        g.DrawString(char.ConvertFromUtf32(61700), new Font(Font.FontFamily, Font.Size), new SolidBrush(Color.FromArgb(100, 100, 100, 100)), new Rectangle(edit.Right, 0, 16, Height), new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });\n    }\n    else {\n        g.DrawString(char.ConvertFromUtf32(dropSymbol), new Font(Font.FontFamily, Font.Size), new SolidBrush(Color.FromArgb(100, 100, 100, 100)), new Rectangle(edit.Right, 0, 16, Height), new StringFormat { Alignment = StringAlignment.Center, LineAlignment = StringAlignment.Center });\n    }\n}", "CodeBleu_score": 45.028957108462585}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t", "CodeBleu_score": 2.203698489335641}, {"code": "protected override void OnPaintFore(Graphics g, GraphicsPath path){\n\t    SizeChange();\n\n    if (!edit.Visible) {\n        if (string.IsNullOrEmpty(edit.Text)) {\n            g.DrawString(Watermark, Font, new SolidBrush(WatermarkColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height), new StringFormat {\n                Alignment = StringAlignment.Near,\n                LineAlignment = StringAlignment.Center\n            });\n        } else {\n            g.DrawString(Text, Font, new SolidBrush(ForeColor), new Rectangle(edit.Left, edit.Top, edit.Width, edit.Height), new StringFormat {\n                Alignment = StringAlignment.Near,\n                LineAlignment = StringAlignment.Center\n            });\n        }\n    }\n\n    g.FillRectangle(new SolidBrush(Color.FromArgb(200, 150, 150, 150)), Width - RectSize - 4, 2, RectSize, Height - 4);\n\n    if (ClearButtonVisible) {\n        g.DrawImage(SunnyUI.UIImage.GetImage(SymbolClear, SymbolSize, SymbolSize), new Rectangle(Width - RectSize - 4, 2, RectSize, Height - 4));\n    } else {\n        g.DrawImage(SunnyUI.UIImage.GetImage(dropSymbol, SymbolSize, SymbolSize), new Rectangle(Width - RectSize - 4, 2, RectSize, Height - 4));\n    }\n}", "CodeBleu_score": 44.93882027004933}]}
{"instance_id": "c2f43d45d92d", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n\n    if (!NeedDrawClearButton) {\n        return;\n    }\n\n    if (e.X >= Width - Padding.Right && e.X <= Width - Padding.Right + RectSize && e.Y >= 2 && e.Y <= Height - 2) {\n        if (NeedDrawClearButton != (Text.IsValid() && e.Button == MouseButtons.Left)) {\n            NeedDrawClearButton = Text.IsValid() && e.Button == MouseButtons.Left;\n            Invalidate();\n        }\n    }\n    else {\n        if (NeedDrawClearButton) {\n            NeedDrawClearButton = false;\n            Invalidate();\n        }\n    }\n}", "CodeBleu_score": 50.085645633674524}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n    if (!NeedDrawClearButton) {\n        return;\n    }\n    if (e.X >= Width - Padding.Right && e.X < Width - Padding.Right + SymbolSize && e.Y >= 0 && e.Y < Height) {\n        bool needDrawClearButton = NeedDrawClearButton;\n        NeedDrawClearButton = !Text.IsValid();\n        if (needDrawClearButton != NeedDrawClearButton) {\n            Invalidate();\n        }\n    }\n}", "CodeBleu_score": 49.74263648729131}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    base.OnMouseMove(e);\n\n    if (!NeedDrawClearButton) {\n        return;\n    }\n\n    if (e.X >= Width - Padding.Right) {\n        if (NeedDrawClearButton != Text.IsValid()) {\n            NeedDrawClearButton = Text.IsValid();\n            Invalidate();\n        }\n    }\n    else {\n        if (NeedDrawClearButton) {\n            NeedDrawClearButton = false;\n            Invalidate();\n        }\n    }\n}", "CodeBleu_score": 49.09631228302458}]}
{"instance_id": "ecd71145bba0", "generation_result": [{"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    Size preferredSize = GetPreferredSize(Size.Empty);\n    if (AutoSize && (preferredSize != Size)) {\n        Size = preferredSize;\n    }\n    Items.SetOwner(this);\n    OnLayoutCompleted(EventArgs.Empty);\n    Invalidate();\n}", "CodeBleu_score": 54.1184545181514}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    if (Items.Count > 0) {\n        Size size = Size;\n        ToolStripControlHost host = Items[0] as ToolStripControlHost;\n        if (host != null) {\n            Control control = host.Control;\n            if (control != null) {\n                Size preferredSize = control.PreferredSize;\n                if (preferredSize.Width != size.Width || preferredSize.Height != size.Height) {\n                    control.Size = size;\n                    preferredSize = control.PreferredSize;\n                }\n                host.AutoSize = false;\n                host.Margin = host.Padding = Padding.Empty;\n                control.MinimumSize = control.MaximumSize = control.Size = preferredSize;\n                control.Location = Point.Empty;\n            }\n        }\n    }\n    base.OnLayout(e);\n    OnLayoutCompleted(e);\n    Invalidate();\n}", "CodeBleu_score": 40.3207977548815}, {"code": "protected override void OnLayout(LayoutEventArgs e){\n\t    if (AutoSize) {\n        Size = GetPreferredSize(Size.Empty);\n    }\n\n    SetItems();\n    OnLayoutCompleted(e);\n    Invalidate();\n}", "CodeBleu_score": 39.05173820965235}]}
{"instance_id": "670ec0154771", "generation_result": [{"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    FillColor = Color.White;\n    ForeColor = uiColor.DropDownPanelForeColor;\n    RectangleColor = uiColor.RectangleColor;\n    foreach (UISymbolButton btn in Controls) {\n        btn.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 51.52282134684306}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    this.FillColor = Color.White;\n    this.ForeColor = uiColor.DropdownPanelForeColor;\n    this.rectangleColor = uiColor.DropdownPanelColor;\n    foreach (UISymbolButton item in this.Controls) {\n        item.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 49.72458422201165}, {"code": "public override void SetStyleColor(UIBaseStyle uiColor){\n\t    base.SetStyleColor(uiColor);\n    fillColor = Color.White;\n    foreColor = uiColor.DropdownPanelForeColor;\n    rectangleColor = uiColor.ForeColor;\n    foreach (UISymbolButton item in Controls) {\n        item.SetStyleColor(uiColor);\n    }\n}", "CodeBleu_score": 62.72609945582824}]}
{"instance_id": "248c24f4cf62", "generation_result": [{"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (this.AnalogMeter == null)\n        return false;\n\n    Color bodyColor = this.AnalogMeter.BodyColor;\n    Color bodyColorDark = Color.FromArgb(bodyColor.A, (int)(bodyColor.R * 0.6), (int)(bodyColor.G * 0.6), (int)(bodyColor.B * 0.6));\n\n    LinearGradientBrush lgb = new LinearGradientBrush(rc, bodyColor, bodyColorDark, 0.0f, true);\n    Gr.FillEllipse(lgb, rc);\n\n    rc.X += rc.Width * (1 - this.AnalogMeter.DrawRatio) / 2;\n    rc.Y += rc.Height * (1 - this.AnalogMeter.DrawRatio) / 2;\n    rc.Width *= this.AnalogMeter.DrawRatio;\n    rc.Height *= this.AnalogMeter.DrawRatio;\n\n    lgb.SetSigmaBellShape(0.5f);\n    lgb.SetBlendTriangularShape(0.5f);\n    lgb.WrapMode = WrapMode.TileFlipXY;\n    lgb.LinearColors = new Color[] { bodyColorDark, bodyColor };\n    Gr.FillEllipse(lgb, rc);\n\n    return true;\n}", "CodeBleu_score": 44.380663913043165}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (this.AnalogMeter == null) return false;\n\n    Color bodyColor = this.AnalogMeter.BodyColor;\n    Color bodyColorDark = Utils.ColorDark(bodyColor, 0.5f);\n\n    LinearGradientBrush bodyBrush = new LinearGradientBrush(rc, bodyColor, bodyColorDark, 0f, true);\n    Gr.FillEllipse(bodyBrush, rc);\n\n    rc.Inflate(-rc.Width * (1f - this.AnalogMeter.DrawRatio), -rc.Height * (1f - this.AnalogMeter.DrawRatio));\n    rc.Offset(rc.Width * (1f - this.AnalogMeter.DrawRatio) / 2f, rc.Height * (1f - this.AnalogMeter.DrawRatio) / 2f);\n\n    bodyBrush.SetSigmaBellShape(0.5f);\n    bodyBrush.CenterColor = bodyColorDark;\n    bodyBrush.SurroundColors = new Color[] { bodyColor };\n    Gr.FillEllipse(bodyBrush, rc);\n\n    return true;\n}", "CodeBleu_score": 44.75776167380605}, {"code": "public override bool DrawBody(Graphics Gr, RectangleF rc){\n\t    if (AnalogMeter == null) {\n        return false;\n    }\n\n    Color bodyColor = AnalogMeter.BodyColor;\n    Color bodyColorDark = Color.FromArgb(bodyColor.A, (byte) (bodyColor.R * 0.7), (byte) (bodyColor.G * 0.7), (byte) (bodyColor.B * 0.7));\n\n    LinearGradientBrush lg = new LinearGradientBrush(rc, bodyColor, bodyColorDark, 0f);\n    Gr.FillEllipse(lg, rc);\n\n    rc.Width -= AnalogMeter.DrawRatio;\n    rc.Height -= AnalogMeter.DrawRatio;\n    rc.X += AnalogMeter.DrawRatio / 2;\n    rc.Y += AnalogMeter.DrawRatio / 2;\n\n    lg.SetSigmaBellShape(0.5f, 0.5f);\n    lg.SetBlendTriangularShape(0.5f);\n    lg.RotateTransform(180f);\n    Gr.FillEllipse(lg, rc);\n\n    return true;\n}", "CodeBleu_score": 38.84002861823062}]}
{"instance_id": "be7c41ba9985", "generation_result": [{"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    IsHover = true;\n    Invalidate();\n}", "CodeBleu_score": 80.39681508653204}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    IsHover = true;\n    Invalidate();\n}", "CodeBleu_score": 80.39681508653204}, {"code": "protected override void OnMouseEnter(EventArgs e){\n\t    base.OnMouseEnter(e);\n    IsHover = true;\n    Invalidate();\n}", "CodeBleu_score": 80.39681508653204}]}
{"instance_id": "1d476b416b5a", "generation_result": [{"code": "public static void Load(){\n\t    lock (_stateLock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = (_proxyKey.GetValue(\"ProxyEnable\", 0) != 0);\n    }\n}", "CodeBleu_score": 63.42195085902574}, {"code": "public static void Load(){\n\t    lock (_stateLock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = (_proxyKey.GetValue(\"ProxyEnable\") as int? == 1);\n        IsIgnoringLocalTraffic = (_proxyKey.GetValue(\"ProxyOverride\") as string ?? string.Empty).Split(';').Any(x => x.Equals(\"<local>\", StringComparison.OrdinalIgnoreCase));\n    }\n}", "CodeBleu_score": 61.03544940248757}, {"code": "public static void Load(){\n\t    lock (_stateLock) {\n        LoadAddresses();\n        LoadOverrides();\n        IsProxyEnabled = (_proxyKey.GetValue(\"ProxyEnable\") as int? ?? 0) > 0;\n    }\n}", "CodeBleu_score": 65.3867068426586}]}
{"instance_id": "298075fa5494", "generation_result": [{"code": "private static void LoadOverrides(){\n\t    string proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    if (string.IsNullOrEmpty(proxyOverride)) {\n        return;\n    }\n\n    string[] overrides = proxyOverride.Split(';');\n    bool ignoreLocal = false;\n    foreach (string overrideItem in overrides) {\n        if (string.IsNullOrWhiteSpace(overrideItem)) {\n            continue;\n        }\n\n        if (overrideItem.Equals(\"<local>\", StringComparison.OrdinalIgnoreCase)) {\n            ignoreLocal = true;\n        } else {\n            if (!Overrides.Contains(overrideItem)) {\n                Overrides.Add(overrideItem);\n            }\n        }\n    }\n\n    IsIgnoringLocalTraffic = ignoreLocal;\n}", "CodeBleu_score": 59.59249366394819}, {"code": "private static void LoadOverrides(){\n\t    string proxyOverride = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    if (string.IsNullOrWhiteSpace(proxyOverride)) {\n        return;\n    }\n    string[] overrides = proxyOverride.Split(new[] { ';' }, StringSplitOptions.RemoveEmptyEntries);\n    IsIgnoringLocalTraffic = false;\n    foreach (string item in overrides) {\n        string overrideItem = item.Trim();\n        if (overrideItem.Equals(\"<local>\", StringComparison.OrdinalIgnoreCase)) {\n            IsIgnoringLocalTraffic = true;\n        } else if (!Overrides.Contains(overrideItem)) {\n            Overrides.Add(overrideItem);\n        }\n    }\n}", "CodeBleu_score": 55.362968970337015}, {"code": "private static void LoadOverrides(){\n\t    string overrides = _proxyKey.GetValue(\"ProxyOverride\")?.ToString();\n    if (string.IsNullOrEmpty(overrides))\n        return;\n\n    string[] overridesArray = overrides.Split(new char[] { ';' }, StringSplitOptions.RemoveEmptyEntries);\n    IsIgnoringLocalTraffic = false;\n    foreach (string overrideValue in overridesArray) {\n        string trimmedOverride = overrideValue.Trim();\n        if (trimmedOverride.Equals(\"<local>\", StringComparison.OrdinalIgnoreCase))\n            IsIgnoringLocalTraffic = true;\n        else if (!Overrides.Contains(trimmedOverride))\n            Overrides.Add(trimmedOverride);\n    }\n}", "CodeBleu_score": 43.08498596752946}]}
{"instance_id": "c6c7ed2cfa51", "generation_result": [{"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t", "CodeBleu_score": 1.1717521256739678}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t    var method = string.Empty;\n            var headers = new List<string>();\n            var requestUrl = string.Empty;\n\n            var commandLine = await ReadLineAsync();\n            if (commandLine == null)\n            {\n                return null;\n            }\n\n            var commandLineParts = commandLine.Split(' ');\n            method = commandLineParts[0];\n            requestUrl = commandLineParts[1];\n\n            if (baseUri != null)\n            {\n                requestUrl = baseUri + requestUrl;\n            }\n\n            while (_client.Connected)\n            {\n                var header = await ReadLineAsync();\n                if (header == string.Empty)\n                {\n                    break;\n                }\n\n                headers.Add(header);\n            }\n\n            if (method == \\\"CONNECT\\\")\n            {\n                var host = requestUrl.Split(':')[0];\n                var port = int.Parse(requestUrl.Split(':')[1]);\n                var address = IPAddress.Parse(host);\n\n                var request = new HttpWebRequest(address, port, method, headers);\n                await SendResponseAsync(200, \\\"Connection established\\\", new List<string>(), null);\n\n                var tunnel = new Tunnel(request, _client);\n                tunnel.Start();\n\n                return await ReadRequestAsync(new Uri($\\\"http://{host}:{port}/\\\"));\n            }\n\n            return new HttpWebRequest(method, headers, requestUrl);\n        }", "CodeBleu_score": 39.81702316057575}, {"code": "private async Task<HttpWebRequest> ReadRequestAsync(Uri baseUri){\n\t    var method = \"\";\n    var path = \"\";\n    var headers = new List<KeyValuePair<string, string>>();\n    var requestUrl = baseUri;\n\n    var line = await ReadLineAsync();\n    var commandLine = line.Split(' ');\n    method = commandLine[0];\n    path = commandLine[1];\n\n    while (_client.Connected) {\n        line = await ReadLineAsync();\n        if (string.IsNullOrEmpty(line)) {\n            break;\n        }\n\n        var headerLine = line.Split(new[] { ':' }, 2);\n        headers.Add(new KeyValuePair<string, string>(headerLine[0], headerLine[1].TrimStart()));\n    }\n\n    if (method == \"CONNECT\") {\n        var host = headers.FirstOrDefault(h => h.Key == \"Host\").Value;\n        if (host != null) {\n            requestUrl = new UriBuilder(\"https\", host).Uri;\n        }\n\n        await WriteResponseAsync(HttpStatusCode.OK);\n\n        var tunnel = new Tunnel(_client, _certifier);\n        if (await tunnel.TryConnectAsync(requestUrl)) {\n            _secureStream = tunnel.Stream;\n            return await ReadRequestAsync(requestUrl);\n        }\n    } else {\n        if (requestUrl != null) {\n            requestUrl = new Uri(requestUrl, path);\n        }\n\n        var request = (HttpWebRequest)WebRequest.Create(requestUrl);\n        request.Method = method;\n        request.Headers.Add(headers);\n\n        return request;\n    }\n\n    return null;\n}", "CodeBleu_score": 38.88580250377518}]}
{"instance_id": "6ed63f3b7a68", "generation_result": [{"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    var statusCode = HttpStatusCode.OK;\n    var statusDescription = \"OK\";\n\n    if (response is HttpWebResponse httpResponse) {\n        statusCode = httpResponse.StatusCode;\n        statusDescription = httpResponse.StatusDescription;\n    }\n\n    return SendResponseAsync(statusCode, statusDescription, response.Headers, content);\n}", "CodeBleu_score": 74.80798649645423}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    int statusCode = (int)HttpStatusCode.OK;\n    string description = HttpStatusCode.OK.ToString();\n\n    if (response is HttpWebResponse httpResponse) {\n        statusCode = (int)httpResponse.StatusCode;\n        description = httpResponse.StatusDescription;\n    }\n\n    return SendResponseAsync(statusCode, description, response.Headers, content);\n}", "CodeBleu_score": 64.72165281693479}, {"code": "public Task SendResponseAsync(WebResponse response, HttpContent content){\n\t    int statusCode = 200;\n    string statusDescription = \"OK\";\n\n    if (response is HttpWebResponse httpResponse) {\n        statusCode = (int)httpResponse.StatusCode;\n        statusDescription = httpResponse.StatusDescription;\n    }\n\n    return SendResponseAsync(statusCode, statusDescription, response.Headers, content);\n}", "CodeBleu_score": 65.63949840183852}]}
{"instance_id": "32d978074585", "generation_result": [{"code": "private bool SecureTunnel(string host){\n\t    try {\n        var cert = _certifier.GenerateCertificate(host);\n        _secureStream = new SslStream(GetStream(), false, (sender, certificate, chain, sslPolicyErrors) => true);\n        _secureStream.AuthenticateAsServer(cert, false, SslProtocols.Tls12, false);\n        return true;\n    }\n    catch (Exception ex) {\n        Console.WriteLine(ex.Message);\n        return false;\n    }\n}", "CodeBleu_score": 55.6481176992447}, {"code": "private bool SecureTunnel(string host){\n\t    try {\n        X509Certificate2 certificate = _certifier.GetOrCreateCertificate(host);\n        _secureStream = new SslStream(GetStream(), false, (sender, certificate, chain, errors) => true);\n        _secureStream.AuthenticateAsServer(certificate, false, SslProtocols.Tls12 | SslProtocols.Tls13, false);\n        return true;\n    } catch (Exception ex) {\n        // TODO: Log exception\n        return false;\n    }\n}", "CodeBleu_score": 61.570821605691584}, {"code": "private bool SecureTunnel(string host){\n\t    try {\n        var cert = _certifier.GenerateCertificate(host);\n        var sslStream = new SslStream(GetStream(), false, (sender, certificate, chain, sslPolicyErrors) => true);\n        sslStream.AuthenticateAsServer(cert, false, SslProtocols.Tls, false);\n        _secureStream = sslStream;\n        return true;\n    } catch (Exception ex) {\n        Console.WriteLine(ex.Message);\n        return false;\n    }\n}", "CodeBleu_score": 42.489148709896696}]}
{"instance_id": "67d773149e9b", "generation_result": [{"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n    Stream input = response.GetResponseStream();\n    return new StreamContent(input, response.ContentLength > 0 ? (int)response.ContentLength : 4096);\n}", "CodeBleu_score": 88.57003344316993}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n    Stream stream = response.GetResponseStream();\n    return new StreamContent(stream, response.ContentLength > 0 ? (int)response.ContentLength : 4096);\n}", "CodeBleu_score": 81.95044192674061}, {"code": "public static StreamContent ReadResponseContent(WebResponse response){\n\t    if (response.ContentLength == 0) {\n        response.GetResponseStream().Dispose();\n        return null;\n    }\n\n    Stream input = response.GetResponseStream();\n    int bufferSize = (int)response.ContentLength > 0 ? (int)response.ContentLength : 4096;\n\n    return new StreamContent(input, bufferSize);\n}", "CodeBleu_score": 58.99605892679887}]}
{"instance_id": "45d3c11325cf", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    var path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        using (OpenFileDialog ofd = new OpenFileDialog()) {\n            ofd.Filter = \"JSON Files (*.json)|*.json\";\n            if (ofd.ShowDialog() == DialogResult.OK) {\n                path = ofd.FileName;\n                ActivityConfigJsonPath.Text = path;\n            }\n        }\n    }\n\n    try {\n        LoadActivityConfig(path);\n        MessageBox.Show(Resources.Success, Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 52.43736190628089}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    // \u83b7\u53d6\u5e76\u53bb\u9664\u8def\u5f84\u4e24\u8fb9\u7684\u7a7a\u683c\n    var path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        // \u9009\u62e9\u6587\u4ef6\n        var dialog = new OpenFileDialog() {\n            Filter = \"JSON\u6587\u4ef6|*.json\",\n            Title = \"\u9009\u62e9ActivityConfig.json\u6587\u4ef6\",\n            Multiselect = false\n        };\n        if (dialog.ShowDialog() == DialogResult.OK) {\n            path = dialog.FileName;\n            ActivityConfigJsonPath.Text = path;\n        }\n    }\n    if (!string.IsNullOrEmpty(path)) {\n        try {\n            LoadActivityConfig(path);\n            MessageBox.Show(\"\u52a0\u8f7d\u6210\u529f\", Resources.Success, MessageBoxButtons.OK, MessageBoxIcon.Information);\n        } catch (Exception ex) {\n            MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }\n    }\n}", "CodeBleu_score": 62.44547130348397}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    var path = ActivityConfigJsonPath.Text.Trim();\n    if (string.IsNullOrEmpty(path)) {\n        using (var dialog = new OpenFileDialog()) {\n            dialog.Filter = \"JSON files (*.json)|*.json|All files (*.*)|*.*\";\n            dialog.Title = \"Select ActivityConfig.json\";\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                ActivityConfigJsonPath.Text = path;\n            }\n        }\n    }\n\n    if (!string.IsNullOrEmpty(path)) {\n        try {\n            LoadActivityConfig(path);\n            MessageBox.Show($\"Loaded successfully: {path}\", Resources.Information, MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n        catch (Exception ex) {\n            MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }\n    }\n}", "CodeBleu_score": 53.72470711984432}]}
{"instance_id": "f97d2ba1a807", "generation_result": [{"code": "private void LoadActivityConfig(string path){\n\t    // \u53cd\u5e8f\u5217\u5316\n    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\n    // \u66f4\u65b0\u5217\u8868\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    ListActivityConfigItems.Items.AddRange(ActivityConfigItems.Select(x => x.Name).ToArray());\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 55.91112005287533}, {"code": "private void LoadActivityConfig(string path){\n\t    // \u53cd\u5e8f\u5217\u5316\n    var json = File.ReadAllText(path);\n    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(json);\n\n    // \u66f4\u65b0\u5217\u8868\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    foreach (var item in ActivityConfigItems)\n        ListActivityConfigItems.Items.Add(item);\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 47.50219350667888}, {"code": "private void LoadActivityConfig(string path){\n\t    // \u53cd\u5e8f\u5217\u5316\n    ActivityConfigItems = JsonConvert.DeserializeObject<List<ActivityConfigItem>>(File.ReadAllText(path));\n\n    // \u66f4\u65b0\u5217\u8868\n    ListActivityConfigItems.BeginUpdate();\n    ListActivityConfigItems.Items.Clear();\n    foreach (var item in ActivityConfigItems)\n        ListActivityConfigItems.Items.Add(item);\n    ListActivityConfigItems.EndUpdate();\n}", "CodeBleu_score": 55.3556708171172}]}
{"instance_id": "8531cab08f38", "generation_result": [{"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    try {\n        var path = ActivityConfigJsonPath.Text.Trim();\n        if (path == string.Empty) {\n            var dialog = new SaveFileDialog {\n                FileName = \"ActivityConfig.json\",\n                Filter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n            };\n            var result = dialog.ShowDialog();\n            if (result == DialogResult.OK)\n                path = ActivityConfigJsonPath.Text = dialog.FileName;\n            else\n                return;\n        }\n\n        // \u5e8f\u5217\u5316\n        File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented));\n        MessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 86.81390591451097}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    try {\n        var path = ActivityConfigJsonPath.Text.Trim();\n        if (path == string.Empty) {\n            var dialog = new SaveFileDialog {\n                FileName = \"ActivityConfig.json\",\n                Filter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n            };\n            var result = dialog.ShowDialog();\n            if (result == DialogResult.OK)\n                path = ActivityConfigJsonPath.Text = dialog.FileName;\n            else\n                return;\n        }\n\n        // \u5e8f\u5217\u5316\n        File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems, Formatting.Indented));\n        MessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 86.97610839649354}, {"code": "private void BtnSave_Click(object sender, EventArgs e){\n\t    try {\n        var path = ActivityConfigJsonPath.Text.Trim();\n        if (path == string.Empty) {\n            var dialog = new SaveFileDialog {\n                FileName = \"ActivityConfig.json\",\n                Filter = \"ActivityConfig.Json (*.json)|*.json|All files (*.*)|*.*\",\n            };\n            var result = dialog.ShowDialog();\n            if (result == DialogResult.OK)\n                path = ActivityConfigJsonPath.Text = dialog.FileName;\n            else\n                return;\n        }\n\n        // \u5e8f\u5217\u5316\n        File.WriteAllText(path, JsonConvert.SerializeObject(ActivityConfigItems));\n        MessageBox.Show(\"OK\", Resources.Tips, MessageBoxButtons.OK);\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 81.26305069315035}]}
{"instance_id": "424111434149", "generation_result": [{"code": "private void LoadAllActivity(){\n\t    ListActivity.BeginUpdate();\n    foreach (var group in GameData.Activity) {\n        var groupControl = new ListViewGroup(group.Key);\n        ListActivity.Groups.Add(groupControl);\n        foreach (var activity in group.Value) {\n            ListActivity.Items.Add(new ListViewItem(new[] { activity.Key.ToString(), activity.Value }, groupControl));\n        }\n    }\n    ListActivity.EndUpdate();\n}", "CodeBleu_score": 44.474484749565}, {"code": "private void LoadAllActivity(){\n\t    ListActivity.BeginUpdate();\n    ListActivity.Groups.Clear();\n    foreach (var group in GameData.Activity.GroupBy(i => i.Value.ActivityType)) {\n        var listViewGroup = new ListViewGroup(group.Key.ToString());\n        ListActivity.Groups.Add(listViewGroup);\n        foreach (var item in group) {\n            var listViewItem = new ListViewItem(new[] { item.Key.ToString(), item.Value.Name });\n            listViewItem.Group = listViewGroup;\n            ListActivity.Items.Add(listViewItem);\n        }\n    }\n    ListActivity.EndUpdate();\n}", "CodeBleu_score": 41.93327508847283}, {"code": "private void LoadAllActivity(){\n\t    ListActivity.BeginUpdate();\n    foreach (var group in GameData.Activity) {\n        var groupControl = new ListViewGroup(group.Key.ToString());\n        ListActivity.Groups.Add(groupControl);\n        foreach (var item in group.Value) {\n            ListActivity.Items.Add(new ListViewItem(new[] { item.Key.ToString(), item.Value }) { Group = groupControl });\n        }\n    }\n    ListActivity.EndUpdate();\n}", "CodeBleu_score": 46.97959583325698}]}
{"instance_id": "51c5d7f71cb3", "generation_result": [{"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0)\n            return;\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    }\n    catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 88.60318924969829}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0) return;\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].SubItems[0].Text;\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 80.39523533252112}, {"code": "private void ListAllActivity_SelectedIndexChanged(object sender, EventArgs e){\n\t    try {\n        if (ListAllActivity.SelectedItems.Count == 0) return;\n        NUDActivityId.Text = ListAllActivity.SelectedItems[0].Text;\n    } catch (Exception ex) {\n        MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n}", "CodeBleu_score": 86.96653629192392}]}
{"instance_id": "8bed5c7884dc", "generation_result": [{"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    var path = TxtDropJsonPath.Text;\n    if (string.IsNullOrEmpty(path)) {\n        using (var dialog = new OpenFileDialog()) {\n            dialog.Filter = \"JSON Files (*.json)|*.json|All Files (*.*)|*.*\";\n            dialog.Title = \"Select a JSON file\";\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                TxtDropJsonPath.Text = path;\n                try {\n                    LoadBanners(path);\n                    MessageBox.Show(\"Loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                } catch (Exception ex) {\n                    MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 48.66815637722859}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    var path = TxtDropJsonPath.Text;\n    if (string.IsNullOrEmpty(path)) {\n        using (var dialog = new OpenFileDialog()) {\n            dialog.Filter = \"JSON Files (*.json)|*.json\";\n            dialog.Title = \"Select JSON File\";\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                TxtDropJsonPath.Text = path;\n                try {\n                    LoadBanners(path);\n                    MessageBox.Show(\"Loaded successfully.\", \"Success\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n                catch (Exception ex) {\n                    MessageBox.Show(ex.ToString(), \"Error\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 48.751896165906395}, {"code": "private void BtnLoad_Click(object sender, EventArgs e){\n\t    var path = TxtDropJsonPath.Text;\n    if (string.IsNullOrEmpty(path)) {\n        using (var dialog = new OpenFileDialog()) {\n            dialog.Title = Resources.SelectDropJson;\n            dialog.Filter = Resources.JsonFileFilter;\n            if (dialog.ShowDialog() == DialogResult.OK) {\n                path = dialog.FileName;\n                TxtDropJsonPath.Text = path;\n            }\n        }\n    }\n    if (!string.IsNullOrEmpty(path)) {\n        try {\n            LoadBanners(path);\n            MessageBox.Show(Resources.LoadSuccess, Resources.Info, MessageBoxButtons.OK, MessageBoxIcon.Information);\n        }\n        catch (Exception ex) {\n            MessageBox.Show(ex.ToString(), Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n        }\n    }\n}", "CodeBleu_score": 50.960927631975295}]}
{"instance_id": "0e39a56d211b", "generation_result": [{"code": "private void ShowDropList(List<DropData> dropList){\n\t    ListDropList.BeginUpdate();\n    ListDropList.Items.Clear();\n    if (dropList.Count > 0) {\n        ListDropList.Items.AddRange(dropList.ToArray());\n        ListDropList.SelectedIndex = 0;\n    }\n    ListDropList.EndUpdate();\n}", "CodeBleu_score": 53.919346350685736}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t    // \u66f4\u65b0\u5217\u8868\n    ListDropList.BeginUpdate();\n    ListDropList.Items.Clear();\n    if (dropList.Count > 0) {\n        ListDropList.Items.AddRange(dropList.ToArray());\n        ListDropList.SelectedIndex = 0;\n    }\n    ListDropList.EndUpdate();\n}", "CodeBleu_score": 55.83131065433312}, {"code": "private void ShowDropList(List<DropData> dropList){\n\t    // \u66f4\u65b0\u5217\u8868\n    ListDropList.BeginUpdate();\n    ListDropList.Items.Clear();\n    if (dropList.Count > 0) {\n        ListDropList.Items.AddRange(dropList.ToArray());\n        ListDropList.SelectedIndex = 0;\n    }\n    ListDropList.EndUpdate();\n}", "CodeBleu_score": 55.83131065433312}]}
{"instance_id": "60fd5605c44e", "generation_result": [{"code": "private void RemoveDrop(DropData data){\n\t    if (SelectedDropList.Count == 0) return;\n\n    foreach (var monsterId in SelectedMonsterIds()) {\n        if (Banners.TryGetValue(monsterId, out List<DropData> dropList)) {\n            RemoveDrop(dropList, data);\n        }\n    }\n\n    RemoveDrop(SelectedDropList, data);\n}", "CodeBleu_score": 42.8746131584604}, {"code": "private void RemoveDrop(DropData data){\n\t    if (SelectedDropList.Contains(data)) {\n        SelectedDropList.Remove(data);\n    }\n}", "CodeBleu_score": 12.497633391335283}, {"code": "private void RemoveDrop(DropData data){\n\t    ListDropData.BeginUpdate();\n    ListDropData.Items.Clear();\n    if (SelectedDropList.Count > 0) {\n        ListDropData.Items.AddRange(SelectedDropList.Select(it => it.ToString()).ToArray());\n        ListDropData.SelectedIndex = 0;\n    }\n    ListDropData.EndUpdate();\n}", "CodeBleu_score": 23.03227648492509}]}
{"instance_id": "475581af77bf", "generation_result": [{"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormMain_FormClosed enter\");\n    foreach (var page in Pages.Values) {\n        Logger.I(TAG, $\"{page.Name} OnClosed enter\");\n        page.OnClosed();\n        Logger.I(TAG, $\"{page.Name} OnClosed completed\");\n    }\n\n    Settings.Default.MainFormLocation = Location;\n    Settings.Default.MainFormSize = Size;\n    Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n    Settings.Default.WindowOpacity = (int)(Opacity * 100);\n    Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n    Settings.Default.Save();\n    Logger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 74.349694839699}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormMain_FormClosed enter\");\n\n    // \u904d\u5386\u6bcf\u4e00\u4e2a\u9875\u9762\u91cd\u65b0\u52a0\u8f7d\n    foreach (var page in Pages.Values) {\n        Logger.I(TAG, $\"{page.Name} OnClosed enter\");\n        page.OnClosed();\n        Logger.I(TAG, $\"{page.Name} OnClosed completed\");\n    }\n\n    // \u4fdd\u5b58\u8bbe\u7f6e\n    Settings.Default.MainFormLocation = Location;\n    Settings.Default.MainFormSize = Size;\n    Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n    Settings.Default.WindowOpacity = (int)Math.Round(Opacity * 100);\n    Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n    Settings.Default.Save();\n\n    Logger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 75.0364593804765}, {"code": "private void FormMain_FormClosed(object sender, FormClosedEventArgs e){\n\t    Logger.I(TAG, \"FormMain_FormClosed enter\");\n\n    foreach (var page in Pages.Values) {\n        Logger.I(TAG, $\"{page.Name} OnClosed enter\");\n        page.OnClosed();\n        Logger.I(TAG, $\"{page.Name} OnClosed completed\");\n    }\n\n    // \u4fdd\u5b58\u8bbe\u7f6e\n    Settings.Default.Save();\n    Logger.I(TAG, \"FormMain_FormClosed completed\");\n}", "CodeBleu_score": 79.45059699330332}]}
{"instance_id": "afd99ce2de2b", "generation_result": [{"code": " private void SaveSettings(){\n\t    Logger.I(TAG, \"SaveSettings enter\");\n    try {\n        // \u4fdd\u5b58\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\n        Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n        // \u4fdd\u5b58\u7a97\u4f53\u4f4d\u7f6e\n        Settings.Default.MainFormLocation = Location;\n        // \u4fdd\u5b58\u7a97\u4f53\u5927\u5c0f\n        Settings.Default.MainFormSize = Size;\n        // \u4fdd\u5b58\u5bfc\u822a\u5bb9\u5668\u95f4\u9694\u4f4d\u7f6e\n        Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n        // \u4fdd\u5b58\u7a97\u53e3\u7684\u4e0d\u900f\u660e\u5ea6\n        Settings.Default.WindowOpacity = (int) (Opacity * 100);\n        Settings.Default.Save();\n    } catch (Exception ex) {\n        Logger.E(TAG, \"Save settings error\", ex);\n        MessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n    Logger.I(TAG, \"SaveSettings completed\");\n}", "CodeBleu_score": 59.04217080829217}, {"code": " private void SaveSettings(){\n\t    Logger.I(TAG, \"SaveSettings enter\");\n    if (DesignMode) return;\n\n    // \u4fdd\u5b58\u7a97\u4f53\u4f4d\u7f6e\n    Settings.Default.MainFormLocation = Location;\n    Logger.I(TAG, \"Save window location: \" + Location);\n\n    // \u4fdd\u5b58\u7a97\u4f53\u5927\u5c0f\n    if (WindowState == FormWindowState.Normal)\n        Settings.Default.MainFormSize = Size;\n    else\n        Settings.Default.MainFormSize = default;\n    Logger.I(TAG, \"Save window size: \" + Settings.Default.MainFormSize);\n\n    // \u4fdd\u5b58\u5bfc\u822a\u5bb9\u5668\u95f4\u9694\u4f4d\u7f6e\n    Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n    Logger.I(TAG, \"Save NavContainer SplitterDistance: \" + NavContainer.SplitterDistance);\n\n    // \u4fdd\u5b58\u7a97\u53e3\u7684\u4e0d\u900f\u660e\u5ea6\n    Settings.Default.WindowOpacity = (int)(Opacity * 100);\n    Logger.I(TAG, \"Save window opacity: \" + Opacity);\n\n    // \u4fdd\u5b58\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\n    Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n\n    try\n    {\n        Settings.Default.Save();\n    }\n    catch (Exception ex)\n    {\n        Logger.E(TAG, \"Save settings error\", ex);\n        MessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n    Logger.I(TAG, \"SaveSettings completed\");\n}", "CodeBleu_score": 53.99391559637869}, {"code": " private void SaveSettings(){\n\t    Logger.I(TAG, \"SaveSettings enter\");\n    try {\n        // \u4fdd\u5b58\u81ea\u52a8\u590d\u5236\u9009\u9879\u72b6\u6001\n        Settings.Default.AutoCopy = ChkAutoCopy.Checked;\n        // \u4fdd\u5b58\u7a97\u4f53\u4f4d\u7f6e\n        Settings.Default.MainFormLocation = Location;\n        Logger.I(TAG, \"Save window location: \" + Location);\n        // \u4fdd\u5b58\u7a97\u4f53\u5927\u5c0f\n        if (WindowState == FormWindowState.Normal) {\n            Settings.Default.MainFormSize = Size;\n            Logger.I(TAG, \"Save window size: \" + Size);\n        } else if (WindowState == FormWindowState.Maximized) {\n            Settings.Default.MainFormSize = RestoreBounds.Size;\n            Logger.I(TAG, \"Save window size: \" + RestoreBounds.Size);\n        }\n        // \u4fdd\u5b58\u5bfc\u822a\u5bb9\u5668\u95f4\u9694\u4f4d\u7f6e\n        Settings.Default.NavContainerSplitterDistance = NavContainer.SplitterDistance;\n        Logger.I(TAG, \"Save NavContainer SplitterDistance: \" + NavContainer.SplitterDistance);\n        // \u4fdd\u5b58\u7a97\u53e3\u7684\u4e0d\u900f\u660e\u5ea6\n        Settings.Default.WindowOpacity = (int) (Opacity * 100);\n        Logger.I(TAG, \"Save window opacity: \" + Opacity);\n        // \u4fdd\u5b58\u8bbe\u7f6e\n        Settings.Default.Save();\n    } catch (Exception ex) {\n        Logger.W(TAG, \"Save settings failed.\", ex);\n        MessageBox.Show(Resources.SettingSaveError + ex.Message, Resources.Error, MessageBoxButtons.OK, MessageBoxIcon.Error);\n    }\n    Logger.I(TAG, \"SaveSettings completed\");\n}", "CodeBleu_score": 53.391082126165166}]}
{"instance_id": "597cf3c3cb9f", "generation_result": [{"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t    if (PageTabOrders != null) return PageTabOrders;\n    PageTabOrders = new List<Tuple<string, bool>>();\n    var orders = Settings.Default.PageTabOrders;\n    if (orders == null || orders.Length == 0) {\n        // \u5982\u679c\u6ca1\u6709\u627e\u5230\u9875\u9762\u987a\u5e8f\uff0c\u5219\u521b\u5efa\u9ed8\u8ba4\u7684\u6240\u6709\u9875\u9762\u53ef\u89c1\u7684\u5217\u8868\n        foreach (var page in Pages.Values) {\n            PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n        }\n    } else {\n        // \u8bfb\u53d6\u6bcf\u4e2a\u987a\u5e8f\uff0c\u89e3\u6790\u9875\u9762\u540d\u79f0\u548c\u53ef\u89c1\u6027\u72b6\u6001\n        foreach (var order in orders) {\n            var parts = order.Split('|');\n            if (parts.Length == 2) {\n                var pageName = parts[0];\n                var isVisible = bool.Parse(parts[1]);\n                PageTabOrders.Add(new Tuple<string, bool>(pageName, isVisible));\n            }\n        }\n    }\n    return PageTabOrders;\n}", "CodeBleu_score": 42.78189815569399}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t    if (PageTabOrders != null) return PageTabOrders;\n    PageTabOrders = new List<Tuple<string, bool>>();\n    var pageOrders = Settings.Default.PageTabOrders;\n    if (string.IsNullOrWhiteSpace(pageOrders)) {\n        foreach (var page in Pages.Values) {\n            PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n        }\n    } else {\n        var orders = pageOrders.Split('|');\n        foreach (var order in orders) {\n            var orderPair = order.Split(':');\n            if (orderPair.Length == 2) {\n                PageTabOrders.Add(new Tuple<string, bool>(orderPair[0], bool.Parse(orderPair[1])));\n            }\n        }\n    }\n    return PageTabOrders;\n}", "CodeBleu_score": 39.21924887392228}, {"code": "private List<Tuple<string, bool>> LoadPageTabOrders(){\n\t    if (PageTabOrders != null) return PageTabOrders;\n    PageTabOrders = new List<Tuple<string, bool>>();\n    if (Settings.Default.PageTabOrders == null || Settings.Default.PageTabOrders.Count == 0) {\n        foreach (var page in Pages.Values) {\n            PageTabOrders.Add(new Tuple<string, bool>(page.Name, true));\n        }\n    } else {\n        foreach (var order in Settings.Default.PageTabOrders) {\n            var name = order.Split(':')[0];\n            var visible = bool.Parse(order.Split(':')[1]);\n            PageTabOrders.Add(new Tuple<string, bool>(name, visible));\n        }\n    }\n    return PageTabOrders;\n}", "CodeBleu_score": 37.887521673663386}]}
{"instance_id": "952af4cba521", "generation_result": [{"code": "public override void Save(FrameInfo info){\n\t    try {\n        LogWriter.Log($\"Frame {FrameCount} saved. Data length: {info.DataLength} bytes. File stream length: {Stream.Length} bytes.\");\n        CompressionStream.Write(info.Data, 0, info.DataLength);\n        CompressionStream.Flush();\n        info.Data = null;\n        Project.Frames.Add(info);\n    } catch (Exception ex) {\n        LogWriter.Log(ex, \"It was not possible to save the frame.\");\n        MajorCrashHappened = true;\n        if (IsAcceptingFrames)\n            Application.Current.Dispatcher.Invoke(() => OnError.Invoke(ex));\n    }\n}", "CodeBleu_score": 45.68347321320039}, {"code": "public override void Save(FrameInfo info){\n\t    LogWriter.Log($\"Frame {info.Index} data length: {info.DataLength}\");\n    LogWriter.Log($\"Current stream length: {Stream.Length}\");\n\n    CompressionStream.Write(info.Data, 0, info.DataLength);\n    CompressionStream.Flush();\n\n    info.Data = null;\n\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 50.48138978859236}, {"code": "public override void Save(FrameInfo info){\n\t    LogWriter.Log($\"Saving frame {FrameCount} with length {info.DataLength}.\");\n    LogWriter.Log($\"Current stream length: {Stream.Length}.\");\n\n    CompressionStream.Write(info.Data, 0, info.DataLength);\n    CompressionStream.Flush();\n\n    info.Data = null;\n\n    Project.Frames.Add(info);\n}", "CodeBleu_score": 50.18157231125857}]}
{"instance_id": "f9417f7056c0", "generation_result": [{"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    //Create a surface to map the texture for CPU access.\n    Surface surface = texture.AsSurface();\n\n    //Map the texture for CPU access.\n    MappedRect mappedRect = surface.Map(MapMode.Write, MapFlags.None);\n\n    //Get the pointer to the texture data.\n    IntPtr data = mappedRect.DataPointer;\n\n    //Get the pitch of the texture.\n    int pitch = mappedRect.Pitch;\n\n    //Draw the cursor based on its type.\n    if (info.Type == 1) {\n        DrawMonochromeCursor(data, pitch, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    } else if (info.Type == 2) {\n        DrawColorCursor(data, pitch, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    } else if (info.Type == 3) {\n        DrawMaskedColorCursor(data, pitch, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n    }\n\n    //Unmap the texture to release the CPU access.\n    surface.Unmap();\n}", "CodeBleu_score": 41.263832250037915}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    // Create a surface to map the texture for CPU access.\n    Surface surface = texture.Map(0, MapMode.Write);\n    try {\n        // Get the surface data pointer.\n        DataPointer dataPointer = surface.DataPointer;\n\n        // Handle the cursor type based on the type field in the OutputDuplicatePointerShapeInformation structure.\n        switch (info.Type) {\n            case 0:\n                // Monochrome cursor.\n                DrawMonochromeCursor(dataPointer, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n                break;\n            case 1:\n                // Color cursor.\n                DrawColorCursor(dataPointer, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n                break;\n            case 2:\n                // Masked color cursor.\n                DrawMaskedColorCursor(dataPointer, info, buffer, leftCut, topCut, cursorWidth, cursorHeight);\n                break;\n            default:\n                // Unknown cursor type.\n                break;\n        }\n    }\n    finally {\n        // Unmap the surface to release the CPU access.\n        texture.Unmap(0);\n    }\n}", "CodeBleu_score": 47.265258001250665}, {"code": "private void DrawCursorShape(Texture2D texture, OutputDuplicatePointerShapeInformation info, byte[] buffer, int leftCut, int topCut, int cursorWidth, int cursorHeight){\n\t    //Create a surface to map the texture for CPU access.\n    Surface surface = texture.QueryInterface<Surface>();\n    //Lock the surface for CPU access.\n    DataRectangle lockedRectangle;\n    surface.Map(MapMode.Write, MapFlags.None, out lockedRectangle);\n\n    //Get the pointer to the texture data.\n    IntPtr dataPointer = lockedRectangle.DataPointer;\n    //Get the pitch of the texture.\n    int pitch = lockedRectangle.Pitch;\n\n    //Draw the cursor based on its type.\n    switch (info.Type) {\n        //If the cursor is monochrome, call the DrawMonochromeCursor function.\n        case 1:\n            DrawMonochromeCursor(dataPointer, pitch, buffer, info.Width, info.Height, leftCut, topCut, cursorWidth, cursorHeight);\n            break;\n        //If the cursor is color, call the DrawColorCursor function.\n        case 2:\n            DrawColorCursor(dataPointer, pitch, buffer, info.Width, info.Height, leftCut, topCut, cursorWidth, cursorHeight);\n            break;\n        //If the cursor is masked color, call the DrawMaskedColorCursor function.\n        case 3:\n            DrawMaskedColorCursor(dataPointer, pitch, buffer, info.Width, info.Height, leftCut, topCut, cursorWidth, cursorHeight);\n            break;\n    }\n\n    //Unlock the surface to release the CPU access.\n    surface.Unmap();\n}", "CodeBleu_score": 59.72704532897993}]}
{"instance_id": "3eb27d345e3c", "generation_result": [{"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new Imgur();\n        case UploadDestinations.Yandex:\n            return new YandexDisk();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 82.78994661271675}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new Imgur();\n        case UploadDestinations.Yandex:\n            return new YandexDisk();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 82.78994661271675}, {"code": "public static IUploader CreateCloud(UploadDestinations service){\n\t    switch (service) {\n        case UploadDestinations.Imgur:\n            return new Imgur();\n        case UploadDestinations.Yandex:\n            return new YandexDisk();\n        default:\n            throw new NotImplementedException();\n    }\n}", "CodeBleu_score": 82.78994661271675}]}
{"instance_id": "8e8c5ad2d18c", "generation_result": [{"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        // Check if the file exists.\n        if (!File.Exists(path))\n            throw new FileNotFoundException(\"The file was not found.\", path);\n\n        // Get the upload link.\n        var link = await GetUploadLinkAsync(preset, path, cancellationToken);\n\n        // Check if the link is valid.\n        if (link == null)\n            throw new UploadException(\"The upload link was not found.\");\n\n        // Open the file stream.\n        using var fileStream = File.OpenRead(path);\n\n        // Upload the file.\n        var content = new StreamContent(fileStream);\n        var response = await _httpClient.PutAsync(link.Href, content, cancellationToken);\n\n        // Check if the upload was successful.\n        if (!response.IsSuccessStatusCode)\n            throw new UploadException(\"The upload failed.\");\n\n        // Get the download link.\n        var downloadLink = await GetDownloadLinkAsync(preset, path, cancellationToken);\n\n        // Create the history record.\n        var history = new YandexDiskHistory()\n        {\n            Preset = preset,\n            FileName = Path.GetFileName(path),\n            FileSize = new FileInfo(path).Length,\n            UploadDate = DateTime.Now,\n            DownloadLink = downloadLink.Href,\n        };\n\n        return history;\n    }", "CodeBleu_score": 51.13307521539502}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (!File.Exists(path))\n            throw new UploadException($\"The file \\\"{path}\\\" does not exist.\");\n\n        var uploadLink = await GetUploadLinkAsync(preset);\n\n        if (string.IsNullOrEmpty(uploadLink))\n            throw new UploadException($\"Invalid upload link.\");\n\n        using (var fileStream = File.OpenRead(path))\n        {\n            var content = new StreamContent(fileStream);\n\n            var response = await _httpClient.PutAsync(uploadLink, content, cancellationToken);\n\n            if (!response.IsSuccessStatusCode)\n                throw new UploadException($\"Failed to upload the file to Yandex Disk. Status code: {response.StatusCode}\");\n        }\n\n        var downloadLink = await GetDownloadLinkAsync(preset);\n\n        if (string.IsNullOrEmpty(downloadLink))\n            throw new UploadException($\"Invalid download link.\");\n\n        var history = new YandexHistory()\n        {\n            UploadDate = DateTime.Now,\n            PresetName = preset.Name,\n            FileName = Path.GetFileName(path),\n            FileSize = FileSizeHelper.FormatBytes(new FileInfo(path).Length),\n            ServiceName = preset.ServiceName,\n            FileUrl = downloadLink,\n            ThumbnailUrl = downloadLink,\n            DeleteUrl = downloadLink\n        };\n\n        return history;\n    }", "CodeBleu_score": 49.60118351693941}, {"code": "public async Task<IHistory> UploadFileAsync(IUploadPreset preset, string path, CancellationToken cancellationToken, IProgress<double> progressCallback = null)\n    {{\n\t        if (!File.Exists(path))\n            throw new UploadException(UploadException.ErrorType.FileNotFound, \"The file was not found.\");\n\n        var uploadLink = await GetUploadLinkAsync(preset);\n\n        if (string.IsNullOrEmpty(uploadLink))\n            throw new UploadException(UploadException.ErrorType.UploadLink, \"The upload link is invalid.\");\n\n        using var fileStream = File.OpenRead(path);\n        var fileSize = fileStream.Length;\n        var fileName = Path.GetFileName(path);\n\n        using var client = new HttpClient();\n        var request = new HttpRequestMessage(HttpMethod.Put, uploadLink);\n        request.Content = new StreamContent(fileStream);\n\n        using var response = await client.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken);\n        if (!response.IsSuccessStatusCode)\n            throw new UploadException(UploadException.ErrorType.Upload, \"The upload failed.\");\n\n        var downloadLink = await GetDownloadLinkAsync(preset, fileName);\n\n        var history = new YandexHistory(preset)\n        {\n            FileName = fileName,\n            FileSize = fileSize,\n            UploadDate = DateTime.Now,\n            UploadLink = uploadLink,\n            DownloadLink = downloadLink\n        };\n\n        return history;\n    }", "CodeBleu_score": 52.990723516790126}]}
{"instance_id": "0c0b742bf9e6", "generation_result": [{"code": "internal virtual void StartCapture(){\n\t    if (HasFixedDelay()) {\n        // Starts the frame rate with a fixed delay.\n        FrameRate.Start(GetFixedDelay());\n    } else {\n        // Starts the frame rate with a variable delay.\n        FrameRate.Start();\n    }\n\n    // Indicates that the capture process is not imprecise.\n    HasImpreciseCapture = false;\n\n    // If forced garbage collection is enabled in the user settings, start the garbage collection timer.\n    if (UserSettings.All.ForceGarbageCollection) {\n        GarbageTimer.Start();\n    }\n\n    // Lock the user settings.\n    UserSettings.All.Lock();\n\n    // Create a cancellation token for the capture process.\n    _captureToken = new CancellationTokenSource();\n\n    // Run the capture loop in a new task using the specified capture interval.\n    Task.Run(() => CaptureLoop(GetCaptureInterval()), _captureToken.Token);\n}", "CodeBleu_score": 76.23891402393654}, {"code": "internal virtual void StartCapture(){\n\t    // Set the initial delay based on the capture frequency.\n    int initialDelay = GetCaptureInterval();\n\n    // Set the initial delay to the fixed delay if it's enabled.\n    if (HasFixedDelay()) {\n        initialDelay = GetFixedDelay();\n    }\n\n    // Set the HasImpreciseCapture flag to false.\n    HasImpreciseCapture = false;\n\n    // Start the garbage collection timer if it's enabled.\n    if (UserSettings.All.ForceGarbageCollection) {\n        GarbageTimer.Start();\n    }\n\n    // Lock the user settings to prevent concurrent access.\n    lock (UserSettings.All) {\n        // Create a new cancellation token for the capture process.\n        _captureToken = new CancellationTokenSource();\n\n        // Run the capture loop in a new task using the specified capture interval.\n        Task.Run(async () => {\n            // Wait for the initial delay before starting the capture loop.\n            await Task.Delay(initialDelay, _captureToken.Token);\n\n            // Loop until the cancellation token is cancelled.\n            while (!_captureToken.IsCancellationRequested) {\n                // Capture a single frame.\n                CaptureFrame();\n\n                // Wait for the specified capture interval before capturing the next frame.\n                await Task.Delay(GetCaptureInterval(), _captureToken.Token);\n            }\n        }, _captureToken.Token);\n    }\n}", "CodeBleu_score": 46.341837787188005}, {"code": "internal virtual void StartCapture(){\n\t    if (UserSettings.All.OnlyCaptureChanges) {\n        if (UserSettings.All.UseMemoryCache)\n            Capture = new DirectChangedCachedCapture();\n        else\n            Capture = new DirectChangedImageCapture();\n    } else {\n        if (UserSettings.All.UseMemoryCache)\n            Capture = new DirectCachedCapture();\n        else\n            Capture = new DirectImageCapture();\n    }\n\n    if (HasFixedDelay()) {\n        Capture.Delay = GetFixedDelay();\n    }\n\n    HasImpreciseCapture = false;\n\n    if (UserSettings.All.EnableGarbageCollector)\n        GarbageTimer.Start();\n\n    UserSettings.All.Lock();\n\n    _captureToken = new CancellationTokenSource();\n\n    Task.Run(async () => {\n        while (!_captureToken.IsCancellationRequested) {\n            var sw = Stopwatch.StartNew();\n\n            try {\n                if (HasFixedDelay()) {\n                    await Task.Delay(Capture.Delay, _captureToken.Token);\n                } else {\n                    await Task.Delay(GetCaptureInterval(), _captureToken.Token);\n                }\n\n                if (_captureToken.IsCancellationRequested)\n                    break;\n\n                Capture.Capture();\n            } catch (TaskCanceledException) {\n                // The task was canceled.\n            } finally {\n                sw.Stop();\n\n                if (HasFixedDelay()) {\n                    Capture.Delay = GetFixedDelay() - (int)sw.ElapsedMilliseconds;\n\n                    if (Capture.Delay < 0)\n                        Capture.Delay = 0;\n                }\n            }\n        }\n    }, _captureToken.Token);\n}", "CodeBleu_score": 43.56373990588612}]}
{"instance_id": "8f8be335465f", "generation_result": [{"code": "private void CaptureWithCursor(int interval){\n\t    var stopwatch = new Stopwatch();\n    stopwatch.Start();\n\n    while (!_captureToken.IsCancellationRequested) {\n        stopwatch.Restart();\n\n        var frame = new Frame(HasFixedDelay(), GetFixedDelay());\n        frame.HasCursor = true;\n\n        KeyList.Clear();\n\n        Capture.Capture(frame);\n\n        FrameCount++;\n\n        if (stopwatch.ElapsedMilliseconds < interval) {\n            var sleepTime = (int)(interval - stopwatch.ElapsedMilliseconds);\n\n            for (var i = 0; i < sleepTime; i++) {\n                if (_captureToken.IsCancellationRequested) {\n                    break;\n                }\n\n                Thread.Sleep(1);\n            }\n        }\n\n        stopwatch.Stop();\n    }\n}", "CodeBleu_score": 45.40263575630824}, {"code": "private void CaptureWithCursor(int interval){\n\t    var stopwatch = new Stopwatch();\n    stopwatch.Start();\n\n    while (!_captureToken.Token.IsCancellationRequested) {\n        stopwatch.Restart();\n\n        var frame = new Frame(Capture.CaptureCursor(), true, KeyList.ToArray());\n        KeyList.Clear();\n\n        Capture.Capture(frame);\n        FrameCount++;\n\n        if (stopwatch.ElapsedMilliseconds < interval) {\n            var sleep = interval - stopwatch.ElapsedMilliseconds;\n\n            for (var i = 0; i < sleep; i++) {\n                Thread.Sleep(1);\n\n                if (_captureToken.Token.IsCancellationRequested)\n                    break;\n            }\n        }\n\n        stopwatch.Stop();\n    }\n\n    stopwatch.Stop();\n}", "CodeBleu_score": 50.65654547351907}, {"code": "private void CaptureWithCursor(int interval){\n\t    Stopwatch sw = new Stopwatch();\n    sw.Start();\n\n    while (!_captureToken.IsCancellationRequested) {\n        sw.Restart();\n\n        using (var frame = new Frame(true)) {\n            KeyList.Clear();\n\n            Capture.Capture(frame);\n\n            frame.FrameNumber = ++FrameCount;\n        }\n\n        if (sw.ElapsedMilliseconds < interval) {\n            for (int i = 1; i <= interval - sw.ElapsedMilliseconds; i++) {\n                if (_captureToken.IsCancellationRequested)\n                    break;\n\n                Thread.Sleep(1);\n            }\n        }\n    }\n\n    sw.Stop();\n}", "CodeBleu_score": 49.50965645007811}]}
{"instance_id": "8ad9c7b2a317", "generation_result": [{"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Child;\n    if (child == null) return arrangeSize;\n\n    // Use the public Padding property if it's set\n    var padding = Padding;\n    if (padding.Equals(new Thickness())) {\n        padding = DefaultPadding;\n    }\n\n    var childWidth = arrangeSize.Width;\n    var childHeight = arrangeSize.Height;\n\n    // If there is an actual constraint, then reserve space for the chrome\n    if (!double.IsInfinity(childWidth)) {\n        childWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n    }\n\n    if (!double.IsInfinity(childHeight)) {\n        childHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n    }\n\n    child.Arrange(new Rect(padding.Left, padding.Top, childWidth, childHeight));\n    return arrangeSize;\n}", "CodeBleu_score": 79.98925171224172}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        // Revert to the Border implementation\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Child;\n    if (child == null) return arrangeSize;\n\n    // Use the public Padding property if it's set\n    var padding = Padding;\n    if (padding.Equals(new Thickness()))\n        padding = DefaultPadding;\n\n    var childWidth = arrangeSize.Width;\n    var childHeight = arrangeSize.Height;\n\n    // If there is an actual constraint, then reserve space for the chrome\n    if (!double.IsInfinity(childWidth)) {\n        childWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n    }\n\n    if (!double.IsInfinity(childHeight)) {\n        childHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n    }\n\n    child.Arrange(new Rect(new Point(padding.Left, padding.Top), new Size(childWidth, childHeight)));\n    return arrangeSize;\n}", "CodeBleu_score": 72.92462265983846}, {"code": "protected override Size ArrangeOverride(Size arrangeSize){\n\t    if (UsingBorderImplementation) {\n        // Revert to the Border implementation\n        return base.ArrangeOverride(arrangeSize);\n    }\n\n    var child = Child;\n    if (child == null) return arrangeSize;\n\n    // Use the public Padding property if it's set\n    var padding = Padding;\n    if (padding.Equals(new Thickness())) {\n        padding = DefaultPadding;\n    }\n\n    var childWidth = arrangeSize.Width;\n    var childHeight = arrangeSize.Height;\n\n    // If there is an actual constraint, then reserve space for the chrome\n    if (!double.IsInfinity(childWidth)) {\n        childWidth = Math.Max(0.0, childWidth - padding.Left - padding.Right);\n    }\n\n    if (!double.IsInfinity(childHeight)) {\n        childHeight = Math.Max(0.0, childHeight - padding.Top - padding.Bottom);\n    }\n\n    child.Arrange(new Rect(new Point(padding.Left, padding.Top), new Size(childWidth, childHeight)));\n    return arrangeSize;\n}", "CodeBleu_score": 76.11799544011956}]}
{"instance_id": "719b23bc4229", "generation_result": [{"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValueIfEmpty;\n            return;\n        }\n    }\n\n    _ignore = true;\n\n    Value = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n    _ignore = false;\n\n    Text = Value == EmptyIfValue ? \"\" : string.Format(CultureInfo.CurrentCulture, _format, Value);\n}", "CodeBleu_score": 67.99311624115369}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValueIfEmpty;\n            return;\n        }\n\n        _ignore = true;\n        Value = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n        _ignore = false;\n    }\n\n    Text = string.Format(CultureInfo.CurrentCulture, _format, Value * Scale);\n}", "CodeBleu_score": 58.32100581740978}, {"code": "protected override void OnLostFocus(RoutedEventArgs e){\n\t    base.OnLostFocus(e);\n\n    if (!UpdateOnInput) {\n        if (string.IsNullOrEmpty(Text) || !IsTextAllowed(Text)) {\n            Value = DefaultValueIfEmpty;\n            return;\n        }\n\n        _ignore = true;\n\n        Value = Math.Round(Convert.ToDecimal(Text, CultureInfo.CurrentCulture) / Scale, Decimals);\n\n        _ignore = false;\n    }\n\n    Text = Value == EmptyIfValue ? \"\" : string.Format(CultureInfo.CurrentCulture, _format, Value * Scale);\n}", "CodeBleu_score": 64.27102541534293}]}
{"instance_id": "4bdfdcf8e5ea", "generation_result": [{"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    base.OnKeyDown(e);\n\n    if (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n    }\n}", "CodeBleu_score": 79.7285210315273}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n    }\n\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 86.4567462503703}, {"code": "protected override void OnKeyDown(KeyEventArgs e){\n\t    if (e.Key == Key.Enter || e.Key == Key.Return) {\n        e.Handled = true;\n        MoveFocus(new TraversalRequest(FocusNavigationDirection.Next));\n    }\n    base.OnKeyDown(e);\n}", "CodeBleu_score": 86.4567462503703}]}
{"instance_id": "e9d822d22392", "generation_result": [{"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (IsMouseCaptured && e.LeftButton == MouseButtonState.Pressed) {\n        switch (DrawingMode) {\n            case DrawingModes.Select:\n                if ((Keyboard.Modifiers & ModifierKeys.Control) == 0) {\n                    RemoveAllAdorners();\n                    _selectedShapes.Clear();\n                }\n\n                if (_isLeftToRight) {\n                    Selection = new Rect(_startPoint, new Point(e.GetPosition(this).X, Selection.Bottom));\n                }\n                else if (_isRightToLeft) {\n                    Selection = new Rect(e.GetPosition(this), new Point(_startPoint.X, Selection.Bottom));\n                }\n                else if (_isTopToBottom) {\n                    Selection = new Rect(_startPoint, new Point(Selection.Right, e.GetPosition(this).Y));\n                }\n                else if (_isBottomToTop) {\n                    Selection = new Rect(e.GetPosition(this), new Point(Selection.Right, _startPoint.Y));\n                }\n\n                break;\n            case DrawingModes.Shape:\n                CalculateOrientation(_startPoint, e.GetPosition(this));\n\n                RenderRegion = new Rect(_startPoint, e.GetPosition(this));\n\n                RenderShape();\n\n                break;\n        }\n    }\n\n    e.Handled = true;\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 37.27285201396568}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t", "CodeBleu_score": 0.7201224411392697}, {"code": "protected override void OnMouseMove(MouseEventArgs e){\n\t    if (IsMouseCaptured && e.LeftButton == MouseButtonState.Pressed) {\n        switch (DrawingMode) {\n            case DrawingModes.Select: {\n                if ((Keyboard.Modifiers & ModifierKeys.Control) == 0) {\n                    RemoveAllAdorners();\n                    _selectedShapes.Clear();\n                }\n\n                //When the user clicks exactly on top of a shape, it will be selected.\n                var hitTest = _mainCanvas.Children.OfType<Shape>().Where(w => w.Tag == null).FirstOrDefault(f => f.RenderedGeometry.FillContains(e.GetPosition(f)));\n\n                if (hitTest != null) {\n                    SelectShape(hitTest);\n                } else {\n                    //Starts drawing selection retangle.\n                    Selection = new Rect(_startPoint, e.GetPosition(this));\n                }\n\n                break;\n            }\n            case DrawingModes.Shape: {\n                RenderRegion = new Rect(_startPoint, e.GetPosition(this));\n\n                CalculateOrientation(_startPoint, e.GetPosition(this));\n                RenderShape();\n\n                break;\n            }\n        }\n    }\n\n    e.Handled = true;\n    base.OnMouseMove(e);\n}", "CodeBleu_score": 27.56581378318515}]}
{"instance_id": "b853f670928a", "generation_result": [{"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (!(sender is Thumb)) return;\n\n    e.Handled = true;\n\n    //Change the size by the amount the user drags the cursor.\n    var width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\n    var height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\n    var left = Canvas.GetLeft(_adornedElement);\n\n    if (left + width > _parent.ActualWidth)\n        width = _parent.ActualWidth - left;\n\n    if (Canvas.GetTop(_adornedElement) + height > _parent.ActualHeight)\n        height = _parent.ActualHeight - Canvas.GetTop(_adornedElement);\n\n    RaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height);\n\n    _adornedElement.Height = height;\n    _adornedElement.Width = width;\n\n    AfterManipulation();\n}", "CodeBleu_score": 81.18677504294281}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (!(sender is Thumb)) return;\n\n    e.Handled = true;\n\n    //Change the size by the amount the user drags the cursor.\n    var width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\n    var height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\n\n    if (Canvas.GetLeft(_adornedElement) + width > _parent.ActualWidth)\n        width = _parent.ActualWidth - Canvas.GetLeft(_adornedElement);\n\n    if (Canvas.GetTop(_adornedElement) + height > _parent.ActualHeight)\n        height = _parent.ActualHeight - Canvas.GetTop(_adornedElement);\n\n    RaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height);\n\n    _adornedElement.Height = height;\n    _adornedElement.Width = width;\n\n    AfterManipulation();\n}", "CodeBleu_score": 71.64379102002044}, {"code": "private void HandleBottomRight(object sender, DragDeltaEventArgs e){\n\t    if (!(sender is Thumb)) return;\n\n    e.Handled = true;\n\n    //Change the size by the amount the user drags the cursor.\n\n    var width = Math.Max(_adornedElement.DesiredSize.Width + e.HorizontalChange, 10);\n    var height = Math.Max(_adornedElement.DesiredSize.Height + e.VerticalChange, 10);\n    var left = Canvas.GetLeft(_adornedElement);\n    var top = Canvas.GetTop(_adornedElement);\n\n    if (left + width > _parent.ActualWidth)\n        width = _parent.ActualWidth - left;\n\n    if (top + height > _parent.ActualHeight)\n        height = _parent.ActualHeight - top;\n\n    RaiseManipulatedEvent(width - _adornedElement.Width, height - _adornedElement.Height);\n\n    Canvas.SetLeft(_adornedElement, left);\n    Canvas.SetTop(_adornedElement, top);\n    _adornedElement.Height = height;\n    _adornedElement.Width = width;\n\n    AfterManipulation();\n}", "CodeBleu_score": 81.28178822983575}]}
{"instance_id": "4f79040b5f53", "generation_result": [{"code": "public ComboBoxesViewModel(){\n\t        Items = Enumerable.Range(0, 1000).Select(i => i.ToString()).ToList();\n        ShortItems = new List<string> { \\\"Item 1\\\", \\\"Item 2\\\", \\\"Item 3\\\" };\n        SelectedValueOne = 500;\n        SelectedTextTwo = null;\n        SelectedValidationOutlined = null;\n        SelectedValidationFilled = null;\n        LongItems = new List<string>();\n        for (int i = 0; i < 1000; i++) {\n            LongItems.Add(Path.GetRandomFileName());\n        }\n    }", "CodeBleu_score": 57.8391327806274}, {"code": "public ComboBoxesViewModel(){\n\t    ItemsOne = new List<int>();\n    for (int i = 0; i < 1000; i++) {\n        ItemsOne.Add(i);\n    }\n\n    ItemsTwo = new List<string>() { \\\"Item 1\\\", \\\"Item 2\\\", \\\"Item 3\\\" };\n    SelectedValueOne = 500;\n    SelectedTextTwo = null;\n    SelectedValidationOutlined = null;\n    SelectedValidationFilled = null;\n\n    ItemsThree = new List<string>();\n    for (int i = 0; i < 1000; i++) {\n        ItemsThree.Add(Path.GetRandomFileName());\n    }\n}", "CodeBleu_score": 50.28720263446769}, {"code": "public ComboBoxesViewModel(){\n\t        Items = Enumerable.Range(0, 1000).Select(i => i).ToList();\n        ItemsTwo = new List<string>\n        {\n            \\\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\\\",\n            \\\"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\\\",\n            \\\"Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\\\",\n            \\\"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\\\"\n        };\n        SelectedValueOne = 500;\n        SelectedTextTwo = null;\n        SelectedValidationOutlined = null;\n        SelectedValidationFilled = null;\n    }", "CodeBleu_score": 34.226652990930084}]}
{"instance_id": "ca40ae89e1a2", "generation_result": [{"code": "private async Task RunDialog() {\n\t    var view = new SampleDialog { DataContext = new SampleDialogViewModel() };\n\n    var result = await DialogHost.Show(view, \"RootDialog\", (sender, args) =>\n    {\n        Debug.WriteLine($\"Closing dialog. {args.Parameter?.ToString() ?? \"Unknown parameter\"}\");\n    }, (sender, args) =>\n    {\n        Debug.WriteLine($\"Closed dialog. {args.Parameter?.ToString() ?? \"Unknown parameter\"}\");\n    });\n\n    Debug.WriteLine($\"Dialog result: {result}\");\n}", "CodeBleu_score": 32.9023440738749}, {"code": "private async Task RunDialog() {\n\t    var view = new SampleDialog\n    {\n        DataContext = new SampleDialogViewModel()\n    };\n\n    //show the dialog\n    var result = await DialogHost.Show(view, \"RootDialog\", ClosingEventHandler);\n\n    //log the result\n    Debug.WriteLine($\"Dialog result: {result}\");\n}", "CodeBleu_score": 35.301720931158464}, {"code": "private async Task RunDialog() {\n\t    var view = new SampleDialog { DataContext = new SampleDialogViewModel() };\n    var result = await DialogHost.Show(view, \"RootDialog\", ClosingEventHandler);\n    Debug.WriteLine($\"Dialog result: {result}\");\n}", "CodeBleu_score": 33.36664410214068}]}
{"instance_id": "d82f32ed6e43", "generation_result": [{"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    var paletteHelper = new PaletteHelper();\n    var theme = paletteHelper.GetTheme();\n    modificationAction?.Invoke(theme);\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.80807886702394}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    var paletteHelper = new PaletteHelper();\n    var theme = paletteHelper.GetTheme();\n\n    modificationAction?.Invoke(theme);\n\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.80807886702394}, {"code": "private static void ModifyTheme(Action<Theme> modificationAction){\n\t    var paletteHelper = new PaletteHelper();\n    var theme = paletteHelper.GetTheme();\n\n    modificationAction?.Invoke(theme);\n\n    paletteHelper.SetTheme(theme);\n}", "CodeBleu_score": 75.80807886702394}]}
{"instance_id": "8cf8182d763e", "generation_result": [{"code": "private object? CreateContent(){\n\t    var content = Activator.CreateInstance(_contentType);\n    if (_dataContext != null && content is FrameworkElement element)\n        element.DataContext = _dataContext;\n    return content;\n}", "CodeBleu_score": 85.92486925509368}, {"code": "private object? CreateContent(){\n\t    var content = Activator.CreateInstance(_contentType);\n    if (_dataContext != null && content is FrameworkElement element)\n        element.DataContext = _dataContext;\n    return content;\n}", "CodeBleu_score": 85.92486925509368}, {"code": "private object? CreateContent(){\n\t    var content = Activator.CreateInstance(_contentType);\n    if (_dataContext != null && content is FrameworkElement element)\n        element.DataContext = _dataContext;\n    return content;\n}", "CodeBleu_score": 85.92486925509368}]}
{"instance_id": "96cb26c3eacc", "generation_result": [{"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    IsSample4DialogOpen = true;\n\n    //lets run a fake operation for 3 seconds then close this baby.\n    Task.Delay(TimeSpan.FromSeconds(3)).ContinueWith((t, _) => IsSample4DialogOpen = false, null, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 84.40180948844241}, {"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    IsSample4DialogOpen = true;\n\n    Task.Delay(TimeSpan.FromSeconds(3))\n        .ContinueWith((t, _) => IsSample4DialogOpen = false, null,\n            TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 88.35930833066095}, {"code": "private void AcceptSample4Dialog(object? _){\n\t    Sample4Content = new SampleProgressDialog();\n    IsSample4DialogOpen = true;\n\n    //lets run a fake operation for 3 seconds then close this baby.\n    Task.Delay(TimeSpan.FromSeconds(3)).ContinueWith((t, _) => IsSample4DialogOpen = false, null, TaskScheduler.FromCurrentSynchronizationContext());\n}", "CodeBleu_score": 84.40180948844241}]}
{"instance_id": "7afa49e4a449", "generation_result": [{"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Device.Id == device.Id && trigger.Option == option) {\n            Triggered?.Invoke(trigger);\n        }\n    }\n}", "CodeBleu_score": 71.49536281106852}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Device.Id == device.Id && trigger.Option == option) {\n            Triggered?.Invoke(trigger);\n        }\n    }\n}", "CodeBleu_score": 71.49536281106852}, {"code": "private void OnDeviceAddOrRemove(IAudioDevice device, AudioDeviceEventKind option){\n\t    foreach (var trigger in _deviceTriggers) {\n        if (trigger.Device.Id == device.Id && trigger.Option == option) {\n            Triggered?.Invoke(trigger);\n        }\n    }\n}", "CodeBleu_score": 71.49536281106852}]}
{"instance_id": "50c38fc69dac", "generation_result": [{"code": "private void LoadAndRegister(){\n\t    _triggerManager.Clear();\n    _actions = Settings.Get<EarTrumpetAction[]>(c_actionsSettingKey) ?? new EarTrumpetAction[0];\n    foreach (var item in _actions)\n    {\n        foreach (var trigger in item.Triggers)\n        {\n            _triggerManager.Register(trigger);\n        }\n    }\n}", "CodeBleu_score": 52.10469020494575}, {"code": "private void LoadAndRegister(){\n\t    _triggerManager.Clear();\n\n    _actions = Settings.Get(c_actionsSettingKey, _actions);\n\n    foreach (var action in _actions) {\n        foreach (var trigger in action.Triggers) {\n            _triggerManager.Register(trigger, action);\n        }\n    }\n}", "CodeBleu_score": 42.69554960917379}, {"code": "private void LoadAndRegister(){\n\t    _triggerManager.Clear();\n\n    var actions = Settings.Get(c_actionsSettingKey, _actions);\n\n    foreach (var action in actions) {\n        foreach (var trigger in action.Triggers) {\n            _triggerManager.Register(trigger, action);\n        }\n    }\n}", "CodeBleu_score": 28.11792908350195}]}
{"instance_id": "ab8051e72909", "generation_result": [{"code": "private void OnTriggered(BaseTrigger trigger){\n\t    var action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger) && a.Conditions.All(c => c.IsMet));\n    if (action != null) {\n        TriggerAction(action);\n    }\n}", "CodeBleu_score": 44.64535265358963}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t    var action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger) && a.Conditions.All(c => c.IsMet));\n    if (action != null) {\n        TriggerAction(action);\n    }\n}", "CodeBleu_score": 44.64535265358963}, {"code": "private void OnTriggered(BaseTrigger trigger){\n\t    var action = Actions.FirstOrDefault(a => a.Triggers.Contains(trigger));\n    if (action != null && action.Conditions.All(c => c.IsMet())) {\n        TriggerAction(action);\n    }\n}", "CodeBleu_score": 60.5533098578913}]}
{"instance_id": "2f85d28001cf", "generation_result": [{"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let scope_graph = self.scope_graph.borrow();\n    let vars = scope_graph.get_vars_mentioning(&name);\n    let script_vars = vars.into_iter().filter_map(|var| {\n        if let Some(ScriptVar { .. }) = var {\n            Some(var)\n        } else {\n            None\n        }\n    });\n    for var in script_vars {\n        let var_name = &var.name;\n        let var_scope = scope_graph.get_var_scope(var_name);\n        let result = var_scope.eval_run_while_expression();\n        if let Ok(true) = result {\n            self.script_var_handler.start_script(&var.name);\n        } else if let Ok(false) = result {\n            self.script_var_handler.stop_script(&var.name);\n        } else if let Err(e) = result {\n            error_handling_ctx::print_error(e);\n        }\n    }\n}", "CodeBleu_score": 35.38927617866228}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t        let scope_graph = self.scope_graph.borrow();\n        let vars = scope_graph.global_scope().data;\n        let mut script_vars: Vec<_> = vars.iter().filter_map(|(key, value)| {\n            if let Some(value) = value.try_into::<DynVal>() {\n                Some((key, value))\n            } else {\n                None\n            }\n        }).collect();\n\n        script_vars.sort_by_key(|(name, _)| name.as_str());\n        script_vars.dedup_by_key(|(name, _)| name.as_str());\n\n        for (var_name, value) in script_vars {\n            if let Some(script) = self.eww_config.get_scripts().get(var_name.as_str()) {\n                if let Some(run_while) = script.run_while.as_ref() {\n                    if let Ok(should_run) = run_while.evaluate_in_scope_graph(&scope_graph, &vars) {\n                        if should_run {\n                            self.script_var_handler.start_script(var_name.clone());\n                        } else {\n                            self.script_var_handler.stop_script(var_name.clone());\n                        }\n                    } else {\n                        error_handling_ctx::print_error(anyhow::anyhow(format_args(\\\"Error evaluating run-while expression for variable {}\\\", var_name)));\n                    }\n                }\n            }\n        }\n    }", "CodeBleu_score": 46.78698519252876}, {"code": "fn apply_run_while_expressions_mentioning(&mut self, name: &VarName){\n\t    let scope_graph = self.scope_graph.borrow();\n    let vars = scope_graph.global_scope().data;\n    let mut script_vars = vars.iter().filter(|(_, val)| val.is_script_var()).map(|(key, val)| (key, val.as_script_var().unwrap()));\n    script_vars = script_vars.filter(|(_, script_var)| script_var.run_while_expr.contains_var(name));\n    for (_, script_var) in script_vars {\n        if let Ok(should_run) = script_var.run_while_expr.evaluate_in(scope_graph) {\n            if should_run {\n                self.script_var_handler.start_script_var(script_var.clone());\n            } else {\n                self.script_var_handler.stop_script_var(&script_var.name);\n            }\n        } else |err| {\n            error_handling_ctx::print_error(err);\n        }\n    }\n}", "CodeBleu_score": 35.96854191808426}]}
{"instance_id": "56f67ae91214", "generation_result": [{"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    let window = self.open_windows.remove(instance_id).ok_or_else(|| anyhow::anyhow(format_err![\n        \"Failed to close window with instance id \\\"{}\\\"\",\n        instance_id\n    ]))?;\n\n    window.close();\n\n    let scope_graph = self.scope_graph.borrow_mut();\n    let scope_index = scope_graph.remove_scope(&instance_id).ok_or_else(|| anyhow::anyhow(format_err![\n        \"Failed to close window with instance id \\\"{}\\\"\",\n        instance_id\n    ]))?;\n\n    // Remove unused global variables\n    let used_globals_names = scope_graph.currently_used_globals();\n    let unused_globals = scope_graph\n        .global_scope()\n        .data\n        .iter()\n        .filter(|(key, _)| !used_globals_names.contains(*key));\n\n    for (name, _) in unused_globals {\n        self.script_var_handler.stop_for_variable(name.clone());\n    }\n\n    self.open_windows_args.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 46.00187865090221}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    self.open_windows.remove(instance_id).ok_or(anyhow::anyhow(format_err(\"Window not found\")))?.close();\n    self.script_var_handler.stop_for_window(instance_id.to_string());\n    self.scope_graph.borrow_mut().remove_scope_for_window(instance_id.to_string());\n    self.identify_and_stop_unused_globals();\n    self.arguments.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 47.112574673509684}, {"code": "fn close_window(&mut self, instance_id: &str) -> Result<()> {\n\t    self.close_timer.remove(instance_id);\n    let window = self.open_windows.remove(instance_id).unwrap();\n    window.close();\n    self.scope_graph.borrow_mut().remove_scope(&instance_id);\n    self.script_var_handler.stop_all_for_window(instance_id);\n    self.arguments.remove(instance_id);\n    Ok(())\n}", "CodeBleu_score": 44.37000868694304}]}
{"instance_id": "a496c83ce944", "generation_result": [{"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\"reloading configuration\");\n\n    self.script_var_handler.stop_all();\n    self.script_var_handler = ScriptVarHandler::new(config.get_script_var_definitions().clone());\n\n    log::info(\"new configuration: {:#?}\", config);\n\n    self.eww_config = config;\n\n    self.scope_graph.borrow_mut().clear_with_initial_state(config.get_global_variables());\n\n    let open_window_ids: Vec<String> = self.open_windows.keys().cloned().collect();\n    let failed_window_ids: Vec<String> = self.failed_windows.keys().cloned().collect();\n\n    let window_ids = open_window_ids.iter().chain(failed_window_ids.iter()).cloned().collect();\n\n    let window_args: Vec<WindowArguments> = window_ids\n        .into_iter()\n        .map(|instance_id| self.instance_id_to_args.remove(&instance_id).unwrap())\n        .collect();\n\n    for window_arg in window_args {\n        self.open_window(&window_arg)?;\n    }\n\n    Ok(())\n}", "CodeBleu_score": 62.015856911920785}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\"Reloading config\");\n    self.script_var_handler.stop_all();\n    self.script_var_handler = ScriptVarHandler::new(config.get_script_var_definitions().clone());\n    self.script_var_handler.stop_all().await;\n\n    log::info(\"Loaded config: {:#?}\", config);\n    self.eww_config = config;\n\n    self.scope_graph.borrow_mut().clear_with_initial_state(config.get_global_variables());\n\n    let open_window_ids: Vec<_> = self.open_windows.keys().cloned().collect();\n    let failed_window_ids: Vec<_> = self.failed_windows.keys().cloned().collect();\n    let all_window_ids = open_window_ids.iter().chain(failed_window_ids.iter()).cloned().collect();\n\n    let initial_window_args = all_window_ids\n        .into_iter()\n        .map(|id| self.instance_id_to_args.remove(&id).unwrap())\n        .collect();\n\n    for window_args in initial_window_args {\n        self.open_window(&window_args)?;\n    }\n\n    Ok(())\n}", "CodeBleu_score": 61.21419320879821}, {"code": "pub fn load_config(&mut self, config: config::EwwConfig) -> Result<()>{\n\t    log::info(\"Reloading config\");\n    self.script_var_handler.stop_all();\n    self.script_var_handler = ScriptVarHandler::new(config.get_script_vars().clone());\n\n    log::info(\"New config: {:#?}\", config);\n    self.eww_config = config;\n\n    self.scope_graph.borrow_mut().clear_with_initial_state(config.get_globals());\n\n    let open_window_ids: Vec<_> = self.open_windows.keys().cloned().collect();\n    let failed_window_ids: Vec<_> = self.failed_windows.keys().cloned().collect();\n    let all_window_ids: Vec<_> = open_window_ids.iter().chain(failed_window_ids.iter()).cloned().collect();\n\n    let window_args: Vec<_> = all_window_ids.iter().map(|id| self.instance_id_to_args.remove(id)).collect();\n\n    for window_arg in window_args {\n        self.open_window(&window_arg)?;\n    }\n\n    Ok(())\n}", "CodeBleu_score": 60.907835879310404}]}
{"instance_id": "939eb758c6a2", "generation_result": [{"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    if let Err(err) = self.css_provider.load_from_data(css) {\n        let error_message = err.to_string();\n        let re = Regex::new(r\"\\((.*):(\\d+):(\\d+)\\)\").unwrap();\n        if let Some(captures) = re.captures(error_message.as_str()) {\n            let line = captures.get(2).unwrap().as_str().parse::<u32>().unwrap();\n            let column = captures.get(3).unwrap().as_str().parse::<u32>().unwrap();\n            let file_range = self.file_ranges.get(&file_id).unwrap();\n            let span = file_range.get_span(line, column);\n            let error = DiagError::new(\n                DiagLevel::Error,\n                DiagMessage::new(\"CSS Error\"),\n                span,\n                error_message.to_string(),\n            );\n            return Err(error);\n        } else {\n            return Err(DiagError::new(\n                DiagLevel::Error,\n                DiagMessage::new(\"CSS Error\"),\n                Span::new(0, 0, 0, 0),\n                \"Failed to parse CSS error message\".to_string(),\n            ));\n        }\n    }\n    Ok(())\n}", "CodeBleu_score": 44.428291145703206}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t    let css_provider = &mut self.css_providers[file_id];\n    let css_provider_ref = css_provider.borrow();\n    let css_provider_ref_mut = css_provider.borrow_mut();\n    let css_provider_ref_mut_raw = css_provider_ref_mut.as_raw();\n\n    let load_result = css_provider_ref_mut_raw.load_from_data(css.as_bytes());\n    if let Err(err) = load_result {\n        let mut error_message = format_error_message(err.to_string());\n\n        let error_regex = Regex::new(r#\"\\(line:(\\d+):(\\d+):) (.*)\"#).unwrap();\n        let caps = error_regex.captures(error_message.as_str());\n\n        if let Some(caps) = caps {\n            let line = caps.get(1).unwrap().as_str().parse::<u32>().unwrap();\n            let col = caps.get(2).unwrap().as_str().parse::<u32>().unwrap();\n            let message = caps.get(3).unwrap().as_str().to_string();\n\n            if let Some(file_range) = self.file_ranges.get(&file_id) {\n                let span = Span::new(file_range.start + line as usize, col as usize, file_range.start + line as usize, col as usize);\n                let error_diag = DiagError::new(self.file_id, span, message);\n                return Err(error_diag);\n            }\n        }\n\n        let error_diag = DiagError::new(self.file_id, Span::default(), \\\"CSS error\\\".to_string());\n        return Err(error_diag);\n    }\n    Ok(())\n}", "CodeBleu_score": 44.293827452603615}, {"code": "pub fn load_css(&mut self, file_id: usize, css: &str) -> Result<()>{\n\t", "CodeBleu_score": 8.294229199741606}]}
{"instance_id": "4a881d16b9af", "generation_result": [{"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::get_default().context(\\\"Failed to get default display\\')?;\n    let monitor = match identifier {\n        Some(identifier) => {\n            let monitors = display.get_monitors();\n            let monitor = monitors.iter().find(|monitor| monitor.get_monitor_index() == identifier.index).context(|| format_err(\\\"Failed to find monitor with index `{identifier.index}`\\\", monitors))?;\n            monitor\n        }\n        None => {\n            let primary_monitor = display.get_primary_monitor().context(\\\"Failed to get primary monitor\\')?;\n            primary_monitor\n        }\n    };\n    Ok(monitor)\n}", "CodeBleu_score": 25.244648761203536}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::get_default().context(\\\"Failed to get default display\\')?;\n    let monitor = match identifier {\n        Some(identifier) => {\n            let monitor = display.get_monitor(identifier.index).ok_or_else(|| anyhow::anyhow(format_args(\\\"No monitor with index {}\\\", identifier.index)))?;\n            Ok(monitor)\n        }\n        None => {\n            let monitor = display.get_primary_monitor().ok_or_else(|| anyhow::anyhow(\\\"No primary monitor found\\\"))?;\n            Ok(monitor)\n        }\n    };\n    Ok(monitor)\n}", "CodeBleu_score": 22.512725005953747}, {"code": "fn get_gdk_monitor(identifier: Option<MonitorIdentifier>) -> Result<Monitor> {\n\t    let display = gdk::Display::default().context(\"Failed to get default display\")?;\n    let monitor = match identifier {\n        Some(identifier) => {\n            let monitor = display.get_monitor(identifier.index).context(|| {\n                format_err(\\\"Failed to find monitor with id {}\\\", identifier.index)\n            })?;\n            Ok(monitor)\n        }\n        None => {\n            let monitor = display.get_primary_monitor().context(|| \\\"Failed to get primary monitor\\\".into())?;\n            Ok(monitor)\n        }\n    };\n    Ok(monitor)\n}", "CodeBleu_score": 25.52189985902667}]}
{"instance_id": "0d4bd8476c3b", "generation_result": [{"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let mut x = geometry.offset.x();\n    let mut y = geometry.offset.y();\n    let mut width = geometry.size.x();\n    let mut height = geometry.size.y();\n\n    match geometry.anchor_point.horizontal {\n        AnchorPoint::Left => x += screen_rect.x(),\n        AnchorPoint::Center => x += screen_rect.x() + (screen_rect.width() - width) / 2,\n        AnchorPoint::Right => x += screen_rect.x() + screen_rect.width() - width,\n    }\n\n    match geometry.anchor_point.vertical {\n        AnchorPoint::Top => y += screen_rect.y(),\n        AnchorPoint::Center => y += screen_rect.y() + (screen_rect.height() - height) / 2,\n        AnchorPoint::Bottom => y += screen_rect.y() + screen_rect.height() - height,\n    }\n\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 58.719538231440936}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let mut x = geometry.offset.x + screen_rect.x();\n    let mut y = geometry.offset.y + screen_rect.y();\n    let mut width = geometry.size.x;\n    let mut height = geometry.size.y;\n\n    let (anchor_x, anchor_y) = match geometry.anchor {\n        Anchor::TopLeft => (0, 0),\n        Anchor::TopRight => (1, 0),\n        Anchor::BottomLeft => (0, 1),\n        Anchor::BottomRight => (1, 1),\n        Anchor::Center => (0.5, 0.5),\n    };\n\n    x += anchor_x * screen_rect.width();\n    y += anchor_y * screen_rect.height();\n\n    if width == 0 {\n        width = screen_rect.width();\n    }\n    if height == 0 {\n        height = screen_rect.height();\n    }\n\n    gdk::Rectangle::new(x as i32, y as i32, width as i32, height as i32)\n}", "CodeBleu_score": 53.14199885601635}, {"code": "pub fn get_window_rectangle(geometry: WindowGeometry, screen_rect: gdk::Rectangle) -> gdk::Rectangle{\n\t    let mut x = screen_rect.x() + geometry.offset.x;\n    let mut y = screen_rect.y() + geometry.offset.y;\n    let mut width = geometry.size.x;\n    let mut height = geometry.size.y;\n\n    if geometry.anchor_point.x != AnchorPoint::Center {\n        if geometry.anchor_point.x == AnchorPoint::Left {\n            x += geometry.offset.x;\n        } else {\n            x += screen_rect.width() - geometry.size.x - geometry.offset.x;\n        }\n    }\n    if geometry.anchor_point.y != AnchorPoint::Center {\n        if geometry.anchor_point.y == AnchorPoint::Top {\n            y += geometry.offset.y;\n        } else {\n            y += screen_rect.height() - geometry.size.y - geometry.offset.y;\n        }\n    }\n\n    gdk::Rectangle::new(x, y, width, height)\n}", "CodeBleu_score": 58.09441023097682}]}
{"instance_id": "588081b260d0", "generation_result": [{"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    // Determine the window type based on backend options\n    let window_type = match window_init.backend_options.x11.window_type {\n        X11WindowType::Desktop => WindowType::Desktop,\n        X11WindowType::Dock => WindowType::Dock,\n        X11WindowType::Toolbar => WindowType::Toolbar,\n        X11WindowType::Menu => WindowType::Menu,\n        X11WindowType::Utility => WindowType::Utility,\n        X11WindowType::Splash => WindowType::Splash,\n        X11WindowType::Dialog => WindowType::Dialog,\n        X11WindowType::Normal => WindowType::Normal,\n    };\n\n    // Create a new window with the specified type and coordinates\n    let window = Window::new(window_type, x, y);\n\n    // Set the window's resizable property\n    window.set_resizable(window_init.resizable);\n\n    // Set the window's stacking position (foreground or background)\n    match window_init.stacking {\n        WindowStacking::Foreground => window.set_keep_above(true),\n        WindowStacking::Background => window.set_keep_below(true),\n    };\n\n    // Set the window's stickiness based on the initialization parameters\n    if window_init.backend_options.x11.sticky {\n        window.set_sticky();\n    }\n\n    // Return the configured window wrapped in an Option\n    Some(window)\n}", "CodeBleu_score": 59.45808601595666}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t    let window = match window_init.backend_options.x11.window_type {\n        X11WindowType::Normal => Window::new(gtk::WindowType::Toplevel, x, y),\n        X11WindowType::Dialog => Window::new(gtk::WindowType::Dialog, x, y),\n        X11WindowType::Utility => Window::new(gtk::WindowType::Utility, x, y),\n        X11WindowType::Splash => Window::new(gtk::WindowType::Splash, x, y),\n        X11WindowType::Tooltip => Window::new(gtk::WindowType::Tooltip, x, y),\n    };\n    window.set_resizable(window_init.resizable);\n\n    match window_init.stacking {\n        WindowStacking::Foreground => window.set_keep_above(true),\n        WindowStacking::Background => window.set_keep_below(true),\n        WindowStacking::Bottom => window.set_keep_below(true),\n        WindowStacking::Overlay => window.set_keep_above(true),\n    }\n\n    if window_init.backend_options.x11.sticky {\n        window.set_keep_above(true);\n    }\n    Some(window)\n}", "CodeBleu_score": 50.53548127738464}, {"code": "fn initialize_window(window_init: &WindowInitiator, _monitor: gdk::Rectangle, x: i32, y: i32) -> Option<Window>{\n\t", "CodeBleu_score": 12.877215628915417}]}
{"instance_id": "bbe996b92d6e", "generation_result": [{"code": "pub fn print_error(err: anyhow::Error){\n\t    if let Some(diag) = err.downcast_ref::<DiagError>() {\n        let diag = diag.to_diagnostic();\n        if let Some(string) = diag.to_string() {\n            term::stderr().write_line(&Chars::from(string)).unwrap();\n        }\n    } else {\n        tracing::error(err);\n    }\n}", "CodeBleu_score": 29.400734288305475}, {"code": "pub fn print_error(err: anyhow::Error){\n\t    let diagnostic = match err.downcast_ref::<ToDiagnostic>() {\n        Ok(diag) => diag.to_diagnostic(),\n        Err(err) => match err.downcast_ref::<DiagError>() {\n            Ok(diag) => diag.to_diagnostic(),\n            Err(_) => match err.downcast_ref::<ValidationError>() {\n                Ok(diag) => diag.to_diagnostic(),\n                Err(_) => match err.downcast_ref::<EvalError>() {\n                    Ok(diag) => diag.to_diagnostic(),\n                    Err(_) => match err.downcast_ref::<ConversionError>() {\n                        Ok(diag) => diag.to_diagnostic(),\n                        Err(_) => {\n                            let span = Span::new(\"eww.rs\", 0, 0, 0, 0);\n                            Diagnostic::error(span, \"Unknown error\")\n                                .with_message(format_args_err(err))\n                                .with_help(\n                                    \"Please report this error to the eww.rs repository.\n\\\n                                    You can find the repository at https://github.com/elkowar/eww.rs.\",\n                                )\n                        }\n                    },\n                },\n            },\n        },\n    };\n    match term::Diagnostic::try_from(diagnostic) {\n        Ok(diagnostic) => eprintln_chars(&diagnostic.to_string()),\n        Err(err) => eprintln_chars(&format_args_err(err)),\n    }\n}", "CodeBleu_score": 33.0028810629222}, {"code": "pub fn print_error(err: anyhow::Error){\n\t    if let Some(diagnostic) = err.to_diagnostic() {\n        if let Some(string) = diagnostic.to_string() {\n            eprintlnln(&string);\n        }\n    }\n    eprintlnln(&err.to_string());\n}", "CodeBleu_score": 27.17791286407069}]}
{"instance_id": "d5e9c17aaa4d", "generation_result": [{"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = tokio::net::UnixListener::bind(socket_path.as_ref()).await?;\n    log::info(\"Listening on {}\", socket_path.as_ref().display());\n    loop {\n        let (mut stream, _) = listener.accept().await?;\n        let evt_send = evt_send.clone();\n        tokio::spawn(async move {\n            if let Err(e) = handle_connection(evt_send, stream).await {\n                log::error(\"Error handling connection: {:?}\", e);\n            }\n        });\n    }\n}", "CodeBleu_score": 36.924036877075324}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = tokio::net::UnixListener::bind(socket_path.as_ref()).await?;\n    log::info(\"listening on {:?}\", socket_path.as_ref());\n    loop {\n        let (stream, _) = listener.accept().await?;\n        let evt_send = evt_send.clone();\n        tokio::spawn(async move {\n            if let Err(e) = handle_connection(evt_send, stream).await {\n                log::error(\"error handling connection: {:?}\", e);\n            }\n        });\n    }\n}", "CodeBleu_score": 36.70157839629763}, {"code": "pub async fn run_server<P: AsRef<std::path::Path>>(evt_send: UnboundedSender<app::DaemonCommand>, socket_path: P) -> Result<()>{\n\t    let listener = tokio::net::UnixListener::bind(socket_path.as_ref()).await?;\n    log::info(\"Listening on {}\", socket_path.as_ref().display());\n    loop {\n        let (mut socket, _) = listener.accept().await?;\n        let evt_send = evt_send.clone();\n        tokio::spawn(async move {\n            if let Err(e) = handle_connection(evt_send, socket).await {\n                log::error(\"Error handling connection: {:?}\", e);\n            }\n        });\n    }\n}", "CodeBleu_score": 36.81171006708475}]}
{"instance_id": "4af744d13f02", "generation_result": [{"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut read, mut write) = stream.split();\n    let action = serde_json::from_reader(read.by_ref())?;\n    log::debug(\\\"Received command: {:?}\\\", action);\n\n    let response_expected = match action {\n        app::DaemonCommand::Action::Exit => false,\n        _ => true,\n    };\n\n    let result = evt_send\n        .send(action)\n        .await\n        .context(\\\"Failed to send IPC command\\\")?;\n    log::debug(\\\"Sent command: {:?}\\\", result);\n\n    if response_expected {\n        tokio::time::timeout(Duration::from_millis(100), async move {\n            let response = evt_send.recv().await;\n            serde_json::to_writer(write.by_ref(), &response).await?;\n            Ok(())\n        })\n        .await?;\n    }\n\n    write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 55.73452627080533}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut read, mut write) = stream.split();\n    let action = read.read_u8().await.context(\\\"Failed to read action from IPC stream\\\")?;\n    let action = app::IpcAction::try_from(action).context(\\\"Failed to convert action from IPC stream\\\")?;\n    log::debug(\\\"Received IPC action: {:?}\\\", action);\n    let daemon_cmd = app::DaemonCommand::from(action);\n    evt_send.send(daemon_cmd).await.context(\\\"Failed to send daemon command\\\")?;\n    if let app::DaemonCommand::GetStatus = daemon_cmd {\n        let mut response = app::DaemonResponse::new();\n        match evt_send.recv_timeout(Duration::from_millis(100)).await {\n            Ok(app::DaemonResponse::Status(status)) => response.set_status(status),\n            _ => (),\n        }\n        let response = response.serialize();\n        write.write_all(&response).await.context(\\\"Failed to write response to IPC stream\\\")?;\n        write.shutdown().await?;\n    }\n    Ok(())\n}", "CodeBleu_score": 55.16186790497524}, {"code": "async fn handle_connection(mut stream: tokio::net::UnixStream, evt_send: UnboundedSender<app::DaemonCommand>) -> Result<()>{\n\t    let (mut stream_read, mut stream_write) = stream.split();\n    let action = {\n        let mut buf = [0u8; 1];\n        stream_read.read_exact(&mut buf).await?;\n        app::Action::from_u8(buf[0])\n    };\n    log::debug!\\(\\\"Received IPC action: {:?}\\\", action);\n    let command = app::DaemonCommand::from_action(action);\n    evt_send.send(command).await.context(\\\"while sending daemon command\\\")?;\n    if command.expects_response() {\n        let response = match tokio::select::select((\n            evt_send.recv().await.context(\\\"while waiting for response\\\")?,\n            tokio::time::timeout(Duration::from_millis(100)).await,\n        )) {\n            Select::Left(response) => response,\n            Select::Right(_) => return Err(anyhow::Error::msg(\\\"Timeout waiting for response\\\")),\n        };\n        let serialized = serde_json::to_vec(&response)?;\n        stream_write.write_all(&serialized).await?;\n    }\n    stream_write.shutdown().await?;\n    Ok(())\n}", "CodeBleu_score": 57.50337655897597}]}
{"instance_id": "8475be269e09", "generation_result": [{"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut header = [0; 4];\n    stream_read.read_exact(&mut header).await?;\n    let message_size = u32::from_be_bytes(header);\n    let mut raw_message = vec![0; message_size as usize];\n    stream_read.read_exact(&mut raw_message).await?;\n    let action = bincode::deserialize::<_, opts::ActionWithServer>(&raw_message).context(\\\"while deserializing message\\\")?;\n    Ok(action)\n}", "CodeBleu_score": 36.07718897067205}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut header_buf = [0u8; 4];\n    stream_read.read_exact(&mut header_buf).await?;\n    let message_size = u32::from_be_bytes(header_buf);\n    let mut message_buf = vec![0u8; message_size as usize];\n    stream_read.read_exact(&mut message_buf).await?;\n    let action: opts::ActionWithServer = bincode::deserialize(&message_buf).context(\\\"while deserializing message\\\")?;\n    Ok(action)\n}", "CodeBleu_score": 36.77778736694418}, {"code": "async fn read_action_from_stream(stream_read: &'_ mut tokio::net::unix::ReadHalf<'_>) -> Result<opts::ActionWithServer>{\n\t    let mut message_size_bytes = [0; 4];\n    stream_read.read_exact(&mut message_size_bytes).await?;\n    let message_size = u32::from_be_bytes(message_size_bytes);\n    let mut buffer = vec![0; message_size as usize];\n    let mut pos = 0;\n    while pos < message_size as usize {\n        pos += stream_read.read(&mut buffer[pos..]).await?;\n    }\n    let action = bincode::deserialize::<opts::ActionWithServer>(&buffer)?;\n    Ok(action)\n}", "CodeBleu_score": 51.86296241970525}]}
{"instance_id": "5f7bde448666", "generation_result": [{"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let mut dbus = zbus::fdo::DBusProxy::new(con).await?;\n    let mut owner: Option<zbus::names::BusName<'static>> = dbus.get_name_owner(service).await.ok();\n    if owner.is_none() {\n        // the service has no owner, so we're done\n        return Ok(());\n    }\n\n    let mut watcher = dbus.watch_name_owner_changed(service, zbus::fdo::WatchOptions::default()).await?;\n    while let Some(e) = watcher.next().await {\n        if let Err(e) = e {\n            log::warn(\"failed to watch name owner changed: {}\", e);\n            break;\n        }\n\n        let (name, old, new) = e.unwrap();\n        if old == *owner {\n            log::debug(\"service {} has no owner anymore\", name);\n            break;\n        }\n        owner = new;\n    }\n\n    Ok(())\n}", "CodeBleu_score": 59.41298947783375}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let dbus = zbus::fdo::DBusProxy::new(con).await?;\n    let mut owner = dbus.get_name_owner(service).await?;\n    if owner.is_empty() {\n        return Ok(());\n    }\n    let mut owner = owner.into_inner();\n    let mut ctxt = zbus::SignalContext::new();\n    let mut watcher = dbus.watch_name_owner_changed(service, &mut ctxt).await?;\n    loop {\n        match watcher.next().await {\n            Ok(Some(new_owner)) => {\n                if new_owner.is_empty() {\n                    return Ok(());\n                }\n                owner = new_owner;\n            }\n            Ok(None) => {\n                log::warn!\\(\"failed to get owner of {:?}\", service);\n                return Ok(());\n            }\n            Err(e) => {\n                log::warn!\\(\"failed to watch owner of {:?}: {e}\", service);\n                return Ok(());\n            }\n        }\n    }\n}", "CodeBleu_score": 56.6779713729078}, {"code": "async fn wait_for_service_exit(con: &zbus::Connection, service: zbus::names::BusName<'_>) -> zbus::fdo::Result<()>{\n\t    let proxy = zbus::fdo::DBusProxy::new(con).await?;\n\n    let mut owner = proxy.get_name_owner(service).await?;\n\n    if owner.is_empty() {\n        return Ok(());\n    }\n\n    let mut signal = proxy.signal_match(\n        &[zbus::fdo::SIGNAL_NAME_OWNER_CHANGED],\n        &[zbus::fdo::MATCH_ARG0(service)],\n    )\n    .await?;\n\n    loop {\n        match signal.recv().await {\n            Ok(signal) => {\n                let owner = signal.arg0()?;\n                if owner.is_empty() {\n                    return Ok(());\n                }\n            }\n            Err(e) => return Err(e),\n        }\n    }\n}", "CodeBleu_score": 55.06916010650892}]}
{"instance_id": "d5149dd17f39", "generation_result": [{"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow::format_err(\n            \\\"Unsupported file extension \\\\\"{}\\\\\" for exporting a document.\\\",\n            format,\n        )),\n    }\n}", "CodeBleu_score": 73.92549762162056}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow::format_err(\n            \\\"Unsupported export format: \\\\\"{}\\\\\"\\\",\n            format,\n        )),\n    }\n}", "CodeBleu_score": 73.6215880653474}, {"code": "fn doc_export_format_from_ext_str(format: &str) -> anyhow::Result<DocExportFormat> {\n\t    match format {\n        \"svg\" => Ok(DocExportFormat::Svg),\n        \"xopp\" => Ok(DocExportFormat::Xopp),\n        \"pdf\" => Ok(DocExportFormat::Pdf),\n        _ => Err(anyhow::anyhow::format_err(\\\"Unsupported output format: {}\\\", format)),\n    }\n}", "CodeBleu_score": 70.4431489171076}]}
{"instance_id": "47c741fa1cf0", "generation_result": [{"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let path_ext = path.extension().and_then(|ext| ext.to_str());\n    if path_ext != Some(expected_ext) {\n        return Err(anyhow::anyhow![\n            \"Expected extension \\\\\"{}\\\\\" for file \\\\\"{}\\\\\"\",\n            expected_ext,\n            path.display()\n        ]);\n    }\n    Ok(())\n}", "CodeBleu_score": 30.164980359770325}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let ext = path.extension().and_then(|s| s.to_str());\n    if ext != Some(expected_ext) {\n        return Err(anyhow::anyhow!\n            \\\"Expected extension \\\\\"{}\\\\\" for file \\\\\"{}\\\",\n            expected_ext,\n            path.display()\n        )\n    }\n    Ok(())\n}", "CodeBleu_score": 29.634987075664665}, {"code": "pub(crate) fn file_has_ext(path: &Path, expected_ext: &str) -> anyhow::Result<()>{\n\t    path_is_file(path)?;\n    let file_name = path.file_name().unwrap().to_str().unwrap();\n    if !file_name.ends_with(expected_ext) {\n        return Err(anyhow::anyhow!\n(\n            \\\"Expected file \\\\\"{}\\\\\" to have extension \\\\\"{}\\\",\n            file_name,\n            expected_ext\n        ));\n    }\n    Ok(())\n}", "CodeBleu_score": 28.84144897572926}]}
{"instance_id": "cde4fa8386cb", "generation_result": [{"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  thread_ = [this, id] {\n    dp.emit();\n    thread_.sleep_until(interval_);\n  };\n  label_.set_name(id);\n  if (config[\"format\"].isString()) {\n    label_.set_format(config[\"format\"].asString());\n  } else {\n    label_.set_format(\"{usage}%\");\n  }\n  if (config[\"interval\"].isUInt()) {\n    interval_ = std::chrono::seconds(config[\"interval\"].asUInt());\n  } else {\n    interval_ = std::chrono::seconds(3);\n  }\n}", "CodeBleu_score": 51.00703223959573}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  label_.set_name(\"cpu-usage\");\n  label_.set_text(\"\");\n  label_.set_tooltip_text(\"CPU Usage\");\n  if (config[\"format\"]) {\n    label_.set_format(config[\"format\"].asString());\n  }\n  label_.set_interval(config[\"interval\"] ? config[\"interval\"].asUInt() : 1);\n  label_.set_max_width(100);\n\n  // Start thread\n  thread_ = [this] {\n    dp.emit();\n    thread_.sleep_for(label_.get_interval());\n  };\n}", "CodeBleu_score": 54.77035210030723}, {"code": "waybar::modules::CpuUsage::CpuUsage(const std::string& id, const Json::Value& config){\n\t  label_.set_name(\"cpu-usage\");\n  label_.set_text(\"0%\");\n  label_.set_tooltip_text(\"CPU usage\");\n  if (config[\"format\"].isString()) {\n    format_ = config[\"format\"].asString();\n  }\n  label_.set_format(format_);\n  interval_ = std::chrono::seconds(config[\"interval\"].isUInt() ? config[\"interval\"].asUInt() : 1);\n  config_[\"format-online\"] = config[\"format-online\"];\n  config_[\"format-offline\"] = config[\"format-offline\"];\n  dp.emit();\n}", "CodeBleu_score": 46.390582646958094}]}
{"instance_id": "da58b589c5e8", "generation_result": [{"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t  if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n    auto manager = static_cast<zdwl_ipc_manager_v2 *>(wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, version));\n    if (manager) {\n      static_cast<Tags *>(data)->status_manager_ = manager;\n    }\n  } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n    auto seat = static_cast<wl_seat *>(wl_registry_bind(registry, name, &wl_seat_interface, std::min(version, 1u)));\n    if (seat) {\n      static_cast<Tags *>(data)->seat_ = seat;\n    }\n  }\n}", "CodeBleu_score": 64.47386678432032}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t  auto tags = static_cast<Tags *>(data);\n\n  if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n    auto manager = static_cast<zdwl_ipc_manager_v2 *>(\n        wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1));\n    tags->status_manager_ = manager;\n  } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n    auto seat = static_cast<wl_seat *>(\n        wl_registry_bind(registry, name, &wl_seat_interface, 1));\n    tags->seat_ = seat;\n  }\n}", "CodeBleu_score": 59.17678161463351}, {"code": "static void handle_global(void *data, struct wl_registry *registry, uint32_t name,\n                          const char *interface, uint32_t version) {\n\t  auto tags = static_cast<Tags *>(data);\n\n  if (strcmp(interface, zdwl_ipc_manager_v2_interface.name) == 0) {\n    auto manager = static_cast<zdwl_ipc_manager_v2 *>(\n        wl_registry_bind(registry, name, &zdwl_ipc_manager_v2_interface, 1));\n    tags->status_manager_ = manager;\n  } else if (strcmp(interface, wl_seat_interface.name) == 0) {\n    auto seat = static_cast<wl_seat *>(\n        wl_registry_bind(registry, name, &wl_seat_interface, 1));\n    tags->seat_ = seat;\n  }\n}", "CodeBleu_score": 59.17678161463351}]}
{"instance_id": "22230d419d69", "generation_result": [{"code": "void IPC::parseIPC(const std::string& ev){\n\t  std::string requestType = ev.substr(0, ev.find_first_of('>'));\n\n  std::unique_lock lock(callbackMutex_);\n\n  for (auto& callback : callbacks_) {\n    if (callback->eventName == requestType) {\n      callback->onEvent(ev);\n    }\n  }\n}", "CodeBleu_score": 69.49368787190018}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t  std::string requestType = ev.substr(0, ev.find_first_of('>'));\n\n  std::lock_guard<std::mutex> guard(callbackMutex_);\n\n  for (auto& [eventName, callback] : callbacks_) {\n    if (eventName == requestType) {\n      callback->onEvent(ev);\n    }\n  }\n}", "CodeBleu_score": 71.83731450763484}, {"code": "void IPC::parseIPC(const std::string& ev){\n\t  std::string requestType = ev.substr(0, ev.find('>'));\n\n  {\n    std::unique_lock lock(callbackMutex_);\n\n    for (auto& [eventName, callback] : callbacks_) {\n      if (eventName == requestType) {\n        callback->onEvent(ev);\n      }\n    }\n  }\n}", "CodeBleu_score": 74.76091807789872}]}
{"instance_id": "5d195fbd6417", "generation_result": [{"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t  if (ev_handler == nullptr) {\n    return;\n  }\n\n  std::unique_lock lock(callbackMutex_);\n  callbacks_.erase(std::remove_if(callbacks_.begin(), callbacks_.end(), [ev_handler](const auto& callback) { return callback.second == ev_handler; }), callbacks_.end());\n}", "CodeBleu_score": 51.25616628442897}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t  if (ev_handler == nullptr) {\n    return;\n  }\n\n  std::unique_lock lock(callbackMutex_);\n  callbacks_.erase(std::remove_if(callbacks_.begin(), callbacks_.end(),\n    [ev_handler](const auto& cb) { return cb.second == ev_handler; }), callbacks_.end());\n}", "CodeBleu_score": 51.445213583544614}, {"code": "void IPC::unregisterForIPC(EventHandler* ev_handler){\n\t  if (ev_handler == nullptr) {\n    return;\n  }\n\n  std::unique_lock lock(callbackMutex_);\n  callbacks_.erase(std::remove_if(callbacks_.begin(), callbacks_.end(), [ev_handler](auto& cb) {\n    return cb.second == ev_handler;\n  }), callbacks_.end());\n}", "CodeBleu_score": 51.59439587343597}]}
{"instance_id": "2bb5ef8b3cf3", "generation_result": [{"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  if (config[\"always-on\"]) {\n    always_on_ = config[\"always-on\"].asBool();\n  }\n\n  if (config[\\\"default-submap\\\"]) {\n    default_submap_ = config[\\\"default-submap\\\"].asString();\n  }\n}", "CodeBleu_score": 36.06005260675892}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  if (config[\"always-on\"]) {\n    always_on_ = config[\"always-on\"].asBool();\n  }\n\n  if (config[\\\"default-submap\\\"]) {\n    default_submap_ = config[\\\"default-submap\\\"].asString();\n  }\n}", "CodeBleu_score": 36.06005260675892}, {"code": "auto Submap::parseConfig(const Json::Value& config) -> void{\n\t  if (config[\"always-on\"]) {\n    always_on_ = config[\"always-on\"].asBool();\n  }\n\n  if (config[\\\"default-submap\\\"]) {\n    default_submap_ = config[\\\"default-submap\\\"].asString();\n  }\n}", "CodeBleu_score": 36.06005260675892}]}
{"instance_id": "c60aa24ddc6f", "generation_result": [{"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t  if (std::holds_alternative<Repr>(m_window)) {\n    return std::get<Repr>(m_window);\n  }\n  if (std::holds_alternative<ClassAndTitle>(m_window)) {\n    auto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\n    return workspace_manager.rewriteWindowString(window_class, window_title);\n  }\n  // Unreachable\n  spdlog::error(\"WorkspaceWindow::repr: Unreachable\");\n  throw std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 96.30869598867338}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t  if (std::holds_alternative<Repr>(m_window)) {\n    return std::get<Repr>(m_window);\n  }\n  if (std::holds_alternative<ClassAndTitle>(m_window)) {\n    auto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\n    return workspace_manager.rewriteWindowRepr(window_class, window_title);\n  }\n  // Unreachable\n  spdlog::error(\"WorkspaceWindow::repr: Unreachable\");\n  throw std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 96.43623675164045}, {"code": "std::string WindowCreationPayload::repr(Workspaces &workspace_manager){\n\t  if (std::holds_alternative<Repr>(m_window)) {\n    return std::get<Repr>(m_window);\n  }\n  if (std::holds_alternative<ClassAndTitle>(m_window)) {\n    auto [window_class, window_title] = std::get<ClassAndTitle>(m_window);\n    return workspace_manager.rewriteWindowString(window_class, window_title);\n  }\n  // Unreachable\n  spdlog::error(\"WorkspaceWindow::repr: Unreachable\");\n  throw std::runtime_error(\"WorkspaceWindow::repr: Unreachable\");\n}", "CodeBleu_score": 96.30869598867338}]}
{"instance_id": "b9160180960d", "generation_result": [{"code": "void Workspaces::createWorkspacesToCreate(){\n\t  for (auto &workspace : m_workspacesToCreate) {\n    createWorkspace(workspace.first, workspace.second);\n  }\n  m_workspacesToCreate.clear();\n\n  if (m_workspacesToCreate.size() > 0) {\n    updateWindowCount();\n    sortWorkspaces();\n  }\n}", "CodeBleu_score": 53.210632692053885}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t", "CodeBleu_score": 2.4224979533471256}, {"code": "void Workspaces::createWorkspacesToCreate(){\n\t  auto workspacesToCreate = gIPC->getSocket1JsonReply(\"workspaces/create\");\n  if (workspacesToCreate.isArray()) {\n    for (auto const &workspace_data : workspacesToCreate) {\n      auto clients_data = gIPC->getSocket1JsonReply(\"clients\");\n      createWorkspace(workspace_data, clients_data);\n    }\n    updateWindowCount();\n    sortWorkspaces();\n  }\n}", "CodeBleu_score": 53.638586059114026}]}
{"instance_id": "07260cd3fead", "generation_result": [{"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: name-vanished callback: {}\", player_name->name);\n\n  if (std::string(player_name->name) != mpris->player_) {\n    return;\n  }\n\n  mpris->player = nullptr;\n  mpris->event_box_.hide();\n  mpris->dp.emit();\n}", "CodeBleu_score": 82.86090572513453}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: name-vanished callback: {}\", player_name->name);\n\n  if (std::string(player_name->name) != mpris->player_) {\n    return;\n  }\n\n  mpris->player = nullptr;\n  mpris->event_box_.hide();\n  mpris->dp.emit();\n}", "CodeBleu_score": 82.86090572513453}, {"code": "auto Mpris::onPlayerNameVanished(PlayerctlPlayerManager* manager, PlayerctlPlayerName* player_name,\n                                 gpointer data) -> void {\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: name-vanished callback: {}\", player_name->name);\n\n  if (std::string(player_name->name) != mpris->player_) {\n    return;\n  }\n\n  mpris->player = nullptr;\n  mpris->dp.emit();\n}", "CodeBleu_score": 78.68890064000742}]}
{"instance_id": "94a47eddc505", "generation_result": [{"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: player-pause callback\");\n  // update widget\n  mpris->dp.emit();\n}", "CodeBleu_score": 99.36235025282969}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: player-pause callback\");\n  // update widget\n  mpris->dp.emit();\n}", "CodeBleu_score": 99.36235025282969}, {"code": "auto Mpris::onPlayerPause(PlayerctlPlayer* player, gpointer data) -> void{\n\t  auto* mpris = static_cast<Mpris*>(data);\n  if (!mpris) return;\n\n  spdlog::debug(\"mpris: player-pause callback\");\n  // update widget\n  mpris->dp.emit();\n}", "CodeBleu_score": 99.36235025282969}]}
{"instance_id": "716955fc6ff5", "generation_result": [{"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  try {\n    auto payload = parser_.parse(res.payload);\n    if (!payload[\"success\"].asBool()) {\n      throw std::runtime_error(payload[\"error\"].asString());\n    }\n    onConfigUpdate(parseConfig(payload));\n  } catch (const std::exception& e) {\n    spdlog::error(\\\"BarIpcClient::onInitialConfig {}\\\", e.what());\n  }\n}", "CodeBleu_score": 47.7545238762264}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  Json::Value payload = parser_.parse(res.payload);\n  if (!payload[\"success\"].asBool()) {\n    auto err = fmt::format(\"Error: {}\", payload[\"error\"].asString());\n    throw std::runtime_error(err);\n  }\n  auto config = parseConfig(payload);\n  onConfigUpdate(config);\n}", "CodeBleu_score": 63.83663656312917}, {"code": "void BarIpcClient::onInitialConfig(const struct Ipc::ipc_response& res){\n\t  Json::Value payload;\n  try {\n    payload = parser_.parse(res.payload);\n  } catch (const std::exception& e) {\n    throw std::runtime_error(e.what());\n  }\n  if (auto success = payload[\"success\"]; !success.isBool() || !success.asBool()) {\n    auto error_message = payload[\"error\"].asString();\n    throw std::runtime_error(error_message);\n  }\n  onConfigUpdate(parseConfig(payload));\n}", "CodeBleu_score": 58.773264406652245}]}
{"instance_id": "e8aa483d1693", "generation_result": [{"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(cffi_instance_ != nullptr);\n  if (!name.empty()) {\n    hooks_.doAction(cffi_instance_, name.c_str());\n  }\n}", "CodeBleu_score": 99.5189928273473}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(cffi_instance_ != nullptr);\n  if (!name.empty()) {\n    hooks_.doAction(cffi_instance_, name.c_str());\n  }\n}", "CodeBleu_score": 99.5189928273473}, {"code": "auto CFFI::doAction(const std::string& name) -> void{\n\t  assert(cffi_instance_ != nullptr);\n  if (!name.empty()) {\n    hooks_.doAction(cffi_instance_, name.c_str());\n  }\n}", "CodeBleu_score": 99.5189928273473}]}
{"instance_id": "af06dceb6a2f", "generation_result": [{"code": "export function normalizeAppName(appName: string, url: string): string  const hash = createHash(\"md5\").update(url).digest(\"hex\").substring(0, 6);\n  const normalizedAppName = appName\n    .toLowerCase()\n    .replace(/[^a-z0-9]/g, \"-\")\n    .replace(/[ _]/g, \"-\")\n    .replace(/--+/g, \"-\");\n  return `${normalizedAppName}-nativefier-${hash}`;\n}", "CodeBleu_score": 55.55096039826724}, {"code": "export function normalizeAppName(appName: string, url: string): string  const hash = createHash(\"md5\").update(url).digest(\"hex\").slice(0, 6);\n  return (\n    appName\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, \" \")\n      .replace(/\\s+/g, \"-\")\n      .replace(/^-|-$/g, \"\") +\n    \"-nativefier-\" +\n    hash\n  );\n}\n", "CodeBleu_score": 39.106538713885136}, {"code": "export function normalizeAppName(appName: string, url: string): string  const hash = createHash(\"md5\").update(url).digest(\"hex\").substring(0, 6);\n  return (\n    appName\n      .toLowerCase()\n      .replace(/[^a-z0-9]/g, \"\")\n      .replace(/[ _]/g, \"-\") + \"-nativefier-\" + hash\n  );\n}", "CodeBleu_score": 40.762972258858234}]}
