{"instance_id": "ba8707e206f9", "generation_result": [{"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    wait, _ = self._orig_kazoo_connect(*args)\n    return max(2.0, (self._client._connection.loop_wait - 2) * 1000), _\n\n", "CodeBleu_score": 48.59663188804328}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    wait, _ = self._orig_kazoo_connect(*args)\n    wait = max(2, wait - 2) * 1000\n    return wait, _\n\n", "CodeBleu_score": 49.43863382804799}, {"code": "def _kazoo_connect(self, *args: Any) -> Tuple[Union[int, float], Union[int, float]]\n\t\n    loop_wait = max(2, self._client._connection.loop_wait - 2) * 1000\n    return loop_wait, self._orig_kazoo_connect(*args)\n\n", "CodeBleu_score": 46.45651408135914}]}
{"instance_id": "88e24a7c26a4", "generation_result": [{"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if not isinstance(config, dict):\n        config = config.data\n    self.retry_timeout = config['retry_timeout']\n    self.loop_wait = config['loop_wait']\n    if self.client.set_session_timeout(config['ttl']):\n        if isinstance(self.client._connection._handler, PatroniSequentialThreadingHandler):\n            self.client._connection._handler.set_connect_timeout(self.loop_wait)\n    else:\n        if self.loop_wait != self.client._connection._handler.loop_wait:\n            self.client._connection._handler.set_connect_timeout(self.loop_wait)\n        self.client.close()\n\n", "CodeBleu_score": 40.35725847107468}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n    if isinstance(config, dict):\n        config = Config(config)\n    if self.retry_timeout != config['retry_timeout']:\n        self.retry_timeout = config['retry_timeout']\n        self.client.handler.set_connect_timeout(self.retry_timeout)\n    if self.loop_wait != config['loop_wait']:\n        self.loop_wait = config['loop_wait']\n        self.client.handler.set_connect_timeout(self.retry_timeout)\n    if self.client.handler.set_timeout(config['ttl']):\n        self.client.handler.close_socket()\n\n", "CodeBleu_score": 40.0283721667216}, {"code": "def reload_config(self, config: Union['Config', Dict[str, Any]]) -> None\n\t\n\n    self.retry_timeout = config.get('retry_timeout', self.retry_timeout)\n    self.loop_wait = config.get('loop_wait', self.loop_wait)\n    self.ttl = config.get('ttl', self.ttl)\n    if self.loop_wait != self._client._connection.loop_wait:\n        self._client._connection.loop_wait = self.loop_wait\n        if isinstance(self._client._connection._handler, PatroniSequentialThreadingHandler):\n            self._client._connection._handler.set_connect_timeout(self.loop_wait)\n    if self._client.set_ttl(self.ttl) is False:\n        self._client.close()\n\n", "CodeBleu_score": 43.677557898172125}]}
{"instance_id": "2af7d7b3c887", "generation_result": [{"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    self._logger.info('Loading cluster from %s', path)\n    init = self.get_node(path + self._INIT)\n    config = self.get_node(path + self._CONFIG)\n    timeline = self.get_node(path + self._TIMELINE)\n    sync = self.get_node(path + self._SYNC)\n    members = self.load_members(path)\n    leader = self.get_node(path + self._LEADER)\n    status = self.get_status(path, leader and self.member(leader[0], leader[1].data, leader[1]))\n    failover = self.get_node(path + self._FAILOVER)\n    failsafe = self.get_node(path + self._FAILSAFE)\n    return Cluster(init, config, timeline, sync, members, status, failover, failsafe)\n\n", "CodeBleu_score": 17.845805685864455}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    self.initialize(path)\n    self.config = self.load_config(path)\n    self.timeline_history = self.load_timeline_history(path)\n    self.synchronization = self.load_synchronization(path)\n    self.members = self.load_members(path)\n    self.leader = self.load_leader(path)\n    self.status = self.load_status(path)\n    self.failover = self.load_failover(path)\n    self.failsafe = self.load_failsafe(path)\n    return Cluster(\n        self.initialize.state,\n        self.config,\n        self.timeline_history,\n        self.synchronization,\n        self.members,\n        self.leader,\n        self.status,\n        self.failover,\n        self.failsafe,\n    )\n\n", "CodeBleu_score": 10.378367572605026}, {"code": "def _postgresql_cluster_loader(self, path: str) -> Cluster\n\t\n    cluster = Cluster()\n    cluster.initialize = self.get_node(path + self._INITIALIZE) is not None\n    cluster.config = self.get_node(path + self._CONFIG)\n    cluster.timeline_history = self.get_node(path + self._TIMELINE_HISTORY)\n    cluster.synchronization = self.get_node(path + self._SYNCHRONIZATION)\n    cluster.members = self.load_members(path)\n    cluster.leader = self.load_leader(path)\n    cluster.status = self.get_status(path, cluster.leader)\n    cluster.failover = self.get_node(path + self._FAILOVER)\n    cluster.failsafe = self.get_node(path + self._FAILSAFE)\n    return cluster\n\n", "CodeBleu_score": 13.307635803589843}]}
{"instance_id": "43e1bc044d8e", "generation_result": [{"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        return self._client.retry(self._client.create, self._leader_path, self._leader_data, makepath=True, ephemeral=True)\n    except ZooKeeperError as e:\n        if e.args[0] == KeeperState.CONNECTING:\n            raise ZooKeeperError('ZooKeeper connection is closed')\n        raise e\n    except NodeExistsError:\n        logger.info('Another instance has the leader lock')\n        return False\n    except Exception:\n        logger.exception('Failed to acquire leader lock')\n        return False\n\n", "CodeBleu_score": 44.636810549233005}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self._client.retry(self._client.create, self._leader_path, self._leader_value, makepath=True, ephemeral=True)\n        return True\n    except KazooConnectionLoss:\n        raise ZooKeeperError('Connection to ZooKeeper is closed')\n    except Exception:\n        logger.exception('Failed to acquire lock')\n        if not isinstance(sys.exc_info()[1], NodeExistsError):\n            logger.info('Lock is already acquired by another instance')\n        return False\n\n\n", "CodeBleu_score": 44.547170886576886}, {"code": "def attempt_to_acquire_leader(self) -> bool\n\t\n    try:\n        self._client.retry(self._client.create, self._path, self._value, makepath=True, ephemeral=True)\n        return True\n    except Exception:\n        logger.exception('Failed to acquire leader lock')\n        raise ZooKeeperError('ZooKeeper is not responding properly')\n    except NodeExistsError:\n        logger.info('Another instance has the leader lock')\n    return False\n\n", "CodeBleu_score": 41.41755521019368}]}
{"instance_id": "93d126ab8a22", "generation_result": [{"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._client.client_id is not None and leader.session != self._client.client_id[0]:\n        logger.warning('Recreating the leader ZNode due to ownership mismatch')\n        try:\n            self._client.delete_async(self.leader_path).get(timeout=1)\n        except NoNodeError:\n            pass\n        except (ConnectionClosedError, RetryFailedError) as e:\n            raise ZooKeeperError(e)\n        except Exception:\n            return False\n\n    if not self._create(self.leader_path, self._name.encode('utf-8'), retry=True):\n        return False\n\n    self.__last_leader_data = leader.data\n    return True\n\n", "CodeBleu_score": 47.79631399802711}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._client.client_id is not None and leader.session != self._client.client_id[0]:\n        logger.warning('Recreating the leader ZNode due to ownership mismatch')\n        try:\n            self._client.delete_async(self.leader_path).get(timeout=1)\n        except NoNodeError:\n            pass\n        except (ConnectionClosedError, RetryFailedError) as e:\n            raise ZooKeeperError(e)\n        except Exception:\n            return False\n\n    try:\n        self._client.create_async(self.leader_path, self._name.encode('utf-8'), makepath=True, ephemeral=True).get(timeout=1)\n        return True\n    except Exception as e:\n        if not isinstance(e, NodeExistsError):\n            logger.exception('_update_leader')\n        return False\n\n", "CodeBleu_score": 55.46796105013705}, {"code": "def _update_leader(self, leader: Leader) -> bool\n\t\n    if self._client.client_id is not None and leader.session != self._client.client_id[0]:\n        logger.warning('Recreating the leader ZNode due to ownership mismatch')\n        try:\n            self._client.delete_async(self.leader_path).get(timeout=1)\n        except NoNodeError:\n            pass\n        except (ConnectionClosedError, RetryFailedError) as e:\n            raise ZooKeeperError(e)\n        except Exception:\n            return False\n\n    try:\n        self._client.create_async(self.leader_path, self._name.encode('utf-8'), makepath=True, ephemeral=True).get(timeout=1)\n        return True\n    except Exception as e:\n        if not isinstance(e, NodeExistsError):\n            logger.exception('_update_leader')\n        return False\n\n", "CodeBleu_score": 55.46796105013705}]}
{"instance_id": "f68719982812", "generation_result": [{"code": "def poll(self) -> bool\n\t\n    if self._next_poll is not None and time.time() < self._next_poll:\n        return False\n    self._next_poll = time.time() + self._poll_interval\n    try:\n        response = requests_get(self._exhibitors, self._exhibitor_port, self._uri_path, timeout=self.TIMEOUT)\n    except Exception as e:\n        logger.warning('failed to get exhibitor status: %s', e)\n        return False\n    try:\n        data = json.loads(response.text)\n    except Exception as e:\n        logger.warning('failed to parse exhibitor response: %s', e)\n        return False\n    if not isinstance(data, list):\n        logger.warning('unexpected response from exhibitors: %s', response.text)\n        return False\n    if len(data) == 0:\n        logger.warning('empty response from exhibitors')\n        return False\n    zookeeper_hosts = ','.join([f'{d[\"hostname\"]}:{d[\"port\"]}' for d in data])\n    if self._zookeeper_hosts != zookeeper_hosts:\n        logger.info('new zookeeper hosts: %s', zookeeper_hosts)\n        self._zookeeper_hosts = zookeeper_hosts\n        return True\n    return False\n\n", "CodeBleu_score": 46.42549905219426}, {"code": "def poll(self) -> bool\n\t\n    if self._next_poll is None or self._next_poll <= time.time():\n        self._next_poll = time.time() + self._poll_interval\n        try:\n            logger.info('polling exhibitors: %s', self._exhibitors)\n            response = requests_get(self._exhibitors, self._exhibitor_port, self._uri_path, timeout=self.TIMEOUT)\n            if response.status_code != 200:\n                logger.error('got %s response from exhibitors', response.status_code)\n                return False\n            data = json.loads(response.text)\n            if not isinstance(data, list):\n                logger.error('exhibitor response was not a list: %s', data)\n                return False\n            if len(data) == 0:\n                logger.error('exhibitor response was empty')\n                return False\n            if not isinstance(data[0], dict):\n                logger.error('exhibitor response was not a list of dicts: %s', data)\n                return False\n            if 'servers' not in data[0]:\n                logger.error('exhibitor response did not contain servers: %s', data)\n                return False\n            if not isinstance(data[0]['servers'], list):\n                logger.error('exhibitor response did not contain a list of servers: %s', data)\n                return False\n            if len(data[0]['servers']) == 0:\n                logger.error('exhibitor response did not contain any servers: %s', data)\n                return False\n            if not isinstance(data[0]['servers'][0], str):\n                logger.error('exhibitor response did not contain a list of server strings: %s', data)\n                return False\n            zookeeper_hosts = ','.join(data[0]['servers'])\n            if self._zookeeper_hosts != zookeeper_hosts:\n                logger.info('zookeeper connection string changed from %s to %s', self._zookeeper_hosts, zookeeper_hosts)\n                self._zookeeper_hosts = z", "CodeBleu_score": 40.994871206172704}, {"code": "def poll(self) -> bool\n\t\n    if self._next_poll is None or self._next_poll < time.time():\n        self._next_poll = time.time() + self._poll_interval\n        try:\n            response = requests_get(self._exhibitors, self._exhibitor_port, self._uri_path, timeout=self.TIMEOUT)\n            if response.status_code != 200:\n                logger.error('Failed to get exhibitors: %s', response.text)\n                return False\n            data = json.loads(response.text)\n        except Exception:\n            logger.exception('Failed to get exhibitors')\n            return False\n        servers = data.get('servers')\n        if servers is None:\n            logger.error('No servers in response: %s', data)\n            return False\n        zookeeper_hosts = ','.join([f'{server}:{self._exhibitor_port}' for server in servers])\n        if self._zookeeper_hosts != zookeeper_hosts:\n            logger.info('ZooKeeper connection string changed from %s to %s', self._zookeeper_hosts, zookeeper_hosts)\n            self._zookeeper_hosts = zookeeper_hosts\n            return True\n        return False\n\n", "CodeBleu_score": 48.57244536365532}]}
{"instance_id": "022ed3721913", "generation_result": [{"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider:\n        self._client.hosts = self._ensemble_provider.zookeeper_hosts\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n\n", "CodeBleu_score": 78.36729083259353}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n    if self._ensemble_provider is not None:\n        self._ensemble_provider.poll()\n        self._client.hosts = self._ensemble_provider.zookeeper_hosts\n    return super(Exhibitor, self)._load_cluster(path, loader)\n\n", "CodeBleu_score": 76.41213238257136}, {"code": "def _load_cluster(\n            self, path: str, loader: Callable[[str], Union[Cluster, Dict[int, Cluster]]]\n    ) -> Union[Cluster, Dict[int, Cluster]]\n\t\n        if self._ensemble_provider:\n            self._client.hosts = self._ensemble_provider.zookeeper_hosts\n        return super(Exhibitor, self)._load_cluster(path, loader)", "CodeBleu_score": 77.22098800330863}]}
{"instance_id": "c7d2e1db0cda", "generation_result": [{"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t        this.nodeCache = nodeCache;\n        this.nodeCacheListener = nodeCacheListener;\n    }", "CodeBleu_score": 78.43209421890232}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t        this.nodeCache = nodeCache;\n        this.nodeCacheListener = nodeCacheListener;\n    }", "CodeBleu_score": 78.43209421890232}, {"code": "public ZookeeperListener(NodeCache nodeCache, NodeCacheListener nodeCacheListener){\n\t        this.nodeCache = nodeCache;\n        this.nodeCacheListener = nodeCacheListener;\n    }", "CodeBleu_score": 78.43209421890232}]}
{"instance_id": "c779f567d3e2", "generation_result": [{"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    String group = getGroup();\n    String dataId = getDataId();\n\n    logUnsubscribeStarted();\n\n    try {\n        zookeeperOperation.unsubscribeConfig(group, dataId, zookeeperListener);\n    } catch (Exception e) {\n        logUnsubscribeFailed(e);\n    }\n}", "CodeBleu_score": 99.81910406510357}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    String group = getGroup();\n    String dataId = getDataId();\n\n    logUnsubscribeStarted();\n\n    try {\n        zookeeperOperation.unsubscribeConfig(group, dataId, zookeeperListener);\n    } catch (Exception e) {\n        logUnsubscribeFailed(e);\n    }\n}", "CodeBleu_score": 99.81910406510357}, {"code": "public void destroy(){\n\t    if (zookeeperListener == null) {\n        return;\n    }\n\n    String group = getGroup();\n    String dataId = getDataId();\n\n    logUnsubscribeStarted();\n\n    try {\n        zookeeperOperation.unsubscribeConfig(zookeeperListener, group, dataId);\n    } catch (Exception e) {\n        logUnsubscribeFailed(e);\n    }\n}", "CodeBleu_score": 95.49474818706128}]}
{"instance_id": "7f0ce4db487b", "generation_result": [{"code": "public Map<String, String> getServerMetadata(Server server){\n\t        if (server instanceof ZookeeperServer) {\n            ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\n            return zookeeperServer.getPayload();\n        }\n\n        return Maps.newHashMap();\n    }", "CodeBleu_score": 64.05198189053093}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\n        return zookeeperServer.getPayload();\n    }\n\n    return super.getServerMetadata(server);\n}", "CodeBleu_score": 64.9439245914344}, {"code": "public Map<String, String> getServerMetadata(Server server){\n\t    if (server instanceof ZookeeperServer) {\n        ZookeeperServer zookeeperServer = (ZookeeperServer) server;\n\n        return zookeeperServer.getPayload();\n    }\n\n    return Maps.newHashMap();\n}", "CodeBleu_score": 63.87551278195915}]}
{"instance_id": "7365d194b7ee", "generation_result": [{"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path, false);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData childData = nodeCache.getCurrentData();\n            if (childData == null) {\n                return;\n            }\n\n            String config = new String(childData.getData());\n            zookeeperSubscribeCallback.callback(convertConfig(config));\n        }\n    };\n\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start();\n\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    addListener(zookeeperListener);\n\n    return zookeeperListener;\n}", "CodeBleu_score": 68.99474220162787}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path, false);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData childData = nodeCache.getCurrentData();\n            if (childData == null) {\n                return;\n            }\n\n            String config = new String(childData.getData(), StandardCharsets.UTF_8);\n            zookeeperSubscribeCallback.callback(convertConfig(config));\n        }\n    };\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start();\n\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    listeners.add(zookeeperListener);\n\n    return zookeeperListener;\n}", "CodeBleu_score": 69.97832943195709}, {"code": "public ZookeeperListener subscribeConfig(String group, String serviceId, ZookeeperSubscribeCallback zookeeperSubscribeCallback) throws Exception{\n\t    String path = getPath(group, serviceId);\n    NodeCache nodeCache = new NodeCache(curatorFramework, path, false);\n    NodeCacheListener nodeCacheListener = new NodeCacheListener() {\n\n        @Override\n        public void nodeChanged() throws Exception {\n            ChildData childData = nodeCache.getCurrentData();\n            if (childData == null) {\n                return;\n            }\n\n            String config = new String(childData.getData());\n            zookeeperSubscribeCallback.callback(convertConfig(config));\n        }\n    };\n\n    nodeCache.getListenable().addListener(nodeCacheListener);\n    nodeCache.start(true);\n\n    ZookeeperListener zookeeperListener = new ZookeeperListener(nodeCache, nodeCacheListener);\n    listeners.put(path, zookeeperListener);\n\n    return zookeeperListener;\n}", "CodeBleu_score": 70.04247088315722}]}
{"instance_id": "6f492670162b", "generation_result": [{"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t        ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n        serverList.initWithNiwsConfig(config);\n        serverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor);\n        serverList.setServiceId(config.getClientName());\n\n        return serverList;\n    }", "CodeBleu_score": 85.4650137758701}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t    ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n    serverList.initWithNiwsConfig(config);\n    serverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor);\n    serverList.setServiceId(config.getClientName());\n\n    return serverList;\n}", "CodeBleu_score": 87.30929095866173}, {"code": "public ServerList<?> ribbonServerList(IClientConfig config, ServiceDiscovery<ZookeeperInstance> serviceDiscovery){\n\t        ZookeeperServerListDecorator serverList = new ZookeeperServerListDecorator(serviceDiscovery);\n        serverList.initWithNiwsConfig(config);\n        serverList.setLoadBalanceListenerExecutor(loadBalanceListenerExecutor);\n        serverList.setServiceId(config.getClientName());\n\n        return serverList;\n    }", "CodeBleu_score": 85.4650137758701}]}
{"instance_id": "17c01a5f8ef8", "generation_result": [{"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get RegisterListenerExecutor failed, ignore to execute...\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Zookeeper register failed, ignoring...\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}, {"code": "public void register(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onRegister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"The bean of RegisterListenerExecutor is not found, ignore to execute\");\n    }\n\n    serviceRegistry.register(registration);\n}", "CodeBleu_score": 91.46133830544045}]}
{"instance_id": "99392dfa2335", "generation_result": [{"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}, {"code": "public void deregister(ZookeeperRegistration registration){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onDeregister(registration);\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.deregister(registration);\n}", "CodeBleu_score": 91.46429325894339}]}
{"instance_id": "02a835946e90", "generation_result": [{"code": "public void close(){\n\t        try {\n            RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n            registerListenerExecutor.onClose();\n        } catch (BeansException e) {\n            // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n        }\n\n        serviceRegistry.close();\n    }", "CodeBleu_score": 97.2469036405854}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}, {"code": "public void close(){\n\t    try {\n        RegisterListenerExecutor registerListenerExecutor = applicationContext.getBean(RegisterListenerExecutor.class);\n        registerListenerExecutor.onClose();\n    } catch (BeansException e) {\n        // LOG.warn(\"Get bean for RegisterListenerExecutor failed, ignore to executor listener\");\n    }\n\n    serviceRegistry.close();\n}", "CodeBleu_score": 99.7694205192842}]}
{"instance_id": "64cf817f5945", "generation_result": [{"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = getGroup();\n    String dataId = getDataId(globalConfig);\n    try {\n        LOG.info(\"Start to subscribe config, group={}, dataId={}\", group, dataId);\n\n        return zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n            @Override\n            public void callback(String config) {\n                callbackConfig(config, globalConfig);\n            }\n        });\n    } catch (Exception e) {\n        LOG.error(\"Subscribe config failed, group={}, dataId={}\", group, dataId, e);\n    }\n\n    return null;\n}", "CodeBleu_score": 81.77502645959126}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t        String group = getGroup();\n        String dataId = getDataId(globalConfig);\n\n        LOG.info(\"Start to subscribe config, group={}, dataId={}\", group, dataId);\n        try {\n            return zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n                @Override\n                public void callback(String config) {\n                    callbackConfig(config, globalConfig);\n                }\n            });\n        } catch (Exception e) {\n            LOG.error(\"Subscribe failed, group={}, dataId={}\", group, dataId, e);\n        }\n\n        return null;\n    }", "CodeBleu_score": 81.61458772962887}, {"code": "private ZookeeperListener subscribeConfig(boolean globalConfig){\n\t    String group = getGroup();\n    String dataId = getDataId(globalConfig);\n\n    LOG.info(\"Start to subscribe config, group={}, dataId={}\", group, dataId);\n    try {\n        return zookeeperOperation.subscribeConfig(group, dataId, new ZookeeperSubscribeCallback() {\n            @Override\n            public void callback(String config) {\n                callbackConfig(config, globalConfig);\n            }\n        });\n    } catch (Exception e) {\n        LOG.error(\"Subscribe failed, group={}, dataId={}\", group, dataId, e);\n    }\n\n    return null;\n}", "CodeBleu_score": 83.5690539813306}]}
{"instance_id": "be408acc71f6", "generation_result": [{"code": "public CuratorFramework curatorFramework(){\n\t        String connectString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECT_STRING);\n        if (StringUtils.isEmpty(connectString)) {\n            throw new DiscoveryException(\"Zookeeper connect string isn't present. Please check your configuration\");\n        }\n\n        int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, ZookeeperConstant.ZOOKEEPER_DEFAULT_RETRY_COUNT);\n        int sleepTime = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, Integer.class, ZookeeperConstant.ZOOKEEPER_DEFAULT_SLEEP_TIME);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(connectString).retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount)).build();\n        curatorFramework.start();\n\n        return curatorFramework;\n    }", "CodeBleu_score": 81.76080820490024}, {"code": "public CuratorFramework curatorFramework(){\n\t        String connectString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECT_STRING);\n        if (StringUtils.isEmpty(connectString)) {\n            throw new DiscoveryException(\"Zookeeper connect string is invalid for creating CuratorFramework\");\n        }\n\n        int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, ZookeeperConstant.ZOOKEEPER_DEFAULT_RETRY_COUNT);\n        int sleepTime = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_TIME, Integer.class, ZookeeperConstant.ZOOKEEPER_DEFAULT_SLEEP_TIME);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.builder().connectString(connectString).retryPolicy(new ExponentialBackoffRetry(sleepTime, retryCount)).build();\n        curatorFramework.start();\n\n        return curatorFramework;\n    }", "CodeBleu_score": 81.8451901985224}, {"code": "public CuratorFramework curatorFramework(){\n\t        String connectString = environment.getProperty(ZookeeperConstant.ZOOKEEPER_CONNECT_STRING);\n        if (StringUtils.isEmpty(connectString)) {\n            throw new DiscoveryException(\"Zookeeper connect string isn't invalid\");\n        }\n\n        int retryCount = environment.getProperty(ZookeeperConstant.ZOOKEEPER_RETRY_COUNT, Integer.class, ZookeeperConstant.DEFAULT_RETRY_COUNT);\n        int sleepBetweenRetries = environment.getProperty(ZookeeperConstant.ZOOKEEPER_SLEEP_BETWEEN_RETRIES, Integer.class, ZookeeperConstant.DEFAULT_SLEEP_BETWEEN_RETRIES);\n\n        CuratorFramework curatorFramework = CuratorFrameworkFactory.newClient(connectString, new ExponentialBackoffRetry(sleepBetweenRetries, retryCount));\n        curatorFramework.start();\n\n        return curatorFramework;\n    }", "CodeBleu_score": 67.15931485092901}]}
{"instance_id": "3628d7b6f0a5", "generation_result": [{"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    /**\n     * This method returns a new instance of GatewayStrategyRouteZookeeperProcessor.\n     * @return a new instance of GatewayStrategyRouteZookeeperProcessor\n     */\n    @Bean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public ZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 74.91212662841629}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    @Bean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public ZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 74.80120279114679}, {"code": "protected static class GatewayRouteZookeeperConfiguration{\n\t    /**\n     * This method creates a new instance of GatewayStrategyRouteZookeeperProcessor.\n     * It is conditional, only executing if the property \"spring.cloud.gateway.discovery.locator.enabled\" is set to \"false\" or is missing.\n     *\n     * @return A new instance of GatewayStrategyRouteZookeeperProcessor.\n     */\n    @Bean\n    @ConditionalOnProperty(value = \"spring.cloud.gateway.discovery.locator.enabled\", havingValue = \"false\", matchIfMissing = true)\n    public ZookeeperProcessor gatewayStrategyRouteZookeeperProcessor() {\n        return new GatewayStrategyRouteZookeeperProcessor();\n    }\n}", "CodeBleu_score": 74.91212662841629}]}
{"instance_id": "68a13b54ad7c", "generation_result": [{"code": "public  CuratorFramework createCuratorFramework(){\n\t        RetryPolicy retryPolicy = new ExponentialBackoffRetry(zooKeeperClientProperties.getBaseSleepTimeMs(), zooKeeperClientProperties.getMaxRetries());\n        curatorFramework = CuratorFrameworkFactory.builder()\n                .connectString(zooKeeperClientProperties.getHosts())\n                .sessionTimeoutMs(zooKeeperClientProperties.getSessionTimeoutMs())\n                .namespace(zooKeeperClientProperties.getNamespace())\n                .retryPolicy(retryPolicy)\n                .build();\n        curatorFramework.start();\n        return curatorFramework;\n    }", "CodeBleu_score": 63.075505498766574}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t        RetryPolicy retryPolicy = new ExponentialBackoffRetry(zooKeeperClientProperties.getBaseSleepTimeMs(), zooKeeperClientProperties.getMaxRetries());\n        curatorFramework = CuratorFrameworkFactory.builder().connectString(zooKeeperClientProperties.getHosts())\n                .sessionTimeoutMs(zooKeeperClientProperties.getSessionTimeoutMs())\n                .connectionTimeoutMs(zooKeeperClientProperties.getConnectionTimeoutMs())\n                .namespace(zooKeeperClientProperties.getNamespace())\n                .retryPolicy(retryPolicy)\n                .build();\n        curatorFramework.start();\n        return curatorFramework;\n    }", "CodeBleu_score": 60.37676537332229}, {"code": "public  CuratorFramework createCuratorFramework(){\n\t    RetryPolicy retryPolicy = new ExponentialBackoffRetry(zooKeeperClientProperties.getBaseSleepTimeMs(), zooKeeperClientProperties.getMaxRetries());\n    curatorFramework = CuratorFrameworkFactory.builder().connectString(zooKeeperClientProperties.getHosts())\n            .sessionTimeoutMs(zooKeeperClientProperties.getSessionTimeoutMs())\n            .connectionTimeoutMs(zooKeeperClientProperties.getConnectionTimeoutMs())\n            .retryPolicy(retryPolicy).namespace(zooKeeperClientProperties.getNamespace())\n            .build();\n    curatorFramework.start();\n    return curatorFramework;\n}", "CodeBleu_score": 62.53878952215095}]}
{"instance_id": "018a3d7b5f59", "generation_result": [{"code": "public void lock(String path) throws DistributedLockException{\n\t    if (locksMap.containsKey(Thread.currentThread())) {\n        InterProcessMutex lock = locksMap.get(Thread.currentThread());\n        try {\n            lock.acquire();\n        } catch (Exception e) {\n            throw new DistributedLockException(e);\n        }\n    } else {\n        InterProcessMutex lock = new InterProcessMutex(curatorFrameworkClient.getClient(), path);\n        try {\n            lock.acquire();\n            locksMap.put(Thread.currentThread(), lock);\n        } catch (Exception e) {\n            throw new DistributedLockException(e);\n        }\n    }\n}", "CodeBleu_score": 51.093381249040384}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    Thread currentThread = Thread.currentThread();\n    InterProcessMutex lock = locksMap.get(currentThread);\n    if (lock == null) {\n        InterProcessMutex newLock = new InterProcessMutex(curatorFrameworkClient.getClient(), path);\n        try {\n            newLock.acquire();\n            locksMap.put(currentThread, newLock);\n        } catch (Exception e) {\n            throw new DistributedLockException(e);\n        }\n    } else {\n        try {\n            lock.acquire();\n        } catch (Exception e) {\n            throw new DistributedLockException(e);\n        }\n    }\n}", "CodeBleu_score": 44.85169335818898}, {"code": "public void lock(String path) throws DistributedLockException{\n\t    InterProcessMutex lock = null;\n    try {\n        lock = new InterProcessMutex(curatorFrameworkClient.getClient(), path);\n        if (locksMap.get(Thread.currentThread()) == null) {\n            lock.acquire();\n            locksMap.put(Thread.currentThread(), lock);\n        } else {\n            lock.acquire();\n        }\n    } catch (Exception e) {\n        throw new DistributedLockException(e);\n    }\n}", "CodeBleu_score": 34.55718838511317}]}
{"instance_id": "2068af09c973", "generation_result": [{"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n    String nodePath = nodePath(dtpProperties);\n    if (dtpProperties.getConfigType() == PROPERTIES) {\n        return genPropertiesTypeMap(curatorFramework, nodePath);\n    } else {\n        nodePath = ZKPaths.makePath(nodePath, dtpProperties.getConfigKey());\n        GetDataBuilder data = curatorFramework.getData();\n        byte[] bytes = data.forPath(nodePath);\n        return ConfigHandler.parseMap(new String(bytes, StandardCharsets.UTF_8));\n    }\n}", "CodeBleu_score": 45.90462878477429}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n    String nodePath = nodePath(dtpProperties);\n    if (dtpProperties.getConfigType() == PROPERTIES) {\n        return genPropertiesTypeMap(curatorFramework, nodePath);\n    } else {\n        nodePath = nodePath + \"/\" + dtpProperties.getConfigKey();\n        GetDataBuilder getDataBuilder = curatorFramework.getData().forPath(nodePath);\n        String value = new String(getDataBuilder.inBackground().forPath(nodePath), StandardCharsets.UTF_8);\n        return ConfigHandler.parseMap(value);\n    }\n}", "CodeBleu_score": 48.60652836037627}, {"code": "public static Map<Object, Object> genPropertiesMap(DtpProperties dtpProperties){\n\t    CuratorFramework curatorFramework = getCuratorFramework(dtpProperties);\n    String nodePath = nodePath(dtpProperties);\n    if (dtpProperties.getConfigType() == PROPERTIES) {\n        return genPropertiesTypeMap(curatorFramework, nodePath);\n    } else {\n        String configKey = dtpProperties.getConfigKey();\n        String configPath = ZKPaths.makePath(nodePath, configKey);\n        GetDataBuilder dataBuilder = curatorFramework.getData();\n        byte[] bytes = dataBuilder.forPath(configPath);\n        return ConfigHandler.parseJson(new String(bytes, StandardCharsets.UTF_8));\n    }\n}", "CodeBleu_score": 46.25025467242189}]}
{"instance_id": "3d3c9020d299", "generation_result": [{"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t        DtpProperties dtpProperties = BinderHelper.bindDtpProperties(environment);\n        Map<String, Object> properties = dtpProperties.toMap();\n        if (properties.isEmpty()) {\n            return;\n        }\n\n        if (environment.getPropertySources().stream()\n                .noneMatch(ps -> ps.getName().equals(ZK_PROPERTY_SOURCE_NAME))) {\n            OriginTrackedMapPropertySource propertySource =\n                    new OriginTrackedMapPropertySource(ZK_PROPERTY_SOURCE_NAME, properties);\n            environment.getPropertySources().addLast(propertySource);\n        }\n    }", "CodeBleu_score": 45.875792265444396}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t        DtpProperties dtpProperties = BinderHelper.bindDtpProperties(environment);\n        Map<String, Object> propertiesMap = dtpProperties.toMap();\n        if (propertiesMap.get(DtpProperties.PREFIX) == null) {\n            return;\n        }\n\n        // generate zk properties\n        Map<String, Object> zkProperties = CuratorUtil.generateZkProperties(dtpProperties);\n        // check if zk properties exists\n        if (zkProperties.isEmpty()) {\n            return;\n        }\n\n        // add zk properties\n        MutablePropertySources propertySources = environment.getPropertySources();\n        if (!propertySources.contains(ZK_PROPERTY_SOURCE_NAME)) {\n            propertySources.addLast(new OriginTrackedMapPropertySource(ZK_PROPERTY_SOURCE_NAME, zkProperties));\n        }\n    }", "CodeBleu_score": 45.797314085614516}, {"code": "public void postProcessEnvironment(ConfigurableEnvironment environment, SpringApplication application){\n\t    DtpProperties dtpProperties = BinderHelper.bindDtpProperties(environment);\n    Map<String, Object> properties = dtpProperties.toMap();\n    if (properties.isEmpty()) {\n        log.warn(\\\"DynamicTp zookeeper config is empty, please check whether the configuration file exists and whether the file name is correct.\\\");\n        return;\n    }\n\n    if (!environment.getPropertySources().contains(ZK_PROPERTY_SOURCE_NAME)) {\n        Map<String, Object> zkConfigMap = CuratorUtil.getZkConfigMap(properties);\n        if (zkConfigMap.isEmpty()) {\n            log.warn(\\\"DynamicTp zookeeper config is empty, please check whether the configuration file exists and whether the file name is correct.\\\");\n            return;\n        }\n        MutablePropertySources propertySources = environment.getPropertySources();\n        OriginTrackedMapPropertySource source = new OriginTrackedMapPropertySource(ZK_PROPERTY_SOURCE_NAME, zkConfigMap);\n        propertySources.addFirst(source);\n    }\n}", "CodeBleu_score": 43.74812752992163}]}
{"instance_id": "0a934e7885be", "generation_result": [{"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    builder.Register(provider => {\n        var logger = provider.Resolve<ILogger<ZooKeeperServiceRouteManager>>();\n        var serializer = provider.Resolve<ISerializer<string>>();\n        var routeFactory = provider.Resolve<IServiceRouteFactory>();\n        var zookeeperClientProvider = provider.Resolve<IZookeeperClientProvider>();\n        return new ZooKeeperServiceRouteManager(\n            logger,\n            serializer,\n            routeFactory,\n            zookeeperClientProvider,\n            configInfo.ChRoot,\n            configInfo.RoutePath,\n            configInfo.SubscribePath\n        );\n    }).As<IServiceRouteManager>().SingleInstance();\n    return this;\n}", "CodeBleu_score": 43.89501190951241}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    builder.Register(provider => {\n        var serializer = provider.GetInstances<ISerializer<ServiceRoute>>();\n        var routeFactory = provider.GetRequiredService<IServiceRouteFactory>();\n        var logger = provider.GetLogger<ZooKeeperServiceRouteManager>();\n        var zookeeperClientProvider = provider.GetRequiredService<IZookeeperClientProvider>();\n        return new ZooKeeperServiceRouteManager(configInfo, routeFactory, serializer, logger, zookeeperClientProvider);\n    }).As<IServiceRouteManager>().SingleInstance();\n    return this;\n}", "CodeBleu_score": 39.28041792518771}, {"code": "public ZookeeperModule UseZooKeeperRouteManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    builder.Register(provider => {\n        var serializer = provider.GetInstances<ISerializer<ServiceRoute>>();\n        var routeFactory = new ZooKeeperServiceRouteFactory(serializer);\n        var logger = provider.GetLogger<ZooKeeperServiceRouteManager>();\n        var zookeeperClientProvider = provider.GetRequiredService<IZookeeperClientProvider>();\n        return new ZooKeeperServiceRouteManager(routeFactory, logger, zookeeperClientProvider, configInfo);\n    }).As<IServiceRouteManager>().SingleInstance();\n    return this;\n}", "CodeBleu_score": 39.11404618291069}]}
{"instance_id": "c30a17587331", "generation_result": [{"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t            UseCommandManager(builder, provider => {\n                var result = new ZooKeeperServiceCommandManager(\n                    GetConfigInfo(configInfo),\n                    provider.GetRequiredService<ISerializer<byte[]>>(),\n                    provider.GetRequiredService<ISerializer<string>>(),\n                    provider.GetRequiredService<IServiceCommandFactory>(),\n                    provider.GetRequiredService<ILogger<ZooKeeperServiceCommandManager>>(),\n                    provider.GetRequiredService<IZookeeperClientProvider>());\n                return result;\n            });\n            return this;\n        }", "CodeBleu_score": 74.59766935389194}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t            UseCommandManager(builder, provider =>\n                new ZooKeeperServiceCommandManager(\n                    GetConfigInfo(configInfo),\n                    provider.GetRequiredService<ISerializer<byte[]>>(),\n                    provider.GetRequiredService<ISerializer<string>>(),\n                    provider.GetRequiredService<ILogger<ZooKeeperServiceCommandManager>>(),\n                    provider.GetRequiredService<IZookeeperClientProvider>()\n                ));\n            return this;\n        }", "CodeBleu_score": 67.32198142636105}, {"code": " public ZookeeperModule UseZooKeeperCommandManager(ContainerBuilderWrapper builder, ConfigInfo configInfo){\n\t    UseCommandManager(builder, provider => {\n        var result = new ZooKeeperServiceCommandManager(GetConfigInfo(configInfo),\n            provider.GetRequiredService<ISerializer<byte[]>>(),\n            provider.GetRequiredService<ISerializer<string>>(),\n            provider.GetRequiredService<ILogger<ZooKeeperServiceCommandManager>>(),\n            provider.GetRequiredService<IZookeeperClientProvider>());\n        return result;\n    });\n    return this;\n}", "CodeBleu_score": 72.07095564357189}]}
{"instance_id": "213cc4aa9b19", "generation_result": [{"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(\"builder\");\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"InvalidFilePath\", \"path\");\n    }\n    path = EnvironmentHelper.GetEnvironmentVariable(path);\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n        path = Path.GetFileName(path);\n    }\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n    source.ResolveFileProvider();\n    builder.Add(source);\n    builder.Build();\n    return builder;\n}", "CodeBleu_score": 73.23874180871952}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentNullException(nameof(path));\n    }\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n        path = Path.GetFileName(path);\n    }\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n    source.ResolveFileProvider();\n    builder.Add(source);\n    return builder;\n}", "CodeBleu_score": 76.58322118521733}, {"code": "public static IConfigurationBuilder AddZookeeperFile(this IConfigurationBuilder builder, IFileProvider provider, string path, bool optional, bool reloadOnChange){\n\t    if (builder == null) {\n        throw new ArgumentNullException(nameof(builder));\n    }\n    if (string.IsNullOrEmpty(path)) {\n        throw new ArgumentException(\"Invalid file path\", nameof(path));\n    }\n\n    if (provider == null && Path.IsPathRooted(path)) {\n        provider = new PhysicalFileProvider(Path.GetDirectoryName(path));\n        path = Path.GetFileName(path);\n    }\n    var source = new ZookeeperConfigurationSource {\n        FileProvider = provider,\n        Path = path,\n        Optional = optional,\n        ReloadOnChange = reloadOnChange\n    };\n    source.ResolveFileProvider();\n    builder.Add(source);\n    return builder;\n}", "CodeBleu_score": 71.5051268721288}]}
{"instance_id": "15bbffa82a13", "generation_result": [{"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    foreach (var route in routes) {\n        foreach (var address in Address) {\n            var addressDescriptors = route.AddressDescriptors.Where(p => p.ToString().Equals(address.ToString()));\n            route.AddressDescriptors.Remove(addressDescriptors.First());\n        }\n    }\n    await SetRoutesAsync(routes.Select(p => new ServiceRouteDescriptor() { AddressDescriptors = p.AddressDescriptors, ServiceDescriptor = p.ServiceDescriptor }));\n}", "CodeBleu_score": 53.15924652367438}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    foreach (var route in routes) {\n        foreach (var address in Address) {\n            route.Address.Remove(address);\n        }\n    }\n    await SetRoutesAsync(routes);\n}", "CodeBleu_score": 58.00365763721395}, {"code": "public override async Task RemveAddressAsync(IEnumerable<AddressModel> Address){\n\t    var routes = await GetRoutesAsync();\n    foreach (var route in routes) {\n        route.Address = route.Address.Except(Address);\n    }\n    await SetRoutesAsync(routes);\n}", "CodeBleu_score": 81.59209605417736}]}
{"instance_id": "125d23de2a60", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.RoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n            var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n            if (result?.Children != null) {\n                foreach (var child in result.Children) {\n                    var childPath = $\"{nodePath}/{child}\";\n                    var route = routes.Where(p => p.ServiceDescriptor.Id == child).FirstOrDefault();\n                    if (route == null) {\n                        if (_logger.IsEnabled(LogLevel.Debug))\n                            _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                        await zooKeeper.Item2.deleteAsync(childPath);\n                    }\n                }\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n    }\n}", "CodeBleu_score": 46.635944447904066}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u51c6\u5907\u79fb\u9664\u670d\u52a1\u8def\u7531\u3002\");\n\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.RoutePath;\n        if (!path.EndsWith(\"/\"))\n            path += \"/\";\n\n        routes = routes.ToArray();\n\n        foreach (var serviceRoute in routes) {\n            var nodePath = $\"{path}{serviceRoute.ServiceDescriptor.Id}\";\n            var nodeData = _serializer.Serialize(serviceRoute);\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u8282\u70b9\uff1a{nodePath}\u4e0d\u5b58\u5728\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n\n                await zooKeeper.Item2.createAsync(nodePath, nodeData, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            } else {\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u5c06\u66f4\u65b0\u8282\u70b9\uff1a{nodePath}\u7684\u6570\u636e\u3002\");\n\n                var onlineData = (await zooKeeper.Item2.getDataAsync(nodePath)).Data;\n                if (!DataEquals(nodeData, onlineData))\n                    await zooKeeper.Item2.setDataAsync(nodePath, nodeData);\n            }\n        }\n        if (_logger.IsEnabled(LogLevel.Information))\n            _logger.LogInformation(\"\u670d\u52a1\u8def\u7531\u6dfb\u52a0\u6210\u529f\u3002\");\n    }\n}", "CodeBleu_score": 55.64374689342492}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<ServiceRoute> routes, AddressModel hostAddr){\n\t    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.RoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n            var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n            if (result?.Children != null) {\n                foreach (var child in result.Children) {\n                    var childPath = $\"{nodePath}/{child}\";\n                    var route = routes.Where(p => p.ServiceDescriptor.Id == child).FirstOrDefault();\n                    if (route == null) {\n                        if (_logger.IsEnabled(LogLevel.Debug))\n                            _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                        await zooKeeper.Item2.deleteAsync(childPath);\n                    }\n                    else {\n                        var address = route.Address.Where(p => p.ToString() == hostAddr.ToString()).FirstOrDefault();\n                        if (address != null) {\n                            if (_logger.IsEnabled(LogLevel.Debug))\n                                _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                            await zooKeeper.Item2.deleteAsync(childPath);\n                        }\n                    }\n                }\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n    }\n}", "CodeBleu_score": 43.383461314522734}]}
{"instance_id": "b020a235d57f", "generation_result": [{"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (_logger.IsEnabled(LogLevel.Debug)) {\n        _logger.LogDebug($\"\u51c6\u5907\u53cd\u5e8f\u5217\u5316\u8def\u7531\uff1a{Encoding.UTF8.GetString(data)}\u3002\");\n    }\n    if (data == null) {\n        return null;\n    }\n    var routeDescriptor = _serializer.Deserialize<ServiceRouteDescriptor>(data);\n    return _serviceRouteFactory.Create(routeDescriptor);\n}", "CodeBleu_score": 42.95918016064961}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (_logger.IsEnabled(LogLevel.Debug)) {\n        _logger.LogDebug($\"\u83b7\u53d6\u8def\u7531\u4fe1\u606f\uff1a{Encoding.UTF8.GetString(data)}\u3002\");\n    }\n    if (data == null) {\n        return null;\n    }\n    var descriptor = _serializer.Deserialize<ServiceRouteDescriptor>(data);\n    return _serviceRouteFactory.Create(descriptor);\n}", "CodeBleu_score": 43.56705984257046}, {"code": "private async Task<ServiceRoute> GetRoute(byte[] data){\n\t    if (data == null)\n        return null;\n\n    if (_logger.IsEnabled(LogLevel.Debug))\n        _logger.LogDebug($\"\u83b7\u53d6\u8def\u7531\uff1a{Encoding.UTF8.GetString(data)}\");\n\n    var routeDescriptor = _serializer.Deserialize<ServiceRouteDescriptor>(data);\n    return (await _serviceRouteFactory.CreateServiceRoutesAsync(routeDescriptor)).FirstOrDefault();\n}", "CodeBleu_score": 46.360667438434255}]}
{"instance_id": "169ed4cc2ad4", "generation_result": [{"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newRoute = await GetRoute(newData);\n    var oldRoute = _routes.Where(p => p.ServiceDescriptor.Id == newRoute.ServiceDescriptor.Id).FirstOrDefault();\n\n    lock (_lock) {\n        if (oldRoute != null) {\n            var index = _routes.IndexOf(oldRoute);\n            _routes[index] = newRoute;\n        }\n        else {\n            _routes.Add(newRoute);\n        }\n    }\n\n    OnChanged(newRoute, oldRoute);\n}", "CodeBleu_score": 46.42404240734526}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var route = await GetRoute(newData);\n    if (route == null)\n        return;\n\n    var oldRoute = _routes.FirstOrDefault(i => i.ServiceDescriptor.Id == route.ServiceDescriptor.Id);\n    if (oldRoute != null) {\n        lock (_routes) {\n            var index = _routes.IndexOf(oldRoute);\n            _routes[index] = route;\n        }\n    }\n\n    OnChanged(new[] { route }, new[] { oldRoute });\n}", "CodeBleu_score": 47.67020376859657}, {"code": "public async Task NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var route = await GetRoute(newData);\n    lock (_routes) {\n        var oldRoute = _routes.FirstOrDefault(i => i.ServiceDescriptor.Id == route.ServiceDescriptor.Id);\n        var index = _routes.IndexOf(oldRoute);\n        _routes[index] = route;\n        OnChanged(route, oldRoute);\n    }\n}", "CodeBleu_score": 41.63059955942624}]}
{"instance_id": "af01261d3199", "generation_result": [{"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var subscribersArray = subscribers.ToArray();\n    var serviceSubscribers = await GetSubscribersAsync();\n    foreach (var serviceSubscriber in serviceSubscribers) {\n        var subscriber = subscribersArray.FirstOrDefault(i => i.ServiceDescriptor.Id == serviceSubscriber.ServiceDescriptor.Id);\n        if (subscriber != null) {\n            serviceSubscriber.Address = serviceSubscriber.Address.Union(subscriber.Address).ToArray();\n        }\n    }\n    await base.SetSubscribersAsync(serviceSubscribers);\n}", "CodeBleu_score": 56.67777613057614}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var onlineSubscribers = await GetSubscribersAsync();\n    foreach (var subscriber in subscribers) {\n        var onlineSubscriber = onlineSubscribers.FirstOrDefault(i => i.ServiceDescriptor.Id == subscriber.ServiceDescriptor.Id);\n        if (onlineSubscriber != null) {\n            var addresses = subscriber.Address.Select(i => i.ToString()).ToList();\n            var onlineAddresses = onlineSubscriber.Address.Select(i => i.ToString()).ToList();\n            foreach (var address in addresses) {\n                if (!onlineAddresses.Contains(address)) {\n                    onlineAddresses.Add(address);\n                }\n            }\n            subscriber.Address = onlineAddresses.Select(i => new Uri(i)).ToArray();\n        }\n    }\n    await base.SetSubscribersAsync(subscribers);\n}", "CodeBleu_score": 52.93550515151971}, {"code": "public override async Task SetSubscribersAsync(IEnumerable<ServiceSubscriber> subscribers){\n\t    var subscribers = subscribers.ToArray();\n    var newSubscribers = subscribers.Where(serviceSubscriber => !_subscribers.Any(i => i.ServiceDescriptor.Id == serviceSubscriber.ServiceDescriptor.Id)).ToArray();\n    var updateSubscribers = subscribers.Where(serviceSubscriber => _subscribers.Any(i => i.ServiceDescriptor.Id == serviceSubscriber.ServiceDescriptor.Id)).ToArray();\n    foreach (var serviceSubscriber in updateSubscribers) {\n        var oldSubscriber = _subscribers.FirstOrDefault(i => i.ServiceDescriptor.Id == serviceSubscriber.ServiceDescriptor.Id);\n        if (oldSubscriber != null) {\n            var addresses = serviceSubscriber.Address.ToList();\n            addresses.AddRange(oldSubscriber.Address);\n            serviceSubscriber.Address = addresses.Distinct().ToArray();\n        }\n    }\n    var result = newSubscribers.Union(updateSubscribers).ToArray();\n    await base.SetSubscribersAsync(result);\n}", "CodeBleu_score": 40.12682245380751}]}
{"instance_id": "fda02cec3296", "generation_result": [{"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var path = _configInfo.SubscriberPath;\n    var subscribers = new List<ServiceSubscriber>();\n    var zooKeeper = await GetZooKeeper();\n    foreach (var children in childrens) {\n        var nodePath = $\"{path}/{children}\";\n        var subscriber = await GetSubscriber(nodePath);\n        subscribers.Add(subscriber);\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 42.02724148118728}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var path = _configInfo.SubscriberPath;\n    if (!path.EndsWith(\"/\")) {\n        path += \"/\";\n    }\n\n    var subscribers = new List<ServiceSubscriber>();\n    foreach (var children in childrens) {\n        var nodePath = $\"{path}{children}\";\n        if (_logger.IsEnabled(LogLevel.Debug)) {\n            _logger.LogDebug($\"\u51c6\u5907\u83b7\u53d6\u8282\u70b9\uff1a{nodePath}\u7684\u6570\u636e\u3002\");\n        }\n\n        var subscriber = await GetSubscriber(nodePath);\n        if (subscriber != null) {\n            subscribers.Add(subscriber);\n        }\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 64.64887034506876}, {"code": "private async Task<ServiceSubscriber[]> GetSubscribers(IEnumerable<string> childrens){\n\t    var subscribers = new List<ServiceSubscriber>();\n\n    var path = _configInfo.SubscriberPath;\n    if (!path.EndsWith(\"/\")) {\n        path += \"/\";\n    }\n\n    foreach (var children in childrens) {\n        var nodePath = $\"{path}{children}\";\n        if (_logger.IsEnabled(LogLevel.Debug)) {\n            _logger.LogDebug($\"\u51c6\u5907\u83b7\u53d6\u8282\u70b9\uff1a{nodePath}\u3002\");\n        }\n\n        var subscriber = await GetSubscriber(nodePath);\n        if (subscriber != null) {\n            subscribers.Add(subscriber);\n        }\n    }\n    return subscribers.ToArray();\n}", "CodeBleu_score": 66.305748356411}]}
{"instance_id": "6c3018ff0c0d", "generation_result": [{"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var zooKeeper = await GetZooKeeper();\n    if (await zooKeeper.Item2.existsAsync(_configInfo.SubscriberPath) != null) {\n        var childrens = await zooKeeper.Item2.getChildrenAsync(_configInfo.SubscriberPath);\n        _subscribers = await GetSubscribers(childrens.Children);\n    }\n    else {\n        if (_logger.IsEnabled(LogLevel.Warning))\n            _logger.LogWarning($\"\u8ba2\u9605\u8005\u8282\u70b9\uff1a{_configInfo.SubscriberPath}\u4e0d\u5b58\u5728\uff0c\u5c06\u521d\u59cb\u5316\u4e3a\u7a7a\u6570\u7ec4\u3002\");\n        _subscribers = new ServiceSubscriber[0];\n    }\n}", "CodeBleu_score": 67.34652663862512}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var zooKeeper = await GetZooKeeper();\n    if (await zooKeeper.Item2.existsAsync(_configInfo.SubscriberPath) != null) {\n        var childrens = (await zooKeeper.Item2.getChildrenAsync(_configInfo.SubscriberPath)).Children;\n        _subscribers = await GetSubscribers(childrens);\n    }\n    else {\n        if (_logger.IsEnabled(LogLevel.Warning))\n            _logger.LogWarning($\"\u8ba2\u9605\u8005\u8def\u5f84\uff1a{_configInfo.SubscriberPath}\u4e0d\u5b58\u5728\uff0c\u5c06\u521d\u59cb\u5316\u4e3a\u7a7a\u3002\");\n        _subscribers = new ServiceSubscriber[0];\n    }\n}", "CodeBleu_score": 64.6942505067249}, {"code": "private async Task EnterSubscribers(){\n\t    if (_subscribers != null)\n        return;\n\n    var zooKeeper = await GetZooKeeper();\n    if (await zooKeeper.Item2.existsAsync(_configInfo.SubscriberPath) != null) {\n        var childrens = await zooKeeper.Item2.getChildrenAsync(_configInfo.SubscriberPath);\n        _subscribers = new List<ServiceSubscriber>(childrens.Count);\n        foreach (var children in childrens) {\n            var nodePath = $\"{_configInfo.SubscriberPath}/{children}\";\n            var data = (await zooKeeper.Item2.getDataAsync(nodePath)).Data;\n            var subscriber = await GetSubscriber(data);\n            if (subscriber != null)\n                _subscribers.Add(subscriber);\n        }\n    } else {\n        if (_logger.IsEnabled(LogLevel.Warning))\n            _logger.LogWarning($\"\u8282\u70b9{_configInfo.SubscriberPath}\u4e0d\u5b58\u5728\uff0c\u8bf7\u68c0\u67e5\u914d\u7f6e\u3002\");\n        _subscribers = new List<ServiceSubscriber>(0);\n    }\n}", "CodeBleu_score": 61.84020623350097}]}
{"instance_id": "60ff973ba60a", "generation_result": [{"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    // Get the new service command.\n    var newCommand = GetServiceCommand(newData);\n\n    // Get the old service command.\n    var oldCommand = _serviceCommands.FirstOrDefault(i => i.ServiceId == newCommand.ServiceId);\n\n    // Update the service commands list.\n    lock (_serviceCommands) {\n        _serviceCommands = _serviceCommands.Where(i => i.ServiceId != newCommand.ServiceId).Concat(new[] { newCommand }).ToArray();\n    }\n\n    // Trigger the OnChanged event.\n    OnChanged(new ServiceCommandChangedEventArgs(newCommand, oldCommand));\n}", "CodeBleu_score": 71.7093629306491}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newCommand = GetServiceCommand(newData);\n\n    lock (_serviceCommands) {\n        _serviceCommands = _serviceCommands.Where(i => i.ServiceId != newCommand.ServiceId).Concat(new[] { newCommand }).ToArray();\n    }\n\n    OnChanged(new ServiceCommandChangedEventArgs(newCommand, GetServiceCommand(oldData)));\n}", "CodeBleu_score": 66.38428131451676}, {"code": "public void NodeChange(byte[] oldData, byte[] newData){\n\t    if (DataEquals(oldData, newData))\n        return;\n\n    var newCommand = GetServiceCommand(newData);\n    if (newCommand == null)\n        return;\n\n    var oldCommand = _serviceCommands.FirstOrDefault(i => i.ServiceId == newCommand.ServiceId);\n\n    lock (_serviceCommands) {\n        _serviceCommands = _serviceCommands.Where(i => i.ServiceId != newCommand.ServiceId).Concat(new[] { newCommand }).ToArray();\n    }\n\n    OnChanged(new ServiceCommandChangedEventArgs(newCommand, oldCommand));\n}", "CodeBleu_score": 82.2191640598107}]}
{"instance_id": "4597b75f2b3d", "generation_result": [{"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.get_Type() == Event.EventType.NodeDataChanged) {\n        var (waitHandle, zooKeeper) = await _zooKeeperCall();\n        var data = await zooKeeper.getDataAsync(Path, false);\n        _action(_currentData, data.Data);\n        await zooKeeper.existsAsync(Path, this);\n        _currentData = data.Data;\n    }\n}", "CodeBleu_score": 53.55283827312667}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.get_Type() == Event.EventType.NodeDataChanged) {\n        var result = await _zooKeeperCall();\n        var zooKeeper = result.Item2;\n        var resetEvent = result.Item1;\n        var newData = await zooKeeper.getDataAsync(watchedEvent.getPath(), false, resetEvent);\n        _action(_currentData, newData.Data);\n        _currentData = newData.Data;\n        await zooKeeper.existsAsync(watchedEvent.getPath(), this);\n    }\n    else if (watchedEvent.get_Type() == Event.EventType.NodeDeleted) {\n        var result = await _zooKeeperCall();\n        var zooKeeper = result.Item2;\n        var resetEvent = result.Item1;\n        await zooKeeper.existsAsync(watchedEvent.getPath(), this);\n    }\n}", "CodeBleu_score": 55.94572090949761}, {"code": "protected override async Task ProcessImpl(WatchedEvent watchedEvent){\n\t    if (watchedEvent.get_Type() == Event.EventType.NodeDataChanged) {\n        var data = await GetDataAsync();\n        _action(_currentData, data);\n        _currentData = data;\n        await StartWatch();\n    }\n}", "CodeBleu_score": 48.03891301384954}]}
{"instance_id": "cb4f0e22a0d5", "generation_result": [{"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.RegisterType<DefaultZookeeperClientProvider>().As<IZookeeperClientProvider>().SingleInstance();\n    return builder;\n}", "CodeBleu_score": 27.509521631300178}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.RegisterType<DefaultZookeeperClientProvider>().As<IZookeeperClientProvider>().SingleInstance();\n    return builder;\n}", "CodeBleu_score": 27.509521631300178}, {"code": "public static IServiceBuilder UseZookeeperClientProvider(this IServiceBuilder builder, ConfigInfo configInfo){\n\t    builder.Services.RegisterType<DefaultZookeeperClientProvider>().As<IZookeeperClientProvider>().SingleInstance();\n    return builder;\n}", "CodeBleu_score": 27.509521631300178}]}
{"instance_id": "80709a4b2b69", "generation_result": [{"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t  if (_logger.IsEnabled(LogLevel.Information))\n    _logger.LogInformation(\"\u51c6\u5907\u6dfb\u52a0\u8def\u7531\u914d\u7f6e\u3002\");\n  var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n  foreach (var zooKeeper in zooKeepers) {\n    var path = _configInfo.MqttRoutePath;\n    var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n    var nodePath = \"/\" + string.Join(\"/\", childrens);\n    if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n      await zooKeeper.Item2.createAsync(nodePath, null, CreateMode.Persistent);\n    }\n    foreach (var route in routes) {\n      var data = await _serializer.SerializeAsync(route);\n      var routePath = $\"{nodePath}/{route.RoutePath}\";\n      if (await zooKeeper.Item2.existsAsync(routePath) == null) {\n        if (_logger.IsEnabled(LogLevel.Debug))\n          _logger.LogDebug($\"\u51c6\u5907\u6dfb\u52a0\u8282\u70b9\uff1a{routePath}\u3002\");\n        await zooKeeper.Item2.createAsync(routePath, data, CreateMode.Persistent);\n      } else {\n        if (_logger.IsEnabled(LogLevel.Debug))\n          _logger.LogDebug($\"\u51c6\u5907\u66f4\u65b0\u8282\u70b9\uff1a{routePath}\u3002\");\n        await zooKeeper.Item2.setDataAsync(routePath, data);\n      }\n    }\n    if (_logger.IsEnabled(LogLevel.Information))\n      _logger.LogInformation(\"\u8def\u7531\u914d\u7f6e\u6dfb\u52a0\u5b8c\u6210\u3002\");\n  }\n}", "CodeBleu_score": 67.904520635539}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u51c6\u5907\u8bbe\u7f6emqtt\u8def\u7531\u914d\u7f6e\u3002\");\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.MqttRoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                await zooKeeper.Item2.createAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n        foreach (var route in routes) {\n            var routePath = $\"{path}/{route.RoutePath}\";\n            var data = await _serializer.SerializeAsync(route);\n            var stat = await zooKeeper.Item2.existsAsync(routePath);\n            if (stat == null) {\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u51c6\u5907\u6dfb\u52a0\u8def\u7531\uff1a{routePath}\u3002\");\n                await zooKeeper.Item2.createAsync(routePath, data, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            } else {\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u51c6\u5907\u66f4\u65b0\u8def\u7531\uff1a{routePath}\u3002\");\n                await zooKeeper.Item2.setDataAsync(routePath, data);\n            }\n        }\n        if (_logger.IsEnabled(LogLevel.Information))\n            _logger.LogInformation(\"\u8def\u7531\u914d\u7f6e\u8bbe\u7f6e\u5b8c\u6210\u3002\");\n    }\n}", "CodeBleu_score": 68.66120133333217}, {"code": "protected override async Task SetRoutesAsync(IEnumerable<MqttServiceDescriptor> routes){\n\t    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u51c6\u5907\u6dfb\u52a0mqtt\u8def\u7531\u914d\u7f6e\u3002\");\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.MqttRoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                await zooKeeper.Item2.createAsync(nodePath, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n\n        foreach (var route in routes) {\n            var routePath = $\"{path}/{route.Id}\";\n            var data = await _serializer.SerializeAsync(route);\n            if (await zooKeeper.Item2.existsAsync(routePath) == null) {\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u51c6\u5907\u6dfb\u52a0\uff1a{routePath}\u3002\");\n                await zooKeeper.Item2.createAsync(routePath, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            } else {\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u51c6\u5907\u66f4\u65b0\uff1a{routePath}\u3002\");\n                await zooKeeper.Item2.setDataAsync(routePath, data);\n            }\n        }\n        if (_logger.IsEnabled(LogLevel.Information))\n            _logger.LogInformation(\"\u8def\u7531\u914d\u7f6e\u6dfb\u52a0\u5b8c\u6210\u3002\");\n    }\n}", "CodeBleu_score": 67.88224690429541}]}
{"instance_id": "69ff4d3427cd", "generation_result": [{"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.MqttRoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n                var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n                if (result?.Children != null) {\n                    foreach (var child in result.Children) {\n                        var childPath = $\"{nodePath}/{child}\";\n                        var route = routes.Where(p => p.MqttDescriptor.Topic == child).FirstOrDefault();\n                        if (route == null) {\n                            if (_logger.IsEnabled(LogLevel.Debug))\n                                _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                            await zooKeeper.Item2.deleteAsync(childPath);\n                        } else {\n                            if (route.MqttEndpoint.Any(p => p.ToString() == hostAddr.ToString())) {\n                                if (_logger.IsEnabled(LogLevel.Debug))\n                                    _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                                await zooKeeper.Item2.deleteAsync(childPath);\n                            }\n                        }\n                    }\n                }\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n    }\n}", "CodeBleu_score": 44.94258520320527}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.MqttRoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n                var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n                if (result?.Children != null) {\n                    foreach (var child in result.Children) {\n                        var childPath = $\"{nodePath}/{child}\";\n                        var route = routes.Where(p => p.MqttDescriptor.Topic == child).FirstOrDefault();\n                        if (route == null) {\n                            if (_logger.IsEnabled(LogLevel.Debug))\n                                _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                            await zooKeeper.Item2.deleteAsync(childPath);\n                        } else if (route.MqttEndpoint.Any(p => p.ToString() == hostAddr.ToString())) {\n                            if (_logger.IsEnabled(LogLevel.Debug))\n                                _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                            await zooKeeper.Item2.deleteAsync(childPath);\n                        }\n                    }\n                }\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n    }\n}", "CodeBleu_score": 45.256424624236516}, {"code": "private async Task RemoveExceptRoutesAsync(IEnumerable<MqttServiceRoute> routes, AddressModel hostAddr){\n\t    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u51c6\u5907\u6e05\u7a7a\u6240\u6709mqtt\u8def\u7531\u914d\u7f6e\u3002\");\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.MqttRoutePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) != null) {\n                var result = await zooKeeper.Item2.getChildrenAsync(nodePath);\n                if (result?.Children != null) {\n                    foreach (var child in result.Children) {\n                        var childPath = $\"{nodePath}/{child}\";\n                        if (_logger.IsEnabled(LogLevel.Debug))\n                            _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{childPath}\u3002\");\n                        await zooKeeper.Item2.deleteAsync(childPath);\n                    }\n                }\n            }\n            if (_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug($\"\u51c6\u5907\u5220\u9664\uff1a{nodePath}\u3002\");\n            await zooKeeper.Item2.deleteAsync(nodePath);\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n        if (_logger.IsEnabled(LogLevel.Information))\n            _logger.LogInformation(\"\u8def\u7531\u914d\u7f6e\u6e05\u7a7a\u5b8c\u6210\u3002\");\n    }\n}", "CodeBleu_score": 51.656963217853445}]}
{"instance_id": "8856055e4872", "generation_result": [{"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u51c6\u5907\u66f4\u65b0\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u3002\");\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.CachePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                await zooKeeper.Item2.createAsync(nodePath, null, CreateMode.Persistent);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var data = _serializer.Serialize(cacheDescriptor);\n            var nodePath = $\"{path}/{cacheDescriptor.Id}\";\n            var stat = await zooKeeper.Item2.existsAsync(nodePath);\n            if (stat == null) {\n                await zooKeeper.Item2.createAsync(nodePath, data, CreateMode.Persistent);\n            } else {\n                await zooKeeper.Item2.setDataAsync(nodePath, data);\n            }\n        }\n        if (_logger.IsEnabled(LogLevel.Information))\n            _logger.LogInformation(\"\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u66f4\u65b0\u5b8c\u6210\u3002\");\n    }\n}", "CodeBleu_score": 57.58059100010078}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u51c6\u5907\u66f4\u65b0\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u3002\");\n\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.CachePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                await zooKeeper.Item2.createAsync(nodePath, null, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var data = _serializer.Serialize(cacheDescriptor);\n            var nodePath = $\"{path}/{cacheDescriptor.Id}\";\n            var stat = await zooKeeper.Item2.existsAsync(nodePath);\n\n            if (stat == null) {\n                await zooKeeper.Item2.createAsync(nodePath, data, Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            } else {\n                var oldData = await zooKeeper.Item2.getDataAsync(nodePath);\n                if (!oldData.Data.SequenceEqual(data)) {\n                    await zooKeeper.Item2.setDataAsync(nodePath, data);\n                }\n            }\n        }\n    }\n\n    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u66f4\u65b0\u5b8c\u6210\u3002\");\n}", "CodeBleu_score": 59.84270306295618}, {"code": "public override async Task SetCachesAsync(IEnumerable<ServiceCacheDescriptor> cacheDescriptors){\n\t    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u51c6\u5907\u66f4\u65b0\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u3002\");\n    var zooKeepers = await _zookeeperClientProvider.GetZooKeepers();\n    foreach (var zooKeeper in zooKeepers) {\n        var path = _configInfo.CachePath;\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                await zooKeeper.Item2.createAsync(nodePath, null, CreateMode.PERSISTENT);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n        foreach (var cacheDescriptor in cacheDescriptors) {\n            var cachePath = $\"{path}/{cacheDescriptor.Id}\";\n            var data = _serializer.Serialize(cacheDescriptor);\n            if (await zooKeeper.Item2.existsAsync(cachePath) == null) {\n                await zooKeeper.Item2.createAsync(cachePath, data, CreateMode.PERSISTENT);\n            } else {\n                var result = await zooKeeper.Item2.getDataAsync(cachePath);\n                if (!data.SequenceEqual(result.Data)) {\n                    await zooKeeper.Item2.setDataAsync(cachePath, data);\n                }\n            }\n        }\n    }\n    if (_logger.IsEnabled(LogLevel.Information))\n        _logger.LogInformation(\"\u670d\u52a1\u7f13\u5b58\u914d\u7f6e\u66f4\u65b0\u5b8c\u6210\u3002\");\n}", "CodeBleu_score": 59.53995140687183}]}
{"instance_id": "57d92c17de83", "generation_result": [{"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    if (zooKeeper.Item1.WaitOne(1000)) {\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u8282\u70b9\uff1a{nodePath}\u4e0d\u5b58\u5728\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n\n                await zooKeeper.Item2.createAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n    }\n}", "CodeBleu_score": 60.806016058276604}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var manualResetEvent = new ManualResetEvent(false);\n    await zooKeeper.Item2.existsAsync(path, new Watcher(manualResetEvent));\n    manualResetEvent.WaitOne();\n    if (await zooKeeper.Item2.existsAsync(path) == null) {\n        if (_logger.IsEnabled(LogLevel.Debug))\n            _logger.LogDebug($\"\u8282\u70b9\uff1a{path}\u4e0d\u5b58\u5728\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n\n        var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n        var index = 0;\n        while (childrens.Count() > 1) {\n            var nodePath = \"/\" + string.Join(\"/\", childrens);\n            if (await zooKeeper.Item2.existsAsync(nodePath) == null) {\n                if (_logger.IsEnabled(LogLevel.Debug))\n                    _logger.LogDebug($\"\u8282\u70b9\uff1a{nodePath}\u4e0d\u5b58\u5728\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n\n                await zooKeeper.Item2.createAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n            }\n            index++;\n            childrens = childrens.Take(childrens.Length - index).ToArray();\n        }\n    }\n}", "CodeBleu_score": 66.05035592485885}, {"code": "private async Task CreateSubdirectory((ManualResetEvent, ZooKeeper) zooKeeper, string path){\n\t    var manualResetEvent = new ManualResetEvent(false);\n    var watcher = new Watcher(manualResetEvent);\n    var childrens = path.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries);\n\n    var index = 0;\n    while (childrens.Count() > 1) {\n        var nodePath = \"/\" + string.Join(\"/\", childrens);\n        if (await zooKeeper.Item2.existsAsync(nodePath, watcher) == null) {\n            if (_logger.IsEnabled(LogLevel.Debug))\n                _logger.LogDebug($\"\u8282\u70b9\uff1a{nodePath}\u4e0d\u5b58\u5728\u5c06\u8fdb\u884c\u521b\u5efa\u3002\");\n\n            await zooKeeper.Item2.createAsync(nodePath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);\n        }\n        index++;\n        childrens = childrens.Take(childrens.Length - index).ToArray();\n    }\n}", "CodeBleu_score": 56.44100972425869}]}
{"instance_id": "b276a07da453", "generation_result": [{"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in _config.Addresses) {\n        if (!await _healthCheckService.IsHealth(address)) {\n            continue;\n        }\n        _healthCheckService.Monitor(address);\n        result.Add(CreateZooKeeper(address));\n    }\n    return result;\n}", "CodeBleu_score": 78.68090907102919}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in _config.Addresses) {\n        if (!await _healthCheckService.IsHealth(address)) {\n            continue;\n        }\n        var ipAddress = address as IpAddressModel;\n        result.Add(CreateZooKeeper(ipAddress));\n    }\n    return result;\n}", "CodeBleu_score": 87.48833137067037}, {"code": "public async ValueTask<IEnumerable<(ManualResetEvent, ZooKeeper)>> GetZooKeepers(){\n\t    var result = new List<(ManualResetEvent, ZooKeeper)>();\n    foreach (var address in _config.Addresses) {\n        if (!await _healthCheckService.IsHealth(address)) {\n            throw new RegisterConnectionException(string.Format(\"\u6ce8\u518c\u4e2d\u5fc3{0}\u8fde\u63a5\u5f02\u5e38\uff0c\u8bf7\u8054\u7cfb\u7ba1\u7406\u56ed\", address.ToString()));\n        }\n        var vt = _zookeeperAddressSelector.SelectAsync(new AddressSelectContext {\n            Descriptor = new ServiceDescriptor { Id = nameof(DefaultZookeeperClientProvider) },\n            Address = new List<AddressModel> { address }\n        });\n        var addr = vt.IsCompletedSuccessfully ? vt.Result : await vt;\n        if (addr != null) {\n            var ipAddress = addr as IpAddressModel;\n            var zookeeper = CreateZooKeeper(ipAddress);\n            result.Add(zookeeper);\n        }\n    }\n    return result;\n}", "CodeBleu_score": 70.60305777676818}]}
{"instance_id": "dbb6463e7ee8", "generation_result": [{"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    if (helper == null) {\n        synchronized (this) {\n            if (helper == null) {\n                Helper.Data data = new Helper.Data(); // data shared between initial Helper and the un-synchronized Helper\n                // first helper is synchronized when getZooKeeper is called. Subsequent calls\n                // are not synchronized.\n                //noinspection NonAtomicOperationOnVolatileField\n                helper = new Helper(data);\n                helper.init(zookeeperFactory, watcher, ensembleProvider, sessionTimeout, canBeReadOnly);\n            }\n        }\n    }\n    return helper.getZooKeeper();\n}", "CodeBleu_score": 45.7035308170954}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    if (helper == null) {\n        synchronized (this) {\n            if (helper == null) {\n                Helper.Data data = new Helper.Data(); // data shared between initial Helper and the un-synchronized Helper\n                // first helper is synchronized when getZooKeeper is called. Subsequent calls\n                // are not synchronized.\n                //noinspection NonAtomicOperationOnVolatileField\n                helper = new Helper(data);\n                data.zooKeeper = zookeeperFactory.newZooKeeper(ensembleProvider.getConnectionString(), sessionTimeout, watcher, canBeReadOnly);\n                data.connectionString = ensembleProvider.getConnectionString();\n                data.negotiatedSessionTimeoutMs = data.zooKeeper.getSessionTimeout();\n            }\n        }\n    }\n    return helper.getZooKeeper();\n}", "CodeBleu_score": 49.45794200803534}, {"code": "ZooKeeper getZooKeeper() throws Exception{\n\t    if (helper == null) {\n        synchronized (this) {\n            if (helper == null) {\n                Helper.Data data = new Helper.Data(); // data shared between initial Helper and the un-synchronized Helper\n                // first helper is synchronized when getZooKeeper is called. Subsequent calls\n                // are not synchronized.\n                //noinspection NonAtomicOperationOnVolatileField\n                helper = new Helper(data);\n                data.zooKeeper = zookeeperFactory.newZooKeeper(ensembleProvider.getConnectionString(), sessionTimeout, watcher, canBeReadOnly);\n                data.connectionString = ensembleProvider.getConnectionString();\n                data.negotiatedSessionTimeoutMs = data.zooKeeper.getSessionTimeout();\n            }\n        }\n    }\n    return helper.getZooKeeper();\n}", "CodeBleu_score": 49.45794200803534}]}
{"instance_id": "0d9f311aa482", "generation_result": [{"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    if (helper != null) {\n        ZooKeeper zooKeeper = helper.getZooKeeper();\n        if (zooKeeper != null) {\n            zooKeeper.register(new Watcher() {\n                @Override\n                public void process(WatchedEvent event) {\n                }\n            });\n\n            if (waitForShutdownTimeoutMs > 0) {\n                zooKeeper.close(waitForShutdownTimeoutMs);\n            } else {\n                zooKeeper.close();\n            }\n        }\n    }\n}", "CodeBleu_score": 42.783353049134995}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    if (helper != null) {\n        ZooKeeper zk = helper.getZooKeeper();\n        if (zk != null) {\n            WatchedEvent dummyWatchedEvent = new WatchedEvent(Watcher.Event.KeeperState.SyncConnected, Watcher.Event.EventType.None, null, null);\n            zk.register(new Watcher() {\n                @Override\n                public void process(WatchedEvent event) {\n                    // no-op\n                }\n            }, dummyWatchedEvent);\n\n            if (waitForShutdownTimeoutMs > 0) {\n                zk.close(waitForShutdownTimeoutMs);\n            } else {\n                zk.close();\n            }\n        }\n    }\n}", "CodeBleu_score": 52.431242236348005}, {"code": "private void internalClose(int waitForShutdownTimeoutMs) throws Exception{\n\t    if (helper != null) {\n        ZooKeeper zooKeeper = helper.getZooKeeper();\n        if (zooKeeper != null) {\n            // if we're not shutting down, then we need to remove the default watcher\n            // and add a dummy watcher so we don't get new events\n            if (waitForShutdownTimeoutMs > 0) {\n                zooKeeper.getData(\"/\", false, null);\n            }\n            zooKeeper.close();\n        }\n    }\n    if (waitForShutdownTimeoutMs > 0) {\n        synchronized (helper) {\n            helper.wait(waitForShutdownTimeoutMs);\n        }\n    }\n}", "CodeBleu_score": 31.063515150703168}]}
{"instance_id": "d57ef4592303", "generation_result": [{"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    Preconditions.checkState(started.get(), \"Client is not started\");\n\n    OperationTrace trace = tracer.get().newOperationTrace(\\\"blockUntilConnectedOrTimedOut\\\");\n    try {\n        return state.blockUntilConnectedOrTimedOut(connectionTimeoutMs, trace);\n    } finally {\n        trace.commit();\n    }\n}", "CodeBleu_score": 47.89804626280678}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    Preconditions.checkState(started.get(), \"Client is not started\");\n\n    tracer.get().addTrace(null, OperationTrace.Type.CONNECT, null);\n    boolean rc = state.blockUntilConnectedOrTimedOut(connectionTimeoutMs);\n    tracer.get().addTrace(null, OperationTrace.Type.CONNECTED, null);\n\n    return rc;\n}", "CodeBleu_score": 45.29259967505486}, {"code": "public boolean blockUntilConnectedOrTimedOut() throws InterruptedException{\n\t    Preconditions.checkState(started.get(), \"Client is not started\");\n    log.debug(\"Starting\");\n    boolean rc = state.blockUntilConnectedOrTimedOut(connectionTimeoutMs);\n    log.debug(\"Finished\", rc);\n    return rc;\n}", "CodeBleu_score": 42.458070211305476}]}
{"instance_id": "d722f6d0beb6", "generation_result": [{"code": "public void close(int waitForShutdownTimeoutMs){\n\t    log.debug(\"Closing\");\n\n    if (!started.compareAndSet(true, false)) {\n        log.debug(\"Already closed\");\n        return;\n    }\n\n    try {\n        state.close(waitForShutdownTimeoutMs);\n    } catch (IOException e) {\n        if (Thread.interrupted()) {\n            log.warn(\"Interrupted while waiting for shutdown\", e);\n        } else {\n            log.error(\"Error while waiting for shutdown\", e);\n        }\n    }\n}", "CodeBleu_score": 63.641733708781324}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    log.debug(\"Shutting down\");\n    OperationTrace trace = startAdvancedTracer(\"close\");\n\n    try {\n        state.close(waitForShutdownTimeoutMs);\n    } catch (IOException e) {\n        if (Thread.interrupted()) {\n            log.warn(\"Interrupted while closing\", e);\n        } else {\n            log.error(\"Failed to close\", e);\n        }\n    }\n\n    started.set(false);\n    trace.commit();\n}", "CodeBleu_score": 57.453091102888685}, {"code": "public void close(int waitForShutdownTimeoutMs){\n\t    log.debug(\"Shutting down\");\n    OperationTrace trace = startAdvancedTracer(\"close\");\n\n    try {\n        state.close(waitForShutdownTimeoutMs);\n    } catch (IOException e) {\n        if (Thread.interrupted()) {\n            log.warn(\"Interrupted while shutting down\", e);\n        } else {\n            log.warn(\"Error shutting down\", e);\n        }\n    }\n\n    started.set(false);\n\n    trace.commit();\n}", "CodeBleu_score": 57.069993332349455}]}
{"instance_id": "8492e37ce46e", "generation_result": [{"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    final CountDownLatch latch = new CountDownLatch(1);\n\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            if (event.getState() == Event.KeeperState.SyncConnected) {\n                latch.countDown();\n            }\n        }\n    };\n\n    long remaining = connectionTimeoutMs;\n    while (remaining > 0 && !state.isConnected()) {\n        long start = Time.currentElapsedTime();\n        try {\n            state.addParentWatcher(watcher);\n            latch.await(remaining, TimeUnit.MILLISECONDS);\n        } finally {\n            state.removeParentWatcher(watcher);\n        }\n\n        remaining -= (Time.currentElapsedTime() - start);\n    }\n}", "CodeBleu_score": 53.138465522125365}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    long remainingWaitTime = connectionTimeoutMs;\n    long startTime = System.currentTimeMillis();\n    CountDownLatch latch = new CountDownLatch(1);\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            if (event.getState() == Event.KeeperState.SyncConnected) {\n                latch.countDown();\n            }\n        }\n    };\n    while (remainingWaitTime > 0) {\n        state.addParentWatcher(watcher);\n        try {\n            latch.await(remainingWaitTime, TimeUnit.MILLISECONDS);\n            if (state.isConnected()) {\n                break;\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw e;\n        } finally {\n            state.removeParentWatcher(watcher);\n        }\n        long elapsedTime = System.currentTimeMillis() - startTime;\n        remainingWaitTime = connectionTimeoutMs - elapsedTime;\n    }\n}", "CodeBleu_score": 51.65246334360227}, {"code": "public void internalBlockUntilConnectedOrTimedOut() throws InterruptedException {\n\t    // Create a temporary watcher to monitor connection events\n    Watcher watcher = new Watcher() {\n        @Override\n        public void process(WatchedEvent event) {\n            if (event.getType() == Event.EventType.None) {\n                if (event.getState() == Event.KeeperState.SyncConnected) {\n                    log.debug(\\\"Watcher fired: connected\\\");\n                    latch.countDown();\n                } else if (event.getState() == Event.KeeperState.Disconnected) {\n                    log.debug(\\\"Watcher fired: disconnected\\\");\n                }\n            }\n        }\n    };\n\n    // Add the temporary watcher to the state\n    state.addParentWatcher(watcher);\n\n    try {\n        // Wait for either the connection or a timeout\n        long remaining = connectionTimeoutMs;\n        while (true) {\n            if (state.isConnected()) {\n                log.debug(\\\"isConnected\\\");\n                break;\n            }\n            if (remaining <= 0) {\n                log.debug(\\\"remaining <= 0\\\");\n                break;\n            }\n            log.debug(\\\"waiting {}ms\\\", remaining);\n            boolean latchResult = latch.await(remaining, TimeUnit.MILLISECONDS);\n            log.debug(\\\"latch.await result: {}\\\", latchResult);\n            if (latchResult) {\n                log.debug(\\\"latch.await result is true\\\");\n                break;\n            }\n            remaining = connectionTimeoutMs - (System.currentTimeMillis() - startTime);\n        }\n    } finally {\n        // Remove the temporary watcher from the state\n        state.removeParentWatcher(watcher);\n    }\n}", "CodeBleu_score": 39.41877434073226}]}
{"instance_id": "4a01f5365731", "generation_result": [{"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (doProtected() && createMode.isEphemeral()) {\n        long newSessionId = client.getZooKeeper().getSessionId();\n        if (newSessionId != sessionId) {\n            log.warn(\\\"Protected mode session ID changed from {} to {}\\\", sessionId, newSessionId);\n            client.delete().forPath(foundNode);\n            sessionId = newSessionId;\n            return null;\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 44.28308232702322}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (doProtected() && createMode.isEphemeral()) {\n        long currentSessionId = client.getZooKeeper().getSessionId();\n        if (sessionId != currentSessionId) {\n            log.info(\\\"Protected mode: session ID changed (old={}, new={}) - deleting old node\\\", sessionId, currentSessionId);\n            try {\n                client.getZooKeeper().delete(foundNode, -1);\n            } catch (KeeperException.NoNodeException e) {\n                // ignore\n            }\n            sessionId = currentSessionId;\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 48.197770008985884}, {"code": "String validateFoundNode(CuratorFrameworkImpl client, CreateMode createMode, String foundNode) throws Exception{\n\t    if (doProtected() && createMode.isEphemeral()) {\n        long currentSessionId = client.getZooKeeper().getSessionId();\n        if (currentSessionId != sessionId) {\n            log.warn(\"Session changed while in protected mode. Was: \" + sessionId + \", is: \" + currentSessionId);\n            try {\n                client.delete().forPath(foundNode);\n            } catch (KeeperException.NoNodeException e) {\n                log.warn(\"Node disappeared during protected mode cleanup\", e);\n            } catch (Exception e) {\n                log.error(\"Unable to clean up protected mode path\", e);\n            }\n            sessionId = currentSessionId;\n            return null;\n        }\n    }\n    return foundNode;\n}", "CodeBleu_score": 55.52743407780848}]}
{"instance_id": "126d0922a699", "generation_result": [{"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"SetACLBuilderImpl-Foreground\");\n    Stat resultStat = null;\n    try {\n        RetryLoop.Callable<Stat> callable = new RetryLoop.Callable<Stat>() {\n            @Override\n            public Stat call() throws Exception {\n                return client.getZooKeeper().setACL(path, aclList, version);\n            }\n        };\n        resultStat = trace.wrap(callable);\n        trace.setReturnCode(0).setPath(path).setStat(resultStat).commit();\n    } catch (Throwable e) {\n        trace.setReturnCode(OperationTrace.getReturnCode(e)).commit();\n        throw e;\n    }\n    return resultStat;\n}", "CodeBleu_score": 71.19013193050435}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"SetACLBuilderImpl-Foreground\");\n    try {\n        return RetryLoop.callWithRetry(\n                new Callable<Stat>() {\n                    @Override\n                    public Stat call() throws Exception {\n                        return client.getZooKeeper().setACL(path, aclList, version);\n                    }\n                },\n                client.getZookeeperClient().getConnectedEvent(),\n                client.getZookeeperClient().getRetryPolicy(),\n                trace);\n    } finally {\n        trace.setPath(path).setAclList(aclList).setVersion(version).commit();\n    }\n}", "CodeBleu_score": 57.766233607533636}, {"code": "private Stat pathInForeground(final String path, final List<ACL> aclList) throws Exception{\n\t    final OperationTrace trace = client.getZookeeperClient().startAdvancedTracer(\"SetACLBuilderImpl-Foreground\");\n    final Stat resultStat = new Stat();\n    try {\n        RetryLoop.callWithRetry(new Callable<Void>() {\n            @Override\n            public Void call() throws Exception {\n                client.getZooKeeper().setACL(path, aclList, version, resultStat);\n                return null;\n            }\n        }, client.getZookeeperClient().getConnectedEvent(), client.getZookeeperClient().getRetryPolicy());\n    } catch (Exception e) {\n        trace.setReturnCode(OperationTrace.getReturnCode(e));\n        throw e;\n    } finally {\n        trace.setPath(path).setStat(resultStat).commit();\n    }\n    return resultStat;\n}", "CodeBleu_score": 50.17952302749061}]}
{"instance_id": "e07b079ff61f", "generation_result": [{"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    Preconditions.checkArgument(ZKPaths.validPath(membershipPath, false), \"membershipPath must be a valid ZK path (can't be empty and can't start with /)\");\n    Preconditions.checkArgument(thisId != null && thisId.length() > 0, \"thisId cannot be empty\");\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    pen = new PersistentNode(client, ZKPaths.makePath(membershipPath, thisId), CreateMode.EPHEMERAL, payload);\n    pen.start();\n    cache = new CuratorCacheBridge(new CuratorCache(client, membershipPath, parentPathFilter()));\n    cache.start();\n}", "CodeBleu_score": 49.53825308947214}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    Preconditions.checkArgument(!ZKPaths.isAbsolute(thisId), \"id cannot be an absolute path\");\n    Preconditions.checkArgument(!thisId.startsWith(\"/\"), \"id cannot start with /\");\n    Preconditions.checkArgument(!thisId.contains(\"\\\\\"), \"id cannot contain \\\\\");\n    this.pen = new PersistentNode(client, CreateMode.EPHEMERAL, false, membershipPath + \"/\" + thisId, payload);\n    this.cache = new CuratorCache(client, membershipPath, parentPathFilter());\n    this.cache.start();\n}", "CodeBleu_score": 46.05913589875201}, {"code": "public GroupMember(CuratorFramework client, String membershipPath, String thisId, byte[] payload){\n\t    Preconditions.checkNotNull(client, \"client cannot be null\");\n    Preconditions.checkNotNull(membershipPath, \"membershipPath cannot be null\");\n    Preconditions.checkNotNull(thisId, \"thisId cannot be null\");\n    Preconditions.checkArgument(!thisId.contains(\"/\"), \"thisId cannot contain '/'\");\n    this.membershipPath = membershipPath;\n    this.thisId = thisId;\n    pen = new PersistentNode(client, membershipPath + \"/\" + thisId, CreateMode.EPHEMERAL, payload);\n    cache = new CuratorCache(client, membershipPath, parentPathFilter);\n    cache.start();\n}", "CodeBleu_score": 45.97658102089746}]}
{"instance_id": "d11c76b2b912", "generation_result": [{"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            exception.printStackTrace();\n        } else {\n            async.watch().in(WatchMode.post).forPath(path, (type, path1) -> {\n                System.out.println(\"Watch event: \" + type + \" for path: \" + path1);\n            });\n        }\n    });\n}", "CodeBleu_score": 80.88084453918259}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            // there was a problem\n            exception.printStackTrace();\n        } else {\n            // set up a watch on the node\n            async.checkExists().usingWatcher((event, path, stat) -> {\n                System.out.println(\"Event received: \" + event);\n            }).forPath(path);\n        }\n    });\n}", "CodeBleu_score": 81.90767530875422}, {"code": "public static void createThenWatch(CuratorFramework client, String path) {\n\t    AsyncCuratorFramework async = AsyncCuratorFramework.wrap(client);\n\n    async.create().forPath(path).whenComplete((name, exception) -> {\n        if (exception != null) {\n            exception.printStackTrace();\n        } else {\n            System.out.println(\"Created node name is: \" + name);\n            async.checkExists().watched().forPath(path).whenComplete((stat, ex) -> {\n                if (ex != null) {\n                    ex.printStackTrace();\n                } else {\n                    System.out.println(\"Node exists: \" + stat);\n                }\n            });\n        }\n    });\n}", "CodeBleu_score": 79.08670051623614}]}
{"instance_id": "4571de52ad5d", "generation_result": [{"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<OpResult> resultList = client.getZookeeperClient().multi(transaction.getOperations());\n    if (resultList.size() > 0) {\n        OpResult firstResult = resultList.get(0);\n        if (firstResult.getType() == ZooDefs.OpCode.error) {\n            OpResult.ErrorResult errorResult = (OpResult.ErrorResult) firstResult;\n            int errorCode = errorResult.getErr();\n            throw KeeperException.create(errorCode);\n        }\n    }\n    return resultList;\n}", "CodeBleu_score": 56.33851552737473}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<OpResult> resultList = client.getZookeeperClient().multi(transaction.getOps());\n    if (resultList.size() > 0) {\n        OpResult firstResult = resultList.get(0);\n        if (firstResult.getType() == ZooDefs.OpCode.error) {\n            KeeperException.Code errorCode = KeeperException.Code.get(firstResult.getErr());\n            throw KeeperException.create(errorCode);\n        }\n    }\n    return resultList;\n}", "CodeBleu_score": 52.571616158512235}, {"code": "private List<OpResult> doOperation() throws Exception{\n\t    List<OpResult> resultList = client.getZookeeperClient().multi(transaction.getOps());\n\n    if (!resultList.isEmpty()) {\n        OpResult firstResult = resultList.get(0);\n        if (firstResult.getType() == ZooDefs.OpCode.error) {\n            KeeperException.Code code = KeeperException.Code.get(firstResult.getErr());\n            throw KeeperException.create(code);\n        }\n    }\n\n    return resultList;\n}", "CodeBleu_score": 51.489473951103115}]}
{"instance_id": "99263700ce6d", "generation_result": [{"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    try {\n        Collection<String> serviceNames = serviceDiscovery.queryForNames();\n        for (String serviceName : serviceNames) {\n            System.out.println(\\\"Service: \\\" + serviceName);\n            Collection<ServiceInstance<InstanceDetails>> instances = serviceDiscovery.queryForInstances(serviceName);\n            for (ServiceInstance<InstanceDetails> instance : instances) {\n                outputInstance(instance);\n            }\n        }\n    } catch (NoNodeException e) {\n        System.err.println(\\\"No services registered\\\");\n    } finally {\n        CloseableUtils.closeQuietly(serviceDiscovery);\n    }\n}", "CodeBleu_score": 51.98368833549103}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    Collection<String> serviceNames = serviceDiscovery.queryForNames();\n    for (String serviceName : serviceNames) {\n        System.out.println(\\\"Service: \\\" + serviceName);\n        try {\n            Collection<ServiceInstance<InstanceDetails>> serviceInstances = serviceDiscovery.queryForInstances(serviceName);\n            for (ServiceInstance<InstanceDetails> serviceInstance : serviceInstances) {\n                outputInstance(serviceInstance);\n            }\n        } catch (KeeperException.NoNodeException e) {\n            System.err.println(\\\"No instances registered for service: \\\" + serviceName);\n        }\n    }\n}", "CodeBleu_score": 44.47563544104395}, {"code": "private static void listInstances(ServiceDiscovery<InstanceDetails> serviceDiscovery) throws Exception{\n\t    Collection<String> serviceNames = serviceDiscovery.queryForNames();\n    for (String serviceName : serviceNames) {\n        System.out.println(\\\"Service: \\\" + serviceName);\n        try {\n            Collection<ServiceInstance<InstanceDetails>> serviceInstances = serviceDiscovery.queryForInstances(serviceName);\n            for (ServiceInstance<InstanceDetails> serviceInstance : serviceInstances) {\n                outputInstance(serviceInstance);\n            }\n        } catch (KeeperException.NoNodeException e) {\n            System.err.println(\\\"No instances named: \\\" + serviceName);\n        }\n    }\n}", "CodeBleu_score": 44.00447663534597}]}
{"instance_id": "891a390fa04d", "generation_result": [{"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    return Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n        @Override\n        public boolean apply(String child) {\n            return !child.equals(READY_NODE);\n        }\n    }));\n}", "CodeBleu_score": 40.74977729543319}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    List<String> filteredChildren = Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n        @Override\n        public boolean apply(String child) {\n            return !READY_NODE.equals(child);\n        }\n    }));\n    Collections.sort(filteredChildren);\n    return filteredChildren;\n}", "CodeBleu_score": 64.49430623766241}, {"code": "private List<String> filterAndSortChildren(List<String> children){\n\t    return Lists.newArrayList(Iterables.filter(children, new Predicate<String>() {\n        @Override\n        public boolean apply(String child) {\n            return !READY_NODE.equals(child);\n        }\n    }));\n}", "CodeBleu_score": 40.58081886541103}]}
{"instance_id": "f25af95a13b6", "generation_result": [{"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n    zk = new ZooKeeper(newHost, timeout, this);\n    if (readOnly) {\n        zk.getZooKeeperState();\n    }\n}", "CodeBleu_score": 27.573443849351825}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n    zk = new ZooKeeper(newHost, timeout, this);\n    if (readonly) {\n        zk.getZKDatabase().setReadOnly();\n    }\n}", "CodeBleu_score": 28.931829102003675}, {"code": "protected void connectToZK(String newHost) throws InterruptedException, IOException{\n\t    if (zk != null) {\n        zk.close();\n    }\n    zk = new ZooKeeper(newHost, timeout, this);\n    if (readOnly) {\n        zk.addAuthInfo(\"digest\", \":\".getBytes());\n    }\n}", "CodeBleu_score": 29.573096382736967}]}
{"instance_id": "269eaac5cec6", "generation_result": [{"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    StringTokenizer st = new StringTokenizer(aclString, \",\");\n    while (st.hasMoreTokens()) {\n        String acl = st.nextToken();\n        String scheme = null;\n        String id = null;\n        int perms = 0;\n        int firstColon = acl.indexOf(':');\n        if (firstColon == -1) {\n            throw new IOException(\\\"invalid ACL \\'\\\" + acl + \\\"\\'\\\");\n        }\n        int lastColon = acl.lastIndexOf(':');\n        if (firstColon == lastColon) {\n            scheme = acl.substring(0, firstColon);\n            id = acl.substring(firstColon + 1);\n        } else if (firstColon != -1) {\n            scheme = acl.substring(0, firstColon);\n            id = acl.substring(firstColon + 1, lastColon);\n            perms = Integer.parseInt(acl.substring(lastColon + 1));\n        }\n        if (scheme.equals(\\\"world\\\") && id.equals(\\\"anyone\\\")) {\n            id = \\\"anyone\\\";\n        }\n        aclList.add(new ACL(perms, new Id(scheme, id)));\n    }\n    return aclList;\n}", "CodeBleu_score": 34.88042537931519}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    StringTokenizer st = new StringTokenizer(aclString, \",\");\n    while (st.hasMoreTokens()) {\n        String acl = st.nextToken();\n        int first = acl.indexOf(':');\n        int last = acl.lastIndexOf(':');\n        if (first == -1 || last == -1 || first == last) {\n            log.error(\\\"Error: invalid acl \\\" + acl + \\\" does not match <scheme>:<id>:<perms>\\\");\n            continue;\n        }\n        String scheme = acl.substring(0, first);\n        String id = acl.substring(first + 1, last);\n        String perms = acl.substring(last + 1);\n        ACL newAcl = new ACL(scheme, id, parsePerms(perms));\n        aclList.add(newAcl);\n    }\n    return aclList;\n}", "CodeBleu_score": 37.216698989318196}, {"code": "private List<ACL> parseACLs(String aclString) throws IOException{\n\t    List<ACL> aclList = new ArrayList<ACL>();\n    StringTokenizer st = new StringTokenizer(aclString, \",\");\n    while (st.hasMoreTokens()) {\n        String tok = st.nextToken();\n        int first = tok.indexOf(':');\n        int last = tok.lastIndexOf(':');\n        if (first == -1 || last == -1 || first == last) {\n            throw new IOException(\\\"invalid acl \\'\\\" + tok + \\\"\\'\\\");\n        }\n        String scheme = tok.substring(0, first);\n        String id = tok.substring(first + 1, last);\n        String perms = tok.substring(last + 1);\n        if (perms.length() > 3) {\n            throw new IOException(\\\"invalid permission \\'\\\" + tok + \\\"\\'\\\");\n        }\n        int permsCode = 0;\n        for (int i = 0; i < 3; i++) {\n            if (perms.charAt(i) == 'r') {\n                permsCode |= ZooDefs.Perms.READ;\n            } else if (perms.charAt(i) == 'w') {\n                permsCode |= ZooDefs.Perms.WRITE;\n            } else if (perms.charAt(i) == 'c') {\n                permsCode |= ZooDefs.Perms.CREATE;\n            } else if (perms.charAt(i) == 'd') {\n                permsCode |= ZooDefs.Perms.DELETE;\n            } else if (perms.charAt(i) == 'a') {\n                permsCode |= ZooDefs.Perms.ADMIN;\n            } else {\n                throw new IOException(\\\"invalid perm \\'\\\" + perms.charAt(i) + \\\"\\'\\\");\n            }\n        }\n        aclList.add(new ACL(permsCode, new Id(scheme, id)));\n    }\n    return aclList;\n}", "CodeBleu_score": 33.110247516576024}]}
{"instance_id": "c25db637a176", "generation_result": [{"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    assertZookeeperExists(serverId);\n    if (pathList == null || pathList.isEmpty()) {\n        return;\n    }\n    if (pathList.size() < 20) {\n        pathList.forEach(path -> {\n            try {\n                zookeeperMap.get(serverId).delete(path);\n            } catch (Exception e) {\n                log.error(\\\"delete node error \\\" + serverId + \\\" -> \\\" + path, e);\n            }\n        });\n    } else {\n        CompletableFuture.runAsync(() -> {\n            pathList.forEach(path -> {\n                try {\n                    zookeeperMap.get(serverId).delete(path);\n                } catch (Exception e) {\n                    log.error(\\\"delete node error \\\" + serverId + \\\" -> \\\" + path, e);\n                }\n            });\n        });\n    }\n}", "CodeBleu_score": 50.948826662480684}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    assertZookeeperExists(serverId);\n    if (pathList == null) {\n        return;\n    }\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeperMap.get(serverId).delete(path);\n        }\n    } else {\n        zookeeperMap.get(serverId).deleteAsync(pathList);\n    }\n}", "CodeBleu_score": 89.87841898493194}, {"code": "public void delete(String serverId, List<String> pathList) throws Exception{\n\t    assertZookeeperExists(serverId);\n    if (pathList == null) {\n        throw new IllegalArgumentException(\"path list is null\");\n    }\n    if (pathList.size() < 20) {\n        for (String path : pathList) {\n            zookeeperMap.get(serverId).delete(path);\n        }\n    } else {\n        zookeeperMap.get(serverId).deleteAsync(pathList);\n    }\n}", "CodeBleu_score": 86.91374860982404}]}
{"instance_id": "3ecb1ce78f90", "generation_result": [{"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.write(\"connecting to \" + url + \"...\");\n    var factory = new CuratorZookeeperConnectionFactory();\n    var params = ZookeeperParams.builder()\n            .id(id)\n            .url(url)\n            .aclList(Collections.emptyList())\n            .maxRetries(3)\n            .connectionTimeout(10000)\n            .retryIntervalTime(1000)\n            .sessionTimeout(10000)\n            .build();\n    var connection = factory.create(params);\n    writer.write(\"success!\");\n    var zooKeeperMain = new ZooKeeperMain(connection);\n    return new Terminal(id, url, connection, zooKeeperMain);\n}", "CodeBleu_score": 68.74758903687098}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.writeLine(\"Connecting to \" + url + \"...\");\n    var factory = new CuratorZookeeperConnectionFactory();\n    var params = ZookeeperParams.builder()\n            .id(id)\n            .url(url)\n            .aclList(Collections.emptyList())\n            .maxRetries(10)\n            .connectionTimeout(1000)\n            .retryIntervalTime(1000)\n            .sessionTimeout(1000)\n            .build();\n    var connection = factory.createAsync(params, Collections.emptyList()).get();\n    writer.writeLine(\"Connected to \" + url);\n    var zooKeeperMain = new ZooKeeperMain(connection);\n    return new Terminal(id, url, connection, zooKeeperMain);\n}", "CodeBleu_score": 64.29060891387721}, {"code": "public Terminal createTerminal(String id, String url, StringWriter writer) throws Exception{\n\t    writer.writeLine(\"connecting to \" + url + \" ...\");\n    var factory = new CuratorZookeeperConnectionFactory();\n    var params = ZookeeperParams.builder()\n            .id(id)\n            .url(url)\n            .aclList(Collections.emptyList())\n            .maxRetries(5)\n            .connectionTimeout(10000)\n            .retryIntervalTime(1000)\n            .sessionTimeout(10000)\n            .build();\n    var connection = factory.createAsync(params, Collections.emptyList());\n    writer.writeLine(\"success\");\n    return new Terminal(id, url, connection, new ZooKeeperMain(connection.get()));\n}", "CodeBleu_score": 62.98135350364073}]}
{"instance_id": "a3606e777eb5", "generation_result": [{"code": "public void blockUntilConnected(){\n\t    for (int i = 0; i < 6; i++) {\n        try {\n            Thread.sleep(1000);\n            this.createAsync();\n            log.info(\"ssh tunnel {} connected\", this);\n            return;\n        } catch (Exception e) {\n            log.warn(\"ssh tunnel {} connect failed, retry {}\", this, i + 1, e);\n            this.close();\n        }\n    }\n    throw new IllegalStateException(\"ssh tunnel \" + this + \" connect failed\");\n}", "CodeBleu_score": 45.452352614386506}, {"code": "public void blockUntilConnected(){\n\t    for (int i = 0; i < 6; i++) {\n        try {\n            if (this.isConnected()) {\n                return;\n            }\n            log.info(\"try to create ssh-tunnel {} time\", i + 1);\n            this.createAsync();\n            Thread.sleep(1000);\n        } catch (Exception e) {\n            this.close();\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }\n    this.close();\n    throw new IllegalStateException(\"create ssh-tunnel failed\");\n}", "CodeBleu_score": 50.124083772188264}, {"code": "public void blockUntilConnected(){\n\t    for (int i = 0; i < 6; i++) {\n        try {\n            if (sshClient.isConnected()) {\n                return;\n            }\n            Thread.sleep(1000);\n        } catch (Exception e) {\n            log.error(\"SSH connect error\", e);\n            this.close();\n            throw new IllegalStateException(\"SSH connect error\", e);\n        }\n    }\n    this.close();\n    throw new IllegalStateException(\"SSH connect error by timeout\");\n}", "CodeBleu_score": 46.7644510727843}]}
{"instance_id": "a4e5b886b72b", "generation_result": [{"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.delete(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"delete node error\", e);\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 92.35619726034831}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t    try {\n        zookeeperDomainService.delete(serverId, pathList);\n    } catch (Exception e) {\n        log.error(\"delete node error\", e);\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 92.35619726034831}, {"code": "public void deleteNode(String serverId, List<String> pathList){\n\t        try {\n            zookeeperDomainService.delete(serverId, pathList);\n        } catch (Exception e) {\n            log.error(\"delete node error\", e);\n            throw new IllegalStateException(e);\n        }\n    }", "CodeBleu_score": 89.47252587696775}]}
{"instance_id": "4fdbc9ec2e75", "generation_result": [{"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        var serverConfig = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(id);\n        treeItemCache.removeServer(serverConfig);\n    });\n}", "CodeBleu_score": 58.7909256464197}, {"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        var serverConfig = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfig.getId());\n        treeItemCache.remove(serverConfig.getId());\n    });\n}", "CodeBleu_score": 63.05877881592002}, {"code": "public void disconnect(String id){\n\t    Platform.runLater(() -> {\n        var serverConfig = configurationDomainService.getById(id).orElseThrow();\n        zookeeperDomainService.disconnect(serverConfig.getId());\n        treeItemCache.removeServer(id);\n    });\n}", "CodeBleu_score": 71.28865680077061}]}
{"instance_id": "6bf0d7ac9390", "generation_result": [{"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfiguration serverConfiguration = getServerConfigurationById(serverId);\n    String connectionUrl = ZkServerConnectionUrlGenerator.generate(serverConfiguration);\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 25.675868349686485}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t    ServerConfiguration serverConfiguration = configurationDomainService.getById(serverId).orElseThrow();\n    String connectionUrl = serverConfiguration.getConnectionUrl();\n    if (serverConfiguration.isSshTunnelEnabled()) {\n        connectionUrl = serverConfiguration.getSshTunnel().getConnectionUrl();\n    }\n    zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n}", "CodeBleu_score": 50.05194108690758}, {"code": "public void startTerminal(String serverId, StringWriter stream){\n\t        ServerConfiguration serverConfiguration = configurationDomainService.getById(serverId).orElseThrow();\n        String connectionUrl = serverConfiguration.getConnectionUrl();\n        if (serverConfiguration.isSshTunnelEnabled()) {\n            connectionUrl = serverConfiguration.getSshTunnel().getLocalConnectionUrl();\n        }\n        zookeeperDomainService.startTerminal(serverId, connectionUrl, stream);\n    }", "CodeBleu_score": 50.077511924608196}]}
{"instance_id": "635dea120e55", "generation_result": [{"code": "public void executeCommand(String id, String command){\n\t        Try.of(() -> zookeeperDomainService.executeCommand(id, command))\n                .onFailure(e -> {\n                    log.error(\\\"execute command failed, server id: {}, command: {}\\\", id, command, e);\n                    VToast.error(I18n.get(\\\"error.command.execute.failed\\\"));\n                })\n                .onSuccess(e -> log.info(\\\"execute command success, server id: {}, command: {}\\\", id, command));\n    }", "CodeBleu_score": 37.79973243805058}, {"code": "public void executeCommand(String id, String command){\n\t    Try.of(() -> zookeeperDomainService.executeCommand(id, command))\n            .onFailure(e -> {\n                log.error(\"execute command error, server id: {}, command: {}\", id, command, e);\n                VToast.error(I18n.get(\\\"common.execute.command.fail\\\"));\n            });\n}", "CodeBleu_score": 39.24680761360831}, {"code": "public void executeCommand(String id, String command){\n\t        Try.of(() -> zookeeperDomainService.executeCommand(id, command))\n                .onFailure(e -> {\n                    log.error(\\\"Execute command error. id: {}, command: {}\\\", id, command, e);\n                    VToast.error(I18n.get(\\\"common.execute.command.failed.and.should.retry\\\"), e);\n                })\n                .get();\n    }", "CodeBleu_score": 37.70809682332523}]}
{"instance_id": "8627d161f5fc", "generation_result": [{"code": "public Properties loadZookeeperSystemProperties(){\n\t    var properties = new Properties();\n    var path = Paths.get(System.getProperty(\"user.home\") + \"/.prettyZoo/conf/zookeeper.properties\");\n    if (Files.exists(path)) {\n        try (var reader = new FileReader(path.toFile())) {\n            properties.load(reader);\n            log.info(\"loaded zookeeper system properties: {}\", properties);\n        } catch (Exception e) {\n            log.error(\"load zookeeper system properties failed, msg:{}\", e.getMessage(), e);\n        }\n    } else {\n        log.info(\"can't find zookeeper system properties file in {}\", path);\n    }\n    return properties;\n}", "CodeBleu_score": 46.25800893779331}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t    var path = Paths.get(System.getProperty(\"user.home\") + \"/.prettyZoo/config/zookeeper.properties\");\n    if (Files.exists(path)) {\n        try (var reader = new FileReader(path.toFile())) {\n            var properties = new Properties();\n            properties.load(reader);\n            log.info(\"loaded zookeeper system properties:{}\", properties);\n            return properties;\n        } catch (Exception e) {\n            log.error(\"load zookeeper system properties error\", e);\n        }\n    }\n    log.info(\"can't find zookeeper system properties file in {}\", path);\n    return new Properties();\n}", "CodeBleu_score": 50.53018281585907}, {"code": "public Properties loadZookeeperSystemProperties(){\n\t        var userHome = System.getProperty(\"user.home\");\n        var path = Paths.get(userHome + \"/.prettyZoo/system.properties\");\n        var properties = new Properties();\n        if (Files.exists(path)) {\n            try (var inputStream = new FileInputStream(path.toFile())) {\n                properties.load(inputStream);\n                log.info(\"load zookeeper system properties:{}\", properties);\n            } catch (IOException e) {\n                log.error(\"load zookeeper system properties failed, msg:{}\", e.getMessage(), e);\n            }\n        } else {\n            log.warn(\"can't find zookeeper system properties file in {}\", path);\n        }\n        return properties;\n    }", "CodeBleu_score": 47.38105603856603}]}
{"instance_id": "dce20e143e04", "generation_result": [{"code": "public void saveZookeeperSystemProperties(String content){\n\t    var properties = new Properties();\n    try {\n        properties.load(new StringReader(content));\n    } catch (IOException e) {\n        log.error(\\\"load system properties failed\\\", e);\n        VToast.error(\\\"\\\");\n        return;\n    }\n    try {\n        properties.store(new FileOutputStream(PrettyZooConfigRepository.SYS_PROP_PATH), \\\"\\\");\n    } catch (IOException e) {\n        log.error(\\\"save system properties failed\\\", e);\n        VToast.error(\\\"\\\");\n    }\n}", "CodeBleu_score": 27.148171374770026}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    var properties = new Properties();\n    try {\n        properties.load(new StringReader(content));\n    } catch (IOException e) {\n        log.error(\"load system properties failed, msg:{}\", e.getMessage(), e);\n        VToast.error(\"\");\n        return;\n    }\n    try {\n        properties.store(new FileOutputStream(PrettyZooConfigRepository.SYS_PROP_PATH), \"\");\n    } catch (IOException e) {\n        log.error(\"save system properties failed, msg:{}\", e.getMessage(), e);\n        VToast.error(\"\");\n    }\n}", "CodeBleu_score": 33.54488230060995}, {"code": "public void saveZookeeperSystemProperties(String content){\n\t    var properties = new Properties();\n    try (var reader = new StringReader(content)) {\n        properties.load(reader);\n    } catch (IOException e) {\n        log.error(\"load system properties failed\", e);\n        VToast.error(\"\");\n        return;\n    }\n    try {\n        properties.store(new FileOutputStream(PrettyZooConfigRepository.SYS_PROP_PATH), \"\");\n    } catch (IOException e) {\n        log.error(\"save system properties failed\", e);\n        VToast.error(\"\");\n    }\n}", "CodeBleu_score": 37.175119193387935}]}
{"instance_id": "d89f8e6bfb31", "generation_result": [{"code": "private String response(Socket client){\n\t        try (BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()))) {\n            StringBuilder response = new StringBuilder();\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                response.append(line);\n            }\n            client.close();\n            return response.toString();\n        } catch (IOException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "CodeBleu_score": 46.739654236512834}, {"code": "private String response(Socket client){\n\t    try (BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()))) {\n        StringBuilder builder = new StringBuilder();\n        String line;\n            while ((line = reader.readLine()) != null) {\n                builder.append(line).append(\\\"\\\n\\\");\n            }\n            return builder.toString();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    } finally {\n        try {\n            client.close();\n        } catch (IOException e) {\n            // ignore\n        }\n    }\n}", "CodeBleu_score": 48.656922230028606}, {"code": "private String response(Socket client){\n\t    try {\n        BufferedReader reader = new BufferedReader(new InputStreamReader(client.getInputStream()));\n        StringBuilder sb = new StringBuilder();\n        String line = null;\n        while ((line = reader.readLine()) != null) {\n            sb.append(line);\n        }\n        client.close();\n        return sb.toString();\n    } catch (IOException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 60.96910919113245}]}
{"instance_id": "b0a277c5e3c0", "generation_result": [{"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t        CuratorFramework client = CuratorFrameworkFactory.builder()\n                .connectString(params.getConnectString())\n                .sessionTimeoutMs(params.getSessionTimeoutMs())\n                .connectionTimeoutMs(params.getConnectionTimeoutMs())\n                .retryPolicy(params.getRetryPolicy() == null ? new ExponentialBackoffRetry(1000, 3) : params.getRetryPolicy())\n                .aclProvider(params.getAclProvider() == null ? new ACLProvider() {\n                    @Override\n                    public List<ACL> getDefaultAcl() {\n                        return ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                    }\n\n                    @Override\n                    public List<ACL> getAclForPath(String path) {\n                        return ZooDefs.Ids.OPEN_ACL_UNSAFE;\n                    }\n                } : params.getAclProvider())\n                .authorization(params.getAuthInfo() == null ? new AuthInfo(\"digest\", \"zk:zk\".getBytes()) : params.getAuthInfo())\n                .build();\n        client.start();\n        try {\n            if (!client.blockUntilConnected(5, TimeUnit.SECONDS)) {\n                log.error(\\\"zookeeper connect failed\\\");\n                client.close();\n                throw new IllegalStateException(\\\"zookeeper connect failed\\\");\n            }\n        } catch (InterruptedException e) {\n            log.error(\\\"zookeeper connect failed\\\", e);\n            client.close();\n            throw new IllegalStateException(\\\"zookeeper connect failed\\\", e);\n        }\n        return new CuratorZookeeperConnection(client, params);\n    }", "CodeBleu_score": 51.668390374525885}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t        // Create a CuratorFramework client using the provided parameters\n        CuratorFramework client = createClient(params);\n\n        // Wait up to 5 seconds for the connection to be established\n        try {\n            client.start();\n            if (!client.blockUntilConnected(5, TimeUnit.SECONDS)) {\n                log.error(\\\"Failed to connect to Zookeeper within 5 seconds\\\");\n                client.close();\n                throw new IllegalStateException(\\\"Failed to connect to Zookeeper within 5 seconds\\\");\n            }\n        } catch (InterruptedException e) {\n            log.error(\\\"Interrupted while waiting for Zookeeper connection\\\", e);\n            client.close();\n            throw new IllegalStateException(\\\"Interrupted while waiting for Zookeeper connection\\\", e);\n        }\n\n        // Return a new CuratorZookeeperConnection with the provided parameters\n        return new CuratorZookeeperConnection(params, client);\n    }", "CodeBleu_score": 53.01176507853887}, {"code": "public ZookeeperConnection<CuratorFramework> create(ZookeeperParams params){\n\t        RetryPolicy retryPolicy = new ExponentialBackoffRetry(1000, 3);\n        CuratorFramework client = CuratorFrameworkFactory.builder()\n                .connectString(params.getConnectionString())\n                .retryPolicy(retryPolicy)\n                .sessionTimeoutMs(params.getSessionTimeoutMs())\n                .connectionTimeoutMs(params.getConnectionTimeoutMs())\n                .namespace(params.getNamespace())\n                .build();\n        client.start();\n        try {\n            if (!client.blockUntilConnected(5, TimeUnit.SECONDS)) {\n                throw new IllegalStateException(\\\"Timeout waiting for connection.  Zookeeper state: \\\" + client.getState());\n            }\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new IllegalStateException(\\\"Interrupted waiting for connection.  Zookeeper state: \\\" + client.getState());\n        }\n\n        return new CuratorZookeeperConnection(client, params);\n    }", "CodeBleu_score": 42.29215741759807}]}
{"instance_id": "b144bcd67462", "generation_result": [{"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    String connectionString = getConnectionString();\n    if (!isSync.get()) {\n        log.info(\"start sync zookeeper node, connection string: {}\", connectionString);\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n        try {\n            treeCache.start();\n        } catch (Exception e) {\n            log.error(\"start sync zookeeper node error, connection string: {}\", connectionString, e);\n            treeCache.close();\n        }\n        isSync.set(true);\n    } else {\n        log.info(\"zookeeper node sync is running, connection string: {}\", connectionString);\n    }\n}", "CodeBleu_score": 46.345989543908566}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t    String connectionString = getConnectionString();\n    if (!isSync.get()) {\n        log.info(\"Zookeeper node synchronization start, connectionString: {}\", connectionString);\n        treeCache.getListenable().addListener(new CuratorTreeCacheListener(connectionString, listeners));\n        try {\n            treeCache.start();\n        } catch (Exception e) {\n            log.error(\"Zookeeper node synchronization error, connectionString: {}\", connectionString, e);\n            treeCache.close();\n        }\n        isSync.set(true);\n    } else {\n        log.info(\"Zookeeper node synchronization is already in progress, connectionString: {}\", connectionString);\n    }\n}", "CodeBleu_score": 49.79436979405613}, {"code": "public void sync(List<ZookeeperNodeListener> listeners){\n\t        final String zookeeperConnectionString = getZookeeperConnectionString();\n        if (!isSync.get()) {\n            log.info(\"Start sync zookeeper node, zookeeper connection string: {}\", zookeeperConnectionString);\n            treeCache.getListenable().addListener(new CuratorTreeCacheListener(listeners));\n            try {\n                treeCache.start();\n            } catch (Exception e) {\n                log.error(\"Sync zookeeper node error, zookeeper connection string: {}, error message: {}\", zookeeperConnectionString, e.getMessage(), e);\n                treeCache.close();\n            }\n            isSync.set(true);\n        } else {\n            log.info(\"Sync zookeeper node already in progress, zookeeper connection string: {}\", zookeeperConnectionString);\n        }\n    }", "CodeBleu_score": 43.185669092113656}]}
{"instance_id": "6452f272f2d7", "generation_result": [{"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache pathChildrenCache = new PathChildrenCache(client, path, true);\n    //BUILD_INITIAL_CACHE \u4ee3\u8868\u4f7f\u7528\u540c\u6b65\u7684\u65b9\u5f0f\u8fdb\u884c\u7f13\u5b58\u521d\u59cb\u5316\u3002\n    pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 99.8143270836795}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache cache = new PathChildrenCache(client, path, true);\n    //BUILD_INITIAL_CACHE \u4ee3\u8868\u4f7f\u7528\u540c\u6b65\u7684\u65b9\u5f0f\u8fdb\u884c\u7f13\u5b58\u521d\u59cb\u5316\u3002\n    cache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    cache.getListenable().addListener(listener);\n}", "CodeBleu_score": 81.74938892658945}, {"code": "public void watchPathChildrenNode(String path, PathChildrenCacheListener listener) throws Exception{\n\t    PathChildrenCache pathChildrenCache = new PathChildrenCache(client, path, true);\n    //BUILD_INITIAL_CACHE \u4ee3\u8868\u4f7f\u7528\u540c\u6b65\u7684\u65b9\u5f0f\u8fdb\u884c\u7f13\u5b58\u521d\u59cb\u5316\u3002\n    pathChildrenCache.start(PathChildrenCache.StartMode.BUILD_INITIAL_CACHE);\n    pathChildrenCache.getListenable().addListener(listener);\n}", "CodeBleu_score": 99.8143270836795}]}
{"instance_id": "17f786e147c3", "generation_result": [{"code": "public void unregisterService(){\n\t    logger.info(\"Unregister all service on path: {}\", pathList);\n    for (String path : pathList) {\n        try {\n            this.curatorClient.deletePath(path);\n        } catch (Exception ex) {\n            logger.error(\"Delete path error: \" + ex.getMessage());\n        }\n    }\n    this.curatorClient.close();\n}", "CodeBleu_score": 88.81481150954232}, {"code": "public void unregisterService(){\n\t    logger.info(\"Unregister all service on zookeeper\");\n    for (String path : pathList) {\n        try {\n            this.curatorClient.deletePath(path);\n        } catch (Exception ex) {\n            logger.error(\"Delete service path error: \" + ex.getMessage());\n        }\n    }\n    this.curatorClient.close();\n}", "CodeBleu_score": 96.39225904692941}, {"code": "public void unregisterService(){\n\t    logger.info(\"Unregister all service\");\n    for (String path : pathList) {\n        try {\n            this.curatorClient.deletePath(path);\n        } catch (Exception ex) {\n            logger.error(\"Delete path error: {}\", ex.getMessage());\n        }\n    }\n    this.curatorClient.close();\n}", "CodeBleu_score": 84.17057376201913}]}
{"instance_id": "32fec6cfa353", "generation_result": [{"code": "public void addListener(IZkStateListener listener){\n\t    completableFuture.whenComplete(this::makeClientReady);\n    client.subscribeStateChanges(listener);\n}", "CodeBleu_score": 15.921060791645115}, {"code": "public void addListener(IZkStateListener listener){\n\t    completableFuture.whenComplete((client, throwable) -> {\n        makeClientReady(client, throwable);\n        client.subscribeStateChanges(listener);\n    });\n}", "CodeBleu_score": 38.95234198670424}, {"code": "public void addListener(IZkStateListener listener){\n\t    completableFuture.whenComplete((client, throwable) -> {\n        if (throwable != null) {\n            logger.error(\"Failed to create ZkClient\", throwable);\n            return;\n        }\n        makeClientReady(client);\n        client.subscribeStateChanges(listener);\n    });\n}", "CodeBleu_score": 33.52813719295488}]}
{"instance_id": "619d57562a76", "generation_result": [{"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t        this(serverAddr, authority, 1000, 3000, 3000);\n    }", "CodeBleu_score": 3.4102575277711473}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t        this.client = CuratorFrameworkFactory.newClient(serverAddr, new RetryNTimes(Integer.MAX_VALUE, 1000), 5000, new RetryNTimes(Integer.MAX_VALUE, 1000));\n        if (authority != null && authority.length() > 0) {\n            this.client.addAuthInfo(\"digest\", authority.getBytes());\n        }\n        this.client.getConnectionStateListenable().addListener(new ConnectionStateListener() {\n            public void stateChanged(CuratorFramework client, ConnectionState state) {\n                if (state == ConnectionState.LOST) {\n                    CuratorZookeeperClient.this.stateChanged(StateListener.DISCONNECTED);\n                } else if (state == ConnectionState.CONNECTED) {\n                    CuratorZookeeperClient.this.stateChanged(StateListener.CONNECTED);\n                } else if (state == ConnectionState.RECONNECTED) {\n                    CuratorZookeeperClient.this.stateChanged(StateListener.RECONNECTED);\n                }\n            }\n        });\n        this.client.start();\n        try {\n            this.client.blockUntilConnected();\n        } catch (InterruptedException e) {\n            throw new IllegalStateException(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 64.4721296101173}, {"code": "public CuratorZookeeperClient(String serverAddr, String authority){\n\t    this(serverAddr, authority, 1000, 3000, 3000);\n}", "CodeBleu_score": 3.410257375945607}]}
{"instance_id": "9e7fb18946e4", "generation_result": [{"code": "public void removeChildListener(String path, ChildListener listener){\n\t        ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n        if (listeners != null) {\n            TargetChildListener targetListener = listeners.remove(listener);\n            if (targetListener != null) {\n                removeTargetChildListener(path, targetListener);\n            }\n        }\n    }", "CodeBleu_score": 90.94602923623641}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners != null) {\n        TargetChildListener targetListener = listeners.remove(listener);\n        if (targetListener != null) {\n            removeTargetChildListener(path, targetListener);\n        }\n    }\n}", "CodeBleu_score": 93.24015669668252}, {"code": "public void removeChildListener(String path, ChildListener listener){\n\t    ConcurrentMap<ChildListener, TargetChildListener> listeners = childListeners.get(path);\n    if (listeners != null) {\n        TargetChildListener targetListener = listeners.remove(listener);\n        if (targetListener != null) {\n            removeTargetChildListener(path, targetListener);\n        }\n    }\n}", "CodeBleu_score": 93.24015669668252}]}
{"instance_id": "2c3fae642654", "generation_result": [{"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (NULL == zh) {\n        LOG_ERR(\"Failed to reconnect to zookeeper. zh is NULL\");\n        return QCONF_ERR_PARAM;\n    }\n\n    string idc_host, idc, host;\n    unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n    if (QCONF_OK != lock_ht_find(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host)) return QCONF_ERR_OTHER;\n    deserialize_from_idc_host(idc_host, idc, host);\n\n    lock_ht_remove(_ht_idchost_handle, _ht_ih_mutex, idc_host);\n    lock_ht_remove(_ht_handle_idchost, _ht_hi_mutex, htkey);\n    zookeeper_close(zh);\n\n    zhandle_t *new_zh = zookeeper_init(host.c_str(), global_watcher, _recv_timeout, NULL, NULL, 0);\n    if (NULL == new_zh) {\n        LOG_ERR(\"Failed to reconnect to zookeeper. host:%s timeout:%d\", host.c_str(), _recv_timeout);\n        return QCONF_ERR_OTHER;\n    }\n\n    init_env_for_zk(new_zh, idc_host, idc);\n    _finish_process_tbl_sleep_setting = true;\n\n    return QCONF_OK;\n}", "CodeBleu_score": 68.25329218225579}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t    if (NULL == zh) {\n        LOG_ERR(\"zh is null.\");\n        return QCONF_ERR_PARAM;\n    }\n\n    string idc_host, idc, host;\n    unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n    if (QCONF_OK == lock_ht_find(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host)) {\n        deserialize_from_idc_host(idc_host, idc, host);\n        lock_ht_remove(_ht_handle_idchost, _ht_hi_mutex, htkey);\n    }\n\n    zookeeper_close(zh);\n\n    zh = zookeeper_init(host.c_str(), global_watcher, _recv_timeout, NULL, NULL, 0);\n    if (NULL == zh) {\n        LOG_ERR(\"Failed to initial zookeeper. host:%s timeout:%d\",\n                host.c_str(), _recv_timeout);\n        return QCONF_ERR_OTHER;\n    }\n\n    init_env_for_zk(zh, idc_host, idc);\n\n    // reset the table watcher\n    _finish_process_tbl_sleep_setting = true;\n\n    return QCONF_OK;\n}", "CodeBleu_score": 64.34101561432526}, {"code": "static int watcher_reconnect_to_zookeeper(zhandle_t *zh){\n\t", "CodeBleu_score": 1.8025725052776684}]}
{"instance_id": "0b5ab34e1dd9", "generation_result": [{"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    // update handle to host table\n    unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n    lock_ht_set(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host);\n\n    // update idc host to handle table\n    lock_ht_set(_ht_idchost_handle, _ht_ih_mutex, idc_host, zh);\n\n    // check the connection state of the handle\n    int state = zoo_state(zh);\n    if (ZOO_CONNECTED_STATE != state) {\n        LOG_ERR(\"The zookeeper handle is not connected. state:%d\", state);\n        return;\n    }\n\n    // register the current host on the Zookeeper server\n    int ret = register_current_host(zh, idc);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to register current host on zookeeper. ret:%d\", ret);\n        return;\n    }\n\n    // set watcher on notify node\n    ret = set_notify_watcher(zh);\n    if (QCONF_OK != ret) {\n        LOG_ERR(\"Failed to set watcher on notify node. ret:%d\", ret);\n        add_gray_idc(idc);\n    }\n}", "CodeBleu_score": 63.9847935626418}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    if (NULL == zh) return;\n\n    // update internal tables\n    unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n    lock_ht_set(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host);\n    lock_ht_set(_ht_idchost_handle, _ht_ih_mutex, idc_host, zh);\n\n    // check the connection state\n    int state = zoo_state(zh);\n    if (ZOO_CONNECTED_STATE != state) {\n        LOG_ERR(\"[session state: ZOO_CONNECTED_STATE]\");\n        return;\n    }\n\n    // register the current host\n    string host_path = _zk_host_path + \"/\" + idc_host;\n    int ret = zoo_create(zh, host_path.c_str(), idc_host.c_str(), idc_host.length(),\n                         &ZOO_OPEN_ACL_UNSAFE, 0, NULL, 0);\n    if (ZOK != ret && ZNODEEXISTS != ret) {\n        LOG_ERR(\"Failed to register host:%s. ret:%d\", idc_host.c_str(), ret);\n        return;\n    }\n\n    // set watcher on notify node\n    ret = zoo_wexists(zh, _zk_notify_node.c_str(), global_watcher, NULL, NULL);\n    if (ZOK != ret) {\n        LOG_ERR(\"Failed to set watcher on notify node:%s. ret:%d\", _zk_notify_node.c_str(), ret);\n        add_gray_idc(idc);\n    }\n}", "CodeBleu_score": 57.4673947858353}, {"code": "static void init_env_for_zk(zhandle_t *zh, const string &idc_host, const string &idc){\n\t    unsigned long htkey = reinterpret_cast<unsigned long>(zh);\n    if (QCONF_OK != lock_ht_set(_ht_handle_idchost, _ht_hi_mutex, htkey, idc_host)) {\n        LOG_ERR(\"Failed to set [handle to host] table.\");\n        return;\n    }\n    if (QCONF_OK != lock_ht_set(_ht_idchost_handle, _ht_ih_mutex, idc_host, zh)) {\n        LOG_ERR(\"Failed to set [idc host to handle] table.\");\n        return;\n    }\n\n    // check the connection state of the zookeeper handle\n    if (ZOO_CONNECTED_STATE != zoo_state(zh)) {\n        LOG_ERR(\"The zookeeper handle is not connected.\");\n        return;\n    }\n\n    // register the current host on the zookeeper server\n    string zk_host = get_zk_host();\n    if (QCONF_OK != register_current_host(zh, zk_host)) {\n        LOG_ERR(\"Failed to register current host on the zookeeper server.\");\n        return;\n    }\n\n    // set watcher on notify node\n    string notify_node = get_notify_node();\n    if (QCONF_OK != set_watcher_on_notify_node(zh, notify_node)) {\n        LOG_ERR(\"Failed to set watcher on notify node.\");\n        return;\n    }\n\n    // add the idc to gray list\n    add_gray_idc(idc);\n}", "CodeBleu_score": 50.87648694769433}]}
{"instance_id": "19fc5847a7c5", "generation_result": [{"code": "def make_digest_acl_credential(username, password)\n\t\n    credential = username + \":\" + b64encode(hashlib.sha1(password).digest()).decode(\"utf-8\")\n    return credential\n\n", "CodeBleu_score": 32.15963915059958}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    credential = b64encode(hashlib.sha1(username + \":\" + password).digest()).decode()\n    return username + \":\" + credential\n\n", "CodeBleu_score": 27.16285931568057}, {"code": "def make_digest_acl_credential(username, password)\n\t\n    credential = username + \":\" + b64encode(hashlib.sha1(password).digest()).decode(\"utf-8\")\n    return credential\n\n", "CodeBleu_score": 32.15963915059958}]}
{"instance_id": "4a062391deb0", "generation_result": [{"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    else:\n        lock_path = self._lock_path + \"/\" + self.processing_element[0]\n        lock_value = self.client.get(lock_path)[0]\n        return lock_value == self.id\n\n", "CodeBleu_score": 45.65705884314914}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_path = self.path + self.lock\n    lock_value, stat = self.client.get(lock_path)\n    return lock_value == self.id\n\n", "CodeBleu_score": 40.32376491549937}, {"code": "def holds_lock(self)\n\t\n    if self.processing_element is None:\n        return False\n    lock_path = self.path + self.lock\n    lock_value, _ = self.client.retry(self.client.get, lock_path)\n    return lock_value == self.id\n\n", "CodeBleu_score": 47.3577876351818}]}
{"instance_id": "aaac7523d2b5", "generation_result": [{"code": "def consume(self)\n\t\n    if self.processing_element is not None:\n        if self.holds_lock():\n            with self.client.transaction() as transaction:\n                lock_id, entry_path = self.processing_element\n                lock_path = \"{path}/{id}\".format(path=self._lock_path, id=lock_id)\n                transaction.delete(lock_path)\n                transaction.delete(entry_path)\n                self.processing_element = None\n                return True\n        else:\n            return False\n    else:\n        return False\n\n", "CodeBleu_score": 61.33093368636864}, {"code": "def consume(self)\n\t\n    if self.processing_element is not None and self.holds_lock():\n        with self.client.transaction() as transaction:\n            lock_id, _ = self.processing_element\n            lock_path = \"{path}/{id}\".format(path=self._lock_path, id=lock_id)\n            transaction.delete(lock_path)\n            transaction.delete(self.processing_element[2])\n            self.processing_element = None\n            return True\n    return False\n\n", "CodeBleu_score": 59.9577102435537}, {"code": "def consume(self)\n\t\n    if self.processing_element is not None and self.holds_lock():\n        with self.client.transaction() as transaction:\n            transaction.delete(self.processing_element[0])\n            transaction.delete(self.processing_element[2])\n            self.processing_element = None\n            return True\n    return False\n\n", "CodeBleu_score": 42.30100575985843}]}
{"instance_id": "bed0c998ac4c", "generation_result": [{"code": "def _read_socket(self, read_timeout)\n\t\n    header, buffer, offset = self._read_header(read_timeout)\n    self.logger.log(BLATHER, \"Received header: %s\", header)\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping\")\n        self.outstanding_ping = False\n    elif header.xid == AUTH_XID:\n        self._handle_auth_response(header, buffer, offset)\n    elif header.xid == WATCH_XID:\n        self._read_watch_event(buffer, offset)\n    else:\n        self.logger.log(BLATHER, \"Received response(xid=%s)\", header.xid)\n        self._read_response(header, buffer, offset)\n\n", "CodeBleu_score": 43.67582623436742}, {"code": "def _read_socket(self, read_timeout)\n\t\n    header, buffer, offset = self._read_header(read_timeout)\n    self.logger.log(BLATHER, \"Received header: %s\", header)\n\n    if header.xid == PING_XID:\n        self.logger.log(BLATHER, \"Received ping\")\n        self._clear_ping_flag()\n        return\n\n    if header.xid == AUTH_XID:\n        if header.err:\n            self.logger.debug(\n                \"Received error(xid=%s) %r\",\n                AUTH_XID,\n                EXCEPTIONS[header.err](),\n            )\n            self._auth_exception = EXCEPTIONS[header.err]()\n        else:\n            self._auth_exception = None\n        return\n\n    if header.xid == WATCH_XID:\n        self._read_watch_event(buffer, offset)\n        return\n\n    self._read_response(header, buffer, offset)\n\n", "CodeBleu_score": 49.62882423036494}, {"code": "def _read_socket(self, read_timeout)\n\t\n    header, buffer, offset = self._read_header(read_timeout)\n    self.logger.log(BLATHER, \"Received header %s\", header)\n\n    if header.xid == PING_XID:\n        self.logger.debug(\"Received ping\")\n        self._outstanding_ping = False\n    elif header.xid == AUTH_XID:\n        self._handle_auth_response(header, buffer, offset)\n    elif header.xid == WATCH_XID:\n        self._read_watch_event(buffer, offset)\n    else:\n        self.logger.log(\n            BLATHER, \"Received response(xid=%s)\", header.xid\n        )\n        return self._read_response(header, buffer, offset)\n\n", "CodeBleu_score": 44.119531845280335}]}
{"instance_id": "b10e2c2c410b", "generation_result": [{"code": "def zk_loop(self)\n\t\n    self.logger.info(\"Starting ZK loop\")\n    self.connection_stopped.clear()\n\n    while not self._stopped.is_set():\n        try:\n            self._connect(self.connect_timeout)\n        except Exception as exc:\n            self.logger.warning(\"Error while connecting to ZK: %r\", exc)\n        else:\n            break\n\n    if self._stopped.is_set():\n        self.logger.info(\"Stopping ZK loop\")\n        self.connection_stopped.set()\n        self.session_callback(KeeperState.CLOSED)\n        return\n\n    self.logger.info(\"Connected to ZK\")\n    self.connection_stopped.set()\n    self.session_callback(KeeperState.CONNECTED)\n\n    while not self._stopped.is_set():\n        try:\n            self._run()\n        except Exception as exc:\n            self.logger.error(\"Error while running ZK loop: %r\", exc)\n            self.session_callback(KeeperState.EXPIRED_SESSION)\n            self._stopped.wait(self.retry_timeout)\n        else:\n            break\n\n    self.logger.info(\"Stopping ZK loop\")\n    self.connection_stopped.set()\n    self.session_callback(KeeperState.CLOSED)\n\n", "CodeBleu_score": 42.87836454889183}, {"code": "def zk_loop(self)\n\t\n    self.logger.info(\\\"Starting ZK loop\\\")\n    self.connection_stopped.clear()\n\n    # Attempt to connect to zookeeper\n    try:\n        self._connect(self.connect_timeout)\n    except Exception as exc:\n        self.logger.warning(\\\"Failed to connect to Zookeeper: %s\\\", exc)\n        raise\n\n    # Start the loop\n    while not self._stopped.is_set():\n        try:\n            self._loop()\n        except Exception as exc:\n            self.logger.exception(\\\"Exception in zk_loop\\\")\n            self._session_callback(KeeperState.EXPIRED_SESSION, exc)\n            self.connection_stopped.set()\n            return\n\n    self.logger.info(\\\"Stopping ZK loop\\\")\n    self.connection_stopped.set()\n    self._session_callback(KeeperState.CLOSED)\n\n", "CodeBleu_score": 45.55890201121945}, {"code": "def zk_loop(self)\n\t\n    self.logger.info(\\\"Starting ZK loop\\\")\n    self._stopped.clear()\n\n    while not self._stopped.is_set():\n        try:\n            self._connect(self._connect_timeout)\n            break\n        except Exception as exc:\n            self.logger.warning(\\\"Failed to connect to Zookeeper\\\", exc_info=exc)\n            if self._retry_policy.should_try():\n                self._retry_policy.sleep()\n            else:\n                break\n    else:\n        self.logger.warning(\\\"Failed to connect to Zookeeper\\\")\n\n    self._session_callback(KeeperState.CONNECTED)\n    self.logger.info(\\\"Stopping ZK loop\\\")\n    self._session_callback(KeeperState.CLOSED)\n    self._stopped.set()\n\n", "CodeBleu_score": 44.01503397396226}]}
{"instance_id": "42b3d26a3540", "generation_result": [{"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    sorted_partitions = sorted(partitions)\n    sorted_members = sorted(members)\n    index = sorted_members.index(identifier)\n    return sorted_partitions[index::len(sorted_members)]\n\n", "CodeBleu_score": 35.701061449925966}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    partitions.sort()\n    members.sort()\n    idx = members.index(identifier)\n    return partitions[idx::len(members)]\n\n", "CodeBleu_score": 33.50856907528368}, {"code": "def _partitioner(self, identifier, members, partitions)\n\t\n    members.sort()\n    partitions.sort()\n    index = members.index(identifier)\n    return partitions[index::len(members)]\n\n", "CodeBleu_score": 33.6805163744097}]}
{"instance_id": "738974d4e9c0", "generation_result": [{"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self._inner_leave)\n        self.participating = False\n    except KazooException:\n        self._best_effort_cleanup()\n        self.participating = False\n\n", "CodeBleu_score": 62.72456090587766}, {"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self._inner_leave)\n        self.participating = False\n    except KazooException:\n        # We failed to leave, best effort cleanup\n        self._best_effort_cleanup()\n        self.participating = False\n\n", "CodeBleu_score": 62.72456090587766}, {"code": "def leave(self)\n\t\n    try:\n        self.client.retry(self._inner_leave)\n        self.participating = False\n    except KazooException:\n        # We failed to leave, best effort cleanup\n        self._best_effort_cleanup()\n        self.participating = False\n\n", "CodeBleu_score": 62.72456090587766}]}
{"instance_id": "a321fef7d100", "generation_result": [{"code": "public Result start(){\n\t        try {\n            if (hdfsOverFtpServer.statusServer()) {\n                return new Result(true, null, \"FTP \u670d\u52a1\u5df2\u7ecf\u542f\u52a8\");\n            } else {\n                hdfsOverFtpServer.startServer();\n                return new Result(true, null, \"FTP \u670d\u52a1\u542f\u52a8\u6210\u529f\");\n            }\n        } catch (Exception e) {\n            log.error(e);\n            return new Result(false, null, \"FTP \u670d\u52a1\u542f\u52a8\u5931\u8d25\");\n        }\n    }", "CodeBleu_score": 40.613708696715314}, {"code": "public Result start(){\n\t        try {\n            boolean status = hdfsOverFtpServer.statusServer();\n            if (status) {\n                return new Result(true, null, \"FTP \u670d\u52a1\u5df2\u542f\u52a8\");\n            }\n            hdfsOverFtpServer.startServer();\n            return new Result(true, null, \"FTP \u670d\u52a1\u542f\u52a8\u6210\u529f\");\n        } catch (Exception e) {\n            log.error(e);\n            return new Result(false, null, \"FTP \u670d\u52a1\u542f\u52a8\u5931\u8d25\");\n        }\n    }", "CodeBleu_score": 69.38312848996065}, {"code": "public Result start(){\n\t        try {\n            boolean status = hdfsOverFtpServer.statusServer();\n            if (!status) {\n                hdfsOverFtpServer.startServer();\n                return new Result(true, \\\"FTP \u670d\u52a1\u542f\u52a8\u6210\u529f\\\");\n            } else {\n                return new Result(false, \\\"FTP \u670d\u52a1\u5df2\u7ecf\u542f\u52a8\\\");\n            }\n        } catch (Exception e) {\n            log.error(e);\n            return new Result(false, \\\"FTP \u670d\u52a1\u542f\u52a8\u5931\u8d25\\\");\n        }\n    }", "CodeBleu_score": 57.404155983258356}]}
{"instance_id": "24b088689114", "generation_result": [{"code": "public Result stop(){\n\t        try {\n            boolean status = hdfsOverFtpServer.statusServer();\n            if(status) {\n                hdfsOverFtpServer.stopServer();\n            }\n            return new Result(true, \"FTP \u670d\u52a1\u505c\u6b62\u6210\u529f\");\n        }catch (Exception e) {\n            log.error(e);\n            return new Result(false, \"FTP \u670d\u52a1\u505c\u6b62\u5931\u8d25\");\n        }\n    }", "CodeBleu_score": 94.18674199698171}, {"code": "public Result stop(){\n\t        try {\n            boolean status = hdfsOverFtpServer.statusServer();\n            if(status) {\n                hdfsOverFtpServer.stopServer();\n            }\n            return new Result(true, \"FTP \u670d\u52a1\u505c\u6b62\u6210\u529f\");\n        }catch (Exception e) {\n            log.error(e);\n            return new Result(false, \"FTP \u670d\u52a1\u505c\u6b62\u5931\u8d25\");\n        }\n    }", "CodeBleu_score": 94.18674199698171}, {"code": "public Result stop(){\n\t        try {\n            boolean status = hdfsOverFtpServer.statusServer();\n            if(status) {\n                hdfsOverFtpServer.stopServer();\n            }\n            return new Result(true, \"FTP \u670d\u52a1\u505c\u6b62\u6210\u529f\");\n        }catch (Exception e) {\n            log.error(e);\n            return new Result(false, \"FTP \u670d\u52a1\u505c\u6b62\u5931\u8d25\");\n        }\n    }", "CodeBleu_score": 94.18674199698171}]}
{"instance_id": "af0884ffda66", "generation_result": [{"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\n    if (authorities == null) {\n        return null;\n    }\n\n    for (Authority authority : authorities) {\n        if (authority.canAuthorize(request)) {\n            request = authority.authorize(request);\n            if (request != null) {\n                return request;\n            }\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 41.47000248281433}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\n\tAuthority authority = null;\n\tAuthorizationRequest updatedRequest = request;\n\n\tfor (Iterator<Authority> iter = authorities.iterator(); iter.hasNext();) {\n\t\tauthority = iter.next();\n\t\tupdatedRequest = authority.authorize(updatedRequest);\n\n\t\t// if the request is not accepted by this authority\n\t\tif (updatedRequest == null) {\n\t\t\t// no need to continue checking\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn updatedRequest;\n}", "CodeBleu_score": 28.36527088807329}, {"code": "public AuthorizationRequest authorize(AuthorizationRequest request){\n\t\tAuthority authority = null;\n\tList<Authority> authorities = getAuthorities();\n\tif (authorities != null) {\n\t\tfor (int i = 0; i < authorities.size(); i++) {\n\t\t\tauthority = authorities.get(i);\n\t\t\tif (authority.canAuthorize(request)) {\n\t\t\t\trequest = authority.authorize(request);\n\t\t\t\tif (request != null) {\n\t\t\t\t\treturn request;\n\t\t\t\t} else {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 51.40885681023286}]}
{"instance_id": "920d28a0fe76", "generation_result": [{"code": "public boolean mkdir(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        return dfs.mkdirs(fullPath);\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 77.83125477463258}, {"code": "public boolean mkdir(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        return dfs.mkdirs(fullPath);\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 77.83125477463258}, {"code": "public boolean mkdir(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        dfs.mkdirs(fullPath);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 87.40352044915173}]}
{"instance_id": "a2b04232d387", "generation_result": [{"code": "public boolean delete(){\n\t    try {\n        FileSystem fs = HdfsOverFtpSystem.getDfs();\n        fs.delete(fullPath, true);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 88.12709413650218}, {"code": "public boolean delete(){\n\t    try {\n        FileSystem fs = HdfsOverFtpSystem.getDfs();\n        fs.delete(fullPath, true);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 88.12709413650218}, {"code": "public boolean delete(){\n\t    try {\n        FileSystem fs = HdfsOverFtpSystem.getDfs();\n        fs.delete(fullPath, true);\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 88.12709413650218}]}
{"instance_id": "3407087c9af6", "generation_result": [{"code": "public boolean move(FtpFile ftpFile){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        dfs.rename(fullPath, new Path(ftpFile.getParent() + \"/\" + ftpFile.getName()));\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 68.34287787677692}, {"code": "public boolean move(FtpFile ftpFile){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        dfs.rename(fullPath, new Path(ftpFile.getParent() + \"/\" + ftpFile.getName()));\n        return true;\n    } catch (IOException e) {\n        e.printStackTrace();\n        return false;\n    }\n}", "CodeBleu_score": 68.34287787677692}, {"code": "public boolean move(FtpFile ftpFile){\n\t\ttry {\n\t\tFileSystem fs = HdfsOverFtpSystem.getDfs();\n\t\tfs.rename(fullPath, new Path(ftpFile.getParent() + \"/\" + ftpFile.getName()));\n\t\treturn true;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 63.7435610850683}]}
{"instance_id": "91227000a139", "generation_result": [{"code": "public List<FtpFile> listFiles(){\n\t    List<FtpFile> files = new ArrayList<FtpFile>();\n\n    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        FileStatus[] fs = dfs.listStatus(fullPath);\n\n        for (FileStatus f : fs) {\n            String name = f.getPath().toString();\n            String virtualPath = path.toString();\n            if (virtualPath.length() > 1) {\n                virtualPath = virtualPath + \"/\";\n            }\n            String virtualName = name.replace(homePath.toString(), virtualPath);\n            FtpFile file = new HdfsFileObject(homePath.toString(), virtualName, user);\n            files.add(file);\n        }\n    } catch (IOException e) {\n        log.debug(e.getMessage(), e);\n        return null;\n    }\n\n    return Collections.unmodifiableList(files);\n}", "CodeBleu_score": 40.37561014269993}, {"code": "public List<FtpFile> listFiles(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        FileStatus[] files = dfs.listStatus(fullPath);\n        FtpFile[] ftpFiles = new FtpFile[files.length];\n        String base = path.toString();\n        if (base.charAt(base.length() - 1) != '/') {\n            base += '/';\n        }\n        for (int i = 0; i < files.length; i++) {\n            String fileStr = base + files[i].getPath().getName();\n            ftpFiles[i] = new HdfsFileObject(homePath.toString(), fileStr, user);\n        }\n        return Collections.unmodifiableList(Arrays.asList(ftpFiles));\n    } catch (IOException e) {\n        log.debug(e);\n        return null;\n    }\n}", "CodeBleu_score": 55.34621697938189}, {"code": "public List<FtpFile> listFiles(){\n\t    try {\n        FileSystem dfs = HdfsOverFtpSystem.getDfs();\n        FileStatus[] files = dfs.listStatus(fullPath);\n\n        // construct virtual file names\n        List<FtpFile> virtualFiles = new ArrayList<FtpFile>();\n        for (FileStatus file : files) {\n            String virtualPath = path.toString() + file.getPath().getName();\n            virtualFiles.add(new HdfsFileObject(homePath.toString(), virtualPath, user));\n        }\n        return Collections.unmodifiableList(virtualFiles);\n    } catch (IOException e) {\n        log.debug(path + \" does not exist\", e);\n        return null;\n    }\n}", "CodeBleu_score": 38.78520281244782}]}
{"instance_id": "aec4623134b5", "generation_result": [{"code": "public void configure(){\n\t    if (!isConfigured) {\n        isConfigured = true;\n        userDataProp = new BaseProperties();\n        try {\n            if (userDataFile.exists()) {\n                userDataProp.load(new FileInputStream(userDataFile));\n            }\n        } catch (IOException e) {\n            throw new FtpServerConfigurationException(\n                    \"Failed to load user data properties from \" + userDataFile.getAbsolutePath(), e);\n        }\n        convertDeprecatedProperties();\n    }\n}", "CodeBleu_score": 50.47518238095354}, {"code": "public void configure(){\n\t    isConfigured = true;\n    userDataProp = new BaseProperties();\n    try {\n        if (userDataFile.exists()) {\n            userDataProp.load(new FileInputStream(userDataFile));\n        }\n    } catch (IOException e) {\n        throw new FtpServerConfigurationException(\"Could not load user data file \" + userDataFile.getAbsolutePath(), e);\n    }\n    convertDeprecatedProperties();\n}", "CodeBleu_score": 49.34532436612303}, {"code": "public void configure(){\n\t    isConfigured = true;\n    userDataProp = new BaseProperties();\n    try {\n        userDataProp.load(new FileInputStream(userDataFile));\n    } catch (IOException e) {\n        throw new FtpServerConfigurationException(\n                \\\"Failed to load user data file \\\" + userDataFile.getAbsolutePath(), e);\n    }\n\n    convertDeprecatedProperties();\n}", "CodeBleu_score": 42.41132096009165}]}
{"instance_id": "b5a2587f14d0", "generation_result": [{"code": "private void saveUserData() throws FtpException{\n\t    File parentDir = userDataFile.getParentFile();\n    if (parentDir != null && !parentDir.exists()) {\n        if (!parentDir.mkdirs()) {\n            throw new FtpServerConfigurationException(\"Failed to create parent directory for user data file: \" + userDataFile.getAbsolutePath());\n        }\n    }\n\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        userDataProp.store(fos, null);\n    } catch (IOException e) {\n        LOG.error(\"Failed to save user data\", e);\n        throw new FtpException(\"Failed to save user data\", e);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 54.170435207917414}, {"code": "private void saveUserData() throws FtpException{\n\t    File parent = userDataFile.getParentFile();\n    if (parent != null && !parent.exists()) {\n        if (!parent.mkdirs()) {\n            throw new FtpServerConfigurationException(\"Failed to create parent directory for user data file : \" + userDataFile.getAbsolutePath());\n        }\n    }\n\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        userDataProp.store(fos, \\\"\\\");\n    } catch (IOException e) {\n        LOG.error(\\\"Failed to save user data file : \\\" + userDataFile.getAbsolutePath(), e);\n        throw new FtpException(\\\"Failed to save user data file : \\\" + userDataFile.getAbsolutePath(), e);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 46.70164144828236}, {"code": "private void saveUserData() throws FtpException{\n\t    File parentDir = userDataFile.getParentFile();\n    if (parentDir != null && !parentDir.exists()) {\n        if (!parentDir.mkdirs()) {\n            throw new FtpServerConfigurationException(\"Failed to create directory \" + parentDir.getAbsolutePath());\n        }\n    }\n\n    FileOutputStream fos = null;\n    try {\n        fos = new FileOutputStream(userDataFile);\n        userDataProp.store(fos, null);\n    } catch (IOException e) {\n        LOG.error(\"Failed to save user data\", e);\n        throw new FtpException(\"Failed to save user data\", e);\n    } finally {\n        IoUtils.close(fos);\n    }\n}", "CodeBleu_score": 53.57449334306761}]}
{"instance_id": "5cf2989cf513", "generation_result": [{"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.setPasswordEncryptor(new Md5PasswordEncryptor());\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 74.31245631945852}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.setPasswordEncryptor(new Md5PasswordEncryptor());\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 74.31245631945852}, {"code": "public Result delete(@PathVariable(value = \"user\") String user){\n\t    try {\n        HdfsUserManager userManagerFactory = new HdfsUserManager();\n        userManagerFactory.setFile(new File(System.getProperty(\"user.dir\") + File.separator + \"users.properties\"));\n        userManagerFactory.setPasswordEncryptor(new Md5PasswordEncryptor());\n\n        userManagerFactory.delete(user);\n        return new Result(true, \"\u5220\u9664\u7528\u6237\u6210\u529f\");\n    } catch (Exception e) {\n        log.error(e);\n        return new Result(false, \"\u5220\u9664\u7528\u6237\u5931\u8d25\");\n    }\n}", "CodeBleu_score": 74.31245631945852}]}
{"instance_id": "ce383a9a6497", "generation_result": [{"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    LOG.info(\"Opening file: {} with buffer size: {}\", path, bufferSize);\n    Path qualifiedPath = getQualifiedPath(path);\n    try {\n        return new FSDataInputStream(seaweedFileSystemStore.open(qualifiedPath, bufferSize));\n    } catch (Exception e) {\n        LOG.warn(\"Error opening file: {}\", path, e);\n        return null;\n    }\n}", "CodeBleu_score": 33.49122071999554}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    LOG.info(\"Opening file: {} with buffer size: {}\", path, bufferSize);\n    path = checkPath(path);\n    try {\n        return new FSDataInputStream(seaweedFileSystemStore.open(path));\n    } catch (Exception e) {\n        LOG.warn(\"Error opening file: {}\", path, e);\n        return null;\n    }\n}", "CodeBleu_score": 33.06622506668684}, {"code": "public FSDataInputStream open(Path path, int bufferSize) throws IOException{\n\t    LOG.info(\"Opening file {} with buffer size {}\", path, bufferSize);\n    Path qualifiedPath = getQualifiedPath(path);\n    try {\n        return new FSDataInputStream(seaweedFileSystemStore.open(qualifiedPath, bufferSize));\n    } catch (Exception e) {\n        LOG.warn(\"Failed to open file {}\", path, e);\n        return null;\n    }\n}", "CodeBleu_score": 33.37858954157337}]}
{"instance_id": "f0fc12072c02", "generation_result": [{"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t    LOG.debug(\"rename src: {} dst: {}\", src, dst);\n\n    if (src.equals(new Path(\"/\"))) {\n        return false;\n    }\n\n    if (src.equals(dst)) {\n        return true;\n    }\n\n    FileStatus dstEntry = getFileStatus(dst);\n    if (dstEntry != null && dstEntry.isDirectory()) {\n        dst = new Path(dst, src.getName());\n    }\n\n    src = qualify(src);\n    dst = qualify(dst);\n\n    return seaweedFileSystemStore.rename(src, dst);\n}", "CodeBleu_score": 47.771394941113485}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\n        LOG.debug(\\\"rename src: {} dst:{}\\\", src, dst);\n\n        if (src.isRoot()) {\n            return false;\n        }\n\n        if (src.equals(dst)) {\n            return true;\n        }\n\n        Path dstEntry = dst.getParent();\n        if (dstEntry != null && getFileStatus(dstEntry).isDirectory()) {\n            dst = new Path(dstEntry, dst.getName());\n        }\n\n        src = qualify(src);\n        dst = qualify(dst);\n\n        return seaweedFileSystemStore.rename(src, dst);\n    }", "CodeBleu_score": 48.02814495665533}, {"code": "public boolean rename(Path src, Path dst) throws IOException{\n\t\n        LOG.debug(\\\"rename src: {} dst:{}\\\", src, dst);\n\n        if (src.equals(ROOT_PATH)) {\n            return false;\n        }\n\n        if (src.equals(dst)) {\n            return true;\n        }\n\n        FileStatus dstEntry = getFileStatus(dst);\n        if (dstEntry != null && dstEntry.isDir()) {\n            dst = new Path(dst, src.getName());\n        }\n\n        src = qualify(src);\n        dst = qualify(dst);\n\n        return seaweedFileSystemStore.rename(src, dst);\n    }", "CodeBleu_score": 47.93604171090307}]}
{"instance_id": "5104c071af46", "generation_result": [{"code": "public boolean hasCapability(String capability){\n\t    String lowerCap = capability.toLowerCase(Locale.ENGLISH);\n    if (lowerCap.equals(\"hsync\")) {\n        return supportFlush;\n    } else if (lowerCap.equals(\"hflush\")) {\n        return supportFlush;\n    }\n    return false;\n}", "CodeBleu_score": 40.16317162740625}, {"code": "public boolean hasCapability(String capability){\n\t    return capability.toLowerCase(Locale.ENGLISH).equals(SYNC_CAPABILITY) ||\n            capability.toLowerCase(Locale.ENGLISH).equals(FLUSH_CAPABILITY);\n}", "CodeBleu_score": 43.43161487417709}, {"code": "public boolean hasCapability(String capability){\n\t    if (capability == null) {\n        return false;\n    }\n    if (capability.toLowerCase(Locale.ENGLISH).equals(SYNC_CAPABILITY)) {\n        return supportFlush;\n    }\n    if (capability.toLowerCase(Locale.ENGLISH).equals(FLUSH_CAPABILITY)) {\n        return supportFlush;\n    }\n    return false;\n}", "CodeBleu_score": 51.797866619689415}]}
{"instance_id": "6989c860c79b", "generation_result": [{"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (this.lastError != null) {\n        throw this.lastError;\n    }\n    if (this.closed) {\n        throw new IOException(\\\"stream is closed\\\");\n    }\n    if (offset <= this.lastFlushOffset) {\n        return;\n    }\n\n    final long startOffset = this.lastFlushOffset;\n    final long endOffset = offset;\n    final long flushSize = endOffset - startOffset;\n    if (flushSize <= 0) {\n        return;\n    }\n\n    // flush the last written bytes to the service\n    final FilerProto.Entry.Builder entry = this.entry;\n    entry.setAttributes(FilerProto.FuseAttributes.newBuilder()\n            .setFileMode(0755)\n            .setCrtime(entry.getAttributes().getCrtime())\n            .setMtime(entry.getAttributes().getMtime())\n            .setFileSize(this.position)\n            .setFileSize(entry.getAttributes().getFileSize())\n            .clearGroupName()\n    );\n    try {\n        this.filerClient.setEntry(this.path, entry, this.replication, this.collection);\n    } catch (SeaweedFSFileNotFoundException e) {\n        throw new IOException(\\\"File not found: \\\" + this.path);\n    }\n    this.lastFlushOffset = offset;\n}", "CodeBleu_score": 31.553854372371237}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (this.lastError != null) {\n        throw this.lastError;\n    }\n    if (offset < this.lastFlushOffset) {\n        return;\n    }\n    if (this.outputIndex > 0) {\n        this.flushBuffer();\n    }\n    if (this.shouldSaveMetadata) {\n        this.saveMetadata();\n    }\n    this.lastFlushOffset = offset;\n}", "CodeBleu_score": 33.59269120527517}, {"code": "private synchronized void flushWrittenBytesToServiceInternal(final long offset) throws IOException{\n\t    if (shouldSaveMetadata) {\n        try {\n            filerClient.saveMetadata(path, entry.build());\n        } catch (Exception e) {\n            throw new IOException(e);\n        }\n    }\n    lastFlushOffset = offset;\n}", "CodeBleu_score": 52.74870492434063}]}
{"instance_id": "56e8fb9de5da", "generation_result": [{"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    bufferToWrite.flip();\n    final int numberOfBytesToWrite = bufferToWrite.limit();\n\n    final WriteOperation writeOperation = new WriteOperation(bufferToWrite, writePosition);\n    writeOperations.addLast(writeOperation);\n\n    final Future<Void> future = completionService.submit(new Callable<Void>() {\n        @Override\n        public Void call() throws Exception {\n            try {\n                SeaweedWrite.write(filerClient, path, bufferToWrite, writePosition, replication, collection);\n            } catch (Exception ex) {\n                throw new IOException(ex);\n            }\n            ByteBufferPool.release(bufferToWrite);\n            return null;\n        }\n    });\n\n    try {\n        future.get();\n    }\n    catch (Exception ex) {\n        throw new IOException(ex);\n    }\n\n    return numberOfBytesToWrite;\n}", "CodeBleu_score": 42.17749745694637}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t    bufferToWrite.flip();\n    final int byteLength = bufferToWrite.limit();\n\n    if (writeOperations.size() >= maxConcurrentRequestCount) {\n        try {\n            completionService.take().get();\n        } catch (ExecutionException ex) {\n            throw new IOException(ex);\n        }\n    }\n\n    final WriteOperation writeOperation = new WriteOperation(bufferToWrite, writePosition);\n    writeOperations.add(writeOperation);\n    completionService.submit(writeOperation);\n\n    return byteLength;\n}", "CodeBleu_score": 32.08838711942856}, {"code": "private synchronized int submitWriteBufferToService(final ByteBuffer bufferToWrite, final long writePosition) throws IOException {\n\t        bufferToWrite.flip();\n        final int byteLength = bufferToWrite.limit();\n\n        if (writeOperations.size() >= maxConcurrentRequestCount) {\n            try {\n                final Future<Void> future = completionService.take();\n                future.get();\n            } catch (InterruptedException e) {\n                throw new IOException(e);\n            } catch (ExecutionException e) {\n                throw new IOException(e);\n            }\n        }\n\n        final WriteOperation writeOperation = new WriteOperation(bufferToWrite, writePosition);\n        writeOperations.add(writeOperation);\n\n        final Future<Void> future = completionService.submit(new Callable<Void>() {\n            @Override\n            public Void call() throws Exception {\n                try {\n                    writeOperation.write(filerClient, path, entry, replication, collection);\n                } catch (IOException e) {\n                    lastError = e;\n                    throw e;\n                }\n                return null;\n            }\n        });\n\n        try {\n            future.get();\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        }\n        catch (ExecutionException e) {\n            throw new IOException(e);\n        }\n\n        return byteLength;\n    }", "CodeBleu_score": 37.4011004596382}]}
{"instance_id": "bf27d955c38b", "generation_result": [{"code": "private void waitForTaskToComplete() throws IOException{\n\t    Future<Void> job = null;\n    try {\n        job = completionService.take();\n    } catch (InterruptedException e) {\n        throw new IOException(e);\n    }\n    try {\n        job.get();\n    } catch (ExecutionException e) {\n        throw new IOException(e);\n    }\n}", "CodeBleu_score": 31.471029355705088}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    while (true) {\n        try {\n            Future<Void> job = completionService.take();\n            if (job == null) {\n                return;\n            }\n            job.get();\n        } catch (ExecutionException e) {\n            throw new IOException(e);\n        } catch (InterruptedException e) {\n            throw new IOException(e);\n        }\n    }\n}", "CodeBleu_score": 33.025261481011825}, {"code": "private void waitForTaskToComplete() throws IOException{\n\t    Future<Void> job = null;\n    try {\n        job = completionService.take();\n    } catch (InterruptedException ex) {\n        throw new IOException(ex);\n    }\n    if (job != null) {\n        try {\n            job.get();\n        } catch (InterruptedException ex) {\n            throw new IOException(ex);\n        }\n    }\n}", "CodeBleu_score": 33.72128402875611}]}
{"instance_id": "5c7a311273ae", "generation_result": [{"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    Iterator<WriteOperation> iterator = writeOperations.iterator();\n    while (iterator.hasNext()) {\n        WriteOperation writeOperation = iterator.next();\n        if (!writeOperation.future.isDone()) {\n            break;\n        }\n\n        try {\n            writeOperation.future.get();\n        } catch (ExecutionException e) {\n            lastError = (IOException) new IOException(e.toString()).initCause(e);\n            throw lastError;\n        } catch (InterruptedException e) {\n            lastError = (IOException) new InterruptedIOException(e.toString()).initCause(e);\n            throw lastError;\n        }\n\n        iterator.remove();\n    }\n}", "CodeBleu_score": 30.52635926614387}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    Iterator<WriteOperation> iterator = writeOperations.iterator();\n    while (iterator.hasNext()) {\n        WriteOperation operation = iterator.next();\n        if (operation.isDone()) {\n            iterator.remove();\n            try {\n                operation.get();\n            } catch (ExecutionException e) {\n                lastError = (IOException) new IOException(e.toString()).initCause(e);\n                throw lastError;\n            }\n        } else {\n            break;\n        }\n    }\n}", "CodeBleu_score": 34.26227577236893}, {"code": "private synchronized void shrinkWriteOperationQueue() throws IOException{\n\t    Iterator<WriteOperation> iterator = writeOperations.iterator();\n    while (iterator.hasNext()) {\n        WriteOperation writeOperation = iterator.next();\n        if (writeOperation.job.isDone()) {\n            try {\n                writeOperation.job.get();\n            } catch (ExecutionException e) {\n                lastError = (IOException) new InterruptedIOException(e.toString()).initCause(e);\n                throw lastError;\n            }\n            iterator.remove();\n        } else {\n            break;\n        }\n    }\n}", "CodeBleu_score": 33.2529492667003}]}
{"instance_id": "d8f07e66f690", "generation_result": [{"code": "protected HdfsFileSystemView(User user){\n\t        if (user == null) {\n            throw new IllegalArgumentException(\"user can not be null\");\n        }\n        if (user.getHomeDirectory() == null) {\n            throw new IllegalArgumentException(\"User home directory can not be null\");\n        }\n\n        // check if the home directory exists\n        // if (!new File(user.getHomeDirectory()).exists()) {\n        //     throw new IllegalArgumentException(\"User home directory does not exist\");\n        // }\n\n        this.homePath = user.getHomeDirectory();\n        this.user = user;\n    }", "CodeBleu_score": 78.40665274561076}, {"code": "protected HdfsFileSystemView(User user){\n\t        if (user == null) {\n            throw new IllegalArgumentException(\"user can not be null\");\n        }\n        if (user.getHomeDirectory() == null) {\n            throw new IllegalArgumentException(\"User home directory can not be null\");\n        }\n        this.homePath = user.getHomeDirectory();\n        this.user = user;\n    }", "CodeBleu_score": 78.40665274561076}, {"code": "protected HdfsFileSystemView(User user){\n\t        if (user == null) {\n            throw new IllegalArgumentException(\"user can not be null\");\n        }\n        if (user.getHomeDirectory() == null) {\n            throw new IllegalArgumentException(\"User home directory can not be null\");\n        }\n        homePath = user.getHomeDirectory();\n        if (!homePath.endsWith(File.separator)) {\n            homePath += File.separator;\n        }\n        this.user = user;\n    }", "CodeBleu_score": 72.79135281543876}]}
{"instance_id": "27807db0eb0f", "generation_result": [{"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path path = null;\n    if (dir.startsWith(\"/\")) {\n        path = new Path(dir);\n    } else {\n        path = new Path(currPath, dir);\n    }\n    if (path.equals(new Path(\"/\"))) {\n        return false;\n    }\n    if (path.toUri().getScheme() == null) {\n        path = new Path(\"hdfs\", path.toString());\n    }\n    if (path.getFileSystem(conf).isDirectory(path)) {\n        currPath = path.toString();\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 39.547895651789496}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path path = Path.getPath(currPath, dir);\n    if (path.isRoot()) {\n        return false;\n    }\n    if (path.isDirectory()) {\n        currPath = path.toString();\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 17.015615246209155}, {"code": "public boolean changeWorkingDirectory(String dir){\n\t    Path newPath;\n    if (dir.startsWith(\"/\")) {\n        newPath = new Path(dir);\n    } else {\n        newPath = new Path(currPath, dir);\n    }\n    if (newPath.equals(new Path(\"/\"))) {\n        return false;\n    }\n    if (newPath.toUri().getScheme() == null) {\n        newPath = new Path(\"hdfs\", newPath.toString());\n    }\n    if (newPath.getFileSystem(conf).isDirectory(newPath)) {\n        currPath = newPath.toString();\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 37.962615452320115}]}
{"instance_id": "be7aba23d184", "generation_result": [{"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t    this.conf = conf;\n    this.filerClient = new FilerClient(host, port, grpcPort);\n    if (conf.getBoolean(SEAWEED_FS_PUBLIC_URL_ACCESS_MODE, false)) {\n        this.filerClient.setAccessMode(AccessMode.PublicUrl);\n    } else if (conf.getBoolean(SEAWEED_FS_FILER_PROXY_ACCESS_MODE, false)) {\n        this.filerClient.setAccessMode(AccessMode.FilerProxy);\n    } else {\n        this.filerClient.setAccessMode(AccessMode.Direct);\n    }\n}", "CodeBleu_score": 41.680794513009076}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t        this.filerClient = new FilerClient(host, port, grpcPort);\n        this.conf = conf;\n        String accessMode = conf.get(SEAWEEDFS_ACCESS_MODE);\n        if (accessMode != null) {\n            this.filerClient.setAccessMode(AccessMode.valueOf(accessMode));\n        }\n    }", "CodeBleu_score": 43.5664321447583}, {"code": "public SeaweedFileSystemStore(String host, int port, int grpcPort, Configuration conf){\n\t        this.conf = conf;\n        String accessMode = conf.get(ACCESS_MODE, \"direct\");\n        String volumeServer = conf.get(VOLUME_SERVER, \"\");\n        if (volumeServer.length() > 0) {\n            List<String> volumeServers = Arrays.asList(volumeServer.split(\",\"));\n            filerClient = new FilerClient(host, port, grpcPort, volumeServers, accessMode);\n        } else {\n            filerClient = new FilerClient(host, port, grpcPort, accessMode);\n        }\n        LOG.info(\"SeaweedFS filerClient initialized: \" + filerClient);\n    }", "CodeBleu_score": 51.87959684812905}]}
{"instance_id": "7943a1723c23", "generation_result": [{"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\"openFileForRead path: {}\", path);\n\n    FilerProto.Entry entry = lookupEntry(path);\n    if (entry == null) {\n        throw new FileNotFoundException(\"File does not exist: \" + path);\n    }\n    LOG.debug(\"openFileForRead path:{} entry:{}\", path, entry);\n\n    return new SeaweedHadoopInputStream(filerClient, statistics, path.toString());\n}", "CodeBleu_score": 75.66928774151843}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\"openFileForRead path: {}\", path);\n\n    FilerProto.Entry entry = lookupEntry(path);\n    if (entry == null) {\n        throw new FileNotFoundException(\"File does not exist: \" + path);\n    }\n    LOG.debug(\"openFileForRead path:{} entry:{}\", path, entry);\n\n    return new SeaweedHadoopInputStream(filerClient, statistics, path.toString());\n}", "CodeBleu_score": 75.66928774151843}, {"code": "public FSInputStream openFileForRead(final Path path, FileSystem.Statistics statistics) throws IOException{\n\t    LOG.debug(\"openFileForRead path: {}\", path);\n\n    FilerProto.Entry entry = lookupEntry(path);\n    if (entry == null) {\n        throw new FileNotFoundException(\"File does not exist: \" + path);\n    }\n    LOG.debug(\"openFileForRead path:{} entry:{}\", path, entry);\n\n    return new SeaweedHadoopInputStream(filerClient, statistics, path.toString());\n}", "CodeBleu_score": 75.66928774151843}]}
{"instance_id": "36634cee9ed3", "generation_result": [{"code": "public void configure(JobConf conf){\n\t    super.configure(conf);\n    try {\n      hostName = InetAddress.getLocalHost().getHostName();\n    } catch (IOException e) {\n      hostName = \\\"localhost\\\";\n    }\n\n    threadsPerMap = conf.getInt(BenchmarkConstants.THREADS_PER_MAP, 1);\n    filesPerThread = conf.getInt(BenchmarkConstants.FILES_PER_THREAD, 1);\n\n    pool = Executors.newFixedThreadPool(threadsPerMap);\n    for (Thread t : ((ExecutorService) pool).getThreadPool()) {\n      t.setDaemon(true);\n    }\n  }", "CodeBleu_score": 35.24092857029943}, {"code": "public void configure(JobConf conf){\n\t    super.configure(conf);\n    try {\n      hostName = InetAddress.getLocalHost().getHostName();\n    } catch (IOException e) {\n      LOG.warn(\\\"Failed to get hostname, defaulting to localhost\\\", e);\n      hostName = \\\"localhost\\\";\n    }\n    threadsPerMap = conf.getInt(Constants.THREADS_PER_MAP, 1);\n    filesPerThread = conf.getInt(Constants.FILES_PER_THREAD, 1);\n    pool = Executors.newFixedThreadPool(threadsPerMap, r -> {\n      Thread thread = new Thread(r);\n      thread.setDaemon(true);\n      return thread;\n    });\n  }", "CodeBleu_score": 40.0564820763796}, {"code": "public void configure(JobConf conf){\n\t    super.configure(conf);\n    try {\n      this.hostName = InetAddress.getLocalHost().getHostName();\n    } catch (Exception e) {\n      this.hostName = \\\"localhost\\\";\n    }\n    this.threadsPerMap = conf.getInt(\\\"mapred.map.tasks\\\", 1);\n    this.filesPerThread = conf.getInt(\\\"benchmark.files.per.thread\\\", 1);\n    this.pool = Executors.newFixedThreadPool(threadsPerMap);\n    for (Thread t : ((ExecutorService) this.pool).getThreadPool()) {\n      t.setDaemon(true);\n    }\n  }", "CodeBleu_score": 31.724484504487084}]}
{"instance_id": "53cd9065153d", "generation_result": [{"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    String host = uri.getHost();\n    if (host == null) {\n      host = \"localhost\";\n    }\n    String key = \"juicefs.emptier.\" + host;\n    if (BgTaskUtil.get(key) != null) {\n      return;\n    }\n\n    UserGroupInformation ugi = UserGroupInformation.createSuperUser();\n    ugi.doAs(new PrivilegedExceptionAction<Void>() {\n      @Override\n      public Void run() throws Exception {\n        try {\n          FileSystem fs = new JuiceFileSystemImpl();\n          fs.initialize(uri, conf);\n          String trash = conf.get(\"fs.trash.interval\", \"0\");\n          if (!trash.equals(\"0\")) {\n            BgTaskUtil.start(key, new Runnable() {\n              @Override\n              public void run() {\n                try {\n                  ((JuiceFileSystemImpl) fs).trashEmptier();\n                } catch (IOException e) {\n                  LOG.warn(\\\"Failed to empty trash\\\", e);\n                }\n              }\n            }, 10, TimeUnit.MINUTES);\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(\\\"Failed to start trash emptier\\\", e);\n        }\n        return null;\n      }\n    });\n  }", "CodeBleu_score": 40.01067562038414}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    String host = uri.getHost();\n    if (host == null) {\n      host = \"localhost\";\n    }\n    if (TrashEmptier.isRunning(host)) {\n      return;\n    }\n\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(getConf(conf, \"trash.emptier.user\", \"juicefs\"));\n    ugi.doAs(new PrivilegedExceptionAction<Void>() {\n      @Override\n      public Void run() throws Exception {\n        FileSystem fs = FileSystem.get(uri, conf);\n        if (!(fs instanceof JuiceFileSystemImpl)) {\n          throw new IOException(\\\"Trash emptier only support JuiceFS\\\");\n        }\n        TrashEmptier.start(host, (JuiceFileSystemImpl) fs, conf);\n        return null;\n      }\n    });\n    BgTaskUtil.schedule(\\\"trash emptier\\\", new Runnable() {\n      @Override\n      public void run() {\n        try {\n          TrashEmptier.runOnce(host);\n        } catch (IOException e) {\n          LOG.warn(\\\"trash emptier error\\\", e);\n        }\n      }\n    }, 10, TimeUnit.MINUTES);\n  }", "CodeBleu_score": 41.603566872152086}, {"code": "private void startTrashEmptier(URI uri, final Configuration conf) throws IOException{\n\t    String host = uri.getHost();\n    if (host == null) {\n      host = \"localhost\";\n    }\n    if (trashEmptierRunning.containsKey(host)) {\n      return;\n    }\n    trashEmptierRunning.put(host, true);\n    try {\n      UserGroupInformation ugi = UserGroupInformation.createSuperUser();\n      ugi.doAs(new PrivilegedExceptionAction<Void>() {\n        @Override\n        public Void run() throws Exception {\n          JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n          fs.initialize(uri, conf);\n          return null;\n        }\n      });\n      BgTaskUtil.scheduleTask(new Runnable() {\n        @Override\n        public void run() {\n          try {\n            UserGroupInformation ugi = UserGroupInformation.createSuperUser();\n            ugi.doAs(new PrivilegedExceptionAction<Void>() {\n              @Override\n              public Void run() throws Exception {\n                JuiceFileSystemImpl fs = new JuiceFileSystemImpl();\n                fs.initialize(uri, conf);\n                fs.trashEmptier(conf);\n                return null;\n              }\n            });\n          } catch (Exception e) {\n            LOG.error(\\\"trash emptier failed\\\", e);\n          }\n        }\n      }, 10, TimeUnit.MINUTES);\n    } catch (Exception e) {\n      throw new IOException(\\\"failed to start trash emptier\\\", e);\n    }\n  }", "CodeBleu_score": 40.48460606554743}]}
{"instance_id": "56968a526f6a", "generation_result": [{"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int rc = libhdfs_->hdfsDelete(fs, uri.to_path().c_str(), 0);\n  if (rc < 0) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot remove file \") + uri.to_string() + \"; \" +\n        strerror(errno)));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 79.05110425214485}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int rc = libhdfs_->hdfsDelete(fs, uri.to_path().c_str(), 0);\n  if (rc < 0) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot delete file \") + uri.to_string() + \"; \" +\n        std::string(hdfsGetLastError())));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 79.72905985570758}, {"code": "Status HDFS::remove_file(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  int ret = libhdfs_->hdfsDelete(fs, uri.to_path().c_str(), 0);\n  if (ret < 0) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot remove file \") + uri.to_string() +\n        \"; File deletion error\"));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 84.69697439509247}]}
{"instance_id": "f33adb3e8cb6", "generation_result": [{"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  bool file_exists = false;\n  RETURN_NOT_OK(is_file(uri, &file_exists));\n  if (!file_exists) {\n    return Status::Ok();\n  }\n  int flags = O_WRONLY | O_APPEND;\n  hdfsFile write_file =\n      libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), flags, 0, 0, 0);\n  if (!write_file) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file '\") + uri.to_string() +\n        \"'; File opening error\"));\n  }\n  if (libhdfs_->hdfsFlush(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file '\") + uri.to_string() +\n        \"'; File flushing error\"));\n  }\n  // Close file\n  if (libhdfs_->hdfsCloseFile(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file '\") + uri.to_string() +\n        \"'; File closing error\"));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 83.04479770785085}, {"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  bool file_exists = false;\n  RETURN_NOT_OK(is_file(uri, &file_exists));\n  if (!file_exists) {\n    return Status::Ok();\n  }\n  int flags = O_WRONLY | O_APPEND;\n  hdfsFile write_file =\n      libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), flags, 0, 0, 0);\n  if (!write_file) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file '\") + uri.to_string() +\n        \"'; File opening error\"));\n  }\n  // Flush file data to HDFS\n  if (libhdfs_->hdfsFlush(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file '\") + uri.to_string() +\n        \"'; File flushing error\"));\n  }\n  // Close file\n  if (libhdfs_->hdfsCloseFile(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot sync file '\") + uri.to_string() +\n        \"'; File closing error\"));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 83.04479770785085}, {"code": "Status HDFS::sync(const URI& uri){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n  bool file_exists = false;\n  RETURN_NOT_OK(is_file(uri, &file_exists));\n  if (!file_exists) {\n    return Status::Ok();\n  }\n  int flags = O_WRONLY | O_APPEND;\n  hdfsFile write_file =\n      libhdfs_->hdfsOpenFile(fs, uri.to_path().c_str(), flags, 0, 0, 0);\n  if (!write_file) {\n    return LOG_STATUS(Status_HDFSError(std::string(\n        \"Cannot sync file '\" + uri.to_string() + \"'; File opening error\")));\n  }\n  // Flush file contents to HDFS\n  if (libhdfs_->hdfsFlush(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(std::string(\n        \"Cannot sync file '\" + uri.to_string() + \"'; File flushing error\")));\n  }\n  // Close file\n  if (libhdfs_->hdfsCloseFile(fs, write_file)) {\n    return LOG_STATUS(Status_HDFSError(std::string(\n        \"Cannot sync file '\" + uri.to_string() + \"'; File closing error\")));\n  }\n  return Status::Ok();\n}", "CodeBleu_score": 70.26997930735779}]}
{"instance_id": "893c46ab9675", "generation_result": [{"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n\n  hdfsFileInfo* fileInfo = libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str());\n  if (fileInfo == NULL) {\n    if (errno) {\n      auto st = LOG_STATUS(Status_HDFSError(\n          std::string(\"Cannot get file size; \") + uri.to_string()));\n      return st;\n    }\n  }\n\n  if (fileInfo->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(fileInfo, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size; Not a file: \" + uri.to_string())));\n  }\n\n  *nbytes = fileInfo->mSize;\n  libhdfs_->hdfsFreeFileInfo(fileInfo, 1);\n\n  return Status::Ok();\n}", "CodeBleu_score": 75.12141914586662}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n\n  hdfsFileInfo* fileInfo = libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str());\n  if (fileInfo == NULL) {\n    if (errno) {\n      auto st = LOG_STATUS(Status_HDFSError(\n          std::string(\"Cannot get file size; \") + uri.to_string()));\n      return st;\n    }\n  }\n\n  if (fileInfo->mKind != tObjectKind::kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(fileInfo, 1);\n    return LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size; Not a file: \") + uri.to_string()));\n  }\n\n  *nbytes = fileInfo->mSize;\n  libhdfs_->hdfsFreeFileInfo(fileInfo, 1);\n\n  return Status::Ok();\n}", "CodeBleu_score": 76.51982832666833}, {"code": "Status HDFS::file_size(const URI& uri, uint64_t* nbytes){\n\t  hdfsFS fs = nullptr;\n  RETURN_NOT_OK(connect(&fs));\n\n  hdfsFileInfo* fileInfo = libhdfs_->hdfsGetPathInfo(fs, uri.to_path().c_str());\n  if (fileInfo == NULL) {\n    if (errno) {\n      auto st = LOG_STATUS(Status_HDFSError(\n          std::string(\"Cannot get file size; \") + strerror(errno)));\n      return st;\n    }\n  }\n\n  if (fileInfo->mKind != kObjectKindFile) {\n    libhdfs_->hdfsFreeFileInfo(fileInfo, 1);\n    auto st = LOG_STATUS(Status_HDFSError(\n        std::string(\"Cannot get file size; Not a file: \" + uri.to_string())));\n    return st;\n  }\n\n  *nbytes = fileInfo->mSize;\n  libhdfs_->hdfsFreeFileInfo(fileInfo, 1);\n\n  return Status::Ok();\n}", "CodeBleu_score": 69.61025189934685}]}
{"instance_id": "3da0b4d8ae16", "generation_result": [{"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    Map<String, String> hbaseCfg = JSON.parseObject(hbaseCfgString, new TypeReference<Map<String, String>>() {});\n    String quorum = hbaseCfg.getOrDefault(HBaseConstant.HBASE_ZOOKEEPER_QUORUM, \"\");\n    if (quorum.isEmpty()) {\n        throw new AddaxException(\"HBase configuration is missing Zookeeper quorum.\");\n    }\n    if (!quorum.contains(\":\")) {\n        quorum += \":2181\";\n    }\n    String znode = hbaseCfg.getOrDefault(HBaseConstant.HBASE_ZOOKEEPER_PROPERTY_CLIENTPORT, \"\");\n    if (znode.isEmpty()) {\n        throw new AddaxException(\"HBase configuration is missing znode parent.\");\n    }\n    return new Pair<>(quorum, znode);\n}", "CodeBleu_score": 54.32489259774806}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String quorum = null;\n    String znodeParent = null;\n    String[] configs = hbaseCfgString.split(\",\");\n    for (String config : configs) {\n        String[] kv = config.split(\"=\");\n        if (kv.length != 2) {\n            continue;\n        }\n        String key = kv[0].trim();\n        String value = kv[1].trim();\n        if (key.equals(HBaseConstant.HBASE_ZOOKEEPER_QUORUM_KEY)) {\n            quorum = value;\n        } else if (key.equals(HBaseConstant.HBASE_ZOOKEEPER_ZNODE_PARENT_KEY)) {\n            znodeParent = value;\n        }\n    }\n    if (quorum == null) {\n        throw new RuntimeException(\\\"HBase quorum not found in configuration\\\");\n    }\n    if (znodeParent == null) {\n        znodeParent = HBaseConstant.HBASE_ZOOKEEPER_ZNODE_PARENT_DEFAULT;\n    }\n    // Add default port if not specified\n    if (!quorum.contains(\\\":\\\")) {\n        quorum += \\\":2181\\\";\n    }\n    return new Pair<>(quorum, znodeParent);\n}", "CodeBleu_score": 35.687430372642545}, {"code": "public static Pair<String, String> getHbaseConfig(String hbaseCfgString){\n\t    String quorum = null;\n    String znodeParent = null;\n\n    // Parse the HBase configuration string into a JSON object\n    JSONObject hbaseCfg = JSON.parseObject(hbaseCfgString);\n\n    // Extract the Zookeeper quorum from the JSON object\n    JSONObject zookeeper = hbaseCfg.getJSONObject(\"hbase.zookeeper.quorum\");\n    if (zookeeper != null) {\n        quorum = zookeeper.getString(\"value\");\n    }\n\n    // Extract the Znode parent from the JSON object\n    JSONObject znode = hbaseCfg.getJSONObject(\"zookeeper.znode.parent\");\n    if (znode != null) {\n        znodeParent = znode.getString(\"value\");\n    }\n\n    // Ensure the quorum includes the port number, defaulting to 2181 if not specified\n    if (quorum != null && !quorum.contains(\":\")) {\n        quorum += \":2181\";\n    }\n\n    // If the znode parent is not provided, default to a predefined value\n    if (znodeParent == null) {\n        znodeParent = \"/hbase\";\n    }\n\n    // Return the quorum and znode parent as a pair\n    return new Pair<>(quorum, znodeParent);\n}", "CodeBleu_score": 34.149924987073604}]}
{"instance_id": "860cae2bb7f4", "generation_result": [{"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t        try (Connection connection = getConnection(cfg)) {\n            if (!tableExists(connection, cfg.getNamespace(), cfg.getTable())) {\n                throw new AddaxException(String.format(\"Table %s does not exist in namespace %s.\", cfg.getTable(), cfg.getNamespace()));\n            }\n            Map<String, String> tableSchema = getTableSchema(connection, cfg.getNamespace(), cfg.getTable());\n            for (String column : cfg.getColumns()) {\n                if (!tableSchema.containsKey(column)) {\n                    throw new AddaxException(String.format(\"Column %s does not exist in table %s.\", column, cfg.getTable()));\n                }\n            }\n        } catch (SQLException e) {\n            throw new AddaxException(String.format(\"Failed to validate configuration for HbaseSQLWriter: %s\", e.getMessage()), e);\n        }\n    }", "CodeBleu_score": 30.564124583496977}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t    try {\n        Connection connection = DriverManager.getConnection(cfg.getJdbcUrl(), cfg.getUsername(), cfg.getPassword());\n        Statement statement = connection.createStatement();\n        String sql = \"SELECT * FROM \" + cfg.getTable() + \" LIMIT 1\";\n        ResultSet resultSet = statement.executeQuery(sql);\n        ResultSetMetaData metaData = resultSet.getMetaData();\n        int columnCount = metaData.getColumnCount();\n        List<String> columnNames = new ArrayList<>();\n        for (int i = 1; i <= columnCount; i++) {\n            columnNames.add(metaData.getColumnName(i));\n        }\n        if (!columnNames.containsAll(cfg.getColumn())) {\n            throw new AddaxException(\"Columns specified in configuration do not exist in the target table.\");\n        }\n        statement.close();\n        connection.close();\n    } catch (SQLException e) {\n        throw new AddaxException(\"Error validating configuration for HbaseSQLWriter: \" + e.getMessage());\n    }\n}", "CodeBleu_score": 35.83367124124961}, {"code": "public static void validateConfig(HbaseSQLWriterConfig cfg){\n\t", "CodeBleu_score": 0.8577865379463421}]}
{"instance_id": "61721c327cf6", "generation_result": [{"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (haveKerberos && !kerberosPrincipal.isEmpty() && !kerberosKeytabFilePath.isEmpty()) {\n        try {\n            hadoopConf.set(\"hadoop.security.authentication\", \"Kerberos\");\n            UserGroupInformation.setConfiguration(hadoopConf);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\"Kerberos login error, please check the principal and keytab file path.\");\n            throw new RuntimeException(\"Kerberos login error, please check the principal and keytab file path.\", e);\n        }\n    }\n}", "CodeBleu_score": 44.53224692663713}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (haveKerberos && !kerberosPrincipal.isBlank() && !kerberosKeytabFilePath.isBlank()) {\n        try {\n            UserGroupInformation.setConfiguration(hadoopConf);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\\\"Kerberos login error!\\\", e);\n            throw new RuntimeException(\\\"Kerberos login error!\\\", e);\n        }\n    }\n}", "CodeBleu_score": 42.519730768186925}, {"code": "private static void kerberosAuthentication(String kerberosPrincipal, String kerberosKeytabFilePath){\n\t    if (haveKerberos && !kerberosPrincipal.isBlank() && !kerberosKeytabFilePath.isBlank()) {\n        try {\n            UserGroupInformation.setConfiguration(hadoopConf);\n            UserGroupInformation.loginUserFromKeytab(kerberosPrincipal, kerberosKeytabFilePath);\n        } catch (IOException e) {\n            LOG.error(\\\"Kerberos login error\\\", e);\n            throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.KERBEROS_LOGIN_ERROR, \\\"Kerberos login error\\\", e);\n        }\n    }\n}", "CodeBleu_score": 43.267662217786516}]}
{"instance_id": "9ceb7f0bb717", "generation_result": [{"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<>();\n        ResultSetMetaData metaData = rs.getMetaData();\n        int colCount = metaData.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = metaData.getColumnLabel(i);\n            String colType = metaData.getColumnTypeName(i);\n            if (colName == null || colType == null) {\n                throw new SQLException(\\\"Unable to get column name or type from metadata.\\\");\n            }\n            colTypeMap.put(colName, new ThinClientPTable.ThinClientPColumn(colName, colType));\n        }\n        return colTypeMap;\n    }", "CodeBleu_score": 43.31976844666454}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int colCount = rsmd.getColumnCount();\n        for (int i = 1; i <= colCount; i++) {\n            String colName = rsmd.getColumnLabel(i);\n            if (colName == null) {\n                throw new SQLException(\\\"Column name is null\\\");\n            }\n            String colType = rsmd.getColumnTypeName(i);\n            if (colType == null) {\n                throw new SQLException(\\\"Column type is null\\\");\n            }\n            colTypeMap.put(colName, new ThinClientPTable.ThinClientPColumn(colName, colType));\n        }\n        return colTypeMap;\n    }", "CodeBleu_score": 46.22194905560295}, {"code": "public static Map<String, ThinClientPTable.ThinClientPColumn> parseColType(ResultSet rs)\n            throws SQLException{\n\t        Map<String, ThinClientPTable.ThinClientPColumn> colTypeMap = new HashMap<>();\n        ResultSetMetaData rsmd = rs.getMetaData();\n        int cols = rsmd.getColumnCount();\n        for (int i = 1; i <= cols; i++) {\n            String colName = rsmd.getColumnLabel(i);\n            String colType = rsmd.getColumnTypeName(i);\n            if (colName == null || colType == null) {\n                throw new SQLException(\\\"Unable to get column names or types\\\");\n            }\n            ThinClientPTable.ThinClientPColumn col = new ThinClientPTable.ThinClientPColumn();\n            col.setType(colType);\n            colTypeMap.put(colName, col);\n        }\n        return colTypeMap;\n    }", "CodeBleu_score": 44.57578823960995}]}
{"instance_id": "247fc8882f6f", "generation_result": [{"code": "public static void truncateTable(Connection conn, String tableName){\n\t    try {\n        PhoenixConnection hconn = conn.unwrap(PhoenixConnection.class);\n        Admin admin = hconn.getAdmin();\n        if (!admin.tableExists(TableName.valueOf(tableName))) {\n            throw new SQLException(\\\"Table \" + tableName + \" does not exist\\\");\n        }\n        admin.disableTable(TableName.valueOf(tableName));\n        admin.truncateTable(TableName.valueOf(tableName), true);\n        LOG.debug(\\\"Table {} has been truncated.\\\", tableName);\n    } catch (SQLException e) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_TABLE_ERROR, e);\n    } finally {\n        try {\n            if (admin != null) {\n                admin.close();\n            }\n        } catch (IOException e) {\n            LOG.error(\\\"Failed to close admin\\\", e);\n        }\n    }\n}", "CodeBleu_score": 39.564321706734525}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    try {\n        PhoenixConnection hconn = conn.unwrap(PhoenixConnection.class);\n        HBaseAdmin admin = new HBaseAdmin(hconn.getConfiguration());\n        if (!admin.tableExists(TableName.valueOf(tableName))) {\n            LOG.warn(\"Table {} does not exist\", tableName);\n            return;\n        }\n        admin.disableTable(tableName);\n        admin.truncateTable(tableName, true);\n        LOG.debug(\"Table {} has been truncated\", tableName);\n    } catch (Throwable e) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_TABLE_ERROR,\n                String.format(\"Unable to truncate table %s\", tableName), e);\n    } finally {\n        if (admin != null) {\n            try {\n                admin.close();\n            } catch (IOException e) {\n                LOG.warn(\"Unable to close HBase Admin\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 53.673947586141146}, {"code": "public static void truncateTable(Connection conn, String tableName){\n\t    try {\n        PhoenixConnection hconn = conn.unwrap(PhoenixConnection.class);\n        Admin admin = hconn.getAdmin();\n        if (admin.tableExists(tableName)) {\n            admin.disableTable(tableName);\n            admin.truncateTable(tableName, true);\n            LOG.debug(\"Table {} has been truncated.\", tableName);\n        }\n    } catch (SQLException e) {\n        throw AddaxException.asAddaxException(HbaseSQLWriterErrorCode.TRUNCATE_TABLE_ERROR, \"Failed to truncate table \" + tableName, e);\n    } finally {\n        if (admin != null) {\n            try {\n                admin.close();\n            } catch (IOException e) {\n                LOG.error(\"Failed to close admin instance.\", e);\n            }\n        }\n    }\n}", "CodeBleu_score": 53.4787005229591}]}
{"instance_id": "5e6a66d06162", "generation_result": [{"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        LOG.info(\"start read sequence file from hdfs path:{}\", sourceSequenceFilePath);\n        try (SequenceFile.Reader reader = new SequenceFile.Reader(fs, new Path(sourceSequenceFilePath), readerSliceConfig)) {\n            Writable key = (Writable) ReflectionUtils.newInstance(reader.getKeyClass(), readerSliceConfig);\n            Writable value = (Writable) ReflectionUtils.newInstance(reader.getValueClass(), readerSliceConfig);\n            while (reader.next(key, value)) {\n                String valueStr = value.toString();\n                if (StringUtils.isNotBlank(valueStr)) {\n                    StorageReaderUtil.transportRecord(recordSender, valueStr, taskPluginCollector);\n                }\n            }\n        } catch (Exception e) {\n            String message = String.format(\"Failed to read sequence file from hdfs path:%s\", sourceSequenceFilePath);\n            LOG.error(message, e);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_SEQUENCE_FILE_ERROR, message, e);\n        }\n    }", "CodeBleu_score": 59.29603139729824}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t\n        LOG.info(\"Start to read sequence file from {}\", sourceSequenceFilePath);\n\n        try (SequenceFile.Reader reader = new SequenceFile.Reader(\n                HdfsUtil.getFileSystem(sourceSequenceFilePath, readerSliceConfig),\n                new Path(sourceSequenceFilePath), readerSliceConfig)) {\n\n            Writable key = (Writable) ReflectionUtils.newInstance(reader.getKeyClass(), readerSliceConfig);\n            Writable value = (Writable) ReflectionUtils.newInstance(reader.getValueClass(), readerSliceConfig);\n\n            while (reader.next(key, value)) {\n                if (!value.toString().isEmpty()) {\n                    StorageReaderUtil.transportRecord(key.toString(), value.toString(), recordSender, taskPluginCollector);\n                }\n            }\n        } catch (IOException e) {\n            LOG.error(\"Failed to read sequence file from {}\", sourceSequenceFilePath, e);\n            String message = String.format(\"Failed to read sequence file from %s.\", sourceSequenceFilePath);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, message, e);\n        }\n    }", "CodeBleu_score": 51.313992351764945}, {"code": "public void sequenceFileStartRead(String sourceSequenceFilePath, Configuration readerSliceConfig,\n            RecordSender recordSender, TaskPluginCollector taskPluginCollector){\n\t        LOG.info(\"start read sequence file from {}\", sourceSequenceFilePath);\n\n        try (SequenceFile.Reader reader = new SequenceFile.Reader(\n                HadoopUtil.getHadoopConf(readerSliceConfig),\n                SequenceFile.Reader.file(new Path(sourceSequenceFilePath)))) {\n            Text key = new Text();\n            Text value = new Text();\n            while (reader.next(key, value)) {\n                String record = value.toString();\n                if (StringUtils.isNotBlank(record)) {\n                    StorageReaderUtil.transportRecord(record, recordSender, taskPluginCollector);\n                }\n            }\n        } catch (Exception e) {\n            String message = String.format(\"read sequence file [%s] error\", sourceSequenceFilePath);\n            LOG.error(message, e);\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_SEQUENCE_FILE_ERROR, message, e);\n        }\n    }", "CodeBleu_score": 53.906397469845416}]}
{"instance_id": "c450f959616c", "generation_result": [{"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try (FileSystem fs = FileSystem.get(new URI(filepath), hadoopConf)) {\n        if (fs.isFile(new Path(filepath))) {\n            String fileType;\n            switch (specifiedFileType) {\n                case \"ORC\":\n                    fileType = \"orc\";\n                    break;\n                case \"RC\":\n                    fileType = \"rc\";\n                    break;\n                case \"SEQUENCE\":\n                    fileType = \"seq\";\n                    break;\n                case \"PARQUET\":\n                    fileType = \"parquet\";\n                    break;\n                case \"CSV\":\n                    fileType = \"csv\";\n                    break;\n                case \"TEXT\":\n                    fileType = \"text\";\n                    break;\n                default:\n                    throw AddaxException.asAddaxException(HdfsReaderErrorCode.NOT_SUPPORT_FILE_TYPE, String.format(\\\"The file type [%s] is not supported.\\\", specifiedFileType));\n            }\n\n            return fileType.equals(fs.getFileStatus(new Path(filepath)).getPath().getName().split(\\\".\\\")[1]);\n        } else {\n            throw AddaxException.asAddaxException(HdfsReaderErrorCode.NOT_SUPPORT_FILE_TYPE, String.format(\\\"The file type [%s] is not supported.\\\", specifiedFileType));\n        }\n    } catch (URISyntaxException | IOException e) {\n        LOG.error(String.format(\\\"Error occurred while checking the HDFS file type. filepath: %s, specifiedFileType: %s\\\", filepath, specifiedFileType), e);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.CHECK_FILE_TYPE_ERROR, String.format(\\\"Error occurred while checking the HDFS file type. filepath: %s, specifiedFileType: %s\\\", filepath, specifiedFileType));\n    }\n}", "CodeBleu_score": 34.54676465657098}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t    try {\n        FileSystem fileSystem = FileSystem.get(hadoopConf);\n        FSDataInputStream inputStream = fileSystem.open(new Path(filepath));\n        if (specifiedFileType.equalsIgnoreCase(\"ORC\")) {\n            return OrcFile.isOrcFile(inputStream);\n        } else if (specifiedFileType.equalsIgnoreCase(\"RC\")) {\n            return RCFile.isRCFile(inputStream);\n        } else if (specifiedFileType.equalsIgnoreCase(\"Sequence\")) {\n            return SequenceFile.isSequenceFile(inputStream);\n        } else if (specifiedFileType.equalsIgnoreCase(\"Parquet\")) {\n            return ParquetFileReader.open(HadoopInputFile.fromPath(new Path(filepath), hadoopConf)).getFooter().hasFileMetaData();\n        } else if (specifiedFileType.equalsIgnoreCase(\"CSV\")) {\n            return CSVFile.isCSVFile(inputStream);\n        } else if (specifiedFileType.equalsIgnoreCase(\"Text\")) {\n            return TextFile.isTextFile(inputStream);\n        } else {\n            return false;\n        }\n    } catch (Exception e) {\n        LOG.error(e.getMessage(), e);\n        throw AddaxException.asAddaxException(HdfsReaderErrorCode.READ_FILE_ERROR, String.format(\"IO exception occurred when reading file [%s]\", filepath));\n    }\n}", "CodeBleu_score": 40.66916251511904}, {"code": "public boolean checkHdfsFileType(String filepath, String specifiedFileType){\n\t", "CodeBleu_score": 2.382402701443833}]}
{"instance_id": "1bf487d2cc64", "generation_result": [{"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 66.44422280985293}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        } catch (IOException e) {\n            throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 66.44422280985293}, {"code": "public static void closeConnection(Connection hConnection){\n\t    if (hConnection != null) {\n        try {\n            hConnection.close();\n        }\n        catch (IOException e) {\n            throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_CONNECTION_ERROR, e);\n        }\n    }\n}", "CodeBleu_score": 66.02219114816285}]}
{"instance_id": "680728cbc3ec", "generation_result": [{"code": "public static void closeAdmin(Admin admin){\n\t    try {\n        if (null != admin) {\n            admin.close();\n        }\n    } catch (IOException e) {\n        throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_ADMIN_ERROR, e);\n    }\n}", "CodeBleu_score": 91.92765292872204}, {"code": "public static void closeAdmin(Admin admin){\n\t    try {\n        if (null != admin) {\n            admin.close();\n        }\n    } catch (IOException e) {\n        throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_ADMIN_ERROR, e);\n    }\n}", "CodeBleu_score": 91.92765292872204}, {"code": "public static void closeAdmin(Admin admin){\n\t    try {\n        if (null != admin) {\n            admin.close();\n        }\n    } catch (IOException e) {\n        throw AddaxException.asAddaxException(Hbase11xWriterErrorCode.CLOSE_HBASE_ADMIN_ERROR, e);\n    }\n}", "CodeBleu_score": 91.92765292872204}]}
{"instance_id": "ce50bd53abef", "generation_result": [{"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t", "CodeBleu_score": 2.0379993148048974}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t", "CodeBleu_score": 2.0379993148048974}, {"code": "private void convertCellToLine(Cell cell, Record record)\n            throws Exception{\n\t    byte[] rowkeyBytes = CellUtil.cloneRow(cell);\n    String rowkey = Bytes.toString(rowkeyBytes);\n\n    byte[] familyBytes = CellUtil.cloneFamily(cell);\n    String family = Bytes.toString(familyBytes);\n\n    byte[] qualifierBytes = CellUtil.cloneQualifier(cell);\n    String qualifier = Bytes.toString(qualifierBytes);\n\n    String columnName = family + colonByte + qualifier;\n\n    byte[] valueBytes = CellUtil.cloneValue(cell);\n    String value = Bytes.toString(valueBytes);\n\n    long timestamp = cell.getTimestamp();\n\n    String rowkeyType = Hbase20xHelper.getRowkeyType(rowkeyBytes);\n    String rowkeyFormat = Hbase20xHelper.getRowkeyFormat(rowkeyBytes);\n    String columnValueType = Hbase20xHelper.getColumnValueType(columnName, familyQualifierMap);\n    String columnValueFormat = Hbase20xHelper.getColumnValueFormat(columnName, familyQualifierMap);\n\n    record.addColumn(new LongColumn(HBaseConstant.HBASE_ROWKEY, rowkey, rowkeyType, rowkeyFormat));\n    record.addColumn(new LongColumn(HBaseConstant.HBASE_FAMILY, family));\n    record.addColumn(new LongColumn(HBaseConstant.HBASE_QUALIFIER, qualifier));\n    record.addColumn(new LongColumn(HBaseConstant.HBASE_TIMESTAMP, timestamp));\n    record.addColumn(new LongColumn(HBaseConstant.HBASE_VALUE, value, columnValueType, columnValueFormat));\n}", "CodeBleu_score": 41.91457081680122}]}
{"instance_id": "29e8f3a99f0c", "generation_result": [{"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    boolean isBinary = configuration.getBoolean(HBaseKey.START_ROWKEY_IS_BINARY, false);\n    if (isBinary) {\n        return startRowkey.getBytes(Charset.forName(\"UTF-8\"));\n    }\n    return Bytes.toBytes(startRowkey);\n}", "CodeBleu_score": 59.50432191274611}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return new byte[0];\n    }\n    boolean isBinary = configuration.getBoolean(HBaseKey.START_ROWKEY_BINARY, false);\n    if (isBinary) {\n        return startRowkey.getBytes(Charset.forName(configuration.getString(HBaseKey.ENCODING, \"UTF-8\")));\n    } else {\n        return Bytes.toBytes(startRowkey);\n    }\n}", "CodeBleu_score": 58.90571822902684}, {"code": "public static byte[] convertUserStartRowkey(Configuration configuration){\n\t    String userStartRowkey = configuration.getString(HBaseKey.START_ROWKEY);\n    if (StringUtils.isBlank(userStartRowkey)) {\n        return new byte[0];\n    }\n    if (configuration.getBoolean(HBaseKey.IS_BINARY_ROWKEY)) {\n        return Bytes.toBytesBinary(userStartRowkey);\n    }\n    return Bytes.toBytes(userStartRowkey);\n}", "CodeBleu_score": 45.67176714044768}]}
{"instance_id": "f5ad51545b10", "generation_result": [{"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.INNER_START_ROW_KEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_BYTE_ARRAY;\n    } else {\n        return Hbase20xHelper.stringToBytes(startRowkey, true);\n    }\n}", "CodeBleu_score": 68.74982085513449}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROW_KEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_BYTE_ARRAY;\n    } else {\n        return Hbase20xHelper.stringToBytes(startRowkey, true);\n    }\n}", "CodeBleu_score": 75.12928466633569}, {"code": "public static byte[] convertInnerStartRowkey(Configuration configuration){\n\t    String startRowkey = configuration.getString(HBaseKey.START_ROW_KEY);\n    if (StringUtils.isBlank(startRowkey)) {\n        return HConstants.EMPTY_BYTE_ARRAY;\n    } else {\n        return Hbase20xHelper.stringToBytes(startRowkey, true);\n    }\n}", "CodeBleu_score": 75.12928466633569}]}
{"instance_id": "8618eef8b0e9", "generation_result": [{"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t        this.key = UUID.fromString(record.key());\n        this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n        this.data = record.value();\n    }", "CodeBleu_score": 45.59611019568219}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t        this.key = UUID.fromString(record.key());\n        this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n        this.data = record.value();\n    }", "CodeBleu_score": 45.59611019568219}, {"code": "public KafkaTbQueueMsg(ConsumerRecord<String, byte[]> record){\n\t        this.key = UUID.fromString(record.key());\n        this.headers = new DefaultTbQueueMsgHeaders(record.headers());\n        this.data = record.value();\n    }", "CodeBleu_score": 45.59611019568219}]}
{"instance_id": "46484df184dd", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t        return new TbKafkaProducerTemplate<>(kafkaSettings, serviceInfoProvider.getServiceId() + \"-transport-notifications\",\n                topicService.getNotificationsTopic(transportNotificationSettings.getDefaultTopic()), transportNotificationSettings.getDefaultPartition(),\n                transportNotificationSettings.getDefaultTimeoutMs(), notificationAdmin);\n    }", "CodeBleu_score": 27.029768109376146}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t        TbKafkaProducerTemplate<TbProtoQueueMsg<ToTransportMsg>> producer = new TbKafkaProducerTemplate<>(kafkaSettings,\n                serviceInfoProvider.getServiceId() + \"-transport-notifications\",\n                transportNotificationSettings.getDefaultTopic());\n        producer.setAdmin(notificationAdmin);\n        return producer;\n    }", "CodeBleu_score": 39.19828867325223}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToTransportMsg>> createTransportNotificationsMsgProducer(){\n\t", "CodeBleu_score": 5.611171615514953}]}
{"instance_id": "4ac56ef9f89a", "generation_result": [{"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t        TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerBuilder = TbKafkaConsumerTemplate.builder();\n        consumerBuilder.settings(kafkaSettings);\n        consumerBuilder.topic(topicService.buildTopicName(coreSettings.getTopic()));\n        consumerBuilder.clientId(\"tb-core-consumer-\" + serviceInfoProvider.getServiceId() + \"-\" + consumerCount.incrementAndGet());\n        consumerBuilder.groupId(topicService.buildTopicName(\"tb-core-node\"));\n        consumerBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData()), msg.getHeaders()));\n        consumerBuilder.admin(coreAdmin);\n        consumerBuilder.statsService(consumerStatsService);\n        return consumerBuilder.build();\n    }", "CodeBleu_score": 72.46297869027826}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t        TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerBuilder = TbKafkaConsumerTemplate.builder();\n        consumerBuilder.settings(kafkaSettings);\n        consumerBuilder.topic(topicService.buildTopicName(coreSettings.getTopic()));\n        consumerBuilder.clientId(\"tb-core-consumer-\" + serviceInfoProvider.getServiceId() + \"-\" + consumerCount.incrementAndGet());\n        consumerBuilder.groupId(topicService.buildTopicName(\"tb-core-node\"));\n        consumerBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData()), msg.getHeaders()));\n        consumerBuilder.admin(coreAdmin);\n        consumerBuilder.statsService(consumerStatsService);\n        return consumerBuilder.build();\n    }", "CodeBleu_score": 72.46297869027826}, {"code": "public TbQueueConsumer<TbProtoQueueMsg<ToCoreNotificationMsg>> createToCoreNotificationsMsgConsumer(){\n\t    TbKafkaConsumerTemplate.TbKafkaConsumerTemplateBuilder<TbProtoQueueMsg<ToCoreNotificationMsg>> consumerBuilder = TbKafkaConsumerTemplate.builder();\n    consumerBuilder.settings(kafkaSettings);\n    consumerBuilder.topic(topicService.buildTopicName(coreSettings.getTopic()));\n    consumerBuilder.clientId(\"tb-core-consumer-\" + serviceInfoProvider.getServiceId() + \"-\" + consumerCount.incrementAndGet());\n    consumerBuilder.groupId(topicService.buildTopicName(\"tb-core-node\"));\n    consumerBuilder.decoder(msg -> new TbProtoQueueMsg<>(msg.getKey(), ToCoreNotificationMsg.parseFrom(msg.getData()), msg.getHeaders()));\n    consumerBuilder.admin(coreAdmin);\n    consumerBuilder.statsService(consumerStatsService);\n    return consumerBuilder.build();\n}", "CodeBleu_score": 72.3656612868318}]}
{"instance_id": "e13a82b26338", "generation_result": [{"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (!topicNames.isEmpty()) {\n        for (String topic : topicNames) {\n            try {\n                admin.createTopicIfNotExists(topic);\n            } catch (IOException e) {\n                log.error(\"[{}] Failed to create topic: {}\", getClientId(), topic, e);\n            }\n        }\n        consumer.subscribe(topicNames);\n    } else {\n        log.info(\"[{}] No topics to subscribe to.\", getClientId());\n        consumer.unsubscribe();\n    }\n}", "CodeBleu_score": 59.38288447062886}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (!topicNames.isEmpty()) {\n        for (String topicName : topicNames) {\n            admin.createTopicIfNotExists(topicName);\n        }\n        consumer.subscribe(topicNames);\n    } else {\n        log.info(\"[{}] No topics to subscribe to.\", clientId);\n        consumer.unsubscribe();\n    }\n}", "CodeBleu_score": 65.21096430163504}, {"code": "protected void doSubscribe(List<String> topicNames){\n\t    if (!topicNames.isEmpty()) {\n        topicNames.forEach(topic -> {\n            try {\n                admin.createTopicIfNotExists(topic);\n            } catch (IOException e) {\n                log.error(\"[{}] Failed to create topic: {}\", clientId, topic, e);\n            }\n        });\n        consumer.subscribe(topicNames);\n    } else {\n        log.info(\"[{}] No topics to subscribe to\", clientId);\n        consumer.unsubscribe();\n    }\n}", "CodeBleu_score": 59.946158368743355}]}
{"instance_id": "8a20d0b48703", "generation_result": [{"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t        StopWatch stopWatch = new StopWatch();\n        stopWatch.start();\n        log.trace(\"Starting to poll topic [{}] for [{}] ms\", topic, durationInMillis);\n        ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n        stopWatch.stop();\n        log.trace(\"Polled topic [{}] for [{}] ms. Total time [{}] ms\", topic, durationInMillis, stopWatch.getTotalTimeMillis());\n        if (records.isEmpty()) {\n            return Collections.emptyList();\n        } else {\n            List<ConsumerRecord<String, byte[]>> recordList = new ArrayList<>();\n            records.forEach(recordList::add);\n            return recordList;\n        }\n    }", "CodeBleu_score": 76.35350442700587}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    log.trace(\"Poll records from topic [{}] for [{}] ms\", topic, stopWatch.getTotalTimeMillis());\n    if (records.isEmpty()) {\n        return Collections.emptyList();\n    } else {\n        List<ConsumerRecord<String, byte[]>> consumerRecords = new ArrayList<>();\n        records.forEach(consumerRecords::add);\n        return consumerRecords;\n    }\n}", "CodeBleu_score": 63.64353479480932}, {"code": "protected List<ConsumerRecord<String, byte[]>> doPoll(long durationInMillis){\n\t    StopWatch stopWatch = new StopWatch();\n    stopWatch.start();\n    log.debug(\"Starting to poll topic {} for {} ms\", topic, durationInMillis);\n    ConsumerRecords<String, byte[]> records = consumer.poll(Duration.ofMillis(durationInMillis));\n    stopWatch.stop();\n    log.debug(\"Polled topic {} for {} ms, total time {} ms\", topic, durationInMillis, stopWatch.getTotalTimeMillis());\n    if (records.isEmpty()) {\n        return Collections.emptyList();\n    } else {\n        List<ConsumerRecord<String, byte[]>> recordList = new ArrayList<>();\n        records.forEach(recordList::add);\n        return recordList;\n    }\n}", "CodeBleu_score": 78.63441252304396}]}
{"instance_id": "328e4c39a8e1", "generation_result": [{"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t", "CodeBleu_score": 2.454125543921295}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t", "CodeBleu_score": 2.454125543921295}, {"code": "public void onMsg(TbContext ctx, TbMsg msg){\n\t", "CodeBleu_score": 2.454125543921295}]}
{"instance_id": "35f835e8c387", "generation_result": [{"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    if (addMetadataKeyValuesAsKafkaHeaders) {\n        Map<String, String> headers = msg.getMetadata().entrySet().stream()\n                .filter(e -> !e.getKey().startsWith(TB_MSG_MD_PREFIX))\n                .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().toString()));\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, null, key, msg.getData(), headers);\n        producer.send(record, (metadata, exception) -> processRecord(ctx, msg, record, metadata, exception));\n    } else {\n        ProducerRecord<String, String> record = new ProducerRecord<>(topic, null, key, msg.getData());\n        producer.send(record, (metadata, exception) -> processRecord(ctx, msg, record, metadata, exception));\n    }\n}", "CodeBleu_score": 39.922920158972865}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    if (!addMetadataKeyValuesAsKafkaHeaders) {\n        producer.send(new ProducerRecord<>(topic, key, msg.getData()), (metadata, exception) -> processRecord(ctx, msg, metadata, exception));\n    } else {\n        var headers = msg.getMetaData().entrySet().stream()\n                .filter(entry -> !entry.getKey().startsWith(TB_MSG_MD_PREFIX))\n                .map(entry -> new RecordHeader(entry.getKey(), entry.getValue().getBytes(toBytesCharset)))\n                .collect(Collectors.toList());\n        producer.send(new ProducerRecord<>(topic, null, key, msg.getData(), headers), (metadata, exception) -> processRecord(ctx, msg, metadata, exception));\n    }\n}", "CodeBleu_score": 56.03643419673248}, {"code": "protected void publish(TbContext ctx, TbMsg msg, String topic, String key){\n\t    if (addMetadataKeyValuesAsKafkaHeaders) {\n        Map<String, String> headers = new HashMap<>();\n        msg.getMetaData().forEach((k, v) -> headers.put(TB_MSG_MD_PREFIX + k, v));\n        producer.send(new ProducerRecord<>(topic, key, msg.getData(), headers), (metadata, exception) -> processRecord(ctx, msg, metadata, exception));\n    } else {\n        producer.send(new ProducerRecord<>(topic, key, msg.getData()), (metadata, exception) -> processRecord(ctx, msg, metadata, exception));\n    }\n}", "CodeBleu_score": 46.647054727815245}]}
{"instance_id": "111a11189434", "generation_result": [{"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close Kafka producer\", e);\n        }\n    }\n}", "CodeBleu_score": 71.42565466358049}, {"code": "public void destroy(){\n\t        if (producer != null) {\n            try {\n                producer.close();\n            } catch (Exception e) {\n                log.error(\"Failed to close Kafka producer\", e);\n            }\n        }\n    }", "CodeBleu_score": 70.52321981708411}, {"code": "public void destroy(){\n\t    if (producer != null) {\n        try {\n            producer.close();\n        } catch (Exception e) {\n            log.error(\"Failed to close Kafka producer\", e);\n        }\n    }\n}", "CodeBleu_score": 71.42565466358049}]}
{"instance_id": "f5d2487100a9", "generation_result": [{"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t        TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> requestBuilder = TbKafkaProducerTemplate.builder();\n        requestBuilder.settings(kafkaSettings);\n        requestBuilder.clientId(\"monolith-rule-engine-\" + serviceInfoProvider.getServiceId());\n        requestBuilder.defaultTopic(topicService.buildTopicName(ruleEngineSettings.getRuleEngineTopic()));\n        requestBuilder.admin(ruleEngineAdmin);\n        return requestBuilder.build();\n    }", "CodeBleu_score": 92.53515689179142}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t        TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> requestBuilder = TbKafkaProducerTemplate.builder();\n        requestBuilder.settings(kafkaSettings);\n        requestBuilder.clientId(\"monolith-rule-engine-\" + serviceInfoProvider.getServiceId());\n        requestBuilder.defaultTopic(topicService.buildTopicName(ruleEngineSettings.getRuleEngineTopic()));\n        requestBuilder.admin(ruleEngineAdmin);\n        return requestBuilder.build();\n    }", "CodeBleu_score": 92.53515689179142}, {"code": "public TbQueueProducer<TbProtoQueueMsg<ToRuleEngineMsg>> createRuleEngineMsgProducer(){\n\t    TbKafkaProducerTemplate.TbKafkaProducerTemplateBuilder<TbProtoQueueMsg<ToRuleEngineMsg>> requestBuilder = TbKafkaProducerTemplate.builder();\n    requestBuilder.settings(kafkaSettings);\n    requestBuilder.clientId(\"monolith-rule-engine-\" + serviceInfoProvider.getServiceId());\n    requestBuilder.defaultTopic(topicService.buildTopicName(ruleEngineSettings.getRuleEngineTopic()));\n    requestBuilder.admin(ruleEngineAdmin);\n    return requestBuilder.build();\n}", "CodeBleu_score": 93.904511951135}]}
{"instance_id": "886264f5ca27", "generation_result": [{"code": "private void startLogScheduling(){\n\t    Duration timeout = Duration.ofMillis(kafkaSettings.getResponseTimeout());\n    statsPrintScheduler.scheduleWithFixedDelay(new Runnable() {\n        @Override\n        public void run() {\n            if (!statsConfig.getEnabled()) {\n                return;\n            }\n            try {\n                for (String groupId : monitoredGroups) {\n                    Map<TopicPartition, OffsetAndMetadata> groupOffsets = consumer.committed(new ArrayList<>(consumer.assignment()));\n                    Map<TopicPartition, Long> endOffsets = consumer.endOffsets(consumer.assignment());\n                    List<TopicPartition> laggingTopics = new ArrayList<>();\n                    for (TopicPartition topicPartition : consumer.assignment()) {\n                        OffsetAndMetadata offsetAndMetadata = groupOffsets.get(topicPartition);\n                        long endOffset = endOffsets.get(topicPartition);\n                        if (offsetAndMetadata != null && offsetAndMetadata.offset() < endOffset) {\n                            laggingTopics.add(topicPartition);\n                        }\n                    }\n                    if (!laggingTopics.isEmpty()) {\n                        log.warn(\"[{}] Lagging topics: {}\", groupId, laggingTopics);\n                    }\n                }\n            } catch (Exception e) {\n                log.warn(\"Failed to log consumer group statistics\", e);\n            }\n        }\n    }, statsConfig.getStatsPrintPeriod(), statsConfig.getStatsPrintPeriod(), TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 43.51538632685832}, {"code": "private void startLogScheduling(){\n\t    Duration timeout = Duration.ofMillis(kafkaSettings.getResponseTimeout());\n    statsPrintScheduler.scheduleWithFixedDelay(() -> {\n        if (statsConfig.getLogStats()) {\n            for (String groupId : monitoredGroups) {\n                try {\n                    Map<TopicPartition, OffsetAndMetadata> groupOffsets = consumer.committed(new ArrayList<>(partitionService.getPartitions(ServiceType.TB_CORE, groupId)));\n                    Map<TopicPartition, Long> endOffsets = consumer.endOffsets(groupOffsets.keySet());\n                    List<TopicPartition> laggingTopics = new ArrayList<>();\n                    for (TopicPartition partition : groupOffsets.keySet()) {\n                        long lag = endOffsets.get(partition) - groupOffsets.get(partition).offset();\n                        if (lag > 0) {\n                            laggingTopics.add(partition);\n                        }\n                    }\n                    if (!laggingTopics.isEmpty()) {\n                        log.warn(\"[{}] Lagging topics: {}\", groupId, laggingTopics);\n                    }\n                } catch (Exception e) {\n                    log.warn(\"[{}] Failed to get consumer group offsets and end offsets\", groupId, e);\n                }\n            }\n        }\n    }, statsConfig.getLogStatsPeriod(), statsConfig.getLogStatsPeriod(), TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 46.54620304314603}, {"code": "private void startLogScheduling(){\n\t    long timeout = kafkaSettings.getResponseTimeout();\n    statsPrintScheduler.scheduleWithFixedDelay(() -> {\n        try {\n            if (statsConfig.getEnabled()) {\n                log.info(\"Kafka consumer group statistics:\");\n                for (String groupId : monitoredGroups) {\n                    Map<TopicPartition, Long> groupOffsets = consumer.endOffsets(consumer.partitionsFor(groupId));\n                    Map<TopicPartition, Long> endOffsets = consumer.endOffsets(consumer.listTopics().keySet());\n                    List<TopicPartition> laggingTopics = new ArrayList<>();\n                    for (Map.Entry<TopicPartition, Long> groupOffset : groupOffsets.entrySet()) {\n                        TopicPartition topicPartition = groupOffset.getKey();\n                        long endOffset = endOffsets.getOrDefault(topicPartition, 0L);\n                        long groupOffsetValue = groupOffset.getValue();\n                        if (groupOffsetValue != endOffset) {\n                            laggingTopics.add(topicPartition);\n                        }\n                    }\n                    if (!laggingTopics.isEmpty()) {\n                        log.info(\"Group: {}\", groupId);\n                        for (TopicPartition topicPartition : laggingTopics) {\n                            long endOffset = endOffsets.getOrDefault(topicPartition, 0L);\n                            long groupOffset = groupOffsets.getOrDefault(topicPartition, 0L);\n                            log.info(\"Topic: {}, lag: {}\", topicPartition.topic(), endOffset - groupOffset);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            log.warn(\"Failed to load consumer group statistics for group: {}\", groupId, e);\n        }\n    }, statsConfig.getLogStatsInterval(), statsConfig.getLogStatsInterval(), TimeUnit.MILLISECONDS);\n}", "CodeBleu_score": 40.83806105970026}]}
{"instance_id": "81553181cdc8", "generation_result": [{"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, servers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 99.68740938761323}, {"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, servers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 99.68740938761323}, {"code": "protected Properties toAdminProps(){\n\t    Properties props = toProps();\n    props.put(AdminClientConfig.BOOTSTRAP_SERVERS_CONFIG, servers);\n    props.put(AdminClientConfig.RETRIES_CONFIG, retries);\n    return props;\n}", "CodeBleu_score": 99.68740938761323}]}
{"instance_id": "3c8bf3ff31b7", "generation_result": [{"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t    String scopedName = group.getScopeComponent(CHARACTER_FILTER) + SCOPE_SEPARATOR + metricName;\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\\\"task_name\\\", taskName);\n    tags.put(\\\"task_id\\\", taskId);\n    tags.put(\\\"container_id\\\", containerId);\n    tags.put(\\\"app_id\\\", appId);\n    tags.put(\\\"cluster_id\\\", appId);\n    MetricEvent metricEvent = new MetricEvent(scopedName, tags);\n    if (metric instanceof Counter) {\n        counters.put((Counter) metric, metricEvent);\n    } else if (metric instanceof Gauge) {\n        gauges.put((Gauge<?>) metric, metricEvent);\n    } else if (metric instanceof Histogram) {\n        histograms.put((Histogram) metric, metricEvent);\n    } else if (metric instanceof Meter) {\n        meters.put((Meter) metric, metricEvent);\n    } else {\n        LOG.warn(\\\"Unknown metric type: \\\" + metric.getClass());\n    }\n}", "CodeBleu_score": 64.800626390531}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t    String scopedName = group.getScopeComponent(CHARACTER_FILTER);\n    if (scopedName.length() > 0) {\n        scopedName = scopedName + SCOPE_SEPARATOR;\n    }\n    scopedName = scopedName + metricName;\n    Map<String, String> tags = new HashMap<>();\n    tags.put(\\\"job_id\\\", appId);\n    tags.put(\\\"task_name\\\", taskName);\n    tags.put(\\\"task_id\\\", taskId);\n    tags.put(\\\"container_id\\\", containerId);\n    MetricEvent event = new MetricEvent(scopedName, tags);\n    if (metric instanceof Counter) {\n        counters.put((Counter) metric, event);\n    } else if (metric instanceof Gauge) {\n        gauges.put((Gauge<?>) metric, event);\n    } else if (metric instanceof Histogram) {\n        histograms.put((Histogram) metric, event);\n    } else if (metric instanceof Meter) {\n        meters.put((Meter) metric, event);\n    } else {\n        LOG.warn(\\\"Unknown metric type for {}\\\", metricName);\n    }\n}", "CodeBleu_score": 59.5366674217253}, {"code": "public void notifyOfAddedMetric(Metric metric, String metricName, MetricGroup group){\n\t\t\tMetricEvent metricEvent = createMetricEvent(metricName, group);\n\t\tif (metric instanceof Counter) {\n\t\t\tcounters.put((Counter) metric, metricEvent);\n\t\t} else if (metric instanceof Gauge) {\n\t\t\tgauges.put((Gauge<?>) metric, metricEvent);\n\t\t} else if (metric instanceof Histogram) {\n\t\t\thistograms.put((Histogram) metric, metricEvent);\n\t\t} else if (metric instanceof Meter) {\n\t\t\tmeters.put((Meter) metric, metricEvent);\n\t\t} else {\n\t\t\tLOG.warn(\\\"Unknown metric type: \\\" + metric.getClass());\n\t\t}\n\t}", "CodeBleu_score": 64.58658741308587}]}
{"instance_id": "77c6addc9b99", "generation_result": [{"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tObject value = gauge.getValue();\n\tif (metricEvent.getFields() != null) {\n\t\tif (value instanceof Number) {\n\t\t\tmetricEvent.getFields().put(field, value);\n\t\t} else {\n\t\t\tmetricEvent.getFields().put(field, value.toString());\n\t\t}\n\t} else {\n\t\tMap<String, Object> fields = new HashMap<>();\n\t\tif (value instanceof Number) {\n\t\t\tfields.put(field, value);\n\t\t} else {\n\t\t\tfields.put(field, value.toString());\n\t\t}\n\t\tmetricEvent.setFields(fields);\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 57.17925424015564}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    if (metricEvent.getFields() != null) {\n        if (value instanceof Number) {\n            metricEvent.getFields().put(field, (Number) value);\n        } else {\n            metricEvent.getFields().put(field, String.valueOf(value));\n        }\n    } else {\n        Map<String, Object> fields = new HashMap<>();\n        if (value instanceof Number) {\n            fields.put(field, (Number) value);\n        } else {\n            fields.put(field, String.valueOf(value));\n        }\n        metricEvent.setFields(fields);\n    }\n    return metricEvent;\n}", "CodeBleu_score": 69.23188322950168}, {"code": "static MetricEvent addFields(MetricEvent metricEvent, String field, Gauge<?> gauge){\n\t\tObject value = gauge.getValue();\n\tif (metricEvent.getFields() != null) {\n\t\tif (value instanceof Number) {\n\t\t\tmetricEvent.getFields().put(field, (Number) value);\n\t\t} else {\n\t\t\tmetricEvent.getFields().put(field, value.toString());\n\t\t}\n\t} else {\n\t\tMap<String, Object> fields = new HashMap<>();\n\t\tif (value instanceof Number) {\n\t\t\tfields.put(field, (Number) value);\n\t\t} else {\n\t\t\tfields.put(field, value.toString());\n\t\t}\n\t\tmetricEvent.setFields(fields);\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 62.814644488677416}]}
{"instance_id": "a48971ffb3e9", "generation_result": [{"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t", "CodeBleu_score": 2.8929956351891004}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t    Object value = gauge.getValue();\n    Map<String, Object> fields = metricEvent.getFields();\n    if (fields != null) {\n        if (value instanceof Number) {\n            metricEvent.addField(\"currentOffsets\", (Number) value);\n        } else {\n            String[] components = value.toString().split(\",\");\n            for (String component : components) {\n                String[] keyValue = component.split(\"=\");\n                String key = keyValue[0];\n                String value = keyValue[1];\n                if (key.contains(\"currentOffsets\")) {\n                    metricEvent.addField(\"currentOffsets\", Long.valueOf(value));\n                } else if (key.contains(\"dataTimestamp\")) {\n                    metricEvent.addField(\"dataTimestamp\", Long.valueOf(value));\n                } else if (key.contains(\"committedOffsets\")) {\n                    metricEvent.addField(\"committedOffsets\", Long.valueOf(value));\n                }\n            }\n        }\n    } else {\n        Map<String, Object> eventFields = new HashMap<>();\n        if (value instanceof Number) {\n            eventFields.put(\"currentOffsets\", (Number) value);\n        } else {\n            String[] components = value.toString().split(\",\");\n            for (String component : components) {\n                String[] keyValue = component.split(\"=\");\n                String key = keyValue[0];\n                String value = keyValue[1];\n                if (key.contains(\"currentOffsets\")) {\n                    eventFields.put(\"currentOffsets\", Long.valueOf(value));\n                } else if (key.contains(\"dataTimestamp\")) {\n                    eventFields.put(\"dataTimestamp\", Long.valueOf(value));\n                } else if (key.contains(\"committedOffsets\")) {\n                    eventFields.put(\"committedOffsets\", Long.valueOf(value));\n                }\n            }\n        }\n        metricEvent.setFields(eventFields);\n    }\n    metricEvent.setTimestamp(timestamp);\n    return metricEvent;\n}", "CodeBleu_score": 35.15695381580132}, {"code": "static MetricEvent addKafkaLagMetricFields(MetricEvent metricEvent, Long timestamp, Gauge<?> gauge){\n\t\tObject value = gauge.getValue();\n\tMap<String, Object> fields = metricEvent.getFields();\n\tif (fields != null) {\n\t\tif (value instanceof Number) {\n\t\t\tmetricEvent.addField(field, (Number) value);\n\t\t} else {\n\t\t\tmetricEvent.addField(field, String.valueOf(value));\n\t\t}\n\t} else {\n\t\tMap<String, Object> eventFields = new HashMap<>();\n\t\tif (value instanceof Number) {\n\t\t\teventFields.put(field, (Number) value);\n\t\t} else {\n\t\t\teventFields.put(field, String.valueOf(value));\n\t\t}\n\t\tmetricEvent.setFields(eventFields);\n\t}\n\treturn metricEvent;\n}", "CodeBleu_score": 23.074855168020417}]}
{"instance_id": "c2080c299bb0", "generation_result": [{"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameter = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties props = buildKafkaProps(parameter);\n    FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), props);\n    if (time != 0L) {\n        Map<TopicPartition, Long> specificStartOffsets = new HashMap<>();\n        KafkaConsumer<String, String> kafkaConsumer = new KafkaConsumer<>(props);\n        List<PartitionInfo> partitionInfos = kafkaConsumer.partitionsFor(topic);\n        for (PartitionInfo partitionInfo : partitionInfos) {\n            TopicPartition topicPartition = new TopicPartition(topic, partitionInfo.partition());\n            long timestamp = time;\n            specificStartOffsets.put(topicPartition, timestamp);\n        }\n        Map<TopicPartition, OffsetAndTimestamp> offsets = kafkaConsumer.offsetsForTimes(specificStartOffsets);\n        for (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsets.entrySet()) {\n            TopicPartition topicPartition = entry.getKey();\n            long offset = entry.getValue() != null ? entry.getValue().offset() : 0;\n            KafkaTopicPartition kafkaTopicPartition = new KafkaTopicPartition(topicPartition.topic(), topicPartition.partition());\n            consumer.setStartFromSpecificOffsets(kafkaTopicPartition, offset);\n        }\n    }\n    DataStreamSource<MetricEvent> data = env.addSource(consumer);\n    return data;\n}", "CodeBleu_score": 60.88554733011789}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameter = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties properties = buildKafkaProps(parameter);\n    FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), properties);\n    if (time != 0) {\n        Map<KafkaTopicPartition, Long> specificOffsets = new HashMap<>();\n        List<PartitionInfo> partitionInfos = consumer.getPartitionsForTopic(topic);\n        for (PartitionInfo partitionInfo : partitionInfos) {\n            TopicPartition topicPartition = new TopicPartition(topic, partitionInfo.partition());\n            long offset = getOffsetByTime(topicPartition, time, properties);\n            specificOffsets.put(new KafkaTopicPartition(topic, partitionInfo.partition()), offset);\n        }\n        consumer.setStartFromSpecificOffsets(specificOffsets);\n    }\n    DataStreamSource<MetricEvent> data = env.addSource(consumer);\n    return data;\n}", "CodeBleu_score": 62.31139127923423}, {"code": "public static DataStreamSource<MetricEvent> buildSource(StreamExecutionEnvironment env, String topic, Long time) throws IllegalAccessException{\n\t    ParameterTool parameter = (ParameterTool) env.getConfig().getGlobalJobParameters();\n    Properties properties = buildKafkaProps(parameter);\n    FlinkKafkaConsumer<MetricEvent> consumer = new FlinkKafkaConsumer<>(topic, new MetricSchema(), properties);\n    if (time > 0) {\n        Map<KafkaTopicPartition, Long> specificStartOffsets = new HashMap<>();\n        KafkaConsumer<String, String> kafkaConsumer = new KafkaConsumer<>(properties);\n        List<PartitionInfo> partitionInfos = kafkaConsumer.partitionsFor(topic);\n        for (PartitionInfo partitionInfo : partitionInfos) {\n            int partitionId = partitionInfo.partition();\n            TopicPartition topicPartition = new TopicPartition(topic, partitionId);\n            long offset = kafkaConsumer.offsetsForTimes(Map.of(topicPartition, new OffsetAndTimestamp(time))).get(topicPartition).offset();\n            specificStartOffsets.put(new KafkaTopicPartition(topic, partitionId), offset);\n        }\n        consumer.setStartFromSpecificOffsets(specificStartOffsets);\n    }\n    return env.addSource(consumer);\n}", "CodeBleu_score": 60.622186604256825}]}
{"instance_id": "5e828afbe8e4", "generation_result": [{"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    props.put(GROUP_ID_CONFIG, parameterTool.get(PropertiesConstants.KAFKA_GROUP_ID, DEFAULT_KAFKA_GROUP_ID) + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(parameterTool.get(PropertiesConstants.METRICS_TOPIC));\n    Map<TopicPartition, Long> timestampToSearch = new HashMap<>();\n    for (PartitionInfo partitionInfo : partitionInfos) {\n        timestampToSearch.put(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()), time);\n    }\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(timestampToSearch);\n    consumer.close();\n    Map<KafkaTopicPartition, Long> partitionOffset = new HashMap<>();\n    for (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsets.entrySet()) {\n        partitionOffset.put(new KafkaTopicPartition(entry.getKey().topic(), entry.getKey().partition()), entry.getValue().offset());\n    }\n    return partitionOffset;\n}", "CodeBleu_score": 60.70356233874769}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    String groupId = parameterTool.get(PropertiesConstants.KAFKA_GROUP_ID, DEFAULT_KAFKA_GROUP_ID) + time;\n    props.put(PropertiesConstants.KAFKA_GROUP_ID, groupId);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(parameterTool.getRequired(PropertiesConstants.METRICS_TOPIC));\n    Map<KafkaTopicPartition, Long> partitionOffset = new HashMap<>();\n    for (PartitionInfo partitionInfo : partitionInfos) {\n        TopicPartition topicPartition = new TopicPartition(parameterTool.getRequired(PropertiesConstants.METRICS_TOPIC), partitionInfo.partition());\n        partitionOffset.put(new KafkaTopicPartition(topicPartition), time);\n    }\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(partitionOffset);\n    consumer.close();\n    Map<KafkaTopicPartition, Long> result = new HashMap<>();\n    for (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsets.entrySet()) {\n        result.put(new KafkaTopicPartition(entry.getKey()), entry.getValue().offset());\n    }\n    return result;\n}", "CodeBleu_score": 54.600193486992744}, {"code": "private static Map<KafkaTopicPartition, Long> buildOffsetByTime(Properties props, ParameterTool parameterTool, Long time){\n\t    props.put(GROUP_ID_CONFIG, parameterTool.get(PropertiesConstants.KAFKA_GROUP_ID, DEFAULT_KAFKA_GROUP_ID) + time);\n    KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n    List<PartitionInfo> partitionInfos = consumer.partitionsFor(parameterTool.get(PropertiesConstants.METRICS_TOPIC));\n    Map<TopicPartition, Long> timestampToSearch = new HashMap<>(partitionInfos.size());\n    for (PartitionInfo partitionInfo : partitionInfos) {\n        timestampToSearch.put(new TopicPartition(partitionInfo.topic(), partitionInfo.partition()), time);\n    }\n    Map<TopicPartition, OffsetAndTimestamp> offsets = consumer.offsetsForTimes(timestampToSearch);\n    Map<KafkaTopicPartition, Long> partitionOffset = new HashMap<>(offsets.size());\n    for (Map.Entry<TopicPartition, OffsetAndTimestamp> entry : offsets.entrySet()) {\n        TopicPartition topicPartition = entry.getKey();\n        Long offset = entry.getValue() == null ? null : entry.getValue().offset();\n        partitionOffset.put(new KafkaTopicPartition(topicPartition.topic(), topicPartition.partition()), offset);\n    }\n    consumer.close();\n    return partitionOffset;\n}", "CodeBleu_score": 52.84659264027947}]}
{"instance_id": "28da89f56f67", "generation_result": [{"code": "public static void writeToKafka() throws InterruptedException{\n\t        Properties props = new Properties();\n        props.put(\\\"bootstrap.servers\\\", broker_list);\n        props.put(\\\"key.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); //key \u5e8f\u5217\u5316\n        props.put(\\\"value.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); //value \u5e8f\u5217\u5316\n        KafkaProducer producer = new KafkaProducer<String, String>(props);\n\n        MetricEvent metric = new MetricEvent();\n        metric.setTimestamp(System.currentTimeMillis());\n        metric.setName(\\\"mem\\\");\n        Map<String, String> tags = new HashMap<>();\n        Map<String, Object> fields = new HashMap<>();\n\n        tags.put(\\\"cluster\\\", \\\"zhisheng\\\");\n        tags.put(\\\"host_ip\\\", \\\"127.0.0.1\\\");\n\n        fields.put(\\\"used_percent\\\", 90d);\n        fields.put(\\\"max\\\", 2724487344L);\n        fields.put(\\\"used\\\", 1724487344L);\n        fields.put(\\\"init\\\", 2724487344L);\n\n        metric.setTags(tags);\n        metric.setFields(fields);\n\n        ProducerRecord record = new ProducerRecord<String, String>(topic, null, null, GsonUtil.toJson(metric));\n        producer.send(record);\n        System.out.println(\\\"\u53d1\u9001\u6570\u636e: \\\" + GsonUtil.toJson(metric));\n        producer.flush();\n    }", "CodeBleu_score": 42.55968763259278}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t        Properties props = new Properties();\n        props.put(\\\"bootstrap.servers\\\", broker_list);\n        props.put(\\\"key.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); //key \u5e8f\u5217\u5316\n        props.put(\\\"value.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); //value \u5e8f\u5217\u5316\n        KafkaProducer producer = new KafkaProducer<String, String>(props);\n\n        MetricEvent metric = new MetricEvent();\n        metric.setTimestamp(System.currentTimeMillis());\n        metric.setName(\\\"mem\\\");\n        Map<String, String> tags = new HashMap<>();\n        Map<String, Object> fields = new HashMap<>();\n\n        tags.put(\\\"cluster\\\", \\\"zhisheng\\\");\n        tags.put(\\\"host_ip\\\", \\\"127.0.0.1\\\");\n\n        fields.put(\\\"used_percent\\\", 90d);\n        fields.put(\\\"max\\\", 27244873728d);\n        fields.put(\\\"used\\\", 17244873728d);\n        fields.put(\\\"init\\\", 27244873728d);\n\n        metric.setTags(tags);\n        metric.setFields(fields);\n\n        ProducerRecord record = new ProducerRecord<String, String>(topic, null, null, GsonUtil.toJson(metric));\n        producer.send(record);\n        System.out.println(\\\"\u53d1\u9001\u6570\u636e: \\\" + GsonUtil.toJson(metric));\n        producer.flush();\n    }", "CodeBleu_score": 42.56893400858887}, {"code": "public static void writeToKafka() throws InterruptedException{\n\t        Properties props = new Properties();\n        props.put(\\\"bootstrap.servers\\\", broker_list);\n        props.put(\\\"key.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); //key \u5e8f\u5217\u5316\n        props.put(\\\"value.serializer\\\", \\\"org.apache.kafka.common.serialization.StringSerializer\\\"); //value \u5e8f\u5217\u5316\n        KafkaProducer producer = new KafkaProducer<String, String>(props);\n\n        MetricEvent metric = new MetricEvent();\n        metric.setTimestamp(System.currentTimeMillis());\n        metric.setName(\\\"mem\\\");\n        Map<String, String> tags = new HashMap<String, String>();\n        Map<String, Object> fields = new HashMap<String, Object>();\n\n        tags.put(\\\"cluster\\\", \\\"zhisheng\\\");\n        tags.put(\\\"host_ip\\\", \\\"127.0.0.1\\\");\n\n        fields.put(\\\"used_percent\\\", 90d);\n        fields.put(\\\"max\\\", 27244873d);\n        fields.put(\\\"used\\\", 17244873d);\n        fields.put(\\\"init\\\", 27244873d);\n\n        metric.setTags(tags);\n        metric.setFields(fields);\n\n        ProducerRecord record = new ProducerRecord<String, String>(topic, null, null, GsonUtil.toJson(metric));\n        producer.send(record);\n        System.out.println(\\\"\u53d1\u9001\u6570\u636e: \\\" + GsonUtil.toJson(metric));\n        producer.flush();\n\n    }", "CodeBleu_score": 41.313786951572574}]}
{"instance_id": "14bffe09c25a", "generation_result": [{"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t", "CodeBleu_score": 4.214743313165087}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    String loggerName = event.getLoggerName();\n    String level = event.getLevel().name();\n    if (this.level.contains(level) && !loggerName.contains(\"xxx\")) {\n        try {\n            String log = (String) getLayout().toSerializable(event);\n            String messageId = UUID.randomUUID().toString();\n            LogEvent logEvent = new LogEvent();\n            logEvent.setAppId(appId);\n            logEvent.setContainerId(containerId);\n            logEvent.setContainerType(containerType);\n            logEvent.setNodeIp(nodeIp);\n            logEvent.setTaskId(taskId);\n            logEvent.setTaskName(taskName);\n            logEvent.setMessageId(messageId);\n            logEvent.setSource(source);\n            logEvent.setLevel(level);\n            logEvent.setLoggerName(loggerName);\n            logEvent.setThreadName(event.getThreadName());\n            logEvent.setMessage(log);\n            logEvent.setCreateTime(event.getTimeMillis());\n            logEvent.setThrowable(ExceptionUtil.getStackTrace(event.getThrown()));\n            String json = JacksonUtil.toJson(logEvent);\n            producer.send(new ProducerRecord<>(topic, messageId, json));\n        } catch (JsonProcessingException e) {\n            log.warn(\\\"Log4j2 KafkaAppender json process exception\\\", e);\n        } catch (Exception e) {\n            log.warn(\\\"Log4j2 KafkaAppender send kafka message exception\\\", e);\n        }\n    }\n}", "CodeBleu_score": 37.31566541780676}, {"code": "public void append(org.apache.logging.log4j.core.LogEvent event){\n\t    try {\n        if (level != null && !level.contains(event.getLevel().name())) {\n            return;\n        }\n        if (event.getLoggerName().contains(\"xxx\")) {\n            return;\n        }\n\n        String message = new String(getLayout().toByteArray(event));\n        LogEvent logEvent = new LogEvent();\n        logEvent.setTimestamp(event.getTimeMillis());\n        logEvent.setMessage(message);\n        logEvent.setLevel(event.getLevel().name());\n        logEvent.setSource(source);\n        logEvent.setAppId(appId);\n        logEvent.setContainerId(containerId);\n        logEvent.setContainerType(containerType);\n        logEvent.setTaskName(taskName);\n        logEvent.setTaskId(taskId);\n        logEvent.setNodeIp(nodeIp);\n\n        String json = JacksonUtil.toJson(logEvent);\n        producer.send(new ProducerRecord<>(topic, json));\n    } catch (Exception e) {\n        log.warn(\\\"Failed to send log event to Kafka topic: {}\\\", ExceptionUtil.getExceptionDetail(e));\n    }\n}", "CodeBleu_score": 50.463218414242114}]}
{"instance_id": "a9e0786fb5c1", "generation_result": [{"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, validMethod := range ValidTopicSuffixMethods {\n\t\tif validMethod == method {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\treturn fmt.Errorf(\"unknown topic suffix method %s\", method)\n}", "CodeBleu_score": 88.71244717480997}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, validMethod := range ValidTopicSuffixMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\n\treturn fmt.Errorf(\"unknown topic suffix method %s\", method)\n}", "CodeBleu_score": 93.19931120123317}, {"code": "func ValidateTopicSuffixMethod(method string) error{\n\t\tfor _, validMethod := range ValidTopicSuffixMethods {\n\t\tif method == validMethod {\n\t\t\treturn nil\n\t\t}\n\t}\n\treturn fmt.Errorf(\"unknown topic suffix method %s\", method)\n}", "CodeBleu_score": 93.19931120123317}]}
{"instance_id": "9b88d720d48a", "generation_result": [{"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif value, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn value, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tuuid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", fmt.Errorf(\"could not generate random UUID: %w\", err)\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 75.8050056574609}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif value, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn value, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tuuid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", fmt.Errorf(\"generating random UUID failed: %w\", err)\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 75.83844108443996}, {"code": "func (k *Kafka) routingKey(metric telegraf.Metric) (string, error) {\n\t\tif k.RoutingTag != \"\" {\n\t\tif value, ok := metric.GetTag(k.RoutingTag); ok {\n\t\t\treturn value, nil\n\t\t}\n\t}\n\n\tif k.RoutingKey == \"random\" {\n\t\tuuid, err := uuid.NewV4()\n\t\tif err != nil {\n\t\t\treturn \"\", fmt.Errorf(\"generating random UUID failed: %w\", err)\n\t\t}\n\t\treturn uuid.String(), nil\n\t}\n\n\treturn k.RoutingKey, nil\n}", "CodeBleu_score": 75.83844108443996}]}
{"instance_id": "dc35e80e7f8d", "generation_result": [{"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]regexp.Regexp, len(k.TopicRegexps))\n\tfor i, reg := range k.TopicRegexps {\n\t\tre, err := regexp.Compile(reg)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\\\"failed to compile topic regexp %q: %w\\\", reg, err)\n\t\t}\n\t\tk.regexps[i] = *re\n\t}\n\treturn nil\n}", "CodeBleu_score": 55.981290818205544}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]regexp.Regexp, len(k.TopicRegexps))\n\tfor i, r := range k.TopicRegexps {\n\t\tre, err := regexp.Compile(r)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\\\"invalid topic regexp %q: %w\\\", r, err)\n\t\t}\n\t\tk.regexps[i] = *re\n\t}\n\treturn nil\n}", "CodeBleu_score": 58.57083201208367}, {"code": "func (k *KafkaConsumer) compileTopicRegexps() error{\n\t\tk.regexps = make([]regexp.Regexp, len(k.TopicRegexps))\n\tfor i, r := range k.TopicRegexps {\n\t\tre, err := regexp.Compile(r)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\\\"error compiling regexp %q: %w\\\", r, err)\n\t\t}\n\t\tk.regexps[i] = *re\n\t}\n\treturn nil\n}", "CodeBleu_score": 58.94692173461616}]}
{"instance_id": "daf09ba144b2", "generation_result": [{"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t", "CodeBleu_score": 2.4709639190937516}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\n\tmsg, ok := h.undelivered[track.ID()]\n\tif !ok {\n\t\treturn\n\t}\n\n\tdelete(h.undelivered, track.ID())\n\tmsg.session.MarkMessage(msg.message, \\\"\\\")\n\th.sem.release()\n}", "CodeBleu_score": 58.048674149301426}, {"code": "func (h *ConsumerGroupHandler) onDelivery(track telegraf.DeliveryInfo){\n\t\th.mu.Lock()\n\tdefer h.mu.Unlock()\n\n\tmsg, ok := h.undelivered[track.ID()]\n\tif !ok {\n\t\th.log.Errorf(\\\"message with ID %d not found\\\", track.ID())\n\t\treturn\n\t}\n\n\tif msg.session.Commit() != nil {\n\t\th.log.Errorf(\\\"commit message with ID %d failed\\\", track.ID())\n\t\treturn\n\t}\n\n\tdelete(h.undelivered, track.ID())\n\th.sem.release()\n}", "CodeBleu_score": 67.68542090629384}]}
{"instance_id": "8ecf2a1efead", "generation_result": [{"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx := session.Context()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tdefault:\n\t\t}\n\n\t\tif err := h.Reserve(ctx); err != nil {\n\t\t\treturn err\n\t\t}\n\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase msg, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif err := h.Handle(session, msg); err != nil {\n\t\t\t\th.log.Errorf(\\\"Failed to handle message: %w\\\", err)\n\t\t\t}\n\t\t}\n\t}\n\treturn nil\n}", "CodeBleu_score": 68.33265118274538}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx := session.Context()\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase msg, ok := <-claim.Messages():\n\t\t\tif !ok {\n\t\t\t\treturn nil\n\t\t\t}\n\t\t\tif err := h.Handle(session, msg); err != nil {\n\t\t\t\th.log.Errorf(\\\"Error handling message: %w\\\", err)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 62.6705334964192}, {"code": "func (h *ConsumerGroupHandler) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error{\n\t\tctx := session.Context()\n\n\tfor {\n\t\tselect {\n\t\tcase <-ctx.Done():\n\t\t\treturn ctx.Err()\n\t\tcase <-claim.Context().Done():\n\t\t\treturn nil\n\t\tcase msg := <-claim.Messages():\n\t\t\tif err := h.Handle(session, msg); err != nil {\n\t\t\t\th.log.Errorf(\\\"Error handling message: %s\\\", err)\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 55.75916897837649}]}
{"instance_id": "eba9dafa99ab", "generation_result": [{"code": "def validateLogkafkaId(logkafka_id: String){\n\t    checkCondition(logkafka_id.length > 0, LogkafkaIdEmpty)\n    checkCondition(!logkafka_id.equals(\".\") && !logkafka_id.equals(\"..\"), InvalidLogkafkaId(logkafka_id))\n    checkCondition(logkafka_id.length <= maxNameLength, InvalidLogkafkaIdLength(logkafka_id))\n    rgx.findFirstIn(logkafka_id) match {\n      case Some(t) =>\n        checkCondition(t.equals(logkafka_id), IllegalCharacterInLogkafkaId(logkafka_id))\n      case None =>\n        checkCondition(false, IllegalCharacterInLogkafkaId(logkafka_id))\n    }\n  }", "CodeBleu_score": 78.54270415700026}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t    checkCondition(logkafka_id.length > 0, LogkafkaIdEmpty)\n    checkCondition(!logkafka_id.equals(\".\"), LogkafkaIdIsDot)\n    checkCondition(!logkafka_id.equals(\"..\"), LogkafkaIdIsDotDot)\n    checkCondition(logkafka_id.length <= maxNameLength, InvalidLogkafkaIdLength)\n    rgx.findFirstIn(logkafka_id) match {\n      case Some(t) =>\n        checkCondition(t.equals(logkafka_id), IllegalCharacterInLogkafkaId(logkafka_id))\n      case None =>\n        checkCondition(false, IllegalCharacterInLogkafkaId(logkafka_id))\n    }\n  }", "CodeBleu_score": 83.26998633117164}, {"code": "def validateLogkafkaId(logkafka_id: String){\n\t    checkCondition(logkafka_id.length > 0, LogkafkaIdEmpty)\n    checkCondition(logkafka_id.length <= maxNameLength, InvalidLogkafkaIdLength)\n    rgx.findFirstIn(logkafka_id) match {\n      case Some(t) =>\n        checkCondition(t.equals(logkafka_id), IllegalCharacterInLogkafkaId(logkafka_id))\n      case None =>\n        checkCondition(false, IllegalCharacterInLogkafkaId(logkafka_id))\n    }\n    checkCondition(!logkafka_id.matches(\\\"^\\\\.\\\\.?$\\\"), LogkafkaIdIsReserved(logkafka_id))\n  }", "CodeBleu_score": 77.12721918950331}]}
{"instance_id": "45d5aefd3f6c", "generation_result": [{"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val future = (kafkaManagerActor ? msg).mapTo[ApiError \\/ Output]\n    future.map {\n      case -\\/(err) => -\\/(err)\n      case \\/-(output) =>\n        try {\n          \\/-(fn(output))\n        } catch {\n          case e: Exception =>\n            warn(s\\\"Exception while processing message $msg : $e\\\", e)\n\"\n            -\\/(ApiError(s\\\"Exception while processing message $msg : $e\\\"))\n        }\n    }\n  }", "CodeBleu_score": 27.12651848186643}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val f = kafkaManagerActor ? msg\n    f.map(_.asInstanceOf[Output]).map(fn).recoverWith {\n      case e: Exception =>\n        warn(e.getMessage, e)\n        Future.successful(ApiError.internalServerError(e.getMessage).left)\n    }\n  }", "CodeBleu_score": 19.986586502623858}, {"code": "  private[this] def tryWithKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => FOutput)\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    val promise = Promise[ApiError \\/ FOutput]()\n    kafkaManagerActor !? msg\n    implicit val ec = apiExecutionContext\n    context.system.scheduler.scheduleOnce(apiTimeout.duration, kafkaManagerActor, KafkaManagerActor.Shutdown)\n    val f = promise.future\n    f.onComplete {\n      case Success(Right(output)) => promise.success(Right(fn(output)))\n      case Success(Left(error)) =>\n        warn(s\\\"Kafka manager actor failed: $error\\\")\n        promise.success(Left(error))\n      case Failure(ex) =>\n        warn(s\\\"Kafka manager actor failed: $ex\\\")\n        promise.success(Left(ApiError(ex)))\n    }\n    f\n  }", "CodeBleu_score": 26.635429474747756}]}
{"instance_id": "a535ce861222", "generation_result": [{"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val ec = apiExecutionContext\n    system.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        fn(o)\n    }.recover { case t: Throwable =>\n      error(s\"Failed on input : $msg\", t)\n      -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 78.83398078166512}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val ec = apiExecutionContext\n    system.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        fn(o)\n    }.recover { case t: Throwable =>\n      error(s\"Failed on input : $msg\", t)\n      -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 78.83398078166512}, {"code": "  private[this] def withKafkaManagerActor[Input, Output, FOutput](msg: Input)\n    (fn: Output => Future[ApiError \\/ FOutput])\n    (implicit tag: ClassTag[Output]): Future[ApiError \\/ FOutput] ={\n\t    implicit val ec = apiExecutionContext\n    system.actorSelection(kafkaManagerActor).ask(msg).map {\n      case err: ActorErrorResponse =>\n        error(s\"Failed on input : $msg\")\n        -\\/(ApiError.from(err))\n      case o: Output =>\n        fn(o)\n    }.recover { case t: Throwable =>\n      error(s\"Failed on input : $msg\", t)\n      -\\/(ApiError.fromThrowable(t))\n    }\n  }", "CodeBleu_score": 78.83398078166512}]}
{"instance_id": "ad37d3914acc", "generation_result": [{"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val cmd = KMClusterCommandRequest(clusterName, KMPreferredLeaderElection(topics))\n    withKafkaManagerActor(cmd) { result: KMCommandResult =>\n      result.result match {\n        case Success(clusterContext) => Future.successful(clusterContext.asRight)\n        case Failure(th) => Future.successful(ApiError.fromThrowable(th).asLeft)\n      }\n    }\n  }", "CodeBleu_score": 25.26475134400572}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    tryWithKafkaManagerActor(KMClusterCommandRequest(clusterName, PreferredLeaderElection(topics))) { result =>\n      result.result.get\n    }\n  }", "CodeBleu_score": 23.449368781958242}, {"code": "  def runPreferredLeaderElection(clusterName: String, topics: Set[String]): Future[ApiError \\/ ClusterContext] ={\n\t    val clusterCommandRequest = KMClusterCommandRequest(clusterName, topics)\n    withKafkaManagerActor(KMRunPreferredLeaderElection(clusterCommandRequest)) { result: KMCommandResult =>\n      result.result match {\n        case Success(clusterContext) =>\n          Future.successful(\\/-(clusterContext))\n        case Failure(error) =>\n          Future.successful(-\\/(ApiError.fromThrowable(error)))\n      }\n    }\n  }", "CodeBleu_score": 26.616469986452845}]}
{"instance_id": "3ecdb2c1534f", "generation_result": [{"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  implicit val ec = apiExecutionContext\n  withKafkaManagerActor(KMGetTopics(clusterName)) { result: Future[KMCommandResult] =>\n    result.map {\n      case KMGetTopicsResult(topics) =>\n        runPreferredLeaderElection(clusterName, topics.map(_.name).toSet)\n      case err: KMCommandResult => -\\/(err.error)\n    }\n  }\n}", "CodeBleu_score": 55.602624348867494}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t", "CodeBleu_score": 3.006318370370258}, {"code": "private def runPreferredLeaderElectionWithAllTopics(clusterName: String) ={\n\t  implicit val ec = apiExecutionContext\n  withKafkaManagerActor(KMGetTopics(clusterName)) { result: Future[CMCommandResult] =>\n    result.map(cmr => toDisjunction(cmr.result)).flatMap {\n      case -\\/(error) =>\n        Future.successful(-\\/(error))\n      case \\/-(topics) =>\n        runPreferredLeaderElection(clusterName, topics)\n    }\n  }\n}", "CodeBleu_score": 57.72496309117212}]}
{"instance_id": "5955ade118b9", "generation_result": [{"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t    implicit val ec = apiExecutionContext\n    withKafkaManagerActor(KMClusterCommandRequest(\n      clusterName,\n      CMManualPartitionAssignments(assignments)\n    )) { result: Future[CMCommandResult] =>\n      result.map(cmr => toDisjunction(cmr.result)).collect {\n        case -\\/(e) => e\n      }\n    }.map { errors =>\n      if (errors.isEmpty)\n        \\/-(())\n      else\n        -\\/(errors)\n    }\n  }", "CodeBleu_score": 43.30375326768369}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t    implicit val ec = apiExecutionContext\n    withKafkaManagerActor(\n      KMClusterCommandRequest(\n        clusterName,\n        CMManualPartitionAssignments(assignments)\n      )\n    ) { result: Future[CMCommandResult] =>\n      result.map(cmr => toDisjunction(cmr.result))\n    }\n  }", "CodeBleu_score": 25.943112971521074}, {"code": "def manualPartitionAssignments(clusterName: String,\n                                 assignments: List[(String, List[(Int, List[Int])])]) = {\n\t    implicit val ec = apiExecutionContext\n\n    withKafkaManagerActor(\n      KMClusterCommandRequest(\n        clusterName,\n        CMManualPartitionAssignments(assignments)\n      )\n    ) { result: Future[CMCommandResult] =>\n      result.map(cmr => toDisjunction(cmr.result))\n    }\n  }", "CodeBleu_score": 25.943112971521074}]}
{"instance_id": "26fbc2ba1d28", "generation_result": [{"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    try {\n        DescribeClusterResult describeClusterResult = admin.describeCluster(kafkaDescribeClusterTimeout);\n        Collection<Node> nodes = describeClusterResult.nodes().get(kafkaDescribeClusterTimeout.toMillis(), TimeUnit.MILLISECONDS);\n        if (nodes.isEmpty()) {\n            throw new ConnectException(\n                    \"Unable to obtain the configuration of the Kafka brokers at \" + producerConfig.getString(BOOTSTRAP_SERVERS)\n                            + \" within \" + kafkaDescribeClusterTimeout.toMillis() + \" milliseconds.\");\n        }\n        Node node = nodes.iterator().next();\n        ConfigResource configResource = new ConfigResource(ConfigResource.Type.BROKER, node.idString());\n        DescribeConfigsResult describeConfigsResult = admin.describeConfigs(Collections.singleton(configResource));\n        Map<ConfigResource, Config> configs = describeConfigsResult.all().get(kafkaDescribeClusterTimeout.toMillis(), TimeUnit.MILLISECONDS);\n        if (configs.isEmpty()) {\n            throw new ConnectException(\n                    \"Unable to obtain the configuration of the Kafka broker at \" + node.host() + \":\" + node.port()\n                            + \" within \" + kafkaDescribeClusterTimeout.toMillis() + \" milliseconds.\");\n        }\n        return configs.get(configResource);\n    }\n    catch (ExecutionException | InterruptedException e) {\n        throw new ConnectException(\n                \"Unable to obtain the configuration of the Kafka brokers at \" + producerConfig.getString(BOOTSTRAP_SERVERS)\n                        + \" within \" + kafkaDescribeClusterTimeout.toMillis() + \" milliseconds.\", e);\n    }\n}", "CodeBleu_score": 49.18054224081435}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    DescribeClusterResult describeClusterResult = admin.describeCluster(new DescribeClusterOptions().timeoutMs(kafkaDescribeTimeout.toMillis()));\n    List<Node> nodes = describeClusterResult.nodes().get(kafkaDescribeTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\n                \"Unable to obtain the Kafka broker configuration from the brokers at \" + producerConfig.getString(BOOTSTRAP_SERVERS) + \" within \" + kafkaDescribeTimeout.toMillis() + \" ms\");\n    }\n    Node node = nodes.get(0);\n    DescribeConfigsResult describeConfigsResult = admin.describeConfigs(Collections.singletonList(node.idString()));\n    Map<ConfigResource, Config> configs = describeConfigsResult.all().get(kafkaDescribeTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    if (configs.isEmpty()) {\n        throw new ConnectException(\n                \"Unable to obtain the Kafka broker configuration from the brokers at \" + producerConfig.getString(BOOTSTRAP_SERVERS) + \" within \" + kafkaDescribeTimeout.toMillis() + \" ms\");\n    }\n    return configs.get(new ConfigResource(ConfigResource.Type.BROKER, node.idString()));\n}", "CodeBleu_score": 51.31859551968336}, {"code": "private Config getKafkaBrokerConfig(AdminClient admin) throws Exception{\n\t    DescribeClusterResult describeClusterResult = admin.describeCluster(kafkaDescribeClusterTimeout);\n    Collection<Node> nodes = describeClusterResult.nodes().get(kafkaDescribeClusterTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    if (nodes.isEmpty()) {\n        throw new ConnectException(\"Unable to obtain the Kafka broker configuration due to no available nodes within the specified timeout\");\n    }\n    Node node = nodes.iterator().next();\n    ConfigResource configResource = new ConfigResource(ConfigResource.Type.BROKER, node.idString());\n    DescribeConfigsResult describeConfigsResult = admin.describeConfigs(Collections.singleton(configResource), kafkaDescribeClusterTimeout);\n    Map<ConfigResource, Config> configs = describeConfigsResult.all().get(kafkaDescribeClusterTimeout.toMillis(), TimeUnit.MILLISECONDS);\n    if (configs.isEmpty()) {\n        throw new ConnectException(\"Unable to obtain the Kafka broker configuration due to no configurations received within the specified timeout\");\n    }\n    return configs.get(configResource);\n}", "CodeBleu_score": 57.61023634950708}]}
{"instance_id": "adf40b68c93e", "generation_result": [{"code": "private static Validator forKafka(final Validator validator){\n\t    return (s, name, provider) -> {\n        final String schemaHistory = provider.get(SCHEMA_HISTORY_CONFIG);\n        if (KafkaSchemaHistory.class.getName().equals(schemaHistory)) {\n            return validator.validate(s, name, provider);\n        }\n        return Collections.emptyList();\n    };\n}", "CodeBleu_score": 46.95408414634629}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (config, name, provider) -> {\n        String schemaHistory = config.getString(SCHEMA_HISTORY_INTERVAL_MS_CONFIG);\n        if (schemaHistory.equals(KafkaSchemaHistory.class.getName())) {\n            return validator.validate(config, name, provider);\n        }\n        return Collections.emptyList();\n    };\n}", "CodeBleu_score": 44.20963428065117}, {"code": "private static Validator forKafka(final Validator validator){\n\t    return (s, name, provider) -> {\n        if (s.schemaHistory() == KafkaSchemaHistory.class) {\n            return validator.validate(s, name, provider);\n        }\n        return Collections.emptyList();\n    };\n}", "CodeBleu_score": 29.932088132117567}]}
{"instance_id": "07ff1ca41c93", "generation_result": [{"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    Version version = parseVersion(AppInfoParser.getVersion());\n    if (version.compareTo(TOPIC_CREATION_KAFKA_VERSION) >= 0) {\n        Boolean isTopicCreationEnabled = (Boolean) config.get(Herder.TOPIC_CREATION_ENABLE_CONFIG);\n        return isTopicCreationEnabled == null || isTopicCreationEnabled;\n    }\n    return false;\n}", "CodeBleu_score": 44.675348251461266}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    Version kafkaConnectVersion = parseVersion(AppInfoParser.getVersion());\n    Boolean isTopicCreationEnabled = (Boolean) config.getOrDefault(\"topic.creation.enable\", true);\n    return kafkaConnectVersion.compareTo(TOPIC_CREATION_KAFKA_VERSION) >= 0 && isTopicCreationEnabled;\n}", "CodeBleu_score": 48.0378031991246}, {"code": "private synchronized Boolean isTopicCreationEnabled(Map<String, ?> config){\n\t    Version kafkaConnectVersion = parseVersion(AppInfoParser.getVersion());\n    Boolean isTopicCreationEnabled = (Boolean) config.getOrDefault(\"topic.creation.enable\", true);\n    return kafkaConnectVersion.compareTo(TOPIC_CREATION_KAFKA_VERSION) >= 0 && isTopicCreationEnabled;\n}", "CodeBleu_score": 48.0378031991246}]}
{"instance_id": "e2cc420e1e63", "generation_result": [{"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    final String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n        throw new DebeziumException(\"Missing mandatory configuration option '\" + CLIENT_ID_CONFIG + \"'\");\n    }\n    final Map<String, Object> adminProps = new HashMap<>(config);\n    adminProps.put(DistributedConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"\");\n    adminProps.put(DistributedConfig.OFFSET_FLUSH_INTERVAL_MS_CONFIG, 1000);\n    final SharedTopicAdmin sharedAdmin = new SharedTopicAdmin(adminProps);\n    return new KafkaOffsetBackingStore(sharedAdmin, clientId, converterForOffsetStore());\n}", "CodeBleu_score": 46.30412893396397}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    final String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n        throw new DebeziumException(\"The '\" + CLIENT_ID_CONFIG + \"' configuration property is required\");\n    }\n    final Map<String, Object> adminProps = new HashMap<>(config);\n    adminProps.put(DistributedConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, null);\n    final SharedTopicAdmin sharedAdmin = new SharedTopicAdmin(adminProps);\n    return new KafkaOffsetBackingStore(sharedAdmin, clientId, converterForOffsetStore());\n}", "CodeBleu_score": 42.44994868785614}, {"code": "public static final KafkaOffsetBackingStore kafkaOffsetBackingStore(Map<String, String> config){\n\t    final String clientId = config.get(CLIENT_ID_CONFIG);\n    if (clientId == null) {\n        throw new DebeziumException(\"Configuration property \\\"\" + CLIENT_ID_CONFIG + \"\\\" is mandatory\");\n    }\n    final Map<String, Object> adminProps = new HashMap<>(config);\n    adminProps.put(DistributedConfig.OFFSET_STORAGE_FILE_FILENAME_CONFIG, \"\");\n    adminProps.put(DistributedConfig.OFFSET_STORAGE_TOPIC_CONFIG, \"\");\n    final SharedTopicAdmin sharedAdmin = new SharedTopicAdmin(adminProps);\n    return new KafkaOffsetBackingStore(sharedAdmin, clientId, converterForOffsetStore());\n}", "CodeBleu_score": 44.646888963992126}]}
{"instance_id": "4ecb2279231e", "generation_result": [{"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (!node.isObject()) {\n        throw new IllegalArgumentException(\"Key must be a JSON object\");\n    }\n\n    JsonNode payload = node.get(PAYLOAD_FIELD);\n    if (payload != null) {\n        node = payload;\n    }\n\n    Iterator<String> fieldNames = node.fieldNames();\n    if (fieldNames.hasNext()) {\n        String fieldName = fieldNames.next();\n        if (fieldNames.hasNext()) {\n            return reader.readValue(node);\n        }\n        else {\n            return reader.readValue(node.get(fieldName));\n        }\n    }\n    else {\n        return null;\n    }\n}", "CodeBleu_score": 49.988004840733154}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (node.isObject()) {\n        JsonNode payload = node.get(PAYLOAD_FIELD);\n        if (payload != null) {\n            node = payload;\n        }\n    }\n\n    Iterator<String> fieldNames = node.fieldNames();\n    if (fieldNames.hasNext()) {\n        String fieldName = fieldNames.next();\n        if (fieldNames.hasNext()) {\n            return reader.readValue(node);\n        }\n        else {\n            return reader.readValue(node.get(fieldName));\n        }\n    }\n    else {\n        return null;\n    }\n}", "CodeBleu_score": 48.26933430431985}, {"code": "private T readKey(JsonNode node) throws IOException{\n\t    if (!node.isObject()) {\n        throw new IllegalArgumentException(\"Key must be an object\");\n    }\n\n    JsonNode payload = node.get(PAYLOAD_FIELD);\n    if (payload != null) {\n        node = payload;\n    }\n\n    if (node.size() == 1) {\n        Iterator<String> fieldNames = node.fieldNames();\n        String fieldName = fieldNames.next();\n\n        return reader.readValue(node.get(fieldName));\n    }\n    else {\n        return reader.readValue(node);\n    }\n}", "CodeBleu_score": 50.31860813915288}]}
{"instance_id": "b8ba1bfc7b5e", "generation_result": [{"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = delegate.topicNameFor(id, prefix, delimiter);\n    StringBuilder sanitizedTopicName = new StringBuilder();\n    boolean needsSanitization = false;\n    for (int i = 0; i < topicName.length(); i++) {\n        char c = topicName.charAt(i);\n        if (Character.isLetterOrDigit(c)) {\n            sanitizedTopicName.append(c);\n        } else {\n            sanitizedTopicName.append(REPLACEMENT_CHAR);\n            needsSanitization = true;\n        }\n    }\n    if (needsSanitization) {\n        LOGGER.warn(\"Topic name '{}' contains invalid characters. Sanitized topic name is '{}'.\", topicName, sanitizedTopicName);\n    }\n    return sanitizedTopicName.toString();\n}", "CodeBleu_score": 56.66140908731565}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t    String topicName = delegate.topicNameFor(id, prefix, delimiter);\n    StringBuilder sanitizedTopicName = new StringBuilder();\n    boolean modified = false;\n    for (int i = 0; i < topicName.length(); i++) {\n        char c = topicName.charAt(i);\n        if (Character.isLetterOrDigit(c) || c == '.' || c == '_' || c == '-') {\n            sanitizedTopicName.append(c);\n        } else {\n            sanitizedTopicName.append(REPLACEMENT_CHAR);\n            modified = true;\n        }\n    }\n    if (modified) {\n        LOGGER.warn(\"Topic name '{}' contains invalid characters, replacing with '{}'\", topicName, sanitizedTopicName.toString());\n        return sanitizedTopicName.toString();\n    }\n    return topicName;\n}", "CodeBleu_score": 58.19339430349936}, {"code": "public String topicNameFor(I id, String prefix, String delimiter){\n\t        String topicName = delegate.topicNameFor(id, prefix, delimiter);\n        StringBuilder sanitizedTopicName = new StringBuilder();\n        boolean changed = false;\n        for (int i = 0; i < topicName.length(); i++) {\n            char c = topicName.charAt(i);\n            if (isValidTopicNameChar(c)) {\n                sanitizedTopicName.append(c);\n            }\n            else {\n                sanitizedTopicName.append(REPLACEMENT_CHAR);\n                changed = true;\n            }\n        }\n        if (changed) {\n            LOGGER.warn(\"Topic name \\\"{}\\\" contains invalid characters, replacing with \\\"{}\\\"\", topicName, sanitizedTopicName);\n            return sanitizedTopicName.toString();\n        }\n        return topicName;\n    }", "CodeBleu_score": 61.90512596418771}]}
{"instance_id": "9cf0d74c098d", "generation_result": [{"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t", "CodeBleu_score": 10.29977892531036}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.producerThrowable = new AtomicReference<>();\n        this.maxRetries = connectorConfig.maxRetries();\n        if (replacedErrorHandler != null) {\n            this.retries = replacedErrorHandler.retries;\n        }\n    }", "CodeBleu_score": 69.77321656806023}, {"code": "public ErrorHandler(Class<? extends SourceConnector> connectorType, CommonConnectorConfig connectorConfig,\n                        ChangeEventQueue<?> queue, ErrorHandler replacedErrorHandler) {\n\t        this.connectorConfig = connectorConfig;\n        this.queue = queue;\n        this.producerThrowable = new AtomicReference<>();\n        this.maxRetries = connectorConfig.maxRetries();\n        if (replacedErrorHandler != null) {\n            this.retries = replacedErrorHandler.retries;\n        }\n    }", "CodeBleu_score": 69.77321656806023}]}
{"instance_id": "8ab4bf3a4dd8", "generation_result": [{"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    ConfigValue configValue = configuration.validate(fields);\n    if (configValue != null) {\n        throw new ConfigException(configValue.errorMessages().get(0));\n    }\n}", "CodeBleu_score": 25.44736389300606}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    Map<String, ConfigValue> results = configuration.validate(fields);\n    for (ConfigValue value : results.values()) {\n        if (!value.errorMessages().isEmpty()) {\n            throw new ConfigException(value.name(), value.errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 45.21675009739385}, {"code": "public void validate(Configuration configuration, Field.Set fields){\n\t    Map<String, ConfigValue> results = configuration.validate(fields);\n    for (Map.Entry<String, ConfigValue> entry : results.entrySet()) {\n        if (entry.getValue().errorMessages() != null && !entry.getValue().errorMessages().isEmpty()) {\n            throw new ConfigException(entry.getKey(), entry.getValue().errorMessages().get(0));\n        }\n    }\n}", "CodeBleu_score": 54.348938508827295}]}
{"instance_id": "860405dc9abb", "generation_result": [{"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\n    if (oldSchema.type() == Schema.Type.STRUCT) {\n        SchemaBuilder builder = SchemaBuilder.struct();\n        for (Field field : oldSchema.fields()) {\n            if (field.schema().type() == Schema.Type.STRUCT) {\n                builder.field(field.name(), buildNewSchema(field.name(), field.schema(), headerToProcess, nestedFields, ++level));\n            }\n            else {\n                builder.field(field.name(), field.schema());\n            }\n        }\n\n        for (int i = 0; i < headers.size(); i++) {\n            Header currentHeader = headerToProcess.get(headers.get(i));\n            if (currentHeader != null) {\n                Optional<String> fieldNameToAdd = getFieldName(fields.get(i), fieldName, level);\n                fieldNameToAdd.ifPresent(s -> builder.field(s, currentHeader.schema()));\n            }\n        }\n\n        Schema newSchema = builder.build();\n        LOGGER.debug(\\\"Copied fields: {}\\\", newSchema.fields());\n        LOGGER.debug(\\\"Added fields: {}\\\", headerToProcess.keySet());\n        return newSchema;\n    }\n\n    return oldSchema;\n}", "CodeBleu_score": 54.97334225390398}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\n    if (oldSchema.type() == Schema.Type.STRUCT) {\n        Struct struct = requireStruct(oldSchema, \"Schema\");\n\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.struct();\n\n        for (org.apache.kafka.connect.data.Field field : struct.schema().fields()) {\n            if (struct.get(field) != null) {\n                if (isContainedIn(field.name(), nestedFields)) {\n                    Struct nestedField = requireStruct(struct.get(field), \"Nested field\");\n                    newSchemaBuilder.field(field.name(), buildNewSchema(field.name(), nestedField, headerToProcess, nestedFields, ++level));\n                }\n                else {\n                    newSchemaBuilder.field(field.name(), field.schema());\n                }\n            }\n        }\n\n        for (int i = 0; i < headers.size(); i++) {\n            Header currentHeader = headerToProcess.get(headers.get(i));\n\n            if (currentHeader != null) {\n                Optional<String> fieldNameToAdd = getFieldName(fields.get(i), fieldName, level);\n                fieldNameToAdd.ifPresent(s -> newSchemaBuilder.field(s, currentHeader.schema()));\n            }\n        }\n\n        Schema newSchema = newSchemaBuilder.build();\n\n        LOGGER.debug(\\\"Copied fields: {}\\\", oldSchema.fields());\n        LOGGER.debug(\\\"Added fields: {}\\\", newSchema.fields());\n\n        return newSchema;\n    }\n    else {\n        return oldSchema;\n    }\n}", "CodeBleu_score": 57.0797379614433}, {"code": "private Schema buildNewSchema(String fieldName, Schema oldSchema, Map<String, Header> headerToProcess, List<String> nestedFields, int level){\n\t\n    if (oldSchema.type() == Schema.Type.STRUCT) {\n        SchemaBuilder newSchemaBuilder = SchemaBuilder.struct();\n        for (org.apache.kafka.connect.data.Field field : oldSchema.fields()) {\n            if (isContainedIn(field.name(), nestedFields)) {\n                Struct nestedField = requireStruct(oldSchema.field(field.name()), \\\"Nested field\\\");\n                newSchemaBuilder.field(field.name(), buildNewSchema(field.name(), nestedField, headerToProcess, nestedFields, ++level));\n            }\n            else {\n                newSchemaBuilder.field(field.name(), oldSchema.field(field.name()).schema());\n            }\n        }\n        for (int i = 0; i < headers.size(); i++) {\n            Header currentHeader = headerToProcess.get(headers.get(i));\n            if (currentHeader != null) {\n                Optional<String> fieldNameToAdd = getFieldName(fields.get(i), fieldName, level);\n                fieldNameToAdd.ifPresent(s -> newSchemaBuilder.field(s, currentHeader.schema()));\n            }\n        }\n        return newSchemaBuilder.build();\n    }\n    return oldSchema;\n}", "CodeBleu_score": 42.655206260505665}]}
{"instance_id": "681a0415df83", "generation_result": [{"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source != null && source.schema().field(SNAPSHOT_KEY) != null) {\n        String snapshotString = source.getString(SNAPSHOT_KEY);\n        if (snapshotString != null) {\n            return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n        }\n    }\n    return null;\n}", "CodeBleu_score": 48.00780627479323}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source == null || source.schema() == null || source.schema().field(SnapshotRecord.SNAPSHOT_KEY_FIELD) == null) {\n        return null;\n    }\n    String snapshotString = source.getString(SnapshotRecord.SNAPSHOT_KEY_FIELD);\n    if (snapshotString != null) {\n        return SnapshotRecord.valueOf(snapshotString.toUpperCase());\n    }\n    return null;\n}", "CodeBleu_score": 58.73562777944319}, {"code": "public static SnapshotRecord fromSource(Struct source){\n\t    if (source == null || source.schema() == null || source.schema().field(SnapshotRecord.SNAPSHOT_KEY) == null) {\n        return null;\n    }\n    Object snapshotString = source.get(SnapshotRecord.SNAPSHOT_KEY);\n    if (snapshotString instanceof String) {\n        return SnapshotRecord.valueOf(((String) snapshotString).toUpperCase());\n    }\n    return null;\n}", "CodeBleu_score": 48.70609323652808}]}
{"instance_id": "85ef1162e38a", "generation_result": [{"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    try {\n        String[] parts = version.split(\"\\\\.\");\n        String[] parts2 = parts[0].split(\"-\");\n        return Optional.of(Float.parseFloat(parts2[0]));\n    } catch (Exception e) {\n        return Optional.empty();\n    }\n}", "CodeBleu_score": 59.407341760242325}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    String[] parts = version.split(\"\\\\.\");\n    String[] subParts = parts[0].split(\"-\");\n    return Optional.of(Float.parseFloat(subParts[0]));\n}", "CodeBleu_score": 36.74757512613132}, {"code": "public static Optional<Float> parse(String version) throws NumberFormatException{\n\t    try {\n      String[] parts = version.split(\"-\")[0].split(\"\\\\.\");\n      String major = parts[0];\n      String minor = parts[1];\n      return Optional.of(Float.parseFloat(major + \".\" + minor));\n    } catch (Exception e) {\n      return Optional.empty();\n    }\n  }", "CodeBleu_score": 60.22275817813777}]}
{"instance_id": "64346d69eba0", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n  var context = AccessContext.builder()\n      .cluster(clusterName)\n      .connect(connectName)\n      .connectActions(ConnectAction.CREATE)\n      .operationName(\"createConnector\")\n      .build();\n\n  return validateAccess(context)\n      .then(kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector))\n      .map(ResponseEntity::ok)\n      .doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 71.88318708284159}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context)\n        .then(kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector))\n        .map(ResponseEntity::ok)\n        .doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 71.67997228382525}, {"code": "public Mono<ResponseEntity<ConnectorDTO>> createConnector(String clusterName, String connectName,\n                                                            @Valid Mono<NewConnectorDTO> connector,\n                                                            ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.CREATE)\n        .operationName(\"createConnector\")\n        .build();\n\n    return validateAccess(context)\n        .then(kafkaConnectService.createConnector(getCluster(clusterName), connectName, connector))\n        .map(ResponseEntity::ok)\n        .doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 71.7344962225901}]}
{"instance_id": "4c446fd64db6", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.DELETE)\n        .connector(connectorName)\n        .operationName(\"deleteConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .thenReturn(ResponseEntity.ok().build())\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 73.46782446866284}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n            .cluster(clusterName)\n            .connect(connectName)\n            .connectActions(ConnectAction.VIEW, ConnectAction.DELETE)\n            .connector(connectorName)\n            .operationName(\"deleteConnector\")\n            .build();\n\n    return validateAccess(context).then(\n            kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n                    .thenReturn(ResponseEntity.ok().build())\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 72.0138376433084}, {"code": "public Mono<ResponseEntity<Void>> deleteConnector(String clusterName, String connectName,\n                                                    String connectorName,\n                                                    ServerWebExchange exchange){\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW, ConnectAction.DELETE)\n        .connector(connectorName)\n        .operationName(\"deleteConnector\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.deleteConnector(getCluster(clusterName), connectName, connectorName)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 81.18392395928973}]}
{"instance_id": "d34a49f3ca1b", "generation_result": [{"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(getRequiredConnectActions(action))\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 55.25610392211095}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(RESTART_ACTIONS.contains(action) ? ConnectAction.RESTART : ConnectAction.EDIT)\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 60.661406073701926}, {"code": "public Mono<ResponseEntity<Void>> updateConnectorState(String clusterName, String connectName,\n                                                         String connectorName,\n                                                         ConnectorActionDTO action,\n                                                         ServerWebExchange exchange) {\n\t    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(getRequiredConnectActions(action))\n        .operationName(\"updateConnectorState\")\n        .operationParams(Map.of(CONNECTOR_NAME, connectorName))\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.updateConnectorState(getCluster(clusterName), connectName, connectorName, action)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 55.22889729606544}]}
{"instance_id": "199cfe41b374", "generation_result": [{"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\n    var context = AccessContext.builder()\n        .cluster(clusterName)\n        .connect(connectName)\n        .connectActions(ConnectAction.VIEW)\n        .operationName(\"validateConnectorPluginConfig\")\n        .build();\n\n    return validateAccess(context).then(\n        kafkaConnectService.validateConnectorPluginConfig(getCluster(clusterName), connectName, pluginName, requestBody)\n            .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 35.70489333602264}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t    var context = AccessContext.builder()\n            .cluster(clusterName)\n            .connect(connectName)\n            .connectActions(ConnectAction.VIEW)\n            .operationName(\"validateConnectorPluginConfig\")\n            .build();\n\n    return validateAccess(context).then(\n            kafkaConnectService.validateConnectorPluginConfig(getCluster(clusterName), connectName, pluginName, requestBody)\n                    .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n}", "CodeBleu_score": 34.98082424160717}, {"code": "public Mono<ResponseEntity<ConnectorPluginConfigValidationResponseDTO>> validateConnectorPluginConfig{\n\t\n    var context = AccessContext.builder()\n            .cluster(clusterName)\n            .connect(connectName)\n            .connectActions(ConnectAction.VIEW)\n            .operationName(\"validateConnectorPluginConfig\")\n            .build();\n\n    return validateAccess(context).then(\n            kafkaConnectService.validateConnectorPluginConfig(getCluster(clusterName), connectName, pluginName, requestBody)\n                    .map(ResponseEntity::ok)\n    ).doOnEach(sig -> audit(context, sig));\n  }", "CodeBleu_score": 34.946246349144324}]}
{"instance_id": "88380ae300c4", "generation_result": [{"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t  return new SpringApplicationBuilder(KafkaUiApplication.class)\n      .initializers(new DynamicConfigOperations())\n      .run(args);\n}", "CodeBleu_score": 41.16740539741618}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n        .initializers(new DynamicConfigOperations())\n        .run(args);\n  }", "CodeBleu_score": 42.004638368253325}, {"code": "public static ConfigurableApplicationContext startApplication(String[] args){\n\t    return new SpringApplicationBuilder(KafkaUiApplication.class)\n        .initializers(new DynamicConfigOperations())\n        .run(args);\n  }", "CodeBleu_score": 42.004638368253325}]}
{"instance_id": "3f022876f737", "generation_result": [{"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n        return fullConnectorInfoDTO -> true;\n    }\n    return fullConnectorInfoDTO -> Stream.of(\n        fullConnectorInfoDTO.getConnector().getName(),\n        fullConnectorInfoDTO.getConnector().getConnect(),\n        fullConnectorInfoDTO.getConnector().getType(),\n        fullConnectorInfoDTO.getConnector().getState(),\n        fullConnectorInfoDTO.getConnector().getConfig().get(\"connector.class\"),\n        fullConnectorInfoDTO.getConnector().getConfig().get(\"tasks.max\")\n    ).anyMatch(s -> StringUtils.containsIgnoreCase(s, search));\n}", "CodeBleu_score": 51.86434464201467}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n        return fullConnectorInfoDTO -> true;\n    }\n    return fullConnectorInfoDTO -> Stream.of(\n        fullConnectorInfoDTO.getConnector().getName(),\n        fullConnectorInfoDTO.getConnector().getType(),\n        fullConnectorInfoDTO.getConnector().getConnect(),\n        fullConnectorInfoDTO.getConnector().getState(),\n        fullConnectorInfoDTO.getConnector().getPlugin(),\n        fullConnectorInfoDTO.getConfig().getConfig(),\n        fullConnectorInfoDTO.getTopics().getTopics()\n    ).anyMatch(s -> StringUtils.containsIgnoreCase(s, search));\n}", "CodeBleu_score": 51.72783811797862}, {"code": "private Predicate<FullConnectorInfoDTO> matchesSearchTerm(@Nullable final String search){\n\t    if (search == null) {\n        return fullConnectorInfoDTO -> true;\n    }\n    return fullConnectorInfoDTO -> Stream.of(\n        fullConnectorInfoDTO.getName(),\n        fullConnectorInfoDTO.getConnector().getType(),\n        fullConnectorInfoDTO.getConnector().getClassName(),\n        fullConnectorInfoDTO.getConnector().getConnectorClass(),\n        fullConnectorInfoDTO.getConnector().getConnectorClass()\n    ).anyMatch(s -> StringUtils.containsIgnoreCase(s, search));\n}", "CodeBleu_score": 52.960211832161875}]}
{"instance_id": "9754aa1ec96c", "generation_result": [{"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattened = new HashMap<>();\n    if (propertiesMap != null) {\n      for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n        String key = entry.getKey();\n        Object value = entry.getValue();\n        String newKey = prefix != null ? prefix + \".\" + key : key;\n        if (value instanceof Map) {\n          flattened.putAll(flattenClusterProperties(newKey, (Map<String, Object>) value));\n        } else {\n          flattened.put(newKey, value);\n        }\n      }\n    }\n    return flattened;\n  }", "CodeBleu_score": 55.72442968351184}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattenedMap = new HashMap<>();\n    if (propertiesMap != null) {\n      for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n        String key = prefix == null ? entry.getKey() : prefix + \".\" + entry.getKey();\n        if (entry.getValue() instanceof Map) {\n          flattenedMap.putAll(flattenClusterProperties(key, (Map<String, Object>) entry.getValue()));\n        } else {\n          flattenedMap.put(key, entry.getValue());\n        }\n      }\n    }\n    return flattenedMap;\n  }", "CodeBleu_score": 51.24100398081275}, {"code": "  private Map<String, Object> flattenClusterProperties(@Nullable String prefix,\n                                                       @Nullable Map<String, Object> propertiesMap){\n\t    Map<String, Object> flattenedProperties = new HashMap<>();\n    if (propertiesMap == null) {\n      return flattenedProperties;\n    }\n    for (Map.Entry<String, Object> entry : propertiesMap.entrySet()) {\n      String key = prefix == null ? entry.getKey() : prefix + \".\" + entry.getKey();\n      Object value = entry.getValue();\n      if (value instanceof Map) {\n        flattenedProperties.putAll(flattenClusterProperties(key, (Map<String, Object>) value));\n      } else {\n        flattenedProperties.put(key, value);\n      }\n    }\n    return flattenedProperties;\n  }", "CodeBleu_score": 50.99834961530615}]}
{"instance_id": "99266677c846", "generation_result": [{"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t    final ConfigDef configDef = new ConfigDef();\n    SslConfigs.addClientConfig(configDef);\n    SaslConfigs.addClientConfig(configDef);\n\n    return configDef.configKeys().stream()\n        .filter(k -> configDef.configKeys().get(k).type() == ConfigDef.Type.PASSWORD)\n        .collect(Collectors.toSet());\n  }", "CodeBleu_score": 71.08286983705203}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t    final ConfigDef configDef = new ConfigDef();\n    SslConfigs.addClientSslSupport(configDef);\n    SaslConfigs.addClientMechanismSupport(configDef);\n    return configDef.configKeys().stream()\n        .filter(k -> configDef.get(k).type() == ConfigDef.Type.PASSWORD)\n        .collect(Collectors.toSet());\n  }", "CodeBleu_score": 73.89549712178969}, {"code": " private static Set<String> kafkaConfigKeysToSanitize(){\n\t    var configDef = new ConfigDef();\n    SslConfigs.addClientSslSupport(configDef);\n    SaslConfigs.addClientMechanismSupport(configDef);\n    return configDef.configKeys().stream()\n        .filter(k -> configDef.get(k).type() == ConfigDef.Type.PASSWORD)\n        .collect(Collectors.toSet());\n  }", "CodeBleu_score": 67.08421745525132}]}
{"instance_id": "deebb6fcb0a8", "generation_result": [{"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    Set<AclOperation> authorizedOperations = clusterDescription.getAuthorizedOperations();\n    return adminClient.isAclViewEnabled()\n        && authorizedOperations.containsAll(List.of(AclOperation.ALL, AclOperation.ALTER))\n        ? Mono.just(ClusterFeature.KAFKA_ACL_EDIT)\n        : Mono.empty();\n  }", "CodeBleu_score": 40.16286681159176}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return adminClient.isAclViewEnabled()\n        ? Mono.just(clusterDescription)\n            .filter(d -> d.authorizedOperations().contains(AclOperation.ALTER)\n                || d.authorizedOperations().contains(AclOperation.ALL))\n            .map(d -> ClusterFeature.KAFKA_ACL_EDIT)\n        : Mono.empty();\n}", "CodeBleu_score": 34.96228631301192}, {"code": "private Mono<ClusterFeature> aclEdit(ReactiveAdminClient adminClient, ClusterDescription clusterDescription){\n\t    return Mono.just(clusterDescription.authorizedOperations())\n        .filter(operations -> operations.contains(AclOperation.ALTER) || operations.contains(AclOperation.ALL))\n        .flatMap(operations -> adminClient.isAclViewEnabled())\n        .filter(Boolean.TRUE::equals)\n        .map(enabled -> ClusterFeature.KAFKA_ACL_EDIT);\n}", "CodeBleu_score": 36.139530803289304}]}
{"instance_id": "a5d8cc77955f", "generation_result": [{"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    // Initialize the map of offsets to read from\n    Map<TopicPartition, Long> offsetsToReadFrom = prevRange == null || prevRange.isEmpty()\n        ? seekOperations.getSeekOperations().stream()\n        .collect(Collectors.toMap(SeekOperation::getTopicPartition, SeekOperation::getOffset))\n        : prevRange.entrySet().stream()\n        .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().from));\n\n    // Calculate the number of messages to poll per partition\n    int messagesPerPartition = messagesPerPage / offsetsToReadFrom.size();\n\n    // Determine the start offset for each topic partition\n    return offsetsToReadFrom.entrySet().stream()\n        .collect(Collectors.toMap(\n            Map.Entry::getKey,\n            e -> {\n              // Adjust the start offset based on the number of messages to poll\n              long startOffset = e.getValue() - messagesPerPartition;\n              // Ensure the start offset does not go below the beginning offset\n              long beginningOffset = consumerPosition.getBeginningOffset(e.getKey());\n              if (startOffset < beginningOffset) {\n    startOffset = beginningOffset;\n  }\n\n              return new FromToOffset(startOffset, e.getValue());\n            },\n            (o1, o2) -> o1,\n            () -> new TreeMap<>(Comparator.comparing(TopicPartition::toString))\n        ));\n  }", "CodeBleu_score": 45.45522692702143}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    Map<TopicPartition, Long> offsetsToRead = prevRange.entrySet().stream()\n        .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().to));\n    seekOperations.getSeekOperations().forEach(seekOp -> offsetsToRead.put(seekOp.getTopicPartition(), seekOp.getOffset()));\n    int messagesToPollPerPartition = messagesPerPage / offsetsToRead.size();\n    return offsetsToRead.entrySet().stream()\n        .collect(Collectors.toMap(\n            Map.Entry::getKey,\n            e -> {\n              long start = Math.max(e.getValue() - messagesToPollPerPartition, consumerPosition.getBeginningOffset());\n              long end = e.getValue();\n              return new FromToOffset(start, end);\n            },\n            (a, b) -> a,\n            () -> new TreeMap<>(Comparator.comparing(TopicPartition::toString))\n        ));\n  }", "CodeBleu_score": 42.64147466244125}, {"code": "protected TreeMap<TopicPartition, FromToOffset> nextPollingRange(TreeMap<TopicPartition, FromToOffset> prevRange,\n                                                                   SeekOperations seekOperations){\n\t    final var offsetsToRead = prevRange == null || prevRange.isEmpty() ?\n        consumerPosition.getOffsets() :\n        prevRange.entrySet().stream()\n            .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (o1, o2) -> o1, TreeMap::new));\n    final var messagesPerPartition = messagesPerPage / offsetsToRead.size();\n    final var result = new TreeMap<TopicPartition, FromToOffset>(Comparator.comparing(TopicPartition::toString));\n    for (var entry : offsetsToRead.entrySet()) {\n      final var tp = entry.getKey();\n      final var from = entry.getValue().getFrom();\n      final var seek = seekOperations.get(tp);\n      final var to = seek != null ? seek.getTo() : from;\n      final var startOffset = Math.max(to - messagesPerPartition, from);\n      result.put(tp, new FromToOffset(startOffset, to));\n    }\n    return result;\n  }", "CodeBleu_score": 42.22963627270562}]}
{"instance_id": "c4c657caeba5", "generation_result": [{"code": "public void doLaunch(final MessageInput input){\n\t    final boolean legacyMode = configuration.getBoolean(CK_LEGACY);\n    if (legacyMode) {\n        if (configuration.getString(CK_ZOOKEEPER).isEmpty()) {\n            throw new ConfigurationException(\\\"ZooKeeper connection string cannot be empty in legacy mode!\\\");\n        }\n    } else {\n        if (configuration.getString(CK_BOOTSTRAP).isEmpty()) {\n            throw new ConfigurationException(\\\"Bootstrap server connection string cannot be empty!\\\");\n        }\n    }\n\n    serverStatus.awaitRunning();\n    serverEventBus.register(this);\n\n    scheduler.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));\n            }\n        }, 1, 1, TimeUnit.SECONDS);\n\n    if (legacyMode) {\n        launchLegacy(input);\n    } else {\n        launchConsumer(input);\n    }\n}", "CodeBleu_score": 44.10511685609465}, {"code": "public void doLaunch(final MessageInput input){\n\t    final boolean legacyMode = configuration.getBoolean(CK_LEGACY);\n    if (legacyMode) {\n        final String zk = configuration.getString(CK_ZOOKEEPER);\n        if (zk == null || zk.isEmpty()) {\n            throw new IllegalArgumentException(\\\"Zookeeper connection string cannot be empty.\\\");\n        }\n    } else {\n        final String bootstrap = configuration.getString(CK_BOOTSTRAP);\n        if (bootstrap == null || bootstrap.isEmpty()) {\n            throw new IllegalArgumentException(\\\"Bootstrap server cannot be empty.\\\");\n        }\n    }\n\n    serverStatus.awaitRunning();\n    serverEventBus.register(this);\n\n    scheduler.scheduleAtFixedRate(new Runnable() {\n                @Override\n                public void run() {\n                    final long bytesRead = lastSecBytesRead.getAndSet(lastSecBytesReadTmp.get());\n                    lastSecBytesReadTmp.set(0);\n                    totalBytesRead.addAndGet(bytesRead);\n                }\n            },\n            1, 1, TimeUnit.SECONDS);\n\n    if (legacyMode) {\n            launchLegacyInput(input);\n        } else {\n            launchConsumerInput(input);\n        }\n    }", "CodeBleu_score": 51.79494833853402}, {"code": "public void doLaunch(final MessageInput input){\n\t    // Check if legacy mode is enabled and validate the corresponding configuration settings for ZooKeeper or bootstrap servers.\n    if (configuration.getBoolean(CK_LEGACY)) {\n        final String zookeeper = configuration.getString(CK_ZOOKEEPER);\n        if (zookeeper == null || zookeeper.isEmpty()) {\n            throw new ConfigurationException(\\\"ZooKeeper is required when legacy mode is enabled!\\\");\n        }\n    } else {\n        final String bootstrap = configuration.getString(CK_BOOTSTRAP);\n        if (bootstrap == null || bootstrap.isEmpty()) {\n            throw new ConfigurationException(\\\"Bootstrap server is required when legacy mode is disabled!\\\");\n        }\n    }\n\n    // Wait for the server to be running and register for server lifecycle events.\n    serverStatus.awaitRunning();\n    serverEventBus.register(this);\n\n    // Depending on the mode, launch the legacy input or a consumer input.\n    if (configuration.getBoolean(CK_LEGACY)) {\n        launchLegacy(input);\n    } else {\n        launchConsumer(input);\n    }\n\n    // Schedule a task to update the last second bytes read every second.\n    scheduler.scheduleAtFixedRate(new Runnable() {\n            @Override\n            public void run() {\n                lastSecBytesRead.set(lastSecBytesReadTmp.getAndSet(0));\n            }\n        }, 1, 1, TimeUnit.SECONDS);\n    }", "CodeBleu_score": 50.992031798182765}]}
{"instance_id": "dffe85dbb47b", "generation_result": [{"code": "private void insertCustomProperties(Properties props){\n\t    final String customProperties = configuration.getString(CK_CUSTOM_PROPERTIES);\n\n    if (customProperties != null) {\n        final Properties customProps = new Properties();\n\n        try {\n            customProps.load(new StringReader(customProperties));\n        } catch (IOException e) {\n            LOG.error(\\\"Failed to load custom properties\\\", e);\n        }\n\n        props.putAll(customProps);\n    }\n}", "CodeBleu_score": 45.42632477195628}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        final String customPropertiesString = configuration.getString(CK_CUSTOM_PROPERTIES);\n        if (customPropertiesString != null && !customPropertiesString.isEmpty()) {\n            final Properties customProps = new Properties();\n            customProps.load(new StringReader(customPropertiesString));\n            props.putAll(customProps);\n        }\n    } catch (IOException e) {\n        LOG.error(\\\"Failed to load custom properties.\\\", e);\n    }\n}", "CodeBleu_score": 44.94968339529246}, {"code": "private void insertCustomProperties(Properties props){\n\t    try {\n        final String customProperties = configuration.getString(CK_CUSTOM_PROPERTIES);\n        if (customProperties != null) {\n            final Properties customProps = new Properties();\n            customProps.load(new StringReader(customProperties));\n            props.putAll(customProps);\n        }\n    } catch (IOException e) {\n        LOG.error(\\\"Failed to load custom properties.\\\", e);\n    }\n}", "CodeBleu_score": 47.24020150113354}]}
{"instance_id": "ea146a7bc30c", "generation_result": [{"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    final List<Journal.Entry> journalEntries = entries.stream()\n            .filter(Objects::nonNull)\n            .map(Journal.Entry::new)\n            .collect(Collectors.toList());\n\n    final long totalMessageBytes = journalEntries.stream()\n            .mapToLong(Journal.Entry::getSize)\n            .sum();\n\n    try {\n        writeRetryer.call(() -> {\n            kafkaJournal.write(journalEntries);\n            return null;\n        });\n    } catch (ExecutionException | RetryException e) {\n        throw new MessageQueueException(\\\"Unable to write to journal\\\", e);\n    }\n\n    metrics.writtenMessages().mark(entries.size());\n    metrics.writtenBytes().mark(totalMessageBytes);\n}", "CodeBleu_score": 50.09020572522006}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    // Filter out null entries\n    final List<RawMessageEvent> filteredEntries = entries.stream()\n            .filter(Objects::nonNull)\n            .collect(Collectors.toList());\n\n    // Map each event to a journal entry and calculate the total message bytes\n    final List<Journal.Entry> journalEntries = filteredEntries.stream()\n            .map(entry -> Journal.Entry.create(entry.getIndex(), entry.getMessage()))\n            .collect(Collectors.toList());\n    final long totalMessageBytes = filteredEntries.stream()\n            .mapToLong(RawMessageEvent::getMessageSize)\n            .sum();\n\n    // Attempt to write to the journal with exponential back-off\n    try {\n        writeRetryer.call(() -> {\n            kafkaJournal.write(journalEntries);\n            return null;\n        });\n    } catch (ExecutionException | RetryException e) {\n        throw new MessageQueueException(\\\"Unable to write to journal\\\", e);\n    }\n\n    // Update the written messages and bytes metrics\n    metrics.writtenMessages().mark(filteredEntries.size());\n    metrics.writtenBytes().mark(totalMessageBytes);\n}", "CodeBleu_score": 56.71216762259297}, {"code": "public void write(List<RawMessageEvent> entries) throws MessageQueueException{\n\t    final List<RawMessageEvent> nonNullEntries = entries.stream().filter(Objects::nonNull).collect(Collectors.toList());\n    final List<Journal.Entry> journalEntries = nonNullEntries.stream().map(RawMessageEvent::toJournalEntry).collect(Collectors.toList());\n    final long totalMessageBytes = nonNullEntries.stream().mapToLong(RawMessageEvent::getSize).sum();\n\n    try {\n            writeRetryer.call(() -> {\n                kafkaJournal.write(journalEntries);\n                return null;\n            });\n        } catch (RetryException e) {\n            throw new MessageQueueException(\\\"Unable to write to journal after retrying\\\", e);\n        }\n\n        metrics.writtenMessages().mark(nonNullEntries.size());\n        metrics.writtenBytes().mark(totalMessageBytes);\n    }", "CodeBleu_score": 48.49107465664982}]}
{"instance_id": "944e77614042", "generation_result": [{"code": "public void acknowledge(List<Message> messages){\n\t    final Optional<Long> maxMessageId = messages.stream()\n            .map(Message::getId)\n            .filter(id -> id != null)\n            .max(Long::compareTo);\n\n    maxMessageId.ifPresent(kafkaJournal::acknowledge);\n\n    metrics.markAcknowledged(messages.size());\n}", "CodeBleu_score": 41.65557303653908}, {"code": "public void acknowledge(List<Message> messages){\n\t    final Optional<Long> maxMessageQueueId = messages.stream()\n            .map(Message::getQueueId)\n            .filter(Optional::isPresent)\n            .map(Optional::get)\n            .max(Long::compare);\n\n    maxMessageQueueId.ifPresent(kafkaJournal::acknowledge);\n    metrics.markAcknowledged(messages.size());\n}", "CodeBleu_score": 48.17966846664517}, {"code": "public void acknowledge(List<Message> messages){\n\t    final Optional<Long> maxMessageQueueId = getMaxMessageQueueId(messages);\n    maxMessageQueueId.ifPresent(kafkaJournal::acknowledge);\n    maxMessageQueueId.ifPresent(metrics::markAcknowledged);\n}", "CodeBleu_score": 17.962793961344836}]}
{"instance_id": "981280879490", "generation_result": [{"code": "private void registerLegacyMetrics(){\n\t    final String legacyMetricPrefix = \"org.graylog2.journal.local.kafka\";\n    final String metricPrefix = LocalKafkaJournal.class.getName();\n    final Set<String> filteredMetrics = metricRegistry.getMetrics().keySet().stream()\n            .filter(metricName -> metricName.startsWith(metricPrefix))\n            .collect(Collectors.toSet());\n    for (String metricName : filteredMetrics) {\n        final String legacyMetricName = metricName.replace(metricPrefix, legacyMetricPrefix);\n        try {\n            metricRegistry.register(legacyMetricName, metricRegistry.getMetrics().get(metricName));\n        } catch (IllegalArgumentException e) {\n            LOG.warn(\"Unable to register legacy metric [{}], metric already exists under [{}]\", legacyMetricName, metricName);\n        }\n    }\n}", "CodeBleu_score": 43.00935564406827}, {"code": "private void registerLegacyMetrics(){\n\t    final String legacyMetricPrefix = LocalKafkaJournal.class.getName();\n    final Set<String> filteredMetrics = metricRegistry.getMetrics().keySet().stream().filter(metricName -> metricName.startsWith(legacyMetricPrefix)).collect(Collectors.toSet());\n    filteredMetrics.forEach(metricName -> {\n        final String legacyMetricName = metricName.replace(legacyMetricPrefix, metricPrefix);\n        try {\n            metricRegistry.register(legacyMetricName, metricRegistry.getMetrics().get(metricName));\n        } catch (IllegalArgumentException e) {\n            LOG.warn(\"Unable to register legacy metric {} under new name {}\", metricName, legacyMetricName);\n        }\n    });\n}", "CodeBleu_score": 46.3800174644113}, {"code": "private void registerLegacyMetrics(){\n\t        final MetricFilter filter = (name, metric) -> name.startsWith(LocalKafkaJournal.class.getName());\n        final SortedMap<String, Metric> filteredMetrics = metricRegistry.getMetrics(filter);\n\n        for (final Map.Entry<String, Metric> entry : filteredMetrics.entrySet()) {\n            final String originalName = entry.getKey();\n            final String legacyName = originalName.replace(LocalKafkaJournal.class.getName(), \\\"org.graylog2.journal.kafka.LocalKafkaJournal\\\");\n            final Metric metric = entry.getValue();\n\n            try {\n                metricRegistry.register(legacyName, metric);\n            } catch (IllegalArgumentException e) {\n                LOG.warn(\\\"Unable to register legacy metric {}: {}\\\", legacyName, e.getMessage());\n            }\n        }\n    }", "CodeBleu_score": 41.14650456014864}]}
{"instance_id": "3ca34bfd2d64", "generation_result": [{"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.getTimers().get(metricName);\n    }\n}", "CodeBleu_score": 21.97987496955459}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    Timer timer;\n    try {\n        timer = metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        timer = metricRegistry.getTimers().get(metricName);\n    }\n    return timer;\n}", "CodeBleu_score": 38.16614141803758}, {"code": "private Timer registerHdrTimer(MetricRegistry metricRegistry, final String metricName){\n\t    try {\n        return metricRegistry.timer(metricName);\n    } catch (IllegalArgumentException e) {\n        return metricRegistry.getTimers().get(metricName);\n    }\n}", "CodeBleu_score": 21.97987496955459}]}
{"instance_id": "e1d07a1fa986", "generation_result": [{"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, (Gauge<Long>) () -> {\n            if (kafkaLog.size() == 0) {\n                return 0L;\n            }\n            if (committedOffset.get() == -1) {\n                return kafkaLog.logEndOffset() - kafkaLog.logStartOffset();\n            } else {\n                return kafkaLog.logEndOffset() - committedOffset.get();\n            }\n        });\n    } catch (IllegalArgumentException e) {\n        // ignore\n    }\n}", "CodeBleu_score": 54.349819210982496}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t    try {\n        metricRegistry.register(name, (Gauge<Long>) () -> {\n            if (size() == 0) {\n                return 0L;\n            }\n            if (committedOffset.get() == DEFAULT_COMMITTED_OFFSET) {\n                return logEndOffset() - logStartOffset();\n            }\n            return logEndOffset() - committedOffset.get();\n        });\n    } catch (IllegalArgumentException ignored) {\n    }\n}", "CodeBleu_score": 75.21114096545087}, {"code": "private void registerUncommittedGauge(MetricRegistry metricRegistry, String name){\n\t        metricRegistry.register(name, (Gauge<Integer>) () -> {\n            if (committedOffset.get() == DEFAULT_COMMITTED_OFFSET) {\n                return (int) (kafkaLog.logEndOffset() - kafkaLog.logStartOffset());\n            } else {\n                return (int) (kafkaLog.logEndOffset() - committedOffset.get());\n            }\n        });\n    }", "CodeBleu_score": 35.34032752208896}]}
{"instance_id": "8b30a387069f", "generation_result": [{"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t        if (messages.isEmpty()) {\n            LOG.debug(\"No messages to write\");\n            return 0L;\n        }\n\n        final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n        LOG.debug(\"Flushing {} messages to journal\", messageSet.sizeInBytes());\n        final long lastWriteOffset = log.append(messageSet);\n        LOG.debug(\"Wrote {} messages to journal\", messageSet.sizeInBytes());\n        writtenMessages.mark(messages.size());\n        size.mark(payloadSize);\n        return lastWriteOffset;\n    }", "CodeBleu_score": 44.204870542637444}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        LOG.debug(\"No messages to write\");\n        return getLogEndOffset();\n    }\n    final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n    LOG.debug(\\\"Writing {} messages of size {} bytes\\\", messages.size(), messageSet.sizeInBytes());\n    final long lastWriteOffset = append(messageSet);\n    LOG.debug(\\\"Wrote {} messages of size {} bytes to offset {}\\\", messages.size(), payloadSize, lastWriteOffset);\n    writtenMessages.mark(messages.size());\n    return lastWriteOffset;\n}", "CodeBleu_score": 43.96403524802729}, {"code": "private long flushMessages(List<Message> messages, long payloadSize){\n\t    if (messages.isEmpty()) {\n        LOG.debug(\"No messages to flush\");\n        return -1L;\n    }\n\n    final ByteBufferMessageSet messageSet = new ByteBufferMessageSet(messages);\n    LOG.trace(\"Flushing message set with {} messages ({} bytes)\", messageSet.size(), messageSet.sizeInBytes());\n\n    final long lastWriteOffset = log.append(messageSet);\n    LOG.debug(\"Flushed {} messages ({} bytes) to offset {}\", messageSet.size(), payloadSize, lastWriteOffset);\n    writtenMessages.mark(messages.size());\n    return lastWriteOffset;\n}", "CodeBleu_score": 44.22999976980241}]}
{"instance_id": "ee338b61e75d", "generation_result": [{"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    synchronized (KAFKA_ADMIN_CLIENT_MAP) {\n        List<AdminClient> adminClientList = KAFKA_ADMIN_CLIENT_MAP.get(clusterPhyId);\n        if (adminClientList == null) {\n            return;\n        }\n\n        LOGGER.info(\"start to close kafka admin-client, clusterPhyId:{}\", clusterPhyId);\n        boolean success = true;\n        for (AdminClient adminClient : adminClientList) {\n            try {\n                adminClient.close();\n            } catch (Exception e) {\n                LOGGER.error(\"close kafka admin-client failed, clusterPhyId:{}\", clusterPhyId, e);\n                success = false;\n            }\n        }\n\n        if (success) {\n            LOGGER.info(\"close kafka admin-client success, clusterPhyId:{}\", clusterPhyId);\n        } else {\n            LOGGER.error(\"close kafka admin-client failed, clusterPhyId:{}\", clusterPhyId);\n        }\n    }\n}", "CodeBleu_score": 59.39952535345577}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t    synchronized (KAFKA_ADMIN_CLIENT_MAP) {\n        List<AdminClient> adminClientList = KAFKA_ADMIN_CLIENT_MAP.get(clusterPhyId);\n        if (adminClientList == null) {\n            return;\n        }\n\n        LOGGER.info(\"method=closeKafkaAdminClient||msg=start to close kafka admin client||clusterPhyId={}\", clusterPhyId);\n\n        boolean success = true;\n        for (AdminClient adminClient : adminClientList) {\n            try {\n                adminClient.close(Duration.ofSeconds(3));\n            } catch (Exception e) {\n                LOGGER.error(\"method=closeKafkaAdminClient||msg=close kafka admin client failed||clusterPhyId={}||errorMsg={}\", clusterPhyId, e.getMessage(), e);\n                success = false;\n            }\n        }\n\n        if (success) {\n            LOGGER.info(\"method=closeKafkaAdminClient||msg=success to close kafka admin client||clusterPhyId={}\", clusterPhyId);\n        } else {\n            LOGGER.error(\"method=closeKafkaAdminClient||msg=failed to close kafka admin client||clusterPhyId={}\", clusterPhyId);\n        }\n    }\n}", "CodeBleu_score": 50.37726140526573}, {"code": "private void closeKafkaAdminClient(Long clusterPhyId) {\n\t        synchronized (KAFKA_ADMIN_CLIENT_MAP) {\n            List<AdminClient> adminClientList = KAFKA_ADMIN_CLIENT_MAP.get(clusterPhyId);\n            if (adminClientList == null) {\n                return;\n            }\n\n            LOGGER.info(\"method=closeKafkaAdminClient||msg=start to close kafka admin client||clusterPhyId={}||adminClientCnt={}\", clusterPhyId, adminClientList.size());\n\n            boolean allSuccess = true;\n            for (AdminClient adminClient : adminClientList) {\n                try {\n                    adminClient.close();\n                } catch (Exception e) {\n                    LOGGER.error(\"method=closeKafkaAdminClient||msg=close kafka admin client failed||clusterPhyId={}||adminClient={}\", clusterPhyId, adminClient, e);\n                    allSuccess = false;\n                }\n            }\n\n            if (allSuccess) {\n                LOGGER.info(\"method=closeKafkaAdminClient||msg=close kafka admin client success||clusterPhyId={}\", clusterPhyId);\n            } else {\n                LOGGER.error(\"method=closeKafkaAdminClient||msg=close kafka admin client failed||clusterPhyId={}\", clusterPhyId);\n            }\n        }\n    }", "CodeBleu_score": 50.91691336024966}]}
{"instance_id": "6f0b935b971c", "generation_result": [{"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    boolean success = true;\n\n    if (adminClientList == null) {\n        return true;\n    }\n\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOGGER.error(\\\"close kafka AdminClient failed, clusterPhyId:{}\\\", clusterPhyId, e);\n            success = false;\n        }\n    }\n\n    return success;\n}", "CodeBleu_score": 71.08390133280096}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOGGER.error(\\\"close kafka AdminClient failed, clusterPhyId:{}\\\", clusterPhyId, e);\n            success = false;\n        }\n    }\n\n    return success;\n}", "CodeBleu_score": 72.9442029073794}, {"code": "private boolean closeAdminClientList(Long clusterPhyId, List<AdminClient> adminClientList){\n\t    if (adminClientList == null) {\n        return true;\n    }\n\n    boolean success = true;\n    for (AdminClient adminClient : adminClientList) {\n        try {\n            adminClient.close(Duration.ofSeconds(30));\n        } catch (Exception e) {\n            LOGGER.error(\\\"close kafka AdminClient failed, clusterPhyId:{}\\\", clusterPhyId, e);\n            success = false;\n        }\n    }\n\n    return success;\n}", "CodeBleu_score": 72.9442029073794}]}
{"instance_id": "b5475aa94c1a", "generation_result": [{"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        try {\n            for (int i = 0; i < 5; i++) {\n                Thread.sleep(1000);\n                if (!app.isRunning()) {\n                    break;\n                }\n            }\n        }\n        catch (InterruptedException e) {\n            throw new IllegalStateException(e);\n        }\n        app = null;\n    }\n}", "CodeBleu_score": 48.45757816843255}, {"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        try {\n            app.wait(5, 1000);\n        } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            throw new IllegalStateException(e);\n        }\n        app = null;\n    }\n}", "CodeBleu_score": 41.55879011991509}, {"code": "public void stop() {\n\t    if (app != null) {\n        app.stop();\n        for (int i = 0; i < 5; i++) {\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                throw new IllegalStateException(e);\n            }\n            if (app.isActive()) {\n                continue;\n            }\n            app = null;\n            return;\n        }\n        throw new IllegalStateException(\"App did not stop\");\n    }\n}", "CodeBleu_score": 58.02265705048353}]}
{"instance_id": "5da405de9e3d", "generation_result": [{"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner eurekaServer = new EurekaServerRunner(config);\n    eurekaServer.enableTLS(true);\n    eurekaServer.setKeystore(caCert, KEY_STORE_PASSWORD);\n    eurekaServer.setTruststore(caCert, KEY_STORE_PASSWORD);\n    eurekaServer.start();\n    return eurekaServer;\n}", "CodeBleu_score": 52.11779823351736}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner runner = new EurekaServerRunner(config);\n    runner.enableTLS();\n    runner.setKeystore(caCert.getAbsolutePath(), KEY_STORE_PASSWORD, KEY_PASSWORD);\n    runner.setTruststore(caCert.getAbsolutePath(), KEY_STORE_PASSWORD);\n    runner.start();\n    return runner;\n}", "CodeBleu_score": 47.878661636160224}, {"code": "static EurekaServerRunner startEurekaServer(Class config){\n\t    EurekaServerRunner runner = new EurekaServerRunner(config);\n    runner.enableTLS();\n    runner.setKeystore(caCert, KEY_STORE_PASSWORD);\n    runner.setTruststore(caCert, KEY_STORE_PASSWORD);\n    runner.start();\n    return runner;\n}", "CodeBleu_score": 52.3424158856369}]}
{"instance_id": "19cbf70751b2", "generation_result": [{"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t    EurekaClientRunner client = new EurekaClientRunner(config, server, \\\"testservice\\\");\n    client.enableTls();\n    client.start();\n    return client;\n}", "CodeBleu_score": 35.656374609629246}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t    EurekaClientRunner client = new EurekaClientRunner(config, server, \"testservice\");\n    client.enableTls();\n    client.start();\n    return client;\n}", "CodeBleu_score": 62.62512419431552}, {"code": "static EurekaClientRunner startService(EurekaServerRunner server, Class config){\n\t\t\tEurekaClientRunner service = new EurekaClientRunner(config, server, \\\"testservice\\\");\n\t\tservice.enableTls();\n\t\tservice.start();\n\t\treturn service;\n\t}", "CodeBleu_score": 49.569008580228704}]}
{"instance_id": "d6ccff5c0536", "generation_result": [{"code": "static void createCertificates() throws Exception{\n\t    KeyTool keyTool = new KeyTool();\n    keyTool.createKeyStore(caCert, KEY_STORE_PASSWORD);\n    keyTool.createCaCert(caCert, KEY_STORE_PASSWORD, \"CN=test-ca\", KEY_PASSWORD);\n    saveCert(caCert);\n    keyTool.createServerCert(caCert, KEY_STORE_PASSWORD, \"CN=localhost\", KEY_PASSWORD);\n    saveCert(serverCert);\n    keyTool.createClientCert(caCert, KEY_STORE_PASSWORD, \"CN=test-client\", KEY_PASSWORD);\n    saveCert(clientCert);\n\n    keyTool.createKeyStore(wrongCaCert, KEY_STORE_PASSWORD);\n    keyTool.createCaCert(wrongCaCert, KEY_STORE_PASSWORD, \"CN=test-ca\", WRONG_PASSWORD);\n    saveCert(wrongCaCert);\n    keyTool.createClientCert(wrongCaCert, KEY_STORE_PASSWORD, \"CN=test-client\", WRONG_PASSWORD);\n    saveCert(wrongClientCert);\n}", "CodeBleu_score": 26.060798687984178}, {"code": "static void createCertificates() throws Exception{\n\t\t\tKeyTool keyTool = new KeyTool();\n\n\t\tKeyStore caKeyStore = keyTool.createKeyStore(KEY_STORE_PASSWORD);\n\t\tKeyStore serverKeyStore = keyTool.createKeyStore(KEY_STORE_PASSWORD);\n\t\tKeyStore clientKeyStore = keyTool.createKeyStore(KEY_STORE_PASSWORD);\n\n\t\tkeyTool.createCaCert(caKeyStore, KEY_STORE_PASSWORD, KEY_PASSWORD);\n\t\tkeyTool.createServerCert(caKeyStore, KEY_STORE_PASSWORD, KEY_PASSWORD, serverKeyStore, KEY_STORE_PASSWORD, KEY_PASSWORD);\n\t\tkeyTool.createClientCert(caKeyStore, KEY_STORE_PASSWORD, KEY_PASSWORD, clientKeyStore, KEY_STORE_PASSWORD, KEY_PASSWORD);\n\n\t\tcaCert = saveCert(caKeyStore, KEY_STORE_PASSWORD, \\\"ca\\\");\n\t\tserverCert = saveCert(serverKeyStore, KEY_STORE_PASSWORD, \\\"server\\\");\n\t\tclientCert = saveCert(clientKeyStore, KEY_STORE_PASSWORD, \\\"client\\\");\n\n\t\tKeyStore wrongCaCertKeyStore = keyTool.createKeyStore(KEY_STORE_PASSWORD);\n\t\tKeyStore wrongClientCertKeyStore = keyTool.createKeyStore(KEY_STORE_PASSWORD);\n\n\t\tkeyTool.createCaCert(wrongCaCertKeyStore, KEY_STORE_PASSWORD, KEY_PASSWORD);\n\t\tkeyTool.createClientCert(wrongCaCertKeyStore, KEY_STORE_PASSWORD, KEY_PASSWORD, wrongClientCertKeyStore, KEY_STORE_PASSWORD, KEY_PASSWORD);\n\n\t\twrongCaCert = saveCert(wrongCaCertKeyStore, KEY_STORE_PASSWORD, \\\"wrong-ca\\\");\n\t\twrongClientCert = saveCert(wrongClientCertKeyStore, KEY_STORE_PASSWORD, \\\"wrong-client\\\");\n\t}", "CodeBleu_score": 19.738067372689493}, {"code": "static void createCertificates() throws Exception{\n\t", "CodeBleu_score": 1.403125619965593}]}
{"instance_id": "d2eeaa6a6bbe", "generation_result": [{"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long timeLimit = System.currentTimeMillis() + seconds * 1000;\n    while (!assertion.getAsBoolean()) {\n        if (System.currentTimeMillis() > timeLimit) {\n            throw new RuntimeException(\\\"Timeout waiting for assertion to be true\\\");\n        }\n    }\n}", "CodeBleu_score": 38.66497604606736}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long start = System.currentTimeMillis();\n    long limit = start + (seconds * 1000);\n    while (System.currentTimeMillis() < limit) {\n        if (assertion.getAsBoolean()) {\n            return;\n        }\n        try {\n            Thread.sleep(100);\n        }\n        catch (InterruptedException e) {\n            throw new RuntimeException(e);\n        }\n    }\n    throw new RuntimeException(\\\"Condition not met within \\\" + seconds + \\\" seconds\\\");\n}", "CodeBleu_score": 45.61900056716625}, {"code": "private void assertInSeconds(BooleanSupplier assertion, int seconds){\n\t    long start = System.currentTimeMillis();\n    long timeLimit = seconds * 1000;\n    while (!assertion.getAsBoolean()) {\n        if (System.currentTimeMillis() - start > timeLimit) {\n            throw new RuntimeException(\\\"Condition not met within \\\" + seconds + \\\" seconds.\\\");\n        }\n    }\n}", "CodeBleu_score": 41.36240753623394}]}
{"instance_id": "6bb261b0e4e1", "generation_result": [{"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tX509v3CertificateBuilder certBuilder = new JcaX509v3CertificateBuilder(\n\t\t\t\tnew X500Name(ca),\n\t\t\t\tnew BigInteger(\"1\"),\n\t\t\t\tnew Date(System.currentTimeMillis() - ONE_DAY),\n\t\t\t\tnew Date(System.currentTimeMillis() + TEN_YEARS),\n\t\t\t\tnew X500Name(ca),\n\t\t\t\tkeyPair.getPublic());\n\t\tcertBuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\t\tcertBuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\n\t\tContentSigner contentSigner = new JcaContentSignerBuilder(\\\"SHA256WithRSAEncryption\\\").build(signer.privateKey());\n\t\tX509CertificateHolder certHolder = certBuilder.build(contentSigner);\n\t\treturn new JcaX509CertificateConverter().setProvider(\\\"BC\\\").getCertificate(certHolder);\n\t}", "CodeBleu_score": 34.888702573521506}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tX509v3CertificateBuilder builder = new JcaX509v3CertificateBuilder(\n\t\t\t\tnew X500Name(ca),\n\t\t\t\tnew BigInteger(64, new SecureRandom()),\n\t\t\t\tnew Date(System.currentTimeMillis() - ONE_DAY),\n\t\t\t\tnew Date(System.currentTimeMillis() + TEN_YEARS),\n\t\t\t\tnew X500Name(ca),\n\t\t\t\tkeyPair.getPublic());\n\t\tbuilder.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\t\tbuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\n\t\tContentSigner signer = new JcaContentSignerBuilder(\\\"SHA256WithRSAEncryption\\\").build(signer.privateKey());\n\t\tX509CertificateHolder holder = builder.build(signer);\n\t\treturn new JcaX509CertificateConverter().setProvider(\\\"BC\\\").getCertificate(holder);\n\t}", "CodeBleu_score": 37.41218080775081}, {"code": "public X509Certificate createCert(KeyPair keyPair, String ca) throws Exception{\n\t\t\tX509v3CertificateBuilder cert = new JcaX509v3CertificateBuilder(new X500Name(ca), new BigInteger(\"1\"), new Date(), new Date(new Date().getTime() + TEN_YEARS), new X500Name(ca), keyPair.getPublic());\n\t\tcert.addExtension(Extension.keyUsage, true, new KeyUsage(KeyUsage.digitalSignature | KeyUsage.keyEncipherment));\n\t\tcert.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\n\t\tContentSigner signer = new JcaContentSignerBuilder(\\\"SHA256withRSA\\\").build(signer.privateKey());\n\t\tX509CertificateHolder holder = cert.build(signer);\n\t\treturn new JcaX509CertificateConverter().setProvider(\\\"BC\\\").getCertificate(holder);\n\t}", "CodeBleu_score": 38.604228602304715}]}
{"instance_id": "e4f9c32a7c9e", "generation_result": [{"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\t\tEurekaHttpClient client = this.eurekaHttpClient.get();\n\t\tif (client == null) {\n\t\t\ttry {\n\t\t\t\tclient = (EurekaHttpClient) this.eurekaTransportField.get(this);\n\t\t\t\tthis.eurekaHttpClient.compareAndSet(null, client);\n\t\t\t}\n\t\t\tcatch (IllegalAccessException e) {\n\t\t\t\tlog.error(\\\"Error accessing registrationClient\\\", e);\n\t\t\t}\n\t\t}\n\t\treturn client;\n\t}", "CodeBleu_score": 39.00370145080787}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t    if (this.eurekaHttpClient.get() == null) {\n        try {\n            this.eurekaTransportField.setAccessible(true);\n            EurekaHttpClient eurekaHttpClient = (EurekaHttpClient) this.eurekaTransportField.get(this);\n            this.eurekaHttpClient.set(eurekaHttpClient);\n        }\n        catch (IllegalAccessException e) {\n            log.error(\"Could not access eurekaTransportField\", e);\n        }\n    }\n    return this.eurekaHttpClient.get();\n}", "CodeBleu_score": 53.23703111046849}, {"code": "EurekaHttpClient getEurekaHttpClient(){\n\t\t\tEurekaHttpClient client = this.eurekaHttpClient.get();\n\t\tif (client == null) {\n\t\t\ttry {\n\t\t\t\tclient = (EurekaHttpClient) this.eurekaTransportField.get(this);\n\t\t\t\tthis.eurekaHttpClient.set(client);\n\t\t\t}\n\t\t\tcatch (IllegalAccessException e) {\n\t\t\t\tlog.error(\\\"Error accessing eurekaTransport field\\\", e);\n\t\t\t}\n\t\t}\n\t\treturn client;\n\t}", "CodeBleu_score": 39.2367100964837}]}
{"instance_id": "5c404f04e34c", "generation_result": [{"code": "public List<String> getServices(){\n\t    Applications applications = this.eurekaClient.getApplications();\n    if (applications == null) {\n        return Collections.emptyList();\n    }\n    List<String> names = new ArrayList<>();\n    for (Application app : applications.getRegisteredApplications()) {\n        if (!app.getInstances().isEmpty()) {\n            names.add(app.getName().toLowerCase());\n        }\n    }\n    return names;\n}", "CodeBleu_score": 73.59485805470106}, {"code": "public List<String> getServices(){\n\t    Applications applications = this.eurekaClient.getApplications();\n    if (applications == null) {\n        return Collections.emptyList();\n    }\n    List<String> names = new ArrayList<>();\n    for (Application app : applications.getRegisteredApplications()) {\n        if (!app.getInstances().isEmpty()) {\n            names.add(app.getName().toLowerCase());\n        }\n    }\n    return names;\n}", "CodeBleu_score": 73.59485805470106}, {"code": "public List<String> getServices(){\n\t    Applications applications = this.eurekaClient.getApplications();\n    if (applications == null) {\n        return Collections.emptyList();\n    }\n    List<Application> registered = applications.getRegisteredApplications();\n    List<String> names = new ArrayList<>();\n    for (Application app : registered) {\n        if (!app.getInstances().isEmpty()) {\n            names.add(app.getName().toLowerCase());\n        }\n    }\n    return names;\n}", "CodeBleu_score": 86.82990977989058}]}
{"instance_id": "a21251337ade", "generation_result": [{"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        if (entry.getValue() instanceof DiscoveryCompositeHealthContributor) {\n            for (NamedContributor<HealthContributor> namedContributor : ((DiscoveryCompositeHealthContributor) entry.getValue()).getContributors()) {\n                if (!(namedContributor.getContributor() instanceof EurekaHealthIndicator)) {\n                    this.healthContributors.put(namedContributor.getName(), namedContributor.getContributor());\n                }\n            }\n        }\n        else {\n            this.healthContributors.put(entry.getKey(), entry.getValue());\n        }\n    }\n}", "CodeBleu_score": 46.76504716076073}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    healthContributors.forEach((key, value) -> {\n        if (value instanceof DiscoveryCompositeHealthContributor) {\n            for (NamedContributor<HealthContributor> namedContributor : ((DiscoveryCompositeHealthContributor) value).getContributors()) {\n                if (!(namedContributor.getContributor() instanceof EurekaHealthIndicator)) {\n                    this.healthContributors.put(namedContributor.getName(), namedContributor.getContributor());\n                }\n            }\n        }\n        else {\n            this.healthContributors.put(key, value);\n        }\n    });\n}", "CodeBleu_score": 38.52116009711975}, {"code": "void populateHealthContributors(Map<String, HealthContributor> healthContributors){\n\t    for (Map.Entry<String, HealthContributor> entry : healthContributors.entrySet()) {\n        HealthContributor contributor = entry.getValue();\n        if (contributor instanceof DiscoveryCompositeHealthContributor) {\n            for (NamedContributor<HealthContributor> namedContributor : ((DiscoveryCompositeHealthContributor) contributor).getContributors()) {\n                HealthContributor delegate = namedContributor.getContributor();\n                if (!(delegate instanceof EurekaHealthIndicator)) {\n                    this.healthContributors.put(namedContributor.getName(), delegate);\n                }\n            }\n        }\n        else {\n            this.healthContributors.put(entry.getKey(), contributor);\n        }\n    }\n}", "CodeBleu_score": 39.92791010891643}]}
{"instance_id": "998fee829929", "generation_result": [{"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No instance available for provider-application\");\n    }\n    ServiceInstance instance = instances.get(0);\n    String url = instance.getUri().toString() + \"/echo\";\n    return restTemplate.postForObject(url, \"Hello World\", String.class);\n}", "CodeBleu_score": 48.98180198892124}, {"code": "public String hello(){\n\t    // \u901a\u8fc7\u670d\u52a1\u540d\u79f0\u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\n    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"\u4e0d\u5b58\u5728\u5bf9\u5e94\u670d\u52a1\");\n    }\n    // \u83b7\u53d6\u7b2c\u4e00\u4e2a\u670d\u52a1\u5b9e\u4f8b\n    ServiceInstance serviceInstance = instances.get(0);\n    // \u83b7\u53d6\u670d\u52a1\u5b9e\u4f8b\u7684 URI\n    URI uri = serviceInstance.getUri();\n    // \u53d1\u9001 POST \u8bf7\u6c42\n    String response = restTemplate.postForObject(uri + \"/echo\", \"Hello World\", String.class);\n    return \"Response from provider: \\\"\" + response + \"\\\"\";\n}", "CodeBleu_score": 59.807392384218105}, {"code": "public String hello(){\n\t    List<ServiceInstance> instances = discoveryClient.getInstances(\"provider-application\");\n    if (instances.isEmpty()) {\n        throw new RuntimeException(\"No instance of provider-application found\");\n    }\n    String url = instances.get(0).getUri().toString();\n    return restTemplate.postForObject(url + \"/echo\", \"Hello World\", String.class);\n}", "CodeBleu_score": 43.79019335476729}]}
{"instance_id": "31166ae7d3dc", "generation_result": [{"code": "public String world(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\\\"provider-application\\\");\n    URI uri = serviceInstance.getUri();\n    String response = restTemplate.postForObject(uri.toString() + \\\"/echo\\\", null, String.class);\n    return response;\n}", "CodeBleu_score": 39.479312710588744}, {"code": "public String world(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\\\"provider-application\\\");\n    URI uri = serviceInstance.getUri();\n    String response = restTemplate.postForObject(uri.toString() + \\\"/echo\\\", null, String.class);\n    return response;\n}", "CodeBleu_score": 39.479312710588744}, {"code": "public String world(){\n\t    ServiceInstance serviceInstance = loadBalancerClient.choose(\\\"provider-application\\\");\n    URI uri = serviceInstance.getUri();\n    String response = restTemplate.postForObject(uri.toString() + \\\"/echo\\\", null, String.class);\n    return response;\n}", "CodeBleu_score": 39.479312710588744}]}
{"instance_id": "d7714f9cf0e9", "generation_result": [{"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\\\"register service, serviceName: {}, ip: {}, port: {}\\\", serviceName, ip, port);\n    if (!serverMap.containsKey(serviceName)) {\n        serverMap.put(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 68.50533689390208}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"register service: {} {} {}\", serviceName, ip, port);\n    if (!serverMap.containsKey(serviceName)) {\n        serverMap.putIfAbsent(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 63.30949520621929}, {"code": "public boolean register(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"register service:{},ip:{},port:{}\", serviceName, ip, port);\n    if (!serverMap.containsKey(serviceName)) {\n        serverMap.putIfAbsent(serviceName, Collections.synchronizedSet(new HashSet<>()));\n    }\n    serverMap.get(serviceName).add(new Server(ip, port));\n    return true;\n}", "CodeBleu_score": 61.340760574819754}]}
{"instance_id": "45f91ed1c560", "generation_result": [{"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"deregister service, serviceName: {}, ip: {}, port: {}\", serviceName, ip, port);\n    if (serverMap.containsKey(serviceName.toLowerCase())) {\n        Server server = new Server(ip, port);\n        serverMap.get(serviceName).remove(server);\n    }\n    return true;\n}", "CodeBleu_score": 69.12576745458033}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"deregister service, serviceName: {}, ip: {}, port: {}\", serviceName, ip, port);\n    Server server = new Server(ip, port);\n    serverMap.get(serviceName).remove(server);\n    return true;\n}", "CodeBleu_score": 59.39081976658003}, {"code": "public boolean deregister(@RequestParam(\"serviceName\") String serviceName, @RequestParam(\"ip\") String ip, @RequestParam(\"port\") Integer port){\n\t    logger.info(\"deregister service, serviceName: {}, ip: {}, port: {}\", serviceName, ip, port);\n    if (serverMap.containsKey(serviceName)) {\n        serverMap.get(serviceName).remove(new Server(ip, port));\n    }\n    return true;\n}", "CodeBleu_score": 54.59622299972145}]}
{"instance_id": "f671d9564e40", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t", "CodeBleu_score": 4.511580463841749}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t        Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n        if (attributes == null) {\n            return;\n        }\n        if (attributes.containsKey(\"defaultConfiguration\")) {\n            String[] defaultConfigurations = (String[]) attributes.get(\"defaultConfiguration\");\n            for (String defaultConfiguration : defaultConfigurations) {\n                registerClientConfiguration(defaultConfiguration, registry);\n            }\n        }\n        if (attributes.containsKey(\"value\")) {\n            RibbonClient[] clients = (RibbonClient[]) attributes.get(\"value\");\n            for (RibbonClient client : clients) {\n                registerClientConfiguration(client.defaultConfiguration(), registry);\n            }\n        }\n    }", "CodeBleu_score": 44.13343712711206}, {"code": "public void registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry){\n\t        Map<String, Object> attributes = metadata.getAnnotationAttributes(RibbonClients.class.getName());\n        if (attributes != null) {\n            // \u83b7\u53d6defaultConfiguration\u5c5e\u6027\u503c\n            AnnotationAttributes defaultAttributes = AnnotationAttributes.fromMap(attributes);\n            if (defaultAttributes.getClassArray(\"defaultConfiguration\") != null) {\n                // \u751f\u6210\u540d\u79f0\n                String name = \"default.\" + BeanClassLoaderAware.class.getName();\n                // \u6ce8\u518cclient\u914d\u7f6e\n                BeanDefinitionBuilder builder = BeanDefinitionBuilder.genericBeanDefinition(BeanClassLoaderAware.class);\n                builder.addPropertyValue(\"clientConfig\", defaultAttributes.getClassArray(\"defaultConfiguration\"));\n                registry.registerBeanDefinition(name, builder.getBeanDefinition());\n            }\n        }\n    }", "CodeBleu_score": 45.77610706194948}]}
{"instance_id": "dbc92d8f146f", "generation_result": [{"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t        ILoadBalancer loadBalancer = getLoadBalancer(serviceId);\n        if (loadBalancer == null) {\n            return null;\n        }\n        Server server = loadBalancer.chooseServer(request != null ? request.getLoadBalancerKey() : null);\n        if (server == null) {\n            return null;\n        }\n        return new TutuServiceInstance(serviceId, server.getHost(), server.getPort());\n    }", "CodeBleu_score": 59.23693348218316}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    ILoadBalancer loadBalancer = getLoadBalancer(serviceId);\n    if (loadBalancer == null) {\n        return null;\n    }\n    Server server = loadBalancer.chooseServer(request != null ? request.getLoadBalancerKey() : null);\n    if (server == null) {\n        return null;\n    }\n    return new TutuServiceInstance(server, serviceId);\n}", "CodeBleu_score": 51.96218969811799}, {"code": "public <T> ServiceInstance choose(String serviceId, Request<T> request) {\n\t    ILoadBalancer loadBalancer = getLoadBalancer(serviceId);\n    if (loadBalancer == null) {\n        return null;\n    }\n    Server server = loadBalancer.chooseServer(request);\n    if (server == null) {\n        return null;\n    }\n    return new TutuServiceInstance(serviceId, server);\n}", "CodeBleu_score": 47.67400272114912}]}
{"instance_id": "362eadbd3c5e", "generation_result": [{"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        // Get the service instance's IP address and port\n        String ip = server.getHost();\n        int port = server.getPort();\n\n        // Reconstruct the URI by replacing the service name with the IP address and port\n        StringBuilder uri = new StringBuilder(original.getScheme()).append(\"://\").append(ip).append(\":\").append(port).append(original.getPath());\n\n        // If the original URI includes a query string, append it to the reconstructed URI\n        if (StrUtil.isNotBlank(original.getQuery())) {\n            uri.append(\"?\").append(original.getQuery());\n        }\n\n        // Return the reconstructed URI\n        return new URI(uri.toString());\n    } catch (URISyntaxException e) {\n        // If any errors occur during URI construction, throw a RuntimeException\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 55.499767018478664}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t    try {\n        String url = original.toString();\n        String host = server.getHost();\n        int port = server.getPort();\n        String serviceId = original.getHost();\n        String query = original.getQuery();\n\n        StringBuilder sb = new StringBuilder();\n        sb.append(url.substring(0, url.indexOf(serviceId) + serviceId.length()));\n        sb.append(host);\n        sb.append(\":\");\n        sb.append(port);\n        sb.append(url.substring(url.indexOf(serviceId) + serviceId.length() + host.length() + String.valueOf(port).length()));\n        if (StrUtil.isNotBlank(query)) {\n            sb.append(\"?\");\n            sb.append(query);\n        }\n\n        return new URI(sb.toString());\n    } catch (URISyntaxException e) {\n        throw new RuntimeException(e);\n    }\n}", "CodeBleu_score": 54.83936168393014}, {"code": "public URI reconstructURI(ServiceInstance server, URI original) {\n\t        try {\n            StringBuilder sb = new StringBuilder();\n            sb.append(original.getScheme());\n            sb.append(\"://\");\n            sb.append(server.getHost());\n            sb.append(\":\");\n            sb.append(server.getPort());\n            sb.append(original.getPath());\n            if (StrUtil.isNotBlank(original.getQuery())) {\n                sb.append(\"?\").append(original.getQuery());\n            }\n            return new URI(sb.toString());\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }", "CodeBleu_score": 72.65068502731539}]}
{"instance_id": "6801d2b2e4c8", "generation_result": [{"code": "private List<TutuServer> getServer(){\n\t    String server = discoveryProperties.getServer();\n    String serviceName = discoveryProperties.getService();\n    String url = server + \"/list\";\n    Map<String, Object> paramMap = new HashMap<>();\n    paramMap.put(\"serviceName\", serviceName);\n    String result = HttpUtil.get(url, paramMap);\n    List<TutuServer> tutuServerList = JSON.parseArray(result, TutuServer.class);\n    return tutuServerList.stream().map(tutuServer -> new TutuServer(tutuServer.getIp(), tutuServer.getPort())).collect(Collectors.toList());\n}", "CodeBleu_score": 41.86612917160674}, {"code": "private List<TutuServer> getServer(){\n\t    // Construct parameters\n    Map<String, Object> params = new HashMap<>();\n    params.put(\\\"serviceName\\\", serviceId);\n    // Send HTTP GET request to the discovery service\n    String response = HttpUtil.get(discoveryProperties.getServerAddr() + \\\"/list\\\", params);\n    // Parse the JSON array into a list of TutuServer objects\n    List<TutuServer> serverList = JSON.parseArray(response, TutuServer.class);\n    return serverList;\n}", "CodeBleu_score": 25.20669404768966}, {"code": "private List<TutuServer> getServer(){\n\t    // Construct the parameters\n    Map<String, Object> params = new HashMap<>();\n    params.put(\"serviceName\", serviceId);\n    // Send the GET request to the discovery service\n    String response = HttpUtil.get(discoveryProperties.getServerAddr() + \"/list\", params);\n    // Parse the JSON array into a list of TutuServer objects\n    List<TutuServer> serverList = JSON.parseArray(response, JSONObject.class)\n            .stream()\n            .map(jsonObject -> new TutuServer(jsonObject.getString(\"ip\"), jsonObject.getInteger(\"port\")))\n            .collect(Collectors.toList());\n    return serverList;\n}", "CodeBleu_score": 54.79647620878671}]}
{"instance_id": "ab2fb77484fd", "generation_result": [{"code": "public Route getMatchingRoute(String path){\n\t\t\tfor (Map.Entry<String, ZuulProperties.ZuulRoute> entry : zuulProperties.getRoutes().entrySet()) {\n\t\t\tZuulProperties.ZuulRoute zuulRoute = entry.getValue();\n\t\t\tif (pathMatcher.match(zuulRoute.getPath(), path)) {\n\t\t\t\tString targetPath = path.substring(zuulRoute.getPath().length());\n\t\t\t\treturn new Route(path, targetPath, zuulRoute.getServiceId());\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 61.1069613584898}, {"code": "public Route getMatchingRoute(String path){\n\t\t\tfor (Map.Entry<String, ZuulProperties.ZuulRoute> entry : zuulProperties.getRoutes().entrySet()) {\n\t\t\tZuulProperties.ZuulRoute route = entry.getValue();\n\t\t\tif (pathMatcher.match(route.getPath(), path)) {\n\t\t\t\tString targetPath = path.replace(route.getPath(), \\\"\\\");\n\t\t\t\treturn new Route(route.getServiceId(), targetPath);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 45.58691776216684}, {"code": "public Route getMatchingRoute(String path){\n\t\t\tMap<String, ZuulRoute> routes = zuulProperties.getRoutes();\n\t\tfor (ZuulRoute route : routes.values()) {\n\t\t\tif (pathMatcher.match(route.getPath(), path)) {\n\t\t\t\tString targetPath = path.replace(route.getPath(), route.getUrl());\n\t\t\t\treturn new Route(targetPath, route.getServiceId());\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}", "CodeBleu_score": 39.86327837412518}]}
{"instance_id": "822071925513", "generation_result": [{"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    // Get the package name of the importing class\n    String packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n    // Scan for classes annotated with @FeignClient within the package\n    Set<Class<?>> classes = ClassUtil.scanPackageByAnnotation(packageName, FeignClient.class);\n    // Iterate over the classes and register them as bean definitions\n    for (Class<?> clazz : classes) {\n        // Create a GenericBeanDefinition instance for the class\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        // Set the bean class to the annotated class\n        beanDefinition.setBeanClass(clazz);\n        // Set the contextId and type properties for the FeignClientFactoryBean\n        beanDefinition.getPropertyValues().add(\"contextId\", clazz.getName());\n        beanDefinition.getPropertyValues().add(\"type\", clazz);\n        // Register the bean definition with the BeanDefinitionRegistry using the class name as the bean name\n        registry.registerBeanDefinition(clazz.getName(), beanDefinition);\n    }\n}", "CodeBleu_score": 54.66401167873662}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t        // Get the package name of the importing class\n        String packageName = ClassUtils.getPackageName(importingClassMetadata.getClassName());\n        // Get all classes within the package that are annotated with @FeignClient\n        Set<Class<?>> classes = ClassUtil.scanPackageByAnnotation(packageName, FeignClient.class);\n        // Iterate through the classes\n        for (Class<?> clazz : classes) {\n            // Get the name of the class\n            String className = clazz.getName();\n            // Create a GenericBeanDefinition for the class\n            GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n            // Set the bean class to the FeignClientFactoryBean class\n            beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n            // Set the contextId to the class name\n            beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(className);\n            // Set the type to the class itself\n            beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(clazz);\n            // Register the bean definition with the bean name as the class name\n            registry.registerBeanDefinition(className, beanDefinition);\n        }\n    }", "CodeBleu_score": 59.94063299641431}, {"code": "public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry){\n\t    String[] packages = getPackagesToScan(importingClassMetadata);\n    Set<Class<?>> classes = ClassUtil.scanPackageByAnnotation(packages, FeignClient.class);\n    for (Class<?> clazz : classes) {\n        // \u521b\u5efabean\u5b9a\u4e49\n        GenericBeanDefinition beanDefinition = new GenericBeanDefinition();\n        // \u8bbe\u7f6ebean\u7c7b\u578b\n        beanDefinition.setBeanClass(FeignClientFactoryBean.class);\n        // \u8bbe\u7f6ebean\u540d\u79f0\n        beanDefinition.setBeanClassName(clazz.getName());\n        // \u8bbe\u7f6ebean\u4f5c\u7528\u57df\n        beanDefinition.setScope(BeanDefinition.SCOPE_SINGLETON);\n        // \u8bbe\u7f6ebean\u521d\u59cb\u5316\u65b9\u6cd5\n        beanDefinition.setInitMethodName(\"init\");\n        // \u8bbe\u7f6ebean\u4f9d\u8d56\n        beanDefinition.getConstructorArgumentValues().addGenericArgumentValue(clazz);\n        // \u8bbe\u7f6ebean\u5c5e\u6027\n        beanDefinition.getPropertyValues().add(\"contextId\", clazz.getName());\n        beanDefinition.getPropertyValues().add(\"type\", clazz);\n        // \u6ce8\u518cbean\u5b9a\u4e49\n        registry.registerBeanDefinition(ClassUtils.getShortName(clazz), beanDefinition);\n    }\n}", "CodeBleu_score": 59.54079231678079}]}
{"instance_id": "3d678e3bf3c8", "generation_result": [{"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t        return new TutuDiscoveryClient(tutuDiscoveryProperties);\n    }", "CodeBleu_score": 71.49137238806647}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t        return new TutuDiscoveryClient(tutuDiscoveryProperties);\n    }", "CodeBleu_score": 71.49137238806647}, {"code": "public TutuDiscoveryClient tutuDiscoveryClient(TutuDiscoveryProperties tutuDiscoveryProperties){\n\t        return new TutuDiscoveryClient(tutuDiscoveryProperties);\n    }", "CodeBleu_score": 71.49137238806647}]}
{"instance_id": "ede797f6a8f2", "generation_result": [{"code": "public static void setContext(String context) throws Exception    if (context == null) {\n        throw new Exception(\"Context cannot be null\");\n    }\n    String currentContext = getContext();\n    if (currentContext == null || currentContext.isEmpty()) {\n        currentContext = context;\n    } else {\n        String[] currentContextParts = currentContext.split(\"\\\\|\");\n        boolean hasSignature = false;\n        for (String part : currentContextParts) {\n            if (part.startsWith(\"signature=\")) {\n                hasSignature = true;\n                break;\n            }\n        }\n        if (!hasSignature) {\n            currentContext += \"|\" + context;\n        }\n    }\n    setCallerContext(currentContext);\n}", "CodeBleu_score": 30.427515987002003}, {"code": "public static void setContext(String context) throws Exception    String currentContext = getContext();\n    if (currentContext == null || currentContext.isEmpty()) {\n        currentContext = \"context=\" + context;\n    } else {\n        if (!currentContext.contains(\"signature=\")) {\n            currentContext += \",\" + context;\n        }\n    }\n    setCallerContext(currentContext);\n}", "CodeBleu_score": 26.74380775891447}, {"code": "public static void setContext(String context) throws Exception    if (callerContext == null || !callerContext.isValid()) {\n        callerContext = new CallerContext(context);\n        callerContext.set();\n    } else if (!callerContext.isValid() && !callerContext.getContext().contains(context)) {\n        callerContext.appendContext(context);\n        callerContext.set();\n    }\n}", "CodeBleu_score": 28.728766112142708}]}
{"instance_id": "ac87e1b9a54e", "generation_result": [{"code": "private void addSourceFileByType(String filePath)    if (filePath.endsWith(fileType)) {\n        logger.info(\"Adding source file: \" + filePath);\n        sourceFiles.add(filePath);\n    } else {\n        logger.error(\"Unsupported file type: \" + filePath);\n        throw new UnsupportedFileTypeException(\"Unsupported file type: \" + filePath);\n    }\n}", "CodeBleu_score": 14.990430594673759}, {"code": "private void addSourceFileByType(String filePath)    String fileType = getFileType(filePath);\n    if (fileType.equals(getFileType())) {\n        log.info(\"Adding file {} to source files list\", filePath);\n        sourceFiles.add(filePath);\n    } else {\n        log.error(\"Unsupported file type: {}\", fileType);\n        throw new UnsupportedFileTypeException(\"Unsupported file type: \" + fileType);\n    }\n}", "CodeBleu_score": 22.50152097472987}, {"code": "private void addSourceFileByType(String filePath)    if (filePath.endsWith(fileType)) {\n        log.info(\"Adding file {} to source files list\", filePath);\n        sourceFiles.add(filePath);\n    } else {\n        log.error(\"Unsupported file type: {}\", filePath);\n        throw new IllegalArgumentException(\"Unsupported file type: \" + filePath);\n    }\n}", "CodeBleu_score": 15.544805531288407}]}
