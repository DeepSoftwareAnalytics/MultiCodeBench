{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids', [])\n    if attachment_ids:\n        attachment_ids = [int(attachment_id) for attachment_id in attachment_ids]\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    content = attachments.export_zip()\n    headers = _get_zip_headers(content, 'attachments.zip')\n    return request.make_response(content, headers)\n", "CodeBleu_score": 50.60142400664186}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return request.not_found()\n    attachment_ids = [int(attachment_id) for attachment_id in attachment_ids.split(',')]\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.not_found()\n    for attachment in attachments:\n        if not attachment.check_access_rule('read'):\n            return request.not_found()\n    zip_filename = 'attachments.zip'\n    content = attachments.export_zip()\n    headers = _get_zip_headers(content, zip_filename)\n    return request.make_response(content, headers=headers)", "CodeBleu_score": 45.399152214147804}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = request.env['ir.attachment'].browse(args.get('attachment_ids'))\n    for attachment in attachment_ids:\n        attachment.check_access_rights('read')\n        attachment.check_access_rule('read')\n    zip_content = attachment_ids.export_zip()\n    zip_filename = attachment_ids._get_zip_filename()\n    return request.make_response(zip_content, headers=_get_zip_headers(zip_content, zip_filename), cookies=None)", "CodeBleu_score": 36.75209942727243}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            invoice_count = 0\n        else:\n            invoice_count = request.env['account.move'].search_count([\n                ('move_type', 'in', ['out_invoice', 'out_refund']),\n                ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id)\n            ])\n        values['invoice_count'] = invoice_count\n    if 'bill_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            bill_count = 0\n        else:\n            bill_count = request.env['account.move'].search_count([\n                ('move_type', 'in', ['in_invoice', 'in_refund']),\n                ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id)\n            ])\n        values['bill_count'] = bill_count\n    return values\n\n\n", "CodeBleu_score": 53.86370653080499}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"Sorry, you are not allowed to access this document.\"))\n        invoices = request.env['account.move'].search_count([\n            ('move_type', 'in', ('out_invoice', 'out_refund', 'out_receipt')),\n            ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id),\n        ])\n        values['invoice_count'] = invoices\n    if 'bill_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"Sorry, you are not allowed to access this document.\"))\n        bills = request.env['account.move'].search_count([\n            ('move_type', 'in', ('in_invoice', 'in_refund', 'in_receipt')),\n            ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id),\n        ])\n        values['bill_count'] = bills\n    return values\n\n\n", "CodeBleu_score": 49.17372729677301}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super()._prepare_home_portal_values(counters)\n    if 'invoice_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"Sorry, you are not allowed to access this document.\"))\n        invoices_count = request.env['account.move'].search_count([\n            ('move_type', 'in', ('out_invoice', 'out_refund')),\n            ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id),\n            ('state', 'not in', ('draft', 'cancel'))\n        ])\n        values['invoice_count'] = invoices_count\n    if 'bill_count' in counters:\n        if not request.env['account.move'].check_access_rights('read', raise_exception=False):\n            raise AccessError(_(\"Sorry, you are not allowed to access this document.\"))\n        bills_count = request.env['account.move'].search_count([\n            ('move_type', 'in', ('in_invoice', 'in_refund')),\n            ('partner_id', 'child_of', request.env.user.partner_id.commercial_partner_id.id),\n            ('state', 'not in', ('draft', 'cancel'))\n        ])\n        values['bill_count'] = bills_count\n    return values\n\n\n", "CodeBleu_score": 48.16765646499634}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    Invoices = request.env['account.move']\n    domain = self._get_invoices_domain(m_type=filterby)\n\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    # default sort by value\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    # count for pager\n    invoice_count = Invoices.search_count(domain)\n    # pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'sortby': sortby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n\n    # content according to pager and archive selected\n    invoices = Invoices.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': searchbar_sortings,\n        'sortby': sortby\n    })\n    return request.render(\"account.portal_my_invoices\", values)\n\n", "CodeBleu_score": 41.9383506355787}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n    values = self._prepare_portal_layout_values()\n    AccountInvoice = request.env['account.move']\n    AccountInvoiceLine = request.env['account.move.line']\n    domain = []\n\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    if not sortby:\n        sortby = 'date'\n    sort_order = searchbar_sortings[sortby]['order']\n\n    searchbar_filters = self._get_account_searchbar_filters()\n    if not filterby:\n        filterby = 'all'\n    domain += searchbar_filters[filterby]['domain']\n\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n\n    # count for pager\n    invoice_count = AccountInvoice.search_count(domain)\n    # pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n    # content according to pager and archive selected\n    invoices = AccountInvoice.search(domain, order=sort_order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': searchbar_sortings,\n        'sortby': sortby,\n        'searchbar_filters': OrderedDict(sorted(searchbar_filters.items())),\n        'filterby': filterby,\n    })\n    return request", "CodeBleu_score": 39.29559533220742}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t\n\n    values = self._prepare_portal_layout_values()\n    AccountInvoice = request.env['account.move']\n    AccountInvoiceLine = request.env['account.move.line']\n    domain = self._get_invoices_domain(filterby)\n\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    # default sort by value\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n\n    # archive groups - Default Group By 'account.move'\n    archive_groups = self._get_archive_groups('account.move', domain)\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n\n    # count for pager\n    invoice_count = AccountInvoice.search_count(domain)\n    # pager\n    pager = portal_pager(\n        url=\"/my/invoices\",\n        url_args={'date_begin': date_begin, 'date_end': date_end, 'sortby': sortby, 'filterby': filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n\n    # content according to pager and archive selected\n    invoices = AccountInvoice.search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n\n    values.update({\n        'date': date_begin,\n        'invoices': invoices,\n        'page_name': 'invoice',\n        'pager': pager,\n        'archive_groups': archive_groups,\n        'default_url': '/my/invoices',\n        'searchbar_sortings': searchbar_sortings,\n        'sortby': sortby,\n        'filterby': filterby,\n    })\n    return request.render(\"account.portal_my", "CodeBleu_score": 40.13861953747876}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n\n    if report_type == 'zip':\n        # Get report binary content\n        pdf_content = self._show_report(model=invoice_sudo, report_type='pdf', report_ref='account.account_invoices', download=True)\n        zip_filename = 'invoice_%s' % invoice_sudo.name\n        zip_filename = zip_filename.replace('/', '_')\n        zip_file = io.BytesIO()\n        zip_file.write(pdf_content)\n        if invoice_sudo.attachment_ids:\n            zip_filename += '.zip'\n            with zipfile.ZipFile(zip_file, 'a', zipfile.ZIP_DEFLATED) as zip_file_writer:\n                for attachment in invoice_sudo.attachment_ids:\n                    zip_file_writer.write(attachment._full_path(attachment.store_fname), attachment.name)\n        headers = _get_zip_headers(zip_filename)\n        return request.make_response(zip_file.getvalue(), headers=headers)\n\n    values.update({'report_type': report_type})\n    return request.render(\"account.portal_invoice_page\", values)\n", "CodeBleu_score": 56.86853979065538}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token=access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    if not has_unsplash_key_installed():\n        return request.render(\"account.portal_invoice_page\", {\n            'invoice': invoice_sudo,\n            'redirect_url': '/my/invoices',\n        })\n\n    if invoice_sudo.state == 'posted' and report_type == 'zip':\n        # 1. call render\n        html = request.env.ref('account.account_invoices_without_payment').render({\n            'docs': invoice_sudo,\n        })\n        # 2. generate the b64 of the rendered html\n        b64_pdf = base64.b64encode(html[0])\n        # 3. generate the attachment\n        attachments = request.env['ir.attachment'].sudo().create({\n            'name': 'invoice.pdf',\n            'type': 'binary',\n            'datas': b64_pdf,\n            'res_model': 'account.move',\n            'res_id': invoice_sudo.id,\n        })\n        # 4. get the report action from the attachment\n        report = request.env.ref('base.ir_actions_report').sudo()._get_report_from_name('account.account_invoices_without_payment')\n        # 5. get the report content\n        pdf = report._render_qweb_pdf([invoice_sudo.id])[0]\n        # 6. get the zip content\n        zip_content = io.BytesIO()\n        zip_file = zipfile.ZipFile(zip_content, 'w')\n        zip_file.writestr('%s", "CodeBleu_score": 52.22504146052247}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\t\n\n    try:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.action_report_invoice', download=download)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n\n    if report_type == 'zip':\n        # Get visible attachement\n        visible_attachments = request.env['ir.attachment'].sudo().search([\n            ('res_model', '=', 'account.move'),\n            ('res_id', '=', invoice_id),\n            ('public', '=', True),\n            ('access_token', '=', access_token),\n        ])\n        # Prepare attachment to zip\n        zip_attachments = []\n        for attachment in visible_attachments:\n            zip_attachments.append({\n                'name': attachment.name,\n                'content': attachment.raw,\n            })\n        # Create zip file in memory\n        file_content, file_type = request.env['ir.actions.report'].sudo()._zip_report(zip_attachments)\n        # Display file in browser\n        return request.make_response(file_content, headers=[\n            ('Content-Type', file_type),\n            ('Content-Disposition', content_disposition('%s - %s' % (invoice_sudo.name, _('Attachments'))))\n        ])\n\n    values.update({'report_type': report_type})\n    return request.render(\"account.portal_invoice_page\", values)\n", "CodeBleu_score": 53.752365649707656}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t\n    # This is a generator because data created here might be referenced by xml_id to data\n    # created later but defined in this same function.\n    product_templates = self.env['product.template'].search([('company_id', '=', company.id)])\n    if company.account_sale_tax_id:\n        product_templates.write({'taxes_id': [(4, company.account_sale_tax_id.id, False)]})\n    if company.account_purchase_tax_id:\n        product_templates.write({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id, False)]})\n\n", "CodeBleu_score": 18.488392195145735}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_templates = self.env[\"product.template\"].search(\n        [(\"company_id\", \"=\", company.id)]\n    )\n    if company.account_sale_tax_id:\n        product_templates.write(\n            {\"taxes_id\": [(4, company.account_sale_tax_id.id, 0)]}\n        )\n    if company.account_purchase_tax_id:\n        product_templates.write(\n            {\"supplier_taxes_id\": [(4, company.account_purchase_tax_id.id, 0)]}\n        )\n\n", "CodeBleu_score": 19.927434032850382}, {"code": "def _get_demo_data_products(self, company=False)\n\t\n    product_templates = self.env['product.template'].search(self._get_product_templates_domain(company))\n    if company.account_sale_tax_id:\n        product_templates.update({'taxes_id': [(4, company.account_sale_tax_id.id)]})\n    if company.account_purchase_tax_id:\n        product_templates.update({'supplier_taxes_id': [(4, company.account_purchase_tax_id.id)]})\n\n", "CodeBleu_score": 18.762864055093427}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    # Search for the account using the company's ID and the xml_id in the 'ir.model.data' model\n    account = self.env['ir.model.data'].xmlid_to_res_id_and_model(\n        'account.account_' + xml_id, raise_if_not_found=False\n    )\n    if account:\n        return self.env['account.account'].browse(account[0])\n\n    # Search for an account matching the account_type within the company's domain\n    domain = [('company_id', '=', company.id), ('user_type_id.type', '=', account_type)]\n    account = self.env['account.account'].search(domain, limit=1)\n    if account:\n        return account\n\n    # Return the first account within the company's domain\n    return self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n", "CodeBleu_score": 47.4384914311025}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['account.account'].search([('company_id', '=', company.id), ('xml_id', '=', xml_id)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', 'in', company.ids), ('user_type_id.type', '=', account_type)], limit=1)\n    return account\n\n", "CodeBleu_score": 38.897592307987026}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env['ir.model.data'].search([('module', '=', 'account'), ('name', '=', xml_id)])\n    if account:\n        return self.env['account.account'].browse(account.res_id).with_company(company)\n    else:\n        domain = [('deprecated', '=', False), ('company_id', '=', company.id)]\n        if account_type == 'liquidity':\n            domain += [('account_type', 'in', ('asset_cash', 'liability_credit_card'))]\n        elif account_type == 'current_liability':\n            domain += [('account_type', 'in', ('liability_current', 'liability_non_current'))]\n        elif account_type == 'equity':\n            domain += [('account_type', 'in', ('equity',))]\n        elif account_type == 'income':\n            domain += [('account_type', 'in', ('income',))]\n        elif account_type == 'expense':\n            domain += [('account_type', 'in', ('expense',))]\n        elif account_type == 'off_balance':\n            domain += [('account_type', 'in', ('asset', 'liability'))]\n        elif account_type == 'income_other':\n            domain += [('account_type', 'in', ('income_other',))]\n        elif account_type == 'expense_direct_cost':\n            domain += [('account_type', 'in', ('expense_direct_cost',))]\n        elif account_type == 'income_other':\n            domain += [('account_type', 'in', ('income_other',))]\n        elif account_type == 'cost_of_goods_sold':\n            domain += [('account_type', 'in', ('expense',))]\n        return self.env['account.account'].search(domain, limit=1)\n", "CodeBleu_score": 42.117407154272954}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company, accounts in groupby(self, key=lambda a: a.company_id):\n        accounts = list(accounts)\n        if any(a.account_type == 'current_year_earnings' for a in accounts) and len(accounts) > 1:\n            raise ValidationError(_('There can only be one account of type \"Current Year Earnings\" per company.'))\n\n", "CodeBleu_score": 25.723546553456593}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company, accounts in groupby(self, key=lambda a: a.company_id):\n        current_year_earning_accounts = [a for a in accounts if a.account_type == 'current_year_earning']\n        if len(current_year_earning_accounts) > 1:\n            raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company. (company: %s)', company.name))\n\n", "CodeBleu_score": 28.75969763673713}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t\n    for company_id, accounts in groupby(self, lambda a: a.company_id):\n        current_year_earning_accounts = [a for a in accounts if a.account_type == 'current_year_earning']\n        if len(current_year_earning_accounts) > 1:\n            raise ValidationError(_('There can only be one account with the \"Current Year Earnings\" type for each company. (company: %s)', company_id.name))\n\n", "CodeBleu_score": 27.23510121814919}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('default_move_type') and self._context.get('default_partner_id'):\n        domain = [('id', 'in', self._get_most_frequent_accounts_for_partner(self._context.get('default_company_id'), self._context.get('default_partner_id'), self._context.get('default_move_type')))]\n    else:\n        domain = expression.AND([domain or [], args])\n    return self._search(domain, limit=limit, access_rights_uid=name_get_uid, order=order)\n\n", "CodeBleu_score": 37.72463886056653}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('default_account_id') and self._context.get('default_partner_id') and self._context.get('default_move_type'):\n        return self._order_accounts_by_frequency_for_partner(self._context.get('default_company_id'), self._context.get('default_partner_id'), self._context.get('default_move_type'))\n    domain = domain or []\n    if name:\n        domain = expression.AND([domain, [('name', operator, name)]])\n    return self._search(domain, limit=limit, order=order, access_rights_uid=name_get_uid)\n\n", "CodeBleu_score": 41.45653871274559}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('default_partner_id') and self._context.get('default_move_type'):\n        most_frequent_accounts = self._order_accounts_by_frequency_for_partner(self._context.get('default_company_id'), self._context.get('default_partner_id'), self._context.get('default_move_type'))\n        if most_frequent_accounts:\n            return self.browse(most_frequent_accounts).name_get()\n    domain = self._get_name_search_domain(name, operator, domain)\n    return self._search(domain, limit=limit, order=order)\n\n", "CodeBleu_score": 38.229937711073184}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    new.copy_translations(exclude=excluded + ('name',))\n    if new.name and new.code:\n        new.with_context(lang=None).name = f\"{new.code} {new.name}\"\n\n", "CodeBleu_score": 17.475312331565075}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    self.ensure_one()\n    self.env['ir.translation'].search([\n        ('type', '=', 'model'),\n        ('name', '=', f\\\"{self._name},name\\\"),\n        ('res_id', '=', self.id),\n        ('lang', '=', self.env.lang),\n    ]).write(dict(res_id=new.id))\n    for field in self._fields.values():\n        if field.name not in excluded and field.name != 'name':\n            self.env['ir.translation'].search([\n                ('type', '=', 'model'),\n                ('name', '=', f\\\"{self._name},{field.name}\\\"),\n                ('res_id', '=', self.id),\n                ('lang', '=', self.env.lang),\n            ]).write(dict(res_id=new.id))\n    if new.name.startswith(f\\\"{self.name} (\\\"):\n        self.env['ir.translation'].search([\n            ('type', '=', 'model'),\n            ('name', '=', f\\\"{self._name},name\\\"),\n            ('res_id', '=', new.id),\n            ('lang', '=', self.env.lang),\n        ]).write(dict(value=new.name))\n\n\n\n", "CodeBleu_score": 31.823388789010455}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    self.ensure_one()\n    excluded = set(excluded)\n    excluded.add('name')\n    self.env['ir.translation'].sudo().search([\n            ('name', 'in', [f\\\"{self._name},{self.id}\\\", f\\\"{new._name},{new.id}\\\"]),\n            ('lang', '=', self.env.lang),\n            ('res_field', 'not in', excluded),\n        ]).copy(default={\n            'name': f\\\"{new._name},{new.id}\\\",\n            'res_id': new.id,\n        })\n    if self.env.context.get('copy_name'):\n        new_name = self.env.context.get('copy_name') % (new.code or '', new.name or '')\n        self.env['ir.translation'].sudo().search([\n            ('name', 'in', [f\\\"{self._name},{self.id},name\\\", f\\\"{new._name},{new.id},name\\\"]),\n            ('lang', '=', self.env.lang),\n        ]).write(dict(value=new_name))\n\n\n", "CodeBleu_score": 34.817627929600214}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    self.ensure_one()\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT move_id FROM\n        ({query_string}) distribution\n        WHERE account_id = %s\n    \"\"\"\n    self._cr.execute(query_string, query_param + [self.id])\n    move_ids = [res['move_id'] for res in self._cr.dictfetchall()]\n    action = self.env['ir.actions.act_window']._for_xml_id('account.action_move_out_invoice_type')\n    action['context'] = {\n        'create': False,\n        'edit': False,\n        'view_no_maturity': True,\n    }\n    action['domain'] = [('id', 'in', move_ids)]\n    return action\n\n", "CodeBleu_score": 41.682841008351936}, {"code": "def action_view_invoice(self)\n\t\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search(\n        [\n            ('parent_state', '=', 'posted'),\n            ('move_id.move_type', 'in', sale_types),\n        ]\n    )\n    query.add_where(\n        SQL(\n            \"\"\"%s && %s\"\"\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        \"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n\n    self._cr.execute(query_string, query_param)\n    move_ids = [res['move_id'] for res in self._cr.dictfetchall()]\n\n    return {\n        'name': _('Customer Invoices'),\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'view_type': 'form',\n        'context': {'tree_view_ref': 'account.view_move_tree', 'form_view_ref': 'account.view_move_form'},\n        'domain': [('id', 'in', move_ids)],\n    }\n\n", "CodeBleu_score": 42.556937765649565}, {"code": "def action_view_invoice(self)\n\t\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search(\n        [\n            ('parent_state', '=', 'posted'),\n            ('move_id.move_type', 'in', sale_types),\n        ]\n    )\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, array_agg(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['array_agg'] for res in self._cr.dictfetchall()}\n\n    return {\n        'name': _('Customer Invoices'),\n        'res_model': 'account.move',\n        'type': 'ir.actions.act_window',\n        'view_mode': 'tree,form',\n        'context': {'create': False, 'edit': False, 'delete': False},\n        'domain': [('id', 'in', data.get(self.id, []))],\n    }\n\n", "CodeBleu_score": 39.98523188100719}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(SQL(\"\"\"\n            %s && %s\n        \"\"\", [str(self.id)], self.env['account.move.line']._query_analytic_accounts()))\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result", "CodeBleu_score": 75.05646138047692}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(SQL(\"\"\"%s && %s\"\"\", [str(self.id)], self.env['account.move.line']._query_analytic_accounts()))\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result", "CodeBleu_score": 74.46976958326921}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result", "CodeBleu_score": 81.3073871986824}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        attachments = values.pop('attachment_ids')\n        for stmt in self:\n            stmt.attachment_ids = attachments\n    else:\n        with self._check_attachments(self, [values]):\n            return super().write(values)\n\n", "CodeBleu_score": 43.502960285660315}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        attachments = values.pop('attachment_ids')\n    else:\n        attachments = []\n\n    res = super().write(values)\n\n    if attachments:\n        self.env['ir.attachment'].browse(attachments).write({'res_id': self.id, 'res_model': self._name})\n\n    return res\n\n", "CodeBleu_score": 47.622641618985966}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values:\n        attachment_ids = values.pop('attachment_ids')\n        for stmt in self:\n            attachments = self.env['ir.attachment'].browse(attachment_ids)\n            attachments.write({'res_id': stmt.id, 'res_model': stmt._name})\n    return super().write(values)\n\n", "CodeBleu_score": 36.75384608548627}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.company_id.account_bank_reconciliation_start:\n        return self.env['account.account'].browse()\n\n    bank_account = self.env['res.partner.bank'].search([('acc_number', '=', self.account_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n    if not bank_account:\n        bank_account = self.env['res.partner.bank'].create({\n            'acc_number': self.account_number,\n            'partner_id': self.partner_id.id,\n            'company_id': self.company_id.id,\n            'currency_id': self.currency_id.id,\n        })\n    return bank_account\n\n", "CodeBleu_score": 60.64966833595762}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.company_id.account_bank_reconciliation_start:\n        return self.env['res.partner.bank'].search([\n            ('sanitized_acc_number', '=', self.sanitized_acc_number),\n            ('partner_id', '=', self.partner_id.id),\n            ('company_id', '=', self.company_id.id),\n        ], limit=1)\n    return self.env['res.partner.bank'].browse()\n", "CodeBleu_score": 26.171227951242027}, {"code": "def _find_or_create_bank_account(self)\n\t\n    self.ensure_one()\n    if self.journal_id.company_id.create_bank_account_from_onboarding:\n        return self.env['res.partner.bank'].search([('sanitized_acc_number', '=', self.acc_number), ('partner_id', '=', self.partner_id.id)], limit=1)\n    return self.env['res.partner.bank'].browse()\n", "CodeBleu_score": 21.101192026878106}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    if currency.is_zero(amount_currency):\n        return {'transaction_amount': 0, 'journal_amount': 0, 'company_amount': 0}\n    if currency.is_zero(balance):\n        return {'transaction_amount': 0, 'journal_amount': 0, 'company_amount': 0}\n    if currency == self.currency_id:\n        transaction_amount = amount_currency\n        journal_amount = balance\n        company_amount = balance\n    else:\n        if currency.is_zero(self.amount_currency):\n            company_amount = balance\n            transaction_amount = currency._convert(company_amount, self.currency_id, self.company_id, self.date)\n            journal_amount = currency._convert(transaction_amount, self.currency_id, self.company_id, self.date)\n        else:\n            company_amount = currency._convert(self.amount_currency, self.currency_id, self.company_id, self.date)\n            transaction_amount = currency._convert(company_amount, self.currency_id, self.company_id, self.date)\n            journal_amount = currency._convert(transaction_amount, self.currency_id, self.company_id, self.date)\n    return {'transaction_amount': transaction_amount, 'journal_amount': journal_amount, 'company_amount': company_amount}\n\n", "CodeBleu_score": 25.2182476261396}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    currency_id = currency.id\n    if currency.is_zero(amount_currency):\n        return {\n            'amount_currency': amount_currency,\n            'balance': balance,\n        }\n\n    if currency.is_zero(balance):\n        return {\n            'amount_currency': amount_currency,\n            'balance': balance,\n        }\n\n    # We need to ensure that the currency is the same as the currency of the statement line.\n    # We do this by using the st_line_rate in the currency of the statement line.\n    # This is because the st_line_rate is the exchange rate between the statement line currency and the company currency.\n    # We need to use the st_line_rate to convert the amount_currency to the company currency.\n    # This is because the amount_currency is the amount in the statement line currency.\n    # We need to use the st_line_rate to convert the balance to the company currency.\n    # This is because the balance is the amount in the statement line currency.\n    if currency_id != self.currency_id.id:\n        balance = currency._convert(balance, self.currency_id, self.company_id, self.date)\n        amount_currency = currency._convert(amount_currency, self.currency_id, self.company_id, self.date)\n    return {\n        'amount_currency': amount_currency,\n        'balance': balance,\n    }\n\n", "CodeBleu_score": 14.534368792509111}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_currency = self.foreign_currency_id or currency\n    if transaction_currency.is_zero(amount_currency):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n            'transaction_currency': transaction_currency,\n            'journal_currency': currency,\n            'company_currency': currency,\n        }\n    if transaction_currency == currency:\n        return {\n            'transaction_amount': amount_currency,\n            'journal_amount': amount_currency,\n            'company_amount': balance,\n            'transaction_currency': transaction_currency,\n            'journal_currency': currency,\n            'company_currency': currency,\n        }\n    if transaction_currency.is_zero(balance):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n            'transaction_currency': transaction_currency,\n            'journal_currency': currency,\n            'company_currency': currency,\n        }\n    if transaction_currency.is_zero(self.amount_currency):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n            'transaction_currency': transaction_currency,\n            'journal_currency': currency,\n            'company_currency': currency,\n        }\n    if self.currency_id.is_zero(self.amount_currency):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount': 0.0,\n            'transaction_currency': transaction_currency,\n            'journal_currency': currency,\n            'company_currency': currency,\n        }\n    if transaction_currency.is_zero(self.amount):\n        return {\n            'transaction_amount': 0.0,\n            'journal_amount': 0.0,\n            'company_amount", "CodeBleu_score": 19.969344417551905}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 79.90041073919517}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 79.90041073919517}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 79.90041073919517}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date:\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date(move.invoice_date)\n                move.with_context(check_move_validity=False)._check_fiscalyear_lock_date()\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n            move.with_context(check_move_validity=False)._check_fiscalyear_lock_date()\n\n", "CodeBleu_score": 33.69477288892257}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.is_sale_document(include_receipts=True):\n            if move.invoice_date:\n                if move.company_id.tax_report_editable_accounting_date and move.invoice_date.day != move.date.day:\n                    new_date = move.invoice_date + timedelta(days=move.company_id.tax_report_editable_accounting_date_delay)\n                    if move.date != new_date:\n                        move.date = new_date\n                        move._compute_need_recompute_dynamic_lines()\n            elif not move.date:\n                move.date = fields.Date.today()\n        else:\n            if not move.date:\n                move.date = fields.Date.today()\n\n    @api.depends('invoice_date', 'company_id')\n    def _compute_date(self):\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                if move.invoice_date:\n                    if move.company_id.tax_report_editable_accounting_date and move.invoice_date.day != move.date.day:\n                        new_date = move.invoice_date + timedelta(days=move.company_id.tax_report_editable_accounting_date_delay)\n                        if move.date != new_date:\n                            move.date = new_date\n                            move._compute_need_recompute_dynamic_lines()\n                elif not move.date:\n                    move.date = fields.Date.today()\n            else:\n                if not move.date:\n                    move.date = fields.Date.today()\n\n    @api.depends('invoice_date', 'company_id')\n    def _compute_date(self):\n        for move in self:\n            if move.is_sale_document(include_receipts=True):\n                if move.invoice_date:\n                    if move.company_id.tax_report_", "CodeBleu_score": 40.540463739310056}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.move_type == 'entry':\n            continue\n        if move.invoice_date:\n            if move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date(move.invoice_date)\n            else:\n                move.date = move.invoice_date\n        elif not move.date:\n            move.date = fields.Date.context_today(move)\n        if move.date != move._origin.date:\n            move._origin.write({'date': move.date})\n            move._origin.flush_recordset(['date'])\n            move.flush_recordset(['date'])\n            move.env.add_to_compute(move._fields['date'], move)\n\n", "CodeBleu_score": 43.062919013290625}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in ('out_invoice', 'out_refund'):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n        elif move.move_type in ('in_invoice', 'in_refund'):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 37.9998630643267}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in ('out_invoice', 'out_refund'):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        elif move.move_type in ('in_invoice', 'in_refund'):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 45.86322343125669}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.move_type in ('out_invoice', 'out_refund'):\n            move.invoice_payment_term_id = move.partner_id.property_payment_term_id.id\n        elif move.move_type in ('in_invoice', 'in_refund'):\n            move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id.id\n        else:\n            move.invoice_payment_term_id = False\n", "CodeBleu_score": 37.9998630643267}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        # Categorize taxes by their country and company\n        taxes_by_country_company = defaultdict(lambda: defaultdict(list))\n        for tax in self:\n            taxes_by_country_company[tax.country_id][tax.company_id].append(tax)\n\n        # Find the appropriate tax group for each group of taxes\n        for country, taxes_by_company in taxes_by_country_company.items():\n            for company, taxes in taxes_by_company.items():\n                # Search for a matching tax group with the same country and company\n                matching_tax_group = self.env['account.tax.group'].search([\n                    ('country_id', '=', country.id),\n                    ('company_id', '=', company.id)\n                ], limit=1)\n\n                # If no exact match is found, search for a tax group without a specified country but within the same company\n                if not matching_tax_group:\n                    matching_tax_group = self.env['account.tax.group'].search([\n                        ('country_id', '=', False),\n                        ('company_id', '=', company.id)\n                    ], limit=1)\n\n                # Assign the appropriate tax group to each tax in the group\n                for tax in taxes:\n                    tax.tax_group_id = matching_tax_group\n\n    @api.depends('invoice_repartition_line_ids.factor', 'invoice_repartition_line_ids.repartition_type', 'invoice_repartition_line_ids.account_id', 'invoice_repartition_line_ids.tag_ids', 'invoice_repartition_line_ids.analytic_account_id', 'invoice_repartition_line_ids.analytic_tag_ids', 'invoice_repartition_line_ids.sequence', 'invoice_repartition_line_ids.repartition_line_type', 'invoice_repartition_line_ids.tax_id', 'invoice_repartition_line_ids.cash_basis_base_account_id', 'invoice_repartition_line_ids.cash_basis_reciprocal", "CodeBleu_score": 34.95563994473571}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group_id = False\n        if tax.company_id and tax.country_id:\n            tax_group_id = self.env['account.tax.group'].search(\n                [('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1)\n        if not tax_group_id and tax.company_id:\n            tax_group_id = self.env['account.tax.group'].search(\n                [('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n        tax.tax_group_id = tax_group_id\n\n\n def _compute_is_used(self):\n    \"\"\"This function checks if a tax is used in any invoice line or account move line. If it is used, it sets the is_used field to True, otherwise it sets it to False.\"\"\"\n    for tax in self:\n        tax.is_used = self.env['account.move.line'].search_count([('tax_ids', 'in', tax.ids)]) or self.env['account.move.line'].search_count([('tax_ids', 'in', tax.ids)])\n\n\n def _compute_repartition_lines_str(self):\n    \"\"\"This function generates a string representation of the tax's repartition lines, including the account name and percentage. The string is stored in the repartition_lines_str field.\"\"\"\n    for tax in self:\n        repartition_lines_str = ''\n        for repartition_line in tax.repartition_line_ids:\n            repartition_lines_str += repartition_line.account_id.name + ' (' + str(repartition_line.percentage) + '%)' + '\\", "CodeBleu_score": 34.570007913624835}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax_group = self.env['account.tax.group'].search([\n            ('country_id', '=', tax.country_id.id),\n            ('company_id', '=', tax.company_id.id),\n        ], limit=1)\n        if not tax_group:\n            tax_group = self.env['account.tax.group'].search([\n                ('country_id', '=', False),\n                ('company_id', '=', tax.company_id.id),\n            ], limit=1)\n        tax.tax_group_id = tax_group\n\n    @api.depends('invoice_repartition_line_ids', 'refund_repartition_line_ids')\n    def _compute_repartition_lines_str(self):\n        for tax in self:\n            repartition_lines_str = ''\n            repartition_lines = tax.invoice_repartition_line_ids + tax.refund_repartition_line_ids\n            for line in repartition_lines:\n                repartition_lines_str += line.display_name + '\\", "CodeBleu_score": 32.68864508005328}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url, allow_redirects=False)\n    self.session.post(url + '/web/login', data={'login': login, 'password': password, 'db': db})\n    with open(module_file, 'rb') as f:\n        data = f.read()\n    try:\n        res = self.session.post(\n            url + '/base_import_module/login_upload', data={\n                'login': login,\n                'password': password,\n                'db': db,\n                'force': '1' if force else '',\n            },\n            files={'mod_file': ('module.zip', data, 'application/zip')},\n            timeout=10,\n        )\n        res.raise_for_status()\n    except requests.exceptions.HTTPError as e:\n        raise Exception(str(e)) from e\n    if res.text == 'Wrong login/password':\n        raise Exception('Wrong login/password')\n    if res.text == 'No module in file':\n        raise Exception('No module in file')\n    if res.text == 'Error: 0 - Module version not supported by server.':\n        raise Exception('Module version not supported by server.')\n    return res.text", "CodeBleu_score": 53.026226559107016}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url + '/web/login', timeout=180)\n    self.session.post(url + '/base_import_module/login_upload', data={\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': '1' if force else '',\n    }, files={'mod_file': open(module_file, 'rb')}, timeout=180)\n    response = self.session.get(url + '/web/login', timeout=180)\n    if 'Odoo Server Error' in response.text:\n        raise Exception(\"The server %s does not have the required module installed or is outdated.\" % url)\n    return response.text\n\n", "CodeBleu_score": 46.22919544122572}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t\n    self.session.get(url)\n    self.session.post(url + '/web/session/authenticate', data={\n        'login': login,\n        'password': password,\n        'db': db,\n    })\n    data = {\n        'login': login,\n        'password': password,\n        'db': db,\n        'force': '1' if force else '',\n        'module_file': open(module_file, 'rb'),\n    }\n    res = self.session.post(\n        url + '/base_import_module/login_upload',\n        files=data,\n    )\n    if 'Error' in res.text:\n        raise Exception(res.text)\n    return res.text\n\n", "CodeBleu_score": 48.89301393547522}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    dbname = config[\"db_name\"]\n    overwrite = config[\"overwrite\"]\n\n    _logger.info(\"loading translations from %s\", config[\"translate_src\"])\n\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.TranslationImporter(config[\"translate_src\"], cr)\n        importer.load_module_terms([\"all\"], overwrite)\n        importer.save_translations()\n\n    _logger.info(\"translation files imported successfully\")\n\n", "CodeBleu_score": 36.29385014800215}, {"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    dbname = config['db_name']\n\n    overwrite = config['overwrite']\n    _logger.info('loading translation file for %s', config['language'])\n\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(cr, config['language'], config['i18n_import'],\n            config['modules'], overwrite=overwrite)\n        importer.save(cr)\n\n    _logger.info('translation file loaded successfully')\n\n", "CodeBleu_score": 33.63217914765132}, {"code": "def import_translation()\n\t\n    config = odoo.tools.config\n    dbname = config[\"db_name\"]\n\n    overwrite = config[\"overwrite_existing\"]\n\n    with registry(dbname).cursor() as cr:\n        importer = TranslationImporter(cr)\n        importer.load(config[\"i18n_import_module\"])\n        importer.save(overwrite)\n\n", "CodeBleu_score": 20.117458339181454}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\t\n    node = self.graph.add_node(name, info)\n    if node not in self.children:\n        self.children.append(node)\n        node.depth = self.depth + 1\n    if self.init:\n        node.init = True\n    if self.demo:\n        node.demo = True\n    if self.update:\n        node.update = True\n    self.children.sort(key=lambda n: n.name)\n    return node\n\n", "CodeBleu_score": 45.96431578401923}, {"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        child = Node(name, self.graph, info)\n        child.depth = self.depth + 1\n        self.children.append(child)\n        if hasattr(self, 'init'):\n            child.init = self.init\n        if hasattr(self, 'demo'):\n            child.demo = self.demo\n        if hasattr(self, 'update'):\n            child.update = self.update\n        self.children.sort(key=lambda n: n.name)\n    return self.children[-1]\n\n", "CodeBleu_score": 49.88340359734069}, {"code": "def add_child(self, name, info)\n\t\n    if name not in self.children:\n        child = Node(name, self.graph, info)\n        child.depth = self.depth + 1\n        if hasattr(self, 'init'):\n            child.init = self.init\n        if hasattr(self, 'demo'):\n            child.demo = self.demo\n        if hasattr(self, 'update'):\n            child.update = self.update\n        self.children.append(child)\n        self.children.sort(key=lambda c: c.name)\n    return self.children[-1]\n\n", "CodeBleu_score": 51.32729414676254}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[d, 0.0] for d in dates]\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.account == account:\n            for i, d in enumerate(dates):\n                if getdate(entry.posting_date) <= getdate(d):\n                    result[i][1] += flt(entry.debit) - flt(entry.credit)\n        elif (\n            root_type in (\"Asset\", \"Expense\")\n            and entry.account in get_descendants_of(\"Account\", account)\n        ):\n            for i, d in enumerate(dates):\n                if getdate(entry.posting_date) <= getdate(d):\n                    result[i][1] += flt(entry.debit) - flt(entry.credit)\n        elif (\n            root_type in (\"Liability\", \"Equity\")\n            and entry.account in get_descendants_of(\"Account\", account)\n        ):\n            for i, d in enumerate(dates):\n                if getdate(entry.posting_date) <= getdate(d):\n                    result[i][1] += flt(entry.credit) - flt(entry.debit)\n\n    if root_type not in (\"Asset\", \"Expense\"):\n        for r in result:\n            r[1] = -r[1]\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i, r in enumerate(result):\n            if i > 0:\n                r[1] += result[i - 1][1]\n\n    return result\n\n", "CodeBleu_score": 39.82933192331351}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[getdate(d), 0.0] for d in dates]\n\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        if entry.account == account:\n            for i, d in enumerate(dates):\n                if getdate(entry.posting_date) <= getdate(d):\n                    result[i][1] += flt(entry.debit) - flt(entry.credit)\n\n    if root_type not in (\\\"Asset\\\", \\\"Expense\\\"):\n        for r in result:\n            r[1] = -r[1]\n\n    if root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\"):\n        for i, r in enumerate(result):\n            if i:\n                r[1] += result[i - 1][1]\n\n    return result\n\n", "CodeBleu_score": 42.152925061918026}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[getdate(date), 0.0] for date in dates]\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.account == account:\n            for i, date in enumerate(dates):\n                if getdate(entry.posting_date) <= getdate(date):\n                    result[i][1] += flt(entry.debit) - flt(entry.credit)\n    if root_type not in (\\\"Asset\\\", \\\"Expense\\\"):\n        for balance in result:\n            balance[1] = -1 * balance[1]\n    if root_type in (\\\"Asset\\\", \\\"Liability\\\", \\\"Equity\\\"):\n        for i, balance in enumerate(result):\n            if i:\n                balance[1] += result[i - 1][1]\n    return result\n\n\n\n", "CodeBleu_score": 43.562115916103636}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_new():\n        return\n\n    db_value = self.get_doc_before_save()\n    if (\n        db_value.account_type in (\"Receivable\", \"Payable\")\n        and self.account_type not in (\"Receivable\", \"Payable\")\n        and frappe.db.count(\"GL Entry\", {\"account\": self.name})\n    ):\n        frappe.msgprint(\n            _(\n                \"Account {0} has existing transactions. Please check the Accounts report before changing the account type.\"\n            ).format(self.name)\n        )\n        self.add_comment(\n            text=_(\"Account {0} has existing transactions.\").format(self.name)\n        )\n\n", "CodeBleu_score": 32.88284756223725}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in (\"Receivable\", \"Payable\"):\n        db_value = self.get_doc_before_save()\n        if db_value and db_value.account_type != self.account_type:\n            gl_entries = frappe.db.get_all(\n                \"GL Entry\",\n                filters={\"account\": self.name},\n                fields=[\"name\"],\n                limit_page_length=1,\n            )\n            if gl_entries:\n                frappe.msgprint(\n                    _(\n                        \"Accounts of type Receivable / Payable should not be changed to a non-receivable / non-payable type as it will result in inaccurate reporting. It is recommended to change the account type to Receivable / Payable in a new Account and reconcile existing entries into the new account.\"\n                    ),\n                    title=_(\"Warning\"),\n                    indicator=\"orange\",\n                )\n                self.add_comment(\n                    text=_(\n                        \"Account of type Receivable / Payable should not be changed to a non-receivable / non-payable type as it will result in inaccurate reporting. It is recommended to change the account type to Receivable / Payable in a new Account and reconcile existing entries into the new account.\"\n                    )\n                )\n\n", "CodeBleu_score": 37.14886904003436}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.get(\"__islocal\"):\n        return\n\n    old_account_type = self.get_doc_before_save().get(\"account_type\")\n    new_account_type = self.account_type\n\n    if not (old_account_type and new_account_type):\n        return\n\n    if (\n        (old_account_type in (\"Receivable\", \"Payable\"))\n        and (new_account_type not in (\"Receivable\", \"Payable\"))\n        and frappe.db.exists(\"GL Entry\", {\"account\": self.name})\n    ):\n        frappe.msgprint(\n            _(\n                \"Account {0} ({1}) has existing transactions. The account type can not be changed from {2} to {3}. Please check the Accounts Report and set the correct account type manually.\"\n            ).format(\n                self.name, self.account_name, old_account_type, new_account_type\n            )\n        )\n        self.add_comment(\n            text=_(\n                \"Account type changed from {0} to {1}. Please check the Accounts Report and set the correct account type manually.\"\n            ).format(old_account_type, new_account_type)\n        )\n\n", "CodeBleu_score": 33.48847171031364}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n\n    # If the account currency is not specified, set it to the company's default currency\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n\n    # If the account currency is specified, mark it as explicitly specified\n    if self.account_currency:\n        self.explicitly_specified_currency = True\n\n    # Check if there are existing general ledger entries with a different currency\n    if frappe.db.exists(\n        \"GL Entry\",\n        {\n            \"account\": self.name,\n            \"docstatus\": 1,\n            \"company\": self.company,\n            \"currency\": [\"not in\", [self.account_currency, None]],\n        },\n    ):\n        # If there are existing entries with a different currency, raise an error\n        frappe.throw(\n            _(\n                \"Account {0} has transactions with currency {1}, so cannot change to {2}\".format(\n                    self.name, self.account_currency, self.account_currency\n                )\n            )\n        )\n\n", "CodeBleu_score": 38.46527579816226}, {"code": "def validate_account_currency(self)\n\t\n    from erpnext.accounts.utils import get_balance_on\n\n    if self.is_group:\n        return\n\n    if self.account_currency:\n        if self.account_currency != self.company_currency:\n            self.exchange_rate = 1\n\n        if self.get_doc_before_save():\n            # if account currency changed, check if there are existing GL Entries with different currency\n            existing_gle = frappe.db.sql(\n                \"\"\"\n                SELECT currency\n                FROM `tabGL Entry`\n                WHERE account=%s\n                LIMIT 1\n                \"\"\",\n                self.name,\n            )\n            if existing_gle and existing_gle[0][0] != self.account_currency:\n                frappe.throw(\n                    _(\n                        \"Account Currency cannot be changed as there are existing transactions in different currency\"\n                    )\n                )\n\n    elif self.company_currency:\n        self.account_currency = self.company_currency\n\n    if not self.account_currency:\n        self.account_currency = frappe.get_cached_value(\n            \"Company\", self.company, \"default_currency\"\n        )\n\n    if self.account_currency:\n        self.exchange_rate = 1\n        if self.get_doc_before_save():\n            # if account currency changed, check if there are existing GL Entries with different currency\n            existing_gle = frappe.db.sql(\n                \"\"\"\n                SELECT currency\n                FROM `tabGL Entry`\n                WHERE account=%s\n                LIMIT 1\n                \"\"\",\n                self.name,\n            )\n            if existing_gle and existing_gle[0][0] != self.account_currency:\n                frappe.throw(\n                    _(\n                        \"Account Currency cannot be changed as there are existing transactions in different currency\"\n                    )\n                )\n\n", "CodeBleu_score": 38.050908306311534}, {"code": "def validate_account_currency(self)\n\t\n    if not self.get(\"__islocal\"):\n        return\n\n    if self.is_group:\n        return\n\n    if self.account_currency:\n        if self.account_currency == self.company_currency:\n            self.exchange_rate = 1.0\n        else:\n            self.exchange_rate = get_exchange_rate(self.account_currency, self.company_currency)\n\n        if self.check_gle_exists():\n            existing_gle = frappe.db.get_value(\n                \"GL Entry\",\n                filters={\n                    \"account\": self.name,\n                    \"docstatus\": (\"<\", 2),\n                    \"currency\": (\"not in\", [self.account_currency, self.company_currency]),\n                },\n                fieldname=[\"currency\"],\n            )\n            if existing_gle:\n                frappe.throw(\n                    _(\n                        \"Account Currency cannot be changed since there are transactions in {} currency. Please cancel these transactions to change the currency.\"\n                    ).format(existing_gle)\n                )\n\n        self.currency_exchange_is_manual = 0\n        self.account_currency_is_explicitly_set = 1\n    else:\n        self.account_currency = self.company_currency\n        self.exchange_rate = 1.0\n        self.currency_exchange_is_manual = 0\n        self.account_currency_is_explicitly_set = 0\n\n", "CodeBleu_score": 32.49782871830359}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = tuple(entry[dimension] for dimension in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry[\"account\"],\n                \"account_currency\": entry[\"account_currency\"],\n                \"company\": entry[\"company\"],\n                \"finance_book\": entry[\"finance_book\"],\n                \"project\": entry[\"project\"],\n                \"cost_center\": entry[\"cost_center\"],\n                \"debit\": entry[\"debit\"],\n                \"credit\": entry[\"credit\"],\n                \"debit_in_account_currency\": entry[\"debit_in_account_currency\"],\n                \"credit_in_account_currency\": entry[\"credit_in_account_currency\"],\n                \"dimensions\": {dimension: entry[dimension] for dimension in accounting_dimensions},\n            }\n        else:\n            merged_entries[key][\"debit\"] += entry[\"debit\"]\n            merged_entries[key][\"credit\"] += entry[\"credit\"]\n            merged_entries[key][\"debit_in_account_currency\"] += entry[\"debit_in_account_currency\"]\n            merged_entries[key][\"credit_in_account_currency\"] += entry[\"credit_in_account_currency\"]\n\n    return merged_entries\n\n", "CodeBleu_score": 31.993809331891743}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = get_key(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \"account\": entry[\"account\"],\n                \"account_currency\": entry[\"account_currency\"],\n                \"company\": entry[\"company\"],\n                \"finance_book\": entry[\"finance_book\"],\n                \"project\": entry[\"project\"],\n                \"cost_center\": entry[\"cost_center\"],\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"dimensions\": {dimension: entry[dimension] for dimension in accounting_dimensions},\n            }\n        merged_entries[key][\"debit\"] += entry[\"debit\"]\n        merged_entries[key][\"credit\"] += entry[\"credit\"]\n        merged_entries[key][\"debit_in_account_currency\"] += entry[\"debit_in_account_currency\"]\n        merged_entries[key][\"credit_in_account_currency\"] += entry[\"credit_in_account_currency\"]\n    return merged_entries\n\n", "CodeBleu_score": 39.374327302424874}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n\n    for entry in entries:\n        key = \" \".join(\n            [\n                cstr(entry.get(dimension))\n                for dimension in accounting_dimensions\n            ]\n        )\n        if not merged_entries.get(key):\n            merged_entries[key] = {\n                \"debit\": 0,\n                \"credit\": 0,\n                \"debit_in_account_currency\": 0,\n                \"credit_in_account_currency\": 0,\n                \"dimensions\": {\n                    dimension: entry.get(dimension)\n                    for dimension in accounting_dimensions\n                },\n            }\n        merged_entries[key][\"debit\"] += entry.get(\"debit\", 0)\n        merged_entries[key][\"credit\"] += entry.get(\"credit\", 0)\n        merged_entries[key][\"debit_in_account_currency\"] += entry.get(\n            \"debit_in_account_currency\", 0\n        )\n        merged_entries[key][\"credit_in_account_currency\"] += entry.get(\n            \"credit_in_account_currency\", 0\n        )\n\n    return merged_entries\n\n", "CodeBleu_score": 39.485572466933945}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n\n    if self.doctype in [\"Payment Entry\", \"Journal Entry\"]:\n        if self.payment_type == \"Receive\":\n            party_type = \"Supplier\"\n            party = self.party\n        else:\n            party_type = \"Customer\"\n            party = self.party\n    elif self.doctype == \"Purchase Invoice\":\n        party_type = \"Supplier\"\n        party = self.supplier\n    else:\n        return\n\n    party_details = frappe.db.get_value(\n        party_type, party, [\"account_status\", \"on_hold_since\", \"hold_type\"], as_dict=True\n    )\n\n    if party_details.account_status == \"Inactive\":\n        frappe.throw(\n            _(\"{0} {1} is inactive\").format(party_type, party),\n            title=_(\"Invalid {0}\").format(party_type),\n        )\n\n    if party_details.on_hold_since:\n        if party_details.hold_type == \"Unpaid\":\n            frappe.throw(\n                _(\"{0} {1} is on hold since {2}\").format(\n                    party_type, party, party_details.on_hold_since\n                ),\n                title=_(\"Invalid {0}\").format(party_type),\n            )\n\n", "CodeBleu_score": 27.459975030109597}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Supplier Payment\", \"Buying Invoice\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.on_hold:\n            if supplier.hold_type == \"Unpaid\":\n                if self.doctype == \"Supplier Payment\":\n                    release_date = supplier.release_date_unpaid\n                else:\n                    release_date = supplier.release_date_buying\n            elif supplier.hold_type == \"Payment\":\n                if self.doctype == \"Supplier Payment\":\n                    release_date = supplier.release_date_payment\n                else:\n                    release_date = supplier.release_date_buying\n            if release_date and getdate(release_date) > getdate():\n                frappe.throw(\n                    _(\n                        \"Cannot proceed with {0} because Supplier {1} is on hold since {2}\"\n                    ).format(self.doctype, supplier.name, release_date)\n                )\n\n", "CodeBleu_score": 27.17613486577618}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype in [\"Payment Entry\", \"Journal Entry\"]:\n        supplier = frappe.get_doc(\"Supplier\", self.party)\n    else:\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n\n    if supplier.on_hold:\n        if self.doctype == \"Payment Entry\":\n            if supplier.on_hold_since == \"Date\":\n                if getdate(supplier.on_hold_date) > getdate():\n                    frappe.throw(\n                        _(\n                            \"Transactions are restricted for this supplier until {}\"\n                        ).format(supplier.on_hold_date)\n                    )\n            elif supplier.on_hold_since == \"Amount\":\n                if supplier.unpaid_amount >= supplier.hold_amount:\n                    frappe.throw(\n                        _(\n                            \"Transactions are restricted for this supplier until the outstanding amount is paid\"\n                        )\n                    )\n        elif self.doctype in [\"Purchase Invoice\", \"Purchase Receipt\"]:\n            if supplier.on_hold_since == \"Date\":\n                if getdate(supplier.on_hold_date) > getdate():\n                    frappe.throw(\n                        _(\n                            \"Transactions are restricted for this supplier until {}\"\n                        ).format(supplier.on_hold_date)\n                    )\n            elif supplier.on_hold_since == \"Amount\":\n                if supplier.unpaid_amount >= supplier.hold_amount:\n                    frappe.throw(\n                        _(\n                            \"Transactions are restricted for this supplier until the outstanding amount is paid\"\n                        )\n                    )\n\n", "CodeBleu_score": 29.767884897610607}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = [\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"Debit Note\",\n        \"Credit Note\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Purchase Receipt\",\n        \"Delivery Note\",\n    ]\n\n    for repost_doctype in repost_doctypes:\n        repost_doc = frappe.qb.DocType(repost_doctype)\n        rows = (\n            frappe.qb.from_(repost_doc)\n            .select(repost_doc.name, repost_doc.parent)\n            .where(\n                (repost_doc.voucher_type == self.doctype)\n                & (repost_doc.voucher_no == self.name)\n            )\n            .run(as_dict=True)\n        )\n\n        if rows:\n            references_map = frappe._dict()\n            for x in rows:\n                references_map.setdefault(x.parent, []).append(x.name)\n\n            for doc, rows in references_map.items():\n                repost_doc = frappe.get_doc(repost_doctype, doc)\n                for row in rows:\n                    if repost_doctype in [\n                        \"Payment Entry\",\n                        \"Journal Entry\",\n                        \"Debit Note\",\n                        \"Credit Note\",\n                    ]:\n                        repost_doc.remove(\n                            repost_doc.get(\"repost_vouchers\", {\"name\": row})[0]\n                        )\n                    else:\n                        repost_doc.remove(repost_doc.get(\"vouchers\", {\"name\": row})[0])\n\n                repost_doc.flags.ignore_validate_update_after_submit = True\n                repost_doc.flags.ignore_links = True\n                repost_doc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 37.0103277742662}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n\n    repost_doctypes = [\n        \"Journal Entry\",\n        \"Payment Entry\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Bank Reconciliation\",\n        \"Bank Clearance\",\n        \"Bank Account\",\n    ]\n    repost_doctypes = [x for x in repost_doctypes if frappe.db.exists(\"DocType\", x)]\n\n    if not repost_doctypes:\n        return\n\n    upe = frappe.qb.DocType(\"Unreconcile Payment Entries\")\n    rows = (\n        frappe.qb.from_(upe)\n        .select(upe.name, upe.parent)\n        .where(\n            (upe.reference_doctype == self.doctype) & (upe.reference_name == self.name)\n        )\n        .run(as_dict=True)\n    )\n\n    if rows:\n        references_map = frappe._dict()\n        for x in rows:\n            references_map.setdefault(x.parent, []).append(x.name)\n\n        for doc, rows in references_map.items():\n            unreconcile_doc = frappe.get_doc(\"Unreconcile Payment\", doc)\n            for row in rows:\n                unreconcile_doc.remove(\n                    unreconcile_doc.get(\"allocations\", {\"name\": row})[0]\n                )\n\n            unreconcile_doc.flags.ignore_validate_update_after_submit = True\n            unreconcile_doc.flags.ignore_links = True\n            unreconcile_doc.save(ignore_permissions=True)\n\n    # delete docs upon parent doc deletion\n    unreconcile_docs = frappe.db.get_all(\n        \"Unreconcile Payment\", filters={\"voucher_no\": self.name}\n    )\n    for x in unreconcile_docs:\n        _doc = frappe.get_doc(\"Unreconcile Payment\", x.name)\n        if _", "CodeBleu_score": 37.439578818915464}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    repost_doctypes = [\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"Purchase Invoice\",\n        \"Sales Invoice\",\n        \"Delivery Note\",\n        \"Purchase Receipt\",\n        \"Sales Order\",\n        \"Quotation\",\n        \"Supplier Quotation\",\n        \"Purchase Order\",\n        \"Customer\",\n        \"Supplier\",\n        \"Employee Advance\",\n        \"Leave Application\",\n        \"Expense Claim\",\n        \"Auto Repeat\",\n        \"Expense Claim\",\n        \"Salary Slip\",\n        \"Purchase Order\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"Bank Account\",\n        \"Bank Guarantee\",\n        \"Bank\",\n        \"Employee Advance\",\n        \"Leave Application\",\n        \"Expense Claim\",\n        \"Auto Repeat\",\n        \"Expense Claim\",\n        \"Salary Slip\",\n        \"Purchase Order\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"Bank Account\",\n        \"Bank Guarantee\",\n        \"Bank\",\n        \"Employee Advance\",\n        \"Leave Application\",\n        \"Expense Claim\",\n        \"Auto Repeat\",\n        \"Expense Claim\",\n        \"Salary Slip\",\n        \"Purchase Order\",\n        \"Sales Order\",\n        \"Delivery Note\",\n        \"Sales Invoice\",\n        \"Purchase Invoice\",\n        \"Payment Entry\",\n        \"Journal Entry\",\n        \"Bank Account\",\n        \"Bank Guarantee\",\n        \"Bank\",\n        \"Employee Advance\",\n        \"Leave Application\",\n        \"Expense Claim\",\n        \"Auto Repeat\",\n        \"Expense Claim\",\n        \"Salary Slip\",\n        \"Purchase Order\",\n", "CodeBleu_score": 4.496601008464596}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\n            \"account_ids\": [account_id] if account_id else None,\n            \"count\": 500,\n            \"offset\": 0,\n        },\n    }\n    transactions = []\n    while True:\n        try:\n            response = self.client.Transactions.get(self.access_token, query_params)\n        except ItemError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                frappe.throw(\n                    _(\n                        \"Please wait for 1 minute before trying to sync transactions again.\"\n                    ),\n                    title=_(\"Product Not Ready\"),\n                )\n            else:\n                raise\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n            else:\n                raise\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Get transactions error\")\n            frappe.throw(_(str(e)), title=_(\"Plaid API Error\"))\n        else:\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) < response[\"total_transactions\"]:\n                query_params[\"options\"][\"offset\"] += query_params[\"options\"][\"count\"]\n            else:\n                break\n    return transactions\n\n", "CodeBleu_score": 33.53779954597213}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"access_token\": self.access_token,\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\"count\": 500},\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n    transactions = []\n    while len(transactions) < query_params[\"options\"][\"count\"]:\n        try:\n            response = self.client.Transactions.get(**query_params)\n            transactions.extend(response[\"transactions\"])\n            query_params[\"options\"][\"offset\"] = len(transactions)\n        except plaid.errors.PlaidError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                # Wait for 5 seconds before retrying\n                time.sleep(5)\n                continue\n            elif e.code == \"NO_ACCOUNTS\":\n                frappe.throw(\n                    _(\"No accounts found. Please add accounts and transactions in your bank account.\"),\n                    title=_(\"Account not found\"),\n                )\n            else:\n                raise\n        except requests.Timeout:\n            # If request timed out, retry up to 5 times\n            for i in range(5):\n                try:\n                    response = self.client.Transactions.get(**query_params)\n                    transactions.extend(response[\"transactions\"])\n                    query_params[\"options\"][\"offset\"] = len(transactions)\n                    break\n                except requests.Timeout:\n                    if i == 4:\n                        raise\n                    else:\n                        time.sleep(1)\n        except Exception as e:\n            frappe.log_error(frappe.get_traceback(), \"Plaid Transactions Error\")\n            frappe.throw(_(str(e)), title=_(\"Error retrieving transactions\"))\n    return transactions\n\n", "CodeBleu_score": 34.728280277053315}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    self.auth()\n    query_params = {\n        \"access_token\": self.access_token,\n        \"start_date\": start_date,\n        \"end_date\": end_date,\n        \"options\": {\"count\": 500, \"offset\": 0},\n    }\n    if account_id:\n        query_params[\"account_ids\"] = [account_id]\n\n    transactions = []\n    total_transactions = None\n    while len(transactions) < total_transactions or total_transactions is None:\n        try:\n            response = self.client.Transactions.get(**query_params)\n        except ItemError as e:\n            if e.code == \"PRODUCT_NOT_READY\":\n                frappe.throw(\n                    _(\"Please wait for 1 minute before trying to sync transactions again\")\n                )\n            raise\n        except APIError as e:\n            if e.code == \"PLANNED_MAINTENANCE\":\n                pass\n            raise\n        except requests.Timeout:\n            pass\n        except Exception as e:\n            frappe.log_error(\"Plaid: Authentication error\")\n            frappe.throw(_(str(e)), title=_(\"Authentication Failed\"))\n        else:\n            total_transactions = response[\"total_transactions\"]\n            transactions += response[\"transactions\"]\n            query_params[\"options\"][\"offset\"] += query_params[\"options\"][\"count\"]\n\n    return transactions\n\n", "CodeBleu_score": 36.47543522464321}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        data = json.loads(response)\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n        if frappe.db.exists(\"Bank\", {\"plaid_access_token\": access_token}):\n            bank = frappe.get_doc(\"Bank\", {\"plaid_access_token\": access_token})\n            bank.plaid_access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = data[\"institution\"][\"name\"]\n            bank.plaid_access_token = access_token\n            bank.insert()\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Error\")\n\n", "CodeBleu_score": 52.76864717595138}, {"code": "def add_institution(token, response)\n\t\n\n    # Parse the response\n    response = json.loads(response)\n    access_token = response[\"access_token\"]\n    item_id = response[\"item_id\"]\n    institution_id = response[\"institution_id\"]\n    institution_name = response[\"institution_name\"]\n    institution_logo = response[\"institution_logo\"]\n    institution_colors = response[\"institution_colors\"]\n\n    # Get access token\n    plaid = PlaidConnector()\n    access_token = plaid.get_access_token(item_id)\n\n    # Check if the bank already exists\n    bank = frappe.get_doc(\"Bank\", {\"institution_id\": institution_id})\n\n    if bank.name:\n        # Update the access token for the existing bank record\n        bank.access_token = access_token\n        bank.save()\n    else:\n        # Create a new bank record\n        bank = frappe.new_doc(\"Bank\")\n        bank.institution_id = institution_id\n        bank.institution_name = institution_name\n        bank.institution_logo = institution_logo\n        bank.institution_colors = institution_colors\n        bank.access_token = access_token\n        bank.save()\n\n    # Log the bank details\n    frappe.log_error(\n        f\"Bank Details: {bank.institution_id} - {bank.institution_name} - {bank.institution_logo} - {bank.institution_colors} - {bank.access_token}\"\n    )\n\n", "CodeBleu_score": 29.472057073382867}, {"code": "def add_institution(token, response)\n\t\n    try:\n        response = json.loads(response)\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n        institution = plaid.get_institution(access_token)\n\n        bank_exists = frappe.db.exists(\n            \"Bank\",\n            {\"plaid_institution_id\": institution[\"institution\"][\"institution_id\"]},\n        )\n\n        if bank_exists:\n            bank = frappe.get_doc(\"Bank\", bank_exists)\n            bank.plaid_access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.get_doc(\n                {\n                    \"doctype\": \"Bank\",\n                    \"bank_name\": institution[\"institution\"][\"name\"],\n                    \"plaid_institution_id\": institution[\"institution\"][\"institution_id\"],\n                    \"country\": institution[\"institution\"][\"country_codes\"][0],\n                    \"plaid_access_token\": access_token,\n                }\n            )\n            bank.insert()\n            add_tag(\"Plaid\", \"Plaid Bank\")\n    except ItemError as e:\n        frappe.log_error(e, \"Plaid Item Error\")\n    except Exception as e:\n        frappe.log_error(e, \"Plaid Item Error\")\n\n", "CodeBleu_score": 52.381665095553906}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        start_date, end_date = get_start_and_end_dates(bank, bank_account)\n        transactions = get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            new_transactions = process_transactions(bank, bank_account, transactions)\n            if new_transactions:\n                update_last_integration_date(bank, bank_account, transactions[0][\"date\"])\n                frappe.log_error(\n                    \"{} new transactions added for {}\".format(\n                        len(new_transactions), bank_account\n                    ),\n                    \"Plaid Integration\",\n                )\n    except Exception:\n        frappe.log_error(frappe.get_traceback(), \"Plaid Integration\")\n\n", "CodeBleu_score": 24.232775454505635}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        bank_account = frappe.get_doc(\"Bank Account\", bank_account)\n        plaid = PlaidConnector()\n        start_date = bank_account.last_integration_date or datetime.datetime.now() - datetime.timedelta(days=30)\n        end_date = datetime.datetime.now()\n        transactions = plaid.get_transactions(bank_account.plaid_access_token, start_date, end_date)\n        new_transactions = []\n        for transaction in transactions:\n            new_transaction = frappe.new_doc(\"Bank Transaction\")\n            new_transaction.update(transaction)\n            new_transaction.bank_account = bank_account.name\n            new_transaction.bank = bank\n            new_transaction.integration_id = transaction.get(\"transaction_id\")\n            new_transaction.insert(ignore_if_duplicate=True)\n            new_transactions.append(new_transaction)\n        if new_transactions:\n            bank_account.last_integration_date = min(transaction.date for transaction in new_transactions)\n            bank_account.save()\n            frappe.db.commit()\n            frappe.log_error(f\"Added {len(new_transactions)} new transactions for {bank_account.name}\")\n    except Exception as e:\n        frappe.log_error(f\"Error syncing transactions for {bank_account.name}: {str(e)}\")\n\n", "CodeBleu_score": 34.78044441796306}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    bank = json.loads(bank)\n    bank_account = json.loads(bank_account)\n\n    plaid = PlaidConnector()\n    plaid_settings = frappe.get_single(\"Plaid Settings\")\n    start_date = frappe.db.get_value(\"Bank Account\", bank_account[\"name\"], \"last_integration_date\") or (\n        datetime.datetime.now() - datetime.timedelta(days=30)\n    ).strftime(\"%Y-%m-%d\")\n    end_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n\n    try:\n        access_token = plaid.get_access_token(bank[\"plaid_access_token\"])\n        transactions = plaid.get_transactions(\n            access_token, start_date, end_date, account_ids=[bank_account[\"integration_id\"]]\n        )\n    except Exception:\n        frappe.log_error(\"Plaid Link Error\")\n        return\n\n    if transactions:\n        new_transactions = []\n        for transaction in transactions:\n            if transaction[\"amount\"] > 0:\n                new_transactions.append(\n                    {\n                        \"doctype\": \"Bank Transaction\",\n                        \"date\": transaction[\"date\"],\n                        \"amount\": transaction[\"amount\"],\n                        \"currency\": transaction[\"iso_currency_code\"],\n                        \"bank_account\": bank_account[\"name\"],\n                        \"description\": transaction[\"name\"],\n                        \"integration_id\": transaction[\"transaction_id\"],\n                        \"integration_type\": \"Plaid\",\n                    }\n                )\n\n        if new_transactions:\n            try:\n                frappe.get_doc(\n                    {\n                        \"doctype\": \"Bank Transaction\",\n                        \"bank_transaction_group\": frappe.generate_hash(),\n                        \"transactions\": new_transactions,\n                    }\n                ).insert()\n                frappe.db.set_value(\n                    \"Bank Account\",\n                    bank_account[\"name\"],\n                    \"last_integration_date\",\n                    min(transactions, key", "CodeBleu_score": 32.005374163692906}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    self.set_indicator(\\\"Fetching {entity}\\\", entity)\n    query_uri = f\\\"{self.base_url}/query?query=SELECT * FROM {entity} MAXRESULTS {self.max_results}\\\"\n    total_entries = self._get_total_entries(query_uri)\n    for i in range(0, total_entries, self.max_results):\n        query_uri = f\\\"{self.base_url}/query?query=SELECT * FROM {entity} STARTPOSITION {i+1} MAXRESULTS {self.max_results}\\\"\n        entries = self._get_entries(query_uri)\n        self._preprocess_entries(entries)\n        self._save_entries(entries, entity)\n        self.set_indicator(\\\"Fetching {entity}\\\", entity, i, total_entries)\n    self.set_indicator(\\\"Fetching {entity}\\\", entity, 1, 1)\n\n", "CodeBleu_score": 23.9765434830362}, {"code": "def _migrate_entries(self, entity)\n\t\n    query_uri = self._get_query_uri(entity)\n    total_entries = self._get_total_entries(query_uri)\n    start = 1\n    while start <= total_entries:\n        try:\n            response = self._get_entries(query_uri, start)\n            if response.status_code == 200:\n                entries = response.json()[entity]\n                self._preprocess_entries(entries, entity)\n                self._save_entries(entries, entity)\n                start += 1000\n            else:\n                self._log_error(response.text)\n        except Exception as e:\n            self._log_error(e, response.text)\n\n", "CodeBleu_score": 28.043218044141117}, {"code": "def _migrate_entries(self, entity)\n\t\n\n    self._log(f\"Migrating {entity}\")\n    self._make_custom_fields()\n    self._make_custom_company_field(entity)\n    self._make_custom_quickbooks_id_field(entity)\n\n    query = f\\\"SELECT * FROM {entity}\\\"\n    if entity == \\\"Account\\\" or entity == \\\"TaxRate\\\" or entity == \\\"TaxCode\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE Active in (true, false)\\\"\n\n    if entity == \\\"Purchase\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType in ('PurchaseOrder', 'PurchaseInvoice')\\\"\n\n    if entity == \\\"Deposit\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE PrivateNote = 'Deposit from Bank'\\\"\n\n    if entity == \\\"Invoice\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'SalesInvoice'\\\"\n\n    if entity == \\\"CreditMemo\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'CreditMemo'\\\"\n\n    if entity == \\\"SalesReceipt\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'SalesReceipt'\\\"\n\n    if entity == \\\"RefundReceipt\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'RefundReceipt'\\\"\n\n    if entity == \\\"Bill\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'Bill'\\\"\n\n    if entity == \\\"VendorCredit\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'VendorCredit'\\\"\n\n    if entity == \\\"Payment\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'Payment'\\\"\n\n    if entity == \\\"BillPayment\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'BillPayment'\\\"\n\n    if entity == \\\"Advance Payment\\\":\n        query = f\\\"SELECT * FROM {entity} WHERE DocType = 'Advance'\\\"\n\n    if entity", "CodeBleu_score": 19.45962669683415}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists(\n            {\"doctype\": \"Journal Entry\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            linked_transactions = invoice.get(\"LinkedTxn\", [])\n            is_statement_charge = any(\n                txn[\"TxnType\"] == \"StatementCharge\" for txn in linked_transactions\n            )\n            is_reimburse_charge = any(\n                txn[\"TxnType\"] == \"ReimburseCharge\" for txn in linked_transactions\n            )\n            if is_statement_charge or is_reimburse_charge:\n                self._save_journal_entry(invoice)\n            else:\n                self._save_sales_invoice(invoice)\n    except Exception as e:\n        self._log_error(e, invoice)\n\n", "CodeBleu_score": 37.29507983337245}, {"code": "def _save_invoice(self, invoice)\n\t\n\n    try:\n        if invoice[\"LinkedTxn\"]:\n            linked_transactions = invoice[\"LinkedTxn\"]\n            for linked_transaction in linked_transactions:\n                if linked_transaction[\"TxnType\"] in [\"StatementCharge\", \"ReimburseCharge\"]:\n                    self._save_journal_entry(invoice)\n                    return\n        self._save_sales_invoice(invoice)\n    except Exception as e:\n        self._log_error(e, invoice)\n\n", "CodeBleu_score": 33.92370730095691}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists(\n            {\"doctype\": \"Journal Entry\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n        ):\n            erpinvoice = frappe.get_doc(\n                {\n                    \"doctype\": \"Journal Entry\",\n                    \"quickbooks_id\": invoice[\"Id\"],\n                    \"posting_date\": invoice[\"TxnDate\"],\n                    \"company\": self.company,\n                }\n            )\n            erpinvoice.append(\n                \"accounts\",\n                {\n                    \"account\": self.default_shipping_account,\n                    \"debit_in_account_currency\": invoice[\"ShippingCost\"],\n                    \"credit_in_account_currency\": 0,\n                },\n            )\n            erpinvoice.append(\n                \"accounts\",\n                {\n                    \"account\": self.default_shipping_account,\n                    \"debit_in_account_currency\": 0,\n                    \"credit_in_account_currency\": invoice[\"ShippingCost\"],\n                },\n            )\n            erpinvoice.insert()\n            erpinvoice.submit()\n        else:\n            erpinvoice = frappe.get_doc(\n                \"Journal Entry\",\n                {\"quickbooks_id\": invoice[\"Id\"], \"company\": self.company},\n            )\n            erpinvoice.posting_date = invoice[\"TxnDate\"]\n            erpinvoice.save()\n            erpinvoice.submit()\n    except Exception as e:\n        self._log_error(e, invoice)\n\n", "CodeBleu_score": 33.801368494381876}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    days_in_period = {\n        \"Weekly\": 7,\n        \"Monthly\": 30,\n        \"Quarterly\": 91,\n        \"Half Yearly\": 182,\n        \"Yearly\": 365,\n    }\n    schedule_list = []\n    if no_of_visit:\n        interval = days_in_period[self.periodicity] / no_of_visit\n        count = 0\n        while count < no_of_visit:\n            schedule_list.append(add_days(start_date, interval * count))\n            count += 1\n        if self.periodicity == \"Weekly\":\n            schedule_list = [\n                add_days(date, 1)\n                for date in schedule_list\n                if date.weekday() == 0\n            ]\n        elif self.periodicity == \"Monthly\":\n            schedule_list = [\n                add_days(date, 1)\n                for date in schedule_list\n                if date.day == 1\n            ]\n        elif self.periodicity == \"Quarterly\":\n            schedule_list = [\n                add_days(date, 1)\n                for date in schedule_list\n                if date.day == 1 and date.month in [1, 4, 7, 10]\n            ]\n        elif self.periodicity == \"Half Yearly\":\n            schedule_list = [\n                add_days(date, 1)\n                for date in schedule_list\n                if date.day == 1 and date.month in [1, 7]\n            ]\n        elif self.periodicity == \"Yearly\":\n            schedule_list = [\n                add_days(date, 1)\n                for date in schedule_list\n                if date.day == 1 and date.month == 1\n            ]\n        schedule_list = [\n            add_days(date, 1)\n            for date in schedule_list\n            if not is_holiday(date)\n        ]\n    return schedule_list\n\n", "CodeBleu_score": 26.448078940352964}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n\n    # Calculate the interval between visits\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n\n    # Initialize the list of scheduled dates\n    scheduled_dates = []\n\n    # Iterate over the number of visits\n    for i in range(no_of_visit):\n        # Calculate the scheduled date for this visit\n        scheduled_date = start_date + timedelta(days=i * interval)\n\n        # Adjust the scheduled date to avoid holidays\n        while is_holiday(scheduled_date):\n            scheduled_date += timedelta(days=1)\n\n        # Add the scheduled date to the list\n        scheduled_dates.append(scheduled_date)\n\n    return scheduled_dates\n", "CodeBleu_score": 23.138138649010678}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    days_in_period = {\n        \"Weekly\": 7,\n        \"Monthly\": 30,\n        \"Quarterly\": 91,\n        \"Half Yearly\": 182,\n        \"Yearly\": 365,\n    }\n    schedule_list = []\n    interval = days_in_period.get(self.periodicity)\n    if interval:\n        for i in range(no_of_visit):\n            scheduled_date = add_days(start_date, i * interval)\n            if scheduled_date > end_date:\n                break\n            if is_holiday(scheduled_date):\n                scheduled_date = add_days(scheduled_date, 1)\n            schedule_list.append(scheduled_date)\n    return schedule_list\n\n", "CodeBleu_score": 32.904331906683666}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n<?\n<?\n   public function response($view, $data = []){\n\t    $method = request()->method();\n\n    $data['bulk_action_path'] = $this->getBulkActionPath();\n\n    $data['html'] = view($view, $data)->render();\n\n    return response()->json([\n        'success' => true,\n        'message' => '',\n        'data'    => [\n            'title'  => trans('general.title.new', ['type' => trans_choice('general.$types', 1)]),\n            'path'   => $this->getBulkActionPath(),\n            'handle' => $this->getBulkActionHandle(),\n            'html'   => $data['html'],\n        ],\n    ]);\n}", "CodeBleu_score": 40.01821276620221}, {"code": "<?\n<?\n<?\n   public function response($view, $data = []){\n\t        $method = request()->getMethod();\n\n        // Construct a URL for bulk actions\n        $bulk_action_url = route('bulk-actions.action', [\n            'type' => $this->getType(),\n            'action' => $this->getAction(),\n        ]);\n\n        // Render HTML content for a modal\n        $html = view($view, compact('data', 'bulk_action_url'))->render();\n\n        // Return JSON response for AJAX requests\n        if ($method == 'POST') {\n            return response()->json([\n                'success' => true,\n                'message' => '',\n                'data' => [\n                    'title' => $this->getTitle(),\n                    'path' => $this->getPath(),\n                    'handle' => $this->getHandle(),\n                    'html' => $html,\n                ],\n            ]);\n        }\n\n        // Return HTML response for non-AJAX requests\n        return $html;\n    }", "CodeBleu_score": 48.615210878349544}, {"code": "<?\n<?\n<?\n   public function response($view, $data = []){\n\t        try {\n            $method = request()->method();\n\n            $data['path'] = $this->getPath();\n\n            $data['handle'] = $this->getHandle();\n\n            $data['title'] = $this->getTitle();\n\n            $data['bulk_actions'] = $this->getBulkActions();\n\n            $data['bulk_actions_path'] = $this->getBulkActionsPath();\n\n            $response = [\n                'success' => true,\n                'error' => false,\n                'data' => $data,\n                'message' => '',\n                'html' => view($view, $data)->render(),\n            ];\n\n            if ($method == 'GET') {\n                return response()->json($response);\n            } else {\n                return response($response);\n            }\n        } catch (Throwable $e) {\n            return response()->json([\n                'success' => false,\n                'error' => true,\n                'message' => $e->getMessage(),\n                'html' => '',\n            ]);\n        }\n    }", "CodeBleu_score": 45.79501951138716}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\n<?\n<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 96.15844860019197}, {"code": "<?\n<?\n<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 96.15844860019197}, {"code": "<?\n<?\n<?\npublic function deleteContacts($request){\n\t    $contacts = $this->getSelectedRecords($request, 'user');\n\n    foreach ($contacts as $contact) {\n        try {\n            $this->dispatch(new DeleteContact($contact));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 96.15844860019197}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\n<?\n<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, 'transactions');\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 92.45932815273264}, {"code": "<?\n<?\n<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request);\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 77.07229278306538}, {"code": "<?\n<?\n<?\npublic function deleteTransactions($request){\n\t    $transactions = $this->getSelectedRecords($request, 'transactions');\n\n    foreach ($transactions as $transaction) {\n        try {\n            $this->dispatch(new DeleteTransaction($transaction));\n        } catch (\\Exception $e) {\n            flash($e->getMessage())->error()->important();\n        }\n    }\n}", "CodeBleu_score": 92.45932815273264}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\n<?\n<?\npublic function withValidator($validator){\n\t    if (is_null($this->request_class) || !class_exists($this->request_class) || !is_subclass_of($this->request_class, FormRequest::class)) {\n        return;\n    }\n\n    foreach ($this->data as $row) {\n        $request = new $this->request_class($row);\n\n        $rules = $this->prepareRules($request->rules());\n\n        try {\n            Validator::make($row, $rules)->validate();\n        } catch (ValidationException $e) {\n            foreach ($e->errors() as $key => $errors) {\n                foreach ($errors as $error) {\n                    $validator->errors()->add($key, $error);\n                }\n            }\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 45.51932819318979}, {"code": "<?\n<?\n<?\npublic function withValidator($validator){\n\t    if (!class_exists($this->request_class) || !is_subclass_of($this->request_class, FormRequest::class)) {\n        return;\n    }\n\n    foreach ($this->data as $row) {\n        $request = new $this->request_class();\n\n        $rules = $this->prepareRules($request->rules());\n\n        try {\n            Validator::make($row, $rules)->validate();\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->errors());\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 38.00372394368535}, {"code": "<?\n<?\n<?\npublic function withValidator($validator){\n\t    if (is_null($this->request_class)) {\n        return;\n    }\n\n    if (!class_exists($this->request_class) || !is_subclass_of($this->request_class, FormRequest::class)) {\n        return;\n    }\n\n    foreach ($this->data as $row) {\n        $request = new $this->request_class();\n        $rules = $this->prepareRules($request->rules());\n\n        try {\n            Validator::make($row, $rules)->validate();\n        } catch (ValidationException $e) {\n            $validator->errors()->merge($e->errors());\n\n            throw $e;\n        }\n    }\n}", "CodeBleu_score": 39.77486054346827}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\n<?\n<?\npublic function bootUpdate(...$arguments): void{\n\t    if (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    if ($arguments[0] instanceof Model) {\n        $this->model = $arguments[0];\n    }\n\n    $request = $this->getRequestInstance($arguments[1]);\n    if ($request instanceof Request) {\n        $this->request = $request;\n    }\n}", "CodeBleu_score": 96.64461796100278}, {"code": "<?\n<?\n<?\npublic function bootUpdate(...$arguments): void{\n\t    if (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    if ($arguments[0] instanceof Model) {\n        $this->model = $arguments[0];\n    }\n\n    if ($arguments[1] instanceof Request) {\n        $this->request = $arguments[1];\n    }\n}", "CodeBleu_score": 64.80060072305972}, {"code": "<?\n<?\n<?\npublic function bootUpdate(...$arguments): void{\n\t    if (! $this instanceof ShouldUpdate) {\n        return;\n    }\n\n    if (isset($arguments[0]) && $arguments[0] instanceof Model) {\n        $this->model = $arguments[0];\n    }\n\n    if (isset($arguments[1]) && $arguments[1] instanceof Request) {\n        $this->request = $arguments[1];\n    }\n}", "CodeBleu_score": 62.77918165714355}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n<?\n<?\n public function scopeCollect($query, $sort = 'name'){\n\t    // Apply search and sorting to the query\n    $query = $this->applySearchString($query);\n    $query = $this->applySort($query, $sort);\n\n    // Check if the request expects a JSON response and is not an API request\n    if (request()->expectsJson() && !request()->isApi()) {\n        return $query->get();\n    }\n\n    // Paginate the results based on a limit from the request or a default setting\n    $limit = request('limit', setting('default.list_limit', '25'));\n\n    return $query->paginate($limit);\n}", "CodeBleu_score": 51.483277704527765}, {"code": "<?\n<?\n<?\n public function scopeCollect($query, $sort = 'name'){\n\t    $search = request()->get('search');\n\n    if (!empty($search)) {\n        event(new SearchStringApplying($query, $search));\n    }\n\n    if (!empty($sort)) {\n        $query->sortable([$sort => 'asc']);\n    }\n\n    if (!empty($search)) {\n        event(new SearchStringApplied($query, $search));\n    }\n\n    if (request()->expectsJson() && !request()->isApi()) {\n        return $query->get();\n    }\n\n    return $query->paginate(request('limit', setting('default.list_limit', '25')));\n}", "CodeBleu_score": 39.85079554255168}, {"code": "<?\n<?\n<?\n public function scopeCollect($query, $sort = 'name'){\n\t    // Apply search and sorting to the query\n    $query = $this->applySearchString($query);\n    $query = $this->applySorting($query, $sort);\n\n    // Check if the request expects a JSON response and is not an API request\n    if (request()->expectsJson() && !request()->isApi()) {\n        // Return all records\n        return $query->get();\n    }\n\n    // Paginate the results based on a limit from the request or a default setting\n    $limit = request('limit', setting('default.list_limit', '25'));\n    return $query->paginate($limit);\n}", "CodeBleu_score": 51.59565774225441}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\n<?\n<?\npublic function calculateDocumentTotals($model){\n\t    // Initialize the open and overdue amounts\n    $open_amount = 0;\n    $overdue_amount = 0;\n\n    // Check if the document status is 'paid'\n    if ($model->status === 'paid') {\n        // Return zeroes if the status is 'paid'\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    // Check if the document status is 'partial'\n    if ($model->status === 'partial') {\n        // Sum the payments from transactions\n        $open_amount = $model->transactions->sum('amount');\n    }\n\n    // Determine if the document is open or overdue based on the due date\n    if (Date::parse($model->due_at)->isPast()) {\n        // Adjust the overdue amount\n        $overdue_amount = $open_amount - $model->amount;\n        $open_amount = 0;\n    }\n\n    // Return the calculated open and overdue amounts\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 37.719950619602095}, {"code": "<?\n<?\n<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = 0;\n    $overdue_amount = 0;\n\n    if ($model->status == 'paid') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    if ($model->status == 'partial') {\n        $open_amount = $model->transactions->sum('amount');\n    }\n\n    if (Date::parse($model->due_at)->isPast()) {\n        $overdue_amount = $model->amount - $open_amount;\n    } else {\n        $open_amount = $model->amount;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 42.74069608056775}, {"code": "<?\n<?\n<?\npublic function calculateDocumentTotals($model){\n\t    $open_amount = $overdue_amount = 0;\n\n    // Check if the document status is 'paid' or 'cancelled'\n    if ($model->status == 'paid' || $model->status == 'cancelled') {\n        return [\n            'open_amount' => 0,\n            'overdue_amount' => 0,\n        ];\n    }\n\n    // Sum the payments from transactions\n    if ($model->status == 'partial') {\n        $transactions = $model->transactions;\n        foreach ($transactions as $transaction) {\n            $payments = $transaction->payments;\n            foreach ($payments as $payment) {\n                $open_amount += $payment->amount;\n            }\n        }\n    }\n\n    // Determine if the document is open or overdue\n    $today = Date::today()->toDateString();\n    if ($model->due_at > $today) {\n        $open_amount = $model->amount;\n    } else {\n        $overdue_amount = $model->amount;\n    }\n\n    return [\n        'open_amount' => $open_amount,\n        'overdue_amount' => $overdue_amount,\n    ];\n}", "CodeBleu_score": 49.22402626449476}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\n<?\n<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    // Determine the current page\n    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    // Determine the number of items per page\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    // Retrieve the total count of records\n    $total = $this->toBase()->getCountForPagination();\n\n    // Fetch the appropriate subset of results for the current page\n    $results = $total ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n    // Create a new paginator instance with the results, total count, per-page limit, and current page\n    $paginator = new LengthAwarePaginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n\n    // Return the paginator instance\n    return $paginator;\n}", "CodeBleu_score": 81.0638044835064}, {"code": "<?\n<?\n<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n    $perPage = $perPage ?: $this->model->getPerPage();\n    $results = ($total = $this->toBase()->getCountForPagination()) ? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.43300027232293}, {"code": "<?\n<?\n<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t    $page = $page ?: Paginator::resolveCurrentPage($pageName);\n\n    $perPage = $perPage ?: $this->model->getPerPage();\n\n    $results = ($total = $this->toBase()->getCountForPagination())\n                ? $this->forPage($page, $perPage)->get($columns)\n                : $this->model->newCollection();\n\n    return $this->paginator($results, $total, $perPage, $page, [\n        'path' => Paginator::resolveCurrentPath(),\n        'pageName' => $pageName,\n    ]);\n}", "CodeBleu_score": 92.26240870967163}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\n<?\n<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::accountId($reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($transaction) {\n                    $transaction->reconciled = 1;\n                    $transaction->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 65.24004338363282}, {"code": "<?\n<?\n<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::accountId($reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($transaction) {\n                    $transaction->reconciled = 1;\n                    $transaction->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 65.24004338363282}, {"code": "<?\n<?\n<?\npublic function reconcile($request){\n\t    $reconciliations = $this->getSelectedRecords($request);\n\n    DB::transaction(function () use ($reconciliations) {\n        foreach ($reconciliations as $reconciliation) {\n            $reconciliation->status = 'reconciled';\n            $reconciliation->save();\n\n            Transaction::accountId($reconciliation->account_id)\n                ->isNotReconciled()\n                ->whereBetween('paid_at', [$reconciliation->started_at, $reconciliation->ended_at])\n                ->each(function ($transaction) {\n                    $transaction->reconciled = 1;\n                    $transaction->save();\n                });\n        }\n    });\n}", "CodeBleu_score": 65.24004338363282}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\n<?\n<?\npublic function handle(): UserInvitation{\n\t    $this->deleteInvitations();\n\n    $this->invitation = $this->createInvitation();\n\n    try {\n        $this->dispatch(new Notification($this->invitation));\n    } catch (TransportException $e) {\n        throw new Exception($e->getMessage());\n    }\n\n    return $this->invitation;\n}", "CodeBleu_score": 18.021300547092373}, {"code": "<?\n<?\n<?\npublic function handle(): UserInvitation{\n\t    $this->authorize();\n\n    \\DB::transaction(function () {\n        $this->deletePreviousInvitations();\n\n        $this->invitation = $this->createInvitation();\n\n        try {\n            $this->dispatchNotification();\n        } catch (TransportException $e) {\n            throw new \\Exception($e->getMessage());\n        }\n    });\n\n    return $this->invitation;\n}", "CodeBleu_score": 22.07914359099784}, {"code": "<?\n<?\n<?\npublic function handle(): UserInvitation{\n\t    $this->deleteInvitations();\n\n    $this->invitation = $this->createInvitation();\n\n    try {\n        $this->dispatchNotification();\n    } catch (TransportException $e) {\n        throw new Exception(trans('auth.error.invitation', ['type' => $this->user->email]));\n    }\n\n    return $this->invitation;\n}", "CodeBleu_score": 20.201330184824457}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\n<?\n<?\npublic function authorize(): void{\n\t    if ($this->model->reconciled) {\n        throw new \\Exception(\"Unauthorized\");\n    }\n\n    if ($this->model->transferred) {\n        throw new \\Exception(\"Unauthorized\");\n    }\n}", "CodeBleu_score": 26.601933060272575}, {"code": "<?\n<?\n<?\npublic function authorize(): void{\n\t    if ($this->model->reconciled) {\n        throw new \\Exception(trans('messages.warning.reconciled_tran'));\n    }\n\n    if ($this->model->type == 'income' || $this->model->type == 'expense') {\n        throw new \\Exception(trans('auth.error.unauthorized'));\n    }\n}", "CodeBleu_score": 33.86333698591189}, {"code": "<?\n<?\n<?\npublic function authorize(): void{\n\t    if ($this->model->reconciled) {\n        throw new \\Exception(trans('messages.warning.reconciled_tran'));\n    }\n\n    if ($this->model->type == 'income' && $this->model->transfer_transaction_id) {\n        throw new \\Exception('Unauthorized');\n    }\n}", "CodeBleu_score": 44.557709643121164}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t", "CodeBleu_score": 1.5687583116229795}, {"code": "public boolean doTableFilter(String tableName){\n\t    String token = request.getHeader(\"X-Access-Token\");\n    Long tenantId = Tools.getTenantIdByToken(token);\n    if (tenantId != 0L) {\n        return \\\"sys_user\\\".equals(tableName) || \\\"sys_tenant\\\".equals(tableName);\n    } else {\n        //\u8d85\u7ba1\n        return false;\n    }\n}", "CodeBleu_score": 33.368004762963174}, {"code": "public boolean doTableFilter(String tableName){\n\t    String token = request.getHeader(\"X-Access-Token\");\n    Long tenantId = Tools.getTenantIdByToken(token);\n    if (tenantId != 0L) {\n        // \u5141\u8bb8\u8bbf\u95ee\u67d0\u4e9b\u8868\n        if (tableName.equals(\\\"tenant\\\")) {\n            return true;\n        }\n        return false;\n    } else {\n        // \u8d85\u7ba1\n        return true;\n    }\n}", "CodeBleu_score": 37.62680986045683}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t    MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n    mapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n    return mapperScannerConfigurer;\n}", "CodeBleu_score": 75.2955715722213}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    Map<String, Object> map = new HashMap<>();\n    try {\n        List<Account> accountList = accountService.findAccountList();\n        JSONArray array = new JSONArray();\n        for (Account account : accountList) {\n            JSONObject obj = new JSONObject();\n            obj.put(\\\"id\\\", account.getId());\n            obj.put(\\\"name\\\", account.getName());\n            array.add(obj);\n        }\n        map.put(\\\"status\\\", \\\"success\\\");\n        map.put(\\\"data\\\", array);\n    } catch (Exception e) {\n        logger.error(\\\"\u67e5\u8be2\u5931\u8d25\\\", e);\n        map.put(\\\"status\\\", \\\"fail\\\");\n        map.put(\\\"msg\\\", \\\"\u67e5\u8be2\u5931\u8d25\\\");\n    }\n    return JSONObject.toJSONString(map);\n}", "CodeBleu_score": 40.516902789657046}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    Map<String, Object> map = new HashMap<String, Object>();\n    List<Account> accountList = null;\n    String jsonString = \\\"\\\";\n    try {\n        accountList = accountService.findBySelect(new Account(), 0, 0);\n        jsonString = JSONArray.toJSONString(accountList);\n        JSONArray arr = JSONArray.parseArray(jsonString);\n        for (int i = 0; i < arr.size(); i++) {\n            JSONObject obj = (JSONObject) arr.get(i);\n            obj.put(\\\"id\\\", obj.get(\\\"accountId\\\"));\n            obj.put(\\\"name\\\", obj.get(\\\"accountName\\\"));\n            obj.remove(\\\"accountId\\\");\n            obj.remove(\\\"accountName\\\");\n        }\n        jsonString = arr.toJSONString();\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        map.put(\\\"status\\\", 500);\n        map.put(\\\"message\\\", \\\"\u64cd\u4f5c\u5931\u8d25\\\");\n        jsonString = JSONObject.toJSONString(map);\n    }\n    return jsonString;\n}", "CodeBleu_score": 24.308505864336528}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t    Map<String, Object> map = new HashMap<>();\n    try {\n        List<Account> accountList = accountService.getAccountList();\n        JSONArray array = new JSONArray();\n        for (Account account : accountList) {\n            JSONObject obj = new JSONObject();\n            obj.put(\\\"id\\\", account.getId());\n            obj.put(\\\"name\\\", account.getName());\n            array.add(obj);\n        }\n        map.put(\\\"rows\\\", array);\n        map.put(\\\"total\\\", accountList.size());\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        return returnJson(new BaseResponseInfo(false, \\\"\u67e5\u8be2\u5931\u8d25\\\", null).toString(), \\\"application/json\\\", request, response);\n    }\n    return returnJson(new BaseResponseInfo(true, \\\"\u67e5\u8be2\u6210\u529f\\\", map).toString(), \\\"application/json\\\", request, response);\n}", "CodeBleu_score": 38.96346149455062}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    Map<String, Object> map = new HashMap<String, Object>();\n    try {\n        List<AccountVo4List> accountList = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n        int total = accountService.getAccountCount(name, serialNo);\n        map.put(\"total\", total);\n        map.put(\"rows\", accountList);\n        res.code = 200;\n        res.data = map;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 62.91325777669774}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t        BaseResponseInfo res = new BaseResponseInfo();\n        Map<String, Object> map = new HashMap<String, Object>();\n        try {\n            List<AccountVo4List> dataList = accountService.findListWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n            int total = accountService.findListWithBalanceCount(name, serialNo);\n            map.put(\"total\", total);\n            map.put(\"rows\", dataList);\n            res.code = 200;\n            res.data = map;\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            res.code = 500;\n            res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n        }\n        return res;\n    }", "CodeBleu_score": 62.001543227567126}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\t     BaseResponseInfo res = new BaseResponseInfo();\n     Map<String, Object> map = new HashMap<String, Object>();\n     try {\n         List<Account> accountList = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n         int total = accountService.countWithBalance(name, serialNo);\n         map.put(\"total\", total);\n         map.put(\"rows\", accountList);\n         res.code = 200;\n         res.data = map;\n     } catch (Exception e) {\n         logger.error(e.getMessage(), e);\n         res.code = 500;\n         res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n     }\n     return res;\n }", "CodeBleu_score": 62.85730287930178}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<>();\n        List<AccountVo4List> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        map.put(\"rows\", list);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 79.12935876232028}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<>();\n        List<AccountVo4List> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        map.put(\"rows\", list);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 79.12935876232028}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        Map<String, Object> map = new HashMap<>();\n        List<AccountVo4Statistics> list = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n        map.put(\"rows\", list);\n        res.code = 200;\n        res.data = map;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 78.86997821206234}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t  BaseResponseInfo response = new BaseResponseInfo();\n  try {\n   AccountHeadVo4ListEx details = accountHeadService.getDetailByNumber(billNo);\n   response.setCode(200);\n   response.setData(details);\n  } catch (Exception e) {\n   logger.error(e.getMessage());\n   response.setCode(500);\n   response.setMessage(\\\"error\\\");\n  }\n  return response;\n }", "CodeBleu_score": 33.766384445019845}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            List<AccountHeadVo4ListEx> details = accountHeadService.getDetailByNumber(billNo, request);\n            if(details.size() > 0) {\n                response.code = BusinessConstants.SUCCESS;\n                response.data = details.get(0);\n            }\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            response.code = BusinessConstants.ERROR_SQL;\n            response.msg = BusinessConstants.ERROR_SQL_MSG;\n        }\n        return response;\n    }", "CodeBleu_score": 42.50889170454835}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t        BaseResponseInfo response = new BaseResponseInfo();\n        try {\n            AccountHeadVo4ListEx detail = accountHeadService.getDetailByNumber(billNo);\n            response.code = BusinessConstants.SUCCESS;\n            response.data = detail;\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n            response.code = BusinessConstants.ERROR;\n            response.msg = e.getMessage();\n        }\n        return response;\n    }", "CodeBleu_score": 44.183866363562515}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.14400550582621}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.14400550582621}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        List<Depot> depotList = depotService.findDepotByCurrentUser();\n        res.code = 200;\n        res.data = depotList;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 89.14400550582621}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray dataArray = new JSONArray();\n    List<Function> list = functionService.getRoleFunction(type, keyId);\n    JSONObject item = new JSONObject();\n    item.put(\"id\", 0);\n    item.put(\"text\", \"\u7cfb\u7edf\u7ba1\u7406\");\n    item.put(\"icon\", \"system\");\n    item.put(\"url\", \"\");\n    item.put(\"component\", \"\");\n    JSONArray childrenArr = new JSONArray();\n    for (Function function : list) {\n        JSONObject item1 = new JSONObject();\n        item1.put(\"id\", function.getId());\n        item1.put(\"text\", function.getName());\n        item1.put(\"icon\", function.getIcon());\n        item1.put(\"url\", function.getUrl());\n        item1.put(\"component\", function.getComponent());\n        childrenArr.add(item1);\n    }\n    item.put(\"children\", childrenArr);\n    dataArray.add(item);\n    return dataArray;\n}", "CodeBleu_score": 35.48777992320889}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t    JSONArray dataArray = new JSONArray();\n    List<Function> dataList = functionService.getRoleFunction(type, keyId);\n    JSONObject item = new JSONObject();\n    List<Function> newList = new ArrayList<Function>();\n    for (Function function : dataList) {\n        if (function.getPNumber().equals(\"0\")) {\n            newList.add(function);\n        }\n    }\n    item.put(\"id\", 0);\n    item.put(\"text\", \"\u7cfb\u7edf\u7ba1\u7406\");\n    item.put(\"icon\", \"el-icon-s-tools\");\n    item.put(\"url\", \"\");\n    item.put(\"component\", \"\");\n    JSONArray childrenArr = getMenuByFunction(newList, \"\");\n    item.put(\"children\", childrenArr);\n    dataArray.add(item);\n    return dataArray;\n}", "CodeBleu_score": 34.57491519936664}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t        JSONArray dataArray = new JSONArray();\n        try {\n            List<Function> dataList = functionService.getRoleFunction(type, keyId);\n            JSONObject item = new JSONObject();\n            item.put(\"id\", 0);\n            item.put(\"text\", \"\u7cfb\u7edf\u7ba1\u7406\");\n            item.put(\"icon\", \"system\");\n            item.put(\"url\", \"\");\n            item.put(\"component\", \"\");\n            List<Function> newList = new ArrayList<>();\n            for (Function function : dataList) {\n                if (!function.getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n                    newList.add(function);\n                }\n            }\n            if (newList.size() != 0) {\n                JSONArray childrenArr = getMenuByFunction(newList, keyId);\n                if (childrenArr.size() > 0) {\n                    item.put(\"children\", childrenArr);\n                    dataArray.add(item);\n                }\n            }\n        } catch (DataAccessException e) {\n            logger.error(\">>>>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n        }\n        return dataArray;\n    }", "CodeBleu_score": 49.54890811770013}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        response.code = 200;\n        response.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        response.code = 500;\n        response.data = \"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n    }\n    return response;\n}", "CodeBleu_score": 84.22476405531162}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 97.06843011618462}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        res.code = 200;\n        res.data = platformConfig;\n    } catch(Exception e){\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \"\u83b7\u53d6\u5e73\u53f0\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\";\n    }\n    return res;\n}", "CodeBleu_score": 97.06843011618462}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getCurrentSystemConfig();\n        response.code = 200;\n        response.data = systemConfigList.get(0);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        response.code = 500;\n        response.data = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return response;\n}", "CodeBleu_score": 66.77429114208842}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n        if (systemConfigList != null && systemConfigList.size() > 0) {\n            response.code = 200;\n            response.data = systemConfigList.get(0);\n        }\n    } catch (Exception e) {\n        logger.error(e.toString());\n        response.code = 500;\n        response.data = \\\"\u67e5\u8be2\u5931\u8d25\\\";\n    }\n    return response;\n}", "CodeBleu_score": 50.65272691693181}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t    BaseResponseInfo response = new BaseResponseInfo();\n    try {\n        List<SystemConfig> list = systemConfigService.getList();\n        if (list.size() > 0) {\n            response.code = 200;\n            response.data = list.get(0);\n        }\n    } catch (Exception e) {\n        logger.error(e.getMessage());\n        response.code = 500;\n        response.data = \"\u83b7\u53d6\u5931\u8d25\";\n    }\n    return response;\n}", "CodeBleu_score": 69.1929243181714}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        String businessPath = request.getParameter(\\\"businessPath\\\");\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\\\"file\\\");\n        String fileName = file.getOriginalFilename();\n        if (fileUploadType == 1) {\n            String path = filePath + businessPath + File.separator + fileName;\n            File dest = new File(path);\n            if (!dest.getParentFile().exists()) {\n                dest.getParentFile().mkdirs();\n            }\n            file.transferTo(dest);\n        } else if (fileUploadType == 2) {\n            //AliOssUtil.upload(file, businessPath + File.separator + fileName);\n        }\n        res.code = 200;\n        res.data = businessPath + File.separator + fileName;\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \\\"\u4e0a\u4f20\u5931\u8d25\\\";\n    }\n    return res;\n}", "CodeBleu_score": 50.101595179632966}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t    BaseResponseInfo res = new BaseResponseInfo();\n    try {\n        // Get the business path from the request\n        String businessPath = request.getParameter(\\\"businessPath\\\");\n\n        // Get the uploaded file from the request\n        MultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n        MultipartFile file = multipartRequest.getFile(\\\"file\\\");\n\n        // Save the file based on the file upload type\n        if (fileUploadType == 1) {\n            // Save the file locally\n            String fileName = FileUtils.uploadFile(file, businessPath, filePath);\n            res.code = 200;\n            res.data = fileName;\n        } else {\n            // Save the file to AliOss\n            String fileName = FileUtils.uploadFileToAliOss(file, businessPath);\n            res.code = 200;\n            res.data = fileName;\n        }\n    } catch (Exception e) {\n        // Log any exceptions and set the response code and data\n        logger.error(e.getMessage(), e);\n        res.code = 500;\n        res.data = \\\"\u4e0a\u4f20\u5931\u8d25\\\";\n    }\n    return res;\n}", "CodeBleu_score": 52.93013429312299}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t", "CodeBleu_score": 1.8642714310173143}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\\\"title\\\");\n            String head = jsonObject.getString(\\\"head\\\");\n            String tip = jsonObject.getString(\\\"tip\\\");\n            List<JSONObject> dataList = jsonObject.getJSONArray(\\\"dataList\\\").toJavaList(JSONObject.class);\n            systemConfigService.exportExcelByParam(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(\\\"\u5bfc\u51faExcel\u8868\u683c\u5931\u8d25\\\" + e.getMessage());\n            response.setStatus(404);\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 48.61272535410808}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        try {\n            String title = jsonObject.getString(\\\"title\\\");\n            String head = jsonObject.getString(\\\"head\\\");\n            String tip = jsonObject.getString(\\\"tip\\\");\n            List<Map<String, Object>> dataList = jsonObject.getJSONArray(\\\"dataList\\\").toJavaList(Map.class);\n            systemConfigService.exportExcelByParam(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 54.4445779384808}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t        String title = jsonObject.getString(\\\"title\\\");\n        String head = jsonObject.getString(\\\"head\\\");\n        String tip = jsonObject.getString(\\\"tip\\\");\n        List<Map<String, Object>> dataList = jsonObject.getJSONArray(\\\"dataList\\\").toJavaList(Map.class);\n        try {\n            systemConfigService.exportExcelByParam(title, head, tip, dataList, response);\n        } catch (Exception e) {\n            logger.error(e.getMessage(), e);\n        }\n    }", "CodeBleu_score": 54.4499528002427}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t        Account account = new Account();\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setInitialAmount(obj.getBigDecimal(\"initialAmount\"));\n        account.setCurrentAmount(BigDecimal.ZERO);\n        account.setRemark(obj.getString(\"remark\"));\n        account.setIsDefault(obj.getBoolean(\"isDefault\"));\n        if(account.getIsDefault()){\n            // \u67e5\u8be2\u662f\u5426\u6709\u9ed8\u8ba4\u8d26\u6237\uff0c\u6709\u5219\u6539\u4e3a\u975e\u9ed8\u8ba4\n            Account account1 = new Account();\n            account1.setIsDefault(false);\n            AccountExample example = new AccountExample();\n            example.createCriteria().andIsDefaultEqualTo(true);\n            accountMapper.updateByExampleSelective(account1, example);\n        }\n        account.setEnabled(true);\n        account.setDeleteFlag(BusinessConstants.DELETE_FLAG_NO);\n        int result = accountMapper.insertSelective(account);\n        logService.insertLog(LogObjectHolder.INSERT, new ObjectMapper().writeValueAsString(account), request);\n        return result;\n    }", "CodeBleu_score": 38.34004925855381}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result = 0;\n    try{\n        Account account = new Account();\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setInitialAmount(obj.getBigDecimal(\"initialAmount\"));\n        account.setCurrentAmount(obj.getBigDecimal(\"initialAmount\"));\n        account.setRemark(obj.getString(\"remark\"));\n        account.setIsDefault(obj.getBoolean(\"isDefault\"));\n        if (account.getIsDefault()) {\n            Account accountDefault = new Account();\n            accountDefault.setIsDefault(false);\n            accountMapper.updateByExampleSelective(accountDefault, new AccountExample());\n        }\n        account.setEnabled(true);\n        account.setDeleteFlag(BusinessConstants.DELETE_FLAG_NO);\n        result = accountMapper.insertSelective(account);\n        logService.insertLog(LogObjectHolder.LOG_TYPE_INSERT, \"\u65b0\u589e\u8d26\u6237\u4fe1\u606f\", obj.toString(), request);\n    }catch(Exception e){\n        JshException.insertFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 44.25142188280345}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t    int result = 0;\n    try{\n        Account account = new Account();\n        account.setName(obj.getString(\"name\"));\n        account.setSerialNo(obj.getString(\"serialNo\"));\n        account.setInitialAmount(obj.getBigDecimal(\"initialAmount\"));\n        account.setCurrentAmount(BigDecimal.ZERO);\n        account.setRemark(obj.getString(\"remark\"));\n        account.setIsDefault(obj.getBoolean(\"isDefault\"));\n        account.setSort(obj.getInt(\"sort\"));\n        account.setEnabled(true);\n        account.setDeleteFlag(BusinessConstants.DELETE_FLAG_NOT_DELETED);\n        if(account.getIsDefault()){\n            // \u8bbe\u7f6e\u9ed8\u8ba4\u8d26\u6237\n            Account defaultAccount = accountMapperEx.getDefaultAccount();\n            if(null != defaultAccount){\n                defaultAccount.setIsDefault(false);\n                accountMapper.updateByPrimaryKeySelective(defaultAccount);\n            }\n        }\n        result = accountMapper.insertSelective(account);\n        logService.insertLog(LogObjectHolder.ADD, \"account\", account.getId(), request);\n    }catch(Exception e){\n        JshException.insertFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 44.847323093340854}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long count = null;\n    try {\n        count = accountMapperEx.selectByConditionAccountCount(name, serialNo);\n    } catch (Exception e) {\n        JshException.readFail(logger, e);\n    }\n    return count;\n}", "CodeBleu_score": 57.26444904415793}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long result = null;\n    try {\n        result = accountMapperEx.selectByConditionAccountCount(name, serialNo);\n    } catch (Exception e) {\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 66.1011811830306}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t    Long result = null;\n    try {\n        result = accountMapperEx.selectByConditionAccountCount(name, serialNo);\n    } catch (Exception e) {\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 66.1011811830306}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result =0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 93.53891630160682}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result =0;\n        try{\n            result=depotItemMapper.deleteByPrimaryKey(id);\n        }catch(Exception e){\n            JshException.readFail(logger, e);\n        }\n        return result;\n    }", "CodeBleu_score": 90.43525467134937}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t    int result =0;\n    try{\n        result=depotItemMapper.deleteByPrimaryKey(id);\n    }catch(Exception e){\n        JshException.readFail(logger, e);\n    }\n    return result;\n}", "CodeBleu_score": 93.53891630160682}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/addNode?projectName=\" + projectName + \"&nodeType=\" + nodeType + \"&nodeKey=\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\tCloseableHttpResponse response = null;\n\t\ttry {\n\t\t\tresponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString responseStr = EntityUtils.toString(entity);\n\t\t\tMap<String, Object> result = new ObjectMapper().readValue(responseStr, Map.class);\n\t\t\treturn result.containsKey(\\\"key\\\");\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t} finally {\n\t\t\tif (response != null) {\n\t\t\t\ttry {\n\t\t\t\t\tresponse.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (httpClient != null) {\n\t\t\t\ttry {\n\t\t\t\t\thttpClient.close();\n\t\t\t\t} catch (IOException e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 48.82313949309154}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\tString url = protocol + \"://\" + host + \":\" + port + \"/\" + projectName + \"/node/\" + nodeType + \"/\" + nodeKey;\n\tHttpGet httpGet = new HttpGet(url);\n\tCloseableHttpResponse response = null;\n\ttry {\n\t\tresponse = httpclient.execute(httpGet);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseStr = EntityUtils.toString(entity);\n\t\tMap<String, Object> responseMap = new ObjectMapper().readValue(responseStr, Map.class);\n\t\tif (responseMap.containsKey(\"key\")) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\ttry {\n\t\t\tif (response != null) {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttry {\n\t\t\thttpclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 48.485043130110164}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tString url = getProtocol() + \"://\" + getHost() + \":\" + getPort() + \"/\" + projectName + \"/\" + nodeType + \"/\" + nodeKey;\n\t\tHttpGet httpGet = new HttpGet(url);\n\t\tCloseableHttpResponse response = null;\n\t\ttry {\n\t\t\tresponse = httpClient.execute(httpGet);\n\t\t\tHttpEntity entity = response.getEntity();\n\t\t\tString responseString = EntityUtils.toString(entity, Charset.defaultCharset());\n\t\t\tObjectMapper mapper = new ObjectMapper();\n\t\t\tMap<String, Object> responseMap = mapper.readValue(responseString, Map.class);\n\t\t\tif (responseMap.containsKey(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tfinally {\n\t\t\ttry {\n\t\t\t\tresponse.close();\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}", "CodeBleu_score": 53.96407885195853}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t    CloseableHttpClient httpClient = HttpClients.createDefault();\n    CloseableHttpResponse httpResponse = null;\n    try {\n        HttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n        HttpGet getRequest = new HttpGet(\n                \"/addEdge/\" + withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n        httpResponse = httpClient.execute(host, getRequest);\n        HttpEntity entity = httpResponse.getEntity();\n        if (entity != null) {\n            ObjectMapper om = new ObjectMapper();\n            String result = EntityUtils.toString(entity);\n            Map map = om.readValue(result, Map.class);\n            if (map.get(\"key\") != null) {\n                return true;\n            }\n        }\n        return false;\n    } catch (Exception e) {\n        e.printStackTrace();\n        return false;\n    } finally {\n        close(httpClient, httpResponse);\n    }\n}", "CodeBleu_score": 91.38101452465635}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tCloseableHttpResponse httpResponse = null;\n\t\ttry {\n\t\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\t\"/addEdge/\" +withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\t\tHttpEntity entity = httpResponse.getEntity();\n\t\t\tif (entity != null) {\n\t\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\t\tString result = EntityUtils.toString(entity);\n\t\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\treturn false;\n\t\t} finally {\n\t\t\tclose(httpClient, httpResponse);\n\t\t}\n\t}", "CodeBleu_score": 96.3899887811806}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\" + withProjectName(projectName) + edgeType + \"/\" + fromType + \"/\" + toType + \"/\" + from + \"/\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity != null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\") != null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 92.8533161661946}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t        if (event == null || event.getMessage() == null) {\n            return;\n        }\n        if (event.getLocation() == null) {\n            event.setLocation(getTestLocation());\n        }\n        event.setEventTime(new Date());\n        String json = null;\n        try {\n            json = objectMapper.writeValueAsString(event);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n        String target = event.getTarget();\n        if (target == null) {\n            target = \\\"test\\\";\n        }\n        ProducerRecord<String, String> record = new ProducerRecord<>(target, json);\n        producer.send(record);\n        producer.flush();\n    }", "CodeBleu_score": 49.08375551059798}, {"code": "public void sendEvent(Event event){\n\t\t\tif (event == null) {\n\t\t\tSystem.out.println(\"Event is null\");\n\t\t\treturn;\n\t\t}\n\t\tif (event.getMessage() == null) {\n\t\t\tSystem.out.println(\"Message is null\");\n\t\t\treturn;\n\t\t}\n\t\tif (event.getLocation() == null) {\n\t\t\tLocation location = new Location();\n\t\t\tlocation.setLatitude(new Random().nextDouble());\n\t\t\tlocation.setLongitude(new Random().nextDouble());\n\t\t\tlocation.setTime(new Date());\n\t\t\tevent.setLocation(location);\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString jsonString = null;\n\t\ttry {\n\t\t\tjsonString = objectMapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tString target = event.getTarget();\n\t\tif (target == null) {\n\t\t\ttarget = \\\"test\\\";\n\t\t}\n\t\tProducerRecord<String, String> record = new ProducerRecord<>(target, jsonString);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}", "CodeBleu_score": 51.170800148768706}, {"code": "public void sendEvent(Event event){\n\t    if (event == null) {\n        return;\n    }\n    if (event.getMessage() == null) {\n        return;\n    }\n    if (event.getLocation() == null) {\n        event.setLocation(getTestLocation());\n    }\n    event.setEventTime(new Date());\n    String jsonString = null;\n\t\ttry {\n\t\t\tjsonString = objectMapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tString topic = event.getTarget() == null ? \\\"test\\\" : event.getTarget();\n\t\tProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n\t\tproducer.send(record);\n\t\tproducer.flush();\n\t}", "CodeBleu_score": 46.54744850989624}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n    ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n    ossClient.shutdown();\n    return \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n}", "CodeBleu_score": 41.95546037529658}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials.\n    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\n    // Upload the file content as an object with the specified name.\n    ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\n    // Shut down the OSS client.\n    ossClient.shutdown();\n\n    // Return the URL of the uploaded object.\n    return config.getPrefix() + objName;\n}", "CodeBleu_score": 32.37793288608655}, {"code": "public String upload(String objName, byte[] content){\n\t    // Initialize the OSS client with access credentials.\n    OSS ossClient = new OSSClientBuilder().build(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n    // Upload the file content as an object with the specified name.\n    ossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n    // Shut down the OSS client.\n    ossClient.shutdown();\n    // Return the URL of the uploaded object.\n    return config.getPrefix() + objName;\n}", "CodeBleu_score": 32.37793288608655}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return LocationInfo.unknown(ipAddress);\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.31290420498473}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        return unknownLocationInfo(ipAddress);\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 28.260288751324996}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\t    IpToLocationWorker worker = getIpToLocationWorker();\n    if (worker == null) {\n        LocationInfo result = new LocationInfo();\n        result.setIpAddress(ipAddress);\n        result.setMainInfo(\"unknown\");\n        result.setSubInfo(\"unknown\");\n        return result;\n    }\n    return worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 52.35826020400045}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t    if (lowLevelRestClient != null && highLevelRestClient != null) {\n        return;\n    }\n\n    synchronized (this) {\n        if (lowLevelRestClient != null && highLevelRestClient != null) {\n            return;\n        }\n\n        List<HttpHost> hosts = new ArrayList<>();\n        String[] hostList = clusterHostList.split(\",\");\n        for (String host : hostList) {\n            String[] hostPort = host.split(\":\");\n            String hostName = hostPort[0];\n            int port = clusterHostPort;\n            if (hostPort.length > 1) {\n                port = Integer.parseInt(hostPort[1]);\n            }\n            hosts.add(new HttpHost(hostName, port, \"http\"));\n        }\n\n        lowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n        highLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n    }\n}", "CodeBleu_score": 60.647596622924496}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    synchronized (this) {\n        if (lowLevelRestClient != null && highLevelRestClient != null) {\n            return;\n        }\n\n        List<HttpHost> clusterHosts = parseClusterHosts();\n\n        lowLevelRestClient = RestClient.builder(clusterHosts.toArray(new HttpHost[0])).build();\n        highLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n    }\n}", "CodeBleu_score": 65.77279676743566}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t    synchronized (this) {\n        if (lowLevelRestClient != null && highLevelRestClient != null) {\n            return;\n        }\n\n        String[] clusterHosts = clusterHostList.split(\",\");\n        List<HttpHost> httpHosts = new ArrayList<HttpHost>();\n        for (String clusterHost : clusterHosts) {\n            String[] hostAndPort = clusterHost.split(\":\");\n            String host = hostAndPort[0];\n            int port = clusterHostPort;\n            if (hostAndPort.length == 2) {\n                port = Integer.parseInt(hostAndPort[1]);\n            }\n            httpHosts.add(new HttpHost(host, port, \"http\"));\n        }\n\n        lowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[httpHosts.size()])).build();\n        highLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n    }\n}", "CodeBleu_score": 49.321663025299564}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<HttpHost>();\n    String[] hostList = clusterHostList.split(\\\",\\\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\\\":\\\");\n        if (hostAndPort.length == 1) {\n            hosts.add(new HttpHost(hostAndPort[0], clusterPort, \\\"http\\\"));\n        } else {\n            hosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \\\"http\\\"));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 37.3859695216872}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t\tList<HttpHost> hosts = new ArrayList<>();\n\tString[] hostArray = clusterHostList.split(\\\",\\\");\n\tfor (String host : hostArray) {\n\t\tif (host.contains(\\\":\\\")) {\n\t\t\tString[] hostPort = host.split(\\\":\\\");\n\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \\\"http\\\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort, \\\"http\\\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 37.867224027293666}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\t    List<HttpHost> hosts = new ArrayList<>();\n    String[] hostList = clusterHostList.split(\",\");\n    for (String host : hostList) {\n        String[] hostAndPort = host.split(\":\");\n        if (hostAndPort.length == 2) {\n            hosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n        } else {\n            hosts.add(new HttpHost(host, clusterPort));\n        }\n    }\n    return hosts;\n}", "CodeBleu_score": 48.95076617384145}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\t    Map<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n    if (task != null) {\n        String taskType = (String) task.get(PARAM_TASK_TYPE);\n        if (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)) {\n            String dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n            String fromWho = (String) task.get(PARAM_FROM_WHO);\n            String template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n            Map<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\n            if (StringUtils.isBlank(dest) || StringUtils.isBlank(template) || parameters == null || parameters.isEmpty()) {\n                logger.error(\"Invalid message data. Dest: {}, template: {}, parameters: {}\", dest, template, parameters);\n                return;\n            }\n\n            try {\n                sendMessage(dest, fromWho, template, parameters);\n            } catch (Exception e) {\n                logger.error(\"Error sending message. Dest: {}, template: {}, parameters: {}\", dest, template, parameters, e);\n            }\n        }\n    }\n}", "CodeBleu_score": 52.6641737896058}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String)task.get(PARAM_TASK_TYPE);\n\t\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)){\n\t\t\tString dest = (String)task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tMap<String, String> messageData = (Map<String, String>)task.get(PARAM_MESSAGE_DATA);\n\t\t\tString message = (String)task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tString fromWho = (String)task.get(PARAM_FROM_WHO);\n\t\t\tif (messageData==null || messageData.isEmpty() || StringUtils.isBlank(dest) || StringUtils.isBlank(message)){\n\t\t\t\tlogger.error(\\\"Invalid message data\\\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tsendMessage(dest, fromWho, message, messageData);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\\\"Failed to send message\\\", e);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 50.00482499080417}, {"code": "protected void pollingWork() throws InterruptedException{\n\t\t\tMap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\t\tif (task == null){\n\t\t\treturn;\n\t\t}\n\t\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\t\tif (TASK_PLAIN_TEXT_MESSAGE.equals(taskType)){\n\t\t\tString dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\t\tif (StringUtils.isBlank(dest) || StringUtils.isBlank(template) || parameters==null || parameters.isEmpty()){\n\t\t\t\tlogger.error(\\\"Invalid message data, dest:{}, template:{}, parameters:{}\\\", dest, template, parameters);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tsendMessage(dest, fromWho, template, parameters);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlogger.error(\\\"Failed to send message, dest:{}, template:{}, parameters:{}\\\", dest, template, parameters, e);\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 53.79675496797225}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = getHttpClient();\n    HttpGet httpget = new HttpGet(uri);\n    CloseableHttpResponse response = httpclient.execute(httpget);\n    HttpEntity entity = response.getEntity();\n    String content = EntityUtils.toString(entity, \\\"UTF-8\\\");\n    //System.out.println(content);\n    return content;\n}", "CodeBleu_score": 62.793294412940405}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = getHttpClient();\n    HttpGet httpget = new HttpGet(uri);\n    HttpResponse response = httpclient.execute(httpget);\n    HttpEntity entity = response.getEntity();\n    String content = EntityUtils.toString(entity, \\\"UTF-8\\\");\n    System.out.println(content);\n    return content;\n}", "CodeBleu_score": 60.15907902698869}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t    CloseableHttpClient httpclient = getHttpClient();\n    HttpGet httpget = new HttpGet(uri);\n    CloseableHttpResponse response = httpclient.execute(httpget);\n    try {\n        HttpEntity entity = response.getEntity();\n        if (entity != null) {\n            String content = EntityUtils.toString(entity, \\\"UTF-8\\\");\n            System.out.println(content);\n            return content;\n        }\n    } finally {\n        response.close();\n    }\n    return null;\n}", "CodeBleu_score": 56.915958047648594}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n    Document document = documentBuilder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    Node root = document.getChildNodes().item(0);\n    Map<String, Object> result = new HashMap<>();\n    result.put(root.getNodeName(), decodeToArray(root, doTrim));\n    return result;\n}", "CodeBleu_score": 52.20185200184764}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    Node root = document.getDocumentElement();\n    List<Map<String, Object>> rootArray = decodeToArray(root, doTrim);\n    Map<String, Object> result = new HashMap<>();\n    result.put(root.getNodeName(), rootArray.get(0));\n    return result;\n}", "CodeBleu_score": 58.02339878973678}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t    DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = factory.newDocumentBuilder();\n    Document document = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n    Node root = document.getDocumentElement();\n    List<Object> rootArray = decodeNode(root, doTrim);\n    Map<String, Object> rootMap = new HashMap<>();\n    if (rootArray.size() == 1) {\n        rootMap = (Map<String, Object>) rootArray.get(0);\n    }\n    return rootMap;\n}", "CodeBleu_score": 58.803958250588664}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n    final boolean isAutoShipAndInvoice = sysConfigBL.getBooleanValue(SYS_Config_AUTO_SHIP_AND_INVOICE, false);\n    if (isAutoShipAndInvoice) {\n        logger.info(\"Auto-ship and invoice is enabled. Enqueuing order {} for automatic shipping and invoicing.\", orderId);\n        completeShipAndInvoiceEnqueuer.enqueue(orderId);\n    } else {\n        logger.info(\"Auto-ship and invoice is disabled. Scheduling the creation of missing shipment schedules for order {}.\", orderId);\n        asyncBatchObserver.scheduleProcessing(CreateMissingShipmentSchedulesWorkpackageProcessor.class, orderId);\n    }\n}", "CodeBleu_score": 50.515160861157284}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t    final OrderId orderId = OrderId.ofRepoId(orderRecord.getC_Order_ID());\n    final boolean isEligibleForAutoProcessing = isEligibleForAutoProcessing(orderRecord);\n    if (isEligibleForAutoProcessing) {\n        logger.info(\"Enqueuing order {} for auto-processing\", orderId);\n        completeShipAndInvoiceEnqueuer.enqueue(orderId);\n    } else {\n        logger.info(\"Scheduling the creation of missing shipment schedules for order {}\", orderId);\n        scheduleCreateMissingShipmentSchedules(orderId);\n    }\n}", "CodeBleu_score": 47.97381402229565}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t", "CodeBleu_score": 3.839633916411321}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\n<?\n<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $user = User::where('email', $request->email)->first();\n\n    if (! $user || ! $this->guard->getProvider()->validateCredentials($user, ['password' => $request->password])) {\n        event(new Failed(config('fortify.guard'), null, [\n            'email' => $request->email,\n            'password' => $request->password,\n        ]));\n\n        throw ValidationException::withMessages([\n            'email' => [trans('auth.failed')],\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 55.850434726828915}, {"code": "<?\n<?\n<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = $this->guard->getProvider()->getModel();\n\n    $user = (new $model)->where('email', $request->input(Fortify::username()))->first();\n\n    if (! $user || ! $this->guard->getProvider()->validateCredentials($user, ['password' => $request->input('password')])) {\n        event(new Failed(config('fortify.guard'), null, [\n            Fortify::username() => $request->input(Fortify::username()),\n            'password' => $request->input('password'),\n        ]));\n\n        throw ValidationException::withMessages([\n            Fortify::username() => trans('auth.failed'),\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 45.927607551884684}, {"code": "<?\n<?\n<?\nprotected function validateCredentials(Request $request): ?User{\n\t    $model = $this->guard->getProvider()->getModel();\n\n    $user = (new $model)->where('email', $request->input(Fortify::username()))->first();\n\n    if (! $user || ! $this->guard->getProvider()->validateCredentials($user, ['password' => $request->input('password')])) {\n        event(new Failed(config('fortify.guard'), null, [\n            Fortify::username() => $request->input(Fortify::username()),\n            'password' => $request->input('password'),\n        ]));\n\n        $this->throwFailedAuthenticationException($request);\n    }\n\n    return $user;\n}", "CodeBleu_score": 52.14389869426377}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\n<?\n<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 91.07821123867564}, {"code": "<?\n<?\n<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    // Increment the request limit for rate limiting\n    $this->limiter->increment($request);\n\n    // Throw a ValidationException with an error message indicating the authentication failure\n    throw ValidationException::withMessages([\n        Fortify::username() => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 71.68675671636885}, {"code": "<?\n<?\n<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\t    $this->limiter->increment($request);\n\n    throw ValidationException::withMessages([\n        'email' => [trans('auth.failed')],\n    ]);\n}", "CodeBleu_score": 91.07821123867564}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\n<?\n<?\npublic function toResponse($request){\n\t    $userId = session('login.id');\n    $user = User::find($userId);\n\n    if ($user) {\n        $publicKey = Webauthn::prepareAssertion($user);\n\n        return Inertia::render('TwoFactorChallenge', [\n            'publicKey' => $publicKey,\n            'two_factor_enabled' => !is_null($user->two_factor_secret),\n            'remember' => $request->remember,\n        ]);\n    }\n\n    return redirect()->route('login');\n}", "CodeBleu_score": 41.24181678535746}, {"code": "<?\n<?\n<?\npublic function toResponse($request){\n\t    $userId = $request->session()->get('login.id');\n    $user = User::findOrFail($userId);\n\n    if (Webauthn::enabled($user)) {\n        $publicKey = Webauthn::prepareAssertion($user);\n    }\n\n    return Inertia::render('TwoFactorChallenge', [\n        'two_factor_enabled' => ! is_null($user->two_factor_secret),\n        'remember' => $request->session()->get('login.remember'),\n        'publicKey' => $publicKey ?? null,\n    ]);\n}", "CodeBleu_score": 52.791641695269}, {"code": "<?\n<?\n<?\npublic function toResponse($request){\n\t    $userId = session('login.id');\n    $user = User::findOrFail($userId);\n\n    $publicKey = Webauthn::prepareAssertion($user);\n\n    return Inertia::render('TwoFactorChallenge', [\n        'two_factor' => true,\n        'remember' => $request->remember,\n        'publicKey' => $publicKey,\n    ]);\n}", "CodeBleu_score": 34.87593080487738}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\n<?\n<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    // Check if there is an existing user token for the given driver and socialite user ID\n    $userToken = UserToken::where('driver', $driver)\n        ->where('socialite_id', $socialite->getId())\n        ->first();\n\n    // If found, retrieve the associated user and verify the user association\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if ($userToken->user_id !== $user->id) {\n            throw ValidationException::withMessages([\n                'email' => __('auth.socialite_already_associated'),\n            ]);\n        }\n    }\n    // If not found, create a new user or associate the socialite token with an existing user\n    else {\n        $user = User::where('email', $socialite->getEmail())->first();\n\n        if (! $user) {\n            $user = app(CreateNewUser::class)->create([\n                'name' => $socialite->getName(),\n                'email' => $socialite->getEmail(),\n                'password' => Str::random(),\n            ]);\n        }\n\n        UserToken::create([\n            'user_id' => $user->id,\n            'driver' => $driver,\n            'socialite_id' => $socialite->getId(),\n            'socialite_token' => $socialite->token,\n            'socialite_refresh_token' => $socialite->refreshToken ?? null,\n            'socialite_expires_in' => $socialite instanceof OAuth1User ? $socialite->accessTokenSecret : $socialite->expiresIn ?? null,\n        ]);\n    }\n\n    return $user;\n}", "CodeBleu_score": 45.86234425881826}, {"code": "<?\n<?\n<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::firstWhere([\n        'driver' => $driver,\n        'socialite_id' => $socialite->getId(),\n    ]);\n\n    if ($userToken) {\n        $user = $userToken->user;\n\n        if ($userToken->socialite_email !== $socialite->getEmail()) {\n            throw ValidationException::withMessages([\n                'email' => [__('This account is already associated with another user.')],\n            ]);\n        }\n    } else {\n        $user = $this->createOrAssociateUser($request, $driver, $socialite);\n    }\n\n    return $user;\n}", "CodeBleu_score": 52.40975085194775}, {"code": "<?\n<?\n<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t    $userToken = UserToken::where('driver', $driver)\n        ->where('socialite_id', $socialite->getId())\n        ->first();\n\n    if ($userToken) {\n        if (! $userToken->user->isAssociatedWith($socialite)) {\n            throw ValidationException::withMessages([\n                'email' => [__('This :driver account is already associated with another user.', ['driver' => $driver])],\n            ]);\n        }\n\n        return $userToken->user;\n    }\n\n    if ($user = User::where('email', $socialite->getEmail())->first()) {\n        return $this->associateSocialiteTokenToUser($user, $driver, $socialite);\n    }\n\n    return $this->createNewUser($request, $driver, $socialite);\n}", "CodeBleu_score": 42.75360329686485}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\n<?\n<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    if (!WebauthnFacade::validateAssertion($user, $this->filterCredentials($request))) {\n        event(new Failed(config('webauthn.guard'), null, [\n            'id' => $user->getAuthIdentifier(),\n            'remember' => $request->boolean('remember'),\n        ]));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 56.62404094229287}, {"code": "<?\n<?\n<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    // Get the user from the request\n    $user = $request->user();\n\n    // If no user is found, return false\n    if (!$user) {\n        return false;\n    }\n\n    // Validate the assertion using the filtered credentials from the request\n    if (!WebauthnFacade::validateAssertion($user, $this->filterCredentials($request))) {\n        // Trigger a failed authentication event\n        event(new Failed('webauthn', $user, [\n            'credentials' => $this->filterCredentials($request),\n        ]));\n\n        // Throw an authentication exception\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 58.86266605559803}, {"code": "<?\n<?\n<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t    $user = $request->user();\n\n    if (!$user) {\n        return false;\n    }\n\n    try {\n        WebauthnFacade::validateAssertion($user, $this->filterCredentials($request));\n    } catch (ValidationException $e) {\n        event(new Failed(config('webauthn.guard'), null, $this->filterCredentials($request)));\n\n        $this->throwFailedAuthenticationException($request);\n\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 56.71859954597194}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\n<?\n<?\nprivate function user(): ?User{\n\t    if (empty($email = $this->option('email'))) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        $user = User::where('email', $email)->firstOrFail();\n        return $user;\n    } catch (ModelNotFoundException $e) {\n        $this->error('No user with that email.');\n        return null;\n    }\n}", "CodeBleu_score": 69.85977337991865}, {"code": "<?\n<?\n<?\nprivate function user(): ?User{\n\t    if (!$email = $this->option('email')) {\n        $this->error('No email provided');\n\n        return null;\n    }\n\n    try {\n        return User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException $e) {\n        $this->error('No user with that email.');\n\n        return null;\n    }\n}", "CodeBleu_score": 75.77127277883233}, {"code": "<?\n<?\n<?\nprivate function user(): ?User{\n\t    if (! $email = $this->option('email')) {\n        $this->error('No email provided');\n        return null;\n    }\n\n    try {\n        $user = User::where('email', $email)->firstOrFail();\n    } catch (ModelNotFoundException) {\n        $this->error('No user with that email');\n        return null;\n    }\n\n    return $user;\n}", "CodeBleu_score": 68.46932033291932}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\n<?\n<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        foreach (config('scout.meilisearch.index-settings') as $index => $settings) {\n            $table = Str::of($index)->before('_')->plural()->snake();\n            $this->artisan('\u2610 Flushing indexes on Meilisearch', 'scout:flush', ['model' => $table, '--verbose' => true]);\n        }\n        $this->info('\u2713 Indexes flushed');\n    }\n}", "CodeBleu_score": 66.79160086937559}, {"code": "<?\n<?\n<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        $indexes = config('scout.meilisearch.index-settings');\n\n        foreach ($indexes as $index => $settings) {\n            $table = $settings['table'] ?? null;\n\n            if ($table) {\n                $this->artisan('\u2610 Flushing index for table ' . $table, 'scout:flush', ['model' => $table, '--verbose' => true]);\n            }\n        }\n\n        $this->info('\u2713 Indexes flushed.');\n    }\n}", "CodeBleu_score": 55.886858040000206}, {"code": "<?\n<?\n<?\nprotected function scoutFlush(): void{\n\t    if (config('scout.driver') === 'meilisearch' && $this->option('flush')) {\n        foreach (config('scout.meilisearch.index-settings') as $index => $settings) {\n            $table = Str::of($index)->beforeLast('_')->plural()->__toString();\n            $this->artisan('\u2610 Flushing '.$index.' index on Meilisearch', 'scout:flush', ['model' => $table, '--verbose' => true]);\n        }\n        $this->info('\u2713 Indexes flushed');\n    }\n}", "CodeBleu_score": 66.15938875462943}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\n<?\n<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->getVCardFromResource($resource);\n    $this->applyExporters($vcard, $resource);\n    return $vcard;\n}", "CodeBleu_score": 13.360423184863905}, {"code": "<?\n<?\n<?\nprivate function export(VCardResource $resource): VCard{\n\t    $vcard = $this->read($resource);\n\n    if (! $vcard) {\n        $vcard = $this->create($resource);\n    }\n\n    $this->exporters()->each(function (ExportVCardResource $exporter) use ($resource, &$vcard): void {\n        $exporter->export($resource, $vcard);\n    });\n\n    return $vcard;\n}", "CodeBleu_score": 19.66972804531217}, {"code": "<?\n<?\n<?\nprivate function export(VCardResource $resource): VCard{\n\t    // Attempt to read an existing VCard from the resource, setting a UID if it is missing\n    try {\n        $vcard = Reader::read($resource->vcard);\n    } catch (ParseException) {\n        $vcard = new VCard();\n    }\n\n    if (! $vcard->UID) {\n        $vcard->UID = $resource->id;\n    }\n\n    // Create a new VCard with basic information\n    $vcard->add('FN', $resource->name);\n\n    // Apply exporters to add more details to the VCard from the resource\n    foreach ($this->exporters() as $exporter) {\n        $exporter->export($resource, $vcard);\n    }\n\n    return $vcard;\n}", "CodeBleu_score": 34.077963142157216}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\n<?\n<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::batch([new DestroyContact($object)])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n    } elseif ($object instanceof Group) {\n        Bus::batch([new DestroyGroup($object)])\n            ->allowFailures()\n            ->onQueue('high')\n            ->dispatch();\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 44.84113562031915}, {"code": "<?\n<?\n<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::dispatch(new DestroyContact($object));\n    } elseif ($object instanceof Group) {\n        Bus::dispatch(new DestroyGroup($object));\n    } else {\n        return false;\n    }\n\n    return true;\n}", "CodeBleu_score": 35.11100202668537}, {"code": "<?\n<?\n<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t    $object = $this->getObject($addressBookId, $cardUri);\n\n    if ($object instanceof Contact) {\n        Bus::batch([\n            new DestroyContact($object)\n        ])->onQueue('high')->dispatch();\n\n        return true;\n    }\n\n    if ($object instanceof Group) {\n        Bus::batch([\n            new DestroyGroup($object)\n        ])->onQueue('high')->dispatch();\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 45.22113604954355}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\n<?\n<?\npublic function upload(array $data){\n\t    if (! isset($data['file'])) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'type' => $data['type'] ?? 'file',\n        'comment' => $data['comment'],\n        'is_done' => 1,\n        'user_id' => auth()->user()->id,\n        'is_scheduled' => 0,\n        'lead_id' => $data['lead_id'],\n    ]);\n\n    return $this->create([\n        'name' => $data['file']->getClientOriginalName(),\n        'path' => $data['file']->store('activities/' . $activity->id, 'public'),\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 60.306696784063604}, {"code": "<?\n<?\n<?\npublic function upload(array $data){\n\t    if (! isset($data['file'])) {\n        return;\n    }\n\n    $activity = $this->activityRepository->create([\n        'type'           => 'file',\n        'comment'        => $data['comment'],\n        'is_done'        => $data['is_done'],\n        'schedule_from'  => $data['schedule_from'] ?? null,\n        'schedule_to'    => $data['schedule_to'] ?? null,\n        'lead_id'        => $data['lead_id'],\n        'user_id'        => auth()->user()->id,\n        'attribute_type' => 'leads',\n    ]);\n\n    return $this->create([\n        'name'       => $data['file']->getClientOriginalName(),\n        'path'       => $data['file']->store('leads/' . $data['lead_id']),\n        'activity_id' => $activity->id,\n    ]);\n}", "CodeBleu_score": 54.74148335409927}, {"code": "<?\n<?\n<?\npublic function upload(array $data){\n\t    if (! isset($data['file'])) {\n        return;\n    }\n\n    $leadActivity = $this->activityRepository->create([\n        'type' => 'file',\n        'comment' => $data['comment'],\n        'is_done' => 1,\n        'user_id' => auth()->user()->id,\n        'lead_id' => $data['lead_id']\n    ]);\n\n    return $this->create([\n        'name' => $data['file']->getClientOriginalName(),\n        'path' => $data['file']->store('leads/' . $data['lead_id']),\n        'activity_id' => $leadActivity->id\n    ]);\n}", "CodeBleu_score": 65.38349601141071}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\n<?\n<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->isHttpException($exception)) {\n        if ($exception->getStatusCode() == 404) {\n            if (request()->is('admin/*')) {\n                return response()->view('admin::errors.404', [], 404);\n            }\n\n            return response()->view('shop::errors.404', [], 404);\n        }\n\n        if ($exception->getStatusCode() == 503) {\n            return response()->view('shop::errors.503', [], 503);\n        }\n\n        if ($exception->getStatusCode() == 403) {\n            return response()->view('shop::errors.403', [], 403);\n        }\n\n        return response()->view('shop::errors.500', [], 500);\n    } elseif ($exception instanceof ModelNotFoundException) {\n        if (request()->is('admin/*')) {\n            return response()->view('admin::errors.404', [], 404);\n        }\n\n        return response()->view('shop::errors.404', [], 404);\n    } elseif ($exception instanceof PDOException) {\n        return response()->view('shop::errors.500', [], 500);\n    } elseif ($exception instanceof ParseError) {\n        return response()->view('shop::errors.500', [], 500);\n    }\n\n    return null;\n}", "CodeBleu_score": 30.955965149793208}, {"code": "<?\n<?\n<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($exception instanceof ModelNotFoundException) {\n        return response()->view('admin::errors.404', [], 404);\n    }\n\n    if ($exception instanceof PDOException) {\n        return response()->view('admin::errors.500', [], 500);\n    }\n\n    if ($exception instanceof ParseError) {\n        return response()->view('admin::errors.500', [], 500);\n    }\n\n    if ($exception instanceof HttpException) {\n        $statusCode = $exception->getStatusCode();\n\n        switch ($statusCode) {\n            case 404:\n                if (request()->is('admin/*')) {\n                    return response()->view('admin::errors.404', [], $statusCode);\n                } else {\n                    return response()->view('shop::errors.404', ['statusCode' => $statusCode], $statusCode);\n                }\n\n            case 403:\n                if (request()->is('admin/*')) {\n                    return response()->view('admin::errors.403', [], $statusCode);\n                } else {\n                    return response()->view('shop::errors.403', ['statusCode' => $statusCode], $statusCode);\n                }\n\n            case 503:\n                return response()->view('shop::errors.503', ['statusCode' => $statusCode], $statusCode);\n\n            default:\n                return response()->view('admin::errors.500', [], 500);\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 35.7637799092123}, {"code": "<?\n<?\n<?\nprivate function renderCustomResponse(Throwable $exception){\n\t    if ($this->isAdminRequest()) {\n        return $this->handleAdminError($exception);\n    } else {\n        return $this->handleFrontError($exception);\n    }\n}", "CodeBleu_score": 11.226065560428793}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\n<?\n<?\nprivate function response($path, $statusCode){\n\t    $errorView = 'admin::errors.' . $statusCode;\n\n    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => isset($this->jsonErrorMessages[$statusCode])\n                ? $this->jsonErrorMessages[$statusCode]\n                : trans('admin::app.common.something-went-wrong')\n        ], $statusCode);\n    }\n\n    return view()->exists($errorView)\n        ? response()->view($errorView, [], $statusCode)\n        : response()->view('admin::errors.500', [], $statusCode);\n}", "CodeBleu_score": 83.21156455236324}, {"code": "<?\n<?\n<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => $this->jsonErrorMessages[$statusCode]\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 71.93070430165746}, {"code": "<?\n<?\n<?\nprivate function response($path, $statusCode){\n\t    if (request()->expectsJson()) {\n        return response()->json([\n            'message' => $this->jsonErrorMessages[$statusCode]\n        ], $statusCode);\n    }\n\n    return response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 71.93070430165746}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\n<?\n<?\npublic function massUpdate(){\n\t    try {\n        $count = 0;\n\n        Event::dispatch('activities.mass-update.before');\n\n        foreach (request('rows') as $activityId) {\n            Event::dispatch('activities.mass-update.before.' . $activityId);\n\n            $activity = $this->activityRepository->update([\n                'is_done' => request('value'),\n            ], $activityId);\n\n            if ($activity->id) {\n                $count++;\n\n                Event::dispatch('activities.mass-update.after.' . $activityId, $activity);\n            }\n        }\n\n        Event::dispatch('activities.mass-update.after');\n\n        if (! $count) {\n            return response()->json(['message' => trans('admin::app.activities.mass-update-failed')], 400);\n        }\n\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-update-success'),\n        ]);\n    } catch (\\Exception $exception) {\n        return response()->json([\n            'message' => $exception->getMessage(),\n        ], 500);\n    }\n}", "CodeBleu_score": 64.61573630864308}, {"code": "<?\n<?\n<?\npublic function massUpdate(){\n\t    try {\n        $count = 0;\n\n        Event::dispatch('activities.mass-update.before');\n\n        foreach (request('rows') as $activityId) {\n            $activity = $this->activityRepository->find($activityId);\n\n            if ($activity->is_done != request('value')) {\n                $activity = $this->activityRepository->update([\n                    'is_done' => request('value'),\n                ], $activityId);\n\n                if ($activity->is_done) {\n                    Event::dispatch('activities.complete', $activity);\n                } else {\n                    Event::dispatch('activities.incomplete', $activity);\n                }\n\n                $count++;\n            }\n        }\n\n        Event::dispatch('activities.mass-update.after', $count);\n\n        return response()->json([\n            'message' => __('admin::app.activities.mass-update-success'),\n        ]);\n    } catch (\\Exception $e) {\n        report($e);\n\n        return response()->json([\n            'message' => __('admin::app.activities.mass-update-error'),\n        ], 500);\n    }\n}", "CodeBleu_score": 62.342387800254905}, {"code": "<?\n<?\n<?\npublic function massUpdate(){\n\t    try {\n        $count = 0;\n\n        if (request('rows')) {\n            foreach (request('rows') as $activityId) {\n                $activity = $this->activityRepository->find($activityId);\n\n                Event::dispatch('activity.update.before', $activityId);\n\n                $activity = $this->activityRepository->update([\n                    'is_done' => request('value'),\n                ], $activityId);\n\n                Event::dispatch('activity.update.after', $activity);\n\n                $count++;\n            }\n\n            if ($count > 0) {\n                return response()->json([\n                    'message' => true,\n                ], 200);\n            } else {\n                return response()->json([\n                    'message' => false,\n                    'response' => false,\n                ], 400);\n            }\n        } else {\n            return response()->json([\n                'message' => trans('admin::app.activities.mass-update-error'),\n            ], 400);\n        }\n    } catch (\\Exception $e) {\n        report($e);\n\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-update-error'),\n        ], 500);\n    }\n}", "CodeBleu_score": 65.02316000058276}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n<?\n<?\n public function massDestroy(){\n\t    $count = 0;\n\n    $data = request()->all();\n\n    foreach (request('rows') as $activityId) {\n        Event::dispatch('activity.delete.before', $activityId);\n\n        $this->activityRepository->delete($activityId);\n\n        Event::dispatch('activity.delete.after', $activityId);\n\n        $count++;\n    }\n\n    if (! $count) {\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-destroy-failed'),\n        ], 400);\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.activities.mass-destroy-success'),\n    ]);\n}", "CodeBleu_score": 49.96400003625027}, {"code": "<?\n<?\n<?\n public function massDestroy(){\n\t    $count = 0;\n\n    $data = request()->all();\n\n    foreach (request('rows') as $activityId) {\n        Event::dispatch('activity.delete.before', $activityId);\n\n        $this->activityRepository->delete($activityId);\n\n        Event::dispatch('activity.delete.after', $activityId);\n\n        $count++;\n    }\n\n    return response()->json([\n        'message' => trans('admin::app.activities.mass-destroy-success'),\n    ]);\n}", "CodeBleu_score": 54.04380697289164}, {"code": "<?\n<?\n<?\n public function massDestroy(){\n\t    $count = 0;\n    foreach (request('rows') as $activityId) {\n        Event::dispatch('activity.delete.before', $activityId);\n        $this->activityRepository->delete($activityId);\n        Event::dispatch('activity.delete.after', $activityId);\n        $count++;\n    }\n    if (!$count) {\n        return response()->json([\n            'message' => trans('admin::app.activities.mass-destroy-failed'),\n        ], 400);\n    }\n    return response()->json([\n        'message' => trans('admin::app.activities.mass-destroy-success'),\n    ]);\n}", "CodeBleu_score": 50.88488620194623}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n<?\n<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n\n    $requestData = request()->all();\n\n    foreach ($cards as &$card) {\n        foreach ($requestData as $cardData) {\n            if ($cardData['id'] === $card['id']) {\n                $card['selected'] = $cardData['selected'];\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 47.988114809577304}, {"code": "<?\n<?\n<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n\n    foreach ($cards as &$card) {\n        foreach (request()->all() as $key => $value) {\n            if ($card['name'] == $key) {\n                $card['selected'] = $value;\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 39.18756660158847}, {"code": "<?\n<?\n<?\n public function updateCards(){\n\t    $cards = $this->dashboardHelper->getCards();\n\n    $requestData = request()->all();\n\n    foreach ($cards as &$card) {\n        foreach ($requestData as $data) {\n            if ($card['id'] == $data['id']) {\n                $card['selected'] = $data['selected'];\n            }\n        }\n    }\n\n    return response()->json($cards);\n}", "CodeBleu_score": 46.96563677214537}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\n<?\n<?\npublic function store(){\n\t    $this->validate(request(), [\n        'slug' => ['required', 'unique:core_config,code', new Code],\n        'name' => 'required',\n        'locale_based' => 'sometimes',\n        'channel_based' => 'sometimes',\n        'value' => 'required',\n    ]);\n\n    $data = request()->all();\n\n    Event::dispatch('core.configuration.create.before');\n\n    $data['locale_based'] = isset($data['locale_based']) ? 1 : 0;\n    $data['channel_based'] = isset($data['channel_based']) ? 1 : 0;\n\n    $configuration = $this->configurationRepository->create($data);\n\n    Event::dispatch('core.configuration.create.after', $configuration);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 32.440369031154916}, {"code": "<?\n<?\n<?\npublic function store(){\n\t    $this->validate(request(), [\n        'key' => ['required', 'unique:core_config,key', new Code],\n        'name' => 'required',\n    ]);\n\n    $this->eventDispatcher->dispatch('core.configuration.create.before');\n\n    $config = $this->configurationRepository->create(request()->all());\n\n    $this->eventDispatcher->dispatch('core.configuration.create.after', $config);\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 35.88986881072385}, {"code": "<?\n<?\n<?\npublic function store(){\n\t    Event::dispatch('core.configuration.create.before');\n\n    $this->configurationRepository->create(request()->all());\n\n    Event::dispatch('core.configuration.create.after');\n\n    session()->flash('success', trans('admin::app.configuration.create-success'));\n\n    return redirect()->back();\n}", "CodeBleu_score": 49.10963969777838}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\n<?\n<?\npublic function download(){\n\t    // Get the file path from the request parameters\n    $path = request()->input('path');\n\n    // Construct the full file name\n    $fileName = 'configuration/' . $path;\n\n    // Fetch the configuration from the repository\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    // Return the file for download using the stored value\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 67.89612185124099}, {"code": "<?\n<?\n<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n    $fileName = 'configuration/'. $path;\n    $config = core()->getConfigData($fileName);\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 74.13703557507596}, {"code": "<?\n<?\n<?\npublic function download(){\n\t    $path = request()->route()->parameters()['path'];\n\n    $fileName = 'configuration/' . $path;\n\n    $config = $this->configurationRepository->findOneByField('value', $fileName);\n\n    return Storage::download($config['value']);\n}", "CodeBleu_score": 88.83155892813606}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t    List<AdminModelSort> adminModelSortList = new ArrayList<>();\n    for (String s : list) {\n        AdminModelSort adminModelSort = new AdminModelSort();\n        adminModelSort.setUserId(UserUtil.getUserId());\n        adminModelSort.setType(1);\n        adminModelSort.setModel(s);\n        adminModelSortList.add(adminModelSort);\n    }\n    adminModelSortService.lambdaUpdate().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1).remove();\n    adminModelSortService.saveBatch(adminModelSortList);\n    return Result.ok();\n}", "CodeBleu_score": 50.53440569145354}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t        List<AdminModelSort> sortList = new ArrayList<>();\n        for (int i = 0; i < list.size(); i++) {\n            AdminModelSort adminModelSort = new AdminModelSort();\n            adminModelSort.setType(1);\n            adminModelSort.setUserId(UserUtil.getUserId());\n            adminModelSort.setModel(list.get(i));\n            adminModelSort.setSort(i + 1);\n            sortList.add(adminModelSort);\n        }\n        adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\n        adminModelSortService.saveBatch(sortList);\n        return Result.ok();\n    }", "CodeBleu_score": 70.85101128157031}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\t        List<AdminModelSort> sortList = new ArrayList<>();\n        for (String model : list) {\n            AdminModelSort sort = new AdminModelSort();\n            sort.setModel(model);\n            sort.setType(1);\n            sort.setUserId(UserUtil.getUserId());\n            sort.setSort(list.indexOf(model));\n            sortList.add(sort);\n        }\n        adminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\n        adminModelSortService.saveBatch(sortList);\n        return Result.ok();\n    }", "CodeBleu_score": 49.654145224525344}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (AdminModuleEnum.CRM.equals(AdminModuleEnum.parse(adminConfig.getModule()))) {\n        return R.error(AdminCodeEnum.MODULE_SETTING_ERROR);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    adminConfigService.saveSetting(moduleSetting);\n    return R.ok();\n}", "CodeBleu_score": 67.28307511244437}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (adminConfig == null) {\n        return Result.error(AdminCodeEnum.MODULE_SETTING_NOT_EXIST);\n    }\n    if (AdminModuleEnum.CRM.getModule().equals(adminConfig.getModule())) {\n        return Result.error(AdminCodeEnum.MODULE_SETTING_NOT_EXIST);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    adminConfigService.saveSetting(moduleSetting);\n    return R.ok();\n}", "CodeBleu_score": 66.09502352171607}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t    AdminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n    if (adminConfig == null) {\n        return Result.error(AdminCodeEnum.SETTING_NOT_EXIST);\n    }\n    if (AdminModuleEnum.CRM.getType().equals(adminConfig.getModule())) {\n        return Result.error(AdminCodeEnum.CANNOT_SET_CRM);\n    }\n    adminConfig.setStatus(moduleSetting.getStatus());\n    adminConfigService.updateById(adminConfig);\n    adminConfigService.saveSetting(moduleSetting);\n    return Result.ok();\n}", "CodeBleu_score": 67.67250036259867}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            userConfig = new AdminUserConfig();\n            userConfig.setUserId(UserUtil.getUserId());\n            userConfig.setName(customKey);\n        }\n        userConfig.setValue(json.toJSONString());\n        adminUserConfigService.saveOrUpdate(userConfig);\n        return Result.ok();\n    }", "CodeBleu_score": 66.84668947015815}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig != null) {\n            userConfig.setValue(json.toString());\n            adminUserConfigService.updateById(userConfig);\n        } else {\n            userConfig = new AdminUserConfig();\n            userConfig.setUserId(UserUtil.getUserId());\n            userConfig.setName(customKey);\n            userConfig.setValue(json.toString());\n            adminUserConfigService.save(userConfig);\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 79.65572048284407}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t        AdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n        if (userConfig == null) {\n            userConfig = new AdminUserConfig();\n            userConfig.setName(customKey);\n            userConfig.setValue(json.toJSONString());\n            userConfig.setUserId(UserUtil.getUserId());\n            adminUserConfigService.save(userConfig);\n        } else {\n            userConfig.setValue(json.toJSONString());\n            adminUserConfigService.updateById(userConfig);\n        }\n        return Result.ok();\n    }", "CodeBleu_score": 77.58308956609109}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        throw new NoLoginException();\n    }\n    String deptName = deptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return R.ok(user);\n}", "CodeBleu_score": 52.81487618461185}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser adminUser = adminUserService.getById(userId);\n    String deptName = deptService.getNameByDeptId(adminUser.getDeptId());\n    adminUser.setDeptName(deptName);\n    adminUser.setSalt(null);\n    adminUser.setPassword(null);\n    return R.ok(adminUser);\n}", "CodeBleu_score": 54.5873966668667}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t    AdminUser user = adminUserService.getById(userId);\n    if (user == null) {\n        return R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n    }\n    String deptName = deptService.getNameByDeptId(user.getDeptId());\n    user.setDeptName(deptName);\n    user.setSalt(null);\n    user.setPassword(null);\n    return R.ok(user);\n}", "CodeBleu_score": 52.72468248244453}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t        Long userId = UserUtil.getUserId();\n        List<AdminUserConfig> userConfigs = adminUserConfigService.queryUserConfigByName(\"readNotice\");\n        if (userConfigs.size() > 1) {\n            userConfigs.forEach(userConfig -> {\n                userConfig.setStatus(1);\n                adminUserConfigService.updateById(userConfig);\n            });\n        } else {\n            AdminUserConfig userConfig = new AdminUserConfig();\n            userConfig.setName(\"readNotice\");\n            userConfig.setUserId(userId);\n            userConfig.setStatus(1);\n            adminUserConfigService.save(userConfig);\n        }\n        return R.ok();\n    }", "CodeBleu_score": 41.1891745724496}, {"code": " public Result readNotice() {\n\t        Long userId = UserUtil.getUserId();\n        List<AdminUserConfig> userConfigs = adminUserConfigService.lambdaQuery().eq(AdminUserConfig::getName, \"readNotice\").eq(AdminUserConfig::getUserId, userId).list();\n        if (userConfigs.size() > 1) {\n            for (AdminUserConfig userConfig : userConfigs) {\n                userConfig.setStatus(1);\n                adminUserConfigService.updateById(userConfig);\n            }\n        } else {\n            AdminUserConfig userConfig = new AdminUserConfig();\n            userConfig.setName(\"readNotice\");\n            userConfig.setStatus(1);\n            userConfig.setUserId(userId);\n            adminUserConfigService.save(userConfig);\n        }\n        return R.ok();\n    }", "CodeBleu_score": 55.370362179120434}, {"code": " public Result readNotice() {\n\t        Long userId = UserUtil.getUserId();\n        List<AdminUserConfig> userConfigs = adminUserConfigService.lambdaQuery().eq(AdminUserConfig::getUserId, userId).eq(AdminUserConfig::getName, \"readNotice\").list();\n        if (userConfigs.size() > 1) {\n            userConfigs.forEach(userConfig -> {\n                userConfig.setStatus(1);\n                adminUserConfigService.updateById(userConfig);\n            });\n        } else {\n            AdminUserConfig userConfig = new AdminUserConfig();\n            userConfig.setUserId(userId);\n            userConfig.setName(\"readNotice\");\n            userConfig.setStatus(1);\n            adminUserConfigService.save(userConfig);\n        }\n        return R.ok();\n    }", "CodeBleu_score": 56.441806673228065}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = queryConfigListByName(AdminConst.COMPANY_INFO).get(0);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(new AdminCompanyBO()));\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    if (adminConfig.getId() == null) {\n        save(adminConfig);\n    } else {\n        updateById(adminConfig);\n    }\n}", "CodeBleu_score": 51.39156847454714}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(\"companyInfo\");\n        adminConfig.setValue(\"{}\");\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    saveOrUpdate(adminConfig);\n}", "CodeBleu_score": 54.79211195938575}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t    AdminConfig adminConfig = queryConfigByName(AdminConst.COMPANY_INFO);\n    if (adminConfig == null) {\n        adminConfig = new AdminConfig();\n        adminConfig.setName(AdminConst.COMPANY_INFO);\n        adminConfig.setValue(JSON.toJSONString(AdminCompanyBO.builder().build()));\n    }\n    adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n    if (adminConfig.getId() == null) {\n        save(adminConfig);\n    } else {\n        updateById(adminConfig);\n    }\n}", "CodeBleu_score": 47.089290527035175}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig != null) {\n        return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n    } else {\n        return new AdminCompanyBO();\n    }\n}", "CodeBleu_score": 65.88212206893004}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.38909005104608}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\t    String companyKey = \"companyInfo\";\n    AdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\n    if (adminConfig == null) {\n        return new AdminCompanyBO();\n    }\n    return JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 63.38909005104608}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> configList = new ArrayList<>();\n    for (String s : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(logConfigName);\n        adminConfig.setValue(s);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(s);\n        configList.add(adminConfig);\n    }\n    //\u5220\u9664\u4e4b\u524d\u7684\u914d\u7f6e\n    removeByName(logConfigName);\n    saveBatch(configList);\n}", "CodeBleu_score": 52.444813429957705}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigList = new ArrayList<>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(logConfigName);\n        adminConfig.setValue(string);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(string);\n        adminConfigList.add(adminConfig);\n    }\n    remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n    saveBatch(adminConfigList);\n}", "CodeBleu_score": 50.83434326739198}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\t    List<AdminConfig> adminConfigList = new ArrayList<>();\n    for (String string : stringList) {\n        AdminConfig adminConfig = new AdminConfig();\n        adminConfig.setName(logConfigName);\n        adminConfig.setValue(string);\n        adminConfig.setStatus(1);\n        adminConfig.setDescription(string);\n        adminConfigList.add(adminConfig);\n    }\n    lambdaUpdate().eq(AdminConfig::getName, logConfigName).remove();\n    saveBatch(adminConfigList);\n}", "CodeBleu_score": 48.62752937284759}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = adminUserService.getUserId();\n    AdminUserVO adminUserVO = adminUserService.getUserInfo();\n    String username = adminUserVO.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = adminUserVO.getSalt();\n    String dbPassword = adminUserService.getPasswordByUserId(userId);\n    String md5Password = MD5Util.getMD5(password + salt);\n    if (!dbPassword.equals(md5Password)) {\n        throw new BusinessException(AdminCodeEnum.PASSWORD_ERROR);\n    }\n    String code = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n    redisService.set(RedisKey.ADMIN_INIT_CODE + userId, code, 60 * 10);\n    return code;\n}", "CodeBleu_score": 45.546750440800274}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    // \u83b7\u53d6\u5f53\u524d\u7528\u6237ID\u548c\u7528\u6237\u8be6\u60c5\uff0c\u5305\u62ec\u7528\u6237\u540d\n    AdminUser adminUser = adminUserService.queryCurrentUserInfo();\n    // \u83b7\u53d6\u7528\u6237\u540d\n    String username = adminUser.getUsername();\n    // \u83b7\u53d6\u5bc6\u7801\n    String password = adminInitDataBO.getPassword();\n    // \u83b7\u53d6\u76d0\u503c\n    String salt = adminUser.getSalt();\n    // \u751f\u6210\u52a0\u5bc6\u540e\u7684\u5bc6\u7801\n    String encodePassword = MD5Util.encode(password, salt);\n    // \u67e5\u8be2\u7528\u6237\u4fe1\u606f\n    AdminUser adminUser1 = adminUserService.queryUserByName(username);\n    // \u5224\u65ad\u5bc6\u7801\u662f\u5426\u6b63\u786e\n    if (!encodePassword.equals(adminUser1.getPassword())) {\n        throw new BusinessException(CodeMsg.INVALID_PASSWORD);\n    }\n    // \u751f\u6210\u4e34\u65f6\u8bbf\u95ee\u7801\n    String accessCode = UUID.randomUUID().toString().replace(\"-\", \"\");\n    // \u5c06\u4e34\u65f6\u8bbf\u95ee\u7801\u5b58\u5165Redis\uff0c\u5e76\u8bbe\u7f6e\u8fc7\u671f\u65f6\u95f4\u4e3a10\u5206\u949f\n    redisService.set(RedisKey.ACCESS_CODE + accessCode, accessCode, 600);\n    // \u8fd4\u56de\u4e34\u65f6\u8bbf\u95ee\u7801\n    return accessCode;\n}", "CodeBleu_score": 39.63759210367456}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t    String userId = adminUserService.getUserId();\n    AdminUser adminUser = adminUserService.getById(userId);\n    String username = adminUser.getUsername();\n    String password = adminInitDataBO.getPassword();\n    String salt = adminUser.getSalt();\n    String passwordHash = MD5Util.getMD5(password, salt);\n    if (!passwordHash.equals(adminUser.getPassword())) {\n        throw new BusinessException(ResultCode.PASSWORD_ERROR);\n    }\n    String code = RandomUtil.getRandomString(16);\n    redisUtil.set(RedisKey.INIT_CODE + userId, code, 600);\n    return code;\n}", "CodeBleu_score": 43.14972961610783}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t        List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n        for (Integer menuId : menuIdList) {\n            AdminRoleMenu roleMenu = new AdminRoleMenu();\n            roleMenu.setRoleId(roleId);\n            roleMenu.setMenuId(menuId);\n            roleMenuList.add(roleMenu);\n        }\n        saveBatch(roleMenuList);\n    }", "CodeBleu_score": 57.58931988461175}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t        List<AdminRoleMenu> roleMenuList = new ArrayList<>();\n        for (Integer menuId : menuIdList) {\n            AdminRoleMenu roleMenu = new AdminRoleMenu();\n            roleMenu.setRoleId(roleId);\n            roleMenu.setMenuId(menuId);\n            roleMenuList.add(roleMenu);\n        }\n        saveBatch(roleMenuList);\n    }", "CodeBleu_score": 57.58931988461175}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\t        List<AdminRoleMenu> adminRoleMenuList = new ArrayList<>();\n        for (Integer menuId : menuIdList) {\n            AdminRoleMenu adminRoleMenu = new AdminRoleMenu();\n            adminRoleMenu.setRoleId(roleId);\n            adminRoleMenu.setMenuId(menuId);\n            adminRoleMenuList.add(adminRoleMenu);\n        }\n        saveBatch(adminRoleMenuList);\n    }", "CodeBleu_score": 70.09355757564161}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\t    adminThreadPoolExecutor.execute(() -> {\n        try {\n            String index = getIndexAliases(SYS_LOG_TYPE);\n            Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n            map.put(\\\"createTime\\\", LocalDate.parse(map.get(\\\"createTime\\\").toString(), DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\")).format(DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\")));\n            map.remove(\\\"id\\\");\n            IndexRequest request = new IndexRequest(index);\n            request.source(map, XContentType.JSON);\n            IndexResponse indexResponse = restHighLevelClient.index(request, RequestOptions.DEFAULT);\n            log.info(\\\"save sysLog to es success,id:{},result:{}\\\", sysLog.getId(), indexResponse.getResult());\n        } catch (Exception e) {\n            log.error(\\\"save sysLog to es error,sysLog:{},error:{}\\\", sysLog, e);\n        }\n    });\n}", "CodeBleu_score": 46.741541293050965}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    adminThreadPoolExecutor.execute(() -> {\n        try {\n            String index = getIndexAliases(SYS_LOG_TYPE);\n            Map<String, Object> map = BeanUtil.beanToMap(sysLog, true, false);\n            String createTime = (String) map.get(\\\"createTime\\\");\n            map.put(\\\"createTime\\\", LocalDate.parse(createTime, DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\")).toString());\n            map.remove(\\\"id\\\");\n            IndexRequest indexRequest = new IndexRequest(index);\n            indexRequest.source(map, XContentType.JSON);\n            IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n            log.info(\\\"save sys log result:{}\\\", indexResponse);\n        } catch (Exception e) {\n            log.error(\\\"save sys log error:{}\\\", e);\n        }\n    });\n}", "CodeBleu_score": 45.10391505529018}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t    adminThreadPoolExecutor.execute(()->{\n        String index = getIndexAliases(SYS_LOG_TYPE);\n        Map<String, Object> map = BeanUtil.beanToMap(sysLog);\n        map.put(\\\"createTime\\\", LocalDate.now().format(DateTimeFormatter.ofPattern(\\\"yyyy-MM-dd HH:mm:ss\\\")));\n        map.remove(\\\"id\\\");\n        IndexRequest indexRequest = new IndexRequest(index).source(map, XContentType.JSON);\n        try {\n            IndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n        } catch (IOException e) {\n            log.error(\\\"save sys log error, log:{}\\\", sysLog, e);\n        }\n    });\n}", "CodeBleu_score": 52.92099104997996}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t  const file = fs.createWriteStream(dest);\n  const request = https.get(url, function (response) {\n    response.pipe(file);\n  });\n\n  return new Promise((resolve, reject) => {\n    file.on(\"finish\", () => {\n      file.close();\n      resolve(true);\n    });\n    file.on(\"error\", (err) => {\n      fs.unlink(dest, () => {});\n      reject(err.message);\n    });\n  });\n}", "CodeBleu_score": 53.889163145541595}, {"code": "async function downloadFile(url, dest){\n\t    const file = fs.createWriteStream(dest);\n    return new Promise((resolve, reject) => {\n        https.get(url, (response) => {\n            response.pipe(file);\n            file.on(\"finish\", () => {\n                file.close();\n                resolve();\n            });\n        }).on(\"error\", (err) => {\n            fs.unlink(dest, () => {\n                reject(err);\n            });\n        });\n    });\n}", "CodeBleu_score": 59.91075464923361}, {"code": "async function downloadFile(url, dest){\n\t    return new Promise((resolve, reject) => {\n        const file = fs.createWriteStream(dest);\n        https.get(url, (response) => {\n            response.pipe(file);\n            file.on('finish', () => {\n                file.close();\n                resolve(true);\n            });\n        }).on('error', (err) => {\n            fs.unlink(dest, () => reject(err));\n        });\n    });\n}", "CodeBleu_score": 60.90542269253769}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t    Set<String> dependentModuleIds = getDependentModulesFromDsl(module.getEditingApplicationDSL());\n    dependentModuleIds.removeAll(circularDependencyCheckSet);\n    circularDependencyCheckSet.addAll(dependentModuleIds);\n    return findByIdIn(Lists.newArrayList(dependentModuleIds));\n}", "CodeBleu_score": 36.90697473014117}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        List<String> dependentModuleIds = getDependentModulesFromDsl(module.getEditingApplicationDSL());\n        return Flux.fromIterable(dependentModuleIds)\n                .filter(moduleId -> !circularDependencyCheckSet.contains(moduleId))\n                .doOnNext(circularDependencyCheckSet::add)\n                .flatMap(moduleId -> findById(moduleId));\n    }", "CodeBleu_score": 51.21361973615824}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\t        return Mono.just(getDependentModulesFromDsl(module.getLiveApplicationDsl()))\n                .doOnNext(circularDependencyCheckSet::addAll)\n                .flatMapMany(moduleSet -> findByIdIn(Lists.newArrayList(moduleSet)))\n                .onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue , {}\", e.getMessage()));\n    }", "CodeBleu_score": 66.65186109723858}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map<?, ?> nestedMap) {\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (value instanceof List<?> nestedList) {\n            for (Object nestedValue : nestedList) {\n                if (nestedValue instanceof Map<?, ?> nestedMapInList) {\n                    doGetDependentModules(nestedMapInList, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\\\"type\\\") && value.equals(\\\"module\\\")) {\n            Object appId = map.get(\\\"appId\\\");\n            if (appId instanceof String appIdStr && StringUtils.isNotBlank(appIdStr)) {\n                dependentModuleIds.add(appIdStr);\n            }\n        }\n    }\n}", "CodeBleu_score": 46.2569997887873}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        Object value = entry.getValue();\n        if (value instanceof Map<?, ?> nestedMap) {\n            if (\"module\".equals(nestedMap.get(\"type\"))) {\n                String appId = (String) nestedMap.get(\"appId\");\n                if (StringUtils.isNotBlank(appId)) {\n                    dependentModuleIds.add(appId);\n                }\n            }\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (value instanceof List<?> list) {\n            for (Object element : list) {\n                if (element instanceof Map<?, ?> nestedMapInList) {\n                    doGetDependentModules(nestedMapInList, dependentModuleIds);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 53.75047491934527}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t    for (Map.Entry<?, ?> entry : map.entrySet()) {\n        if (entry.getValue() instanceof Map<?, ?> nestedMap) {\n            doGetDependentModules(nestedMap, dependentModuleIds);\n        } else if (entry.getValue() instanceof List<?> list) {\n            for (Object item : list) {\n                if (item instanceof Map<?, ?> nestedMap) {\n                    doGetDependentModules(nestedMap, dependentModuleIds);\n                }\n            }\n        } else if (entry.getKey().equals(\\\"type\\\") && entry.getValue().equals(\\\"module\\\") && map.containsKey(\\\"appId\\\") && StringUtils.isNotBlank(map.get(\\\"appId\\\").toString())) {\n            dependentModuleIds.add(map.get(\\\"appId\\\").toString());\n        }\n    }\n}", "CodeBleu_score": 37.170546022071086}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t     try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n         BufferedImage image = ImageIO.read(dataBuffer.asInputStream());\n         if (createThumbnail) {\n             image = resizeImage(image);\n         }\n         ImageIO.write(image, \\\"JPEG\\\", baos);\n         baos.flush();\n         return Asset.builder()\n                 .contentType(createThumbnail ? MediaType.IMAGE_JPEG : srcContentType)\n                 .content(baos.toByteArray())\n                 .build();\n     } finally {\n         DataBufferUtils.release(dataBuffer);\n     }\n }", "CodeBleu_score": 37.464871883906234}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t     final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n     final BufferedImage image = ImageIO.read(dataBuffer.asInputStream());\n     if (createThumbnail) {\n         final BufferedImage thumbnailImage = new BufferedImage(thumbNailPhotoDimension.get(), thumbNailPhotoDimension.get(), BufferedImage.TYPE_INT_RGB);\n         thumbnailImage.createGraphics().drawImage(image.getScaledInstance(thumbNailPhotoDimension.get(), thumbNailPhotoDimension.get(), Image.SCALE_SMOOTH), 0, 0, null);\n         ImageIO.write(thumbnailImage, \\\"jpg\\\", outputStream);\n     } else {\n         ImageIO.write(image, srcContentType.getSubtype(), outputStream);\n     }\n     dataBuffer.release();\n     return new Asset(outputStream.toByteArray(), MediaType.IMAGE_JPEG);\n }", "CodeBleu_score": 33.436895910731465}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t     try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n         final BufferedImage originalImage = ImageIO.read(dataBuffer.asInputStream());\n         final BufferedImage image;\n         if (createThumbnail) {\n             image = resizeImage(originalImage, thumbNailPhotoDimension.get(), thumbNailPhotoDimension.get());\n         } else {\n             image = originalImage;\n         }\n         ImageIO.write(image, \\\"JPEG\\\", baos);\n         return new Asset(baos.toByteArray(), MediaType.IMAGE_JPEG);\n     } finally {\n         DataBufferUtils.release(dataBuffer);\n     }\n }", "CodeBleu_score": 40.351247784270896}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .switchIfEmpty(Mono.error(new BizException(BizError.INVALID_PARAMETER, \\\"ASSET_NOT_FOUND\\\", assetId)))\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                if (asset.getContentType() != null) {\n                    response.getHeaders().set(HttpHeaders.CONTENT_TYPE, asset.getContentType().toString());\n                }\n                return response.writeWith(Flux.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 38.43848647022556}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return getById(assetId)\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                MediaType contentType = asset.getContentType();\n                if (contentType != null) {\n                    response.getHeaders().setContentType(contentType);\n                }\n                DataBuffer dataBuffer = exchange.getResponse().bufferFactory().wrap(asset.getData());\n                return response.writeWith(Mono.just(dataBuffer));\n            });\n}", "CodeBleu_score": 65.10297834610562}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\t    return assetService.getById(assetId)\n            .switchIfEmpty(Mono.error(new BizException(BizError.INVALID_PARAMETER, \\\"INVALID_ASSET_ID\\\", assetId)))\n            .flatMap(asset -> {\n                ServerHttpResponse response = exchange.getResponse();\n                response.setStatusCode(HttpStatus.OK);\n                HttpHeaders headers = response.getHeaders();\n                Optional.ofNullable(asset.getContentType()).ifPresent(headers::setContentType);\n                return response.writeWith(Flux.just(exchange.getResponse().bufferFactory().wrap(asset.getData())));\n            });\n}", "CodeBleu_score": 32.56337335616621}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.getEnterpriseModeOrganizations()\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            );\n}", "CodeBleu_score": 64.63766458516102}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n    return organizationService.getAllEnterpriseMode()\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            );\n}", "CodeBleu_score": 64.1674950678441}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\t    if (commonConfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\n        return Flux.empty();\n    }\n\n    return organizationService.getByEnterpriseMode()\n            .flatMapIterable(organization ->\n                    organization.getAuthConfigs()\n                            .stream()\n                            .map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n                            .collect(Collectors.toList())\n            );\n}", "CodeBleu_score": 64.16590052967169}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t        SpringDataMongoV3Driver driver = SpringDataMongoV3Driver.withDefaultLock(mongoTemplate);\n        return MongockSpring5.builder()\n                .setDriver(driver)\n                .setChangeLogsScanPackage(\n                        \"com.openblocks.infra.migration\"\n                )\n                .setSpringContext(springContext)\n                .buildApplicationRunner();\n    }", "CodeBleu_score": 44.49672405318085}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t        return MongockSpring5.builder()\n                .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n                .addChangeLogsScanPackage(\"com.openblocks.infra.migration\")\n                .setSpringContext(springContext)\n                .buildApplicationRunner();\n    }", "CodeBleu_score": 26.980982844045197}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t        return MongockSpring5.builder()\n                .setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n                .addChangeLogsScanPackage(\n                        \"com.openblocks.infra.mongo.migration\"\n                )\n                .setSpringContext(springContext)\n                .buildApplicationRunner();\n    }", "CodeBleu_score": 28.168024425535954}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t        ReactiveMongoTemplate reactiveMongoTemplate = new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n        reactiveMongoTemplate.setReadPreference(ReadPreference.secondaryPreferred());\n        return reactiveMongoTemplate;\n    }", "CodeBleu_score": 75.7466843048766}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getQuery)\n            .map(BaseQuery::getDsl)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getQuery)\n                    .map(BaseQuery::getDsl));\n}", "CodeBleu_score": 64.07315702593347}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getQuery)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getQuery))\n            .map(BaseQuery::getDsl);\n}", "CodeBleu_score": 69.06536824200951}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\t    return libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n            .map(LibraryQueryRecord::getQuery)\n            .switchIfEmpty(getById(libraryQueryId)\n                    .map(LibraryQuery::getQuery))\n            .map(BaseQuery::toDSL);\n}", "CodeBleu_score": 69.32597754669433}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Duration timeout = QueryTimeoutUtils.getTimeout(timeoutStr);\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n        return datasourceConnectionPool.getConnection(datasource)\n                .flatMap(connection -> {\n                    if (datasource.isUseNewQuery()) {\n                        return executeQueryOnNode(queryExecutionContext, timeout);\n                    }\n                    return executeQueryLocally(connection, queryExecutionContext, timeout);\n                })\n                .onErrorResume(TimeoutException.class, e -> Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_TIMEOUT, \\\"query timeout\\\")))\n                .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_ERROR, e.getMessage())))\n                .onErrorResume(e -> {\n                    log.error(\\\"query execution error\\\", e);\n                    return Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_ERROR, \\\"query execution error\\\"));\n                });\n    }", "CodeBleu_score": 43.64253037986431}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Duration timeoutDuration = QueryTimeoutUtils.getTimeoutDuration(timeoutStr);\n        return datasourceConnectionPool.getConnection(datasource)\n                .flatMap(connection -> {\n            QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                    .datasourceConnectionHolder(connection)\n                    .queryConfig(queryConfig)\n                    .requestParams(requestParams)\n                    .queryVisitorContext(queryVisitorContext)\n                    .build();\n\n            return datasourceMetaInfoService.getDatasourceType(datasource)\n                    .flatMap(datasourceType -> {\n                        return datasourcePluginClient.executeQuery(datasourceType, queryExecutionContext, timeoutDuration);\n                    })\n                    .onErrorResume(TimeoutException.class, e -> Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_TIMEOUT, \\\"query timeout\\\")))\n                    .onErrorResume(PluginException.class, e -> Mono.just(QueryExecutionResult.error(e.getBizError(), e.getMessage())));\n        }).doOnError(e -> log.error(\\\"execute query error\\\", e));\n    }", "CodeBleu_score": 38.29917500162496}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t        Duration timeoutDuration = QueryTimeoutUtils.parseTimeout(timeoutStr);\n        if (datasource.getDatasourceType().isNode()) {\n            return datasourcePluginClient.executeQuery(datasource.getId(), queryConfig, requestParams, timeoutDuration, queryVisitorContext)\n                    .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, QUERY_EXECUTION_TIMEOUT.getMessage(), e))\n                    .onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, e.getMessage(), e));\n        }\n\n        return executeQueryLocally(datasource, queryConfig, requestParams, timeoutDuration, queryVisitorContext)\n                .onErrorMap(TimeoutException.class, e -> ofException(QUERY_EXECUTION_TIMEOUT, QUERY_EXECUTION_TIMEOUT.getMessage(), e))\n                .onErrorMap(PluginException.class, e -> ofException(QUERY_EXECUTION_ERROR, e.getMessage(), e));\n    }", "CodeBleu_score": 45.44662250632966}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        return datasourceConnectionPool.getConnection(datasource.getId())\n                .flatMap(connection -> {\n                    QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                            .datasource(datasource)\n                            .queryConfig(queryConfig)\n                            .requestParams(requestParams)\n                            .queryVisitorContext(queryVisitorContext)\n                            .build();\n                    return datasourceMetaInfoService.getQueryExecutor(datasource.getType())\n                            .executeQuery(connection, queryExecutionContext);\n                });\n    }", "CodeBleu_score": 47.230754311748555}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        QueryExecutor queryExecutor = queryExecutorFactory.getQueryExecutor(datasource.getType());\n        QueryExecutionContext queryExecutionContext = new QueryExecutionContext(queryConfig, requestParams, queryVisitorContext);\n        return datasourceConnectionPool.getConnection(datasource)\n                .flatMap(connection -> queryExecutor.executeQuery(queryExecutionContext, connection))\n                .doFinally(signalType -> connection.close());\n    }", "CodeBleu_score": 42.86698131792656}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\t        QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                .datasource(datasource)\n                .queryConfig(queryConfig)\n                .requestParams(requestParams)\n                .queryVisitorContext(queryVisitorContext)\n                .build();\n\n        DatasourceConnectionHolder connectionHolder = datasourceConnectionPool.acquire(datasource);\n        return Mono.fromCallable(() -> connectionHolder.getQueryExecutor().execute(queryExecutionContext))\n                .doFinally(signalType -> connectionHolder.close());\n    }", "CodeBleu_score": 45.964494099244824}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MILLIS;\n        }\n\n        Pair<Integer, String> timeoutValueAndUnit = extractTimeoutValueAndUnit(timeoutStr);\n        int timeoutValue = timeoutValueAndUnit.getLeft();\n        String timeoutUnit = timeoutValueAndUnit.getRight();\n\n        int timeoutMs = convertToMilliseconds(timeoutValue, timeoutUnit);\n\n        if (timeoutMs > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n            throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \\\"QUERY_TIMEOUT_EXCEED_MAX_VALUE\\\", MAX_QUERY_TIMEOUT_SECONDS);\n        }\n\n        return timeoutMs;\n    }", "CodeBleu_score": 37.180090651970005}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t        if (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MILLIS;\n        }\n\n        Pair<Integer, String> timeoutPair = extractTimeout(timeoutStr);\n        int timeout = timeoutPair.getLeft();\n        String unit = timeoutPair.getRight();\n\n        int timeoutMillis = convertToMillis(timeout, unit);\n        if (timeoutMillis > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n            throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"QUERY_TIMEOUT_EXCEED_MAX\", MAX_QUERY_TIMEOUT_SECONDS);\n        }\n\n        return timeoutMillis;\n    }", "CodeBleu_score": 40.331817808977405}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t    if (StringUtils.isBlank(timeoutStr)) {\n        return DEFAULT_QUERY_TIMEOUT_MILLIS;\n    }\n    Pair<Integer, String> valueAndUnit = extractValueAndUnit(timeoutStr);\n    int value = valueAndUnit.getLeft();\n    String unit = valueAndUnit.getRight();\n    int millis = convertToMillis(value, unit);\n    if (millis > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n        throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, String.format(\"QUERY_TIMEOUT_EXCEED_MAX_%s_SECONDS\", MAX_QUERY_TIMEOUT_SECONDS));\n    }\n    return millis;\n}", "CodeBleu_score": 38.0565120758131}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        List<ApplicationQuery> queries = application.getLiveApplicationDsl().getQueries();\n        if (isNull(queries) || queries.isEmpty()) {\n            return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\"));\n        }\n        List<Pair<String, String>> datasourceIdMap = new ArrayList<>();\n        for (ApplicationQuery query : queries) {\n            String datasourceId = query.getDatasourceId();\n            if (isNull(datasourceId)) {\n                continue;\n            }\n            datasourceIdMap.add(Pair.of(datasourceId, datasourceId));\n        }\n        return Flux.fromIterable(datasourceIdMap)\n                .map(pair -> datasourceService.getById(pair.getLeft(), visitorId))\n                .flatMap(datasource -> {\n                    Datasource copiedDatasource = Datasource.builder()\n                            .name(datasource.getName())\n                            .organizationId(currentOrganizationId)\n                            .datasourceConfig(datasource.getDatasourceConfig())\n                            .datasourceType(datasource.getDatasourceType())\n                            .creationSource(DatasourceCreationSource.TEMPLATE)\n                            .build();\n                    return datasourceService.create(copiedDatasource, visitorId);\n                })\n                .map(datasource -> Pair.of(datasourceIdMap.stream()\n                                .filter(pair -> pair.getLeft().equals(datasource.getId()))\n                                .findFirst()\n                                .orElseThrow(() -> ofError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\"))\n                                .getLeft(), datasource.getId()))\n                .collectList();\n    }", "CodeBleu_score": 26.535795133599414}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        List<ApplicationQuery> applicationQueries = application.getLiveApplicationQueries();\n        if (isNull(applicationQueries) || applicationQueries.isEmpty()) {\n            return Mono.error(ofError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\"));\n        }\n        List<String> datasourceIds = applicationQueries.stream()\n                .map(ApplicationQuery::getDatasourceId)\n                .collect(Collectors.toList());\n        return datasourceService.getByIds(datasourceIds)\n                .flatMap(datasource -> {\n                    Datasource copiedDatasource = Datasource.builder()\n                            .name(datasource.getName())\n                            .type(datasource.getType())\n                            .datasourceConfig(datasource.getDatasourceConfig())\n                            .organizationId(currentOrganizationId)\n                            .creationSource(DatasourceCreationSource.TEMPLATE)\n                            .build();\n                    return datasourceService.create(copiedDatasource, visitorId);\n                })\n                .collectList()\n                .map(datasources -> {\n                    List<Pair<String, String>> datasourceIdMap = new ArrayList<>();\n                    for (int i = 0; i < datasourceIds.size(); i++) {\n                        datasourceIdMap.add(Pair.of(datasourceIds.get(i), datasources.get(i).getId()));\n                    }\n                    return datasourceIdMap;\n                });\n    }", "CodeBleu_score": 26.25042597174675}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\t        return applicationService.findById(application.getId())\n                .map(Application::getLiveApplicationDsl)\n                .map(liveApplicationDsl -> liveApplicationDsl.getQueries()\n                .stream()\n                .map(ApplicationQuery::getDatasourceId)\n                .collect(Collectors.toList()))\n                .flatMapIterable(Function.identity())\n                .switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \\\"TEMPLATE_NOT_CORRECT\\\"))\n                .map(datasourceId -> Pair.of(datasourceId, RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH)))\n                .flatMap(pair -> datasourceService.getById(pair.getLeft())\n                        .zipWith(Mono.just(pair))\n                        .zipWhen(tuple -> datasourceService.create(Datasource.builder()\n                                .id(tuple.getT2().getRight())\n                                .name(tuple.getT1().getName())\n                                .type(tuple.getT1().getType())\n                                .organizationId(currentOrganizationId)\n                                .datasourceConfig(tuple.getT1().getDatasourceConfig())\n                                .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                                .build(), visitorId), TupleUtils::merge)\n                        .map(TupleUtils::getT2))\n                .collectList();\n    }", "CodeBleu_score": 21.799125253201236}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasource.getId());\n                }\n                if (datasource.isLegacyQuickApi() || datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getNewId());\n                }\n                Datasource newDatasource = Datasource.builder()\n                        .datasourceType(datasource.getDatasourceType())\n                        .datasourceName(datasource.getDatasourceName())\n                        .datasourceConfig(datasource.getDatasourceConfig())\n                        .datasourceStatus(datasource.getDatasourceStatus())\n                        .organizationId(organizationId)\n                        .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                        .build();\n                return datasourceService.create(newDatasource, visitorId)\n                        .map(Datasource::getId);\n            });\n}", "CodeBleu_score": 56.34883053956305}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\n            .flatMap(datasource -> {\n                if (datasource.getDatasourceType().isSystemStatic()) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.getDatasourceType().isLegacyQuickApi()) {\n                    return Mono.just(datasource.getDatasourceType().getNewDatasourceId());\n                }\n                if (datasource.getDatasourceType().isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getDatasourceType().getNewDatasourceId());\n                }\n                Datasource newDatasource = Datasource.builder()\n                        .name(datasource.getName() + \\\"-\\\" + RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH))\n                        .datasourceType(datasource.getDatasourceType())\n                        .datasourceConfig(datasource.getDatasourceConfig())\n                        .organizationId(organizationId)\n                        .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                        .build();\n                return datasourceService.create(newDatasource, visitorId).map(Datasource::getId);\n            });\n    }", "CodeBleu_score": 50.76819104619046}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\t    return datasourceService.getById(datasourceId)\\\n            .flatMap(datasource -> {\n                if (datasource.isSystemStatic()) {\n                    return Mono.just(datasourceId);\n                }\n                if (datasource.isLegacyQuickApi()) {\n                    return Mono.just(datasource.getNewId());\n                }\n                if (datasource.isLegacyOpenblocksApi()) {\n                    return Mono.just(datasource.getNewId());\n                }\n                Datasource newDatasource = Datasource.builder()\n                        .name(datasource.getName())\n                        .datasourceType(datasource.getDatasourceType())\n                        .datasourceConfig(datasource.getDatasourceConfig())\n                        .datasourceCreationSource(DatasourceCreationSource.TEMPLATE)\n                        .organizationId(organizationId)\n                        .build();\n                return datasourceService.create(newDatasource, visitorId)\n                        .map(Datasource::getId);\n            });\n}", "CodeBleu_score": 57.88496751901003}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return filePart.content()\n                .flatMap(dataBuffer -> {\n                    byte[] bytes = new byte[dataBuffer.readableByteCount()];\n                    dataBuffer.read(bytes);\n                    DataBufferUtils.release(dataBuffer);\n                    return Mono.just(bytes);\n                })\n                .flatMap(bytes -> {\n                    if (bytes.length > avatarMaxSizeInKb.get() * 1024) {\n                        return Mono.error(new BizException(BizError.FILE_SIZE_EXCEED_LIMIT, \\\"FILE_SIZE_EXCEED_LIMIT\\\", avatarMaxSizeInKb.get()));\n                    }\n\n                    return assetService.upload(bytes, \\\"avatar\\\", user.getId(), \\\"jpg\\\");\n                })\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.delete(user.getAvatar().getId(), user.getId());\n                    }\n                    return Mono.just(true);\n                })\n                .flatMap(success -> updateProfile(user.getId(), user.getUsername(), user.getEmail(), user.getAvatar(), user.getConnections()))\n                .map(it -> true)\n                .onErrorResume(throwable -> Mono.error(ofException(throwable)));\n    }", "CodeBleu_score": 26.41190122508569}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return assetService.upload(filePart, user.getId(), Asset.AssetType.USER_AVATAR, avatarMaxSizeInKb.get())\n                .flatMap(asset -> {\n                    if (user.getAvatar() != null) {\n                        return assetService.remove(user.getAvatar().getId(), user.getId())\n                                .thenReturn(asset);\n                    }\n                    return Mono.just(asset);\n                })\n                .flatMap(asset -> mongoUpsertHelper.upsert(user.getId(), User.class, new PartialResourceWithId<>(user.getId(), user.toBuilder()\n                .avatar(asset)\n                .build())\n                .withUpdateTime(true))\n                .map(it -> true));\n    }", "CodeBleu_score": 29.714003440425675}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t        return filePart.content()\n                .flatMap(dataBuffer -> {\n                    byte[] bytes = new byte[dataBuffer.readableByteCount()];\n                    dataBuffer.read(bytes);\n                    DataBufferUtils.release(dataBuffer);\n                    return Mono.just(bytes);\n                })\n                .flatMap(bytes -> {\n                    if (bytes.length > avatarMaxSizeInKb.get()) {\n                        return Mono.error(new BizException(BizError.FILE_TOO_LARGE, \\\"FILE_TOO_LARGE\\\", \\\"file size exceeded limit\\\"));\n                    }\n                    return assetService.upload(Asset.builder()\n                            .fileName(filePart.filename())\n                            .file(bytes)\n                            .build());\n                })\n                .flatMap(asset -> {\n                    if (StringUtils.isNotBlank(user.getAvatarAssetId())) {\n                        return assetService.delete(user.getAvatarAssetId())\n                                .then(Mono.just(asset));\n                    }\n                    return Mono.just(asset);\n                })\n                .flatMap(asset -> {\n                    user.setAvatarAssetId(asset.getId());\n                    return repository.save(user);\n                })\n                .thenReturn(true);\n    }", "CodeBleu_score": 25.738245357583178}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.NORMAL);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n\n    if (AuthSourceConstants.EMAIL.equals(authUser.getSource())) {\n        if (authUser.getAuthContext() != null && authUser.getAuthContext().getPassword() != null) {\n            user.setPassword(encryptionService.encrypt(authUser.getAuthContext().getPassword()));\n        }\n    }\n\n    user.setConnections(authUser.getConnections());\n    user.setNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 45.63460033715388}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (authUser.getSource().equals(AuthSourceConstants.EMAIL)) {\n        AuthContext authContext = authUser.getAuthContext();\n        if (authContext != null) {\n            String password = authContext.getPassword();\n            if (password != null) {\n                user.setPassword(encryptionService.encrypt(password));\n            }\n        }\n    }\n    user.setConnections(establishUserConnections(authUser));\n    user.setNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 46.89135122420558}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\t    User user = new User();\n    user.setName(authUser.getName());\n    user.setState(UserState.ACTIVE);\n    user.setEnabled(true);\n    user.setAvatar(authUser.getAvatar());\n    if (AuthSourceConstants.EMAIL.equals(authUser.getSource())) {\n        AuthContext authContext = authUser.getAuthContext();\n        if (authContext instanceof FormAuthRequestContext) {\n            FormAuthRequestContext formAuthContext = (FormAuthRequestContext) authContext;\n            String password = formAuthContext.getPassword();\n            user.setPassword(encryptionService.encrypt(password));\n        }\n    }\n    user.setConnections(authUser.getConnections());\n    user.setNewUser(true);\n    return create(user);\n}", "CodeBleu_score": 50.3617050864769}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t        Connection connection = new Connection();\n        connection.setSource(AuthSourceConstants.EMAIL);\n        connection.setRawId(email);\n        user.getConnections().add(connection);\n        return repository.save(user)\n                .map(it -> true)\n                .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new BizException(BizError.USER_EMAIL_DUPLICATED, \\\"USER_EMAIL_DUPLICATED\\\", email)));\n    }", "CodeBleu_score": 30.91539741836444}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    return Mono.defer(() -> {\n        Connection connection = new Connection();\n        connection.setSource(AuthSourceConstants.EMAIL);\n        connection.setRawId(email);\n        user.getConnections().add(connection);\n        return mongoUpsertHelper.updateById(user, user.getId());\n    })\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new BizException(BizError.USER_EMAIL_DUPLICATED, \\\"USER_EMAIL_DUPLICATED\\\", email)));\n}", "CodeBleu_score": 32.45713642600479}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\t    Connection connection = new Connection();\n    connection.setSource(AuthSourceConstants.EMAIL);\n    connection.setRawId(email);\n    Set<Connection> connections = new HashSet<>(user.getConnections());\n    connections.add(connection);\n    user.setConnections(connections);\n    return repository.save(user)\n            .thenReturn(true)\n            .onErrorResume(DuplicateKeyException.class, e -> Mono.error(new BizException(BizError.USER_EMAIL_ALREADY_EXIST, \\\"USER_EMAIL_ALREADY_EXIST\\\", email)));\n}", "CodeBleu_score": 36.58251841619321}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t        return findById(userId)\n                .flatMap(user -> {\n                    if (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\n                        return Mono.error(new BizException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                    }\n                    user.setPassword(encryptionService.encryptPassword(newPassword));\n                    return repository.save(user).then(Mono.just(true));\n                });\n    }", "CodeBleu_score": 23.016881349122087}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t        return findById(userId)\n                .flatMap(user -> {\n                    if (!encryptionService.checkPassword(oldPassword, user.getPassword())) {\n                        return Mono.error(new BizException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                    }\n\n                    String encryptedPassword = encryptionService.encryptPassword(newPassword);\n                    user.setPassword(encryptedPassword);\n                    return mongoUpsertHelper.updateById(user, userId);\n                });\n    }", "CodeBleu_score": 25.086281210568167}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t    return findById(userId)\n            .flatMap(user -> {\n                if (!encryptionService.checkPassword(oldPassword, user.getPassword())) {\n                    return Mono.error(new BizException(BizError.INVALID_PASSWORD, \\\"INVALID_PASSWORD\\\"));\n                }\n                user.setPassword(encryptionService.encryptPassword(newPassword));\n                return repository.save(user).then(Mono.just(true));\n            });\n}", "CodeBleu_score": 21.427250614577854}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return orgGroupService.findAllByOrgId(orgMember.getOrgId())\n                    .filter(group -> !group.isAllUsersGroup())\n                    .map(group -> Map.of(\\\"id\\\", group.getId(), \\\"name\\\", group.getLocalizedName(locale)))\n                    .collectList();\n        }\n        return orgGroupService.findAllByOrgIdAndUserId(orgMember.getOrgId(), userId)\n                .filter(group -> !group.isAllUsersGroup())\n                .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n                .map(group -> Map.of(\\\"id\\\", group.getId(), \\\"name\\\", group.getLocalizedName(locale)))\n                .collectList();\n    }", "CodeBleu_score": 29.88653635682212}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t        if (orgMember.isAdmin()) {\n            return orgGroupService.getAllGroups(orgMember.getOrgId(), locale)\n                    .filter(orgGroup -> !orgGroup.isAllUserGroup())\n                    .map(orgGroup -> {\n                        Map<String, String> map = new HashMap<>();\n                        map.put(\\\"id\\\", orgGroup.getId());\n                        map.put(\\\"name\\\", orgGroup.getLocalizedName());\n                        return map;\n                    })\n                    .collectList();\n        } else {\n            return orgGroupService.getUserGroups(userId, orgMember.getOrgId(), locale)\n                    .filter(orgGroup -> !orgGroup.isAllUserGroup())\n                    .filter(orgGroup -> !withoutDynamicGroups || !orgGroup.isDynamic())\n                    .map(orgGroup -> {\n                        Map<String, String> map = new HashMap<>();\n                        map.put(\\\"id\\\", orgGroup.getId());\n                        map.put(\\\"name\\\", orgGroup.getLocalizedName());\n                        return map;\n                    })\n                    .collectList();\n        }\n    }", "CodeBleu_score": 27.03541679109479}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t    if (orgMember.isAdmin()) {\n        return groupService.findAllByOrgId(orgMember.getOrgId()).collectList().map(groups -> groups.stream()\n                .filter(group -> !GroupConstants.ALL_USERS_GROUP_ID.equals(group.getId()))\n                .map(group -> Map.of(\\\"id\\\", group.getId(), \\\"name\\\", group.getLocalizedName(locale))).toList());\n    }\n    return groupService.findAllByUserIdAndOrgId(userId, orgMember.getOrgId()).collectList()\n            .map(groups -> groups.stream()\n                    .filter(group -> !GroupConstants.ALL_USERS_GROUP_ID.equals(group.getId()))\n                    .filter(group -> !withoutDynamicGroups || !group.isDynamic())\n                    .map(group -> Map.of(\\\"id\\\", group.getId(), \\\"name\\\", group.getLocalizedName(locale))).toList());\n}", "CodeBleu_score": 26.847422501078068}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.Fields.hasShowNewUserGuidance, true)\n            .map(success -> true);\n}", "CodeBleu_score": 76.60651205627153}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n    return mongoUpsertHelper.upsert(userStatus, UserStatus.Fields.hasShowNewUserGuidance, true);\n}", "CodeBleu_score": 79.04374814497633}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\t    UserStatus userStatus = UserStatus.builder()\n            .id(userId)\n            .hasShowNewUserGuidance(true)\n            .build();\n    return mongoUpsertHelper.upsert(userStatus, Update.update(\"hasShowNewUserGuidance\", true), UserStatus.class);\n}", "CodeBleu_score": 78.95012513630296}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\n\trg := rungroup.New(context.Background())\n\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trg.Go(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\t_ = rg.Wait()\n}", "CodeBleu_score": 42.66748156419039}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition must not be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue must not be nil\")\n\t}\n\n\trg := rungroup.New()\n\n\tfor k, p := range c.partitions {\n\t\tif !predicatePartition(k, p) {\n\t\t\tcontinue\n\t\t}\n\t\trg.Go(func() error {\n\t\t\tp.ClearMatching(predicateValue)\n\t\t\treturn nil\n\t\t})\n\t}\n\n\trg.Wait()\n}", "CodeBleu_score": 42.926266855833575}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\t\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tgroup := rungroup.New()\n\n\tfor k, p := range c.partitions {\n\t\tk := k\n\t\tp := p\n\n\t\tif predicatePartition(k, p) {\n\t\t\tgroup.Go(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\n\tgroup.Wait()\n}", "CodeBleu_score": 40.887444641075966}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"numPartitions must be greater than 0\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"totalWeightQuantity must be greater than 0\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\tmaxSizePerPartition := float64(maxItemsTotal) / avgWeightPerPartition\n\n\treturn int(maxSizePerPartition)\n}", "CodeBleu_score": 68.63152770188556}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 {\n\t\tpanic(\"numPartitions must be greater than zero\")\n\t}\n\tif totalWeightQuantity <= 0 {\n\t\tpanic(\"totalWeightQuantity must be greater than zero\")\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\treturn int(math.Ceil(float64(maxItemsTotal) / avgWeightPerPartition))\n}", "CodeBleu_score": 63.48381818974933}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\tavgWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\n\treturn int(math.Ceil(float64(maxItemsTotal) * avgWeightPerPartition))\n}", "CodeBleu_score": 41.591183476807046}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t    Map<String, Object> map = new HashMap<>();\n    ConnectionMetadata metadata = connectionFactory.getMetadata();\n    if (Objects.nonNull(metadata)) {\n        map.put(\"product\", metadata.getName());\n        map.put(\"version\", metadata.getVersion());\n    }\n    return map;\n}", "CodeBleu_score": 46.49308714999746}, {"code": "public Map<String, Object> contributorMap(){\n\t        Map<String, Object> map = new HashMap<>();\n        ConnectionMetadata metadata = connectionFactory.getMetadata();\n        if (Objects.nonNull(metadata)) {\n            map.put(\\\"product\\\", metadata.getName());\n            map.put(\\\"version\\\", metadata.getVersion());\n        }\n        return map;\n    }", "CodeBleu_score": 41.249322091552116}, {"code": "public Map<String, Object> contributorMap(){\n\t        Map<String, Object> map = new HashMap<>();\n        ConnectionMetadata metadata = connectionFactory.getMetadata();\n        if (Objects.nonNull(metadata)) {\n            map.put(\"product\", metadata.getName());\n            map.put(\"version\", metadata.getVersion());\n        }\n        return map;\n    }", "CodeBleu_score": 46.83065325720244}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    var user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getAllowRegistration() != null && user.getAllowRegistration());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration() != null && user.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 73.59103596788333}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    var user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getRegistration() != null && user.getRegistration());\n        info.setMustVerifyEmailOnRegistration(isTrue(user.getMustVerifyEmailOnRegistration()));\n    }\n}", "CodeBleu_score": 71.33908389527258}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\t    var user = SystemSetting.get(configMap, User.GROUP, User.class);\n    if (user == null) {\n        info.setAllowRegistration(false);\n        info.setMustVerifyEmailOnRegistration(false);\n    } else {\n        info.setAllowRegistration(user.getEnable() != null && user.getEnable());\n        info.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration() != null && user.getMustVerifyEmailOnRegistration());\n    }\n}", "CodeBleu_score": 72.3888508360993}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t    Thread thread = new Thread(this::restart);\n    thread.setDaemon(false);\n    thread.setContextClassLoader(Application.class.getClassLoader());\n    thread.start();\n    return \"Application restart has been initiated\";\n}", "CodeBleu_score": 39.739939003699774}, {"code": "public Object restart(){\n\t    Thread thread = new Thread(() -> {\n        application.setApplicationContext(context);\n        SpringApplication.exit(application);\n        ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);\n        context.start();\n    });\n    thread.setName(\"restartThread\");\n    thread.setDaemon(false);\n    thread.setContextClassLoader(this.getClass().getClassLoader());\n    thread.start();\n    return Collections.singletonMap(\"message\", \"Restarting\");\n}", "CodeBleu_score": 50.289865306499536}, {"code": "public Object restart(){\n\t    Thread thread = new Thread(() -> {\n        application.setApplicationContext(context);\n        try {\n            SpringApplication.run(Application.class, args);\n        } catch (Exception e) {\n            log.error(\"Failed to restart application\", e);\n        }\n    });\n    thread.setDaemon(false);\n    thread.setContextClassLoader(getClass().getClassLoader());\n    thread.start();\n    return \"Application restarted\";\n}", "CodeBleu_score": 41.46656324320956}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 70.31411393684094}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.62032370439991}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n    }", "CodeBleu_score": 70.31411393684094}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(path(\"/console/**\")\n            .and(accept(MediaType.TEXT_HTML))\n            .and(path(\"/console/assets/**\").negate())\n            .and(WebSocketRequestPredicate.negate()),\n        request -> ServerResponse.ok()\n            .cacheControl(CacheControl.noCache())\n            .contentType(MediaType.TEXT_HTML)\n            .body(BodyInserters.fromResource(new ClassPathResource(\"console/index.html\"))));\n}", "CodeBleu_score": 32.300352046017764}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(path(\"/console/**\").and(accept(MediaType.TEXT_HTML))\n            .and(method(HttpMethod.GET))\n            .and(WebSocketRequestPredicate.not()),\n        req -> ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n            .body(BodyInserters.fromResource(new ClassPathResource(\"/console/index.html\"))));\n}", "CodeBleu_score": 30.796020132359136}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\t    return route(\n        path(\"/console/**\").and(accept(MediaType.TEXT_HTML))\n            .and(method(HttpMethod.GET))\n            .and(WebSocketRequestPredicate.notWebSocketRequest()),\n        request -> ServerResponse.ok().contentType(MediaType.TEXT_HTML)\n            .body(BodyInserters.fromResource(new ClassPathResource(\"console/index.html\"))));\n}", "CodeBleu_score": 31.842985276015355}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    var ucPredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate,\n        request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 90.38101869192259}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    var ucPredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate,\n        request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 90.38101869192259}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t    var ucPredicate = method(HttpMethod.GET)\n        .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n        .and(accept(MediaType.TEXT_HTML))\n        .and(new WebSocketRequestPredicate().negate());\n    return route(ucPredicate,\n        request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 90.38101869192259}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    val sessionProperties = sessionProperties()\n    val serverProperties = serverProperties()\n    val sessionTimeout = Duration.ofSeconds(sessionProperties.getTimeout().getSeconds())\n    val repository = new InMemoryReactiveIndexedSessionRepository(new ConcurrentHashMap<>())\n    repository.setDefaultMaxInactiveInterval(sessionTimeout)\n    return repository\n}", "CodeBleu_score": 52.68888263043083}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    val sessionProperties = sessionProperties()\n    val serverProperties = serverProperties()\n    val sessionTimeout = Duration.ofSeconds(sessionProperties.getTimeout().toSeconds())\n    val sessionRepository = InMemoryReactiveIndexedSessionRepository(ConcurrentHashMap())\n    sessionRepository.setDefaultMaxInactiveInterval(sessionTimeout)\n    return sessionRepository\n}", "CodeBleu_score": 41.656317781946264}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t    val sessionProperties = sessionProperties()\n    val serverProperties = serverProperties()\n    val repository = InMemoryReactiveIndexedSessionRepository(ConcurrentHashMap())\n    repository.setDefaultMaxInactiveInterval(sessionProperties.timeout.toSeconds())\n    return repository\n}", "CodeBleu_score": 28.84038939015828}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var service = new DefaultUserDetailService(userService, roleService);\n    var security = haloProperties.getSecurity();\n    service.setTwoFactorAuthEnabled(security.isTwoFactorAuthEnabled());\n    return service;\n}", "CodeBleu_score": 49.95186818607282}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    DefaultUserDetailService userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setEnableTwoFactor(haloProperties.getSecurity().isTwoFactorPreview());\n    return userDetailsService;\n}", "CodeBleu_score": 45.23153444949061}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t    var userDetailsService = new DefaultUserDetailService(userService, roleService);\n    userDetailsService.setEnableTwoFactor(haloProperties.getSecurity().getTwoFactor().isEnabled());\n    return userDetailsService;\n}", "CodeBleu_score": 46.947773715625516}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\t    return Comment.CommentOwner.builder()\n        .kind(\"email\")\n        .email(StringUtils.defaultIfBlank(email, \\\"\\\"))\n        .displayName(displayName)\n        .avatar(initAnnotations(avatar))\n        .website(initAnnotations(website))\n        .build();\n}", "CodeBleu_score": 11.662553851817453}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    var commentOwner = new Comment.CommentOwner();\n    commentOwner.setKind(\"email\");\n    commentOwner.setEmail(StringUtils.defaultIfBlank(email, \"\"));\n    commentOwner.setDisplayName(displayName);\n    commentOwner.setAnnotations(new LinkedHashMap<>(2));\n    commentOwner.getAnnotations().put(\"avatar\", avatar);\n    commentOwner.getAnnotations().put(\"website\", website);\n    return commentOwner;\n}", "CodeBleu_score": 43.59649221936828}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t    return Comment.CommentOwner.builder()\n        .kind(\"email\")\n        .email(StringUtils.isNotBlank(email) ? email : \\\"\\\")\n        .displayName(displayName)\n        .annotations(Map.of(\\\"avatar\\\", List.of(avatar), \\\"website\\\", List.of(website)))\n        .build();\n}", "CodeBleu_score": 13.405645845795735}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind().equals(User.KIND)) {\n        return commentOwner.getName().equals(post.getSpec().getOwner());\n    } else if (commentOwner.getKind().equals(Comment.CommentOwner.Kind.EMAIL)) {\n        User user = client.fetch(User.class, post.getSpec().getOwner()).orElseThrow();\n        return user.getSpec().getEmail().equals(commentOwner.getName());\n    } else {\n        return false;\n    }\n}", "CodeBleu_score": 46.77074556465739}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind().equals(User.KIND)) {\n        return commentOwner.getName().equals(post.getSpec().getOwner());\n    } else if (commentOwner.getKind().equals(User.KIND_PLURAL)) {\n        return client.fetch(User.class, post.getSpec().getOwner())\n            .map(user -> user.getSpec().getEmail().equals(commentOwner.getName()))\n            .orElse(false);\n    }\n    return false;\n}", "CodeBleu_score": 35.647707432802704}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\t    if (commentOwner.getKind().equals(User.KIND)) {\n        return commentOwner.getName().equals(post.getSpec().getOwner());\n    } else if (commentOwner.getKind().equals(User.KIND)) {\n        return client.fetch(User.class, post.getSpec().getOwner())\n            .map(user -> user.getSpec().getEmail())\n            .map(email -> email.equals(commentOwner.getName()))\n            .orElse(false);\n    }\n    return false;\n}", "CodeBleu_score": 35.39667491259708}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t    var fieldQuery = labelAndFieldSelectorToListOptions(exchange, Comment.class);\n    if (StringUtils.isNotBlank(getKeyword())) {\n        fieldQuery.add(contains(\\\"spec.content\\\", getKeyword()));\n    }\n    if (StringUtils.isNotBlank(getOwnerName())) {\n        fieldQuery.add(equal(\\\"spec.ownerName\\\", getOwnerName()));\n    }\n    if (StringUtils.isNotBlank(getOwnerKind())) {\n        fieldQuery.add(equal(\\\"spec.ownerKind\\\", getOwnerKind()));\n    }\n    return ListOptions.from(fieldQuery);\n}", "CodeBleu_score": 24.901331766067067}, {"code": "public ListOptions toListOptions(){\n\t        var listOptions = new ListOptions();\n        var fieldSelector = labelAndFieldSelectorToListOptions(getLabelSelector(), getFieldSelector());\n        var fieldQuery = QueryParamBuildUtil.buildFieldQuery(fieldSelector);\n        if (StringUtils.isNotBlank(getKeyword())) {\n            fieldQuery.put(\"spec.content\", contains(getKeyword()));\n        }\n        if (StringUtils.isNotBlank(getOwnerName())) {\n            fieldQuery.put(\"spec.ownerRef.name\", equal(getOwnerName()));\n        }\n        listOptions.setField(fieldQuery);\n        return listOptions;\n    }", "CodeBleu_score": 39.3860582772316}, {"code": "public ListOptions toListOptions(){\n\t    var fieldQuery = labelAndFieldSelectorToListOptions(exchange);\n    if (StringUtils.isNotBlank(getKeyword())) {\n        fieldQuery.add(contains(\\\"spec.content\\\", getKeyword()));\n    }\n    if (StringUtils.isNotBlank(getOwnerName())) {\n        fieldQuery.add(equal(\\\"spec.ownerName\\\", getOwnerName()));\n    }\n    var listOptions = new ListOptions();\n    listOptions.setFieldQuery(fieldQuery);\n    return listOptions;\n}", "CodeBleu_score": 23.895269608607776}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"The commentName must not be null.\");\n    return counterService.get(commentName)\\\n        .map(counter -> new CommentStats(counter.getUpvoteCount()));\n}", "CodeBleu_score": 52.86716927861798}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"The commentName must not be null.\");\n    return counterService.get(commentName)\\\n        .map(counter -> new CommentStats(counter.getUpvoteCount()))\\\n        .defaultIfEmpty(new CommentStats(0));\n}", "CodeBleu_score": 56.839111633749404}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\t    Assert.notNull(commentName, \"The commentName must not be null.\");\n    return counterService.get(commentName)\\\n        .map(counter -> CommentStats.builder().upvoteCount(counter.getCount()).build())\\\n        .defaultIfEmpty(CommentStats.builder().build());\n}", "CodeBleu_score": 62.17576678595837}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t    var subscriber = identity.toSubscriber();\n    var subscription = notificationCenter.subscribe(subscriber, NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\n    if (subscription.isPresent()) {\n        subscription.get().setCondition(subscription -> {\n            var repliedOwner = subscription.getContext().getOrDefault(\"repliedOwner\", \"\");\n            if (StringUtils.isBlank(repliedOwner)) {\n                return false;\n            }\n            return repliedOwner.equals(identity.getName());\n        });\n        notificationCenter.subscribe(subscriber, subscription.get());\n        subscription.get().block();\n    }\n}", "CodeBleu_score": 41.43488915712996}, {"code": "void subscribeReply(UserIdentity identity){\n\t    var subscriber = Subscriber.from(identity);\n    var interestReason = new InterestReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU, Condition.of(Condition.Operator.EQUALS, \"replied_owner\", identity.getName()));\n    var subscription = Subscription.builder().interestReason(interestReason).subscriber(subscriber).build();\n    notificationCenter.subscribe(subscription).block();\n}", "CodeBleu_score": 45.29842737530425}, {"code": "void subscribeReply(UserIdentity identity){\n\t    var subscriber = notificationCenter.createSubscriber(identity);\n    var subscription = subscriber.getSubscription();\n    subscription.setInterestReason(NotificationReasonConst.SOMEONE_REPLIED_YOU,\n            (reason) -> StringUtils.equals(reason.getCondition().get(\"repliedOwner\"), identity.getName()));\n    subscriber.subscribe(subscription);\n    subscriber.blockUntilSubscribed();\n}", "CodeBleu_score": 40.28116693915737}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\t", "CodeBleu_score": 4.248087822285738}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment,\n        (oldComment, newComment) -> {\n            newComment.getSpec().setApproved(true);\n            newComment.getSpec().setApprovedTime(Instant.now());\n            return newComment;\n        },\n        new Retry(3, Duration.ofMillis(100))\n            .filter(OptimisticLockingFailureException.class::isInstance)\n            .doBeforeRetry(s -> log.warn(\"Optimistic locking failure occurred while updating comment: {}\", comment.getMetadata().getName()))\n    );\n}", "CodeBleu_score": 33.61443856754695}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t    return client.update(comment,\n        comment -> {\n            comment.getSpec().setApproved(true);\n            comment.getMetadata().setModificationTime(Instant.now());\n            return comment;\n        },\n        new Retry(10, Duration.ofMillis(100))\n            .filter(OptimisticLockingFailureException.class::isInstance));\n}", "CodeBleu_score": 31.9607765647405}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\n<?\n<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($this instanceof HasRecord && $action instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 66.8539120361131}, {"code": "<?\n<?\n<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.182987499643176}, {"code": "<?\n<?\n<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t    if ($action instanceof MountableAction) {\n        $action->livewire($this);\n    }\n\n    if ($action instanceof HasRecord && $this instanceof HasRecord) {\n        $action->record($this->getRecord());\n    }\n\n    return $action;\n}", "CodeBleu_score": 63.182987499643176}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\n<?\n<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 92.66054843930308}, {"code": "<?\n<?\n<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 92.66054843930308}, {"code": "<?\n<?\n<?\npublic function dispatchSuccessRedirect(): static{\n\t    $url = $this->evaluate($this->successRedirectUrl);\n\n    if (filled($url)) {\n        $this->redirect($url);\n    }\n\n    return $this;\n}", "CodeBleu_score": 92.66054843930308}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\n<?\n<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    $tagClass = app(Tag::class);\n\n    $tagNames = collect($state)\n        ->map(fn (string $name): string => trim(strtolower($name)))\n        ->filter(fn (string $name): bool => filled($name));\n\n    $tags = $tagClass::findOrCreate($tagNames->all());\n\n    $record->tags()->syncWithoutDetaching($tags->pluck('id')->all());\n}", "CodeBleu_score": 33.92575514780564}, {"code": "<?\n<?\n<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    if (! $record) {\n        return;\n    }\n\n    $tagModel = app(config('filament-spatie-laravel-tags-plugin.tag_model'));\n\n    $tags = collect($state)->map(function (string $name) use ($tagModel) {\n        return $tagModel::findOrCreate($name);\n    });\n\n    $record->tags()->sync($tags->pluck('id'));\n}", "CodeBleu_score": 31.036440998832248}, {"code": "<?\n<?\n<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t    $tagModel = $this->getTagModel();\n\n    $tags = collect($state)\n        ->map(fn (string $name): Tag => $tagModel::findOrCreate($name, $this->getTagType()));\n\n    $record->tags()->sync($tags->pluck('id')->all());\n}", "CodeBleu_score": 24.17588309130928}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, name, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := &authz.Scope{\n\t\tType:  authz.ScopeType_REPOSITORY,\n\t\tSpace: spacePath,\n\t}\n\tresource := &authz.Resource{\n\t\tType: authz.ResourceType_PIPELINE,\n\t\tName: fmt.Sprintf(\"%s/%s\", name, pipelineIdentifier),\n\t}\n\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 70.38313959614723}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\n\tspacePath, name, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := types.Scope{\n\t\tType:  enum.SpaceScopeType,\n\t\tSpace: spacePath,\n\t}\n\tresource := types.Resource{\n\t\tType:          enum.PipelineResourceType,\n\t\tSpace:         spacePath,\n\t\tRepository:    name,\n\t\tPipeline:      pipelineIdentifier,\n\t}\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission for pipeline %s: %w\", pipelineIdentifier, err)\n\t}\n\treturn nil\n}", "CodeBleu_score": 64.88352802963402}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repoName, err := paths.DissectRepositoryPath(repoPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tscope := authz.Scope{\n\t\tType: authz.ScopeType_REPOSITORY,\n\t\tParent: spacePath,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceType_PIPELINE,\n\t\tName: fmt.Sprintf(\"%s/%s\", repoName, pipelineIdentifier),\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 64.86619854962117}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name, err := paths.SplitSpace(space.Path)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tscope := &authz.Scope{\n\t\tType: authz.ScopeSpace,\n\t\tOrg:  parent,\n\t}\n\tresource := &authz.Resource{\n\t\tType: authz.ResourceSpace,\n\t\tID:   name,\n\t}\n\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err != nil {\n\t\treturn fmt.Errorf(\"failed to check permission for space %s: %w\", space.Path, err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 69.18631974456653}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.Split(space.Path)\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tName: parent,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tName: name,\n\t}\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 59.936540515576155}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tparent, name := paths.SplitSpace(space.Path)\n\tscope := &authz.Scope{\n\t\tType:  authz.ScopeSpace,\n\t\tOrg:   space.Org,\n\t\tPath:  parent,\n\t\tSpace: parent,\n\t}\n\tresource := &authz.Resource{\n\t\tType: authz.ResourceSpace,\n\t\tName: name,\n\t}\n\treturn Check(ctx, authorizer, session, scope, resource, permission)\n}", "CodeBleu_score": 62.939165676545606}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tbuf, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = buf\n\t}\n\n\tdec := json.NewDecoder(bytes.NewReader(source))\n\tdec.DisallowUnknownFields()\n\n\tvar buf bytes.Buffer\n\tenc := json.NewEncoder(&buf)\n\tenc.SetEscapeHTML(false)\n\n\tif err := enc.Encode(dec); err != nil {\n\t\treturn nil, err\n\t}\n\n\tout := bytes.TrimSuffix(buf.Bytes(), []byte{'\n'})\n\treturn out, nil\n}", "CodeBleu_score": 45.985098719415355}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tb, err := json.Marshal(data)\n\t\tif err != nil {\n\t\t\treturn nil, err\n\t\t}\n\t\tsource = b\n\t}\n\n\tdec := json.NewDecoder(bytes.NewReader(source))\n\tdec.DisallowUnknownFields()\n\tif err := dec.Decode(data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tb, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimSuffix(b, []byte{'\n'}), nil\n}", "CodeBleu_score": 42.48809063604841}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\t\tif len(source) == 0 {\n\t\tsource, _ = json.Marshal(data)\n\t}\n\n\tdec := json.NewDecoder(bytes.NewReader(source))\n\tdec.DisallowUnknownFields()\n\tif err := dec.Decode(&data); err != nil {\n\t\treturn nil, err\n\t}\n\n\tencoded, err := json.Marshal(data)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn bytes.TrimRight(encoded, \\\"\\\n\\\"), nil\n}", "CodeBleu_score": 39.31229853226993}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepoRef = c.git.NormalizeRepoRef(repoRef)\n\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.authorizer.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 45.139877083194904}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tref, err := types.ParseRepoRef(repoRef)\n\tif err != nil {\n\t\treturn nil, usererror.Wrap(err)\n\t}\n\n\trepo, err := c.repoStore.GetByRef(ctx, tx, ref)\n\tif err != nil {\n\t\treturn nil, usererror.Wrap(err)\n\t}\n\n\tif err := c.authorizer.CheckAccess(ctx, session, repo, reqPermission); err != nil {\n\t\treturn nil, usererror.Wrap(err)\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 51.43319602516843}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif repoRef == \"\" {\n\t\treturn nil, usererror.New(\"Repository reference is required\")\n\t}\n\n\trepo, err := c.repoStore.FindByRef(ctx, repoRef)\n\tif err != nil {\n\t\treturn nil, usererror.Wrap(err)\n\t}\n\tif repo == nil {\n\t\treturn nil, usererror.New(\"Repository not found\")\n\t}\n\n\tif !c.authorizer.CheckAccess(session, repo, reqPermission) {\n\t\treturn nil, usererror.New(\"Access denied\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 54.139394284859186}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tm := make(map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error)\n\tm[enum.CheckPayloadKindEmpty] = EmptyPayload\n\tm[enum.CheckPayloadKindRaw] = RawPayload\n\tm[enum.CheckPayloadKindMarkdown] = MarkdownPayload\n\tm[enum.CheckPayloadKindPipeline] = PipelinePayload\n\treturn m\n}", "CodeBleu_score": 37.415925683645646}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tcheckSanitizers := map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n\treturn checkSanitizers\n}", "CodeBleu_score": 27.756659864634305}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t", "CodeBleu_score": 8.406512353961242}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n\n  if not self.state.is_attached_to_screen then\n    self:attach_to_screen()\n  end\n\n  return self", "CodeBleu_score": 45.767428630780024}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n\n  if not self.state.is_attached_to_screen then\n    self.state.is_attached_to_screen = true\n    renderer.attach(self.bufnr)\n  end\n\n  return self", "CodeBleu_score": 61.61816373795983}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t  self.state.on_render = on_render\n\n  if not self.state.is_attached_to_screen then\n    vim.api.nvim_buf_attach(self.bufnr, false, {\n      render = {\n        callback = function(bufnr, state, lnum, col, data, hl_id)\n          if self.state.is_processing then\n            return\n          end\n\n          self.state.is_processing = true\n\n          local _, winnr = pcall(vim.api.nvim_win_get_buf, self.bufnr)\n          if winnr == nil then\n            self.state.is_processing = false\n            return\n          end\n\n          self:call(function()\n            on_render(self)\n          end)\n\n          self.state.is_processing = false\n        end,\n      },\n    })\n\n    self.state.is_attached_to_screen = true\n  end\n\n  return self", "CodeBleu_score": 51.4942069262893}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t    if not self.is_in_disk() then\n        return\n    end\n\n    local filename = self.filename\n    local watcher = self.watcher\n\n    if watcher:is_watching() then\n        watcher:unwatch()\n    end\n\n    watcher:watch(filename, function(err)\n        if err then\n            console.error(err)\n            return\n        end\n\n        if callback then\n            callback()\n        end\n    end)\n\n    return self", "CodeBleu_score": 51.73043993898294}, {"code": "function Buffer:watch(callback)\n\t    local filename = self.filename\n    if not filename or filename == '' then\n        return\n    end\n\n    local watcher = self.watcher\n\n    -- Set up a file watcher for the buffer's filename.\n    watcher:watch(filename, function()\n        -- If an error occurs during watching, log an error message.\n        if watcher.err then\n            console.error(watcher.err)\n            return\n        end\n\n        -- If the buffer is valid and a callback is provided, execute the callback function.\n        if self:is_in_disk() and callback then\n            callback(self)\n        end\n    end)", "CodeBleu_score": 45.896873045526554}, {"code": "function Buffer:watch(callback)\n\t  local state = self.state\n  local watcher = self.watcher\n  local filename = self.filename\n\n  if not filename or filename == '' then\n    return\n  end\n\n  local err = watcher:watch(filename, function(_, _, _, _, _, _, _, _)\n    if not state.is_processing then\n      state.is_processing = true\n      callback()\n      state.is_processing = false\n    end\n  end)\n\n  if err then\n    console.error(err)\n  end\n\n  if self:is_valid() and callback then\n    callback()\n  end\n\n  return self", "CodeBleu_score": 52.12385173129026}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attribute = spec.attribute\n  local group = spec.group\n\n  local highlight = vim.api.nvim_get_hl_by_name(group, true)\n  if not highlight then\n    return nil\n  end\n\n  local color = highlight[attribute]\n  if not color then\n    return nil\n  end\n\n  local hex = Rgb.to_hex(color)\n  self.hex = hex\n  return hex", "CodeBleu_score": 57.0649424811525}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attr = spec.attr or spec.attribute\n  local hl_name = spec.hl_name\n\n  local hl = vim.api.nvim_get_hl(0, hl_name, { [attr] = true })\n\n  if hl then\n    local rgb = Rgb:new(hl.foreground or hl.background)\n    self.rgb = rgb\n    self.hex = rgb:to_hex()\n    return self.hex\n  end", "CodeBleu_score": 56.81669592897217}, {"code": "function Color:to_hex()\n\t  if self.hex then\n    return self.hex\n  end\n\n  local spec = self.spec\n  local attr = spec.fg and 'foreground' or 'background'\n  local hl = vim.api.nvim_get_hl_by_name(spec.name, true)[attr]\n  if not hl then\n    return\n  end\n\n  local hex = Rgb.from_hl(hl):to_hex()\n  self.hex = hex\n  return hex", "CodeBleu_score": 60.59651879053175}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\n  for i, line in ipairs(lines) do\n    local start_index = 0\n\n    while true do\n      local start_pos, end_pos = string.find(line, pattern, start_index, true)\n\n      if start_pos then\n        self:add_highlight(buffer, hl, i - 1, start_pos - 1, end_pos)\n\n        start_index = end_pos + 1\n      else\n        break\n      end\n    end\n  end\n\n  return self", "CodeBleu_score": 54.67295655546279}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n  local line_count = #lines\n\n  for i = 1, line_count do\n    local line = lines[i]\n    local start_index = 1\n\n    while true do\n      local start_pos, end_pos = string.find(line, pattern, start_index, true)\n\n      if start_pos then\n        vim.api.nvim_buf_add_highlight(buffer.bufnr, self.ns_id, hl, i - 1, start_pos - 1, end_pos)\n        start_index = end_pos + 1\n      else\n        break\n      end\n    end\n  end\n\n  return self", "CodeBleu_score": 55.362365983934744}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t  local lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\n  for i, line in ipairs(lines) do\n    local start_col, end_col = string.find(line, pattern)\n    if start_col and end_col then\n      self:add_highlight(buffer, hl, i - 1, start_col - 1, end_col)\n    end\n  end\n\n  return self", "CodeBleu_score": 46.30099119187319}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = string.format('%s-%s-%s-%s', buffer.bufnr, row, col, pos)\n\n  local opts = {\n    id = id,\n    hl_group = hl,\n    virt_text = {\n      { text, hl },\n    },\n    virt_text_pos = pos,\n    priority = priority,\n  }\n\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, id, row, col, opts)\n\n  return id", "CodeBleu_score": 63.504755976023745}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t    local id = string.format('%s-%s-%s', row, col)\n\n    vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, id, row, col, {\n        virt_text = {\n            { text, hl },\n        },\n        virt_text_pos = pos,\n        priority = priority,\n    })\n\n    return id", "CodeBleu_score": 64.60658511907408}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t  local id = string.format('%s-%s-%s-%s', row, col, pos, priority)\n\n  local ns_id = signs_setting.get_ns_id(buffer)\n\n  vim.api.nvim_buf_set_extmark(buffer.bufnr, ns_id, id, row, col, {\n    virt_text = {\n      {\n        text,\n        hl,\n      },\n    },\n    virt_text_pos = pos,\n    virt_text_win_col = col,\n    priority = priority,\n  })\n\n  return id", "CodeBleu_score": 59.75101685988653}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t    local result = ''\n    local line = ''\n    for _, char in ipairs(output) do \n        if char == '", "CodeBleu_score": 10.23019644021581}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t  local line = ''\n  for i = 1, #output do\n    local char = output:sub(i, i)\n    if char == '", "CodeBleu_score": 22.71344380346867}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t  if self.watcher then\n    return self.watcher\n  end\n\n  local watcher = luv.new_fs_event()\n  watcher:start(path, { recursive = true }, function(err, name, flags)\n    if not err then\n      handler(name, flags)\n    end\n  end)\n\n  self.watcher = watcher\n  return watcher", "CodeBleu_score": 57.373857457012726}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watcher then return self.watcher end\n\n  local watcher = luv.new_fs_event()\n\n  watcher:start(path, self.interval, function(err, name, status)\n    if err then\n      return\n    end\n\n    handler(name, status)\n  end)\n\n  self.watcher = watcher\n\n  return watcher", "CodeBleu_score": 58.02541174254776}, {"code": "function Watcher:watch_file(path, handler)\n\t  if self.watcher then\n    return self.watcher\n  end\n\n  local watcher = luv.new_fs_event()\n\n  watcher:start(path, {}, function(err, name, events)\n    if not err then\n      handler(name, events)\n    end\n  end)\n\n  self.watcher = watcher\n\n  return watcher", "CodeBleu_score": 57.06010689829161}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t  local lines = self:get_lines()\n  local hunks = self.git_object:live_hunks(lines)\n\n  if hunks == nil then\n    return hunks\n  end\n\n  local signs = {}\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      local sign_type = hunk.type\n      local priority = hunk.priority\n\n      local sign = signs_setting.get_sign(sign_type, priority)\n      if sign ~= nil then\n        table.insert(signs, {\n          sign = sign,\n          line = line,\n          priority = priority,\n        })\n      end\n    end\n  end\n\n  self:set_signs(signs)\n  return hunks", "CodeBleu_score": 44.56653534155373}, {"code": "function GitBuffer:live_hunks()\n\t  local lines = vim.api.nvim_buf_get_lines(self.buffer, 0, -1, false)\n  local hunks = self.git_object:live_hunks(lines)\n\n  if hunks == nil then\n    return nil, 'Error'\n  end\n\n  local signs = {}\n\n  for _, hunk in ipairs(hunks) do\n    for _, line in ipairs(hunk.lines) do\n      local sign = signs_setting.signs[hunk.type]\n\n      if sign == nil then\n        sign = signs_setting.signs.default\n      end\n\n      local priority = signs_setting.priorities[hunk.type]\n\n      if priority == nil then\n        priority = signs_setting.priorities.default\n      end\n\n      signs[line] = {\n        sign = sign,\n        priority = priority,\n      }\n    end\n  end\n\n  self:set_signs(signs)\n\n  return hunks", "CodeBleu_score": 48.69126454472327}, {"code": "function GitBuffer:live_hunks()\n\t    local lines = vim.api.nvim_buf_get_lines(self.buffer, 0, -1, false)\n    local hunks = self.git_object:hunks()\n    if hunks == nil then\n        return hunks\n    end\n    for _, hunk in ipairs(hunks) do\n        for _, line in ipairs(hunk) do\n            local sign = signs_setting.get_sign(line.type, line.priority)\n            if sign ~= nil then\n                self.signs[line.lnum] = {\n                    group = sign.group,\n                    priority = sign.priority,\n                }\n            end\n        end\n    end\n    self:set_signs()\n    return hunks", "CodeBleu_score": 32.348424059349696}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local temp_filename = fs.tempname()\n  local temp_file = io.open(temp_filename, 'w')\n  temp_file:write(patch:get_content())\n  temp_file:close()\n\n  local error_message = self.git:stage_hunk_from_file(self:tracked_filename(), patch:get_hunk_range(), temp_filename)\n  fs.remove(temp_filename)\n\n  return error_message", "CodeBleu_score": 49.72316722709099}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local tmp_filename = fs.tempname()\n  local patch_content = patch:get_content()\n  local patch_filename = patch:get_filename()\n  local patch_hunk = patch:get_hunk()\n\n  local hunk_content = patch_content:sub(patch_hunk.start_line, patch_hunk.end_line)\n  fs.write_file(tmp_filename, hunk_content)\n\n  local _, err = self.git:stage_hunk(patch_filename, patch_hunk, tmp_filename)\n  fs.remove_file(tmp_filename)\n\n  if err then\n    return nil, err\n  end\n\n  return true", "CodeBleu_score": 53.380464965698394}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t  local temp_file = fs.tempname()\n  local hunk = patch.hunk\n  local content = hunk.content\n  local line_numbers = hunk.line_numbers\n  local start_line_number = line_numbers.start\n  local end_line_number = line_numbers.end_\n  local patch_content = string.format('@@ -%d,%d +%d,%d @@", "CodeBleu_score": 34.85913574434745}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addHeader(\"Authorization\", getAuthorizationHeader(requestToken));\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 75.64364408129818}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    request.addHeader(OAuthConstants.HEADER, getAuthorizationHeader(config.getApiKey(), config.getApiSecret()));\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 76.34709618546691}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t    OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n    String authHeader = config.getApiKey() + \":\" + config.getApiSecret();\n    String authHeaderEncoded = new String(Base64.encode(authHeader.getBytes(StandardCharsets.UTF_8)));\n    request.addHeader(\"Authorization\", \"Basic \" + authHeaderEncoded);\n    request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n    request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n    request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n    Response response = request.send();\n    return api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 69.1560581270347}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host), httpCredentials);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setCredentialsProvider(credentialsProvider);\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Added authentication for {0}\", host);\n}", "CodeBleu_score": 87.40211827946392}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host), httpCredentials);\n    context.setCredentialsProvider(credentialsProvider);\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n    LOGGER.log(Level.FINE, \"Added authentication details for {0} to auth cache\", host);\n}", "CodeBleu_score": 77.78981932944141}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t    CredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n    credentialsProvider.setCredentials(new AuthScope(host), httpCredentials);\n    context.setCredentialsProvider(credentialsProvider);\n\n    AuthCache authCache = new BasicAuthCache();\n    authCache.put(host, new BasicScheme());\n    context.setAuthCache(authCache);\n\n    LOGGER.log(Level.FINE, \"Added {0} to auth cache\", host);\n}", "CodeBleu_score": 79.12456446425082}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins j = Jenkins.getInstance();\n    AvatarCache cache = j.getExtensionList(AvatarCache.class).get(0);\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache extension not found\");\n    }\n\n    String cacheKey = cache.generateCacheKey(source);\n    cache.seedCache(cacheKey, source);\n    try {\n        return j.getRootUrl() + ActionURI + '/' + URLEncoder.encode(cacheKey, StandardCharsets.UTF_8.name()) + '/' + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new IllegalStateException(e);\n    }\n}", "CodeBleu_score": 51.24899563678571}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins j = Jenkins.getInstance();\n    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"No AvatarCache extension found\");\n    }\n    String cacheKey = cache.generateKey(source);\n    cache.seedCache(cacheKey, source);\n    try {\n        return j.getRootUrl() + ActionURI + '/' + URLEncoder.encode(cacheKey, \\\"UTF-8\\\") + '/' + size;\n    } catch (UnsupportedEncodingException e) {\n        throw new Error(e);\n    }\n}", "CodeBleu_score": 40.19150988576673}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t    Jenkins j = Jenkins.getInstance();\n    if (j == null) {\n        throw new IllegalStateException(\"Jenkins not started\");\n    }\n    AvatarCache cache = AvatarCache.get();\n    if (cache == null) {\n        throw new IllegalStateException(\"AvatarCache not found\");\n    }\n    String cacheKey = cache.seedCache(source);\n    try {\n            return j.rootUrl + ActionURI + '/' + URLEncoder.encode(cacheKey, StandardCharsets.UTF_8.name()) + '/' + size;\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(e);\n        }\n    }", "CodeBleu_score": 43.09927695376713}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image != null && (image.getWidth() > 128 || image.getHeight() > 128)) {\n        this.image = scaleImage(image, 128);\n    }\n}", "CodeBleu_score": 64.47500029245113}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n    if (image != null) {\n        if (image.getWidth() > 128 || image.getHeight() > 128) {\n            this.image = scaleImage(image, 128);\n        } else {\n            this.image = image;\n        }\n    }\n}", "CodeBleu_score": 72.13356957561429}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t    this.source = source;\n    this.image = image;\n    this.lastModified = lastModified < 0 ? System.currentTimeMillis() : lastModified;\n}", "CodeBleu_score": 40.381814926456435}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    try {\n        if (future.isDone()) {\n            CacheEntry entry = future.get();\n            image = entry.image;\n            lastModified = entry.lastModified;\n            future = null;\n        }\n    } catch (InterruptedException | ExecutionException e) {\n        // ignore\n    }\n    return true;\n}", "CodeBleu_score": 54.90042624794198}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            CacheEntry entry = future.get();\n            image = entry.image;\n            lastModified = entry.lastModified;\n            future = null;\n        } catch (InterruptedException | ExecutionException e) {\n            // ignore\n        }\n        return false;\n    }\n    return true;\n}", "CodeBleu_score": 58.895372353666254}, {"code": "private synchronized boolean pending(){\n\t    if (future == null) {\n        return false;\n    }\n    if (future.isDone()) {\n        try {\n            CacheEntry entry = future.get();\n            this.image = entry.image;\n            this.lastModified = entry.lastModified;\n        } catch (InterruptedException | ExecutionException e) {\n            LOGGER.log(Level.WARNING, \\\"Failed to fetch avatar\\\", e);\n        }\n        future = null;\n    }\n    return future != null;\n}", "CodeBleu_score": 52.236713595819985}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t            rsp.setContentType(\\\"image/png\\\");\n            rsp.addDateHeader(\\\"Last-Modified\\\", lastModified);\n            rsp.addHeader(\\\"Cache-control\\\", cacheControl);\n            ByteArrayOutputStream os = new ByteArrayOutputStream();\n            ImageIO.write(image, \\\"png\\\", os);\n            if (flushImage) {\n                image.flush();\n            }\n            rsp.serveFile(req, os.toByteArray(), 0, os.size());\n        }", "CodeBleu_score": 35.02089123737544}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t            rsp.setContentType(\\\"image/png\\\");\n            rsp.addHeader(\\\"Cache-control\\\", cacheControl);\n            rsp.addDateHeader(\\\"Last-Modified\\\", lastModified);\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            ImageIO.write(image, \\\"png\\\", out);\n            if (flushImage) {\n                image.flush();\n            }\n            rsp.serveFile(req, out.toByteArray(), 0, out.size());\n        }", "CodeBleu_score": 34.837597096142275}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\t    rsp.setContentType(\\\"image/png\\\");\n    rsp.addDateHeader(\\\"Last-Modified\\\", lastModified);\n    rsp.addHeader(\\\"Cache-control\\\", cacheControl);\n    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n    ImageIO.write(image, \\\"PNG\\\", bout);\n    if (flushImage) {\n        image.flush();\n    }\n    rsp.serveFile(req, bout.toByteArray(), 0, bout.size(), \\\"image/png\\\");\n}", "CodeBleu_score": 32.755844435576996}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    if (enableCache) {\n        cachedTeam.setExpireAfterWrite(teamCacheDuration, MINUTES);\n        cachedRepositories.setExpireAfterWrite(repositoriesCacheDuration, MINUTES);\n    }\n    this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom()\n                .setConnectionRequestTimeout(10 * 1000)\n                .setConnectTimeout(10 * 1000)\n                .setSocketTimeout(60 * 1000);\n\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create()\n                .setConnectionManager(connectionManager)\n                .setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n                .setRetryHandler(new StandardHttpRequestRetryHandler(3, true));\n\n        if (authenticator != null) {\n            httpClientBuilder.setDefaultCredentialsProvider(authenticator.getCredentialsProvider());\n            context = HttpClientContext.create();\n            context.setCredentialsProvider(authenticator.getCredentialsProvider());\n        }\n\n        httpClientBuilder.setDefaultRequestConfig(requestConfigBuilder.build());\n        client = httpClientBuilder.build();\n        client.setDefaultHeaders(Collections.singletonList(new BasicHeader(\\\"User-Agent\\\", \\\"Jenkins-Bitbucket-Plugin\\\")));\n\n        ProxyConfiguration proxy = Jenkins.get().proxy;\n        if (proxy != null) {\n            client.getConnectionManager().setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress(proxy.name, proxy.port)));\n        }\n    }", "CodeBleu_score": 49.940633888014375}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t        this.enableCache = enableCache;\n        if (enableCache) {\n            cachedTeam.setExpireAfterWrite(teamCacheDuration, MINUTES);\n            cachedRepositories.setExpireAfterWrite(repositoriesCacheDuration, MINUTES);\n        }\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        RequestConfig.Builder requestConfigBuilder = RequestConfig.custom();\n        requestConfigBuilder.setConnectionRequestTimeout(30 * 1000);\n        requestConfigBuilder.setConnectTimeout(30 * 1000);\n        requestConfigBuilder.setSocketTimeout(60 * 1000);\n        requestConfigBuilder.setStaleConnectionCheckEnabled(true);\n        requestConfigBuilder.setExpectContinueEnabled(false);\n        requestConfigBuilder.setRedirectsEnabled(true);\n        requestConfigBuilder.setCircularRedirectsAllowed(true);\n        requestConfigBuilder.setAuthenticationEnabled(true);\n        requestConfigBuilder.setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy());\n        RequestConfig requestConfig = requestConfigBuilder.build();\n        HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\n        httpClientBuilder.setConnectionManager(connectionManager);\n        httpClientBuilder.setDefaultRequestConfig(requestConfig);\n        httpClientBuilder.setRetryHandler(new StandardHttpRequestRetryHandler(3, false));\n        if (authenticator != null) {\n            httpClientBuilder.setDefaultCredentialsProvider(authenticator.getCredentialsProvider());\n            httpClientBuilder.setDefaultAuthSchemeRegistry(authenticator.getAuthSchemeRegistry());\n            httpClientBuilder.setDefaultRequestConfig(authenticator.getRequestConfig());\n        }\n        httpClientBuilder.setProxy(getProxy());\n        client = httpClientBuilder.build();\n        context = HttpClientContext.create();\n    }", "CodeBleu_score": 52.09106737060844}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t    this.enableCache = enableCache;\n    if (enableCache) {\n        cachedTeam.setExpiration(teamCacheDuration, MINUTES);\n        cachedRepositories.setExpiration(repositoriesCacheDuration, MINUTES);\n    }\n    this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n\n        RequestConfig requestConfig = RequestConfig.custom()\n                .setConnectTimeout(10 * 1000)\n                .setSocketTimeout(10 * 1000)\n                .setConnectionRequestTimeout(10 * 1000)\n                .build();\n\n        HttpClientBuilder builder = HttpClientBuilder.create()\n                .setKeepAliveStrategy(new DefaultConnectionKeepAliveStrategy())\n                .setConnectionManager(connectionManager)\n                .setRetryHandler(new StandardHttpRequestRetryHandler(3, false));\n\n        if (authenticator != null) {\n            builder.setDefaultCredentialsProvider(new BasicCredentialsProvider());\n            builder.setDefaultAuthSchemeRegistry(new BasicSchemeRegistry());\n            context = HttpClientContext.create();\n            context.setCredentialsProvider(new BasicCredentialsProvider());\n            context.setAuthCache(new BasicAuthCache());\n        }\n\n        Jenkins j = Jenkins.getInstance();\n        ProxyConfiguration proxy = j.proxy;\n        if (proxy != null) {\n            HttpHost proxyHost = new HttpHost(proxy.name, proxy.port, proxy.getProtocol());\n            builder.setProxy(proxyHost);\n            builder.setDefaultCredentialsProvider(new BasicCredentialsProvider());\n            builder.setDefaultAuthSchemeRegistry(new BasicSchemeRegistry());\n            context.setCredentialsProvider(new BasicCredentialsProvider());\n            context.setAuthCache(new BasicAuthCache());\n        }\n        client = builder.build();\n    }", "CodeBleu_score": 50.24961560355492}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketPullRequestBranch source = pullRequest.getSource();\n    if (source.getBranch() != null) {\n        source.setCommit(new CommitClosure(source.getBranch().getRaw().getHash()));\n    }\n\n    BitbucketPullRequestBranch destination = pullRequest.getDestination();\n    if (destination.getBranch() != null) {\n        destination.setCommit(new CommitClosure(destination.getBranch().getRaw().getHash()));\n    }\n}", "CodeBleu_score": 38.70236770670276}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    BitbucketPullRequestBranch source = pullRequest.getSource();\n    BitbucketPullRequestBranch destination = pullRequest.getDestination();\n\n    if (source.getBranch() != null) {\n        source.setCommit(new CommitClosure(source.getBranch().getRaw().getHash()));\n    }\n\n    if (destination.getBranch() != null) {\n        destination.setCommit(new CommitClosure(destination.getBranch().getRaw().getHash()));\n    }\n}", "CodeBleu_score": 41.73267073700578}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t    String sourceBranch = pullRequest.getSource().getBranch().getName();\n    if (sourceBranch != null) {\n        pullRequest.getSource().setCommit(new CommitClosure(sourceBranch));\n    }\n\n    String destBranch = pullRequest.getDestination().getBranch().getName();\n    if (destBranch != null) {\n        pullRequest.getDestination().setCommit(new CommitClosure(destBranch));\n    }\n}", "CodeBleu_score": 45.38301036613691}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\n    URL url = jenkinsLocationConfiguration.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\\\"Jenkins location configuration is missing\\\");\n    }\n\n    DisplayURLProvider displayURLProvider = DisplayURLProvider.get();\n    return displayURLProvider.getRunURL(build);\n}", "CodeBleu_score": 47.611541180908965}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\n    URL url = jlc.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\\\"Jenkins location configuration not found\\\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.30791876982868}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\t    JenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\n    URL url = jlc.getUrl();\n    if (url == null) {\n        throw new IllegalStateException(\\\"Jenkins location configuration is not set\\\");\n    }\n    return DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 57.21590290247298}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    URL parsedUrl;\n    try {\n        parsedUrl = new URL(url);\n    } catch (MalformedURLException e) {\n        throw new IllegalStateException(e);\n    }\n\n    String host = parsedUrl.getHost();\n    if (host.equals(\"localhost\") || host.equals(\"unconfigured-jenkins-location\")) {\n        throw new IllegalStateException(\\\"Jenkins URL is not configured properly. It is currently set to \\${url}.\\\");\n    }\n\n    if (bitbucket instanceof BitbucketCloudApiClient) {\n        if (parsedUrl.getHost().equals(parsedUrl.getAuthority())) {\n            throw new IllegalStateException(\\\"Jenkins URL is not configured properly. It is currently set to \\${url}.\\\");\n        }\n    }\n\n    return url;\n}", "CodeBleu_score": 50.77216544929589}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    URL jenkinsUrl = null;\n        try {\n            jenkinsUrl = new URL(url);\n        } catch (MalformedURLException e) {\n            throw new IllegalStateException(\\\"Malformed Jenkins URL: \\\" + url);\n        }\n\n        if (StringUtils.isBlank(jenkinsUrl.getHost()) || jenkinsUrl.getHost().equals(\\\"localhost\\\") || jenkinsUrl.getHost().equals(\\\"unconfigured-jenkins-location\\\")) {\n            throw new IllegalStateException(\\\"Jenkins URL is invalid: \\\" + url);\n        }\n\n        if (bitbucket instanceof BitbucketCloudApiClient && !jenkinsUrl.getHost().contains(\\\".\\\")) {\n            throw new IllegalStateException(\\\"Jenkins URL is not fully qualified: \\\" + url);\n        }\n\n        return url;\n    }", "CodeBleu_score": 42.92438606601484}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\t    try {\n            URL parsed = new URL(url);\n            if (parsed.getHost().equals(\\\"localhost\\\")) {\n                throw new IllegalStateException(\\\"Jenkins URL must be fully qualified. \\\" +\n                    \\\"Please configure a fully qualified hostname in \\\" +\n                    \\\"Jenkins Location configuration.\\\");\n            }\n\n            if (parsed.getHost().equals(\\\"unconfigured-jenkins-location\\\")) {\n                throw new IllegalStateException(\\\"Jenkins URL must be fully qualified. \\\" +\n                    \\\"Please configure a fully qualified hostname in \\\" +\n                    \\\"Jenkins Location configuration.\\\");\n            }\n\n            if (bitbucket instanceof BitbucketCloudApiClient) {\n                if (parsed.getHost().equals(\\\"127.0.0.1\\\")) {\n                    throw new IllegalStateException(\\\"Jenkins URL must be fully qualified. \\\" +\n                        \\\"Please configure a fully qualified hostname in \\\" +\n                        \\\"Jenkins Location configuration.\\\");\n                }\n            }\n\n            return url;\n        } catch (MalformedURLException e) {\n            throw new IllegalStateException(\\\"Jenkins URL is malformed: \\\" + url);\n        }\n    }", "CodeBleu_score": 40.37820482264511}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t", "CodeBleu_score": 3.5406350036655807}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isNotificationDisabled()) {\n            listener.getLogger().println(\\\"[Bitbucket] Notifications are disabled\\\");\n            return;\n        }\n\n        SCMRevisionAction scmAction = build.getAction(SCMRevisionAction.class);\n        if (scmAction == null) {\n            listener.getLogger().println(\\\"[Bitbucket] No SCM actions found\\\");\n            return;\n        }\n\n        SCMRevision scmRevision = scmAction.getRevision();\n        String hash = scmRevision.getSha1String();\n        if (hash == null) {\n            listener.getLogger().println(\\\"[Bitbucket] No hash found\\\");\n            return;\n        }\n\n        boolean shareBuildKey = context.isShareBuildKey();\n        String buildKey = (shareBuildKey) ? build.getParent().getFullName() : build.getFullDisplayName();\n\n        BitbucketApi bitbucket = source.newClientBuilder().build();\n\n        if (scmRevision instanceof SCMRevision.Head) {\n            listener.getLogger().println(\\\"[Bitbucket] Sending build status notification for branch\\\");\n            createStatus(build, listener, bitbucket, buildKey, hash);\n        } else if (scmRevision instanceof SCMRevision.PR) {\n            listener.getLogger().println(\\\"[Bitbucket] Sending build status notification for pull request\\\");\n            createStatus(build, listener, bitbucket, buildKey, hash);\n        } else {\n            listener.getLogger().println(\\\"[Bitbucket] Sending build status notification for unknown type\\\");\n            createStatus(build, listener, bitbucket, buildKey, hash);\n        }\n    }", "CodeBleu_score": 46.332609799438195}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t     if (shareBuildKeyBetweenBranchAndPR) {\n         return build.getParent().getFullName() + \"-\" + branch;\n     } else {\n         return build.getFullDisplayName();\n     }\n }", "CodeBleu_score": 29.52928155072694}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t     if (shareBuildKeyBetweenBranchAndPR) {\n         return build.getParent().getFullName() + \":\" + branch;\n     } else {\n         return build.getFullDisplayName();\n     }\n }", "CodeBleu_score": 29.52928155072694}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t     if (shareBuildKeyBetweenBranchAndPR) {\n         return build.getParent().getFullName() + \":\" + branch;\n     }\n     return build.getFullDisplayName();\n }", "CodeBleu_score": 27.647190311047904}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator serverUrl is null, defaulting to Bitbucket Cloud\\\");\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (checkoutCredentialsId != null\n                && !BitbucketSCMSource.DescriptorImpl.SAME.equals(checkoutCredentialsId)) {\n            traits.add(new SSHCheckoutTrait(checkoutCredentialsId));\n        }\n        traits.add(new BranchDiscoveryTrait(true, true));\n        traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n        traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\n                new ForkPullRequestDiscoveryTrait.TrustEveryone()));\n        traits.add(new PublicRepoPullRequestFilterTrait());\n    }\n    return this;\n}", "CodeBleu_score": 21.897331874466957}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n        LOGGER.warning(\\\"BitbucketSCMNavigator serverUrl is null, defaulting to \\\" + serverUrl);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (bitbucketServerUrl != null) {\n            traits.add(new ServerTrait(bitbucketServerUrl));\n        }\n        if (checkoutCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(checkoutCredentialsId));\n        }\n        if (pattern != null) {\n            traits.add(new RegexSCMSourceFilterTrait(pattern));\n        }\n        if (includes != null || excludes != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(includes, excludes));\n        }\n        if (autoRegisterHooks) {\n            traits.add(new AutoRegisterWebhookTrait(true));\n        }\n        traits.add(new BranchDiscoveryTrait(true, true));\n        traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n        traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\n                new ForkPullRequestDiscoveryTrait.TrustEveryone()));\n        traits.add(new PublicRepoPullRequestFilterTrait());\n    }\n    return this;\n}", "CodeBleu_score": 29.283712128949375}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t    if (serverUrl == null) {\n        serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n        LOGGER.log(Level.WARNING, \\\"BitbucketSCMNavigator serverUrl is null, defaulting to {0}\\\", serverUrl);\n    }\n    if (traits == null) {\n        traits = new ArrayList<>();\n        if (checkoutCredentialsId != null) {\n            traits.add(new SSHCheckoutTrait(checkoutCredentialsId));\n        }\n        traits.add(new BranchDiscoveryTrait(true, true));\n        traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n        traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\n                new ForkPullRequestDiscoveryTrait.TrustEveryone()));\n        traits.add(new PublicRepoPullRequestFilterTrait());\n        if (pattern != null) {\n            traits.add(new RegexSCMSourceFilterTrait(pattern));\n        }\n        if (includes != null) {\n            traits.add(new WildcardSCMHeadFilterTrait(includes, excludes));\n        }\n        if (bitbucketServerUrl != null) {\n            traits.add(new BitbucketServerTrait(bitbucketServerUrl, mirrorId, credentialsId, autoRegisterHooks));\n        }\n    }\n    return this;\n}", "CodeBleu_score": 28.827114454232355}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketSCMSourceContext context = request.getContext();\n    BitbucketSCMSource source = context.getSource();\n    BitbucketServer server = source.getServer();\n    String project = context.getProject();\n    String repo = context.getRepository();\n    BitbucketRepository repository = server.getRepository(project, repo);\n    if (isMatch) {\n                listener.getLogger().println(\\\"Proposed \" + name + \": \\\" + repository.getUrl());\n                count++;\n            } else {\n                listener.getLogger().println(\\\"Ignored \" + name + \": \\\" + repository.getUrl());\n            }\n        }", "CodeBleu_score": 43.89279359638553}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    BitbucketRepository repository = getRepository(name);\n    if (isMatch) {\n        listener.getLogger().println(\n                Messages.BitbucketSCMNavigator_Repository_Proposed(repository.getProject().getName(), repository.getSlug()));\n        count++;\n    } else {\n        listener.getLogger().println(\n                Messages.BitbucketSCMNavigator_Repository_Ignored(repository.getProject().getName(), repository.getSlug()));\n    }\n}", "CodeBleu_score": 46.88314854227451}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t    if (isMatch) {\n        BitbucketRepository repository = request.getRepositories().get(name);\n        if (repository != null) {\n            if (repository.isProposed()) {\n                count++;\n            } else {\n                listener.getLogger().println(\\\"Ignoring repository \\\" + name + \\\" because it is not proposed\\\");\n            }\n        } else {\n            listener.getLogger().println(\\\"Ignoring repository \\\" + name + \\\" because it was not found\\\");\n        }\n    }\n}", "CodeBleu_score": 51.45149178620707}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        List<BranchWithHash> missingBranches = branchWithHashes.stream()\n            .filter(branchWithHash -> {\n                try {\n                    return !git.hasRevision(branchWithHash.getHash());\n                } catch (GitException e) {\n                    listener.error(e.getMessage());\n                    return true;\n                }\n            })\n            .collect(Collectors.toList());\n\n        if (!missingBranches.isEmpty()) {\n            List<RefSpec> refSpecs = missingBranches.stream()\n                .map(branchWithHash -> new RefSpec(branchWithHash.getBranch()))\n                .collect(Collectors.toList());\n\n            try {\n                git.fetch(new FetchCommand(new URIish(cloneLink), remoteName, refSpecs));\n            } catch (URISyntaxException e) {\n                listener.error(e.getMessage());\n            }\n        }\n\n        return rev;\n    }", "CodeBleu_score": 49.17040343352426}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        if (marked == null) {\n            listener.getLogger().println(\\\"No revision marked for build. Checking for missing commits...\\\");\n            List<BranchWithHash> missingCommits = branchWithHashes.stream()\n\n                .filter(b -> !git.revParse(b.getHash()))\n                .collect(Collectors.toList());\n\n            if (!missingCommits.isEmpty()) {\n\n                listener.getLogger().println(\\\"Found missing commits. Fetching them from remote repository...\\\");\n                try {\n\n                    URIish remoteUri = new URIish(cloneLink);\n\n                    FetchCommand fetchCommand = git.fetch()\n\n                        .setRemote(remoteName)\n\n                        .setRefSpecs(missingCommits.stream()\n\n                            .map(b -> new RefSpec(\\\"+refs/heads/\\\" + b.getBranch()))\n\n                            .collect(Collectors.toList()))\n\n                        .setRemoteUri(remoteUri);\n\n                    git.run(fetchCommand);\n\n                } catch (GitException | URISyntaxException e) {\n\n                    throw new RuntimeException(\\\"Failed to fetch missing commits from remote repository\\\", e);\n\n                }\n\n            } else {\n\n                listener.getLogger().println(\\\"No missing commits found.\\\");\n\n            }\n\n        }\n\n        return rev;\n\n    }", "CodeBleu_score": 45.0791491225121}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t        try {\n            List<RefSpec> refSpecs = branchWithHashes.stream()\n                .filter(branchWithHash -> {\n                    try {\n                        return git.getCommit(branchWithHash.getHash()) == null;\n                    } catch (GitException e) {\n                        listener.getLogger().println(\\\"Failed to get commit from Git repository: \\\" + e.getMessage());\n                        return true;\n                    }\n                })\n                .map(branchWithHash -> new RefSpec(\n                    String.format(\\\"+refs/heads/%s:refs/remotes/%s/%s\\\", branchWithHash.getBranch(), remoteName, branchWithHash.getBranch())\n                ))\n                .collect(Collectors.toList());\n            if (!refSpecs.isEmpty()) {\n                URIish uri = new URIish(cloneLink);\n                FetchCommand fetchCommand = git.fetch()\n                    .setRemote(remoteName)\n                    .setRefSpecs(refSpecs)\n                    .setURIish(uri);\n                fetchCommand.call();\n            }\n        } catch (URISyntaxException e) {\n            listener.getLogger().println(\\\"Failed to fetch commits from remote repository: \\\" + e.getMessage());\n        }\n        return rev;\n    }", "CodeBleu_score": 31.380636544893655}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>(links.size());\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (hrefs != null && !hrefs.isEmpty()) {\n            result.put(entry.getKey(), hrefs.get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 63.344645323639035}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (hrefs != null && !hrefs.isEmpty()) {\n            result.put(entry.getKey(), hrefs.get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 73.49914034767812}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t    if (links == null) {\n        return null;\n    }\n    Map<String, BitbucketHref> result = new HashMap<>();\n    for (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\n        List<BitbucketHref> hrefs = entry.getValue();\n        if (hrefs != null && !hrefs.isEmpty()) {\n            result.put(entry.getKey(), hrefs.get(0));\n        }\n    }\n    return result;\n}", "CodeBleu_score": 73.49914034767812}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selection = resourceStates.pop();\n    if (!selection) {\n        return;\n    }\n\n    const uris = selection.resourceStates.map(resource => resource.resourceUri);\n    const repository = await this.getRepository(uris);\n    if (!repository) {\n        return;\n    }\n\n    const paths = await this.getRelativePathsFromRepository(repository, uris);\n    try {\n        await repository.add(paths);\n    } catch (error) {\n        console.error(error);\n        window.showErrorMessage(error.message);\n    }\n}", "CodeBleu_score": 58.28127803603259}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    if (!resourceStates.length) {\n      return;\n    }\n\n    const selection = resourceStates.map((s) => s.resourceUri);\n\n    const repository = await this.getRepository(selection[0]);\n    if (repository) {\n      const relativePaths = await this.getRelativePaths(repository, selection);\n      if (relativePaths.length) {\n        try {\n          await repository.add(relativePaths);\n        } catch (error) {\n          console.log(\\\"Error adding files to repository\\\", error);\n          window.showErrorMessage(\\\"Unable to add files\\\");\n        }\n      }\n    }\n  }", "CodeBleu_score": 47.91678028293966}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t    const selection = resourceStates[0];\n    if (selection.resourceStates.length === 0) {\n      return;\n    }\n\n    const uris = selection.resourceStates.map((s) => s.resourceUri);\n    const repositoryPaths = await this.getRepositoryPaths(uris);\n\n    for (const repositoryPath of repositoryPaths) {\n      const paths = uris\n        .filter((u) => u.path.indexOf(repositoryPath) >= 0)\n        .map((u) => u.path.substr(repositoryPath.length + 1));\n      try {\n        await this.runByRepository(repositoryPath, async (repository) => {\n          await repository.add(paths);\n        });\n      } catch (error) {\n        console.log(error);\n        window.showErrorMessage(error.message);\n      }\n    }\n  }", "CodeBleu_score": 54.2764011576587}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\t  const resourceStates = await this.getSCMResourceStates();\n\n  if (\n    resourceStates.length === 0 ||\n    !(resourceStates[0].resourceUri instanceof Uri)\n  ) {\n    return resourceStates.filter(\n      resourceState => resourceState.resource instanceof Resource\n    );\n  }\n\n  const resource = await this.getResource(resourceStates[0].resourceUri);\n\n  if (resource) {\n    resourceStates[0].resource = resource;\n  }\n\n  return resourceStates.filter(\n    resourceState => resourceState.resource instanceof Resource\n  );\n}", "CodeBleu_score": 50.26902903201387}, {"code": "protected async getResourceStates{\n\t  const resourceStates = await this.getResourceStates();\n  if (resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n    const resource = await this.getScmResource();\n    if (resource) {\n      resourceStates.push(resource);\n    }\n  }\n  return resourceStates.filter(\n    (resourceState) => resourceState instanceof Resource\n  );\n}", "CodeBleu_score": 50.57452176915932}, {"code": "protected async getResourceStates{\n\t  if (resourceStates.length === 0 || !(resourceStates[0].resourceUri instanceof Uri)) {\n    const resource = await this.getSCMResource();\n\n    if (resource) {\n      resourceStates = [resource];\n    }\n  }\n\n  return resourceStates.filter(\n    (resourceState): resourceState is Resource => resourceState instanceof Resource\n  );\n}", "CodeBleu_score": 49.398634557523074}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n\n      if (!editor) {\n        return undefined;\n      }\n\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = fromSvnUri(uri);\n    }\n\n    if (!uri) {\n      return undefined;\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \"svn.getSourceControlManager\",\n      \"\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    const resource = repository.getResource(uri);\n\n    return resource;\n  }", "CodeBleu_score": 65.1906147124532}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const editor = window.activeTextEditor;\n\n      if (!editor) {\n        return undefined;\n      }\n\n      uri = editor.document.uri;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = fromSvnUri(uri);\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \"svn.getSourceControlManager\",\n      \"\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 63.63311290602186}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t    if (!uri) {\n      const textEditor = window.activeTextEditor;\n\n      if (!textEditor) {\n        return undefined;\n      }\n\n      uri = textEditor.document.uri;\n    }\n\n    if (uri.scheme === \"svn\") {\n      uri = fromSvnUri(uri);\n    }\n\n    if (uri.scheme !== \"file\") {\n      return undefined;\n    }\n\n    const sourceControlManager = (await commands.executeCommand(\n      \"svn.getSourceControlManager\",\n      \"\"\n    )) as SourceControlManager;\n\n    const repository = sourceControlManager.getRepository(uri);\n\n    if (!repository) {\n      return undefined;\n    }\n\n    return repository.getResource(uri);\n  }", "CodeBleu_score": 66.00163279845827}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\t  const repo = await this.model.getRepository(element.repo.fsPath);\n\n  if (element.item === Status.MODIFIED) {\n    openDiff(repo, element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n  } else if (element.item === Status.ADDED) {\n    openFileRemote(repo, element.newPath, element.newRevision);\n  }\n}", "CodeBleu_score": 66.55550457500152}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const repo = await this.model.getRemoteRepository(element.repo);\n\n    if (element.item === Status.MODIFIED) {\n      openDiff(repo, element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n    } else if (element.item === Status.ADDED) {\n      openFileRemote(repo, element.newPath, element.newRevision);\n    }\n  }", "CodeBleu_score": 66.59443976743991}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\t    const repo = this.model.getRepository(element.repo.fsPath);\n    if (!repo) {\n      return;\n    }\n\n    if (element.item === Status.MODIFIED) {\n      await openDiff(repo, element.oldPath, element.oldRevision, element.newPath, element.newRevision);\n    } else if (element.item === Status.ADDED) {\n      await openFileRemote(repo, element.newPath, element.newRevision);\n    }\n  }", "CodeBleu_score": 65.80036331482178}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!env.clipboard) {\n    window.showErrorMessage(\\\"Copy to clipboard is not supported\\\");\n    return;\n  }\n  if (item.kind === LogTreeItemKind.Commit) {\n    const commit = item.data as ISvnLogEntry;\n    await env.clipboard.writeText(commit[what]);\n    return;\n  }\n  window.showErrorMessage(\\\"Copy to clipboard is not supported\\\");\n}", "CodeBleu_score": 53.52148453038209}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  if (!(await env.clipboard.writeText(what))) {\n    window.showErrorMessage(\\\"Copy to clipboard is not supported\\\");\n    return;\n  }\n  if (item.kind === LogTreeItemKind.Commit) {\n    const commit = item.data as ISvnLogEntry;\n    const what = configuration.get<string>(\\\"log.copyCommit.what\\\");\n    let whatToCopy;\n    if (what === \\\"message\\\") {\n      whatToCopy = commit.msg;\n    } else if (what === \\\"revision\\\") {\n      whatToCopy = commit.revision.toString();\n    } else {\n      window.showErrorMessage(\\\"Invalid configuration for log.copyCommit.what\\\");\n      return;\n    }\n    await env.clipboard.writeText(whatToCopy);\n  }\n}", "CodeBleu_score": 46.58971556104677}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t  const clipboard = await env.clipboard;\n  if (!clipboard) {\n    window.showErrorMessage(\\\"Copy to clipboard is not supported\\\");\n    return;\n  }\n\n  if (item.kind === LogTreeItemKind.Commit) {\n    const commit = item.data as ISvnLogEntry;\n    const message = commit.msg.trim();\n    const revision = commit.revision.toString();\n    const commitMessage = what === \\\"message\\\" ? message : revision;\n    await clipboard.writeText(commitMessage);\n  }\n}", "CodeBleu_score": 48.36904478703733}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    List<GiteaConnectionFactory> factories = new ArrayList<>();\n    if (classLoader != null) {\n        ServiceLoader.load(GiteaConnectionFactory.class, classLoader).forEach(factories::add);\n    }\n    ServiceLoader.load(GiteaConnectionFactory.class).forEach(factories::add);\n    if (factories.isEmpty()) {\n        throw new IOException(\"No GiteaConnectionFactory implementation found on the classpath\");\n    }\n    Collections.sort(factories, (o1, o2) -> Integer.compare(o2.getPriority(), o1.getPriority()));\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\"No GiteaConnectionFactory implementation found that can open a connection to \" + serverUrl);\n}", "CodeBleu_score": 40.23987117377966}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    // Load GiteaConnectionFactory implementations from SPI\n    ServiceLoader<GiteaConnectionFactory> factories = ServiceLoader.load(GiteaConnectionFactory.class, classLoader());\n    // Iterate through the factories to find the most suitable one\n    GiteaConnectionFactory bestFactory = null;\n    for (GiteaConnectionFactory factory : factories) {\n        if (factory.canOpen(this)) {\n            if (bestFactory == null || factory.priority() > bestFactory.priority()) {\n                bestFactory = factory;\n            }\n        }\n    }\n    // If a suitable factory is found, open the connection\n    if (bestFactory != null) {\n        return bestFactory.open(this);\n    } else {\n        throw new IOException(\"No suitable GiteaConnectionFactory found\");\n    }\n}", "CodeBleu_score": 50.06079973283904}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t    for (GiteaConnectionFactory factory : factories()) {\n        if (factory.canOpen(this)) {\n            return factory.open(this);\n        }\n    }\n    throw new IOException(\\\"No GiteaConnectionFactory found that can open a connection to \\\" + serverUrl);\n}", "CodeBleu_score": 16.128787132618903}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        this.classLoader = jenkins.getPluginManager().getClassLoader();\n    } else {\n        this.classLoader = getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 49.706601147558956}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        classLoader = jenkins.pluginManager.uberClassLoader;\n    } else {\n        classLoader = getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 52.05868799056308}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\t    Jenkins jenkins = Jenkins.getInstance();\n    if (jenkins != null) {\n        classLoader = jenkins.pluginManager.uberClassLoader;\n    } else {\n        classLoader = getClass().getClassLoader();\n    }\n    return this;\n}", "CodeBleu_score": 52.05868799056308}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t    this.displayName = displayName;\n    this.serverUrl = normalizeServerUrl(serverUrl);\n    this.manageHooks = manageHooks;\n    this.credentialsId = manageHooks ? credentialsId : null;\n    this.aliasUrl = normalizeAliasUrl(aliasUrl);\n    if (this.displayName == null) {\n        this.displayName = inferDisplayName(this.serverUrl);\n    }\n}", "CodeBleu_score": 45.65867986600737}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t        this.displayName = displayName;\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = normalizeServerUrl(aliasUrl);\n        if (displayName == null) {\n            this.displayName = deriveDisplayName(this.serverUrl);\n        }\n    }", "CodeBleu_score": 46.79073640680625}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t        this.displayName = displayName;\n        this.serverUrl = normalize(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = manageHooks ? credentialsId : null;\n        this.aliasUrl = normalize(aliasUrl);\n\n        if (displayName == null) {\n            this.displayName = deriveDisplayName(serverUrl);\n        }\n    }", "CodeBleu_score": 44.87123693362199}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n    List<StandardCredentials> matchingCredentials = CredentialsMatchers.filter(\n            CredentialsProvider.lookupCredentials(StandardCredentials.class, Jenkins.get(), ACL.SYSTEM,\n                    URIRequirementBuilder.fromUri(serverUrl).build()),\n            CredentialsMatchers.allOf(AuthenticationTokens.matcher(GiteaAuth.class)));\n    return new ListBoxModel(\n            matchingCredentials.stream().map(c -> new ListBoxModel.Option(c.getId(), c.getId())).collect(Collectors.toList()));\n}", "CodeBleu_score": 53.12573597086687}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n    return new StandardListBoxModel()\n            .includeMatchingAs(ACL.SYSTEM, serverUrl, CredentialsMatchers.allOf(\n                    AuthenticationTokens.matcher(GiteaAuth.class),\n                    CredentialsMatchers.forServer(serverUrl)\n            ), CredentialsMatchers.allOf(\n                    AuthenticationTokens.matcher(GiteaAuth.class),\n                    CredentialsMatchers.forServer(serverUrl)\n            ), CredentialsMatchers.allOf(\n                    AuthenticationTokens.matcher(GiteaAuth.class),\n                    CredentialsMatchers.forServer(serverUrl)\n            ));\n}", "CodeBleu_score": 49.618273953457745}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    serverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n    return new CredentialsListBoxModel()\n            .includeEmptyValue()\n            .includeAs(\n                    ACL.SYSTEM,\n                    Jenkins.get(),\n                    StandardCredentials.class,\n                    CredentialsMatchers.and(\n                            CredentialsMatchers.allOf(\n                                    AuthenticationTokens.matcher(GiteaAuth.class),\n                                    URIRequirementBuilder.fromUri(serverUrl).build()\n                            ),\n                            CredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class)\n                    )\n            );\n}", "CodeBleu_score": 45.71435015903293}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return \"\";\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        String scheme = uri.getScheme();\n        String host = uri.getHost();\n        int port = uri.getPort();\n        if (port != -1) {\n            if ((scheme.equalsIgnoreCase(\"http\") && port == 80) || (scheme.equalsIgnoreCase(\"https\") && port == 443)) {\n                port = -1;\n            }\n        }\n        String path = uri.getPath();\n        if (path != null && path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        return new URI(scheme, uri.getUserInfo(), host, port, path, uri.getQuery(), uri.getFragment()).toString();\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 46.00845685708908}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return \"\";\n    }\n    try {\n        URI uri = new URI(serverUrl);\n        int port = uri.getPort();\n        if (port == -1) {\n            return serverUrl.toLowerCase(Locale.ENGLISH);\n        }\n        if (uri.getScheme().equals(\"http\") && port == 80) {\n            return serverUrl.substring(0, serverUrl.lastIndexOf(\":80\")).toLowerCase(Locale.ENGLISH);\n        }\n        if (uri.getScheme().equals(\"https\") && port == 443) {\n            return serverUrl.substring(0, serverUrl.lastIndexOf(\":443\")).toLowerCase(Locale.ENGLISH);\n        }\n        return serverUrl.toLowerCase(Locale.ENGLISH);\n    } catch (URISyntaxException e) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 36.290008639084256}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t    if (serverUrl == null) {\n        return null;\n    }\n\n    try {\n        URI uri = new URI(serverUrl);\n        StringBuilder sb = new StringBuilder();\n        sb.append(uri.getScheme().toLowerCase(Locale.ENGLISH));\n        sb.append(\"://\");\n        sb.append(uri.getHost().toLowerCase(Locale.ENGLISH));\n        if (uri.getPort() != -1) {\n            sb.append(\":\");\n            sb.append(uri.getPort());\n        }\n        sb.append(uri.getPath());\n        return sb.toString().replaceAll(\"\\\\/+$\", \"\");\n    } catch (URISyntaxException ex) {\n        return serverUrl;\n    }\n}", "CodeBleu_score": 26.931905278913653}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 53.48905867195466}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel items = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            items.add(server.getServerUrl());\n        } else {\n            items.add(displayName, server.getServerUrl());\n        }\n    }\n    return items;\n}", "CodeBleu_score": 53.44716404057447}, {"code": "public ListBoxModel getServerItems(){\n\t    ListBoxModel model = new ListBoxModel();\n    for (GiteaServer server : getServers()) {\n        String displayName = server.getDisplayName();\n        if (StringUtils.isBlank(displayName)) {\n            model.add(server.getServerUrl(), server.getServerUrl());\n        } else {\n            model.add(displayName, server.getServerUrl());\n        }\n    }\n    return model;\n}", "CodeBleu_score": 52.71545363619487}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    if (servers == null) {\n        this.servers = Collections.emptyList();\n    } else {\n        Set<String> serverUrls = new HashSet<>();\n        List<GiteaServer> newServers = new ArrayList<>(servers.size());\n        for (GiteaServer server : servers) {\n            String serverUrl = normalizeServerUrl(server.getServerUrl());\n            if (StringUtils.isNotBlank(serverUrl) && serverUrls.add(serverUrl)) {\n                newServers.add(new GiteaServer(serverUrl, server.getDisplayName(), server.getCredentialsId(), server.getAliasUrl()));\n            }\n        }\n        this.servers = newServers;\n    }\n    save();\n}", "CodeBleu_score": 52.99166802680973}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    Jenkins.get().checkPermission(Jenkins.ADMINISTER);\n    if (servers != null) {\n        Set<String> serverUrls = new HashSet<String>();\n        List<GiteaServer> filteredServers = new ArrayList<GiteaServer>();\n        for (GiteaServer server : servers) {\n            if (StringUtils.isBlank(server.getServerUrl())) {\n                continue;\n            }\n            String serverUrl = normalizeServerUrl(server.getServerUrl());\n            if (serverUrls.add(serverUrl)) {\n                filteredServers.add(new GiteaServer(serverUrl, server.getDisplayName(), server.getCredentialsId(), server.getAliasUrl()));\n            }\n        }\n        this.servers = filteredServers;\n    } else {\n        this.servers = null;\n    }\n    save();\n}", "CodeBleu_score": 43.283213127203204}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t    if (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n        if (servers == null || servers.isEmpty()) {\n            this.servers = Collections.emptyList();\n        } else {\n            Set<String> serverUrls = new HashSet<>();\n            List<GiteaServer> result = new ArrayList<>();\n            for (GiteaServer server : servers) {\n                String serverUrl = normalizeServerUrl(server.getServerUrl());\n                if (StringUtils.isNotBlank(serverUrl) && serverUrls.add(serverUrl)) {\n                    result.add(server);\n                }\n            }\n            this.servers = result;\n        }\n        save();\n    }\n}", "CodeBleu_score": 47.59784965646568}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    serverUrl = normalizeUrl(serverUrl);\n    List<GiteaServer> endpoints = new ArrayList<>(getServers());\n    boolean found = false;\n    for (Iterator<GiteaServer> iterator = endpoints.iterator(); iterator.hasNext(); ) {\n        GiteaServer ep = iterator.next();\n        if (ep.getServerUrl().equals(serverUrl)) {\n            iterator.remove();\n            found = true;\n            break;\n        }\n    }\n    if (found) {\n        setServers(endpoints);\n    }\n    return found;\n}", "CodeBleu_score": 62.06390017072098}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    List<GiteaServer> endpoints = new ArrayList<>(getServers());\n    boolean removed = false;\n    for (ListIterator<GiteaServer> iterator = endpoints.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (endpoint.getServerUrl().equals(serverUrl)) {\n            iterator.remove();\n            removed = true;\n        }\n    }\n    if (removed) {\n        setServers(endpoints);\n    }\n    return removed;\n}", "CodeBleu_score": 56.37506409127197}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t    if (StringUtils.isBlank(serverUrl)) {\n        return false;\n    }\n    List<GiteaServer> endpoints = new ArrayList<>(getServers());\n    for (ListIterator<GiteaServer> iterator = endpoints.listIterator(); iterator.hasNext(); ) {\n        GiteaServer endpoint = iterator.next();\n        if (endpoint.getServerUrl().equals(serverUrl)) {\n            iterator.remove();\n        }\n    }\n    setServers(endpoints);\n    return true;\n}", "CodeBleu_score": 55.924588058712665}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t  Set<? extends Element> annotatedElements = roundEnv.getElementsAnnotatedWith(annotation);\n\n  for (Element e : annotatedElements) {\n    if (e.getKind() != ElementKind.CLASS) {\n      processingEnv.getMessager().printMessage(Kind.ERROR,\n        \\\"Only classes can be annotated with @\\\" + annotation.getSimpleName());\n      continue;\n    }\n\n    ConfigValue configValue = e.getAnnotation(ConfigValue.class);\n    String key = configValue.key();\n    String type = e.asType().toString();\n    String defaultValue = configValue.defaultValue();\n    boolean optional = configValue.optional();\n    String description = configValue.description();\n\n    descriptorElements.add(new ConfigElement(key, type, defaultValue, optional,\n      description));\n  }\n}", "CodeBleu_score": 34.61493206257631}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n        if (e.getKind() == ElementKind.FIELD) {\n            AnnotationMirror annotationMirror = e.getAnnotationMirrors().stream()\n                .filter(am -> am.getAnnotationType().asElement().getQualifiedName().toString().equals(annotation.getQualifiedName().toString()))\n                .findFirst()\n                .orElse(null);\n\n            if (annotationMirror != null) {\n                Map<String, AnnotationValue> values = Maps.newHashMap();\n                for (Map.Entry<? extends ExecutableElement, ? extends AnnotationValue> entry : annotationMirror.getElementValues().entrySet()) {\n                    values.put(entry.getKey().getSimpleName().toString(), entry.getValue());\n                }\n\n                String type = e.asType().toString();\n                String name = values.get(\"name\").getValue().toString();\n                String description = values.get(\"description\").getValue().toString();\n                String defaultValue = values.get(\"defaultValue\").getValue().toString();\n\n                descriptorElements.add(new ConfigElement(name, description, defaultValue, type));\n            }\n        }\n    }\n}", "CodeBleu_score": 31.886462936906877}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\t    for (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n        ConfigValue configValue = e.getAnnotation(ConfigValue.class);\n        ConfigElement configElement = new ConfigElement(configValue.value(), e.asType().toString());\n        descriptorElements.add(configElement);\n    }\n}", "CodeBleu_score": 32.04290051565741}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  String targetAnnotationName = annotationClass.getName().replace(\"$\", \".\");\n\n  for (TypeElement annotation : annotations) {\n    String annotationName = annotation.getQualifiedName().toString();\n\n    if (annotationName.equals(targetAnnotationName) || annotationName.startsWith(targetAnnotationName + \"$\")) {\n      return annotation;\n    }\n  }\n\n  return null;\n}", "CodeBleu_score": 37.97464882916427}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t  for (TypeElement annotation : annotations) {\n    String qualifiedName = annotation.getQualifiedName().toString();\n    String targetQualifiedName = annotationClass.getName().replace(\"$\", \".\");\n    if (qualifiedName.equals(targetQualifiedName)) {\n      return annotation;\n    }\n  }\n  return null;\n}", "CodeBleu_score": 44.59596689827791}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\t    String annotationClassName = annotationClass.getName();\n\n    for (TypeElement annotation : annotations) {\n        String qualifiedName = annotation.getQualifiedName().toString();\n\n        if (qualifiedName.replace('$', '.').equals(annotationClassName)) {\n            return annotation;\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 41.15068953827654}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\"employee\": employee, \"docstatus\": 1, \"status\": [\"not in\", [\"Cancelled\"]]}\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"leave_approver\"] = [\"not in\", [employee]]\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\"]]\n\n    if approver_id:\n        filters[\"leave_approver\"] = approver_id\n\n    workflow_state_field = get_workflow_state_field(\"Leave Application\")\n    if workflow_state_field:\n        filters[workflow_state_field] = [\"not in\", [\"Cancelled\"]]\n\n    return filters\n\n", "CodeBleu_score": 30.90564851741532}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n        \"employee\": employee,\n        \"docstatus\": 1,\n        \"leave_type\": [\"not in\", [\"Leave Without Pay\", \"Compensatory Leave\"]],\n    }\n\n    if for_approval:\n        filters[\"status\"] = \"Open\"\n        filters[\"leave_approver\"] = [\"not in\", [employee]]\n    else:\n        filters[\"status\"] = [\"not in\", [\"Cancelled\"]]\n\n    if approver_id:\n        filters[\"leave_approver\"] = approver_id\n\n    if workflow_state_field := get_workflow_state_field(\"Leave Application\"):\n        filters[workflow_state_field] = [\"not in\", [\"Cancelled\"]]\n\n    return filters\n\n", "CodeBleu_score": 28.581148234003834}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n\n    filters = {\n\t\t\\\"employee\\\": employee,\n\t\t\\\"docstatus\\\": 1,\n\t}\n\n    if for_approval:\n        filters.update(\n            {\n\t\t\t\t\\\"status\\\": \\\"Pending Approval\\\",\n\t\t\t\t\\\"name\\\": [\\\"not in\\\", [\\\"%s\\\" % frappe.session.user]]\n\t\t\t}\n        )\n    else:\n        filters.update(\n            {\n\t\t\t\t\\\"status\\\": [\\\"not in\\\", [\\\"Cancelled\\\"]],\n\t\t\t\t\\\"name\\\": [\\\"not in\\\", [\\\"%s\\\" % frappe.session.user]]\n\t\t\t}\n        )\n\n    if approver_id:\n        filters.update(\n            {\n\t\t\t\t\\\"leave_approver\\\": approver_id,\n\t\t\t}\n        )\n\n    workflow_state_field = get_workflow_state_field(\"Leave Application\")\n    if workflow_state_field:\n        filters.update(\n            {\n\t\t\t\tworkflow_state_field: [\"not in\", [\\\"Cancelled\\\"]]\n\t\t\t}\n        )\n    else:\n        filters.update(\n            {\n\t\t\t\t\\\"status\\\": [\"not in\", [\\\"Cancelled\\\"]]\n\t\t\t}\n        )\n\n    return filters\n\n", "CodeBleu_score": 26.332583231970574}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    from datetime import datetime\n\n    today = datetime.now().date()\n    leave_details = get_leave_details(employee, today)\n\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        if leave_type not in leave_balance_map:\n            leave_balance_map[leave_type] = {\n                \"allocated\": 0.0,\n                \"balance\": 0.0,\n            }\n        leave_balance_map[leave_type][\"allocated\"] += leave_detail.total_leaves_allocated\n        leave_balance_map[leave_type][\"balance\"] += leave_detail.total_leaves_allocated\n\n    return leave_balance_map\n\n", "CodeBleu_score": 38.589209771928466}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_type, leave_info in leave_details.items():\n        allocated_leaves = leave_info.get(\"allocated_leaves\", 0)\n        balance_leaves = leave_info.get(\"balance_leaves\", 0)\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": allocated_leaves,\n            \"balance_leaves\": balance_leaves,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 43.693105890556616}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    today = getdate()\n    leave_details = get_leave_details(employee, today)\n    leave_balance_map = {}\n    for leave_type, leave_type_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated\": leave_type_details.allocated,\n            \"balance\": leave_type_details.balance,\n        }\n    return leave_balance_map\n\n", "CodeBleu_score": 41.4416720887572}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.db.get_list(\n        \"Holiday\",\n        filters={\"parent\": holiday_list, \"weekly_off\": 0},\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html_tags(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 35.413734915595015}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\"parent\": holiday_list, \"weekly_off\": 0},\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = frappe.utils.strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 36.214581204811466}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\n            \"parent\": holiday_list,\n            \"parentfield\": \"holidays\",\n            \"weekly_off\": 0,\n        },\n        fields=[\"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday.description)\n\n    return holidays\n\n", "CodeBleu_score": 36.67205953398166}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    hr_settings = frappe.get_doc(\"HR Settings\")\n    if not hr_settings.stop_birthday_reminders or not hr_settings.send_reminders:\n        return\n    if hr_settings.reminders_frequency != \"Weekly\":\n        return\n    if not hr_settings.reminders_days_before:\n        return\n    send_reminders(hr_settings, \"weekly\")\n\n", "CodeBleu_score": 18.36757141768031}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    hr_settings = frappe.get_doc(\"HR Settings\")\n    if hr_settings.stop_reminders:\n        return\n    if not hr_settings.send_reminders:\n        return\n    if hr_settings.reminders_frequency != \"Weekly\":\n        return\n    if not hr_settings.reminders_days_before:\n        return\n    if not hr_settings.reminder_email_to:\n        return\n\n    send_reminders(hr_settings, \"weekly\")\n\n", "CodeBleu_score": 16.662083948446885}, {"code": "def send_reminders_in_advance_weekly()\n\t\n\n    hr_settings = frappe.get_doc(\"HR Settings\")\n\n    if not hr_settings.stop_birthday_reminders or not hr_settings.send_reminders:\n        return\n\n    if hr_settings.remind_in_advance_days != 7:\n        return\n\n    send_weekly_reminders()\n\n", "CodeBleu_score": 14.423364543764047}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t\n    self.self_appraisal_score = 0\n    total_weightage = 0\n    for entry in self.self_ratings:\n        entry.score_earned = flt(entry.rating) * flt(entry.per_weightage) / 100\n        self.self_appraisal_score += flt(entry.score_earned)\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(\n        self.self_appraisal_score, self.precision(\"self_appraisal_score\")\n    )\n\n", "CodeBleu_score": 34.39119707223352}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_weightage, total = 0, 0\n\n    for entry in self.self_ratings:\n        entry.score = flt(entry.rating) * flt(entry.per_weightage) / 100\n        total += flt(entry.score)\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_score = flt(total, self.precision(\"self_score\"))\n\n", "CodeBleu_score": 37.14728739538962}, {"code": "def calculate_self_appraisal_score(self)\n\t\n    total_weightage, total = 0, 0\n    for entry in self.self_ratings:\n        entry.score_earned = flt(entry.rating) * flt(entry.per_weightage) / 100\n        total += flt(entry.score_earned)\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2) != 100.0:\n        frappe.throw(\n            _(\"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\").format(\n                total_weightage\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_score = flt(total, self.precision(\"self_score\"))\n\n", "CodeBleu_score": 36.88329038107062}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.calculate_final_score_using_formula:\n        formula = appraisal_cycle.formula\n        formula = formula.replace(\"{total_score}\", str(self.total_score))\n        formula = formula.replace(\"{avg_feedback_score}\", str(self.avg_feedback_score))\n        formula = formula.replace(\"{self_score}\", str(self.self_score))\n\n        # sanitize formula\n        formula = re.sub(r\"[^0-9+\\-*/().,]\", \"\", formula)\n\n        try:\n            self.final_score = flt(eval(formula), self.precision(\"final_score\"))\n        except Exception:\n            frappe.throw(\n                _(\"Error evaluating formula: {0}\").format(formula),\n                title=_(\"Invalid Formula\"),\n            )\n    else:\n        self.final_score = flt(\n            (self.total_score + self.avg_feedback_score + self.self_score) / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 36.3561854975524}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.calculate_final_score_using_formula:\n        appraisal_cycle_doc = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n        formula = appraisal_cycle_doc.final_score_calculation_formula\n\n        # sanitize formula\n        formula = sanitize_formula(formula)\n\n        # evaluate formula\n        final_score = evaluate_formula(\n            formula,\n            {\n                \"total_score\": self.total_score,\n                \"avg_feedback_score\": self.avg_feedback_score,\n                \"self_score\": self.self_score,\n            },\n        )\n\n        self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n    else:\n        final_score = (\n            flt(self.total_score) + flt(self.avg_feedback_score) + flt(self.self_score)\n        ) / 3\n        self.final_score = flt(final_score, self.precision(\"final_score\"))\n\n", "CodeBleu_score": 49.802810939847774}, {"code": "def calculate_final_score(self)\n\t\n\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        # gather data\n        data = {\n            \"total_score\": self.total_score,\n            \"avg_feedback_score\": self.avg_feedback_score,\n            \"self_score\": self.self_score,\n        }\n\n        # sanitize formula\n        formula = appraisal_cycle.final_score_calculation_formula\n        formula = frappe.safe_eval(formula, None, data)\n\n        # evaluate formula\n        self.final_score = flt(frappe.eval(formula, None, data), self.precision(\"final_score\"))\n    else:\n        self.final_score = flt(\n            (\n                self.total_score + self.avg_feedback_score + self.self_score\n            )\n            / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 32.402403642353335}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.status == \"On Leave\":\n        leave_application = frappe.db.exists(\n            \"Leave Application\",\n            {\n                \"employee\": self.employee,\n                \"from_date\": (\"<=\", self.attendance_date),\n                \"to_date\": (\">=\", self.attendance_date),\n                \"docstatus\": 1,\n            },\n        )\n        if not leave_application:\n            frappe.throw(\n                _(\"Attendance cannot be marked for future dates unless the employee has been marked as On Leave\")\n            )\n    else:\n        if getdate(self.attendance_date) > getdate(nowdate()):\n            frappe.throw(\n                _(\"Attendance date can not be of future\"),\n                title=_(\"Invalid Attendance Date\"),\n            )\n\n    employee = frappe.get_doc(\"Employee\", self.employee)\n    if getdate(self.attendance_date) < getdate(employee.date_of_joining):\n        frappe.throw(\n            _(\"Attendance date can not be before employee's joining date\"),\n            title=_(\"Invalid Attendance Date\"),\n        )\n\n", "CodeBleu_score": 42.08553265080399}, {"code": "def validate_attendance_date(self)\n\t\n\n    if self.attendance_date and getdate(self.attendance_date) > getdate(nowdate()):\n        frappe.throw(_(\"Attendance can only be marked for today or earlier dates\"))\n\n    if self.attendance_date and self.status != \"On Leave\" and self.docstatus == 1:\n        if self.attendance_date < get_employee_joining_date(self.employee):\n            frappe.throw(\n                _(\"Attendance date can not be less than employee's joining date\")\n            )\n\n", "CodeBleu_score": 33.12311786233584}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > getdate():\n        if self.status != \"On Leave\":\n            frappe.throw(\n                _(\"Attendance can only be marked for past dates\"),\n                OverlappingShiftAttendanceError,\n            )\n        else:\n            leave_application = frappe.db.exists(\n                \"Leave Application\",\n                {\n                    \"employee\": self.employee,\n                    \"from_date\": (\"<=\", self.attendance_date),\n                    \"to_date\": (\">=\", self.attendance_date),\n                    \"docstatus\": 1,\n                    \"status\": \"Approved\",\n                },\n            )\n            if not leave_application:\n                frappe.throw(\n                    _(\"Attendance can only be marked for past dates\"),\n                    OverlappingShiftAttendanceError,\n                )\n    if self.attendance_date < get_employee_joining_date(self.employee):\n        frappe.throw(\n            _(\"Attendance date cannot be earlier than employee's joining date\"),\n            OverlappingShiftAttendanceError,\n        )\n\n", "CodeBleu_score": 36.915193662099774}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t\n    # Check if a duplicate record exists\n    duplicate_record = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": [\"<\", 2],\n        },\n    )\n\n    if duplicate_record:\n        # If a duplicate record is found, raise an exception with a message indicating the employee, the date, and a link to the existing attendance record\n        frappe.throw(\n            _(\n                \"Attendance record for employee {0} already exists for date {1}. <a href='{2}'>Click here to view the existing record</a>\"\n            ).format(\n                frappe.bold(self.employee_name),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\"Attendance\", duplicate_record),\n            ),\n            DuplicateAttendanceError,\n        )\n\n", "CodeBleu_score": 40.67064177347884}, {"code": "def validate_duplicate_record(self)\n\t\n    # Check for duplicate attendance record\n    duplicate_attendance = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabAttendance`\n        WHERE employee = %s\n        AND attendance_date = %s\n        AND name != %s\n        AND docstatus != 2\n    \"\"\",\n        (self.employee, self.attendance_date, self.name),\n        as_dict=True,\n    )\n\n    if duplicate_attendance:\n        # If a duplicate is found, raise an exception with a message indicating the employee, the date, and a link to the existing attendance record\n        frappe.throw(\n            _(\n                \"Attendance for employee {0} already exists on {1}. <a href='{2}'>Click here to view the existing attendance record</a>\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                get_link_to_form(\"Attendance\", duplicate_attendance[0].name),\n            )\n        )\n\n", "CodeBleu_score": 36.814698833992246}, {"code": "def validate_duplicate_record(self)\n\t\n\n    # Check if an attendance record with the same employee and attendance date already exists\n    existing_attendance = frappe.db.exists(\n        \"Attendance\",\n        {\n            \"employee\": self.employee,\n            \"attendance_date\": self.attendance_date,\n            \"docstatus\": [\"<\", 2],\n        },\n    )\n\n    # If a duplicate is found, raise an exception with a message indicating the employee, the date, and a link to the existing attendance record\n    if existing_attendance:\n        link = get_link_to_form(\"Attendance\", existing_attendance)\n        frappe.throw(\n            _(\n                \"Attendance for Employee {0} already exists on {1} as {2}\"\n            ).format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n                link,\n            ),\n            DuplicateAttendanceError,\n        )\n\n", "CodeBleu_score": 42.98901902507669}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n\n    # Get message details\n    message_details = frappe.get_doc(\"Daily Work Summary Group\", self.daily_work_summary_group)\n\n    # Get email addresses of users in the specified group\n    emails = [\n        d.user\n        for d in frappe.get_all(\n            \"Daily Work Summary User\",\n            filters={\"parent\": self.daily_work_summary_group},\n            fields=[\"user\"],\n        )\n    ]\n\n    # Send email with summary using a template\n    frappe.sendmail(\n        recipients=emails,\n        subject=message_details.subject,\n        message=message_details.message,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 40.48357679011266}, {"code": "def send_summary(self)\n\t\n\n    # Get the message details\n    message_details = self.get_message_details()\n\n    # Get the email addresses of users in the specified group\n    emails = self.get_emails_from_group()\n\n    # Send an email with the summary using a template\n    self.send_email_with_template(emails, message_details)\n\n    # Update the status to \"Sent\"\n    self.status = \"Sent\"\n\n", "CodeBleu_score": 15.048605126793149}, {"code": "def send_summary(self)\n\t\n\n    # Get message details\n    message_details = frappe.db.get_value(\n        \"Daily Work Summary Message\",\n        {\"parent\": self.daily_work_summary_group},\n        [\"message\", \"subject\"],\n        as_dict=1,\n    )\n\n    # Get email addresses of users in the specified group\n    emails = frappe.db.get_all(\n        \"Daily Work Summary User\",\n        {\"parent\": self.daily_work_summary_group},\n        [\"user\"],\n        as_list=True,\n    )\n\n    # Send email with summary using a template\n    frappe.sendmail(\n        recipients=[row[0] for row in emails],\n        message=message_details.message,\n        subject=message_details.subject,\n        reference_doctype=self.doctype,\n        reference_name=self.name,\n    )\n\n    # Update status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 44.80762495103806}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    interview_round = frappe.get_doc(\"Interview Round\", self.interview_round)\n    if not cint(interview_round.allow_multiple_applicants):\n        existing_interview = frappe.db.exists(\n            \"Interview\",\n            {\n                \"job_applicant\": self.job_applicant,\n                \"interview_round\": self.interview_round,\n                \"docstatus\": [\"<\", 2],\n            },\n        )\n        if existing_interview:\n            job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n            frappe.throw(\n                _(\n                    \"Job Applicant {0} {1} is already appeared in Interview Round {2}. Please check the {3} for more details.\"\n                ).format(\n                    frappe.bold(self.job_applicant),\n                    frappe.bold(job_applicant.applicant_name),\n                    frappe.bold(interview_round.interview_round),\n                    get_link_to_form(\"Interview\", existing_interview),\n                ),\n                title=_(\"Duplicate Interview\"),\n            )\n\n", "CodeBleu_score": 46.650637440825705}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": (\"<\", 2),\n            \"name\": (\"not in\", [self.name]),\n        },\n    )\n    if interview:\n        frappe.throw(\n            _(\n                \"Job Applicant {0} is already appeared in Interview: {1} for the round {2}\"\n            ).format(\n                get_link_to_form(\"Job Applicant\", self.job_applicant),\n                get_link_to_form(\"Interview\", interview),\n                frappe.bold(self.interview_round),\n            ),\n            title=_(\"Duplicate Interview\"),\n        )\n\n", "CodeBleu_score": 34.96652507367084}, {"code": "def validate_duplicate_interview(self)\n\t\n    interview = frappe.db.exists(\n        \"Interview\",\n        {\n            \"job_applicant\": self.job_applicant,\n            \"interview_round\": self.interview_round,\n            \"docstatus\": (\"<\", 2),\n            \"name\": (\"not in\", [self.name]),\n        },\n    )\n    if interview:\n        job_applicant = frappe.get_doc(\"Job Applicant\", self.job_applicant)\n        frappe.throw(\n            _(\n                \"Job Applicant {0} {1} - {2} is already appeared in Interview: {3}\"\n            ).format(\n                job_applicant.applicant_name,\n                job_applicant.email_id,\n                job_applicant.mobile_no,\n                get_link_to_form(\"Interview\", interview),\n            ),\n            title=_(\"Duplicate Interview\"),\n        )\n\n", "CodeBleu_score": 37.244241733437086}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n\n    total_rating = 0\n    total_assessments = 0\n\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            total_assessments += 1\n\n    if total_assessments:\n        self.average_rating = flt(total_rating / total_assessments, 2)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 33.270976654814596}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    total_assessments = 0\n\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            total_assessments += 1\n\n    if total_assessments > 0:\n        self.average_rating = flt(total_rating / total_assessments, 2)\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 32.39921052539958}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    total_assessments = len(self.skill_assessments)\n\n    if total_assessments == 0:\n        self.average_rating = 0\n        return\n\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n\n    self.average_rating = flt(total_rating / total_assessments, 2)\n\n", "CodeBleu_score": 31.866711325372826}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n\n    doc = frappe._dict(doc)\n\n    # Initialize Interview document\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n\n    # Add interviewers to interview details\n    if doc.interviewers:\n        for interviewer in doc.interviewers:\n            interview.append(\n                \"interview_details\",\n                {\n                    \"interviewer\": interviewer.interviewer,\n                    \"interview_status\": \"Pending\",\n                },\n            )\n\n    return interview\n\n", "CodeBleu_score": 62.00282196925687}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n\n    doc = frappe._dict(doc)\n\n    if not doc.interview_round:\n        frappe.throw(\"Interview Round is mandatory\")\n\n    if not doc.designation:\n        frappe.throw(\"Designation is mandatory\")\n\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.interview_round\n    interview.designation = doc.designation\n\n    if doc.interviewers:\n        interview.set(\"interview_details\", [])\n        for i in doc.interviewers:\n            interview.append(\n                \"interview_details\",\n                {\n                    \"interviewer\": i.interviewer,\n                    \"interviewer_name\": i.interviewer_name,\n                    \"interview_status\": i.interview_status,\n                    \"interview_feedback\": i.interview_feedback,\n                },\n            )\n\n    return interview\n", "CodeBleu_score": 56.30728679132447}, {"code": "def create_interview(doc):\n\t\n    if isinstance(doc, str):\n        doc = json.loads(doc)\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    if doc.get(\"interviewers\"):\n        for i in doc.get(\"interviewers\"):\n            interview.append(\"interview_details\", {\"interviewer\": i})\n    return interview\n\n", "CodeBleu_score": 52.901650985862645}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.db.sql(\\\"\\\"\\\"", "CodeBleu_score": 15.318289284154957}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offer = frappe.db.sql(\n        \"\"\"\n        SELECT name\n        FROM `tabJob Offer`\n        WHERE designation=%s and company=%s and docstatus=1 and offer_date>=%s and offer_date<=%s\n        \"\"\",\n        (self.designation, self.company, from_date, to_date),\n        as_dict=1,\n    )\n    return job_offer\n\n", "CodeBleu_score": 33.5383932495718}, {"code": "def get_job_offer(self, from_date, to_date)\n\t\n    job_offers = frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"offer_date\": [\"between\", (from_date, to_date)],\n        },\n        pluck=\"name\",\n    )\n    return job_offers\n\n", "CodeBleu_score": 67.04672983484564}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_job_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", filters={**filters, \"status\": \"Accepted\"}\n    )\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100 if total_job_offers else 0\n    return frappe._dict(\n        {\n            \"value\": acceptance_rate,\n            \"fieldtype\": \"Percent\",\n        }\n    )", "CodeBleu_score": 54.75348213231182}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    total_job_offers = frappe.db.count(\"Job Offer\", filters={\"docstatus\": 1})\n    accepted_job_offers = frappe.db.count(\n        \"Job Offer\", filters={\"docstatus\": 1, \"status\": \"Accepted\"}\n    )\n\n    if total_job_offers == 0:\n        return 0, \"Percent\"\n\n    acceptance_rate = (accepted_job_offers / total_job_offers) * 100\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 31.477092528580503}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t\n    filters = {\"docstatus\": 1}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={**filters, \"status\": \"Accepted\"})\n    acceptance_rate = flt(accepted_offers / total_offers * 100, 2) if total_offers else 0\n    return acceptance_rate, \"Percent\"\n\n", "CodeBleu_score": 59.572304231727614}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\t\tif (!result.isSuccess())\n\t\t\treturn ResponseEntity.badRequest().body(result);\n\n\t\treturn ResponseEntity.ok(result);\n\t}", "CodeBleu_score": 68.88937081464456}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\t\tif (!result.isSuccess()) {\n\t\t\treturn ResponseEntity.badRequest().body(result);\n\t\t}\n\n\t\treturn ResponseEntity.ok(result);\n\t}", "CodeBleu_score": 67.27271748668824}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t        final Result result = employerService.register(employerForRegisterDto);\n\n        if (!result.isSuccess()) {\n            return ResponseEntity.badRequest().body(result);\n        }\n\n        return ResponseEntity.ok(result);\n    }", "CodeBleu_score": 65.26625135407212}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t    final Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n    if (companyStaff.isEmpty()) {\n        return new ErrorResult(Messages.notFound);\n    }\n    final Result result = BusinessRules.run(this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n    if (!result.isSuccess()) {\n        return result;\n    }\n    companyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n    companyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n    this.companyStaffDao.save(companyStaff.get());\n    return new SuccessResult(Messages.updated);\n}", "CodeBleu_score": 57.468175537957954}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff.isEmpty()) {\n\t\t\treturn new ErrorResult(Messages.notFound);\n\t\t}\n\t\tfinal Result businessRulesResult = BusinessRules.run(this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (!businessRulesResult.isSuccess()) {\n\t\t\treturn businessRulesResult;\n\t\t}\n\t\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff.get());\n\t\treturn new SuccessResult(Messages.updated);\n\t}", "CodeBleu_score": 60.10350360840601}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\t\t\tfinal Optional<CompanyStaff> companyStaff = this.companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\t\tif (companyStaff.isEmpty()) {\n\t\t\treturn new ErrorResult(Messages.notFound);\n\t\t}\n\t\tfinal Result businessRulesResult = BusinessRules.run(this.arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\t\tif (!businessRulesResult.isSuccess()) {\n\t\t\treturn businessRulesResult;\n\t\t}\n\t\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\t\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\t\tthis.companyStaffDao.save(companyStaff.get());\n\t\treturn new SuccessResult(Messages.updated);\n\t}", "CodeBleu_score": 60.10350360840601}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth()    String userId = getUserId();\n    String key = \"user:initAuth:unauth:url:\" + userId;\n    List<String> unauthorizedUrls = redisTemplate.opsForList().range(key, 0, -1);\n    return unauthorizedUrls != null && unauthorizedUrls.contains(getRequestUrl());\n}", "CodeBleu_score": 36.43516864591459}, {"code": "private boolean verifyInitAuth()    String userId = getUserId();\n    String key = \"user:\" + userId + \":unauthorized_menu_url\";\n    List<String> unauthorizedMenuUrls = redisTemplate.opsForList().range(key, 0, -1);\n    if (unauthorizedMenuUrls == null) {\n        return false;\n    }\n    String initialAuthUrl = \"/initial/auth\";\n    return unauthorizedMenuUrls.contains(initialAuthUrl);\n}", "CodeBleu_score": 39.81963208881869}, {"code": "private boolean verifyInitAuth()    String userId = getUserId();\n    String key = userId + \":initAuth\";\n    List<String> initAuth = redisTemplate.opsForList().range(key, 0, -1);\n    if (initAuth.contains(initialAuthUrl)) {\n        return true;\n    }\n    return false;\n}\n", "CodeBleu_score": 37.20788294079934}]}
