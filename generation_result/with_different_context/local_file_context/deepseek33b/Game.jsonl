{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t    var dllDir = Path.GetDirectoryName(typeof(DllLoader).Assembly.Location);\n    if (dllDir == null) {\n        throw new InvalidOperationException(\"Failed to get DLL directory.\");\n    }\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        var dllPath = Path.Combine(dllDir, dllName + \".dll\");\n        if (File.Exists(dllPath)) {\n            var moduleHandle = LoadLibrary(dllPath);\n            if (moduleHandle == IntPtr.Zero) {\n                throw new Win32Exception(Marshal.GetLastWin32Error());\n            }\n        } else {\n            throw new FileNotFoundException($\"DLL '{dllName}' not found in directory '{dllDir}'.\");\n        }\n    } else {\n        var dllPath = Path.Combine(dllDir, \"lib\" + dllName + \".so\");\n        if (File.Exists(dllPath)) {\n            var moduleHandle = dlopen(dllPath, RTLD_NOW);\n            if (moduleHandle == IntPtr.Zero) {\n                throw new Exception($\"Failed to load DLL '{dllName}': {dlerror()}\");\n            }\n        } else {\n            throw new FileNotFoundException($\"DLL '{dllName}' not found in directory '{dllDir}'.\");\n        }\n    }\n}", "CodeBleu_score": 26.357342916540027}, {"code": "public static void PreloadDll(string dllName){\n\t    var dllDir = Path.GetDirectoryName(typeof(DllLoader).Assembly.Location);\n    if (dllDir == null) {\n        throw new DirectoryNotFoundException(\"The directory of the DLL could not be found.\");\n    }\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        LoadLibrary(Path.Combine(dllDir, dllName + \".dll\"));\n    } else {\n        LoadLibrary(Path.Combine(dllDir, \"runtimes\", \"win-x64\", \"native\", dllName + \".dll\"));\n    }\n}", "CodeBleu_score": 29.58302846278251}, {"code": "public static void PreloadDll(string dllName){\n\t    var dllDir = Path.GetDirectoryName(typeof(DllLoader).Assembly.Location);\n    if (dllDir == null) {\n        throw new Exception(\"Failed to get DLL directory.\");\n    }\n\n    if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows)) {\n        LoadWin32Dll(dllName, dllDir);\n    } else {\n        LoadPosixDll(dllName, dllDir);\n    }\n}", "CodeBleu_score": 34.919200457234254}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (!assetsFileListHash.Contains(reader.FileName)) {\n        Logger.Info($\"Loading {reader.FullPath}\");\n        try {\n            var assetsFile = new SerializedFile(reader, this);\n            if (!string.IsNullOrEmpty(unityVersion)) {\n                assetsFile.SetVersion(unityVersion);\n            }\n            assetsFileList.Add(assetsFile);\n            assetsFileListHash.Add(assetsFile.fileName);\n\n            foreach (var sharedFile in assetsFile.m_Externals) {\n                var sharedFileName = sharedFile.fileName;\n\n                if (!importFilesHash.Contains(sharedFileName)) {\n                    var sharedFilePath = Path.Combine(Path.GetDirectoryName(originalPath), sharedFileName);\n                    if (!noexistFiles.Contains(sharedFilePath)) {\n                        if (!File.Exists(sharedFilePath)) {\n                            var findFiles = Directory.GetFiles(Path.GetDirectoryName(originalPath), sharedFileName, SearchOption.AllDirectories);\n                            if (findFiles.Length > 0) {\n                                sharedFilePath = findFiles[0];\n                            }\n                        }\n                        if (File.Exists(sharedFilePath)) {\n                            importFiles.Add(sharedFilePath);\n                            importFilesHash.Add(sharedFileName);\n                        } else {\n                            noexistFiles.Add(sharedFilePath);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Logger.Error($\"Error while reading assets file {reader.FullPath}\", e);\n            reader.Dispose();\n        }\n    } else {\n        Logger.Info($\"Skipping {reader.FullPath}\");\n        reader.Dispose();\n    }\n}", "CodeBleu_score": 57.687157582067364}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (!assetsFileListHash.Contains(reader.FileName)) {\n        Logger.Info($\"Loading {reader.FullPath}\");\n        try {\n            var assetsFile = new SerializedFile(reader, this);\n            if (unityVersion != null) {\n                assetsFile.version = unityVersion;\n            }\n            CheckStrippedVersion(assetsFile);\n            assetsFileList.Add(assetsFile);\n            assetsFileListHash.Add(assetsFile.fileName);\n\n            foreach (var sharedFile in assetsFile.m_Externals) {\n                var sharedFileName = sharedFile.fileName;\n\n                if (!importFilesHash.Contains(sharedFileName)) {\n                    var sharedFilePath = Path.Combine(Path.GetDirectoryName(originalPath), sharedFileName);\n                    if (!noexistFiles.Contains(sharedFilePath)) {\n                        if (!File.Exists(sharedFilePath)) {\n                            var findFiles = Directory.GetFiles(Path.GetDirectoryName(originalPath), sharedFileName, SearchOption.AllDirectories);\n                            if (findFiles.Length > 0) {\n                                sharedFilePath = findFiles[0];\n                            }\n                        }\n                        if (File.Exists(sharedFilePath)) {\n                            importFiles.Add(sharedFilePath);\n                            importFilesHash.Add(sharedFileName);\n                        }\n                        else {\n                            noexistFiles.Add(sharedFilePath);\n                        }\n                    }\n                }\n            }\n        }\n        catch (Exception e) {\n            Logger.Error($\"Error while reading assets file {reader.FullPath}\", e);\n            reader.Dispose();\n        }\n    }\n    else {\n        Logger.Info($\"Skipping {reader.FullPath}\");\n        reader.Dispose();\n    }\n}", "CodeBleu_score": 51.40947892320986}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\t    if (!assetsFileListHash.Contains(reader.FileName)) {\n        Logger.Info($\"Loading {originalPath}\");\n        try {\n            var assetsFile = new SerializedFile(reader, this);\n            if (!string.IsNullOrEmpty(unityVersion)) {\n                assetsFile.m_Version = unityVersion;\n            }\n            assetsFileList.Add(assetsFile);\n            assetsFileListHash.Add(assetsFile.fileName);\n\n            foreach (var sharedFile in assetsFile.m_Externals) {\n                var sharedFileName = sharedFile.fileName;\n\n                if (!importFilesHash.Contains(sharedFileName)) {\n                    var sharedFilePath = Path.Combine(Path.GetDirectoryName(reader.FullPath), sharedFileName);\n                    if (!noexistFiles.Contains(sharedFilePath)) {\n                        if (!File.Exists(sharedFilePath)) {\n                            var findFiles = Directory.GetFiles(Path.GetDirectoryName(reader.FullPath), sharedFileName, SearchOption.AllDirectories);\n                            if (findFiles.Length > 0) {\n                                sharedFilePath = findFiles[0];\n                            }\n                        }\n                        if (File.Exists(sharedFilePath)) {\n                            importFiles.Add(sharedFilePath);\n                            importFilesHash.Add(sharedFileName);\n                        } else {\n                            noexistFiles.Add(sharedFilePath);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            Logger.Error($\"Error while reading assets file {originalPath}\", e);\n            reader.Dispose();\n        }\n    } else {\n        Logger.Info($\"Skipping {originalPath}\");\n        reader.Dispose();\n    }\n}", "CodeBleu_score": 53.11049577231738}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\t    var name = Path.GetFileName(path);\n    foreach (var child in children) {\n        if (child.Name == name) {\n            if (child.Path == path) {\n                return child;\n            }\n        }\n    }\n    return null;\n}", "CodeBleu_score": 57.6462108470931}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    var name = Path.GetFileName(path);\n    foreach (var frame in children) {\n        if (frame.Name == name) {\n            if (frame.Path == path) {\n                return frame;\n            }\n        }\n    }\n    return null;\n}", "CodeBleu_score": 63.83053406817631}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\t    if (path == \"\") return this;\n\n    var name = path.Substring(0, path.IndexOf(\"/\"));\n    var child = children.Find(x => x.Name == name);\n    if (child == null) return null;\n\n    var rest = path.Substring(name.Length);\n    if (rest == \"\") return child;\n\n    return child.FindFrameByPath(rest);\n}", "CodeBleu_score": 35.12897600558953}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    var stream = new MemoryStream();\n    using (var gzip = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n        gzip.CopyTo(stream);\n    }\n    stream.Position = 0;\n    return new FileReader(stream);\n}", "CodeBleu_score": 71.3572899673505}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    var ms = new MemoryStream();\n    using (var zip = new GZipStream(reader.BaseStream, CompressionMode.Decompress)) {\n        zip.CopyTo(ms);\n    }\n    ms.Position = 0;\n    return new FileReader(ms);\n}", "CodeBleu_score": 64.30666084612733}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t    // Create a new MemoryStream to hold the compressed data\n    using (var compressedStream = new MemoryStream(reader.bytes)) {\n        // Create a new MemoryStream to hold the decompressed data\n        using (var decompressedStream = new MemoryStream()) {\n            // Create a new GZipStream to decompress the compressed data\n            using (var gzipStream = new GZipStream(compressedStream, CompressionMode.Decompress)) {\n                // Copy the decompressed data from the GZipStream to the decompressedStream\n                gzipStream.CopyTo(decompressedStream);\n            }\n            // Set the position of the decompressedStream to the beginning\n            decompressedStream.Position = 0;\n            // Create a new FileReader with the decompressed data\n            return new FileReader(decompressedStream.ToArray());\n        }\n    }\n}", "CodeBleu_score": 38.16479958957594}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    int stopSwitchIndex = -1;\n    for (int i = 0; i < switchForms.Length; i++) {\n        if (switchForms[i].Type == SwitchType.Simple && switchForms[i].PostCharSet == \"*\") {\n            stopSwitchIndex = i;\n            break;\n        }\n    }\n\n    for (int i = 0; i < commandStrings.Length; i++) {\n        string commandString = commandStrings[i];\n        if (ParseString(commandString, switchForms)) {\n            if (stopSwitchIndex >= 0 && _switches[stopSwitchIndex].ThereIs) {\n                break;\n            }\n        }\n        else {\n            NonSwitchStrings.Add(commandString);\n        }\n    }\n}", "CodeBleu_score": 45.76620810836008}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tforeach (string commandString in commandStrings) {\n\t\tif (commandString == \"--\") {\n\t\t\tbreak;\n\t\t}\n\t\tif (!ParseString(commandString, switchForms)) {\n\t\t\tNonSwitchStrings.Add(commandString);\n\t\t}\n\t}\n}", "CodeBleu_score": 26.885604631010047}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t    int stopSwitchIndex = -1;\n    for (int i = 0; i < switchForms.Length; i++) {\n        if (switchForms[i].Type == SwitchType.Simple && switchForms[i].IDString == kStopSwitchID) {\n            stopSwitchIndex = i;\n            break;\n        }\n    }\n    int nonSwitchIndex = 0;\n    for (int i = 0; i < commandStrings.Length; i++) {\n        if (stopSwitchIndex >= 0 && ParseString(commandStrings[i], switchForms)) {\n            nonSwitchIndex = i + 1;\n            break;\n        }\n        ParseString(commandStrings[i], switchForms);\n    }\n    for (int i = nonSwitchIndex; i < commandStrings.Length; i++) {\n        NonSwitchStrings.Add(commandStrings[i]);\n    }\n}", "CodeBleu_score": 42.091138952790494}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    reader = new ResourceReader(m_Texture2D.imageData);\n    m_Width = m_Texture2D.m_Width;\n    m_Height = m_Texture2D.m_Height;\n    m_TextureFormat = m_Texture2D.m_TextureFormat;\n    version = m_Texture2D.version;\n    platform = m_Texture2D.platform;\n    outPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 67.05092197618387}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    reader = new ResourceReader(m_Texture2D.imageData);\n    m_Width = m_Texture2D.m_Width;\n    m_Height = m_Texture2D.m_Height;\n    m_TextureFormat = m_Texture2D.m_TextureFormat;\n    version = new int[2] { m_Texture2D.m_CompleteImageSize, m_Texture2D.m_HeaderSize };\n    platform = m_Texture2D.m_Platform;\n    outPutSize = m_Texture2D.m_OutputSize;\n}", "CodeBleu_score": 58.37658412697715}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t    reader = new ResourceReader(m_Texture2D.image_data);\n    m_Width = m_Texture2D.m_Width;\n    m_Height = m_Texture2D.m_Height;\n    m_TextureFormat = m_Texture2D.m_TextureFormat;\n    version = m_Texture2D.version;\n    platform = m_Texture2D.platform;\n    outPutSize = m_Texture2D.outPutSize;\n}", "CodeBleu_score": 67.279069090138}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        var p = sp.GetArrayElementAtIndex(i);\n        result.Add(p.FindPropertyRelative(\\\"m_Name\\\").stringValue);\n    }\n    if (result.Count == 0) {\n        return s_ContentNothing.text;\n    }\n    s_Sb.Clear();\n    s_Sb.Append(result[0]);\n    for (int i = 1; i < result.Count; i++) {\n        s_Sb.Append(\\\", \\\").Append(result[i]);\n    }\n    return s_Sb.ToString();\n}", "CodeBleu_score": 46.53431313638546}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (int i = 0; i < sp.arraySize; i++) {\n        var ele = sp.GetArrayElementAtIndex(i);\n        var name = ele.FindPropertyRelative(\\\"m_Name\\\").stringValue;\n        if (!string.IsNullOrEmpty(name)) {\n            result.Add(name);\n        }\n    }\n    if (result.Count == 0) {\n        return s_ContentNothing.text;\n    }\n    s_Sb.Length = 0;\n    s_Sb.Append(result[0]);\n    for (int i = 1; i < result.Count; i++) {\n        s_Sb.Append(\\\", \\\");\n        s_Sb.Append(result[i]);\n    }\n    return s_Sb.ToString();\n}", "CodeBleu_score": 58.328821550947815}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t    result.Clear();\n    for (var i = 0; i < sp.arraySize; i++) {\n        var item = sp.GetArrayElementAtIndex(i);\n        var name = item.FindPropertyRelative(\\\"m_Name\\\").stringValue;\n        if (string.IsNullOrEmpty(name)) continue;\n            result.Add(name);\n        }\n\n        if (result.Count == 0) return s_ContentNothing.text;\n\n        s_Sb.Clear();\n        foreach (var name in result) {\n            if (s_Sb.Length > 0) s_Sb.Append(\\\", \\\");\n            s_Sb.Append(name);\n        }\n\n        return s_Sb.ToString();\n    }", "CodeBleu_score": 50.468831109314415}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    var name = prop.name;\n    var type = prop.type;\n    var active = s_ActiveNames.Contains(name);\n    if (add == active) return;\n\n    var content = new GUIContent(name, $\"{name} ({type})\");\n    menu.AddItem(content, add, x => {\n        var current = (SerializedProperty)x;\n        if (add) {\n            var index = current.arraySize;\n            current.InsertArrayElementAtIndex(index);\n            var p = current.GetArrayElementAtIndex(index);\n            p.FindPropertyRelative(\\\"m_Name\\\").stringValue = name;\n            p.FindPropertyRelative(\\\"m_Type\\\").intValue = (int)type;\n        } else {\n            for (var i = 0; i < current.arraySize; i++) {\n                var p = current.GetArrayElementAtIndex(i);\n                if (p.FindPropertyRelative(\\\"m_Name\\\").stringValue == name) {\n                    current.DeleteArrayElementAtIndex(i);\n                    break;\n                }\n            }\n        }\n\n        current.serializedObject.ApplyModifiedProperties();\n    }, sp);\n}", "CodeBleu_score": 38.3654181517225}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    if (add && s_ActiveNames.Contains(prop.Name)) return;\n    if (!add && !s_ActiveNames.Contains(prop.Name)) return;\n\n    menu.AddItem(new GUIContent(prop.Name), add, x => {\n        var current = (SerializedProperty)x;\n        if (add) {\n            current.arraySize++;\n            var p = current.GetArrayElementAtIndex(current.arraySize - 1);\n            p.FindPropertyRelative(\\\"m_Name\\\").stringValue = prop.Name;\n            p.FindPropertyRelative(\\\"m_Type\\\").intValue = (int)prop.Type;\n        } else {\n            for (var i = 0; i < current.arraySize; i++) {\n                var p = current.GetArrayElementAtIndex(i);\n                if (p.FindPropertyRelative(\\\"m_Name\\\").stringValue != prop.Name) continue;\n                current.DeleteArrayElementAtIndex(i);\n                break;\n            }\n        }\n        current.serializedObject.ApplyModifiedProperties();\n    }, sp);\n}", "CodeBleu_score": 45.69850441523457}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t    var name = prop.name;\n    var type = prop.type;\n    var active = s_ActiveNames.Contains(name);\n    if (add == active) return;\n\n    menu.AddItem(new GUIContent($\"{name} ({type})\"), false, x => {\n        var current = (SerializedProperty)x;\n        var index = current.arraySize;\n        current.arraySize++;\n        var element = current.GetArrayElementAtIndex(index);\n        var spName = element.FindPropertyRelative(\\\"m_Name\\\");\n        var spType = element.FindPropertyRelative(\\\"m_Type\\\");\n        spName.stringValue = name;\nspType.intValue = (int)type;\n\n        current.serializedObject.ApplyModifiedProperties();\n    }, sp);\n}", "CodeBleu_score": 33.07838995833152}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    var x = sp.FindPropertyRelative(\"x\");\n    var y = sp.FindPropertyRelative(\"y\");\n    var z = sp.FindPropertyRelative(\"z\");\n    var showXyzOrNot = showXyz || x.hasMultipleDifferentValues || y.hasMultipleDifferentValues || z.hasMultipleDifferentValues;\n\n    EditorGUILayout.BeginHorizontal();\n    EditorGUILayout.PropertyField(sp, GUIContent.none);\n    showXyzOrNot = GUILayout.Toggle(showXyzOrNot, s_ContentXyz, EditorStyles.miniButton, GUILayout.Width(60));\n    EditorGUILayout.EndHorizontal();\n\n    if (showXyzOrNot) {\n        EditorGUI.indentLevel++;\n        EditorGUILayout.PropertyField(x);\n        EditorGUILayout.PropertyField(y);\n        EditorGUILayout.PropertyField(z);\n        EditorGUI.indentLevel--;\n    } else {\n        EditorGUI.BeginChangeCheck();\n        EditorGUI.indentLevel++;\n        EditorGUILayout.PropertyField(x);\n        EditorGUI.indentLevel--;\n        if (EditorGUI.EndChangeCheck()) {\n            y.floatValue = x.floatValue;\n            z.floatValue = x.floatValue;\n        }\n    }\n\n    return showXyzOrNot;\n}", "CodeBleu_score": 56.61967935180968}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t", "CodeBleu_score": 1.5486635295409983}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t    if (sp.propertyType != SerializedPropertyType.Vector3 && sp.propertyType != SerializedPropertyType.Float) {\n        EditorGUILayout.PropertyField(sp);\n        return false;\n    }\n\n    var showXyzNew = showXyz;\n    var xyz = sp.vector3Value;\n    var xyzNew = xyz;\n    var xyzEqual = Mathf.Approximately(xyz.x, xyz.y) && Mathf.Approximately(xyz.x, xyz.z);\n\n    EditorGUILayout.BeginHorizontal();\n    if (xyzEqual) {\n        EditorGUILayout.PropertyField(sp, s_ContentX, GUILayout.Width(120));\n        showXyzNew = EditorGUILayout.Toggle(showXyz, s_ContentXyz, EditorStyles.miniButton, GUILayout.Width(60));\n    } else {\n        if (showXyz) {\n            EditorGUILayout.PropertyField(sp, GUILayout.Width(240));\n        } else {\n            EditorGUILayout.PropertyField(sp, s_ContentX, GUILayout.Width(120));\n            xyzNew.y = xyzNew.z = xyzNew.x;\n        }\n    }\n\n    EditorGUILayout.EndHorizontal();\n\n    if (showXyz != showXyzNew) {\n        showXyz = showXyzNew;\n        sp.vector3Value = xyzNew;\n    }\n\n    return showXyz;\n}", "CodeBleu_score": 43.35389801698118}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    for (int i = 0; i < s_Entries.Count; i++) {\n        MatEntry entry = s_Entries[i];\n        if (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n            entry.count++;\n            return entry.customMat;\n        }\n    }\n\n    Material material = new Material(baseMat);\n    material.mainTexture = texture;\n    material.hideFlags = HideFlags.DontSave;\n    MatEntry item = new MatEntry {\n        baseMat = baseMat,\n        customMat = material,\n        texture = texture,\n        id = id,\n        props = props,\n        count = 1\n    };\n    s_Entries.Add(item);\n    return material;\n}", "CodeBleu_score": 45.25974262247281}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t", "CodeBleu_score": 4.0916924613467}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t    for (var i = 0; i < s_Entries.Count; i++) {\n        var entry = s_Entries[i];\n        if (entry.baseMat == baseMat && entry.texture == texture && entry.id == id && entry.props == props) {\n            entry.count++;\n            return entry.customMat;\n        }\n    }\n\n    var customMat = new Material(baseMat);\n    customMat.mainTexture = texture;\n    var newEntry = new MatEntry {\n        baseMat = baseMat,\n        customMat = customMat,\n        texture = texture,\n        id = id,\n        props = props,\n        count = 1\n    };\n    s_Entries.Add(newEntry);\n    return customMat;\n}", "CodeBleu_score": 45.17137601257477}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) return;\n\n    for (var i = 0; i < s_Entries.Count; i++) {\n        var e = s_Entries[i];\n        if (e.customMat != customMat) continue;\n\n        if (--e.count <= 0) {\n            Object.DestroyImmediate(e.customMat);\n            e.baseMat = null;\n            e.texture = null;\n            e.id = 0;\n            e.props = 0;\n            s_Entries.RemoveAt(i);\n            //Debug.LogFormat(\">>>> ModifiedMaterial.Remove -> count = {0}\", s_Entries.Count);\n        }\n        return;\n    }\n}", "CodeBleu_score": 64.58751597062225}, {"code": "public static void Remove(Material customMat){\n\t    if (!customMat || !customMat.name.StartsWith(baseMat.name))\n        return;\n\n    MatEntry e;\n    for (var i = 0; i < s_Entries.Count; i++) {\n        e = s_Entries[i];\n        if (e.customMat != customMat)\n            continue;\n\n        --e.count;\n        if (e.count > 0)\n            return;\n\n        Object.DestroyImmediate(e.customMat);\n        e.customMat = null;\n        e.baseMat = null;\n        e.texture = null;\n        s_Entries.RemoveAt(i);\n        //Debug.LogFormat(\">>>> ModifiedMaterial.Remove -> count = {0}, mat = {1}\", s_Entries.Count, customMat);\n        return;\n    }\n}", "CodeBleu_score": 63.15017120209243}, {"code": "public static void Remove(Material customMat){\n\t    if (customMat == null) return;\n    MatEntry e;\n    for (var i = 0; i < s_Entries.Count; i++) {\n        e = s_Entries[i];\n        if (e.customMat != customMat) continue;\n        if (--e.count > 0) return;\n        Object.DestroyImmediate(e.customMat, false);\n        e.baseMat = null;\n        e.texture = null;\n        e.id = 0;\n        e.props = 0;\n        s_Entries.RemoveAt(i);\n        return;\n    }\n}", "CodeBleu_score": 60.26613870639515}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\t    var particles = new List<ParticleSystem>();\n    var renderers = new List<UIParticleRenderer>();\n\n    var rootParticleSystems = root.GetComponentsInChildren<ParticleSystem>();\n    var rootRenderers = root.GetComponentsInChildren<UIParticleRenderer>();\n\n    foreach (var ps in rootParticleSystems) {\n        if (ps.TryGetComponent<UIParticle>(out var uiParticle) && uiParticle == this) {\n            particles.Add(ps);\n        }\n    }\n\n    foreach (var r in rootRenderers) {\n        if (r.TryGetComponent<UIParticle>(out var uiParticle) && uiParticle == this) {\n            renderers.Add(r);\n        }\n    }\n\n    RefreshParticles(particles, renderers);\n}", "CodeBleu_score": 34.779874496856614}, {"code": "private void RefreshParticles(GameObject root){\n\t    var newParticles = new List<ParticleSystem>();\n    var children = root.GetComponentsInChildren<ParticleSystem>();\n    for (var i = 0; i < children.Length; i++) {\n        var p = children[i];\n        if (!p) continue;\n        if (!p.TryGetComponent<UIParticleRenderer>(out var renderer)) continue;\n        if (renderer.particleGroupId != groupId) continue;\n        newParticles.Add(p);\n    }\n\n    m_Particles = newParticles;\n    RefreshParticles(m_Particles);\n}", "CodeBleu_score": 36.407779046637565}, {"code": "private void RefreshParticles(GameObject root){\n\t    var ps = root.GetComponentsInChildren<ParticleSystem>(true);\n    var psList = ps.ToList();\n    psList.RemoveAll(p => !p || p.GetComponent<UIParticle>() != this);\n    psList.ForEach(p =>\n        {\n            var anim = p.textureSheetAnimation;\n            if (anim.enabled && anim.mode == ParticleSystemAnimationMode.Sprites)\n            {\n                anim.mode = ParticleSystemAnimationMode.Particles;\n            }\n        });\n    RefreshParticles(psList);\n}", "CodeBleu_score": 35.02553906548675}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder\n        .RegisterAssemblyTypes(currentAssembly)\n        .AssignableTo<IColorSwapManager>()\n        .As<IColorSwapManager>()\n        .AsSelf()\n        .SingleInstance();\n}", "CodeBleu_score": 72.67666966401639}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(currentAssembly)\n                    .AssignableTo<IColorSwapManager>()\n                    .As<IColorSwapManager>()\n                    .AsImplementedInterfaces()\n                    .AsSelf()\n                    .SingleInstance();\n}", "CodeBleu_score": 50.45778725117012}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\t    containerBuilder.RegisterAssemblyTypes(currentAssembly)\n                    .AssignableTo<IColorSwapManager>()\n                    .As<IColorSwapManager>()\n                    .AsSelf()\n                    .SingleInstance();\n}", "CodeBleu_score": 53.465519353406464}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    IpAddress = ipAddress;\n    ServerPort = port;\n\n    await initSerializerTask;\n\n    await CurrentState.ReserveAsync(this);\n }", "CodeBleu_score": 75.74499559763672}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t   IpAddress = ipAddress;\n   ServerPort = port;\n   await initSerializerTask;\n   await CurrentState.InitiateReservation(this);\n }", "CodeBleu_score": 76.0003344146751}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t    IpAddress = ipAddress;\n    ServerPort = port;\n    await initSerializerTask;\n    await CurrentState.ReserveAsync(this);\n}", "CodeBleu_score": 75.8256872207954}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    Validate.NotNull(sessionConnectionState);\n    Log.Info($\"Multiplayer session state transition: {CurrentState.CurrentStage} -> {sessionConnectionState.CurrentStage}\");\n    CurrentState = sessionConnectionState;\n    if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n        Log.Info($\"Player name: {PlayerSettings.PlayerName}\");\n    }\n    ConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(sessionConnectionState));\n}", "CodeBleu_score": 44.43968570770246}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    Validate.NotNull(sessionConnectionState);\n    Log.Debug($\"Transitioning from {CurrentState} to {sessionConnectionState}\");\n    ConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(CurrentState, sessionConnectionState));\n    CurrentState = sessionConnectionState;\n    if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n        Log.Info($\"Reserved player name: {PlayerSettings.PlayerName}\");\n    }\n}", "CodeBleu_score": 40.16518024106841}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\t    Validate.NotNull(sessionConnectionState);\n    Log.Debug($\"Transitioning connection state from {CurrentState.CurrentStage} to {sessionConnectionState.CurrentStage}\");\n    CurrentState = sessionConnectionState;\n    if (CurrentState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\n        Log.Info($\"Reserved player name: {PlayerSettings.PlayerName}\");\n    }\n    ConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedArgs(CurrentState.CurrentStage));\n}", "CodeBleu_score": 38.32899988934339}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    client.Start();\n    client.Connect(ipAddress, serverPort, \"\");\n    connectedEvent.WaitOne(2000);\n    connectedEvent.Reset();\n}", "CodeBleu_score": 47.04792508697945}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    await Task.Run(() => client.Start());\n    client.Connect(ipAddress, serverPort, \"\");\n    connectedEvent.WaitOne(2000);\n    connectedEvent.Reset();\n    IsConnected = true;\n}", "CodeBleu_score": 51.98579170146584}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t    client.Start();\n    client.Connect(ipAddress, serverPort, \"\");\n    connectedEvent.WaitOne(2000);\n    connectedEvent.Reset();\n}", "CodeBleu_score": 47.04792508697945}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\t    GameObject cyclops = NitroxEntity.RequireObjectFrom(id);\n    CyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\n    StartCoroutine(fireSuppressionButton.StartFireSuppression());\n    fireSuppressionButton.StartCooldown();\n}", "CodeBleu_score": 37.70998541026659}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    GameObject cyclops = NitroxEntity.RequireObjectFrom(id);\n    CyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\n    fireSuppressionButton.StartFireSuppression();\n    fireSuppressionButton.StartCooldown();\n}", "CodeBleu_score": 49.06549130054834}, {"code": "public void StartFireSuppression(NitroxId id){\n\t    GameObject cyclops = NitroxEntity.RequireObjectFrom(id);\n    CyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\n    fireSuppressionButton.StartFireSuppression();\n    fireSuppressionButton.StartCooldown();\n}", "CodeBleu_score": 49.06549130054834}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    NitroxId subRootId = subRoot.GetId();\n    NitroxId damagePointId = damagePoint.GetId();\n\n    // Check if the SubRoot ID is valid\n    if (subRootId == null) {\n        Log.Error(\"SubRoot ID is null\");\n        return;\n    }\n\n    // Check if the damage point ID is valid\n    if (damagePointId == null) {\n        Log.Error(\"Damage point ID is null\");\n        return;\n    }\n\n    // Create a repair packet with the relevant details\n    CyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRootId, damagePointId, repairAmount);\n\n    // Send the packet using the packet sender\n    packetSender.Send(packet);\n}", "CodeBleu_score": 45.18934047067975}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    if (subRoot.gameObject.TryGetComponent(out SubRootIdentifier subRootIdentifier) && subRootIdentifier.id.HasValue) {\n        NitroxId subRootId = subRootIdentifier.id.Value;\n        if (damagePoint.TryGetComponent(out LiveMixin liveMixin)) {\n            CyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRootId, damagePoint.id, liveMixin.health);\n            packetSender.Send(packet);\n        }\n    }\n}", "CodeBleu_score": 43.211345204654016}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t    NitroxId subRootId = subRoot.gameObject.GetComponent<NitroxEntity>().Id;\n    int damagePointIndex = -1;\n    CyclopsDamagePoint[] damagePoints = subRoot.damagePoints;\n    for (int i = 0; i < damagePoints.Length; i++) {\n        if (damagePoints[i] == damagePoint) {\n            damagePointIndex = i;\n            break;\n        }\n    }\n    if (damagePointIndex != -1) {\n        CyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRootId, damagePointIndex, repairAmount);\n        packetSender.Send(packet);\n    }\n}", "CodeBleu_score": 45.89292807008419}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t", "CodeBleu_score": 4.640678550233302}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\n        return;\n    }\n\n    if (subRoot.liveMixin.health < 0.01f) {\n        return;\n    }\n\n    CyclopsDamageInfoData? damageInfoData = null;\n    if (info.IsPresent()) {\n        damageInfoData = new CyclopsDamageInfoData(info.Get());\n    }\n\n    List<CyclopsDamagePointData> activeDamagePoints = subRoot.damageManager.damagePoints.Where(damagePoint => damagePoint.isActive).Select(damagePoint => new CyclopsDamagePointData(damagePoint)).ToList();\n    List<CyclopsFireData> activeFires = subRoot.fireManager.fires.Where(fire => fire.isActive).Select(fire => new CyclopsFireData(fire)).ToList();\n\n    CyclopsDamage packet = new CyclopsDamage(subId, subRoot.liveMixin.health, damageInfoData, activeDamagePoints, activeFires);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 42.45234103766615}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\t    if (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\n        return;\n    }\n\n    if (subRoot.liveMixin.health < 0.01f) {\n        return;\n    }\n\n    CyclopsDamageInfoData? damageInfoData = null;\n\n    if (info.HasValue) {\n        DamageInfo damageInfo = info.Value;\n        CyclopsDamageInfoData damageInfoData = new(damageInfo.damage, damageInfo.type, damageInfo.damagedBy);\n    }\n\n    CyclopsDamagePoint[] activeDamagePoints = subRoot.damageManager.damagePoints.Where(point => point.active).ToArray();\n    CyclopsDamageFireData[] activeFires = subRoot.fireSuppressionSystem.fires.Where(fire => fire.isActive).ToArray();\n\n    CyclopsDamage packet = new(subId, damageInfoData, activeDamagePoints, activeFires);\n    packetSender.Send(packet);\n}", "CodeBleu_score": 38.634909527407046}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n\n        if (TryGetEntityGameObject(entity.Id, out GameObject gameObject)) {\n            UnityEngine.Object.Destroy(gameObject);\n        }\n    }\n}", "CodeBleu_score": 55.37519595788035}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    foreach (Entity entity in dirtyEntities) {\n        RemoveEntityHierarchy(entity);\n        Optional<GameObject> gameObject = FindEntityGameObject(entity.Id);\n        if (gameObject.HasValue) {\n            Destroy(gameObject.Value);\n        }\n    }\n}", "CodeBleu_score": 72.64260915827124}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\t    List<NitroxId> dirtyEntityIds = dirtyEntities.Select(entity => entity.Id).ToList();\n    List<NitroxId> deletedEntitiesIds = new();\n    List<Entity> entitiesToSpawn = new();\n\n    foreach (Entity entity in dirtyEntities) {\n        if (entity.ParentId != null) {\n            dirtyEntityIds.Add(entity.ParentId.Value);\n        }\n\n        if (entity.ChildEntities != null) {\n            dirtyEntityIds.AddRange(entity.ChildEntities.Select(child => child.Id));\n        }\n    }\n\n    foreach (NitroxId dirtyEntityId in dirtyEntityIds) {\n        if (spawnedEntitiesById.TryGetValue(dirtyEntityId, out GameObject gameObject)) {\n            if (gameObject != null) {\n                Destroy(gameObject);\n            }\n\n            spawnedEntitiesById.Remove(dirtyEntityId);\n        }\n\n        if (pendingParentEntitiesByParentId.TryGetValue(dirtyEntityId, out List<Entity> pendingEntities)) {\n            entitiesToSpawn.AddRange(pendingEntities);\n            pendingParentEntitiesByParentId.Remove(dirtyEntityId);\n        }\n\n        deletedEntitiesIds.Add(dirtyEntityId);\n    }\n\n    if (entitiesToSpawn.Count > 0) {\n        EnqueueEntitiesToSpawn(entitiesToSpawn);\n    }\n\n    entityMetadataManager.RemoveMetadata(deletedEntitiesIds);\n}", "CodeBleu_score": 45.85622590291747}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n        pendingEntities = new List<Entity>();\n        pendingParentEntitiesByParentId[entity.ParentId] = pendingEntities;\n    }\n    pendingEntities.Add(entity);\n}", "CodeBleu_score": 83.50268962962255}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n        pendingEntities = new List<Entity>();\n        pendingParentEntitiesByParentId[entity.ParentId] = pendingEntities;\n    }\n    pendingEntities.Add(entity);\n}", "CodeBleu_score": 83.50268962962255}, {"code": "private void AddPendingParentEntity(Entity entity){\n\t    if (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\n        pendingEntities = new List<Entity>();\n        pendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities);\n    }\n    pendingEntities.Add(entity);\n}", "CodeBleu_score": 72.51236023025237}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t        if (cooldown == clawArm.pickupCooldown)\n        {\n            clawArm.action = ExosuitArmAction.START_USE_TOOL;\n        }\n        else if (cooldown == clawArm.punchCooldown)\n        {\n            clawArm.action = ExosuitArmAction.ALT_HIT;\n        }\n        else\n        {\n            Log.Error($\\\"Unknown cooldown {cooldown} for claw arm {clawArm.armType}\\\");\n            return;\n        }\n\n        BroadcastArmAction(clawArm);\n    }", "CodeBleu_score": 42.95879830013591}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t    ExosuitArmAction action = ExosuitArmAction.NO_ACTION;\n\n    if (cooldown == clawArm.pickupCooldownTime) {\n        action = ExosuitArmAction.START_USE_TOOL;\n    } else if (cooldown == clawArm.punchCooldownTime) {\n        action = ExosuitArmAction.ALT_HIT;\n    } else {\n        Log.Error($\\\"Invalid cooldown time for claw use: {cooldown}\\\");\n    }\n\n    BroadcastArmAction(clawArm, action);\n}", "CodeBleu_score": 45.56955158180666}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t        ExosuitArmAction action = ExosuitArmAction.NONE;\n\n        if (cooldown == clawArm.pickupCooldown) {\n            action = ExosuitArmAction.START_USE_TOOL;\n        }\n        else if (cooldown == clawArm.punchCooldown) {\n            action = ExosuitArmAction.ALT_HIT;\n        }\n        else {\n            Log.Error($\\\"Invalid cooldown time for ExosuitClawArm: {cooldown}\\\");\n        }\n\n        BroadcastArmAction(clawArm, action);\n    }", "CodeBleu_score": 48.67254524201685}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (!gameObject.TryGetIdOrWarn(out NitroxId itemId)) {\n        return;\n    }\n\n    if (!parent.TryGetIdOrWarn(out NitroxId parentId)) {\n        return;\n    }\n\n    if (!entityMetadataManager.TryGetMetadata(parentId, out EntityMetadata metadata)) {\n        Log.Error($\"Could not find metadata for {parent.name}\");\n        return;\n    }\n\n    InstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity(itemId, parentId, techType, metadata);\n\n    if (packetSender.Send(new EntitySpawnedByClient(installedBatteryEntity))) {\n        Log.Debug($\"Sent: Added battery {techType} to entity {parent.GetFullHierarchyPath()}\");\n    }\n}", "CodeBleu_score": 65.45405583405335}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (!gameObject.TryGetIdOrWarn(out NitroxId id)) {\n        return;\n    }\n    if (!parent.TryGetIdOrWarn(out NitroxId parentId)) {\n        return;\n    }\n\n    EntityMetadata entityMetadata = entityMetadataManager.GetEntityMetadata(id);\n    InstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity(techType, parentId, id, entityMetadata.Position, entityMetadata.Rotation, entityMetadata.Level, entityMetadata.Health);\n    packetSender.Send(new EntitySpawnedByClient(installedBatteryEntity));\n}", "CodeBleu_score": 64.76772531272496}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t    if (!gameObject.TryGetIdOrWarn(out NitroxId itemId)) {\n        return;\n    }\n\n    if (!parent.TryGetIdOrWarn(out NitroxId parentId)) {\n        return;\n    }\n\n    EntityMetadata entityMetadata = entityMetadataManager.GetEntityMetadata(parentId);\n    if (!entityMetadata.TryGetComponent<InstalledBatteryMetadata>(out InstalledBatteryMetadata installedBatteryMetadata)) {\n        Log.Error($\"Could not find InstalledBatteryMetadata for entity with id {parentId}\");\n        return;\n    }\n\n    InstalledBatteryEntity installedBatteryEntity = new InstalledBatteryEntity(itemId, parentId, techType, installedBatteryMetadata.Amount);\n    packetSender.Send(new EntitySpawnedByClient(installedBatteryEntity));\n}", "CodeBleu_score": 59.11598473182894}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    if (gameObject.TryGetComponent(out RemotePlayerView remotePlayerView)) {\n        remotePlayerView.StopControl();\n    }\n\n    NitroxId id = gameObject.GetId();\n    if (id == null) {\n        id = new NitroxId();\n        gameObject.SetId(id);\n    }\n\n    // Stop entity position broadcasting\n    entities.StopTrackingEntity(id);\n\n    // Convert to inventory item\n    InventoryItem inventoryItem = InventoryItem.Create(techType, id);\n\n    // Mark as spawned\n    inventoryItem.SpawnedByServer = true;\n\n    // Log pickup\n    Log.Info($\"Item picked up: {techType}\");\n\n    // Create pickup packet\n    PickupItem pickupItem = new PickupItem(inventoryItem.itemId);\n\n    // Send pickup packet\n    packetSender.Send(pickupItem);\n\n    // Reset picking up object\n    PickingUpObject = null;\n}", "CodeBleu_score": 48.29962937454203}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    gameObject.RemoveRemoteControl();\n    NitroxId id = gameObject.GetId();\n    if (id == null) {\n        id = new NitroxId();\n        gameObject.SetId(id);\n    }\n    gameObject.StopBroadcastingEntityPosition();\n    InventoryItem inventoryItem = InventoryItem.CreateFrom(gameObject, techType);\n    gameObject.GetComponent<Entity>().SetSpawned(true);\n    Log.Debug($\"Picked up item {techType} with id {id}\");\n    PickupItem pickupItem = new PickupItem(id);\n    packetSender.Send(pickupItem);\n    PickingUpObject = null;\n}", "CodeBleu_score": 45.66515237925054}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t    PickingUpObject = gameObject;\n    gameObject.RemoveRemoteControl();\n\n    NitroxId id = gameObject.GetId();\n    if (id == null) {\n        id = NitroxId.NewId();\n    }\n\n    gameObject.StopBroadcastingEntityPosition();\n    gameObject.ConvertToInventoryItem(techType);\n    gameObject.MarkAsSpawned();\n\n    Log.Debug(\"Item picked up: \" + gameObject.name + \" (\" + techType + \")\");\n\n    PickupItem pickupItem = new PickupItem(id, techType);\n    packetSender.Send(pickupItem);\n\n    PickingUpObject = null;\n}", "CodeBleu_score": 43.616332720450025}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    string classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n    TechTag techTag = gameObject.GetComponent<TechTag>();\n    TechType techType = (techTag) ? techTag.type : TechType.None;\n    EntityMetadata? metadataOrNull = metadata.OrNull();\n    List<Entity> childrenEntities = EntitySpawner.GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n    Player player = Player.main;\n    NitroxId playerId = NitroxEntity.GetIdOrGenerateNew(player.gameObject);\n    InventoryItemEntity inventoryItemEntity = new InventoryItemEntity(id, classId, techType.ToDto(), metadataOrNull, playerId, childrenEntities);\n    if (techType == TechType.Battery && player.HasBattery(techType)) {\n        inventoryItemEntity.BatteryCharge = player.GetBatteryCharge(techType);\n    }\n    return inventoryItemEntity;\n}", "CodeBleu_score": 60.03568797333192}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    string classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n    TechType techType = gameObject.GetComponent<TechType>();\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n    List<Entity> childrenEntities = EntitySpawner.GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n    NitroxId playerId = NitroxEntity.GetIdOrGenerateNew(Player.main.gameObject);\n\n    InventoryItemEntity inventoryItemEntity = new InventoryItemEntity(gameObject.transform.ToLocalDto(), 0, classId, false, id, techType.ToDto(), metadata.OrNull(), playerId, childrenEntities);\n\n    if (gameObject.TryGetComponent(out EnergyMixin energyMixin)) {\n        inventoryItemEntity.BatteryCharge = energyMixin.charge;\n    }\n\n    return inventoryItemEntity;\n}", "CodeBleu_score": 59.45210630282234}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t    NitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n    string classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\n    TechType techType = gameObject.GetComponent<TechType>();\n    Optional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n    List<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n    Player player = Player.main;\n    NitroxId playerId = player.GetNitroxId();\n\n    InventoryItemEntity inventoryItemEntity = new(\n        gameObject.transform.ToWorldDto(),\n        0,\n        classId,\n        true,\n        id,\n        techType.ToDto(),\n        metadata.OrNull(),\n        playerId,\n        childrenEntities\n    );\n\n    // If the item is a battery, we need to populate the battery data in the InventoryItemEntity\n    if (techType == TechType.Battery) {\n        Battery battery = gameObject.GetComponent<Battery>();\n        inventoryItemEntity.BatteryData = new(battery.charge, battery.capacity);\n    }\n\n    return inventoryItemEntity;\n}", "CodeBleu_score": 60.286089148802446}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t", "CodeBleu_score": 2.6268543678398504}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n        this.packetSender = packetSender;\n        this.throttledPacketSender = throttledPacketSender;\n\n        body = new Lazy<GameObject>(() => Player.main.gameObject);\n        playerModel = new Lazy<GameObject>(() => Player.main.playerModel.gameObject);\n        bodyPrototype = new Lazy<GameObject>(() => Player.main.playerModel.bodyPrototype.gameObject);\n\n        Permissions = new Perms();\n    }", "CodeBleu_score": 63.53998989794618}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t    this.multiplayerSession = multiplayerSession;\n        this.packetSender = packetSender;\n        this.throttledPacketSender = throttledPacketSender;\n\n        body = new Lazy<GameObject>(() => Object.FindObjectOfType<Player>()?.gameObject);\n        playerModel = new Lazy<GameObject>(() => body.Value?.GetComponentInChildren<PlayerModel>()?.gameObject);\n        bodyPrototype = new Lazy<GameObject>(() => GameObject.Find(\\\"PlayerModelPrefab\\\"));\n\n        Permissions = Perms.PLAYER;\n    }", "CodeBleu_score": 66.96747899319658}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        Player.main.head.SetActive(true);\n        GameObject bodyPrototype = Object.Instantiate(Player.main.bodyPrototype);\n        bodyPrototype.GetComponent<Shadow>().shadowCastingMode = ShadowCastingMode.Off;\n        bodyPrototype.SetActive(false);\n        bodyPrototype.name = \"RemotePlayerPrototype\";\n        bodyPrototype.GetComponentInChildren<PlayerHeldItem>().RemoveHeldItem();\n        return bodyPrototype;\n    }\n}", "CodeBleu_score": 28.84061011850575}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure the player's head is visible.\n        Player.main.RequireGameObject(\"head\").SetActive(true);\n\n        // Instantiate a clone of the body prototype.\n        GameObject bodyPrototype = Object.Instantiate(Player.main.RequireGameObject(\"body\"));\n\n        // Reset the head's shadow casting mode.\n        bodyPrototype.RequireGameObject(\"head\").GetComponent<MeshRenderer>().shadowCastingMode = ShadowCastingMode.On;\n\n        // Deactivate and rename the clone.\n        bodyPrototype.SetActive(false);\n        bodyPrototype.name = \"RemotePlayerPrototype\";\n\n        // Remove items held in hand from the clone.\n        bodyPrototype.RequireGameObject(\"body_attach/hand_l\").GetComponent<HandRetarget>().target = null;\n        bodyPrototype.RequireGameObject(\"body_attach/hand_r\").GetComponent<HandRetarget>().target = null;\n\n        return bodyPrototype;\n    }\n}", "CodeBleu_score": 28.953835678246215}, {"code": "private GameObject CreateBodyPrototype{\n\t    get {\n        // Ensure the player's head is visible\n        Player.main.head.RequireComponent<Renderer>().shadowCastingMode = ShadowCastingMode.On;\n\n        // Instantiate a clone of the body prototype\n        GameObject bodyPrototype = Object.Instantiate(Player.main.bodyPrototype);\n\n        // Reset the head's shadow casting mode\n        Player.main.head.RequireComponent<Renderer>().shadowCastingMode = ShadowCastingMode.Off;\n\n        // Deactivate and rename the clone\n        bodyPrototype.SetActive(false);\n        bodyPrototype.name = \"RemotePlayerPrototype\";\n\n        // Remove items held in hand from the clone\n        bodyPrototype.RequireGameObject(\"hold_r\").DestroyAllChildren();\n        bodyPrototype.RequireGameObject(\"hold_l\").DestroyAllChildren();\n\n        return bodyPrototype;\n    }\n}", "CodeBleu_score": 30.673356528316614}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(TypeName);\n    bw.Write(Location);\n    bw.Write(Metadata);\n    bw.Write(Processes);\n    bw.Write(Dependencies);\n    bw.Write(Incompatibilities);\n    bw.Write(TargettedBepInExVersion);\n}", "CodeBleu_score": 16.60118163566689}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(TypeName);\n    bw.Write(Location);\n    bw.Write(Metadata);\n    bw.Write(Processes);\n    bw.Write(Dependencies);\n    bw.Write(Incompatibilities);\n    bw.Write(TargettedBepInExVersion);\n}", "CodeBleu_score": 16.60118163566689}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t    bw.Write(this.GetType().FullName);\n    bw.Write(this.Location);\n    bw.Write(this.Metadata);\n    bw.Write(this.Processes);\n    bw.Write(this.Dependencies);\n    bw.Write(this.Incompatibilities);\n    bw.Write(this.TargettedBepInExVersion);\n    bw.Write(this.TypeName);\n}", "CodeBleu_score": 17.175033517784573}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    var pluginType = pluginAssembly.GetLoadableTypes().FirstOrDefault(t => typeof(BasePlugin).IsAssignableFrom(t));\n    if (pluginType == null) {\n        Logger.Log(LogLevel.Error, \"Failed to find a loadable type in the plugin assembly\");\n        return null;\n    }\n\n    var pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n    PluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n\n    pluginInstance.Load();\n\n    return pluginInstance;\n}", "CodeBleu_score": 63.79468209248156}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    var pluginType = pluginAssembly.GetTypes().FirstOrDefault(t => typeof(BasePlugin).IsAssignableFrom(t));\n    if (pluginType == null) {\n        Logger.Log(LogLevel.Error, \"Plugin assembly does not contain a type that derives from BasePlugin\");\n        return null;\n    }\n\n    var pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n    PluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n\n    pluginInstance.Load();\n\n    return pluginInstance;\n}", "CodeBleu_score": 63.68835538348237}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t    var pluginType = pluginAssembly.GetLoadableTypes().FirstOrDefault(t => typeof(BasePlugin).IsAssignableFrom(t));\n    if (pluginType == null) {\n        Logger.Log(LogLevel.Error, \"Plugin type not found\");\n        return null;\n    }\n\n    var pluginInstance = (BasePlugin) Activator.CreateInstance(pluginType);\n    pluginInstance.LoadedAssembly = pluginAssembly;\n\n    PluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n\n    pluginInstance.Load();\n\n    return pluginInstance;\n}", "CodeBleu_score": 62.36743407958634}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod != null) return TrampolineMethod;\n    Prepare();\n    return GenerateTrampolineImpl(signature);\n}", "CodeBleu_score": 29.48594650745784}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod != null) return TrampolineMethod;\n    Prepare();\n    return GenerateTrampolineImpl(signature);\n}", "CodeBleu_score": 29.48594650745784}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\t    if (TrampolineMethod != null) return TrampolineMethod;\n\n    Prepare();\n\n    var trampoline = new NativeProxy(TrampolinePtr, signature);\n\n    TrampolineMethod = trampoline.Generate();\n\n    return TrampolineMethod;\n}", "CodeBleu_score": 48.82370060210428}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t    Stream? stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(LocalizationFilePrefix + code + \".json\");\n    if (stream == null) {\n        throw new NullReferenceException($\"Could not find localization file for language {code}\");\n    }\n\n    using (stream) {\n        return JsonSerializer.Deserialize<Dictionary<string, string>>(stream) ?? throw new JsonException($\"Could not deserialize localization file for language {code}\");\n    }\n}", "CodeBleu_score": 57.97262100466172}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\t\tstring resourceName = LocalizationFilePrefix + code + \\\".json\\\";\n\t\tusing (Stream? stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceName)) {\n\t\t\tif (stream == null) {\n\t\t\t\tthrow new NullReferenceException($\\\"Language file for language code {code} not found.\\\");\n\t\t\t}\n\t\t\tusing (StreamReader reader = new StreamReader(stream)) {\n\t\t\t\tstring json = reader.ReadToEnd();\n\t\t\t\tDictionary<string, string>? dictionary = JsonSerializer.Deserialize<Dictionary<string, string>>(json);\n\t\t\t\tif (dictionary == null) {\n\t\t\t\t\tthrow new JsonException($\\\"Failed to deserialize language file for language code {code}.\\\");\n\t\t\t\t}\n\t\t\t\treturn dictionary;\n\t\t\t}\n\t\t}\n\t}", "CodeBleu_score": 43.12271408232616}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tusing Stream? stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(LocalizationFilePrefix + code + \".json\");\n\tif (stream == null) {\n\t\tthrow new NullReferenceException($\"Language file for language code {code} not found.\");\n\t}\n\tusing StreamReader reader = new StreamReader(stream);\n\tstring json = reader.ReadToEnd();\n\ttry {\n\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(json) ?? throw new NullReferenceException($\"Language file for language code {code} is empty.\");\n\t}\n\tcatch (JsonException e) {\n\t\tthrow new JsonException($\"Language file for language code {code} is not valid JSON.\", e);\n\t}\n}", "CodeBleu_score": 53.564950479172204}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            expressionCount += this.Visit(node);\n        }\n    }\n\n    return expressionCount;\n}", "CodeBleu_score": 54.42863615399228}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            expressionCount += Visit(node);\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 52.20700309251778}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\t    int expressionCount = 0;\n    foreach (IParseTree node in nodes) {\n        if (node is ParserRuleContext) {\n            this.Visit(node);\n            expressionCount++;\n        }\n    }\n    return expressionCount;\n}", "CodeBleu_score": 49.78720302223539}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    var lineID = context.line_id()?.GetText();\n\n    if (lineID == null) {\n        throw new InvalidOperationException($\"Line is missing line ID: {context.GetText()}\");\n    }\n\n    var expressionCount = this.GenerateCodeForExpressionsInFormattedText(context.formatted_text().children);\n\n    if (this.trackingEnabled != null) {\n        this.compiler.Emit(OpCode.SetTrackingInfo, this.compiler.CurrentNode.LineID, this.compiler.CurrentNode.FileName);\n    }\n\n    this.compiler.Emit(OpCode.RunLine, lineID, expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 59.598110367209834}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // first, visit the line ID tag, and get the line ID\n    var lineID = this.Visit(context.line_id());\n\n    // now, visit all of the nodes in the formatted text, and generate code for any\n    // expressions in the formatted text.\n    int expressionCount = this.GenerateCodeForExpressionsInFormattedText(context.formatted_text().children);\n\n    // emit the RunLine opcode with the line ID and expression count\n    this.compiler.EmitOpcode(Opcode.RunLine, lineID, expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 33.84715533099805}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t    // generate code for any expressions in the formatted text\n    int expressionCount = this.GenerateCodeForExpressionsInFormattedText(context.formatted_text());\n\n    // get the line ID tag\n    string lineID = context.line_id().GetText();\n\n    // emit a RunLine opcode with the line ID and expression count\n    this.compiler.EmitOpcode(Opcode.RunLine, lineID, expressionCount);\n\n    return 0;\n}", "CodeBleu_score": 30.164405829964785}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var results = Enumerable.Empty<Diagnostic>();\n\n    foreach (var command in yarnFile.Commands) {\n        if (command.CommandName.StartsWith(\"<<\") || command.CommandName.StartsWith(\"<\")) {\n            continue;\n        }\n\n        if (yarnFile.KnownCommands.All(c => c.CommandName != command.CommandName)) {\n            var diagnostic = new Diagnostic {\n                Severity = DiagnosticSeverity.Warning,\n                Code = \"YL0001\",\n                Message = $\"Unknown command: {command.CommandName}\",\n                Range = new Range {\n                    Start = new Position {\n                        Line = command.LineNumber,\n                        Character = command.CharacterNumber\n                    },\n                    End = new Position {\n                        Line = command.LineNumber,\n                        Character = command.CharacterNumber + command.CommandName.Length\n                    }\n                },\n                Data = JObject.FromObject(new {\n                    commandName = command.CommandName,\n                    lineNumber = command.LineNumber,\n                    characterNumber = command.CharacterNumber\n                })\n            };\n\n            results = results.Append(diagnostic);\n        }\n    }\n\n    return results;\n}", "CodeBleu_score": 26.52475138020842}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    var results = Enumerable.Empty<Diagnostic>();\n\n    if (yarnFile.Commands != null) {\n        foreach (var command in yarnFile.Commands) {\n            if (command.CommandName != null && !yarnFile.Commands.ContainsKey(command.CommandName)) {\n                var diagnostic = new Diagnostic {\n                    Severity = DiagnosticSeverity.Warning,\n                    Code = \"YL0001\",\n                    Message = $\"Unknown command: {command.CommandName}\",\n                    Source = \"YarnLanguageServer\",\n                    Range = new Range {\n                        Start = new Position { Line = command.LineNumber - 1, Character = command.CharacterNumber },\n                        End = new Position { Line = command.LineNumber - 1, Character = command.CharacterNumber + command.CommandName.Length }\n                    },\n                    Data = new JObject {\n                        { \"commandName\", command.CommandName }\n                    }\n                };\n                results = results.Append(diagnostic);\n            }\n        }\n    }\n\n    return results;\n}", "CodeBleu_score": 27.531613802709803}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t    return from command in yarnFile.Commands\n           where !yarnFile.KnownCommands.Contains(command.Name)\n           select new Diagnostic {\n               Message = $\"Unknown command '{command.Name}'\",\n               Severity = DiagnosticSeverity.Warning,\n               Code = \"yarn.unknownCommand\",\n               Data = new Dictionary<string, object> {\n                   { \"command\", command.Name },\n               },\n               Range = new Range {\n                   Start = new Position {\n                       Line = command.LineNumber - 1,\n                       Character = command.CharacterNumber,\n                   },\n                   End = new Position {\n                       Line = command.LineNumber - 1,\n                       Character = command.CharacterNumber + command.Name.Length,\n                   },\n               },\n           };\n}", "CodeBleu_score": 38.241921097972195}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = new DocumentSelector(\n            new DocumentFilter {\n                Pattern = \"**/*.yarn\"\n            }\n        ),\n        ResolveProvider = false,\n        CodeActionKinds = new[] {\n            CodeActionKind.QuickFix\n        }\n    };\n}", "CodeBleu_score": 54.85992099930053}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = YarnDocumentSelector.Instance,\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n    };\n}", "CodeBleu_score": 81.93881120010353}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t    return new CodeActionRegistrationOptions {\n        DocumentSelector = YarnDocumentSelector.Instance,\n        ResolveProvider = false,\n        CodeActionKinds = new Container<CodeActionKind>(CodeActionKind.QuickFix)\n    };\n}", "CodeBleu_score": 81.93881120010353}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out object value)) {\n        if (value is T typedValue) {\n            result = typedValue;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable {variableName} is not of type {typeof(T).Name}\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 54.30546174436771}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out var value)) {\n        if (value is T typedValue) {\n            result = typedValue;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable '{variableName}' is not of type {typeof(T).Name}\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 54.855572812454554}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t    if (variables.TryGetValue(variableName, out object value)) {\n        if (value is T t) {\n            result = t;\n            return true;\n        } else {\n            throw new ArgumentException($\"Variable {variableName} is not of type {typeof(T).Name}\");\n        }\n    } else {\n        result = default(T);\n        return false;\n    }\n}", "CodeBleu_score": 53.37367057957208}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\n    // Initialize the variable storage\n    VariableStorage = variableStorage;\n\n    // Initialize the library\n    Library = new Library();\n\n    // Initialize the virtual machine\n    vm = new VirtualMachine(VariableStorage);\n\n    // Import the standard library\n    Library.ImportStandardLibrary();\n\n    // Register functions for node visit tracking\n    vm.RegisterFunction(\"visited\", 1, (vm, arguments) =>\n    {\n        var nodeName = arguments[0].AsString;\n        var node = vm.Program.Nodes[nodeName];\n        return node.HasBeenVisited;\n    });\n    vm.RegisterFunction(\"visited_count\", 1, (vm, arguments) =>\n    {\n        var nodeName = arguments[0].AsString;\n        var node = vm.Program.Nodes[nodeName];\n        return node.VisitCount;\n    });\n\n    // Create a line parser\n    var lineParser = new LineParser(VariableStorage);\n\n    // Register marker processors for select, plural, and ordinal markers\n    lineParser.RegisterMarkerProcessor(new SelectMarkerProcessor());\n    lineParser.RegisterMarkerProcessor(new PluralMarkerProcessor());\n    lineParser.RegisterMarkerProcessor(new OrdinalMarkerProcessor());\n\n    // Set the line parser for the virtual machine\n    vm.LineParser = lineParser;\n}", "CodeBleu_score": 36.17564861524493}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t    this.VariableStorage = variableStorage;\n    this.Library = new Library();\n    this.vm = new VirtualMachine();\n    this.vm.Library = this.Library;\n    this.vm.VariableStorage = this.VariableStorage;\n    this.vm.LogDebugMessage = this.LogDebugMessage;\n    this.vm.LogErrorMessage = this.LogErrorMessage;\n    this.vm.LineHandler = this.LineHandler;\n    this.vm.OptionsHandler = this.OptionsHandler;\n    this.vm.CommandHandler = this.CommandHandler;\n    this.vm.NodeStartHandler = this.NodeStartHandler;\n    this.vm.NodeCompleteHandler = this.NodeCompleteHandler;\n    this.vm.DialogueCompleteHandler = this.DialogueCompleteHandler;\n    this.vm.PrepareForLinesHandler = this.PrepareForLinesHandler;\n    this.vm.LanguageCode = this.LanguageCode;\n    StandardLibrary.RegisterFunctions(this.Library);\n    this.vm.RegisterMarkerProcessor(\\\"select\\\", new SelectMarkerProcessor());\n    this.vm.RegisterMarkerProcessor(\\\"plural\\\", new PluralMarkerProcessor());\n    this.vm.RegisterMarkerProcessor(\\\"ordinal\\\", new OrdinalMarkerProcessor());\n    this.LineParser = new LineParser(this.vm);\n    this.LineParser.RegisterAttributeMarkerProcessor(this);\n}", "CodeBleu_score": 30.242819684371547}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < m_LoopListBankDataList.Count; i++) {\n        if (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 81.19939038228001}, {"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n        if (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 94.65735496647432}, {"code": "public int FindUniqueID(string UniqueID){\n\t    if (string.IsNullOrEmpty(UniqueID)) {\n        return -1;\n    }\n\n    for (int i = 0; i < m_LoopListBankDataList.Count; ++i) {\n        if (m_LoopListBankDataList[i].UniqueID == UniqueID) {\n            return i;\n        }\n    }\n\n    return -1;\n}", "CodeBleu_score": 94.65735496647432}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\t    LoopListBankData TempCustomData = new LoopListBankData();\n    TempCustomData.Content = newContent;\n    TempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n    m_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 89.02643750208648}, {"code": "public void AddContent(object newContent){\n\t    LoopListBankData TempCustomData = new LoopListBankData();\n    TempCustomData.Content = newContent;\n    TempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n    m_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 89.02643750208648}, {"code": "public void AddContent(object newContent){\n\t    LoopListBankData TempCustomData = new LoopListBankData();\n    TempCustomData.Content = newContent;\n    TempCustomData.UniqueID = System.Guid.NewGuid().ToString();\n    m_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 89.02643750208648}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    SetUniqueID(ClickUniqueID);\n    m_OnClick_Custom.AddListener(() => {\n        if (ClickObject != null) {\n            ClickObject.GetComponent<ScrollCellIndexCallbackBase>().ScrollCellIndex(idx, content, ClickUniqueID, ClickObject);\n        }\n    });\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \"_\" + idx;\n    }\n}", "CodeBleu_score": 48.289367982177765}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    m_UniqueID = ClickUniqueID;\n\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \"_\" + m_IndexID;\n    }\n}", "CodeBleu_score": 57.60364950259341}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\t    m_IndexID = idx;\n    m_Content = content;\n    m_UniqueID = ClickUniqueID;\n    if (m_IsUpdateGameObjectName) {\n        gameObject.name = m_PrefabName + \"_\" + m_IndexID;\n    }\n}", "CodeBleu_score": 57.60364950259341}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\t    int count = int.Parse(m_InputFieldSrollToCell_AddCount.text);\n    count = Mathf.Max(count, 1);\n\n    for (int i = 0; i < count; i++) {\n        m_ListBank.Add(Random.Range(0, 10));\n    }\n\n    m_InitOnStart.m_ScrollRect.totalCount = m_ListBank.Count;\n    m_InitOnStart.m_ScrollRect.RefreshCells();\n}", "CodeBleu_score": 46.75992297343138}, {"code": "private void OnButtonAddDataClickk(){\n\t    int count = 0;\n    int.TryParse(m_InputFieldSrollToCell_AddCount.text, out count);\n    if (count < 1)\n        count = 1;\n\n    for (int i = 0; i < count; ++i)\n        m_ListBank.Add(Random.Range(0, 10));\n\n    m_InitOnStart.m_ScrollRect.totalCount = m_ListBank.Count;\n    m_InitOnStart.m_ScrollRect.RefreshCells();\n}", "CodeBleu_score": 49.168429608468074}, {"code": "private void OnButtonAddDataClickk(){\n\t    int count = int.Parse(m_InputFieldSrollToCell_AddCount.text);\n    if (count < 1) {\n        count = 1;\n    }\n    for (int i = 0; i < count; i++) {\n        m_ListBank.Add(Random.Range(0, 10));\n    }\n    m_InitOnStart.m_ScrollRect.totalCount = m_ListBank.Count;\n    m_InitOnStart.m_ScrollRect.RefreshCells();\n}", "CodeBleu_score": 44.47411558370163}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t    if (deletedItemTypeStart > 0) {\n        for (int i = 0; i < deletedItemTypeStart; i++) {\n            prefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n        }\n        deletedItemTypeStart = 0;\n    }\n    if (deletedItemTypeEnd > 0) {\n        for (int i = m_Content.childCount - deletedItemTypeEnd; i < m_Content.childCount; i++) {\n            prefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n        }\n        deletedItemTypeEnd = 0;\n    }\n}", "CodeBleu_score": 61.23400099268683}, {"code": "protected override void ClearTempPool(){\n\t    if (m_Content.childCount != itemTypeStart + itemTypeEnd) {\n        Debug.LogError(\"LoopScrollRect: Content child count is not equal to itemTypeStart + itemTypeEnd\");\n        return;\n    }\n    if (deletedItemTypeStart > 0) {\n        for (int i = 0; i < deletedItemTypeStart; i++) {\n            RectTransform child = m_Content.GetChild(0) as RectTransform;\n            child.SetParent(null);\n            prefabSource.ReturnObject(child.gameObject);\n        }\n        deletedItemTypeStart = 0;\n    }\n    if (deletedItemTypeEnd > 0) {\n        for (int i = 0; i < deletedItemTypeEnd; i++) {\n            RectTransform child = m_Content.GetChild(m_Content.childCount - 1) as RectTransform;\n            child.SetParent(null);\n            prefabSource.ReturnObject(child.gameObject);\n        }\n        deletedItemTypeEnd = 0;\n    }\n}", "CodeBleu_score": 51.04867021031518}, {"code": "protected override void ClearTempPool(){\n\t    if (deletedItemTypeStart > 0) {\n        for (int i = 0; i < deletedItemTypeStart; i++) {\n            RectTransform deletedItem = m_Content.GetChild(0) as RectTransform;\n            prefabSource.ReturnObject(deletedItem.gameObject);\n        }\n        deletedItemTypeStart = 0;\n    }\n    if (deletedItemTypeEnd > 0) {\n        for (int i = 0; i < deletedItemTypeEnd; i++) {\n            RectTransform deletedItem = m_Content.GetChild(m_Content.childCount - 1) as RectTransform;\n            prefabSource.ReturnObject(deletedItem.gameObject);\n        }\n        deletedItemTypeEnd = 0;\n    }\n}", "CodeBleu_score": 57.60480739801772}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\n        return;\n    }\n    transform.localScale = newScale;\n    m_AnticipatedTransform.Scale = newScale;\n    if (CanCommitToTransform) {\n        m_AuthoritativeTransform.Scale = newScale;\n    }\n    m_PreviousAnticipatedTransform = m_AnticipatedTransform;\n    m_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\n    m_LastAnticipationTime = NetworkManager.LocalTime.Time;\n    m_SmoothDuration = 0;\n    m_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 80.63588690868546}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\n        return;\n    }\n    transform.localScale = newScale;\n    m_AnticipatedTransform.Scale = newScale;\n    if (CanCommitToTransform) {\n        m_AuthoritativeTransform.Scale = newScale;\n    }\n    m_PreviousAnticipatedTransform = m_AnticipatedTransform;\n    m_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\n    m_LastAnticipationTime = NetworkManager.LocalTime.Time;\n    m_SmoothDuration = 0;\n    m_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 80.63588690868546}, {"code": "public void AnticipateScale(Vector3 newScale){\n\t    if (NetworkManager.ShutdownInProgress || !NetworkManager.IsListening) {\n        return;\n    }\n    transform.localScale = newScale;\n    m_AnticipatedTransform.Scale = newScale;\n    if (CanCommitToTransform) {\n        m_AuthoritativeTransform.Scale = newScale;\n    }\n    m_PreviousAnticipatedTransform = m_AnticipatedTransform;\n    m_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\n    m_LastAnticipationTime = NetworkManager.LocalTime.Time;\n    m_SmoothDuration = 0;\n    m_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 80.63588690868546}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t    if (m_IsServer) {\n        for (int i = 0; i < m_AnimatorUpdates.Count; i++) {\n            m_NetworkAnimator.SendAnimationUpdateToClients(m_AnimatorUpdates[i]);\n        }\n\n        for (int i = 0; i < m_ParameterUpdates.Count; i++) {\n            m_NetworkAnimator.SendParameterUpdateToClients(m_ParameterUpdates[i]);\n        }\n\n        for (int i = 0; i < m_TriggerUpdates.Count; i++) {\n            m_NetworkAnimator.SendTriggerUpdateToClients(m_TriggerUpdates[i]);\n        }\n    } else {\n        if (m_AnimatorUpdates.Count > 0) {\n            m_NetworkAnimator.SendAnimationUpdateToServer(m_AnimatorUpdates);\n        }\n\n        if (m_ParameterUpdates.Count > 0) {\n            m_NetworkAnimator.SendParameterUpdateToServer(m_ParameterUpdates);\n        }\n\n        if (m_TriggerUpdates.Count > 0) {\n            m_NetworkAnimator.SendTriggerUpdateToServer(m_TriggerUpdates);\n        }\n    }\n\n    m_AnimatorUpdates.Clear();\n    m_ParameterUpdates.Clear();\n    m_TriggerUpdates.Clear();\n}", "CodeBleu_score": 43.265771353824384}, {"code": "private void FlushMessages(){\n\t    if (m_NetworkAnimator.IsClient) {\n        if (m_NetworkAnimator.Animator.updateMode == AnimatorUpdateMode.AnimatePhysics) {\n            m_NetworkAnimator.Animator.ApplyBuiltinRootMotion();\n        }\n        if (m_NetworkAnimator.Animator.isActiveAndEnabled) {\n            m_NetworkAnimator.Animator.Update(0);\n        }\n    }\n    if (m_NetworkAnimator.IsClient && m_NetworkAnimator.Animator.updateMode == AnimatorUpdateMode.AnimatePhysics) {\n        m_NetworkAnimator.Animator.ApplyBuiltinRootMotion();\n    }\n    if (m_NetworkAnimator.Animator.isActiveAndEnabled) {\n        m_NetworkAnimator.Animator.Update(0);\n    }\n    if (m_IsServer) {\n        foreach (var update in m_NetworkAnimator.AnimationUpdates) {\n            m_NetworkAnimator.SendAnimationEvent(update.AnimationHash, update.LayerIndex, update.NormalizedTime);\n        }\n        foreach (var update in m_NetworkAnimator.ParameterUpdates) {\n            m_NetworkAnimator.SendParameterEvent(update.ParameterHash, update.Value);\n        }\n        foreach (var update in m_NetworkAnimator.TriggerUpdates) {\n            m_NetworkAnimator.SendTriggerEvent(update.TriggerHash);\n        }\n    }\n    m_NetworkAnimator.AnimationUpdates.Clear();\n    m_NetworkAnimator.ParameterUpdates.Clear();\n    m_NetworkAnimator.TriggerUpdates.Clear();\n}", "CodeBleu_score": 52.89173701991954}, {"code": "private void FlushMessages(){\n\t", "CodeBleu_score": 0.843141799522195}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (m_IsServer || IsOwner) {\n            FlushMessages();\n        }\n\n        ProcessParameterUpdates();\n        CheckForAnimatorChanges();\n    }\n}", "CodeBleu_score": 13.09885188139275}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        if (IsOwner || IsServer) {\n            FlushMessages();\n        }\n        ProcessParameterUpdates();\n        CheckForAnimatorChanges();\n    }\n}", "CodeBleu_score": 13.056043450213053}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t    if (updateStage == NetworkUpdateStage.PreUpdate) {\n        FlushMessages();\n        ProcessParameterUpdates();\n        if (m_IsServer || m_NetworkAnimator.IsOwner) {\n            ProcessAnimatorChanges();\n        }\n    } else if (updateStage == NetworkUpdateStage.PostUpdate) {\n        ProcessAnimatorChanges();\n    }\n}", "CodeBleu_score": 12.201705393481104}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t    m_IsAuthority = IsOwner;\n    if (m_IsServerAuthoritative) {\n        m_Rigidbody.isKinematic = !m_IsAuthority;\n        m_Rigidbody.interpolation = m_IsAuthority ? m_OriginalInterpolation : RigidbodyInterpolation.None;\n    } else {\n        m_Rigidbody.isKinematic = !m_IsAuthority;\n        m_Rigidbody.interpolation = m_IsAuthority ? m_OriginalInterpolation : RigidbodyInterpolation.None;\n    }\n}", "CodeBleu_score": 51.484843847583086}, {"code": "private void UpdateOwnershipAuthority(){\n\t    m_IsAuthority = m_NetworkTransform.IsOwnerAuthoritative();\n    m_Rigidbody.isKinematic = !m_IsAuthority;\n    m_Rigidbody.interpolation = m_IsAuthority ? m_OriginalInterpolation : (m_NetworkTransform.Interpolate ? RigidbodyInterpolation.None : m_OriginalInterpolation);\n}", "CodeBleu_score": 45.546075687946185}, {"code": "private void UpdateOwnershipAuthority(){\n\t    // Check if the object is server-authoritative\n    if (m_IsServerAuthoritative) {\n        // If the object is server-authoritative, it always has authority\n        m_IsAuthority = true;\n        // Set the Rigidbody's kinematic property to false\n        m_Rigidbody.isKinematic = false;\n        // Set the Rigidbody's interpolation property to the original value\n        m_Rigidbody.interpolation = m_OriginalInterpolation;\n    } else {\n        // If the object is not server-authoritative, it has authority if it is the owner\n        m_IsAuthority = IsOwner;\n        // Set the Rigidbody's kinematic property based on whether it has authority\n        m_Rigidbody.isKinematic = !m_IsAuthority;\n        // Set the Rigidbody's interpolation property based on whether it has authority and the NetworkTransform's interpolation setting\n        m_Rigidbody.interpolation = m_IsAuthority ? m_OriginalInterpolation : (m_NetworkTransform.Interpolate ? RigidbodyInterpolation.None : m_OriginalInterpolation);\n    }\n}", "CodeBleu_score": 53.97260731385002}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n            serializedObject.Update();\n\n            ConfigComponent t = (ConfigComponent)target;\n\n            EditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent);\n            EditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent);\n            EditorGUILayout.PropertyField(m_CachedBytesSize);\n\n            m_ConfigHelperInfo.DrawHeader(t.ConfigHelper);\n            m_ConfigHelperInfo.DrawInspector(t.ConfigHelper, serializedObject);\n\n            serializedObject.ApplyModifiedProperties();\n\n            if (EditorApplication.isPlaying && isPrefabInHierarchy) {\n                EditorGUILayout.LabelField(\\\"Config Count\\\", t.Count.ToString());\n                Repaint();\n            }\n        }", "CodeBleu_score": 60.32876936534064}, {"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n    serializedObject.Update();\n\n    ConfigComponent t = (ConfigComponent)target;\n\n    EditorGUI.BeginDisabledGroup(EditorApplication.isPlayingOrWillChangePlaymode && PrefabUtility.GetPrefabInstanceStatus(t.gameObject) != PrefabInstanceStatus.NotAPrefab);\n    {\n        EditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent);\n        EditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent);\n        EditorGUILayout.PropertyField(m_CachedBytesSize);\n    }\n    EditorGUI.EndDisabledGroup();\n\n    if (EditorApplication.isPlaying && !EditorApplication.isPlayingOrWillChangePlaymode)\n    {\n        EditorGUILayout.LabelField(\"Config Count\", t.Count.ToString());\n        EditorGUILayout.LabelField(\"Cached Bytes Size\", t.CachedBytesSize.ToString());\n    }\n\n    m_ConfigHelperInfo.DrawHeader();\n    m_ConfigHelperInfo.DrawInfo(t.GetAllConfigInfos());\n    m_ConfigHelperInfo.DrawActions();\n\n    serializedObject.ApplyModifiedProperties();\n\n    Repaint();\n}", "CodeBleu_score": 79.9152419726274}, {"code": "public override void OnInspectorGUI(){\n\t    base.OnInspectorGUI();\n\n            serializedObject.Update();\n\n\n            ConfigComponent t = (ConfigComponent)target;\n\n\n            EditorGUI.BeginDisabledGroup(EditorApplication.isPlayingOrWillChangePlaymode && PrefabUtility.GetPrefabInstanceStatus(target) != PrefabInstanceStatus.NotAPrefab);\n\n            {\n\n                EditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent);\n\n                EditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent);\n\n\n                m_ConfigHelperInfo.Draw();\n\n            }\n\n            EditorGUI.EndDisabledGroup();\n\n\n            if (EditorApplication.isPlaying && !EditorApplication.isPlayingOrWillChangePlaymode)\n\n            {\n\n                EditorGUILayout.LabelField(\\\"Config Count\\\", t.Count.ToString());\n\n                EditorGUILayout.LabelField(\\\"Cached Bytes Size\\\", t.CachedBytesSize.ToString());\n\n            }\n\n            serializedObject.ApplyModifiedProperties();\n\n\n            Repaint();\n\n        }", "CodeBleu_score": 71.42625181390831}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string>();\n    defaultSceneNames.Add(\"Assets/Scenes/MainMenu.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Gameplay.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/GameOver.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Credits.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Settings.unity\");\n\n    List<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\n    foreach (string sceneName in defaultSceneNames) {\n        scenes.Add(new EditorBuildSettingsScene(sceneName, true));\n    }\n\n    EditorBuildSettings.scenes = scenes.ToArray();\n    Debug.Log(\"Scenes set to default.\");\n}", "CodeBleu_score": 64.46534219954145}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string>();\n    defaultSceneNames.Add(\"Assets/Scenes/Scene1.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Scene2.unity\");\n    defaultSceneNames.Add(\"Assets/Scenes/Scene3.unity\");\n\n    List<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n    foreach (string sceneName in defaultSceneNames) {\n        defaultScenes.Add(new EditorBuildSettingsScene(sceneName, true));\n    }\n\n    EditorBuildSettings.scenes = defaultScenes.ToArray();\n    Debug.Log(\"Scenes have been set to default.\");\n}", "CodeBleu_score": 62.976828782217986}, {"code": "public static void DefaultScenes(){\n\t    HashSet<string> defaultSceneNames = new HashSet<string>() {\n        \"Assets/Scenes/MainMenu.unity\",\n        \"Assets/Scenes/Game.unity\"\n    };\n\n    List<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\n    foreach (string sceneName in defaultSceneNames) {\n        defaultScenes.Add(new EditorBuildSettingsScene(sceneName, true));\n    }\n\n    EditorBuildSettings.scenes = defaultScenes.ToArray();\n    Debug.Log(\"Scenes have been set to default.\");\n}", "CodeBleu_score": 57.21911056154156}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t    // Get the available helper type names from the HelperInfo class.\n    if (m_HelperTypeNames == null) {\n        m_HelperTypeNames = HelperInfo<T>.GetHelperTypeNames();\n    }\n\n    // Display a popup menu for selecting a helper type.\n    int selectedIndex = EditorGUILayout.Popup(\"Helper Type\", m_HelperTypeNameIndex, m_HelperTypeNames);\n\n    // Update the selected index if it has changed.\n    if (selectedIndex != m_HelperTypeNameIndex) {\n        m_HelperTypeNameIndex = selectedIndex;\n        m_HelperTypeName.stringValue = m_HelperTypeNames[selectedIndex];\n    }\n\n    // If no helper type is selected, display a field for a custom helper.\n    if (selectedIndex == 0) {\n        // Display the custom helper field.\n        EditorGUILayout.PropertyField(m_CustomHelper);\n\n        // If the custom helper is not set, show an error message.\n        if (m_CustomHelper.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 55.29943887055146}, {"code": "public void Draw(){\n\t    // Get the available helper types\n    string[] helperTypeNames = GetHelperTypeNames();\n    // Update the selected index based on the current helper type name\n    int selectedIndex = GetHelperTypeNameIndex(helperTypeNames);\n\n    // Draw the helper type popup menu\n    EditorGUILayout.BeginHorizontal();\n    EditorGUILayout.PrefixLabel(\"Helper Type\");\n    selectedIndex = EditorGUILayout.Popup(selectedIndex, helperTypeNames);\n    EditorGUILayout.EndHorizontal();\n\n    // Update the helper type name property based on the selected index\n    m_HelperTypeName.stringValue = selectedIndex >= 0 && selectedIndex < helperTypeNames.Length ? helperTypeNames[selectedIndex] : null;\n\n    // If no helper type is selected, display a field for a custom helper\n    if (selectedIndex < 0) {\n        EditorGUILayout.PropertyField(m_CustomHelper);\n        // Show an error message if the custom helper is not set\n        if (m_CustomHelper.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 49.618634868825765}, {"code": "public void Draw(){\n\t    // Get the available helper types from the HelperInfo class\n    string[] helperTypeNames = HelperInfo<T>.GetHelperTypeNames();\n\n    // If the helper type names array is null or empty, return without rendering anything\n    if (helperTypeNames == null || helperTypeNames.Length <= 0) {\n        return;\n    }\n\n    // Display the label for the helper type popup menu\n    EditorGUILayout.LabelField(\"Helper Type\", EditorStyles.boldLabel);\n\n    // Render the helper type popup menu and update the selected index\n    int selectedIndex = EditorGUILayout.Popup(m_HelperTypeNameIndex, helperTypeNames);\n    if (selectedIndex != m_HelperTypeNameIndex) {\n        m_HelperTypeNameIndex = selectedIndex;\n        m_HelperTypeName.stringValue = selectedIndex <= 0 ? string.Empty : helperTypeNames[selectedIndex];\n    }\n\n    // If no helper type is selected, display the custom helper field and show an error message if the custom helper is not set\n    if (m_HelperTypeNameIndex <= 0) {\n        EditorGUILayout.PropertyField(m_CustomHelper);\n        if (m_CustomHelper.objectReferenceValue == null) {\n            EditorGUILayout.HelpBox(\"Custom helper is not set.\", MessageType.Error);\n        }\n    }\n}", "CodeBleu_score": 60.18153927093534}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t    // Remove the general logging symbol\n    ScriptingDefineSymbols.RemoveScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\n    // Iterate through and remove symbols for specific logs and logs above a certain level\n    foreach (string symbol in AboveLogScriptingDefineSymbols) {\n        ScriptingDefineSymbols.RemoveScriptingDefineSymbol(symbol);\n    }\n\n    foreach (string symbol in SpecifyLogScriptingDefineSymbols) {\n        ScriptingDefineSymbols.RemoveScriptingDefineSymbol(symbol);\n    }\n}", "CodeBleu_score": 75.95131167446257}, {"code": "public static void DisableAllLogs(){\n\t    // Remove the general logging symbol\n    ScriptingDefineSymbols.RemoveScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\n    // Iterate through and remove symbols for specific logs and logs above a certain level\n    foreach (string symbol in AboveLogScriptingDefineSymbols) {\n        ScriptingDefineSymbols.RemoveScriptingDefineSymbol(symbol);\n    }\n\n    // Iterate through and remove symbols for specific logs\n    foreach (string symbol in SpecifyLogScriptingDefineSymbols) {\n        ScriptingDefineSymbols.RemoveScriptingDefineSymbol(symbol);\n    }\n}", "CodeBleu_score": 75.95131167446257}, {"code": "public static void DisableAllLogs(){\n\t    // Remove the general logging symbol\n    ScriptingDefineSymbols.RemoveScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\n    // Iterate through and remove symbols for specific logs and logs above a certain level\n    for (int i = 0; i < AboveLogScriptingDefineSymbols.Length; i++) {\n        ScriptingDefineSymbols.RemoveScriptingDefineSymbol(AboveLogScriptingDefineSymbols[i]);\n    }\n\n    for (int i = 0; i < SpecifyLogScriptingDefineSymbols.Length; i++) {\n        ScriptingDefineSymbols.RemoveScriptingDefineSymbol(SpecifyLogScriptingDefineSymbols[i]);\n    }\n}", "CodeBleu_score": 62.45599918755798}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    if (type == null) {\n        throw new GameFrameworkException(\"Type is invalid.\");\n    }\n\n    GameFrameworkComponent component = null;\n    for (GameFrameworkLinkedListNode<GameFrameworkComponent> node = s_GameFrameworkComponents.First; node != null && node.Value != null; node = node.Next) {\n        component = node.Value;\n        if (component.GetType() == type) {\n            return component;\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 43.07752503820752}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    if (type == null) {\n        throw new GameFrameworkException(\"Type is invalid.\");\n    }\n\n    LinkedListNode<GameFrameworkComponent> current = s_GameFrameworkComponents.First;\n    while (current != null) {\n        if (current.Value.GetType() == type) {\n            return current.Value;\n        }\n\n        current = current.Next;\n    }\n\n    return null;\n}", "CodeBleu_score": 88.30161971343841}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t    if (type == null) {\n        throw new GameFrameworkException(\"Type is invalid.\");\n    }\n\n    foreach (GameFrameworkComponent component in s_GameFrameworkComponents) {\n        if (component.GetType() == type) {\n            return component;\n        }\n    }\n\n    return null;\n}", "CodeBleu_score": 38.782871567624035}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown game framework.\");\n\n    if (BaseComponent.Instance != null) {\n        BaseComponent.Instance.Shutdown();\n    }\n\n    ClearComponents();\n\n    switch (shutdownType) {\n        case ShutdownType.None:\n            break;\n        case ShutdownType.Restart:\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n            Application.Quit();\n            break;\n    }\n}", "CodeBleu_score": 26.93927142919471}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown game framework.\");\n\n    // Shutdown the BaseComponent if it exists\n    if (s_BaseComponent != null) {\n        s_BaseComponent.Shutdown();\n    }\n\n    // Clear game framework components\n    ClearComponents();\n\n    // Perform actions based on the shutdown type\n    switch (shutdownType) {\n        case ShutdownType.Restart:\n            // Restart the game scene\n            SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);\n            break;\n\n        case ShutdownType.Quit:\n            // Quit the application\n            Application.Quit();\n            break;\n\n        case ShutdownType.None:\n            // Do nothing\n            break;\n    }\n}", "CodeBleu_score": 26.840689253787474}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t    Log.Info(\"Shutdown Game Framework ({0}).\", Utility.Text.FormatString(\"{0} Shutdown\", shutdownType.ToString()));\n\n    if (BaseComponent != null) {\n        BaseComponent.Shutdown();\n        BaseComponent = null;\n    }\n\n    s_GameFrameworkComponents.Clear();\n\n    switch (shutdownType) {\n        case ShutdownType.None:\n            break;\n        case ShutdownType.Restart:\n            SceneManager.LoadScene(SceneManager.GetActiveScene().name);\n            break;\n        case ShutdownType.Quit:\n#if UNITY_EDITOR\n            UnityEditor.EditorApplication.isPlaying = false;\n#else\n            Application.Quit();\n#endif\n            break;\n        default:\n            throw new GameFrameworkException(Utility.Text.FormatString(\"Shutdown type '{0}' is invalid.\", shutdownType.ToString()));\n    }\n}", "CodeBleu_score": 46.420016201260204}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_EventComponent = GameEntry.GetComponent<EventComponent>();\n    if (m_EventComponent == null) {\n        Log.Fatal(\"Event component is invalid.\");\n        return;\n    }\n\n    if (m_EnableLoadConfigUpdateEvent) {\n        m_EventComponent.Subscribe(LoadConfigUpdateFailureEventArgs.EventId, OnLoadConfigUpdateFailure);\n        m_EventComponent.Subscribe(LoadConfigUpdateSuccessEventArgs.EventId, OnLoadConfigUpdateSuccess);\n    }\n\n    if (m_EnableLoadConfigDependencyAssetEvent) {\n        m_EventComponent.Subscribe(LoadConfigDependencyAssetFailureEventArgs.EventId, OnLoadConfigDependencyAssetFailure);\n        m_EventComponent.Subscribe(LoadConfigDependencyAssetSuccessEventArgs.EventId, OnLoadConfigDependencyAssetSuccess);\n    }\n}", "CodeBleu_score": 54.33864499617297}, {"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameFrameworkEntry.GetModule<IConfigManager>();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_EventComponent = GameEntry.GetComponent<EventComponent>();\n    if (m_EventComponent == null) {\n        Log.Fatal(\"Event component is invalid.\");\n        return;\n    }\n\n    if (m_EnableLoadConfigUpdateEvent) {\n        m_EventComponent.Subscribe(LoadConfigUpdateEventArgs.EventId, OnLoadConfigUpdate);\n    }\n\n    if (m_EnableLoadConfigDependencyAssetEvent) {\n        m_EventComponent.Subscribe(LoadConfigDependencyAssetEventArgs.EventId, OnLoadConfigDependencyAsset);\n    }\n}", "CodeBleu_score": 57.94760853676958}, {"code": "protected override void Awake(){\n\t    base.Awake();\n\n    m_ConfigManager = GameEntry.GetModule<ConfigComponent>().GetConfigManager();\n    if (m_ConfigManager == null) {\n        Log.Fatal(\"Config manager is invalid.\");\n        return;\n    }\n\n    m_EventComponent = GameEntry.GetComponent<EventComponent>();\n    if (m_EventComponent == null) {\n        Log.Fatal(\"Event component is invalid.\");\n        return;\n    }\n\n    if (m_EnableLoadConfigUpdateEvent) {\n        m_EventComponent.Subscribe(LoadConfigUpdateSuccessEventArgs.EventId, OnLoadConfigUpdateSuccess);\n        m_EventComponent.Subscribe(LoadConfigUpdateFailureEventArgs.EventId, OnLoadConfigUpdateFailure);\n    }\n\n    if (m_EnableLoadConfigDependencyAssetEvent) {\n        m_EventComponent.Subscribe(LoadConfigDependencyAssetEventArgs.EventId, OnLoadConfigDependencyAsset);\n    }\n}", "CodeBleu_score": 51.91959139603482}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (configAsset == null) {\n        Log.Warning(\"Can not read data with invalid config asset '{0}'.\", configAssetName);\n        return false;\n    }\n\n    if (configAsset is TextAsset) {\n        if (configAssetName.EndsWith(BytesAssetExtension, StringComparison.Ordinal)) {\n            return ParseBytes((TextAsset)configAsset, configManager, userData);\n        } else {\n            return ParseText((TextAsset)configAsset, configManager, userData);\n        }\n    } else {\n        Log.Warning(\"Can not read data with invalid config asset '{0}'.\", configAssetName);\n        return false;\n    }\n}", "CodeBleu_score": 64.48369853889322}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (configAsset == null) {\n        Log.Warning(\\\"Can not read data with invalid config asset '{0}'.\\\", configAssetName);\n        return false;\n    }\n\n    if (configAsset is TextAsset) {\n        string text = (configAsset as TextAsset).text;\n        if (configAssetName.EndsWith(BytesAssetExtension, StringComparison.Ordinal)) {\n            return ParseBytes(configManager, text, userData);\n        } else {\n            return ParseText(configManager, text, userData);\n        }\n    }\n\n    Log.Warning(\\\"Can not read data with invalid config asset '{0}', it's type is '{1}'.\\\", configAssetName, configAsset.GetType().FullName);\n    return false;\n}", "CodeBleu_score": 60.99887829438902}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t    if (configAsset == null) {\n        Log.Warning(\\\"Can not read data with invalid asset '{0}' from config manager type '{1}', asset is null.\", configAssetName, configManager.GetType().FullName);\n        return false;\n    }\n\n    TextAsset textAsset = configAsset as TextAsset;\n    if (textAsset != null) {\n        if (configAssetName.EndsWith(BytesAssetExtension, StringComparison.Ordinal)) {\n            return ParseBytes(configManager, configAssetName, textAsset.bytes, userData);\n        } else {\n            return ParseText(configManager, configAssetName, textAsset.text, userData);\n        }\n    }\n\n    Log.Warning(\\\"Can not read data with invalid asset '{0}' from config manager type '{1}', asset type is '{2}'.\", configAssetName, configManager.GetType().FullName, configAsset.GetType().FullName);\n    return false;\n    }", "CodeBleu_score": 63.10700302288224}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n                string configName = null;\n                string configValue = null;\n                while (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n                    configName = binaryReader.ReadString();\n                    configValue = binaryReader.ReadString();\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n                        return false;\n                    }\n                }\n\n                return true;\n            }\n        }\n    } catch (Exception exception) {\n        Log.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\n        return false;\n    }\n}", "CodeBleu_score": 81.61170343158604}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n                string configName = null;\n                string configValue = null;\n                while (binaryReader.ReadString(out configName) && binaryReader.ReadString(out configValue)) {\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    } catch (Exception exception) {\n        Log.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\n        return false;\n    }\n}", "CodeBleu_score": 79.22391070624991}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t    try {\n        using (MemoryStream memoryStream = new MemoryStream(configBytes, startIndex, length, false)) {\n            using (BinaryReader binaryReader = new BinaryReader(memoryStream, Encoding.UTF8)) {\n                while (binaryReader.BaseStream.Position < binaryReader.BaseStream.Length) {\n                    string configName = binaryReader.ReadString();\n                    string configValue = binaryReader.ReadString();\n                    if (!configManager.AddConfig(configName, configValue)) {\n                        Log.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\n                        return false;\n                    }\n                }\n            }\n        }\n\n        return true;\n    } catch (Exception exception) {\n        Log.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\n        return false;\n    }\n}", "CodeBleu_score": 92.53145645876843}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    m_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 73.78971426597079}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    m_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 73.78971426597079}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t    m_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 73.78971426597079}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t            ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n            activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n            activeSceneChangedEventArgs.ActiveScene = activeScene;\n            return activeSceneChangedEventArgs;\n        }", "CodeBleu_score": 80.0779520542894}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t            ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n            activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n            activeSceneChangedEventArgs.ActiveScene = activeScene;\n            return activeSceneChangedEventArgs;\n        }", "CodeBleu_score": 80.0779520542894}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\t            ActiveSceneChangedEventArgs activeSceneChangedEventArgs = ReferencePool.Acquire<ActiveSceneChangedEventArgs>();\n            activeSceneChangedEventArgs.LastActiveScene = lastActiveScene;\n            activeSceneChangedEventArgs.ActiveScene = activeScene;\n            return activeSceneChangedEventArgs;\n        }", "CodeBleu_score": 80.0779520542894}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 97.978570139059}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 97.978570139059}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t    if (string.IsNullOrEmpty(sceneAssetName)) {\n        Log.Error(\"Scene asset name is invalid.\");\n        return;\n    }\n\n    if (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) || !sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\n        Log.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\n        return;\n    }\n\n    m_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 97.978570139059}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tFModuleManager::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n\tFModuleManager::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnRegistered);\n\n\tTArray<IBinariesDiffPatchFeature*> RegisteredFeatures = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>(BINARIES_DIFF_PATCH_FEATURE_NAME);\n\tfor (IBinariesDiffPatchFeature* Feature : RegisteredFeatures)\n\t{\n\t\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{Feature->GetFeatureName()});\n\t}\n}", "CodeBleu_score": 60.956463037952126}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\tTArray<IBinariesDiffPatchFeature*> RegisteredFeature;\n\tIModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>(IBinariesDiffPatchFeature::GetFeatureName(), RegisteredFeature);\n\tfor (auto Feature : RegisteredFeature)\n\t{\n\t\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{Feature->GetFeatureName()});\n\t}\n\tOnHotPatcherFeatureRegisteredHandle = IModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnHotPatcherFeatureRegistered);\n\tOnHotPatcherFeatureUnRegisteredHandle = IModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnHotPatcherFeatureUnRegistered);\n}", "CodeBleu_score": 59.89031638915001}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t    // This code will execute after your module is loaded into memory; the exact timing is specified in the .uplugin file per-module\n\n    // Retrieve registered feature implementations\n    TArray<IBinariesDiffPatchFeature*> Features = IModularFeatures::Get().GetModularFeatureImplementations<IBinariesDiffPatchFeature>(BINARIES_DIFF_PATCH_FEATURE_NAME);\n\n    // Append the names of the features to the binaries patch feature enumerations\n    for (IBinariesDiffPatchFeature* Feature : Features) {\n        THotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{Feature->GetFeatureName()});\n    }\n\n    // Set up callbacks for when modular features are registered or unregistered\n    OnModularFeatureRegisteredHandle = IModularFeatures::Get().OnModularFeatureRegistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureRegistered);\n    OnModularFeatureUnregisteredHandle = IModularFeatures::Get().OnModularFeatureUnregistered().AddRaw(this, &FBinariesPatchFeatureModule::OnModularFeatureUnregistered);\n}", "CodeBleu_score": 63.18728007236639}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString, FString> KeyValues;\n\tTArray<FString> Result;\n\tFString Key;\n\tFString Value;\n\n\t// Split the command line into key-value pairs\n\tFString LeftStr;\n\tFString RightStr;\n\tint32 EqualIndex = 0;\n\twhile (Commandline.Split(TEXT(\"=\"), &LeftStr, &RightStr)) {\n\t\tEqualIndex = LeftStr.Find(TEXT(\"=\"));\n\t\tif (EqualIndex != INDEX_NONE) {\n\t\t\tKey = LeftStr.Left(EqualIndex);\n\t\t\tValue = LeftStr.Right(LeftStr.Len() - EqualIndex - 1);\n\t\t\tKeyValues.Add(Key, Value);\n\t\t}\n\t\tCommandline = RightStr;\n\t}\n\n\t// Check if the specified token is present in the map\n\tif (KeyValues.Contains(Token)) {\n\t\t// Split the value associated with the token by commas and add it to the result array\n\t\tKeyValues[Token].ParseIntoArray(Result, TEXT(\",\"), true);\n\t}\n\n\treturn Result;\n}", "CodeBleu_score": 51.41215335210796}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString, FString> KeyValues;\n\tFString CurrentKey;\n\tFString CurrentValue;\n\tbool bInQuotes = false;\n\tfor (int32 i = 0; i < Commandline.Len(); i++) {\n\t\tTCHAR CurrentChar = Commandline[i];\n\t\tif (CurrentChar == ' ') {\n\t\t\tif (!bInQuotes) {\n\t\t\t\tif (!CurrentKey.IsEmpty()) {\n\t\t\t\t\tKeyValues.Add(CurrentKey, CurrentValue);\n\t\t\t\t\tCurrentKey.Empty();\n\t\t\t\t\tCurrentValue.Empty();\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tCurrentValue += CurrentChar;\n\t\t\t}\n\t\t}\n\t\telse if (CurrentChar == '=') {\n\t\t\tif (!bInQuotes) {\n\t\t\t\tCurrentValue.Empty();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tCurrentValue += CurrentChar;\n\t\t\t}\n\t\t}\n\t\telse if (CurrentChar == '\\\"') {\n\t\t\tbInQuotes = !bInQuotes;\n\t\t}\n\t\telse {\n\t\t\tif (CurrentKey.IsEmpty()) {\n\t\t\t\tCurrentKey += CurrentChar;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tCurrentValue += CurrentChar;\n\t\t\t}\n\t\t}\n\t}\n\tif (!CurrentKey.IsEmpty()) {\n\t\tKeyValues.Add(CurrentKey, CurrentValue);\n\t}\n\tTArray<FString> Result;\n\tif (KeyValues.Contains(Token)) {\n\t\tFString Value = KeyValues[Token];\n\t\tValue.ParseIntoArray(Result, TEXT(\",\"), true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 48.061028066103795}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTMap<FString, FString> KeyValues = FlibPatchParserHelper::GetCommandLineParamsMap(Commandline);\n\tif (KeyValues.Contains(Token)) {\n\t\tFString Value = KeyValues[Token];\n\t\tTArray<FString> Result;\n\t\tValue.ParseIntoArray(Result, TEXT(\",\"), true);\n\t\treturn Result;\n\t}\n\treturn TArray<FString>();\n}", "CodeBleu_score": 63.45850978693559}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    // Check if a commandlet is running\n    if (FApp::IsRunning()) {\n        // Get the name of the running commandlet\n        FString CommandletName = FApp::GetCurrentCommandletName();\n\n        // Check if the commandlet name is not empty and matches \"cook\" (case-insensitive)\n        if (!CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n            return true;\n        }\n    }\n\n    return false;\n}", "CodeBleu_score": 30.637350289293114}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    // Verify if a commandlet is running\n    if (FApp::IsRunning()) {\n        // Retrieve the commandlet name\n        FString CommandletName = FApp::GetCurrentCommandletName();\n\n        // Check if the commandlet name is not empty and matches \"cook\" (case-insensitive)\n        if (!CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase)) {\n            return true;\n        }\n    }\n\n    return false;\n}", "CodeBleu_score": 30.637350289293114}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\t    if (FApp::IsRunning() && FApp::IsEditor()) {\n        FString CommandletName = FPlatformProcess::GetEnvironmentVariable(TEXT(\"UE4_COMMANDLET_NAME\"));\n        return !CommandletName.IsEmpty() && CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n    }\n    return false;\n}", "CodeBleu_score": 33.61256041851999}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t    // Extract the commandlet name from the command line\n    FString CommandletName = FCommandLine::Get().GetOption(*Params);\n    if (CommandletName.IsEmpty()) {\n        CommandletName = FCommandLine::Get().GetOption(TEXT(\"Commandlet\"));\n    }\n\n    // Check if serverless counting is enabled in the settings\n    if (GetDefault<UHotPatcherSettingConfig>()->bEnableServerlessCounter) {\n        // Initialize the counter with server request and project information\n        FServerCounter::Get().Init(GetDefault<UHotPatcherSettingConfig>()->ServerUrl, GetDefault<UHotPatcherSettingConfig>()->ProjectName, GetDefault<UHotPatcherSettingConfig>()->ProjectID, GetDefault<UHotPatcherSettingConfig>()->ProjectVersion);\n\n        // Modify the project name to include the commandlet name if applicable\n        FString ProjectName = GetDefault<UHotPatcherSettingConfig>()->ProjectName;\n        if (!CommandletName.IsEmpty()) {\n            ProjectName += TEXT(\"_\") + CommandletName;\n        }\n        FServerCounter::Get().SetProjectName(ProjectName);\n\n        // Process the counter\n        FServerCounter::Get().Process();\n    }\n}", "CodeBleu_score": 44.4668488493983}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t    Super::Update(Params);\n\n    // Extract the commandlet name from the command line\n    FString CommandletName = FCommandLine::Get().GetOptionValue(TEXT(\"Commandlet\"));\n    if (CommandletName.IsEmpty()) {\n        UE_LOG(LogHotPatcherCommandletBase, Error, TEXT(\"Failed to extract commandlet name from command line.\"));\n        return;\n    }\n\n    // Check if serverless counting is enabled in the settings\n    if (GetDefault<UHotPatcherRuntimeSettings>()->bEnableServerlessCounting) {\n        // Initialize the counter with server request and project information\n        FString ServerRequest = FString::Printf(TEXT(\"?Commandlet=%s\"), *CommandletName);\n        FString ProjectName = FString::Printf(TEXT(\"%s_%s\"), *FApp::GetProjectName(), *CommandletName);\n        FServerCounter::Get().Init(ServerRequest, ProjectName);\n\n        // Process the counter\n        FServerCounter::Get().Process();\n    }\n}", "CodeBleu_score": 48.313434640954036}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t    Super::Update(Params);\n\n    // Extract the commandlet name from the command line\n    FString CommandletName;\n    if (FParse::Value(FCommandLine::Get(), TEXT(\"COMMANDLET\"), CommandletName)) {\n        // Remove the \"Commandlet\" suffix from the commandlet name\n        CommandletName.RemoveFromEnd(TEXT(\"Commandlet\"));\n    }\n\n    // Check if serverless counting is enabled in the settings\n    if (bEnableServerlessCounting) {\n        // Initialize the counter with server request and project information\n        Counter = FHotPatcherServerCounter(\n            ServerRequest,\n            ProjectName,\n            CommandletName\n        );\n\n        // Modify the project name to include the commandlet name if applicable\n        if (CommandletName != ProjectName) {\n            Counter.SetProjectName(ProjectName + TEXT(\"_\") + CommandletName);\n        }\n\n        // Process the counter\n        Counter.Process();\n    }\n}", "CodeBleu_score": 43.39016705147799}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t    if (TargetPlatform == nullptr) {\n        return false;\n    }\n    FString PlatformName = TargetPlatform->PlatformName();\n    return PlatformName.StartsWith(TEXT(\"IOS\")) || PlatformName.StartsWith(TEXT(\"Mac\")) || PlatformName.StartsWith(TEXT(\"TVOS\"));\n}", "CodeBleu_score": 33.287187997825754}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t    // Get the name of the target platform\n    FString PlatformName = TargetPlatform->PlatformName();\n\n    // Check if the platform name starts with \"IOS\", \"Mac\", or \"TVOS\" (case-insensitive)\n    return PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n           PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n           PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 37.734039474690356}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t    const FString PlatformName = TargetPlatform->PlatformName();\n    return PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n           PlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n           PlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 38.500723927956045}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t    // Get the outermost package of the object\n    UPackage* Package = Object->GetOutermost();\n    // Check if the package is valid\n    if (Package) {\n        // Check if the package is in CookerAssetsSet but not in AllAssetsSet\n        if (CookerAssetsSet.Contains(Package) && !AllAssetsSet.Contains(Package)) {\n            // Check if the object does not always require post-load processing\n            if (!IsAlwayPostLoadClasses(Package, Object)) {\n                // Add the object to the PackageObjectsMap\n                PackageObjectsMap.FindOrAdd(Package).Add(Object);\n                // Add the object to the FreezeObjects list\n                FreezeObjects.Add(Object);\n            }\n            // Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object\n            Object->ClearFlags(RF_NeedPostLoad);\n            Object->ClearFlags(RF_NeedPostLoadSubobjects);\n        }\n    }\n}", "CodeBleu_score": 41.040002631848566}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t    // Check if the object is valid\n    if (!Object) {\n        return;\n    }\n\n    // Get the outermost package of the object\n    UPackage* Package = Object->GetOutermost();\n\n    // Check if the package is valid\n    if (!Package) {\n        return;\n    }\n\n    // Check if the package is in the CookerAssetsSet but not in the AllAssetsSet\n    if (CookerAssetsSet.Contains(Package) && !AllAssetsSet.Contains(Package)) {\n        // Add the object to the PackageObjectsMap and FreezeObjects list\n        PackageObjectsMap.FindOrAdd(Package).Add(Object);\n        FreezeObjects.Add(Object);\n\n        // Clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object\n        Object->ClearFlags(RF_NeedPostLoad);\n        Object->ClearFlags(RF_NeedPostLoadSubobjects);\n    }\n}", "CodeBleu_score": 36.999401836251536}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t    if (Object) {\n        UPackage* Package = Object->GetOutermost();\n        if (Package) {\n            if (CookerAssetsSet.Contains(Package)) {\n                return;\n            }\n            if (AllAssetsSet.Contains(Package)) {\n                if (!IsAlwayPostLoadClasses(Package, Object)) {\n                    PackageObjectsMap.Add(Package, Object);\n                    FreezeObjects.Add(Object);\n                    Object->ClearFlags(RF_NeedPostLoad);\n                    Object->ClearFlags(RF_NeedPostLoadSubobjects);\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 39.85800486213518}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tFBulkDataContext& BulkDataContext = Context.BulkDataContext;\n\tTArray<FExportBuffer>& ExportBuffers = Context.ExportsBuffers[Record.Info.MultiOutputIndex];\n\n\tfor (FPackageWriterRecords::FWriteBulkData& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.BulkDataType == EBulkDataType::BulkData_AppendToExports)\n\t\t{\n\t\t\tExportBuffers.Add(FExportBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions) });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tFOutputFile& OutputFile = BulkDataContext.OutputFiles.Emplace_GetRef();\n\t\t\tOutputFile.Filename = BulkData.Filename;\n\t\t\tOutputFile.Buffer = BulkData.Buffer;\n\t\t\tOutputFile.Regions = MoveTemp(BulkData.Regions);\n\t\t\tOutputFile.bIsSidecar = BulkData.bIsSidecar;\n\t\t\tOutputFile.bHasHashContribution = BulkData.bHasHashContribution;\n\t\t}\n\t}\n}", "CodeBleu_score": 53.258290735633594}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tContext.ExportsBuffers.AddDefaulted(Record.Packages.Num());\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages)\n\t{\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FExportBuffer{ Package.Buffer, MoveTemp(Package.Regions) });\n\t}\n}", "CodeBleu_score": 29.463846383325208}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\t\tContext.OutputFiles.Reserve(Context.OutputFiles.Num() + Record.BulkData.Num());\n\tfor (FBulkData& BulkData : Record.BulkData)\n\t{\n\t\tswitch (BulkData.Type)\n\t\t{\n\t\tcase EBulkDataType::AppendToExports:\n\t\t\tContext.ExportsBuffers[BulkData.Info.MultiOutputIndex].Add(FExportBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions) });\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tContext.OutputFiles.Emplace(FOutputFile{\n\t\t\t\tMoveTemp(BulkData.Filename),\n\t\t\t\tMoveTemp(BulkData.Buffer),\n\t\t\t\tMoveTemp(BulkData.Regions),\n\t\t\t\tBulkData.bIsSidecar,\n\t\t\t\tBulkData.bIsHashContributing\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t}\n}", "CodeBleu_score": 45.97497921619343}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t    if (Record.bCompletedExportsArchiveForDiff) {\n        return;\n    }\n\n    for (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n        // Check if the export archive for diff is already completed\n        if (Package.bCompletedExportsArchiveForDiff) {\n            continue;\n        }\n\n        // Create a footer buffer with the package file tag\n        FCompositeBuffer FooterBuffer;\n        FPackageFileTag::SerializeFileTag(FooterBuffer, Package.Info.PackageFileTag);\n\n        // Add the footer buffer to the export buffers for this package\n        Context.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FExportBuffer{ FooterBuffer, TArray<FCompositeBuffer>() });\n    }\n}", "CodeBleu_score": 62.685093617030354}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FExportBuffer{ Package.Buffer, MoveTemp(Package.Regions) });\n\t}\n}", "CodeBleu_score": 53.209765273143105}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\t\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\treturn;\n\t}\n\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n\t\tFExportBuffer& Footer = Context.ExportsBuffers[Package.Info.MultiOutputIndex].Emplace_GetRef();\n\t\tFooter.Buffer = FCompositeBuffer();\n\t\tFooter.Regions.Add(FCompositeBufferRegion(PackageFileTag, 0, PackageFileTag.Len()));\n\t}\n}", "CodeBleu_score": 61.85319508303313}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t    Super::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n    UGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n    if (CharacterMovement)\n    {\n        SavedRequestToStartSprinting = CharacterMovement->RequestToStartSprinting;\n        SavedRequestToStartADS = CharacterMovement->RequestToStartADS;\n    }\n}", "CodeBleu_score": 98.0019634219436}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t    Super::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n    UGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n    if (CharacterMovement)\n    {\n        SavedRequestToStartSprinting = CharacterMovement->RequestToStartSprinting;\n        SavedRequestToStartADS = CharacterMovement->RequestToStartADS;\n    }\n}", "CodeBleu_score": 98.0019634219436}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\t\tSuper::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetCharacterMovement());\n\tif (CharacterMovement)\n\t{\n\t\tSavedRequestToStartSprinting = CharacterMovement->RequestToStartSprinting;\n\t\tSavedRequestToStartADS = CharacterMovement->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 98.55708660281867}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t    return NULL;\n}", "CodeBleu_score": 5.671458607142626}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t    if (this->ASC) {\n        this->ASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\n        TArray<FGameplayTag> CooldownTagArray;\n        this->CooldownTags.GetGameplayTagArray(CooldownTagArray);\n\n        for (FGameplayTag CooldownTag : CooldownTagArray) {\n            this->ASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n        }\n    }\n\n    this->SetReadyToDestroy();\n    this->MarkAsGarbage();\n}", "CodeBleu_score": 53.54460767943282}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t    if (this->ASC) {\n        this->ASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n        this->ASC->OnAnyGameplayEffectRemovedDelegate().RemoveAll(this);\n\n        for (FGameplayTag CooldownTag : this->CooldownTags.GetGameplayTagArray()) {\n            this->ASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n        }\n    }\n\n    this->SetReadyToDestroy();\n    this->MarkAsGarbage();\n}", "CodeBleu_score": 33.91479369080835}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateToSelf.RemoveAll(this);\n\n\t\tTArray<FGameplayTag> CooldownTagsArray;\n\t\tCooldownTags.GetGameplayTagArray(CooldownTagsArray);\n\n\t\tfor (FGameplayTag CooldownTag : CooldownTagsArray) {\n\t\t\tASC->RegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t\t}\n\t}\n\n\tSetReadyToDestroy();\n\tMarkAsGarbage();\n}", "CodeBleu_score": 89.02296198151464}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n        ActiveEffectHandle = EffectRemoved.Handle;\n    }\n}", "CodeBleu_score": 86.71371496731041}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n    }\n}", "CodeBleu_score": 92.83505591251549}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n        ActiveEffectHandle = EffectRemoved.Handle;\n    }\n}", "CodeBleu_score": 86.71371496731041}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t    return NULL;\n}", "CodeBleu_score": 5.431334758320042}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n        ActiveEffectHandle = EffectRemoved.Handle;\n    }\n}", "CodeBleu_score": 86.71371496731041}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n    }\n}", "CodeBleu_score": 92.83505591251549}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\t    FGameplayTagContainer AssetTags;\n    EffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n    FGameplayTagContainer GrantedTags;\n    EffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n    if (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n        OnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n        ActiveEffectHandle = EffectRemoved.Handle;\n    }\n}", "CodeBleu_score": 86.71371496731041}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted)\n\t{\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false);\n\t}\n}", "CodeBleu_score": 97.5690140104299}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted) {\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false);\n\t}\n}", "CodeBleu_score": 97.5264912343054}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (ActivateAbilityOnGranted) {\n\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle, false);\n\t}\n}", "CodeBleu_score": 97.5264912343054}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 95.80947584184304}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 95.80947584184304}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (!bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnCompleted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n\n\tEndTask();\n}", "CodeBleu_score": 95.80947584184304}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t\tUAnimInstance* AnimInstance = GetAnimInstance();\n\tif (AnimInstance) {\n\t\tAnimInstance->Montage_Stop(0.0f, MontageToPlay);\n\t}\n\n\tif (Ability) {\n\t\tAbility->OnGameplayAbilityEnded.RemoveUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnAbilityEnded);\n\t\tAbility->OnGameplayAbilityCancelled.RemoveUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnAbilityCancelled);\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 63.62512270899793}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t    // Call parent version of OnDestroy\n    Super::OnDestroy(AbilityEnded);\n\n    // Ensure the ending result matches what we are expecting\n    if (AbilityEnded) {\n        if (ShouldBroadcastAbilityTaskDelegates()) {\n            OnCancelled.Broadcast(FGameplayTag(), FGameplayEventData());\n        }\n    }\n    else {\n        if (ShouldBroadcastAbilityTaskDelegates()) {\n            OnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n        }\n    }\n\n    // Remove the delegates\n    if (Ability) {\n        Ability->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n    }\n\n    if (AbilitySystemComponent.IsValid()) {\n        AbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n    }\n}", "CodeBleu_score": 67.45190590024872}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\t    // TODO: Merge this fix back to engine, it was calling the wrong callback\n\n    if (Ability) {\n        Ability->OnGameplayAbilityEnded.RemoveUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnAbilityEnded);\n\n        if (AbilityEnded && bStopWhenAbilityEnds) {\n            StopPlayingMontage();\n        }\n    }\n\n    if (AbilitySystemComponent.IsValid()) {\n        AbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventTags, EventHandle);\n    }\n\n    Super::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 84.74934097323622}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    if (Ability == nullptr) {\n        return false;\n    }\n\n    const FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n    if (!ActorInfo) {\n        return false;\n    }\n\n    UAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n    if (AnimInstance == nullptr) {\n        return false;\n    }\n\n    // Check if the montage is still playing\n    // The ability would have been interrupted, in which case we should automatically stop the montage\n    if (AbilitySystemComponent.IsValid() && AbilitySystemComponent->GetAnimatingAbility() == Ability && AbilitySystemComponent->GetCurrentMontage() == MontageToPlay) {\n        // Unbind delegates so they get called no longer\n        FAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(MontageToPlay);\n        if (MontageInstance) {\n            MontageInstance->OnMontageBlendingOutStarted.Unbind();\n            MontageInstance->OnMontageEnded.Unbind();\n        }\n\n        AbilitySystemComponent->CurrentMontageStop();\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 90.00615376734213}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t    bool bStopped = false;\n\n    if (AbilitySystemComponent.IsValid()) {\n        const FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n        UAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\n        if (AnimInstance != nullptr) {\n            // Unbind delegates so they get called no matter what happens with this Ability Task\n            FAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(MontageToPlay);\n            if (MontageInstance) {\n                MontageInstance->OnMontageBlendingOutStarted.Unbind();\n                MontageInstance->OnMontageEnded.Unbind();\n            }\n\n            AbilitySystemComponent->CurrentMontageStop();\n\n            bStopped = true;\n        }\n    }\n\n    return bStopped;\n}", "CodeBleu_score": 61.160528816112425}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid() && Ability) {\n\t\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\n\t\tif (AnimInstance != nullptr) {\n\t\t\t// Unbind delegates so they get called no matter what happens with this ability\n\t\t\tFAnimMontageInstance* MontageInstance = AnimInstance->GetActiveInstanceForMontage(MontageToPlay);\n\t\t\tif (MontageInstance) {\n\t\t\t\tMontageInstance->OnMontageBlendingOutStarted.Unbind();\n\t\t\t\tMontageInstance->OnMontageEnded.Unbind();\n\t\t\t}\n\n\t\t\tAbilitySystemComponent->CurrentMontageStop();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 64.05625976625852}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\n\t// Check distance between AI pawn and target actor\n\tconst UBlackboardComponent* BlackboardComp = OwnerComp.GetBlackboardComponent();\n\tif (ensure(BlackboardComp)) {\n\t\tAActor* TargetActor = Cast<AActor>(BlackboardComp->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\t\tif (TargetActor) {\n\t\t\tAAIController* MyController = OwnerComp.GetAIOwner();\n\t\t\tif (ensure(MyController)) {\n\t\t\t\tAPawn* AIPawn = MyController->GetPawn();\n\t\t\t\tif (ensure(AIPawn)) {\n\t\t\t\t\tfloat DistanceTo = FVector::Distance(TargetActor->GetActorLocation(), AIPawn->GetActorLocation());\n\n\n\t\t\t\t\t// Check if target is within maximum attack range\n\t\t\t\t\tbool bWithinRange = DistanceTo < MaxAttackRange;\n\n\n\t\t\t\t\tbool bHasLOS = false;\n\t\t\t\t\tif (bWithinRange) {\n\t\t\t\t\t\tbHasLOS = MyController->LineOfSightTo(TargetActor);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tBlackboardComp->SetValueAsBool(AttackRangeKey.SelectedKeyName, (bWithinRange && bHasLOS));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 80.45647013719093}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Check to make sure we have a target actor\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\tif (!TargetActor) {\n\t\treturn;\n\t}\n\n\t// Check if within range\n\tif (OwnerComp.GetAIOwner()->GetPawn() == nullptr) {\n\t\treturn;\n\t}\n\tif (TargetActor && OwnerComp.GetAIOwner()->GetPawn()) {\n\t\tfloat DistanceTo = FVector::Distance(TargetActor->GetActorLocation(), OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation());\n\n\t\tbool bWithinRange = DistanceTo < MaxAttackRange;\n\n\t\tbool bHasLOS = false;\n\t\tif (bWithinRange) {\n\t\t\tbHasLOS = OwnerComp.GetAIOwner()->HasLineOfSightTo(TargetActor);\n\t\t}\n\n\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(AttackRangeKey.SelectedKeyName, (bWithinRange && bHasLOS));\n\t}\n}", "CodeBleu_score": 62.998702436874396}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Check to make sure we have a target actor\n\tAActor* TargetActor = Cast<AActor>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\tif (!TargetActor) {\n\t\treturn;\n\t}\n\n\t// Check if within range\n\tAAIController* MyController = OwnerComp.GetAIOwner();\n\tif (!MyController) {\n\t\treturn;\n\t}\n\n\tAPawn* AIPawn = MyController->GetPawn();\n\tif (!AIPawn) {\n\t\treturn;\n\t}\n\n\tfloat DistanceTo = FVector::Distance(TargetActor->GetActorLocation(), AIPawn->GetActorLocation());\n\n\tbool bWithinRange = DistanceTo < MaxAttackRange;\n\n\tbool bHasLOS = false;\n\tif (bWithinRange) {\n\t\tbHasLOS = MyController->LineOfSightTo(TargetActor);\n\t}\n\n\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(AttackRangeKey.SelectedKeyName, (bWithinRange && bHasLOS));\n}", "CodeBleu_score": 71.7957718687339}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t    APawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n    if (MyPawn == nullptr) {\n        return EBTNodeResult::Failed;\n    }\n\n    USAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(MyPawn);\n    if (ensure(AttributeComp)) {\n        AttributeComp->ApplyHealthChange(AttributeComp->GetHealthMax());\n    }\n\n    return EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 76.92749345336195}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t    APawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n    if (MyPawn == nullptr) {\n        return EBTNodeResult::Failed;\n    }\n\n    USAttributeComponent* HealthComp = USAttributeComponent::GetAttributes(MyPawn);\n    if (ensure(HealthComp)) {\n        HealthComp->ApplyHealthChange(MyPawn, HealthComp->GetHealthMax());\n    }\n\n    return EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 71.63544568382156}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAPawn* MyPawn = Cast<APawn>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (MyPawn == nullptr) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(MyPawn);\n\tif (ensure(AttributeComp)) {\n\t\tAttributeComp->ApplyHealthChange(MyPawn, AttributeComp->GetMaxHealth());\n\t}\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 81.83984989758237}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    Super::BeginPlay();\n\n    UWorld* World = GetWorld();\n    if (World) {\n        USSTickablesSubsystem* TickablesSubsystem = World->GetSubsystem<USSTickablesSubsystem>();\n        if (TickablesSubsystem) {\n            TickablesSubsystem->RegisterTickable(this);\n        }\n    }\n}", "CodeBleu_score": 52.4477252417242}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    Super::BeginPlay();\n    USSTickablesSubsystem::Get(GetWorld())->RegisterPrimaryTick(this);\n}", "CodeBleu_score": 33.1695029393852}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t    Super::BeginPlay();\n    USTickablesSubsystem::RegisterTickable(this);\n}", "CodeBleu_score": 29.00074882973508}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    Super::EndPlay(EndPlayReason);\n\n    USTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n    Tickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.9786174465331}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    Super::EndPlay(EndPlayReason);\n\n    USTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n    Tickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.9786174465331}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t    Super::EndPlay(EndPlayReason);\n\n    USTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n    Tickables->UnregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.7075425134685}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tbHasImplementedInterface = GetOwner()->Implements<USSignificanceInterface>();\n\t\tif (bWaitOneFrame) {\n\t\t\tGetOwner()->GetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t} else {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\tif (bManageOwnerParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleSystemComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n\t\t\tParticleSystemComponent->SetSignificance(CurrentSignificance);\n\t\t}\n\n\t\tTArray<UNiagaraComponent*> NiagaraComponents;\n\t\tGetOwner()->GetComponents<UNiagaraComponent>(NiagaraComponents);\n\t\tfor (UNiagaraComponent* NiagaraComponent : NiagaraComponents) {\n\t\t\tNiagaraComponent->SetSignificance(CurrentSignificance);\n\t\t}\n\t}\n}", "CodeBleu_score": 72.06083095872127}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance)\n\t{\n\t\tbHasImplementedInterface = GetOwner()->Implements<USSignificanceInterface>();\n\t\tif (!bHasImplementedInterface)\n\t\t{\n\t\t\tUE_LOG(LogSignificanceManager, Warning, TEXT(\\\"Owner does not implement the significance interface: %s\\\"), *GetOwner()->GetName());\n\t\t}\n\n\t\tif (bWaitOneFrame)\n\t\t{\n\t\t\tGetOwner()->GetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterComponent);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tRegisterComponent();\n\t\t}\n\t}\n\n\tManageOwnerParticleSignificance();\n}", "CodeBleu_score": 56.269245893283596}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tbHasImplementedInterface = GetOwner()->Implements<USSignificanceInterface>();\n\n\t\tif (bWaitOneFrame) {\n\t\t\tGetWorld()->GetTimerManager().SetTimerForNextTick(this, &USSignificanceComponent::RegisterWithManager);\n\t\t} else {\n\t\t\tRegisterWithManager();\n\t\t}\n\t}\n\n\tif (bManageOwnerParticleSignificance) {\n\t\tTArray<UParticleSystemComponent*> ParticleSystemComponents;\n\t\tGetOwner()->GetComponents<UParticleSystemComponent>(ParticleSystemComponents);\n\n\t\tfor (UParticleSystemComponent* ParticleSystemComponent : ParticleSystemComponents) {\n\t\t\tParticleSystemComponent->bManageComponentSignificance = true;\n\t\t}\n\t}\n}", "CodeBleu_score": 80.73478647622127}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t    // Retrieve the significance manager from the world\n    USSignificanceManager* Manager = USSignificanceManager::Get(GetWorld());\n\n    // Define lambda functions for calculating significance and handling post-significance updates\n    auto CalculateSignificance = [this](UObject* InObject, const FVector& InLocation, const float InRange, const float InMaxRange, const float& OutSignificance) {\n        // Calculate the significance based on the distance from the object's location\n        OutSignificance = FMath::GetMappedRangeValueClamped(FVector2D(0.f, InMaxRange), FVector2D(0.f, 1.f), (InLocation - InLocation).Size());\n    };\n\n    auto PostSignificanceUpdate = [this](UObject* InObject, const float InSignificance) {\n        // Cast the object to a significance interface and update its significance value\n        if (InObject->Implements<USSignificanceInterface>()) {\n            ISSignificanceInterface::Execute_UpdateSignificance(InObject, InSignificance);\n        }\n    };\n\n    // Register the component with the manager\n    Manager->RegisterObject(GetOwner(), GetOwner()->GetClass()->GetName(), CalculateSignificance, PostSignificanceUpdate);\n}", "CodeBleu_score": 48.95946952058858}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t    // Get the significance manager from the world\n    USSignificanceManager* SigMan = USSignificanceManager::Get(GetWorld());\n\n    // Define lambda functions for calculating significance and handling post-significance updates\n    auto CalcSig = [this]() {\n        return CalculateSignificance();\n    };\n\n    auto PostUpdate = [this](ESignificanceValue NewSignificance) {\n        PostSignificanceUpdate(NewSignificance);\n    };\n\n    // Register the component with the manager using the owner's class name as the tag\n    SigMan->Register(GetOwner(), GetOwner()->GetClass()->GetName(), CalcSig, PostUpdate);\n}", "CodeBleu_score": 28.3638435406101}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Retrieve the significance manager from the world\n\tUSSignificanceManager* SignificanceManager = GetWorld()->GetSubsystem<USSignificanceManager>();\n\n\t// Define lambda functions for calculating significance and handling post-significance updates\n\tauto CalculateSignificance = [this](const AActor* Owner, const FVector& Location, const FVector& Velocity) -> ESignificanceValue {\n\t\t// Check if the owner implements the USSignificanceInterface\n\t\tif (bHasImplementedInterface) {\n\t\t\t// Cast the owner to the USSignificanceInterface and call its GetSignificanceValue function\n\t\t\tUSSignificanceInterface* SignificanceInterface = Cast<USSignificanceInterface>(Owner);\n\t\t\treturn SignificanceInterface->GetSignificanceValue(Location, Velocity);\n\t\t}\n\t\telse {\n\t\t\t// If the owner does not implement the USSignificanceInterface, use the default significance calculation\n\t\t\treturn CalculateDefaultSignificance(Location, Velocity);\n\t\t}\n\t};\n\n\tauto PostSignificanceUpdate = [this](const AActor* Owner, const ESignificanceValue NewSignificance) {\n\t\t// Check if the owner implements the USSignificanceInterface\n\t\tif (bHasImplementedInterface) {\n\t\t\t// Cast the owner to the USSignificanceInterface and call its OnPostSignificanceUpdate function\n\t\t\tUSSignificanceInterface* SignificanceInterface = Cast<USSignificanceInterface>(Owner);\n\t\t\tSignificanceInterface->OnPostSignificanceUpdate(NewSignificance);\n\t\t}\n\t};\n\n\t// Register the component with the manager using the owner's class name as the tag\n\tSignificanceManager->Register(GetOwner(), GetOwner()->GetClass()->GetName(), CalculateSignificance, PostSignificanceUpdate);\n}", "CodeBleu_score": 46.6027030251215}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!CVarActorPoolingEnabled.GetValueOnGameThread()) {\n\t\tActor->Destroy();\n\t\treturn false;\n\t}\n\n\tUWorld* World = Actor->GetWorld();\n\tif (!World) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Failed to release actor to pool: Actor's world is null.\"));\n\t\treturn false;\n\t}\n\n\tUSActorPoolingSubsystem* PoolingSubsystem = World->GetSubsystem<USActorPoolingSubsystem>();\n\tif (!PoolingSubsystem) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Failed to release actor to pool: Actor pooling subsystem is null.\"));\n\t\treturn false;\n\t}\n\n\tPoolingSubsystem->ReleaseActorToPool(Actor);\n\treturn true;\n}", "CodeBleu_score": 52.69708040854453}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t    return false;\n}", "CodeBleu_score": 6.854673974783592}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t    return false;\n}", "CodeBleu_score": 6.854673974783592}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t    SCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n\n    if (IsPoolingEnabled(this)) {\n        UE_LOG(LogTemp, Log, TEXT(\"Starting pooling for %s\"), *ActorClass->GetName());\n\n        FActorSpawnParameters SpawnParams;\n        SpawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\n        for (int32 i = 0; i < Amount; ++i) {\n            AActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, FVector::ZeroVector, FRotator::ZeroRotator, SpawnParams);\n            ReleaseToPool(Actor);\n        }\n    }\n}", "CodeBleu_score": 64.36007249731958}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t    SCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n    UE_LOG(LogTemp, Log, TEXT(\"PrimeActorPool: %s\"), *ActorClass->GetName());\n\n    for (int32 i = 0; i < Amount; ++i) {\n        FActorSpawnParameters SpawnParams;\n        SpawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\n        AActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, FTransform(), SpawnParams);\n        ReleaseToPool(Actor);\n    }\n}", "CodeBleu_score": 68.47212203218888}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n\tUE_LOG(LogTemp, Log, TEXT(\"Starting pooling of %d %s\"), Amount, *ActorClass->GetName());\n\n\tFTransform SpawnTransform;\n\tFActorSpawnParameters SpawnParameters;\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = GetWorld()->SpawnActor<AActor>(ActorClass, SpawnTransform, SpawnParameters);\n\t\tReleaseToPool(Actor);\n\t}\n}", "CodeBleu_score": 57.390777417514805}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreen;\n\tLoadingScreen.bAutoCompleteWhenLoadingCompletes = false;\n\tLoadingScreen.WidgetLoadingScreen = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n\n\t// Setup loading screen\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 82.28010195308904}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreen;\n\tLoadingScreen.bAutoCompleteWhenLoadingCompletes = false;\n\tLoadingScreen.WidgetLoadingScreen = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 82.28010195308904}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a new FLoadingScreenAttributes object\n\tFLoadingScreenAttributes LoadingScreen;\n\n\t// Assign a new loading screen widget to the FLoadingScreenAttributes object\n\tLoadingScreen.WidgetLoadingScreen = FLoadingScreenAttributes::NewTestLoadingScreenWidget();\n\n\t// Set up the loading screen using the movie player\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreen);\n}", "CodeBleu_score": 98.78735357670891}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t    UE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n    // Logging events\n    USActionComponent* Comp = GetOwningComponent();\n    Comp->ActiveGameplayTags.AppendTags(GrantsTags);\n\n    RepData.bIsRunning = true;\n    RepData.Instigator = Instigator;\n\n    if (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n        TimeStarted = GetWorld()->TimeSeconds;\n    }\n\n    GetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 88.55590769858435}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n\t//LogOnScreen(this, FString::Printf(TEXT(\"Started: %s\"), *ActionName.ToString()), FColor::Green);\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\tComp->ActiveGameplayTags.AppendTags(GrantsTags);\n\n\tRepData.bIsRunning = true;\n\tRepData.Instigator = Instigator;\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tTimeStarted = GetWorld()->TimeSeconds;\n\t}\n\n\tGetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 88.5469492853852}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"Started: %s\"), *GetNameSafe(this));\n\n\t// Logging for StartAction\n\tUSActionComponent* Comp = GetOwningComponent();\n\tComp->ActiveGameplayTags.AppendTags(GrantsTags);\n\n\tRepData.bIsRunning = true;\n\tRepData.Instigator = Instigator;\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tTimeStarted = GetWorld()->TimeSeconds;\n\t}\n\n\tGetOwningComponent()->OnActionStarted.Broadcast(GetOwningComponent(), this);\n}", "CodeBleu_score": 88.5469492853852}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tAGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n\tif (GS) {\n\t\tfloat EndTime = TimeStarted + Duration;\n\t\treturn EndTime - GS->GetServerWorldTimeSeconds();\n\t}\n\n\treturn Duration;\n}", "CodeBleu_score": 85.63304167930404}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t    AGameStateBase* GS = GetWorld()->GetGameState<AGameStateBase>();\n    if (GS) {\n        float EndTime = TimeStarted + Duration;\n        return EndTime - GS->GetServerWorldTimeSeconds();\n    }\n    return Duration;\n}", "CodeBleu_score": 84.66497269598335}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (USActionComponent* OwningComp = GetOwningComponent()) {\n\t\treturn OwningComp->GetTimeRemaining(this);\n\t}\n\treturn Duration;\n}", "CodeBleu_score": 35.727554760478654}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t    if (InFocus == nullptr) {\n        GEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Red, \"No Focus Actor to interact.\");\n        return;\n    }\n\n    APawn* MyPawn = Cast<APawn>(GetOwner());\n    ISGameplayInterface::Execute_Interact(InFocus, MyPawn);\n}", "CodeBleu_score": 94.01122774936123}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Red, \"No Focus Actor to interact.\");\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tISGameplayInterface::Execute_Interact(InFocus, MyPawn);\n}", "CodeBleu_score": 93.90676674574935}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\t\tif (InFocus == nullptr) {\n\t\tGEngine->AddOnScreenDebugMessage(-1, 1.0f, FColor::Red, \"No Focus Actor to interact.\");\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\tISGameplayInterface::Execute_Interact(InFocus, MyPawn);\n}", "CodeBleu_score": 93.90676674574935}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t    USAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(TargetActor);\n    if (AttributeComp) {\n        return AttributeComp->ApplyHealthChange(DamageCauser, -DamageAmount);\n    }\n    return false;\n}", "CodeBleu_score": 97.25371238479205}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t    USAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(TargetActor);\n    if (AttributeComp) {\n        return AttributeComp->ApplyHealthChange(DamageCauser, -DamageAmount);\n    }\n    return false;\n}", "CodeBleu_score": 97.25371238479205}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t    USAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(TargetActor);\n    if (AttributeComp) {\n        return AttributeComp->ApplyHealthChange(DamageCauser, -DamageAmount);\n    }\n    return false;\n}", "CodeBleu_score": 97.25371238479205}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t    // Only if there is a new record do we need to broadcast\n    if (NewTime > PersonalRecordTime) {\n        float OldRecord = PersonalRecordTime;\n\n        PersonalRecordTime = NewTime;\n\n        OnRecordTimeChanged.Broadcast(this, PersonalRecordTime, OldRecord);\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 96.69906404682763}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\t// Avoid user-error of adding a negative time\n\tif (!ensure(NewTime >= 0.0f)) {\n\t\treturn false;\n\t}\n\n\t// Only update record if new time is higher\n\tif (PersonalRecordTime == 0.0f || NewTime < PersonalRecordTime) {\n\t\tfloat OldRecord = PersonalRecordTime;\n\n\t\tPersonalRecordTime = NewTime;\n\n\t\tOnRecordTimeChanged.Broadcast(this, PersonalRecordTime, OldRecord);\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 81.37556734074745}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t    if (NewTime > PersonalRecordTime) {\n        float OldRecord = PersonalRecordTime;\n\n        PersonalRecordTime = NewTime;\n\n        OnRecordTimeChanged.Broadcast(this, PersonalRecordTime, OldRecord);\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 96.56106727637126}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (!ensure(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 83.68460409249526}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (!ensure(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 83.68460409249526}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (!ensure(InstigatorPawn)) {\n\t\treturn;\n\t}\n\n\tUSAttributeComponent* AttributeComp = USAttributeComponent::GetAttributes(InstigatorPawn);\n\n\tif (ensure(AttributeComp) && !AttributeComp->IsFullHealth()) {\n\t\tif (ASPlayerState* PS = InstigatorPawn->GetPlayerState<ASPlayerState>()) {\n\t\t\tif (PS->RemoveCredits(CreditCost) && AttributeComp->ApplyHealthChange(this, AttributeComp->GetHealthMax())) {\n\t\t\t\tHideAndCooldownPowerup();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 83.68460409249526}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Check to make sure we aren't already being 'destroyed'\n\t// Adding ensure to see if we encounter this situation at all\n\tif (ensure(!IsPendingKill())) {\n\t\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactVFX, GetActorLocation(), GetActorRotation());\n\n\t\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t\tUGameplayStatics::PlayWorldCameraShake(this, ImpactShake, GetActorLocation(), ImpactShakeInnerRadius, ImpactShakeOuterRadius);\n\n\t\tUSActorPoolingSubsystem::ReleaseToPool(this);\n\t}\n}", "CodeBleu_score": 54.7701418959799}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t    // Check to make sure we aren't already being 'destroyed'\n    // Adding ensure to see if we encounter this situation at all\n    if (ensure(!IsPendingKill())) {\n        // Spawn visual effects\n        UGameplayStatics::SpawnEmitterAtLocation(this, ImpactVFX, GetActorLocation(), GetActorRotation());\n\n        // Play sound effects\n        UGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n        // Trigger camera shake\n        UGameplayStatics::PlayWorldCameraShake(this, ImpactShake, GetActorLocation(), ImpactShakeInnerRadius, ImpactShakeOuterRadius);\n\n        // Release back to actor pool\n        USActorPoolingSubsystem::ReleaseToPool(this);\n    }\n}", "CodeBleu_score": 55.599127095750525}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t    // Check to make sure we aren't already being 'destroyed'\n    // Adding ensure to see if we encounter this situation at all\n    if (ensure(!IsPendingKill())) {\n        UGameplayStatics::SpawnEmitterAtLocation(this, ImpactVFX, GetActorLocation(), GetActorRotation());\n\n        UGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n        UGameplayStatics::PlayWorldCameraShake(this, ImpactShake, GetActorLocation(), ImpactShakeInnerRadius, ImpactShakeOuterRadius);\n\n        USActorPoolingSubsystem::ReleaseToPool(this);\n    }\n}", "CodeBleu_score": 55.599127095750525}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    return nullptr;\n}", "CodeBleu_score": 5.682091990020235}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    return nullptr;\n}", "CodeBleu_score": 5.682091990020235}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t    return nullptr;\n}", "CodeBleu_score": 5.682091990020235}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (ensure(PS)) {\n\t\tPS->LoadPlayerState(CurrentSaveGame);\n\t}\n}", "CodeBleu_score": 97.23878186577615}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (ensure(PS)) {\n\t\tPS->LoadPlayerState(CurrentSaveGame);\n\t}\n}", "CodeBleu_score": 97.23878186577615}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\t\tASPlayerState* PS = NewPlayer->GetPlayerState<ASPlayerState>();\n\tif (ensure(PS)) {\n\t\tPS->LoadPlayerState(CurrentSaveGame);\n\t}\n}", "CodeBleu_score": 97.23878186577615}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t", "CodeBleu_score": 0.989701945674575}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tCurrentSaveGame = NewObject<USSaveGame>();\n\tCurrentSaveGame->SavedPlayers.Empty();\n\n\tAGameStateBase* GS = GetWorld()->GetGameState();\n\tif (GS) {\n\t\tfor (int32 i = 0; i < GS->PlayerArray.Num(); i++) {\n\t\t\tASPlayerState* PS = Cast<ASPlayerState>(GS->PlayerArray[i]);\n\t\t\tif (PS) {\n\t\t\t\tPS->SavePlayerState(CurrentSaveGame);\n\t\t\t\tbreak; // Single player only\n\t\t\t}\n\t\t}\n\t}\n\n\t// Iterate over all Actors, only storing those with IsGameplayActor flag\n\tfor (FActorIterator It(GetWorld()); It; ++It) {\n\t\tAActor* Actor = *It;\n\n\t\tif (!IsValid(Actor)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\tActor->Serialize(CurrentSaveGame);\n\t\t}\n\t}\n\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, 0);\n\n\tOnSaveGameWritten.Broadcast(CurrentSaveGame);\n}", "CodeBleu_score": 62.73112839250751}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t\tUSSaveGame* NewSaveGame = NewObject<USSaveGame>();\n\tNewSaveGame->SavedPlayers.Empty();\n\n\t// Iterate over all player controllers and save their data\n\tfor (int32 i = 0; i < GameInstance->GetLocalPlayerNum(); ++i) {\n\t\tASPlayerState* PS = Cast<ASPlayerState>(GameInstance->GetLocalPlayerByIndex(i)->GetPlayerState());\n\t\tif (PS) {\n\t\t\tPS->SavePlayerState(NewSaveGame);\n\t\t}\n\t}\n\n\t// Iterate over all actors and save their data\n\tfor (FActorIterator It(GetWorld()); It; ++It) {\n\t\tAActor* Actor = *It;\n\n\t\t// Only save CDOs\n\t\tif (!Actor->IsPackageExternal() && Actor->GetClass()->GetDefaultObject()->ImplementsInterface(USGameplayInterface::StaticClass())) {\n\t\t\tFActorSaveData ActorData;\n\t\t\tActorData.ActorName = Actor->GetFName();\n\t\t\tActorData.Transform = Actor->GetActorTransform();\n\n\t\t\t// Only save components that implement the interface\n\t\t\tFMemoryWriter MemoryWriter(ActorData.ByteData);\n\n\t\t\tFSaveGameArchive Ar(MemoryWriter, true);\n\t\t\tActor->Serialize(Ar);\n\n\t\t\tNewSaveGame->SavedActors.Add(ActorData);\n\t\t}\n\t}\n\n\tUGameplayStatics::SaveGameToSlot(NewSaveGame, CurrentSlotName, 0);\n\n\tOnSaveGameWritten.Broadcast(NewSaveGame);\n}", "CodeBleu_score": 63.04775417635695}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t    if (m_theme_selector->draw(\"Theme\")) {\n        switch (m_theme_selector->value()) {\n            case 0:\n                ImGui::StyleColorsDark();\n                break;\n            case 1:\n                ImGui::StyleColorsLight();\n                break;\n            case 2:\n                ImGui::StyleColorsClassic();\n                break;\n        }\n    }\n    if (m_font_size->draw(\"Font Size\")) {\n        if (m_font_size->value() >= 12 && m_font_size->value() <= 28) {\n            ImGui::GetIO().FontGlobalScale = m_font_size->value() / 16.0f;\n        }\n    }\n}", "CodeBleu_score": 51.83574281209491}, {"code": "void FrameworkConfig::draw_themes(){\n\t    m_theme_selection->draw(\\\"Theme Selection\\\");\n\n    if (m_font_size->draw(\\\"Font Size\\\")) {\n        m_framework->set_font_size(m_font_size->value());\n    }\n}", "CodeBleu_score": 56.23686405141868}, {"code": "void FrameworkConfig::draw_themes(){\n\t    m_theme->draw(\"Theme\");\n    m_font_size->draw(\"Font Size\");\n    if (m_font_size->value() != m_last_font_size) {\n        m_last_font_size = m_font_size->value();\n        m_framework->set_font_size(m_font_size->value());\n    }\n}", "CodeBleu_score": 56.21647847390739}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Checkbox(\"Menu Key\", &menu_key);\n    ImGui::Checkbox(\"Show Cursor\", &show_cursor);\n    ImGui::Checkbox(\"Remember Menu State\", &remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &always_show_cursor);\n\n    int log_level = spdlog::get_level();\n    if (ImGui::SliderInt(\"Log Level\", &log_level, spdlog::level::trace, spdlog::level::off)) {\n        if (log_level >= spdlog::level::trace && log_level <= spdlog::level::off) {\n            spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n        }\n    }\n}", "CodeBleu_score": 50.0202632349678}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Checkbox(\"Menu Key\", &m_menu_key);\n    ImGui::SameLine();\n    ImGui::Checkbox(\"Show Cursor\", &m_show_cursor);\n    ImGui::Checkbox(\"Remember Menu State\", &m_remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &m_enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &m_always_show_cursor);\n    ImGui::SliderInt(\"Log Level\", &m_log_level, 0, 6);\n\n    if (m_log_level >= 0 && m_log_level <= 6) {\n        spdlog::set_level(static_cast<spdlog::level::level_enum>(m_log_level));\n    }\n}", "CodeBleu_score": 49.085369192593106}, {"code": "void FrameworkConfig::draw_main() {\n\t    ImGui::Checkbox(\"Menu Key\", &m_menu_key);\n    ImGui::Checkbox(\"Show Cursor\", &m_show_cursor);\n    ImGui::Checkbox(\"Remember Menu State\", &m_remember_menu_state);\n    ImGui::Checkbox(\"Enable L3 + R3 Toggle\", &m_enable_l3_r3_toggle);\n    ImGui::Checkbox(\"Always Show Cursor\", &m_always_show_cursor);\n\n    int log_level = spdlog::get_level();\n    if (ImGui::SliderInt(\"Log Level\", &log_level, spdlog::level::trace, spdlog::level::off)) {\n        if (log_level >= spdlog::level::trace && log_level <= spdlog::level::off) {\n            spdlog::set_level(static_cast<spdlog::level::level_enum>(log_level));\n        }\n    }\n}", "CodeBleu_score": 50.37781529929748}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t    // Check if the file path is actually a text buffer\n    if (bIsFilePathActuallyTextBuffer) {\n        // If it's a text buffer, create a memory reader from the text buffer\n        TSharedRef<FMemoryReader> Reader = MakeShareable(new FMemoryReader((uint8*)TCHAR_TO_UTF8(*OSMFilePath), OSMFilePath.Len()));\n\n        // Load the OSM file from the memory reader\n        if (!LoadOpenStreetMapFile(Reader, FeedbackContext)) {\n            // If loading fails, return false\n            return false;\n        }\n    } else {\n        // If it's not a text buffer, load the OSM file from the file path\n        if (!LoadOpenStreetMapFile(OSMFilePath, FeedbackContext)) {\n            // If loading fails, return false\n            return false;\n        }\n    }\n\n    // If parsing was successful, calculate the average latitude and longitude from the node data\n    CalculateAverageLatLon();\n\n    // Return true to indicate success\n    return true;\n}", "CodeBleu_score": 31.728721819722537}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t", "CodeBleu_score": 4.471675108827625}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Create a fast xml parser\n\tFFastXml::FXmlFile XmlFile;\n\tXmlFile.bCanContainContent = true;\n\n\t// Load the file\n\tif( bIsFilePathActuallyTextBuffer ) {\n\t\tif( !XmlFile.LoadFile( OSMFilePath, FeedbackContext, EConstructMethod::ConstructFromBuffer ) ) {\n\t\t\tUE_LOG( LogTemp, Error, TEXT( \"Failed to load OSM file from text buffer\" ) );\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\tif( !XmlFile.LoadFile( OSMFilePath, FeedbackContext, EConstructMethod::ConstructFromFile ) ) {\n\t\t\tUE_LOG( LogTemp, Error, TEXT( \"Failed to load OSM file from file path\" ) );\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t// Parse the XML file\n\tFFastXml::FXmlNode* RootNode = XmlFile.GetRootNode();\n\tif( !RootNode ) {\n\t\tUE_LOG( LogTemp, Error, TEXT( \"Failed to get root node from XML file\" ) );\n\t\treturn false;\n\t}\n\n\t// Process the XML nodes\n\tbool bSuccess = ProcessXmlNodesRecursively( RootNode );\n\n\t// Calculate the average latitude and longitude\n\tif( bSuccess ) {\n\t\tCalculateAverageLatitudeLongitude();\n\t}\n\n\treturn bSuccess;\n}", "CodeBleu_score": 46.68565441592652}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    Super::PostSpawnActor(Asset, NewActor);\n\n    if (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n        AStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n        UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n        StreetMapComponent->SetStreetMap(StreetMap);\n    }\n}", "CodeBleu_score": 84.23588476247356}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t    Super::PostSpawnActor(Asset, NewActor);\n    if (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n        AStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n        UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n        StreetMapComponent->SetStreetMap(StreetMap);\n    }\n}", "CodeBleu_score": 84.23588476247356}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\n\tif (UStreetMap* StreetMap = Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = CastChecked<AStreetMapActor>(NewActor);\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMap(StreetMap);\n\t}\n}", "CodeBleu_score": 83.09430773459216}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tDetailsView.Pin()->ForceRefresh();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 73.15760437300656}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent != nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tDetailsView->ForceRefresh();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 73.89948986262485}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t    if (SelectedStreetMapComponent != nullptr) {\n        SelectedStreetMapComponent->BuildMesh();\n        DetailLayout.ForceRefreshDetails();\n    }\n    return FReply::Handled();\n}", "CodeBleu_score": 72.94317607817203}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t    // Register the StreetMap asset type with the asset tools\n    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n    StreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions);\n    AssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\n\n    // Initialize the StreetMap style\n    FStreetMapStyle::Initialize();\n    FStreetMapStyle::ReloadTextures();\n\n\n    // Register a custom class layout for the StreetMapComponent in the property editor module\n    FPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n    PropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n    PropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 71.85131658693061}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// Register the StreetMap asset type with the asset tools\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n\tStreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions);\n\tAssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n\n\t// Initialize the StreetMap style\n\tFStreetMapStyle::Initialize();\n\n\t// Register a custom class layout for the StreetMapComponent in the property editor module\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n\tPropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 74.20848446587175}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t    IAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>(\"AssetTools\").Get();\n    StreetMapAssetTypeActions = MakeShareable(new FStreetMapAssetTypeActions);\n    AssetTools.RegisterAssetTypeActions(StreetMapAssetTypeActions.ToSharedRef());\n    FStreetMapStyle::Initialize();\n    FStreetMapStyle::ReloadTextures();\n    FPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>(\"PropertyEditor\");\n    PropertyModule.RegisterCustomClassLayout(\"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic(&FStreetMapComponentDetails::MakeInstance));\n    PropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 71.80914218300217}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    return nullptr;\n}", "CodeBleu_score": 5.304166478202835}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t    return nullptr;\n}", "CodeBleu_score": 5.304166478202835}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMap != nullptr) {\n\t\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\t\tif (Proxy) {\n\t\t\tProxy->Initialize(StreetMap->GetVertices(), StreetMap->GetIndices());\n\t\t\treturn Proxy;\n\t\t}\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 45.44426382271915}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t    TestAbility01Handle = ServerHandle;\n    TArray<int32> InputIDs;\n    InputIDs.Add(0);\n    Abilities->NativeBindAbility(TestAbility01Handle, InputIDs);\n}", "CodeBleu_score": 56.269044953591695}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<int32> InputIDs;\n\tInputIDs.Add(0);\n\tAbilities->BindAbilityToInput(TestAbility01Handle, InputIDs);\n}", "CodeBleu_score": 55.83950976406762}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<int32> InputIDs;\n\tInputIDs.Add(0);\n\tAbilities->NativeBindAbility(TestAbility01Handle, InputIDs);\n}", "CodeBleu_score": 54.94698845761932}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller != NULL) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 98.03286112917785}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller != nullptr) && (Value != 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 95.11437147958813}, {"code": "void AARCharacter::MoveForward(float Value){\n\t    if ((Controller != nullptr) && (Value != 0.0f)) {\n        // find out which way is forward\n        const FRotator Rotation = Controller->GetControlRotation();\n        const FRotator YawRotation(0, Rotation.Yaw, 0);\n\n        // get forward vector\n        const FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n        AddMovementInput(Direction, Value);\n    }\n}", "CodeBleu_score": 94.24501587321815}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t    if (!GetMainWeaponMesh()) {\n        return GetMesh()->GetSocketLocation(Socket);\n    }\n    return GetMainWeaponMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 46.22136122340807}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t    if (!GetMainWeaponMesh()) {\n        return GetMesh()->GetSocketLocation(Socket);\n    }\n    return GetMainWeaponMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 46.22136122340807}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetMainWeaponMesh())\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\n\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 44.59090853880961}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 69.11443699771995}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t    if (Role == ROLE_Authority) {\n        SpawnedEnemies.Remove(InEnemy);\n        if (SpawnedEnemies.Num() < MinRespawn) {\n            SetupSpawner();\n        }\n    }\n}", "CodeBleu_score": 67.87302243899829}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tif (Role == ROLE_Authority) {\n\t\tSpawnedEnemies.Remove(InEnemy);\n\t\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\t\tSetupSpawner();\n\t\t}\n\t}\n}", "CodeBleu_score": 69.11443699771995}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t    FString Result = Super::ApproveLogin(Options);\n\n    // Parse the options string into an array of parameters\n    TArray<FString> Params;\n    Options.ParseIntoArray(Params, TEXT(\"?\"));\n\n    // Search for the \"PlayerId\" parameter and extract the player ID value\n    for (const FString& Param : Params) {\n        TArray<FString> KeyValue;\n        Param.ParseIntoArray(KeyValue, TEXT(\"=\"));\n        if (KeyValue.Num() == 2 && KeyValue[0] == TEXT(\"PlayerId\")) {\n            PlayerId = KeyValue[1];\n            break;\n        }\n    }\n\n    return Result;\n}", "CodeBleu_score": 58.58975967230429}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t    FString Result = Super::ApproveLogin(Options);\n\n    // Parse the options string into an array of parameters\n    TArray<FString> Params;\n    Options.ParseIntoArray(Params, TEXT(\"?\"));\n\n    // Search for the \"PlayerId\" parameter and extract the player ID value\n    for (const FString& Param : Params) {\n        TArray<FString> KeyValue;\n        Param.ParseIntoArray(KeyValue, TEXT(\"=\"));\n        if (KeyValue.Num() == 2 && KeyValue[0] == TEXT(\"PlayerId\")) {\n            PlayerId = KeyValue[1];\n            break;\n        }\n    }\n\n    return Result;\n}", "CodeBleu_score": 58.58975967230429}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t    FString Result = Super::ApproveLogin(Options);\n\n    FString PlayerId;\n    if (Options.IsEmpty()) return Result;\n\n    TArray<FString> Params;\n    Options.ParseIntoArray(Params, TEXT(\"&\"));\n\n    for (const FString& Param : Params) {\n        TArray<FString> KeyValue;\n        Param.ParseIntoArray(KeyValue, TEXT(\"=\"));\n\n        if (KeyValue.Num() == 2 && KeyValue[0] == TEXT(\"PlayerId\")) {\n            PlayerId = KeyValue[1];\n            break;\n        }\n    }\n\n    if (!PlayerId.IsEmpty()) {\n        if (UARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance())) {\n            GameInstance->SetPlayerId(PlayerId);\n        }\n    }\n\n    return Result;\n}", "CodeBleu_score": 54.18464538212079}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tWarningText->SetVisibility(ESlateVisibility::Visible);\n\t\tWarningText->SetText(FText::FromString(\"Please fill in all fields.\"));\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n\tif (GameInstance) {\n\t\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 57.81281876529142}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameInput->GetText().ToString();\n\tFString DisplayName = DisplayNameInput->GetText().ToString();\n\tFString Password = PasswordInput->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tWarningText->SetVisibility(ESlateVisibility::Visible);\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n\tif (GameInstance) {\n\t\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n\t}\n}", "CodeBleu_score": 48.47406161151243}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tif (UsernameInput->GetText().IsEmpty() || DisplayNameInput->GetText().IsEmpty() || PasswordInput->GetText().IsEmpty()) {\n\t\tWarningText->SetVisibility(ESlateVisibility::Visible);\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\n\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n\tGameInstance->RegisterNewPlayer(UsernameInput->GetText().ToString(), DisplayNameInput->GetText().ToString(), PasswordInput->GetText().ToString());\n}", "CodeBleu_score": 35.0169701531339}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.TargetActor) {\n\t\tFVector ActorLocation = InMod.TargetActor->GetActorLocation();\n\t\tFVector2D ScreeLoc;\n\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\t\tFloatingCombatText->SetCombatText(InMod.NewValue, ScreeLoc);\n\t}\n}", "CodeBleu_score": 33.88128377776207}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t    if (InMod.TargetActor) {\n        FVector ActorLocation = InMod.TargetActor->GetActorLocation();\n        ULocalPlayer const* const LP = ARPC->GetLocalPlayer();\n        FVector4 ViewOrigin;\n        FMatrix ProjMatrix;\n        if (LP && LP->ViewportClient) {\n            // Get the projection data\n            FSceneViewProjectionData ProjectionData;\n            if (LP->GetProjectionData(LP->ViewportClient->Viewport, EStereoscopicPass::eSSP_FULL, /*out*/ ProjectionData)) {\n                ViewOrigin = ProjectionData.ViewOrigin;\n                ProjMatrix = ProjectionData.ProjectionMatrix;\n            }\n        }\n        FVector2D ScreeLoc;\n        UGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n        ScreeLoc.Y = ScreeLoc.Y - 100;\n        FloatingCombatText->SetCombatText(InMod.NewValue, ScreeLoc);\n    }\n}", "CodeBleu_score": 42.19747217143312}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\t\tif (InMod.Attribute.GetUProperty() == UARCharacterAttributes::GetHealthAttribute().GetUProperty()) {\n\t\tif (InMod.TargetActor) {\n\t\t\tFVector ActorLocation = InMod.TargetActor->GetActorLocation();\n\t\t\tFVector2D ScreeLoc;\n\n\t\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\n\t\t\tFText DamageText = FText::FromString(FString::Printf(TEXT(\"%d\"), InMod.NewValue));\n\t\t\tFloatingCombatText->SetDamageText(DamageText);\n\t\t\tFloatingCombatText->SetScreenLocation(ScreeLoc);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.93453354986477}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponInventoryComponent* WeaponComponent = AbilityInstance->GetWeaponInventoryComponent();\n\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\n\t\tif (Character) {\n\t\t\tUARMagazineUpgradeItem* Duplicate = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, Character);\n\n\t\t\tif (Character->HasAuthority()) {\n\t\t\t\tDuplicate->SetValue(Duplicate->GetValue() + MagazineUpgradeValue);\n\t\t\t\tDuplicate->ApplyUpgradeEffect(AbilityInstance);\n\t\t\t}\n\n\t\t\tOnMagazineUpdateAdded(Duplicate);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.811286582830476}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponInventoryComponent* WeaponComponent = AbilityInstance->GetWeaponComponent();\n\t\tAARCharacter* Character = WeaponComponent->GetOwner<AARCharacter>();\n\n\t\tif (Character) {\n\t\t\tUARMagazineUpgradeItem* NewMagazineUpgrade = DuplicateObject(InMagazineUpgrade, Character);\n\t\t\tif (Character->HasAuthority()) {\n\t\t\t\tNewMagazineUpgrade->UpdateMagazineUpgradeValue(Character, AbilityInstance);\n\t\t\t\tNewMagazineUpgrade->ApplyUpgradeEffect(AbilityInstance);\n\t\t\t}\n\n\t\t\tOnMagazineUpdateAdded(NewMagazineUpgrade);\n\t\t}\n\t}\n}", "CodeBleu_score": 42.985140982471556}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponInventoryComponent* WeaponComponent = Cast<UARWeaponInventoryComponent>(AbilityInstance->GetAbilitySystemComponent());\n\t\tAARCharacter* Character = Cast<AARCharacter>(WeaponComponent->GetOwner());\n\t\tif (WeaponComponent && Character) {\n\t\t\tUARMagazineUpgradeItem* NewMagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, Character);\n\t\t\tNewMagazineUpgrade->SetWeaponItem(this);\n\t\t\tif (Character->HasAuthority()) {\n\t\t\t\tNewMagazineUpgrade->UpdateMagazineValue(AbilityInstance->GetAttributes()->MagazineValue);\n\t\t\t\tAbilityInstance->ApplyEffectToSelf(NewMagazineUpgrade->GetMagazineUpgradeEffect());\n\t\t\t}\n\t\t\tOnMagazineUpdateAdded(NewMagazineUpgrade);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.94193918543812}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t    if (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n        UAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n        if (!AbilityComp)\n            return;\n        FAFOnAbilityReady Del = FAFOnAbilityReady::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityAdded);\n        AbilityComp->AddOnAbilityReadyDelegate(ServerWeaponAbilities[LocalIndex], Del);\n\n        if (UARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(AbilityComp->NativeGetAbility(ServerWeaponAbilities[LocalIndex]))) {\n            SetAbilityToItem(Ability, LocalIndex);\n        }\n    }\n}", "CodeBleu_score": 60.31792015373342}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t    if (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n        UAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n        if (!AbilityComp)\n            return;\n        UARWeaponAbilityBase* Ability = AbilityComp->GetAbility(ServerWeaponAbilities[LocalIndex]);\n        if (Ability) {\n            TSubclassOf<UARWeaponAbilityBase> AbilityClass = TSoftClassPtr<UARWeaponAbilityBase>(InAbilityTag).LoadSynchronous();\n            if (AbilityClass) {\n                Ability->SetAbilityToItem(AbilityClass);\n            }\n        }\n    }\n}", "CodeBleu_score": 55.74751837975713}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t    if (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n        UAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n        if (!AbilityComp)\n            return;\n        UARWeaponAbilityBase* Ability = Cast<UARWeaponAbilityBase>(AbilityComp->NativeGetAbilityByHandle(ServerWeaponAbilities[LocalIndex]));\n        if (!Ability)\n            return;\n        Ability->SetAbilityToItem(Items[LocalIndex]);\n    }\n}", "CodeBleu_score": 64.64537898702383}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t    AARCharacter* Character = Cast<AARCharacter>(POwner);\n    if (!Character)\n        return;\n\n    FARWeaponRPC WeaponRPC;\n    WeaponRPC.Weapon = TSoftClassPtr<AARWeaponBase>(nullptr);\n    WeaponRPC.Position = FVector::ZeroVector;\n    WeaponRPC.Rotation = FRotator::ZeroRotator;\n\n    SetWeapon(WeaponRPC, GroupToComponent[LocalIndex]);\n\n    if (CurrentWeaponIndex == LocalIndex) {\n        UAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n        if (AbilityComp) {\n            AbilityComp->NativeUnEquipAbility(ClientWeaponAbilities[LocalIndex]);\n        }\n    }\n}", "CodeBleu_score": 51.86397437641934}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(POwner);\n\tif (!Character)\n\t\treturn;\n\n\tFARWeaponRPC WeaponRPC;\n\tWeaponRPC.Weapon = nullptr;\n\tWeaponRPC.Position = FVector(0, 0, 0);\n\tWeaponRPC.Rotation = FRotator(0, 0, 0);\n\n\tSetWeapon(WeaponRPC, GroupToComponent[LocalIndex]);\n\n\tif (CurrentWeaponIndex == LocalIndex) {\n\t\tUnEquip();\n\t}\n}", "CodeBleu_score": 47.56604677851766}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t\tAARCharacter* Character = Cast<AARCharacter>(POwner);\n\tif (!Character)\n\t\treturn;\n\n\tFARWeaponRPC Weapon;\n\tWeapon.Weapon = TSoftClassPtr<AARWeaponBase>();\n\tWeapon.Position = FVector(0, 0, 0);\n\tWeapon.Rotation = FRotator(0, 0, 0);\n\n\tSetWeapon(Weapon, GroupToComponent[LocalIndex]);\n\n\tif (LocalIndex == CurrentWeaponIndex) {\n\t\tUARWeaponAbilityBase* Ability = GetAbility(LocalIndex);\n\t\tif (Ability)\n\t\t\tAbility->TriggerUnEquip();\n\t}\n}", "CodeBleu_score": 53.38274708472661}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,\n\t// we call this function before unloading the module.\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 47.96284027596869}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.1566962303026}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t\t// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,\n\t// we call this function before unloading the module.\n\tif (!IsRunningDedicatedServer()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 72.15676266996132}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (bIsStartupLoadingScreen) {\n\t\tbIsStartupLoadingScreen = false;\n\t\treturn;\n\t}\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\tif (Settings->bShowLoadingScreen) {\n\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 68.45812263264571}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tif (!bIsStartupLoadingScreen)\n\t{\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t\tif (Settings->bShowLoadingScreen)\n\t\t{\n\t\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t\t}\n\t}\n}", "CodeBleu_score": 56.678114135077465}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t\tUE_LOG(LogAsyncLoadingScreen, Verbose, TEXT(\"PreSetupLoadingScreen()\"));\n\n\tif (bIsStartupLoadingScreen) {\n\t\tbIsStartupLoadingScreen = false;\n\t\treturn;\n\t}\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\tif (Settings->bShowLoadingScreen) {\n\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 60.66190028316123}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t    // Remove all existing background images\n    StartupBackgroundImages.Empty();\n    DefaultBackgroundImages.Empty();\n\n    // Get the loading screen settings\n    const ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n    // Load and add images for the startup loading screen\n    for (auto& Background : Settings->StartupLoadingScreen.Images) {\n        UTexture2D* Texture = Background.Image.LoadSynchronous();\n        if (Texture) {\n            StartupBackgroundImages.Add(Texture);\n        }\n    }\n\n    // Load and add images for the default loading screen\n    for (auto& Background : Settings->DefaultLoadingScreen.Images) {\n        UTexture2D* Texture = Background.Image.LoadSynchronous();\n        if (Texture) {\n            DefaultBackgroundImages.Add(Texture);\n        }\n    }\n}", "CodeBleu_score": 56.3610867506472}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\t// Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Get the loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tif (Settings->StartupLoadingScreen.bOverrideBackgroundImage) {\n\t\tfor (const FString& ImagePath : Settings->StartupLoadingScreen.Images) {\n\t\t\tUTexture2D* Texture = LoadObject<UTexture2D>(NULL, *ImagePath);\n\t\t\tif (Texture) {\n\t\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tif (Settings->DefaultLoadingScreen.bOverrideBackgroundImage) {\n\t\tfor (const FString& ImagePath : Settings->DefaultLoadingScreen.Images) {\n\t\t\tUTexture2D* Texture = LoadObject<UTexture2D>(NULL, *ImagePath);\n\t\t\tif (Texture) {\n\t\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 53.40183827939019}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"LoadBackgroundImages\"));\n\n\t// Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tfor (const FString& ImagePath : Settings->StartupLoadingScreen.Images) {\n\t\tUTexture2D* Texture = LoadObject<UTexture2D>(nullptr, *ImagePath);\n\t\tif (Texture) {\n\t\t\tStartupBackgroundImages.Add(Texture);\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tfor (const FString& ImagePath : Settings->DefaultLoadingScreen.Images) {\n\t\tUTexture2D* Texture = LoadObject<UTexture2D>(nullptr, *ImagePath);\n\t\tif (Texture) {\n\t\t\tDefaultBackgroundImages.Add(Texture);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.05044482133935}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\t// Calculate the elapsed time since the last animation update\n\tfloat ElapsedTime = InCurrentTime - LastTime;\n\tLastTime = InCurrentTime;\n\n\t// Calculate the new alpha value based on the elapsed time and animation speed\n\tfloat NewAlpha = CompleteTextColor.GetColor().A + (ElapsedTime * CompleteTextAnimationSpeed);\n\n\t// Reverse the animation direction if the alpha reaches the minimum or maximum value\n\tif (NewAlpha <= CompleteTextAnimationMinAlpha || NewAlpha >= CompleteTextAnimationMaxAlpha)\n\t{\n\t\tCompleteTextAnimationSpeed *= -1.f;\n\t\tNewAlpha = FMath::Clamp(NewAlpha, CompleteTextAnimationMinAlpha, CompleteTextAnimationMaxAlpha);\n\t}\n\n\t// Set the new alpha value for the text color\n\tCompleteTextColor.GetColor().A = NewAlpha;\n\n\t// Return the status indicating the animation should continue\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 46.171023082180845}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t    // Calculate the alpha value based on the elapsed time and animation speed\n    float Alpha = (FMath::Sin(InCurrentTime * CompleteTextAnimationSpeed) + 1.0f) / 2.0f;\n\n    // Adjust the alpha value based on the animation direction\n    if (bAnimDirection) {\n        Alpha = 1.0f - Alpha;\n    }\n\n    // Set the alpha value for the loading complete text\n    CompleteTextColor.A = Alpha;\n\n    // Reverse the animation direction when the alpha reaches either extreme\n    if (Alpha <= 0.0f || Alpha >= 1.0f) {\n        bAnimDirection = !bAnimDirection;\n    }\n\n    // Indicate that the animation should continue\n    return EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 26.371235238860848}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t\tfloat MinAlpha = 0.0f;\n\tfloat MaxAlpha = 1.0f;\n\n\tfloat CurrentAlpha = CompleteTextColor.GetColor().A;\n\tfloat DeltaAlpha = CompleteTextAnimationSpeed * InDeltaTime;\n\n\tif (bReverseAnimation) {\n\t\tCurrentAlpha -= DeltaAlpha;\n\t}\n\telse {\n\t\tCurrentAlpha += DeltaAlpha;\n\t}\n\n\tif (CurrentAlpha >= MaxAlpha) {\n\t\tCurrentAlpha = MaxAlpha;\n\t\tbReverseAnimation = true;\n\t}\n\telse if (CurrentAlpha <= MinAlpha) {\n\t\tCurrentAlpha = MinAlpha;\n\t\tbReverseAnimation = false;\n\t}\n\n\tCompleteTextColor.SetColor(FLinearColor(CompleteTextColor.GetColor().R, CompleteTextColor.GetColor().G, CompleteTextColor.GetColor().B, CurrentAlpha));\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 54.763377063981444}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\t    checkf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n    Data->Lock.lock();\n    checkf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n    bool bReady = Data->Index != -1;\n    if (bReady)\n        Data->Lock.unlock();\n    return bReady;\n}", "CodeBleu_score": 42.627441054026214}, {"code": "bool FRaceAwaiter::await_ready(){\n\t    checkf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n    Data->Lock.lock();\n    checkf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n    // Unlock if ready and resume immediately by returning true,\n    // otherwise carry the lock to await_suspend/Suspend\n    bool bReady = Data->Index != -1;\n    if (bReady)\n        Data->Lock.unlock();\n    return bReady;\n}", "CodeBleu_score": 42.627441054026214}, {"code": "bool FRaceAwaiter::await_ready(){\n\t    checkf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n    Data->Lock.lock();\n    checkf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n    // Unlock if ready and resume immediately by returning true,\n    // otherwise carry the lock to await_suspend/Suspend\n    bool bReady = Data->Index != -1;\n    if (bReady)\n        Data->Lock.unlock();\n    return bReady;\n}", "CodeBleu_score": 42.627441054026214}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tFFindPathSharedPtr FindPathState = static_cast<FFindPathSharedPtr>(State);\n\t\tif (FindPathState->IsValid()) {\n\t\t\tFindPathState->Get()->NS1->AbortAsyncRequest(FindPathState->Get()->QueryID);\n\t\t\tFindPathState->Reset();\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 29.893665426207523}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tFFindPathSharedPtr FindPathState = static_cast<FFindPathSharedPtr>(State);\n\t\tif (FindPathState->IsValid()) {\n\t\t\tif (FindPathState->QueryID != FNavigationSystem::InvalidRequestId) {\n\t\t\t\tFindPathState->NS1->AbortAsyncRequest(FindPathState->QueryID);\n\t\t\t}\n\t\t\tFindPathState.Reset();\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 30.99358616829308}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tif (bCleanup) {\n\t\tauto* StatePtr = static_cast<FFindPathSharedPtr*>(State);\n\t\tif (StatePtr->IsValid()) {\n\t\t\tauto& State = **StatePtr;\n\t\t\tif (State->QueryID != 0) {\n\t\t\t\tState->NS1->AbortAsyncRequest(State->QueryID);\n\t\t\t}\n\t\t\tStatePtr->Reset();\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 36.183730969258704}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (is_current()) {\n\t\t\t\t\tmake_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (is_current()) {\n\t\t\t\t\tclear_current();\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 65.09654088849392}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && !is_current()) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 54.21436015242514}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (get_tree()->get_current_scene()) {\n\t\t\t\t\tif (get_tree()->get_current_scene()->find_node(get_tree(), \"__listener_make_current_on_ready\", false, true)) {\n\t\t\t\t\t\tmake_current();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (!get_tree()->get_current_scene()) {\n\t\t\t\t\tif (is_current()) {\n\t\t\t\t\t\tcurrent = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclear_current();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 68.6799487824127}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(!active.is_set());\n\tERR_FAIL_COND(use_threads);\n\n\tint todo = p_frames;\n\tint offset = 0;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(buffer_frames, todo);\n\n\t\tlock();\n\n\t\taudio_server_process(to_mix, samples_in);\n\n\t\tfor (int i = 0; i < to_mix * channels; i++) {\n\t\t\tp_buffer[offset + i] = samples_in[i];\n\t\t}\n\n\t\tunlock();\n\n\t\toffset += to_mix * channels;\n\t\ttodo -= to_mix;\n\t}\n}", "CodeBleu_score": 62.534975210439534}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(!active.is_set());\n\tERR_FAIL_COND(use_threads);\n\n\tint todo = p_frames;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(buffer_frames, todo);\n\n\t\tlock();\n\t\taudio_server_process(to_mix, samples_in);\n\t\tunlock();\n\n\t\tint32_t *src = samples_in;\n\t\tint32_t *dst = p_buffer;\n\n\t\tfor (int i = 0; i < to_mix * channels; i++) {\n\t\t\t*dst++ = *src++;\n\t\t}\n\n\t\ttodo -= to_mix;\n\t}\n}", "CodeBleu_score": 60.34137617102093}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(!active.is_set());\n\tERR_FAIL_COND(use_threads);\n\n\tint todo = p_frames;\n\tint offset = 0;\n\n\twhile (todo) {\n\t\tint to_mix = MIN(buffer_frames, todo);\n\n\t\tlock();\n\t\taudio_server_process(to_mix, samples_in + offset * channels);\n\t\tunlock();\n\n\t\tfor (uint32_t i = 0; i < (uint32_t)to_mix * channels; i++) {\n\t\t\tp_buffer[i + offset] = samples_in[i];\n\t\t}\n\n\t\ttodo -= to_mix;\n\t\toffset += to_mix;\n\t}\n}", "CodeBleu_score": 62.3972036617048}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (is_gravity_point()) {\n\t\tVector2 v = p_position - gravity_point_center;\n\t\tfloat l = v.length();\n\t\tif (l > 0.0f) {\n\t\t\tfloat l2 = l * l;\n\t\t\tr_gravity += v * (gravity_point_unit_distance / l2);\n\t\t}\n\t} else {\n\t\tr_gravity += gravity_vector;\n\t}\n}", "CodeBleu_score": 34.15009190556839}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_is_point) {\n\t\treal_t gravity_distance_scale = gravity_point_unit_distance;\n\t\treal_t gravity_distance_squared = p_position.distance_squared_to(gravity_point);\n\t\tr_gravity = gravity_vector * gravity_strength / (gravity_distance_squared * gravity_distance_scale + gravity_distance_scale);\n\t} else {\n\t\tr_gravity = gravity_vector * gravity_strength;\n\t}\n}", "CodeBleu_score": 29.59478867009938}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t", "CodeBleu_score": 3.550376443750522}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tERR_FAIL_NULL(get_space());\n\n\tfor (const KeyValue<GodotConstraint2D *, int> &E : constraints) {\n\t\tGodotBody2D *body_a = E.key->get_body_a();\n\t\tGodotBody2D *body_b = E.key->get_body_b();\n\n\t\tif (body_a != this && body_a->get_mode() == PhysicsServer2D::BODY_MODE_RIGID && !body_a->is_active()) {\n\t\t\tbody_a->set_active(true);\n\t\t}\n\n\t\tif (body_b != this && body_b->get_mode() == PhysicsServer2D::BODY_MODE_RIGID && !body_b->is_active()) {\n\t\t\tbody_b->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 38.82260652084986}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (const Map<Constraint2D *, int>::Element *E = constraints.front(); E; E = E->next()) {\n\t\tConstraint2D *c = (Constraint2D *)E->key();\n\t\tGodotBody2D *b = c->get_body_b();\n\t\tif (b->mode == PhysicsServer2D::BODY_MODE_RIGID && !b->is_active()) {\n\t\t\tb->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 35.07358209329565}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tERR_FAIL_NULL(get_space());\n\n\tfor (Map<GodotConstraint2D *, int>::Element *E = constraints.front(); E; E = E->next()) {\n\t\tGodotBody2D *b = static_cast<GodotBody2D *>(E->key()->get_other_body(this));\n\t\tif (b->mode == PhysicsServer2D::BODY_MODE_RIGID && !b->is_active()) {\n\t\t\tb->set_active(true);\n\t\t}\n\t}\n}", "CodeBleu_score": 32.376199597944776}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (!get_space()) {\n\t\treturn;\n\t}\n\n\tif (monitor_query_list.in_list()) {\n\t\treturn;\n\t}\n\n\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n}", "CodeBleu_score": 60.25682089851273}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (!get_space()) {\n\t\treturn;\n\t}\n\n\tif (monitor_query_list.in_list()) {\n\t\treturn;\n\t}\n\n\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n}", "CodeBleu_score": 60.25682089851273}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (!get_space()) {\n\t\treturn;\n\t}\n\n\tif (monitor_query_list.in_list()) {\n\t\treturn;\n\t}\n\n\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n}", "CodeBleu_score": 60.25682089851273}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t\tcenter_of_mass = get_transform().basis.xform(center_of_mass_local);\n\tprincipal_inertia_axes = get_transform().basis.xform(principal_inertia_axes_local);\n\tinverse_inertia = principal_inertia_axes.transpose() * inverse_inertia_local * principal_inertia_axes;\n}", "CodeBleu_score": 43.25206219087888}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tAudioServer *server = AudioServer::get_singleton();\n\tERR_FAIL_COND(!server);\n\n\tif (p_update_mix_time) {\n\t\tserver->mix_time += p_frames / server->get_mix_rate();\n\t}\n\n\tserver->process(p_frames, p_buffer);\n}", "CodeBleu_score": 54.57553473251204}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tAudioServer *audio_server = AudioServer::get_singleton();\n\tif (audio_server) {\n\t\tif (p_update_mix_time) {\n\t\t\taudio_server->mix_time += p_frames / (float)get_mix_rate();\n\t\t}\n\t\taudio_server->process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 59.321275744788274}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tupdate_mix_time(p_frames);\n\t}\n\tAudioServer *as = AudioServer::get_singleton();\n\tif (as) {\n\t\tas->process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 73.21157573422143}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tint index = get_feed_index(p_feed->get_id());\n\n\tERR_FAIL_COND_MSG(index == -1, \\\"CameraServer: Attempted to remove feed with ID \\\" + itos(p_feed->get_id()) + \\\", but no such feed exists.\\\");\n\n\tprint_verbose(\\\"CameraServer: Removed camera \\\" + p_feed->get_name() + \\\" with ID \\\" + itos(p_feed->get_id()) + \\\" and position \\\" + itos(p_feed->get_position()) + \\\" at index \\\" + itos(index));\n\n\tfeeds.remove_at(index);\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\\\"camera_feed_removed\\\"), p_feed->get_id());\n}", "CodeBleu_score": 31.152072092545012}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tint index = get_feed_index(p_feed->get_id());\n\tERR_FAIL_COND_MSG(index == -1, \"Tried to remove feed with ID \" + itos(p_feed->get_id()) + \" but no feed with that ID exists.\");\n\n\tprint_verbose(\\\"CameraServer: Removed camera \\\" + p_feed->get_name() + \\\" with ID \\\" + itos(p_feed->get_id()) + \\\" and position \\\" + itos(p_feed->get_position()) + \\\" at index \\\" + itos(index));\n\n\tfeeds.remove_at(index);\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\\\"camera_feed_removed\\\"), p_feed->get_id());\n}", "CodeBleu_score": 35.42801111575237}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\t\tERR_FAIL_COND(p_feed.is_null());\n\n\t// find the feed\n\tint index = get_feed_index(p_feed->get_id());\n\n\tif (index == -1) {\n\t\treturn;\n\t}\n\n\t// remove our feed\n\tfeeds.remove_at(index);\n\n\tprint_verbose(\\\"CameraServer: Removed camera \\\" + p_feed->get_name() + \\\" with ID \\\" + itos(p_feed->get_id()) + \\\" and position \\\" + itos(p_feed->get_position()));\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\\\"camera_feed_removed\\\"), p_feed->get_id());\n}", "CodeBleu_score": 36.733223708905314}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction *easeRateAction = new (std::nothrow) EaseRateAction();\n    if (easeRateAction && easeRateAction->initWithAction(action, rate)) {\n        easeRateAction->autorelease();\n        return easeRateAction;\n    }\n    CC_SAFE_DELETE(easeRateAction);\n    return nullptr;\n}", "CodeBleu_score": 80.30440795230167}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    CCASSERT(action != nullptr, \"EaseRateAction: action can't be nullptr!\");\n\n    EaseRateAction* pRet = new (std::nothrow) EaseRateAction();\n    if (pRet && pRet->initWithAction(action, rate)) {\n        pRet->autorelease();\n        return pRet;\n    }\n\n    delete pRet;\n    return nullptr;\n}", "CodeBleu_score": 70.89948106235042}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\t    EaseRateAction* pRet = new (std::nothrow) EaseRateAction();\n    if (pRet && pRet->initWithAction(action, rate)) {\n        pRet->autorelease();\n        return pRet;\n    }\n    delete pRet;\n    return nullptr;\n}", "CodeBleu_score": 57.046910114896086}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n\n    for (auto child : node->getChildren()) {\n        Node* foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode) {\n            return foundNode;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 56.11314726419984}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node->getName() == childName) {\n        return node;\n    }\n\n    for (const auto& child : node->getChildren()) {\n        Node* result = findChildByNameRecursively(child, childName);\n        if (result) {\n            return result;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 57.823966145392646}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\t    if (node == nullptr) {\n        return nullptr;\n    }\n\n    if (node->getName() == childName) {\n        return node;\n    }\n\n    const auto &children = node->getChildren();\n    for (const auto &child : children) {\n        auto foundNode = findChildByNameRecursively(child, childName);\n        if (foundNode != nullptr) {\n            return foundNode;\n        }\n    }\n\n    return nullptr;\n}", "CodeBleu_score": 61.906798126044116}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\t    if (_target) {\n        if (_target->_runningAnimates.find(this) != _target->_runningAnimates.end()) {\n            _target->_runningAnimates.erase(this);\n        }\n        if (_target->_fadeInAnimates.find(this) != _target->_fadeInAnimates.end()) {\n            _target->_fadeInAnimates.erase(this);\n        }\n        if (_target->_fadeOutAnimates.find(this) != _target->_fadeOutAnimates.end()) {\n            _target->_fadeOutAnimates.erase(this);\n        }\n    }\n}", "CodeBleu_score": 30.828672640742955}, {"code": "void Animate3D::removeFromMap(){\n\t    if (_target) {\n        auto it = s_fadeInAnimates.find(_target);\n        if (it != s_fadeInAnimates.end() && it->second == this) {\n            s_fadeInAnimates.erase(it);\n        }\n        it = s_fadeOutAnimates.find(_target);\n        if (it != s_fadeOutAnimates.end() && it->second == this) {\n            s_fadeOutAnimates.erase(it);\n        }\n        it = s_runningAnimates.find(_target);\n        if (it != s_runningAnimates.end() && it->second == this) {\n            s_runningAnimates.erase(it);\n        }\n    }\n}", "CodeBleu_score": 91.93790132883642}, {"code": "void Animate3D::removeFromMap(){\n\t    if (_target) {\n        if (_target->_fadeInAnimates.find(this) != _target->_fadeInAnimates.end()) {\n            _target->_fadeInAnimates.erase(this);\n        }\n        if (_target->_fadeOutAnimates.find(this) != _target->_fadeOutAnimates.end()) {\n            _target->_fadeOutAnimates.erase(this);\n        }\n        if (_target->_runningAnimates.find(this) != _target->_runningAnimates.end()) {\n            _target->_runningAnimates.erase(this);\n        }\n    }\n}", "CodeBleu_score": 30.828672640742955}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    auto key = fileName + \"#\" + animationName;\n    auto animation = AnimationCache::getInstance()->getAnimation(key);\n    if (animation)\n        return animation;\n\n    animation = new Animation3D();\n    if (animation->initWithFile(fileName, animationName)) {\n        animation->autorelease();\n        AnimationCache::getInstance()->addAnimation(animation, key);\n        return animation;\n    }\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 60.77110079020866}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    auto key = fileName + \"#\" + animationName;\n    auto animation = AnimationCache::getInstance()->getAnimation(key);\n    if (animation) {\n        return animation;\n    }\n\n\n    animation = new (std::nothrow) Animation3D();\n    if (animation && animation->init(fileName, animationName)) {\n        animation->autorelease();\n        AnimationCache::getInstance()->addAnimation(animation, key);\n        return animation;\n    }\n    CC_SAFE_DELETE(animation);\n    return nullptr;\n}", "CodeBleu_score": 63.15166213590595}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t    // Generate a unique key for the cache\n    std::string key = fileName + \"#\" + animationName;\n    // Check the cache for an existing animation\n    Animation3D* animation = Director::getInstance()->getAnimationCache()->getAnimation(key);\n    if (animation) {\n        return animation;\n    }\n    // Create a new animation\n    animation = new (std::nothrow) Animation3D();\n    if (animation && animation->initWithFile(fileName, animationName)) {\n        // Add the animation to the cache\n        Director::getInstance()->getAnimationCache()->addAnimation(animation, key);\n    } else {\n        // Delete the animation if initialization failed\n        CC_SAFE_DELETE(animation);\n    }\n    return animation;\n}", "CodeBleu_score": 62.25766270202213}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto itor = _animations.begin(); itor != _animations.end();) {\n        if (itor->second->getReferenceCount() == 1) {\n            itor->second->release();\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 88.56369431561635}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto itor = _animations.begin(); itor != _animations.end();) {\n        if (itor->second->getReferenceCount() == 1) {\n            itor->second->release();\n            itor = _animations.erase(itor);\n        } else {\n            ++itor;\n        }\n    }\n}", "CodeBleu_score": 88.56369431561635}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t    for (auto it = _animations.cbegin(); it != _animations.cend();) {\n        auto animation = it->second;\n        if (animation && animation->getReferenceCount() == 1) {\n            //log(\"cocos2d: AnimationCache: removing unused animation: %s.\", it->first.c_str());\n            //log(\"cocos2d: AnimationCache: animation = %p.\", animation);\n            it = _animations.erase(it);\n            animation->release();\n        } else {\n            ++it;\n        }\n    }\n}", "CodeBleu_score": 58.6909270558949}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 80.24537907297173}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    BillBoard *billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 80.24537907297173}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t    auto billboard = new (std::nothrow) BillBoard();\n    if (billboard && billboard->initWithTexture(texture, mode)) {\n        billboard->autorelease();\n        return billboard;\n    }\n    CC_SAFE_DELETE(billboard);\n    return nullptr;\n}", "CodeBleu_score": 74.60854150119386}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty() || _path == path)\n        return false;\n\n    clear();\n\n    std::string ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \".c3t\")\n        return loadJson(path);\n    else if (ext == \".c3b\")\n        return loadBinary(path);\n\n    CCLOGWARN(\"Invalid bundle format: %s\", path.c_str());\n    return false;\n}", "CodeBleu_score": 42.279568238383305}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty()) {\n        return false;\n    }\n\n    // check if the file is already loaded\n    if (path == _filePath) {\n        return true;\n    }\n\n    // determine the file extension\n    std::string ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \"c3t\") {\n        // load as JSON\n        if (!loadFromJson(path)) {\n            return false;\n        }\n    } else if (ext == \"c3b\") {\n        // load as binary\n        if (!loadFromBinary(path)) {\n            return false;\n        }\n    } else {\n        // invalid format\n        CCLOGWARN(\"Invalid file format for 3D bundle: %s\", path.c_str());\n        return false;\n    }\n\n    // set the internal path\n    _filePath = path;\n\n    return true;\n}", "CodeBleu_score": 54.26090815759343}, {"code": "bool Bundle3D::load(const std::string& path){\n\t    if (path.empty())\n        return false;\n\n    if (_path == path)\n        return true;\n\n    clear();\n\n    _path = path;\n\n    std::string ext = FileUtils::getInstance()->getFileExtension(path);\n    if (ext == \".c3t\")\n        return loadJson();\n    else if (ext == \".c3b\")\n        return loadBinary();\n    else\n    {\n        CCLOGWARN(\"cocos3d: Unsupported file format: %s\", path.c_str());\n        return false;\n    }\n}", "CodeBleu_score": 51.81508815477209}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    skindata->reset();\n    if (_isBinary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 66.26220195556263}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    skindata->reset();\n    if (_isBinary) {\n        return loadSkinDataBinary(skindata);\n    }\n    else {\n        return loadSkinDataJson(skindata);\n    }\n}", "CodeBleu_score": 93.64136352221763}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t    skindata->resetData();\n\n    if (_isBinary)\n        return loadSkinDataBinary(skindata);\n    else\n        return loadSkinDataJson(skindata);\n}", "CodeBleu_score": 71.9273687003869}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    size_t nsize = size * nmemb;\n    if (nsize == 0) {\n        return 0;\n    }\n    auto* decoder = static_cast<AudioDecoder*>(datasource);\n    size_t maxRead = decoder->_dataSize - decoder->_dataOffset;\n    if (nsize > maxRead) {\n        nsize = maxRead;\n    }\n    if (nsize > 0) {\n        memcpy(ptr, decoder->_data + decoder->_dataOffset, nsize);\n        decoder->_dataOffset += nsize;\n    }\n    return nsize;\n}", "CodeBleu_score": 49.0026877326953}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    if (!datasource) return 0;\n    AudioDecoder* decoder = static_cast<AudioDecoder*>(datasource);\n    size_t dataSize = decoder->_dataSize;\n    size_t dataRead = decoder->_dataRead;\n    size_t dataLeft = dataSize - dataRead;\n    size_t toRead = size * nmemb;\n    if (toRead > dataLeft) {\n        toRead = dataLeft;\n    }\n    memcpy(ptr, decoder->_data + dataRead, toRead);\n    decoder->_dataRead += toRead;\n    return toRead;\n}", "CodeBleu_score": 41.61017309637622}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t    if (!ptr) {\n        return 0;\n    }\n    size_t bytesRead = 0;\n    size_t dataSize = size * nmemb;\n    if (dataSize > 0) {\n        AudioDecoder* decoder = static_cast<AudioDecoder*>(datasource);\n        size_t remainingDataSize = decoder->_dataSize - decoder->_dataOffset;\n        size_t bytesToRead = std::min(dataSize, remainingDataSize);\n        if (bytesToRead > 0) {\n            memcpy(ptr, decoder->_data + decoder->_dataOffset, bytesToRead);\n            decoder->_dataOffset += bytesToRead;\n            bytesRead = bytesToRead;\n        }\n    }\n    return bytesRead;\n}", "CodeBleu_score": 41.47754785729529}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.20981144348684}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.20981144348684}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t    _pcmBuffer = std::make_shared<std::vector<uint8_t>>();\n    _pcmBuffer->reserve(4096);\n}", "CodeBleu_score": 46.20981144348684}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> guard(sDownloaderMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it != sDownloaderMap.end()) {\n        return it->second;\n    }\n    return nullptr;\n}", "CodeBleu_score": 71.25861199910604}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> guard(sDownloaderMutex);\n    auto iter = sDownloaderMap.find(id);\n    if (iter == sDownloaderMap.end()) {\n        return nullptr;\n    }\n    return iter->second;\n}", "CodeBleu_score": 79.57410770147332}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t    std::lock_guard<std::mutex> guard(sDownloaderMutex);\n    auto it = sDownloaderMap.find(id);\n    if (it == sDownloaderMap.end()) {\n        return nullptr;\n    }\n    return it->second;\n}", "CodeBleu_score": 73.04211491919786}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t    local loopValue = false\n    if nil ~= isLoop then\n        loopValue = isLoop\n    end\n    cc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 94.93268439705254}, {"code": "function M.playMusic(filename, isLoop)\n\t    local loopValue = false\n    if nil ~= isLoop then\n        loopValue = isLoop\n    end\n    cc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 94.93268439705254}, {"code": "function M.playMusic(filename, isLoop)\n\t    local loopValue = false\n    if nil ~= isLoop then\n        loopValue = isLoop\n    end\n    cc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 94.93268439705254}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t    if not self._enable then\n        return true\n    end\n\n    if #self._cons == 0 then\n        return true\n    end\n\n    local ret = true\n    for i = 1, #self._cons do\n        ret = ret and self._cons[i]:detect()\n    end\n\n    return ret", "CodeBleu_score": 44.48495416874641}, {"code": "function ccs.TriggerObj:detect()\n\t    if not self._enable then\n        return true\n    end\n\n    if 0 == table.getn(self._cons) then\n        return true\n    end\n\n    local result = true\n    for i = 1, table.getn(self._cons) do\n        local c = self._cons[i]\n        if not c:detect() then\n            result = false\n            break\n        end\n    end\n\n    return result", "CodeBleu_score": 58.752937379217144}, {"code": "function ccs.TriggerObj:detect()\n\t    if not self._enable then\n        return true\n    end\n\n    local result = true\n    for i = 1, table.getn(self._cons) do\n        local con = self._cons[i]\n        if nil ~= con then\n            result = result and con:detect()\n        end\n    end\n\n    return result", "CodeBleu_score": 54.68617713298427}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\t    local obj = nil\n    for i = 1, table.getn(self._cons) do\n        obj = self._cons[i]\n        if nil ~= obj and nil ~= obj.removeAll then\n            obj:removeAll()\n        end\n    end\n\n    for i = 1, table.getn(self._acts) do\n        obj = self._acts[i]\n        if nil ~= obj and nil ~= obj.removeAll then\n            obj:removeAll()\n        end\n    end\n\n    self._cons = {}\n    self._acts = {}", "CodeBleu_score": 84.53086016626222}, {"code": "function ccs.TriggerObj:removeAll()\n\t    for i = 1, table.getn(self._cons) do\n        local obj = self._cons[i]\n        if obj and obj.removeAll then\n            obj:removeAll()\n        end\n    end\n\n    for i = 1, table.getn(self._acts) do\n        local obj = self._acts[i]\n        if obj and obj.removeAll then\n            obj:removeAll()\n        end\n    end\n\n    self._cons = {}\n    self._acts = {}", "CodeBleu_score": 68.54399677071561}, {"code": "function ccs.TriggerObj:removeAll()\n\t    for i = 1, table.getn(self._cons) do\n        local obj = self._cons[i]\n        if nil ~= obj and obj.removeAll then\n            obj:removeAll()\n        end\n    end\n\n    for i = 1, table.getn(self._acts) do\n        local obj = self._acts[i]\n        if nil ~= obj and obj.removeAll then\n            obj:removeAll()\n        end\n    end\n\n    self._cons = {}\n    self._acts = {}", "CodeBleu_score": 73.64411926203562}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\t    local effect = cc.Sprite3D:create()\n    effect:setCascadeColorEnabled(true)\n    effect:setCameraMask(target._cameraMask)\n    effect:setScale(target._radius/100)\n    effect:setPosition3D(getPosTable(target))\n    effect:runAction(cc.Sequence:create(\n        cc.Animate3D:create(target._hurtAnimation),\n        cc.CallFunc:create(function()\n            effect:removeFromParent()\n        end)\n    ))\n    target:addChild(effect)", "CodeBleu_score": 46.52646663428856}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local effect = cc.Sprite3D:create(self.hurtAnimation)\n\n    effect:setScale(1.5)\n\n    effect:setPosition(0, 0, 0)\n\n    effect:runAction(cc.Sequence:create(cc.Animate3D:create(effect:getAnimation(), 0, 1, 0))\n\n        :clone()\n\n        :setTag(1)\n\n        :setCallback(function()\n\n            effect:removeFromParent()\n\n        end)\n\n    )\n\n    target:addChild(effect, 1000, 1000)\n\n    local billboard = cc.BillBoard:create()\n\n    billboard:addChild(effect)\n\n    effect:setCameraMask(1000)\n", "CodeBleu_score": 45.7421027822581}, {"code": "function BasicCollider:hurtEffect(target)\n\t    local effect = cc.Sprite3D:create()\n    effect:setCascadeColorEnabled(true)\n    effect:setCameraMask(target._cameraMask)\n    effect:setPosition3D(target._myPos)\n    effect:setScale(target._radius)\n    effect:addChild(self.hurtAnimation)\n    effect:runAction(cc.Sequence:create(cc.Animate3D:create(self.hurtAnimation, 0.0, 1.0), cc.CallFunc:create(function() effect:removeFromParent() end)))\n    target:addChild(effect)", "CodeBleu_score": 48.683876063515015}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stop()\n    self.part2:stop()\n    local action = cc.Sequence:create(\n        cc.DelayTime:create(0.1),\n        cc.CallFunc:create(function()\n            self:removeFromParent()\n        end)\n    )\n    self:runAction(action)\n    local smoke = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"iceTrail\\\"))\n    local magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"puff.png\\\")\n    smoke:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n    smoke:setScale(2)\n    self:addChild(smoke)\n    smoke:setRotation3D({x=90, y=0, z=0})\n    smoke:setGlobalZOrder(0)\n    smoke:setPositionZ(50)\n\n    local pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"pixi\\\"))\n    local pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"particle.png\\\")\n    pixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n    pixi:setScale(2)\n    self:addChild(pixi)\n    pixi:setRotation3D({x=90, y=0, z=0})\n    pixi:setGlobalZOrder(0)\n    pixi:setPositionZ(50)\n\n    self.part1 = smoke\n    self.part2 = pixi\n    self.sp:setTexture(CommonTextures.mageAttack)\n    self.sp:runAction(cc.FadeOut:create(0.1))\n    self.sp:setScale(1.5)", "CodeBleu_score": 53.45025422701202}, {"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stopSystem()\n    self.part2:stopSystem()\n    self.sp:setTexture(\\\"FX/FX.png\\\")\n    self.sp:runAction(cc.Sequence:create(cc.FadeOut:create(0.5),cc.RemoveSelf:create()))\n    self.sp:setScale(1.5)", "CodeBleu_score": 27.19525321931243}, {"code": "function MageNormalAttack:onTimeOut()\n\t    self.part1:stop()\n    self.part2:stop()\n    local seq = cc.Sequence:create(\n        cc.DelayTime:create(0.5),\n        cc.CallFunc:create(function()\n            self:removeFromParent()\n        end)\n    )\n    self:runAction(seq)\n    local pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"pixi\\\"))\n    local pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"particle.png\\\")\n\n    pixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n\n    pixi:setScale(2)\n\n    self:addChild(pixi)\n\n    pixi:setRotation3D({x=90, y=0, z=0})\n\n    pixi:setGlobalZOrder(0)\n\n    pixi:setPositionZ(50)\n\n    pixi:setCameraMask(UserCameraFlagMask)\n\n    pixi:runAction(cc.FadeOut:create(0.5))\n\n    pixi:setScale(2.5)\n", "CodeBleu_score": 56.70023014605974}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero._name == \\\"Knight\\\" then\n        self.KnightPng:setGLProgramState(self.greyShader)\n        self.KnightAngryFullSignal:setVisible(false)\n        self.KnightAngryClone:setVisible(false)\n    elseif hero._name == \\\"Mage\\\" then\n        self.MagePng:setGLProgramState(self.greyShader)\n        self.MageAngryFullSignal:setVisible(false)\n        self.MageAngryClone:setVisible(false)\n    elseif hero._name == \\\"Archer\\\" then\n        self.ArcherPng:setGLProgramState(self.greyShader)\n        self.ArcherAngryFullSignal:setVisible(false)\n        self.ArcherAngryClone:setVisible(false)\n    end", "CodeBleu_score": 30.64020629584105}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    if hero.name == \\\"Knight\\\" then\n        self.KnightPng:setGLProgram(self.greyShader)\n        self.KnightAngryFullSignal:setVisible(false)\n        self.KnightAngryClone:setVisible(false)\n    elseif hero.name == \\\"Mage\\\" then\n        self.MagePng:setGLProgram(self.greyShader)\n        self.MageAngryFullSignal:setVisible(false)\n        self.MageAngryClone:setVisible(false)\n    elseif hero.name == \\\"Archer\\\" then\n        self.ArcherPng:setGLProgram(self.greyShader)\n        self.ArcherAngryFullSignal:setVisible(false)\n        self.ArcherAngryClone:setVisible(false)\n    end", "CodeBleu_score": 27.41689819138961}, {"code": "function BattlefieldUI:heroDead(hero)\n\t    local heroName = hero._name\n    if heroName == \\\"Knight\\\" then\n        self.KnightPng:setGLProgram(self.greyShader)\n        self.KnightAngryFullSignal:setVisible(false)\n        self.KnightAngryClone:setVisible(false)\n    elseif heroName == \\\"Mage\\\" then\n        self.MagePng:setGLProgram(self.greyShader)\n        self.MageAngryFullSignal:setVisible(false)\n        self.MageAngryClone:setVisible(false)\n    elseif heroName == \\\"Archer\\\" then\n        self.ArcherPng:setGLProgram(self.greyShader)\n        self.ArcherAngryFullSignal:setVisible(false)\n        self.ArcherAngryClone:setVisible(false)\n    end", "CodeBleu_score": 29.054205141502802}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal cameraPos = cc.Camera:getInstance():getPosition3D()\n\t\tlocal x = cameraPos.x + (specialCamera.position.x - cameraPos.x) * dt * 10\n\t\tlocal y = cameraPos.y + (specialCamera.position.y - cameraPos.y) * dt * 10\n\t\tlocal z = cameraPos.z + (specialCamera.position.z - cameraPos.z) * dt * 10\n\t\tcc.Camera:getInstance():setPosition3D(cc.V3(x, y, z))\n\t\tcc.Camera:getInstance():lookAt(specialCamera.position, cc.V3(0, 1, 0))\n\telse\n\t\tlocal activeHeroes = gameMaster:getActiveHeroes()\n\t\tif #activeHeroes > 0 then\n\t\t\tlocal cameraPos = cc.Camera:getInstance():getPosition3D()\n\t\t\tlocal x = cameraPos.x + (activeHeroes[1]:getPosition().x - cameraPos.x) * dt * 10\n\t\t\tlocal y = cameraPos.y + (activeHeroes[1]:getPosition().y - cameraPos.y) * dt * 10\n\t\t\tlocal z = cameraPos.z + (activeHeroes[1]:getPosition().z - cameraPos.z) * dt * 10\n\t\t\tcc.Camera:getInstance():setPosition3D(cc.V3(x, y, z))\n\t\t\tcc.Camera:getInstance():lookAt(activeHeroes[1]:getPosition(), cc.V3(0, 1, 0))\n\t\tend\n\tend", "CodeBleu_score": 39.633802872010506}, {"code": "local function moveCamera(dt)\n\t    if specialCamera.valid then\n        local currentPosition = cc.Camera:getInstance():getPosition3D()\n        local newPosition = cc.V3.lerp(currentPosition, specialCamera.position, 0.1)\n        cc.Camera:getInstance():setPosition3D(newPosition)\n        cc.Camera:getInstance():lookAt(specialCamera.position, cc.V3(0, 0, 0))\n        return\n    end\n    local activeHeroes = gameMaster:getActiveHeroes()\n    if #activeHeroes > 0 then\n        local focusPoint = cc.V3(0, 0, 0)\n        for _, hero in ipairs(activeHeroes) do\n            focusPoint = focusPoint + hero:getPosition3D()\n        end\n        focusPoint = focusPoint / #activeHeroes\n        local currentPosition = cc.Camera:getInstance():getPosition3D()\n        local newPosition = cc.V3.lerp(currentPosition, focusPoint, 0.1)\n        cc.Camera:getInstance():setPosition3D(newPosition)\n        cc.Camera:getInstance():lookAt(focusPoint, cc.V3(0, 0, 0))\n    end", "CodeBleu_score": 42.4361119549463}, {"code": "local function moveCamera(dt)\n\t    if specialCamera.valid then\n        local cameraPos = cc.V3(specialCamera.position.x, specialCamera.position.y, 0)\n        local cameraFocus = cc.V3(specialCamera.position.x, specialCamera.position.y, 0)\n        local camera = cc.Director:getInstance():getRunningScene():getCamera()\n        camera:setPosition3D(cameraPos)\n        camera:lookAt(cameraFocus, cc.V3(0, 1, 0))\n    else\n        local cameraPos = cc.V3(0, 0, 0)\n        local cameraFocus = cc.V3(0, 0, 0)\n        local camera = cc.Director:getInstance():getRunningScene():getCamera()\n        camera:setPosition3D(cameraPos)\n        camera:lookAt(cameraFocus, cc.V3(0, 1, 0))\n    end", "CodeBleu_score": 37.564494732751385}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t    local heroList = HeroManager:getHeroList()\n    for i = 1, List.getSize(heroList) do\n        local hero = heroList[i]\n        local particle = hero:getParticle()\n        if particle ~= nil then\n            local pos = hero:getPosition()\n            particle:setPosition(pos)\n        end\n    end", "CodeBleu_score": 45.57205516453012}, {"code": "local function updateParticlePos()\n\t    for i = 1, List.getSize(HeroManager) do\n        local hero = List.get(HeroManager, i)\n        if hero.effectNode ~= nil then\n            local position = hero.effectNode:getParent():convertToWorldSpace(hero.effectNode:getPosition())\n            hero.effectNode:setPosition(position)\n        end\n    end", "CodeBleu_score": 42.4958544828}, {"code": "local function updateParticlePos()\n\t    local heroList = HeroManager.getList()\n    for i=1, List.getSize(heroList) do\n        local hero = List.get(heroList, i)\n        local effectNode = hero:getEffectNode()\n        if effectNode ~= nil then\n            effectNode:setPosition(hero:getPosition())\n        end\n    end", "CodeBleu_score": 41.16297656559345}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n    if type == 1 then\n        audio.playSound(\\\"chooseRole/choose_knight.mp3\\\",false)\n    elseif type == 2 then\n        audio.playSound(\\\"chooseRole/choose_archer.mp3\\\",false)\n    elseif type == 3 then\n        audio.playSound(\\\"chooseRole/choose_mage.mp3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "CodeBleu_score": 55.30551369761483}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    --get hero type\n    local hero = self.layer:getChildByTag(sortorder[2])\n    local type = hero:getRaceType()\n    --play audio\n    local audio = nil\n    if hero._name == \\\"Knight\\\" then --warroir\n        audio = \\\"chooseRole/knight.mp3\\\"\n    elseif hero._name == \\\"Archer\\\" then --archer\n        audio = \\\"chooseRole/archer.mp3\\\"\n    elseif hero._name == \\\"Mage\\\" then --sorceress\n        audio = \\\"chooseRole/mage.mp3\\\"\n    end\n    --play audio\n    audioEngine:playEffect(audio)", "CodeBleu_score": 43.518091410338286}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t    local hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == 1 then\n\t\tself:playAudio(\\\"chooseRole/knight.mp3\\\")\n\telseif type == 2 then\n\t\tself:playAudio(\\\"chooseRole/archer.mp3\\\")\n\telseif type == 3 then\n\t\tself:playAudio(\\\"chooseRole/mage.mp3\\\")\n\tend", "CodeBleu_score": 52.639909156276275}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t    local knight = Knight.create()\n    knight:setPosition(cc.p(0, 0))\n    knight:setZOrder(gloableZOrder)\n    knight:setIdle()\n    knight:setScale(0.6)\n    gloableZOrder = gloableZOrder + 1\n    HeroManager:push(knight)\n\n    local mage = Mage.create()\n    mage:setPosition(cc.p(0, 0))\n    mage:setZOrder(gloableZOrder)\n    mage:setIdle()\n    mage:setScale(0.6)\n    gloableZOrder = gloableZOrder + 1\n    HeroManager:push(mage)\n\n    local archer = Archer.create()\n    archer:setPosition(cc.p(0, 0))\n    archer:setZOrder(gloableZOrder)\n    archer:setIdle()\n    archer:setScale(0.6)\n    gloableZOrder = gloableZOrder + 1\n    HeroManager:push(archer)", "CodeBleu_score": 53.03332162248058}, {"code": "function GameMaster:AddHeros()\n\t    local hero1 = Knight.create()\n    hero1:setPosition(cc.p(100, 100))\n    self:addChild(hero1)\n    hero1:setIdleMode()\n    HeroManager:push(hero1)\n", "CodeBleu_score": 19.07510246214817}, {"code": "function GameMaster:AddHeros()\n\t    local knight = Knight.create()\n    knight:setPosition(cc.p(100, 100))\n    self:getParent():addChild(knight)\n    knight:setIdleMode()\n    HeroManager:pushBack(knight)\n\n    local mage = Mage.create()\n    mage:setPosition(cc.p(100, 100))\n    self:getParent():addChild(mage)\n    mage:setIdleMode()\n    HeroManager:pushBack(mage)\n\n    local archer = Archer.create()\n    archer:setPosition(cc.p(100, 100))\n    self:getParent():addChild(archer)\n    archer:setIdleMode()\n    HeroManager:pushBack(archer)", "CodeBleu_score": 58.02304923101713}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t    local boss = Rat:create()\n    boss:setCameraMask(currentLayer:getCameraMask())\n    currentLayer:addChild(boss)\n    boss:setPosition(battleSiteX[3], 100)\n    boss:setFacing(180)\n    boss._goRight = false\n    boss:setAIEnabled(false)\n    boss:bounceOut()\n    boss:setAIEnabled(true)\n    List.pushlast(MonsterManager, boss)", "CodeBleu_score": 40.429655739071556}, {"code": "function GameMaster:showBoss()\n\t    local boss = Rat:create()\n    boss:setCameraMask(camera.c2)\n    currentLayer:addChild(boss)\n    boss:setPosition(battleSiteX[3], 100)\n    boss:setFacing(180)\n    boss._goRight = false\n    boss:setAIEnabled(false)\n    boss:bounceOut()\n    boss:setAIEnabled(true)\n    List.pushlast(MonsterManager, boss)", "CodeBleu_score": 38.2056311837652}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n\tboss:setCameraMask(1)\n\tcurrentLayer:addChild(boss)\n\tboss:setPosition(battleSiteX[3], 10)\n\tboss:setFacing(0)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tList.pushlast(MonsterManager, boss)", "CodeBleu_score": 29.802622435876895}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t    local animation = cc.Animation3D:create(file)\n    local animate = cc.Animate3D:create(animation, begin, finish)\n    animate:setSpeed(speed)\n    animate:retain()\n    return animate", "CodeBleu_score": 61.41297106926932}, {"code": "function createAnimation(file, begin, finish, speed)\n\t    local animation = cc.Animation3D:create(file)\n    local animate = cc.Animate3D:create(animation, begin, finish)\n    animate:setSpeed(speed)\n    animate:retain()\n    return animate", "CodeBleu_score": 61.41297106926932}, {"code": "function createAnimation(file, begin, finish, speed)\n\t    local animation = cc.Animation3D:create(file)\n    local animate = cc.Animate3D:create(animation, begin, finish)\n    animate:setSpeed(speed)\n    animate:retain()\n    return animate", "CodeBleu_score": 61.41297106926932}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t    for i = #table, 1, -1 do \n        table[i] = nil \n    end ", "CodeBleu_score": 36.78965711545449}, {"code": "function removeAll(table)\n\t    for i = #table, 1, -1 do\n        table[i] = nil\n    end", "CodeBleu_score": 37.06566914476821}, {"code": "function removeAll(table)\n\t    for i = #table, 1, -1 do \n        table[i] = nil \n    end ", "CodeBleu_score": 36.78965711545449}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t    local delayAction = cc.DelayTime:create(delay)\n    local sequence = cc.Sequence:create(delayAction, cc.CallFunc:create(func))\n    target:runAction(sequence)", "CodeBleu_score": 62.92030760919142}, {"code": "function delayExecute(target, func, delay)\n\t    local action = cc.DelayTime:create(delay)\n    local call = cc.CallFunc:create(func)\n    local seq = cc.Sequence:create(action, call)\n    target:runAction(seq)", "CodeBleu_score": 60.26990005733569}, {"code": "function delayExecute(target, func, delay)\n\t    local action = cc.DelayTime:create(delay)\n    local seq = cc.Sequence:create(action, cc.CallFunc:create(func))\n    target:runAction(seq)", "CodeBleu_score": 65.16860728099007}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t    local font = \"fonts/loading.fnt\"\n    local loadingText = cc.Label:createWithTTF(font,\\\"loading\\\",15)\n    loadingText:setPosition(self.size.width/2,self.size.height*0.1)\n    layer:addChild(loadingText)\n    local loadingText2 = cc.Label:createWithTTF(font,\\\"loading\\\",15)\n    loadingText2:setPosition(self.size.width/2,self.size.height*0.1)\n    loadingText2:setPositionX(loadingText:getPositionX()+loadingText:getContentSize().width)\n    layer:addChild(loadingText2)\n    self._loading = {loadingText,loadingText2}", "CodeBleu_score": 39.47963642517182}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    self._loading = {}\n    local loading = {\n        cc.Label:createWithTTF(\\\"loading\\\",\\\"fonts/Marker Felt.ttf\\\",100),\n        cc.Label:createWithTTF(\\\".\\\",\\\"fonts/Marker Felt.ttf\\\",100),\n        cc.Label:createWithTTF(\\\".\\\",\\\"fonts/Marker Felt.ttf\\\",100),\n        cc.Label:createWithTTF(\\\".\\\",\\\"fonts/Marker Felt.ttf\\\",100),\n    }\n    for i=1,table.getn(loading) do\n        local label = loading[i]\n        label:setPosition(self.size.width/2,self.size.height*0.2)\n        label:setColor(cc.c3b(0,0,0))\n        label:setOpacity(70)\n        layer:addChild(label)\n        self._loading[i] = label\n    end", "CodeBleu_score": 40.48503475062889}, {"code": "function LoadingScene:addLoadingText(layer)\n\t    local loading = {\n        cc.Label:createWithTTF(\\\"loading\\\",\\\"fonts/arial.ttf\\\",50),\n        cc.Label:createWithTTF(\\\".\\\",\\\"fonts/arial.ttf\\\",50),\n        cc.Label:createWithTTF(\\\".\\\",\\\"fonts/arial.ttf\\\",50),\n        cc.Label:createWithTTF(\\\".\\\",\\\"fonts/arial.ttf\\\",50)\n    }\n    for i,v in ipairs(loading) do\n        v:setPosition(self.size.width/2,self.size.height*0.1)\n        v:setPositionX(v:getPositionX()-i*30)\n        v:setColor(cc.c3b(255,255,255))\n        v:setOpacity(70)\n        layer:addChild(v)\n    end\n    self._loading = loading", "CodeBleu_score": 45.58287693486989}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t    local scene = MainMenuScene.new()\n    local layer = MainMenuLayer.create()\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 73.23519097368371}, {"code": "function MainMenuScene.create()\n\t    local scene = MainMenuScene.new()\n    local layer = MainMenuLayer.create()\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 73.23519097368371}, {"code": "function MainMenuScene.create()\n\t    local scene = MainMenuScene.new()\n    local layer = MainMenuScene.new()\n    scene:addChild(layer)\n    return scene", "CodeBleu_score": 75.30886775403287}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t    for _, hero in ipairs(HeroManager) do\n        if hero._alive and hero._collision then\n            solveCollision(object, hero)\n        end\n    end\n    for _, monster in ipairs(MonsterManager) do\n        if monster._alive and monster._collision then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 34.92628601840856}, {"code": "local function collision(object)\n\n\t    if object._type == \\\"hero\\\" then\n        for i,v in ipairs(HeroManager) do\n            if object ~= v and v._isAlive and v._isAlive then\n                solveCollision(object, v)\n            end\n        end\n    elseif object._type == \\\"monster\\\" then\n        for i,v in ipairs(MonsterManager) do\n            if object ~= v and v._isAlive and v._isAlive then\n                solveCollision(object, v)\n            end\n        end\n    end", "CodeBleu_score": 14.382896083516956}, {"code": "local function collision(object)\n\n\t    -- Check collisions with heroes\n    for _, hero in ipairs(HeroManager) do\n        if object:getPosition().x ~= hero:getPosition().x then\n            solveCollision(object, hero)\n        end\n    end\n\n    -- Check collisions with monsters\n    for _, monster in ipairs(MonsterManager) do\n        if object:getPosition().x ~= monster:getPosition().x then\n            solveCollision(object, monster)\n        end\n    end", "CodeBleu_score": 34.596457806467306}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t    for val = HeroManager.last, HeroManager.first, -1 do\n        local sprite = HeroManager[val]\n        if sprite._isalive then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            HeroManager:remove(val)\n        end\n    end\n\n    for val = MonsterManager.last, MonsterManager.first, -1 do\n        local sprite = MonsterManager[val]\n        if sprite._isalive then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            MonsterManager:remove(val)\n        end\n    end", "CodeBleu_score": 71.75934258751406}, {"code": "function collisionDetect(dt)\n\t    --[[\n    Iterate through HeroManager in reverse order\n    ]]\n    for i = HeroManager.last, HeroManager.first, -1 do\n        local sprite = HeroManager[i]\n        if sprite._isalive then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            sprite:removeFromParent()\n            HeroManager:remove(i)\n        end\n    end\n\n    --[[\n    Iterate through MonsterManager in reverse order\n    ]]\n    for i = MonsterManager.last, MonsterManager.first, -1 do\n        local sprite = MonsterManager[i]\n        if sprite._isalive then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            sprite:removeFromParent()\n            MonsterManager:remove(i)\n        end\n    end", "CodeBleu_score": 71.41354465864941}, {"code": "function collisionDetect(dt)\n\t    for val = HeroManager.last, HeroManager.first, -1 do\n        local sprite = HeroManager[val]\n        if sprite._isalive then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            HeroManager:remove(val)\n            sprite:removeFromParent()\n        end\n    end\n\n    for val = MonsterManager.last, MonsterManager.first, -1 do\n        local sprite = MonsterManager[val]\n        if sprite._isalive then\n            collision(sprite)\n            isOutOfBound(sprite)\n        else\n            MonsterManager:remove(val)\n            sprite:removeFromParent()\n        end\n    end", "CodeBleu_score": 77.55495086425704}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t    BasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\n    self:specialAttackSoundEffects()", "CodeBleu_score": 84.83328024239812}, {"code": "function Actor:specialAttack()\n\t    BasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n    self:specialAttackSoundEffects()", "CodeBleu_score": 84.83328024239812}, {"code": "function Actor:specialAttack()\n\t    BasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n    self:specialAttackSoundEffects()", "CodeBleu_score": 84.83328024239812}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t    if trueFalse then\n        if not self._angryFace then\n            self._sprite3d:setTexture(\\\"model/slime/baozi.jpg\\\")\n            self._angryFace = true\n        end\n    else\n        if self._angryFace then\n            self._sprite3d:setTexture(\\\"model/slime/slime.png\\\")\n            self._angryFace = false\n        end\n    end", "CodeBleu_score": 50.43130186387573}, {"code": "function Slime:angryFace(trueFalse)\n\t    if self._angryFace ~= trueFalse then\n        if trueFalse then\n            self._sprite3d:setTexture(\\\"model/slime/baozi.jpg\\\")\n        else\n            self._sprite3d:setTexture(\\\"model/slime/slime.jpg\\\")\n        end\n        self._angryFace = trueFalse\n    end", "CodeBleu_score": 68.61714118536936}, {"code": "function Slime:angryFace(trueFalse)\n\t    if self._angryFace ~= trueFalse then\n        if trueFalse then\n            self._sprite3d:setTexture(\\\"model/slime/baozi.jpg\\\")\n        else\n            self._sprite3d:setTexture(\\\"model/slime/slime.jpg\\\")\n        end\n        self._angryFace = trueFalse\n    end", "CodeBleu_score": 68.61714118536936}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val charString = char.toString()\n    val bounds = getCharBounds(charString)\n    val width = ceil(bounds.width).toInt()\n    val height = ceil(bounds.height).toInt()\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(charString, -bounds.left, -bounds.top, paint)\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    bitmap.getPixels(pixmap.pixels, 0, width, 0, 0, width, height)\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 45.08360131524495}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val text = char.toString()\n    val bounds = getTextBounds(text)\n    val bitmap = Bitmap.createBitmap(bounds.width, bounds.height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(text, 0f, bounds.height.toFloat(), paint)\n    val pixels = IntArray(bitmap.width * bitmap.height)\n    bitmap.getPixels(pixels, 0, bitmap.width, 0, 0, bitmap.width, bitmap.height)\n    bitmap.recycle()\n    return Pixmap(bitmap.width, bitmap.height, Pixmap.Format.RGBA8888).apply {\n        setPixels(pixels)\n    }\n}", "CodeBleu_score": 34.26178515907158}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\t    val text = char.toString()\n    val bounds = Rect()\n    paint.getTextBounds(text, 0, text.length, bounds)\n    val width = ceil(bounds.width()).toInt()\n    val height = ceil(bounds.height()).toInt()\n    val bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\n    val canvas = Canvas(bitmap)\n    canvas.drawText(text, -bounds.left.toFloat(), -bounds.top.toFloat(), paint)\n    val pixels = IntArray(width * height)\n    bitmap.getPixels(pixels, 0, width, 0, 0, width, height)\n    val pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\n    pixmap.setPixels(pixels, 0, width, 0, 0, width, height)\n    bitmap.recycle()\n    return pixmap\n}", "CodeBleu_score": 53.777415256300486}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val filename = uri.lastPathSegment ?: \"Game.json\"\n        val request = Request(\n            onFileChosen = { uri ->\n                try {\n                    contentResolver.openOutputStream(uri)?.use { outputStream ->\n                        outputStream.write(data.toByteArray())\n                    }\n                    onSaved(uri.toString())\n                } catch (ex: Exception) {\n                    onError(ex)\n                }\n            },\n            onError = onError\n        )\n        requests[requestCode] = request\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \\\"application/json\\\"\n            putExtra(Intent.EXTRA_TITLE, filename)\n        }\n        activity.startActivityForResult(intent, requestCode)\n        requestCode++\n    }", "CodeBleu_score": 59.97339566494517}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t", "CodeBleu_score": 13.92206817903272}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val uri = Uri.parse(suggestedLocation)\n        val filename = uri.lastPathSegment\n        val request = Request(\n            onFileChosen = { uri ->\n                try {\n                    contentResolver.openOutputStream(uri)?.use { outputStream ->\n                        outputStream.write(data.toByteArray())\n                        onSaved(uri.toString())\n                    }\n                } catch (ex: Exception) {\n                    onError(ex)\n                }\n            },\n            onError = onError\n        )\n        requests[requestCode] = request\n        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n            addCategory(Intent.CATEGORY_OPENABLE)\n            type = \\\"*/*\\\"\n            putExtra(Intent.EXTRA_TITLE, filename)\n        }\n        activity.startActivityForResult(intent, requestCode)\n        requestCode++\n    }", "CodeBleu_score": 59.08163356048735}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val data = stream!!.reader().use { it.readText() }\n                onLoaded(data, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 91.43876112706137}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val data = stream!!.reader().readText()\n                onLoaded(data, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 86.25781917534314}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri)\n                val data = stream!!.reader().use { it.readText() }\n                onLoaded(data, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 91.43876112706137}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \\\"application/json\\\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \\\"content\\\") putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 67.16008723579661}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \\\"application/json\\\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \\\"content\\\") putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 67.16008723579661}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\t    val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n        addCategory(Intent.CATEGORY_OPENABLE)\n        type = \\\"application/json\\\"\n        putExtra(Intent.EXTRA_TITLE, fileName)\n        if (uri.scheme == \\\"content\\\") putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n    }\n    activity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 67.16008723579661}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    val notificationManager = NotificationManagerCompat.from(appContext)\n    val notificationChannel = NotificationChannel(\n        NOTIFICATION_CHANNEL_ID_INFO,\n        \"Unciv Info\",\n        NotificationManager.IMPORTANCE_DEFAULT\n    ).apply {\n        description = \"Unciv info notifications\"\n        setShowBadge(true)\n        enableVibration(true)\n        enableLights(true)\n        lightColor = Color.GREEN\n        lockscreenVisibility = Notification.VISIBILITY_PUBLIC\n    }\n    notificationManager.createNotificationChannel(notificationChannel)\n}", "CodeBleu_score": 33.63439265014578}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val channel = NotificationChannel(\n            NOTIFICATION_CHANNEL_ID_INFO,\n            \"Unciv Info\",\n            NotificationManager.IMPORTANCE_DEFAULT\n        )\n        channel.description = \"Unciv Info Notifications\"\n        channel.enableLights(false)\n        channel.enableVibration(false)\n        channel.lockscreenVisibility = Notification.VISIBILITY_PUBLIC\n        val notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 43.81427389688323}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\t    // Create the NotificationChannel, but only on API 26+ because\n    // the NotificationChannel class is new and not in the support library\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n        val name = appContext.getString(R.string.notification_channel_info)\n        val descriptionText = appContext.getString(R.string.notification_channel_info_description)\n        val importance = NotificationManager.IMPORTANCE_DEFAULT\n        val channel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, name, importance).apply {\n            description = descriptionText\n        }\n        // Register the channel with the system\n        val notificationManager: NotificationManager =\n            appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n        notificationManager.createNotificationChannel(channel)\n    }\n}", "CodeBleu_score": 56.68130018729012}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\t    val settings = getDefaultSettings()\n    val packer = TexturePacker(settings)\n    val mods = File(workingPath + \"/mods\")\n    if (mods.exists()) {\n        mods.listFiles()?.filter { !it.isHidden }?.forEach {\n            packModImages(packer, it)\n        }\n    }\n    packImages(packer, workingPath)\n}", "CodeBleu_score": 40.95041339509491}, {"code": "fun packImages(workingPath: String){\n\t    val settings = getDefaultSettings()\n    val packer = TexturePacker(workingPath, settings)\n    packer.pack(packer.inputDir, packer.outputDir, \"game\")\n    val modsDir = File(workingPath + File.separator + \"mods\")\n    if (modsDir.exists()) {\n        for (mod in modsDir.listFiles()) {\n            if (mod.isDirectory && !mod.name.startsWith(\".\")) {\n                try {\n                    packer.inputDir = mod.path + File.separator + \"images\"\n                    packer.outputDir = mod.path + File.separator + \"packedImages\"\n                    packer.pack(packer.inputDir, packer.outputDir, \"game\")\n                } catch (ex: Exception) {\n                    println(\"Error packing images for mod ${mod.name}: ${ex.message}\")\n                }\n            }\n        }\n    }\n}", "CodeBleu_score": 52.721189791002764}, {"code": "fun packImages(workingPath: String){\n\t", "CodeBleu_score": 1.4349816505955142}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t    val worldScreen = UncivGame.Current.worldScreen\n    if (worldScreen != null) {\n        val newWorldScreen = UncivGame.Current.loadGame(worldScreen.gameInfo)\n        newWorldScreen.setInitialState(worldScreen.getRestoreState())\n    }\n}", "CodeBleu_score": 33.409350921677415}, {"code": "suspend fun reloadWorldscreen(){\n\t    if (worldScreen != null) {\n        val newWorldScreen = loadGame(worldScreen!!.gameInfo)\n        worldScreen = newWorldScreen\n    }\n}", "CodeBleu_score": 49.31929740837635}, {"code": "suspend fun reloadWorldscreen(){\n\t    val worldScreen = UncivGame.Current.worldScreen\n    if (worldScreen != null) {\n        val newWorldScreen = UncivGame.Current.loadGame(worldScreen.gameInfo)\n        newWorldScreen.worldScreen = worldScreen.worldScreen\n        newWorldScreen.game.worldScreen = worldScreen.worldScreen\n        UncivGame.Current.setWorldScreen(newWorldScreen)\n    }\n}", "CodeBleu_score": 33.661558185884324}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenu = MainMenuScreen()\n    setAsRootScreen(mainMenu)\n    return mainMenu\n}", "CodeBleu_score": 41.519678436437005}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenu = MainMenuScreen()\n    setAsRootScreen(mainMenu)\n    return mainMenu\n}", "CodeBleu_score": 41.519678436437005}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\t    val mainMenu = MainMenuScreen()\n    setAsRootScreen(mainMenu)\n    return mainMenu\n}", "CodeBleu_score": 41.519678436437005}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t        val maxBounds = getMaximumWindowBounds()\n        val windowSize = settings.windowSize.coerceAtMost(maxBounds)\n        val windowConfig = Lwjgl3ApplicationConfiguration().apply {\n            setWindowSizeLimits(windowSize.x, windowSize.y, windowSize.x, windowSize.y)\n            setWindowSize(windowSize.x, windowSize.y)\n            setWindowPosition(settings.windowPosition.x, settings.windowPosition.y)\n        }\n        val graphicsMode = Lwjgl3Graphics.getGraphics().apply {\n            setWindowedMode(windowConfig.windowWidth, windowConfig.windowHeight)\n        }\n        return windowSize == maxBounds\n    }", "CodeBleu_score": 42.52196120486995}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t        val window = getWindow() ?: return false\n        val maxWindowBounds = getMaxWindowBounds()\n        val windowSize = getWindowSize(settings, maxWindowBounds)\n        window.setSize(windowSize.width, windowSize.height)\n        val config = getConfig()\n        config.setWindowedMode(windowSize.width, windowSize.height)\n        Gdx.graphics.setWindowedMode(windowSize.width, windowSize.height)\n        return windowSize == maxWindowBounds\n    }", "CodeBleu_score": 51.032476125779255}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t        val maxBounds = getMaxBounds()\n        val windowWidth = settings.windowSize.x.roundToInt().coerceIn(0, maxBounds.width)\n        val windowHeight = settings.windowSize.y.roundToInt().coerceIn(0, maxBounds.height)\n        val window = getWindow()\n        window?.setSize(windowWidth, windowHeight)\n        val config = Lwjgl3ApplicationConfiguration()\n        config.setWindowedMode(windowWidth, windowHeight)\n        Gdx.graphics.setWindowedMode(windowWidth, windowHeight)\n        return windowWidth == maxBounds.width && windowHeight == maxBounds.height\n    }", "CodeBleu_score": 48.101702624937396}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\t    val entries: Map<String,String> = try {\n        val osReleaseFile = FileHandle(File(\"/etc/os-release\"))\n        val osReleaseContent = osReleaseFile.readString()\n        val lines = osReleaseContent.split('\n')\n        val entries = lines.mapNotNull { line ->\n            val parts = line.split('=')\n            if (parts.size == 2) {\n                parts[0] to parts[1].removeSurrounding(\"\\\"\")\n            } else {\n                null\n            }\n        }.toMap()\n        entries\n    } catch (_: Throwable) { mapOf() }\n\n    if (\"NAME\" !in entries) return \"\"\n\n    return entries[\"PRETTY_NAME\"] ?: \"${entries[\"NAME\"]} ${entries[\"VERSION\"]}\"\n}", "CodeBleu_score": 56.924474645522814}, {"code": "private fun getLinuxDistro(): String{\n\t    val entries: Map<String, String> = try {\n        val osReleaseFile = FileHandle(\"etc/os-release\")\n        val lines = osReleaseFile.readString().split('\n')\n        lines.mapNotNull { line ->\n            val parts = line.split('=')\n            if (parts.size == 2) parts[0] to parts[1].trim('\"') else null\n        }.toMap()\n    } catch (e: Exception) {\n        mapOf()\n    }\n    if (\"NAME\" !in entries) return \"\"\n    return entries[\"PRETTY_NAME\"] ?: \"${entries[\"NAME\"]} ${entries[\"VERSION\"]}\"\n}", "CodeBleu_score": 56.519510793055936}, {"code": "private fun getLinuxDistro(): String{\n\t    val entries: Map<String,String> = try {\n        val osRelease = FileHandle(\"etc/os-release\").readString()\n        osRelease.split('\n').mapNotNull {\n            it.removeSuffix(\"\\r\").run {\n                if (startsWith(\"    \") || startsWith(\"\\t\")) trim() else null\n            }\n        }.map { it.split(\"=\") }.filter { it.size == 2 }.associate { it[0] to it[1] }\n    } catch (_: Throwable) { mapOf() }\n\n    if (\"NAME\" !in entries) return \"\"\n\n    return entries[\"PRETTY_NAME\"] ?: entries[\"NAME\"]!! + (entries[\"VERSION\"]?.run { \" Version $this\" } ?: \"\")\n}", "CodeBleu_score": 64.84002017884166}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t    try {\n        // Attempt to use the primary method for flashing the window\n        if (GLFWNativeWin32.glfwRequestWindowAttention(window?.handle) != 0) return\n    } catch (e: Exception) {\n        // If the primary method fails, log the error and try the fallback method\n        Log.error(\"Failed to flash window using GLFWNativeWin32\", e)\n        try {\n            // Use the fallback method to flash the window\n            val hwnd = User32.INSTANCE.GetForegroundWindow()\n            val flashInfo = WinUser.FLASHWINFO()\n            flashInfo.cbSize = flashInfo.size()\n            flashInfo.hwnd = hwnd\n            flashInfo.dwFlags = WinUser.FLASHW_ALL\n            flashInfo.uCount = WinUser.FLASHW_TIMERNOFGUIDER\n            flashInfo.dwTimeout = 0\n            User32.INSTANCE.FlashWindowEx(flashInfo)\n        } catch (e: Exception) {\n            // If the fallback method fails, log the error\n            Log.error(\"Failed to flash window using User32\", e)\n        }\n    }\n}", "CodeBleu_score": 53.709496620292676}, {"code": "private fun flashWindow(){\n\t    val window = (Gdx.graphics as? Lwjgl3Graphics)?.window\n    val windowHandle = window?.windowHandle\n    if (windowHandle != null) {\n        try {\n            // Try to use the primary method for flashing the window\n            GLFWNativeWin32.glfwRequestWindowAttention(windowHandle)\n        } catch (e: Exception) {\n            // If the primary method fails, try the fallback method\n            try {\n                // Get the window handle as a pointer\n                val hWnd = Pointer.createConstant(windowHandle)\n                // Create a new instance of the User32 class\n                val user32 = Native.load(\"user32\", User32::class.java)\n                // Create a new instance of the WinUser class\n                val winUser = Native.load(\"user32\", WinUser::class.java)\n                // Get the current foreground window\n                val foregroundWindow = user32.GetForegroundWindow()\n                // Flash the window if it is not the foreground window\n                if (foregroundWindow != hWnd) {\n                    // Set the window's flash status\n                    winUser.FLASHWINFO.ByReference().use { flashInfo ->\n                        flashInfo.hwnd = hWnd\n                        flashInfo.dwFlags = WinUser.FLASHW_ALL\n                        flashInfo.uCount = WinNT.DWORD(3)\n                        flashInfo.dwTimeout = WinNT.DWORD(0)\n                        user32.FlashWindowEx(flashInfo)\n                    }\n                }\n            } catch (e: Exception) {\n                // If the fallback method fails, log the error\n                Log.error(\"Error flashing window\", e)\n            }\n        }\n    }\n}", "CodeBleu_score": 44.526920731124186}, {"code": "private fun flashWindow(){\n\t    try {\n        // On Windows, we use the Windows API directly\n        if (Native.isWindows()) {\n            val hwnd = User32.INSTANCE.GetActiveWindow()\n            val flashInfo = WinUser.FLASHWINFO()\n            flashInfo.cbSize = flashInfo.size()\n            flashInfo.hwnd = hwnd\n            flashInfo.dwFlags = WinUser.FLASHW_ALL or WinUser.FLASHW_TIMERNOFG\n            flashInfo.uCount = 0\n            flashInfo.dwTimeout = 0\n            User32.INSTANCE.FlashWindowEx(flashInfo)\n        } else {\n            // On other platforms, we use GLFW's API\n            GLFWNativeWin32.glfwRequestWindowAttention(window?.context)\n        }\n    } catch (e: Exception) {\n        Log.error(\"Error flashing window\", e)\n    }\n}", "CodeBleu_score": 50.965208974464424}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t", "CodeBleu_score": 1.3013707544357997}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t\ttry {\n\t\t\tFile sharedPrefs = getSharedPreferences(\"shatteredpixel.prefs\", 0).getFileStreamPath(\"shatteredpixel.prefs\");\n\t\t\tdata.addFile(sharedPrefs);\n\t\t\tFile rankings = new File(Rankings.getSaveFilePath());\n\t\t\tif (rankings.exists()) {\n\t\t\t\tdata.addFile(rankings);\n\t\t\t}\n\t\t\tFile badges = new File(Badges.getSaveFilePath());\n\t\t\tif (badges.exists()) {\n\t\t\t\tdata.addFile(badges);\n\t\t\t}\n\t\t\tFile journal = new File(Journal.getSaveFilePath());\n\t\t\tif (journal.exists()) {\n\t\t\t\tdata.addFile(journal);\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}", "CodeBleu_score": 20.795763457496353}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\t\tsuper.onFullBackup(data);\n\n\t\tFile sharedPrefs = getSharedPrefsFile();\n\t\tif (sharedPrefs.exists()) {\n\t\t\taddFileToBackup(data, sharedPrefs, \"shared_prefs\");\n\t\t}\n\n\t\tFile badges = getBadgesFile();\n\t\tif (badges.exists()) {\n\t\t\taddFileToBackup(data, badges, \"badges\");\n\t\t}\n\n\t\tFile rankings = getRankingsFile();\n\t\tif (rankings.exists()) {\n\t\t\taddFileToBackup(data, rankings, \"rankings\");\n\t\t}\n\n\t\tFile journal = getJournalFile();\n\t\tif (journal.exists()) {\n\t\t\taddFileToBackup(data, journal, \"journal\");\n\t\t}\n\t}", "CodeBleu_score": 21.687248202871164}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager cm = (ConnectivityManager) AndroidLauncher.instance.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo networkInfo = cm.getActiveNetworkInfo();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return networkInfo != null && !networkInfo.isConnected();\n    } else {\n        return networkInfo != null && networkInfo.isConnected() && (networkInfo.getType() == ConnectivityManager.TYPE_WIFI\n                || networkInfo.getType() == ConnectivityManager.TYPE_WIMAX\n                || networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH\n                || networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 74.41727528159522}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager cm = (ConnectivityManager) AndroidLauncher.instance.getSystemService(Context.CONNECTIVITY_SERVICE);\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return cm.isActiveNetworkMetered();\n    } else {\n        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n        return activeNetwork != null && activeNetwork.isConnected() && (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 91.3691550774328}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t    ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);\n    NetworkInfo activeNetwork = cm.getActiveNetworkInfo();\n    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n        return activeNetwork != null && !activeNetwork.isConnected();\n    } else {\n        return activeNetwork != null && activeNetwork.isConnected() && (activeNetwork.getType() == ConnectivityManager.TYPE_WIFI || activeNetwork.getType() == ConnectivityManager.TYPE_WIMAX || activeNetwork.getType() == ConnectivityManager.TYPE_BLUETOOTH || activeNetwork.getType() == ConnectivityManager.TYPE_ETHERNET);\n    }\n}", "CodeBleu_score": 75.55615654871787}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t\n\t\tSample.INSTANCE.play( Assets.SND_DRINK );\n\n\t\thero.cure();\n\n\t\tfor (Item item : hero.belongings.backpack.items) {\n\t\t\tif (item instanceof Ankh) {\n\t\t\t\t((Ankh)item).satisfy( hero );\n\t\t\t} else if (item instanceof Waterskin) {\n\t\t\t\t((Waterskin)item).satisfy( hero );\n\t\t\t} else if (item instanceof ScrollOfRemoveCurse) {\n\t\t\t\t((ScrollOfRemoveCurse)item).satisfy( hero );\n\t\t\t}\n\t\t}\n\n\t\tif (hero.belongings.backpack.items.contains(Item.Kind.POTION)) {\n\t\t\t((PotionOfHealing)hero.belongings.backpack.items.get(Item.Kind.POTION)).satisfy( hero );\n\t\t}\n\n\t\thero.belongings.uncurseEquipped();\n\n\t\thero.sprite.emitter().burst( ShadowParticle.CURSE, 5 );\n\n\t\tif (hero.HT < hero.HTMAX) {\n\t\t\thero.HP = hero.HTMAX;\n\t\t\thero.sprite.emitter().burst( Speck.factory( Speck.HEALING ), 4 );\n\t\t\thero.sprite.emitter().start( CharSprite.CURSE, 0.2f, 3 );\n\t\t\thero.sprite.emitter().start( CharSprite.HEART, 0.2f, 3 );\n\t\t\thero.sprite.emitter().pour( ShaftParticle.CURSE, 0.7f );\n\t\t\thero.sprite.emitter().pour( ShaftParticle.CURSE, 0.7f );\n\t\t\thero.sprite.emitter().pour( ShaftParticle.CURSE, 0.7f );\n\t\t}\n\n\t\thero.interrupt();\n\n\t\tGLog.i( Messages.get(this, \"satisfied\") );\n\n\t\treturn true;\n}", "CodeBleu_score": 43.81941433013778}, {"code": "protected boolean affectHero( Hero hero ){\n\t\n\t\tSample.INSTANCE.play( Assets.SND_DRINK );\n\t\thero.cure();\n\t\thero.belongings.uncurseEquipped();\n\t\thero.belongings.uncurseEquipped();\n\t\thero.belongings.uncurseEquipped();\n\n\t\tif (hero.HT > 0) {\n\t\t\thero.HT = hero.HT + 100;\n\t\t\tif (hero.HT > hero.HTmax) hero.HT = hero.HTmax;\n\t\t\thero.sprite.emitter().burst( Speck.factory( Speck.HEALING ), 1 );\n\t\t\thero.sprite.showStatus( CharSprite.POSITIVE, Messages.get(this, \\\"effect\\\") );\n\t\t\thero.sprite.emitter().start( ShadowParticle.UP, 0.2f, 3 );\n\t\t\thero.sprite.emitter().start( ShaftParticle.FACTORY, 0.7f, 3 );\n\t\t\thero.spend( TIME_TO_DRINK );\n\t\t\thero.busy();\n\t\t\tGLog.i( Messages.get(this, \\\"satisfied\\\") );\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}", "CodeBleu_score": 45.00668885578198}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\n\tif (item instanceof Waterskin && !((Waterskin)item).isFull()) {\n\t\t((Waterskin)item).fill();\n\t\tCellEmitter.get( pos ).start( ShadowParticle.UP, 0.5f, 0.2f );\n\t\tSample.INSTANCE.play( Assets.Sounds.WATER, 0.5f, 0.5f, 1.0f );\n\t\treturn item;\n\n\t} else if (item instanceof Ankh && !((Ankh)item).isBlessed()) {\n\t\t((Ankh)item).bless();\n\t\tCellEmitter.get( pos ).burst( ShadowParticle.UP, 5 );\n\t\tSample.INSTANCE.play( Assets.Sounds.BLESS, 0.5f, 0.5f, 1.0f );\n\t\treturn item;\n\n\t} else if (item.cursed()) {\n\t\titem.uncurse();\n\t\tCellEmitter.get( pos ).burst( ShadowParticle.CURSE, 5 );\n\t\tSample.INSTANCE.play( Assets.Sounds.BLESS, 0.5f, 0.5f, 1.0f );\n\t\treturn item;\n\n\t} else {\n\t\treturn null;\n\t}\n}", "CodeBleu_score": 53.8928450737858}, {"code": "protected Item affectItem( Item item, int pos ){\n\t", "CodeBleu_score": 5.531172364104125}, {"code": "protected Item affectItem( Item item, int pos ){\n\t\n\t\tif (item instanceof Waterskin && !((Waterskin)item).isFull()) {\n\n\t\t\t((Waterskin)item).fill();\n\t\t\titem.sprite.drop();\n\t\t\titem.sprite.parent.add( new BlobEmitter( item.pos, 0.5f, 0.2f ) );\n\t\t\titem.sprite.parent.add( new CellEmitter( item.pos, 0.25f, 0.2f ) );\n\t\t\tSample.INSTANCE.play( Assets.Sounds.BUBBLE2 );\n\n\t\t\treturn item;\n\n\t\t} else if (item instanceof Ankh && !((Ankh)item).isBlessed()) {\n\n\t\t\t((Ankh)item).bless();\n\t\t\titem.sprite.drop();\n\t\t\titem.sprite.parent.add( new BlobEmitter( item.pos, 0.5f, 0.2f ) );\n\t\t\titem.sprite.parent.add( new CellEmitter( item.pos, 0.25f, 0.2f ) );\n\t\t\tSample.INSTANCE.play( Assets.Sounds.BUBBLE2 );\n\n\t\t\treturn item;\n\n\t\t} else if (item instanceof ScrollOfRemoveCurse && !((ScrollOfRemoveCurse)item).isEquipped(Dungeon.hero)) {\n\n\t\t\t((ScrollOfRemoveCurse)item).activate( Dungeon.hero );\n\t\t\titem.sprite.drop();\n\t\t\titem.sprite.parent.add( new BlobEmitter( item.pos, 0.5f, 0.2f ) );\n\t\t\titem.sprite.parent.add( new CellEmitter( item.pos, 0.25f, 0.2f ) );\n\t\t\tSample.INSTANCE.play( Assets.Sounds.BUBBLE2 );\n\n\t\t\treturn item;\n\n\t\t} else {\n\n\t\t\treturn null;\n\n\t\t}\n\t}", "CodeBleu_score": 59.464229498013566}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t\n    // Apply the specified buff to the enemy\n    enemy.buff(buffCls);\n\n    // Check if the enemy was previously aligned as an enemy\n    if (enemy.alignment == Char.Alignment.ENEMY) {\n        // If the enemy was previously an enemy, roll for loot\n        enemy.die(hero);\n\n        // Update kill statistics\n        Statistics.add(Statistics.Kills.valueOf(enemy.getClass().getSimpleName()));\n\n        // Process ascension challenges\n        hero.processAscensionChallenges();\n    }\n\n    // Grant experience to the hero based on level comparison\n    hero.spend(hero.exp(enemy.lvl));\n\n    // Buff the hero with additional energy if they are a Monk subclass\n    if (hero.subClass == HeroSubClass.MONK) {\n        hero.buff(Energy.class).affect(1f, 1f);\n    }\n}", "CodeBleu_score": 26.241125398314214}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t    enemy.buff(buffCls);\n    if (enemy.alignment == Char.Alignment.ENEMY) {\n        if (enemy instanceof Mimic) {\n            ((Mimic) enemy).die(hero);\n        } else {\n            enemy.die(hero);\n        }\n        Statistics.loot(enemy, hero);\n        Statistics.recordDeath(enemy);\n        hero.sprite.emitter().burst(Speck.factory(Speck.EXCLAMATION, 10), 3);\n        hero.sprite.showStatus(CharSprite.NEUTRAL, enemy.name);\n        if (hero.subClass == HeroSubClass.MONK) {\n            hero.belongings.chargeEnergy(1.0f);\n        }\n        if (hero.isAlive()) {\n            hero.spend(hero.TIME_TO_PRAY);\n            hero.busy();\n        }\n    }\n    if (hero.subClass == HeroSubClass.MONK && hero.isAlive()) {\n        hero.sprite.emitter().burst(Speck.factory(Speck.ENERGY), 10);\n        hero.sprite.showStatus(CharSprite.POSITIVE, Messages.get(HeroSubClass.Monk.class, \"energy\"));\n    }\n    Badges.validateAllRandom();\n}", "CodeBleu_score": 34.898260076291734}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n\t\t\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\t\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t\t\t}\n\n\t\t\tif (enemy.buff(AscensionBuffBlocker.class) == null) {\n\t\t\t\tfor (Class<? extends Mob> cls : modifiers.keySet()) {\n\t\t\t\t\tif (cls.isAssignableFrom(enemy.getClass())) {\n\t\t\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).reduceStacks(modifiers.get(cls));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks <= 1) {\n\t\t\t\tGLog.w(Messages.get(AscensionChallenge.class, \"weakening\"));\n\t\t\t}\n\n\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks >= Dungeon.hero.lvl + 1) {\n\t\t\t\tDungeon.hero.earnExperience(Dungeon.hero.lvl * 100);\n\t\t\t\tDungeon.hero.spend(100);\n\t\t\t}\n\n\t\t\tDungeon.hero.buffIndicators.refresh();\n\t\t}\n\t}", "CodeBleu_score": 32.66042124315963}, {"code": "public static void processEnemyKill(Char enemy){\n\t", "CodeBleu_score": 0.5739817495090933}, {"code": "public static void processEnemyKill(Char enemy){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) != null) {\n        if (enemy instanceof Ratmogrify.TransmogRat) {\n            enemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n        }\n        if (enemy.buff(AscensionBuffBlocker.class) != null) {\n            return;\n        }\n        for (Class<? extends Mob> cls : modifiers.keySet()) {\n            if (cls.isAssignableFrom(enemy.getClass())) {\n                Dungeon.hero.buff(AscensionChallenge.class).reduceStacks(modifiers.get(cls));\n                break;\n            }\n        }\n        if (Dungeon.hero.buff(AscensionChallenge.class).stacks < 1f) {\n            GLog.w(Messages.get(AscensionChallenge.class, \"weakening\"));\n        }\n        if (Dungeon.hero.lvl == Dungeon.depth) {\n            Dungeon.hero.spend(10);\n        }\n        BuffIndicator.refreshHero();\n    }\n}", "CodeBleu_score": 35.857332660954796}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) == null) {\n\t\treturn m.EXP;\n\t}\n\n\tif (m instanceof Ratmogrify.TransmogRat) {\n\t\tm = ((Ratmogrify.TransmogRat) m).getOriginal();\n\t\tif (m == null) {\n\t\t\treturn m.EXP;\n\t\t}\n\t}\n\n\tif (m.buff(AscensionBuffBlocker.class) != null) {\n\t\treturn m.EXP;\n\t}\n\n\tif (m instanceof RipperDemon) {\n\t\treturn 10;\n\t}\n\n\tif (m instanceof Ghoul) {\n\t\treturn 7;\n\t}\n\n\tif (m instanceof Rat || m instanceof Snake || m instanceof Gnoll || m instanceof Swarm || m instanceof Crab || m instanceof Slime) {\n\t\treturn Math.max(13, m.EXP);\n\t}\n\n\treturn m.EXP;\n}", "CodeBleu_score": 60.779062204681146}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.hero.buff(AscensionChallenge.class) == null) {\n        return m.EXP;\n    }\n\n    if (m instanceof Ratmogrify.TransmogRat) {\n        m = ((Ratmogrify.TransmogRat) m).getOriginal();\n        if (m == null) {\n            return m.EXP;\n        }\n    }\n\n    if (m.buff(AscensionBuffBlocker.class) != null) {\n        return m.EXP;\n    }\n\n    if (m instanceof RipperDemon) {\n        return 10;\n    } else if (m instanceof Ghoul) {\n        return 7;\n    } else if (m.EXP >= 13) {\n        return m.EXP;\n    } else {\n        return 13;\n    }\n}", "CodeBleu_score": 66.19303867366341}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t    if (Dungeon.hero == null || Dungeon.hero.buff(AscensionChallenge.class) == null) {\n        return m.EXP;\n    }\n\n    if (m instanceof Ratmogrify.TransmogRat) {\n        m = ((Ratmogrify.TransmogRat) m).getOriginal();\n        if (m == null) return m.EXP;\n    }\n\n    if (m.buff(AscensionBuffBlocker.class) != null) {\n        return m.EXP;\n    }\n\n    if (m instanceof RipperDemon) {\n        return 10;\n    } else if (m instanceof Ghoul) {\n        return 7;\n    } else if (m instanceof Rat || m instanceof Snake || m instanceof Gnoll || m instanceof Swarm || m instanceof Crab || m instanceof Slime || m instanceof Skeleton || m instanceof Thief || m instanceof DM100 || m instanceof Guard || m instanceof Necromancer || m instanceof Bat || m instanceof Brute || m instanceof Shaman || m instanceof Spinner || m instanceof DM200 || m instanceof Elemental || m instanceof Warlock || m instanceof Monk || m instanceof Golem || m instanceof Succubus || m instanceof Eye || m instanceof Scorpio) {\n        return Math.max(13, m.EXP);\n    } else {\n        return m.EXP;\n    }\n}", "CodeBleu_score": 57.26490792830796}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\t\t\tcount++;\n\t\tcomboTime = initialComboTime;\n\t\tinitialComboTime += (count + 1) * 5f * (1f + (Dungeon.hero.talentPoints(Talent.CLEAVE) / 10f));\n\n\t\tActionIndicator.instance.trigger(this, enemy.pos);\n\t\tAttackIndicator.instance.trigger(this, enemy.pos);\n\n\t\tvalidateMasteryCombos(enemy);\n\n\t\tGLog.i( Messages.get(this, \"combo_count\", count) );\n\n\t\tDungeon.hero.buffIndicator.refreshHero();\n\t}", "CodeBleu_score": 42.189162229023495}, {"code": "public void hit( Char enemy ){\n\t\t\tcount++;\n\t\tcomboTime = initialComboTime;\n\t\tif (enemy.isAlive() && !(enemy instanceof DwarfKing) && !enemy.hasBuff( Corruption.class )) {\n\t\t\tinitialComboTime += 0.5f * (1 + (float)Talent.Cleave.pointsIn( this ));\n\t\t}\n\t\tGameScene.updateActionIndicator( ActionIndicator.Action.COMBAT );\n\t\tvalidateMasteryCombos();\n\t\tGLog.w( Messages.get( this, \"count\", count ) );\n\t\tDungeon.hero.sprite.parent.updateBuffIndicator();\n\t}", "CodeBleu_score": 38.55576579020011}, {"code": "public void hit( Char enemy ){\n\t\n\tcount++;\n\n\tif (enemy.isAlive() || enemy.hasBuff( Corruption.class ) && enemy.HP == enemy.HT) {\n\n\t\tcomboTime += initialComboTime + (talentPoints() * 0.1f);\n\n\t} else {\n\n\t\tcomboTime = initialComboTime;\n\n\t}\n\n\tActionIndicator.instance.action( this );\n\n\tvalidateMasteryCombos();\n\n\tGLog.w( Messages.get(this, \"count\", count) );\n\n\thero.sprite.parent.add( BuffIndicator.CURRENT );\n\n}", "CodeBleu_score": 35.05731786658105}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\t\tint cap = BASE_CAPACITY;\n\t\tfor (Item item : this) {\n\t\t\tif (item instanceof Bag) {\n\t\t\t\tcap += ((Bag) item).capacity();\n\t\t\t}\n\t\t}\n\t\tif (owner.weapon instanceof Wand) {\n\t\t\tcap -= 2;\n\t\t}\n\t\treturn cap;\n\n\t}", "CodeBleu_score": 33.5991778275807}, {"code": "public int capacity(){\n\t", "CodeBleu_score": 3.1745812119639596}, {"code": "public int capacity(){\n\t\t\tint cap = BACKPACK_SIZE;\n\t\tfor (Item item : this) {\n\t\t\tif (item instanceof Bag) {\n\t\t\t\tcap += ((Bag) item).size;\n\t\t\t}\n\t\t}\n\t\tif (owner.weapon instanceof Wand || owner.weapon instanceof Ring || owner.weapon instanceof Artifact) {\n\t\t\tcap--;\n\t\t}\n\t\treturn cap;\n\t}", "CodeBleu_score": 37.55465147324007}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\t\tHT = (int)Math.round( 20 + (lvl - 1) * 5 * (1 + HTBoost * 0.25f) );\n\t\tHT += (int)Math.round( STR * 0.5f );\n\t\tHT += RingOfMight.boost( this );\n\t\tHT += ElixirOfMight.boost( this );\n\n\t\tif (boostHP) {\n\t\t\tHP = Math.min( HP, HT );\n\t\t}\n\n\t}", "CodeBleu_score": 27.30824423155832}, {"code": "public void updateHT( boolean boostHP ){\n\t\t\tHT = (int) (10 + (lvl - 1) * 1.5f + HTBoost);\n\t\tHT += RingOfMight.buff( this );\n\t\tHT += ElixirOfMight.buff( this );\n\t\tif (boostHP) {\n\t\t\tHP = Math.min( HT, HP );\n\t\t}\n\t}", "CodeBleu_score": 21.44541320702727}, {"code": "public void updateHT( boolean boostHP ){\n\t\tHT = (lvl + 10) + HTBoost;\n\n\tRingOfMight ring = (RingOfMight)belongings.getItem( RingOfMight.class );\n\tif (ring != null) {\n\t\tHT += ring.buffedLvl();\n\t}\n\n\tElixirOfMight elixir = (ElixirOfMight)belongings.getItem( ElixirOfMight.class );\n\tif (elixir != null) {\n\t\tHT += elixir.buffedLvl();\n\t}\n\n\tif (boostHP) {\n\t\tHP = Math.min( HP, HT );\n\t}\n}", "CodeBleu_score": 27.997857751676925}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\t\tif (enemy.alignment == Alignment.ENEMY || enemy.alignment == Alignment.NEUTRAL_MIMIC) {\n\t\t\tboolean result = attack( enemy, wep.damageRoll() );\n\t\t\tif (result) {\n\t\t\t\tsetThrown(wep);\n\t\t\t\tclearThrown();\n\t\t\t\tif (heroClass == HeroClass.GLADIATOR) {\n\t\t\t\t\tBuff.affect( this, Gladiator.class );\n\t\t\t\t} else if (heroClass == HeroClass.DUELIST) {\n\t\t\t\t\tBuff.affect( this, Duelist.class );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}", "CodeBleu_score": 28.180094817536478}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\n\t\tif ( !enemy.isAlive() || enemy.isImmobilized() || enemy.isParalyzed() || enemy.isPetrified() || enemy.isStunned() || enemy.isLevitating() || enemy.isInvisible() ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ( enemy.alignment == Alignment.ENEMY || enemy.alignment == Alignment.NEUTRAL ) {\n\n\t\t\tboolean hit = attack( enemy, wep );\n\n\t\t\tif ( hit ) {\n\n\t\t\t\tsetThrownWeapon( wep );\n\t\t\t\tclearThrownWeapon();\n\n\t\t\t\tif ( heroClass == HeroClass.GLADIATOR ) {\n\t\t\t\t\tBuff.affect( this, Gladiator.class );\n\t\t\t\t} else if ( heroClass == HeroClass.DUELIST ) {\n\t\t\t\t\tBuff.affect( this, Duelist.class );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn hit;\n\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\n\t}", "CodeBleu_score": 31.599765891170033}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\t\tboolean enemyAligned = enemy.alignment == Alignment.ENEMY || enemy.alignment == Alignment.NEUTRAL_MIMIC;\n\t\tboolean success = enemyAligned ? attack( enemy, wep.accuracyFactor(this) ) : attack( enemy, wep.accuracyFactor(this) * 0.5f );\n\n\t\tif (success) {\n\t\t\tsetThrown( wep );\n\t\t\tclearThrown();\n\n\t\t\tif (heroClass == HeroClass.GLADIATOR) {\n\t\t\t\tBuff.affect( this, GladiatorCombo.class ).reset( 0.5f );\n\t\t\t} else if (heroClass == HeroClass.DUELIST) {\n\t\t\t\tBuff.affect( this, DuelistCombo.class ).reset( 0.5f );\n\t\t\t}\n\t\t}\n\n\t\treturn success;\n\t}", "CodeBleu_score": 35.478825569227155}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  this.repeats = repeats\n  start()\n  for (i in 0 until repeats) {\n    operation()\n    tick()\n  }\n  stop()\n  if (printResults) {\n    println(this.toString())\n  }\n}", "CodeBleu_score": 62.484219320068576}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  this.repeats = repeats\n  start()\n  for (i in 0 until repeats) {\n    operation()\n    tick()\n  }\n  stop()\n  if (printResults) {\n    println(toString())\n  }\n}", "CodeBleu_score": 59.39539725355607}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\t  reset(repeats)\n  start()\n  repeat(repeats) {\n    operation()\n    tick()\n  }\n  stop()\n  if (printResults) print()\n}", "CodeBleu_score": 55.468126331875276}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  val behaviorTree = BehaviorTree<E>(rootTask, blackboard)\n  behaviorTree.init()\n  return behaviorTree\n}", "CodeBleu_score": 91.18026714954756}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract {\n    callsInPlace(init, InvocationKind.EXACTLY_ONCE)\n  }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 61.137184069834404}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\t  contract { callsInPlace(init, InvocationKind.EXACTLY_ONCE) }\n  return BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 60.711805172246834}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t    this.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.tiles.highlight();\n    this.related.highlight();\n\n    if (this.tiles.heightmap) {\n      this.tiles.heightmap.forEach((polygon) => {\n        polygon.alpha = CONST.HEIGHTMAP_ALPHA;\n      });\n    }\n  }", "CodeBleu_score": 27.2253203220454}, {"code": "onPointerOver (){\n\t    this.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n\n    this.scene.city.map.highlightedCell.x = this.x;\n    this.scene.city.map.highlightedCell.y = this.y;\n\n    this.tiles.highlight();\n\n    if (this.related) {\n      this.related.highlight();\n    }\n\n    if (this.tiles.heightmap) {\n      this.tiles.heightmap.setAlpha(0.5);\n    }\n  }", "CodeBleu_score": 28.274663496631103}, {"code": "onPointerOver (){\n\t    this.scene.city.map.selectedCell.x = this.x;\n    this.scene.city.map.selectedCell.y = this.y;\n    this.scene.city.map.selectedCell.highlight();\n    this.related.highlight();\n\n    if (this.tiles.heightmap) {\n      this.tiles.heightmap.setAlpha(0.5);\n    }\n  }", "CodeBleu_score": 22.97096078194338}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\t    if (this.current > this.lightThreshold && this.current <= this.heavyThreshold)\n      return 'light';\n    else if (this.current > this.heavyThreshold)\n      return 'heavy';\n    else\n      return null;\n  }", "CodeBleu_score": 43.68148521677738}, {"code": "getTrafficDensity (){\n\t  if (this.current > this.lightThreshold && this.current <= this.heavyThreshold)\n    return 'light';\n  else if (this.current > this.heavyThreshold)\n    return 'heavy';\n  else\n    return null;\n}", "CodeBleu_score": 43.42533385189631}, {"code": "getTrafficDensity (){\n\t    if (this.current > this.lightThreshold && this.current <= this.heavyThreshold)\n      return 'light';\n    else if (this.current > this.heavyThreshold)\n      return 'heavy';\n    else\n      return null;\n  }", "CodeBleu_score": 43.68148521677738}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t    this.play(null, this.loop, this.killOnComplete);\n\n    return this;\n}", "CodeBleu_score": 8.384377980142558}, {"code": "restart: function (){\n\t    this.isPlaying = true;\n    this.isFinished = false;\n    this.paused = false;\n    this.loopCount = 0;\n\n    this._timeLastFrame = this.game.time.deltaTotal;\n    this._timeNextFrame = this.game.time.deltaTotal + this.delay;\n\n    this._frameIndex = this.isReversed ? this._frames.length - 1 : 0;\n    this.updateCurrentFrame(false, true);\n\n    this._parent.events.onAnimationStart$dispatch(this._parent, this);\n\n    this.onStart.dispatch(this._parent, this);\n\n    this._parent.animations.currentAnim = this;\n    this._parent.animations.currentFrame = this.currentFrame;\n\n    return this;\n}", "CodeBleu_score": 60.10025947908915}, {"code": "restart: function (){\n\t    this.play(this.delay, this.loop, this.killOnComplete);\n    return this;\n}", "CodeBleu_score": 8.409119921746013}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t    if (color === undefined) { color = 0xffffff; }\n    if (duration === undefined) { duration = 500; }\n    if (force === undefined) { force = false; }\n    if (alpha === undefined) { alpha = 1; }\n\n    if (!force && this._flash.duration > 0)\n    {\n        //  Can't reset an already running flash\n        return false;\n    }\n\n    this._flash.color = color;\n    this._flash.duration = duration;\n    this._flash.alpha = alpha;\n\n    return true;\n}", "CodeBleu_score": 66.76114513253044}, {"code": "flash: function (color, duration, force, alpha){\n\t    if (color === undefined) { color = 0xffffff; }\n    if (duration === undefined) { duration = 500; }\n    if (force === undefined) { force = false; }\n    if (alpha === undefined) { alpha = 1; }\n\n    if (!force && this._flash.duration > 0)\n    {\n        //  Can't reset an already running flash\n        return false;\n    }\n\n    this._flash.color = color;\n    this._flash.duration = duration;\n    this._flash.alpha = alpha;\n\n    return true;\n}", "CodeBleu_score": 66.76114513253044}, {"code": "flash: function (color, duration, force, alpha){\n\t    if (color === undefined) { color = 0xffffff; }\n    if (duration === undefined) { duration = 500; }\n    if (force === undefined) { force = false; }\n    if (alpha === undefined) { alpha = 1; }\n\n    if (!force && this._flash.duration > 0)\n    {\n        //  Can't reset an already running flash\n        return false;\n    }\n\n    this._flash.color = color;\n    this._flash.duration = duration;\n\n    this._flash.alpha = alpha;\n\n    return true;\n}", "CodeBleu_score": 66.76114513253044}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t    if (addToWorld === undefined) { addToWorld = true; }\n\n    var layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid, this.scaleFluidInversed);\n\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n\n    this.layers.push(layer);\n\n    if (children) {\n        layer.addMultiple(children);\n    }\n\n    return layer;\n}", "CodeBleu_score": 83.1803575955514}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    if (addToWorld === undefined) { addToWorld = true; }\n\n    this.boundsFluid.width = this.width;\n    this.boundsFluid.height = this.height;\n\n    var layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n\n    this.layers.push(layer);\n\n    if (children) {\n        layer.addMultiple(children);\n    }\n\n    return layer;\n}", "CodeBleu_score": 83.53134287960535}, {"code": "createFluidLayer: function (children, addToWorld){\n\t    if (addToWorld === undefined) { addToWorld = true; }\n\n    var layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\n    if (addToWorld) {\n        this.game.world.add(layer);\n    }\n\n    this.layers.push(layer);\n\n    if (children) {\n        layer.addMultiple(children);\n    }\n\n    return layer;\n}", "CodeBleu_score": 89.96089767727369}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t    var layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n    this.game.world.add(layer);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 71.32768141478113}, {"code": "createFullLayer: function (children){\n\t    var layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n    this.game.world.add(layer);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 71.32768141478113}, {"code": "createFullLayer: function (children){\n\t    var layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n    this.game.world.add(layer);\n    this.layers.push(layer);\n    if (children) {\n        layer.addMultiple(children);\n    }\n    return layer;\n}", "CodeBleu_score": 71.32768141478113}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t    if (rect === undefined) {\n        this.cropRect = null;\n        this.updateCrop();\n    } else {\n        if (copy === undefined) { copy = false; }\n\n        if (copy) {\n            this.cropRect = new Phaser.Rectangle(rect.x, rect.y, rect.width, rect.height);\n        } else {\n            this.cropRect = rect;\n        }\n\n        this.updateCrop();\n    }\n\n    /**\n     * Internal function that updates the crop rectangle on the texture frame. Called by crop.\n     * @method\n     * @private\n     */\n    updateCrop: function () {\n        if (!this.cropRect) {\n            this._crop = null;\n            this.frame.setCrop(0, 0, this.width, this.height);\n        } else {\n            if (!this._crop) {\n                this._crop = new Phaser.Rectangle();\n            }\n\n            this._crop.copyFrom(this.cropRect);\n\n            this.frame.setCrop(this._crop.x, this._crop.y, this._crop.width, this._crop.height);\n        }\n    }\n\n}", "CodeBleu_score": 60.843879504075005}, {"code": "crop: function (rect, copy){\n\t    if (rect) {\n        if (!this._crop) {\n            this._crop = new Phaser.Rectangle(0, 0, 0, 0);\n        }\n        if (copy) {\n            this._crop.setTo(rect.x, rect.y, rect.width, rect.height);\n        } else {\n            this._crop.copyFrom(rect);\n        }\n        this.updateCrop();\n    } else {\n        this._crop = null;\n        this.resetFrame();\n    }\n    return this;\n}", "CodeBleu_score": 43.56936590501974}, {"code": "crop: function (rect, copy){\n\t    if (rect) {\n        if (copy) {\n            this.cropRect = new Phaser.Rectangle(rect.x, rect.y, rect.width, rect.height);\n        } else {\n            this.cropRect = rect;\n        }\n        this.updateCrop();\n    } else {\n        this.cropRect = null;\n        this.resetFrame();\n    }\n    return this;\n}", "CodeBleu_score": 43.42572286258679}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t\n    if (x !== 0)\n    {\n        this.moveH(x, wrap);\n    }\n\n    if (y !== 0)\n    {\n        this.moveV(y, wrap);\n    }\n\n    return this;\n\n}", "CodeBleu_score": 87.03075544637692}, {"code": "move: function (x, y, wrap){\n\t    if (x !== 0) {\n        this.moveH(x, wrap);\n    }\n    if (y !== 0) {\n        this.moveV(y, wrap);\n    }\n\n    return this;\n}", "CodeBleu_score": 84.73897543219616}, {"code": "move: function (x, y, wrap){\n\t\n    if (x !== 0)\n    {\n        this.moveH(x, wrap);\n    }\n\n    if (y !== 0)\n    {\n        this.moveV(y, wrap);\n    }\n\n    return this;\n\n}", "CodeBleu_score": 87.03075544637692}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    var frameKey = '_on' + state + 'Frame';\n    var frame = this[frameKey];\n    if (frame !== null && !this.freezeFrames) {\n        this.frame = frame;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 51.65599859784123}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    var frameKey = '_on' + state + 'Frame';\n    var frame = this[frameKey];\n    if (frame !== null && !this.freezeFrames) {\n        this.frame = frame;\n        return true;\n    }\n    return false;\n}", "CodeBleu_score": 51.65599859784123}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t    var frameKey = '_on' + state + 'Frame';\n\n    if (this.freezeFrames) {\n        return false;\n    }\n\n    var frame = this[frameKey];\n\n    if (frame !== null) {\n        this.frame = frame;\n\n        return true;\n    }\n\n    return false;\n}", "CodeBleu_score": 59.040506909422376}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t    var weapon = new Phaser.Weapon(this.game, this.world, this.world.plugins);\n    weapon.setBulletClass(bulletClass);\n    weapon.createBullets(quantity, key, frame, group);\n    return weapon;\n}", "CodeBleu_score": 56.15597794364097}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t    var weapon = new Phaser.Weapon(this.game, this.world, group);\n\n    if (bulletClass) {\n        weapon.bulletClass = bulletClass;\n    }\n\n    if (quantity > 0) {\n        weapon.createBullets(quantity, key, frame);\n    }\n\n    return weapon;\n}", "CodeBleu_score": 61.36925271666405}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t    //  If the group is null or undefined we use the world group\n    if (group === null || group === undefined) { group = this.world; }\n\n    //  If the key is a string and not a Phaser.RenderTexture or Phaser.BitmapData then it is a reference to the Cache entry to be used\n    if (typeof key === 'string' && key.indexOf('renderTexture') === -1 && key.indexOf('bitmapData') === -1)\n    {\n        key = this.game.cache.getImage(key);\n    }\n\n    //  If the frame is a string, then it is the frame name\n    if (typeof frame === 'string')\n    {\n        frame = key.getFrame(frame);\n    }\n\n    //  Create the Weapon\n    var weapon = new Phaser.Weapon(this.game, this.world, group, key, frame, bulletClass);\n\n    //  If we were given a quantity, then create that many bullets\n    if (quantity !== undefined)\n    {\n        weapon.createBullets(quantity);\n    }\n\n    return weapon;\n}", "CodeBleu_score": 37.9302752098447}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull) {\n\n        var p1 = points[0];\n        var p2 = points[1];\n        var p3 = points[2];\n\n        var v1x = p2.x - p1.x;\n        var v1y = p2.y - p1.y;\n        var v2x = p3.x - p1.x;\n        var v2y = p3.y - p1.y;\n\n        var faceNormal = {\n            x: v1y * v2x - v1x * v2y,\n            y: v1y * v2y + v1x * v2x,\n            z: 0\n        };\n\n        if (faceNormal.z < 0) {\n\n            this.lineStyle(this.lineWidth, this.lineColor, this.lineAlpha);\n            this.beginFill(this.fillColor, this.fillAlpha);\n            this.moveTo(p1.x, p1.y);\n            this.lineTo(p2.x, p2.y);\n            this.lineTo(p3.x, p3.y);\n            this.lineTo(p1.x, p1.y);\n            this.endFill();\n\n        }\n\n    } else {\n\n        this.lineStyle(this.lineWidth, this.lineColor, this.lineAlpha);\n        this.beginFill(this.fillColor, this.fillAlpha);\n        this.moveTo(points[0].x, points[0].y);\n        this.lineTo(points[1].x, points[1].y);\n        this.lineTo(points[2].x, points[2].y);\n        this.lineTo(points[0].x, points[0].y);\n        this.endFill();\n\n    }\n\n}", "CodeBleu_score": 29.74741327442788}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\n    if (cull) {\n        var faceNormal = this._calcFaceNormal(points);\n\n        if (faceNormal.z <= 0) {\n            return;\n        }\n    }\n\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.lineTo(points[0].x, points[0].y);\n\n}", "CodeBleu_score": 22.44695726814598}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t    if (cull) {\n        //  Face normal\n        var v1 = points[1].clone().subtract(points[0]);\n        var v2 = points[2].clone().subtract(points[0]);\n        var normal = v1.crossProduct(v2);\n        if (normal.z < 0) {\n            return;\n        }\n    }\n\n    this.beginFill(this.fillColor, this.fillAlpha);\n    this.moveTo(points[0].x, points[0].y);\n    this.lineTo(points[1].x, points[1].y);\n    this.lineTo(points[2].x, points[2].y);\n    this.endFill();\n}", "CodeBleu_score": 30.539923393921754}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\n    if (this._pendingChangeSource) {\n\n        if (this.video.readyState === this.video.HAVE_ENOUGH_DATA) {\n\n            this._pendingChangeSource = false;\n\n            this.video.play();\n\n            if (this._autoplay) {\n                this.paused = false;\n            }\n\n            this.baseTexture.update();\n\n        } else {\n\n            this.retry--;\n\n            if (this.retry > 0) {\n\n                this._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n\n            } else {\n\n                this.retry = this.retryLimit;\n\n                this._pendingChangeSource = false;\n\n                console.warn('Phaser.Video - The video failed to load after ' + this.retryLimit + ' attempts.');\n\n            }\n\n        }\n\n    }\n\n}", "CodeBleu_score": 45.240917330998684}, {"code": "checkVideoProgress: function (){\n\t\n    if (this._pendingChangeSource && this.video.readyState >= 2) {\n\n        this._pendingChangeSource = false;\n\n        this.updateTexture();\n\n        this.video.autoplay = this._autoplay;\n\n        if (this._autoplay) {\n\n            this.video.play();\n\n        }\n\n    } else if (this.retry > 0) {\n\n        this.retry--;\n\n        this._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n\n    } else {\n\n        console.warn('Phaser.Video: The video failed to load after ' + this.retryLimit + ' retries.');\n\n    }\n\n}", "CodeBleu_score": 47.34879786782779}, {"code": "checkVideoProgress: function (){\n\t    if (this._pendingChangeSource) {\n        if (this.video.readyState === 4) {\n            //  The video is ready\n            this.video.play();\n            this._pendingChangeSource = false;\n            this.updateTexture();\n        } else if (this.retry > 0) {\n            //  The video is not ready, but we have retries left\n            this.retry--;\n            this._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n        } else {\n            //  The video is not ready and we have no retries left\n            this._pendingChangeSource = false;\n            console.warn('Phaser.Video: Failed to load video after ' + this.retryLimit + ' retries');\n        }\n    }\n}", "CodeBleu_score": 51.59719521219508}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t    if (!this.isDown) {\n        this.isDown = true;\n        this.isUp = false;\n        this.timeDown = event.timeStamp;\n        this.repeats = 0;\n        if (event) {\n            this.altKey = event.altKey;\n            this.shiftKey = event.shiftKey;\n            this.ctrlKey = event.ctrlKey;\n        }\n        this.event = event;\n        this.value = value || 1;\n        this.onDown.dispatch(this, this.value);\n    }\n}", "CodeBleu_score": 63.07796927237389}, {"code": "start: function (event, value){\n\t    if (!this.isDown) {\n        this.isDown = true;\n        this.isUp = false;\n        this.timeDown = event !== undefined ? event.timeStamp : this.game.time.now;\n        this.repeats = 0;\n        this.event = event;\n        this.value = value;\n        if (event) {\n            this.altKey = event.altKey;\n            this.shiftKey = event.shiftKey;\n            this.ctrlKey = event.ctrlKey;\n        }\n        this.onDown.dispatch(this, value);\n    }\n}", "CodeBleu_score": 78.6605430791234}, {"code": "start: function (event, value){\n\t    if (!this.isDown) {\n        this.isDown = true;\n        this.isUp = false;\n        this.timeDown = event.timeStamp;\n        this.repeats = 0;\n        this.event = event;\n        this.value = value || 0;\n        if (event) {\n            this.altKey = event.altKey;\n            this.shiftKey = event.shiftKey;\n            this.ctrlKey = event.ctrlKey;\n        }\n        this.onDown.dispatch(this, value);\n    }\n}", "CodeBleu_score": 73.24435952289295}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t    this.event = event;\n    if (this.capture) {\n        event.preventDefault();\n    }\n    if (this.mouseDownCallback) {\n        this.mouseDownCallback(event, this);\n    }\n    if (this.input.enabled) {\n        this.input.mousePointer.start(event);\n    }\n}", "CodeBleu_score": 56.02152237972168}, {"code": "onMouseDown: function (event){\n\t    this.event = event;\n\n    if (this.capture) {\n        event.preventDefault();\n    }\n\n    if (this.mouseDownCallback) {\n        this.mouseDownCallback(event);\n    }\n\n    if (this.input.enabled) {\n        this.input.mousePointer.start(event);\n    }\n}", "CodeBleu_score": 55.735255988163026}, {"code": "onMouseDown: function (event){\n\t\n    this.event = event;\n\n    if (this.capture) {\n        event.preventDefault();\n    }\n\n    if (this.mouseDownCallback) {\n        this.mouseDownCallback(event);\n    }\n\n    if (this.input.enabled) {\n        this.input.mousePointer.initialize(event);\n    }\n\n}", "CodeBleu_score": 55.56019970841517}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t    this.event = event;\n\n    if (this.capture) {\n        event.preventDefault();\n    }\n\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.input.enabled || !this.enabled) {\n        return;\n    }\n\n    event.identifier = 0;\n\n    this.input.mousePointer.stop(event);\n}", "CodeBleu_score": 76.497966914911}, {"code": "onMouseUpGlobal: function (event){\n\t    this.event = event;\n\n    if (this.capture) {\n        event.preventDefault();\n    }\n\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.input.enabled || !this.enabled) {\n        return;\n    }\n\n    event.identifier = 0;\n\n    this.input.mousePointer.stop(event);\n}", "CodeBleu_score": 76.497966914911}, {"code": "onMouseUpGlobal: function (event){\n\t    this.event = event;\n\n    if (this.capture) {\n        event.preventDefault();\n    }\n\n    if (this.mouseUpCallback) {\n        this.mouseUpCallback.call(this.callbackContext, event);\n    }\n\n    if (!this.input.enabled || !this.enabled) {\n        return;\n    }\n\n    event.identifier = 0;\n\n    this.input.mousePointer.stop(event);\n}", "CodeBleu_score": 76.497966914911}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t    this.event = event;\n\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback.call(this.callbackContext, event);\n    }\n\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n\n    /*\n     *  For touch enter and leave its a list of the touch points that have entered or left the target\n     *  Doesn't appear to be supported by most browsers on a canvas element yet\n     */\n    for (var i = 0; i < event.changedTouches.length; i++) {\n        this.game.input.startPointer(event.changedTouches[i]);\n    }\n}", "CodeBleu_score": 76.49097387156381}, {"code": "onTouchEnter: function (event){\n\t    this.event = event;\n\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback.call(this.callbackContext, event);\n    }\n\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n\n    if (!this.game.input.enabled || !this.enabled) {\n        return;\n    }\n\n    for (var i = 0; i < event.changedTouches.length; i++) {\n        this.game.input.startPointer(event.changedTouches[i]);\n    }\n}", "CodeBleu_score": 87.22044980967303}, {"code": "onTouchEnter: function (event){\n\t    this.event = event;\n\n    if (this.touchEnterCallback) {\n        this.touchEnterCallback.call(this.callbackContext, event);\n    }\n\n    if (this.preventDefault) {\n        event.preventDefault();\n    }\n\n    /*\n     *  For touch enter and leave its a list of the touch points that have entered or left the target\n     *  Doesn't appear to be supported by most browsers on a canvas element yet\n     */\n    for (var i = 0; i < event.changedTouches.length; i++) {\n        this.game.input.startPointer(event.changedTouches[i]);\n    }\n}", "CodeBleu_score": 76.49097387156381}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis()    var domain = AppDomain.CurrentDomain;\n    var dllPath = Path.Combine(Application.dataPath, \"Hotfix.dll\");\n    var assembly = domain.Load(File.ReadAllBytes(dllPath));\n    ILRuntime.Runtime.Enviorment.AppDomain appDomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    var analysis = new ILRuntime.Runtime.CLRBinding.BindingAnalysis(assembly, appDomain);\n    analysis.BindingAll = true;\n    analysis.NeedSearchCLRType = true;\n    analysis.NeedReflectionType = true;\n    analysis.ReflectionTypeGenerateMethods = true;\n    var code = analysis.GenerateBindingCode();\n    var generatedPath = Path.Combine(Application.dataPath, \"Scripts/Hotfix/Generated\");\n    Directory.CreateDirectory(generatedPath);\n    File.WriteAllText(Path.Combine(generatedPath, \"CLRBinding.cs\"), code);\n    AssetDatabase.Refresh();\n}", "CodeBleu_score": 22.617389185206186}, {"code": "static void GenerateCLRBindingByAnalysis()    // Create a new AppDomain and load an assembly from a specified file\n    AppDomain domain = AppDomain.CreateDomain(\"MyDomain\");\n    Assembly assembly = domain.Load(new AssemblyName(\"MyAssembly\"));\n\n    // Initialize ILRuntime with the domain\n    using (ILRuntime.Runtime.Enviorment.AppDomain appDomain = new ILRuntime.Runtime.Enviorment.AppDomain()) {\n        appDomain.LoadAssembly(assembly);\n\n        // Generate binding code\n        using (ILRuntime.CLR.MethodBinding.BindingCodeGenerator generator = new ILRuntime.CLR.MethodBinding.BindingCodeGenerator(appDomain)) {\n            string generatedCode = generator.GenerateBindingCode();\n\n            // Refresh the AssetDatabase\n            AssetDatabase.Refresh();\n        }\n    }\n}\n", "CodeBleu_score": 26.64223666981933}, {"code": "static void GenerateCLRBindingByAnalysis()    // Create a new AppDomain\n    AppDomain domain = AppDomain.CreateDomain(\"ILRuntime\");\n\n    // Load the assembly from the specified file\n    Assembly assembly = domain.Load(new AssemblyName(\"Assembly-CSharp\"));\n\n    // Initialize ILRuntime with the domain\n    ILRuntime.Runtime.Enviorment.AppDomain appDomain = new ILRuntime.Runtime.Enviorment.AppDomain();\n    appDomain.LoadAssembly(assembly);\n\n    // Generate binding code\n    using (ILRuntime.Runtime.Generated.ILGeneratedAssembly generatedAssembly = new ILRuntime.Runtime.Generated.ILGeneratedAssembly(assembly)) {\n        generatedAssembly.ReflectionTypeNameGenerator = new ILRuntime.Runtime.Generated.ReflectionTypeNameGenerator();\n        generatedAssembly.ReflectionMethodNameGenerator = new ILRuntime.Runtime.Generated.ReflectionMethodNameGenerator();\n        generatedAssembly.ReflectionFieldNameGenerator = new ILRuntime.Runtime.Generated.ReflectionFieldNameGenerator();\n        generatedAssembly.ReflectionPropertyNameGenerator = new ILRuntime.Runtime.Generated.ReflectionPropertyNameGenerator();\n        generatedAssembly.ReflectionEventNameGenerator = new ILRuntime.Runtime.Generated.ReflectionEventNameGenerator();\n        generatedAssembly.ReflectionParameterNameGenerator = new ILRuntime.Runtime.Generated.ReflectionParameterNameGenerator();\n        generatedAssembly.ReflectionDelegateNameGenerator = new ILRuntime.Runtime.Generated.ReflectionDelegateNameGenerator();\n        generatedAssembly.ReflectionAttributeNameGenerator = new ILRuntime.Runtime.Generated.ReflectionAttributeNameGenerator();\n        generatedAssembly.ReflectionGenericParameterNameGenerator = new ILRuntime.Runtime.Generated.ReflectionGenericParameterNameGenerator();\n        generatedAssembly.ReflectionGenericContextNameGenerator = new ILRuntime.Runtime.Generated.ReflectionGenericContextNameGenerator();\n        generatedAssembly.ReflectionGenericMethodNameGenerator = new ILRuntime.Runtime.Generated.ReflectionGenericMethodNameGenerator();\n        generatedAssembly.ReflectionGenericTypeNameGenerator = new ILRuntime.Runtime.Generated.ReflectionGenericTypeNameGenerator();\n        generatedAssembly.ReflectionGenericParameterConstraintNameGenerator = new ILRuntime.Runtime.Generated.ReflectionGenericParameterConstraintNameGenerator();\n        generatedAssembly.ReflectionGenericParameterNameGenerator = new ILRuntime.Runtime.Generated.ReflectionGenericParameterNameGenerator();\n        generatedAssembly.Ref", "CodeBleu_score": 15.686654828564874}]}
