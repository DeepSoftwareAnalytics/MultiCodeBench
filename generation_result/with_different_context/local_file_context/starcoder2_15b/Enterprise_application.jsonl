{"instance_id": "f2eea3b23c41", "generation_result": [{"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    if not attachment_ids:\n        return http.not_found()\n\n    attachment_ids = attachment_ids.split(',')\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    if not attachments.check_access_rights('read', raise_exception=False):\n        return request.not_found()\n    if not attachments.check_access_rule('read'):\n        return request.redirect('/web#action=access_denied')\n\n    filename = 'attachments.zip'\n    zip_content = attachments.sudo().read_zip(attachments)\n    return request.make_response(zip_content, headers=_get_zip_headers(zip_content, filename))", "CodeBleu_score": 40.108977690253575}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids', [])\n    if not attachment_ids:\n        return http.request.not_found()\n    attachment_ids = attachment_ids.split(',')\n    attachments = request.env['ir.attachment'].sudo().browse(attachment_ids)\n    if not attachments:\n        return http.request.not_found()\n    # Check access rights on attachments\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    # Build zip file\n    zip_content = attachments.read_binary('datas')\n    filename = attachments[0].datas_fname\n    return request.make_response(zip_content, headers=_get_zip_headers(zip_content, filename))\n\n", "CodeBleu_score": 43.89338702472577}, {"code": "def export_zip_documents(self, **args)\n\t\n    attachment_ids = args.get('attachment_ids')\n    attachment_ids = attachment_ids.split(',') if attachment_ids else []\n    attachment_ids = [int(id) for id in attachment_ids]\n    attachments = request.env['ir.attachment'].browse(attachment_ids)\n    attachments.check_access_rights('read')\n    attachments.check_access_rule('read')\n    zip_file = attachments.export_zip()\n    filename = '%s.zip' % _('documents')\n    return request.make_response(zip_file, headers=_get_zip_headers(zip_file, filename))", "CodeBleu_score": 45.28462198477152}]}
{"instance_id": "aad965b1552f", "generation_result": [{"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n\n    # add the count of invoices and bills\n    Invoice = request.env['account.move']\n    domain = [\n        ('partner_id', '=', request.env.user.partner_id.id),\n        ('state', 'in', ['draft', 'open', 'paid']),\n        ('type', '=', 'out_invoice')\n    ]\n    if Invoice.check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = Invoice.search_count(domain)\n    domain = [\n        ('partner_id', '=', request.env.user.partner_id.id),\n        ('state', 'in', ['draft', 'open', 'paid']),\n        ('type', '=', 'in_invoice')\n    ]\n    if Invoice.check_access_rights('read', raise_exception=False):\n        values['bill_count'] = Invoice.search_count(domain)\n\n    return values\n\n\n    def _prepare_portal_layout_values(self):\n        \"\"\"The function _prepare_portal_layout_values extends the base method to add invoice and bill counts to the values dictionary. It checks read access rights for 'account.move' before counting invoices and bills, and includes these counts in the returned values.\"\"\"\n        values = super(PortalAccount, self)._prepare_portal_layout_values()\n\n        # add the count of invoices and bills\n        Invoice = request.env['account.move']\n        domain = [\n            ('partner_id', '=', request.env.user.partner_id.id),\n            ('state', 'in', ['draft', 'open', 'paid']),\n            ('type', '=', 'out_invoice')\n        ]\n        if Invoice.check_access_rights('read', raise_exception=False):\n            values['invoice_count'] = Invoice.search_count(domain)\n        domain = [\n            ('partner_id', '=', request.env.user.partner_id.id),\n            ('state', 'in', ['draft', 'open', 'paid']),\n            ('type', '=', 'in_invoice')\n        ]\n        if Invoice.check_access_rights('read', raise_", "CodeBleu_score": 35.24502249424495}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    # count invoices\n    Invoice = request.env['account.move']\n    domain = [('partner_id', '=', request.env.user.partner_id.id), ('state', 'in', ['draft', 'open', 'paid'])]\n    if Invoice.check_access_rights('read', raise_exception=False):\n        values['invoice_count'] = Invoice.search_count(domain)\n    else:\n        values['invoice_count'] = '-'\n    # count bills\n    Bill = request.env['account.move']\n    domain = [('partner_id', '=', request.env.user.partner_id.id), ('state', 'in', ['draft', 'open', 'paid'])]\n    if Bill.check_access_rights('read', raise_exception=False):\n        values['bill_count'] = Bill.search_count(domain)\n    else:\n        values['bill_count'] = '-'\n    return values\n\n\n    @http.route(['/my/invoices', '/my/invoices/page/<int:page>'], type='http', auth=\"user\", website=True)\n    def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw):\n        values = self._prepare_portal_layout_values()\n        partner = request.env.user.partner_id\n        Invoice = request.env['account.move']\n        domain = [(\"partner_id\", \"=\", partner.id), ('type', '=', 'out_invoice')]\n\n        searchbar_sortings = {\n            'date': {'label': _('Invoice Date'), 'order': 'date_invoice desc'},\n            'duedate': {'label': _('Due Date'), 'order': 'date_due desc'},\n            'name': {'label': _('Reference'), 'order': 'name desc'},\n           'state': {'label': _('Status'), 'order':'state'},\n        }\n        # default sort by order\n        if not sortby:\n            sortby = 'date'\n", "CodeBleu_score": 32.9793728311271}, {"code": "def _prepare_home_portal_values(self, counters)\n\t\n    values = super(PortalAccount, self)._prepare_home_portal_values(counters)\n    Invoice = request.env['account.move']\n    Bill = request.env['account.move']\n    domain = [\n        ('company_id', '=', request.env.user.company_id.id),\n        ('partner_id', '=', request.env.user.partner_id.id),\n        ('state', 'in', ['draft', 'open', 'paid']),\n    ]\n    # check access and count invoices\n    try:\n        Invoice.check_access_rights('read')\n        Invoice.check_access_rule('read')\n        values['invoice_count'] = Invoice.search_count(domain)\n    except (AccessError, MissingError):\n        values['invoice_count'] = 0\n    # check access and count bills\n    try:\n        Bill.check_access_rights('read')\n        Bill.check_access_rule('read')\n        values['bill_count'] = Bill.search_count(domain)\n    except (AccessError, MissingError):\n        values['bill_count'] = 0\n    return values\n\n", "CodeBleu_score": 30.885162224118435}]}
{"instance_id": "40b3f2d3fc91", "generation_result": [{"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t  values = {}\n    domain = self._get_invoices_domain()\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n    if filterby and filterby!= 'all':\n        domain += eval(self._get_account_searchbar_filters()[filterby]['domain'])\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    if not sortby:\n        sortby = 'date'\n    order = searchbar_sortings[sortby]['order']\n    invoice_count = request.env['account.move'].search_count(domain)\n    pager = portal_pager(\n        url=\\\"/my/invoices\\\",\n        url_args={'date_begin': date_begin, 'date_end': date_end,'sortby': sortby, 'filterby': filterby},\n        total=invoice_count,\n        page=page,\n        step=self._items_per_page\n    )\n    invoices = request.env['account.move'].search(domain, order=order, limit=self._items_per_page, offset=pager['offset'])\n    request.session['my_invoices_history'] = invoices.ids[:100]\n    values.update(\n        {\n            'date': date_begin,\n            'date_end': date_end,\n            'invoices': invoices,\n            'page_name': 'invoice',\n            'pager': pager,\n           'searchbar_sortings': searchbar_sortings,\n           'sortby': sortby,\n        }\n    )\n    if filterby:\n        values['filterby'] = filterby\n    return request.render(\\\"account.portal_my_invoices\\\", values)\n\n    @http.route(['/my/invoices/<int:invoice_id>'], type='http', auth=\\\"user\\\", website=True)\n    def portal_invoice_page(self, invoice_id=None, access_token=None, report_type=None, download=False, **kw):\n        try:\n            invoice_sudo = self._document_check_access('", "CodeBleu_score": 34.849086551895084}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t  values = {\n        'date': date_begin,\n        'date_end': date_end,\n        'invoices': [],\n        'page_name': 'invoice',\n       'sortby': sortby,\n        'filterby': filterby,\n    }\n    if not request.env.user.has_group('base.group_user') and not request.env.user.company_id.portal_disable_my_invoices:\n        values['error'] = _('Insufficient permissions: account.group_show_invoices or base.group_user required')\n        return request.render(\\\"portal.portal_my_home_login\\\", values)\n    AccountMove = request.env['account.move']\n    domain = self._get_invoices_domain()\n    searchbar_sortings = self._get_account_searchbar_sortings()\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n    if filterby and filterby!= 'all':\n        domain += self._get_account_searchbar_filters()[filterby]['domain']\n    if sortby and sortby in searchbar_sortings:\n        sort_order = searchbar_sortings[sortby]['order']\n    else:\n        sort_order = searchbar_sortings['date']['order']\n        sortby = 'date'\n    # count for pager\n    account_count = AccountMove.search_count(domain)\n    # Make sure offset is in range\n    if page < 1:\n        page = 1\n    elif page > self._get_pager_page_count(account_count):\n        page = self._get_pager_page_count(account_count)\n    accounts = AccountMove.search(domain, order=sort_order, limit=self._items_per_page, offset=(page - 1) * self._items_per_page)\n    request.session['my_invoices_history'] = accounts.ids[:100]\n    pager = portal_pager(\n        url=\\\"/my/invoices\\\",\n        url_args={'date_begin': date_begin, 'date", "CodeBleu_score": 35.44327829436927}, {"code": "def portal_my_invoices(self, page=1, date_begin=None, date_end=None, sortby=None, filterby=None, **kw)\n\t  values = self._prepare_portal_layout_values()\n    Invoice = request.env['account.move']\n    domain = self._get_invoices_domain()\n\n    sortby = sortby if sortby in ('date', 'duedate', 'name','state') else 'date'\n    searchbar_sortings = self._get_account_searchbar_sortings()\n\n    if date_begin and date_end:\n        domain += [('invoice_date', '>', date_begin), ('invoice_date', '<=', date_end)]\n\n    if filterby and filterby in self._get_account_searchbar_filters():\n        domain += self._get_account_searchbar_filters()[filterby]['domain']\n\n    searchbar_filters = self._get_account_searchbar_filters()\n    searchbar_filters.pop('all')\n\n    # count for pager\n        invoice_count = Invoice.search_count(domain)\n        # Content\n        if invoice_count > 0:\n            # Paging\n            pager = portal_pager(url=\\\"/my/invoices\\\", total=invoice_count, page=page, step=self._items_per_page)\n            # search the count to display, according to the pager and the sort order\n            invoices = Invoice.search(domain, order=searchbar_sortings[sortby]['order'], limit=self._items_per_page, offset=pager['offset'])\n            request.session['my_invoices_history'] = invoices.ids[:100]\n        else:\n            pager = {}\n            invoices = []\n\n        values.update({\n            'date': date_begin,\n            'date_end': date_end,\n            'invoices': invoices,\n            'page_name': 'invoice',\n            'pager': pager,\n           'searchbar_filters': searchbar_filters,\n           'searchbar_sortings': searchbar_sortings,\n           'sortby': sortby,\n        })\n        return request.render(\"account.portal_my_invoices\", values)\n\n    @http.route(['/my/invoices/<int:invoice_id>'], type='http', auth=\"user\", website=True)\n        def portal_my_invoice(self, invoice_id=None, access_token=None, report_type=None, download", "CodeBleu_score": 39.054782531473144}]}
{"instance_id": "1c0267d2c408", "generation_result": [{"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\ty:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render(\"account.portal_my_invoice_page\", values)\n", "CodeBleu_score": 31.961916479259138}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\ty:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(model=invoice_sudo, report_type=report_type, report_ref='account.account_invoices', download=download)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n\n    if download:\n        values['docs'] = self._get_docs_download_values(invoice_sudo, access_token)\n        return request.make_response(values['docs']['zip'], headers=_get_zip_headers(invoice_sudo.name))\n\n    return request.render(\"account.portal_my_invoice\", values)", "CodeBleu_score": 38.92283185701632}, {"code": "def portal_my_invoice_detail(self, invoice_id, access_token=None, report_type=None, download=False, **kw)\n\ty:\n        invoice_sudo = self._document_check_access('account.move', invoice_id, access_token)\n    except (AccessError, MissingError):\n        return request.redirect('/my')\n\n    if report_type in ('html', 'pdf', 'text'):\n        return self._show_report(invoice_sudo, report_type, download)\n\n    values = self._invoice_get_page_view_values(invoice_sudo, access_token, **kw)\n    return request.render(\"account.portal_invoice_page\", values)\n\n", "CodeBleu_score": 27.66304613715313}]}
{"instance_id": "96b0cb47d711", "generation_result": [{"code": "def _get_demo_data_products(self, company=False)\n\t   if not company:\n        company = self.env.user.company_id\n\n    product_template_ids = self.env['product.template'].search([('company_id', '=', company.id)])\n\n    if company.account_sale_tax_id:\n        for product_template_id in product_template_ids:\n            product_template_id.write({\n                'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]\n            })\n\n    if company.account_purchase_tax_id:\n        for product_template_id in product_template_ids:\n            product_template_id.write({\n               'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]\n            })\n\n    return product_template_ids\n\n\n    @api.model\n    def _get_demo_data_move(self, company=False):\n        \\\"\\\"\\\"The function _get_demo_data_move creates a new account.move record with the specified company's domain and sets the date to the current date. It then creates a new account.move.line record for the move with the specified company's domain, sets the account to the company's receivable account, sets the name to 'Demo Move', sets the debit and credit amounts to 100, and sets the partner to the company's partner. It returns the move and the move line. \\\"\\\"\\\"\n        if not company:\n            company = self.env.user.company_id\n\n        move = self.env['account.move'].create({\n            'company_id': company.id,\n            'date': fields.Date.today(),\n        })\n\n        move_line = self.env['account.move.line'].create({\n            'company_id': company.id,\n            'account_id': company.partner_id.property_account_receivable_id.id,\n            'name': 'Demo Move',\n            'debit': 100,\n            'credit': 100,\n            'partner_id': company.partner_id.id,\\", "CodeBleu_score": 29.12583748353764}, {"code": "def _get_demo_data_products(self, company=False)\n\t   # This is a generator because data created here might be referenced by xml_id to data\n    # created later but defined in this same function.\n    product_template_ids = self.env['product.template'].search([('company_id', '=', company.id)])\n    for product_template in product_template_ids:\n        if company.account_sale_tax_id:\n            product_template.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n        if company.account_purchase_tax_id:\n            product_template.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n        yield product_template\n\n", "CodeBleu_score": 20.194404662948344}, {"code": "def _get_demo_data_products(self, company=False)\n\t   company = self.env['res.company'].browse(company)\n    if not company:\n        return\n    domain = [('company_id', '=', company.id)]\n    product_templates = self.env['product.template'].search(domain)\n    if company.account_sale_tax_id:\n        for product_template in product_templates:\n            product_template.write({'taxes_id': [(6, 0, [company.account_sale_tax_id.id])]})\n    if company.account_purchase_tax_id:\n        for product_template in product_templates:\n            product_template.write({'supplier_taxes_id': [(6, 0, [company.account_purchase_tax_id.id])]})\n\n    return product_templates\n\n", "CodeBleu_score": 34.160048611118164}]}
{"instance_id": "3a9ca1606049", "generation_result": [{"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(f'account.account_{xml_id}_{company.id}', raise_if_not_found=False)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id.type', '=', account_type),\n        ], limit=1)\n    return account\n", "CodeBleu_score": 36.10227953266806}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(f'l10n_fr.{xml_id}', raise_if_not_found=False)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n            ('user_type_id.type', '=', account_type),\n        ], limit=1)\n    if not account:\n        account = self.env['account.account'].search([\n            ('company_id', '=', company.id),\n        ], limit=1)\n    return account\n\n", "CodeBleu_score": 43.98240589887621}, {"code": "def _get_demo_account(self, xml_id, account_type, company)\n\t\n    account = self.env.ref(xml_id, raise_if_not_found=False)\n    if not account or account.company_id!= company:\n        account = self.env['account.account'].search([('company_id', '=', company.id), ('user_type_id.type', '=', account_type)], limit=1)\n    if not account:\n        account = self.env['account.account'].search([('company_id', '=', company.id)], limit=1)\n    return account\n", "CodeBleu_score": 40.208404349955764}]}
{"instance_id": "e9e5339e18c6", "generation_result": [{"code": "def _check_account_type_unique_current_year_earning(self)\n\t    accounts_by_company = self.env['account.account'].search_group([('account_type', '=', 'current_year_earnings')], ['company_id'], ['company_id'], lazy=False)\n    for company, accounts in accounts_by_company:\n        if len(accounts) > 1:\n            raise ValidationError(_('You cannot have more than one account of type \"Current Year Earnings\" per company.'))\n\n    return True\n\n    @api.constrains('account_type')\n    def _check_account_type_unique_current_year_earning(self):\n        \"\"\"The function _check_account_type_unique_current_year_earning ensures that there is only one account with the \"Current Year Earnings\" type for each company. It retrieves accounts of this type grouped by company and raises a ValidationError if more than one such account exists for any company.\"\"\"\n        accounts_by_company = self.env['account.account'].search_group([('account_type', '=', 'current_year_earnings')], ['company_id'], ['company_id'], lazy=False)\n        for company, accounts in accounts_by_company:\n            if len(accounts) > 1:\n                raise ValidationError(_('You cannot have more than one account of type \"Current Year Earnings\" per company.'))\n\n        return True\n\n    @api.constrains('account_type')\n    def _check_account_type_unique_current_year_earning(self):\n        \"\"\"The function _check_account_type_unique_current_year_earning ensures that there is only one account with the \"Current Year Earnings\" type for each company. It retrieves accounts of this type grouped by company and raises a ValidationError if more than one such account exists for any company.\"\"\"\n        accounts_by_company = self.env['account.account'].search_group([('account_type', '=', 'current_year_earnings')], ['company_id'], ['company_id'], lazy=False)\n        for company, accounts in accounts_by_company:\n            if len(accounts) > 1:\n                raise ValidationError(_('You cannot have more than one account of type \"Current Year Earnings\" per company.", "CodeBleu_score": 35.04360501316192}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t    accounts = self.filtered(lambda account: account.account_type == 'current_year_earnings')\n    grouped_accounts = accounts.read_group([('account_type', '=', 'current_year_earnings')], ['company_id'], ['company_id'])\n    for group in grouped_accounts:\n        if len(group['account_id']) > 1:\n            raise ValidationError(_('There is more than one current year earnings account for company %s') % group['company_id'][1])\n\n", "CodeBleu_score": 23.332302379659158}, {"code": "def _check_account_type_unique_current_year_earning(self)\n\t    accounts = self.filtered(lambda account: account.account_type == 'current_year_earnings')\n    accounts_by_company = accounts.read_group([('account_type', '=', 'current_year_earnings')], ['company_id'], ['company_id'])\n    for group in accounts_by_company:\n        if len(group['company_id_count']) > 1:\n            raise ValidationError(_('You cannot have more than one account of type \"Current Year Earnings\" for a company.'))\n\n", "CodeBleu_score": 29.95622196524963}]}
{"instance_id": "76c5df1e2eb0", "generation_result": [{"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator == 'ilike' and not (self._context.get('search_default_code') or self._context.get('search_default_name')):\n        domain = self._name_search_domain(name, operator, domain)\n        return self.search(domain, limit=limit, order=order).name_get()\n    if self._context.get('default_company_id') and self._context.get('default_partner_id') and not self._context.get('search_default_code') and not self._context.get('search_default_name'):\n        return self._name_search_by_frequency(name, domain, operator, limit, order)\n    return super()._name_search(name, domain, operator, limit, order)\n\n    @api.model\n    def _name_search_by_frequency(self, name, domain=None, operator='ilike', limit=None, order=None):\n        if name:\n            domain = self._name_search_domain(name, operator, domain)\n            return self.search(domain, limit=limit, order=order).name_get()\n        if not self._context.get('default_company_id') or not self._context.get('default_partner_id'):\n            return super()._name_search(name, domain, operator, limit, order)\n        order_by = self._order_accounts_by_frequency_for_partner(self._context.get('default_company_id'), self._context.get('default_partner_id'), self._context.get('default_move_type'))\n        if not order_by:\n            return super()._name_search(name, domain, operator, limit, order)\n        return super()._name_search(name, domain, operator, limit, order_by)\n\n    @api.model\n    def _name_search_domain(self, name, operator, domain):\n        if operator == 'ilike' and not (name or '').strip():\n            return domain\n        if not self._context.get('search_default_code') and not self._context.get('search_default_name'):\n            return super()._name_search", "CodeBleu_score": 31.528756963008707}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if not name and self._context.get('default_partner_id') and self._context.get('default_move_type'):\n        return self._order_accounts_by_frequency_for_partner(self._context['default_company_id'], self._context['default_partner_id'], self._context['default_move_type'])\n    if not domain:\n        domain = []\n    if name:\n        domain = expression.AND([domain, [('code', '=', name)]])\n    if self._context.get('default_partner_id') and self._context.get('default_move_type'):\n        domain = expression.AND([domain, [('id', 'in', self._order_accounts_by_frequency_for_partner(self._context['default_company_id'], self._context['default_partner_id'], self._context['default_move_type']))]])\n    return super()._name_search(name, domain, operator=operator, limit=limit, order=order)\n\n    @api.model\n    def _name_search(self, name, args=None, operator='ilike', limit=100, name_get_uid=None):\n        if not name and self._context.get('default_partner_id') and self._context.get('default_move_type'):\n            return self._order_accounts_by_frequency_for_partner(self._context['default_company_id'], self._context['default_partner_id'], self._context['default_move_type'])\n        if not args:\n            args = []\n        if name:\n            args = expression.AND([args, [('code', '=', name)]])\n        if self._context.get('default_partner_id') and self._context.get('default_move_type'):\n            args = expression.AND([args, [('id', 'in', self._order_accounts_by_frequency_for_partner(self._context['default_company_id'], self._context['default_partner_id'], self._context['default_move_type']))]])\n        return super()._name_search(name, args=args, operator=operator, limit=limit, name_get_uid=name_get_", "CodeBleu_score": 39.29443447007394}, {"code": "def _name_search(self, name, domain=None, operator='ilike', limit=None, order=None)\n\t\n    if name and operator == 'ilike' and not (domain and any(x[0] == 'code' for x in domain)):\n        domain = ['|', ('code', '=', name), ('code', operator, name)]\n    accounts = self.search(domain, limit=limit, order=order)\n    if not accounts and name and operator == 'ilike':\n        accounts = self.search([('code', '=', name)], limit=limit, order=order)\n    if not accounts and not self._context.get('search_default_account_receivable') and not self._context.get('search_default_account_payable'):\n        ptrn = re.compile('^(\\\\d+)?\\\\s*(.*)$')\n        res = ptrn.match(name.strip())\n        if res:\n            code = res.group(1) or False\n            name = res.group(2)\n            if code:\n                accounts = self.search([('code', '=', code), ('name', operator, name)], limit=limit, order=order)\n            if not accounts:\n                accounts = self.search([('code', '=', code)], limit=limit, order=order)\n            if not accounts:\n                accounts = self.search(['|', ('code', operator, code), ('name', operator, name)], limit=limit, order=order)\n    if not accounts and self._context.get('search_default_account_receivable'):\n        accounts = self.search([('user_type_id.type', '=','receivable')], limit=limit, order=order)\n    if not accounts and self._context.get('search_default_account_payable'):\n        accounts = self.search([('user_type_id.type', '=', 'payable')], limit=limit, order=order)\n    if not accounts and self._context.get('search_default_account_receivable') and self._context.get('default_partner_id'):\n        accounts = self.with_context(default_partner_id=self._context['default_partner_id'])._get_most_frequent_account_for_partner(self._context.get('company_id'), self._context['default_partner_id'], move_type='in_invoice')\n    if not accounts and self._context.get('search_default_", "CodeBleu_score": 39.30026748369247}]}
{"instance_id": "7b50a83ea003", "generation_result": [{"code": "def copy_translations(self, new, excluded=())\n\t\n    excluded = set(excluded) | {'name'}\n    super(AccountAccount, self).copy_translations(new, excluded)\n    if new.code and new.name.startswith(new.code):\n        new.name = new.name.replace(new.code, new.code + '.copy')\n        self.env['ir.translation']._update_cache(new, 'name')\n\n", "CodeBleu_score": 34.20650800234954}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    excluded = excluded + ('name',)\n    super().copy_translations(new, excluded=excluded)\n    if new.name and new.name.startswith(new.code) and new.name!= new.code:\n        new.with_context(lang=self.env.lang).name = new.name\n\n    @api.model\n    def _get_account_type_domain(self):\n        return [\n            ('type', '=', 'other'),\n            ('reconcile', '=', True),\n            ('deprecated', '=', False),\n        ]\n\n    @api.model\n    def _get_account_type_domain_for_tax_report(self):\n        return [\n            ('type', 'in', ('other','receivable', 'payable')),\n            ('reconcile', '=', True),\n            ('deprecated', '=', False),\n        ]\n\n    @api.model\n    def _get_account_type_domain_for_tax_report_summary(self):\n        return [\n            ('type', 'in', ('other','receivable', 'payable')),\n            ('deprecated', '=', False),\n        ]\n\n    @api.model\n    def _get_account_type_domain_for_tax_report_detail(self):\n        return [\n            ('type', 'in', ('other','receivable', 'payable')),\n            ('reconcile', '=', True),\n            ('deprecated', '=', False),\n        ]\n\n    @api.model\n    def _get_account_type_domain_for_tax_report_detail_summary(self):\n        return [\n            ('type', 'in', ('other','receivable', 'payable')),\n            ('deprecated', '=', False),\n        ]\n\n    @api.model\n    def _get_account_type_domain_for_tax_report_detail_tax(self):\n        return [\n            ('type', 'in', ('other','receivable', 'payable')),\n            ('reconcile', '=', True),\n            ('deprecated', '=', False),\n        ]\n\n    @api", "CodeBleu_score": 23.10231008067103}, {"code": "def copy_translations(self, new, excluded=())\n\t\n    if not excluded:\n        excluded = ('name',)\n    super(AccountAccount, self).copy_translations(new, excluded)\n    if new.name and new.code and new.name.startswith(new.code):\n        new.name = _('%s %s', new.code, new.name[len(new.code):].strip())\n    return new\n\n\n", "CodeBleu_score": 36.02049901344915}]}
{"instance_id": "125114ff7f53", "generation_result": [{"code": "def action_view_invoice(self)\n\t\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, move_id FROM\n        ({query_string}) distribution\n    \"\"\"\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['move_id'] for res in self._cr.dictfetchall()}\n    action = self.env[\"ir.actions.actions\"]._for_xml_id(\"account.action_move_in_invoice_type\")\n    action['domain'] = [('id', 'in', data.get(self.id, []))]\n    action['context'] = {\n        'default_analytic_account_id': self.id,\n        'default_type': 'in_invoice',\n        'create': False,\n    }\n    return action\n\n", "CodeBleu_score": 42.85951455216963}, {"code": "def action_view_invoice(self)\n\t\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\"\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 37.71848351680692}, {"code": "def action_view_invoice(self)\n\t\n    sale_types = self.env['account.move'].get_sale_types(include_receipts=True)\n\n    query = self.env['account.move.line']._search([\n        ('parent_state', '=', 'posted'),\n        ('move_id.move_type', 'in', sale_types),\n    ])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(account_id) for account_id in self.ids],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n\n    query_string, query_param = query.select(\n        r\"\"\"DISTINCT move_id, (regexp_matches(jsonb_object_keys(account_move_line.analytic_distribution), '\\d+', 'g'))[1]::int as account_id\"\"\",\n    )\n    query_string = f\"\"\"\n        SELECT account_id, count(move_id) FROM\n        ({query_string}) distribution\n        GROUP BY account_id\n    \"\"\"\n\n    self._cr.execute(query_string, query_param)\n    data = {res['account_id']: res['count'] for res in self._cr.dictfetchall()}\n    for account in self:\n        account.invoice_count = data.get(account.id, 0)\n\n", "CodeBleu_score": 37.728968388380764}]}
{"instance_id": "b836e6e7ea5d", "generation_result": [{"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n\n", "CodeBleu_score": 81.3073871986824}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n", "CodeBleu_score": 81.3073871986824}, {"code": "def action_view_vendor_bill(self)\n\t\n    self.ensure_one()\n    query = self.env['account.move.line']._search([('move_id.move_type', 'in', self.env['account.move'].get_purchase_types())])\n    query.add_where(\n        SQL(\n            \"%s && %s\",\n            [str(self.id)],\n            self.env['account.move.line']._query_analytic_accounts(),\n        )\n    )\n    query_string, query_param = query.select('DISTINCT account_move_line.move_id')\n    self._cr.execute(query_string, query_param)\n    move_ids = [line.get('move_id') for line in self._cr.dictfetchall()]\n    result = {\n        \"type\": \"ir.actions.act_window\",\n        \"res_model\": \"account.move\",\n        \"domain\": [('id', 'in', move_ids)],\n        \"context\": {\"create\": False, 'default_move_type': 'in_invoice'},\n        \"name\": _(\"Vendor Bills\"),\n        'view_mode': 'tree,form',\n    }\n    return result\n", "CodeBleu_score": 81.3073871986824}]}
{"instance_id": "6b78df61aba1", "generation_result": [{"code": "def write(self, values)\n\t\n\n    # EXTENDS base\n    if 'attachment_ids' in values and len(self) > 1:\n        raise UserError(_('You cannot modify attachments on multiple statements at the same time.'))\n\n    with self._check_attachments(self, [values]):\n        return super().write(values)\n\n    @api.model\n    def unlink(self):\n        # EXTENDS base\n        if len(self) > 1:\n            raise UserError(_('You cannot delete multiple statements at the same time.'))\n        return super().unlink()\n\n    def _get_statement_lines(self):\n        self.ensure_one()\n        return self.env['account.bank.statement.line'].search([('statement_id', '=', self.id)])\n\n    def _get_statement_lines_balance(self):\n        self.ensure_one()\n        lines = self._get_statement_lines()\n        return sum(lines.mapped('amount'))\n\n    def _get_statement_lines_balance_end(self):\n        self.ensure_one()\n        lines = self._get_statement_lines()\n        return sum(lines.mapped('amount_currency'))\n\n    def _get_statement_lines_balance_end_real(self):\n        self.ensure_one()\n        lines = self._get_statement_lines()\n        return sum(lines.mapped('amount_currency_real'))\n\n    def _get_statement_lines_balance_end_real_currency(self):\n        self.ensure_one()\n        lines = self._get_statement_lines()\n        return sum(lines.mapped('amount_currency_real_currency'))\n\n    def _get_statement_lines_balance_end_real_currency_id(self):\n        self.ensure_one()\n        lines = self._get_statement_lines()\n        return lines.mapped('amount_currency_real_currency').id\n\n    def _get_statement_lines_balance_end_real_currency_rate(self):\n        self.ensure_one()\n        lines = self._get_statement_lines()\n        return lines.mapped('amount_", "CodeBleu_score": 39.242886761347776}, {"code": "def write(self, values)\n\t\n    if 'attachment_ids' in values and len(self) > 1:\n        raise UserError(_('You cannot change the attachments of multiple statements at the same time.'))\n\n    container = {'records': self}\n    with self._check_attachments(container, [values]):\n        return super().write(values)\n\n    @api.model\n    def unlink(self):\n        \"\"\"The function unlink removes the records from the database. It checks attachments within a context manager before calling the parent class's unlink method and returning the result.\"\"\"\n        container = {'records': self}\n        with self._check_attachments(container, [{}]):\n            return super().unlink()\n\n    @api.model\n    def _get_lines_to_reconcile(self, st_line_ids):\n        \\\"\\\"\\\" Returns the lines to reconcile, including the ones from the same statement and the ones from other statements. \\\"\\\"\\\"\n        self.env['account.bank.statement.line'].flush_model(['statement_id', 'internal_index'])\n        self.env['account.bank.statement'].flush_model(['first_line_index'])\n\n        self.env.cr.execute(f\\\"\\\"\\\"\n            WITH RECURSIVE r_line_ids AS (\n                SELECT st_line.id\n                  FROM account_bank_statement_line st_line\n                 WHERE st_line.id = ANY(%(st_line_ids)s)\n\n                UNION\n\n                SELECT st_line.id\n                  FROM account_bank_statement_line st_line\n                 INNER JOIN r_line_ids ON r_line_ids.id = st_line.reconciled_line_id\n            )\n            SELECT st_line.id\n              FROM account_bank_statement_line st_line\n             WHERE st_line.id = ANY(%(st_line_ids)s)\n               OR st_line.id IN (SELECT id FROM r_line_ids)\n        \\\"\\\"\\\", {\n           'st_line_ids': st_line_ids,\n        })\n        res = self.env.cr.fetchall()\n        return [r[0] for r", "CodeBleu_score": 48.20061191863914}, {"code": "def write(self, values)\n\t\n    if self._context.get('active_model') == 'account.bank.statement.line' and 'attachment_ids' in values:\n        del values['attachment_ids']\n\n    with self._check_attachments(self, [values]):\n        return super().write(values)\n\n    @api.model\n    def unlink(self):\n        if self._context.get('active_model') == 'account.bank.statement.line':\n            raise UserError(_('You cannot delete a statement line.'))\n        return super().unlink()\n\n    def _get_lines_to_reconcile(self, line_ids):\n        \\\"\\\"\\\"Returns the lines to reconcile. If the line_ids are not provided, it returns the lines of the statement.\\\"\\\"\\\"\n        if line_ids:\n            lines = self.env['account.bank.statement.line'].browse(line_ids)\n        else:\n            lines = self.line_ids\n        return lines.filtered(lambda l: l.journal_entry_ids)\n\n    def _get_lines_to_reconcile_with_statement(self, line_ids):\n        \\\"\\\"\\\"Returns the lines to reconcile with the statement. If the line_ids are not provided, it returns the lines of the statement.\\\"\\\"\\\"\n        if line_ids:\n            lines = self.env['account.bank.statement.line'].browse(line_ids)\n        else:\n            lines = self.line_ids\n        return lines.filtered(lambda l: l.journal_entry_ids and l.journal_entry_ids.filtered(lambda je: je.statement_id!= self))\n\n    def _get_lines_to_reconcile_with_statement_and_partner(self, line_ids):\n        \\\"\\\"\\\"Returns the lines to reconcile with the statement and partner. If the line_ids are not provided, it returns the lines of the statement.\\\"\\\"\\\"\n        if line_ids:\n            lines = self.env['account.bank.statement.line'].browse(line_ids)\n        else:\n            lines = self.line_ids\n        return lines.filtered(lambda l: l.journal_entry_ids and l", "CodeBleu_score": 40.151330501109626}]}
{"instance_id": "8e6b94faa755", "generation_result": [{"code": "def _find_or_create_bank_account(self)\n\t\n    if self._context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].with_context(company_id=self.env.company.id)\n    return super()._find_or_create_bank_account()\n", "CodeBleu_score": 13.640723053945585}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if self._context.get('skip_bank_account_creation'):\n        return self.env['res.partner.bank'].browse()\n    else:\n        bank_account = self.env['res.partner.bank'].search([\n            ('acc_number', '=', self.acc_number),\n            ('partner_id', '=', self.partner_id.id),\n            ('company_id', '=', self.company_id.id),\n        ], limit=1)\n        if not bank_account:\n            bank_account = self.env['res.partner.bank'].create({\n                'acc_number': self.acc_number,\n                'partner_id': self.partner_id.id,\n                'company_id': self.company_id.id,\n            })\n        return bank_account\n", "CodeBleu_score": 56.7987358626895}, {"code": "def _find_or_create_bank_account(self)\n\t\n    if not self.env['ir.config_parameter'].sudo().get_param('account.disable_automatic_bank_account_creation'):\n        return self.env['res.partner.bank'].search([\n            ('acc_number', '=', self.acc_number),\n            ('partner_id', '=', self.partner_id.id),\n            ('company_id', '=', self.env.company.id),\n        ], limit=1)\n    return self.env['res.partner.bank']\n", "CodeBleu_score": 28.250296706420663}]}
{"instance_id": "1b7a0f87b520", "generation_result": [{"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    if transaction_currency == currency:\n        # The transaction is in the same currency as the counterpart, we can directly use the amounts\n        # retrieved from the journal entry.\n        transaction_amount = abs(transaction_amount)\n        journal_amount = abs(journal_amount)\n        company_amount = abs(company_amount)\n    else:\n        # The transaction is in a different currency than the counterpart, we need to convert the amounts\n        # using the exchange rates from the statement line.\n        transaction_amount = abs(transaction_amount)\n        journal_amount = abs(journal_amount)\n        company_amount = abs(company_amount)\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n    }\n\n\n", "CodeBleu_score": 16.092591411121436}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # Retrieve the transaction amount, journal amount and the company amount with their corresponding currencies\n    # from the journal entry linked to the statement line.\n    # All returned amounts will be positive for an inbound transaction, negative for an outbound one.\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    # If the transaction currency is the same as the journal currency, we can use the transaction amount.\n    # Otherwise, we need to convert the transaction amount to the journal currency.\n    if transaction_currency == journal_currency:\n        journal_amount = transaction_amount\n    else:\n        journal_amount = transaction_currency._convert(transaction_amount, journal_currency, self.company_id, self.date or fields.Date.today())\n    # If the transaction currency is the same as the company currency, we can use the transaction amount.\n    # Otherwise, we need to convert the transaction amount to the company currency.\n    if transaction_currency == company_currency:\n        company_amount = transaction_amount\n    else:\n        company_amount = transaction_currency._convert(transaction_amount, company_currency, self.company_id, self.date or fields.Date.today())\n    # If the statement line's currency is the same as the company currency, we can use the balance.\n    # Otherwise, we need to convert the balance to the company currency.\n    if currency == company_currency:\n        company_balance = balance\n    else:\n        company_balance = currency._convert(balance, company_currency, self.company_id, self.date or fields.Date.today())\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n        'company_balance': company_balance,\n    }\n\n\n", "CodeBleu_score": 28.87073481447787}, {"code": "def _prepare_counterpart_amounts_using_st_line_rate(self, currency, balance, amount_currency)\n\t\n    self.ensure_one()\n    # Retrieve accounting amounts and currencies from the journal entry linked to the statement line.\n    transaction_amount, transaction_currency, journal_amount, journal_currency, company_amount, company_currency = self._get_accounting_amounts_and_currencies()\n    # If the currency is different from the company currency, we need to convert the transaction amount and the balance.\n    # We use the exchange rate of the statement line to convert the transaction amount.\n    if currency!= company_currency:\n        transaction_amount = currency.with_context(date=self.date).compute(transaction_amount, company_currency)\n        balance = currency.with_context(date=self.date).compute(balance, company_currency)\n    # If the currency is different from the journal currency, we need to convert the journal amount.\n    # We use the exchange rate of the journal entry line to convert the journal amount.\n    if currency!= journal_currency:\n        journal_amount = currency.with_context(date=self.date).compute(journal_amount, journal_currency)\n    # If the currency is different from the transaction currency, we need to convert the transaction amount and the balance.\n    # We use the exchange rate of the transaction to convert the transaction amount.\n    if currency!= transaction_currency:\n        transaction_amount = currency.with_context(date_from=self.date).compute(transaction_amount, transaction_currency)\n        balance = currency.with_context(date_from=self.date).compute(balance, transaction_currency)\n    return {\n        'transaction_amount': transaction_amount,\n        'journal_amount': journal_amount,\n        'company_amount': company_amount,\n        'balance': balance,\n    }\n\n\n", "CodeBleu_score": 24.85232986620659}]}
{"instance_id": "9535776f8f98", "generation_result": [{"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n", "CodeBleu_score": 83.16128030441254}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({'name': pay_method.name, 'payment_method_id': pay_method.id}) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 74.79237320756044}, {"code": "def _compute_outbound_payment_method_line_ids(self)\n\t\n    for journal in self:\n        pay_method_line_ids_commands = [Command.clear()]\n        if journal.type in ('bank', 'cash'):\n            default_methods = journal._default_outbound_payment_methods()\n            pay_method_line_ids_commands += [Command.create({\n                'name': pay_method.name,\n                'payment_method_id': pay_method.id,\n            }) for pay_method in default_methods]\n        journal.outbound_payment_method_line_ids = pay_method_line_ids_commands\n\n", "CodeBleu_score": 83.16128030441254}]}
{"instance_id": "f5b9d4115264", "generation_result": [{"code": "def _compute_date(self)\n\t\n    today = fields.Date.context_today(self)\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = today\n        elif move.invoice_date and not move.is_sale_document(include_receipts=True):\n            move.date = move._get_accounting_date_from_invoice_date(move.invoice_date)\n            move.with_env(move.env(context=dict(self.env.context, recompute_date=False)))._recompute_fields()\n\n    @api.depends('invoice_date', 'company_id')\n    def _compute_invoice_date(self):\n        for move in self:\n            if move.invoice_date and not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date_from_invoice_date(move.invoice_date)\n            move.with_env(move.env(context=dict(self.env.context, recompute_date=False)))._recompute_fields()\n\n    @api.depends('invoice_date', 'company_id')\n    def _compute_invoice_date_due(self):\n        for move in self:\n            if move.invoice_date and move.invoice_date_due and not move.is_sale_document(include_receipts=True):\n                move.date_due = move._get_accounting_date_from_invoice_date(move.invoice_date_due)\n            move.with_env(move.env(context=dict(self.env.context, recompute_date=False)))._recompute_fields()\n\n    @api.depends('date', 'invoice_date', 'invoice_date_due', 'company_id')\n    def _compute_invoice_date_due_from_date(self):\n        for move in self:\n            if move.date and move.invoice_date_due and not move.is_sale_document(include_receipts=True):\n                move.invoice_date_due = move._get_invoice_date_from_accounting_date(move.date_due)\n            move.with_", "CodeBleu_score": 38.71153169668109}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if not move.date and not move.invoice_date:\n            move.date = fields.Date.context_today(self)\n        elif move.invoice_date and not move.is_sale_document(include_receipts=True):\n            move.date = fields.Date.from_string(move.invoice_date) + move.company_id.tax_report_interval\n        elif move.date and move.invoice_date and move.date!= fields.Date.from_string(move.invoice_date) + move.company_id.tax_report_interval:\n            move.date = fields.Date.from_string(move.invoice_date) + move.company_id.tax_report_interval\n            move.with_env(self.env(context={'recompute_date': True}))._compute_date()\n\n    @api.depends('invoice_date', 'company_id')\n    def _compute_tax_lock_date_message(self):\n        for move in self:\n            if move.invoice_date and move.invoice_date < move.company_id.tax_lock_date:\n                move.tax_lock_date_message = \\\"This invoice's accounting date is prior to the tax lock date.\\\"\n            else:\n                move.tax_lock_date_message = ''\n\n    @api.depends('invoice_date', 'company_id')\n    def _compute_display_inactive_currency_warning(self):\n        for move in self:\n            if move.invoice_date and move.invoice_date < move.company_id.tax_lock_date:\n                move.display_inactive_currency_warning = move.currency_id.state == 'disabled'\n            else:\n                move.display_inactive_currency_warning = False\n\n    @api.depends('invoice_line_ids.tax_ids', 'invoice_line_ids.price_subtotal', 'currency_id', 'company_id', 'invoice_date')\n    def _compute_amount(self):\n        for move in self:\n            if move.invoice_date and move.invoice_date < move.company_id.tax_lock_date:\\", "CodeBleu_score": 33.78049057651366}, {"code": "def _compute_date(self)\n\t\n    for move in self:\n        if move.invoice_date and not move.date:\n            move.date = fields.Date.from_string(move.invoice_date)\n            if not move.is_sale_document(include_receipts=True):\n                move.date = move._get_accounting_date()\n        if not move.date:\n            move.date = fields.Date.context_today(self)\n        if move.date!= move._get_accounting_date():\n            self.env.recompute()\n\n    def _compute_invoice_filter_type_domain(self):\n        \"\"\" This function computes the domain for the journal field on the invoice form view. It filters the domain to only show journals of the same type as the invoice's move type. \"\"\"\n        for move in self:\n            move.invoice_filter_type_domain = [('type', '=', move.move_type)]\n\n    def _compute_bank_partner_id(self):\n        \"\"\" This function computes the bank partner ID for each invoice. It filters the domain to only show banks that are partners of the company. \"\"\"\n        for move in self:\n            move.bank_partner_id = move.company_id.partner_id\n\n    def _compute_tax_lock_date_message(self):\n        \"\"\" This function computes the tax lock date message for each invoice. It checks if the invoice's accounting date is prior to the tax lock date and sets the tax lock date message accordingly. \"\"\"\n        for move in self:\n            if move.date < move.company_id.tax_lock_date:\n                move.tax_lock_date_message = _('The invoice date is prior to the tax lock date.')\n            else:\n                move.tax_lock_date_message = ''\n\n    def _compute_display_inactive_currency_warning(self):\n        \"\"\" This function computes the display inactive currency warning for each invoice. It checks if the invoice's currency is active and sets the display inactive currency warning accordingly. \"\"\"\n        for move in self:\n            move.display_inactive_currency_warning = not move.currency_id.active\n\n    def _compute_tax_country_id(self):\n       ", "CodeBleu_score": 38.744175968575625}]}
{"instance_id": "af48962a564f", "generation_result": [{"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice(include_receipts=True):\n            payment_term = move.partner_id.property_supplier_payment_term_id if move.type in ('in_invoice', 'in_refund') else move.partner_id.property_payment_term_id\n            move.invoice_payment_term_id = payment_term\n        else:\n            move.invoice_payment_term_id = False\n\n    @api.depends('invoice_payment_term_id')\n    def _compute_invoice_payment_term_date(self):\n        for move in self:\n            if move.invoice_payment_term_id:\n                move.invoice_payment_term_date = move.invoice_payment_term_id.with_context(date_ref=move.date).compute(value=1, date_ref=move.date)[0][0]\n            else:\n                move.invoice_payment_term_date = False\n\n    @api.depends('line_ids.tax_line_id')\n    def _compute_has_tax_lines(self):\n        for move in self:\n            move.has_tax_lines = bool(move.line_ids.filtered(lambda line: line.tax_line_id))\n\n    @api.depends('line_ids.tax_ids')\n    def _compute_has_tax_line_ids(self):\n        for move in self:\n            move.has_tax_line_ids = bool(move.line_ids.filtered(lambda line: line.tax_ids))\n\n    @api.depends('line_ids.tax_ids')\n    def _compute_has_tax_lines_on_taxes(self):\n        for move in self:\n            move.has_tax_lines_on_taxes = bool(move.line_ids.filtered(lambda line: line.tax_ids.filtered(lambda tax: tax.tax_exigibility == 'on_tax')))\n\n    @api.depends('line_ids.tax_ids')\n    def _compute_has_tax_lines_on_taxes_with_amount(", "CodeBleu_score": 36.27145982184415}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice(include_receipts=True):\n            if move.type in ('out_invoice', 'out_refund'):\n                move.invoice_payment_term_id = move.partner_id.property_supplier_payment_term_id\n            elif move.type in ('in_invoice', 'in_refund'):\n                move.invoice_payment_term_id = move.partner_id.property_payment_term_id\n        else:\n            move.invoice_payment_term_id = False\n\n", "CodeBleu_score": 47.57700486335657}, {"code": "def _compute_invoice_payment_term_id(self)\n\t\n    for move in self:\n        if move.is_invoice(include_receipts=True):\n            partner_payment_term = move.partner_id.property_supplier_payment_term_id if move.move_type == 'in' else move.partner_id.property_payment_term_id\n            move.invoice_payment_term_id = partner_payment_term.id or False\n        else:\n            move.invoice_payment_term_id = False\n\n    @api.depends('invoice_payment_term_id', 'invoice_date')\n    def _compute_invoice_payment_date(self):\n        for move in self:\n            if move.invoice_payment_term_id:\n                move.invoice_payment_date = move.invoice_payment_term_id.compute(move.invoice_date)[0][0]\n            else:\n                move.invoice_payment_date = False\n\n    @api.depends('partner_id','move_type', 'invoice_payment_term_id', 'invoice_date')\n    def _compute_invoice_payment_difference(self):\n        for move in self:\n            if move.is_invoice(include_receipts=True):\n                partner_payment_term = move.partner_id.property_supplier_payment_term_id if move.move_type == 'in' else move.partner_id.property_payment_term_id\n                if move.invoice_payment_term_id and move.invoice_payment_term_id!= partner_payment_term:\n                    move.invoice_payment_difference = True\n                else:\n                    move.invoice_payment_difference = False\n            else:\n                move.invoice_payment_difference = False\n\n    @api.depends('invoice_payment_term_id', 'invoice_payment_date', 'invoice_date')\n    def _compute_invoice_payment_difference_date(self):\n        for move in self:\n            if move.invoice_payment_difference:\n                move.invoice_payment_difference_date = move.invoice_payment_date - move.invoice_date\n            else:\n                move.invoice_payment_difference_date = False", "CodeBleu_score": 39.866901191499}]}
{"instance_id": "a071628f8e36", "generation_result": [{"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = self.env['account.tax.group'].search([\n            ('country_id', '=', tax.country_id.id),\n            ('company_id', '=', tax.company_id.id),\n        ], limit=1) or self.env['account.tax.group'].search([\n            ('country_id', '=', False),\n            ('company_id', '=', tax.company_id.id),\n        ], limit=1) or self.env['account.tax.group'].search([\n            ('country_id', '=', tax.country_id.id),\n            ('company_id', '=', False),\n        ], limit=1) or self.env['account.tax.group'].search([\n            ('country_id', '=', False),\n            ('company_id', '=', False),\n        ], limit=1) or False\n\n    @api.depends('repartition_line_ids','repartition_line_ids.account_id','repartition_line_ids.account_id.user_type_id')\n    def _compute_invoice_repartition_line_ids(self):\n        for tax in self:\n            tax.invoice_repartition_line_ids = tax.repartition_line_ids.filtered(lambda line: line.document_type == 'invoice')\n\n    @api.depends('repartition_line_ids','repartition_line_ids.account_id','repartition_line_ids.account_id.user_type_id')\n    def _compute_refund_repartition_line_ids(self):\n        for tax in self:\n            tax.refund_repartition_line_ids = tax.repartition_line_ids.filtered(lambda line: line.document_type =='refund')\n\n    @api.depends('repartition_line_ids','repartition_line_ids.account_id','repartition_line_ids.account_id.user_type_id')\n    def _compute_repartition_lines_str(self):\n        for tax in self:\n            tax.repartition_lines_str = ', '.join(line.account_id.name for line in tax.repartition_line_ids)\n\n    @api.depends('children_tax_ids', 'children_tax_ids.active')\n    def _compute", "CodeBleu_score": 32.50896617574786}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = self.env['account.tax.group'].search([('country_id', '=', tax.country_id.id), ('company_id', '=', tax.company_id.id)], limit=1) or self.env['account.tax.group'].search([('country_id', '=', False), ('company_id', '=', tax.company_id.id)], limit=1)\n\n    @api.depends('repartition_line_ids')\n    def _compute_repartition_lines_str(self):\n        for tax in self:\n            tax.repartition_lines_str = ', '.join(line.account_id.name for line in tax.repartition_line_ids)\n\n    @api.depends('repartition_line_ids','repartition_line_ids.account_id','repartition_line_ids.account_id.code','repartition_line_ids.account_id.name','repartition_line_ids.account_id.user_type_id.name')\n    def _compute_invoice_repartition_line_ids(self):\n        for tax in self:\n            tax.invoice_repartition_line_ids = tax.repartition_line_ids.filtered(lambda line: line.document_type == 'invoice')\n\n    @api.depends('repartition_line_ids','repartition_line_ids.account_id','repartition_line_ids.account_id.code','repartition_line_ids.account_id.name','repartition_line_ids.account_id.user_type_id.name')\n    def _compute_refund_repartition_line_ids(self):\n        for tax in self:\n            tax.refund_repartition_line_ids = tax.repartition_line_ids.filtered(lambda line: line.document_type =='refund')\n\n    @api.depends('children_tax_ids')\n    def _compute_is_used(self):\n        for tax in self:\n            tax.is_used = bool(tax.children_tax_ids)\n\n    @api.depends('children_tax", "CodeBleu_score": 28.811295645672864}, {"code": " def _compute_tax_group_id(self)\n\t\n    for tax in self:\n        tax.tax_group_id = self.env['account.tax.group'].search([\n            ('country_id', 'in', (tax.country_id, False)),\n            ('company_id', 'in', (tax.company_id, False)),\n        ], order='country_id desc, company_id desc', limit=1)\n\n    @api.depends('repartition_line_ids')\n    def _compute_repartition_lines_str(self):\n        for tax in self:\n            tax.repartition_lines_str = json.dumps([line.to_json() for line in tax.repartition_line_ids])\n\n    @api.depends('repartition_lines_str', 'invoice_repartition_line_ids','refund_repartition_line_ids')\n    def _compute_is_used(self):\n        for tax in self:\n            tax.is_used = bool(tax.repartition_lines_str or tax.invoice_repartition_line_ids or tax.refund_repartition_line_ids)\n\n    @api.depends('repartition_line_ids')\n    def _compute_invoice_repartition_line_ids(self):\n        for tax in self:\n            tax.invoice_repartition_line_ids = tax.repartition_line_ids.filtered(lambda line: line.document_type == 'invoice')\n\n    @api.depends('repartition_line_ids')\n    def _compute_refund_repartition_line_ids(self):\n        for tax in self:\n            tax.refund_repartition_line_ids = tax.repartition_line_ids.filtered(lambda line: line.document_type =='refund')\n\n    @api.model\n    def _get_default_repartition_lines(self):\n        return self.env['account.tax.repartition.line'].new(\n            {\n                'label': self.env.company.currency_id.name,\n                'account_id': self.env.company.account_revenue_id.id,\n                'tax_repartition_id': self.env.context.get('default_tax_repartition_id'),\n            }\n        )\n\n   ", "CodeBleu_score": 26.268280038288243}]}
{"instance_id": "5514fee4f39c", "generation_result": [{"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    # Set the database in the session\n    self.session.get(f'{url}/web/database/selector')\n    self.session.post(f'{url}/web/session/authenticate', data={\n        'login': login,\n        'password':,\n        'db': db,\n    })\n\n    # Prepare the POST request data\n    data = {\n        'force': '1' if force else '0',\n       'module_file': ('module_file', open(module_file, 'rb')),\n    }\n\n    # Upload the module file to the server\n    response = self.session.post(f'{url}/base_import_module/login_upload', files=data)\n\n    # Check if the server has the required module installed or is outdated\n    if response.status_code == 400 and 'Module not found' in response.text:\n        raise Exception('Module not found')\n    elif response.status_code == 400 and 'Module is outdated' in response.text:\n        raise Exception('Module is outdated')\n\n    return response.text\n\n", "CodeBleu_score": 45.415279759861676}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    # Set the database in the session\n    self.session.get(url + '/web/database/selector')\n    self.session.post(url + '/web/login', data={'login': login, 'password':, 'db': db})\n        # Prepare the POST request data\n        data = {'force': force}\n        files = {'file': open(module_file, 'rb')}\n        # Upload the module file to the server\n        response = self.session.post(url + '/base_import_module/login_upload', data=data, files=files)\n        # Check if the server has the required module installed or is outdated\n        if response.status_code == 400:\n            raise Exception('Server does not have the required module installed or is outdated.')\n        return response.text\n\n    def zip_module(self, module_path):\n        \\\"\\\"\\\"This function zips a module directory into a temporary file and returns the file path.\\\"\\\"\\\"\n        module_path = Path(module_path)\n        if not module_path.is_dir():\n            raise Exception('Module path is not a directory.')\n        # Create a temporary file\n        temp_file = tempfile.NamedTemporaryFile(suffix='.zip', delete=False)\n        # Zip the module directory into the temporary file\n        with zipfile.ZipFile(temp_file.name, 'w') as zip_file:\n            for path in module_path.rglob('*'):\n                if path.is_file():\n                    zip_file.write(path, path.relative_to(module_path))\n        return temp_file.name\n\n    def run(self):\n        \\\"\\\"\\\"This function parses command line arguments and calls the deploy_module function with the specified arguments.\\\"\\\"\\\"\n        parser = argparse.ArgumentParser(description='Deploy a module on an Odoo instance.')\n        parser.add_argument('module_path', help='Path to the module directory.')\n        parser.add_argument('url', help='URL of the Odoo instance.')\n        parser.add_argument('login', help='Login username.')\n        parser.add_argument('password', help='Login password.')\n", "CodeBleu_score": 39.493140412455624}, {"code": "def login_upload_module(self, module_file, url, login, password, db, force=False)\n\t    login_url = f\"{url}/web/login\"\n        login_data = {\n            'login': login,\n            'password':,\n            'db': db,\n        }\n        self.session.post(login_url, data=login_data)\n\n        post_data = {\n            'login': login,\n            'password':,\n            'db': db,\n            'force': force,\n        }\n\n        with open(module_file, 'rb') as f:\n            response = self.session.post(f\"{url}/base_import_module/login_upload\", data=post_data, files={'file': f})\n\n        if response.status_code!= 200:\n            raise Exception(f\"Error uploading module: {response.text}\")\n\n        return response.text\n\n    def zip_module(self, module_path):\n        \\\"\\\"\\\"This function zips a module directory into a temporary file and returns the path to the zip file.\\\"\\\"\\\"\n        module_path = Path(module_path)\n        if not module_path.is_dir():\n            raise Exception(f\"Module path {module_path} is not a directory.\")\n\n        module_name = module_path.name\n        with tempfile.TemporaryDirectory() as temp_dir:\n            temp_file = Path(temp_dir) / f\"{module_name}.zip\"\n            with zipfile.ZipFile(temp_file, 'w') as zip_file:\n                for root, dirs, files in os.walk(module_path):\n                    for file in files:\n                        file_path = Path(root) / file\n                        zip_file.write(file_path, file_path.relative_to(module_path))\n\n        return temp_file\n\n    def run(self, args):\n        \\\"\\\"\\\"This function parses the command-line arguments and calls the deploy_module function to deploy a module on an Odoo instance.\\\"\\\"\\\"\n        parser = argparse.ArgumentParser(description=self.description)\n        parser.add_argument('module_path', help='Path to the module directory to be deployed.')\n        parser.", "CodeBleu_score": 43.641381639963726}]}
{"instance_id": "781e2a94c6d2", "generation_result": [{"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config[\"db_name\"]\n    overwrite = config[\"overwrite\"]\n    _logger.info(\"reading translation file %s\", config[\"translate_in\"])\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(config[\"translate_in\"], cr, overwrite)\n        _logger.info(\"imported %d translation units\", importer.stats[\"total\"])\n        _logger.info(\"imported %d translation units (new)\", importer.stats[\"new\"])\n        _logger.info(\"updated %d translation units\", importer.stats[\"updated\"])\n        _logger.info(\"ignored %d translation units\", importer.stats[\"ignored\"])\n        _logger.info(\"deleted %d translation units\", importer.stats[\"deleted\"])\n\n", "CodeBleu_score": 34.05247845737479}, {"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config['db_name']\n    overwrite = config['overwrite']\n    if not config['translate_modules']:\n        _logger.info('No modules specified, nothing to do')\n        return\n    if not config['translate_file']:\n        _logger.info('No file specified, nothing to do')\n        return\n    _logger.info('loading translation file %s', config['translate_file'])\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(config['translate_file'], cr)\n        for module in config['translate_modules']:\n            _logger.info('loading translations for module %s', module)\n            importer.load_module(module, overwrite=overwrite)\n        importer.save()\n    _logger.info('translation file loaded successfully')\n\n", "CodeBleu_score": 53.49021795387105}, {"code": "def import_translation()\n\t  config = odoo.tools.config\n    dbname = config[\"db_name\"]\n    overwrite = config[\"overwrite\"]\n    _logger.info(\"importing translation files\")\n    registry = odoo.modules.registry.Registry.new(dbname)\n    with registry.cursor() as cr:\n        importer = odoo.tools.trans_load(cr, overwrite)\n        importer.load_files(config[\"translate_modules\"] or [\"all\"], config[\"translate_lang\"])\n    _logger.info(\"translation files successfully imported\")\n\n", "CodeBleu_score": 56.76849444958313}]}
{"instance_id": "6ac19b8ee563", "generation_result": [{"code": "def add_child(self, name, info)\n\tchild = Node(name, self.graph, info)\n    child.depth = self.depth + 1\n    if not hasattr(self, 'init') and hasattr(child, 'init'):\n        self.init = child.init\n    if not hasattr(self, 'demo') and hasattr(child, 'demo'):\n        self.demo = child.demo\n    if not hasattr(self, 'update') and hasattr(child, 'update'):\n        self.update = child.update\n    if child not in self.children:\n        self.children.append(child)\n    self.children.sort(key=lambda c: c.name)\n    return child\n\n    def __str__(self):\n        return''* self.depth + self.name\n\n    def __repr__(self):\n        return '<Node %s>' % self.name\n\n    def __iter__(self):\n        for child in self.children:\n            yield child\n\n    def __contains__(self, name):\n        return name in self.graph\n\n    def __getitem__(self, name):\n        return self.graph[name]\n\n    def __len__(self):\n        return len(self.children)\n\n    def __eq__(self, other):\n        return self.name == other.name\n\n    def __ne__(self, other):\n        return self.name!= other.name\n\n    def __hash__(self):\n        return hash(self.name)\n\n    def __cmp__(self, other):\n        return cmp(self.name, other.name)\n\n    def __lt__(self, other):\n        return self.name < other.name\n\n    def __gt__(self, other):\n        return self.name > other.name\n\n    def __le__(self, other):\n        return self.name <= other.name\n\n    def __ge__(self, other):\n        return self.name >= other.name\n\n    def __nonzero__(self):\n        return True\n\n    def __bool__(self):\n        return True\n\n    def __len__(self", "CodeBleu_score": 42.21685789678284}, {"code": "def add_child(self, name, info)\n\tif name not in self.graph:\\\n        node = Node(name, self.graph, info)\\\n        node.depth = self.depth + 1\\\n        node.init = self.init\\\n        node.demo = self.demo\\\n        node.update = self.update\\\n        self.children.append(node)\\\n        self.children.sort(key=lambda n: n.name)\\\n        return node\\\n    else:\\\n        return self.graph[name]\\\n", "CodeBleu_score": 35.545729362697145}, {"code": "def add_child(self, name, info)\n\tif name not in (c.name for c in self.children):\\\n        child = Node(name, self.graph, info)\\\n        child.depth = self.depth + 1\\\n        if hasattr(self, 'init') and not hasattr(child, 'init'):\\\n            child.init = True\\\n        if hasattr(self, 'demo') and not hasattr(child, 'demo'):\\\n            child.demo = True\\\n        if hasattr(self, 'update') and not hasattr(child, 'update'):\\\n            child.update = True\\\n        self.children.append(child)\\\n        self.children.sort(key=lambda c: c.name)\\\n        return child\\\n    else:\\\n        return self.children[self.children.index(name)]\\\n", "CodeBleu_score": 29.25360041713902}]}
{"instance_id": "ecff92e6f255", "generation_result": [{"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[d, 0] for d in dates]\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        for i, d in enumerate(dates):\n            if entry.posting_date <= d:\n                result[i][1] += entry.debit - entry.credit\n                if root_type not in (\"Asset\", \"Expense\"):\n                    result[i][1] *= -1\n                if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n                    result[i][1] = sum(r[1] for r in result[: i + 1])\n    return result\n\n", "CodeBleu_score": 41.02985470865803}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[d, 0] for d in dates]\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n\n    for entry in gl_entries:\n        entry_date = getdate(entry.posting_date)\n        if entry_date > dates[-1]:\n            break\n\n        if root_type not in (\"Asset\", \"Expense\"):\n            entry.debit = -entry.debit\n            entry.credit = -entry.credit\n\n        for i, d in enumerate(dates):\n            if entry_date <= d:\n                result[i][1] += entry.debit - entry.credit\n            else:\n                break\n\n    if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n        for i, d in enumerate(result):\n            if i > 0:\n                d[1] += result[i - 1][1]\n\n    return result\n\n", "CodeBleu_score": 43.50090611845992}, {"code": "def build_result(account, dates, gl_entries)\n\t\n    result = [[d, 0] for d in dates]\n    root_type = frappe.db.get_value(\"Account\", account, \"root_type\")\n    for entry in gl_entries:\n        if entry.posting_date > entry.period_end_date:\n            continue\n        if entry.account == account:\n            entry_balance = entry.debit - entry.credit\n        else:\n            entry_balance = 0\n        for i, date in enumerate(dates):\n            if date >= entry.posting_date:\n                result[i][1] += entry_balance\n                if root_type not in (\"Asset\", \"Expense\"):\n                    result[i][1] = -result[i][1]\n                if root_type in (\"Asset\", \"Liability\", \"Equity\"):\n                    result[i][1] = sum(r[1] for r in result[: i + 1])\n                break\n    return result\n\n", "CodeBleu_score": 39.17861068053886}]}
{"instance_id": "0b19cef827c1", "generation_result": [{"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        db_value = self.get_doc_before_save()\n        if db_value and db_value.account_type not in [\"Receivable\", \"Payable\"]:\n            gl_entries = frappe.db.sql(\n                \"\"\"SELECT name FROM `tabGL Entry` WHERE account=%(account)s\"\"\",\n                {\"account\": self.name},\n                as_dict=True,\n            )\n            if gl_entries:\n                frappe.throw(\n                    _(\n                        \"\"\"The account type for {0} has been changed from {1} to {2}.\n                        Changing the account type from receivable/payable to a non-receivable/payable type may result in issues in the Accounts report.\n                        Please check the General Ledger entries for this account before proceeding.\"\"\".format(\n                            self.name, db_value.account_type, self.account_type\n                        )\n                    ),\n                    title=_(\"Account Type Change\"),\n                )\n                frappe.db.set_value(\"Account\", self.name, \"comment\", \"Account type changed\")\n\n", "CodeBleu_score": 27.233372853600528}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.account_type in [\"Receivable\", \"Payable\"]:\n        db_account = frappe.get_cached_doc(\"Account\", self.name)\n        if db_account.account_type!= self.account_type:\n            if frappe.db.exists(\n                \"General Ledger\", {\"account\": self.name, \"docstatus\": 1}\n            ):\n                frappe.throw(\n                    _(\n                        \"Account type cannot be changed from Receivable or Payable to another account type as there are existing general ledger entries for this account.\"\n                    ),\n                    title=\"Warning\",\n                )\n            else:\n                frappe.msgprint(\n                    _(\n                        \"Account type changed from Receivable or Payable to another account type. Please check the Accounts report for potential issues.\"\n                    ),\n                    alert=True,\n                    indicator=\"orange\",\n                )\n                frappe.db.set_value(\n                    \"Account\",\n                    self.name,\n                    \"comment\",\n                    \"Account type changed from Receivable or Payable to another account type. Please check the Accounts report for potential issues.\",\n                )\n\n", "CodeBleu_score": 21.39819433011336}, {"code": "def validate_receivable_payable_account_type(self)\n\t\n    if self.is_group:\\\n        return\n    if self.account_type in [\"Receivable\", \"Payable\"]:\\\n        if self.get_doc_before_save():\\\n            if self.get_doc_before_save().account_type!= self.account_type:\\\n                if not frappe.db.exists(\"General Ledger\", {\"account\": self.name}):\\\n                    frappe.throw(\\\n                        _(\n                            \"You cannot change the account type from {0} to {1} as there are existing General Ledger entries for this account.\"\n                        ).format(self.get_doc_before_save().account_type, self.account_type),\\\n                        title=\"Account Type Change\",\\\n                    )\\\n                else:\\\n                    frappe.msgprint(\\\n                        _(\n                            \"You cannot change the account type from {0} to {1} as there are existing General Ledger entries for this account. This may lead to issues in the Accounts report.\"\n                        ).format(self.get_doc_before_save().account_type, self.account_type),\\\n                        alert=True,\\\n                    )\\\n                    frappe.db.set_value(\\\n                        \"Account\",\\\n                        self.name,\\\n                        \"comment\",\\\n                        _(\n                            \"You cannot change the account type from {0} to {1} as there are existing General Ledger entries for this account.\"\n                        ).format(self.get_doc_before_save().account_type, self.account_type),\\\n                    )\\\n\n", "CodeBleu_score": 24.858090860766}]}
{"instance_id": "bd138a3f3ccd", "generation_result": [{"code": "def validate_account_currency(self)\n\t\n    if self.account_currency == \"\":\n        self.account_currency = frappe.get_cached_value(\"Company\", self.company, \"default_currency\")\n        self.account_currency_is_explicitly_specified = 0\n    else:\n        self.account_currency_is_explicitly_specified = 1\n    if self.flags.ignore_account_currency_validation:\n        return\n    if self.account_currency!= frappe.get_cached_value(\"Company\", self.company, \"default_currency\"):\n        if frappe.db.exists(\n            \"GL Entry\", {\"account\": self.name, \"currency\": [\"!=\", self.account_currency]}\n        ):\n            frappe.throw(\n                _(\"Account currency must be same as company's default currency\"),\n                CurrencyMismatchError,\n            )\n\n", "CodeBleu_score": 36.796200380674485}, {"code": "def validate_account_currency(self)\n\t\n    if self.account_currency and self.account_currency!= self.company_currency:\n        if self.get(\"__islocal\"):\n            self.account_currency_is_explicitly_specified = 1\n        else:\n            if frappe.db.exists(\"General Ledger Entry\", {\"account\": self.name, \"currency\": self.account_currency}):\n                frappe.throw(\n                    _(\"Cannot change the currency of the account as there are transactions with a different currency\")\n                )\n            self.account_currency_is_explicitly_specified = 1\n    else:\n        self.account_currency = self.company_currency\n        self.account_currency_is_explicitly_specified = 0\n\n", "CodeBleu_score": 30.187866729333308}, {"code": "def validate_account_currency(self)\n\t\n    if not self.get(\"__islocal\"):\n        if self.account_currency and self.account_currency!= self.company_currency:\n            if self.check_gle_exists():\n                frappe.throw(\n                    _(\n                        \"Account with existing transaction cannot be converted to ledger\"\n                    )\n                )\n            elif self.is_group:\n                if self.account_type and not self.flags.exclude_account_type_check:\n                    frappe.throw(\n                        _(\n                            \"Cannot covert to Group because Account Type is selected.\"\n                        )\n                    )\n            elif self.check_if_child_exists():\n                frappe.throw(\n                    _(\n                        \"Account with child nodes cannot be set as ledger\"\n                    )\n                )\n\n    if self.account_currency:\n        self.account_currency_is_explicitly_specified = 1\n    else:\n        self.account_currency = self.company_currency\n\n", "CodeBleu_score": 23.059342201425352}]}
{"instance_id": "a8bea28f2b89", "generation_result": [{"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = frappe.utils.get_key_str(entry, accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \\\"company\\\": entry.company,\n                \\\"account\\\": entry.account,\n                \\\"account_currency\\\": entry.account_currency,\n                \\\"debit\\\": 0,\n                \\\"credit\\\": 0,\n                \\\"debit_in_account_currency\\\": 0,\n                \\\"credit_in_account_currency\\\": 0,\n                \\\"dimensions\\\": {\n                    \\\"project\\\": entry.project,\n                    \\\"cost_center\\\": entry.cost_center,\n                    \\\"finance_book\\\": entry.finance_book,\n                },\n            }\n        merged_entries[key][\\\"debit\\\"] += entry.debit\n        merged_entries[key][\\\"credit\\\"] += entry.credit\n        merged_entries[key][\\\"debit_in_account_currency\\\"] += entry.debit_in_account_currency\n        merged_entries[key][\\\"credit_in_account_currency\\\"] += entry.credit_in_account_currency\n\n    return merged_entries\n\n", "CodeBleu_score": 27.493561276501804}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = \\\"-\\\".join(cstr(entry.get(dimension)) for dimension in accounting_dimensions)\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \\\"debit\\\": 0.0,\n                \\\"credit\\\": 0.0,\n                \\\"debit_in_account_currency\\\": 0.0,\n                \\\"credit_in_account_currency\\\": 0.0,\n                \\\"dimensions\\\": {\n                    dimension: entry.get(dimension)\n                    for dimension in accounting_dimensions\n                },\n            }\n\n        merged_entries[key][\\\"debit\\\"] += entry.get(\\\"debit\\\")\n        merged_entries[key][\\\"credit\\\"] += entry.get(\\\"credit\\\")\n        merged_entries[key][\\\"debit_in_account_currency\\\"] += entry.get(\\\"debit_in_account_currency\\\")\n        merged_entries[key][\\\"credit_in_account_currency\\\"] += entry.get(\\\"credit_in_account_currency\\\")\n\n    return merged_entries\n\n\n", "CodeBleu_score": 28.43540119275316}, {"code": "def aggregate_with_last_account_closing_balance(entries, accounting_dimensions)\n\t\n    merged_entries = {}\n    for entry in entries:\n        key = \\\"\\\"\n        for dimension in accounting_dimensions:\n            if dimension in entry:\n                key += f\\\"{dimension}:{entry[dimension]}\\\"\n        if key not in merged_entries:\n            merged_entries[key] = {\n                \\\"account\\\": entry[\\\"account\\\"],\n                \\\"account_currency\\\": entry[\\\"account_currency\\\"],\n                \\\"company\\\": entry[\\\"company\\\"],\n                \\\"debit\\\": 0,\n                \\\"credit\\\": 0,\n                \\\"debit_in_account_currency\\\": 0,\n                \\\"credit_in_account_currency\\\": 0,\n                \\\"dimensions\\\": {dimension: entry[dimension] for dimension in accounting_dimensions},\n            }\n        merged_entries[key][\\\"debit\\\"] += entry[\\\"debit\\\"]\n        merged_entries[key][\\\"credit\\\"] += entry[\\\"credit\\\"]\n        merged_entries[key][\\\"debit_in_account_currency\\\"] += entry[\\\"debit_in_account_currency\\\"]\n        merged_entries[key][\\\"credit_in_account_currency\\\"] += entry[\\\"credit_in_account_currency\\\"]\n    return merged_entries\n\n", "CodeBleu_score": 24.123222134306943}]}
{"instance_id": "13c346120514", "generation_result": [{"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier and self.is_new():\n        supplier = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier.is_blocked:\n            if supplier.hold_type == \"Payment\":\n                if supplier.release_date and supplier.release_date < today():\n                    supplier.is_blocked = 0\n                    supplier.save()\n                else:\n                    if supplier.hold_type == \"Payment\":\n                        msg = _(\"Supplier is on hold and payment is blocked\")\n                    else:\n                        msg = _(\"Supplier is on hold and invoice is blocked\")\n                    msg += f\"<br><b>{bold('Release Date')}</b>: {formatdate(supplier.release_date)}\"\n                    msg += f\"<br><b>{bold('Hold Type')}</b>: {supplier.hold_type}\"\n                    msg += f\"<br><b>{bold('Hold Reason')}</b>: {supplier.hold_reason}\"\n                    msg += f\"<br><b>{bold('Hold Description')}</b>: {supplier.hold_description}\"\n                    frappe.throw(msg)\n\n", "CodeBleu_score": 29.155638759279352}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.doctype == \"Supplier Payment\":\n        supplier_account = frappe.get_cached_value(\"Account\", self.supplier_account, \"account_name\")\n        supplier = frappe.get_cached_value(\"Supplier\", supplier_account, \"name\")\n    elif self.doctype in (\"Purchase Invoice\", \"Purchase Receipt\", \"Purchase Order\"):\n        supplier = self.supplier\n    else:\n        return\n\n    if supplier and frappe.db.get_value(\"Supplier\", supplier, \"blocked\") == \"Yes\":\n        supplier_blocked_for = frappe.db.get_value(\"Supplier\", supplier, \"supplier_blocked_for\")\n        if supplier_blocked_for == \"Hold\":\n            supplier_hold_till = frappe.db.get_value(\"Supplier\", supplier, \"supplier_hold_till\")\n            if supplier_hold_till and supplier_hold_till < nowdate():\n                frappe.db.set_value(\"Supplier\", supplier, \"blocked\", \"No\")\n                frappe.db.set_value(\"Supplier\", supplier, \"supplier_blocked_for\", None)\n                frappe.db.set_value(\"Supplier\", supplier, \"supplier_hold_till\", None)\n                return\n            else:\n                frappe.throw(_(\"Supplier {0} is on hold till {1}\").format(supplier, supplier_hold_till))\n        elif supplier_blocked_for == \"Permanently\":\n            frappe.throw(_(\"Supplier {0} is permanently blocked\").format(supplier))\n\n", "CodeBleu_score": 32.58718747824209}, {"code": "def ensure_supplier_is_not_blocked(self)\n\t\n    if self.supplier and self.is_new():\n        supplier_info = frappe.get_doc(\"Supplier\", self.supplier)\n        if supplier_info.blocked_type == \"Hold\":\n            if supplier_info.hold_type == \"Payment\":\n                if supplier_info.release_date and supplier_info.release_date <= getdate():\n                    supplier_info.blocked_type = \"No\"\n                    supplier_info.save()\n                else:\n                    frappe.throw(\n                        _(\\\"Supplier is on hold. Cannot proceed with transaction\\\")\n                    )\n            elif supplier_info.hold_type == \"Invoice\":\n                if supplier_info.release_date and supplier_info.release_date <= getdate():\n                    supplier_info.blocked_type = \\\"No\\\"\n                    supplier_info.save()\n                else:\n                    frappe.throw(\n                        _(\\\"Supplier is on hold. Cannot proceed with transaction\\\")\n                    )\n        elif supplier_info.blocked_type == \\\"Yes\\\":\n            frappe.throw(_(\\\"Supplier is blocked. Cannot proceed with transaction\\\"))\n\n", "CodeBleu_score": 27.03125768861334}]}
{"instance_id": "a8f202cf49dc", "generation_result": [{"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # TODO: Add all such pending values here\n    fields = [\"billed_amt\", \"delivered_qty\"]\n    for item in self.get(\"items\"):\n        for field in fields:\n            if hasattr(item, field):\n                item.set(field, 0)\n", "CodeBleu_score": 6.520526255926781}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    if self.is_return or self.is_pos:\n        return\n\n    repost_doctypes = frappe.get_all(\n        \"Repost Voucher\",\n        filters={\"voucher_type\": self.doctype, \"voucher_no\": self.name},\n        fields=[\"parenttype\", \"parent\"],\n    )\n\n    if not repost_doctypes:\n        return\n\n    repost_doctypes_map = frappe._dict()\n    for x in repost_doctypes:\n        repost_doctypes_map.setdefault(x.parenttype, []).append(x.parent)\n\n    for doctype, parents in repost_doctypes_map.items():\n        for parent in parents:\n            repost_doc = frappe.get_doc(doctype, parent)\n            if doctype == \"Sales Invoice\":\n                repost_doc.remove(\n                    repost_doc.get(\"repost_vouchers\", {\"voucher_type\": self.doctype, \"voucher_no\": self.name})[0]\n                )\n            else:\n                repost_doc.remove(repost_doc.get(\"vouchers\", {\"voucher_type\": self.doctype, \"voucher_no\": self.name})[0])\n\n            repost_doc.flags.ignore_validate_update_after_submit = True\n            repost_doc.flags.ignore_links = True\n            repost_doc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 37.07074202796281}, {"code": "def _remove_references_in_repost_doctypes(self)\n\t\n    # TODO: Add all such doctypes here\n    repost_doctypes = [\n        \"Repost Purchase Invoice\",\n        \"Repost Sales Invoice\",\n        \"Repost Journal Entry\",\n        \"Repost Payment Entry\",\n        \"Repost Expense Claim\",\n        \"Repost Sales Order\",\n        \"Repost Purchase Order\",\n        \"Repost Delivery Note\",\n        \"Repost Quotation\",\n        \"Repost Purchase Receipt\",\n        \"Repost Sales Invoice\",\n        \"Repost Purchase Invoice\",\n        \"Repost Purchase Receipt\",\n        \"Repost Sales Invoice\",\n        \"Repost Purchase Invoice\",\n    ]\n    repost_doctypes_map = frappe._dict()\n    for doctype in repost_doctypes:\n\n\t\tqb = frappe.qb.DocType(doctype)\n\t\trows = (\n\t\t\tfrappe.qb.from_(qb)\n\t\t\t.select(qb.name, qb.parent, qb.parenttype)\n\t\t\t.where((qb.voucher_type == self.doctype) & (qb.voucher_no == self.name))\n\t\t\t.run(as_dict=True)\n\t\t)\n\n\t\tif rows:\n\t\t\tfor x in rows:\n\t\t\t\trepost_doctypes_map.setdefault(x.parenttype, []).append(x)\n\n\tfor doctype, rows in repost_doctypes_map.items():\n\t\tfor row in rows:\n\t\t\tdoc = frappe.get_doc(doctype, row.parent)\n\t\t\tif doctype == \\\"Repost Purchase Invoice\\\" or doctype == \\\"Repost Sales Invoice\\\":\n\t\t\t\tdoc.remove(doc.get(\\\"vouchers\\\", {\\\"name\\\": row.name})[0])\n\t\t\telse:\n\t\t\t\tdoc.remove(doc.get(\\\"repost_vouchers\\\", {\\\"name\\\": row.name})[0])\n\n\t\t\tdoc.flags.ignore_validate_update_after_submit = True\n\t\t\tdoc.flags.ignore_links = True\n\t\t\tdoc.save(ignore_permissions=True)\n\n", "CodeBleu_score": 41.25886563040973}]}
{"instance_id": "30148daa7dda", "generation_result": [{"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        transactions_response = self.client.Transactions.get(\n            self.access_token, start_date, end_date, account_id=account_id\n        )\n        transactions = transactions_response[\"transactions\"]\n        total_transactions = transactions_response[\"total_transactions\"]\n        while len(transactions) < total_transactions:\n            transactions_response = self.client.Transactions.get(\n                self.access_token,\n                start_date,\n                end_date,\n                account_id=account_id,\n                offset=len(transactions),\n            )\n            transactions.extend(transactions_response[\"transactions\"])\n    except APIError as e:\n        if e.code == \"PRODUCT_NOT_READY\":\n            frappe.log_error(\n                f\"Plaid: Product not ready for access_token: {self.access_token}\"\n            )\n            frappe.throw(\n                _(\n                    \"Plaid: Product not ready for access_token: {self.access_token}\"\n                ),\n                title=_(\"Product Not Ready\"),\n            )\n        elif e.code == \"ITEM_LOCKED\":\n            frappe.log_error(\n                f\"Plaid: Item is locked for access_token: {self.access_token}\"\n            )\n            frappe.throw(\n                _(\n                    \"Plaid: Item is locked for access_token: {self.access_token}\"\n                ),\n                title=_(\"Item Locked\"),\n            )\n        elif e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.log_error(\n                f\"Plaid: Item login required for access_token: {self.access_token}\"\n            )\n            frappe.throw(\n                _(\n                    \"Plaid: Item login required for access_token: {self.access_token}\"\n                ),\n                title=_(\"Item Login Required\"),\n            )\n        elif e.code == \"PLANNED_MAINTENANCE\":\n            frappe.log_error(\n                f\"Plaid: Planned maintenance for access_token: {self.access_token}\"\n            )\n            frappe.throw(\n                _(\n                    \"Plaid: Planned maintenance for access_token: {self.access_token}\"\n                ),\n                title=_(\"Planned Maintenance\"),\n            )\n        else:\n            frappe.log_error(f\"Plaid: Authentication error: {e}\")\n            frappe.throw(_(str(", "CodeBleu_score": 32.28728866099625}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        transactions = []\n        offset = 0\n        while True:\n            params = {\n                \"count\": 200,\n                \"offset\": offset,\n                \"start_date\": start_date,\n                \"end_date\": end_date,\n            }\n            if account_id:\n                params[\"account_id\"] = account_id\n            response = self.client.Transactions.get(self.access_token, **params)\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            offset += 200\n        return transactions\n    except ItemError as e:\n        if e.code == \\\"ITEM_LOGIN_REQUIRED\\\":\n            frappe.log_error(\\\"Plaid: Item login required\\\")\n            frappe.throw(_(str(e)), title=_(\\\"Authentication Failed\\\"))\n        elif e.code == \\\"PRODUCT_NOT_READY\\\":\n            frappe.log_error(\\\"Plaid: Product not ready\\\")\n            frappe.throw(_(str(e)), title=_(\\\"Product Not Ready\\\"))\n        elif e.code == \\\"PRODUCT_NOT_SUPPORTED\\\":\n            frappe.log_error(\\\"Plaid: Product not supported\\\")\n            frappe.throw(_(str(e)), title=_(\\\"Product Not Supported\\\"))\n        elif e.code == \\\"ITEM_NOT_READY\\\":\n            frappe.log_error(\\\"Plaid: Item not ready\\\")\n            frappe.throw(_(str(e)), title=_(\\\"Item Not Ready\\\"))\n        elif e.code == \\\"ITEM_NOT_SUPPORTED_BY_PRODUCT\\\":\n            frappe.log_error(\\\"Plaid: Item not supported by product\\\")\n            frappe.throw(_(str(e)), title=_(\\\"Item Not Supported\\\"))\n        else:\n            frappe.log_error(\\\"Plaid: Item error\\\")\n            frappe.throw(_(str(e)), title=_(\\\"Item Error\\\"))\n    except APIError as e:\n        frappe.log_error(\\\"Plaid: API error\\\")\n        frappe.throw(_(str(e)), title=_(\\\"API Error", "CodeBleu_score": 33.2338060919888}, {"code": "def get_transactions(self, start_date, end_date, account_id=None)\n\t\n    try:\n        self.auth()\n        transactions = []\n        offset = 0\n        while True:\n            response = self.client.Transactions.get(\n                self.access_token, start_date, end_date, account_id=account_id, offset=offset\n            )\n            transactions.extend(response[\"transactions\"])\n            if len(transactions) >= response[\"total_transactions\"]:\n                break\n            offset += 250\n        return transactions\n    except ItemError as e:\n        if e.code == \"ITEM_LOGIN_REQUIRED\":\n            frappe.log_error(\"Plaid: Item login required\")\n            frappe.throw(_(\"Please login to your account again\"), title=_(\"Login Required\"))\n        elif e.code == \"PRODUCT_NOT_READY\":\n            frappe.log_error(\"Plaid: Product not ready\")\n            frappe.throw(_(\"Please try again later\"), title=_(\"Product Not Ready\"))\n        elif e.code == \"PRODUCT_NOT_SUPPORTED\":\n            frappe.log_error(\"Plaid: Product not supported\")\n            frappe.throw(_(\"Please try again later\"), title=_(\"Product Not Supported\"))\n        elif e.code == \"INVALID_CREDENTIALS\":\n            frappe.log_error(\"Plaid: Invalid credentials\")\n            frappe.throw(_(\"Please check your credentials and try again\"), title=_(\"Invalid Credentials\"))\n        elif e.code == \"INVALID_INPUT\":\n            frappe.log_error(\"Plaid: Invalid input\")\n            frappe.throw(_(\"Please check your input and try again\"), title=_(\"Invalid Input\"))\n        elif e.code == \"NO_ACCOUNTS\":\n            frappe.log_error(\"Plaid: No accounts\")\n            frappe.throw(_(\"Please check your account and try again\"), title=_(\"No Accounts\"))\n        elif e.code == \"INSTITUTION_ERROR\":\n            frappe.log_error(\"Plaid: Institution error\")\n            frappe.throw(_(\"Please check your institution and try again\"), title=_(\"Institution Error\"))\n        else:\n            frappe.log_error(\"Plaid: Unknown error\")\n            frappe.throw(_(\"Please try again later\"), title=_(\"Unknown Error\"))\n    except APIError as e:\n        frappe.log_error(\"Plaid: API error\")\n        frappe.throw(_(\"Please try again later\"), title=_(\"API Error\"))\n    except requests.Timeout:\n        frappe.log_error", "CodeBleu_score": 33.79391488601532}]}
{"instance_id": "18dc618f26f7", "generation_result": [{"code": "def add_institution(token, response)\n\t\n    try:\n        institution = response[\"institution\"]\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token, institution[\"institution_id\"])\n        bank = frappe.db.get_value(\"Bank\", {\"plaid_institution_id\": institution[\"institution_id\"]})\n        if not bank:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = institution[\"name\"]\n            bank.plaid_institution_id = institution[\"institution_id\"]\n            bank.plaid_access_token = access_token\n            bank.save(ignore_permissions=True)\n        else:\n            bank = frappe.get_doc(\"Bank\", bank)\n            bank.plaid_access_token = access_token\n            bank.save(ignore_permissions=True)\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 43.41315143296782}, {"code": "def add_institution(token, response)\n\t\n    try:\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n        institution = response.get(\"institution\")\n        institution_id = institution.get(\"institution_id\")\n        existing_institution = frappe.db.exists(\n            \"Bank\", {\"plaid_institution_id\": institution_id}\n        )\n        if existing_institution:\n            existing_institution = frappe.get_doc(\"Bank\", existing_institution)\n            existing_institution.access_token = access_token\n            existing_institution.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = institution.get(\"name\")\n            bank.plaid_institution_id = institution_id\n            bank.access_token = access_token\n            bank.save()\n            frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 43.339536203693584}, {"code": "def add_institution(token, response)\n\t\n    try:\n        institution_name = response.get(\"institution\").get(\"name\")\n        institution_id = response.get(\"institution\").get(\"institution_id\")\n        country_code = response.get(\"institution\").get(\"country_code\")\n        plaid = PlaidConnector()\n        access_token = plaid.get_access_token(token)\n        existing_bank = frappe.db.exists(\n            \"Bank\", {\"institution_id\": institution_id, \"country_code\": country_code}\n        )\n        if existing_bank:\n            bank = frappe.get_doc(\"Bank\", existing_bank)\n            bank.access_token = access_token\n            bank.save()\n        else:\n            bank = frappe.new_doc(\"Bank\")\n            bank.bank_name = institution_name\n            bank.institution_id = institution_id\n            bank.country_code = country_code\n            bank.access_token = access_token\n            bank.save()\n        frappe.db.commit()\n    except Exception as e:\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 43.4958521284013}]}
{"instance_id": "452010cfcec2", "generation_result": [{"code": "def sync_transactions(bank, bank_account)\n\t\n    plaid = PlaidConnector()\n    start_date = None\n    end_date = None\n\n    if bank_account.last_integration_date:\n        start_date = add_months(bank_account.last_integration_date, 1)\n        end_date = add_months(start_date, 1)\n    else:\n        start_date = add_months(today(), -1)\n        end_date = today()\n\n    try:\n        transactions = plaid.get_transactions(\n            bank_account.plaid_access_token, start_date, end_date\n        )\n    except ItemError as e:\n        frappe.log_error(\n            f\"Plaid Item Error: {e.code} - {e.display_message} - {e.error_code} - {e.error_type} - {e.request_id}\"\n        )\n        return\n    except Exception as e:\n        frappe.log_error(f\"Plaid Error: {e}\")\n        return\n\n    for transaction in transactions:\n        bank_transaction = frappe.get_doc(\n            {\n                \"doctype\": \"Bank Transaction\",\n                \"bank_account\": bank_account.name,\n                \"bank_account_number\": bank_account.account_name,\n                \"bank_name\": bank.bank_name,\n                \"company\": bank_account.company,\n                \"posting_date\": transaction[\"date\"],\n                \"reference_number\": transaction[\"transaction_id\"],\n                \"reference_date\": transaction[\"date\"],\n                \"party_type\": \"Customer\",\n                \"party\": transaction[\"name\"],\n                \"amount\": transaction[\"amount\"],\n                \"type\": transaction[\"transaction_type\"],\n                \"is_plaid_transaction\": 1,\n            }\n        )\n        bank_transaction.insert(ignore_permissions=True)\n\n    if transactions:\n        bank_account.last_integration_date = transactions[-1][\"date\"]\n        bank_account.save(ignore_permissions=True)\n\n    frappe.msgprint(f\"Added {len(transactions)} new transactions.\")\n\n", "CodeBleu_score": 32.66654795227208}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        last_sync_date = frappe.db.get_value(\n            \"Bank Account\", bank_account, \"last_sync_date\"\n        )\n        if not last_sync_date:\n            last_sync_date = frappe.db.get_value(\n                \"Bank\", bank, \"last_sync_date\"\n            )\n        if not last_sync_date:\n            last_sync_date = add_months(today(), months=-1)\n        end_date = today()\n        start_date = last_sync_date\n        transactions = plaid.get_transactions(bank, bank_account, start_date, end_date)\n        if transactions:\n            for transaction in transactions:\n                if not frappe.db.exists(\"Bank Transaction\", transaction[\"_id\"]):\n                    bank_transaction = frappe.get_doc(\n                        {\n                            \"doctype\": \"Bank Transaction\",\n                            \"bank_account\": bank_account,\n                            \"bank_name\": bank,\n                            \"transaction_id\": transaction[\"_id\"],\n                            \"transaction_date\": transaction[\"date\"],\n                            \"amount\": transaction[\"amount\"],\n                            \"name\": transaction[\"name\"],\n                            \"transaction_type\": transaction[\"transaction_type\"],\n                            \"category\": transaction[\"category\"],\n                            \"category_id\": transaction[\"category_id\"],\n                            \"account_owner\": transaction[\"account_owner\"],\n                            \"pending\": transaction[\"pending\"],\n                            \"pending_transaction_id\": transaction[\"pending_transaction_id\"],\n                            \"account\": transaction[\"account\"],\n                        }\n                    )\n                    bank_transaction.insert()\n            frappe.db.set_value(\n                \"Bank Account\", bank_account, \"last_sync_date\", start_date\n            )\n            frappe.db.set_value(\"Bank\", bank, \"last_sync_date\", start_date)\n            frappe.msgprint(\n                frappe._(\"Added {0} new transactions\").format(len(transactions))\n            )\n        else:\n            frappe.msgprint(\n                frappe._(\"No new transactions found for the selected bank account\")\n            )\n    except Exception:\n        frappe.log_error(title=\"Plaid Sync Error\")\n        frappe.throw(\n            frappe._(\"There was an error while syncing transactions with Plaid.\"),\n            title=frappe._(\"Plaid Sync Failed\"),\n        )", "CodeBleu_score": 33.52326799902258}, {"code": "def sync_transactions(bank, bank_account)\n\t\n    try:\n        plaid = PlaidConnector()\n        start_date = getdate(bank.last_integration_date) or add_months(today(), -1)\n        end_date = today()\n        transactions = plaid.get_transactions(bank.plaid_access_token, start_date, end_date)\n        for transaction in transactions:\n            if not frappe.db.exists(\n                \"Bank Transaction\", {\"integration_id\": transaction[\"transaction_id\"]}\n            ):\n                bank_transaction = frappe.get_doc(\n                    {\n                        \"doctype\": \"Bank Transaction\",\n                        \"bank_account\": bank_account.name,\n                        \"transaction_date\": transaction[\"date\"],\n                        \"posting_date\": transaction[\"date\"],\n                        \"amount\": transaction[\"amount\"],\n                        \"reference_number\": transaction[\"transaction_id\"],\n                        \"payee\": transaction[\"name\"],\n                        \"description\": transaction[\"name\"],\n                        \"integration_id\": transaction[\"transaction_id\"],\n                    }\n                )\n                bank_transaction.insert()\n        bank.last_integration_date = end_date\n        bank.save()\n        frappe.msgprint(\n            f\"{len(transactions)} new transactions added for {bank.bank_name} - {bank_account.account_name}\"\n        )\n    except Exception:\n        frappe.log_error(frappe.get_traceback())\n\n", "CodeBleu_score": 31.94665898492178}]}
{"instance_id": "9c19a41cf3df", "generation_result": [{"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        query_uri = self._get_query_uri(entity)\n        total_count = self._get_total_count(query_uri)\n        for i in range(0, total_count, 1000):\n\t\t\tquery_uri = self._get_query_uri(entity, i)\n\t\t\tresponse = self._get_response(query_uri)\n\t\t\tif response:\n\t\t\t\tself._preprocess_and_save_entries(response, entity)\n\t\tfrappe.db.commit()\n\texcept Exception as e:\n\t\tself._log_error(e, entity)\n\n\n", "CodeBleu_score": 22.51986134590212}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        query_uri = f\"{self.api_url}/{entity}\"\n        total_count = self._get_total_count(query_uri)\n        for offset in range(0, total_count, 1000):\\\n            entries = self._get_entries(query_uri, offset)\n            for entry in entries:\\\n                self._preprocess_entry(entry, entity)\\\n                self._save_entry(entry, entity)\\\n            frappe.db.commit()\\\n    except Exception as e:\\\n        self._log_error(e, entity)\\\n", "CodeBleu_score": 22.31394382678447}, {"code": "def _migrate_entries(self, entity)\n\t\n    try:\n        # Construct query URI\n        query_uri = f\"{self.query_endpoint}?minorversion=4&query={entity}\"\n        # Determine total number of entries\n        total_entries = self._get_total_entries(query_uri)\n        # Fetch entries in batches of 1000\n        for batch_start in range(0, total_entries, 1000):\n            entries = self._fetch_entries(query_uri, batch_start)\n            # Preprocess and save entries\n            self._preprocess_and_save_entries(entity, entries)\n    except Exception as e:\n        self._log_error(e, entity)\n\n", "CodeBleu_score": 23.434094597674676}]}
{"instance_id": "5c14043585a6", "generation_result": [{"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if not frappe.db.exists({\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}):\n            invoice_type = invoice[\"Type\"]\n            if invoice_type == \"JournalEntry\":\n                self._save_journal_entry(invoice)\n            elif invoice_type in (\"Invoice\", \"SalesOrder\", \"SalesReceipt\"):\n                self._save_sales_invoice(invoice)\n            elif invoice_type == \"CreditMemo\":\n                self._save_credit_note(invoice)\n            elif invoice_type == \"Bill\":\n                self._save_purchase_invoice(invoice)\n            elif invoice_type == \"PurchaseOrder\":\n                self._save_purchase_order(invoice)\n            elif invoice_type == \"ReceivePayment\":\n                self._save_payment(invoice)\n            elif invoice_type == \"RefundReceipt\":\n                self._save_refund_receipt(invoice)\n            elif invoice_type == \"Check\":\n                self._save_check(invoice)\n            elif invoice_type == \"BillPayment\":\n                self._save_bill_payment(invoice)\n            elif invoice_type == \"Transfer\":\n                self._save_transfer(invoice)\n            elif invoice_type == \"Deposit\":\n                self._save_deposit(invoice)\n            elif invoice_type == \"CreditCharge\":\n                self._save_credit_charge(invoice)\n            elif invoice_type == \"InvoicePayment\":\n                self._save_invoice_payment(invoice)\n            elif invoice_type == \"TimeActivity\":\n                self._save_time_activity(invoice)\n            elif invoice_type == \"Purchase\":\n                self._save_purchase(invoice)\n            elif invoice_type == \"PurchaseCreditMemo\":\n                self._save_purchase_credit_note(invoice)\n            elif invoice_type == \"CreditMemoRefund\":\n                self._save_credit_memo_refund(invoice)\n            elif invoice_type == \"SalesReceiptRefund\":\n                self._save_sales_receipt_refund(invoice)\n            elif invoice_type == \"ReturnInvoice\":\n                self._save_return_invoice(invoice)\n            elif invoice_type == \"SalesOrderRefund\":\n                self._save_sales_order_refund(invoice)\n            elif invoice_type == \"PurchaseRefund\":\n                self._save_purchase_refund(invoice)\n            elif invoice_type == \"TransferRefund\":\n                self._save_transfer_refund(invoice)\n           ", "CodeBleu_score": 19.172317377682383}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        invoice_type = invoice[\"DocNumber\"].split(\"-\")[0]\n        if invoice_type == \"INV\":\n            self._save_sales_invoice(invoice)\n        elif invoice_type == \"EST\":\n            self._save_sales_estimate(invoice)\n        elif invoice_type == \"BILL\":\n            self._save_purchase_invoice(invoice)\n        elif invoice_type == \"CUST\":\n            self._save_journal_entry(invoice)\n        else:\n            self._log_error(\"Unknown invoice type: {}\".format(invoice_type), invoice)\n    except Exception as e:\n        self._log_error(e, invoice)\n\n", "CodeBleu_score": 39.792803185878554}, {"code": "def _save_invoice(self, invoice)\n\t\n    try:\n        if invoice[\"DocNumber\"]:\n            invoice_id = invoice[\"DocNumber\"]\n        else:\n            invoice_id = invoice[\"Id\"]\n        if invoice[\"Type\"] == \"Invoice\":\n            if not frappe.db.exists(\n                {\"doctype\": \"Sales Invoice\", \"quickbooks_id\": invoice[\"Id\"], \"company\": self.company}\n            ):\n                erpsalesinvoice = frappe.get_doc(\n                    {\n                        \"doctype\": \"Sales Invoice\",\n                        \"quickbooks_id\": invoice[\"Id\"],\n                        \"customer\": self._get_customer_name_by_id(invoice[\"CustomerRef\"][\"value\"]),\n                        \"company\": self.company,\n                        \"quickbooks_invoice_id\": invoice_id,\n                        \"quickbooks_sync_on\": datetime.now(),\n                        \"quickbooks_sync_status\": \"Synced\",\n                        \"quickbooks_sync_error\": \"\",\n                        \"quickbooks_sync_date\": invoice[\"MetaData\"][\"CreateTime\"],\n                        \"posting_date\": invoice[\"TxnDate\"],\n                        \"due_date\": invoice[\"DueDate\"],\n                        \"status\": \"Draft\",\n                        \"set_posting_time\": 1,\n                        \"set_posted_time\": 1,\n                        \"is_opening\": \"No\",\n                        \"is_return\": \"No\",\n                        \"is_pos\": \"No\",\n                        \"is_return_against_sales\": \"No\",\n                        \"is_return_against_purchase\": \"No\",\n                        \"is_pos\": \"No\",\n                        \"update_stock\": 1,\n                        \"items\": [],\n                    }\n                )\n                if invoice.get(\"TxnTaxDetail\"):\n                    erpsalesinvoice.taxes = []\n                    for tax in invoice[\"TxnTaxDetail\"][\"TxnTaxCodeRef\"]:\n                        erpsalesinvoice.append(\n                            \"taxes\",\n                            {\n                                \"charge_type\": \"On Net Total\",\n                                \"account_head\": self._get_account_name_by_id(\n                                    tax[\"value\"]\n                                ),\n                                \"tax_amount\": tax[\"TaxPercent\"],\n                                \"tax_category\": \"", "CodeBleu_score": 28.36766663683754}]}
{"instance_id": "8351ba65b354", "generation_result": [{"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    if start_date and end_date and no_of_visit and sales_person:\n        # Calculate the interval between visits\n        interval = (end_date - start_date).days // (no_of_visit - 1)\n\n        # Create the schedule list\n        schedule = [start_date]\n        for i in range(1, no_of_visit):\n            schedule.append(start_date + timedelta(days=interval * i))\n\n        # Adjust dates to avoid holidays\n        holidays = get_holiday_list_for_employee(sales_person)\n        for i, date in enumerate(schedule):\n            while date in holidays:\n                date += timedelta(days=1)\n                schedule[i] = date\n\n        return schedule\n\n", "CodeBleu_score": 32.83688006417835}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    from frappe.utils import add_days, get_datetime, getdate, get_holiday_list_for_employee, get_weekdays\n\n    if not start_date or not end_date:\n        return []\n\n    if start_date > end_date:\n        frappe.throw(_(\"Start Date cannot be greater than End Date\"))\n\n    if no_of_visit <= 0:\n        frappe.throw(_(\"Number of visits must be greater than 0\"))\n\n    # Get the interval between visits\n    interval = (end_date - start_date).days / (no_of_visit - 1)\n\n    # Get the list of holidays for the salesperson\n    holiday_list = get_holiday_list_for_employee(sales_person)\n\n    # Get the list of weekdays\n    weekdays = get_weekdays(start_date, end_date)\n\n    # Create the schedule list\n    schedule_list = []\n    for i in range(no_of_visit):\n        # Calculate the next scheduled date\n        scheduled_date = start_date + timedelta(days=i * interval)\n\n        # Check if the scheduled date is a holiday or weekend\n        if scheduled_date.weekday() not in weekdays or scheduled_date in holiday_list:\n            # Adjust the scheduled date to the next working day\n            scheduled_date = getdate(get_datetime(scheduled_date) + timedelta(days=1))\n            while scheduled_date.weekday() not in weekdays or scheduled_date in holiday_list:\n                scheduled_date = getdate(get_datetime(scheduled_date) + timedelta(days=1))\n\n        schedule_list.append(scheduled_date)\n\n    return schedule_list\n\n", "CodeBleu_score": 36.29479020991085}, {"code": "def create_schedule_list(self, start_date, end_date, no_of_visit, sales_person)\n\t\n    interval = (end_date - start_date) / no_of_visit\n    schedule_list = []\n    for i in range(no_of_visit):\n        schedule_date = start_date + i * interval\n        schedule_list.append(schedule_date)\n\n    holidays = get_holiday_list_for_employee(sales_person)\n    for date in schedule_list:\n        if date.strftime(\"%Y-%m-%d\") in holidays:\n            schedule_list.remove(date)\n            schedule_list.append(date + timedelta(days=1))\n\n    return schedule_list\n\n", "CodeBleu_score": 28.196002709605377}]}
{"instance_id": "f9ca0924d1cd", "generation_result": [{"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\t", "CodeBleu_score": 5.908764367816092}, {"code": "<?\n   public function response($view, $data = []){\n\ttion generates a JSON response for a given view and data. It determines the method to handle the request, constructs a URL for bulk actions, and renders HTML content for a modal using the specified view and data. The response includes success status, message, data with title, path, handle, and the rendered HTML.\n */\n    $method = $this->request->method();\n\n    if ($method === 'POST') {\n        $url = route('bulk.actions', ['model' => $this->model]);\n    } else {\n        $url = route('bulk.actions.show', ['model' => $this->model]);\n    }\n\n    $html = view($view, $data)->render();\n\n    return response()->json([\n       'success' => true,\n       'message' => __('general.success'),\n        'data' => [\n            'title' => __('general.bulk_actions'),\n            'path' => $url,\n            'handle' => 'bulk-actions-modal',\n            'html' => $html,\n        ],\n    ]);\n}", "CodeBleu_score": 44.18501316469905}]}
{"instance_id": "87b81658f331", "generation_result": [{"code": "<?\npublic function deleteContacts($request){\n\ttSelectedRecords($request, 'user');\n\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t} catch (\\Exception $e) {\n\t\t\tflash($e->getMessage())->error()->important();\n\t\t}\n\t}\n}", "CodeBleu_score": 63.58496020811304}, {"code": "<?\npublic function deleteContacts($request){\n\tSelectedRecords($request, 'user');\n\nforeach ($contacts as $contact) {\ntry {\n$this->dispatch(new DeleteContact($contact));\n} catch (\\Exception $e) {\nflash($e->getMessage())->error()->important();\n}\n}\n}", "CodeBleu_score": 63.11666875911758}, {"code": "<?\npublic function deleteContacts($request){\n\ttSelectedRecords($request, 'user');\n\n\tforeach ($contacts as $contact) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteContact($contact));\n\t\t} catch (\\Exception $e) {\n\t\t\tflash($e->getMessage())->error()->important();\n\t\t}\n\t}\n}", "CodeBleu_score": 63.58496020811304}]}
{"instance_id": "fb5a63d9d81a", "generation_result": [{"code": "<?\npublic function deleteTransactions($request){\n\t->getSelectedRecords($request, ['contact', 'account']);\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (\\Exception $e) {\n\t\t\tflash($e->getMessage())->error()->important();\n\t\t}\n\t}\n}", "CodeBleu_score": 61.978802765853935}, {"code": "<?\npublic function deleteTransactions($request){\n\t->getSelectedRecords($request);\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (\\Exception $e) {\n\t\t\tflash($e->getMessage())->error()->important();\n\t\t}\n\t}\n}", "CodeBleu_score": 61.91167359724092}, {"code": "<?\npublic function deleteTransactions($request){\n\t->getSelectedRecords($request);\n\n\tforeach ($transactions as $transaction) {\n\t\ttry {\n\t\t\t$this->dispatch(new DeleteTransaction($transaction));\n\t\t} catch (\\Exception $e) {\n\t\t\tflash($e->getMessage())->error()->important();\n\t\t}\n\t}\n}", "CodeBleu_score": 61.91167359724092}]}
{"instance_id": "513c2f307c5a", "generation_result": [{"code": "<?\npublic function withValidator($validator){\n\tif (!class_exists($this->request_class) ||!is_subclass_of($this->request_class, FormRequest::class)) {\n\t\treturn;\n\t}\n\n\t$validator->after(function ($validator) {\n\t\t$rows = $this->getChunk();\n\t\tforeach ($rows as $row) {\n\t\t\t$request = new $this->request_class;\n\t\t\t$rules = $request->rules();\n\t\t\t$rules = $this->prepareRules($rules);\n\t\t\t$validator->validate($row, $rules);\n\t\t}\n\t});\n}", "CodeBleu_score": 26.12724796526274}, {"code": "<?\npublic function withValidator($validator){\n\tif (!class_exists($this->request_class) ||!is_subclass_of($this->request_class, FormRequest::class)) {\n\t\treturn;\n\t}\n\n\tforeach ($validator->getData() as $row) {\n\t\t$request = new $this->request_class();\n\t\t$rules = $request->prepareRules($this->prepareRules($request->rules()));\n\n\t\ttry {\n\t\t\t$validator->after(function ($validator) use ($row, $rules) {\n\t\t\t\t$validator->errors()->add('row', 'Row validation failed.');\n\t\t\t});\n\n\t\t\tValidator::make($row, $rules)->validate();\n\t\t} catch (ValidationException $e) {\n\t\t\t$validator->errors()->add('row', $e->validator->errors());\n\t\t\tthrow $e;\n\t\t}\n\t}\n}", "CodeBleu_score": 39.35916847532807}, {"code": "<?\npublic function withValidator($validator){\n\tif ($this->request_class && $this->request_class instanceof FormRequest) {\n\t\t$request = new $this->request_class;\n\n\t\t$validator->after(function ($validator) use ($request) {\n\t\t\t$data = $validator->getData();\n\t\t\t$rules = $request->rules();\n\n\t\t\tforeach ($data as $row) {\n\t\t\t\t$request->merge($row);\n\t\t\t\t$request->prepareForValidation();\n\t\t\t\t$rules = $request->prepareRules($rules);\n\t\t\t\t$validator->errors()->merge($request->validate($rules));\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 29.79367124653642}]}
{"instance_id": "337cc7786d21", "generation_result": [{"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$model = $this->getModelInstance($arguments[0]);\nif ($model instanceof Model) {\n$this->model = $model;\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n}", "CodeBleu_score": 66.43845122266234}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$model = $this->getModelInstance($arguments[0]);\nif ($model instanceof Model) {\n$this->model = $model;\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n}", "CodeBleu_score": 66.43845122266234}, {"code": "<?\npublic function bootUpdate(...$arguments): void{\n\tif (! $this instanceof ShouldUpdate) {\nreturn;\n}\n\n$model = $this->getModelInstance($arguments[0]);\nif ($model instanceof Model) {\n$this->model = $model;\n}\n\n$request = $this->getRequestInstance($arguments[1]);\nif ($request instanceof Request) {\n$this->request = $request;\n}\n}", "CodeBleu_score": 66.43845122266234}]}
{"instance_id": "84212032fcca", "generation_result": [{"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\n\t// Apply search string if available\n\tif ($request->has('search')) {\n\t\t$searchString = $request->input('search');\n\t\tevent(new SearchStringApplying($this, $searchString));\n\t\t$query = $query->search($searchString);\n\t\tevent(new SearchStringApplied($this, $searchString));\n\t}\n\n\t// Apply sorting\n\t$query = $query->orderBy($sort);\n\n\t// Return all records if request expects JSON\n\tif ($request->expectsJson() &&! $request->is('api/*')) {\n\t\treturn $query->get();\n\t}\n\n\t// Paginate results\n\t$limit = $request->input('limit', config('akaunting.pagination'));\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 54.281438658759384}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$request = request();\n\t$search = $request->get('search');\n\t$limit = $request->get('limit')?? config('system.limit');\n\t$query = $query->search($search);\n\tif ($sort) {\n\t\t$query = $query->sort($sort);\n\t}\n\tif ($request->expectsJson() &&!$request->wantsJson()) {\n\t\treturn $query->get();\n\t}\n\treturn $query->paginate($limit);\n}", "CodeBleu_score": 56.30925329361575}, {"code": "<?\n public function scopeCollect($query, $sort = 'name'){\n\t\t$sort = $this->sort($sort);\n\n\t$query->orderBy($sort['column'], $sort['direction']);\n\n\t$query->search($this->searchString);\n\n\tif (request()->expectsJson() &&!request()->wantsJson() &&!request()->is('api/*')) {\n\t\treturn $query->get();\n\t}\n\n\treturn $query->paginate(request('limit', config('app.limit')));\n}", "CodeBleu_score": 36.21754928479853}]}
{"instance_id": "1c1e693dfa46", "generation_result": [{"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open_amount = 0;\n\t$overdue_amount = 0;\n\n\tif ($model->status === 'paid') {\n\t\treturn [\n\t\t\t'open_amount' => 0,\n\t\t\t'overdue_amount' => 0,\n\t\t];\n\t}\n\n\tif ($model->status === 'partial') {\n\t\t$open_amount = $model->transactions->sum('amount');\n\t}\n\n\tif ($model->due_date < now()) {\n\t\t$overdue_amount = $model->total - $open_amount;\n\t} else {\n\t\t$open_amount = $model->total - $open_amount;\n\t}\n\n\treturn [\n\t\t'open_amount' => $open_amount,\n\t\t'overdue_amount' => $overdue_amount,\n\t];\n}", "CodeBleu_score": 33.40965257496307}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t$open_amount = 0;\n$overdue_amount = 0;\n\nif ($model->status === 'paid') {\nreturn [\n'open_amount' => 0,\n'overdue_amount' => 0,\n];\n}\n\nif ($model->status === 'partial') {\n$open_amount = $model->total - $model->transactions->sum('amount');\n}\n\n$due_date = $model->due_date?? $model->date;\n\nif ($due_date->isPast()) {\n$overdue_amount = $open_amount;\n} else {\n$open_amount = $open_amount;\n}\n\nreturn [\n'open_amount' => $open_amount,\n'overdue_amount' => $overdue_amount,\n];\n}", "CodeBleu_score": 36.47430139500399}, {"code": "<?\npublic function calculateDocumentTotals($model){\n\t\t$open = 0;\n\t$overdue = 0;\n\n\tif ($model->status == 'paid') {\n\t\treturn [\n\t\t\t'open' => 0,\n\t\t\t'overdue' => 0,\n\t\t];\n\t}\n\n\tif ($model->status == 'partial') {\n\t\t$open = $model->transactions()->sum('amount');\n\t\t$overdue = $model->transactions()->sum('amount');\n\t}\n\n\tif ($model->due_date->isPast()) {\n\t\t$overdue = $model->total - $open;\n\t} else {\n\t\t$open = $model->total - $open;\n\t}\n\n\treturn [\n\t\t'open' => $open,\n\t\t'overdue' => $overdue,\n\t];\n}", "CodeBleu_score": 41.17169883983277}]}
{"instance_id": "30215756634a", "generation_result": [{"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t$perPage = $perPage?: $this->model->getPerPage();\n\n$page = $page?: Paginator::resolveCurrentPage($pageName);\n\n$total = $this->toBase()->getCountForPagination();\n\n$results = $total? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\nreturn $this->paginator($results, $total, $perPage, $page, [\n'path' => Paginator::resolveCurrentPath(),\n'pageName' => $pageName,\n]);\n}", "CodeBleu_score": 74.75266692370288}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\n\t$total = $this->toBase()->getCountForPagination();\n\n\t$results = $total? $this->forPage($page, $perPage)->get($columns) : $this->model->newCollection();\n\n\treturn $this->paginator($results, $total, $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 74.81421473442096}, {"code": "<?\npublic function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null){\n\t\t$perPage = $perPage?: $this->model->getPerPage();\n\n\t$page = $page?: Paginator::resolveCurrentPage($pageName);\n\n\t$results = $this->forPage($page, $perPage)->get($columns);\n\n\treturn $this->paginator($results, $this->getCountForPagination(), $perPage, $page, [\n\t\t'path' => Paginator::resolveCurrentPath(),\n\t\t'pageName' => $pageName,\n\t]);\n}", "CodeBleu_score": 61.28822117884333}]}
{"instance_id": "4b0913f1528d", "generation_result": [{"code": "<?\npublic function reconcile($request){\n\tciliations = $this->getReconciliations($request);\n\tforeach ($reconciliations as $reconciliation) {\n\t\tDB::transaction(function () use ($reconciliation) {\n\t\t\t$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n\t\t\t$reconciliation->save();\n\t\t\t$transactions = Transaction::where('account_id', $reconciliation->account_id)\n\t\t\t\t->where('date', '>=', $reconciliation->start_date)\n\t\t\t\t->where('date', '<=', $reconciliation->end_date)\n\t\t\t\t->where('reconciled', false)\n\t\t\t\t->get();\n\t\t\tforeach ($transactions as $transaction) {\n\t\t\t\t$transaction->reconciled = true;\n\t\t\t\t$transaction->save();\n\t\t\t}\n\t\t});\n\t}\n}", "CodeBleu_score": 41.65778101335696}, {"code": "<?\npublic function reconcile($request){\n\tiliations = Reconciliation::whereIn('id', $request->input('ids'))->get();\n\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n\n$transactions = Transaction::where('account_id', $reconciliation->account_id)\n->where('date', '>=', $reconciliation->start_date)\n->where('date', '<=', $reconciliation->end_date)\n->where('reconciled', false)\n->get();\n\nforeach ($transactions as $transaction) {\n$transaction->reconciled = true;\n$transaction->save();\n}\n}\n}", "CodeBleu_score": 34.86197970727179}, {"code": "<?\npublic function reconcile($request){\n\tiliations = Reconciliation::whereIn('id', $request->ids)->get();\n\nforeach ($reconciliations as $reconciliation) {\n$reconciliation->status = Reconciliation::STATUS_RECONCILED;\n$reconciliation->save();\n\nTransaction::where('date', '>=', $reconciliation->start_date)\n->where('date', '<=', $reconciliation->end_date)\n->where('account_id', $reconciliation->account_id)\n->update(['reconciled' => true]);\n}\n}", "CodeBleu_score": 30.54028869041405}]}
{"instance_id": "ca77f30647a3", "generation_result": [{"code": "<?\npublic function handle(): UserInvitation{\n\t$this->user->invitations()->delete();\n\n$invitation = $this->user->invitations()->create([\n'token' => Str::uuid(),\n]);\n\ntry {\n$this->dispatch(new Notify($invitation));\n} catch (TransportException $e) {\nthrow new Exception('Failed to send invitation');\n}\n\nreturn $invitation;\n}", "CodeBleu_score": 22.101587011757587}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\n$this->invitation = $this->user->invitations()->delete();\n\n$this->invitation = $this->user->invitations()->create([\n'token' => Str::random(16),\n]);\n\ntry {\n$this->dispatch(new SendInvitation($this->user, $this->invitation));\n} catch (TransportException $e) {\nthrow new Exception('Unable to send invitation email');\n}\n\nreturn $this->invitation;\n}", "CodeBleu_score": 27.43064308067147}, {"code": "<?\npublic function handle(): UserInvitation{\n\t\t$this->user->invitations()->delete();\n\n\t$invitation = $this->user->invitations()->create([\n\t\t'token' => Str::random(10),\n\t]);\n\n\ttry {\n\t\t$this->dispatch(new SendInvitation($invitation));\n\t} catch (TransportException $e) {\n\t\tthrow new Exception('Unable to send invitation: '. $e->getMessage());\n\t}\n\n\treturn $invitation;\n}", "CodeBleu_score": 22.801956603089234}]}
{"instance_id": "f19cd66bc149", "generation_result": [{"code": "<?\npublic function authorize(): void{\n\tf ($this->model->isReconciled()) {\nthrow new Exception('This transaction has been reconciled and cannot be edited.');\n}\n\nif ($this->model->isTransfer()) {\nthrow new UnauthorizedHttpException('This transaction is a transfer and cannot be edited.');\n}\n}", "CodeBleu_score": 27.280630454473716}, {"code": "<?\npublic function authorize(): void{\n\tf ($this->model->reconciled) {\nthrow new Exception('This transaction has been reconciled and cannot be edited.');\n}\n\nif ($this->model->type == Transaction::TRANSFER_TYPE) {\nthrow new UnauthorizedHttpException();\n}\n}", "CodeBleu_score": 25.906599028309813}, {"code": "<?\npublic function authorize(): void{\n\tf ($this->model->isReconciled()) {\nthrow new \\Exception(trans('errors.transactions.reconciled'));\n}\n\nif ($this->model->isTransfer()) {\nthrow new \\Exception(trans('errors.transactions.transfer'));\n}\n}", "CodeBleu_score": 29.380287153259303}]}
{"instance_id": "5d31e8e07329", "generation_result": [{"code": "public boolean doTableFilter(String tableName){\n\t\tif (tenantId!= 0L) {\n\t\tList<String> allowedTables = Arrays.asList(\"sys_user\", \"sys_role\", \"sys_menu\", \"sys_dept\", \"sys_log\", \"sys_config\", \"sys_notice\", \"sys_job\", \"sys_job_log\", \"sys_login_log\");\n\t\treturn allowedTables.contains(tableName);\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 22.685860518143624}, {"code": "public boolean doTableFilter(String tableName){\n\t//        if (tenantId!=0L) {\n//            return Arrays.asList(tableNames).contains(tableName);\n//        } else {\n//            return true;\n//        }\n}", "CodeBleu_score": 1.6539232236640211}, {"code": "public boolean doTableFilter(String tableName){\n\tif (tenantId!= 0L) {\n// Allow access to specific tables for non-zero tenant IDs\nreturn tableName.equals(\"users\") || tableName.equals(\"departments\") || tableName.equals(\"roles\");\n} else {\n// Deny access for zero tenant IDs\nreturn false;\n}\n}", "CodeBleu_score": 11.565377654080072}]}
{"instance_id": "1c543171d426", "generation_result": [{"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}, {"code": "public MapperScannerConfigurer mapperScannerConfigurer(){\n\t\tMapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();\n\tmapperScannerConfigurer.setBasePackage(\"com.jsh.erp.datasource.mappers*\");\n\treturn mapperScannerConfigurer;\n}", "CodeBleu_score": 74.548338294358}]}
{"instance_id": "6c4f4f373ece", "generation_result": [{"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accountList = accountService.findAll();\n\tJSONArray jsonArray = new JSONArray();\n\tfor (Account account : accountList) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"id\", account.getId());\n\t\tjsonObject.put(\"name\", account.getName());\n\t\tjsonArray.add(jsonObject);\n\t}\n\treturn jsonArray.toString();\n}", "CodeBleu_score": 32.51833214656526}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\tList<Account> accounts = accountService.findBySelect();\n\tJSONArray jsonArray = new JSONArray();\n\tfor (Account account : accounts) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"id\", account.getId());\n\t\tjsonObject.put(\"name\", account.getName());\n\t\tjsonArray.add(jsonObject);\n\t}\n\treturn returnJson(ErpInfo.OK, jsonArray);\n}", "CodeBleu_score": 32.98603118064632}, {"code": "public String findBySelect(HttpServletRequest request) throws Exception{\n\t\t// Fetch the account data using accountService\n\tList<Account> accountList = accountService.findAll();\n\n\t// Convert the account data to JSON format with account IDs and names\n\tJSONArray jsonArray = new JSONArray();\n\tfor (Account account : accountList) {\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"id\", account.getId());\n\t\tjsonObject.put(\"name\", account.getName());\n\t\tjsonArray.add(jsonObject);\n\t}\n\n\t// Return the JSON string\n\treturn jsonArray.toJSONString();\n}", "CodeBleu_score": 32.726750831208626}]}
{"instance_id": "6f5d14a69cc9", "generation_result": [{"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo res = new BaseResponseInfo();\n Map<String, Object> map = new HashMap<String, Object>();\n try {\n List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n int total = accountService.listWithBalanceCount(name, serialNo);\n map.put(\"total\", total);\n //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n JSONArray dataArray = new JSONArray();\n if (null!= dataList) {\n for (AccountVo4List account : dataList) {\n JSONObject item = new JSONObject();\n item.put(\"Id\", account.getId());\n //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n item.put(\"AccountName\", account.getName());\n //\u7ed3\u7b97\u8d26\u6237\u4f59\u989d\n item.put(\"AccountBalance\", account.getBalance());\n //\u7ed3\u7b97\u8d26\u6237\u7f16\u7801\n item.put(\"AccountSerialNo\", account.getSerialNo());\n //\u7ed3\u7b97\u8d26\u6237\u7c7b\u578b\n item.put(\"AccountType\", account.getType());\n //\u7ed3\u7b97\u8d26\u6237\u72b6\u6001\n item.put(\"AccountStatus\", account.getStatus());\n //\u7ed3\u7b97\u8d26\u6237\u662f\u5426\u9ed8\u8ba4\n item.put(\"AccountIsDefault\", account.getIsDefault());\n //\u7ed3\u7b97\u8d26\u6237\u662f\u5426\u9ed8\u8ba4\n item.put(\"AccountIsDefault\", account.getIsDefault());\n dataArray.add(item);\n }\n }\n map.put(\"rows\", dataArray);\n res.code = 200;\n res.data = map;\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 56.2153662048478}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo res = new BaseResponseInfo();\n\tMap<String, Object> map = new HashMap<String, Object>();\n\ttry {\n\t\t// Get the list of accounts and their count\n\t\tList<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n\t\tint total = accountService.listWithBalanceCount(name, serialNo);\n\t\tmap.put(\"total\", total);\n\t\t// Construct the response object\n\t\tJSONArray dataArray = new JSONArray();\n\t\tif (null!= dataList) {\n\t\t\tfor (AccountVo4List account : dataList) {\n\t\t\t\tJSONObject item = new JSONObject();\n\t\t\t\titem.put(\"Id\", account.getId());\n\t\t\t\t// \u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n\t\t\t\titem.put(\"AccountName\", account.getName());\n\t\t\t\t// \u7ed3\u7b97\u8d26\u6237\u7f16\u53f7\n\t\t\t\titem.put(\"AccountNo\", account.getSerialNo());\n\t\t\t\t// \u8d26\u6237\u4f59\u989d\n\t\t\t\titem.put(\"AccountBalance\", account.getBalance());\n\t\t\t\tdataArray.add(item);\n\t\t\t}\n\t\t}\n\t\tmap.put(\"rows\", dataArray);\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 57.975862014447664}, {"code": " public BaseResponseInfo listWithBalance(@RequestParam(\"name\") String name,\n                                            @RequestParam(\"serialNo\") String serialNo,\n                                            @RequestParam(\"currentPage\") Integer currentPage,\n                                            @RequestParam(\"pageSize\") Integer pageSize,\n                                            HttpServletRequest request) throws Exception{\n\tResponseInfo res = new BaseResponseInfo();\n Map<String, Object> map = new HashMap<String, Object>();\n try {\n List<AccountVo4List> dataList = accountService.listWithBalance(name, serialNo, (currentPage - 1) * pageSize, pageSize);\n int total = accountService.listWithBalanceCount(name, serialNo);\n map.put(\"total\", total);\n //\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n JSONArray dataArray = new JSONArray();\n if (null!= dataList) {\n for (AccountVo4List account : dataList) {\n JSONObject item = new JSONObject();\n item.put(\"Id\", account.getId());\n //\u7ed3\u7b97\u8d26\u6237\u540d\u79f0\n item.put(\"AccountName\", account.getName());\n //\u7ed3\u7b97\u8d26\u6237\u4f59\u989d\n item.put(\"Balance\", account.getBalance());\n //\u7ed3\u7b97\u8d26\u6237\u7f16\u53f7\n item.put(\"SerialNumber\", account.getSerialNumber());\n //\u7ed3\u7b97\u8d26\u6237\u7c7b\u578b\n item.put(\"Type\", account.getType());\n dataArray.add(item);\n }\n }\n map.put(\"rows\", dataArray);\n res.code = 200;\n res.data = map;\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n res.code = 500;\n res.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n }\n return res;\n }", "CodeBleu_score": 58.69656226769606}]}
{"instance_id": "270b0f9fde62", "generation_result": [{"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tAccountStatisticsVo statisticsVo = accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo));\n\t\tmap.put(\"statisticsVo\", statisticsVo);\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 73.38469783353341}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\nMap<String, Object> map = new HashMap<>();\nmap.put(\"statistics\", accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo)));\nres.code = 200;\nres.data = map;\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 70.79264823759614}, {"code": "public BaseResponseInfo getStatistics(@RequestParam(\"name\") String name,\n                                          @RequestParam(\"serialNo\") String serialNo,\n                                          HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tMap<String, Object> map = new HashMap<>();\n\t\tmap.put(\"accountStatistics\", accountService.getStatistics(StringUtil.toNull(name), StringUtil.toNull(serialNo)));\n\t\tres.code = 200;\n\t\tres.data = map;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 70.39670583952197}]}
{"instance_id": "4b523b1c91d7", "generation_result": [{"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n if (accountHeadVo4ListEx!= null) {\n response.setData(accountHeadVo4ListEx);\n response.setCode(BusinessConstants.CODE_SUCCESS);\n } else {\n response.setCode(BusinessConstants.CODE_FAIL);\n response.setMsg(BusinessConstants.MSG_FAIL);\n }\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n response.setCode(BusinessConstants.CODE_FAIL);\n response.setMsg(BusinessConstants.MSG_FAIL);\n }\n return response;\n }", "CodeBleu_score": 37.44178208603592}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n AccountHeadVo4ListEx accountHeadVo4ListEx = accountHeadService.getDetailByNumber(billNo);\n if (accountHeadVo4ListEx!= null) {\n response.setCode(BusinessConstants.SUCCESS_CODE);\n response.setData(accountHeadVo4ListEx);\n } else {\n response.setCode(BusinessConstants.FAIL_CODE);\n response.setMessage(BusinessConstants.FAIL_MESSAGE);\n }\n return response;\n }", "CodeBleu_score": 32.706359907245556}, {"code": " public BaseResponseInfo getDetailByNumber(@RequestParam(\"billNo\") String billNo,\n                                              HttpServletRequest request)throws Exception{\n\t BaseResponseInfo response = new BaseResponseInfo();\n try {\n AccountHead accountHead = accountHeadService.getDetailByNumber(billNo);\n if (accountHead!= null) {\n response.setCode(200);\n response.setData(accountHead);\n }\n } catch (Exception e) {\n logger.error(\"getDetailByNumber error\", e);\n response.setCode(500);\n response.setMessage(e.getMessage());\n }\n return response;\n }", "CodeBleu_score": 33.53834339432822}]}
{"instance_id": "6cc16456f636", "generation_result": [{"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<Depot> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 83.66665434524734}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<Depot> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 83.66665434524734}, {"code": "public BaseResponseInfo findDepotByCurrentUser(HttpServletRequest request) throws Exception{\n\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tList<Depot> depotList = depotService.findDepotByCurrentUser();\n\t\tres.code = 200;\n\t\tres.data = depotList;\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u83b7\u53d6\u6570\u636e\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 83.66665434524734}]}
{"instance_id": "5ba6a616b49b", "generation_result": [{"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tSONArray jsonArray = new JSONArray();\n\ttry {\n\t\tList<Function> functionList = functionService.getRoleFunction(type, keyId);\n\t\tJSONObject jsonObject = new JSONObject();\n\t\tjsonObject.put(\"functionList\", functionList);\n\t\tif(!Tools.isSuperAdmin(request)) {\n\t\t\tjsonObject.put(\"tenantId\", Tools.getTenantId(request));\n\t\t}\n\t\tjsonArray.add(jsonObject);\n\t} catch (Exception e) {\n\t\tlogger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n\t}\n\treturn jsonArray;\n}", "CodeBleu_score": 25.352349070130487}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\tSONArray dataArray = new JSONArray();\n\ttry {\n\t\tList<Function> dataList = functionService.getRoleFunction(type, keyId);\n\t\tJSONObject dataObj = new JSONObject();\n\t\tif(dataList.size() > 0) {\n\t\t\tdataObj.put(\"data\", dataList);\n\t\t\tif(!\"admin\".equals(Tools.getTenantId(request))) {\n\t\t\t\tList<Function> newList = new ArrayList<Function>();\n\t\t\t\tfor(Function function : dataList) {\n\t\t\t\t\tif(!\"\u7cfb\u7edf\u7ba1\u7406\".equals(function.getName())) {\n\t\t\t\t\t\tnewList.add(function);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdataObj.put(\"data\", newList);\n\t\t\t}\n\t\t\tdataArray.add(dataObj);\n\t\t}\n\t} catch (DataAccessException e) {\n\t\tlogger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n\t}\n\treturn dataArray;\n}", "CodeBleu_score": 32.05631151637158}, {"code": "public JSONArray findRoleFunction(@RequestParam(\"UBType\") String type, @RequestParam(\"UBKeyId\") String keyId,\n                                 HttpServletRequest request)throws Exception{\n\t/\u5b58\u653e\u6570\u636ejson\u6570\u7ec4\n\tJSONArray dataArray = new JSONArray();\n\ttry {\n\t\tString tenantId = Tools.getTenantId(request);\n\t\tList<Function> dataList = functionService.getRoleFunction(type, keyId);\n\t\tJSONObject dataObj = new JSONObject();\n\t\tdataObj.put(\"data\", dataList);\n\t\tif (!tenantId.equals(\"1\")) {\n\t\t\tList<Function> filteredList = new ArrayList<Function>();\n\t\t\tfor (Function function : dataList) {\n\t\t\t\tif (!function.getName().equals(\"\u7cfb\u7edf\u7ba1\u7406\")) {\n\t\t\t\t\tfilteredList.add(function);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdataObj.put(\"data\", filteredList);\n\t\t}\n\t\tdataArray.add(dataObj);\n\t} catch (DataAccessException e) {\n\t\tlogger.error(\">>>>>>>>>>>>>>>>>>>\u67e5\u627e\u5f02\u5e38\", e);\n\t}\n\treturn dataArray;\n}", "CodeBleu_score": 35.576280694870725}]}
{"instance_id": "d28a903c50e1", "generation_result": [{"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(platformConfig);\n\t} catch(Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 50.02057291938063}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t//        Map<String, Object> objectMap = new HashMap<>();\n//        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n//        if(platformConfig!= null) {\n//            return returnJson(objectMap, ErpInfo.OK.name, ErpInfo.OK.code, platformConfig);\n//        } else {\n//            return returnJson(objectMap, ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n//        }\n    try {\n        PlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n        return BaseResponseInfo.success(platformConfig);\n    } catch (Exception e) {\n        logger.error(e.getMessage(), e);\n        return BaseResponseInfo.error(ErpInfo.ERROR.name, ErpInfo.ERROR.code);\n    }\n}", "CodeBleu_score": 44.1522961139832}, {"code": "public BaseResponseInfo getInfoByKey(@RequestParam(\"platformKey\") String platformKey,\n                                            HttpServletRequest request)throws Exception {\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tPlatformConfig platformConfig = platformConfigService.getInfoByKey(platformKey);\n\t\tresponse.setCode(200);\n\t\tresponse.setData(platformConfig);\n\t} catch(Exception e){\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMessage(e.getMessage());\n\t}\n\treturn response;\n}", "CodeBleu_score": 52.06471117589313}]}
{"instance_id": "a1dd3b347c6c", "generation_result": [{"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList!= null && systemConfigList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t} else {\n\t\t\tresponse.setCode(500);\n\t\t\tresponse.setData(\"\u672a\u67e5\u8be2\u5230\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\");\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(\"\u83b7\u53d6\u5f53\u524d\u79df\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\", e);\n\t\tresponse.setCode(500);\n\t\tresponse.setData(\"\u83b7\u53d6\u5f53\u524d\u79df\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 33.924505274605345}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList!= null && systemConfigList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tresponse.setCode(500);\n\t\tresponse.setMsg(\"\u7cfb\u7edf\u914d\u7f6e\u4fe1\u606f\u83b7\u53d6\u5931\u8d25\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 36.57640994960089}, {"code": "public BaseResponseInfo getCurrentInfo(HttpServletRequest request) throws Exception{\n\t\tBaseResponseInfo response = new BaseResponseInfo();\n\ttry {\n\t\tList<SystemConfig> systemConfigList = systemConfigService.getSystemConfigList();\n\t\tif (systemConfigList!= null && systemConfigList.size() > 0) {\n\t\t\tresponse.setCode(200);\n\t\t\tresponse.setData(systemConfigList.get(0));\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage());\n\t\tresponse.setCode(500);\n\t\tresponse.setData(\"\u83b7\u53d6\u5f53\u524d\u79df\u6237\u7684\u914d\u7f6e\u4fe1\u606f\u5931\u8d25\uff01\");\n\t}\n\treturn response;\n}", "CodeBleu_score": 35.38440714630814}]}
{"instance_id": "89d56baea0fa", "generation_result": [{"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tString fileName = file.getOriginalFilename();\n\t\tString suffix = fileName.substring(fileName.lastIndexOf(\".\"));\n\t\tString newFileName = StringUtil.getUUID() + suffix;\n\t\tString path = filePath + businessPath;\n\t\tFile dir = new File(path);\n\t\tif (!dir.exists()) {\n\t\t\tdir.mkdirs();\n\t\t}\n\t\tif (fileUploadType == 0) {\n\t\t\tFile targetFile = new File(path, newFileName);\n\t\t\tfile.transferTo(targetFile);\n\t\t\tres.code = 200;\n\t\t\tres.data = businessPath + newFileName;\n\t\t} else {\n\t\t\tres.code = 200;\n\t\t\tres.data = businessPath + newFileName;\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 52.349473960542525}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\t\tBaseResponseInfo res = new BaseResponseInfo();\n\ttry {\n\t\tString businessPath = request.getParameter(\"businessPath\");\n\t\tMultipartHttpServletRequest multipartRequest = (MultipartHttpServletRequest) request;\n\t\tMultipartFile file = multipartRequest.getFile(\"file\");\n\t\tif (file!= null) {\n\t\t\tString fileName = file.getOriginalFilename();\n\t\t\tString suffix = fileName.substring(fileName.lastIndexOf(\".\") + 1);\n\t\t\tString newFileName = StringUtil.getUUID() + \".\" + suffix;\n\t\t\tif (fileUploadType == 1) {\n\t\t\t\tString path = filePath + businessPath + \"/\" + newFileName;\n\t\t\t\tFileUtils.uploadFile(file.getBytes(), path);\n\t\t\t} else {\n\t\t\t\tString url = FileUtils.uploadFileToAliOss(file.getBytes(), businessPath, newFileName);\n\t\t\t\tif (url == null) {\n\t\t\t\t\tres.code = 500;\n\t\t\t\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t\t\t\t\treturn res;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres.code = 200;\n\t\t\tres.data = businessPath + \"/\" + newFileName;\n\t\t} else {\n\t\t\tres.code = 500;\n\t\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t\tres.code = 500;\n\t\tres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n\t}\n\treturn res;\n}", "CodeBleu_score": 52.66654835413568}, {"code": "public BaseResponseInfo upload(HttpServletRequest request, HttpServletResponse response){\n\tBaseResponseInfo res = new BaseResponseInfo();\ntry {\n// Retrieve the business path and the uploaded file from the request\nString businessPath = request.getParameter(\"businessPath\");\nMultipartFile file = ((MultipartHttpServletRequest) request).getFile(\"file\");\n// Depending on the file upload type, save the file either locally or to AliOss\nif (fileUploadType == 1) {\n// Save the file locally\nString path = filePath + businessPath;\nFile dir = new File(path);\nif (!dir.exists()) {\ndir.mkdirs();\n}\nFile newFile = new File(path + File.separator + file.getOriginalFilename());\nfile.transferTo(newFile);\n// Set the response code and data\nres.code = 200;\nres.data = businessPath + file.getOriginalFilename();\n} else if (fileUploadType == 2) {\n// Save the file to AliOss\n//...\n// Set the response code and data\nres.code = 200;\nres.data = businessPath + file.getOriginalFilename();\n}\n} catch (Exception e) {\nlogger.error(e.getMessage(), e);\nres.code = 500;\nres.data = \"\u4e0a\u4f20\u5931\u8d25\";\n}\nreturn res;\n}", "CodeBleu_score": 47.828728428880396}]}
{"instance_id": "9a2a7af4614e", "generation_result": [{"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t\ttry {\n\t\tString title = jsonObject.getString(\"title\");\n\t\tString head = jsonObject.getString(\"head\");\n\t\tString tip = jsonObject.getString(\"tip\");\n\t\tList<Map<String, Object>> dataList = jsonObject.getJSONArray(\"dataList\");\n\t\tString fileName = systemConfigService.exportExcelByParam(title, head, tip, dataList);\n\t\tif (StringUtil.isNotEmpty(fileName)) {\n\t\t\tresponse.setContentType(\"application/vnd.ms-excel\");\n\t\t\tresponse.setHeader(\"Content-disposition\", \"attachment;filename=\" + new String(fileName.getBytes(\"UTF-8\"), \"ISO-8859-1\"));\n\t\t\tOutputStream out = response.getOutputStream();\n\t\t\tout.write(fileName.getBytes(\"UTF-8\"));\n\t\t\tout.flush();\n\t\t\tout.close();\n\t\t}\n\t} catch (Exception e) {\n\t\tlogger.error(e.getMessage(), e);\n\t}\n}", "CodeBleu_score": 58.31501619306001}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n // \u6807\u9898\n String title = jsonObject.getString(\"title\");\n // \u8868\u5934\n JSONArray head = jsonObject.getJSONArray(\"head\");\n // \u8868\u683c\u63d0\u793a\n String tip = jsonObject.getString(\"tip\");\n // \u6570\u636e\n List<Map<String, Object>> dataList = jsonObject.getJSONArray(\"dataList\").toJavaList(Map.class);\n // \u5bfc\u51faExcel\n exportExcelService.exportExcelByParam(title, head, tip, dataList, response);\n } catch (Exception e) {\n logger.error(\"\u5bfc\u51faexcel\u5931\u8d25\" + e.getMessage());\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 66.24350707016768}, {"code": " public void exportExcelByParam(@RequestBody JSONObject jsonObject,\n                                   HttpServletResponse response){\n\t try {\n String title = jsonObject.getString(\"title\");\n List<String> head = (List<String>) jsonObject.get(\"head\");\n String tip = jsonObject.getString(\"tip\");\n List<List<String>> dataList = (List<List<String>>) jsonObject.get(\"dataList\");\n // \u5bfc\u51faexcel\n exportExcelService.exportExcelByParam(title, head, tip, dataList, response);\n } catch (Exception e) {\n logger.error(e.getMessage(), e);\n }\n }", "CodeBleu_score": 70.76433883653758}]}
{"instance_id": "aa230640b07b", "generation_result": [{"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tAccount account = new Account();\n\taccount.setName(obj.getString(\"name\"));\n\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\taccount.setRemark(obj.getString(\"remark\"));\n\taccount.setSort(obj.getInt(\"sort\"));\n\taccount.setDeleteFlag(false);\n\taccount.setEnabled(true);\n\taccount.setCreateTime(new Date());\n\taccount.setUpdateTime(new Date());\n\tif (obj.containsKey(\"initialAmount\")) {\n\t\taccount.setInitialAmount(obj.getBigDecimal(\"initialAmount\"));\n\t} else {\n\t\taccount.setInitialAmount(new BigDecimal(0));\n\t}\n\tList<Account> list = getAccount();\n\tif (list.size() == 0) {\n\t\taccount.setDefaultFlag(true);\n\t} else {\n\t\taccount.setDefaultFlag(false);\n\t}\n\tint result = accountMapper.insertSelective(account);\n\tif (result > 0) {\n\t\tlogService.insertLog(request, LogConstants.LOG_TYPE_ACCOUNT, LogConstants.LOG_ACTION_INSERT, account.getId(), null, account.getName(), null);\n\t}\n\treturn result;\n}", "CodeBleu_score": 38.95155922416926}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\t\tint result = 0;\n\ttry {\n\t\tAccount account = new Account();\n\t\taccount.setName(obj.getString(\"name\"));\n\t\taccount.setSerialNo(obj.getString(\"serialNo\"));\n\t\taccount.setRemark(obj.getString(\"remark\"));\n\t\taccount.setSort(obj.getInt(\"sort\"));\n\t\taccount.setCreateBy(userService.getCurrentUser().getId());\n\t\taccount.setCreateTime(new Date());\n\t\taccount.setUpdateBy(userService.getCurrentUser().getId());\n\t\taccount.setUpdateTime(new Date());\n\t\taccount.setEnabled(true);\n\t\taccount.setDeleteFlag(BusinessConstants.DELETE_FLAG_NOT_DELETED);\n\t\tif (obj.containsKey(\"initialAmount\")) {\n\t\t\taccount.setInitialAmount(new BigDecimal(obj.getString(\"initialAmount\")));\n\t\t} else {\n\t\t\taccount.setInitialAmount(BigDecimal.ZERO);\n\t\t}\n\t\tList<Account> accountList = getAccount();\n\t\tif (accountList.size() == 0) {\n\t\t\taccount.setDefaultFlag(true);\n\t\t} else {\n\t\t\taccount.setDefaultFlag(false);\n\t\t}\n\t\tresult = accountMapper.insert(account);\n\t\tlogService.insertLog(request, LogConstants.LOG_TYPE_ACCOUNT, LogConstants.LOG_TYPE_ACCOUNT_INSERT, \"\u65b0\u589e\u79d1\u76ee\uff1a\" + account.getName());\n\t} catch (Exception e) {\n\t\tJshException.saveFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 47.82555624690172}, {"code": "public int insertAccount(JSONObject obj, HttpServletRequest request)throws Exception {\n\tint result = 0;\ntry {\nAccount account = new Account();\naccount.setSerialNo(obj.getString(\"serialNo\"));\naccount.setName(obj.getString(\"name\"));\naccount.setRemark(obj.getString(\"remark\"));\naccount.setSort(obj.getInt(\"sort\"));\naccount.setEnabled(true);\naccount.setDeleteFlag(false);\nif (obj.containsKey(\"initialAmount\")) {\naccount.setInitialAmount(new BigDecimal(obj.getString(\"initialAmount\")));\n} else {\naccount.setInitialAmount(BigDecimal.ZERO);\n}\n// Determine if the account should be set as the default based on existing accounts\nif (obj.containsKey(\"defaultFlag\")) {\naccount.setDefaultFlag(obj.getBoolean(\"defaultFlag\"));\n} else {\n// If no default flag is specified, check if there are any existing accounts\nAccountExample example = new AccountExample();\nexample.createCriteria().andEnabledEqualTo(true).andDeleteFlagNotEqualTo(BusinessConstants.DELETE_FLAG_DELETED);\nList<Account> accounts = accountMapper.selectByExample(example);\nif (accounts.size() == 0) {\n// If no accounts exist, set the new account as the default\naccount.setDefaultFlag(true);\n} else {\n// Otherwise, set the new account as not the default\naccount.setDefaultFlag(false);\n}\n}\nresult = accountMapper.insertSelective(account);\n// Log the operation\nlogService.log(request, LogConstants.LOG_TYPE_ACCOUNT, LogConstants.LOG_ACTION_INSERT, account.getId(), account.getName());\n} catch(Exception e) {\nJshException.insertFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 47.27065715476313}]}
{"instance_id": "d7496f2c2a76", "generation_result": [{"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = accountMapperEx.countByConditionAccount(name, serialNo, null);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 63.259035953455665}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = accountMapperEx.selectByConditionAccountCount(name, serialNo, null);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 64.38337056740112}, {"code": "public Long listWithBalanceCount(String name, String serialNo){\n\t\tLong count = null;\n\ttry {\n\t\tcount = accountMapperEx.selectByConditionAccountCount(name, serialNo);\n\t} catch (Exception e) {\n\t\tlogger.error(\"Error while getting account count with name {} and serial number {}.\", name, serialNo, e);\n\t}\n\treturn count;\n}", "CodeBleu_score": 44.850250644362355}]}
{"instance_id": "c61f011e0619", "generation_result": [{"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 70.83916425515784}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\t\tint result = 0;\n\ttry {\n\t\tresult = depotItemMapper.deleteByPrimaryKey(id);\n\t} catch (Exception e) {\n\t\tJshException.readFail(logger, e);\n\t}\n\treturn result;\n}", "CodeBleu_score": 70.83916425515784}, {"code": "public int deleteDepotItem(Long id, HttpServletRequest request)throws Exception{\n\tint result =0;\ntry{\nresult=depotItemMapper.deleteByPrimaryKey(id);\n}catch(Exception e){\nJshException.readFail(logger, e);\n}\nreturn result;\n}", "CodeBleu_score": 86.76258949950152}]}
{"instance_id": "fdf7bfcf1922", "generation_result": [{"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry (CloseableHttpClient httpClient = HttpClients.createDefault()) {\n\t\tString url = String.format(\"%s://%s:%d/%s/%s/%s\", protocol, host, port, projectName, nodeType, nodeKey);\n\t\tHttpGet request = new HttpGet(url);\n\t\tCloseableHttpResponse response = httpClient.execute(request);\n\t\tif (response.getStatusLine().getStatusCode() == 200) {\n\t\t\tString responseBody = EntityUtils.toString(response.getEntity());\n\t\t\tMap<String, Object> responseMap = new ObjectMapper().readValue(responseBody, Map.class);\n\t\t\tif (responseMap.containsKey(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t}\n\treturn false;\n}", "CodeBleu_score": 40.17401588451113}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\tCloseableHttpClient httpclient = HttpClients.createDefault();\n\ttry {\n\t\t// Create a new HttpGet object with the specified URL\n\t\tHttpGet httpget = new HttpGet(String.format(\"%s://%s:%d/%s/nodes/%s/%s\", protocol, host, port, projectName, nodeType, nodeKey));\n\t\t// Execute the request and store the response in a CloseableHttpResponse object\n\t\tCloseableHttpResponse response = httpclient.execute(httpget);\n\t\ttry {\n\t\t\t// Check if the response contains a key\n\t\t\tif (response.containsHeader(\"key\")) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} finally {\n\t\t\t// Close the response\n\t\t\tresponse.close();\n\t\t}\n\t} catch (IOException e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\t// Close the HTTP client\n\t\ttry {\n\t\t\thttpclient.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 35.05239868812965}, {"code": "public  boolean addNode(String projectName, String nodeType, String nodeKey){\n\t\ttry {\n\t\tCloseableHttpClient httpClient = HttpClients.createDefault();\n\t\tString url = protocol + \"://\" + host + \":\" + port + \"/db/data/node\";\n\t\tHttpPost request = new HttpPost(url);\n\t\trequest.addHeader(\"Accept\", \"application/json; charset=UTF-8\");\n\t\trequest.addHeader(\"Content-Type\", \"application/json\");\n\t\tString requestBody = \"{\\\"project\\\":\\\"\" + projectName + \"\\\",\\\"type\\\":\\\"\" + nodeType + \"\\\",\\\"key\\\":\\\"\" + nodeKey + \"\\\"}\";\n\t\tStringEntity params = new StringEntity(requestBody);\n\t\trequest.setEntity(params);\n\t\tCloseableHttpResponse response = httpClient.execute(request);\n\t\tHttpEntity entity = response.getEntity();\n\t\tString responseString = EntityUtils.toString(entity, Charset.defaultCharset());\n\t\tif (responseString.contains(\"key\")) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t} finally {\n\t\thttpClient.close();\n\t}\n\treturn false;\n}", "CodeBleu_score": 44.62652887642522}]}
{"instance_id": "9b69c75f021e", "generation_result": [{"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\".concat(withProjectName(projectName)).concat(edgeType).concat(\"/\").concat(fromType).concat(\"/\").concat(toType).concat(\"/\").concat(from).concat(\"/\").concat(to));\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 74.81691301054451}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\".concat(withProjectName(projectName)).concat(edgeType).concat(\"/\").concat(fromType).concat(\"/\").concat(toType).concat(\"/\").concat(from).concat(\"/\").concat(to));\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 74.81691301054451}, {"code": "public  boolean addEdge0(String projectName, String edgeType, String fromType, String toType, String from, String to){\n\tseableHttpClient httpClient = HttpClients.createDefault();\n\tCloseableHttpResponse httpResponse = null;\n\ttry {\n\t\tHttpHost host = new HttpHost(getHost(), getPort(), getProtocol());\n\t\tHttpGet getRequest = new HttpGet(\n\t\t\t\t\"/addEdge/\\\" +withProjectName(projectName) + edgeType + \\\"/\\\" + fromType + \\\"/\\\" + toType + \\\"/\\\" + from + \\\"/\\\" + to);\n\t\thttpResponse = httpClient.execute(host, getRequest);\n\t\tHttpEntity entity = httpResponse.getEntity();\n\t\tif (entity!= null) {\n\t\t\tObjectMapper om = new ObjectMapper();\n\t\t\tString result = EntityUtils.toString(entity);\n\t\t\tMap map = om.readValue(result, Map.class);\n\t\t\tif (map.get(\"key\")!= null) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t\treturn false;\n\t} finally {\n\t\tclose(httpClient, httpResponse);\n\t}\n}", "CodeBleu_score": 55.69239847534861}]}
{"instance_id": "ff5587f502f5", "generation_result": [{"code": "public void sendEvent(Event event){\n\t\tif (event!= null && event.getMessage()!= null) {\n\t\tif (event.getLocation() == null) {\n\t\t\tevent.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n\t\t}\n\t\tevent.setTime(new Date());\n\t\tString eventJson = null;\n\t\ttry {\n\t\t\teventJson = objectMapper.writeValueAsString(event);\n\t\t} catch (JsonProcessingException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tif (eventJson!= null) {\n\t\t\tString topic = event.getTarget();\n\t\t\tif (topic == null) {\n\t\t\t\ttopic = \"test\";\n\t\t\t}\n\t\t\tProducerRecord<String, String> producerRecord = new ProducerRecord<>(topic, eventJson);\n\t\t\tproducer.send(producerRecord);\n\t\t\tproducer.flush();\n\t\t}\n\t}\n}", "CodeBleu_score": 45.92632502222236}, {"code": "public void sendEvent(Event event){\n\tif (event == null || event.getMessage() == null) {\nreturn;\n}\nif (event.getLocation() == null) {\nevent.setLocation(getRandomLocation());\n}\nevent.setTime(new Date());\nString jsonString;\ntry {\njsonString = objectMapper.writeValueAsString(event);\n} catch (JsonProcessingException e) {\nthrow new RuntimeException(e);\n}\nString topic = event.getTarget() == null? \"test\" : event.getTarget();\nProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\nproducer.send(record);\nproducer.flush();\n}", "CodeBleu_score": 47.90203040630564}, {"code": "public void sendEvent(Event event){\n\t\tif (event == null || event.getMessage() == null) {\n\t\treturn;\n\t}\n\tif (event.getLocation() == null) {\n\t\tevent.setLocation(testLocations.get(new Random().nextInt(testLocations.size())));\n\t}\n\tevent.setEventTime(new Date());\n\tString jsonString;\n\ttry {\n\t\tjsonString = objectMapper.writeValueAsString(event);\n\t} catch (JsonProcessingException e) {\n\t\te.printStackTrace();\n\t\treturn;\n\t}\n\tString topic = event.getTarget()!= null? event.getTarget() : \"test\";\n\tProducerRecord<String, String> record = new ProducerRecord<>(topic, jsonString);\n\tproducer.send(record);\n\tproducer.flush();\n}", "CodeBleu_score": 51.482384704337505}]}
{"instance_id": "ac42de6f7165", "generation_result": [{"code": "public String upload(String objName, byte[] content){\n\t\tOSSClient ossClient = null;\n\ttry {\n\t\tossClient = new OSSClient(config.getEndpoint(), config.getAccessKeyId(), config.getAccessKeySecret());\n\t\tossClient.putObject(config.getOssBucket(), objName, new ByteArrayInputStream(content));\n\t\treturn \"https://\" + config.getOssBucket() + \".\" + config.getEndpoint() + \"/\" + objName;\n\t} finally {\n\t\tif (ossClient!= null) {\n\t\t\tossClient.shutdown();\n\t\t}\n\t}\n}", "CodeBleu_score": 37.334263474953666}, {"code": "public String upload(String objName, byte[] content){\n\t\tString endpoint = \"http://oss-cn-beijing.aliyuncs.com\";\n\tString accessKeyId = \"your-access-key-id\";\n\tString accessKeySecret = \"your-access-key-secret\";\n\tString bucketName = \"your-bucket-name\";\n\n\t// Initialize the OSS client with access credentials\n\tOSSClient ossClient = new OSSClient(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file content as an object with the specified name\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSS client\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 38.67381468771459}, {"code": "public String upload(String objName, byte[] content){\n\t\t// Create an OSSClient instance.\n\tOSS ossClient = new OSSClientBuilder().build(endpoint, accessKeyId, accessKeySecret);\n\n\t// Upload the file to the specified bucket.\n\tossClient.putObject(bucketName, objName, new ByteArrayInputStream(content));\n\n\t// Shut down the OSSClient.\n\tossClient.shutdown();\n\n\t// Return the URL of the uploaded object.\n\treturn \"https://\" + bucketName + \".\" + endpoint + \"/\" + objName;\n}", "CodeBleu_score": 32.352563571432796}]}
{"instance_id": "33db7ae34b8f", "generation_result": [{"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\tLocationInfo result = new LocationInfo();\n\t\tresult.setIpAddress(ipAddress);\n\t\tresult.setMainInfo(\"unknown\");\n\t\tresult.setSubInfo(\"unknown\");\n\t\treturn result;\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 46.975007407065306}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\tLocationInfo locationInfo = new LocationInfo();\n\t\tlocationInfo.setIpAddress(ipAddress);\n\t\tlocationInfo.setMainInfo(\"unknown\");\n\t\tlocationInfo.setSubInfo(\"unknown\");\n\t\treturn locationInfo;\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 44.55398033210889}, {"code": "public LocationInfo ipToLocation(String ipAddress) throws Exception{\n\tpToLocationWorker worker = getIpToLocationWorker();\n\tif (worker == null) {\n\t\treturn new LocationInfo(\"unknown\", \"unknown\", \"unknown\");\n\t}\n\treturn worker.getLocationInfoByIP(ipAddress);\n}", "CodeBleu_score": 25.741854497492056}]}
{"instance_id": "232d7dc62a35", "generation_result": [{"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tList<HttpHost> clusterHosts = new ArrayList<HttpHost>();\n\t\tString[] hosts = clusterHostList.split(\",\");\n\t\tfor (String host : hosts) {\n\t\t\tString[] hostAndPort = host.split(\":\");\n\t\t\tclusterHosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1]), \"http\"));\n\t\t}\n\t\tlowLevelRestClient = RestClient.builder(clusterHosts.toArray(new HttpHost[clusterHosts.size()])).build();\n\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 54.59695446688514}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tString[] hosts = clusterHostList.split(\",\");\n\t\tList<HttpHost> httpHosts = new ArrayList<>();\n\t\tfor (String host : hosts) {\n\t\t\tString[] hostPort = host.split(\":\");\n\t\t\thttpHosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t}\n\t\tlowLevelRestClient = RestClient.builder(httpHosts.toArray(new HttpHost[0])).build();\n\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 61.06905542159197}, {"code": "protected void ensureESClientInitialized() throws Exception{\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\treturn;\n\t}\n\tsynchronized (this) {\n\t\tif (lowLevelRestClient!= null && highLevelRestClient!= null) {\n\t\t\treturn;\n\t\t}\n\t\tList<HttpHost> hosts = new ArrayList<HttpHost>();\n\t\tString[] hostList = clusterHostList.split(\",\");\n\t\tfor (String host : hostList) {\n\t\t\tString[] hostPort = host.split(\":\");\n\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t}\n\t\tlowLevelRestClient = RestClient.builder(hosts.toArray(new HttpHost[hosts.size()])).build();\n\t\thighLevelRestClient = new RestHighLevelClient(lowLevelRestClient);\n\t}\n}", "CodeBleu_score": 56.748871767798384}]}
{"instance_id": "8c01a776e2e7", "generation_result": [{"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<>();\n\tString[] hostsArray = clusterHostList.split(\",\");\n\tfor (String host : hostsArray) {\n\t\tString[] hostPort = host.split(\":\");\n\t\tif (hostPort.length == 1) {\n\t\t\thosts.add(new HttpHost(hostPort[0], clusterPort));\n\t\t} else if (hostPort.length == 2) {\n\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1])));\n\t\t} else {\n\t\t\tthrow new IllegalArgumentException(\"Invalid host format: \" + host);\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 44.48947729834507}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<>();\n\tif (clusterHostList == null || clusterHostList.isEmpty()) {\n\t\treturn hosts;\n\t}\n\tString[] hostList = clusterHostList.split(\",\");\n\tfor (String host : hostList) {\n\t\tString[] hostPort = host.split(\":\");\n\t\tif (hostPort.length == 2) {\n\t\t\thosts.add(new HttpHost(hostPort[0], Integer.parseInt(hostPort[1]), \"http\"));\n\t\t} else {\n\t\t\thosts.add(new HttpHost(host, clusterPort, \"http\"));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 41.8991112695087}, {"code": "public static List<HttpHost> parseHosts(String clusterHostList, int clusterPort){\n\tt<HttpHost> hosts = new ArrayList<>();\n\tString[] hostsList = clusterHostList.split(\",\");\n\tfor (String host : hostsList) {\n\t\tString[] hostAndPort = host.split(\":\");\n\t\tif (hostAndPort.length == 1) {\n\t\t\thosts.add(new HttpHost(hostAndPort[0], clusterPort));\n\t\t} else if (hostAndPort.length == 2) {\n\t\t\thosts.add(new HttpHost(hostAndPort[0], Integer.parseInt(hostAndPort[1])));\n\t\t}\n\t}\n\treturn hosts;\n}", "CodeBleu_score": 46.4435045197444}]}
{"instance_id": "06d77462474a", "generation_result": [{"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task == null) {\n\t\treturn;\n\t}\n\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\tif (StringUtils.isBlank(taskType)) {\n\t\treturn;\n\t}\n\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\tString dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\tif (StringUtils.isBlank(dest) || StringUtils.isBlank(template) || parameters == null) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tsendMessage(dest, fromWho, template, parameters);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 55.73102742123817}, {"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task == null) {\n\t\treturn;\n\t}\n\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\tString toNumber = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\tMap<String, String> params = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\tif (StringUtils.isBlank(toNumber) || StringUtils.isBlank(fromWho) || StringUtils.isBlank(template) || params == null) {\n\t\t\tSystem.out.println(\"Invalid task data: \" + task);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tsendMessage(toNumber, fromWho, template, params);\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Error sending message: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 59.12935525853638}, {"code": "protected void pollingWork() throws InterruptedException{\n\tap<String, Object> task = taskQueue.poll(30, TimeUnit.SECONDS);\n\tif (task == null) {\n\t\treturn;\n\t}\n\tString taskType = (String) task.get(PARAM_TASK_TYPE);\n\tif (StringUtils.isBlank(taskType)) {\n\t\treturn;\n\t}\n\tif (taskType.equals(TASK_PLAIN_TEXT_MESSAGE)) {\n\t\tString dest = (String) task.get(PARAM_RECIEVER_NUMBER);\n\t\tString fromWho = (String) task.get(PARAM_FROM_WHO);\n\t\tString template = (String) task.get(PARAM_MESSAGE_TEMPLATE);\n\t\tMap<String, String> parameters = (Map<String, String>) task.get(PARAM_MESSAGE_DATA);\n\t\tif (StringUtils.isBlank(dest) || StringUtils.isBlank(fromWho) || StringUtils.isBlank(template) || parameters == null || parameters.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tsendMessage(dest, fromWho, template, parameters);\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}", "CodeBleu_score": 54.89595243854306}]}
{"instance_id": "02aa7ef4815e", "generation_result": [{"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tSystem.out.println(content);\n\treturn content;\n}", "CodeBleu_score": 77.36265020641709}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tSystem.out.println(content);\n\treturn content;\n}", "CodeBleu_score": 77.36265020641709}, {"code": "private static String httpGetRequestXml(URI uri) throws Exception{\n\t\tCloseableHttpClient httpclient = getHttpClient();\n\tHttpGet httpget = new HttpGet(uri);\n\tCloseableHttpResponse response = httpclient.execute(httpget);\n\tHttpEntity entity = response.getEntity();\n\tString content = EntityUtils.toString(entity, StandardCharsets.UTF_8);\n\tSystem.out.println(content);\n\treturn content;\n}", "CodeBleu_score": 77.36265020641709}]}
{"instance_id": "9c353199ab91", "generation_result": [{"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tNodeList nodes = doc.getChildNodes();\n\tObject[] result = decodeNode(nodes, doTrim);\n\tif (result == null) {\n\t\treturn null;\n\t}\n\tMap<String, Object> map = new HashMap<>();\n\tfor (int i = 0; i < result.length; i += 2) {\n\t\tmap.put((String) result[i], result[i + 1]);\n\t}\n\treturn map;\n}", "CodeBleu_score": 64.94447513116273}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tif (StringUtils.isBlank(messageXmlStr)) {\n\\t\\treturn null;\n\\t}\n\n\\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\\tDocumentBuilder db = dbf.newDocumentBuilder();\n\\tDocument doc = db.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\n\\tMap<String, Object> map = new HashMap<>();\n\\tif (doc.getChildNodes().getLength() > 0) {\n\\t\\tmap.putAll(decodeNode(doc.getChildNodes().item(0), doTrim));\n\\t}\n\\treturn map;\n}", "CodeBleu_score": 42.36648119092472}, {"code": "private static Map<String, Object> decodeToMap(String messageXmlStr, boolean doTrim) throws Exception{\n\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n\tDocumentBuilder builder = factory.newDocumentBuilder();\n\tDocument doc = builder.parse(new ByteArrayInputStream(messageXmlStr.getBytes(StandardCharsets.UTF_8)));\n\tdoc.getDocumentElement().normalize();\n\tMap<String, Object> map = new HashMap<>();\n\tdecodeElement(doc.getChildNodes(), map, doTrim);\n\treturn map;\n}", "CodeBleu_score": 51.76288825634035}]}
{"instance_id": "01b280614047", "generation_result": [{"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (orderRecord.isSOTrx() && isOrderEligibleForAutoProcessing(orderRecord)) {\n\t\tlogger.info(\"Order {} is eligible for auto-processing. Enqueuing for automatic shipping and invoicing.\", Loggables.orderId(orderRecord));\n\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderRecord.get_ID(), orderRecord.get_TrxName());\n\t} else {\n\t\tlogger.info(\"Order {} is not eligible for auto-processing. Scheduling the creation of missing shipment schedules if they are not postponed.\", Loggables.orderId(orderRecord));\n\t\tif (orderRecord.isSOTrx() && orderRecord.getDeliveryRule().equals(DeliveryRule.Schedule)) {\n\t\t\tfinal AsyncBatchId batchId = createMissingShipmentSchedulesWorkpackageProcessor.createMissingShipmentSchedulesWorkpackage(orderRecord.get_ID(), orderRecord.get_TrxName());\n\t\t\tasyncBatchObserver.register(batchId, orderRecord.get_TrxName());\n\t\t}\n\t}\n}", "CodeBleu_score": 43.73092939607731}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isOrderEligibleForAutoProcessing(orderRecord)) {\n\t\tlogger.info(Loggables.format(\"Enqueuing order %s for automatic shipping and invoicing\", orderRecord.get_ID()));\n\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderRecord.get_ID(), orderRecord.getTrxName());\n\t} else {\n\t\tlogger.info(Loggables.format(\"Order %s is not eligible for automatic shipping and invoicing\", orderRecord.get_ID()));\n\t\tif (orderRecord.getDeliveryRule().equals(DeliveryRule.Schedule)) {\n\t\t\tlogger.info(Loggables.format(\"Enqueuing order %s for creation of missing shipment schedules\", orderRecord.get_ID()));\n\t\t\tServices.get(CreateMissingShipmentSchedulesWorkpackageProcessor.class)\n\t\t\t\t\t.enqueue(AsyncBatchId.of(orderRecord.get_ID()), orderRecord.getTrxName());\n\t\t}\n\t}\n}", "CodeBleu_score": 34.134589484806966}, {"code": "private void enqueueGenerateSchedulesAfterCommit(@NonNull final I_C_Order orderRecord){\n\t\tif (isEligibleForAutoProcessing(orderRecord)) {\n\t\tlogger.info(\n\t\t\t\t\"Order {} is eligible for auto-processing. Enqueuing for automatic shipping and invoicing.\",\n\t\t\t\tLoggables.orderId(orderRecord));\n\t\tcompleteShipAndInvoiceEnqueuer.enqueue(orderRecord.get_ID());\n\t} else {\n\t\tlogger.info(\n\t\t\t\t\"Order {} is not eligible for auto-processing. Scheduling creation of missing shipment schedules if they are not postponed.\",\n\t\t\t\tLoggables.orderId(orderRecord));\n\t\tCreateMissingShipmentSchedulesWorkpackageProcessor.scheduleCreateMissingShipmentSchedules(\n\t\t\t\torderRecord.get_ID(),\n\t\t\t\torderRecord.getAD_Client_ID(),\n\t\t\t\torderRecord.getAD_Org_ID(),\n\t\t\t\torderRecord.get_TrxName());\n\t}\n}", "CodeBleu_score": 29.4702474637277}]}
{"instance_id": "08fdb69981b1", "generation_result": [{"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = User::where('email', $request->email)->first();\n\nif (! $user ||! $this->guard->validate($request->only('email', 'password'))) {\n$this->limiter->increment($request);\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\n$this->limiter->clear($request);\n\nreturn $user;\n}", "CodeBleu_score": 41.026710698945045}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = User::where('email', $request->email)->first();\n\nif (! $user ||! $this->guard->validate($request->only('email', 'password'))) {\n$this->limiter->increment($request);\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}\n\n$this->limiter->clear($request);\n\nreturn $user;\n}", "CodeBleu_score": 41.026710698945045}, {"code": "<?\nprotected function validateCredentials(Request $request): ?User{\n\tser = $this->guard->getProvider()->retrieveByCredentials($request->only('email'));\n\nif (! $user ||! $this->guard->validate($request->only('email', 'password'))) {\n$this->limiter->increment($request);\n\nthrow ValidationException::withMessages([\n'email' => trans('auth.failed'),\n]);\n}\n\n$this->limiter->clear($request);\n\nreturn $user;\n}", "CodeBleu_score": 35.36729521914714}]}
{"instance_id": "64d195066208", "generation_result": [{"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tis->limiter->increment($request);\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 80.85959779532806}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tis->limiter->increment($request);\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 80.85959779532806}, {"code": "<?\nprotected function throwFailedAuthenticationException(Request $request): void{\n\tis->limiter->increment($request);\n\nthrow ValidationException::withMessages([\n'email' => [trans('auth.failed')],\n]);\n}", "CodeBleu_score": 80.85959779532806}]}
{"instance_id": "5df2ecd6e675", "generation_result": [{"code": "<?\npublic function toResponse($request){\n\t\t$userId = $request->session()->get('two-factor-user-id');\n\t$user = User::find($userId);\n\n\tif ($user) {\n\t\t$assertion = Webauthn::prepareAssertion($user);\n\t\t$data = [\n\t\t\t'enabled' => true,\n\t\t\t'remember' => $request->session()->has('two-factor-remember'),\n\t\t\t'publicKey' => $assertion->publicKey(),\n\t\t];\n\t} else {\n\t\t$data = [\n\t\t\t'enabled' => false,\n\t\t\t'remember' => false,\n\t\t\t'publicKey' => null,\n\t\t];\n\t}\n\n\treturn Inertia::render('TwoFactorChallenge', $data);\n}", "CodeBleu_score": 45.91472514249739}, {"code": "<?\npublic function toResponse($request){\n\t$userId = $request->session()->get('login.id');\n\n$user = User::find($userId);\n\nif ($user) {\n$assertion = Webauthn::prepareAssertion(\n$user,\n$request->user()->email,\n$request->user()->name\n);\n\n$data = [\n'enabled' => $request->session()->get('login.remember'),\n'remember' => $request->session()->get('login.remember'),\n'assertion' => $assertion,\n];\n\nreturn Inertia::render('TwoFactorChallenge', $data);\n}\n}", "CodeBleu_score": 50.37720883898954}, {"code": "<?\npublic function toResponse($request){\n\t$userId = $request->session()->get('login.id');\n$user = User::find($userId);\n\nif ($user) {\n$publicKey = Webauthn::getPublicKeyCredentialRequestOptions($user);\n\nreturn Inertia::render('TwoFactorChallenge', [\n'enabled' => true,\n'remember' => $request->has('remember'),\n'publicKey' => $publicKey,\n]);\n}\n\nreturn Inertia::render('TwoFactorChallenge', [\n'enabled' => false,\n]);\n}", "CodeBleu_score": 44.57343202525867}]}
{"instance_id": "e7f632ade812", "generation_result": [{"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->getId())->first();\n\n\tif ($token) {\n\t\t$user = $token->user;\n\n\t\tif ($user->email!== $socialite->getEmail()) {\n\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t'email' => __('The provided email address is not associated with your account.'),\n\t\t\t]);\n\t\t}\n\n\t\tif ($user->provider_id!== $socialite->getId()) {\n\t\t\t$token->socialite_user_id = $socialite->getId();\n\t\t\t$token->save();\n\t\t}\n\n\t\treturn $user;\n\t}\n\n\t$user = User::where('email', $socialite->getEmail())->first();\n\n\tif ($user) {\n\t\t$token = UserToken::create([\n\t\t\t'user_id' => $user->id,\n\t\t\t'driver' => $driver,\n\t\t\t'socialite_user_id' => $socialite->getId(),\n\t\t]);\n\n\t\treturn $user;\n\t}\n\n\t$user = CreateNewUser::create([\n\t\t'name' => $socialite->getName(),\n\t\t'email' => $socialite->getEmail(),\n\t\t'password' => (Str::(12)),\n\t\t'provider_id' => $socialite->getId(),\n\t\t'provider' => $driver,\n\t]);\n\n\t$token = UserToken::create([\n\t\t'user_id' => $user->id,\n\t\t'driver' => $driver,\n\t\t'socialite_user_id' => $socialite->getId(),\n\t]);\n\n\tevent(new Registered($user));\n\n\treturn $user;\n}", "CodeBleu_score": 43.05782149613019}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\ttoken = UserToken::where('driver', $driver)->where('socialite_id', $socialite->getId())->first();\n\nif ($token) {\n$user = $token->user;\n$token->update(['token' => $socialite->token,'refresh_token' => $socialite->refreshToken]);\n} else {\n$user = User::where('email', $socialite->getEmail())->first();\n\nif (! $user) {\n$user = CreateNewUser::create([\n'name' => $socialite->getName(),\n'email' => $socialite->getEmail(),\n'password' => (Str::(16)),\n]);\n}\n\n$token = UserToken::create([\n'user_id' => $user->id,\n'driver' => $driver,\n'socialite_id' => $socialite->getId(),\n'token' => $socialite->token,\n'refresh_token' => $socialite->refreshToken,\n]);\n}\n\nif ($token->user->is_active) {\n$this->limiter->clear($request);\n\nreturn $token->user;\n}\n\nthrow ValidationException::withMessages([\n'email' => __('Your account is not active.'),\n]);\n}", "CodeBleu_score": 45.84073844717738}, {"code": "<?\nprivate function authenticateUser(Request $request, string $driver, SocialiteUser $socialite): User{\n\t$token = UserToken::where('driver', $driver)->where('socialite_user_id', $socialite->getId())->first();\n\n\tif ($token) {\n\t\t$user = $token->user;\n\n\t\tif (! $user->hasVerifiedEmail()) {\n\t\t\tthrow ValidationException::withMessages([\n\t\t\t\t'email' => __('Your email address is not verified.'),\n\t\t\t]);\n\t\t}\n\n\t\tif ($token->token!== $socialite->token) {\n\t\t\t$token->update(['token' => $socialite->token]);\n\t\t}\n\t} else {\n\t\t$user = User::where('email', $socialite->getEmail())->first();\n\n\t\tif (! $user) {\n\t\t\t$user = (new CreateNewUser())->create([\n\t\t\t\t'name' => $socialite->getName(),\n\t\t\t\t'email' => $socialite->getEmail(),\n\t\t\t\t'password' => Str::random(16),\n\t\t\t]);\n\n\t\t\tevent(new Registered($user));\n\t\t}\n\n\t\t$user->tokens()->create([\n\t\t\t'driver' => $driver,\n\t\t\t'socialite_user_id' => $socialite->getId(),\n\t\t\t'token' => $socialite->token,\n\t\t]);\n\t}\n\n\t$this->limiter->clear($request);\n\n\treturn $user;\n}", "CodeBleu_score": 45.11239628389051}]}
{"instance_id": "ddce87aea5b1", "generation_result": [{"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\tif (! $user = $request->user()) {\nreturn false;\n}\n\nif (WebauthnFacade::validateAssertion($user, $this->filterCredentials($request))) {\nreturn true;\n}\n\nevent(new Failed($user, $this->guard));\n\n$this->throwFailedAuthenticationException($request);\n\nreturn false;\n}", "CodeBleu_score": 45.3457601839361}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t\tif (! $user = $request->user()) {\n\t\treturn false;\n\t}\n\n\t$credentials = $this->filterCredentials($request);\n\n\t$result = WebauthnFacade::validateAssertion(\n\t\t$user,\n\t\t$credentials['webauthn_id'],\n\t\t$credentials['webauthn_assertion']\n\t);\n\n\tif (! $result) {\n\t\tevent(new Failed($this->guard->getName(), $user));\n\n\t\tthrow ValidationException::withMessages([\n\t\t\t'webauthn_id' => __('auth.failed'),\n\t\t]);\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 56.4759490409259}, {"code": "<?\nprotected function attemptValidateAssertion(Request $request): bool{\n\t$user = $request->user();\n\nif (! $user) {\nreturn false;\n}\n\n$credentials = $this->filterCredentials($request);\n\nif (! WebauthnFacade::validateAssertion($user, $credentials)) {\n$this->throwFailedAuthenticationException($request);\n\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 57.08404281823718}]}
{"instance_id": "22cef9627da1", "generation_result": [{"code": "<?\nprivate function user(): ?User{\n\t= $this->option('email');\nif (!$email) {\n$this->error('No email provided');\nreturn null;\n}\n\ntry {\nreturn User::whereEmail($email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('Could not find user with email '. $email);\nreturn null;\n}\n}", "CodeBleu_score": 40.81763384990128}, {"code": "<?\nprivate function user(): ?User{\n\tmail = $this->option('email')) === null) {\n$this->error('Email is required');\n\nreturn null;\n}\n\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error(\"Could not find user with email {$email}\");\n\nreturn null;\n}\n}", "CodeBleu_score": 47.826294348156324}, {"code": "<?\nprivate function user(): ?User{\n\t= $this->option('email');\nif (!$email) {\n$this->error('No email provided');\nreturn null;\n}\n\ntry {\nreturn User::where('email', $email)->firstOrFail();\n} catch (ModelNotFoundException $e) {\n$this->error('User not found');\nreturn null;\n}\n}", "CodeBleu_score": 43.94898396406979}]}
{"instance_id": "be798cf5bfac", "generation_result": [{"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && $this->option('flush')) {\n$this->artisan('\u2610 Flushing indexes on Meilisearch','scout:flush-index', ['--verbose' => true]);\n}\n}", "CodeBleu_score": 20.93797752004542}, {"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && $this->option('flush')) {\nforeach (config('scout.meilisearch.index_settings') as $index => $settings) {\n$tableName = $settings['table_name']?? '';\n$this->artisan(\"\u2610 Flushing index $index on Meilisearch\",'scout:flush', ['--index' => $index, '--table-name' => $tableName, '--verbose' => true]);\n}\n$this->info('\u2705 Indexes flushed.');\n}\n}", "CodeBleu_score": 54.30717328448706}, {"code": "<?\nprotected function scoutFlush(): void{\n\tonfig('scout.driver') ==='meilisearch' && $this->option('flush')) {\n$indexSettings = config('scout.meilisearch.index_settings');\n\nforeach ($indexSettings as $index => $settings) {\n$tableName = $settings['table_name']?? Str::plural(Str::snake(Str::beforeLast($index, 'Index')));\n\n$this->artisan(\"\u2610 Flushing $index index\",'scout:flush', [\n'--model' => $tableName,\n'--verbose' => true,\n]);\n}\n\n$this->info('Indexes flushed!');\n}\n}", "CodeBleu_score": 53.26904448366396}]}
{"instance_id": "23739c76cbbb", "generation_result": [{"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t = $this->readVCard($resource)?: $this->createVCard($resource);\n\n$this->applyExporters($resource, $vcard);\n\nreturn $vcard;\n}", "CodeBleu_score": 11.475740463376034}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\td = $this->readVCard($resource);\n\n\tif (!$vcard) {\n\t\t$vcard = $this->createVCard($resource);\n\t}\n\n\t$this->getExporters()->each(function (ExportVCardResource $exporter) use ($vcard, $resource): void {\n\t\t$exporter->export($vcard, $resource);\n\t});\n\n\treturn $vcard;\n}", "CodeBleu_score": 17.62765816352324}, {"code": "<?\nprivate function export(VCardResource $resource): VCard{\n\t = null;\n\ntry {\n$vcard = Reader::read($resource->vcard);\n} catch (ParseException $e) {\n// Ignore the exception and create a new VCard\n}\n\nif (!$vcard) {\n$vcard = new VCard();\n$vcard->add('uid', $resource->id);\n}\n\n$this->applyExporters($resource, $vcard);\n\nreturn $vcard;\n}", "CodeBleu_score": 23.547859511303898}]}
{"instance_id": "0dec6c937508", "generation_result": [{"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$vault = $this->user->vaults()\n->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n->findOrFail($addressBookId);\n\n$object = $this->getObject($addressBookId, $cardUri);\n\nif ($object instanceof Contact) {\n$job = new DestroyContact(['account_id' => $this->user->account_id, 'author_id' => $this->user->id, 'vault_id' => $vault->id, 'id' => $object->id]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n} elseif ($object instanceof Group) {\n$job = new DestroyGroup(['account_id' => $this->user->account_id, 'author_id' => $this->user->id, 'vault_id' => $vault->id, 'id' => $object->id]);\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n} else {\nreturn false;\n}\n\nreturn true;\n}", "CodeBleu_score": 57.262333693904985}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t\t$object = $this->getObject($addressBookId, $cardUri);\n\n\tif ($object instanceof Contact) {\n\t\t$job = new DestroyContact(['contact_id' => $object->id]);\n\t\tBus::batch([$job])\n\t\t\t->allowFailures()\n\t\t\t->onQueue('high')\n\t\t\t->dispatch();\n\t} elseif ($object instanceof Group) {\n\t\t$job = new DestroyGroup(['group_id' => $object->id]);\n\t\tBus::batch([$job])\n\t\t\t->allowFailures()\n\t\t\t->onQueue('high')\n\t\t\t->dispatch();\n\t} else {\n\t\treturn false;\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 47.295172376754046}, {"code": "<?\npublic function deleteCard($addressBookId, $cardUri): bool{\n\t$vault = $this->user->vaults()\n->wherePivot('permission', '<=', Vault::PERMISSION_EDIT)\n->findOrFail($addressBookId);\n\n$object = $this->getObject($addressBookId, $cardUri);\n\nif ($object === null) {\nreturn false;\n}\n\nif ($object instanceof Contact) {\n$job = new DestroyContact([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'id' => $object->id,\n]);\n} elseif ($object instanceof Group) {\n$job = new DestroyGroup([\n'account_id' => $this->user->account_id,\n'author_id' => $this->user->id,\n'vault_id' => $vault->id,\n'id' => $object->id,\n]);\n} else {\nreturn false;\n}\n\nBus::batch([$job])\n->allowFailures()\n->onQueue('high')\n->dispatch();\n\nreturn true;\n}", "CodeBleu_score": 58.9160291061263}]}
{"instance_id": "c3389c1494d9", "generation_result": [{"code": "<?\npublic function upload(array $data){\n\t\tif (!request()->hasFile('file')) {\n\t\treturn;\n\t}\n\n\t$activity = $this->activityRepository->create([\n\t\t'user_id' => auth()->user()->id,\n\t\t'lead_id' => $data['lead_id'],\n\t\t'type' => 'file',\n\t\t'content' => $data['content'],\n\t]);\n\n\t$file = request()->file('file');\n\t$file->storeAs('public/leads', $file->hashName());\n\n\treturn $this->create([\n\t\t'activity_id' => $activity->id,\n\t\t'name' => $file->getClientOriginalName(),\n\t\t'path' => $file->hashName(),\n\t]);\n}", "CodeBleu_score": 53.109153249828644}, {"code": "<?\npublic function upload(array $data){\n\tif (!isset($data['file'])) {\nreturn;\n}\n\n$activity = $this->activityRepository->create([\n'type' => 'file',\n'user_id' => auth()->user()->id,\n'lead_id' => $data['lead_id'],\n'content' => $data['file']->getClientOriginalName(),\n]);\n\n$file = $this->create([\n'activity_id' => $activity->id,\n'name' => $data['file']->getClientOriginalName(),\n'path' => $data['file']->store('activity-files'),\n]);\n\nreturn $file;\n}", "CodeBleu_score": 51.400424672481684}, {"code": "<?\npublic function upload(array $data){\n\tif (! request()->hasFile('file')) {\nreturn;\n}\n\n$activity = $this->activityRepository->create([\n'user_id' => auth()->user()->id,\n'type' => 'lead',\n'type_id' => $data['lead_id'],\n'action' => 'file_uploaded',\n'description' => trans('activity::app.file.file-uploaded'),\n]);\n\n$file = request()->file('file');\n\n$file->storeAs('lead', $file->getClientOriginalName());\n\nreturn $this->create([\n'activity_id' => $activity->id,\n'file_name' => $file->getClientOriginalName(),\n'file_path' => $file->getRealPath(),\n]);\n}", "CodeBleu_score": 56.872843790995816}]}
{"instance_id": "093cfe71d543", "generation_result": [{"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\tif ($exception instanceof ModelNotFoundException) {\n\t\treturn redirect()->route('admin.session.create')->with('status', 'error')->with('message', $this->jsonErrorMessages[404]);\n\t}\n\n\tif ($exception instanceof PDOException) {\n\t\treturn redirect()->route('admin.session.create')->with('status', 'error')->with('message', $this->jsonErrorMessages[500]);\n\t}\n\n\tif ($exception instanceof ParseError) {\n\t\treturn redirect()->route('admin.session.create')->with('status', 'error')->with('message', $this->jsonErrorMessages[500]);\n\t}\n\n\tif ($exception instanceof HttpException) {\n\t\t$statusCode = $exception->getStatusCode();\n\n\t\tif ($statusCode == 404) {\n\t\t\treturn redirect()->route('admin.session.create')->with('status', 'error')->with('message', $this->jsonErrorMessages[404]);\n\t\t}\n\n\t\tif ($statusCode == 403) {\n\t\t\treturn redirect()->route('admin.session.create')->with('status', 'error')->with('message', $this->jsonErrorMessages[403]);\n\t\t}\n\n\t\treturn redirect()->route('admin.session.create')->with('status', 'error')->with('message', $this->jsonErrorMessages[500]);\n\t}\n\n\treturn redirect()->route('admin.session.create')->with('status', 'error')->with('message', $this->jsonErrorMessages[500]);\n}", "CodeBleu_score": 31.958332558141038}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\tif (strpos(request()->route()->getName(), 'admin')!== false) {\nif ($exception instanceof HttpException) {\n$statusCode = $exception->getStatusCode();\n\nif (in_array($statusCode, [404, 403, 401, 500])) {\nreturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n}\n} elseif ($exception instanceof ModelNotFoundException) {\nreturn response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n} elseif ($exception instanceof PDOException) {\nreturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n} elseif ($exception instanceof ParseError) {\nreturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n}\n} elseif (strpos(request()->route()->getName(), 'customer')!== false) {\nreturn redirect()->route('admin.session.create');\n}\n}", "CodeBleu_score": 42.04022764488246}, {"code": "<?\nprivate function renderCustomResponse(Throwable $exception){\n\t\nif ($exception instanceof ModelNotFoundException) {\n\nif (str_contains(request()->route()->uri(), 'admin')) {\n\nreturn redirect()->route('admin.session.create');\n\n} else {\n\nreturn redirect()->route('customer.session.create');\n\n}\n\n}\n\nif ($exception instanceof PDOException) {\n\nreturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n\n}\n\nif ($exception instanceof ParseError) {\n\nreturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n\n}\n\nif ($exception instanceof HttpException) {\n\nif ($exception->getStatusCode() == 404) {\n\nreturn response()->json(['message' => $this->jsonErrorMessages[404]], 404);\n\n}\n\nreturn response()->json(['message' => $this->jsonErrorMessages[500]], 500);\n\n}\n\nreturn parent::render($request, $exception);\n\n}", "CodeBleu_score": 37.47984086551458}]}
{"instance_id": "aea38c568068", "generation_result": [{"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json([\n'message' => $this->jsonErrorMessages[$statusCode]\n], $statusCode);\n}\n\nreturn view(\"{$path}::errors.{$statusCode}\");\n}", "CodeBleu_score": 47.683138596022964}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n}\n\nreturn view(\"{$path}::errors.{$statusCode}\");\n}", "CodeBleu_score": 40.94732815532722}, {"code": "<?\nprivate function response($path, $statusCode){\n\t (request()->expectsJson()) {\nreturn response()->json(['message' => $this->jsonErrorMessages[$statusCode]], $statusCode);\n}\n\nreturn response()->view(\"{$path}::errors.{$statusCode}\", [], $statusCode);\n}", "CodeBleu_score": 60.78179862956837}]}
{"instance_id": "87b4461b73e5", "generation_result": [{"code": "<?\npublic function massUpdate(){\n\t('ids');\n\t$isDone = request('is_done');\n\n\tif (! $ids) {\n\t\treturn response()->json(['message' => trans('admin::app.activities.mass-update-failed')]);\n\t}\n\n\t$updated = 0;\n\n\tforeach ($ids as $id) {\n\t\tEvent::dispatch('activity.mass-update.before', $id);\n\n\t\t$activity = $this->activityRepository->update(['is_done' => $isDone], $id);\n\n\t\tEvent::dispatch('activity.mass-update.after', $activity);\n\n\t\t$updated++;\n\t}\n\n\tif ($updated) {\n\t\treturn response()->json(['message' => trans('admin::app.activities.mass-update-success')]);\n\t} else {\n\t\treturn response()->json(['message' => trans('admin::app.activities.mass-update-failed')]);\n\t}\n}", "CodeBleu_score": 48.067212048329594}, {"code": "<?\npublic function massUpdate(){\n\t event before updating the activities\nEvent::dispatch('activity.massUpdate.before');\n\n// Initialize a variable to count the number of updates\n$count = 0;\n\n// Loop through the specified activity IDs\nforeach (request('ids') as $id) {\n\n// Update the activity's 'is_done' status\n$this->activityRepository->update(['is_done' => request('is_done')], $id);\n\n// Increment the update count\n$count++;\n}\n\n// Dispatch an event after updating the activities\nEvent::dispatch('activity.massUpdate.after');\n\n// Return a JSON response indicating success or failure based on whether any updates were made\nreturn response()->json([\n'success' => $count > 0,\n'message' => trans('admin::app.activities.massUpdate-success', ['count' => $count]),\n]);\n}", "CodeBleu_score": 32.0141241386615}, {"code": "<?\npublic function massUpdate(){\n\th('activity.massUpdate.before');\n\n$updated = 0;\n\nforeach (request('ids') as $id) {\n$activity = $this->activityRepository->findOrFail($id);\n\n$activity->update([\n'is_done' => request('is_done'),\n]);\n\nEvent::dispatch('activity.massUpdate.after', $activity);\n\n$updated++;\n}\n\nif ($updated) {\nreturn response()->json([\n'message' => trans('admin::app.activities.update-success', ['type' => trans('admin::app.activities.'. request('type'))]),\n]);\n} else {\nreturn response()->json([\n'message' => trans('admin::app.activities.update-failed', ['type' => trans('admin::app.activities.'. request('type'))]),\n]);\n}\n}", "CodeBleu_score": 47.45437664694583}]}
{"instance_id": "b0c21bc826a6", "generation_result": [{"code": "<?\n public function massDestroy(){\n\t $count = 0;\n foreach (request('rows') as $activityId) {\n Event::dispatch('activity.delete.before', $activityId);\n $this->activityRepository->delete($activityId);\n Event::dispatch('activity.delete.after', $activityId);\n $count++;\n }\n if (!$count) {\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n ], 400);\n }\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n ]);\n }", "CodeBleu_score": 52.143670076363236}, {"code": "<?\n public function massDestroy(){\n\t $count = 0;\n\n foreach (request('rows') as $activityId) {\n Event::dispatch('activity.delete.before', $activityId);\n\n $this->activityRepository->delete($activityId);\n\n Event::dispatch('activity.delete.after', $activityId);\n\n $count++;\n }\n\n if (!$count) {\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n ], 400);\n }\n\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n ]);\n }", "CodeBleu_score": 52.143670076363236}, {"code": "<?\n public function massDestroy(){\n\t $count = 0;\n\n foreach (request('rows') as $activityId) {\n Event::dispatch('activity.delete.before', $activityId);\n\n $this->activityRepository->delete($activityId);\n\n Event::dispatch('activity.delete.after', $activityId);\n\n $count++;\n }\n\n if (!$count) {\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-failed'),\n ], 400);\n }\n\n return response()->json([\n'message' => trans('admin::app.activities.mass-destroy-success'),\n ]);\n }", "CodeBleu_score": 52.143670076363236}]}
{"instance_id": "d3e901b3af67", "generation_result": [{"code": "<?\n public function updateCards(){\n\trds = $this->dashboardHelper->getCards();\n\nif (request()->has('cards')) {\n $selectedCards = request('cards');\n\n foreach ($cards as &$card) {\n if (in_array($card['key'], $selectedCards)) {\n $card['selected'] = true;\n }\n }\n}\n\nreturn response()->json($cards);\n}", "CodeBleu_score": 30.191296202309292}, {"code": "<?\n public function updateCards(){\n\trds = $this->dashboardHelper->getCards();\n $requestData = request()->all();\n\nforeach ($requestData as $card) {\nforeach ($cards as $key => $value) {\nif ($card['slug'] == $value['slug']) {\n$cards[$key]['selected'] = $card['selected'];\n}\n}\n}\n\nreturn response()->json($cards);\n}", "CodeBleu_score": 42.54900334674133}, {"code": "<?\n public function updateCards(){\n\trds = $this->dashboardHelper->getCards();\n\n foreach (request('cards') as $card) {\n foreach ($cards as &$currentCard) {\n if ($currentCard['key'] == $card['key']) {\n $currentCard['selected'] = $card['selected'];\n }\n }\n }\n\n return response()->json($cards);\n }", "CodeBleu_score": 31.034506468573937}]}
{"instance_id": "f63e0f8906b4", "generation_result": [{"code": "<?\npublic function store(){\n\t\t$requestData = request()->all();\n\n\tif (isset($requestData['logo'])) {\n\t\t$requestData['logo'] = $this->uploadFile($requestData['logo']);\n\t}\n\n\tif (isset($requestData['favicon'])) {\n\t\t$requestData['favicon'] = $this->uploadFile($requestData['favicon']);\n\t}\n\n\tEvent::dispatch('core.admin.configuration.create.before');\n\n\t$this->configurationRepository->create($requestData);\n\n\tEvent::dispatch('core.admin.configuration.create.after');\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 31.782896155066727}, {"code": "<?\npublic function store(){\n\t\tEvent::dispatch('configuration.create.before');\n\n\t$this->configurationRepository->create(request()->all());\n\n\tEvent::dispatch('configuration.create.after');\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 43.110881709894066}, {"code": "<?\npublic function store(){\n\t\t$request = request();\n\n\tEvent::dispatch('admin.configuration.create.before');\n\n\t$configuration = $this->configurationRepository->create(array_merge($request->all(), ['code' => Code::CONFIGURATION]));\n\n\tEvent::dispatch('admin.configuration.create.after', $configuration);\n\n\tsession()->flash('success', trans('admin::app.response.create-success', ['name' => 'Configuration']));\n\n\treturn redirect()->back();\n}", "CodeBleu_score": 35.180099366914504}]}
{"instance_id": "bcf54c41a921", "generation_result": [{"code": "<?\npublic function download(){\n\t\t$filePath = request()->get('file_path');\n\t$fileName = request()->get('file_name');\n\t$config = $this->configurationRepository->findOneWhere([\n\t\t'code' => $fileName,\n\t\t'channel_id' => core()->getCurrentChannel()->id,\n\t\t'scope' => 'default',\n\t]);\n\n\treturn Storage::download($filePath, $config->value);\n}", "CodeBleu_score": 44.14795418730995}, {"code": "<?\npublic function download(){\n\t\t$filePath = request()->get('file_path');\n\t$fileName = request()->get('file_name');\n\t$config = $this->configurationRepository->findOneByField('key', $filePath);\n\n\treturn response()->download(Storage::path($config->value. '/'. $fileName));\n}", "CodeBleu_score": 45.27582290618986}, {"code": "<?\npublic function download(){\n\t\t$path = request()->get('path');\n\t$fileName = request()->get('file');\n\t$configuration = $this->configurationRepository->findOneByField('code', $path);\n\n\tif (! $configuration) {\n\t\treturn;\n\t}\n\n\treturn response()->download(Storage::path($configuration->value));\n}", "CodeBleu_score": 44.55039732282208}]}
{"instance_id": "1fbf002ce3db", "generation_result": [{"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> adminModelSorts = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setType(1);\nadminModelSort.setModel(model);\nadminModelSort.setUserId(UserUtil.getUserId());\nadminModelSorts.add(adminModelSort);\n}\nadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\nadminModelSortService.saveBatch(adminModelSorts);\nreturn Result.ok();\n}", "CodeBleu_score": 47.69040957993449}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> adminModelSortList = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setUserId(UserUtil.getUserId());\nadminModelSort.setType(1);\nadminModelSort.setModel(model);\nadminModelSortList.add(adminModelSort);\n}\nadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\nadminModelSortService.saveBatch(adminModelSortList);\nreturn Result.ok();\n}", "CodeBleu_score": 48.31435331152337}, {"code": "public Result setHeaderModelSort(@RequestBody List<String> list) {\n\tt<AdminModelSort> adminModelSorts = new ArrayList<>();\nfor (String model : list) {\nAdminModelSort adminModelSort = new AdminModelSort();\nadminModelSort.setModel(model);\nadminModelSort.setType(1);\nadminModelSort.setUserId(UserUtil.getUserId());\nadminModelSorts.add(adminModelSort);\n}\nadminModelSortService.remove(new LambdaQueryWrapper<AdminModelSort>().eq(AdminModelSort::getUserId, UserUtil.getUserId()).eq(AdminModelSort::getType, 1));\nadminModelSortService.saveBatch(adminModelSorts);\nreturn Result.ok();\n}", "CodeBleu_score": 47.69040957993449}]}
{"instance_id": "d51385d0c4fb", "generation_result": [{"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tminConfig adminConfig = adminConfigService.getById(moduleSetting.getSettingId());\n\tif (adminConfig.getSettingId().equals(AdminConst.CRM_SETTING_ID)) {\n\t\treturn Result.fail(AdminCodeEnum.CRM_SETTING_CAN_NOT_UPDATE);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.updateById(adminConfig);\n\treturn Result.ok();\n}", "CodeBleu_score": 61.703330861916264}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\t (moduleSetting.getId() == null) {\n\t\treturn R.error(AdminCodeEnum.MODULE_SETTING_ID_NOT_NULL);\n\t}\n\tAdminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (adminConfig == null) {\n\t\treturn R.error(AdminCodeEnum.MODULE_SETTING_NOT_EXIST);\n\t}\n\tif (AdminModuleEnum.CRM.getValue().equals(adminConfig.getModule())) {\n\t\treturn R.error(AdminCodeEnum.CRM_MODULE_CAN_NOT_UPDATE);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.updateById(adminConfig);\n\treturn R.ok();\n}", "CodeBleu_score": 59.921829878587275}, {"code": "public Result setModuleSetting(@Valid @RequestBody ModuleSettingBO moduleSetting){\n\tminConfig adminConfig = adminConfigService.getById(moduleSetting.getId());\n\tif (adminConfig.getSettingId().equals(AdminModuleEnum.CRM.getSettingId())) {\n\t\treturn R.error(AdminCodeEnum.CRM_MODULE_CANNOT_BE_DISABLED);\n\t}\n\tadminConfig.setStatus(moduleSetting.getStatus());\n\tadminConfigService.updateById(adminConfig);\n\treturn R.ok();\n}", "CodeBleu_score": 57.97173964453876}]}
{"instance_id": "38d2abda3119", "generation_result": [{"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\t\tAdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\n\tif (userConfig == null) {\n\t\tuserConfig = new AdminUserConfig();\n\t\tuserConfig.setUserId(UserUtil.getUserId());\n\t\tuserConfig.setName(customKey);\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tadminUserConfigService.save(userConfig);\n\t} else {\n\t\tuserConfig.setValue(json.toJSONString());\n\t\tadminUserConfigService.updateById(userConfig);\n\t}\n\treturn Result.ok();\n}", "CodeBleu_score": 71.94361160512987}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tAdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\nif (userConfig == null) {\nuserConfig = new AdminUserConfig();\nuserConfig.setName(customKey).setValue(json.toJSONString()).setUserId(UserUtil.getUserId());\nadminUserConfigService.save(userConfig);\n} else {\nuserConfig.setValue(json.toJSONString());\nadminUserConfigService.updateById(userConfig);\n}\nreturn Result.ok();\n}", "CodeBleu_score": 66.41230361623491}, {"code": " public Result queryCustomSetting(@RequestBody JSONArray json,@PathVariable(\"customKey\") String customKey) {\n\tAdminUserConfig userConfig = adminUserConfigService.queryUserConfigByName(customKey);\nif (userConfig == null) {\nuserConfig = new AdminUserConfig();\nuserConfig.setUserId(UserUtil.getUserId()).setCustomKey(customKey).setValue(json.toJSONString());\nadminUserConfigService.save(userConfig);\n} else {\nuserConfig.setValue(json.toJSONString());\nadminUserConfigService.updateById(userConfig);\n}\nreturn Result.ok();\n}", "CodeBleu_score": 66.34063447449239}]}
{"instance_id": "d3605bc2f5f9", "generation_result": [{"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tString deptName = deptService.getNameByDeptId(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setPassword();\n\tuser.setSalt(null);\n\treturn R.ok(user);\n}", "CodeBleu_score": 50.64748056029285}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (user == null) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n\t}\n\tString deptName = deptService.getNameByDeptId(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setSalt(null);\n\tuser.setPassword();\n\treturn R.ok(user);\n}", "CodeBleu_score": 51.79132279285932}, {"code": "public Result<AdminUser> queryUserInfo(@RequestParam(\"userId\") Long userId) {\n\t\tAdminUser user = adminUserService.getById(userId);\n\tif (user == null) {\n\t\treturn R.error(AdminCodeEnum.ADMIN_USER_NOT_EXIST);\n\t}\n\tString deptName = deptService.getNameByDeptId(user.getDeptId());\n\tuser.setDeptName(deptName);\n\tuser.setPassword();\n\tuser.setSalt(null);\n\treturn R.ok(user);\n}", "CodeBleu_score": 51.79132279285932}]}
{"instance_id": "eec7f492f5f4", "generation_result": [{"code": " public Result readNotice() {\n\t Long userId = UserUtil.getUserId();\n List<AdminUserConfig> userConfigs = adminUserConfigService.queryUserConfigList(userId, \"readNotice\");\n if (userConfigs.size() > 1) {\n adminUserConfigService.updateUserConfigStatus(userId, \"readNotice\", 1);\n } else {\n AdminUserConfig config = new AdminUserConfig();\n config.setUserId(userId);\n config.setName(\"readNotice\");\n config.setStatus(1);\n adminUserConfigService.save(config);\n }\n return R.ok();\n }", "CodeBleu_score": 37.77008907328133}, {"code": " public Result readNotice() {\n\t//        String name = \"readNotice\";\n//        AdminUser user = adminUserService.getById(UserUtil.getUserId());\n//        if (user == null) {\n//            throw new NoLoginException();\n//        }\n//        List<AdminUserConfig> userConfigs = adminUserConfigService.queryUserConfig(user.getUserId(), name);\n//        if (userConfigs.size() > 1) {\n//            adminUserConfigService.updateUserConfig(userConfigs.get(0).getId(), 1);\n//        } else {\n//            AdminUserConfig config = new AdminUserConfig();\n//            config.setUserId(user.getUserId());\n//            config.setName(name);\n//            config.setStatus(1);\n//            adminUserConfigService.save(config);\n//        }\n//        return R.ok();\n    }", "CodeBleu_score": 0.8375966930517764}, {"code": " public Result readNotice() {\n\t\tLong userId = UserUtil.getUserId();\n\tList<AdminUserConfig> adminUserConfigs = adminUserConfigService.queryUserConfigByNameAndUserId(\"readNotice\", userId);\n\tif (adminUserConfigs.size() > 1) {\n\t\tadminUserConfigs.forEach(adminUserConfig -> {\n\t\t\tadminUserConfig.setStatus(1);\n\t\t\tadminUserConfigService.updateById(adminUserConfig);\n\t\t});\n\t} else {\n\t\tAdminUserConfig adminUserConfig = new AdminUserConfig();\n\t\tadminUserConfig.setName(\"readNotice\");\n\t\tadminUserConfig.setStatus(1);\n\t\tadminUserConfig.setUserId(userId);\n\t\tadminUserConfigService.save(adminUserConfig);\n\t}\n\treturn R.ok();\n}", "CodeBleu_score": 44.7542153070305}]}
{"instance_id": "bb4f6d7099ab", "generation_result": [{"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(\"companyInfo\");\n\t\tadminConfig.setCompanyId(BaseUtil.getLoginUser().getCompanyId());\n\t\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tsave(adminConfig);\n\t} else {\n\t\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\t\tupdateById(adminConfig);\n\t}\n}", "CodeBleu_score": 52.37059274068907}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t//        AdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n//        if (adminConfig == null) {\n//            adminConfig = new AdminConfig();\n//            adminConfig.setName(\"companyInfo\");\n//            adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n//            adminConfig.setCompanyId(UserUtil.getCompanyId());\n//            save(adminConfig);\n//        } else {\n//            adminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n//            updateById(adminConfig);\n//        }\n}", "CodeBleu_score": 1.7832668431601406}, {"code": "public void setAdminConfig(AdminCompanyBO adminCompanyBO){\n\t\tAdminConfig adminConfig = query().eq(\"name\", \"companyInfo\").one();\n\tif (adminConfig == null) {\n\t\tadminConfig = new AdminConfig();\n\t\tadminConfig.setName(\"companyInfo\");\n\t\tadminConfig.setCompanyId(UserUtil.getCompanyId());\n\t\tadminConfig.setCreateUserId(UserUtil.getUserId());\n\t\tadminConfig.setCreateUserName(UserUtil.getUserName());\n\t}\n\tadminConfig.setValue(JSON.toJSONString(adminCompanyBO));\n\tsaveOrUpdate(adminConfig);\n}", "CodeBleu_score": 54.8514190995618}]}
{"instance_id": "7a8c61774b82", "generation_result": [{"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\nAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\nif (adminConfig == null) {\nreturn new AdminCompanyBO();\n}\nreturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 60.618532143580374}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\nAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\nif (adminConfig == null) {\nreturn new AdminCompanyBO();\n}\nreturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 60.618532143580374}, {"code": "public AdminCompanyBO queryAdminConfig(){\n\tString companyKey = \"companyInfo\";\nAdminConfig adminConfig = lambdaQuery().eq(AdminConfig::getName, companyKey).last(\" limit 1\").one();\nif (adminConfig == null) {\nreturn new AdminCompanyBO();\n}\nreturn JSON.parseObject(adminConfig.getValue(), AdminCompanyBO.class);\n}", "CodeBleu_score": 60.618532143580374}]}
{"instance_id": "61e79dab4156", "generation_result": [{"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tAdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(logConfigName);\n adminConfig.setStatus(1);\n adminConfig.setDescription(\"\u65e5\u5fd7\u6b22\u8fce\u8bed\");\n adminConfig.setValue(JSON.toJSONString(stringList));\n removeByMap(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n saveBatch(stringList.stream().map(str -> {\n adminConfig.setConfigId(null);\n adminConfig.setSettingId(null);\n adminConfig.setValue(str);\n return adminConfig;\n }).collect(Collectors.toList()));\n }", "CodeBleu_score": 34.31014908128968}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n for (String string : stringList) {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(logConfigName);\n adminConfig.setValue(string);\n adminConfig.setStatus(1);\n adminConfig.setDescription(\"\u65e5\u5fd7\u6b22\u8fce\u8bed\");\n adminConfigList.add(adminConfig);\n }\n remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n saveBatch(adminConfigList);\n }", "CodeBleu_score": 47.45725130918142}, {"code": " public void setLogWelcomeSpeech(List<String> stringList){\n\tList<AdminConfig> adminConfigList = new ArrayList<>();\n for (String s : stringList) {\n AdminConfig adminConfig = new AdminConfig();\n adminConfig.setName(logConfigName);\n adminConfig.setValue(s);\n adminConfig.setStatus(1);\n adminConfigList.add(adminConfig);\n }\n remove(new QueryWrapper<AdminConfig>().eq(\"name\", logConfigName));\n saveBatch(adminConfigList);\n }", "CodeBleu_score": 47.151146460852175}]}
{"instance_id": "08475b0afb35", "generation_result": [{"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t// Get the current user ID and user details\n\tLong userId = SecurityUtils.getLoginUserId();\n\tAdminUser adminUser = adminUserService.getById(userId);\n\n\t// Check the provided password against the stored password using the username and salt\n\tString password = adminInitDataBO.getPassword();\n\tString salt = adminUser.getSalt();\n\tString username = adminUser.getUsername();\n\tString storedPassword = PasswordUtils.encryptPassword(username, password, salt);\n\tif (!storedPassword.equals(adminUser.getPassword())) {\n\t\tthrow new BaseException(AdminExceptionEnum.INVALID_PASSWORD);\n\t}\n\n\t// Generate a temporary access code and store it in Redis with a 10-minute expiration\n\tString accessCode = UUID.randomUUID().toString();\n\tredisTemplate.opsForValue().set(AdminConst.ACCESS_CODE_KEY + userId, accessCode, 10, TimeUnit.MINUTES);\n\n\treturn accessCode;\n}", "CodeBleu_score": 44.18674629632418}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t// Retrieve the current user ID and user details\nString userId = SecurityUtils.getUserId();\nAdminUser adminUser = adminUserService.getById(userId);\n// Check the provided password against the stored password using the username and salt\nString password = ();\nString username = adminUser.getUsername();\nString salt = adminUser.getSalt();\nString storedPassword = PasswordUtil.encrypt(username, password, salt);\nif (!storedPassword.equals(adminUser.getPassword())) {\nthrow new BizException(ErrorCodeEnum.INVALID_PASSWORD);\n}\n// Generate a temporary access code and store it in Redis with a 10-minute expiration\nString accessCode = UUID.randomUUID().toString();\nredisService.set(RedisKey.ACCESS_CODE + userId, accessCode, 600);\n// Return the access code\nreturn accessCode;\n}", "CodeBleu_score": 40.82287089039316}, {"code": "public String verifyPassword(AdminInitDataBO adminInitDataBO){\n\t\t// Get the current user ID and user details\n\tLong userId = AdminThreadLocal.getUserId();\n\tAdminUserVO adminUserVO = adminUserService.queryUserById(userId);\n\t// Check the provided password against the stored password using the username and salt\n\tString password = ();\n\tString salt = adminUserVO.getSalt();\n\tString username = adminUserVO.getUsername();\n\tif (!PasswordUtil.verify(password, salt, username)) {\n\t\tthrow new AdminException(AdminExceptionEnum.PASSWORD_ERROR);\n\t}\n\t// Generate a temporary access code, store it in Redis with a 10-minute expiration, and return the code\n\tString code = UUID.randomUUID().toString();\n\tString key = RedisKeyUtil.getAdminInitDataKey(userId);\n\tredisUtil.set(key, code, 600);\n\treturn code;\n}", "CodeBleu_score": 38.58115551266893}]}
{"instance_id": "9ec6e4941174", "generation_result": [{"code": "private boolean verifyInitAuth(){\n\tLong userId = UserUtil.getUserId();\nString key = AdminCacheKey.UNAUTHORIZED_MENU_URL_CACHE_KEY + userId;\nList<String> unauthorizedMenuUrlList = BaseUtil.getRedis().getList(key);\nif (CollUtil.isNotEmpty(unauthorizedMenuUrlList) && unauthorizedMenuUrlList.contains(INIT_AUTH_URL)) {\nreturn true;\n}\nreturn false;\n}", "CodeBleu_score": 49.67739069440273}, {"code": "private boolean verifyInitAuth(){\n\tLong userId = UserUtil.getUserId();\nString key = AdminCacheKey.UNAUTHORIZED_MENU_CACHE_KEY + userId;\nList<String> unauthorizedMenuList = BaseUtil.getRedis().lGet(key, 0, -1);\nif (CollUtil.isNotEmpty(unauthorizedMenuList)) {\nreturn unauthorizedMenuList.contains(INIT_AUTH_URL);\n}\nreturn false;\n}", "CodeBleu_score": 48.412201854775255}, {"code": "private boolean verifyInitAuth(){\n\tLong userId = UserUtil.getUserId();\nString key = AdminCacheKey.UNAUTHORIZED_MENU_URL_CACHE_KEY + userId;\nList<String> urlList = BaseUtil.getRedis().getList(key, String.class);\nif (CollUtil.isNotEmpty(urlList)) {\nreturn urlList.contains(INIT_AUTH_URL);\n}\nreturn false;\n}", "CodeBleu_score": 48.047148585838194}]}
{"instance_id": "5a248de33a20", "generation_result": [{"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> roleMenuList = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu roleMenu = new AdminRoleMenu();\nroleMenu.setRoleId(roleId);\nroleMenu.setMenuId(menuId);\nroleMenuList.add(roleMenu);\n}\nif (roleMenuList.size() > 0) {\nsaveBatch(roleMenuList);\n}\n}", "CodeBleu_score": 53.8689346119503}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\nadminRoleMenu.setRoleId(roleId);\nadminRoleMenu.setMenuId(menuId);\nlist.add(adminRoleMenu);\n}\nsaveBatch(list);\n}", "CodeBleu_score": 59.10904923569122}, {"code": "public void saveRoleMenu(Integer roleId, List<Integer> menuIdList){\n\tList<AdminRoleMenu> list = new ArrayList<>();\nfor (Integer menuId : menuIdList) {\nAdminRoleMenu adminRoleMenu = new AdminRoleMenu();\nadminRoleMenu.setRoleId(roleId);\nadminRoleMenu.setMenuId(menuId);\nlist.add(adminRoleMenu);\n}\nsaveBatch(list);\n}", "CodeBleu_score": 59.10904923569122}]}
{"instance_id": "a550a6fea46c", "generation_result": [{"code": "public void saveSysLog(SysLog sysLog) {\n\tString index = getIndexAliases(SYS_LOG_TYPE);\nMap<String, Object> map = BeanUtil.beanToMap(sysLog);\nmap.put(\"createTime\", DateUtil.format(sysLog.getCreateTime(), \"yyyy-MM-dd HH:mm:ss\"));\nmap.remove(\"id\");\nIndexRequest request = new IndexRequest(index);\nrequest.source(map);\ntry {\nIndexResponse indexResponse = restHighLevelClient.index(request, RequestOptions.DEFAULT);\nlog.info(\"save sys log success: \" + indexResponse.toString());\n} catch (IOException e) {\nlog.error(\"save sys log error: \" + e.getMessage());\n}\n}", "CodeBleu_score": 49.22237510798908}, {"code": "public void saveSysLog(SysLog sysLog) {\n\tString indexAliases = getIndexAliases(SYS_LOG_TYPE);\nMap<String, Object> sysLogMap = BeanUtil.beanToMap(sysLog);\nString createTime = sysLogMap.get(\"createTime\").toString();\nsysLogMap.put(\"createTime\", createTime);\nsysLogMap.remove(\"id\");\nIndexRequest indexRequest = new IndexRequest(indexAliases);\nindexRequest.source(sysLogMap);\ntry {\n\nrestHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n} catch (IOException e) {\n\nlog.error(e.getMessage());\n}\n}", "CodeBleu_score": 45.8372732815295}, {"code": "public void saveSysLog(SysLog sysLog) {\n\t\nString index = getIndexAliases(SYS_LOG_TYPE);\n\nMap<String, Object> map = BeanUtil.beanToMap(sysLog);\n\nString createTime = DateUtil.formatDateTime(sysLog.getCreateTime());\n\nmap.put(\"createTime\", createTime);\n\nmap.remove(\"id\");\n\nIndexRequest indexRequest = new IndexRequest(index);\n\nindexRequest.source(map);\n\ntry {\n\nIndexResponse indexResponse = restHighLevelClient.index(indexRequest, RequestOptions.DEFAULT);\n\nlog.info(indexResponse.toString());\n\n} catch (IOException e) {\n\nlog.error(e.getMessage());\n\n}\n\n}", "CodeBleu_score": 52.42704693115412}]}
{"instance_id": "8ba01d193706", "generation_result": [{"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}, {"code": "public BasePage<SysLog> querySysLogPageList(QuerySysLogBO querySysLogBO){\n\t", "CodeBleu_score": 2.165507622947592}]}
{"instance_id": "8a5f123ce19a", "generation_result": [{"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on(\\\"close\\\", () => {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on(\\\"error\\\", (err) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err.message);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 48.94602694602149}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, response => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on(\\\"close\\\", () => resolve());\n\t\t});\n\t\tfile.on(\\\"error\\\", err => {\n\t\t\tfs.unlink(dest, () => reject(err));\n\t\t});\n\t});\n}", "CodeBleu_score": 47.453791053684924}, {"code": "async function downloadFile(url, dest){\n\t\treturn new Promise((resolve, reject) => {\n\t\tconst file = fs.createWriteStream(dest);\n\t\thttps.get(url, (response) => {\n\t\t\tresponse.pipe(file);\n\t\t\tfile.on(\\\"close\\\", () => {\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}).on(\\\"error\\\", (err) => {\n\t\t\tfs.unlink(dest, () => {\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t});\n}", "CodeBleu_score": 52.79388520567216}]}
{"instance_id": "0eb664e65a38", "generation_result": [{"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tyIdIn(Lists.newArrayList(module.getDependentModuleIds()))\n\t\t\t.doOnNext(circularDependencyCheckSet::addAll)\n\t\t\t.expandDeep(m -> getDependentModules(m, circularDependencyCheckSet))\n\t\t\t.onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue, {}\", e.getMessage()));\n}", "CodeBleu_score": 62.32994969613228}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tfromIterable(module.getDependentModules())\n.filter(id ->!circularDependencyCheckSet.contains(id))\n.doOnNext(circularDependencyCheckSet::add)\n.flatMap(id -> findById(id))\n.onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue, {}\", e.getMessage()));\n }", "CodeBleu_score": 66.52080297172871}, {"code": " private Flux<Application> getDependentModules(Application module, Set<String> circularDependencyCheckSet){\n\tfromIterable(module.getDependentModuleIds())\n.filter(id ->!circularDependencyCheckSet.contains(id))\n.doOnNext(circularDependencyCheckSet::add)\n.flatMap(id -> findById(id))\n.onErrorContinue((e, i) -> log.warn(\"get dependent modules on error continue, {}\", e.getMessage()));\n }", "CodeBleu_score": 66.5710389434928}]}
{"instance_id": "e208820f2c7a", "generation_result": [{"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\tr (Map.Entry<?,?> entry : map.entrySet()) {\n\t\tif (entry.getValue() instanceof Map<?,?> mapValue) {\n\t\t\tif (mapValue.containsKey(\"type\") && mapValue.get(\"type\").equals(\"module\") && mapValue.containsKey(\"appId\")) {\n\t\t\t\tString appId = (String) mapValue.get(\"appId\");\n\t\t\t\tif (StringUtils.isNotBlank(appId)) {\n\t\t\t\t\tdependentModuleIds.add(appId);\n\t\t\t\t}\n\t\t\t}\n\t\t\tdoGetDependentModules(mapValue, dependentModuleIds);\n\t\t} else if (entry.getValue() instanceof List<?> listValue) {\n\t\t\tfor (Object listEntry : listValue) {\n\t\t\t\tif (listEntry instanceof Map<?,?> listEntryMap) {\n\t\t\t\t\tdoGetDependentModules(listEntryMap, dependentModuleIds);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.191462442687}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t (Map.Entry<?,?> entry : map.entrySet()) {\nif (entry.getValue() instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) entry.getValue(), dependentModuleIds);\n} else if (entry.getValue() instanceof List<?>) {\nfor (Object listEntry : (List<?>) entry.getValue()) {\nif (listEntry instanceof Map<?,?>) {\ndoGetDependentModules((Map<?,?>) listEntry, dependentModuleIds);\n}\n}\n} else if (entry.getKey().equals(\"type\")) {\nif (entry.getValue().equals(\"module\")) {\nObject appId = map.get(\"appId\");\nif (appId instanceof String) {\nString appIdString = (String) appId;\nif (!StringUtils.isBlank(appIdString)) {\ndependentModuleIds.add(appIdString);\n}\n}\n}\n}\n}\n}", "CodeBleu_score": 27.542806681634467}, {"code": "public static void doGetDependentModules(Map<?, ?> map, Set<String> dependentModuleIds){\n\t (Map.Entry<?,?> entry : map.entrySet()) {\nif (entry.getValue() instanceof Map<?,?> nestedMap) {\ndoGetDependentModules(nestedMap, dependentModuleIds);\n} else if (entry.getValue() instanceof List<?> nestedList) {\nfor (Object nestedListItem : nestedList) {\nif (nestedListItem instanceof Map<?,?> nestedListMap) {\ndoGetDependentModules(nestedListMap, dependentModuleIds);\n}\n}\n} else if (entry.getKey().equals(\"type\") && entry.getValue().equals(\"module\")) {\nObject appId = map.get(\"appId\");\nif (appId!= null && StringUtils.isNotBlank(appId.toString())) {\ndependentModuleIds.add(appId.toString());\n}\n}\n}\n}", "CodeBleu_score": 26.3446783741044}]}
{"instance_id": "4e7e7106fd70", "generation_result": [{"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\tead the image data from the DataBuffer into a BufferedImage\n BufferedImage image = ImageIO.read(dataBuffer.asInputStream());\n // If createThumbnail is true, resize the image to the thumbnail size\n if (createThumbnail) {\n image = resizeImage(image, thumbNailPhotoDimension.get());\n }\n // Set the content type to JPEG\n MediaType contentType = MediaType.IMAGE_JPEG;\n // If not creating a thumbnail, retain the original content type\n if (!createThumbnail) {\n contentType = srcContentType;\n }\n // Convert the BufferedImage to a byte array\n ByteArrayOutputStream baos = new ByteArrayOutputStream();\n ImageIO.write(image, \"jpg\", baos);\n byte[] imageData = baos.toByteArray();\n // Release the DataBuffer\n DataBufferUtils.release(dataBuffer);\n // Create and return a new Asset with the processed image data and content type\n return Asset.builder()\n.contentType(contentType)\n.data(imageData)\n.build();\n }", "CodeBleu_score": 51.336240352738095}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t", "CodeBleu_score": 7.930396959171953}, {"code": " private Asset createAsset(DataBuffer dataBuffer, MediaType srcContentType, boolean createThumbnail) throws IOException {\n\t", "CodeBleu_score": 7.930396959171953}]}
{"instance_id": "e010df09a01e", "generation_result": [{"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\tn getById(assetId)\n.flatMap(asset -> {\nServerHttpResponse response = exchange.getResponse();\nresponse.setStatusCode(HttpStatus.OK);\nif (asset.getContentType()!= null) {\nresponse.getHeaders().setContentType(asset.getContentType());\n}\nreturn response.writeWith(\nFlux.just(DefaultDataBufferFactory.sharedInstance.wrap(asset.getData())));\n});\n}", "CodeBleu_score": 46.29724923829941}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\tn getById(assetId)\n.flatMap(asset -> {\nServerHttpResponse response = exchange.getResponse();\nresponse.setStatusCode(HttpStatus.OK);\nif (asset.getContentType()!= null) {\nresponse.getHeaders().setContentType(asset.getContentType());\n}\nreturn response.writeWith(Mono.just(DefaultDataBufferFactory.sharedInstance.wrap(asset.getData())));\n});\n}", "CodeBleu_score": 46.486753468458176}, {"code": "public Mono<Void> makeImageResponse(ServerWebExchange exchange, String assetId){\n\tn getById(assetId)\n.flatMap(asset -> {\nServerHttpResponse response = exchange.getResponse();\nresponse.setStatusCode(HttpStatus.OK);\nif (asset.getContentType()!= null) {\nresponse.getHeaders().setContentType(asset.getContentType());\n}\nreturn response.writeWith(Mono.just(DefaultDataBufferFactory.sharedInstance.wrap(asset.getData())));\n});\n}", "CodeBleu_score": 46.486753468458176}]}
{"instance_id": "3840d74a3995", "generation_result": [{"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\taceMode.SAAS.equals(commonConfig.getWorkspaceMode())) {\n\t\treturn Flux.empty();\n\t}\n\treturn organizationService.getAllByMode(WorkspaceMode.ENTERPRISE)\n\t\t\t.flatMapIterable(organization -> organization.getAuthConfigs()\n\t\t\t\t\t.stream()\n\t\t\t\t\t.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n\t\t\t\t\t.collect(Collectors.toList())\n\t\t\t);\n}", "CodeBleu_score": 49.8189322569273}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tonfig.getWorkspaceMode() == WorkspaceMode.SAAS) {\nreturn Flux.empty();\n}\nreturn organizationService.findAllByWorkspaceMode(WorkspaceMode.ENTERPRISE)\n.flatMapIterable(organizations -> organizations.stream()\n.flatMap(organization -> organization.getAuthConfigs().stream()\n.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization)))\n.collect(Collectors.toList()));\n}", "CodeBleu_score": 42.079633336476995}, {"code": "protected Flux<FindAuthConfig> findAllAuthConfigsForEnterpriseMode() {\n\tceMode.SAAS.equals(commonConfig.getWorkspaceMode())) {\nreturn Flux.empty();\n}\nreturn organizationService.getAllByMode(WorkspaceMode.ENTERPRISE)\n.flatMapIterable(organization ->\norganization.getAuthConfigs()\n.stream()\n.map(abstractAuthConfig -> new FindAuthConfig(abstractAuthConfig, organization))\n.collect(Collectors.toList())\n);\n}", "CodeBleu_score": 49.398723058514385}]}
{"instance_id": "504ee7326825", "generation_result": [{"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\treturn MongockSpring5.builder()\n.setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n.addChangeLogsScanPackage(\"com.openblocks.infra.db.migrations\")\n.setSpringContext(springContext)\n.buildApplicationRunner();\n}", "CodeBleu_score": 22.39478427222065}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t\t.setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n\t\t\t.addChangeLogsScanPackage(materialProperties.getDb().getChangelogs().getPackage())\n\t\t\t.setSpringContext(springContext)\n\t\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 21.582377566022007}, {"code": "public MongockSpring5.MongockApplicationRunner mongockApplicationRunner(ApplicationContext springContext, MongoTemplate mongoTemplate){\n\t\treturn MongockSpring5.builder()\n\t\t\t.setDriver(SpringDataMongoV3Driver.withDefaultLock(mongoTemplate))\n\t\t\t.addChangeLogsScanPackage(materialProperties.getMongo().getChangelogs())\n\t\t\t.setSpringContext(springContext)\n\t\t\t.buildApplicationRunner();\n}", "CodeBleu_score": 21.317885205131372}]}
{"instance_id": "2c8015b63ee8", "generation_result": [{"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter).withReadPreference(ReadPreference.secondaryPreferred());\n}", "CodeBleu_score": 36.45185460496645}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\tgMongoConverter.setReadPreference(ReadPreference.secondaryPreferred());\nreturn new ReactiveMongoTemplate(mongoDbFactory, mappingMongoConverter);\n}", "CodeBleu_score": 44.22108985327093}, {"code": "public ReactiveMongoTemplate reactiveMongoSlaveTemplate(ReactiveMongoDatabaseFactory mongoDbFactory,\n            MappingMongoConverter mappingMongoConverter){\n\t", "CodeBleu_score": 9.728506787330318}]}
{"instance_id": "7314447a4b23", "generation_result": [{"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\trn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n\t\t\t.map(LibraryQueryRecord::getDsl)\n\t\t\t.switchIfEmpty(getById(libraryQueryId)\n\t\t\t\t\t.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 56.34505341348331}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\tn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 55.88980555700132}, {"code": "public Mono<Map<String, Object>> getLiveDSLByLibraryQueryId(String libraryQueryId){\n\tn libraryQueryRecordService.getLatestRecordByLibraryQueryId(libraryQueryId)\n.map(LibraryQueryRecord::getDsl)\n.switchIfEmpty(getById(libraryQueryId)\n.map(LibraryQuery::getDsl));\n}", "CodeBleu_score": 55.88980555700132}]}
{"instance_id": "101689d9f27a", "generation_result": [{"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t", "CodeBleu_score": 8.95524286354501}, {"code": " public Mono<QueryExecutionResult> executeQuery(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            String timeoutStr, QueryVisitorContext queryVisitorContext){\n\t return Mono.defer(() -> {\n            // Get the datasource connection holder\n            DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource.getId());\n\n            // Determine the timeout duration\n            Duration timeout = QueryTimeoutUtils.getTimeout(timeoutStr, datasource);\n\n            // Execute the query based on the datasource type\n            if (datasource.isRemote()) {\n                return executeQueryRemote(datasource, datasourceConnectionHolder, queryConfig, requestParams, timeout, queryVisitorContext);\n            } else {\n                return executeQueryLocal(datasource, datasourceConnectionHolder, queryConfig, requestParams, timeout, queryVisitorContext);\n            }\n        }).onErrorResume(TimeoutException.class, e -> {\n            // Map timeout exceptions to a plugin exception\n            return Mono.error(ofException(QUERY_EXECUTION_TIMEOUT, e.getMessage()));\n        }).onErrorResume(PluginException.class, e -> {\n            // Resume with an error result for other plugin exceptions\n            return Mono.just(QueryExecutionResult.error(e.getMessage()));\n        }).onErrorResume(e -> {\n            // Log other exceptions and map them to a generic query execution error\n            log.error(\"Error executing query\", e);\n            return Mono.just(QueryExecutionResult.error(QUERY_EXECUTION_ERROR.getMessage()));\n        });\n    }", "CodeBleu_score": 49.241901339830264}]}
{"instance_id": "35960c4bc4c6", "generation_result": [{"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\turn Mono.defer(() -> {\n    QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n           .datasource(datasource)\n           .queryConfig(queryConfig)\n           .requestParams(requestParams)\n           .queryVisitorContext(queryVisitorContext)\n           .build();\n\n    return datasourceConnectionPool.getConnection(datasource)\n           .flatMap(datasourceConnectionHolder -> {\n                QueryExecutor queryExecutor = datasourceMetaInfoService.getQueryExecutor(datasource.getType());\n                return queryExecutor.executeQuery(datasourceConnectionHolder, queryExecutionContext)\n                       .doFinally(s -> datasourceConnectionPool.releaseConnection(datasource, datasourceConnectionHolder));\n            })\n           .onErrorResume(PluginException.class, pluginException -> Mono.just(QueryExecutionResult.error(pluginException)))\n           .onErrorMap(exception -> ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", exception.getMessage()));\n});\n}", "CodeBleu_score": 49.144165302363064}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\turn Mono.defer(() -> {\n\n            QueryExecutionContext queryExecutionContext = new QueryExecutionContext(datasource, queryConfig, requestParams, queryVisitorContext);\n\n            DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.acquire(datasource);\n\n            return datasourcePluginClient.executeQuery(datasourceConnectionHolder, queryExecutionContext)\n\n                   .doFinally(signalType -> datasourceConnectionPool.release(datasourceConnectionHolder))\n\n                   .onErrorResume(PluginException.class, pluginException -> Mono.just(QueryExecutionResult.error(pluginException)));\n\n        });\n\n    }", "CodeBleu_score": 40.192818640155544}, {"code": "private Mono<QueryExecutionResult> executeLocally(Datasource datasource, Map<String, Object> queryConfig, Map<String, Object> requestParams,\n            QueryVisitorContext queryVisitorContext){\n\turn Mono.fromCallable(() -> {\n            QueryExecutionContext queryExecutionContext = QueryExecutionContext.builder()\n                   .datasource(datasource)\n                   .queryConfig(queryConfig)\n                   .requestParams(requestParams)\n                   .queryVisitorContext(queryVisitorContext)\n                   .build();\n\n            try (DatasourceConnectionHolder datasourceConnectionHolder = datasourceConnectionPool.getConnection(datasource.getId())) {\n                return datasourcePluginClient.executeQuery(datasource, datasourceConnectionHolder.getConnection(), queryExecutionContext);\n            } catch (Exception e) {\n                log.error(\"query exception\", e);\n                throw ofException(QUERY_EXECUTION_ERROR, \"QUERY_EXECUTION_ERROR\", e.getMessage());\n            }\n        });\n}", "CodeBleu_score": 45.174613632256865}]}
{"instance_id": "5a915af1d200", "generation_result": [{"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\nif (StringUtils.isBlank(timeoutStr)) {\nreturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n}\n\nPair<Long, String> timeoutPair = extractTimeout(timeoutStr);\nlong timeoutValue = timeoutPair.getLeft();\nString timeoutUnit = timeoutPair.getRight();\n\nif (timeoutValue < 0) {\nthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid timeout value: \" + timeoutStr);\n}\n\nif (timeoutValue > MAX_QUERY_TIMEOUT_SECONDS) {\nthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Timeout exceeds maximum allowed value: \" + timeoutStr);\n}\n\nDuration timeoutDuration = Duration.of(timeoutValue, Duration.parse(timeoutUnit));\n\nif (timeoutDuration.toMillis() > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\nthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Timeout exceeds maximum allowed value: \" + timeoutStr);\n}\n\nreturn (int) timeoutDuration.toMillis();\n}", "CodeBleu_score": 47.64224528283412}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\tif (StringUtils.isBlank(timeoutStr)) {\n            return DEFAULT_QUERY_TIMEOUT_MILLIS;\n        }\n\n        Pair<Long, String> timeoutPair = extractTimeoutValueAndUnit(timeoutStr);\n        if (timeoutPair == null) {\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"Invalid timeout format: \\\" + timeoutStr);\n        }\n\n        long timeoutValue = timeoutPair.getLeft();\n        String timeoutUnit = timeoutPair.getRight();\n\n        if (timeoutValue <= 0) {\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"Invalid timeout value: \\\" + timeoutStr);\n        }\n\n        if (timeoutValue > MAX_QUERY_TIMEOUT_SECONDS) {\n            throw new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \\\"Timeout exceeds the maximum allowed value: \\\" + timeoutStr);\n        }\n\n        if (StringUtils.equalsIgnoreCase(timeoutUnit, \\\"s\\\")) {\n            timeoutValue *= 1000;\n        } else if (StringUtils.equalsIgnoreCase(timeoutUnit, \\\"m\\\")) {\n            timeoutValue *= 60 * 1000;\n        } else if (StringUtils.equalsIgnoreCase(timeoutUnit, \\\"h\\\")) {\n            timeoutValue *= 60 * 60 * 1000;\n        } else {\n            throw new PluginException(QUERY_ARGUMENT_ERROR, \\\"Invalid timeout unit: \\\" + timeoutStr);\n        }\n\n        return (int) timeoutValue;\n    }", "CodeBleu_score": 27.057273575522622}, {"code": "public static int parseQueryTimeoutMs(String timeoutStr){\n\t\tif (StringUtils.isBlank(timeoutStr)) {\n\t\treturn DEFAULT_QUERY_TIMEOUT_MILLIS;\n\t}\n\n\tPair<Integer, String> timeoutPair = extractTimeoutValueAndUnit(timeoutStr);\n\tint timeoutValue = timeoutPair.getLeft();\n\tString timeoutUnit = timeoutPair.getRight();\n\n\tif (timeoutValue <= 0) {\n\t\tthrow new PluginException(QUERY_ARGUMENT_ERROR, \"Invalid query timeout value: \" + timeoutStr);\n\t}\n\n\tint timeoutMs = convertTimeoutToMillis(timeoutValue, timeoutUnit);\n\n\tif (timeoutMs > MAX_QUERY_TIMEOUT_SECONDS * 1000) {\n\t\tthrow new PluginException(EXCEED_MAX_QUERY_TIMEOUT, \"Query timeout exceeds the maximum allowed: \" + timeoutStr);\n\t}\n\n\treturn timeoutMs;\n}", "CodeBleu_score": 41.336451954142525}]}
{"instance_id": "e16ee17a7cb2", "generation_result": [{"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\ttion.getLiveApplicationDsl().getQueries().isEmpty()? deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\")\n        : Flux.fromIterable(application.getLiveApplicationDsl().getQueries())\n               .map(ApplicationQuery::getDatasourceId)\n               .collect(Collectors.toList())\n               .flatMap(datasourceIds -> copyDatasources(currentOrganizationId, datasourceIds, visitorId));\n}", "CodeBleu_score": 29.631471074734193}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tstOrEmpty(application.getLiveApplicationDsl())\n       .switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \"TEMPLATE_NOT_EXIST\"))\n       .flatMapMany(dsl -> Flux.fromIterable(dsl.getQueries()))\n       .map(ApplicationQuery::getDatasourceId)\n       .collectList()\n       .flatMap(datasourceIds -> {\n            if (datasourceIds.isEmpty()) {\n                return deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\");\n            }\n            return Flux.fromIterable(datasourceIds)\n                   .flatMap(datasourceId -> copyDatasource(currentOrganizationId, datasourceId, visitorId))\n                   .collectList();\n        });\n}", "CodeBleu_score": 39.5033544851544}, {"code": "private Mono<List<Pair<String, String>>> copyDatasourceFromTemplateToCurrentOrganization(String currentOrganizationId, Application application,\n            String visitorId){\n\tationService.getLiveQueries(application.getId())\n\t\t\t.switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n\t\t\t.flatMapMany(Flux::fromIterable)\n\t\t\t.map(ApplicationQuery::getDatasourceId)\n\t\t\t.distinct()\n\t\t\t.flatMap(datasourceId -> datasourceService.getById(datasourceId)\n\t\t\t\t\t.switchIfEmpty(deferredError(TEMPLATE_NOT_CORRECT, \"TEMPLATE_NOT_CORRECT\"))\n\t\t\t\t\t.flatMap(datasource -> {\n\t\t\t\t\t\tDatasource copyDatasource = Datasource.builder()\n\t\t\t\t\t\t\t\t.name(datasource.getName())\n\t\t\t\t\t\t\t\t.type(datasource.getType())\n\t\t\t\t\t\t\t\t.organizationId(currentOrganizationId)\n\t\t\t\t\t\t\t\t.creationSource(DatasourceCreationSource.TEMPLATE)\n\t\t\t\t\t\t\t\t.build();\n\t\t\t\t\t\treturn datasourceService.create(copyDatasource, visitorId)\n\t\t\t\t\t\t\t\t.map(copyDatasource1 -> Pair.of(datasource.getId(), copyDatasource1.getId()));\n\t\t\t\t\t}))\n\t\t\t.collectList();\n}", "CodeBleu_score": 44.03942806209202}]}
{"instance_id": "d04a5a2cee44", "generation_result": [{"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\trvice.getById(datasourceId)\n.flatMap(datasource -> {\nif (DatasourceCreationSource.SYSTEM_STATIC.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasourceId);\n} else if (DatasourceCreationSource.LEGACY_REST_API.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasourceId);\n} else if (DatasourceCreationSource.LEGACY_OPENBLOCKS_API.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasourceId);\n} else {\nreturn copyDatasource(organizationId, datasource, visitorId);\n}\n});\n}", "CodeBleu_score": 39.31308542514728}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\trvice.getById(datasourceId)\n.switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \"TEMPLATE_NOT_EXIST\"))\n.map(datasource -> {\nif (DatasourceCreationSource.SYSTEM_STATIC == datasource.getCreationSource()) {\nreturn datasource.getId();\n} else if (DatasourceCreationSource.LEGACY_QUICK_REST_API == datasource.getCreationSource() || DatasourceCreationSource.LEGACY_OPENBLOCKS_API == datasource.getCreationSource()) {\nreturn datasource.getCreationSource().getDatasourceId();\n} else {\nreturn null;\n}\n})\n.filter(datasourceId1 ->!isNull(datasourceId1))\n.switchIfEmpty(datasourceService.getById(datasourceId)\n.switchIfEmpty(deferredError(TEMPLATE_NOT_EXIST, \"TEMPLATE_NOT_EXIST\"))\n.map(datasource -> {\nDatasource newDatasource = Datasource.builder()\n.name(datasource.getName() + \"_copy_\" + RandomStringUtils.randomAlphanumeric(RANDOM_LENGTH))\n.organizationId(organizationId)\n.creationSource(DatasourceCreationSource.TEMPLATE)\n.type(datasource.getType())\n.build();\nreturn datasourceService.create(newDatasource, visitorId);\n})\n.flatMap(datasource -> datasourceService.getById(datasource.getId()))\n.map(Datasource::getId));\n}", "CodeBleu_score": 39.01941918741264}, {"code": "private Mono<String> doCopyDatasource(String organizationId, String datasourceId, String visitorId){\n\trvice.findById(datasourceId)\n.flatMap(datasource -> {\nif (DatasourceCreationSource.SYSTEM_STATIC.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasourceId);\n} else if (DatasourceCreationSource.LEGACY_REST_API.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasourceId);\n} else if (DatasourceCreationSource.LEGACY_OPENBLOCKS_API.equals(datasource.getCreationSource())) {\nreturn Mono.just(datasourceId);\n} else {\nreturn datasourceService.copy(datasource, organizationId, visitorId);\n}\n});\n}", "CodeBleu_score": 36.566952433037685}]}
{"instance_id": "725030ef43ac", "generation_result": [{"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\tturn assetService.upload(filePart, user.getId(), \"profilePhoto\", avatarMaxSizeInKb.get())\n.flatMap(asset -> {\n if (user.getProfilePhoto()!= null) {\n return assetService.delete(user.getProfilePhoto())\n.then(Mono.just(asset));\n }\n return Mono.just(asset);\n })\n.flatMap(asset -> {\n user.setProfilePhoto(asset.getId());\n return repository.save(user);\n })\n.map(u -> true);\n }", "CodeBleu_score": 25.89152050997142}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\t", "CodeBleu_score": 6.277227342940204}, {"code": " public Mono<Boolean> saveProfilePhoto(Part filePart, User user){\n\tturn assetService.upload(filePart, user.getId(), avatarMaxSizeInKb.get())\n.flatMap(asset -> {\n if (asset.isEmpty()) {\n return Mono.just(true);\n }\n\n return assetService.delete(user.getAvatar())\n.flatMap(deleted -> {\n if (deleted) {\n user.setAvatar(asset.get(0));\n return repository.save(user)\n.map(saved -> true);\n } else {\n return Mono.just(false);\n }\n });\n });\n }", "CodeBleu_score": 27.48909923268187}]}
{"instance_id": "ba18ff764ca0", "generation_result": [{"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tuser = new User();\nuser.setName(authUser.getName());\nuser.setState(UserState.NORMAL);\nuser.setEnabled(true);\nuser.setAvatar(authUser.getAvatar());\nif (AuthSourceConstants.EMAIL.equals(authUser.getSource()) && authUser.getContext()!= null && authUser.getContext().getPassword()!= null) {\nuser.setPassword(encryptionService.encrypt(authUser.getContext().getPassword()));\n}\nuser.setConnections(new HashSet<>(authUser.getConnections()));\nuser.setNewUser(true);\nreturn create(user);\n}", "CodeBleu_score": 41.925846816849976}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tuser = new User();\nuser.setName(authUser.getName());\nuser.setState(UserState.ACTIVE);\nuser.setEnabled(true);\nuser.setAvatar(authUser.getAvatar());\nif (AuthSourceConstants.EMAIL.equals(authUser.getSource()) && authUser.getContext().getPassword()!= null) {\nuser.setPassword(encryptionService.encrypt(authUser.getContext().getPassword()));\n}\nuser.setConnections(List.of(new Connection(authUser.getSource(), authUser.getUid())));\nuser.setNewUser(true);\nreturn create(user);\n}", "CodeBleu_score": 42.57561781087888}, {"code": "public Mono<User> createNewUserByAuthUser(AuthUser authUser){\n\tuser = new User();\nuser.setName(authUser.getName());\nuser.setState(UserState.ACTIVE);\nuser.setEnabled(true);\nuser.setAvatar(authUser.getAvatar());\nif (AuthSourceConstants.EMAIL.equals(authUser.getSource()) && authUser.getContext().containsKey(AuthSourceConstants.PASSWORD)) {\nuser.setPassword(encryptionService.encrypt(authUser.getContext().get(AuthSourceConstants.PASSWORD).toString()));\n}\nuser.setConnections(List.of(Connection.fromAuthUser(authUser)));\nuser.setNew(true);\nreturn repository.save(user);\n}", "CodeBleu_score": 41.751762916871854}]}
{"instance_id": "cf0845c883a7", "generation_result": [{"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tction connection = new Connection();\n\tconnection.setSource(AuthSourceConstants.EMAIL);\n\tconnection.setRawId(email);\n\tuser.getConnections().add(connection);\n\treturn repository.save(user)\n\t\t\t.map(savedUser -> true)\n\t\t\t.onErrorResume(DuplicateKeyException.class, e -> ofError(BizError.DUPLICATE_EMAIL, \"DUPLICATE_EMAIL\", email))\n\t\t\t.onErrorResume(e -> ofException(e));\n}", "CodeBleu_score": 27.201252332414676}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\tser == null) {\n\t\treturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.USER));\n\t}\n\tif (StringUtils.isEmpty(email)) {\n\t\treturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.EMAIL));\n\t}\n\tif (user.getConnections() == null) {\n\t\tuser.setConnections(newHashSet());\n\t}\n\tConnection connection = new Connection();\n\tconnection.setSource(AuthSourceConstants.EMAIL);\n\tconnection.setRawId(email);\n\tuser.getConnections().add(connection);\n\treturn repository.save(user)\n\t\t\t.map(savedUser -> true)\n\t\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.error(new BizException(BizError.DUPLICATE_EMAIL, \"DUPLICATE_EMAIL\", email)))\n\t\t\t.onErrorMap(e -> ofException(e));\n}", "CodeBleu_score": 34.162264787624}, {"code": "public Mono<Boolean> bindEmail(User user, String email){\n\ttringUtils.isBlank(email)) {\n\t\treturn Mono.error(new BizException(BizError.INVALID_PARAMETER, \"INVALID_PARAMETER\", FieldName.EMAIL));\n\t}\n\n\tConnection connection = new Connection();\n\tconnection.setSource(AuthSourceConstants.EMAIL);\n\tconnection.setRawId(email);\n\tuser.getConnections().add(connection);\n\treturn save(user)\n\t\t\t.onErrorResume(DuplicateKeyException.class, e -> Mono.error(new BizException(BizError.DUPLICATE_EMAIL, \"DUPLICATE_EMAIL\", email)))\n\t\t\t.map(u -> true);\n}", "CodeBleu_score": 32.42952604788692}]}
{"instance_id": "6371b85223d3", "generation_result": [{"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (!encryptionService.validatePassword(oldPassword, user.getPassword())) {\n\t\t\t\t\treturn ofError(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\");\n\t\t\t\t}\n\n\t\t\t\tString encryptedPassword = encryptionService.encryptPassword(newPassword);\n\t\t\t\tuser.setPassword(encryptedPassword);\n\t\t\t\treturn repository.save(user).thenReturn(true);\n\t\t\t});\n}", "CodeBleu_score": 28.3311626804577}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\t\treturn findById(userId)\n\t\t\t.flatMap(user -> {\n\t\t\t\tif (!encryptionService.isPasswordValid(user.getPassword(), oldPassword)) {\n\t\t\t\t\treturn ofError(BizError.INVALID_PASSWORD, \"INVALID_PASSWORD\");\n\t\t\t\t}\n\t\t\t\tuser.setPassword(encryptionService.encryptPassword(newPassword));\n\t\t\t\treturn repository.save(user)\n\t\t\t\t\t\t.then(Mono.just(true));\n\t\t\t});\n}", "CodeBleu_score": 20.768025544170168}, {"code": "public Mono<Boolean> updatePassword(String userId, String oldPassword, String newPassword){\n\treturn findById(userId)\n.flatMap(user -> {\nif (!encryptionService.checkPassword(oldPassword, user.getPassword())) {\nreturn ofError(BizError.INVALID_PARAMETER, \"INVALID_PASSWORD\", \"oldPassword\");\n}\nString encryptedPassword = encryptionService.encryptPassword(newPassword);\nuser.setPassword(encryptedPassword);\nreturn repository.save(user)\n.thenReturn(true)\n.onErrorResume(throwable -> {\nif (throwable instanceof DuplicateKeyException) {\nreturn Mono.error(new BizException(BizError.ALREADY_BIND, \"ALREADY_BIND\", \"email\", \"\"));\n}\nreturn Mono.error(throwable);\n});\n});\n}", "CodeBleu_score": 36.27144109043012}]}
{"instance_id": "e343ae527afa", "generation_result": [{"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\nreturn Mono.deferContextual(contextView -> {\n\nif (orgMember.isAdmin()) {\n\nreturn Mono.just(Collections.emptyList());\n\n}\n\nreturn groupService.findGroupsByMemberId(userId, withoutDynamicGroups, locale)\n\n.filter(group ->!GroupConstants.ALL_USERS_GROUP_ID.equals(group.getId()))\n\n.map(group -> {\n\nMap<String, String> map = new HashMap<>();\n\nmap.put(\"id\", group.getId());\n\nmap.put(\"name\", group.getName());\n\nreturn map;\n\n})\n\n.collectList();\n\n});\n\n}", "CodeBleu_score": 23.189613821026995}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\treturn orgMember.isAdmin()? getAdminGroups(locale) : getNonAdminGroups(userId, withoutDynamicGroups, locale);\n}", "CodeBleu_score": 11.28304933673434}, {"code": "protected Mono<List<Map<String, String>>> buildUserDetailGroups(String userId, OrgMember orgMember, boolean withoutDynamicGroups,\n            Locale locale){\n\t\tif (withoutDynamicGroups) {\n\t\treturn Mono.just(emptyList());\n\t}\n\tif (orgMember.isAdmin()) {\n\t\treturn groupService.findAllGroups(orgMember.getOrgId())\n\t\t\t\t.map(group -> toGroupMap(group, locale))\n\t\t\t\t.collectList();\n\t}\n\treturn groupService.findAllGroups(orgMember.getOrgId())\n\t\t\t.filter(group ->!group.isAllUsers())\n\t\t\t.map(group -> toGroupMap(group, locale))\n\t\t\t.collectList();\n}", "CodeBleu_score": 24.966287529011392}]}
{"instance_id": "81d5de06ce76", "generation_result": [{"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\tturn findByUserId(userId)\n\t\t\t.flatMap(userStatus -> {\n\t\t\t\tuserStatus.setHasShowNewUserGuidance(true);\n\t\t\t\treturn mongoUpsertHelper.upsert(repository, userStatus);\n\t\t\t});\n}", "CodeBleu_score": 23.922200528887842}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\turn findByUserId(userId)\n.flatMap(userStatus -> {\nuserStatus.setHasShowNewUserGuidance(true);\nreturn mongoUpsertHelper.upsert(userStatus);\n})\n.map(result -> result.getModifiedCount() > 0);\n}", "CodeBleu_score": 28.897435323699384}, {"code": "public Mono<Boolean> markNewUserGuidanceShown(String userId){\n\turn findByUserId(userId)\n.flatMap(userStatus -> {\nuserStatus.setHasShowNewUserGuidance(true);\nreturn mongoUpsertHelper.upsert(repository, userStatus.getId(), new Update().set(\"hasShowNewUserGuidance\", true));\n})\n.map(result -> result.getModifiedCount() > 0);\n}", "CodeBleu_score": 27.635472026959707}]}
{"instance_id": "6a960c887da0", "generation_result": [{"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition is nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue is nil\")\n\t}\n\n\tvar wg rungroup.Group\n\twg.Add()\n\n\tfor k, p := range c.partitions {\n\t\tif!predicatePartition(k, p) {\n\t\t\tcontinue\n\t\t}\n\n\t\tp := p\n\t\tk := k\n\t\twg.Go(func() {\n\t\t\tdefer wg.Done()\n\n\t\t\tp.ClearMatching(predicateValue)\n\t\t\tc.infol.Printf(\\\"Cleared partition %q\\\", k)\n\t\t})\n\t}\n\n\twg.Wait()\n}", "CodeBleu_score": 42.93902137543777}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\\\"nil predicatePartition\\\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\\\"nil predicateValue\\\")\n\t}\n\n\trg := rungroup.New()\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\trg.Go(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\trg.Wait()\n}", "CodeBleu_score": 37.20672554254518}, {"code": "func (c *Cache) ClearMatching(predicatePartition func(k string, p PartitionManager) bool, predicateValue func(k, v any) bool) {\n\tif predicatePartition == nil {\n\t\tpanic(\"predicatePartition cannot be nil\")\n\t}\n\tif predicateValue == nil {\n\t\tpanic(\"predicateValue cannot be nil\")\n\t}\n\trg := rungroup.Group{}\n\tfor k, p := range c.partitions {\n\t\tif predicatePartition(k, p) {\n\t\t\tk := k\n\t\t\tp := p\n\t\t\trg.Add(func() error {\n\t\t\t\tp.ClearMatching(predicateValue)\n\t\t\t\treturn nil\n\t\t\t})\n\t\t}\n\t}\n\trg.Wait()\n}", "CodeBleu_score": 41.236776416120804}]}
{"instance_id": "3043f15d1c38", "generation_result": [{"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := totalWeightQuantity / numPartitions\n\n\treturn maxItemsTotal * averageWeightPerPartition / 100\n}", "CodeBleu_score": 35.782585567955834}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(float64(maxItemsTotal) * averageWeightPerPartition / float64(totalWeightQuantity)))\n}", "CodeBleu_score": 55.48275569885015}, {"code": "func calculateMaxSizePerPartition(maxItemsTotal, totalWeightQuantity, numPartitions int) int{\n\t\tif numPartitions <= 0 || totalWeightQuantity <= 0 {\n\t\treturn 0\n\t}\n\taverageWeightPerPartition := float64(totalWeightQuantity) / float64(numPartitions)\n\treturn int(math.Ceil(float64(maxItemsTotal) * averageWeightPerPartition))\n}", "CodeBleu_score": 41.442148625963036}]}
{"instance_id": "564698899cd7", "generation_result": [{"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = connectionFactory.getMetadata();\n\tif (metadata!= null) {\n\t\tmap.put(\"product\", metadata.getDatabase());\n\t\tmap.put(\"version\", metadata.getDatabaseVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 42.08380352373363}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> map = new HashMap<>();\n\tConnectionMetadata metadata = connectionFactory.getMetadata();\n\tif (metadata!= null) {\n\t\tmap.put(\"productName\", metadata.getDatabaseProductName());\n\t\tmap.put(\"productVersion\", metadata.getDatabaseProductVersion());\n\t}\n\treturn map;\n}", "CodeBleu_score": 43.05277064517302}, {"code": "public Map<String, Object> contributorMap(){\n\t\tMap<String, Object> contributorMap = new HashMap<>();\n\tConnectionMetadata metadata = connectionFactory.getMetadata();\n\tif (metadata!= null) {\n\t\tcontributorMap.put(\"product\", metadata.getDatabaseProductName());\n\t\tcontributorMap.put(\"version\", metadata.getDatabaseProductVersion());\n\t}\n\treturn contributorMap;\n}", "CodeBleu_score": 41.96610801240904}]}
{"instance_id": "38d2e041f2fb", "generation_result": [{"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tser = SystemSetting.get(configMap, User.GROUP, User.class);\nif (user == null) {\ninfo.setAllowRegistration(false);\ninfo.setMustVerifyEmailOnRegistration(false);\n} else {\ninfo.setAllowRegistration(user.getRegistration()!= null && user.getRegistration());\ninfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration()!= null && user.getMustVerifyEmailOnRegistration());\n}\n}", "CodeBleu_score": 66.96412140614505}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tuser = SystemSetting.get(configMap, User.GROUP, User.class);\n\tif (user == null) {\n\t\tinfo.setAllowRegistration(false);\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t} else {\n\t\tinfo.setAllowRegistration(user.getEnable()!= null && user.getEnable());\n\t\tinfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmail()!= null && user.getMustVerifyEmail());\n\t}\n}", "CodeBleu_score": 64.57437047194676}, {"code": "private void handleUserSetting(GlobalInfo info, ConfigMap configMap){\n\tuser = SystemSetting.get(configMap, User.GROUP, User.class);\n\tif (user == null) {\n\t\tinfo.setAllowRegistration(false);\n\t\tinfo.setMustVerifyEmailOnRegistration(false);\n\t} else {\n\t\tinfo.setAllowRegistration(user.getRegistration()!= null && user.getRegistration());\n\t\tinfo.setMustVerifyEmailOnRegistration(user.getMustVerifyEmailOnRegistration()!= null && user.getMustVerifyEmailOnRegistration());\n\t}\n}", "CodeBleu_score": 67.03796719045856}]}
{"instance_id": "935261f7f70d", "generation_result": [{"code": "public Object restart(){\n\t\tThread restartThread = new Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\ttry {\n\t\t\t\tThread.currentThread().setContextClassLoader(application.getClass().getClassLoader());\n\t\t\t\tThread.currentThread().setDaemon(false);\n\t\t\t\tapplication.run(args);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(\"Restart failed\", e);\n\t\t\t}\n\t\t}\n\t});\n\trestartThread.start();\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 37.81709424184897}, {"code": "public Object restart(){\n\t\tThreadGroup restartThreadGroup = new ThreadGroup(\"restart\");\n\tThread restartThread = new Thread(restartThreadGroup, () -> {\n\t\tThread.currentThread().setContextClassLoader(application.getClass().getClassLoader());\n\t\tapplication.run(args);\n\t});\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"Restarting...\";\n}", "CodeBleu_score": 48.98039128883341}, {"code": "public Object restart(){\n\t\tThread restartThread = new Thread(new Runnable() {\n\t\t@Override\n\t\tpublic void run() {\n\t\t\tThread.currentThread().setContextClassLoader(application.getClass().getClassLoader());\n\t\t\tapplication.run(args);\n\t\t}\n\t});\n\trestartThread.setDaemon(false);\n\trestartThread.start();\n\treturn \"Restarting the application...\";\n}", "CodeBleu_score": 42.82387037659976}]}
{"instance_id": "9875227cac26", "generation_result": [{"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n }", "CodeBleu_score": 92.62032370439991}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 70.99832409141749}, {"code": " public void configureHttpMessageCodecs(ServerCodecConfigurer configurer){\n\t configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n }", "CodeBleu_score": 70.99832409141749}]}
{"instance_id": "1691061bb071", "generation_result": [{"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(method(HttpMethod.GET).and(path(\"/console/**\").and(accept(MediaType.TEXT_HTML)).and(WebSocketRequestPredicate.not())),\nrequest -> {\nif (request.path().value().startsWith(\"/console/assets\")) {\nreturn ServerResponse.notFound().build();\n}\nreturn ServerResponse.ok().cacheControl(CacheControl.noStore()).body(BodyInserters.fromResource(new EncodedResourceResolver(new PathResourceResolver(resourceProperties.getStaticLocations()[0],\nFILE_URL_PREFIX + haloProp.getConsole().getIndex()))));\n});\n}", "CodeBleu_score": 26.042439304326138}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(method(HttpMethod.GET).and(path(\"/console/**\")).and(accept(MediaType.TEXT_HTML)).and(new WebSocketRequestPredicate(webSocketHandlerMapping())),\nrequest -> {\nString path = request.uri().getPath();\nif (path.contains(\"assets\")) {\nreturn ServerResponse.notFound().build();\n}\nreturn ServerResponse.temporaryRedirect(URI.create(\"/console/index.html\")).build();\n});\n}", "CodeBleu_score": 33.77421750166981}, {"code": "RouterFunction<ServerResponse> consoleIndexRedirection(){\n\treturn route(method(HttpMethod.GET).and(path(\"/console/**\")).and(accept(MediaType.TEXT_HTML)).and(WebSocketRequestPredicate.INSTANCE.negate()),\nrequest -> {\nvar path = request.path().value();\nif (path.startsWith(\"/console/assets/\")) {\nreturn ServerResponse.notFound().build();\n}\nreturn ServerResponse.ok().syncBody(BodyInserters.fromResource(new EncodedResourceResolver().resolveResource(request, \"classpath:/META-INF/resources/webjars/halo-console/index.html\")));\n});\n}", "CodeBleu_score": 31.81457066130282}]}
{"instance_id": "1935c34ee581", "generation_result": [{"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t ucPredicate = method(HttpMethod.GET)\n.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n.and(accept(MediaType.TEXT_HTML))\n.and(new WebSocketRequestPredicate().negate());\nreturn route(ucPredicate,\nrequest -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 82.55923697956887}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\tr ucPredicate = method(HttpMethod.GET)\n\t\t.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n\t\t.and(accept(MediaType.TEXT_HTML))\n\t\t.and(new WebSocketRequestPredicate().negate());\n\treturn route(ucPredicate,\n\t\trequest -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 85.93286995399376}, {"code": "RouterFunction<ServerResponse> ucIndexRedirect(){\n\t ucPredicate = method(HttpMethod.GET)\n.and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n.and(accept(MediaType.TEXT_HTML))\n.and(new WebSocketRequestPredicate().negate());\nreturn route(ucPredicate,\nrequest -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n}", "CodeBleu_score": 82.55923697956887}]}
{"instance_id": "75ce083288cd", "generation_result": [{"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}, {"code": "public ReactiveIndexedSessionRepository<MapSession> reactiveSessionRepository{\n\t", "CodeBleu_score": 3.6254732962319154}]}
{"instance_id": "8b04e4000b63", "generation_result": [{"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t", "CodeBleu_score": 7.796101949025487}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t", "CodeBleu_score": 7.796101949025487}, {"code": "DefaultUserDetailService userDetailsService(UserService userService,\n        RoleService roleService,\n        HaloProperties haloProperties){\n\t", "CodeBleu_score": 7.796101949025487}]}
{"instance_id": "d643a44eebb6", "generation_result": [{"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner(\"email\", email == null? \"\" : email, displayName, new LinkedHashMap<>() {{\nput(\"avatar\", avatar);\nput(\"website\", website);\n}});\n}", "CodeBleu_score": 8.653266198161896}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\t", "CodeBleu_score": 2.669929035515403}, {"code": "public Comment.CommentOwner toCommentOwner(){\n\treturn new Comment.CommentOwner(\"email\", email == null? \"\" : email, displayName,\nnew LinkedHashMap<String, String>() {{\nput(\"avatar\", avatar);\nput(\"website\", website);\n}});\n}", "CodeBleu_score": 9.242221632434694}]}
{"instance_id": "af31a33287ec", "generation_result": [{"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tls(post.getSpec().getOwner().getKind())) {\n\t\tUser user = client.fetch(User.class, post.getSpec().getOwner().getName()).orElse(null);\n\t\treturn user!= null && user.getSpec().getEmail().equals(commentOwner.getName());\n\t} else {\n\t\treturn post.getSpec().getOwner().getName().equals(commentOwner.getName());\n\t}\n}", "CodeBleu_score": 39.578585614687675}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\ts(commentOwner.getKind())) {\nUser user = client.fetch(User.class, post.getSpec().getOwner().getName()).orElseThrow();\nreturn user.getSpec().getEmail().equals(commentOwner.getName());\n} else {\nreturn post.getSpec().getOwner().getName().equals(commentOwner.getName());\n}\n}", "CodeBleu_score": 39.17363933126113}, {"code": "boolean isPostOwner(Post post, Comment.CommentOwner commentOwner){\n\tName = post.getSpec().getOwner().getName();\n\tString postOwnerKind = post.getSpec().getOwner().getKind();\n\tif (StringUtils.equals(commentOwner.getKind(), \"email\")) {\n\t\tUser user = client.fetch(User.class, postOwnerName).orElseThrow();\n\t\treturn StringUtils.equals(commentOwner.getName(), user.getSpec().getEmail());\n\t} else {\n\t\treturn StringUtils.equals(commentOwner.getName(), postOwnerName) && StringUtils.equals(commentOwner.getKind(), postOwnerKind);\n\t}\n}", "CodeBleu_score": 40.1462875194609}]}
{"instance_id": "80647f393c4c", "generation_result": [{"code": "public ListOptions toListOptions(){\n\t fieldSelector = new FieldSelector();\nfieldSelector.setFields(labelAndFieldSelectorToListOptions(getLabels(), getFieldSelectors()));\nvar query = fieldSelector.toQuery();\nif (StringUtils.isNotBlank(getKeyword())) {\nquery = and(query, contains(\"spec.content\", getKeyword()));\n}\nif (StringUtils.isNotBlank(getOwnerName())) {\nquery = and(query, equal(\"spec.ownerName\", getOwnerName()));\n}\nreturn new ListOptions(query, getSort());\n}", "CodeBleu_score": 24.99416599971494}, {"code": "public ListOptions toListOptions(){\n\tBuild field selector\nvar fieldSelector = new FieldSelector();\nfieldSelector.addAll(labelAndFieldSelectorToListOptions(exchange));\n\n// Add conditions based on keyword and owner name\nif (StringUtils.isNotBlank(getKeyword())) {\nfieldSelector.addCondition(and(contains(\"spec.content\", getKeyword()), contains(\"spec.author.nickname\", getKeyword())));\n}\nif (StringUtils.isNotBlank(getOwnerName())) {\nfieldSelector.addCondition(equal(\"spec.owner.name\", getOwnerName()));\n}\n\n// Set field selector in ListOptions object and return it\nreturn ListOptions.of(fieldSelector);\n}", "CodeBleu_score": 20.860390100069072}, {"code": "public ListOptions toListOptions(){\n\t labelSelector = labelAndFieldSelectorToListOptions(getLabels(), getFields());\nvar fieldSelector = labelSelector.getFieldSelector();\nif (StringUtils.isNotBlank(getKeyword())) {\nfieldSelector = and(fieldSelector, contains(\"spec.content\", getKeyword()));\n}\nif (StringUtils.isNotBlank(getOwnerName())) {\nfieldSelector = and(fieldSelector, equal(\"spec.ownerName\", getOwnerName()));\n}\nlabelSelector.setFieldSelector(fieldSelector);\nreturn labelSelector;\n}", "CodeBleu_score": 30.374788917714035}]}
{"instance_id": "95c1ce631715", "generation_result": [{"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.notNull(commentName, \"The comment name must not be null.\");\nreturn counterService.get(commentName)\n   .map(counter -> new CommentStats(counter.getUpvoteCount()))\n   .defaultIfEmpty(new CommentStats());\n}", "CodeBleu_score": 50.275965683994094}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.hasText(commentName, \"The comment name must not be null or empty.\");\nreturn counterService.get(commentName)\n\n   .map(counter -> new CommentStats(counter.getUpvoteCount()));\n}", "CodeBleu_score": 41.28487555557743}, {"code": "Mono<CommentStats> fetchStats(String commentName){\n\tAssert.hasText(commentName, \"The comment name must not be null or empty.\");\nreturn Mono.justOrEmpty(counterService.get(commentName))\n.map(counter -> new CommentStats(counter.getUpvoteCount()));\n}", "CodeBleu_score": 25.286783348714177}]}
{"instance_id": "c273b7a1f123", "generation_result": [{"code": "void subscribeReply(UserIdentity identity){\n\t\tval subscriber = notificationCenter.subscriberFrom(identity);\n\tif (subscriber!= null) {\n\t\tval interestReason = subscriber.interestReason(NotificationReasonConst.REPLY_REASON_TYPE, \"replied.owner\", StringUtils::equals);\n\t\tsubscriber.subscribe(interestReason);\n\t\tsubscriber.blockUntilSubscribed();\n\t}\n}", "CodeBleu_score": 36.81638488172844}, {"code": "void subscribeReply(UserIdentity identity){\n\tvar subscriber = notificationCenter.createSubscriber(identity);\nif (subscriber!= null) {\nvar interestReason = subscriber.createInterestReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\ninterestReason.condition(\"repliedOwner\", StringUtils::equals, identity.getName());\nsubscriber.subscribe(notificationCenter.createSubscription(interestReason));\n}\n}", "CodeBleu_score": 46.20389241175672}, {"code": "void subscribeReply(UserIdentity identity){\n\t\tvar subscriber = notificationCenter.subscriber(identity);\n\tif (subscriber.isPresent()) {\n\t\tvar interestReason = subscriber.get().interestReason(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU);\n\t\tinterestReason.condition(reply -> StringUtils.equals(reply.getSpec().getOwner(), identity.getName()));\n\t\tsubscriber.get().subscribe(interestReason);\n\t\tsubscriber.get().awaitSubscription();\n\t}\n}", "CodeBleu_score": 42.59654783993001}]}
{"instance_id": "e2b873268244", "generation_result": [{"code": "private Mono<Comment> approveComment(Comment comment){\n\tpdateFunction = (UnaryOperator<Comment>) commentToUpdate -> {\n\t\tcommentToUpdate.getSpec().setApproved(true);\n\t\tcommentToUpdate.getSpec().setApprovedAt(Instant.now());\n\t\treturn commentToUpdate;\n\t};\n\treturn client.update(comment, updateFunction)\n\t\t.retryWhen(Retry.backoff(3, Duration.ofSeconds(1))\n\t\t\t.filter(OptimisticLockingFailureException.class::isInstance)\n\t\t);\n}", "CodeBleu_score": 57.40338984668809}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t client.update(comment.getName(), comment.getSpec()\n.setApproved(true)\n.setApprovedAt(Instant.now()))\n.onErrorResume(OptimisticLockingFailureException.class, e ->\nclient.get(Comment.class, comment.getName())\n.flatMap(c -> approveComment(c)));\n}", "CodeBleu_score": 26.75859390307444}, {"code": "private Mono<Comment> approveComment(Comment comment){\n\t client.update(comment.getSpec().getName(), comment.getSpec().getApproved(true).getApprovedAt(Instant.now()))\n.retryWhen(Retry.backoff(3, Duration.ofSeconds(1))\n.filter(t -> t instanceof OptimisticLockingFailureException));\n}", "CodeBleu_score": 20.860787791746365}]}
{"instance_id": "87b91730ba0c", "generation_result": [{"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->setLivewire($this);\n}\n\nif ($this instanceof HasRecord && $action instanceof HasRecord) {\n$action->setRecord($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 59.898748154969006}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\t\tif ($action instanceof MountableAction) {\n\t\t$action->setLivewire($this);\n\t}\n\n\tif ($this instanceof HasRecord && $action instanceof HasRecord) {\n\t\t$action->setRecord($this->getRecord());\n\t}\n\n\treturn $action;\n}", "CodeBleu_score": 60.15074175278566}, {"code": "<?\npublic function prepareModalAction(StaticAction $action): StaticAction{\n\tif ($action instanceof MountableAction) {\n$action->livewire($this);\n}\n\nif ($this instanceof HasRecord && $action instanceof HasRecord) {\n$action->record($this->getRecord());\n}\n\nreturn $action;\n}", "CodeBleu_score": 62.501583802579134}]}
{"instance_id": "e79f440b334f", "generation_result": [{"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 89.60071149034441}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t$url = $this->evaluate($this->successRedirectUrl);\n\nif (filled($url)) {\n$this->redirect($url);\n}\n\nreturn $this;\n}", "CodeBleu_score": 89.60071149034441}, {"code": "<?\npublic function dispatchSuccessRedirect(): static{\n\t\t$url = $this->evaluate($this->successRedirectUrl);\n\n\tif (filled($url)) {\n\t\t$this->redirect($url);\n\t}\n\n\treturn $this;\n}", "CodeBleu_score": 89.75308833944979}]}
{"instance_id": "8fdc11cc8b44", "generation_result": [{"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! ($record && method_exists($record, 'tags'))) {\nreturn;\n}\n\n$tagModel = $record->tags()->getRelated()->getModel();\n\n$tags = collect($state)\n->map(static function (string $tagName) use ($tagModel): Tag {\nreturn $tagModel::findOrCreateFromString($tagName);\n})\n->pluck('id')\n->all();\n\n$record->tags()->sync($tags);\n}", "CodeBleu_score": 36.374462380478924}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! ($record && method_exists($record, 'tags'))) {\nreturn;\n}\n\n$tagModelClass = $record->tags()->getRelated()->getMorphClass();\n$tagNames = array_map(static fn (string $tagName) => trim($tagName), $state);\n$tags = $tagModelClass::findOrCreate($tagNames);\n\n$record->tags()->sync($tags->pluck('id')->all());\n}", "CodeBleu_score": 32.74777483869456}, {"code": "<?\nprotected function syncTagsWithAnyType(?Model $record, array $state): void{\n\t! ($record && method_exists($record, 'tags'))) {\nreturn;\n}\n\n$tagModel = $record->tags()->getRelated()->getModel();\n\n$tags = collect($state)->map(function (string $tagName) use ($tagModel) {\nreturn $tagModel->findOrCreate($tagName);\n})->pluck('id')->all();\n\n$record->tags()->sync($tags);\n}", "CodeBleu_score": 35.68402904521326}]}
{"instance_id": "7688efe952c7", "generation_result": [{"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path into the space path and repository name\n\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\n\t// Create a scope and resource for the pipeline\n\tscope := types.Scope{\n\t\tSpace: spacePath,\n\t\tRepo:  repoName,\n\t}\n\tresource := types.Resource{\n\t\tType: types.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// Check if the user has the required permission for the pipeline\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 65.10723834718699}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\t// Dissect the repository path into space path and repository name\n\tspacePath, repoName, err := paths.DissectRepoPath(repoPath)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\\\"failed to dissect repository path: %w\\\", err)\n\t}\n\n\t// Create a scope for the pipeline\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// Create a resource for the pipeline\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\n\t// Check if the user has the required permission for the pipeline\n\tif err := authorizer.Check(ctx, session, scope, resource, permission); err!= nil {\n\t\treturn fmt.Errorf(\\\"failed to check permission: %w\\\", err)\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 59.43967943575556}, {"code": "func CheckPipeline(ctx context.Context, authorizer authz.Authorizer, session *auth.Session,\n\trepoPath string, pipelineIdentifier string, permission enum.Permission) error {\n\t\tspacePath, repositoryName, err := paths.SplitRepositoryPath(repoPath)\n\tif err!= nil {\n\t\treturn err\n\t}\n\tscope := types.Scope{\n\t\tType: types.ScopeTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\tresource := types.Resource{\n\t\tType: types.ResourceTypePipeline,\n\t\tName: pipelineIdentifier,\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 57.705059286351315}]}
{"instance_id": "ff2995d8eeeb", "generation_result": [{"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Get the parent space and name from the space path.\n\tparentSpace, name, err := paths.ParseSpace(space.Path)\n\tif err!= nil {\n\t\treturn fmt.Errorf(\\\"invalid space path: %w\\\", err)\n\t}\n\n\t// Create a scope and resource based on the parent space and name.\n\tscope := authz.Scope{\n\t\tType: authz.ScopeTypeSpace,\n\t\tID:   parentSpace.ID,\n\t}\n\tresource := authz.Resource{\n\t\tType: authz.ResourceTypeSpace,\n\t\tID:   space.ID,\n\t\tName: name,\n\t}\n\n\t// Call the Check function with the context, authorizer, session, scope, resource, and permission.\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 62.05681394322347}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\tif session == nil {\n\t\treturn auth.ErrNotAuthenticated\n\t}\n\tif space == nil {\n\t\treturn fmt.Errorf(\\\"space is required\\\")\n\t}\n\tscope, resource, err := paths.ParseSpace(space.Path)\n\tif err!= nil {\n\t\treturn err\n\t}\n\treturn authorizer.Check(ctx, session, scope, resource, permission)\n}", "CodeBleu_score": 44.95594550456337}, {"code": "func CheckSpace(\n\tctx context.Context,\n\tauthorizer authz.Authorizer,\n\tsession *auth.Session,\n\tspace *types.Space,\n\tpermission enum.Permission,\n) error{\n\t\t// Check if the session is valid\n\tif session == nil {\n\t\treturn auth.ErrNotAuthenticated\n\t}\n\n\t// Check if the session has the required permission\n\tif err := authorizer.Check(ctx, session, authz.Scope{\n\t\tType: authz.SpaceScope,\n\t\tName: space.Parent,\n\t}, authz.Resource{\n\t\tType: authz.SpaceResource,\n\t\tName: space.Name,\n\t}, permission); err!= nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}", "CodeBleu_score": 44.4350030277624}]}
{"instance_id": "1603e7a38dc8", "generation_result": [{"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tource == nil {\n\t\tvar err error\n\t\tsource, err = json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar decoded any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tvar buf bytes.Buffer\n\tenc := json.NewEncoder(&buf)\n\tenc.SetEscapeHTML(false)\n\tenc.SetIndent(\\\"\\\", \\\"  \\\")\n\tif err := enc.Encode(decoded); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized := buf.Bytes()\n\tif len(sanitized) > 0 && sanitized[len(sanitized)-1] == '\\\n' {\n\t\tsanitized = sanitized[:len(sanitized)-1]\n\t}\n\n\treturn sanitized, nil\n}", "CodeBleu_score": 47.19749017688807}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\ten(source) == 0 {\n\t\tsource, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, err\n\t\t}\n\t}\n\n\tvar sanitized map[string]any\n\tif err := json.Unmarshal(source, &sanitized); err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitizedBytes, err := json.Marshal(sanitized)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tsanitized = nil\n\n\tsanitizedBytes = bytes.TrimSuffix(sanitizedBytes, []byte{'\n'})\n\n\treturn sanitizedBytes, nil\n}", "CodeBleu_score": 41.758689968401775}, {"code": "func SanitizeJSONPayload(source json.RawMessage, data any) (json.RawMessage, error){\n\tource == nil {\n\t\t// Marshal the data if source is empty.\n\t\tbytes, err := json.Marshal(data)\n\t\tif err!= nil {\n\t\t\treturn nil, fmt.Errorf(\"marshaling data failed: %w\", err)\n\t\t}\n\t\tsource = bytes\n\t}\n\n\t// Decode the source JSON, disallowing unknown fields, and encode the data.\n\tvar decoded map[string]any\n\tif err := json.Unmarshal(source, &decoded); err!= nil {\n\t\treturn nil, fmt.Errorf(\"decoding source JSON failed: %w\", err)\n\t}\n\tencoded, err := json.Marshal(decoded)\n\tif err!= nil {\n\t\treturn nil, fmt.Errorf(\"encoding data failed: %w\", err)\n\t}\n\n\t// Remove any trailing newline from the result.\n\tresult := bytes.TrimSuffix(encoded, []byte(\"\n\"))\n\treturn result, nil\n}", "CodeBleu_score": 40.9562381493458}]}
{"instance_id": "39430d5f99b6", "generation_result": [{"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := c.repoStore.GetByRef(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.Newf(usererror.NotFound, \\\"repository not found\\\")\n\t}\n\n\tif err := c.authorizer.Check(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, usererror.Newf(usererror.Forbidden, \\\"permission denied\\\")\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 41.58477666727575}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\trepo, err := types.ParseRepoRef(repoRef)\n\tif err!= nil {\n\t\treturn nil, usererror.New(usererror.Validation, err.Error())\n\t}\n\n\trepo, err = c.repoStore.Get(ctx, repo.ID)\n\tif err!= nil {\n\t\treturn nil, usererror.New(usererror.NotFound, err.Error())\n\t}\n\n\tif err = c.authorizer.Authorize(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, usererror.New(usererror.PermissionDenied, err.Error())\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 53.70500442766958}, {"code": "func (c *Controller) getRepoCheckAccess(ctx context.Context,\n\tsession *auth.Session, repoRef string, reqPermission enum.Permission,\n) (*types.Repository, error){\n\t\tif err := types.ValidateRepositoryRef(repoRef); err!= nil {\n\t\treturn nil, usererror.New(usererror.InvalidArgument, err.Error())\n\t}\n\n\trepo, err := c.repoStore.Get(ctx, repoRef)\n\tif err!= nil {\n\t\treturn nil, err\n\t}\n\n\tif err := c.authorizer.Check(ctx, session, repo, reqPermission); err!= nil {\n\t\treturn nil, err\n\t}\n\n\treturn repo, nil\n}", "CodeBleu_score": 48.09880175197394}]}
{"instance_id": "064193efe809", "generation_result": [{"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn sanitizeMarkdown(in, s)\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn sanitizeMarkdown(in, s)\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t}\n}", "CodeBleu_score": 27.228453411319187}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn sanitizeCheckPayloadRaw(in, s)\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn sanitizeCheckPayloadMarkdown(in, s)\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn sanitizeCheckPayloadPipeline(in, s)\n\t\t},\n\t}\n}", "CodeBleu_score": 27.613801254721366}, {"code": "func ProvideCheckSanitizers() map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\treturn map[enum.CheckPayloadKind]func(in *ReportInput, s *auth.Session) error{\n\t\tenum.CheckPayloadKindEmpty: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn nil\n\t\t},\n\t\tenum.CheckPayloadKindMarkdown: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn sanitizeMarkdown(in.Payload)\n\t\t},\n\t\tenum.CheckPayloadKindRaw: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn sanitizeMarkdown(in.Payload)\n\t\t},\n\t\tenum.CheckPayloadKindPipeline: func(in *ReportInput, s *auth.Session) error {\n\t\t\treturn sanitizePipeline(in.Payload)\n\t\t},\n\t}\n}", "CodeBleu_score": 27.39774539950824}]}
{"instance_id": "ea30e48c1ed0", "generation_result": [{"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\n\tif not self.state.is_attached_to_screen then\n\t\tself:attach_to_screen()\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\treturn self", "CodeBleu_score": 60.50044777713728}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\n\tif not self.state.is_attached_to_screen then\n\t\tself:attach_to_screen()\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\treturn self", "CodeBleu_score": 60.50044777713728}, {"code": "function Buffer:attach_to_renderer(on_render)\n\t\tself.state.on_render = on_render\n\n\tif not self.state.is_attached_to_screen then\n\t\tself:attach_to_screen()\n\t\tself.state.is_attached_to_screen = true\n\tend\n\n\treturn self", "CodeBleu_score": 60.50044777713728}]}
{"instance_id": "6c7e189a8448", "generation_result": [{"code": "function Buffer:watch(callback)\n\t\t-- Check if the buffer is valid and a callback is provided\n\tif not self.filename or not callback then\n\t\treturn\n\tend\n\n\t-- Create a watcher for the buffer's filename\n\tself.watcher:watch(self.filename, function(err)\n\t\t-- If an error occurs, log an error message\n\t\tif err then\n\t\t\tconsole.error('Error watching file: ', err)\n\t\t\treturn\n\t\tend\n\n\t\t-- Execute the callback function\n\t\tcallback()\n\tend)\n\n\treturn self", "CodeBleu_score": 40.643969083832474}, {"code": "function Buffer:watch(callback)\n\t\tlocal filename = self.filename\n\n\tif not filename or filename == '' then\n\t\treturn\n\tend\n\n\tif not self:is_in_disk() then\n\t\treturn\n\tend\n\n\tif not callback then\n\t\treturn\n\tend\n\n\tlocal watcher = self.watcher\n\n\tif watcher:is_watching() then\n\t\twatcher:stop()\n\tend\n\n\twatcher:start(filename, callback)", "CodeBleu_score": 38.6536425231605}, {"code": "function Buffer:watch(callback)\n\t\t-- Check if the buffer is valid\n\tif not self.bufnr or self.bufnr == 0 then\n\t\tconsole.error('Invalid buffer')\n\t\treturn\n\tend\n\n\t-- Check if a callback function is provided\n\tif not callback then\n\t\tconsole.error('No callback provided')\n\t\treturn\n\tend\n\n\t-- Set up the watcher\n\tself.watcher:watch(self.filename, callback)\n\n\treturn self", "CodeBleu_score": 35.937869441611916}]}
{"instance_id": "f997559f2b0b", "generation_result": [{"code": "function Color:to_hex()\n\t\tif self.hex then\n\t\treturn self.hex\n\tend\n\n\tlocal spec = self.spec\n\tlocal attr = spec.is_fg and 'foreground' or 'background'\n\n\tif spec.highlight then\n\t\tlocal highlight = vim.api.nvim_get_hl_by_name(spec.highlight, true)\n\t\tself.hex = Rgb.from_float(highlight[attr]).to_hex()\n\telse\n\t\tself.hex = Rgb.from_float(spec.color).to_hex()\n\tend\n\n\treturn self.hex", "CodeBleu_score": 60.76705487360121}, {"code": "function Color:to_hex()\n\t\tif self.hex then \n\t\treturn self.hex \n\tend \n\tlocal spec = self.spec \n\tlocal attr = spec.foreground and 'foreground' or 'background' \n\tlocal hl = vim.api.nvim_get_hl_by_name(spec[attr], true) \n\tif hl and hl.foreground then \n\t\tself.hex = Rgb(hl.foreground):to_hex() \n\t\treturn self.hex \n\tend ", "CodeBleu_score": 60.95203021075761}, {"code": "function Color:to_hex()\n\t\tif self.hex then return self.hex end\n\tlocal fg_or_bg = self.spec.fg and 'fg' or 'bg'\n\tlocal highlight_id = vim.api.nvim_get_hl_id_by_name(self.spec[fg_or_bg], false)\n\tif highlight_id then\n\t\tlocal rgb = Rgb.from_highlight_id(highlight_id)\n\t\tself.hex = rgb:to_hex()\n\t\treturn self.hex\n\tend", "CodeBleu_score": 45.03296588168731}]}
{"instance_id": "cea42cbdd427", "generation_result": [{"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\n\tfor row, line in ipairs(lines) do\n\t\tlocal col_start, col_end = string.find(line, pattern)\n\n\t\tif col_start then\n\t\t\tpcall(vim.api.nvim_buf_add_highlight, buffer.bufnr, self.ns_id, hl, row - 1, col_start - 1, col_end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 40.11311894278043}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\n\tfor row, line in ipairs(lines) do\n\t\tlocal col_start, col_end = string.find(line, pattern)\n\t\tif col_start then\n\t\t\tself:add_highlight(buffer, hl, row - 1, col_start - 1, col_end)\n\t\tend\n\tend\n\n\treturn self", "CodeBleu_score": 40.35699714189851}, {"code": "function Namespace:add_pattern_highlight(buffer, pattern, hl)\n\t\tlocal lines = vim.api.nvim_buf_get_lines(buffer.bufnr, 0, -1, false)\n\tlocal row = 0\n\n\tfor _, line in ipairs(lines) do\n\t\tlocal col_start, col_end = line:find(pattern)\n\n\t\tif col_start then\n\t\t\tself:add_highlight(buffer, hl, row, col_start - 1, col_end)\n\t\tend\n\n\t\trow = row + 1\n\tend\n\n\treturn self", "CodeBleu_score": 41.788836017874246}]}
{"instance_id": "3dbe4c91dce7", "generation_result": [{"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s:%s:%s', buffer.bufnr, row, col)\n\tlocal extmark_id = vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tvirt_text_priority = priority,\n\t})\n\n\treturn id, extmark_id", "CodeBleu_score": 59.70964948683301}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = string.format('%s:%s:%s', row, col, text)\n\n\tvim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos or 'overlay',\n\t\tpriority = priority or 100,\n\t})\n\n\treturn id", "CodeBleu_score": 65.28015143988016}, {"code": "function Namespace:transpose_virtual_text(buffer, text, hl, row, col, pos, priority)\n\t\tlocal id = utils.math.uuid()\n\tlocal extmark_id = vim.api.nvim_buf_set_extmark(buffer.bufnr, self.ns_id, row, col, {\n\t\tvirt_text = { { text, hl } },\n\t\tvirt_text_pos = pos,\n\t\tpriority = priority,\n\t\tid = id,\n\t})\n\n\treturn id", "CodeBleu_score": 60.88970460854027}]}
{"instance_id": "30527915f47f", "generation_result": [{"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}, {"code": "function Spawn:parse_result(output, callback)\n\t\tlocal line = ''\n\tfor i = 1, #output do\n\t\tlocal char = output:sub(i, i)\n\t\tif char == '", "CodeBleu_score": 22.187029572699466}]}
{"instance_id": "e93b09a412bc", "generation_result": [{"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher then\n\t\treturn self.watcher\n\tend\n\n\tlocal watcher = luv.new_fs_event()\n\twatcher:start(path, {\n\t\trecursive = true,\n\t\t}, handler)\n\tself.watcher = watcher\n\treturn watcher", "CodeBleu_score": 48.25481200555445}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher then\n\t\treturn self.watcher\n\tend\n\tself.watcher = luv.new_fs_event()\n\tself.watcher:start(path, {recursive = true}, handler)\n\treturn self.watcher", "CodeBleu_score": 50.53864094871078}, {"code": "function Watcher:watch_file(path, handler)\n\t\tif self.watcher then\n\t\treturn self.watcher\n\tend\n\tself.watcher = luv.new_fs_event()\n\tself.watcher:start(path, {\n\t\trecursive = true,\n\t\tinterval = self.interval,\n\t}, handler)\n\treturn self.watcher", "CodeBleu_score": 56.39848520401901}]}
{"instance_id": "1bd57114d46c", "generation_result": [{"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks = self.git_object:live_hunks(lines)\n\tif hunks.error then\n\t\treturn hunks\n\tend\n\n\tself.signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = self:add_sign(line.index, signs_setting[line.type].icon, signs_setting[line.type].priority)\n\t\t\tself.signs[line.index] = sign_id\n\t\tend\n\tend\n\n\tself:set_var('vgit_hunks', hunks)\n\treturn hunks", "CodeBleu_score": 40.06033124272611}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks, err = self.git_object:live_hunks(lines)\n\tif err then\n\t\treturn nil, err\n\tend\n\tself.signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tfor i, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = self:set_sign(i, line.type)\n\t\t\ttable.insert(self.signs, sign_id)\n\t\tend\n\tend\n\tself:set_var('vgit_signs', self.signs)\n\treturn hunks", "CodeBleu_score": 37.94026738661433}, {"code": "function GitBuffer:live_hunks()\n\t\tlocal lines = self:get_lines()\n\tlocal hunks, err = self.git_object:live_hunks(lines)\n\tif err then\n\t\treturn nil, err\n\tend\n\n\tself.signs = {}\n\tfor _, hunk in ipairs(hunks) do\n\t\tlocal start_line = hunk.start_line\n\t\tfor _, line in ipairs(hunk.lines) do\n\t\t\tlocal sign_id = self:set_sign(start_line, line.sign)\n\t\t\tself.signs[sign_id] = {\n\t\t\t\tpriority = line.priority,\n\t\t\t\ttype = line.sign,\n\t\t\t}\n\t\t\tstart_line = start_line + 1\n\t\tend\n\tend\n\n\tself:set_var('vgit_hunks', hunks)\n\treturn hunks", "CodeBleu_score": 44.925418213006274}]}
{"instance_id": "48ec5c554dbd", "generation_result": [{"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal hunk = patch:get_hunk()\n\tlocal tmp_file = self.git:write_to_temp_file(patch:get_content())\n\tlocal success, err = self.git:stage_hunk(tmp_file, hunk)\n\tos.remove(tmp_file)\n\treturn success, err", "CodeBleu_score": 43.27899773299942}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\tlocal temp_file = utils.temp_file(patch:content())\n\tlocal result, err = self.git:stage_hunk(temp_file)\n\tfs.remove(temp_file)\n\treturn result, err", "CodeBleu_score": 32.362206422988116}, {"code": "function GitObject:stage_hunk_from_patch(patch)\n\t\t-- Create a temporary file to store the patch content\n\tlocal tmpfile = fs.tempname()\n\tlocal tmpfile_content = patch:content()\n\tlocal tmpfile_path = tmpfile.path\n\tlocal tmpfile_name = tmpfile.name\n\n\t-- Write the patch content to the temporary file\n\tlocal tmpfile_fd = io.open(tmpfile_path, 'w')\n\ttmpfile_fd:write(tmpfile_content)\n\ttmpfile_fd:close()\n\n\t-- Stage the hunk using the temporary file\n\tlocal result, err = self.git:add_patch(tmpfile_name)\n\n\t-- Remove the temporary file\n\tos.remove(tmpfile_path)\n\n\treturn result, err", "CodeBleu_score": 49.698727743263724}]}
{"instance_id": "695fd7138742", "generation_result": [{"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n\trequest.addHeader(OAuthConstants.HEADER_AUTHORIZATION, \"Basic \" + Base64.encode((config.getApiKey() + \":\" + config.getApiSecret()).getBytes(StandardCharsets.UTF_8)));\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n\tResponse response = request.send();\n\treturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 71.59017911191641}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\tOAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n\trequest.addHeader(OAuthConstants.HEADER_AUTHORIZATION, getAuthorizationHeader(requestToken, verifier));\n\trequest.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n\trequest.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n\trequest.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n\trequest.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n\tResponse response = request.send();\n\treturn api.getAccessTokenExtractor().extract(response.getBody());\n}", "CodeBleu_score": 77.29011944328307}, {"code": "public Token getAccessToken(Token requestToken, Verifier verifier){\n\t\n/**\n * This function retrieves an access token using a request token and verifier. It creates an OAuth request to the access token endpoint, adds the necessary authentication header and body parameters, sends the request, and extracts the access token from the response body using the API's access token extractor.\n */\npublic Token getAccessToken(Token requestToken, Verifier verifier) {\n        OAuthRequest request = new OAuthRequest(api.getAccessTokenVerb(), api.getAccessTokenEndpoint());\n        request.addHeader(OAuthConstants.HEADER_AUTHORIZATION, \"Basic \" + Base64.encodeBytes((config.getApiKey() + \":\" + config.getApiSecret()).getBytes(StandardCharsets.UTF_8)));\n        request.addBodyParameter(OAuthConstants.CLIENT_ID, config.getApiKey());\n        request.addBodyParameter(OAuthConstants.CLIENT_SECRET, config.getApiSecret());\n        request.addBodyParameter(OAuthConstants.CODE, verifier.getValue());\n        request.addBodyParameter(GRANT_TYPE_KEY, GRANT_TYPE_CLIENT_CREDENTIALS);\n        Response response = request.send();\n        return api.getAccessTokenExtractor().extract(response.getBody());\n    }\n}", "CodeBleu_score": 69.4266117888336}]}
{"instance_id": "69b663fe4629", "generation_result": [{"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t// Create a credentials provider with the specified credentials\nCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\ncredentialsProvider.setCredentials(new AuthScope(host), httpCredentials);\n\n// Create an authentication cache and add the host to it using the Basic authentication scheme\nAuthCache authCache = new BasicAuthCache();\nauthCache.put(host, new BasicScheme());\n\n// Assign the credentials provider and authentication cache to the context\ncontext.setCredentialsProvider(credentialsProvider);\ncontext.setAuthCache(authCache);\n\n// Log the action of adding the host to the auth cache\nLOGGER.log(Level.FINE, \\\"Added host {0} to the auth cache\\\", host.toURI());\n}", "CodeBleu_score": 67.96233432066416}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t// Create a credentials provider and add the credentials to it\nCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\ncredentialsProvider.setCredentials(new AuthScope(host), httpCredentials);\n\n// Create an auth cache and add the host to it\nAuthCache authCache = new BasicAuthCache();\nauthCache.put(host, new BasicScheme());\n\n// Assign the credentials provider and auth cache to the context\ncontext.setCredentialsProvider(credentialsProvider);\ncontext.setAuthCache(authCache);\n\n// Log the action of adding the host to the auth cache\nLOGGER.log(Level.FINE, \"Added {0} to auth cache\", host.toURI());\n}", "CodeBleu_score": 68.45082604257652}, {"code": "public void configureContext(HttpClientContext context, HttpHost host){\n\t\tCredentialsProvider credentialsProvider = new BasicCredentialsProvider();\n\tcredentialsProvider.setCredentials(new AuthScope(host), httpCredentials);\n\tAuthCache authCache = new BasicAuthCache();\n\tauthCache.put(host, new BasicScheme());\n\tcontext.setCredentialsProvider(credentialsProvider);\n\tcontext.setAuthCache(authCache);\n\tLOGGER.log(Level.FINE, \"Added {0} to the auth cache\", host.toURI());\n}", "CodeBleu_score": 68.45753880368322}]}
{"instance_id": "7e19e17aca40", "generation_result": [{"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins instance = Jenkins.get();\n\tAvatarCache cache = instance.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"No AvatarCache configured\");\n\t}\n\tString key = cache.seed(source);\n\ttry {\n\t\treturn instance.getRootUrl() + ActionURI + \"/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"Unable to encode cache key\", e);\n\t}\n}", "CodeBleu_score": 50.894637619836494}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins jenkins = Jenkins.get();\n\tAvatarCache cache = jenkins.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException(\"No AvatarCache extension\");\n\t}\n\tString key = cache.seed(source);\n\ttry {\n\t\treturn jenkins.getRootUrl() + ActionURI + \"/\" + URLEncoder.encode(key, StandardCharsets.UTF_8.name()) + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(\"UTF-8 encoding unsupported\", e);\n\t}\n}", "CodeBleu_score": 50.978051056541275}, {"code": "public static String buildUrl(@NonNull AvatarCacheSource source, @NonNull String size){\n\t\tJenkins instance = Jenkins.getInstance();\n\tif (instance == null) {\n\t\tthrow new IllegalStateException();\n\t}\n\tAvatarCache cache = instance.getExtensionList(AvatarCache.class).get(AvatarCache.class);\n\tif (cache == null) {\n\t\tthrow new IllegalStateException();\n\t}\n\tString key = cache.seed(source);\n\ttry {\n\t\treturn instance.getRootUrl() + ActionURI + \"/\" + URLEncoder.encode(key, \"UTF-8\") + \"/\" + size;\n\t} catch (UnsupportedEncodingException e) {\n\t\tthrow new IllegalStateException(e);\n\t}\n}", "CodeBleu_score": 48.65976769711611}]}
{"instance_id": "eb919c836652", "generation_result": [{"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tif (image!= null && (image.getWidth() > 128 || image.getHeight() > 128)) {\n\t\tthis.image = scaleImage(image, 128);\n\t} else {\n\t\tthis.image = image;\n\t}\n\tif (lastModified < 0) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t} else {\n\t\tthis.lastModified = lastModified;\n\t}\n}", "CodeBleu_score": 57.93024733241919}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tif (image!= null && (image.getWidth() > 128 || image.getHeight() > 128)) {\n\t\timage = scaleImage(image, 128);\n\t}\n\tthis.image = image;\n\tif (lastModified < 0) {\n\t\tlastModified = System.currentTimeMillis();\n\t}\n\tthis.lastModified = lastModified;\n}", "CodeBleu_score": 51.954711420760965}, {"code": "private CacheEntry(AvatarCacheSource source, BufferedImage image, long lastModified){\n\t\tthis.source = source;\n\tif (image!= null && (image.getWidth() > 128 || image.getHeight() > 128)) {\n\t\tthis.image = scaleImage(image, 128);\n\t} else {\n\t\tthis.image = image;\n\t}\n\tif (lastModified < 0L) {\n\t\tthis.lastModified = System.currentTimeMillis();\n\t} else {\n\t\tthis.lastModified = lastModified;\n\t}\n}", "CodeBleu_score": 57.869009153371834}]}
{"instance_id": "ba8fe511b4aa", "generation_result": [{"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tCacheEntry entry = future.get();\n\t\tif (entry!= null) {\n\t\t\timage = entry.image;\n\t\t\tlastModified = entry.lastModified;\n\t\t\tfuture = null;\n\t\t}\n\t\treturn false;\n\t} catch (InterruptedException | ExecutionException e) {\n\t\treturn true;\n\t}\n}", "CodeBleu_score": 44.557156548819925}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tCacheEntry entry = future.get();\n\t\tif (entry!= null) {\n\t\t\timage = entry.image;\n\t\t\tlastModified = entry.lastModified;\n\t\t\tfuture = null;\n\t\t}\n\t} catch (InterruptedException e) {\n\t\t// ignore\n\t} catch (ExecutionException e) {\n\t\tfuture = null;\n\t}\n\treturn future!= null;\n}", "CodeBleu_score": 42.22330138137772}, {"code": "private synchronized boolean pending(){\n\t\tif (future == null) {\n\t\treturn false;\n\t}\n\ttry {\n\t\tCacheEntry entry = future.get();\n\t\tif (entry!= null) {\n\t\t\timage = entry.image;\n\t\t\tlastModified = entry.lastModified;\n\t\t\tfuture = null;\n\t\t\treturn false;\n\t\t}\n\t} catch (InterruptedException | ExecutionException e) {\n\t\t// ignore\n\t}\n\treturn true;\n}", "CodeBleu_score": 46.71668237687701}]}
{"instance_id": "2b13277fdd7f", "generation_result": [{"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.addDateHeader(\"Last-Modified\", lastModified);\nrsp.addHeader(\"Cache-control\", cacheControl);\nrsp.setContentType(\"image/png\");\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nImageIO.write(image, \"png\", baos);\nif (flushImage) {\n    image.flush();\n}\nrsp.setContentLength(baos.size());\nrsp.getOutputStream().write(baos.toByteArray());\nrsp.getOutputStream().flush();\n}", "CodeBleu_score": 48.55486333097597}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.addHeader(\"Cache-control\", cacheControl);\nif (lastModified > 0L) {\nrsp.addDateHeader(\"Last-Modified\", lastModified);\n}\nrsp.setContentType(\"image/png\");\nByteArrayOutputStream baos = new ByteArrayOutputStream();\nImageIO.write(image, \"png\", baos);\nbyte[] bytes = baos.toByteArray();\nrsp.setContentLength(bytes.length);\nrsp.getOutputStream().write(bytes);\nif (flushImage) {\nimage.flush();\n}\n}", "CodeBleu_score": 60.045970726030426}, {"code": "public void generateResponse(StaplerRequest req, StaplerResponse rsp, Object node)\n                throws IOException, ServletException{\n\trsp.addDateHeader(\"Last-Modified\", lastModified);\nrsp.addHeader(\"Cache-control\", cacheControl);\nByteArrayOutputStream os = new ByteArrayOutputStream();\nImageIO.write(image, \"png\", os);\nif (flushImage) {\n    image.flush();\n}\nrsp.setContentType(\"image/png\");\nrsp.setContentLength(os.size());\nos.writeTo(rsp.getOutputStream());\n}", "CodeBleu_score": 41.949647702902425}]}
{"instance_id": "0bcade75816f", "generation_result": [{"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t", "CodeBleu_score": 7.452943353488384}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\t", "CodeBleu_score": 7.452943353488384}, {"code": "public BitbucketCloudApiClient(boolean enableCache, int teamCacheDuration, int repositoriesCacheDuration,\n            String owner, String projectKey, String repositoryName, BitbucketAuthenticator authenticator){\n\tthis.enableCache = enableCache;\n        this.owner = owner;\n        this.projectKey = projectKey;\n        this.repositoryName = repositoryName;\n        this.authenticator = authenticator;\n        if (enableCache) {\n            cachedTeam.setExpiry(teamCacheDuration, SECONDS);\n            cachedRepositories.setExpiry(repositoriesCacheDuration, SECONDS);\n        }\n        client = HttpClientBuilder.create()\n               .setKeepAliveStrategy(new BitbucketCloudKeepAliveStrategy())\n               .setConnectionManager(connectionManager)\n               .setRetryHandler(new StandardHttpRequestRetryHandler(3, false))\n               .build();\n        if (authenticator!= null) {\n            context = HttpClientContext.create();\n            context.setCredentialsProvider(new BasicCredentialsProvider());\n            context.getCredentialsProvider().setCredentials(new AuthScope(API_HOST),\n                    new UsernamePasswordCredentials(authenticator.getUsername(), authenticator.getPassword()));\n            context.setAuthCache(new BasicAuthCache());\n            context.getAuthCache().put(API_HOST, new BasicScheme());\n        }\n        ProxyConfiguration proxy = Jenkins.get().proxy;\n        if (proxy!= null) {\n            client = client.newBuilder()\n                   .setProxy(new HttpHost(proxy.name, proxy.port))\n                   .build();\n        }\n    }", "CodeBleu_score": 48.40453324224511}]}
{"instance_id": "3a55763e86c1", "generation_result": [{"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\t// Get source branch\n\tBitbucketPullRequestSource source = pullRequest.getSource();\n\tif (source!= null) {\n\t\tString sourceBranch = source.getBranch();\n\t\tif (sourceBranch!= null) {\n\t\t\tString sourceNode = source.getCommit().getHash();\n\t\t\tif (sourceNode!= null) {\n\t\t\t\tpullRequest.setSourceCommit(new CommitClosure(sourceNode));\n\t\t\t}\n\t\t}\n\t}\n\n\t// Get destination branch\n\tBitbucketPullRequestDestination destination = pullRequest.getDestination();\n\tif (destination!= null) {\n\t\tString destinationBranch = destination.getBranch();\n\t\tif (destinationBranch!= null) {\n\t\t\tString destinationNode = destination.getCommit().getHash();\n\t\t\tif (destinationNode!= null) {\n\t\t\t\tpullRequest.setDestinationCommit(new CommitClosure(destinationNode));\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.945641716613814}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\t\t// Get the source branch\n\tBitbucketPullRequestSource source = pullRequest.getSource();\n\tBitbucketPullRequestRepository sourceRepo = source.getRepository();\n\tString sourceBranch = source.getBranch().getName();\n\tif (sourceRepo!= null) {\n\t\t// Assign a new CommitClosure based on the branch's raw node\n\t\tsource.setCommit(new CommitClosure(sourceRepo.getLinks().getSelf().getHref() + \"/commit/\" + sourceBranch));\n\t}\n\n\t// Get the destination branch\n\tBitbucketPullRequestDestination destination = pullRequest.getDestination();\n\tString destinationBranch = destination.getBranch().getName();\n\tif (destinationBranch!= null) {\n\t\t// Assign a new CommitClosure based on the branch's raw node\n\t\tdestination.setCommit(new CommitClosure(destinationBranch));\n\t}\n}", "CodeBleu_score": 36.40485027345955}, {"code": "private void setupClosureForPRBranch(BitbucketPullRequestValue pullRequest){\n\tif (pullRequest.getSource()!= null && pullRequest.getSource().getBranch()!= null) {\nString sourceBranch = pullRequest.getSource().getBranch().getName();\npullRequest.getSource().getBranch().setCommit(new CommitClosure(sourceBranch));\n}\nif (pullRequest.getDestination()!= null && pullRequest.getDestination().getBranch()!= null) {\nString destinationBranch = pullRequest.getDestination().getBranch().getName();\npullRequest.getDestination().getBranch().setCommit(new CommitClosure(destinationBranch));\n}\n}", "CodeBleu_score": 38.32790142712852}]}
{"instance_id": "f8fdc6ac34d2", "generation_result": [{"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\n\tif (jlc == null || jlc.getUrl() == null) {\n\t\tthrow new IllegalStateException(\"JenkinsLocationConfiguration or URL is null\");\n\t}\n\treturn DisplayURLProvider.get().getRootDisplayURL(build);\n}", "CodeBleu_score": 64.37433615244802}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tenkinsLocationConfiguration jenkinsLocationConfiguration = JenkinsLocationConfiguration.get();\nif (jenkinsLocationConfiguration == null || jenkinsLocationConfiguration.getUrl() == null) {\nthrow new IllegalStateException(\\\"Jenkins location configuration not set\\\");\n}\nreturn DisplayURLProvider.get().getRootDisplayURL();\n}", "CodeBleu_score": 51.21846775144281}, {"code": "private static String getRootURL(@NonNull Run<?, ?> build){\n\tJenkinsLocationConfiguration jlc = JenkinsLocationConfiguration.get();\n\tif (jlc == null || jlc.getUrl() == null) {\n\t\tthrow new IllegalStateException(\\\"Jenkins location configuration is not defined\\\");\n\t}\n\treturn DisplayURLProvider.get().getRunURL(build);\n}", "CodeBleu_score": 60.13674431333311}]}
{"instance_id": "80415d8563e2", "generation_result": [{"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tURL u = null;\n\ttry {\n\t\tu = new URL(url);\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(String.format(\\\"Invalid Jenkins URL: %s\\\", url));\n\t}\n\tif (\\\"localhost\\\".equals(u.getHost())) {\n\t\tthrow new IllegalStateException(String.format(\\\"Invalid Jenkins URL: %s\\\", url));\n\t}\n\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\tif (StringUtils.isBlank(u.getHost())) {\n\t\t\tthrow new IllegalStateException(String.format(\\\"Invalid Jenkins URL: %s\\\", url));\n\t\t}\n\t}\n\treturn url;\n}", "CodeBleu_score": 43.19196172010731}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\try {\nURL u = new URL(url);\nif (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\nthrow new IllegalStateException(\"Jenkins URL must be fully qualified and cannot use \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\" as the host.\");\n}\nif (bitbucket instanceof BitbucketCloudApiClient) {\nif (StringUtils.isBlank(u.getHost()) || u.getHost().contains(\":\")) {\nthrow new IllegalStateException(\"Jenkins URL must be fully qualified and cannot use \\\"localhost\\\" or \\\"unconfigured-jenkins-location\\\" as the host.\");\n}\n}\n} catch (MalformedURLException e) {\nthrow new IllegalStateException(\"Jenkins URL must be well-formed.\");\n}\nreturn url;\n}", "CodeBleu_score": 62.739587633056225}, {"code": "static String checkURL(@NonNull String url, BitbucketApi bitbucket) {\n\tif (StringUtils.isBlank(url)) {\n\t\tthrow new IllegalStateException(\"Could not determine Jenkins URL.\");\n\t}\n\ttry {\n\t\tURL u = new URL(url);\n\t\tif (u.getHost().equals(\"localhost\") || u.getHost().equals(\"unconfigured-jenkins-location\")) {\n\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified.\");\n\t\t}\n\t\tif (bitbucket instanceof BitbucketCloudApiClient) {\n\t\t\tif (StringUtils.isBlank(u.getHost())) {\n\t\t\t\tthrow new IllegalStateException(\"Jenkins URL must be fully qualified.\");\n\t\t\t}\n\t\t}\n\t} catch (MalformedURLException e) {\n\t\tthrow new IllegalStateException(\"Jenkins URL is malformed.\", e);\n\t}\n\treturn url;\n}", "CodeBleu_score": 60.18991427764562}]}
{"instance_id": "a00613493272", "generation_result": [{"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t//        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n//        if (context.isDisableNotifications()) {\n//            listener.getLogger().println(\"[Bitbucket] Notifications are disabled for this project\");\n//            return;\n//        }\n//        SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n//        if (revision == null) {\n//            listener.getLogger().println(\"[Bitbucket] Could not determine the revision of the build\");\n//            return;\n//        }\n//        String hash = revision.getHash();\n//        if (hash == null) {\n//            listener.getLogger().println(\"[Bitbucket] Could not determine the hash of the build\");\n//            return;\n//        }\n//        listener.getLogger().println(\"[Bitbucket] Sending notification for build \" + hash);\n//        String buildKey = context.getBuildKey();\n//        if (buildKey == null) {\n//            buildKey = context.getBuildKey(revision);\n//        }\n//        if (buildKey == null) {\n//            listener.getLogger().println(\"[Bitbucket] Could not determine the build key\");\n//            return;\n//        }\n//        BitbucketApi bitbucket = source.getBitbucketClient();\n//        if (bitbucket == null) {\n//            listener.getLogger().println(\"[Bitbucket] Could not determine the Bitbucket client\");\n//            return;\n//        }\n//        createStatus(build, listener, bitbucket, buildKey, hash);\n    }", "CodeBleu_score": 3.576675352310955}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\n// Initialize the Bitbucket context and check if notifications are disabled.\n        BitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none()).withTraits(source.getTraits());\n        if (context.isNotificationsDisabled()) {\n            listener.getLogger().println(\"[Bitbucket] Notifications are disabled\");\n            return;\n        }\n\n// Retrieve the SCM revision and its hash.\n        SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n        String hash = revision.getHash().toString();\n\n// Determine whether to share the build key between branch and PR.\n        boolean shareBuildKey = context.isShareBuildStatusWithPR();\n\n// Based on the revision type, log the notification type, construct the build key, and initialize the Bitbucket client.\n        String key;\n        BitbucketApi bitbucket;\n        if (revision instanceof BitbucketSCMRevision) {\n            BitbucketSCMRevision bitbucketRevision = (BitbucketSCMRevision) revision;\n            listener.getLogger().println(\"[Bitbucket] Sending commit status notification\");\n            key = bitbucketRevision.getCommitKey();\n            bitbucket = bitbucketRevision.getBitbucketApi();\n        } else if (revision instanceof BitbucketPRSCMRevision) {\n            BitbucketPRSCMRevision bitbucketRevision = (BitbucketPRSCMRevision) revision;\n            listener.getLogger().println(\"[Bitbucket] Sending pull request status notification\");\n            key = shareBuildKey? bitbucketRevision.getCommitKey() : bitbucketRevision.getPullRequestKey();\n            bitbucket = bitbucketRevision.getBitbucketApi();\n        } else {\n            listener.getLogger().println(\"[Bitbucket] Sending build status notification\");\n            key = build.getDisplayName();\n            bitbucket = BitbucketApiFactory.createApi(context);\n        }\n\n// Create and send the build status notification.\n        createStatus(build, listener, bitbucket, key, hash);\n    }", "CodeBleu_score": 53.33215041650771}, {"code": "private static void sendNotifications(BitbucketSCMSource source, Run<?, ?> build, TaskListener listener)\n            throws IOException, InterruptedException{\n\t\nBitbucketSCMSourceContext context = new BitbucketSCMSourceContext(null, SCMHeadObserver.none())\n               .withTraits(source.getTraits());\n\nif (context.isNotifyCommitters()) {\n            SCMRevision revision = build.getAction(SCMRevisionAction.class).getRevision();\n            if (revision instanceof BitbucketSCMRevision) {\n                BitbucketSCMRevision bsr = (BitbucketSCMRevision) revision;\n                String hash = bsr.getHash();\n                String key = context.getBuildStatusKey();\n                if (key == null) {\n                    if (bsr.isPullRequest()) {\n                        key = bsr.getPullRequestId();\n                    } else {\n                        key = bsr.getBranch();\n                    }\n                }\n                listener.getLogger().println(\"[Bitbucket] Sending notification for build \" + build.getNumber() + \" of \" + revision.getHead().getName());\n                BitbucketApi bitbucket = context.bitbucketApi();\n                if (bitbucket!= null) {\n                    createStatus(build, listener, bitbucket, key, hash);\n                }\n            }\n        }\n    }", "CodeBleu_score": 43.05722057796824}]}
{"instance_id": "c19361ed6737", "generation_result": [{"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t if (shareBuildKeyBetweenBranchAndPR) {\n     return build.getParent().getFullName() + \"/\" + branch;\n }\n return build.getFullDisplayName();\n }", "CodeBleu_score": 26.504727639219784}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t if (shareBuildKeyBetweenBranchAndPR) {\n return build.getParent().getFullName() + \"/\" + branch;\n } else {\n return build.getParent().getFullName();\n }\n }", "CodeBleu_score": 27.549471539472613}, {"code": " private static String getBuildKey(@NonNull Run<?, ?> build, String branch,\n        boolean shareBuildKeyBetweenBranchAndPR){\n\t if (shareBuildKeyBetweenBranchAndPR) {\n     return build.getParent().getFullName() + '/' + branch;\n } else {\n     return build.getFullDisplayName();\n }\n }", "CodeBleu_score": 26.694735312178302}]}
{"instance_id": "5f659b29a99e", "generation_result": [{"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (this.serverUrl == null) {\n\t\tthis.serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n\t}\n\tif (this.traits == null) {\n\t\tLOGGER.log(Level.WARNING, \"traits were null, reconstructing to reflect legacy behavior\");\n\t\tthis.traits = new ArrayList<>();\n\t\tthis.traits.add(new BranchDiscoveryTrait(true, true));\n\t\tthis.traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n\t\tthis.traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\n\t\t\t\tnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\n\t\tthis.traits.add(new PublicRepoPullRequestFilterTrait());\n\t\tif (this.checkoutCredentialsId!= null\n\t\t\t\t&&!BitbucketSCMSource.DescriptorImpl.SAME.equals(this.checkoutCredentialsId)) {\n\t\t\tthis.traits.add(new SSHCheckoutTrait(this.checkoutCredentialsId));\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 28.277761273833402}, {"code": "private Object readResolve() throws ObjectStreamException{\n\tif (this.serverUrl == null) {\nthis.serverUrl = BitbucketCloudEndpoint.SERVER_URL;\nLOGGER.log(Level.WARNING, \"serverUrl was null for {0}, using default value {1}\", new Object[]{this, this.serverUrl});\n}\nif (this.traits == null) {\nthis.traits = new ArrayList<>();\nthis.traits.add(new BranchDiscoveryTrait(true, true));\nthis.traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\nthis.traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\nnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\nthis.traits.add(new PublicRepoPullRequestFilterTrait());\nif (this.checkoutCredentialsId!= null\n&&!BitbucketSCMSource.DescriptorImpl.SAME.equals(this.checkoutCredentialsId)) {\nthis.traits.add(new SSHCheckoutTrait(this.checkoutCredentialsId));\n}\n}\nreturn this;\n}", "CodeBleu_score": 27.619730861950163}, {"code": "private Object readResolve() throws ObjectStreamException{\n\t\tif (this.serverUrl == null) {\n\t\tthis.serverUrl = BitbucketCloudEndpoint.SERVER_URL;\n\t\tLOGGER.log(Level.WARNING, \"Server URL was null for BitbucketSCMNavigator object. Setting to Bitbucket Cloud URL.\");\n\t}\n\tif (this.traits == null) {\n\t\tLOGGER.log(Level.WARNING, \"Traits were null for BitbucketSCMNavigator object. Reconstructing legacy traits to reflect legacy behavior.\");\n\t\tthis.traits = new ArrayList<>();\n\t\tthis.traits.add(new BranchDiscoveryTrait(true, true));\n\t\tthis.traits.add(new OriginPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD)));\n\t\tthis.traits.add(new ForkPullRequestDiscoveryTrait(EnumSet.of(ChangeRequestCheckoutStrategy.HEAD),\n\t\t\t\tnew ForkPullRequestDiscoveryTrait.TrustEveryone()));\n\t\tthis.traits.add(new PublicRepoPullRequestFilterTrait());\n\t\tif (this.checkoutCredentialsId!= null\n\t\t\t\t&&!BitbucketSCMSource.DescriptorImpl.SAME.equals(this.checkoutCredentialsId)) {\n\t\t\tthis.traits.add(new SSHCheckoutTrait(this.checkoutCredentialsId));\n\t\t}\n\t}\n\treturn this;\n}", "CodeBleu_score": 34.82864905076978}]}
{"instance_id": "8be16b5a10cb", "generation_result": [{"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repo = request.getBitbucketRepository(name);\n\tif (repo!= null) {\n\t\tif (isMatch) {\n\t\t\tlistener.getLogger().format(\"Proposing repository %s%n\", name);\n\t\t\tcount++;\n\t\t} else {\n\t\t\tlistener.getLogger().format(\"Ignoring repository %s%n\", name);\n\t\t}\n\t} else {\n\t\tlistener.getLogger().format(\"Ignoring repository %s%n\", name);\n\t}\n}", "CodeBleu_score": 54.878634696662765}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repo = request.getRepositories().get(name);\n\tif (repo == null) {\n\t\tlistener.getLogger().format(\n\t\t\t\t\"Could not find repository %s for %s%n\",\n\t\t\t\tname,\n\t\t\t\trequest.getNavigator().getRepoOwner());\n\t\treturn;\n\t}\n\tif (isMatch) {\n\t\tlistener.getLogger().format(\n\t\t\t\t\"Proposing repository %s for %s%n\",\n\t\t\t\tname,\n\t\t\t\trequest.getNavigator().getRepoOwner());\n\t\tcount++;\n\t} else {\n\t\tlistener.getLogger().format(\n\t\t\t\t\"Ignoring repository %s for %s%n\",\n\t\t\t\tname,\n\t\t\t\trequest.getNavigator().getRepoOwner());\n\t}\n}", "CodeBleu_score": 48.51134487535389}, {"code": "public void record(@NonNull String name, boolean isMatch){\n\t\tBitbucketRepository repo = request.getBitbucketRepository(name);\n\tif (repo == null) {\n\t\treturn;\n\t}\n\tString message = isMatch? \"Proposing %s\" : \"Ignoring %s\";\n\tlistener.getLogger().format(message, repo.getFullName());\n\tif (isMatch) {\n\t\tcount++;\n\t}\n}", "CodeBleu_score": 45.51503310517566}]}
{"instance_id": "a6b5821e3001", "generation_result": [{"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t", "CodeBleu_score": 7.465730872593649}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t", "CodeBleu_score": 7.465730872593649}, {"code": "public Revision decorateRevisionToBuild(\n        GitSCM scm,\n        Run<?, ?> build,\n        GitClient git,\n        TaskListener listener,\n        Revision marked,\n        Revision rev\n    ) throws InterruptedException{\n\t", "CodeBleu_score": 7.465730872593649}]}
{"instance_id": "58004de8c64f", "generation_result": [{"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue().get(0));\n}\nreturn result;\n}", "CodeBleu_score": 66.14145037349569}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue().get(0));\n}\nreturn result;\n}", "CodeBleu_score": 66.14145037349569}, {"code": "public Map<String, BitbucketHref> getLinks(){\n\t(links == null) {\nreturn null;\n}\nMap<String, BitbucketHref> result = new HashMap<>();\nfor (Map.Entry<String, List<BitbucketHref>> entry : links.entrySet()) {\nresult.put(entry.getKey(), entry.getValue().get(0));\n}\nreturn result;\n}", "CodeBleu_score": 66.14145037349569}]}
{"instance_id": "bf7825346651", "generation_result": [{"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = resourceStates.map((resource) => resource.resourceUri);\n\tconst repositories = await this.getRepositories(resources);\n\tfor (const repository of repositories) {\n\t\tconst files = resources.map((resource) => repository.toFilePath(resource));\n\t\ttry {\n\t\t\tawait repository.add(files);\n\t\t} catch (error) {\n\t\t\tthis.logger.error(error);\n\t\t\twindow.showErrorMessage(error.message);\n\t\t}\n\t}\n}", "CodeBleu_score": 41.67803893838976}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = resourceStates.length === 0? await this.getScmResourceStates() : resourceStates;\n\tif (resources.length === 0) {\n\t\treturn;\n\t}\n\n\tconst byRepo = _.groupBy(resources, resource => this.getRepo(resource));\n\tfor (const repo of Object.keys(byRepo)) {\n\t\tconst files = byRepo[repo].map(resource => resource.resourceUri.fsPath);\n\t\ttry {\n\t\t\tawait this.executeCommand(repo, \\\"add\\\",...files);\n\t\t} catch (e) {\n\t\t\tthis.log.error(e);\n\t\t\twindow.showErrorMessage(e.message);\n\t\t}\n\t}\n}", "CodeBleu_score": 42.034648330165396}, {"code": "public async execute(...resourceStates: SourceControlResourceState[]){\n\t\tconst resources = resourceStates.length? resourceStates : await this.getSCMResourceStates();\n\tif (!resources.length) return;\n\n\tconst repositories = await this.getRepositories(resources);\n\tfor (const repository of repositories) {\n\t\tconst files = resources.filter(r => r.resourceUri.scheme === repository.scheme).map(r => r.resourceUri.fsPath);\n\t\ttry {\n\t\t\tawait repository.add(files);\n\t\t} catch (error) {\n\t\t\tthis.logError(error);\n\t\t\twindow.showErrorMessage(`Error adding files to repository: ${error.message}`);\n\t\t}\n\t}\n}", "CodeBleu_score": 45.59808254564577}]}
{"instance_id": "21845a480c9e", "generation_result": [{"code": "protected async getResourceStates{\n\tconst resourceStates = await this.getResourceStates(repository, resourceStates);\n\n\tif (resourceStates.length === 0 ||!(resourceStates[0].resource instanceof Uri)) {\n\t\tconst resource = await this.getResource(repository, resourceStates[0].resource);\n\n\t\tif (resource) {\n\t\t\tresourceStates[0] = {\n\t\t\t\tresource: resource.resourceUri,\n\t\t\t\tcommand: resource.command\n\t\t\t};\n\t\t}\n\t}\n\n\treturn resourceStates.filter(resourceState => resourceState.resource instanceof Uri) as Resource[];\n}", "CodeBleu_score": 40.20063748609155}, {"code": "protected async getResourceStates{\n\tconst { resourceStates } = await commands.executeCommand<SourceControlResourceState[]>(\n\t\t\"vscode.getScmResourceStates\",\n\t\turi\n\t);\n\n\tif (\n\t\t!resourceStates.length ||\n\t\t!(resourceStates[0].resourceUri instanceof Uri)\n\t) {\n\t\tconst resource = await this.getScmResource(uri);\n\n\t\tif (resource) {\n\t\t\tresourceStates.push(resource);\n\t\t}\n\t}\n\n\treturn resourceStates.filter(\n\t\t(resourceState): resourceState is Resource =>\n\t\t\tresourceState instanceof Resource\n\t);\n}", "CodeBleu_score": 44.700042241697005}, {"code": "protected async getResourceStates{\n\tconst resourceStates = await this.getResourceStates(resourceStates);\n\n\tif (\n\t\tresourceStates.length === 0 ||\n\t\t!resourceStates[0].resourceUri ||\n\t\t!Uri.isUri(resourceStates[0].resourceUri)\n\t) {\n\t\tconst resource = await this.getResource(resourceStates[0].resourceUri);\n\n\t\tif (resource) {\n\t\t\tresourceStates.push(resource);\n\t\t}\n\t}\n\n\treturn resourceStates.filter(\n\t\tresourceState => resourceState instanceof Resource\n\t) as Resource[];\n}", "CodeBleu_score": 44.936362022723245}]}
{"instance_id": "9cdf8c671ccf", "generation_result": [{"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t * If the URI is not provided, it gets the active text editor and its document. If the document is not a text document, it returns undefined.\n */\n    if (!uri) {\n      const editor = window.activeTextEditor;\n\n      if (!editor) {\n        return undefined;\n      }\n\n      const doc = editor.document;\n\n      if (!doc || doc.isUntitled) {\n        return undefined;\n      }\n/**\n * If the document is a text document, it gets the URI of the document and converts it to a file URI.\n */\n      uri = doc.uri;\n    }\n/**\n * If the URI is not a file URI, it returns undefined.\n */\n    if (uri.scheme!== \\\"file\\\") {\n      return undefined;\n    }\n/**\n * It gets the source control manager, the repository for the URI, and the resource for the URI. If the repository or the resource are not found, it returns undefined.\n */\n    const sourceControlManager = (await commands.executeCommand(\n      \\\"svn.getSourceControlManager\\\",\n      \\\"\\\"\n    )) as SourceControlManager;\n    const repository = sourceControlManager.getRepository(uri);\n    const resource = repository?.getResource(uri);\n\n    if (!repository ||!resource) {\n      return undefined;\n    }\n/**\n * It returns the resource.\n */\n    return resource;\n  }", "CodeBleu_score": 50.79083996086453}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t\n * This line checks if the URI is in the \"svn\" scheme. If it is, it converts it to a file URI using the fromSvnUri function.\n */\n    if (uri && uri.scheme === \"svn\") {\n      uri = fromSvnUri(uri);\n    }\n\n/**\n * This line checks if the URI is a file URI. If it is not, it returns undefined.\n */\n    if (!uri || uri.scheme!== \"file\") {\n      return undefined;\n    }\n\n/**\n * This line gets the source control manager using the \"svn.getSourceControlManager\" command.\n */\n    const sourceControlManager = (await commands.executeCommand(\n      \"svn.getSourceControlManager\",\n      \"\"\n    )) as SourceControlManager;\n\n/**\n * This line gets the repository for the URI using the getRepository method of the source control manager.\n */\n    const repository = sourceControlManager.getRepository(uri);\n\n/**\n * This line checks if the repository is defined. If it is not, it returns undefined.\n */\n    if (!repository) {\n      return undefined;\n    }\n\n/**\n * This line gets the SCM resource for the URI using the getResource method of the repository.\n */\n    const resource = repository.getResource(uri);\n\n/**\n * This line checks if the SCM resource is defined. If it is not, it returns undefined.\n */\n    if (!resource) {\n      return undefined;\n    }\n\n/**\n * This line returns the SCM resource.\n */\n    return resource;\n  }", "CodeBleu_score": 62.90977548386958}, {"code": "  protected async getSCMResource(uri?: Uri): Promise<Resource | undefined>{\n\t(!uri) {\n\t\tconst editor = window.activeTextEditor;\n\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\turi = editor.document.uri;\n\t}\n\n\tif (uri.scheme ==='svn') {\n\t\turi = fromSvnUri(uri);\n\t}\n\n\tconst sourceControlManager = (await commands.executeCommand(\n\t\t'svn.getSourceControlManager',\n\t\t''\n\t)) as SourceControlManager;\n\n\tconst repository = sourceControlManager.getRepository(uri);\n\n\tif (!repository) {\n\t\treturn undefined;\n\t}\n\n\treturn repository.getScmResource(uri);\n}", "CodeBleu_score": 57.00912076582512}]}
{"instance_id": "5149f80daf8e", "generation_result": [{"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = await this.model.getRepository(element.localPath);\n if (element.item === Status.MODIFIED) {\n await openDiff(repo, element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n } else if (element.item === Status.ADDED) {\n await openFileRemote(repo, element.newPath, element.newRevision);\n }\n }", "CodeBleu_score": 61.638996867461394}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = await this.model.getRepository(element.localPath);\n if (repo === undefined) {\n return;\n }\n if (element.item === Status.MODIFIED) {\n await openDiff(\n element.repo.fsPath,\n element.oldPath.fsPath,\n element.oldRevision,\n element.newPath.fsPath,\n element.newRevision\n );\n } else if (element.item === Status.ADDED) {\n await openFileRemote(\n element.repo.fsPath,\n element.newPath.fsPath,\n element.newRevision\n );\n }\n }", "CodeBleu_score": 58.036622665920554}, {"code": " public async openDiffCmd(element: ISvnPathChange){\n\tconst repo = element.repo;\n if (element.item === Status.MODIFIED) {\n await openDiff(repo, element.oldPath, element.newPath, element.oldRevision, element.newRevision);\n } else if (element.item === Status.ADDED) {\n await openFileRemote(repo, element.newPath, element.newRevision);\n }\n }", "CodeBleu_score": 47.955780111486504}]}
{"instance_id": "a08f0266eabb", "generation_result": [{"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard) {\n\t\twindow.showErrorMessage(\n\t\t\t`The clipboard is not supported in this environment.`\n\t\t);\n\t\treturn;\n\t}\n\n\tif (item.kind === LogTreeItemKind.Commit) {\n\t\tconst entry = item.data as ISvnLogEntry;\n\t\tconst commit =\n\t\t\twhat === \"revision\"? entry.revision : entry.message.join(`\n`);\n\t\tawait env.clipboard.writeText(commit);\n\t}\n}", "CodeBleu_score": 47.49753263704599}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tconst { kind, data } = item;\n\tif (kind === LogTreeItemKind.Commit) {\n\t\tconst { revision, message } = data as ISvnLogEntry;\n\t\tconst commit = what === \\\"revision\\\"? revision : message;\n\t\tif (!env.clipboard) {\n\t\t\twindow.showErrorMessage(\\\"Clipboard is not supported in this environment\\\");\n\t\t\treturn;\n\t\t}\n\t\tawait env.clipboard.writeText(commit);\n\t}\n}", "CodeBleu_score": 32.25320083646445}, {"code": "export async function copyCommitToClipboard(what: string, item: ILogTreeItem){\n\t\tif (!env.clipboard) {\n\t\twindow.showErrorMessage(\n\t\t\t\\\"Clipboard is not supported by this platform\\\"\n\t\t);\n\t\treturn;\n\t}\n\n\tif (item.kind === LogTreeItemKind.Commit) {\n\t\tconst entry = item.data as ISvnLogEntry;\n\t\tif (what === \\\"message\\\") {\n\t\t\tawait env.clipboard.writeText(entry.msg);\n\t\t} else {\n\t\t\tawait env.clipboard.writeText(entry.revision.toString());\n\t\t}\n\t}\n}", "CodeBleu_score": 39.80539876357675}]}
{"instance_id": "65ea1cc73c3d", "generation_result": [{"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\t", "CodeBleu_score": 1.4654881322104412}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tGiteaConnectionFactory factory = null;\n\tfor (GiteaConnectionFactory f : ServiceLoader.load(GiteaConnectionFactory.class, classLoader())) {\n\t\tif (f.canOpen(this)) {\n\t\t\tfactory = f;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (factory == null) {\n\t\tthrow new IOException(\"No GiteaConnectionFactory implementation available that can open a connection\");\n\t}\n\treturn factory.open(this);\n}", "CodeBleu_score": 30.14358291128837}, {"code": "public GiteaConnection open() throws IOException, InterruptedException{\n\tif (classLoader == null) {\n\t\tclassLoader = Thread.currentThread().getContextClassLoader();\n\t}\n\tfor (GiteaConnectionFactory factory : ServiceLoader.load(GiteaConnectionFactory.class, classLoader)) {\n\t\tif (factory.canOpen(this)) {\n\t\t\treturn factory.open(this);\n\t\t}\n\t}\n\tthrow new IOException(\"Unable to open a connection to Gitea at \" + serverUrl);\n}", "CodeBleu_score": 32.2448909400698}]}
{"instance_id": "aaf07318bc5b", "generation_result": [{"code": "public Gitea jenkinsPluginClassLoader(){\n\tassLoader classLoader = Jenkins.get()!= null? Jenkins.get().getPluginManager().uberClassLoader : Gitea.class.getClassLoader();\nreturn classLoader(classLoader);\n}", "CodeBleu_score": 42.127213194087545}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tassLoader classLoader = Jenkins.get().getPluginManager().uberClassLoader;\nif (classLoader == null) {\nclassLoader = Gitea.class.getClassLoader();\n}\nreturn classLoader(classLoader);\n}", "CodeBleu_score": 40.948239046890286}, {"code": "public Gitea jenkinsPluginClassLoader(){\n\tassLoader classLoader = Jenkins.get()!= null? Jenkins.get().pluginManager.uberClassLoader : getClass().getClassLoader();\nreturn classLoader(classLoader);\n}", "CodeBleu_score": 45.58175380032488}]}
{"instance_id": "db7157e73a2b", "generation_result": [{"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = StringUtils.trimToNull(displayName);\n        this.serverUrl = normalizeServerUrl(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = credentialsId;\n        this.aliasUrl = normalizeServerUrl(aliasUrl);\n    }", "CodeBleu_score": 36.23713098429302}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\tthis.displayName = Util.fixEmptyAndTrim(displayName);\n        this.serverUrl = Util.fixEmptyAndTrim(serverUrl);\n        this.manageHooks = manageHooks;\n        this.credentialsId = Util.fixEmptyAndTrim(credentialsId);\n        this.aliasUrl = Util.fixEmptyAndTrim(aliasUrl);\n        if (aliasUrl!= null) {\n            this.aliasUrl = this.aliasUrl.trim();\n        }\n        if (this.serverUrl == null) {\n            throw new IllegalArgumentException(\\\"serverUrl is required\\\");\n        }\n        if (this.credentialsId!= null &&!this.manageHooks) {\n            throw new IllegalArgumentException(\\\"credentialsId is set, but manageHooks is false\\\");\n        }\n        if (this.credentialsId == null && this.manageHooks) {\n            throw new IllegalArgumentException(\\\"credentialsId is not set, but manageHooks is true\\\");\n        }\n        if (this.displayName == null) {\n            this.displayName = inferDisplayName(this.serverUrl);\n        }\n    }", "CodeBleu_score": 37.56520444237433}, {"code": "public GiteaServer(@CheckForNull String displayName, @NonNull String serverUrl, boolean manageHooks,\n                       @CheckForNull String credentialsId, @CheckForNull String aliasUrl) {\n\t", "CodeBleu_score": 12.653061224489798}]}
{"instance_id": "1e52cb0f058b", "generation_result": [{"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n\tString url = GiteaServers.normalizeServerUrl(serverUrl);\n\treturn new StandardListBoxModel()\n\t\t\t.withEmptySelection()\n\t\t\t.withMatching(\n\t\t\t\t\tCredentialsMatchers.anyOf(\n\t\t\t\t\t\t\tCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n\t\t\t\t\t\t\tCredentialsMatchers.instanceOf(StandardCertificateCredentials.class)\n\t\t\t\t\t),\n\t\t\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\t\t\tJenkins.get(),\n\t\t\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(url).build()\n\t\t\t\t\t)\n\t\t\t)\n\t\t\t.withMatching(\n\t\t\t\t\tAuthenticationTokens.matcher(GiteaAuth.class),\n\t\t\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\t\t\tJenkins.get(),\n\t\t\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\t\t\tURIRequirementBuilder.fromUri(url).build()\n\t\t\t\t\t)\n\t\t\t);\n}", "CodeBleu_score": 46.2849251112954}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\t\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\n\tserverUrl = GiteaServers.normalizeServerUrl(serverUrl);\n\tStandardListBoxModel result = new StandardListBoxModel();\n\tresult.add(Messages.GiteaServer_selectCredentials(), \"\");\n\tresult.withMatching(\n\t\t\tCredentialsMatchers.anyOf(\n\t\t\t\t\tCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\n\t\t\t\t\tCredentialsMatchers.instanceOf(StandardCertificateCredentials.class)\n\t\t\t),\n\t\t\tCredentialsProvider.lookupCredentials(\n\t\t\t\t\tStandardCredentials.class,\n\t\t\t\t\tJenkins.get(),\n\t\t\t\t\tACL.SYSTEM,\n\t\t\t\t\tURIRequirementBuilder.fromUri(serverUrl).build()\n\t\t\t)\n\t).includeEmptyValue();\n\treturn result;\n}", "CodeBleu_score": 59.16409847566826}, {"code": "public ListBoxModel doFillCredentialsIdItems(@QueryParameter String serverUrl){\n\tJenkins.get().checkPermission(Jenkins.ADMINISTER);\nserverUrl = GiteaServers.normalizeServerUrl(serverUrl);\nreturn new StandardListBoxModel()\n.withEmptySelection()\n.withMatching(\nCredentialsMatchers.anyOf(\nCredentialsMatchers.instanceOf(StandardUsernamePasswordCredentials.class),\nCredentialsMatchers.instanceOf(StandardCertificateCredentials.class)\n),\nCredentialsProvider.lookupCredentials(\nStandardCredentials.class,\nJenkins.get(),\nACL.SYSTEM,\nURIRequirementBuilder.fromUri(serverUrl).build()\n)\n);\n}", "CodeBleu_score": 48.7046551654901}]}
{"instance_id": "7efa03739d4c", "generation_result": [{"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (serverUrl == null) {\n\t\treturn \"\";\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tString scheme = uri.getScheme().toLowerCase(Locale.ROOT);\n\t\tString host = uri.getHost().toLowerCase(Locale.ROOT);\n\t\tint port = uri.getPort();\n\t\tif (port == -1) {\n\t\t\tport = scheme.equals(\"http\")? 80 : 443;\n\t\t}\n\t\tif (port == 80 && scheme.equals(\"http\") || port == 443 && scheme.equals(\"https\")) {\n\t\t\tport = -1;\n\t\t}\n\t\tString path = uri.getPath();\n\t\tif (path.endsWith(\"/\")) {\n\t\t\tpath = path.substring(0, path.length() - 1);\n\t\t}\n\t\treturn String.format(\"%s://%s%s%s\", scheme, host, port == -1? \"\" : \":\" + port, path);\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 44.96835154920345}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isEmpty(serverUrl)) {\n\t\treturn \"\";\n\t}\n\ttry {\n\t\tURI uri = new URI(serverUrl);\n\t\tserverUrl = uri.normalize().toString();\n\t} catch (URISyntaxException e) {\n\t\t// ignore\n\t}\n\tserverUrl = serverUrl.toLowerCase(Locale.ROOT);\n\tserverUrl = serverUrl.replaceAll(\"(:80|:443)$\", \"\");\n\tserverUrl = Util.fixEmptyAndTrim(serverUrl);\n\tif (serverUrl.endsWith(\"/\")) {\n\t\tserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n\t}\n\treturn serverUrl;\n}", "CodeBleu_score": 30.727981622660295}, {"code": "public static String normalizeServerUrl(@CheckForNull String serverUrl){\n\tif (StringUtils.isBlank(serverUrl)) {\nreturn \"\";\n}\ntry {\nURI uri = new URI(serverUrl);\nString scheme = uri.getScheme();\nString host = uri.getHost();\nint port = uri.getPort();\nString path = uri.getPath();\nString query = uri.getQuery();\nString fragment = uri.getFragment();\nif (scheme == null) {\nscheme = \"http\";\n}\nif (host == null) {\nhost = \"\";\n}\nif (port == -1) {\nif (\"http\".equalsIgnoreCase(scheme)) {\nport = 80;\n} else if (\"https\".equalsIgnoreCase(scheme)) {\nport = 443;\n}\n}\nif (path == null) {\npath = \"\";\n}\nif (query == null) {\nquery = \"\";\n}\nif (fragment == null) {\nfragment = \"\";\n}\nserverUrl = scheme + \"://\" + host + \":\" + port + path + query + fragment;\n} catch (URISyntaxException e) {\n// ignore\n}\nserverUrl = serverUrl.toLowerCase(Locale.ENGLISH);\nif (serverUrl.endsWith(\"/\")) {\nserverUrl = serverUrl.substring(0, serverUrl.length() - 1);\n}\nreturn serverUrl;\n}", "CodeBleu_score": 44.61875521901083}]}
{"instance_id": "7c39a93a98ef", "generation_result": [{"code": "public ListBoxModel getServerItems(){\n\tBoxModel items = new ListBoxModel();\nfor (GiteaServer server : getServers()) {\nString displayName = server.getDisplayName();\nif (StringUtils.isBlank(displayName)) {\ndisplayName = server.getServerUrl();\n}\nitems.add(displayName, server.getServerUrl());\n}\nreturn items;\n}", "CodeBleu_score": 50.31334196862281}, {"code": "public ListBoxModel getServerItems(){\n\ttBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tString name = server.getDisplayName();\n\t\tif (StringUtils.isBlank(name)) {\n\t\t\tname = server.getServerUrl();\n\t\t}\n\t\titems.add(name, server.getServerUrl());\n\t}\n\treturn items;\n}", "CodeBleu_score": 47.61300421342334}, {"code": "public ListBoxModel getServerItems(){\n\ttBoxModel items = new ListBoxModel();\n\tfor (GiteaServer server : getServers()) {\n\t\tif (StringUtils.isBlank(server.getDisplayName())) {\n\t\t\titems.add(server.getServerUrl());\n\t\t} else {\n\t\t\titems.add(server.getDisplayName(), server.getServerUrl());\n\t\t}\n\t}\n\treturn items;\n}", "CodeBleu_score": 36.85642115498127}]}
{"instance_id": "b28d7a8aea26", "generation_result": [{"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (Jenkins.get().hasPermission(Jenkins.ADMINISTER)) {\n\t\tif (servers!= null) {\n\t\t\tList<GiteaServer> newServers = new ArrayList<>();\n\t\t\tSet<String> serverUrls = new HashSet<>();\n\t\t\tfor (GiteaServer server : servers) {\n\t\t\t\tString serverUrl = normalizeServerUrl(server.getServerUrl());\n\t\t\t\tif (StringUtils.isNotBlank(serverUrl)) {\n\t\t\t\t\tif (serverUrls.add(serverUrl)) {\n\t\t\t\t\t\tnewServers.add(server);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.servers = newServers;\n\t\t} else {\n\t\t\tthis.servers = Collections.emptyList();\n\t\t}\n\t\tsave();\n\t}\n}", "CodeBleu_score": 44.71632281645768}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\t\tif (servers!= null) {\n\t\tList<GiteaServer> newServers = new ArrayList<>();\n\t\tSet<String> serverUrls = new HashSet<>();\n\t\tfor (GiteaServer server : servers) {\n\t\t\tif (server == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tString serverUrl = normalizeServerUrl(server.getServerUrl());\n\t\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!serverUrls.add(serverUrl)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tnewServers.add(server);\n\t\t}\n\t\tthis.servers = newServers;\n\t} else {\n\t\tthis.servers = null;\n\t}\n\tsave();\n}", "CodeBleu_score": 42.26932360518128}, {"code": "public synchronized void setServers(@CheckForNull List<? extends GiteaServer> servers){\n\tif (servers == null || servers.isEmpty()) {\nthis.servers = null;\n} else {\nList<GiteaServer> normalized = new ArrayList<>(servers.size());\nSet<String> normalizedUrls = new HashSet<>();\nfor (GiteaServer server : servers) {\nString serverUrl = normalizeServerUrl(server.getServerUrl());\nif (StringUtils.isNotBlank(serverUrl) &&!normalizedUrls.contains(serverUrl)) {\nnormalizedUrls.add(serverUrl);\nnormalized.add(new GiteaServer(serverUrl, server.getDisplayName()));\n}\n}\nthis.servers = Collections.unmodifiableList(normalized);\n}\nsave();\n}", "CodeBleu_score": 44.58143453489749}]}
{"instance_id": "8a339d5a79ed", "generation_result": [{"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tboolean found = false;\n\tfor (Iterator<GiteaServer> iterator = endpoints.iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer ep = iterator.next();\n\t\tif (ep.getServerUrl().equals(serverUrl)) {\n\t\t\titerator.remove();\n\t\t\tfound = true;\n\t\t}\n\t}\n\tif (found) {\n\t\tsetServers(endpoints);\n\t}\n\treturn found;\n}", "CodeBleu_score": 59.411360456249696}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tserverUrl = normalizeServerUrl(serverUrl);\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tboolean found = false;\n\tfor (Iterator<GiteaServer> iterator = endpoints.iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer ep = iterator.next();\n\t\tif (normalizeServerUrl(ep.getServerUrl()).equals(serverUrl)) {\n\t\t\titerator.remove();\n\t\t\tfound = true;\n\t\t}\n\t}\n\tsetServers(endpoints);\n\treturn found;\n}", "CodeBleu_score": 65.40225316018731}, {"code": "public synchronized boolean removeServer(@CheckForNull String serverUrl){\n\t\tif (StringUtils.isBlank(serverUrl)) {\n\t\treturn false;\n\t}\n\tList<GiteaServer> endpoints = new ArrayList<>(getServers());\n\tboolean found = false;\n\tfor (Iterator<GiteaServer> iterator = endpoints.iterator(); iterator.hasNext(); ) {\n\t\tGiteaServer ep = iterator.next();\n\t\tif (ep.getServerUrl().equals(serverUrl)) {\n\t\t\titerator.remove();\n\t\t\tfound = true;\n\t\t}\n\t}\n\tif (found) {\n\t\tsetServers(endpoints);\n\t}\n\treturn found;\n}", "CodeBleu_score": 60.55730875837807}]}
{"instance_id": "ac059ccf2e98", "generation_result": [{"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tor (Element element : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tConfigValue configValue = element.getAnnotation(ConfigValue.class);\n\t\tif (configValue!= null) {\n\t\t\tClassSetElement classSetElement = new ClassSetElement(element);\n\t\t\tdescriptorElements.add(new ConfigElement(classSetElement.getType(), configValue.key(), configValue.defaultValue()));\n\t\t}\n\t}\n}", "CodeBleu_score": 30.513807404409622}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tr (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\nif (e.getKind() == ElementKind.FIELD) {\nVariableElement variableElement = (VariableElement) e;\n\n// Retrieve the annotation's value\nString name = variableElement.getAnnotation(ConfigValue.class).value();\n\n// Retrieve the element's type\nString type = variableElement.asType().toString();\n\n// Add a new ConfigElement to the set of descriptor elements\ndescriptorElements.add(new ConfigElement(name, type));\n}\n}\n}", "CodeBleu_score": 42.346325658417385}, {"code": "private void scanForConfigAnnotations(Set<DescriptorElement> descriptorElements, RoundEnvironment roundEnv, TypeElement annotation){\n\tor (Element e : roundEnv.getElementsAnnotatedWith(annotation)) {\n\t\tif (e.getKind() == ElementKind.FIELD) {\n\t\t\tVariableElement field = (VariableElement) e;\n\t\t\tString type = field.asType().toString();\n\t\t\tString name = field.getSimpleName().toString();\n\t\t\tString defaultValue = EMPTY;\n\t\t\tString description = EMPTY;\n\t\t\tString property = EMPTY;\n\t\t\tboolean required = false;\n\t\t\tboolean sensitive = false;\n\t\t\tboolean multiValued = false;\n\t\t\tboolean deprecated = false;\n\n\t\t\tfor (AnnotationMirror mirror : field.getAnnotationMirrors()) {\n\t\t\t\tif (mirror.getAnnotationType().asElement().equals(annotation)) {\n\t\t\t\t\tfor (Map.Entry<? extends ExecutableElement,? extends AnnotationValue> entry : mirror.getElementValues().entrySet()) {\n\t\t\t\t\t\tString key = entry.getKey().getSimpleName().toString();\n\t\t\t\t\t\tAnnotationValue value = entry.getValue();\n\n\t\t\t\t\t\tswitch (key) {\n\t\t\t\t\t\t\tcase \\\"defaultValue\\\":\n\t\t\t\t\t\t\t\tdefaultValue = value.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \\\"description\\\":\n\t\t\t\t\t\t\t\tdescription = value.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \\\"property\\\":\n\t\t\t\t\t\t\t\tproperty = value.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \\\"required\\\":\n\t\t\t\t\t\t\t\trequired = (boolean) value.getValue();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \\\"sensitive\\\":\n\t\t\t\t\t\t\t\tsensitive = (boolean) value.getValue();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \\\"multiValued\\\":\n\t\t\t\t\t\t\t\tmultiValued = (boolean) value.getValue();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase \\\"deprecated\\\":\n\t\t\t\t\t\t\t\tdeprecated = (boolean) value.getValue();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdescriptorElements.add(new ConfigElement(name, type, defaultValue, description, property, required, sensitive, multiValued, deprecated));\n\t\t}\n\t}\n}", "CodeBleu_score": 27.891161717059752}]}
{"instance_id": "a3425fa3ea35", "generation_result": [{"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tor (TypeElement e : annotations) {\nif (e.getQualifiedName().toString().equals(annotationClass.getName()) ||\ne.getQualifiedName().toString().replace('$', '.').equals(annotationClass.getName())) {\nreturn e;\n}\n}\nreturn null;\n}", "CodeBleu_score": 39.33307111582699}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tor (TypeElement e : annotations) {\n\t\tif (e.getQualifiedName().toString().equals(annotationClass.getName()) || e.getQualifiedName().toString().replace('$', '.').equals(annotationClass.getName())) {\n\t\t\treturn e;\n\t\t}\n\t}\n\treturn null;\n}", "CodeBleu_score": 39.40279965793653}, {"code": "private TypeElement findAnnotation(Set<? extends TypeElement> annotations,\n                                     Class<? extends Annotation> annotationClass) {\n\tor (TypeElement e : annotations) {\n\t\tString qualifiedName = e.getQualifiedName().toString();\n\t\tString targetName = annotationClass.getName().replace('$', '.');\n\n\t\tif (qualifiedName.equals(targetName)) {\n\t\t\treturn e;\n\t\t}\n\t}\n\n\treturn null;\n}", "CodeBleu_score": 34.21241982536697}]}
{"instance_id": "4002e89493bc", "generation_result": [{"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters = {\n        \"docstatus\": 1,\n        \"employee\": employee,\n    }\n\n    if for_approval:\n\t\tfilters.update({\n\t\t\t\\\"status\\\": \\\"Open\\\",\n\t\t\t\\\"approver\\\": approver_id,\n\t\t\t\\\"name\\\": (\\\"not in\\\",\n\t\t\t\tfrappe.get_all(\\\"Leave Application\\\",\n\t\t\t\t\tfilters={\\\"status\\\": \\\"Open\\\", \\\"approver\\\": employee},\n\t\t\t\t\tpluck=\\\"name\\\"\n\t\t\t\t)\n\t\t\t),\n\t\t})\n\telse:\n\t\tfilters.update({\n\t\t\t\\\"status\\\": (\\\"not in\\\", [\\\"Cancelled\\\", \\\"Rejected\\\"]),\n\t\t})\n\n\tif workflow_state_field := get_workflow_state_field(\\\"Leave Application\\\"):\n\t\tfilters.update({workflow_state_field: \\\"Open\\\"})\n\n\treturn filters\n\n", "CodeBleu_score": 27.58695156764056}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters: dict = {\"employee\": employee}\n\n    if for_approval:\n\t\tif approver_id:\n\t\t\tfilters.update({\n\t\t\t\t\\\"leave_approver\\\": approver_id,\n\t\t\t\t\\\"status\\\": \\\"Open\\\",\n\t\t\t})\n\t\telse:\n\t\t\tfilters.update({\n\t\t\t\t\\\"leave_approver\\\": [\\\"in\\\", frappe.get_all(\\\"Leave Approver\\\", fields=[\\\"parent\\\"], filters={\\\"parenttype\\\": \\\"Employee\\\", \\\"parent\\\": employee})],\n\t\t\t\t\\\"status\\\": \\\"Open\\\",\n\t\t\t})\n\telse:\n\t\tfilters.update({\n\t\t\t\\\"docstatus\\\": 1,\n\t\t\t\\\"status\\\": [\\\"not in\\\", [\\\"Cancelled\\\", \\\"Rejected\\\"]],\n\t\t})\n\n\tif workflow_state_field := get_workflow_state_field(\\\"Leave Application\\\"):\n\t\tfilters.update({workflow_state_field: \\\"Open\\\"})\n\n\treturn filters\n\n", "CodeBleu_score": 27.369792051145314}, {"code": "def get_leave_application_filters(\n\temployee: str,\n\tapprover_id: str | None = None,\n\tfor_approval: bool = False,\n) -> dict\n\t\n    filters: dict = {\"employee\": employee, \"docstatus\": 1}\n\n    if for_approval:\n\t\tif approver_id:\n\t\t\tfilters[\\\"leave_approver\\\"] = approver_id\n\t\tfilters[\\\"status\\\"] = \\\"Open\\\"\n\t\tfilters[\\\"name\\\"] = [\\\"not in\\\", get_leave_applications_for_employee(employee)]\n\telse:\n\t\tfilters[\\\"status\\\"] = [\\\"not in\\\", [\\\"Canceled\\\", \\\"Rejected\\\"]]\n\n\tif workflow_state_field := get_workflow_state_field(\\\"Leave Application\\\"):\n\t\tfilters[workflow_state_field] = [\\\"not in\\\", [\\\"Rejected\\\", \\\"Cancelled\\\"]]\n\n\treturn filters\n\n", "CodeBleu_score": 30.78014364922491}]}
{"instance_id": "7bbb937df591", "generation_result": [{"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_type, leave_detail in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": leave_detail.allocated_leaves,\n            \"balance_leaves\": leave_detail.balance_leaves,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 42.52384197750091}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n    leave_balance_map = {}\n\n    for leave_type, leave_type_details in leave_details.items():\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": leave_type_details.get(\"allocated_leaves\"),\n            \"balance_leaves\": leave_type_details.get(\"balance_leaves\"),\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 50.034146997486914}, {"code": "def get_leave_balance_map(employee: str) -> dict[str, dict[str, float]]:\n\t\n    current_date = getdate()\n    leave_details = get_leave_details(employee, current_date)\n\n    leave_balance_map = {}\n    for leave_detail in leave_details:\n        leave_type = leave_detail.leave_type\n        leave_balance_map[leave_type] = {\n            \"allocated_leaves\": leave_detail.total_leaves_allocated,\n            \"balance_leaves\": leave_detail.leaves_allocated - leave_detail.leaves_taken,\n        }\n\n    return leave_balance_map\n\n", "CodeBleu_score": 41.90281919495875}]}
{"instance_id": "9d90f8f0917e", "generation_result": [{"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Holiday List\", {\"employee\": employee})\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        filters={\"parent\": holiday_list, \"holiday_date\": (\"!=\", None), \"weekly_off\": False},\n        fields=[\"name\", \"holiday_date\", \"description\"],\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 38.01239190394984}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Holiday List\", {\"employee\": employee}, \"name\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_all(\n        \"Holiday\",\n        fields=[\"name\", \"holiday_date\", \"description\", \"holiday_type\"],\n        filters={\n            \"parent\": holiday_list,\n            \"holiday_date\": [\">=\", getdate()],\n            \"holiday_type\": (\"!=\", \"Weekly Off\"),\n        },\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 40.450754060741524}, {"code": "def get_holidays_for_employee(employee: str) -> list[dict]:\n\t\n    holiday_list = frappe.db.get_value(\"Employee\", employee, \"holiday_list\")\n    if not holiday_list:\n        return []\n\n    holidays = frappe.get_list(\n        \"Holiday\",\n        fields=[\"name\", \"holiday_date\", \"description\"],\n        filters={\n            \"parent\": holiday_list,\n            \"holiday_date\": [\">\", getdate()],\n            \"is_weekly_off\": 0,\n        },\n        order_by=\"holiday_date\",\n    )\n\n    for holiday in holidays:\n        holiday[\"description\"] = strip_html(holiday[\"description\"])\n\n    return holidays\n\n", "CodeBleu_score": 39.09840848252079}]}
{"instance_id": "a90ba556e53e", "generation_result": [{"code": "def send_reminders_in_advance_weekly()\n\t\n    settings = frappe.get_single(\"HR Settings\")\n    if settings.send_holiday_reminders and settings.holiday_reminder_frequency == \"Weekly\":\n        send_reminders_in_advance()\n\n", "CodeBleu_score": 16.254860129635986}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    hr_settings = frappe.get_single(\"HR Settings\")\n    if hr_settings.send_holiday_reminders and hr_settings.holiday_reminder_frequency == \"Weekly\":\n        send_holiday_reminders()\n\n", "CodeBleu_score": 16.049391302859963}, {"code": "def send_reminders_in_advance_weekly()\n\t\n    if not frappe.db.get_single_value(\"HR Settings\", \"send_holiday_reminder\"):\n        return\n    if frappe.db.get_single_value(\"HR Settings\", \"holiday_reminder_frequency\")!= \"Weekly\":\n        return\n    send_reminders_in_advance()\n\n", "CodeBleu_score": 32.11426583202771}]}
{"instance_id": "37594f7876f9", "generation_result": [{"code": "def calculate_self_appraisal_score(self)\n\t  total_weightage, total = 0, 0\n    for entry in self.self_ratings:\n        entry.score = flt(entry.rating) * 5\n        entry.score_earned = flt(entry.score) * flt(entry.per_weightage) / 100\n        total += flt(entry.score_earned)\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2)!= 100.0:\n        frappe.throw(\n            _(\n                \"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\".format(\n                    total_weightage\n                )\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 34.85491978941126}, {"code": "def calculate_self_appraisal_score(self)\n\t  total_weightage, total = 0, 0\n\n    for entry in self.self_ratings:\n        entry.score_earned = flt(entry.rating) * 5 * flt(entry.per_weightage) / 100\n        total += flt(entry.score_earned)\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2)!= 100.0:\n        frappe.throw(\n            _(\n                \"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\".format(\n                    total_weightage\n                )\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 38.94845229818071}, {"code": "def calculate_self_appraisal_score(self)\n\t  total_weightage, total = 0, 0\n    for entry in self.self_ratings:\n        entry.score_earned = flt(entry.rating) * 5 * flt(entry.per_weightage) / 100\n        total += flt(entry.score_earned)\n        total_weightage += flt(entry.per_weightage)\n\n    if total_weightage and flt(total_weightage, 2)!= 100.0:\n        frappe.throw(\n            _(\n                \"Total weightage for all Self Ratings must add up to 100. Currently, it is {0}%\".format(\n                    total_weightage\n                )\n            ),\n            title=_(\"Incorrect Weightage Allocation\"),\n        )\n\n    self.self_appraisal_score = flt(total, self.precision(\"self_appraisal_score\"))\n\n", "CodeBleu_score": 38.94845229818071}]}
{"instance_id": "42120d2aae56", "generation_result": [{"code": "def calculate_final_score(self)\n\t\n    if self.appraisal_cycle:\n        appraisal_cycle = frappe.get_doc(\\\"Appraisal Cycle\\\", self.appraisal_cycle)\n        if appraisal_cycle.calculate_final_score_based_on_formula:\n            formula = appraisal_cycle.formula_for_final_score\n            formula = formula.replace(\\\"{total_score}\\\", str(self.total_score))\n            formula = formula.replace(\\\"{avg_feedback_score}\\\", str(self.avg_feedback_score))\n            formula = formula.replace(\\\"{self_score}\\\", str(self.self_score))\n\n            # sanitize the formula to prevent arbitrary code execution\n            safe_formula = safe_eval(formula)\n\n            self.final_score = flt(safe_formula, self.precision(\\\"final_score\\\"))\n        else:\n            self.final_score = flt(\n                (self.total_score + self.avg_feedback_score + self.self_score) / 3,\n                self.precision(\\\"final_score\\\"),\n            )\n    else:\n        self.final_score = flt(\n            (self.total_score + self.avg_feedback_score + self.self_score) / 3,\n            self.precision(\\\"final_score\\\"),\n        )\n\n", "CodeBleu_score": 39.228377739565}, {"code": "def calculate_final_score(self)\n\t\n    if self.appraisal_cycle:\n        appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n        if appraisal_cycle.formula:\n            formula = appraisal_cycle.formula\n            formula = formula.replace(\"total_score\", str(self.total_score))\n            formula = formula.replace(\"avg_feedback_score\", str(self.avg_feedback_score))\n            formula = formula.replace(\"self_score\", str(self.self_score))\n\n            try:\n                self.final_score = flt(eval(formula), self.precision(\"final_score\"))\n            except Exception as e:\n                frappe.throw(_(\"Error in formula: {0}\").format(e))\n        else:\n            self.final_score = flt(\n                (self.total_score + self.avg_feedback_score + self.self_score) / 3,\n                self.precision(\"final_score\"),\n            )\n\n", "CodeBleu_score": 38.910801553728696}, {"code": "def calculate_final_score(self)\n\t\n    appraisal_cycle = frappe.get_doc(\"Appraisal Cycle\", self.appraisal_cycle)\n\n    if appraisal_cycle.calculate_final_score_based_on_formula:\n        formula = appraisal_cycle.formula_for_final_score\n\n        if not formula:\\\n            frappe.throw(_(\"Formula for final score is mandatory\"))\n\n        formula = formula.replace(\"total_score\", str(self.total_score))\\\n           .replace(\"avg_feedback_score\", str(self.avg_feedback_score))\\\n           .replace(\"self_score\", str(self.self_score))\\\n           .replace(\"goal_score_percentage\", str(self.goal_score_percentage))\n\n        try:\n            self.final_score = flt(eval(formula), self.precision(\"final_score\"))\n        except Exception as e:\n            frappe.throw(_(\"Error in formula for final score: {0}\").format(e))\n    else:\n        self.final_score = flt(\n            (self.total_score + self.avg_feedback_score + self.self_score) / 3,\n            self.precision(\"final_score\"),\n        )\n\n", "CodeBleu_score": 37.30945361446382}]}
{"instance_id": "3ef1807aa706", "generation_result": [{"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\":\n            raise frappe.ValidationError(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'\"))\n        leave_record = frappe.db.sql(\n            \\\"\\\"\\\"\n            SELECT name\n            FROM `tabLeave Application`\n            WHERE employee = %(employee)s\n                AND from_date <= %(attendance_date)s\n                AND to_date >= %(attendance_date)s\n                AND docstatus = 1\n            \\\"\\\"\\\"\n           , {\n                \\\"employee\\\": self.employee,\n                \\\"attendance_date\\\": self.attendance_date,\n            },\n        )\n        if not leave_record:\n            raise frappe.ValidationError(\n                _(\n                    \\\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\\\"\n                )\n            )\n    if self.attendance_date < frappe.db.get_value(\\\"Employee\\\", self.employee, \\\"date_of_joining\\\"):\n        raise frappe.ValidationError(\n            _(\n                \\\"Attendance date cannot be earlier than the employee's date of joining. Please update the employee's date of joining or mark the attendance for a later date.\\\"\n            )\n        )\n\n\n", "CodeBleu_score": 31.509217778970683}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\":\n            frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave'\"))\n        else:\n            leave_record = frappe.db.get_value(\n                \"Leave Application\",\n                filters={\n                    \"employee\": self.employee,\n                    \"status\": \"Approved\",\n                    \"from_date\": (\"<=\", self.attendance_date),\n                    \"to_date\": (\">=\", self.attendance_date),\n                },\n                fieldname=[\"name\"],\n            )\n            if not leave_record:\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless there is a leave application\"))\n\n    if self.attendance_date < frappe.db.get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance cannot be marked for a date earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 38.794771316614806}, {"code": "def validate_attendance_date(self)\n\t\n    if self.attendance_date > nowdate():\n        if self.status!= \"On Leave\":\n            if not frappe.db.exists(\"Leave Application\", {\"employee\": self.employee, \"status\": \"Approved\", \"from_date\": self.attendance_date}):\n                frappe.throw(_(\"Attendance cannot be marked for future dates unless the status is 'On Leave' and there is no leave application\"))\n    if self.attendance_date < frappe.db.get_value(\"Employee\", self.employee, \"date_of_joining\"):\n        frappe.throw(_(\"Attendance date cannot be earlier than the employee's date of joining\"))\n\n", "CodeBleu_score": 30.782614415168158}]}
{"instance_id": "538dc53d23a6", "generation_result": [{"code": "def validate_duplicate_record(self)\n\t    if not self.flags.ignore_validate_duplicate_record:\n        attendance = frappe.db.exists({\n            \\\"doctype\\\": \\\"Attendance\\\",\n            \\\"employee\\\": self.employee,\n            \\\"attendance_date\\\": self.attendance_date,\n        })\n\n        if attendance and attendance!= self.name:\n            frappe.throw(\n                _(\\\"Attendance already marked for {0} on {1}\\\").format(\n                    frappe.bold(self.employee),\n                    frappe.bold(format_date(self.attendance_date)),\n                ),\n                DuplicateAttendanceError,\n                link=get_link_to_form(\\\"Attendance\\\", attendance),\n            )\n\n\n\n", "CodeBleu_score": 35.96176007483605}, {"code": "def validate_duplicate_record(self)\n\t    duplicate_attendance = frappe.db.exists(\n        \\\"Attendance\\\",\n        {\n            \\\"employee\\\": self.employee,\n            \\\"attendance_date\\\": self.attendance_date,\n            \\\"docstatus\\\": 1,\n            \\\"name\\\": [\\\"!\\\", self.name],\n        },\n    )\n\n    if duplicate_attendance:\n        frappe.throw(\n            _(\\\"Attendance already marked for employee {0} on {1}\\\")\n           .format(\n                frappe.bold(self.employee),\n                frappe.bold(format_date(self.attendance_date)),\n            ),\n            DuplicateAttendanceError,\n            frappe.utils.get_link_to_form(\\\"Attendance\\\", duplicate_attendance),\n        )\n\n", "CodeBleu_score": 30.115851555176093}, {"code": "def validate_duplicate_record(self)\n\t    if self.docstatus == 2:\n        # Don't check for duplicates when the document is being cancelled\n        return\n\n    duplicate_attendance = frappe.db.exists(\n        \\\"Attendance\\\",\n        {\n            \\\"employee\\\": self.employee,\n            \\\"attendance_date\\\": self.attendance_date,\n            \\\"docstatus\\\": 1,\n            \\\"name\\\": (\\\"<\\\", self.name),\n        },\n    )\n\n    if duplicate_attendance:\n        attendance_link = get_link_to_form(\\\"Attendance\\\", duplicate_attendance)\n        msg = _(\\\"Attendance for {0} on {1} already exists. <a href=\\\\\\\"{2}\\\\\\\">View Attendance</a>\\\").format(\n            frappe.bold(self.employee),\n            frappe.bold(format_date(self.attendance_date)),\n            attendance_link,\n        )\n        raise DuplicateAttendanceError(msg)\n\n", "CodeBleu_score": 34.181208051782285}]}
{"instance_id": "7c73c326e62f", "generation_result": [{"code": "def send_summary(self)\n\t\n    message = \"\"\n    if self.message:\n        message = self.message\n    else:\n        message = frappe.get_template(\"templates/emails/daily_work_summary.html\").render(\n            {\n                \"date\": global_date_format(self.date),\n                \"message\": self.message,\n                \"title\": self.title,\n            }\n        )\n    message = EmailReplyParser.parse_reply(message)\n    emails = [d.email for d in frappe.get_all(\"User\", fields=[\"email\"])]\n    if self.email_sent_to:\n        emails = list(set(emails) - set(self.email_sent_to.split(\"", "CodeBleu_score": 32.99445872433224}, {"code": "def send_summary(self)\n\t\n    # Get all the messages that are not yet sent\n    messages = frappe.get_all(\n        \"Daily Work Summary\",\n        filters={\"status\": \"Not Sent\"},\n        fields=[\"name\", \"subject\", \"message\"],\n    )\n    # Get the email addresses of all users in the specified group\n    emails = frappe.get_all(\n        \"User\",\n        filters={\"daily_work_summary_group\": self.daily_work_summary_group},\n        fields=[\"email\"],\n    )\n    # Send the email to all users in the specified group\n    for message in messages:\n        self.send_mails(message[\"subject\"], message[\"message\"], emails)\n        # Update the status of the message to \"Sent\"\n        frappe.db.set_value(\n            \"Daily Work Summary\", message[\"name\"], \"status\", \"Sent\"\n        )\n\n", "CodeBleu_score": 35.220499332181745}, {"code": "def send_summary(self)\n\t\n    # Get the daily work summary group\n    dws_group = frappe.get_doc(\"Daily Work Summary Group\", self.group)\n\n    # Get the email addresses of all users in the group\n    emails = frappe.get_all(\n        \"User\", filters={\"enabled\": 1, \"email\": [\"!=\", None]}, fields=[\"email\"]\n    )\n    emails = [email[\"email\"] for email in emails]\n\n    # Get the messages from the last 24 hours\n    messages = frappe.get_all(\n        \"Communication\",\n        filters={\n            \"communication_date\": [\">=\", frappe.utils.add_days(frappe.utils.nowdate(), -1)],\n            \"communication_type\": \"Communication\",\n        },\n        fields=[\"subject\", \"content\", \"sender\", \"communication_date\"],\n    )\n\n    # Format the messages into a string\n    message_string = \"\"\n    for message in messages:\n        message_string += f\"\"\"<p><b>{message.sender}</b> on {message.communication_date}:</p>\n            <p>{message.content}</p>\n            <hr>\"\"\"\n\n    # Replace the placeholders in the template with the actual data\n    template = dws_group.message\n    template = template.replace(\"{messages}\", message_string)\n    template = template.replace(\"{date}\", frappe.utils.nowdate())\n\n    # Send the email to all users in the group\n    self.send_mails(dws_group, emails)\n\n    # Update the status to \"Sent\"\n    self.db_set(\"status\", \"Sent\")\n\n", "CodeBleu_score": 32.50179259661452}]}
{"instance_id": "18973acd73bf", "generation_result": [{"code": "def validate_duplicate_interview(self)\n\t\n    if self.job_applicant and self.interview_round:\n        duplicate_interview = frappe.db.get_value(\\\n            \"Interview\",\\\n            {\\\n                \"job_applicant\": self.job_applicant,\\\n                \"interview_round\": self.interview_round,\\\n                \"name\": [\"!=\", self.name],\\\n            },\\\n            \"name\",\\\n        )\n        if duplicate_interview:\\\n            raise DuplicateInterviewRoundError(\\\n                _(\\\"Job Applicant {0} already has an interview in this interview round. Please check the interview record: {1}\\\").format(\\\n                    get_link_to_form(\\\"Job Applicant\\\", self.job_applicant),\\\n                    get_link_to_form(\\\"Interview\\\", duplicate_interview),\\\n                )\\\n            )\\\n\n", "CodeBleu_score": 41.332044554732796}, {"code": "def validate_duplicate_interview(self)\n\t\n    if frappe.db.exists(\n            \\\"Interview\\\",\n            {\n                \\\"job_applicant\\\": self.job_applicant,\n                \\\"interview_round\\\": self.interview_round,\n            },\n        ):\n        interview = frappe.get_doc(\n            \\\"Interview\\\",\n            {\n                \\\"job_applicant\\\": self.job_applicant,\n                \\\"interview_round\\\": self.interview_round,\n            },\n        )\n        msg = _(\\\"Job Applicant {0} already exists in Interview Round {1}\\\")\n        msg = msg.format(self.job_applicant, self.interview_round)\n        msg += \\\"<br><br>\\\" + get_link_to_form(\\\"Interview\\\", interview.name)\n        msg += \\\"<br><br>\\\" + _(\\\"Job Applicant Information\\\") + \\\": \\\"\n        msg += get_link_to_form(\\\"Job Applicant\\\", self.job_applicant)\n        frappe.throw(msg)\n\n\n", "CodeBleu_score": 34.10469633752014}, {"code": "def validate_duplicate_interview(self)\n\t\n    interviews = frappe.get_all(\\\n        \"Interview\",\n        filters={\\\n            \"job_applicant\": self.job_applicant,\\\n            \"interview_round\": self.interview_round,\\\n            \"docstatus\": 1,\\\n        },\\\n        fields=[\"name\", \"job_applicant\", \"interview_round\"],\\\n    )\n    if len(interviews) > 1:\\\n        interview = interviews[0]\\\n        message = _(\\\"Job applicant {0} is already scheduled for {1} in {2}\\\"\\\n           .format(\\\n                get_link_to_form(\\\"Job Applicant\\\", interview.job_applicant),\\\n                interview.interview_round,\\\n                get_link_to_form(\\\"Interview\\\", interview.name),\\\n            )\\\n        )\\\n        raise DuplicateInterviewRoundError(message)\\\n\n", "CodeBleu_score": 40.007681953163136}]}
{"instance_id": "2f305a78ebff", "generation_result": [{"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    total_assessments = 0\n    for assessment in self.skill_assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            total_assessments += 1\n\n    if total_assessments:\n        self.average_rating = total_rating / total_assessments\n    else:\n        self.average_rating = 0\n\n\n", "CodeBleu_score": 25.248494281035384}, {"code": "def calculate_average_rating(self)\n\t\n    total_rating = 0\n    total_assessments = 0\n\n    for assessment in self.assessments:\n        if assessment.rating:\n            total_rating += assessment.rating\n            total_assessments += 1\n\n    if total_assessments > 0:\n        self.average_rating = total_rating / total_assessments\n    else:\n        self.average_rating = 0\n\n", "CodeBleu_score": 24.152480138960197}, {"code": "def calculate_average_rating(self)\n\t\n    if self.skill_assessments:\n        total = 0\n        count = 0\n        for assessment in self.skill_assessments:\n            if assessment.rating:\n                total += assessment.rating\n                count += 1\n        self.average_rating = total / count if count else 0\n    else:\n        self.average_rating = 0\n\n\n", "CodeBleu_score": 23.68170134080103}]}
{"instance_id": "b4fe0be54386", "generation_result": [{"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc[\"interview_round\"]\n    interview.designation = doc[\"designation\"]\n    if \"interviewers\" in doc:\n        interview.set(\"interview_details\", [])\n        for interviewer in doc[\"interviewers\"]:\n            interview.append(\"interview_details\", {\"interviewer\": interviewer})\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 39.5877754219841}, {"code": "def create_interview(doc):\n\t\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interview_date = doc.get(\"interview_date\")\n    interview.interview_time = doc.get(\"interview_time\")\n    interview.interview_venue = doc.get(\"interview_venue\")\n    interview.interviewers = doc.get(\"interviewers\")\n    interview.save()\n    return interview\n\n", "CodeBleu_score": 36.33207718587897}, {"code": "def create_interview(doc):\n\t\n\n    interview = frappe.new_doc(\"Interview\")\n    interview.interview_round = doc.get(\"interview_round\")\n    interview.designation = doc.get(\"designation\")\n    interview.interview_details = []\n\n    if doc.get(\"interviewers\"):\n        for interviewer in doc.get(\"interviewers\"):\n            interview.append(\"interview_details\", {\"interviewer\": interviewer})\n\n    return interview.insert()\n\n", "CodeBleu_score": 41.8435348128051}]}
{"instance_id": "685e05773636", "generation_result": [{"code": "def get_job_offer(self, from_date, to_date)\n\t    return frappe.db.sql_list(\n        \"\"\"SELECT name FROM `tabJob Offer`\n        WHERE docstatus=1 AND designation=%s AND company=%s AND offer_date BETWEEN %s AND %s\"\"\",\n        (self.designation, self.company, from_date, to_date),\n    )\n\n", "CodeBleu_score": 27.292826232411066}, {"code": "def get_job_offer(self, from_date, to_date)\n\t    return frappe.get_all(\n        \"Job Offer\",\n        filters={\n            \"designation\": self.designation,\n            \"company\": self.company,\n            \"docstatus\": 1,\n            \"offer_date\": [\">=\", from_date],\n            \"offer_date\": [\"<=\", to_date],\n        },\n        fields=[\"name\"],\n    )\n\n", "CodeBleu_score": 59.78011721604457}, {"code": "def get_job_offer(self, from_date, to_date)\n\t    job_offers = frappe.db.sql(\n        \\\"\\\"\\\"\n            SELECT name\n            FROM `tabJob Offer`\n            WHERE\n                designation = %(designation)s\n                AND company = %(company)s\n                AND status = %(status)s\n                AND offer_date BETWEEN %(from_date)s AND %(to_date)s\n                AND docstatus = 1\n        \\\"\\\"\\\"\n       , {\n            \\\"designation\\\": self.designation,\n            \\\"company\\\": self.company,\n            \\\"status\\\": \\\"Offer Made\\\",\n            \\\"from_date\\\": from_date,\n            \\\"to_date\\\": to_date,\n        },\n        as_dict=True\n    )\n    return job_offers\n\n", "CodeBleu_score": 31.162705363883603}]}
{"instance_id": "2bdb2c2e712f", "generation_result": [{"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t    total_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"docstatus\": 1,\n            \"company\": company if company else [\"!=\", None],\n            \"department\": department if department else [\"!=\", None],\n        },\n    )\n    accepted_offers = frappe.db.count(\n        \"Job Offer\",\n        filters={\n            \"status\": \"Accepted\",\n            \"company\": company if company else [\"!=\", None],\n            \"department\": department if department else [\"!=\", None],\n        },\n    )\n    if total_offers:\n        return {\n            \"fieldtype\": \"Percent\",\n            \"value\": flt(accepted_offers) / flt(total_offers) * 100,\n        }\n    else:\n        return {\n            \"fieldtype\": \"Percent\",\n            \"value\": 0,\n        }\n\n", "CodeBleu_score": 34.117084704240796}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t    total_offers = frappe.db.sql(\n        \"\"\"\n            SELECT COUNT(name) AS total_offers\n            FROM `tabJob Offer`\n            WHERE docstatus = 1\n            AND status = 'Accepted'\n            {company_filter}\n            {department_filter}\n        \"\"\".format(\n            company_filter=(\n                \"AND company = %s\" if company else \"\"\n            ),\n            department_filter=(\n                \"AND department = %s\" if department else \"\"\n            ),\n        ),\n        (company, department),\n        as_dict=True,\n    )[0][\"total_offers\"]\n\n    total_accepted = frappe.db.sql(\n        \"\"\"\n            SELECT COUNT(name) AS total_accepted\n            FROM `tabJob Offer`\n            WHERE docstatus = 1\n            AND status = 'Accepted'\n            {company_filter}\n            {department_filter}\n        \"\"\".format(\n            company_filter=(\n                \"AND company = %s\" if company else \"\"\n            ),\n            department_filter=(\n                \"AND department = %s\" if department else \"\"\n            ),\n        ),\n        (company, department),\n        as_dict=True,\n    )[0][\"total_accepted\"]\n\n    return {\n        \"fieldtype\": \"Percent\",\n        \"value\": (total_accepted / total_offers) * 100 if total_offers else 0,\n    }\n\n", "CodeBleu_score": 28.776562913643737}, {"code": "def get_offer_acceptance_rate(company=None, department=None)\n\t    filters = {}\n    if company:\n        filters[\"company\"] = company\n    if department:\n        filters[\"department\"] = department\n    total_offers = frappe.db.count(\"Job Offer\", filters=filters)\n    accepted_offers = frappe.db.count(\"Job Offer\", filters={**filters, \"status\": \"Accepted\"})\n    if total_offers > 0:\n        return {\"value\": accepted_offers / total_offers * 100, \"field_type\": \"Percent\"}\n    else:\n        return {\"value\": 0, \"field_type\": \"Percent\"}\n\n", "CodeBleu_score": 54.92004357203181}]}
{"instance_id": "7d5dc5673c02", "generation_result": [{"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.36275516193486}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.36275516193486}, {"code": "public ResponseEntity<Result> register(@Valid @RequestBody final EmployerForRegisterDto employerForRegisterDto){\n\t\tfinal Result result = employerService.register(employerForRegisterDto);\n\n\tif (!result.isSuccess()) {\n\t\treturn ResponseEntity.badRequest().body(result);\n\t}\n\n\treturn ResponseEntity.ok(result);\n}", "CodeBleu_score": 67.36275516193486}]}
{"instance_id": "3753dc9d4e57", "generation_result": [{"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tOptional<CompanyStaff> companyStaffOptional = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (companyStaffOptional.isEmpty()) {\n\\t\\treturn new ErrorResult(Messages.recordNotFound(entityName));\n\\t}\n\n\\tCompanyStaff companyStaff = companyStaffOptional.get();\n\n\\tResult result = BusinessRules.run(\n\\t\\t\\tarePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword())\n\\t);\n\n\\tif (result.isSuccess()) {\n\\t\\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\\t\\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\\t\\tcompanyStaffDao.save(companyStaff);\n\\t\\treturn new SuccessResult(Messages.recordUpdated(entityName));\n\\t}\n\n\\treturn result;\n}", "CodeBleu_score": 52.52416920622264}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> optionalCompanyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (optionalCompanyStaff.isEmpty()) {\n\t\treturn new ErrorResult(Messages.notFound + \\\"Company staff\\\");\n\t}\n\n\tfinal CompanyStaff companyStaff = optionalCompanyStaff.get();\n\tfinal Result result = BusinessRules.run(arePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\tif (!result.isSuccess()) {\n\t\treturn result;\n\t}\n\n\tcompanyStaff.setFirstName(companyStaffForUpdateDto.getFirstName());\n\tcompanyStaff.setLastName(companyStaffForUpdateDto.getLastName());\n\tcompanyStaffDao.save(companyStaff);\n\treturn new SuccessResult(Messages.updated + \\\"Company staff\\\");\n}", "CodeBleu_score": 41.46145871334883}, {"code": "public Result updateByUser(final CompanyStaffForUpdateDto companyStaffForUpdateDto) {\n\tfinal Optional<CompanyStaff> companyStaff = companyStaffDao.findById(companyStaffForUpdateDto.getId());\n\tif (!companyStaff.isPresent()) {\n\\t\\treturn new ErrorResult(Messages.staffNotFound);\n\\t}\n\n\\tfinal Result businessRules = BusinessRules.run(\n\\t\\t\\tarePasswordMatch(companyStaffForUpdateDto.getPassword(), companyStaffForUpdateDto.getConfirmPassword()));\n\\tif (!businessRules.isSuccess()) {\n\\t\\treturn businessRules;\n\\t}\n\n\\tcompanyStaff.get().setFirstName(companyStaffForUpdateDto.getFirstName());\n\\tcompanyStaff.get().setLastName(companyStaffForUpdateDto.getLastName());\n\n\\tcompanyStaffDao.save(companyStaff.get());\n\n\\treturn new SuccessResult(Messages.staffUpdated);\n}", "CodeBleu_score": 63.05402962564939}]}
