{"instance_id": "47ee1dae200b", "generation_result": [{"code": "public static void PreloadDll(string dllName){\n\t\tif (Environment.OSVersion.Platform == PlatformID.Win32NT) {\n\t\tPreloadDll_Win32(dllName);\n\t} else {\n\t\tPreloadDll_Posix(dllName);\n\t}\n}", "CodeBleu_score": 17.649029396380975}, {"code": "public static void PreloadDll(string dllName){\n\t", "CodeBleu_score": 3.033744540365542}, {"code": "public static void PreloadDll(string dllName){\n\t\n#if UNITY_STANDALONE_WIN || UNITY_EDITOR_WIN\n    // Windows\n    var dllDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n    if (dllDirectory!= null) {\n        dllDirectory = Path.GetFullPath(Path.Combine(dllDirectory, dllName));\n        if (File.Exists(dllDirectory)) {\n            var dllHandle = NativeMethods.LoadLibrary(dllDirectory);\n            if (dllHandle!= IntPtr.Zero) {\n                NativeMethods.FreeLibrary(dllHandle);\n            }\n        }\n    }\n#else\n    // Posix\n    var dllDirectory = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);\n    if (dllDirectory!= null) {\n        dllDirectory = Path.GetFullPath(Path.Combine(dllDirectory, dllName));\n        if (File.Exists(dllDirectory)) {\n            var dllHandle = NativeMethods.dlopen(dllDirectory, NativeMethods.RTLD_NOW);\n            if (dllHandle!= IntPtr.Zero) {\n                NativeMethods.dlclose(dllHandle);\n            }\n        }\n    }\n#endif\n}", "CodeBleu_score": 37.63483230447403}]}
{"instance_id": "2073a8291d05", "generation_result": [{"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (!assetsFileListHash.Contains(reader.FileName))\n{\nLogger.Info($\"Loading {reader.FullPath}\"); try { var assetsFile = new SerializedFile(reader, this); CheckStrippedVersion(assetsFile); assetsFileList.Add(assetsFile); assetsFileListHash.Add(assetsFile.fileName); foreach (var sharedFile in assetsFile.m_Externals) { var sharedFileName = sharedFile.fileName; if (!importFilesHash.Contains(sharedFileName)) { var sharedFilePath = Path.Combine(Path.GetDirectoryName(originalPath), sharedFileName); if (!noexistFiles.Contains(sharedFilePath)) { if (!File.Exists(sharedFilePath)) { var findFiles = Directory.GetFiles(Path.GetDirectoryName(originalPath), sharedFileName, SearchOption.AllDirectories); if (findFiles.Length > 0) { sharedFilePath = findFiles[0]; } } if (File.Exists(sharedFilePath)) { importFiles.Add(sharedFilePath); importFilesHash.Add(sharedFileName); } else { noexistFiles.Add(sharedFilePath); } } } } } catch (Exception e) { Logger.Error($\"Error while reading assets file {reader.FullPath}\", e);\nreader.Dispose();\n}\n}\nelse\n{\nLogger.Info($\"Skipping {reader.FullPath}\"); reader.Dispose(); } }", "CodeBleu_score": 58.14498920237378}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (!assetsFileListHash.Contains(reader.FileName)) {\nLogger.Info($\"Loading {reader.FullPath}\"); try { var assetsFile = new SerializedFile(reader, this); CheckStrippedVersion(assetsFile); assetsFileList.Add(assetsFile); assetsFileListHash.Add(assetsFile.fileName); foreach (var sharedFile in assetsFile.m_Externals) { var sharedFileName = sharedFile.fileName; if (!importFilesHash.Contains(sharedFileName)) { var sharedFilePath = Path.Combine(Path.GetDirectoryName(originalPath), sharedFileName); if (!noexistFiles.Contains(sharedFilePath)) { if (!File.Exists(sharedFilePath)) { var findFiles = Directory.GetFiles(Path.GetDirectoryName(originalPath), sharedFileName, SearchOption.AllDirectories); if (findFiles.Length > 0) { sharedFilePath = findFiles[0]; } } if (File.Exists(sharedFilePath)) { importFiles.Add(sharedFilePath); importFilesHash.Add(sharedFileName); } else { noexistFiles.Add(sharedFilePath); } } } } } catch (Exception e) { Logger.Error($\"Error while reading assets file {reader.FullPath}\", e);\nreader.Dispose();\n}\n}\nelse\n{\nLogger.Info($\"Skipping {reader.FullPath}\"); reader.Dispose(); } }", "CodeBleu_score": 58.132510151048436}, {"code": "private void LoadAssetsFromMemory(FileReader reader, string originalPath, string unityVersion = null){\n\tif (!assetsFileListHash.Contains(reader.FileName)) {\nLogger.Info($\"Loading {reader.FullPath}\"); try { var assetsFile = new SerializedFile(reader, this, originalPath, unityVersion); CheckStrippedVersion(assetsFile); assetsFileList.Add(assetsFile); assetsFileListHash.Add(assetsFile.fileName); foreach (var sharedFile in assetsFile.m_Externals) { var sharedFileName = sharedFile.fileName; if (!importFilesHash.Contains(sharedFileName)) { var sharedFilePath = Path.Combine(Path.GetDirectoryName(reader.FullPath), sharedFileName); if (!noexistFiles.Contains(sharedFilePath)) { if (!File.Exists(sharedFilePath)) { var findFiles = Directory.GetFiles(Path.GetDirectoryName(reader.FullPath), sharedFileName, SearchOption.AllDirectories); if (findFiles.Length > 0) { sharedFilePath = findFiles[0]; } } if (File.Exists(sharedFilePath)) { importFiles.Add(sharedFilePath); importFilesHash.Add(sharedFileName); } else { noexistFiles.Add(sharedFilePath); } } } } } catch (Exception e) { Logger.Error($\"Error while reading assets file {reader.FullPath}\", e);\nreader.Dispose();\n}\n}\nelse {\nLogger.Info($\"Skipping {reader.FullPath}\"); reader.Dispose(); } }", "CodeBleu_score": 56.063229786439585}]}
{"instance_id": "5dacc6a26301", "generation_result": [{"code": "public ImportedFrame FindFrameByPath(string path){\n\tar frame = this;\nvar name = Path.GetFileName(path);\nwhile (frame.Parent!= null)\n{\nframe = frame.Parent;\nif (frame.Name == name)\nreturn frame;\n}\nreturn null;\n}", "CodeBleu_score": 33.791070629160046}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tar names = path.Split('/');\nvar frame = this;\nfor (var i = 0; i < names.Length; i++) {\nvar name = names[i];\nif (frame.children.Count > 0) {\nfor (var j = 0; j < frame.children.Count; j++) {\nif (frame.children[j].Name == name) {\nframe = frame.children[j];\nbreak;\n}\n}\n}\nelse {\nreturn null;\n}\n}\nreturn frame;\n}", "CodeBleu_score": 38.08531175642115}, {"code": "public ImportedFrame FindFrameByPath(string path){\n\tar frame = this;\nvar names = path.Split('/');\nfor (int i = 0; i < names.Length; i++) {\nvar name = names[i];\nvar index = frame.children.FindIndex(x => x.Name == name);\nif (index == -1)\nreturn null;\nframe = frame.children[index];\n}\nreturn frame;\n}", "CodeBleu_score": 38.39251637764588}]}
{"instance_id": "c20b04c4ad37", "generation_result": [{"code": "public static FileReader DecompressGZip(FileReader reader){\n\t ms = new MemoryStream();\n\treader.CopyTo(ms);\n\tms.Position = 0;\n\tvar gzip = new GZipStream(ms, CompressionMode.Decompress);\n\tvar result = new FileReader(gzip);\n\tgzip.Close();\n\treturn result;\n}", "CodeBleu_score": 28.908076831931496}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t memoryStream = new MemoryStream();\n\treader.CopyTo(memoryStream);\n\tmemoryStream.Position = 0;\n\tvar gzipStream = new GZipStream(memoryStream, CompressionMode.Decompress);\n\tvar decompressed = new FileReader(gzipStream);\n\treturn decompressed;\n}", "CodeBleu_score": 31.691685344024474}, {"code": "public static FileReader DecompressGZip(FileReader reader){\n\t stream = new MemoryStream();\n\treader.CopyTo(stream);\n\tstream.Position = 0;\n\tvar decompressedStream = new MemoryStream();\n\tusing (var decompressionStream = new GZipStream(stream, CompressionMode.Decompress)) {\n\t\tdecompressionStream.CopyTo(decompressedStream);\n\t}\n\treturn new FileReader(decompressedStream.ToArray());\n}", "CodeBleu_score": 40.583631551934}]}
{"instance_id": "11ce5c7b009d", "generation_result": [{"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tforeach (string commandString in commandStrings) {\n\t\tif (ParseString(commandString, switchForms))\n\t\t\tcontinue;\n\t\tNonSwitchStrings.Add(commandString);\n\t}\n}", "CodeBleu_score": 24.3954651518938}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tstring commandString = commandStrings[i];\n\t\tif (!ParseString(commandString, switchForms)) {\n\t\t\tNonSwitchStrings.Add(commandString);\n\t\t}\n\t}\n}", "CodeBleu_score": 37.08006265328544}, {"code": "public void ParseStrings(SwitchForm[] switchForms, string[] commandStrings){\n\t\tfor (int i = 0; i < commandStrings.Length; i++) {\n\t\tstring commandString = commandStrings[i];\n\t\tif (commandString == null)\n\t\t\tcontinue;\n\t\tif (ParseString(commandString, switchForms))\n\t\t\tcontinue;\n\t\tNonSwitchStrings.Add(commandString);\n\t}\n}", "CodeBleu_score": 39.046493261740565}]}
{"instance_id": "b8da2d0a3f76", "generation_result": [{"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\treader = new ResourceReader(m_Texture2D);\n\tm_Width = reader.GetInt32(\"m_Width\");\n\tm_Height = reader.GetInt32(\"m_Height\");\n\tm_TextureFormat = (TextureFormat)reader.GetInt32(\"m_TextureFormat\");\n\tversion = reader.GetInt32Array(\"version\");\n\tplatform = (BuildTarget)reader.GetInt32(\"platform\");\n\toutPutSize = reader.GetInt32(\"outPutSize\");\n}", "CodeBleu_score": 34.38173173952547}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\treader = new ResourceReader(m_Texture2D);\n\tm_Width = reader.ReadInt32();\n\tm_Height = reader.ReadInt32();\n\tm_TextureFormat = (TextureFormat)reader.ReadInt32();\n\tversion = new int[3];\n\tversion[0] = reader.ReadInt32();\n\tversion[1] = reader.ReadInt32();\n\tversion[2] = reader.ReadInt32();\n\tplatform = (BuildTarget)reader.ReadInt32();\n\toutPutSize = reader.ReadInt32();\n}", "CodeBleu_score": 30.351073309964644}, {"code": "public Texture2DConverter(Texture2D m_Texture2D){\n\t\tthis.reader = m_Texture2D.GetRawTextureData();\n\tthis.m_Width = m_Texture2D.width;\n\tthis.m_Height = m_Texture2D.height;\n\tthis.m_TextureFormat = m_Texture2D.format;\n\tthis.version = new int[2];\n\tthis.platform = BuildTarget.StandaloneWindows;\n\tthis.outPutSize = 0;\n\tthis.version[0] = 1;\n\tthis.version[1] = 0;\n}", "CodeBleu_score": 34.12536922389303}]}
{"instance_id": "4d1412b550a3", "generation_result": [{"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\nresult.Clear();\n\nfor (int i = 0; i < sp.arraySize; ++i)\n{\nvar name = sp.GetArrayElementAtIndex(i).stringValue;\nif (!string.IsNullOrEmpty(name))\n{\nresult.Add(name);\n}\n}\n\nif (result.Count == 0)\n{\nreturn s_ContentNothing.text;\n}\n\ns_Sb.Length = 0;\nfor (int i = 0; i < result.Count; ++i)\n{\ns_Sb.Append(result[i]);\nif (i < result.Count - 1)\n{\ns_Sb.Append(\", \");\n}\n}\nreturn s_Sb.ToString();\n}", "CodeBleu_score": 51.31452900263683}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++)\n\t{\n\t\tstring name = sp.GetArrayElementAtIndex(i).FindPropertyRelative(\"name\").stringValue;\n\t\tif (name!= null && name.Length > 0)\n\t\t{\n\t\t\tresult.Add(name);\n\t\t}\n\t}\n\tif (result.Count == 0)\n\t{\n\t\treturn s_ContentNothing.text;\n\t}\n\ts_Sb.Length = 0;\n\tfor (int i = 0; i < result.Count; i++)\n\t{\n\t\ts_Sb.Append(result[i]);\n\t\tif (i < result.Count - 1)\n\t\t{\n\t\t\ts_Sb.Append(\", \");\n\t\t}\n\t}\n\treturn s_Sb.ToString();\n}", "CodeBleu_score": 52.60083166094066}, {"code": "private static string CollectActiveNames(SerializedProperty sp, List<string> result){\n\t\tresult.Clear();\n\tfor (int i = 0; i < sp.arraySize; i++) {\n\t\tresult.Add(sp.GetArrayElementAtIndex(i).stringValue);\n\t}\n\tif (result.Count == 0) {\n\t\treturn s_ContentNothing.text;\n\t}\n\ts_Sb.Length = 0;\n\tfor (int i = 0; i < result.Count; i++) {\n\t\ts_Sb.Append(result[i]);\n\t\tif (i!= result.Count - 1) {\n\t\t\ts_Sb.Append(\", \");\n\t\t}\n\t}\n\treturn s_Sb.ToString();\n}", "CodeBleu_score": 48.80442786050625}]}
{"instance_id": "5014bde74f8b", "generation_result": [{"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t", "CodeBleu_score": 4.975552625378207}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t(!prop.IsValid) return;\n\nvar name = prop.Name;\nvar type = prop.Type;\n\nvar current = sp.FindPropertyRelative(\"m_Name\");\nvar index = current.arraySize;\n\nif (add) {\nif (current.FindPropertyRelative(\"m_Name\").stringValue == name) return;\n\nif (current.arraySize == 0) {\nsp.InsertArrayElementAtIndex(index);\n}\n\ncurrent.GetArrayElementAtIndex(index).FindPropertyRelative(\"m_Name\").stringValue = name;\ncurrent.GetArrayElementAtIndex(index).FindPropertyRelative(\"m_Type\").intValue = (int)type;\n\nsp.serializedObject.ApplyModifiedProperties();\n} else {\nfor (var i = 0; i < current.arraySize; i++) {\nif (current.GetArrayElementAtIndex(i).FindPropertyRelative(\"m_Name\").stringValue == name) {\nsp.DeleteArrayElementAtIndex(i);\nbreak;\n}\n}\n\nsp.serializedObject.ApplyModifiedProperties();\n}\n}", "CodeBleu_score": 37.1122192122218}, {"code": "private static void AddMenu(GenericMenu menu, SerializedProperty sp, ShaderProperty prop, bool add){\n\t name = prop.name;\nvar type = prop.type;\n\nif (type == AnimatableProperty.ShaderPropertyType.Texture)\n{\nif (add)\n{\nvar spName = sp.FindPropertyRelative(\\\"m_Name\\\");\nif (spName == null) return;\n\nspName.stringValue = name;\nsp.serializedObject.ApplyModifiedProperties();\n}\n\nreturn;\n}\n\nvar index = s_Names.IndexOf(name);\nif (index == -1) return;\n\nif (add)\n{\nvar spName = sp.FindPropertyRelative(\\\"m_Name\\\");\nif (spName == null) return;\n\nspName.stringValue = name;\nsp.serializedObject.ApplyModifiedProperties();\n}\nelse\n{\nvar spName = sp.FindPropertyRelative(\\\"m_Name\\\");\nif (spName == null) return;\n\nspName.stringValue = string.Empty;\nsp.serializedObject.ApplyModifiedProperties();\n}\n}", "CodeBleu_score": 29.769965168210366}]}
{"instance_id": "20e390481814", "generation_result": [{"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tif (sp.hasMultipleDifferentValues) {\nEditorGUI.BeginChangeCheck();\nshowXyz = GUILayout.Toggle(showXyz, s_ContentVector3, EditorStyles.miniButton, GUILayout.Width(60));\nif (EditorGUI.EndChangeCheck()) {\nsp.floatValue = showXyz? 0 : sp.vector3Value.x;\n}\n}\nelse {\nEditorGUI.BeginChangeCheck();\nshowXyz = GUILayout.Toggle(showXyz, s_ContentVector3, EditorStyles.miniButton, GUILayout.Width(60));\nif (EditorGUI.EndChangeCheck()) {\nsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n}\n}\n\nEditorGUI.BeginDisabledGroup(sp.hasMultipleDifferentValues);\nEditorGUI.indentLevel++;\nif (showXyz) {\nEditorGUI.BeginChangeCheck();\nEditorGUILayout.PropertyField(sp);\nif (EditorGUI.EndChangeCheck()) {\nsp.vector3Value = new Vector3(sp.floatValue, sp.floatValue, sp.floatValue);\n}\n}\nelse {\nEditorGUI.BeginChangeCheck();\nEditorGUILayout.PropertyField(sp.FindPropertyRelative(\\\"x\\\"), s_ContentX, GUILayout.Width(50));\nif (EditorGUI.EndChangeCheck()) {\nsp.floatValue = sp.vector3Value.x;\n}\n}\nEditorGUI.indentLevel--;\nEditorGUI.EndDisabledGroup();\n}", "CodeBleu_score": 44.68604262673411}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\tbool showXyzTemp = showXyz;\n\nif (!showXyz) {\nif (Mathf.Approximately(sp.floatValue, sp.vector3Value.x)) {\nshowXyzTemp = true;\n}\n}\n\nEditorGUI.BeginChangeCheck();\nshowXyzTemp = GUILayout.Toggle(showXyzTemp, s_ContentShowXyz, EditorStyles.miniButton, GUILayout.Width(60));\nif (EditorGUI.EndChangeCheck()) {\nshowXyz = showXyzTemp;\n}\n\nEditorGUI.BeginDisabledGroup(showXyzTemp);\nif (showXyzTemp) {\nEditorGUI.indentLevel++;\nEditorGUILayout.PropertyField(sp, s_ContentXyz, true);\nEditorGUI.indentLevel--;\n} else {\nEditorGUILayout.PropertyField(sp, s_ContentX, true);\n}\nEditorGUI.EndDisabledGroup();\n\nreturn showXyzTemp;\n}", "CodeBleu_score": 30.965959094981876}, {"code": "private static bool DrawFloatOrVector3Field(SerializedProperty sp, bool showXyz){\n\t", "CodeBleu_score": 1.5486635295409983}]}
{"instance_id": "c3587cbcda7e", "generation_result": [{"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t\tfor (int i = 0; i < s_Entries.Count; i++) {\n\t\tif (s_Entries[i].baseMat == baseMat && s_Entries[i].texture == texture && s_Entries[i].id == id && s_Entries[i].props == props) {\n\t\t\ts_Entries[i].count++;\n\t\t\treturn s_Entries[i].mat;\n\t\t}\n\t}\n\tMatEntry entry = new MatEntry();\n\tentry.baseMat = baseMat;\n\tentry.texture = texture;\n\tentry.id = id;\n\tentry.props = props;\n\tentry.mat = new Material(baseMat);\n\tentry.mat.shader = Shader.Find(\"Hidden/UIParticleExtensions/ModifiedMaterial\");\n\tentry.mat.SetTexture(\"_MainTex\", texture);\n\tentry.mat.SetInt(\"_ID\", id);\n\tentry.mat.SetInt(\"_Props\", props);\n\tentry.count = 1;\n\ts_Entries.Add(entry);\n\treturn entry.mat;\n}", "CodeBleu_score": 33.572782195767545}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t", "CodeBleu_score": 4.0916924613467}, {"code": "public static Material Add(Material baseMat, Texture texture, int id, int props){\n\t", "CodeBleu_score": 4.0916924613467}]}
{"instance_id": "a35149bc8b8b", "generation_result": [{"code": "public static void Remove(Material customMat){\n\tcustomMat == null) return;\n\tMatEntry e;\n\tfor (var i = 0; i < s_Entries.Count; i++) {\n\t\te = s_Entries[i];\n\t\tif (e.customMat!= customMat) continue;\n\t\t--e.count;\n\t\tif (e.count > 0) continue;\n\t\t//Debug.LogFormat(\\\">>>> ModifiedMaterial.Remove -> count = count:{0}, mat:{1}\\\", s_Entries.Count, customMat);\n\n\t\tif (e.customMat!= null) {\n\t\t\tDestroyImmediate(e.customMat);\n\t\t\te.customMat = null;\n\t\t}\n\t\ts_Entries.RemoveAt(i);\n\t\tbreak;\n\t}\n}", "CodeBleu_score": 48.298598541969696}, {"code": "public static void Remove(Material customMat){\n\ttry e;\nfor (var i = 0; i < s_Entries.Count; i++) {\ne = s_Entries[i];\nif (e.customMat!= customMat) continue;\n--e.count;\nif (e.count > 0) continue;\ns_Entries.RemoveAt(i);\nDestroyImmediate(e.customMat);\n}\n}", "CodeBleu_score": 35.46048286659037}, {"code": "public static void Remove(Material customMat){\n\tbug.LogFormat(\\\">>>> ModifiedMaterial.Remove -> mat:{0}\\\", customMat);\n\n\tif (customMat == null) return;\n\n\tfor (var i = 0; i < s_Entries.Count; i++) {\n\n\t\tvar e = s_Entries[i];\n\n\t\tif (e.customMat!= customMat) continue;\n\n\t\t--e.count;\n\n\t\tif (e.count > 0) return;\n\n\t\tDestroyImmediate(e.customMat);\n\n\t\te.customMat = null;\n\n\t\te.baseMat = null;\n\n\t\te.texture = null;\n\n\t\te.id = 0;\n\n\t\te.props = 0;\n\n\t\ts_Entries.RemoveAt(i);\n\n\t\treturn;\n\n\t}\n\n}", "CodeBleu_score": 54.68398233185099}]}
{"instance_id": "892bbee52ab9", "generation_result": [{"code": "private void RefreshParticles(GameObject root){\n\tvar list = new List<ParticleSystem>();\nvar childCount = root.transform.childCount;\nfor (var i = 0; i < childCount; i++) {\nvar go = root.transform.GetChild(i).gameObject;\nif (go.TryGetComponent<Camera>(out var cam) && cam == _bakeCamera) continue;\nif (go.TryGetComponent<UIParticleRenderer>(out var _)) continue;\n\ngo.SetActive(false);\nMisc.Destroy(go);\n}\n\nvar tr = root.transform;\ntr.SetParent(transform, false);\ntr.localPosition = Vector3.zero;\n\nRefreshParticles(root.GetComponentsInChildren<ParticleSystem>());\n}", "CodeBleu_score": 45.82630178988509}, {"code": "private void RefreshParticles(GameObject root){\n\t\tif (!root) return;\n\tvar list = new List<ParticleSystem>();\n\troot.GetComponentsInChildren(list);\n\tvar count = list.Count;\n\tfor (var i = 0; i < count; i++) {\n\t\tvar p = list[i];\n\t\tif (p == null) continue;\n\t\tif (p.gameObject.TryGetComponent<UIParticleRenderer>(out var _)) continue;\n\t\tlist.Remove(p);\n\t}\n\tcount = list.Count;\n\tfor (var i = 0; i < count; i++) {\n\t\tvar p = list[i];\n\t\tif (p == null) continue;\n\t\tvar sheet = p.textureSheetAnimation;\n\t\tif (sheet!= null && sheet.enabled) {\n\t\t\tsheet.UpdateUVTransform();\n\t\t}\n\t}\n\tRefreshParticles(list);\n}", "CodeBleu_score": 40.35152389945961}, {"code": "private void RefreshParticles(GameObject root){\n\tvar children = root.GetComponentsInChildren<ParticleSystem>();\nvar childCount = children.Length;\nvar particleCount = particles.Count;\nvar particleSystemCount = 0;\nvar particleSystemList = new List<ParticleSystem>();\nvar materialCount = 0;\nvar materialList = new List<Material>();\n\nfor (var i = 0; i < childCount; i++) {\nvar child = children[i];\nif (!child) continue;\nif (child.gameObject == gameObject) continue;\n\nif (!child.TryGetComponent<Camera>(out var cam) || cam == _bakeCamera) {\nif (child.TryGetComponent<UIParticleRenderer>(out var _)) continue;\n\nchild.SetActive(false);\nMisc.Destroy(child.gameObject);\ncontinue;\n}\n\nchild.SetActive(true);\nparticleSystemList.Add(child);\nmaterialCount += child.GetMaterials(materialList);\nparticleSystemCount++;\n}\n\nif (particleSystemCount!= particleCount) {\nvar oldParticles = particles;\nparticles = particleSystemList;\n\nfor (var i = 0; i < oldParticles.Count; i++) {\nvar p = oldParticles[i];\nif (!particles.Contains(p)) {\nMisc.Destroy(p.gameObject);\n}\n}\n\nmaterialCount = 0;\nmaterialList.ForEach(m => materialCount += m.GetMaterials(materialList));\n}\n\nif (materialCount!= _materialCount) {\n_materialCount = materialCount;\n_materialList = materialList;\n}\n\nif (particles.Count!= 0) {\nRefreshParticles(particles);\n}\n}", "CodeBleu_score": 47.58903450062959}]}
{"instance_id": "d6b082e37770", "generation_result": [{"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tsemblyTypes(currentAssembly)\n.AssignableTo<IColorSwapManager>()\n.As<IColorSwapManager>()\n.AsSelf()\n.SingleInstance();\n}", "CodeBleu_score": 41.136566967262425}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tsemblyTypes(currentAssembly)\n.AssignableTo<IColorSwapManager>()\n.As<IColorSwapManager>()\n.AsSelf()\n.SingleInstance();\n}", "CodeBleu_score": 41.136566967262425}, {"code": "private void RegisterColorSwapManagers(ContainerBuilder containerBuilder){\n\tsemblyTypes(currentAssembly)\n.AssignableTo<IColorSwapManager>()\n.As<IColorSwapManager>()\n.AsSelf()\n.SingleInstance();\n}", "CodeBleu_score": 41.136566967262425}]}
{"instance_id": "2359d72977a4", "generation_result": [{"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t// The IP address and port are set\nIpAddress = ipAddress;\nServerPort = port;\n\n// Wait for the serializer initialization task to complete\nawait initSerializerTask;\n\n// Initiate a reservation negotiation using the current state\nawait ReserveAsync(CurrentState);\n}", "CodeBleu_score": 58.08103841826014}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t Log.Info(\\\"Initializing MultiplayerSessionManager...\\\");\n IpAddress = ipAddress;\n ServerPort = port;\n await initSerializerTask;\n\n Reservation = await CurrentState.InitiateReservationAsync(this);\n\n }", "CodeBleu_score": 61.03699092245122}, {"code": " public async Task ConnectAsync(string ipAddress, int port){\n\t this.IpAddress = ipAddress;\n this.ServerPort = port;\n await initSerializerTask;\n await CurrentState.ReserveAsync(this);\n }", "CodeBleu_score": 52.67187663789028}]}
{"instance_id": "151a27d718b1", "generation_result": [{"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\turrentState == sessionConnectionState) {\nreturn;\n}\n\nIMultiplayerSessionConnectionState previousState = CurrentState;\nCurrentState = sessionConnectionState;\n\nLog.Info($\"Transitioned from {previousState.GetType().Name} to {CurrentState.GetType().Name}\");\n\nif (CurrentState is SessionReserved sessionReserved) {\nLog.InGame(Language.main.Get(\"Nitrox_SessionReserved\").Replace(\"{playerName}\", sessionReserved.PlayerName));\n}\n\nConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(previousState, CurrentState));\n}", "CodeBleu_score": 40.003278531674155}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tessionConnectionState == null) {\nthrow new ArgumentNullException(nameof(sessionConnectionState));\n}\n\nif (CurrentState!= sessionConnectionState) {\nLog.Info($\"Transition from {CurrentState.GetType().Name} to {sessionConnectionState.GetType().Name}\");\nCurrentState = sessionConnectionState;\n\nif (CurrentState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) {\nLog.InGame(Language.main.Get(\"Nitrox_JoinedSession\").Replace(\"{playerName}\", PlayerSettings.PlayerName));\n}\n\nConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(CurrentState.CurrentStage));\n}\n}", "CodeBleu_score": 40.32542896804314}, {"code": "public void UpdateConnectionState(IMultiplayerSessionConnectionState sessionConnectionState){\n\tessionConnectionState == null) {\nthrow new ArgumentNullException(nameof(sessionConnectionState));\n}\n\nif (CurrentState.CurrentStage == sessionConnectionState.CurrentStage) {\nreturn;\n}\n\nLog.Info($\"Transitioning from {CurrentState.CurrentStage} to {sessionConnectionState.CurrentStage}\"); Log.InGame(Language.main.Get(\"Nitrox_TransitioningFrom\").Replace(\"{currentStage}\", CurrentState.CurrentStage.ToString()).Replace(\"{newStage}\", sessionConnectionState.CurrentStage.ToString())); CurrentState = sessionConnectionState; if (sessionConnectionState.CurrentStage == MultiplayerSessionConnectionStage.SESSION_RESERVED) { Log.Info($\"Setting player name to {PlayerSettings.PlayerName}\");\nLog.InGame(Language.main.Get(\"Nitrox_PlayerName\").Replace(\"{playerName}\", PlayerSettings.PlayerName));\n}\n\nConnectionStateChanged?.Invoke(this, new MultiplayerSessionConnectionStateChangedEventArgs(CurrentState.CurrentStage));\n}", "CodeBleu_score": 40.46035160667613}]}
{"instance_id": "7f7717307d6a", "generation_result": [{"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\tawait Task.Run(() => {\nclient.Start();\nclient.Connect(ipAddress, serverPort, \"\");\nconnectedEvent.WaitOne(2000);\nconnectedEvent.Reset();\n});\n}", "CodeBleu_score": 54.55445971487231}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t", "CodeBleu_score": 7.1600438194900775}, {"code": "public async Task StartAsync(string ipAddress, int serverPort){\n\t", "CodeBleu_score": 7.1600438194900775}]}
{"instance_id": "eeb95434f1eb", "generation_result": [{"code": "public void StartFireSuppression(NitroxId id){\n\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\nCyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\nfireSuppressionButton.StartCooldown();\n}", "CodeBleu_score": 31.63713950517037}, {"code": "public void StartFireSuppression(NitroxId id){\n\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\nCyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\nfireSuppressionButton.StartCooldown();\nusing (PacketSuppressor<EntityMetadataUpdate>.Suppress()) {\nfireSuppressionButton.Invoke(nameof(CyclopsFireSuppressionButton.StartFireSuppression), 3f);\nfireSuppressionButton.subRoot.voiceNotificationManager.PlayVoiceNotification(fireSuppressionButton.subRoot.fireSuppressionNotification, false, true);\nfireSuppressionButton.subRoot.BroadcastMessage(\"UpdateTotalFireSuppression\", fireSuppressionButton.fireSuppressionCount, SendMessageOptions.DontRequireReceiver);\n}\n}", "CodeBleu_score": 63.74659419067169}, {"code": "public void StartFireSuppression(NitroxId id){\n\tGameObject cyclops = NitroxEntity.RequireObjectFrom(id);\nCyclopsFireSuppressionButton fireSuppressionButton = cyclops.RequireComponentInChildren<CyclopsFireSuppressionButton>();\nfireSuppressionButton.StartCooldown();\nusing (PacketSuppressor<EntityMetadataUpdate>.Suppress())\n{\nfireSuppressionButton.Invoke(nameof(CyclopsFireSuppressionButton.StartFireSuppression), 3f);\nfireSuppressionButton.subRoot.voiceNotificationManager.PlayVoiceNotification(fireSuppressionButton.subRoot.fireSuppressionNotification, false, true);\nfireSuppressionButton.subRoot.BroadcastMessage(\"UpdateTotalFireSuppression\", fireSuppressionButton.fireSuppressionCount, SendMessageOptions.DontRequireReceiver);\n}\n}", "CodeBleu_score": 63.767818409240896}]}
{"instance_id": "a23a043559c6", "generation_result": [{"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\tif (subRoot.id == this.id) {\nCyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRoot.id, damagePoint.id, repairAmount);\npacketSender.Send(packet);\n}\n}", "CodeBleu_score": 23.755483728117536}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\tif (subRoot.ID!= damagePoint.ID) {\n\t\treturn;\n\t}\n\n\tCyclopsDamagePointRepaired packet = new CyclopsDamagePointRepaired(subRoot.ID, damagePoint.ID, repairAmount);\n\tpacketSender.Send(packet);\n}", "CodeBleu_score": 25.394306428972225}, {"code": "public void OnDamagePointRepaired(SubRoot subRoot, CyclopsDamagePoint damagePoint, float repairAmount){\n\t\n// Verify that the damage point is actually on the SubRoot\nif (damagePoint.subRoot.id!= subRoot.id) {\nreturn;\n}\n\n// Create the repair packet\nCyclopsDamagePointRepaired repairPacket = new CyclopsDamagePointRepaired(subRoot.id, damagePoint.id, repairAmount);\n\n// Send the repair packet\npacketSender.Send(repairPacket);\n}", "CodeBleu_score": 26.569520056608592}]}
{"instance_id": "dfb3586de856", "generation_result": [{"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\nreturn;\n}\n\nif (subRoot.health.health <= 0) {\nreturn;\n}\n\nCyclopsDamageInfoData infoData = null;\nif (info.HasValue) {\ninfoData = new CyclopsDamageInfoData(info.Value.damage, info.Value.damageType, info.Value.damagePoint);\n}\n\nList<CyclopsDamagePoint> damagePoints = new List<CyclopsDamagePoint>();\nList<CyclopsFire> fires = new List<CyclopsFire>();\n\nforeach (CyclopsDamagePoint damagePoint in subRoot.damageManager.damagePoints) {\nif (damagePoint.active) {\ndamagePoints.Add(damagePoint);\n}\n}\n\nforeach (CyclopsFire fire in subRoot.fireManager.fires) {\nif (fire.active) {\nfires.Add(fire);\n}\n}\n\nCyclopsDamage packet = new CyclopsDamage(subId, damagePoints.ToArray(), fires.ToArray(), infoData);\npacketSender.Send(packet);\n}", "CodeBleu_score": 48.62812698194513}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\nreturn;\n}\n\nif (subRoot.health.health < subRoot.health.maxHealth) {\nreturn;\n}\n\nif (info.HasValue) {\nCyclopsDamageInfoData damageInfoData = new CyclopsDamageInfoData(info.Value.damageType, info.Value.damageAmount, info.Value.damageSource);\n}\n\nCyclopsDamagePoint[] damagePoints = subRoot.damageManager.damagePoints;\nCyclopsFire[] fires = subRoot.fireManager.fires;\n\nCyclopsDamage packet = new CyclopsDamage(subId, damagePoints, fires, damageInfoData);\npacketSender.Send(packet);\n}", "CodeBleu_score": 27.524507306496503}, {"code": "private void BroadcastDamageState(SubRoot subRoot, Optional<DamageInfo> info){\n\tif (!subRoot.TryGetIdOrWarn(out NitroxId subId)) {\nreturn;\n}\n\nfloat currentHealth = subRoot.liveMixin.health;\nif (currentHealth < 0f) {\nreturn;\n}\n\nCyclopsDamageInfoData damageInfoData = null;\nif (info.HasValue) {\ndamageInfoData = new CyclopsDamageInfoData(info.Value.damage, info.Value.damageType, info.Value.damageSource);\n}\n\nList<CyclopsDamagePoint> damagePoints = new List<CyclopsDamagePoint>();\nList<CyclopsFire> fires = new List<CyclopsFire>();\n\nfor (int i = 0; i < subRoot.damageManager.damagePoints.Length; i++) {\nCyclopsDamagePoint damagePoint = subRoot.damageManager.damagePoints[i];\nif (damagePoint.active) {\ndamagePoints.Add(damagePoint);\n}\n}\n\nfor (int i = 0; i < subRoot.fireManager.fires.Length; i++) {\nCyclopsFire fire = subRoot.fireManager.fires[i];\nif (fire.active) {\nfires.Add(fire);\n}\n}\n\nCyclopsDamage packet = new CyclopsDamage(subId, currentHealth, damagePoints.ToArray(), fires.ToArray(), damageInfoData);\npacketSender.Send(packet);\n}", "CodeBleu_score": 51.53750657357352}]}
{"instance_id": "03223c10109f", "generation_result": [{"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\nif (entity == null) {\ncontinue;\n}\n\n// Remove the entity hierarchy\nif (entity.ParentId!= null) {\nEntity parentEntity = GetEntity(entity.ParentId);\nif (parentEntity!= null) {\nparentEntity.ChildEntities.Remove(entity);\n}\n}\n\n// Attempt to get the GameObject associated with the entity\nGameObject entityGameObject = GetGameObject(entity);\nif (entityGameObject!= null) {\n// Destroy the GameObject\nGameObject.Destroy(entityGameObject);\n}\n\n// Remove the entity from the list\ndirtyEntities.Remove(entity);\n}\n}", "CodeBleu_score": 54.742777068623504}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\nif (entity.ParentId!= null) {\nEntity parentEntity = entityManager.GetEntity(entity.ParentId.Value);\nif (parentEntity!= null) {\nparentEntity.ChildEntities.Remove(entity);\n}\n}\n\nGameObject gameObject = entityGameObjectManager.GetGameObject(entity.Id);\nif (gameObject!= null) {\nGameObject.Destroy(gameObject);\n}\n}\n}", "CodeBleu_score": 49.912110272934584}, {"code": "public void CleanupExistingEntities(List<Entity> dirtyEntities){\n\tforeach (Entity entity in dirtyEntities) {\nif (entity.ParentId == null) {\ncontinue;\n}\nGameObject parentGameObject = GetGameObject(entity.ParentId.Value);\nif (parentGameObject == null) {\ncontinue;\n}\nDestroy(parentGameObject);\n}\n}", "CodeBleu_score": 44.97240633138174}]}
{"instance_id": "990abe8e473e", "generation_result": [{"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\npendingParentEntitiesByParentId[entity.ParentId] = pendingEntities = new();\n}\npendingEntities.Add(entity);\n}", "CodeBleu_score": 51.23475382090164}, {"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\npendingParentEntitiesByParentId.Add(entity.ParentId, pendingEntities = new List<Entity>());\n}\npendingEntities.Add(entity);\n}", "CodeBleu_score": 63.570152409194904}, {"code": "private void AddPendingParentEntity(Entity entity){\n\tif (!pendingParentEntitiesByParentId.TryGetValue(entity.ParentId, out List<Entity> pendingEntities)) {\npendingParentEntitiesByParentId[entity.ParentId] = pendingEntities = new();\n}\n\npendingEntities.Add(entity);\n}", "CodeBleu_score": 51.23475382090164}]}
{"instance_id": "a885fbb1f085", "generation_result": [{"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\nif (clawArm.cooldown == clawArm.pickupCooldown)\n{\nBroadcastArmAction(clawArm, START_USE_TOOL);\n}\nelse if (clawArm.cooldown == clawArm.punchCooldown)\n{\nBroadcastArmAction(clawArm, ALT_HIT);\n}\nelse\n{\nDebug.LogError(\\\"Invalid cooldown time for exosuit claw arm: \\\" + clawArm.cooldown);\n}\n}", "CodeBleu_score": 20.61870076219789}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t\tif (clawArm.IsPickupCooldown())\n\t{\n\t\tBroadcastArmAction(clawArm, START_USE_TOOL);\n\t}\n\telse if (clawArm.IsPunchCooldown())\n\t{\n\t\tBroadcastArmAction(clawArm, ALT_HIT);\n\t}\n\telse\n\t{\n\t\tDebug.LogError(\"ExosuitModuleEvent.BroadcastClawUse: The cooldown time is not matching any cooldown. ClawArm: \" + clawArm.name + \" Cooldown: \" + cooldown);\n\t}\n}", "CodeBleu_score": 24.921787383592463}, {"code": "public void BroadcastClawUse(ExosuitClawArm clawArm, float cooldown){\n\t", "CodeBleu_score": 5.196876225455179}]}
{"instance_id": "e390441c8dc2", "generation_result": [{"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\nif (!gameObject.TryGetIdOrWarn(out NitroxId batteryId)) {\nreturn;\n}\n\nif (!parent.TryGetIdOrWarn(out NitroxId ownerId)) {\nreturn;\n}\n\nif (!entityMetadataManager.TryGetMetadata(batteryId, out EntityMetadata entityMetadata)) {\nreturn;\n}\n\nInstalledBatteryEntity battery = new InstalledBatteryEntity(batteryId, techType, entityMetadata);\n\nif (packetSender.Send(new EntitySpawnedByClient(battery))) {\nLog.Debug($\"Sent: Added battery {battery.TechType} to container {parent.GetFullHierarchyPath()}\"); } }", "CodeBleu_score": 57.38007508598584}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\t\t// We don't want to broadcast that event if it's from another player's inventory\n\tif (parent.GetComponentInParent<RemotePlayerIdentifier>(true)) {\n\t\treturn;\n\t}\n\n\tif (!gameObject.TryGetIdOrWarn(out NitroxId batteryId)) {\n\t\treturn;\n\t}\n\n\tif (!parent.TryGetIdOrWarn(out NitroxId ownerId)) {\n\t\t// Error logging is done in the function\n\t\treturn;\n\t}\n\n\tif (packetSender.Send(new EntitySpawnedByClient(batteryId, ownerId, techType))) {\n\t\tLog.Debug($\"Sent: Added battery {batteryId} of type {techType} to container {parent.GetFullHierarchyPath()}\");\n\t}\n}", "CodeBleu_score": 56.7048348706324}, {"code": "public void BroadcastBatteryAdd(GameObject gameObject, GameObject parent, TechType techType){\n\tif (!gameObject.TryGetIdOrWarn(out NitroxId itemId)) {\nreturn;\n}\n\nif (!parent.TryGetIdOrWarn(out NitroxId parentId)) {\nreturn;\n}\n\nif (!entityMetadataManager.TryGetEntityMetadata(itemId, out EntityMetadata metadata)) {\nreturn;\n}\n\nInstalledBatteryEntity battery = new InstalledBatteryEntity(techType, metadata);\n\nif (!packetSender.Send(new EntitySpawnedByClient(itemId, parentId, battery))) {\nLog.Error($\"Failed to send EntitySpawnedByClient for {gameObject.name}\"); } Log.Debug($\"Sent: Added battery {techType} to {gameObject.GetFullHierarchyPath()}\");\n}", "CodeBleu_score": 63.658673852806835}]}
{"instance_id": "a87b772a8e5a", "generation_result": [{"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\t", "CodeBleu_score": 3.750387938056593}, {"code": "public void PickedUp(GameObject gameObject, TechType techType){\n\tif (PickingUpObject!= null) {\nreturn;\n}\n\nPickingUpObject = gameObject;\n\nif (gameObject.GetComponent<RemoteControl>()!= null) {\ngameObject.GetComponent<RemoteControl>().enabled = false;\n}\n\nNitroxId id = gameObject.GetComponent<NitroxId>();\nif (id == null) {\nid = new NitroxId(new Random().Next(int.MaxValue));\n}\n\ngameObject.GetComponent<EntityPosition>().enabled = false;\n\ngameObject.transform.SetParent(gameObject.transform.root);\n\ngameObject.GetComponent<InventoryItem>().enabled = true;\ngameObject.GetComponent<InventoryItem>().SetTechType(techType);\ngameObject.GetComponent<InventoryItem>().SetSpawned(true);\n\nentityMetadataManager.LogPickup(id, techType);\n\nPickupItem pickupItem = new PickupItem(id, techType);\npacketSender.Send(pickupItem);\n\nPickingUpObject = null;\n}", "CodeBleu_score": 41.65234662187769}]}
{"instance_id": "b6d1e68114e1", "generation_result": [{"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\nNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\n\nTechType techType = CraftData.GetTechType(gameObject);\n\nOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\n\n// The child entities are all the prefab children of the object, which are all children of the object, which is the gameObject itself\nList<Entity> childrenEntities = GetPrefabChildren(gameObject, id, entityMetadataManager).ToList();\n\n// If the object is dropped in the water, it'll be parented to a CellRoot so we let it as WorldEntity (see Items.Dropped)\n// PlaceTool's object is located under GlobalRoot or under a CellRoot (we differentiate both by giving a different type)\n// Because objects under CellRoots must only spawn when visible while objects under GlobalRoot must be spawned at all times\nswitch (gameObject.AliveOrNull()) {\ncase not null when IsGlobalRootObject(gameObject):\nreturn new GlobalRootEntity(gameObject.transform.ToWorldDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), null, childrenEntities);\ncase not null when Player.main.AliveOrNull()?.GetCurrentSub().AliveOrNull()?.TryGetNitroxId(out NitroxId parentId) == true:\nreturn new GlobalRootEntity(gameObject.transform.ToLocalDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), parentId, childrenEntities);\ndefault:\n// If the object is not under a SubRoot nor in GlobalRoot, it'll be under a CellRoot but we still want to remember its state\nreturn new PlacedWorldEntity(gameObject.transform.ToWorldDto(), 0, classId, true, id, techType.ToDto(), metadata.OrNull(), null, childrenEntities);\n}\n}", "CodeBleu_score": 55.18099469436768}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t\nNitroxId id = NitroxEntity.GetIdOrGenerateNew(gameObject);\nstring classId = gameObject.GetComponent<PrefabIdentifier>().ClassId;\nTechType techType = CraftData.GetTechType(gameObject);\n\n// This is the list of entities that will be spawned as children of the item.\n// They will be added to the item's list of children.\nList<Entity> childrenEntities = new();\n\n// We extract the entity's metadata and add it to the children list.\nOptional<EntityMetadata> metadata = entityMetadataManager.Extract(gameObject);\nif (metadata.HasValue) {\nchildrenEntities.Add(new EntityMetadataEntity(id, metadata.Value));\n}\n\n// If the item is a battery, we add the battery data to the entity.\nif (gameObject.TryGetComponent(out Battery battery)) {\nchildrenEntities.Add(new BatteryEntity(id, battery.capacity, battery.currentCharge, battery.isCharging));\n}\n\n// We add the item to the player's inventory.\nInventoryItemEntity inventoryItemEntity = new(id, classId, techType.ToDto(), childrenEntities);\n\nreturn inventoryItemEntity;\n}", "CodeBleu_score": 58.47420772992928}, {"code": "public static InventoryItemEntity ConvertToInventoryItemEntity(GameObject gameObject, EntityMetadataManager entityMetadataManager){\n\t", "CodeBleu_score": 5.84976360641335}]}
{"instance_id": "e416d51a7af7", "generation_result": [{"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tbody = new Lazy<GameObject>(() => {\n\t\tGameObject body = GameObject.Find(\\\"PlayerBody\\\");\n\t\tif (body == null) {\n\t\t\tbody = GameObject.Instantiate(GameObject.Find(\\\"PlayerBodyPrototype\\\"));\n\t\t\tbody.name = \\\"PlayerBody\\\";\n\t\t}\n\t\treturn body;\n\t});\n\tplayerModel = new Lazy<GameObject>(() => {\n\t\tGameObject playerModel = GameObject.Find(\\\"PlayerModel\\\");\n\t\tif (playerModel == null) {\n\t\t\tplayerModel = GameObject.Instantiate(GameObject.Find(\\\"PlayerModelPrototype\\\"));\n\t\t\tplayerModel.name = \\\"PlayerModel\\\";\n\t\t}\n\t\treturn playerModel;\n\t});\n\tbodyPrototype = new Lazy<GameObject>(() => {\n\t\tGameObject bodyPrototype = GameObject.Find(\\\"PlayerBodyPrototype\\\");\n\t\tif (bodyPrototype == null) {\n\t\t\tbodyPrototype = GameObject.Instantiate(GameObject.Find(\\\"PlayerBody\\\"));\n\t\t\tbodyPrototype.name = \\\"PlayerBodyPrototype\\\";\n\t\t}\n\t\treturn bodyPrototype;\n\t});\n\tPermissions = new PlayerSettings();\n}", "CodeBleu_score": 51.766970094242005}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tthis.body = new Lazy<GameObject>(() => {\n\t\tvar body = GameObject.Find(\\\"PlayerBody\\\");\n\t\tif (body == null) {\n\t\t\tbody = GameObject.Find(\\\"PlayerBody_Subnautica\\\");\n\t\t}\n\t\treturn body;\n\t});\n\tthis.playerModel = new Lazy<GameObject>(() => {\n\t\tvar playerModel = GameObject.Find(\\\"PlayerModel\\\");\n\t\tif (playerModel == null) {\n\t\t\tplayerModel = GameObject.Find(\\\"PlayerModel_Subnautica\\\");\n\t\t}\n\t\treturn playerModel;\n\t});\n\tthis.bodyPrototype = new Lazy<GameObject>(() => {\n\t\tvar bodyPrototype = GameObject.Find(\\\"PlayerBodyPrototype\\\");\n\t\tif (bodyPrototype == null) {\n\t\t\tbodyPrototype = GameObject.Find(\\\"PlayerBodyPrototype_Subnautica\\\");\n\t\t}\n\t\treturn bodyPrototype;\n\t});\n\tthis.Permissions = new PlayerSettings().Permissions;\n}", "CodeBleu_score": 49.295944655109444}, {"code": "public LocalPlayer(IMultiplayerSession multiplayerSession, IPacketSender packetSender, ThrottledPacketSender throttledPacketSender){\n\t\tthis.multiplayerSession = multiplayerSession;\n\tthis.packetSender = packetSender;\n\tthis.throttledPacketSender = throttledPacketSender;\n\tbody = new Lazy<GameObject>(() => Object.Instantiate(bodyPrototype.Value, Vector3.zero, Quaternion.identity));\n\tplayerModel = new Lazy<GameObject>(() => Object.Instantiate(playerModel.Value, Vector3.zero, Quaternion.identity));\n\tPermissions = new PlayerSettings(multiplayerSession.PlayerSettings.Permissions);\n}", "CodeBleu_score": 62.50028361180039}]}
{"instance_id": "def56af985df", "generation_result": [{"code": "private GameObject CreateBodyPrototype{\n\tget {\n// Ensure the player's head is visible.\nvar head = Player.main.RequireGameObject(\"player_view/head\");\nhead.SetActive(true);\n\n// Instantiate a clone of the body prototype.\nvar bodyPrototype = BodyPrototype;\nvar bodyPrototypeClone = Object.Instantiate(bodyPrototype);\n\n// Reset the head's shadow casting mode.\nvar headRenderer = head.GetComponent<Renderer>();\nheadRenderer.shadowCastingMode = ShadowCastingMode.Off;\n\n// Deactivate the clone and rename it.\nbodyPrototypeClone.SetActive(false);\nbodyPrototypeClone.name = \"RemotePlayerPrototype\";\n\n// Remove items held in hand.\nvar heldItems = bodyPrototypeClone.GetComponentsInChildren<HeldItem>();\nforeach (var heldItem in heldItems)\n{\nheldItem.gameObject.SetActive(false);\n}\n\nreturn bodyPrototypeClone;\n}\n}", "CodeBleu_score": 28.58498419152728}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\n// Ensure the player's head is visible\nPlayer.main.RequireGameObject(\"head\").SetActive(true);\n\n// Instantiate a clone of the body prototype\nvar clone = Instantiate(bodyPrototype.Value);\n\n// Reset the head's shadow casting mode\nclone.RequireGameObject(\"head\").GetComponent<Renderer>().shadowCastingMode = UnityEngine.Rendering.ShadowCastingMode.Off;\n\n// Deactivate the clone\nclone.SetActive(false);\n\n// Rename the clone to \"RemotePlayerPrototype\"\nclone.name = \"RemotePlayerPrototype\";\n\n// Remove items held in hand from the clone\nforeach (var item in clone.RequireGameObject(\"player_view\").RequireGameObject(\"hand\").GetComponentsInChildren<NitroxItem>()) {\nitem.Remove();\n}\n\nreturn clone;\n}\n}", "CodeBleu_score": 30.41983060544465}, {"code": "private GameObject CreateBodyPrototype{\n\tget {\nif (Player.main.IsPlayerHeadVisible()) {\n// Player head is visible, so we can create a prototype of the player's body\nGameObject bodyPrototype = GameObject.Instantiate(Player.main.RequireGameObject(\"body\"));\nbodyPrototype.name = \"RemotePlayerPrototype\";\n\n// Remove any items held in hand\nPlayer.main.RemoveItemsInHand();\n\n// Deactivate the prototype\nbodyPrototype.SetActive(false);\n\nreturn bodyPrototype;\n} else {\n// Player head is not visible, so we can't create a prototype\nreturn null;\n}\n}\n}", "CodeBleu_score": 17.965635127919473}]}
{"instance_id": "e9bd7f669aed", "generation_result": [{"code": "void ICacheable.Save(BinaryWriter bw){\n\t\tbw.Write(TypeName);\n\tbw.Write(Location);\n\tbw.Write(Metadata);\n\tbw.Write(Processes.Select(p => p.ProcessName));\n\tbw.Write(Dependencies.Select(d => d.PluginName));\n\tbw.Write(Incompatibilities.Select(d => d.PluginName));\n\tbw.Write(TargettedBepInExVersion);\n}", "CodeBleu_score": 21.820058118802002}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t", "CodeBleu_score": 1.8398687168104124}, {"code": "void ICacheable.Save(BinaryWriter bw){\n\t\nbw.Write(TypeName);\nbw.Write(Location);\nMetadata.Save(bw);\nbw.Write(Processes.Count());\nforeach (var process in Processes) {\nprocess.Save(bw);\n}\nbw.Write(Dependencies.Count());\nforeach (var dependency in Dependencies) {\ndependency.Save(bw);\n}\nbw.Write(Incompatibilities.Count());\nforeach (var incompatibility in Incompatibilities) {\nincompatibility.Save(bw);\n}\nbw.Write(TargettedBepInExVersion.ToString());\n\n}", "CodeBleu_score": 35.68181240869615}]}
{"instance_id": "a7e51620987d", "generation_result": [{"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\t\nvar pluginType = pluginAssembly.GetType(pluginInfo.Name);\n\nif (pluginType == null) {\nLogger.Log(LogLevel.Error, $\"Plugin {pluginInfo.Name} is missing.\"); return null; }\n\nvar pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\nif (pluginInstance == null) {\nLogger.Log(LogLevel.Error, $\"Plugin {pluginInfo.Name} is missing.\"); return null; }\n\nPluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n\npluginInstance.Load();\n\nreturn pluginInstance;\n}", "CodeBleu_score": 71.61098702833377}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tvar pluginType = pluginAssembly.GetType(pluginInfo.PluginTypeName);\nvar pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType);\n\nPluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n\npluginInstance.Load();\nreturn pluginInstance;\n}", "CodeBleu_score": 77.96408297215169}, {"code": "public override BasePlugin LoadPlugin(PluginInfo pluginInfo, Assembly pluginAssembly){\n\tif (pluginInfo == null)\nthrow new ArgumentNullException(nameof(pluginInfo));\nif (pluginAssembly == null)\nthrow new ArgumentNullException(nameof(pluginAssembly));\n\nvar pluginType = pluginAssembly.GetType(pluginInfo.PluginType);\nif (pluginType == null) {\nLogger.Log(LogLevel.Fatal, $\"Plugin type {pluginInfo.PluginType} not found in assembly {pluginAssembly.FullName}\"); return null; } var pluginInstance = (BasePlugin)Activator.CreateInstance(pluginType); if (pluginInstance == null) { Logger.Log(LogLevel.Fatal, $\"Could not create instance of {pluginInfo.PluginType}\"); return null; }\n\nPluginLoad?.Invoke(pluginInfo, pluginAssembly, pluginInstance);\n\npluginInstance.Load();\nreturn pluginInstance;\n}", "CodeBleu_score": 67.43850106227626}]}
{"instance_id": "0925dc086c01", "generation_result": [{"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\nPrepare();\nif (signature!= null) {\nTrampolineMethod = new DynamicMethod(\n$\\\"{OriginalMethod.Name}Trampoline\\\", signature, OriginalMethod.GetParameters().Select(p => p.ParameterType).ToArray(), OriginalMethod.Module);\n} else {\nTrampolineMethod = new DynamicMethod(\n$\\\"{OriginalMethod.Name}Trampoline\\\", OriginalMethod.ReturnType, OriginalMethod.GetParameters().Select(p => p.ParameterType).ToArray(), OriginalMethod.Module);\n}\n\nvar il = TrampolineMethod.GetILGenerator();\nil.Emit(OpCodes.Ldarg_0);\nil.Emit(OpCodes.Ldarg_1);\nil.Emit(OpCodes.Call, OriginalMethod);\nil.Emit(OpCodes.Ret);\n}\nreturn TrampolineMethod;\n}", "CodeBleu_score": 51.44178314935368}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\nPrepare();\nTrampolineMethod = GenerateNativeProxy(signature);\n}\nreturn TrampolineMethod;\n}", "CodeBleu_score": 55.464441922468666}, {"code": "public MethodBase GenerateTrampoline(MethodBase signature = null){\n\tif (TrampolineMethod == null) {\nPrepare();\nif (TrampolineMethod == null) {\nthrow new InvalidOperationException(\\\"Cannot generate trampoline\\\");\n}\n}\nreturn TrampolineMethod;\n}", "CodeBleu_score": 42.95957654498029}]}
{"instance_id": "cfab5c23610e", "generation_result": [{"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tvar assembly = Assembly.GetExecutingAssembly();\n\tvar resourceName = LocalizationFilePrefix + code + \\\".json\\\";\n\n\tusing (var stream = assembly.GetManifestResourceStream(resourceName))\n\tusing (var reader = new StreamReader(stream))\n\tusing (var json = JsonDocument.Parse(reader.ReadToEnd()))\n\t{\n\t\tvar dictionary = new Dictionary<string, string>();\n\n\t\tforeach (var element in json.RootElement.EnumerateObject())\n\t\t{\n\t\t\tdictionary.Add(element.Name, element.Value.GetString());\n\t\t}\n\n\t\treturn dictionary;\n\t}\n}", "CodeBleu_score": 41.635481505648244}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tvar assembly = typeof(LocalizationLoader).Assembly;\n\tvar resourceName = LocalizationFilePrefix + code + \\\".json\\\";\n\tusing var stream = assembly.GetManifestResourceStream(resourceName);\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(\\\"Could not find language file \\\" + resourceName + \\\".\\\");\n\t}\n\ttry {\n\t\treturn JsonSerializer.Deserialize<Dictionary<string, string>>(stream)?? throw new JsonException();\n\t} catch (JsonException e) {\n\t\tthrow new JsonException(\\\"Could not deserialize language file \\\" + resourceName + \\\".\\\", e);\n\t}\n}", "CodeBleu_score": 47.388456257227276}, {"code": "private static Dictionary<string, string> LoadLanguageInternal(string code){\n\t\tvar stream = Assembly.GetExecutingAssembly().GetManifestResourceStream(LocalizationFilePrefix + code + \\\".json\\\");\n\n\tif (stream == null) {\n\t\tthrow new NullReferenceException(string.Format(\\\"Language file for code \\\"{0} not found\\\", code));\n\t}\n\n\tvar json = JsonSerializer.Deserialize<Dictionary<string, string>>(stream);\n\n\tif (json == null) {\n\t\tthrow new JsonException(\\\"Error deserializing language file\\\");\n\t}\n\n\treturn json;\n}", "CodeBleu_score": 47.311363297092214}]}
{"instance_id": "9978bd31d199", "generation_result": [{"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint count = 0;\nforeach (IParseTree node in nodes) {\nif (node is ParserRuleContext) {\ncount += Visit(node);\n}\n}\nreturn count;\n}", "CodeBleu_score": 38.00777453310486}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tint expressionCount = 0;\nforeach (var node in nodes) {\nif (node is ParserRuleContext) {\nexpressionCount += Visit(node);\n}\n}\nreturn expressionCount;\n}", "CodeBleu_score": 48.033018179765506}, {"code": "private int GenerateCodeForExpressionsInFormattedText(IList<IParseTree> nodes){\n\tvar expressionCount = 0;\nforeach (var node in nodes) {\nif (node is ParserRuleContext) {\nexpressionCount++;\n}\n}\nreturn expressionCount;\n}", "CodeBleu_score": 34.98125050346025}]}
{"instance_id": "8f9bf9ee575a", "generation_result": [{"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\n// First, we have to generate code for any expressions in the formatted text.\n// This will return the number of expressions in the line.\nint expressionCount = GenerateCodeForExpressionsInFormattedText(context.formatted_text().children);\n\n// If the line has a line ID, we use that. Otherwise, we use the line number.\nstring lineID = context.line_id()!= null? context.line_id().GetText() : context.line_number().GetText();\n\n// Emit a RunLine opcode with the line ID and expression count.\ncompiler.Emit(RunLine, lineID, expressionCount);\n\n// If we're tracking, we need to emit a tracking event.\nif (trackingEnabled!= null)\n{\ncompiler.Emit(TrackLine, lineID);\n}\n\n// Return the number of expressions in the line.\nreturn expressionCount;\n}", "CodeBleu_score": 44.1222567952921}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t", "CodeBleu_score": 1.98421004410826}, {"code": "public override int VisitLine_statement(YarnSpinnerParser.Line_statementContext context){\n\t\nint expressionCount = 0;\n\n// First, visit all of the nodes, which are either terminal text\n// nodes or expressions. if they're expressions, we evaluate them,\n// and inject a positional reference into the final string.\nforeach (var child in context.children)\n{\nif (child is ITerminalNode)\n{\n// nothing to do; string assembly will have been done by the\n// StringTableGeneratorVisitor\n}\nelse if (child is ParserRuleContext)\n{\n// assume that this is an expression (the parser only\n// permits them to be expressions, but we can't specify that\n// here) - visit it, and we will emit code that pushes the\n// final value of this expression onto the stack. running\n// the line will pop these expressions off the stack.\nthis.Visit(child);\nexpressionCount += 1;\n}\n}\n\n// Now, we have a line of text with any expressions in it.\n// We need to assemble it, and then emit a RunLine opcode\n// with the assembled string and the number of expressions\n// that were in it.\n\n// First, assemble the string\nstring assembledString = this.VisitFormatted_text(context.formatted_text());\n\n// Next, emit a RunLine opcode\nthis.compiler.Emit(RunLine, this.VisitLine_id(context.line_id()), expressionCount);\n\n// Finally, emit a PushString opcode, which pushes the assembled string\n// onto the stack\nthis.compiler.Emit(PushString, assembledString);\n\nreturn 0;\n}", "CodeBleu_score": 46.605334596344726}]}
{"instance_id": "b70d033fed9c", "generation_result": [{"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\t\nvar results = Enumerable.Empty<Diagnostic>();\n\nforeach (var command in yarnFile.Commands) {\nif (command.CommandType == CommandType.Unknown) {\nvar diagnostic = new Diagnostic() {\nSeverity = DiagnosticSeverity.Warning,\nCode = \"YarnLanguageServer\",\nMessage = $\"Unknown command: {command.Name}\", AdditionalData = new Dictionary<string, object>() { { \"Command\", command } } }; results = results.Append(diagnostic); } } return results; }", "CodeBleu_score": 18.89696745780934}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\tvar results = Enumerable.Empty<Diagnostic>();\n\nforeach (var command in yarnFile.Commands) {\nif (command.Value.IsUnknown) {\nresults = results.Append(new Diagnostic {\nSeverity = DiagnosticSeverity.Warning,\nCode = \"YarnLanguageServer.UnknownCommand\",\nMessage = $\"Unknown command '{command.Value.CommandText}'\", AdditionalData = new Dictionary<string, string> { [\"command\"] = command.Value.CommandText } }); } } return results; }", "CodeBleu_score": 27.60866029027258}, {"code": "private static IEnumerable<Diagnostic> UnknownCommands(YarnFileData yarnFile){\n\tvar results = Enumerable.Empty<Diagnostic>();\n\nvar commandReferences = yarnFile.Commands.Select(c => c.Reference);\nvar knownCommands = yarnFile.KnownCommands.Select(c => c.Name);\n\nvar unknownCommands = commandReferences.Except(knownCommands);\n\nforeach (var command in unknownCommands) {\nresults = results.Concat(new[] {\nnew Diagnostic {\nSeverity = DiagnosticSeverity.Warning,\nCode = \"YarnLanguageServer.UnknownCommand\",\nMessage = \"Command not found: \" + command,\nSource = \"Yarn Language Server\",\nRange = new Range {\nStart = new Position(0, 0),\nEnd = new Position(0, 0)\n},\nData = new Dictionary<string, object> {\n{ \"command\", command }\n}\n}\n});\n}\n\nreturn results;\n}", "CodeBleu_score": 34.62975753630532}]}
{"instance_id": "9a072876f358", "generation_result": [{"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\t", "CodeBleu_score": 6.910749887959125}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\teturn new CodeActionRegistrationOptions() {\nDocumentSelector = new DocumentSelector(new[] {\nnew DocumentFilter() {\nScheme = \"file\",\nLanguage = \"yarn\"\n}\n}),\nCodeActionKinds = new Container<string>(new[] {\nCodeActionKind.QuickFix.Value\n}),\n// TODO: Enable resolve provider when we have support for this.\n// ResolveProvider = false,\n};\n}", "CodeBleu_score": 38.967496902260336}, {"code": "public CodeActionRegistrationOptions GetRegistrationOptions(CodeActionCapability capability, ClientCapabilities clientCapabilities){\n\tar documentSelector = new DocumentSelector(new [] {\nnew DocumentFilter() {\nScheme = \"file\",\nLanguage = \"yarn\",\n},\n});\n\nvar registrationOptions = new CodeActionRegistrationOptions() {\nDocumentSelector = documentSelector,\n};\n\nreturn registrationOptions;\n}", "CodeBleu_score": 22.1158950127709}]}
{"instance_id": "7b61df32aee3", "generation_result": [{"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tif (variables.TryGetValue(variableName, out object value)) {\nif (value is T typedValue) {\nresult = typedValue;\nreturn true;\n} else {\nthrow new ArgumentException($\"Value of type {value.GetType()} is not compatible with type {typeof(T)}\");\n}\n} else {\nresult = default(T);\nreturn false;\n}\n}", "CodeBleu_score": 47.67425536379252}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\tobject value;\nif (variables.TryGetValue(variableName, out value))\n{\nif (value is T)\n{\nresult = (T)value;\nreturn true;\n}\nelse\n{\nthrow new ArgumentException($\"Variable \\\"{variableName}\\\" is not of type {typeof(T).Name}.\");\n}\n}\nelse\n{\nresult = default(T);\nreturn false;\n}\n}", "CodeBleu_score": 47.212665862246006}, {"code": "public bool TryGetValue<T>(string variableName, out T result){\n\t\nif (variables.TryGetValue(variableName, out object value)) {\nif (value is T castValue) {\nresult = castValue;\nreturn true;\n}\nelse {\nthrow new ArgumentException($\"Variable \\\"{variableName}\\\" is of type \\\"{value.GetType().Name}\\\", but was expected to be of type \\\"{typeof(T).Name}\\\".\");\n}\n}\n\nresult = default;\nreturn false;\n}", "CodeBleu_score": 52.145956953175634}]}
{"instance_id": "7201488347ef", "generation_result": [{"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t\n}", "CodeBleu_score": 3.1620707511852335}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t", "CodeBleu_score": 2.543243612731241}, {"code": "public Dialogue(Yarn.IVariableStorage variableStorage){\n\t// TODO: this is a bit of a hack to make the compiler happy.\n// This should be removed when we have a better way to do this.\n//\n// We need to make sure that the compiler doesn't complain about\n// the fact that we're using a private constructor, because that\n// is the only way to do it.\n//\n// The compiler will complain if we don't do this, because it\n// thinks that the constructor is public, and that's not true.\n//\n// We don't want to make the constructor public, because it\n// should only be used by the static constructor.\nthis(variableStorage, null);\n}", "CodeBleu_score": 3.9685224275489794}]}
{"instance_id": "59b7b5a9c34a", "generation_result": [{"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID))\n{\nreturn -1;\n}\n\nfor (int i = 0; i < m_LoopListBankDataList.Count; ++i)\n{\nif (m_LoopListBankDataList[i].UniqueID == UniqueID)\n{\nreturn i;\n}\n}\n\nreturn -1;\n}", "CodeBleu_score": 87.46886997802432}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (string.IsNullOrEmpty(UniqueID))\n{\nreturn -1;\n}\n\nfor (int i = 0; i < m_LoopListBankDataList.Count; i++)\n{\nif (m_LoopListBankDataList[i].UniqueID == UniqueID)\n{\nreturn i;\n}\n}\n\nreturn -1;\n}", "CodeBleu_score": 73.99039326163195}, {"code": "public int FindUniqueID(string UniqueID){\n\tif (UniqueID == null || UniqueID == \"\") {\nreturn -1;\n}\n\nfor (int i = 0; i < m_LoopListBankDataList.Count; i++) {\nif (m_LoopListBankDataList[i].UniqueID == UniqueID) {\nreturn i;\n}\n}\n\nreturn -1;\n}", "CodeBleu_score": 66.98208512524018}]}
{"instance_id": "2b85606238aa", "generation_result": [{"code": "public void AddContent(object newContent){\n\tLoopListBankData TempCustomData = new LoopListBankData();\nTempCustomData.Content = newContent;\nTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\nm_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 86.60913298611337}, {"code": "public void AddContent(object newContent){\n\t\nif (newContent == null)\n{\nreturn;\n}\n\nLoopListBankData TempCustomData = null;\nTempCustomData = new LoopListBankData();\nTempCustomData.Content = newContent;\nTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\nm_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 71.62679097756113}, {"code": "public void AddContent(object newContent){\n\t\nLoopListBankData TempCustomData = new LoopListBankData();\nTempCustomData.Content = newContent;\nTempCustomData.UniqueID = System.Guid.NewGuid().ToString();\nm_LoopListBankDataList.Add(TempCustomData);\n}", "CodeBleu_score": 86.60097764915304}]}
{"instance_id": "34e593106991", "generation_result": [{"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\nm_Content = content;\nm_UniqueID = ClickUniqueID;\nm_Content = ClickObject;\nif (m_IsUpdateGameObjectName) {\ngameObject.name = m_PrefabName + idx;\n}\n}", "CodeBleu_score": 50.6725504048257}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\nm_Content = content;\n\n// Set the index of the button to the index of the cell.\nm_Button.transform.SetSiblingIndex(m_IndexID);\n\nif (m_IsUpdateGameObjectName) {\nm_Button.name = m_PrefabName + m_IndexID.ToString();\n}\n\nif (ClickUniqueID!= \"\") {\nm_UniqueID = ClickUniqueID;\n}\n\nif (ClickObject!= null) {\nm_Content = ClickObject;\n}\n}", "CodeBleu_score": 50.719376918712776}, {"code": "public virtual void ScrollCellIndex(int idx, object content, string ClickUniqueID = \"\", object ClickObject = null){\n\tm_IndexID = idx;\nm_Content = content;\nm_UniqueID = ClickUniqueID;\nm_Content = ClickObject;\nif (m_IsUpdateGameObjectName)\n{\ngameObject.name = m_PrefabName + \"_\" + idx;\n}\n}", "CodeBleu_score": 52.630452352146065}]}
{"instance_id": "6b6a6cc329cc", "generation_result": [{"code": "private void OnButtonAddDataClickk(){\n\tint numToAdd = 1;\nif (int.TryParse(m_InputFieldAddData.text, out numToAdd))\n{\nnumToAdd = Mathf.Max(1, numToAdd);\nfor (int i = 0; i < numToAdd; i++)\n{\nm_ListBank.AddData(Random.Range(0, 10));\n}\nm_ScrollRect.UpdateTotalCount();\nm_ScrollRect.RefreshCells();\n}\n}", "CodeBleu_score": 42.20098714533595}, {"code": "private void OnButtonAddDataClickk(){\n\tint count = 0;\nif (int.TryParse(m_InputFieldAddData.text, out count)) {\nif (count < 1) {\ncount = 1;\n}\nfor (int i = 0; i < count; i++) {\nm_ListBank.Add(Random.Range(0, 10));\n}\nm_ScrollRect.totalCount = m_ListBank.Count;\nm_ScrollRect.RefreshCells();\n}\n}", "CodeBleu_score": 38.03687775934806}, {"code": "private void OnButtonAddDataClickk(){\n\tint addCount = 0;\n\nif (int.TryParse(m_InputFieldAddData.text, out addCount)) {\naddCount = Mathf.Max(1, addCount);\n\nfor (int i = 0; i < addCount; i++) {\nm_ListBank.AddData(Random.Range(0, 10));\n}\n\nm_ListBank.UpdateTotalCount();\nm_ListBank.RefreshCells();\n}\n}", "CodeBleu_score": 43.29575641697871}]}
{"instance_id": "209961c9eb8e", "generation_result": [{"code": "protected override void ClearTempPool(){\n\t\nif (m_Content.childCount!= itemTypeStart + itemTypeEnd) {\n\nif (deletedItemTypeStart > 0) {\n\ndeletedItemTypeStart = 0;\n\nfor (int i = 0; i < itemTypeStart; i++) {\n\nprefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n\n}\n\nitemTypeStart = 0;\n\n}\n\nif (deletedItemTypeEnd > 0) {\n\ndeletedItemTypeEnd = 0;\n\nfor (int i = m_Content.childCount - 1; i >= m_Content.childCount - itemTypeEnd; i--) {\n\nprefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n\n}\n\nitemTypeEnd = 0;\n\n}\n\n}\n\n}", "CodeBleu_score": 51.85341847131407}, {"code": "protected override void ClearTempPool(){\n\t\nif (m_Content.childCount!= m_TotalItemCount) {\nDebug.LogError(\"The content has \" + m_Content.childCount + \" child elements, but the total item count is \" + m_TotalItemCount + \".\");\nreturn;\n}\n\nif (deletedItemTypeStart > 0) {\ndeletedItemTypeStart = 0;\n\nfor (int i = 0; i < itemTypeStart; i++) {\nprefabSource.ReturnObject(m_Content.GetChild(i));\n}\n\nm_Content.DetachChildren();\n}\n\nif (deletedItemTypeEnd > 0) {\ndeletedItemTypeEnd = 0;\n\nfor (int i = m_Content.childCount - 1; i >= itemTypeEnd; i--) {\nprefabSource.ReturnObject(m_Content.GetChild(i));\n}\n\nm_Content.DetachChildren();\n}\n\n}", "CodeBleu_score": 54.785568961552244}, {"code": "protected override void ClearTempPool(){\n\tif (m_Content.childCount!= itemTypeStart + itemTypeEnd) {\nDebug.LogError(\"The content has the wrong number of child elements. Expected: \" + (itemTypeStart + itemTypeEnd) + \", Actual: \" + m_Content.childCount);\nreturn;\n}\nif (deletedItemTypeStart > 0) {\ndeletedItemTypeStart = 0;\nfor (int i = 0; i < itemTypeStart; i++) {\nprefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n}\n}\nif (deletedItemTypeEnd > 0) {\ndeletedItemTypeEnd = 0;\nfor (int i = m_Content.childCount - 1; i >= itemTypeStart + itemTypeEnd; i--) {\nprefabSource.ReturnObject(m_Content.GetChild(i).gameObject);\n}\n}\n}", "CodeBleu_score": 49.73774485950856}]}
{"instance_id": "c6bb290de2b3", "generation_result": [{"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkManager.ShutdownInProgress ||!NetworkManager.IsListening) {\nreturn;\n}\ntransform.localScale = newScale;\nm_AnticipatedTransform.Scale = newScale;\nif (CanCommitToTransform) {\nm_AuthoritativeTransform.Scale = newScale;\n}\n\nm_PreviousAnticipatedTransform = m_AnticipatedTransform;\n\nm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\nm_LastAnticipationTime = NetworkManager.LocalTime.Time;\n\nm_SmoothDuration = 0;\nm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 74.28561478402996}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkManager.ShutdownInProgress ||!NetworkManager.IsListening) {\nreturn;\n}\ntransform.localScale = newScale;\nm_AnticipatedTransform.Scale = newScale;\nif (CanCommitToTransform) {\nm_AuthoritativeTransform.Scale = newScale;\n}\nm_PreviousAnticipatedTransform = m_AnticipatedTransform;\nm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\nm_LastAnticipationTime = NetworkManager.LocalTime.Time;\nm_SmoothDuration = 0;\nm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 74.28561478402996}, {"code": "public void AnticipateScale(Vector3 newScale){\n\tif (NetworkManager.ShutdownInProgress ||!NetworkManager.IsListening) {\nreturn;\n}\ntransform.localScale = newScale;\nm_AnticipatedTransform.Scale = newScale;\nif (CanCommitToTransform) {\nm_AuthoritativeTransform.Scale = newScale;\n}\nm_PreviousAnticipatedTransform = m_AnticipatedTransform;\nm_LastAnticipaionCounter = NetworkManager.AnticipationSystem.AnticipationCounter;\nm_LastAnticipationTime = NetworkManager.LocalTime.Time;\nm_SmoothDuration = 0;\nm_CurrentSmoothTime = 0;\n}", "CodeBleu_score": 74.28561478402996}]}
{"instance_id": "d67d3c80dd00", "generation_result": [{"code": "private void FlushMessages(){\n\t\n}", "CodeBleu_score": 0.9250563135060029}, {"code": "private void FlushMessages(){\n\t\n}", "CodeBleu_score": 0.9250563135060029}, {"code": "private void FlushMessages(){\n\t\t// TODO: Add a check for if m_NetworkAnimator is null.\n\tif (m_NetworkAnimator.IsServer) {\n\t\tSendAnimationMessages();\n\t\tSendParameterMessages();\n\t\tSendTriggerMessages();\n\t}\n\telse {\n\t\tSendAnimationMessagesClient();\n\t\tSendParameterMessagesClient();\n\t\tSendTriggerMessagesClient();\n\t}\n\tClearAnimationMessages();\n\tClearParameterMessages();\n\tClearTriggerMessages();\n}", "CodeBleu_score": 11.580935576190717}]}
{"instance_id": "0632b2f27d22", "generation_result": [{"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_IsServer || m_NetworkAnimator.IsOwner) {\n\t\t\tFlushMessages();\n\t\t}\n\n\t\tif (m_NetworkAnimator.IsOwner) {\n\t\t\tProcessParameterUpdates();\n\t\t\tProcessAnimatorChanges();\n\t\t}\n\t}\n}", "CodeBleu_score": 13.5245657371137}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_IsServer || m_NetworkAnimator.IsOwner) {\n\t\t\tFlushMessages();\n\t\t}\n\n\t\tif (m_NetworkAnimator.IsOwner || m_IsServer) {\n\t\t\tProcessParameterUpdates();\n\t\t}\n\n\t\tif (m_NetworkAnimator.IsOwner || m_IsServer) {\n\t\t\tProcessAnimatorChanges();\n\t\t}\n\t}\n}", "CodeBleu_score": 24.60274715466266}, {"code": "public void NetworkUpdate(NetworkUpdateStage updateStage){\n\t\tif (updateStage == NetworkUpdateStage.PreUpdate) {\n\t\tif (m_IsServer || m_NetworkAnimator.IsOwner) {\n\t\t\tFlushMessages();\n\t\t}\n\n\t\tif (m_NetworkAnimator.IsOwner) {\n\t\t\tProcessParameterUpdates();\n\t\t}\n\n\t\tif (m_NetworkAnimator.IsOwner) {\n\t\t\tProcessAnimatorChanges();\n\t\t}\n\t}\n}", "CodeBleu_score": 19.33269498992938}]}
{"instance_id": "d78874b65b32", "generation_result": [{"code": "private void UpdateOwnershipAuthority(){\n\t (m_NetworkTransform.IsServerAuthoritative()) {\nm_IsAuthority = true;\n} else {\nm_IsAuthority = IsOwnerClient();\n}\n\nm_Rigidbody.interpolation = m_IsAuthority? m_OriginalInterpolation : (m_NetworkTransform.Interpolate? RigidbodyInterpolation.None : m_OriginalInterpolation);\nm_Rigidbody.isKinematic =!m_IsAuthority;\n}", "CodeBleu_score": 43.71807560852382}, {"code": "private void UpdateOwnershipAuthority(){\n\t_IsAuthority = m_NetworkTransform.IsServerAuthoritative();\n\tm_Rigidbody.interpolation = m_IsAuthority? m_OriginalInterpolation : (m_NetworkTransform.Interpolate? RigidbodyInterpolation.None : m_OriginalInterpolation);\n\tm_Rigidbody.isKinematic = true;\n}", "CodeBleu_score": 32.8910144932591}, {"code": "private void UpdateOwnershipAuthority(){\n\t", "CodeBleu_score": 2.2389150259391823}]}
{"instance_id": "304fe1278db9", "generation_result": [{"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}, {"code": "public static void DecompressQuaternion(ref Quaternion quaternion, uint compressed){\n\t", "CodeBleu_score": 2.8253030377269566}]}
{"instance_id": "452b860a7dde", "generation_result": [{"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t\tif (EditorApplication.isCompiling) {\n\t\tDebug.Log(\"Can't generate binding code while compiling\");\n\t\treturn;\n\t}\n\n\tstring path = EditorUtility.OpenFilePanel(\"Select dll to generate binding code\", \"\", \"dll\");\n\tif (path.Length == 0) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\t// Create and launch the AppDomain\n\t\tvar appDomain = new AppDomain();\n\t\tvar type = typeof(CLRBindingHelper);\n\t\tvar method = type.GetMethod(\"Initialize\");\n\t\tmethod.Invoke(null, new object[] { appDomain });\n\n\t\t// Load the assembly\n\t\tvar assembly = appDomain.Load(File.ReadAllBytes(path));\n\n\t\t// Generate the binding code\n\t\tvar helper = new CLRBindingHelper();\n\t\thelper.GenerateBindingCode(assembly, \"Binding\");\n\n\t\t// Refresh the AssetDatabase\n\t\tAssetDatabase.Refresh();\n\t}\n\tcatch (Exception e) {\n\t\tDebug.LogException(e);\n\t}\n}", "CodeBleu_score": 23.038564226090745}, {"code": "static void GenerateCLRBindingByAnalysis(){\n\t", "CodeBleu_score": 1.092067877948932}]}
{"instance_id": "b8990031b636", "generation_result": [{"code": "public override void OnInspectorGUI(){\n\tbase.OnInspectorGUI();\n\nif (EditorApplication.isPlaying &&!EditorApplication.isPlayingOrWillChangePlaymode) {\nif (m_ConfigHelperInfo.Helper == null) {\nEditorGUILayout.HelpBox(\\\"Please set the ConfigHelper in the ConfigComponent.\\\", MessageType.Warning);\n} else {\nEditorGUILayout.LabelField(\\\"Config Count\\\", m_ConfigHelperInfo.Helper.ConfigCount.ToString());\nEditorGUILayout.LabelField(\\\"Cached Bytes Size\\\", m_ConfigHelperInfo.Helper.CachedBytesSize.ToString());\n}\n} else {\nm_EnableLoadConfigUpdateEvent.boolValue = EditorGUILayout.Toggle(\\\"Enable Load Config Update Event\\\", m_EnableLoadConfigUpdateEvent.boolValue);\nm_EnableLoadConfigDependencyAssetEvent.boolValue = EditorGUILayout.Toggle(\\\"Enable Load Config Dependency Asset Event\\\", m_EnableLoadConfigDependencyAssetEvent.boolValue);\nm_CachedBytesSize.intValue = EditorGUILayout.IntField(\\\"Cached Bytes Size\\\", m_CachedBytesSize.intValue);\n\nif (m_EnableLoadConfigUpdateEvent.boolValue!= m_ConfigHelperInfo.Helper.EnableLoadConfigUpdateEvent) {\nm_ConfigHelperInfo.Helper.EnableLoadConfigUpdateEvent = m_EnableLoadConfigUpdateEvent.boolValue;\n}\n\nif (m_EnableLoadConfigDependencyAssetEvent.boolValue!= m_ConfigHelperInfo.Helper.EnableLoadConfigDependencyAssetEvent) {\nm_ConfigHelperInfo.Helper.EnableLoadConfigDependencyAssetEvent = m_EnableLoadConfigDependencyAssetEvent.boolValue;\n}\n\nif (m_CachedBytesSize.intValue!= m_ConfigHelperInfo.Helper.CachedBytesSize) {\nm_ConfigHelperInfo.Helper.CachedBytesSize = m_CachedBytesSize.intValue;\n}\n\nif (GUI.changed) {\nEditorUtility.SetDirty(m_ConfigHelperInfo.Helper);\nEditorUtility.SetDirty(serializedObject.targetObject);\n}\n}\n}", "CodeBleu_score": 39.550929578551106}, {"code": "public override void OnInspectorGUI(){\n\tbase.OnInspectorGUI();\nserializedObject.Update();\nEditorGUI.BeginDisabledGroup(Application.isPlaying);\nEditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent, new GUIContent(\\\"EnableLoadConfigUpdateEvent\\\"));\nEditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent, new GUIContent(\\\"EnableLoadConfigDependencyAssetEvent\\\"));\nEditorGUILayout.PropertyField(m_CachedBytesSize, new GUIContent(\\\"CachedBytesSize\\\"), true);\nEditorGUILayout.PropertyField(m_ConfigHelperInfo, true);\nEditorGUI.EndDisabledGroup();\nserializedObject.ApplyModifiedProperties();\n}", "CodeBleu_score": 43.623425267334056}, {"code": "public override void OnInspectorGUI(){\n\t\tserializedObject.Update();\n\n\tEditorGUI.BeginDisabledGroup(Application.isPlaying);\n\t{\n\t\tEditorGUILayout.PropertyField(m_EnableLoadConfigUpdateEvent);\n\t\tEditorGUILayout.PropertyField(m_EnableLoadConfigDependencyAssetEvent);\n\t\tEditorGUILayout.PropertyField(m_CachedBytesSize);\n\n\t\tif (m_ConfigHelperInfo.IsHelperEnabled()) {\n\t\t\tm_ConfigHelperInfo.Helper.OnInspectorGUI();\n\t\t}\n\t}\n\tEditorGUI.EndDisabledGroup();\n\n\tserializedObject.ApplyModifiedProperties();\n\tRepaint();\n}", "CodeBleu_score": 40.30152130213685}]}
{"instance_id": "6453adc2daa8", "generation_result": [{"code": "public static void DefaultScenes(){\n\thSet<string> defaultSceneNames = new HashSet<string>();\nforeach (string defaultSceneName in s_DefaultSceneNames) {\ndefaultSceneNames.Add(defaultSceneName);\n}\nList<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\nforeach (string defaultSceneName in defaultSceneNames) {\ndefaultScenes.Add(new EditorBuildSettingsScene(defaultSceneName, true));\n}\nEditorBuildSettings.scenes = defaultScenes.ToArray();\nDebug.Log(\"Scenes have been set to the default.\");\n}", "CodeBleu_score": 75.76436927946966}, {"code": "public static void DefaultScenes(){\n\thSet<string> defaultSceneNames = new HashSet<string>();\nList<EditorBuildSettingsScene> defaultScenes = new List<EditorBuildSettingsScene>();\nforeach (string defaultSceneName in s_DefaultSceneNames) {\ndefaultSceneNames.Add(defaultSceneName);\n}\nforeach (string searchScenePath in s_SearchScenePaths) {\nforeach (string sceneName in Directory.GetFiles(searchScenePath, \"*.unity\", SearchOption.AllDirectories)) {\nstring scenePath = sceneName.Substring(Application.dataPath.Length + 1);\nscenePath = scenePath.Replace(\\\"\\\\\\\\\\\", \\\"\\\");\nif (defaultSceneNames.Contains(sceneName)) {\ncontinue;\n}\ndefaultScenes.Add(new EditorBuildSettingsScene(scenePath, true));\n}\n}\nEditorBuildSettings.scenes = defaultScenes.ToArray();\nDebug.Log(\\\"Build settings scenes set to default.\\\");\n}", "CodeBleu_score": 57.65464432339843}, {"code": "public static void DefaultScenes(){\n\thSet<string> defaultSceneNames = new HashSet<string>(s_DefaultSceneNames);\nList<EditorBuildSettingsScene> scenes = new List<EditorBuildSettingsScene>();\nforeach (string defaultSceneName in defaultSceneNames) {\nscenes.Add(new EditorBuildSettingsScene(defaultSceneName, true));\n}\nEditorBuildSettings.scenes = scenes.ToArray();\nDebug.Log(\"Default scenes set to: \" + string.Join(\", \", defaultSceneNames));\n}", "CodeBleu_score": 53.29466235698463}]}
{"instance_id": "e199f1a42526", "generation_result": [{"code": "public void Draw(){\n\t", "CodeBleu_score": 0.774837219396175}, {"code": "public void Draw(){\n\t", "CodeBleu_score": 0.774837219396175}, {"code": "public void Draw(){\n\t", "CodeBleu_score": 0.774837219396175}]}
{"instance_id": "957e0aaa6f72", "generation_result": [{"code": "public static void DisableAllLogs(){\n\t\tDisableLogScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\tforeach (string aboveLogScriptingDefineSymbol in AboveLogScriptingDefineSymbols) {\n\t\tDisableLogScriptingDefineSymbol(aboveLogScriptingDefineSymbol);\n\t}\n\tforeach (string specifyLogScriptingDefineSymbol in SpecifyLogScriptingDefineSymbols) {\n\t\tDisableLogScriptingDefineSymbol(specifyLogScriptingDefineSymbol);\n\t}\n}", "CodeBleu_score": 58.09150923651909}, {"code": "public static void DisableAllLogs(){\n\tDisableLog(EnableLogScriptingDefineSymbol);\nDisableLog(EnableDebugAndAboveLogScriptingDefineSymbol);\nDisableLog(EnableInfoAndAboveLogScriptingDefineSymbol);\nDisableLog(EnableWarningAndAboveLogScriptingDefineSymbol);\nDisableLog(EnableErrorAndAboveLogScriptingDefineSymbol);\nDisableLog(EnableFatalAndAboveLogScriptingDefineSymbol);\nDisableLog(EnableDebugLogScriptingDefineSymbol);\nDisableLog(EnableInfoLogScriptingDefineSymbol);\nDisableLog(EnableWarningLogScriptingDefineSymbol);\nDisableLog(EnableErrorLogScriptingDefineSymbol);\nDisableLog(EnableFatalLogScriptingDefineSymbol);\n}", "CodeBleu_score": 28.955112243985266}, {"code": "public static void DisableAllLogs(){\n\t\tDisableLogScriptingDefineSymbol(EnableLogScriptingDefineSymbol);\n\tforeach (var aboveLogScriptingDefineSymbol in AboveLogScriptingDefineSymbols) {\n\t\tDisableLogScriptingDefineSymbol(aboveLogScriptingDefineSymbol);\n\t}\n\tforeach (var specifyLogScriptingDefineSymbol in SpecifyLogScriptingDefineSymbols) {\n\t\tDisableLogScriptingDefineSymbol(specifyLogScriptingDefineSymbol);\n\t}\n}", "CodeBleu_score": 50.67936215641444}]}
{"instance_id": "8a544c3d9513", "generation_result": [{"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tGameFrameworkComponent currentComponent = null;\n\tGameFrameworkComponent nextComponent = null;\n\n\tif (type == null) {\n\t\treturn null;\n\t}\n\n\tcurrentComponent = s_GameFrameworkComponents.First;\n\twhile (currentComponent!= null) {\n\t\tnextComponent = currentComponent.Next;\n\t\tif (currentComponent.GetType() == type) {\n\t\t\tcomponent = currentComponent;\n\t\t\tbreak;\n\t\t}\n\t\tcurrentComponent = nextComponent;\n\t}\n\treturn component;\n}", "CodeBleu_score": 35.53831088110571}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tGameFrameworkComponent[] components = GetAllComponents();\n\tfor (int i = 0; i < components.Length; i++) {\n\t\tif (components[i].GetType() == type) {\n\t\t\tcomponent = components[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn component;\n}", "CodeBleu_score": 29.985330969704776}, {"code": "public static GameFrameworkComponent GetComponent(Type type){\n\t\tGameFrameworkComponent component = null;\n\tGameFrameworkLinkedListNode<GameFrameworkComponent> node = s_GameFrameworkComponents.First;\n\twhile (node!= null) {\n\t\tcomponent = node.Value;\n\t\tif (component.GetType() == type) {\n\t\t\treturn component;\n\t\t}\n\t\tnode = node.Next;\n\t}\n\treturn null;\n}", "CodeBleu_score": 49.83350878667684}]}
{"instance_id": "ec304512c0e4", "generation_result": [{"code": "public static void Shutdown(ShutdownType shutdownType){\n\tf (GameEntry.Base!= null) {\n\t\tGameEntry.Base.Shutdown();\n\t}\n\ts_GameFrameworkComponents.Clear();\n\tswitch (shutdownType) {\n\t\tcase ShutdownType.Restart:\n\t\t\tSceneManager.LoadScene(GameFrameworkSceneId);\n\t\t\tbreak;\n\t\tcase ShutdownType.Quit:\n\t\t\tApplication.Quit();\n\t\t\tbreak;\n\t}\n}", "CodeBleu_score": 19.803636601728424}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\t", "CodeBleu_score": 1.5693307115311088}, {"code": "public static void Shutdown(ShutdownType shutdownType){\n\tebug.Log(\"Shutdown: \" + shutdownType);\n\n\tif (BaseComponent!= null) {\n\t\tBaseComponent.Shutdown();\n\t}\n\n\ts_GameFrameworkComponents.Clear();\n}", "CodeBleu_score": 13.047630251196155}]}
{"instance_id": "5c78a1d4f59d", "generation_result": [{"code": "protected override void Awake(){\n\tm_ConfigManager = GameFrameworkEntry.GetConfigManager();\nif (m_ConfigManager == null) {\nLog.Fatal(\"Config manager is invalid.\");\nreturn;\n}\nm_EventComponent = GameFrameworkEntry.GetEventComponent();\nif (m_EventComponent == null) {\nLog.Fatal(\"Event component is invalid.\");\nreturn;\n}\nif (m_EnableLoadConfigUpdateEvent) {\nm_EventComponent.Subscribe(GameFrameworkMessage.LoadConfigUpdateSuccess, OnLoadConfigUpdateSuccess);\nm_EventComponent.Subscribe(GameFrameworkMessage.LoadConfigUpdateFailure, OnLoadConfigUpdateFailure);\n}\nif (m_EnableLoadConfigDependencyAssetEvent) {\nm_EventComponent.Subscribe(GameFrameworkMessage.LoadConfigDependencyAssetSuccess, OnLoadConfigDependencyAssetSuccess);\nm_EventComponent.Subscribe(GameFrameworkMessage.LoadConfigDependencyAssetFailure, OnLoadConfigDependencyAssetFailure);\n}\n}", "CodeBleu_score": 39.92892898130104}, {"code": "protected override void Awake(){\n\tbase.Awake();\nm_ConfigManager = GameFrameworkEntry.GetConfigManager();\nif (m_ConfigManager == null) {\nLog.Fatal(\"Config manager is invalid.\");\nreturn;\n}\nm_EventComponent = GameFrameworkEntry.GetEventComponent();\nif (m_EventComponent == null) {\nLog.Fatal(\"Event component is invalid.\");\nreturn;\n}\nif (m_EnableLoadConfigUpdateEvent) {\nm_EventComponent.Subscribe(GameFrameworkMessage.LoadConfigUpdateSuccess, OnLoadConfigUpdateSuccess);\nm_EventComponent.Subscribe(GameFrameworkMessage.LoadConfigUpdateFailure, OnLoadConfigUpdateFailure);\n}\nif (m_EnableLoadConfigDependencyAssetEvent) {\nm_EventComponent.Subscribe(GameFrameworkMessage.LoadConfigDependencyAssetSuccess, OnLoadConfigDependencyAssetSuccess);\nm_EventComponent.Subscribe(GameFrameworkMessage.LoadConfigDependencyAssetFailure, OnLoadConfigDependencyAssetFailure);\n}\nif (m_CustomConfigHelper!= null) {\nm_ConfigManager.SetConfigHelper(m_CustomConfigHelper);\n} else {\nm_ConfigManager.SetConfigHelper(m_ConfigHelperTypeName);\n}\nm_ConfigManager.Initialize(m_CachedBytesSize);\n}", "CodeBleu_score": 41.28253598534302}, {"code": "protected override void Awake(){\n\t\tbase.Awake();\n\tm_ConfigManager = GameFrameworkEntry.GetConfigManager();\n\tif (m_ConfigManager == null) {\n\t\tLog.Fatal(\"Config manager is invalid.\");\n\t\treturn;\n\t}\n\tm_EventComponent = GameFrameworkEntry.GetEventComponent();\n\tif (m_EventComponent == null) {\n\t\tLog.Fatal(\"Event component is invalid.\");\n\t\treturn;\n\t}\n\tm_ConfigManager.LoadConfigSuccess += OnLoadConfigSuccess;\n\tm_ConfigManager.LoadConfigFailure += OnLoadConfigFailure;\n\tif (m_EnableLoadConfigUpdateEvent) {\n\t\tm_EventComponent.Subscribe<LoadConfigUpdateEventArgs>(OnLoadConfigUpdate);\n\t}\n\tif (m_EnableLoadConfigDependencyAssetEvent) {\n\t\tm_EventComponent.Subscribe<LoadConfigDependencyAssetEventArgs>(OnLoadConfigDependencyAsset);\n\t}\n\tm_ConfigManager.Init(m_ConfigHelperTypeName, m_CustomConfigHelper);\n\tm_ConfigManager.LoadConfig(m_CachedBytesSize);\n}", "CodeBleu_score": 54.748288947478464}]}
{"instance_id": "fbb36ff9d552", "generation_result": [{"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset == null) {\n\t\tLog.Warning(\\\"{0} is invalid.\\\", configAssetName);\n\t\treturn false;\n\t}\n\n\tTextAsset textAsset = configAsset as TextAsset;\n\tif (textAsset!= null) {\n\t\tif (configAssetName.EndsWith(BytesAssetExtension)) {\n\t\t\treturn ReadBytes(configManager, configAssetName, textAsset.bytes, userData);\n\t\t}\n\t\telse {\n\t\t\treturn ReadText(configManager, configAssetName, textAsset.text, userData);\n\t\t}\n\t}\n\n\tbyte[] bytes = configAsset as byte[];\n\tif (bytes!= null) {\n\t\treturn ReadBytes(configManager, configAssetName, bytes, userData);\n\t}\n\n\tLog.Warning(\\\"{0} is invalid.\\\", configAssetName);\n\treturn false;\n}", "CodeBleu_score": 60.62398393484194}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\tif (configAsset is TextAsset) {\n\t\treturn ReadData(configManager, configAssetName, (TextAsset)configAsset, userData);\n\t}\n\telse if (configAsset is byte[]) {\n\t\treturn ReadData(configManager, configAssetName, (byte[])configAsset, userData);\n\t}\n\telse {\n\t\tLog.Warning(\"Config asset is invalid.\");\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 50.448799623072546}, {"code": "public override bool ReadData(IConfigManager configManager, string configAssetName, object configAsset, object userData){\n\t\n//            if (configAsset is TextAsset) {\n//                TextAsset textAsset = configAsset as TextAsset;\n//                if (textAsset!= null) {\n//                    if (configAssetName.EndsWith(BytesAssetExtension)) {\n//                        return ReadBytesData(configManager, configAssetName, textAsset.bytes, userData);\n//                    }\n//                    return ReadTextData(configManager, configAssetName, textAsset.text, userData);\n//                }\n//            }\n//            Log.Warning(\"Invalid config asset: {0}\", configAssetName);\n//            return false;\n//        }", "CodeBleu_score": 18.540457875467933}]}
{"instance_id": "84d744c480ca", "generation_result": [{"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t {\nint position = 0;\nstring configLineString = null;\nwhile ((configLineString = Utility.Converter.GetString(configBytes, startIndex, length).ReadLine(ref position))!= null) {\nif (configLineString[0] == '#') {\ncontinue;\n}\n\nstring[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);\nif (splitedLine.Length!= ColumnCount) {\nLog.Warning(\"Can not parse config line string '{0}' which column count is invalid.\", configLineString);\nreturn false;\n}\n\nstring configName = splitedLine[1];\nstring configValue = splitedLine[3];\nif (!configManager.AddConfig(configName, configValue)) {\nLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\nreturn false;\n}\n}\n\nreturn true;\n}\ncatch (Exception exception) {\nLog.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\nreturn false;\n}\n}", "CodeBleu_score": 55.38455511351381}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t {\nint position = 0;\nstring configLineString = null;\nwhile ((configLineString = Utility.Converter.GetString(configBytes, startIndex + position, length - position))!= null) {\nif (configLineString[0] == '#') {\ncontinue;\n}\nstring[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);\nif (splitedLine.Length!= ColumnCount) {\nLog.Warning(\"Can not parse config line string '{0}' which column count is invalid.\", configLineString);\nreturn false;\n}\nstring configName = splitedLine[1];\nstring configValue = splitedLine[3];\nif (!configManager.AddConfig(configName, configValue)) {\nLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\nreturn false;\n}\nposition += configLineString.Length + 1;\n}\nreturn true;\n}\ncatch (Exception exception) {\nLog.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\nreturn false;\n}\n}", "CodeBleu_score": 56.6528517898205}, {"code": "public override bool ParseData(IConfigManager configManager, byte[] configBytes, int startIndex, int length, object userData){\n\t {\nint position = 0;\nstring configLineString = null;\nwhile ((configLineString = Utility.Converter.GetString(configBytes, startIndex, length).ReadLine(ref position))!= null) {\nif (configLineString[0] == '#') {\ncontinue;\n}\n\nstring[] splitedLine = configLineString.Split(ColumnSplitSeparator, StringSplitOptions.None);\nif (splitedLine.Length!= ColumnCount) {\nLog.Warning(\"Can not parse config line string '{0}' which column count is invalid.\", configLineString);\nreturn false;\n}\n\nstring configName = splitedLine[1];\nstring configValue = splitedLine[3];\nif (!configManager.AddConfig(configName, configValue)) {\nLog.Warning(\"Can not add config with config name '{0}' which may be invalid or duplicate.\", configName);\nreturn false;\n}\n}\n\nreturn true;\n}\ncatch (Exception exception) {\nLog.Warning(\"Can not parse config bytes with exception '{0}'.\", exception);\nreturn false;\n}\n}", "CodeBleu_score": 55.38455511351381}]}
{"instance_id": "298bb6fa19a4", "generation_result": [{"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t(m_ResourceComponent == null) {\nm_ResourceComponent = GameEntry.GetComponent<ResourceComponent>();\n}\nm_ResourceComponent.UnloadAsset(configAsset);\n}", "CodeBleu_score": 50.37573158783402}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t(m_ResourceComponent!= null) {\nm_ResourceComponent.UnloadAsset(configAsset);\n}\n}", "CodeBleu_score": 58.90441554598629}, {"code": "public override void ReleaseDataAsset(IConfigManager configManager, object configAsset){\n\t(m_ResourceComponent!= null) {\nm_ResourceComponent.UnloadAsset(configAsset);\n}\n}", "CodeBleu_score": 58.90441554598629}]}
{"instance_id": "fa2003d95e36", "generation_result": [{"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs activeSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\nactiveSceneChangedEventArgs.LastActiveScene = lastActiveScene;\nactiveSceneChangedEventArgs.ActiveScene = activeScene;\nreturn activeSceneChangedEventArgs;\n}", "CodeBleu_score": 62.27044071334853}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs activeSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\nactiveSceneChangedEventArgs.LastActiveScene = lastActiveScene;\nactiveSceneChangedEventArgs.ActiveScene = activeScene;\nreturn activeSceneChangedEventArgs;\n}", "CodeBleu_score": 62.27044071334853}, {"code": " public static ActiveSceneChangedEventArgs Create(Scene lastActiveScene, Scene activeScene){\n\tActiveSceneChangedEventArgs activeSceneChangedEventArgs = new ActiveSceneChangedEventArgs();\nactiveSceneChangedEventArgs.LastActiveScene = lastActiveScene;\nactiveSceneChangedEventArgs.ActiveScene = activeScene;\nreturn activeSceneChangedEventArgs;\n}", "CodeBleu_score": 62.27044071334853}]}
{"instance_id": "aba13f34251c", "generation_result": [{"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\nLog.Error(\"Scene asset name is invalid.\");\nreturn;\n}\n\nif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) ||!sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\nLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\nreturn;\n}\n\nm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 91.00467600943793}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\t\nif (string.IsNullOrEmpty(sceneAssetName)) {\nLog.Error(\"Scene asset name is invalid.\");\nreturn;\n}\n\nif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) ||!sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\nLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\nreturn;\n}\n\nm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 90.99591521245847}, {"code": "public void LoadScene(string sceneAssetName, int priority, object userData){\n\tif (string.IsNullOrEmpty(sceneAssetName)) {\nLog.Error(\"Scene asset name is invalid.\");\nreturn;\n}\n\nif (!sceneAssetName.StartsWith(\"Assets/\", StringComparison.Ordinal) ||!sceneAssetName.EndsWith(\".unity\", StringComparison.Ordinal)) {\nLog.Error(\"Scene asset name '{0}' is invalid.\", sceneAssetName);\nreturn;\n}\n\nm_SceneManager.LoadScene(sceneAssetName, priority, userData);\n}", "CodeBleu_score": 91.00467600943793}]}
{"instance_id": "3fe99fba3ce8", "generation_result": [{"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t\t// Register the modular feature\n\tIModularFeatures::Get().RegisterModularFeature(BINARIES_DIFF_PATCH_FEATURE_NAME, this, &FBinariesPatchFeatureModule::OnBinariesModularFeatureRegistered, &FBinariesPatchFeatureModule::OnBinariesModularFeatureUnRegistered);\n\t// Append all registered feature implementations to the binaries patch feature enumerations\n\tfor(const IModularFeature* ModularFeature : IModularFeatures::Get().GetModularFeatureImplementations(BINARIES_DIFF_PATCH_FEATURE_NAME)) {\n\t\tIBinariesDiffPatchFeature* Feature = static_cast<IBinariesDiffPatchFeature*>(ModularFeature);\n\t\tTHotPatcherTemplateHelper::AppendEnumeraters<EBinariesPatchFeature>(TArray<FString>{Feature->GetFeatureName()});\n\t}\n}", "CodeBleu_score": 55.85685528139855}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t", "CodeBleu_score": 2.5123187502257656}, {"code": "void FBinariesPatchFeatureModule::StartupModule(){\n\t", "CodeBleu_score": 2.5123187502257656}]}
{"instance_id": "c702cc0f74b5", "generation_result": [{"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t", "CodeBleu_score": 9.464279801391635}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> Result;\n\tFString TokenValue;\n\tTMap<FString, FString> CommandlineMap;\n\tFProcWorkerThread::ParseCommandLine(Commandline, CommandlineMap);\n\tif (CommandlineMap.Contains(Token)) {\n\t\tTokenValue = CommandlineMap[Token];\n\t\tFString::Split(TokenValue, Result, TEXT(\",\"), ESearchCase::IgnoreCase, ESearchDir::FromStart, true);\n\t}\n\treturn Result;\n}", "CodeBleu_score": 53.89447144596588}, {"code": "TArray<FString> CommandletHelper::ParserPatchConfigByCommandline(const FString& Commandline,const FString& Token){\n\t\tTArray<FString> ConfigArray;\n\tFString Config = Commandline;\n\tint32 Pos = Config.Find(Token);\n\tif (Pos!= INDEX_NONE) {\n\t\tConfig = Config.RightChop(Pos + Token.Len());\n\t\tConfig = Config.LeftChop(1);\n\t\tConfigArray = Config.ParseIntoArray(TEXT(\",\"), ESearchCase::IgnoreCase, ESearchDir::FromEnd);\n\t}\n\treturn ConfigArray;\n}", "CodeBleu_score": 50.264617678483795}]}
{"instance_id": "6a6382275b1d", "generation_result": [{"code": "bool CommandletHelper::IsCookCommandlet(){\n\ting CommandletName;\n\tif (GetCommandletArg(TEXT(\"Commandlet\"), CommandletName) &&!CommandletName.IsEmpty()) {\n\t\treturn CommandletName.Equals(TEXT(\"Cook\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 31.501292428541728}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\ting CommandletName;\n\tif (FParse::Value(FCommandLine::Get(), TEXT(\"Commandlet\"), CommandletName)) {\n\t\treturn CommandletName.Equals(TEXT(\"cook\"), ESearchCase::CaseSensitive);\n\t}\n\treturn false;\n}", "CodeBleu_score": 28.065041674697934}, {"code": "bool CommandletHelper::IsCookCommandlet(){\n\ting CommandletName;\n\tif (GetCommandletArg(TEXT(\"Commandlet\"), CommandletName)) {\n\t\treturn CommandletName.Equals(TEXT(\"cook\"), ESearchCase::IgnoreCase);\n\t}\n\treturn false;\n}", "CodeBleu_score": 27.08437003054061}]}
{"instance_id": "6888ed47b6be", "generation_result": [{"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t", "CodeBleu_score": 3.891263254644365}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t// Extract the commandlet name from the command line.\n\tFString CmdletName = FParse::Token(FCommandLine::Get(), false);\n\tif (CmdletName.IsEmpty()) {\n\t\tUE_LOG(LogHotPatcherCommandletBase, Error, TEXT(\"Commandlet name is empty\"));\n\t\treturn;\n\t}\n\n\t// Check if serverless counting is enabled in the settings.\n\tif (FExportReleaseSettings::Get().bEnableServerlessCounting) {\n\t\t// Initialize the counter with server request and project information.\n\t\tFString ProjectName = FPaths::GetBaseFilename(FPaths::GetProjectFilePath());\n\t\tFString CommandletName = FPaths::GetBaseFilename(CmdletName);\n\t\tFString ProjectNameWithCommandlet = FString::Printf(TEXT(\"%s_%s\"), *ProjectName, *CommandletName);\n\t\tFString ServerlessCounter = FString::Printf(TEXT(\"HotPatcher_%s\"), *ProjectNameWithCommandlet);\n\t\tFString CounterValue = FString::Printf(TEXT(\"%s_%s\"), *ProjectNameWithCommandlet, *CmdletName);\n\t\tFString CounterKey = FString::Printf(TEXT(\"HotPatcher_%s\"), *ProjectName);\n\n\t\t// Modify the project name to include the commandlet name if applicable.\n\t\tif (!CommandletName.IsEmpty()) {\n\t\t\tProjectName = ProjectNameWithCommandlet;\n\t\t}\n\n\t\t// Process the counter.\n\t\tFReleaseProxy::Get().ProcessCounter(ServerlessCounter, CounterValue, CounterKey);\n\t}\n}", "CodeBleu_score": 45.13760609137278}, {"code": "void UHotPatcherCommandletBase::Update(const FString& Params){\n\t// Get the commandlet name from the command line.\n\tFString CmdletName = FCommandLine::Get()->GetCommand();\n\n\t// Check if serverless counting is enabled in the settings.\n\tif (FExportReleaseSettings::Get().bEnableServerlessCounter) {\n\t\t// Initialize the counter with server request and project information.\n\t\tFString ProjectName = FPaths::GetBaseFilename(FPaths::GetProjectFilePath());\n\t\tFString ProjectVersion = FPaths::GetProjectVersion();\n\t\tFString CommandletName = CmdletName;\n\n\t\t// Modify the project name to include the commandlet name if applicable.\n\t\tif (!CommandletName.IsEmpty()) {\n\t\t\tProjectName = FString::Printf(TEXT(\"%s_%s\"), *ProjectName, *CommandletName);\n\t\t}\n\n\t\t// Process the counter.\n\t\tFReleaseProxy::ProcessCounter(ProjectName, ProjectVersion, CommandletName);\n\t}\n}", "CodeBleu_score": 37.1014393435168}]}
{"instance_id": "c467af995f29", "generation_result": [{"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\treturn TargetPlatform->PlatformName().StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\tTargetPlatform->PlatformName().StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 33.38142073365366}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform == nullptr) {\n\t\treturn false;\n\t}\n\n\tFString PlatformName = TargetPlatform->PlatformName().ToString();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(TEXT(\"MAC\"), ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 38.82103204009911}, {"code": "bool UFlibHotCookerHelper::IsAppleMetalPlatform(ITargetPlatform* TargetPlatform){\n\t\tif (TargetPlatform == nullptr) {\n\t\treturn false;\n\t}\n\tFString PlatformName = TargetPlatform->PlatformName().ToString();\n\treturn PlatformName.StartsWith(TEXT(\"IOS\"), ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(TEXT(\"Mac\"), ESearchCase::IgnoreCase) ||\n\t\tPlatformName.StartsWith(TEXT(\"TVOS\"), ESearchCase::IgnoreCase);\n}", "CodeBleu_score": 39.076458851735474}]}
{"instance_id": "3df342b1c6f8", "generation_result": [{"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t\t// get the package of the object\n\tconst UObject* Outer = Object->GetOutermost();\n\n\t// check if the package is valid\n\tif (Outer!= nullptr) {\n\t\t// get the package of the object\n\t\tUPackage* Package = Outer->GetOutermost();\n\n\t\t// check if the package is in CookerAssetsSet but is in AllAssetsSet and does not always require post-load processing\n\t\tif (CookerAssetsSet.Contains(Package) && AllAssetsSet.Contains(Package) &&!IsAlwayPostLoadClasses(Package, Object)) {\n\t\t\t// add the object to the PackageObjectsMap and FreezeObjects list\n\t\t\tPackageObjectsMap.Add(Package, Object);\n\t\t\tFreezeObjects.Add(Object);\n\n\t\t\t// clear the RF_NeedPostLoad and RF_NeedPostLoadSubobjects flags from the object\n\t\t\tObject->ClearFlags(RF_NeedPostLoad | RF_NeedPostLoadSubobjects);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.20944331465133}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}, {"code": "void FFreezePackageTracker::NotifyUObjectCreated(const UObjectBase* Object, int32 Index){\n\t", "CodeBleu_score": 2.897072745291081}]}
{"instance_id": "fac8b2878c3c", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tContext.ExportsBuffers.AddDefaulted(Record.Packages.Num());\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages)\n\t{\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FExportBuffer{ Package.Buffer, MoveTemp(Package.Regions) });\n\t}\n}", "CodeBleu_score": 29.446627952308468}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tContext.ExportsBuffers.AddDefaulted(Record.Packages.Num());\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages)\n\t{\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FExportBuffer{ Package.Buffer, MoveTemp(Package.Regions) });\n\t}\n}", "CodeBleu_score": 29.446627952308468}, {"code": "void FHotPatcherPackageWriter::CollectForSaveBulkData(FRecord& Record, FCommitContext& Context)\n{{\n\tfor (FPackageWriterRecords::FWriteBulkData& BulkData : Record.BulkData)\n\t{\n\t\tif (BulkData.Type == EBulkDataType::Exports)\n\t\t{\n\t\t\tContext.ExportsBuffers.AddDefaulted(BulkData.Info.MultiOutputIndex);\n\t\t\tContext.ExportsBuffers[BulkData.Info.MultiOutputIndex].Add(FExportBuffer{ BulkData.Buffer, MoveTemp(BulkData.Regions) });\n\t\t}\n\t\telse\n\t\t{\n\t\t\tContext.OutputFiles.Add(FOutputFileEntry{ BulkData.Type, BulkData.Info.Name, BulkData.Buffer, BulkData.Regions, BulkData.Flags });\n\t\t}\n\t}\n}", "CodeBleu_score": 41.876835562209855}]}
{"instance_id": "bf46051105c9", "generation_result": [{"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n\t\tFExportBuffer& ExportBuffer = Context.ExportsBuffers[Package.Info.MultiOutputIndex].AddDefaulted_GetRef();\n\t\tif (ExportBuffer.Buffer.Num() == 0) {\n\t\t\t// Create a new footer buffer\n\t\t\tFExportBuffer FooterBuffer;\n\t\t\tFooterBuffer.Buffer.Reserve(sizeof(FPackageFileTag));\n\t\t\tFooterBuffer.Buffer.AddUninitialized(sizeof(FPackageFileTag));\n\t\t\tFPackageFileTag* Footer = (FPackageFileTag*)FooterBuffer.Buffer.GetData();\n\t\t\tFooter->Tag = FPackageFileTag::PackageFileTag;\n\t\t\tFooter->PackageVersion = Package.Info.PackageVersion;\n\t\t\tFooterBuffer.Regions.Add(FExportBufferRegion{ 0, FooterBuffer.Buffer.Num() });\n\t\t\tExportBuffer = MoveTemp(FooterBuffer);\n\t\t}\n\t}\n}", "CodeBleu_score": 57.418470375034225}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\n\t// Add the package file tag to the end of each package's export buffer\n\tfor (FExportBuffer& ExportBuffer : Context.ExportsBuffers) {\n\t\tExportBuffer.Buffer.Append(FPackageFileTag());\n\t}\n}", "CodeBleu_score": 34.43691130005366}, {"code": "void FHotPatcherPackageWriter::CollectForSaveExportsFooter(FRecord& Record, FCommitContext& Context){\n\tif (Record.bCompletedExportsArchiveForDiff) {\n\t\t// Already Added in CompleteExportsArchiveForDiff\n\t\treturn;\n\t}\n\n\t// Add the package file tag to the export buffers\n\tfor (FPackageWriterRecords::FWritePackage& Package : Record.Packages) {\n\t\tContext.ExportsBuffers[Package.Info.MultiOutputIndex].Add(FExportBuffer{ FPackageFileTag(), MoveTemp(Package.Regions) });\n\t}\n}", "CodeBleu_score": 53.66800067711988}]}
{"instance_id": "c0966eddf1ee", "generation_result": [{"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tr::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent* CharacterMovement = Cast<UGDCharacterMovementComponent>(Character->GetMovementComponent());\n\tif (CharacterMovement) {\n\t\tCharacterMovement->RequestToStartSprinting = SavedRequestToStartSprinting;\n\t\tCharacterMovement->RequestToStartADS = SavedRequestToStartADS;\n\t}\n}", "CodeBleu_score": 75.56746564149597}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tr::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\tUGDCharacterMovementComponent* CharMovement = Cast<UGDCharacterMovementComponent>(Character->GetMovementComponent());\n\tif (CharMovement) {\n\t\tCharMovement->SavedRequestToStartSprinting = CharMovement->RequestToStartSprinting;\n\t\tCharMovement->SavedRequestToStartADS = CharMovement->RequestToStartADS;\n\t}\n}", "CodeBleu_score": 69.89910054829022}, {"code": "void UGDCharacterMovementComponent::FGDSavedMove::SetMoveFor(ACharacter * Character, float InDeltaTime, FVector const & NewAccel, FNetworkPredictionData_Client_Character & ClientData){\n\tr::SetMoveFor(Character, InDeltaTime, NewAccel, ClientData);\n\n\tUGDCharacterMovementComponent* MovementComponent = Cast<UGDCharacterMovementComponent>(Character->GetMovementComponent());\n\tif (MovementComponent) {\n\t\tMovementComponent->RequestToStartSprinting = SavedRequestToStartSprinting;\n\t\tMovementComponent->RequestToStartADS = SavedRequestToStartADS;\n\t}\n}", "CodeBleu_score": 68.61186740137516}]}
{"instance_id": "f73106356e9d", "generation_result": [{"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tif (AbilitySystemComponent && AbilitySystemComponent->IsValidLowLevel() && Attribute.IsValid()) {\n\t\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\t\tTask->Attribute = Attribute;\n\t\tTask->Task = AbilitySystemComponent->ListenForAttributeChange(Attribute, Task, &UAsyncTaskAttributeChanged::HandleAttributeChange);\n\t\treturn Task;\n\t}\n\telse {\n\t\tTask->RemoveFromRoot();\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 54.40577572459409}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (!AbilitySystemComponent) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ListenForAttributeChange: AbilitySystemComponent is null\"));\n\t\treturn nullptr;\n\t}\n\tif (!AbilitySystemComponent->IsValidLowLevel()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ListenForAttributeChange: AbilitySystemComponent is invalid\"));\n\t\treturn nullptr;\n\t}\n\tif (!Attribute.IsValid()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ListenForAttributeChange: Attribute is invalid\"));\n\t\treturn nullptr;\n\t}\n\n\t// Create and initialize the task\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->Attribute = Attribute;\n\n\t// Add the delegate\n\tFGameplayAttributeData AttributeData;\n\tAbilitySystemComponent->GetGameplayAttributeValue(Attribute, AttributeData);\n\tTask->AttributeData = AttributeData;\n\tTask->AttributeDelegateHandle = AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute, FOnGameplayAttributeValueChange::FDelegate::CreateUObject(Task, &UAsyncTaskAttributeChanged::OnAttributeChange));\n\n\treturn Task;\n}", "CodeBleu_score": 50.44852571926683}, {"code": "UAsyncTaskAttributeChanged* UAsyncTaskAttributeChanged::ListenForAttributeChange(UAbilitySystemComponent* AbilitySystemComponent, FGameplayAttribute Attribute){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"AbilitySystemComponent is null\"));\n\t\treturn nullptr;\n\t}\n\n\tif (Attribute.IsValid() == false) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Attribute is not valid\"));\n\t\treturn nullptr;\n\t}\n\n\tUAsyncTaskAttributeChanged* Task = NewObject<UAsyncTaskAttributeChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->Attribute = Attribute;\n\tTask->OnAttributeChangeDelegate.BindUFunction(Task, FName(\"OnAttributeChange\"));\n\tTask->AbilitySystemComponent->GetGameplayAttributeValueChangeDelegate(Attribute).Add(Task->OnAttributeChangeDelegate);\n\treturn Task;\n}", "CodeBleu_score": 52.02139387458118}]}
{"instance_id": "a581424c2b31", "generation_result": [{"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (!IsValid(ASC)) {\n\t\treturn;\n\t}\n\n\tASC->OnActiveGameplayEffectAddedDelegateFromSelf.RemoveAll(this);\n\tASC->OnGameplayEffectRemovedDelegateFromSelf.RemoveAll(this);\n\tASC->OnGameplayEffectLevelChangedDelegateFromSelf.RemoveAll(this);\n\tASC->OnGameplayEffectStackCountChangedDelegateFromSelf.RemoveAll(this);\n\n\tfor (FGameplayTag CooldownTag : CooldownTags.GetTags()) {\n\t\tASC->UnRegisterGameplayTagEvent(CooldownTag, EGameplayTagEventType::NewOrRemoved).RemoveAll(this);\n\t}\n\n\tASC = nullptr;\n\tCooldownTags.Clear();\n\tUseServerCooldown = false;\n\n\tReadyToDestroy = true;\n\tGarbage.Add(this);\n}", "CodeBleu_score": 53.04515317677665}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (!IsValid(ASC))\n\t{\n\t\treturn;\n\t}\n\n\tASC->OnActiveGameplayEffectAddedDelegateFromSelf.RemoveAll(this);\n\tASC->OnGameplayTagAddedDelegateFromSelf.RemoveAll(this);\n\tASC->OnGameplayTagRemovedDelegateFromSelf.RemoveAll(this);\n\n\tReadyToDestroy = true;\n\tMarkAsReadyForDestroy();\n}", "CodeBleu_score": 32.75368969751884}, {"code": "void UAsyncTaskCooldownChanged::EndTask(){\n\t\tif (IsValid(ASC)) {\n\t\tASC->OnActiveGameplayEffectAddedDelegateFromSelf.RemoveAll(this);\n\t\tASC->OnGameplayTagChangedDelegateFromSelf.RemoveAll(this);\n\t\tASC = nullptr;\n\t}\n\tReadyToDestroy = true;\n\tMarkAsReadyForDestroy();\n}", "CodeBleu_score": 33.949563344770404}]}
{"instance_id": "5029df3a2033", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tASC->OnGameplayEffectStackChangeDelegate(ActiveEffectHandle)->AddUObject(this, &UAsyncTaskEffectStackChanged::GameplayEffectStackChanged);\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, ActiveEffectHandle, -1, 0);\n\t}\n}", "CodeBleu_score": 76.1297088221115}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tASC->OnGameplayEffectStackChangeDelegate(ActiveEffectHandle)->AddUObject(this, &UAsyncTaskEffectStackChanged::GameplayEffectStackChanged);\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, ActiveEffectHandle, -1, 0);\n\t}\n}", "CodeBleu_score": 76.1297088221115}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tASC->OnGameplayEffectStackChangeDelegate(EffectRemoved.Handle)->AddUObject(this, &UAsyncTaskEffectStackChanged::GameplayEffectStackChanged);\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n\t}\n}", "CodeBleu_score": 81.05400879359314}]}
{"instance_id": "cb1d2823d203", "generation_result": [{"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (!AbilitySystemComponent) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ListenForGameplayEffectStackChange: AbilitySystemComponent is null\"));\n\t\treturn nullptr;\n\t}\n\tif (InEffectGameplayTag.IsValid()) {\n\t\tEffectGameplayTag = InEffectGameplayTag;\n\t\tAbilitySystemComponent->OnGameplayEffectSpecAppliedDelegateEx.AddUObject(this, &UAsyncTaskEffectStackChanged::OnGameplayEffectApplied);\n\t\tAbilitySystemComponent->OnGameplayEffectSpecRemovedDelegateEx.AddUObject(this, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\t\treturn this;\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ListenForGameplayEffectStackChange: EffectGameplayTag is not valid\"));\n\t\treturn nullptr;\n\t}\n}", "CodeBleu_score": 43.066354617864654}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\t// Validate the AbilitySystemComponent and EffectGameplayTag\n\tif (AbilitySystemComponent == nullptr) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"AbilitySystemComponent is null!\"));\n\t\treturn nullptr;\n\t}\n\tif (!InEffectGameplayTag.IsValid()) {\n\t\tUE_LOG(LogTemp, Error, TEXT(\"EffectGameplayTag is invalid!\"));\n\t\treturn nullptr;\n\t}\n\n\t// Create and initialize the task\n\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tTask->Init(AbilitySystemComponent, InEffectGameplayTag);\n\n\t// Register callbacks for when gameplay effects are added or removed\n\tTask->OnGameplayEffectAdded.AddDynamic(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectAdded);\n\tTask->OnGameplayEffectRemoved.AddDynamic(Task, &UAsyncTaskEffectStackChanged::OnGameplayEffectRemoved);\n\n\treturn Task;\n}", "CodeBleu_score": 44.920184427368326}, {"code": "UAsyncTaskEffectStackChanged * UAsyncTaskEffectStackChanged::ListenForGameplayEffectStackChange(UAbilitySystemComponent * AbilitySystemComponent, FGameplayTag InEffectGameplayTag){\n\t\tif (AbilitySystemComponent == nullptr) {\n\t\treturn nullptr;\n\t}\n\tif (InEffectGameplayTag == FGameplayTag()) {\n\t\treturn nullptr;\n\t}\n\tUAsyncTaskEffectStackChanged * Task = NewObject<UAsyncTaskEffectStackChanged>();\n\tTask->AbilitySystemComponent = AbilitySystemComponent;\n\tTask->EffectGameplayTag = InEffectGameplayTag;\n\tTask->RegisterCallbacks();\n\treturn Task;\n}", "CodeBleu_score": 36.858300887418594}]}
{"instance_id": "6659c2592e93", "generation_result": [{"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tASC->OnGameplayEffectStackChangeDelegate(ActiveEffectHandle)->AddUObject(this, &UAsyncTaskEffectStackChanged::GameplayEffectStackChanged);\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, ActiveEffectHandle, -1, 0);\n\t}\n}", "CodeBleu_score": 76.1297088221115}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n\t}\n}", "CodeBleu_score": 93.1090287006035}, {"code": "void UAsyncTaskEffectStackChanged::OnRemoveGameplayEffectCallback(const FActiveGameplayEffect & EffectRemoved){\n\tFGameplayTagContainer AssetTags;\n\tEffectRemoved.Spec.GetAllAssetTags(AssetTags);\n\n\tFGameplayTagContainer GrantedTags;\n\tEffectRemoved.Spec.GetAllGrantedTags(GrantedTags);\n\n\tif (AssetTags.HasTagExact(EffectGameplayTag) || GrantedTags.HasTagExact(EffectGameplayTag)) {\n\t\tOnGameplayEffectStackChange.Broadcast(EffectGameplayTag, EffectRemoved.Handle, -1, 0);\n\t\tASC->OnGameplayEffectStackChangeDelegate(EffectRemoved.Handle)->RemoveAll(this);\n\t}\n}", "CodeBleu_score": 85.4676336896279}]}
{"instance_id": "a8f7dcc3f1fa", "generation_result": [{"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted)\n\t{\n\t\tif (ActorInfo->AbilitySystemComponent.IsValid())\n\t\t{\n\t\t\tActorInfo->AbilitySystemComponent->TryActivateAbility(Spec.Handle);\n\t\t}\n\t}\n}", "CodeBleu_score": 72.98465927303194}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\n\tif (ActivateAbilityOnGranted)\n\t{\n\t\tif (UAbilitySystemComponent* AbilitySystemComponent = ActorInfo->AbilitySystemComponent.Get())\n\t\t{\n\t\t\tAbilitySystemComponent->TryActivateAbility(Spec.Handle);\n\t\t}\n\t}\n}", "CodeBleu_score": 70.74818294875361}, {"code": "void UGDGameplayAbility::OnAvatarSet(const FGameplayAbilityActorInfo * ActorInfo, const FGameplayAbilitySpec & Spec){\n\t\tSuper::OnAvatarSet(ActorInfo, Spec);\n\tif (ActorInfo->AbilitySystemComponent) {\n\t\tif (ActivateAbilityOnGranted) {\n\t\t\tActorInfo->AbilitySystemComponent->TryActivateAbilityByClass(this->GetClass());\n\t\t}\n\t}\n}", "CodeBleu_score": 64.27835791450774}]}
{"instance_id": "72a7ce4b848c", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (Montage == MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t} else {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnBlendOut.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n}", "CodeBleu_score": 56.19086871902771}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (Montage == MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\t\t}\n\t}\n\tif (bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t} else {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnBlendOut.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n}", "CodeBleu_score": 56.19086871902771}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded(UAnimMontage* Montage, bool bInterrupted){\n\t\tif (Ability && Ability->GetCurrentMontage() == MontageToPlay) {\n\t\tif (Montage == MontageToPlay) {\n\t\t\tAbilitySystemComponent->ClearAnimatingAbility(Ability);\n\n\t\t\t// Reset AnimRootMotionTranslationScale\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(1.f);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (bInterrupted) {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnInterrupted.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t} else {\n\t\tif (ShouldBroadcastAbilityTaskDelegates()) {\n\t\t\tOnBlendOut.Broadcast(FGameplayTag(), FGameplayEventData());\n\t\t}\n\t}\n}", "CodeBleu_score": 56.19086871902771}]}
{"instance_id": "cc1cdd579bd4", "generation_result": [{"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (AbilityEnded && bStopWhenAbilityEnds) {\n\t\tStopPlayingMontage();\n\t}\n\n\tif (EventHandle.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventHandle);\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 57.382594812238416}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (CancelledHandle.IsValid()) {\n\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\tCancelledHandle.Reset();\n\t}\n\n\tif (EventHandle.IsValid()) {\n\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventHandle);\n\t\tEventHandle.Reset();\n\t}\n\n\tif (AbilityEnded && bStopWhenAbilityEnds) {\n\t\tStopPlayingMontage();\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 70.44265965657648}, {"code": "void UGDAT_PlayMontageAndWaitForEvent::OnDestroy(bool AbilityEnded){\n\tif (AbilityEnded && bStopWhenAbilityEnds) {\n\t\tStopPlayingMontage();\n\t}\n\n\tif (AbilitySystemComponent.IsValid()) {\n\t\tif (CancelledHandle.IsValid()) {\n\t\t\tAbility->OnGameplayAbilityCancelled.Remove(CancelledHandle);\n\t\t}\n\n\t\tif (EventHandle.IsValid()) {\n\t\t\tAbilitySystemComponent->RemoveGameplayEventTagContainerDelegate(EventHandle);\n\t\t}\n\t}\n\n\tSuper::OnDestroy(AbilityEnded);\n}", "CodeBleu_score": 74.21653636906518}]}
{"instance_id": "5932070df16f", "generation_result": [{"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (Ability == nullptr) {\n\t\treturn false;\n\t}\n\n\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\tif (AnimInstance!= nullptr) {\n\t\t// Bind to event callback\n\t\tEventHandle = AbilitySystemComponent->AddGameplayEventTagContainerDelegate(EventTags, FGameplayEventTagMulticastDelegate::FDelegate::CreateUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnGameplayEvent));\n\n\t\tif (AbilitySystemComponent->StopMontage(Ability, Ability->GetCurrentActivationInfo(), MontageToPlay) > 0.f) {\n\t\t\t// Playing a montage could potentially fire off a callback into game code which could kill this ability! Early out if we are  pending kill.\n\t\t\tif (ShouldBroadcastAbilityTaskDelegates() == false) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tCancelledHandle = Ability->OnGameplayAbilityCancelled.AddUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnAbilityCancelled);\n\n\t\t\tBlendingOutDelegate.BindUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageBlendingOut);\n\t\t\tAnimInstance->Montage_SetBlendingOutDelegate(BlendingOutDelegate, MontageToPlay);\n\n\t\t\tMontageEndedDelegate.BindUObject(this, &UGDAT_PlayMontageAndWaitForEvent::OnMontageEnded);\n\t\t\tAnimInstance->Montage_SetEndDelegate(MontageEndedDelegate, MontageToPlay);\n\n\t\t\tACharacter* Character = Cast<ACharacter>(GetAvatarActor());\n\t\t\tif (Character && (Character->GetLocalRole() == ROLE_Authority ||\n\t\t\t\t(Character->GetLocalRole() == ROLE_AutonomousProxy && Ability->GetNetExecutionPolicy() == EGameplayAbilityNetExecutionPolicy::LocalPredicted))) {\n\t\t\t\tCharacter->SetAnimRootMotionTranslationScale(AnimRootMotionTranslationScale);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\t}\n\telse {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"UGDAbilityTask_PlayMontageAndWaitForEvent call to PlayMontage failed!\"));\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 53.477138592716344}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (Ability == nullptr) {\n\t\treturn false;\n\t}\n\n\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\tif (AnimInstance!= nullptr) {\n\t\t// Unbind the delegate for the montage instance\n\t\tAnimInstance->Montage_SetBlendingOutDelegate(FAnimDelegateHandle(), MontageToPlay);\n\t\tAnimInstance->Montage_SetEndDelegate(FAnimDelegateHandle(), MontageToPlay);\n\n\t\t// Stop the montage\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\t\tAbilitySystemComponent->StopAnimatingAbility(Ability, MontageToPlay);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 52.988470075468186}, {"code": "bool UGDAT_PlayMontageAndWaitForEvent::StopPlayingMontage(){\n\t\tif (AbilitySystemComponent.IsValid()) {\n\t\tconst FGameplayAbilityActorInfo* ActorInfo = Ability->GetCurrentActorInfo();\n\t\tUAnimInstance* AnimInstance = ActorInfo->GetAnimInstance();\n\t\tif (AnimInstance!= nullptr) {\n\t\t\t// Unbind from event callbacks\n\t\t\tAnimInstance->Montage_ClearBlendingOutDelegate(MontageToPlay);\n\t\t\tAnimInstance->Montage_ClearEndDelegate(MontageToPlay);\n\t\t\tAbilitySystemComponent->StopAnimatingAbility(Ability);\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 46.87823245332742}]}
{"instance_id": "7049be7f0c75", "generation_result": [{"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\tAActor* TargetActor = OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName);\n\tif (TargetActor) {\n\t\tfloat DistanceToTarget = FVector::Dist(OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation());\n\t\tif (DistanceToTarget < MaxAttackRange) {\n\t\t\tbool bCanSeeTarget = OwnerComp.GetBlackboardComponent()->GetValueAsBool(CanSeeTargetKey.SelectedKeyName);\n\t\t\tif (!bCanSeeTarget) {\n\t\t\t\t//check if target is in view\n\t\t\t\tFHitResult HitResult;\n\t\t\t\tFCollisionQueryParams TraceParams(FName(TEXT(\"\")), false, OwnerComp.GetAIOwner()->GetPawn());\n\t\t\t\tbool bLineTrace = OwnerComp.GetAIOwner()->GetPawn()->GetWorld()->LineTraceSingleByChannel(HitResult, OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), TargetActor->GetActorLocation(), ECollisionChannel::ECC_Visibility, TraceParams);\n\t\t\t\tif (bLineTrace) {\n\t\t\t\t\tif (HitResult.GetActor() == TargetActor) {\n\t\t\t\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(CanSeeTargetKey.SelectedKeyName, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(CanSeeTargetKey.SelectedKeyName, false);\n\t\t}\n\t}\n}", "CodeBleu_score": 46.77288544289215}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tauto TargetActor = OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName);\n\n\tif (TargetActor) {\n\t\tauto AIController = OwnerComp.GetAIOwner();\n\t\tauto AIPawn = AIController->GetPawn();\n\n\t\tif (AIPawn) {\n\t\t\tauto Distance = FVector::Dist(AIPawn->GetActorLocation(), TargetActor->GetActorLocation());\n\t\t\tauto LineOfSight = AIPawn->GetWorld()->LineTraceSingleByChannel(\n\t\t\t\tAIPawn->GetActorLocation(),\n\t\t\t\tTargetActor->GetActorLocation(),\n\t\t\t\tECollisionChannel::ECC_Visibility,\n\t\t\t\tFCollisionQueryParams(),\n\t\t\t\tFCollisionResponseParams()\n\t\t\t);\n\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(IsTargetInRangeKey.SelectedKeyName, Distance <= MaxAttackRange);\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(IsTargetVisibleKey.SelectedKeyName, LineOfSight.bBlockingHit);\n\t\t}\n\t}\n}", "CodeBleu_score": 36.61815494984769}, {"code": "void USBTService_CheckAttackRange::TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds){\n\t\tSuper::TickNode(OwnerComp, NodeMemory, DeltaSeconds);\n\n\t// Get the target actor from the blackboard\n\tAPawn* TargetPawn = Cast<APawn>(OwnerComp.GetBlackboardComponent()->GetValueAsObject(TargetActorKey.SelectedKeyName));\n\tif (TargetPawn) {\n\t\t// Calculate the distance between the AI pawn and the target\n\t\tfloat Distance = FVector::Dist(OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation(), TargetPawn->GetActorLocation());\n\t\t// Check if the target is within the maximum attack range\n\t\tif (Distance <= MaxAttackRange) {\n\t\t\t// Check for line of sight to the target\n\t\t\tFVector Start = OwnerComp.GetAIOwner()->GetPawn()->GetActorLocation();\n\t\t\tFVector End = TargetPawn->GetActorLocation();\n\t\t\tFCollisionQueryParams TraceParams(FName(TEXT(\"LineOfSightTrace\")), true, OwnerComp.GetAIOwner());\n\t\t\tFHitResult HitResult;\n\t\t\tbool bLineOfSight = GetWorld()->LineTraceSingleByChannel(HitResult, Start, End, ECC_Visibility, TraceParams);\n\t\t\t// Store the result in the blackboard\n\t\t\tOwnerComp.GetBlackboardComponent()->SetValueAsBool(bLineOfSightKey.SelectedKeyName, bLineOfSight);\n\t\t}\n\t}\n}", "CodeBleu_score": 49.01860127155343}]}
{"instance_id": "031bd0ec3e3c", "generation_result": [{"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tauto pawn = Cast<ASBaseCharacter>(OwnerComp.GetAIOwner()->GetPawn());\n\tif (!pawn) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tauto attribute = pawn->GetAttributeComponent();\n\tif (!attribute) {\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\tattribute->Heal(attribute->GetMaxHealth());\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 48.54012459914122}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\tAPawn* pawn = OwnerComp.GetAIOwner()->GetPawn();\n\tif (pawn) {\n\t\tUSAttributeComponent* attributeComponent = pawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (attributeComponent) {\n\t\t\tattributeComponent->ChangeHealth(attributeComponent->GetMaxHealth());\n\t\t}\n\t}\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 62.017162946166515}, {"code": "EBTNodeResult::Type USBTTask_HealSelf::ExecuteTask(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory){\n\t\t// Get the pawn from the AI owner\n\tAPawn* pawn = OwnerComp.GetAIOwner()->GetPawn();\n\tif (!pawn) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"SBTTask_HealSelf::ExecuteTask() - No pawn found!\"));\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\t// Get the attribute component from the pawn\n\tUSAttributeComponent* attributeComponent = pawn->FindComponentByClass<USAttributeComponent>();\n\tif (!attributeComponent) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"SBTTask_HealSelf::ExecuteTask() - No attribute component found!\"));\n\t\treturn EBTNodeResult::Failed;\n\t}\n\n\t// Restore the pawn's health to maximum\n\tattributeComponent->Heal(attributeComponent->GetMaxHealth());\n\n\treturn EBTNodeResult::Succeeded;\n}", "CodeBleu_score": 46.73037423327215}]}
{"instance_id": "6cd6e778e91b", "generation_result": [{"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// Register this component's primary tick with the USTickablesSubsystem.\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterTickableComponent(this);\n}", "CodeBleu_score": 41.48178202698605}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\t// Register the component's primary tick with the USTickablesSubsystem in the world.\n\tGetWorld()->GetSubsystem<USTickablesSubsystem>()->RegisterTickableComponent(this);\n}", "CodeBleu_score": 41.48178202698605}, {"code": "void USProjectileMovementComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tUWorld* world = GetWorld();\n\tif (world) {\n\t\tworld->GetSubsystem<USTickablesSubsystem>()->RegisterTickableComponent(this);\n\t}\n}", "CodeBleu_score": 55.350265500851506}]}
{"instance_id": "e90ff27c7f16", "generation_result": [{"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}, {"code": "void USProjectileMovementComponent::EndPlay(const EEndPlayReason::Type EndPlayReason){\n\t\tSuper::EndPlay(EndPlayReason);\n\n\tUSTickablesSubsystem* Tickables = GetWorld()->GetSubsystem<USTickablesSubsystem>();\n\tTickables->DeregisterComponent(&PrimaryComponentTick);\n}", "CodeBleu_score": 90.87129679325732}]}
{"instance_id": "be3e542c07ea", "generation_result": [{"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\n\tif (bManageSignificance) {\n\t\tif (!bHasImplementedInterface) {\n\t\t\tbHasImplementedInterface = ISignificanceInterface::Execute_GetSignificanceInterface(GetOwner());\n\t\t}\n\n\t\tif (bWaitOneFrame) {\n\t\t\tRegisterSignificance();\n\t\t}\n\t\telse {\n\t\t\tScheduleSignificance();\n\t\t}\n\n\t\tManageOwnerParticleSignificance();\n\t}\n}", "CodeBleu_score": 30.857158905729364}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t", "CodeBleu_score": 1.9375677798093651}, {"code": "void USSignificanceComponent::BeginPlay(){\n\t\tSuper::BeginPlay();\n\tif (bManageSignificance) {\n\t\tif (!bHasImplementedInterface) {\n\t\t\tif (GetOwner()->Implements<ISignificanceInterface>()) {\n\t\t\t\tbHasImplementedInterface = true;\n\t\t\t}\n\t\t}\n\t\tif (bWaitOneFrame) {\n\t\t\tGetWorld()->GetTimerManager().SetTimer(SignificanceTimer, this, &USSignificanceComponent::RegisterSignificance, 0.0f, false);\n\t\t}\n\t\telse {\n\t\t\tRegisterSignificance();\n\t\t}\n\t}\n\telse {\n\t\t// If we don't manage significance, we still need to manage particle significance\n\t\tManageParticleSignificance();\n\t}\n}", "CodeBleu_score": 44.956994070048395}]}
{"instance_id": "77824b6415d0", "generation_result": [{"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\t// Get the significance manager from the world\n\tUSignificanceManager* SignificanceManager = GetWorld()->GetSignificanceManager();\n\n\t// Define the lambda function for calculating significance\n\tauto CalculateSignificance = [this](UObject* Object) {\n\t\t// Check if the object implements the USSignificanceInterface interface\n\t\tif (Object->Implements<USSignificanceInterface>()) {\n\t\t\t// Cast the object to the USSignificanceInterface interface\n\t\t\tUSSignificanceInterface* SignificanceInterface = Cast<USSignificanceInterface>(Object);\n\t\t\t// Calculate the significance of the object\n\t\t\tfloat Significance = SignificanceInterface->CalculateSignificance(this);\n\t\t\t// Return the calculated significance\n\t\t\treturn Significance;\n\t\t}\n\t\telse {\n\t\t\t// Return the default significance of 0\n\t\t\treturn 0.0f;\n\t\t}\n\t};\n\n\t// Define the lambda function for handling post-significance updates\n\tauto HandlePostSignificanceUpdate = [this](UObject* Object, ESignificanceValue NewSignificance) {\n\t\t// Check if the object implements the USSignificanceInterface interface\n\t\tif (Object->Implements<USSignificanceInterface>()) {\n\t\t\t// Cast the object to the USSignificanceInterface interface\n\t\t\tUSSignificanceInterface* SignificanceInterface = Cast<USSignificanceInterface>(Object);\n\t\t\t// Update the significance of the object\n\t\t\tSignificanceInterface->UpdateSignificance(this, NewSignificance);\n\t\t}\n\t};\n\n\t// Register the component with the significance manager\n\tif (SignificanceManager) {\n\t\tSignificanceManager->RegisterComponent(this, GetOwner()->GetClass()->GetName(), CalculateSignificance, HandlePostSignificanceUpdate);\n\t}\n}", "CodeBleu_score": 42.546245597171115}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tUWorld* World = GetWorld();\n\tif (World) {\n\t\t// Get the significance manager from the world\n\t\tUSSignificanceManager* SignificanceManager = World->GetManager<USSignificanceManager>();\n\t\tif (SignificanceManager) {\n\t\t\t// Calculate significance\n\t\t\tauto CalculateSignificance = [this](UObject* Owner) {\n\t\t\t\treturn CalculateSignificanceInternal(Owner);\n\t\t\t};\n\n\t\t\t// Handle post-significance updates\n\t\t\tauto HandlePostSignificanceUpdate = [this](UObject* Owner) {\n\t\t\t\tHandlePostSignificanceUpdateInternal(Owner);\n\t\t\t};\n\n\t\t\t// Register with the significance manager\n\t\t\tSignificanceManager->RegisterComponent(this, TEXT(\"USSignificanceComponent\"), CalculateSignificance, HandlePostSignificanceUpdate);\n\t\t}\n\t}\n}", "CodeBleu_score": 29.696988898445152}, {"code": "void USSignificanceComponent::RegisterWithManager(){\n\t\tif (GForcedSignificance >= 0) {\n\t\tCurrentSignificance = static_cast<ESignificanceValue>(GForcedSignificance);\n\t}\n\telse {\n\t\tCurrentSignificance = ESignificanceValue::Invalid;\n\t}\n\n\t// Get significance manager\n\tUSSignificanceManager* SignificanceManager = USSignificanceManager::GetSignificanceManager(GetWorld());\n\n\t// Calculate significance\n\tauto CalculateSignificance = [this]() {\n\t\tif (CurrentSignificance == ESignificanceValue::Invalid) {\n\t\t\t// Calculate distance\n\t\t\tFVector Distance = GetOwner()->GetActorLocation() - GetWorld()->GetFirstPlayerController()->GetPawn()->GetActorLocation();\n\t\t\tfloat DistanceSq = Distance.SizeSquared();\n\n\t\t\t// Calculate significance\n\t\t\tfor (auto& Threshold : Thresholds) {\n\t\t\t\tif (DistanceSq < Threshold.Key) {\n\t\t\t\t\tCurrentSignificance = Threshold.Value;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t// Handle post-significance updates\n\tauto HandlePostSignificanceUpdate = [this]() {\n\t\t// Update particle components\n\t\tif (bManageOwnerParticleSignificance) {\n\t\t\t// Cascade (deprecated)\n\t\t\tTArray<UParticleSystemComponent*> CascadeParticles;\n\t\t\tGetOwner()->GetComponents<UParticleSystemComponent>(CascadeParticles);\n\n\t\t\tfor (UParticleSystemComponent* Comp : CascadeParticles) {\n\t\t\t\tComp->SetSignificance(CurrentSignificance);\n\t\t\t}\n\t\t}\n\n\t\t// Update Niagara components\n\t\tTArray<UNiagaraComponent*> NiagaraComponents;\n\t\tGetOwner()->GetComponents<UNiagaraComponent>(NiagaraComponents);\n\n\t\tfor (UNiagaraComponent* Comp : NiagaraComponents) {\n\t\t\tComp->SetSignificance(CurrentSignificance);\n\t\t}\n\t};\n\n\t// Register with manager\n\tSignificanceManager->RegisterSignificanceComponent(this, GetOwner()->GetClass()->GetName(), CalculateSignificance, HandlePostSignificanceUpdate);\n}", "CodeBleu_score": 39.04701740268455}]}
{"instance_id": "dca342410d64", "generation_result": [{"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) {\n\t\treturn false;\n\t}\n\n\tif (Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\tUSActorPoolingInterface* PoolingInterface = Cast<USActorPoolingInterface>(Actor);\n\n\t\tif (PoolingInterface) {\n\t\t\tif (USActorPoolingSubsystem* PoolingSubsystem = PoolingInterface->GetPoolingSubsystem()) {\n\t\t\t\treturn PoolingSubsystem->ReleaseToPool(Actor);\n\t\t\t}\n\t\t}\n\t}\n\n\tActor->Destroy();\n\n\treturn false;\n}", "CodeBleu_score": 46.38091083318969}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (!Actor) {\n\t\treturn false;\n\t}\n\n\tif (!Actor->GetClass()->ImplementsInterface(USActorPoolingInterface::StaticClass())) {\n\t\treturn false;\n\t}\n\n\tif (!CVarActorPoolingEnabled.GetValueOnGameThread()) {\n\t\treturn false;\n\t}\n\n\tUSActorPoolingInterface* PoolingInterface = Cast<USActorPoolingInterface>(Actor);\n\n\tif (!PoolingInterface) {\n\t\treturn false;\n\t}\n\n\tUSActorPoolingSubsystem* PoolingSubsystem = PoolingInterface->GetPoolingSubsystem();\n\n\tif (!PoolingSubsystem) {\n\t\treturn false;\n\t}\n\n\treturn PoolingSubsystem->ReleaseToPoolInternal(Actor);\n}", "CodeBleu_score": 51.989897147833844}, {"code": "bool USActorPoolingSubsystem::ReleaseToPool(AActor* Actor){\n\t\tif (Actor == nullptr) {\n\t\treturn false;\n\t}\n\n\tif (CVarActorPoolingEnabled.GetValueOnGameThread() == 0) {\n\t\treturn false;\n\t}\n\n\tUSActorPoolingInterface* PoolingSubsystem = GetPoolingSubsystem(Actor->GetWorld());\n\tif (PoolingSubsystem == nullptr) {\n\t\treturn false;\n\t}\n\n\treturn PoolingSubsystem->ReleaseToPool(Actor);\n}", "CodeBleu_score": 44.01076013031053}]}
{"instance_id": "5c285130f782", "generation_result": [{"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Red);\n\n\tUE_LOG(LogActorPooling, Log, TEXT(\"PrimeActorPool: %s\"), *ActorClass->GetName());\n\n\t// Create a pool for the specified actor class\n\tActorPool.Add(ActorClass, TArray<AActor*>());\n\n\t// Spawn the specified number of actors\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* NewActor = AcquireFromPool(ActorClass);\n\t\tif (NewActor) {\n\t\t\tReleaseToPool(NewActor);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.201153158739345}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Green);\n\n\t// Log the start of the pooling process\n\tUE_LOG(ActionRoguelike, Log, TEXT(\"Starting actor pooling for %s\"), *ActorClass->GetName());\n\n\t// Spawn the specified number of actors using the provided actor class and default spawn parameters\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tFActorSpawnParameters SpawnParams;\n\t\tSpawnParams.SpawnCollisionHandlingOverride = ESpawnActorCollisionHandlingMethod::AlwaysSpawn;\n\t\tAActor* SpawnedActor = GetWorld()->SpawnActor<AActor>(ActorClass, FTransform::Identity, SpawnParams);\n\n\t\t// Release the actor to the pool\n\t\tReleaseToPool(SpawnedActor);\n\t}\n}", "CodeBleu_score": 68.71199182015016}, {"code": "void USActorPoolingSubsystem::PrimeActorPool(TSubclassOf<AActor> ActorClass, int32 Amount){\n\t\tSCOPED_NAMED_EVENT(PrimeActorPool, FColor::Green);\n\tUE_LOG(ActionRoguelike, Log, TEXT(\"PrimeActorPool: %s\"), *ActorClass->GetName());\n\tfor (int32 i = 0; i < Amount; i++) {\n\t\tAActor* Actor = AcquireFromPool_Internal(ActorClass, FTransform::Identity, FActorSpawnParameters());\n\t\tif (Actor) {\n\t\t\tReleaseToPool_Internal(Actor);\n\t\t}\n\t}\n}", "CodeBleu_score": 51.686689154536495}]}
{"instance_id": "43c013653d6d", "generation_result": [{"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\tLoadingScreenAttributes.WidgetLoadingScreen = CreateWidget<UUserWidget>(GetWorld(), LoadingScreenClass);\n\tLoadingScreenAttributes.WidgetLoadingScreen->AddToViewport();\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 56.713610829480885}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\t// Create a loading screen attributes object\n\tFLoadingScreenAttributes LoadingScreenAttributes;\n\t// Assign a new loading screen widget to it\n\tLoadingScreenAttributes.WidgetToShow = CreateWidget<UUserWidget>(GetWorld(), LoadingScreenWidgetClass);\n\t// Set up the loading screen using the movie player\n\tif (LoadingScreenAttributes.WidgetToShow)\n\t{\n\t\tFMoviePlayer::PlayMovie(LoadingScreenAttributes.WidgetToShow);\n\t}\n}", "CodeBleu_score": 52.460482851056554}, {"code": "void USLoadingScreenSubsystem::BeginLoadingScreen(const FString& MapName){\n\t\tFLoadingScreenAttributes LoadingScreenAttributes;\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\tLoadingScreenAttributes.WidgetLoadingScreen = CreateWidget<UUserWidget>(GetWorld(), LoadingScreenWidgetClass);\n\tLoadingScreenAttributes.WidgetLoadingScreen->AddToViewport();\n\tLoadingScreenAttributes.bAutoCompleteWhenLoadingCompletes = true;\n\tGetMoviePlayer()->SetupLoadingScreen(LoadingScreenAttributes);\n}", "CodeBleu_score": 54.8029641675345}]}
{"instance_id": "a6979eb925a5", "generation_result": [{"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Starting action\"));\n\tif (!CanStart(Instigator)) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Cannot start action\"));\n\t\treturn;\n\t}\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\tComp->ActiveGameplayTags.Append(GrantedTags);\n\tComp->OnRep_ActiveGameplayTags();\n\tComp->OnRep_ActiveGameplayTags();\n\tif (Role == ROLE_Authority) {\n\t\tStartTime = GetWorld()->TimeSeconds;\n\t}\n\tComp->OnActionStarted(this);\n}", "CodeBleu_score": 52.83453092492781}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Log, TEXT(\"StartAction_Implementation\"));\n\n\tif (IsRunning()) {\n\t\treturn;\n\t}\n\n\tUSActionComponent* Comp = GetOwningComponent();\n\n\tif (Comp->ActiveGameplayTags.HasAny(BlockedTags)) {\n\t\treturn;\n\t}\n\n\tComp->ActiveGameplayTags.Append(GrantedTags);\n\n\tif (Role == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\tComp->GetOwner()->OnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 42.7970365413064}, {"code": "void USAction::StartAction_Implementation(AActor* Instigator){\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"StartAction_Implementation\"));\n\n\tif (!CanStart(Instigator)) {\n\t\treturn;\n\t}\n\n\tif (GetOwningComponent()->GetOwnerRole() == ROLE_Authority) {\n\t\tStartTime = GetWorld()->GetTimeSeconds();\n\t}\n\n\tGetOwningComponent()->ActiveGameplayTags.Append(GrantedTags);\n\n\tReplicatedData.StartTime = StartTime;\n\tReplicatedData.EndTime = EndTime;\n\tReplicatedData.Duration = Duration;\n\tReplicatedData.ReplicatedTags = GetOwningComponent()->ActiveGameplayTags;\n\n\tGetOwningComponent()->OnActionStarted.Broadcast(this);\n}", "CodeBleu_score": 56.06337865780837}]}
{"instance_id": "bdec7bf3e2d7", "generation_result": [{"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()->GetGameState())\n\t{\n\t\treturn Duration - (GetWorld()->GetGameState()->GetServerWorldTimeSeconds() - StartTime);\n\t}\n\telse\n\t{\n\t\treturn Duration;\n\t}\n}", "CodeBleu_score": 39.69111434969654}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()->GetGameState()) {\n\t\tfloat RemainingTime = Duration - (GetWorld()->GetGameState()->GetServerWorldTimeSeconds() - StartTime);\n\t\tif (RemainingTime < 0.0f) {\n\t\t\treturn 0.0f;\n\t\t}\n\t\treturn RemainingTime;\n\t}\n\telse {\n\t\treturn Duration;\n\t}\n}", "CodeBleu_score": 46.89222137509573}, {"code": "float USActionEffect::GetTimeRemaining() const{\n\t\tif (GetWorld()->GetGameState())\n\t{\n\t\treturn FMath::Max(0.0f, Duration - GetWorld()->GetGameState()->GetWorldTime());\n\t}\n\telse\n\t{\n\t\treturn Duration;\n\t}\n}", "CodeBleu_score": 37.01822492314063}]}
{"instance_id": "db3a7508643b", "generation_result": [{"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Interacting with null actor!\"));\n\t}\n\telse {\n\t\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\t\tif (MyPawn) {\n\t\t\tInFocus->Execute_Interact(InFocus, MyPawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 61.94038270763511}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation: InFocus is null\"));\n\t} else {\n\t\tAPawn* MyPawn = Cast<APawn>(GetOwner());\n\t\tif (MyPawn) {\n\t\t\tInFocus->Interact(MyPawn);\n\t\t}\n\t}\n}", "CodeBleu_score": 59.595997333826254}, {"code": "void USInteractionComponent::ServerInteract_Implementation(AActor* InFocus){\n\tif (InFocus == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"ServerInteract_Implementation: Focus is null!\"));\n\t\treturn;\n\t}\n\n\tAPawn* MyPawn = CastChecked<APawn>(GetOwner());\n\tInFocus->CallFunctionByNameWithArguments(TEXT(\"Interact\"), MyPawn, NULL, NULL, true);\n}", "CodeBleu_score": 65.00279113286204}]}
{"instance_id": "e6a5224079e6", "generation_result": [{"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tUSAttributeComponent* AttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\tif (AttributeComponent) {\n\t\tAttributeComponent->SetHealth(AttributeComponent->GetHealth() - DamageAmount);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.77540850818484}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tASAttributeComponent* AttributeComponent = TargetActor->FindComponentByClass<ASAttributeComponent>();\n\tif (AttributeComponent) {\n\t\tAttributeComponent->ChangeHealth(-DamageAmount);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 51.66390431506353}, {"code": "bool USGameplayFunctionLibrary::ApplyDamage(AActor* DamageCauser, AActor* TargetActor, float DamageAmount){\n\t\tUSAttributeComponent* AttributeComponent = TargetActor->FindComponentByClass<USAttributeComponent>();\n\tif (AttributeComponent) {\n\t\tAttributeComponent->SetHealth(AttributeComponent->GetHealth() - DamageAmount);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 49.77540850818484}]}
{"instance_id": "084a7501fc08", "generation_result": [{"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecordTime) {\n\t\tPersonalRecordTime = NewTime;\n\t\tOnPersonalRecordTimeChanged.Broadcast(this, PersonalRecordTime, NewTime);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 62.80852752244094}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecord);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 52.9671371838556}, {"code": "bool ASPlayerState::UpdatePersonalRecord(float NewTime){\n\t\tif (NewTime > PersonalRecord) {\n\t\tPersonalRecord = NewTime;\n\t\tOnPersonalRecordChanged.Broadcast(this, PersonalRecord);\n\t\treturn true;\n\t}\n\treturn false;\n}", "CodeBleu_score": 52.9671371838556}]}
{"instance_id": "8e0ccc856566", "generation_result": [{"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (InstigatorPawn && InstigatorPawn->HasAuthority()) {\n\t\tUSAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<USAttributeComponent>();\n\t\tif (AttributeComponent) {\n\t\t\tif (AttributeComponent->GetHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\t\tif (InstigatorPawn->GetPlayerState<ASPlayerState>()->RemoveCredits(CreditCost)) {\n\t\t\t\t\tAttributeComponent->SetHealth(AttributeComponent->GetHealth() + HealthChange);\n\t\t\t\t\tAttributeComponent->SetHealth(FMath::Min(AttributeComponent->GetHealth(), AttributeComponent->GetMaxHealth()));\n\t\t\t\t\tInstigatorPawn->GetWorldTimerManager().SetTimer(PowerupTimer, this, &ASPowerup_HealthPotion::OnCooldown, CooldownTime, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 42.721625762871525}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tSuper::Interact_Implementation(InstigatorPawn);\n\n\tif (InstigatorPawn && InstigatorPawn->HasAuthority()) {\n\t\tASAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<ASAttributeComponent>();\n\t\tif (AttributeComponent && AttributeComponent->GetHealth() < AttributeComponent->GetMaxHealth()) {\n\t\t\tif (InstigatorPawn->GetPlayerState<ASPlayerState>()->RemoveCredits(CreditCost)) {\n\t\t\t\tAttributeComponent->ChangeHealth(HealthChange);\n\t\t\t\tSetPowerupActive(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 47.203152289116645}, {"code": "void ASPowerup_HealthPotion::Interact_Implementation(APawn* InstigatorPawn){\n\t\tif (IsValid(InstigatorPawn)) {\n\t\tASAttributeComponent* AttributeComponent = InstigatorPawn->FindComponentByClass<ASAttributeComponent>();\n\t\tif (IsValid(AttributeComponent) &&!AttributeComponent->GetHealthComponent()->IsFullHealth()) {\n\t\t\tASPlayerState* PlayerState = Cast<ASPlayerState>(InstigatorPawn->GetPlayerState());\n\t\t\tif (IsValid(PlayerState) && PlayerState->RemoveCredits(CreditCost)) {\n\t\t\t\tAttributeComponent->GetHealthComponent()->ApplyHealthChange(HealthChange);\n\t\t\t\tSetPowerupCooldown();\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 54.32520008836057}]}
{"instance_id": "39a680859a89", "generation_result": [{"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn the explosion effect\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ExplosionEffect, GetActorLocation(), FRotator(0.0f), true);\n\n\t// Play the impact sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger the camera shake\n\tAPlayerController* PC = UGameplayStatics::GetPlayerController(this, 0);\n\tif (PC) {\n\t\tPC->PlayerCameraManager->StartCameraShake(CameraShake, 1.0f, ECameraShakePlaySpace::Local, FRotator(0.0f), FVector(0.0f), FRotator(0.0f));\n\t}\n\n\t// Release the projectile back to the actor pool\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 51.131014021573776}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn the impact visual effect at the projectile's location\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactEffect, GetActorLocation());\n\n\t// Play the impact sound at the projectile's location\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger a camera shake\n\tUGameplayStatics::PlayWorldCameraShake(this, CameraShake, GetActorLocation());\n\n\t// Release the projectile back to the actor pool\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 43.93468951796381}, {"code": "void ASProjectileBase::Explode_Implementation(){\n\t\t// Spawn Impact Effect\n\tUGameplayStatics::SpawnEmitterAtLocation(this, ImpactEffect, GetActorLocation());\n\n\t// Play Impact Sound\n\tUGameplayStatics::PlaySoundAtLocation(this, ImpactSound, GetActorLocation());\n\n\t// Trigger Camera Shake\n\tAPlayerController* PlayerController = UGameplayStatics::GetPlayerController(this, 0);\n\tif (PlayerController) {\n\t\tPlayerController->PlayerCameraManager->StartCameraShake(CameraShake);\n\t}\n\n\t// Release to pool\n\tUSActorPoolingSubsystem::ReleaseToPool(this);\n}", "CodeBleu_score": 49.66226156157816}]}
{"instance_id": "a95c41c6d7b5", "generation_result": [{"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: PlayerState is null\"));\n\t\treturn nullptr;\n\t}\n\tif (GEngine->IsPlayInEditor()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: Play-In-Editor (PIE) mode detected. Returning first saved player entry.\"));\n\t\treturn &SavedPlayers[0];\n\t}\n\t// Find the player in the saved players list\n\tfor (FPlayerSaveData& PlayerData : SavedPlayers) {\n\t\tif (PlayerData.PlayerID == PlayerState->UniqueId) {\n\t\t\treturn &PlayerData;\n\t\t}\n\t}\n\t// Player not found\n\treturn nullptr;\n}", "CodeBleu_score": 49.51088650095494}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: PlayerState is null\"));\n\t\treturn nullptr;\n\t}\n\n\tif (GEngine->IsEditor()) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: Play-In-Editor (PIE) mode detected\"));\n\t\treturn PlayerSaveData[0];\n\t}\n\n\tfor (auto& Player : PlayerSaveData) {\n\t\tif (Player.PlayerID == PlayerState->GetPlayerId()) {\n\t\t\treturn &Player;\n\t\t}\n\t}\n\n\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: No saved data found for PlayerState %s\"), *PlayerState->GetPlayerName());\n\treturn nullptr;\n}", "CodeBleu_score": 52.318630156111}, {"code": "FPlayerSaveData* USSaveGame::GetPlayerData(APlayerState* PlayerState){\n\t\tif (PlayerState == nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: PlayerState is null!\"));\n\t\treturn nullptr;\n\t}\n\n\t// In Play-In-Editor (PIE) mode, it logs a message and returns the first saved player entry if available.\n\tif (GEngine->IsEditor() && GEngine->GetWorld()!= nullptr) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"GetPlayerData: PIE mode detected!\"));\n\t\treturn GetPlayerDataByIndex(0);\n\t}\n\n\t// Otherwise, it uses the player's unique ID to find and return the corresponding saved player data.\n\tfor (int i = 0; i < SavedPlayers.Num(); i++) {\n\t\tif (SavedPlayers[i].PlayerID == PlayerState->UniqueId.ToString()) {\n\t\t\treturn &SavedPlayers[i];\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 46.79493959219192}]}
{"instance_id": "58a03c087c47", "generation_result": [{"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tSuper::HandleStartingNewPlayer(NewPlayer);\n\n\t// Get the player's state\n\tASPlayerState* PlayerState = Cast<ASPlayerState>(NewPlayer->PlayerState);\n\tif (!PlayerState) {\n\t\tUE_LOG(LogSaveGame, Error, TEXT(\"No PlayerState found for %s\"), *NewPlayer->GetName());\n\t\treturn;\n\t}\n\n\t// Check if the player has a save game\n\tif (PlayerState->SaveGameSlotName.IsEmpty()) {\n\t\tUE_LOG(LogSaveGame, Warning, TEXT(\"No SaveGameSlotName set for %s\"), *NewPlayer->GetName());\n\t\treturn;\n\t}\n\n\t// Load the player's state from the save game\n\tLoadPlayerState(PlayerState);\n}", "CodeBleu_score": 43.530636854902475}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tSuper::HandleStartingNewPlayer(NewPlayer);\n\t// Get the player's state\n\tUPlayerState* PlayerState = NewPlayer->PlayerState;\n\tif (PlayerState) {\n\t\t// Load the player's state from the current save game\n\t\tLoadPlayerState(PlayerState);\n\t}\n}", "CodeBleu_score": 47.81340171911639}, {"code": "void USSaveGameSubsystem::HandleStartingNewPlayer(AController* NewPlayer){\n\tSuper::HandleStartingNewPlayer(NewPlayer);\n\tAPlayerState* PS = NewPlayer->PlayerState;\n\tif (PS) {\n\t\t// Load the player's state from the current save game\n\t\tLoadPlayerState(PS);\n\t}\n}", "CodeBleu_score": 50.144564944711064}]}
{"instance_id": "c5bd4c059b71", "generation_result": [{"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear existing player and actor data in CurrentSaveGame\n\tCurrentSaveGame->ClearPlayerData();\n\tCurrentSaveGame->ClearActorData();\n\n\t// Iterate through all players in the game state\n\tfor (ASGameStateBase* GS : TActorRange<ASGameStateBase>(GetWorld())) {\n\t\t// Iterate through all players in the game state\n\t\tfor (APlayerState* PS : GS->PlayerArray) {\n\t\t\t// Save player data for the current player\n\t\t\tCurrentSaveGame->SavePlayerData(PS);\n\t\t}\n\t}\n\n\t// Iterate through all actors in the world\n\tfor (AActor* Actor : TActorRange<AActor>(GetWorld())) {\n\t\t// Check if the actor implements the ISaveableGameplayData interface\n\t\tif (ISaveableGameplayData* SaveableGameplayData = Cast<ISaveableGameplayData>(Actor)) {\n\t\t\t// Save the actor's data\n\t\t\tCurrentSaveGame->SaveActorData(SaveableGameplayData);\n\t\t}\n\t}\n\n\t// Write the save game to the slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, 0);\n\n\t// Broadcast the save event\n\tOnSaveGameWritten.Broadcast();\n}", "CodeBleu_score": 30.627394984952645}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t// Clear existing player and actor data\n\tCurrentSaveGame->ClearPlayerData();\n\tCurrentSaveGame->ClearActorData();\n\n\t// Save player data for each player in the game state\n\tfor (TActorIterator<AGameStateBase> It(GetWorld()); It; ++It) {\n\t\tAGameStateBase* GameState = *It;\n\t\tfor (FConstPlayerControllerIterator It = GetWorld()->GetPlayerControllerIterator(); It; ++It) {\n\t\t\tAPlayerController* PlayerController = It->Get();\n\t\t\tASPlayerState* PlayerState = PlayerController->GetPlayerState<ASPlayerState>();\n\t\t\tif (PlayerState) {\n\t\t\t\tCurrentSaveGame->SavePlayerData(PlayerState);\n\t\t\t}\n\t\t}\n\t}\n\n\t// Save actor data for all actors that implement the SGameplayInterface interface\n\tfor (TActorIterator<AActor> It(GetWorld()); It; ++It) {\n\t\tAActor* Actor = *It;\n\t\tif (Actor->Implements<USGameplayInterface>()) {\n\t\t\tCurrentSaveGame->SaveActorData(Actor);\n\t\t}\n\t}\n\n\t// Write the save game to a slot\n\tUGameplayStatics::SaveGameToSlot(CurrentSaveGame, CurrentSlotName, 0);\n\n\t// Broadcast the save complete event\n\tOnSaveComplete.Broadcast();\n}", "CodeBleu_score": 41.56934536044392}, {"code": "void USSaveGameSubsystem::WriteSaveGame(){\n\t", "CodeBleu_score": 0.989701945674575}]}
{"instance_id": "0d7043a0bff0", "generation_result": [{"code": "void FrameworkConfig::draw_themes(){\n\t", "CodeBleu_score": 2.9382092570235954}, {"code": "void FrameworkConfig::draw_themes(){\n\t", "CodeBleu_score": 2.9382092570235954}, {"code": "void FrameworkConfig::draw_themes(){\n\t", "CodeBleu_score": 2.9382092570235954}]}
{"instance_id": "e7f81d1dee95", "generation_result": [{"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::SetNextWindowSize(ImVec2(300, 400), ImGuiCond_FirstUseEver);\n\tImGui::Begin(\"Framework Config\", nullptr, ImGuiWindowFlags_AlwaysAutoResize);\n\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::InputText(\"##menu_key\", menu_key, 10);\n\tImGui::PopItemWidth();\n\n\tImGui::Text(\"Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##show_cursor\", &show_cursor);\n\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##remember_menu_state\", &remember_menu_state);\n\n\tImGui::Text(\"L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##l3_r3_toggle\", &l3_r3_toggle);\n\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##always_show_cursor\", &always_show_cursor);\n\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::Combo(\"##log_level\", &log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Critical\\0Off\\0\\0\");\n\tImGui::PopItemWidth();\n\n\tif (ImGui::Button(\"Save\")) {\n\t\tsave_config();\n\t}\n\n\tImGui::End();\n}", "CodeBleu_score": 43.624387427178846}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::SetNextWindowSize({ 500, 500 });\n\tImGui::SetNextWindowPos({ 10, 10 });\n\tImGui::Begin(\"Framework Configuration\");\n\tImGui::Text(\"Menu Key\");\n\tImGui::SameLine();\n\tImGui::Text(Config::get().menu_key.to_string().c_str());\n\tImGui::SameLine();\n\tImGui::PushItemWidth(100);\n\tImGui::InputText(\"##menu_key\", Config::get().menu_key.data(), 32);\n\tImGui::PopItemWidth();\n\tImGui::Text(\"Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##show_cursor\", &Config::get().show_cursor);\n\tImGui::Text(\"Remember Menu State\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##remember_menu_state\", &Config::get().remember_menu_state);\n\tImGui::Text(\"L3 + R3 Toggle\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##l3_r3_toggle\", &Config::get().l3_r3_toggle);\n\tImGui::Text(\"Always Show Cursor\");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##always_show_cursor\", &Config::get().always_show_cursor);\n\tImGui::Text(\"Log Level\");\n\tImGui::SameLine();\n\tif (ImGui::Combo(\"##log_level\", &Config::get().log_level, \"Trace\\0Debug\\0Info\\0Warn\\0Error\\0Off\\0\\0\")) {\n\t\tspdlog::set_level(spdlog::level::from_str(Config::get().log_level.c_str()));\n\t}\n\tImGui::End();\n}", "CodeBleu_score": 43.99657366683426}, {"code": "void FrameworkConfig::draw_main() {\n\t\tImGui::SetNextWindowSize(ImVec2(500, 500));\n\tImGui::Begin(\"Framework Config\", nullptr, ImGuiWindowFlags_NoCollapse | ImGuiWindowFlags_NoResize);\n\tImGui::Text(\"Framework Config\");\n\tImGui::Separator();\n\tImGui::Text(\"Menu Key: \");\n\tImGui::SameLine();\n\tImGui::InputText(\"##Menu Key\", &menu_key);\n\tImGui::Text(\"Show Cursor Key: \");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##Show Cursor Key\", &show_cursor_key);\n\tImGui::Text(\"Remember Menu State: \");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##Remember Menu State\", &remember_menu_state);\n\tImGui::Text(\"L3 + R3 Toggle: \");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##L3 + R3 Toggle\", &l3_r3_toggle);\n\tImGui::Text(\"Always Show Cursor: \");\n\tImGui::SameLine();\n\tImGui::Checkbox(\"##Always Show Cursor\", &always_show_cursor);\n\tImGui::Text(\"Log Level: \");\n\tImGui::SameLine();\n\tImGui::InputText(\"##Log Level\", &log_level);\n\tImGui::Separator();\n\tif (ImGui::Button(\"Save\")) {\n\t\tsave();\n\t}\n\tImGui::End();\n}", "CodeBleu_score": 42.889101850362586}]}
{"instance_id": "83fa7f401579", "generation_result": [{"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Read the file into a string\n\tFString FileContents;\n\tif(!FFileHelper::LoadFileToString( FileContents, *OSMFilePath ) ) {\n\t\tif( FeedbackContext ) {\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to load OpenStreetMap file: %s\" ), *OSMFilePath );\n\t\t}\n\t\treturn false;\n\t}\n\n\t// Parse the file\n\tFFastXmlParser XmlParser;\n\tif(!XmlParser.Parse( FileContents, bIsFilePathActuallyTextBuffer ) ) {\n\t\tif( FeedbackContext ) {\n\t\t\tFeedbackContext->Logf( ELogVerbosity::Error, TEXT( \"Failed to parse OpenStreetMap file: %s\" ), *OSMFilePath );\n\t\t}\n\t\treturn false;\n\t}\n\n\t// Process the file\n\tif(!ProcessOpenStreetMapFile( XmlParser, FeedbackContext ) ) {\n\t\treturn false;\n\t}\n\n\t// Calculate the average latitude and longitude\n\tconst double AverageLatitude = CalculateAverageLatitude();\n\tconst double AverageLongitude = CalculateAverageLongitude();\n\n\t// Log the results\n\tif( FeedbackContext ) {\n\t\tFeedbackContext->Logf( ELogVerbosity::Log, TEXT( \"Average latitude: %f\" ), AverageLatitude );\n\t\tFeedbackContext->Logf( ELogVerbosity::Log, TEXT( \"Average longitude: %f\" ), AverageLongitude );\n\t}\n\n\treturn true;\n}", "CodeBleu_score": 49.7151793274026}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\t// Open the file and read its contents into a buffer\n\tFString FileContents;\n\tif(!FOSMFile::LoadFileContents( OSMFilePath, FileContents, bIsFilePathActuallyTextBuffer ) )\n\t{\n\t\treturn false;\n\t}\n\n\t// Parse the file contents using FFastXml\n\tFFastXml XmlParser;\n\tif(!XmlParser.Parse( FileContents ) )\n\t{\n\t\tif( FeedbackContext )\n\t\t{\n\t\t\tFeedbackContext->Logf( TEXT( \"Failed to parse file \\\"%s\\\".\" ), *OSMFilePath );\n\t\t\tFeedbackContext->Logf( TEXT( \"Error: %s\" ), *XmlParser.GetLastError() );\n\t\t}\n\t\treturn false;\n\t}\n\n\t// Process the parsed data using the FFastXmlParserContext\n\tFOSMXmlParserContext XmlParserContext;\n\tif(!XmlParserContext.Parse( XmlParser, FeedbackContext ) )\n\t{\n\t\treturn false;\n\t}\n\n\t// Calculate the average latitude and longitude from the node data\n\tfloat AverageLatitude = 0.0f;\n\tfloat AverageLongitude = 0.0f;\n\tint32 NodeCount = 0;\n\tfor( auto HashPair : XmlParserContext.NodeMap )\n\t{\n\t\tFOSMNodeInfo* NodeInfo = HashPair.Value;\n\t\tAverageLatitude += NodeInfo->Latitude;\n\t\tAverageLongitude += NodeInfo->Longitude;\n\t\tNodeCount++;\n\t}\n\tif( NodeCount > 0 )\n\t{\n\t\tAverageLatitude /= NodeCount;\n\t\tAverageLongitude /= NodeCount;\n\t}\n\n\t// Return the average latitude and longitude\n\treturn true;\n}", "CodeBleu_score": 50.88493169454159}, {"code": "bool FOSMFile::LoadOpenStreetMapFile( FString& OSMFilePath, const bool bIsFilePathActuallyTextBuffer, FFeedbackContext* FeedbackContext ){\n\t\tif(!bIsFilePathActuallyTextBuffer ) {\n\t\t// Load the file into a text buffer\n\t\tFString FileTextBuffer;\n\t\tif(!FFileHelper::LoadFileToString( FileTextBuffer, *OSMFilePath ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Parse the text buffer\n\t\treturn LoadOpenStreetMapFile( FileTextBuffer, FeedbackContext );\n\t}\n\telse {\n\t\t// Parse the file directly\n\t\treturn LoadOpenStreetMapFile( OSMFilePath, FeedbackContext );\n\t}\n}", "CodeBleu_score": 22.719548836255683}]}
{"instance_id": "7349d775edf6", "generation_result": [{"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tif (UStreetMap* StreetMapAsset = Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMap(StreetMapAsset);\n\t}\n}", "CodeBleu_score": 83.33188882535171}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tif (UStreetMap* StreetMapAsset = Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tif (UStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent()) {\n\t\t\tStreetMapComponent->SetStreetMapAsset(StreetMapAsset);\n\t\t}\n\t}\n}", "CodeBleu_score": 80.04039115994203}, {"code": "void UStreetMapActorFactory::PostSpawnActor(UObject* Asset, AActor* NewActor){\n\t\tSuper::PostSpawnActor(Asset, NewActor);\n\tif (UStreetMap* StreetMapAsset = Cast<UStreetMap>(Asset)) {\n\t\tAStreetMapActor* StreetMapActor = Cast<AStreetMapActor>(NewActor);\n\t\tUStreetMapComponent* StreetMapComponent = StreetMapActor->GetStreetMapComponent();\n\t\tStreetMapComponent->SetStreetMapAsset(StreetMapAsset);\n\t}\n}", "CodeBleu_score": 83.30703597290214}]}
{"instance_id": "f160ac6d0353", "generation_result": [{"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent!= nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetailsView();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 79.4910942687777}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (HasValidMeshData()) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 47.12830549098658}, {"code": "FReply FStreetMapComponentDetails::OnBuildMeshClicked(){\n\t\tif (SelectedStreetMapComponent!= nullptr) {\n\t\tSelectedStreetMapComponent->BuildMesh();\n\t\tRefreshDetails();\n\t}\n\treturn FReply::Handled();\n}", "CodeBleu_score": 88.65636254352843}]}
{"instance_id": "b23f1f2b29fa", "generation_result": [{"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tStreetMapAssetTypeActions = MakeShareable( new FStreetMapAssetTypeActions );\n\tIAssetTools& AssetTools = FModuleManager::LoadModuleChecked<FAssetToolsModule>( \"AssetTools\" ).Get();\n\tAssetTools.RegisterAssetTypeActions( StreetMapAssetTypeActions.ToSharedRef() );\n\n\tFStreetMapStyle::Initialize();\n\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked<FPropertyEditorModule>( \"PropertyEditor\" );\n\tPropertyModule.RegisterCustomClassLayout( TEXT( \"StreetMapComponent\" ), FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentDetails::MakeInstance ) );\n\n\tFModuleManager::Get().NotifyPreLoadHasCompleted();\n}", "CodeBleu_score": 74.41105092172393}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tStreetMapAssetTypeActions = MakeShareable( new FStreetMapAssetTypeActions );\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::GetModuleChecked<FAssetToolsModule>( \"AssetTools\" );\n\tAssetToolsModule.Get().RegisterAssetTypeActions( StreetMapAssetTypeActions.ToSharedRef() );\n\n\tFStreetMapStyle::Initialize();\n\tFPropertyEditorModule& PropertyModule = FModuleManager::GetModuleChecked<FPropertyEditorModule>( \"PropertyEditor\" );\n\tPropertyModule.RegisterCustomClassLayout( \"StreetMapComponent\", FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentDetails::MakeInstance ) );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n}", "CodeBleu_score": 68.88550069601648}, {"code": "void FStreetMapImportingModule::StartupModule(){\n\t\t// This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tStreetMapAssetTypeActions = MakeShareable( new FStreetMapAssetTypeActions );\n\tFAssetToolsModule& AssetToolsModule = FModuleManager::LoadModuleChecked< FAssetToolsModule >( TEXT( \\\"AssetTools\\\" ) );\n\tAssetToolsModule.Get().RegisterAssetTypeActions( StreetMapAssetTypeActions.ToSharedRef() );\n\tFPropertyEditorModule& PropertyModule = FModuleManager::LoadModuleChecked< FPropertyEditorModule >( TEXT( \\\"PropertyEditor\\\" ) );\n\tPropertyModule.RegisterCustomClassLayout( TEXT( \\\"StreetMapComponent\\\" ), FOnGetDetailCustomizationInstance::CreateStatic( &FStreetMapComponentDetails::MakeInstance ) );\n\tPropertyModule.NotifyCustomizationModuleChanged();\n\tFStreetMapStyle::Initialize();\n\tFStreetMapStyle::ReloadTextures();\n}", "CodeBleu_score": 55.364275917023335}]}
{"instance_id": "1da549fe84e3", "generation_result": [{"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\t// If we don't have a mesh, we can't create a scene proxy.\n\tif (!StreetMap) {\n\t\treturn nullptr;\n\t}\n\n\t// Create a new scene proxy.\n\tFStreetMapSceneProxy* NewProxy = new FStreetMapSceneProxy(this);\n\n\t// If we have a valid mesh, initialize it with the component's vertices and indices.\n\tif (StreetMap->IsValidLowLevel()) {\n\t\tNewProxy->Init(StreetMap->GetResourceForRendering());\n\t}\n\n\t// Return the new scene proxy.\n\treturn NewProxy;\n}", "CodeBleu_score": 44.24406064977049}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMap == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\tif (Proxy == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\t// If the component has a valid mesh, we initialize the proxy with the component's vertices and indices.\n\tif (StreetMap->GetMesh()!= nullptr) {\n\t\t// We need to create a new array of vertices and indices, since we're going to modify the mesh's vertices and indices.\n\t\tTArray<FVector> Vertices;\n\t\tTArray<int32> Indices;\n\n\t\t// We need to get the mesh's vertices and indices.\n\t\tStreetMap->GetMesh()->GetLocalVertexAndIndexBuffer(Vertices, Indices);\n\n\t\t// We need to transform the mesh's vertices into local space.\n\t\tfor (FVector& Vertex : Vertices) {\n\t\t\tVertex = GetComponentTransform().InverseTransformPosition(Vertex);\n\t\t}\n\n\t\t// We need to transform the mesh's indices into local space.\n\t\tfor (int32& Index : Indices) {\n\t\t\tIndex = StreetMap->GetMesh()->LocalVertexToComponentSpaceIndex(Index);\n\t\t}\n\n\t\t// We need to add the new vertices and indices to the proxy.\n\t\tProxy->AddMeshSection(0, Vertices, Indices, StreetMap->GetMesh()->GetMaterial(0));\n\t}\n\n\treturn Proxy;\n}", "CodeBleu_score": 43.95429116646194}, {"code": "FPrimitiveSceneProxy* UStreetMapComponent::CreateSceneProxy(){\n\t\tif (StreetMap == nullptr) {\n\t\treturn nullptr;\n\t}\n\n\tFStreetMapSceneProxy* Proxy = new FStreetMapSceneProxy(this);\n\tProxy->SetMesh(StreetMap->GetStreetMapMesh());\n\n\treturn Proxy;\n}", "CodeBleu_score": 36.79276346315121}]}
{"instance_id": "d0ee3b2e023e", "generation_result": [{"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\n\tTArray<int32> InputIDs;\n\tInputIDs.Add(EInput::I_Ability01);\n\tAbilities->BindAbility(ServerHandle, InputIDs);\n}", "CodeBleu_score": 65.86623981521662}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FAFIInputID> InputIDs;\n\tInputIDs.Add(FAFIInputID(FAFIInput::EInput::EInput_01));\n\tAbilities->NativeBindAbility(TestAbility01Handle, InputIDs);\n}", "CodeBleu_score": 56.59422959081826}, {"code": "void AARCharacter::OnAbility01Ready(FAFAbilitySpec Spec, FAFAbilitySpecHandle ServerHandle, FAFAbilitySpecHandle ClientHandle){\n\t\tTestAbility01Handle = ServerHandle;\n\tTArray<FInputID> InputIDs;\n\tInputIDs.Add(FInputID(EInputKeys::Ability01, EInputEvent::IE_Pressed));\n\tAbilities->NativeAddAbility(TestAbility01, ServerHandle, InputIDs);\n}", "CodeBleu_score": 61.8806865293944}]}
{"instance_id": "e62f1b2cd4bd", "generation_result": [{"code": "void AARCharacter::MoveForward(float Value){\n\t\tif (Value!= 0.0f) {\n\t\t// add movement in that direction\n\t\tAddMovementInput(GetActorForwardVector(), Value);\n\t}\n}", "CodeBleu_score": 13.60441832895324}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}, {"code": "void AARCharacter::MoveForward(float Value){\n\t\tif ((Controller!= NULL) && (Value!= 0.0f)) {\n\t\t// find out which way is forward\n\t\tconst FRotator Rotation = Controller->GetControlRotation();\n\t\tconst FRotator YawRotation(0, Rotation.Yaw, 0);\n\n\t\t// get forward vector\n\t\tconst FVector Direction = FRotationMatrix(YawRotation).GetUnitAxis(EAxis::X);\n\t\tAddMovementInput(Direction, Value);\n\t}\n}", "CodeBleu_score": 91.7974804621021}]}
{"instance_id": "a77cdc67ee00", "generation_result": [{"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (GetMainWeaponMesh() == nullptr)\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\treturn GetMainWeaponMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.01528335065125}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetEquipedMainWeapon()->GetChildActor())\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\n\treturn GetMainWeapon<AARWeaponBase>()->GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.4177862619207}, {"code": "FVector AARCharacter::GetMainWeaponSocket(const FName& Socket) const{\n\t\tif (!GetEquipedMainWeapon()->GetChildActor())\n\t\treturn GetMesh()->GetSocketLocation(Socket);\n\n\treturn GetMainWeapon<AARWeaponBase>()->GetMesh()->GetSocketLocation(Socket);\n}", "CodeBleu_score": 45.4177862619207}]}
{"instance_id": "f021203f736a", "generation_result": [{"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 65.51318976441756}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 65.51318976441756}, {"code": "void AAREnemySpawner::OnEnemyKilled(AARAICharacter* InEnemy){\n\t\tSpawnedEnemies.Remove(InEnemy);\n\tif (SpawnedEnemies.Num() < MinRespawn) {\n\t\tSetupSpawner();\n\t}\n}", "CodeBleu_score": 65.51318976441756}]}
{"instance_id": "dbab72cb539f", "generation_result": [{"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tif (Result.Len() > 0) {\n\t\tTArray<FString> Params;\n\t\tOptions.ParseIntoArray(Params, TEXT(\",\"), false);\n\t\tfor (auto Param : Params) {\n\t\t\tif (Param.StartsWith(\"PlayerId=\")) {\n\t\t\t\tFString PlayerId = Param.RightChop(9);\n\t\t\t\tARGameInstance* GameInstance = Cast<ARGameInstance>(GetGameInstance());\n\t\t\t\tif (GameInstance) {\n\t\t\t\t\tGameInstance->PlayerId = PlayerId;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn Result;\n}", "CodeBleu_score": 51.61728087965955}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\t// Call the parent class's ApproveLogin method\n\tFString ParentResult = Super::ApproveLogin(Options);\n\n\t// Parse the options string into an array of parameters\n\tTArray<FString> OptionsArray;\n\tTArray<FString> SplitOptions = Options.ParseIntoArray(TEXT(\" \"), false);\n\tfor (FString Option : SplitOptions) {\n\t\tOptionsArray.Add(Option);\n\t}\n\n\t// Search for the \"PlayerId\" parameter in the options array\n\tfor (int32 i = 0; i < OptionsArray.Num(); i++) {\n\t\tif (OptionsArray[i].StartsWith(TEXT(\"PlayerId=\"))) {\n\t\t\t// Extract the player ID value from the parameter\n\t\t\tFString PlayerId = OptionsArray[i].RightChop(9);\n\n\t\t\t// Store the player ID value in the GameInstance\n\t\t\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n\t\t\tif (GameInstance) {\n\t\t\t\tGameInstance->PlayerId = PlayerId;\n\t\t\t}\n\n\t\t\t// Return the result from the parent method\n\t\t\treturn ParentResult;\n\t\t}\n\t}\n\n\t// If the \"PlayerId\" parameter is not found, return the result from the parent method\n\treturn ParentResult;\n}", "CodeBleu_score": 50.250947796620274}, {"code": "FString AARGameSession::ApproveLogin(const FString& Options){\n\t\tFString Result = Super::ApproveLogin(Options);\n\tTArray<FString> OptionsArray;\n\tOptions.ParseIntoArray(OptionsArray, TEXT(\",\"), true);\n\tFString PlayerId;\n\tfor (int32 i = 0; i < OptionsArray.Num(); ++i) {\n\t\tif (OptionsArray[i].Split(\"=\", &PlayerId, nullptr, ESearchCase::IgnoreCase, ESearchDir::FromStart)) {\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (Result.IsEmpty()) {\n\t\tResult = PlayerId;\n\t}\n\treturn Result;\n}", "CodeBleu_score": 55.81006266558839}]}
{"instance_id": "85ea02df92a5", "generation_result": [{"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = UsernameInput->GetText().ToString();\n\tFString displayName = DisplayNameInput->GetText().ToString();\n\tFString password = PasswordInput->GetText().ToString();\n\n\tif (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty()) {\n\t\tFText warning = FText::FromString(TEXT(\"All fields must be filled.\"));\n\t\tRegisterButton->SetIsEnabled(true);\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Visible);\n\t\tRegisterButton->SetContent(FText::FromString(TEXT(\"Register\")));\n\t\tWarningText->SetText(warning);\n\t}\n\telse {\n\t\tRegisterButton->SetIsEnabled(false);\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t\tRegisterButton->SetContent(FText::FromString(TEXT(\"Registering...\")));\n\t\tRegisterNewPlayer(username, displayName, password);\n\t}\n}", "CodeBleu_score": 51.35717901699586}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString username = Username->GetText().ToString();\n\tFString displayName = DisplayName->GetText().ToString();\n\tFString password = Password->GetText().ToString();\n\n\tif (username.IsEmpty() || displayName.IsEmpty() || password.IsEmpty()) {\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Collapsed);\n\t\tRegisterWarning->SetVisibility(ESlateVisibility::Visible);\n\t}\n\telse {\n\t\tARGameInstance* gameInstance = Cast<UARGameInstance>(GetGameInstance());\n\t\tif (gameInstance) {\n\t\t\tgameInstance->RegisterNewPlayer(username, displayName, password);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.316412401149464}, {"code": "void UARRegisterView::OnRegisterClicked(){\n\t\tFString Username = UsernameField->GetText().ToString();\n\tFString DisplayName = DisplayNameField->GetText().ToString();\n\tFString Password = PasswordField->GetText().ToString();\n\n\tif (Username.IsEmpty() || DisplayName.IsEmpty() || Password.IsEmpty()) {\n\t\tFText WarningMessage = FText::FromString(\"Please fill in all fields.\");\n\t\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\t\tRegisterWarningText->SetText(WarningMessage);\n\t\tRegisterWarningText->SetVisibility(ESlateVisibility::Visible);\n\t\treturn;\n\t}\n\n\tRegisterButton->SetVisibility(ESlateVisibility::Hidden);\n\tRegisterWarningText->SetVisibility(ESlateVisibility::Hidden);\n\n\tUARGameInstance* GameInstance = Cast<UARGameInstance>(GetGameInstance());\n\tGameInstance->RegisterNewPlayer(Username, DisplayName, Password);\n}", "CodeBleu_score": 55.44636075573257}]}
{"instance_id": "b33bb5886dd9", "generation_result": [{"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.Target && InMod.Target->IsValidLowLevel()) {\n\t\tFVector ActorLocation = InMod.Target->GetActorLocation();\n\t\tFVector2D ScreeLoc;\n\n\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\n\t\tfloat Damage = InMod.DeltaValue;\n\t\tif (InMod.DeltaValue < 0) {\n\t\t\tDamage = -Damage;\n\t\t}\n\n\t\tFloatingCombatText->SetDamage(Damage, ScreeLoc);\n\t}\n}", "CodeBleu_score": 41.1542419463991}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.Target.Get()) {\n\t\tAActor* Target = InMod.Target.Get();\n\t\tif (IAFAbilityInterface* TargetInt = Cast<IAFAbilityInterface>(Target)) {\n\t\t\tUARCharacterAttributes* Attributes = TargetInt->GetAttributesTyped<UARCharacterAttributes>();\n\t\t\tif (Attributes) {\n\t\t\t\tFVector2D ScreenLocation;\n\t\t\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, Attributes->GetActorLocation(), ScreenLocation, false);\n\t\t\t\tFString DamageString = FString::Printf(TEXT(\\\"- %d\\\"), InMod.Value.Get());\n\t\t\t\tFloatingCombatText->SetCombatText(DamageString, ScreenLocation);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 43.690428891464606}, {"code": "void AARHUD::OnEnemyDamageCaused(const FAFAttributeChangedData& InMod){\n\tif (InMod.TargetActor.IsValid()) {\n\t\tAActor* Target = InMod.TargetActor.Get();\n\t\tif (IAFAbilityInterface* TargetInt = Cast<IAFAbilityInterface>(Target)) {\n\t\t\tUARCharacterAttributes* Attributes = TargetInt->GetAttributesTyped<UARCharacterAttributes>();\n\t\t\tif (Attributes) {\n\t\t\t\tfloat Damage = InMod.AttributeMod.GetValue();\n\t\t\t\tif (Damage > 0) {\n\t\t\t\t\tFVector ActorLocation = Target->GetActorLocation();\n\t\t\t\t\tFVector2D ScreeLoc;\n\t\t\t\t\tUGameplayStatics::ProjectWorldToScreen(ARPC, ActorLocation, ScreeLoc, false);\n\t\t\t\t\tFloatingCombatText->SetDamage(Damage);\n\t\t\t\t\tFloatingCombatText->SetScreenLocation(ScreeLoc);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 46.947642148148624}]}
{"instance_id": "177d36e7e076", "generation_result": [{"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponInventoryComponent* WeaponComponent = AbilityInstance->GetWeaponComponent();\n\t\tif (WeaponComponent) {\n\t\t\tUARCharacter* Character = WeaponComponent->GetCharacter();\n\t\t\tif (Character) {\n\t\t\t\tif (Character->HasAuthority()) {\n\t\t\t\t\t// Duplicate the magazine upgrade and apply the upgrade effect to the ability instance\n\t\t\t\t\tUARMagazineUpgradeItem* MagazineUpgrade = InMagazineUpgrade->Duplicate();\n\t\t\t\t\tif (MagazineUpgrade) {\n\t\t\t\t\t\tAbilityInstance->GetAttributes()->CopyFromStruct(FARGunAttributesItem::StaticStruct(), &GeneratedAttributes);\n\t\t\t\t\t\tAbilityInstance->GetAttributes()->CopyFromStruct(FARGunAttributesItem::StaticStruct(), &MagazineUpgrade->GetAttributes());\n\t\t\t\t\t\tAbilityInstance->GetAttributes()->CopyFromStruct(FARGunAttributesItem::StaticStruct(), &GeneratedAttributes);\n\t\t\t\t\t\tAbilityInstance->GetAttributes()->CopyFromStruct(FARGunAttributesItem::StaticStruct(), &MagazineUpgrade->GetAttributes());\n\n\t\t\t\t\t\t// Apply the upgrade effect to the ability instance\n\t\t\t\t\t\tFActiveGameplayEffectHandle ActiveEffectHandle = AbilityInstance->ApplyEffect(MagazineUpgrade->GetEffect());\n\n\t\t\t\t\t\t// Call the OnMagazineUpdateAdded function\n\t\t\t\t\t\tOnMagazineUpdateAdded(MagazineUpgrade, ActiveEffectHandle);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 41.714596241597214}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponInventoryComponent* WeaponInventoryComponent = Cast<UARWeaponInventoryComponent>(AbilityInstance->GetOwner()->GetComponentByClass(UARWeaponInventoryComponent::StaticClass()));\n\t\tif (WeaponInventoryComponent) {\n\t\t\tUARCharacter* Character = Cast<UARCharacter>(WeaponInventoryComponent->GetOwner());\n\t\t\tif (Character) {\n\t\t\t\tUARMagazineUpgradeItem* NewMagazineUpgrade = DuplicateObject<UARMagazineUpgradeItem>(InMagazineUpgrade, Character);\n\t\t\t\tif (Character->HasAuthority()) {\n\t\t\t\t\tNewMagazineUpgrade->UpdateValue(AbilityInstance->GetAttributes()->GetAttributeValue(FARGunAttributesItem::StaticStruct(), FName(TEXT(\"MagazineUpgradeValue\"))));\n\t\t\t\t\tNewMagazineUpgrade->ApplyEffect(AbilityInstance);\n\t\t\t\t}\n\t\t\t\tAbilityInstance->OnMagazineUpdateAdded(NewMagazineUpgrade);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.834155524971294}, {"code": "void UARItemWeapon::AddMagazineUpgrade(class UARMagazineUpgradeItem* InMagazineUpgrade){\n\t\tif (AbilityInstance) {\n\t\tUARWeaponInventoryComponent* WeaponInventory = AbilityInstance->GetWeaponInventory();\n\t\tif (WeaponInventory) {\n\t\t\tUARCharacter* Character = WeaponInventory->GetOwningCharacter();\n\t\t\tif (Character) {\n\t\t\t\tUARItemMagazineView* MagazineView = Cast<UARItemMagazineView>(InMagazineUpgrade->GetView());\n\t\t\t\tif (MagazineView) {\n\t\t\t\t\tUARItemMagazineView* DuplicatedMagazineView = Cast<UARItemMagazineView>(InMagazineUpgrade->GetView()->Duplicate());\n\t\t\t\t\tif (DuplicatedMagazineView) {\n\t\t\t\t\t\tif (Character->GetNetMode() == ENetMode::NM_Client) {\n\t\t\t\t\t\t\tFMAGazineUpgradeInfo UpgradeInfo;\n\t\t\t\t\t\t\tUpgradeInfo.MagazineView = DuplicatedMagazineView;\n\t\t\t\t\t\t\tUpgradeInfo.UpgradeValue = InMagazineUpgrade->GetUpgradeValue();\n\t\t\t\t\t\t\tAbilityInstance->AddMagazineUpgrade(UpgradeInfo);\n\t\t\t\t\t\t\tAbilityInstance->ApplyMagazineUpgradeEffects();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tAbilityInstance->AddMagazineUpgrade(InMagazineUpgrade->GetUpgradeValue(), DuplicatedMagazineView);\n\t\t\t\t\t\t\tAbilityInstance->ApplyMagazineUpgradeEffects();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 45.872228807907256}]}
{"instance_id": "404276da398b", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFOnAbilityReady Del = FAFOnAbilityReady::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityAdded);\n\t\tAbilityComp->AddOnAbilityReadyDelegate(InAbilityTag.LoadSynchronous()->GetAbilityTag(), Del);\n\n\t\tClientWeaponAbilities[LocalIndex] = InAbilityTag.LoadSynchronous()->GetAbilityTag();\n\t\t//handle case of Client/Server ability handle.\n\t\tAbilityComp->NativeAddAbility(InAbilityTag.LoadSynchronous(), InAbilityTag.LoadSynchronous()->GetAbilityTag());\n\t}\n}", "CodeBleu_score": 54.44779361649932}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFOnAbilityReady Del = FAFOnAbilityReady::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityAdded);\n\t\tAbilityComp->AddOnAbilityReadyDelegate(InAbilityTag, Del);\n\n\t\tClientWeaponAbilities[LocalIndex] = InAbilityTag;\n\t\t//handle case of Client/Server ability handle.\n\t\tAbilityComp->NativeAddAbility(InAbilityTag.LoadSynchronous(), InAbilityTag);\n\t}\n}", "CodeBleu_score": 56.90119175272167}, {"code": "void UARWeaponInventoryComponent::OnWeaponReady(TSoftClassPtr<UARWeaponAbilityBase> InAbilityTag, int8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tUAFAbilityComponent* AbilityComp = Character->GetAbilityComp();\n\t\tif (!AbilityComp)\n\t\t\treturn;\n\t\tFAFOnAbilityReady Del = FAFOnAbilityReady::CreateUObject(this, &UARWeaponInventoryComponent::OnAbilityAdded);\n\t\tAbilityComp->AddOnAbilityReadyDelegate(InAbilityTag, Del);\n\n\t\tClientWeaponAbilities[LocalIndex] = InAbilityTag;\n\t\t//handle case of Client/Server ability handle.\n\t\tAbilityComp->NativeAddAbility(InAbilityTag.LoadSynchronous(), InAbilityTag);\n\t}\n}", "CodeBleu_score": 56.90119175272167}]}
{"instance_id": "2e97aab98981", "generation_result": [{"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tRCharacter* Character = Cast<AARCharacter>(POwner);\n\tif (!Character)\n\t\treturn;\n\n\tFARWeaponRPC Weapon;\n\tWeapon.Weapon = Character->GetWeaponBySlot(LocalIndex);\n\tWeapon.Position = Character->GetWeaponBySlot(LocalIndex)->GetRelativeTransform().GetLocation();\n\tWeapon.Rotation = Character->GetWeaponBySlot(LocalIndex)->GetRelativeTransform().GetRotation().Rotator();\n\n\tSetWeapon(Weapon, Character->GetWeaponBySlot(LocalIndex));\n\n\tif (LocalIndex == CurrentWeaponIndex) {\n\t\tCharacter->GetAbilityComp()->BP_OnUnequip();\n\t}\n}", "CodeBleu_score": 55.585409459250634}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\tRCharacter* Character = Cast<AARCharacter>(POwner);\n\tif (!Character)\n\t\treturn;\n\n\tFARWeaponRPC Weapon;\n\tWeapon.Position = FVector(0, 0, 0);\n\tWeapon.Rotation = FRotator(0, 0, 0);\n\tWeapon.Weapon = TSoftClassPtr<AARWeaponBase>();\n\n\tSetWeapon(Weapon, GroupToComponent[LocalIndex]);\n\n\tif (CurrentWeaponIndex == LocalIndex) {\n\t\tUE_LOG(LogTemp, Warning, TEXT(\"Unequipping weapon!\"));\n\t\tOnUnequipWeapon();\n\t}\n}", "CodeBleu_score": 43.39566033434047}, {"code": "void UARWeaponInventoryComponent::OnItemRemoved(uint8 LocalIndex){\n\t (AARCharacter* Character = Cast<AARCharacter>(POwner)) {\n\t\tFARWeaponRPC Weapon;\n\t\tWeapon.Weapon = FSoftClassPath(TEXT(\"\"));\n\t\tWeapon.Position = FVector(0, 0, 0);\n\t\tWeapon.Rotation = FRotator(0, 0, 0);\n\n\t\tSetWeapon(Weapon, GroupToComponent[LocalIndex]);\n\n\t\tif (LocalIndex == CurrentWeaponIndex) {\n\t\t\tif (UChildActorComponent* Component = GroupToComponent[LocalIndex]) {\n\t\t\t\tComponent->SetChildActorClass(AARWeaponBase::StaticClass());\n\t\t\t}\n\n\t\t\tOnUnequip();\n\t\t}\n\t}\n}", "CodeBleu_score": 48.24149802934598}]}
{"instance_id": "13cc35e5ecac", "generation_result": [{"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\t// This function may be called during shutdown to clean up your module.  For modules that support dynamic reloading,\n\t// we call this function before unloading the module.\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t\t}\n\t}\n}", "CodeBleu_score": 44.64723971823005}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 47.96284027596869}, {"code": "void FAsyncLoadingScreenModule::ShutdownModule(){\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tGetMoviePlayer()->OnPrepareLoadingScreen().RemoveAll(this);\n\t}\n}", "CodeBleu_score": 47.96284027596869}]}
{"instance_id": "2ee3ac60a8f3", "generation_result": [{"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tE_LOG(AsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\tif (!IsMoviePlayerEnabled()) {\n\t\treturn;\n\t}\n\n\t// Retrieve the default loading screen settings\n\tULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Set the startup flag to false\n\tbIsStartupLoadingScreen = false;\n\n\t// Set up the loading screen using the default settings\n\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n}", "CodeBleu_score": 57.364330536862}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\tE_LOG(LogAsyncLoadingScreen, Log, TEXT(\"PreSetupLoadingScreen\"));\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\tbIsStartupLoadingScreen = false;\n\n\tif (IsMoviePlayerEnabled()) {\n\t\tSetupLoadingScreen(Settings->DefaultLoadingScreen);\n\t}\n}", "CodeBleu_score": 60.496112490134124}, {"code": "void FAsyncLoadingScreenModule::PreSetupLoadingScreen(){\n\t/ This code will execute after your module is loaded into memory; the exact timing is specified in the.uplugin file per-module\n\tif (!IsRunningDedicatedServer() && FSlateApplication::IsInitialized()) {\n\t\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t\tif (IsMoviePlayerEnabled()) {\n\t\t\tGetMoviePlayer()->OnPrepareLoadingScreen().AddRaw(this, &FAsyncLoadingScreenModule::PreSetupLoadingScreen);\n\t\t}\n\n\t\t// If PreloadBackgroundImages option is check, load all background images into memory\n\t\tif (Settings->bPreloadBackgroundImages) {\n\t\t\tLoadBackgroundImages();\n\t\t}\n\n\t\t// Prepare the startup screen, the PreSetupLoadingScreen callback won't be called\n\t\t// if we've already explicitly setup the loading screen\n\t\tbIsStartupLoadingScreen = true;\n\t\tSetupLoadingScreen(Settings->StartupLoadingScreen);\n\t}\n}", "CodeBleu_score": 55.61681310705886}]}
{"instance_id": "c095588f550c", "generation_result": [{"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Retrieve the loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tfor (const FString& ImagePath : Settings->StartupLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* Image = LoadObject<UTexture2D>(nullptr, *ImagePath);\n\t\tif (Image) {\n\t\t\tStartupBackgroundImages.Add(Image);\n\t\t}\n\t}\n\n\t// Load and add images for the default loading screen\n\tfor (const FString& ImagePath : Settings->DefaultLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* Image = LoadObject<UTexture2D>(nullptr, *ImagePath);\n\t\tif (Image) {\n\t\t\tDefaultBackgroundImages.Add(Image);\n\t\t}\n\t}\n}", "CodeBleu_score": 52.26959626984521}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load all background images for the startup loading screen\n\tfor (const FString& BackgroundImagePath : Settings->StartupLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* BackgroundImage = Cast<UTexture2D>(StaticLoadObject(UTexture2D::StaticClass(), nullptr, *BackgroundImagePath));\n\t\tif (BackgroundImage) {\n\t\t\tStartupBackgroundImages.Add(BackgroundImage);\n\t\t}\n\t}\n\n\t// Load all background images for the default loading screen\n\tfor (const FString& BackgroundImagePath : Settings->DefaultLoadingScreen.BackgroundImages) {\n\t\tUTexture2D* BackgroundImage = Cast<UTexture2D>(StaticLoadObject(UTexture2D::StaticClass(), nullptr, *BackgroundImagePath));\n\t\tif (BackgroundImage) {\n\t\t\tDefaultBackgroundImages.Add(BackgroundImage);\n\t\t}\n\t}\n}", "CodeBleu_score": 48.93218763634084}, {"code": "void FAsyncLoadingScreenModule::LoadBackgroundImages(){\n\t Remove all existing background images\n\tStartupBackgroundImages.Empty();\n\tDefaultBackgroundImages.Empty();\n\n\t// Get the loading screen settings\n\tconst ULoadingScreenSettings* Settings = GetDefault<ULoadingScreenSettings>();\n\n\t// Load and add images for the startup loading screen\n\tif (Settings->StartupLoadingScreen.BackgroundImage.IsValid()) {\n\t\tStartupBackgroundImages.Add(Settings->StartupLoadingScreen.BackgroundImage.Get());\n\t}\n\n\t// Load and add images for the default loading screen\n\tif (Settings->DefaultLoadingScreen.BackgroundImage.IsValid()) {\n\t\tDefaultBackgroundImages.Add(Settings->DefaultLoadingScreen.BackgroundImage.Get());\n\t}\n}", "CodeBleu_score": 43.39832848544681}]}
{"instance_id": "4ffd56e2a326", "generation_result": [{"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\t/ Get the elapsed time in seconds since the animation started\n\tfloat ElapsedTime = FMath::Clamp(static_cast<float>(InCurrentTime - StartTime), 0.f, MaxTime);\n\n\t// Calculate the current alpha value based on the elapsed time and animation speed\n\tfloat Alpha = FMath::Clamp(FMath::Lerp(MinAlpha, MaxAlpha, ElapsedTime / MaxTime), MinAlpha, MaxAlpha);\n\n\t// Set the text's alpha value to the current alpha value\n\tCompleteTextColor.A = Alpha;\n\n\t// If the alpha reaches the maximum or minimum range, reverse the animation direction\n\tif (Alpha == MaxAlpha || Alpha == MinAlpha) {\n\t\tbReverseDirection =!bReverseDirection;\n\t}\n\n\t// If the animation should continue, return ActiveTimerStatus::Continue\n\treturn bReverseDirection? EActiveTimerReturnType::Continue : EActiveTimerReturnType::Stop;\n}", "CodeBleu_score": 36.478983585014}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\tf (GetMoviePlayer()->IsLoadingFinished()) {\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\n\t// Get the elapsed time since the animation started\n\tfloat ElapsedTime = FMath::Clamp(GetMoviePlayer()->GetElapsedTime(), 0.f, 1.f);\n\n\t// Get the maximum alpha value based on the animation speed\n\tfloat MaxAlpha = 1.f - FMath::Abs(CompleteTextAnimationSpeed);\n\n\t// Calculate the current alpha value based on the elapsed time and animation speed\n\tfloat CurrentAlpha = FMath::Lerp(0.f, MaxAlpha, ElapsedTime);\n\n\t// Apply the calculated alpha value to the text's color\n\tCompleteTextColor.A = CurrentAlpha;\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 22.953243051099985}, {"code": "EActiveTimerReturnType SLoadingCompleteText::AnimateText(double InCurrentTime, float InDeltaTime){\n\tf (GetMoviePlayer()->IsLoadingFinished())\n\t{\n\t\treturn EActiveTimerReturnType::Stop;\n\t}\n\n\t// Calculate the current alpha value based on the elapsed time and animation speed\n\tfloat Alpha = FMath::Clamp(FMath::Sin((InCurrentTime * CompleteTextAnimationSpeed) * 2 * PI), 0.0f, 1.0f);\n\n\t// Set the text color's alpha value\n\tCompleteTextColor.A = Alpha;\n\n\treturn EActiveTimerReturnType::Continue;\n}", "CodeBleu_score": 19.397485725097006}]}
{"instance_id": "7420af124c78", "generation_result": [{"code": "bool FRaceAwaiter::await_ready(){\n\tf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index!= -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 48.935950804047955}, {"code": "bool FRaceAwaiter::await_ready(){\n\tf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index!= -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 48.935950804047955}, {"code": "bool FRaceAwaiter::await_ready(){\n\tf(Data, TEXT(\"Attempting to await moved-from race awaiter\"));\n\tData->Lock.lock();\n\tcheckf(!Data->Promise, TEXT(\"Attempting to reuse race awaiter\"));\n\n\t// Unlock if ready and resume immediately by returning true,\n\t// otherwise carry the lock to await_suspend/Suspend\n\tbool bReady = Data->Index!= -1;\n\tif (bReady)\n\t\tData->Lock.unlock();\n\treturn bReady;\n}", "CodeBleu_score": 48.935950804047955}]}
{"instance_id": "fab9fe81573a", "generation_result": [{"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathSharedPtr& SharedPtr = *static_cast<FFindPathSharedPtr*>(State);\n\tif (bCleanup) {\n\t\tif (SharedPtr->QueryID!= 0) {\n\t\t\tSharedPtr->NS1.Get()->CancelAsyncFindPath(SharedPtr->QueryID);\n\t\t\tSharedPtr->QueryID = 0;\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 32.38539873413666}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathState* StatePtr = static_cast<FFindPathState*>(State);\n\tif (bCleanup) {\n\t\tStatePtr->NS1.Reset();\n\t\treturn true;\n\t}\n\treturn StatePtr->QueryID == 0;\n}", "CodeBleu_score": 25.153505293882393}, {"code": "bool ShouldResumeFindPath(void* State, bool bCleanup){\n\t\tFFindPathState* StatePtr = (FFindPathState*)State;\n\tif (bCleanup) {\n\t\tif (StatePtr->QueryID!= 0) {\n\t\t\tStatePtr->NS1->CancelAsyncPathRequest(StatePtr->QueryID);\n\t\t\tStatePtr->QueryID = 0;\n\t\t}\n\t\treturn false;\n\t}\n\treturn true;\n}", "CodeBleu_score": 27.510223110221588}]}
{"instance_id": "0656af2cb3eb", "generation_result": [{"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tmake_current();\n\t\t\t\t} else {\n\t\t\t\t\tif (AudioServer::get_singleton()->get_current_listener()!= nullptr) {\n\t\t\t\t\t\tcurrent = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene()) {\n\t\t\t\tif (current) {\n\t\t\t\t\tcurrent = false;\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t}\n}", "CodeBleu_score": 72.824671631516}, {"code": "void AudioListener2D::_notification(int p_what){\n\t", "CodeBleu_score": 2.2102799370297075}, {"code": "void AudioListener2D::_notification(int p_what){\n\t\tswitch (p_what) {\n\t\tcase NOTIFICATION_ENTER_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->get_current_listener()!= this) {\n\t\t\t\tmake_current();\n\t\t\t}\n\t\t} break;\n\t\tcase NOTIFICATION_EXIT_TREE: {\n\t\t\tif (!is_part_of_edited_scene() && AudioServer::get_singleton()->get_current_listener() == this) {\n\t\t\t\tclear_current();\n\t\t\t}\n\t\t} break;\n\t\tdefault: {\n\t\t}\n\t}\n}", "CodeBleu_score": 59.67683198095178}]}
{"instance_id": "9aadd2c91e67", "generation_result": [{"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND(p_frames <= 0);\n\tERR_FAIL_COND(p_buffer == nullptr);\n\n\tif (active.is_set()) {\n\t\tlock();\n\t\tstart_counting_ticks();\n\n\t\taudio_server_process(p_frames, p_buffer);\n\n\t\tstop_counting_ticks();\n\t\tunlock();\n\t} else {\n\t\tfor (int i = 0; i < p_frames; i++) {\n\t\t\tfor (int j = 0; j < channels; j++) {\n\t\t\t\tp_buffer[i * channels + j] = 0;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 39.39978135077066}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tif (!active.is_set()) {\n\t\treturn;\n\t}\n\n\tif (use_threads) {\n\t\treturn;\n\t}\n\n\tlock();\n\tstart_counting_ticks();\n\n\taudio_server_process(p_frames, p_buffer);\n\n\tstop_counting_ticks();\n\tunlock();\n}", "CodeBleu_score": 16.409910541659244}, {"code": "void AudioDriverDummy::mix_audio(int p_frames, int32_t *p_buffer){\n\t\tERR_FAIL_COND_MSG(p_buffer == nullptr, \"Invalid buffer\");\n\n\tif (active.is_set()) {\n\t\tlock();\n\t\tstart_counting_ticks();\n\n\t\taudio_server_process(p_frames, p_buffer);\n\n\t\tstop_counting_ticks();\n\t\tunlock();\n\t}\n}", "CodeBleu_score": 17.407815441230092}]}
{"instance_id": "56df08c77b69", "generation_result": [{"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tERR_FAIL_NULL(get_space());\n\n\tif (gravity_override_mode == PhysicsServer2D::AREA_SPACE_OVERRIDE_MODE_DISABLED) {\n\t\tr_gravity.set(0, 0);\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == PhysicsServer2D::AREA_SPACE_OVERRIDE_MODE_KEEP) {\n\t\tr_gravity = gravity_vector;\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == PhysicsServer2D::AREA_SPACE_OVERRIDE_MODE_OVERRIDE) {\n\t\tr_gravity = gravity_vector;\n\t\tif (gravity_is_point) {\n\t\t\tr_gravity *= 1.0 / (p_position - gravity_point_unit_distance).length_squared();\n\t\t}\n\t\treturn;\n\t}\n\n\tERR_FAIL_COND(gravity_override_mode == PhysicsServer2D::AREA_SPACE_OVERRIDE_MODE_USE_SPACE);\n\n\tif (gravity_is_point) {\n\t\tr_gravity = (p_position - gravity_point_unit_distance) * (1.0 / (p_position - gravity_point_unit_distance).length_squared());\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 41.39573183202214}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_override_mode == PhysicsServer2D::AREA_SPACE_OVERRIDE_DISABLED) {\n\t\tr_gravity = Vector2();\n\t\treturn;\n\t}\n\n\tif (gravity_override_mode == PhysicsServer2D::AREA_SPACE_OVERRIDE_STATIC) {\n\t\tr_gravity = gravity_vector;\n\t\treturn;\n\t}\n\n\tif (gravity_is_point) {\n\t\tr_gravity = (p_position - gravity_point) * (1.0 / (gravity_point_unit_distance * gravity_point_unit_distance));\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 35.25033463574156}, {"code": "void GodotArea2D::compute_gravity(const Vector2 &p_position, Vector2 &r_gravity) const{\n\t\tif (gravity_override_mode == PhysicsServer2D::AREA_SPACE_OVERRIDE_DISABLED) {\n\t\tr_gravity = Vector2();\n\t\treturn;\n\t}\n\n\tif (gravity_is_point) {\n\t\tr_gravity = (p_position - gravity_vector) * (1.0 / (gravity_point_unit_distance * gravity_point_unit_distance));\n\t} else {\n\t\tr_gravity = gravity_vector;\n\t}\n}", "CodeBleu_score": 29.136120918461184}]}
{"instance_id": "f8c60f8d0caa", "generation_result": [{"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotConstraint2D *c = constraints[i];\n\t\tif (c->get_enabled()) {\n\t\t\tGodotBody2D *body = c->get_other_body(this);\n\t\t\tif (body &&!body->is_active()) {\n\t\t\t\tbody->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.34962579988924}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotConstraint2D *c = constraints[i];\n\t\tif (c->get_enabled() && c->get_collide_with_bodies()) {\n\t\t\tGodotBody2D *b = c->get_other_body(this);\n\t\t\tif (b &&!b->is_active()) {\n\t\t\t\tb->set_active(true);\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 38.466642822294894}, {"code": "void GodotBody2D::wakeup_neighbours(){\n\t\tfor (int i = 0; i < constraints.size(); i++) {\n\t\tGodotConstraint2D *constraint = constraints[i];\n\t\tif (!constraint) {\n\t\t\tcontinue;\n\t\t}\n\t\tGodotBody2D *body = constraint->get_body_a();\n\t\tif (body->mode!= PhysicsServer2D::BODY_MODE_RIGID) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (body->is_active()) {\n\t\t\tcontinue;\n\t\t}\n\t\tbody->set_active(true);\n\t}\n}", "CodeBleu_score": 44.620141683875936}]}
{"instance_id": "0c6f6c00da9a", "generation_result": [{"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space() &&!monitor_query_list.in_list()) {\n\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t}\n}", "CodeBleu_score": 71.48136898721782}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (get_space() &&!monitor_query_list.in_list()) {\n\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t}\n}", "CodeBleu_score": 71.48136898721782}, {"code": "void GodotArea3D::_queue_monitor_update() {\n\t\tif (!get_space()) {\n\t\treturn;\n\t}\n\tif (!monitor_query_list.in_list()) {\n\t\tget_space()->area_add_to_monitor_query_list(&monitor_query_list);\n\t}\n}", "CodeBleu_score": 81.47771086489088}]}
{"instance_id": "efc39df0e3a3", "generation_result": [{"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\t", "CodeBleu_score": 2.1451046329649315}, {"code": "void GodotBody3D::_update_transform_dependent(){\n\tif (get_space() &&!transform_dependent_update_list.in_list()) {\n\t\tget_space()->body_add_to_transform_dependent_update_list(&transform_dependent_update_list);\n\t}\n}", "CodeBleu_score": 20.65254570473395}]}
{"instance_id": "aebafb4094a1", "generation_result": [{"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (singleton == nullptr) {\n\t\treturn;\n\t}\n\tif (p_update_mix_time) {\n\t\tsingleton->update_mix_time(p_frames);\n\t}\n\tif (singleton->audio_server == nullptr) {\n\t\treturn;\n\t}\n\tsingleton->audio_server->process_audio(p_frames, p_buffer);\n}", "CodeBleu_score": 51.10500106456692}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tif (p_update_mix_time) {\n\t\tif (mix_time_ms > 0) {\n\t\t\tmix_time_ms -= p_frames * 1000 / mix_rate;\n\t\t}\n\t}\n\tif (mix_time_ms <= 0) {\n\t\treturn;\n\t}\n\tif (AudioServer::is_valid()) {\n\t\tAudioServer::get()->process(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 63.57382794694859}, {"code": "void AudioDriver::audio_server_process(int p_frames, int32_t *p_buffer, bool p_update_mix_time) {\n\t\tERR_FAIL_COND(p_buffer == nullptr);\n\n\tif (p_update_mix_time) {\n\t\t_update_mix_time(p_frames);\n\t}\n\n\tif (AudioServer::get_singleton()) {\n\t\tAudioServer::get_singleton()->_process_audio(p_frames, p_buffer);\n\t}\n}", "CodeBleu_score": 74.21435773830204}]}
{"instance_id": "160bb23e8010", "generation_result": [{"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tfeeds.remove_at(i);\n\n\t\t\tprint_verbose(\"CameraServer: Unregistered camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(i));\n\n\t\t\t// let whomever is interested know\n\t\t\temit_signal(SNAME(\"camera_feed_removed\"), p_feed->get_id());\n\n\t\t\treturn;\n\t\t};\n\t};\n}", "CodeBleu_score": 73.99496973356659}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tint index = get_feed_index(p_feed->get_id());\n\tERR_FAIL_COND(index == -1);\n\tfeeds.remove(index);\n\n\tprint_verbose(\"CameraServer: Unregistered camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(index));\n\n\t// let whomever is interested know\n\temit_signal(SNAME(\"camera_feed_removed\"), p_feed->get_id());\n}", "CodeBleu_score": 55.112652805446174}, {"code": "void CameraServer::remove_feed(const Ref<CameraFeed> &p_feed){\n\tERR_FAIL_COND(p_feed.is_null());\n\n\t// remove our feed\n\tfor (int i = 0; i < feeds.size(); i++) {\n\t\tif (feeds[i] == p_feed) {\n\t\t\tprint_verbose(\"CameraServer: Unregistered camera \" + p_feed->get_name() + \" with ID \" + itos(p_feed->get_id()) + \" and position \" + itos(p_feed->get_position()) + \" at index \" + itos(i));\n\n\t\t\t// let whomever is interested know\n\t\t\temit_signal(SNAME(\"camera_feed_removed\"), p_feed->get_id());\n\n\t\t\t// remove the feed\n\t\t\tfeeds.remove_at(i);\n\n\t\t\treturn;\n\t\t}\n\t}\n}", "CodeBleu_score": 72.61706852221596}]}
{"instance_id": "bef3cf110c45", "generation_result": [{"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction* pRet = new (std::nothrow) EaseRateAction();\n\tif (pRet && pRet->initWithAction(action, rate))\n\t{\n\t\tpRet->autorelease();\n\t}\n\telse\n\t{\n\t\tCC_SAFE_DELETE(pRet);\n\t}\n\treturn pRet;\n}", "CodeBleu_score": 51.51702968560961}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction *pRet = new (std::nothrow) EaseRateAction();\n\tif (pRet && pRet->initWithAction(action, rate)) {\n\t\tpRet->autorelease();\n\t\treturn pRet;\n\t}\n\tCC_SAFE_DELETE(pRet);\n\treturn nullptr;\n}", "CodeBleu_score": 56.66159637139449}, {"code": "EaseRateAction* EaseRateAction::create(ActionInterval* action, float rate){\n\tEaseRateAction* ret = new (std::nothrow) EaseRateAction();\n\tif (ret && ret->initWithAction(action, rate)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 56.33568890846973}]}
{"instance_id": "97fc6f86ad54", "generation_result": [{"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tif (node->getName() == childName) {\n\t\treturn node;\n\t}\n\n\tauto children = node->getChildren();\n\tfor (auto child : children) {\n\t\tauto foundChild = findChildByNameRecursively(child, childName);\n\t\tif (foundChild) {\n\t\t\treturn foundChild;\n\t\t}\n\t}\n\n\treturn nullptr;\n}", "CodeBleu_score": 55.601435087696515}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tf (node->getName() == childName) {\nreturn node;\n}\n\nauto children = node->getChildren();\nfor (auto child : children) {\nauto foundChild = findChildByNameRecursively(child, childName);\nif (foundChild!= nullptr) {\nreturn foundChild;\n}\n}\n\nreturn nullptr;\n}", "CodeBleu_score": 54.84077410441552}, {"code": "Node* findChildByNameRecursively(Node* node, const std::string &childName){\n\tf (node->getName() == childName) {\nreturn node;\n}\n\nfor (auto child : node->getChildren()) {\nauto foundNode = findChildByNameRecursively(child, childName);\nif (foundNode) {\nreturn foundNode;\n}\n}\n\nreturn nullptr;\n}", "CodeBleu_score": 48.18842186878862}]}
{"instance_id": "5fcbe1fedcd2", "generation_result": [{"code": "void Animate3D::removeFromMap(){\n\tif (_target) {\nif (_state == Animate3D::Animate3DState::FadeIn && s_fadeInAnimates[_target] == this) {\ns_fadeInAnimates.erase(_target);\n} else if (_state == Animate3D::Animate3DState::FadeOut && s_fadeOutAnimates[_target] == this) {\ns_fadeOutAnimates.erase(_target);\n} else if (_state == Animate3D::Animate3DState::Running && s_runningAnimates[_target] == this) {\ns_runningAnimates.erase(_target);\n}\n}\n}", "CodeBleu_score": 39.022644566286175}, {"code": "void Animate3D::removeFromMap(){\n\tif (_target) {\nif (_state == Animate3D::Animate3DState::FadeIn) {\ns_fadeInAnimates.erase(_target);\n}\nelse if (_state == Animate3D::Animate3DState::FadeOut) {\ns_fadeOutAnimates.erase(_target);\n}\nelse {\ns_runningAnimates.erase(_target);\n}\n}\n}", "CodeBleu_score": 25.582314407566304}, {"code": "void Animate3D::removeFromMap(){\n\tif (_target) {\ns_fadeOutAnimates.erase(_target);\ns_fadeInAnimates.erase(_target);\ns_runningAnimates[_target] = nullptr;\n}\n}", "CodeBleu_score": 18.751221191780854}]}
{"instance_id": "db8d394f7bc4", "generation_result": [{"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* animation = new (std::nothrow) Animation3D();\n\tif (animation && animation->initWithFile(fileName, animationName)) {\n\t\tanimation->autorelease();\n\t\treturn animation;\n\t}\n\tCC_SAFE_DELETE(animation);\n\treturn nullptr;\n}", "CodeBleu_score": 32.14531127925923}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t\tAnimation3D* animation = new (std::nothrow) Animation3D();\n\tif (animation && animation->initWithFile(fileName, animationName)) {\n\t\tanimation->autorelease();\n\t\treturn animation;\n\t}\n\tCC_SAFE_DELETE(animation);\n\treturn nullptr;\n}", "CodeBleu_score": 32.14531127925923}, {"code": "Animation3D* Animation3D::create(const std::string& fileName, const std::string& animationName){\n\t#if CC_USE_3D_RENDERER\n    Animation3D* animation = nullptr;\n    const std::string key = fileName + animationName;\n    auto it = s_animation3DCache.find(key);\n    if (it!= s_animation3DCache.end()) {\n        animation = it->second;\n    } else {\n        animation = new (std::nothrow) Animation3D();\n        if (animation && animation->initWithFile(fileName, animationName)) {\n            s_animation3DCache[key] = animation;\n        } else {\n            CC_SAFE_DELETE(animation);\n        }\n    }\n    return animation;\n#else\n    CCASSERT(false, \"Animation3D is not supported in JSB\");\n    return nullptr;\n#endif\n}", "CodeBleu_score": 58.56342497301013}]}
{"instance_id": "cdf28d98d3ff", "generation_result": [{"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor : _animations) {\n\t\tif (itor.second->getReferenceCount() == 1) {\n\t\t\tCC_SAFE_RELEASE(itor.second);\n\t\t\t_animations.erase(itor.first);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.460851472218664}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\tfor (auto itor : _animations) {\nauto animation = itor.second;\nif (animation->getReferenceCount() == 1) {\nCC_SAFE_RELEASE(animation);\n_animations.erase(itor);\n}\n}\n}", "CodeBleu_score": 36.377860527909576}, {"code": "void Animation3DCache::removeUnusedAnimation(){\n\t\tfor (auto itor : _animations) {\n\t\tif (itor.second->getReferenceCount() == 1) {\n\t\t\tCC_SAFE_RELEASE(itor.second);\n\t\t\t_animations.erase(itor.first);\n\t\t}\n\t}\n}", "CodeBleu_score": 39.460851472218664}]}
{"instance_id": "de7926871eb8", "generation_result": [{"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *sprite = new (std::nothrow) BillBoard();\n\tif (sprite && sprite->initWithTexture(texture, mode)) {\n\t\tsprite->autorelease();\n\t\treturn sprite;\n\t}\n\tCC_SAFE_DELETE(sprite);\n\treturn nullptr;\n}", "CodeBleu_score": 59.04651192400247}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard *ret = new (std::nothrow) BillBoard();\n\tif (ret && ret->initWithTexture(texture, mode)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 58.506668946381794}, {"code": "BillBoard* BillBoard::createWithTexture(Texture2D *texture, Mode mode){\n\t\tBillBoard* ret = new (std::nothrow) BillBoard();\n\tif (ret && ret->initWithTexture(texture, mode)) {\n\t\tret->autorelease();\n\t\treturn ret;\n\t}\n\tCC_SAFE_DELETE(ret);\n\treturn nullptr;\n}", "CodeBleu_score": 58.07422766630117}]}
{"instance_id": "eef1c2206d68", "generation_result": [{"code": "bool Bundle3D::load(const std::string& path){\n\t (!path.empty()) {\nif (_path!= path) {\n_path = path;\nif (isBinary()) {\n_binaryBuffer = FileUtils::getInstance()->getDataFromFile(_path);\n_references = new unsigned char[_binaryBuffer.size()];\nstd::memcpy(_references, _binaryBuffer.getBytes(), _binaryBuffer.size());\n} else {\n_jsonBuffer = FileUtils::getInstance()->getStringFromFile(_path);\n}\nreturn true;\n}\n}\nreturn false;\n}", "CodeBleu_score": 34.445261401092374}, {"code": "bool Bundle3D::load(const std::string& path){\n\tf (path.empty()) {\n\t\treturn false;\n\t}\n\tif (_path == path) {\n\t\treturn true;\n\t}\n\t_path = path;\n\tif (_isBinary) {\n\t\t_binaryBuffer = FileUtils::getInstance()->getDataFromFile(path);\n\t\tif (_binaryBuffer.empty()) {\n\t\t\treturn false;\n\t\t}\n\t\t_references = new int[_binaryBuffer.size()];\n\t\tmemset(_references, 0, sizeof(int) * _binaryBuffer.size());\n\t} else {\n\t\t_jsonBuffer = FileUtils::getInstance()->getStringFromFile(path);\n\t\tif (_jsonBuffer.empty()) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}", "CodeBleu_score": 39.32328578401072}, {"code": "bool Bundle3D::load(const std::string& path){\n\tf (!path.empty() && _path!= path) {\n\t\t_path = path;\n\t\tif (_path.size() > 0) {\n\t\t\tstd::string extension = FileUtils::getInstance()->getFileExtension(_path);\n\t\t\tif (extension == \"c3t\") {\n\t\t\t\tloadJSON();\n\t\t\t} else if (extension == \"c3b\") {\n\t\t\t\tloadBinary();\n\t\t\t} else {\n\t\t\t\tlog(\"Invalid format for Bundle3D\");\n\t\t\t\t_path.clear();\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 34.077504151625746}]}
{"instance_id": "37b6acea681e", "generation_result": [{"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tskindata->resetData();\n\tif (_isBinary) {\n\t\treturn loadSkinDataBinary(skindata);\n\t}\n\telse {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 90.83479861409403}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (_isBinary) {\n\t\treturn loadSkinDataBinary(skindata);\n\t} else {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 70.74148887871856}, {"code": "bool Bundle3D::loadSkinData(const std::string& /*id*/, SkinData* skindata){\n\t\tif (!skindata)\n\t\treturn false;\n\n\tskindata->resetData();\n\tif (_isBinary) {\n\t\treturn loadSkinDataBinary(skindata);\n\t} else {\n\t\treturn loadSkinDataJson(skindata);\n\t}\n}", "CodeBleu_score": 87.15225518917428}]}
{"instance_id": "97449825e4ef", "generation_result": [{"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\n    AudioDecoder* decoder = (AudioDecoder*)datasource;\n    size_t bytesToRead = size * nmemb;\n    size_t bytesRead = 0;\n\n    if (decoder->m_filePos + bytesToRead > decoder->m_fileSize) {\n        bytesToRead = decoder->m_fileSize - decoder->m_filePos;\n    }\n\n    if (bytesToRead > 0) {\n        memcpy(ptr, decoder->m_fileData + decoder->m_filePos, bytesToRead);\n        decoder->m_filePos += bytesToRead;\n        bytesRead = bytesToRead;\n    }\n\n    return bytesRead;\n}", "CodeBleu_score": 52.10410424773882}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\tAudioDecoder* decoder = (AudioDecoder*)datasource;\n\tif (decoder->m_filePos + size * nmemb > decoder->m_fileSize) {\n\t\tsize_t bytesToRead = decoder->m_fileSize - decoder->m_filePos;\n\t\tmemcpy(ptr, decoder->m_fileData + decoder->m_filePos, bytesToRead);\n\t\tdecoder->m_filePos += bytesToRead;\n\t\treturn bytesToRead;\n\t}\n\tmemcpy(ptr, decoder->m_fileData + decoder->m_filePos, size * nmemb);\n\tdecoder->m_filePos += size * nmemb;\n\treturn size * nmemb;\n}", "CodeBleu_score": 45.09340896677227}, {"code": "size_t AudioDecoder::fileRead(void* ptr, size_t size, size_t nmemb, void* datasource){\n\t\treturn fread(ptr, size, nmemb, (FILE*)datasource);\n}", "CodeBleu_score": 17.369081785132636}]}
{"instance_id": "0f4db164ba5d", "generation_result": [{"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}, {"code": "AudioDecoder::AudioDecoder()\n        : _fileCurrPos(0), _sampleRate(-1){\n\t\n}", "CodeBleu_score": 7.8349078318894465}]}
{"instance_id": "0f88663615c6", "generation_result": [{"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it!= sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 66.81003030479799}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\n\tauto it = sDownloaderMap.find(id);\n\tif (it!= sDownloaderMap.end()) {\n\t\treturn it->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 66.81003030479799}, {"code": "static cocos2d::network::DownloaderAndroid* _findDownloaderAndroid(int id){\n\t\tstd::lock_guard<std::mutex> guard(sDownloaderMutex);\n\tauto iter = sDownloaderMap.find(id);\n\tif (iter!= sDownloaderMap.end()) {\n\t\treturn iter->second;\n\t}\n\treturn nullptr;\n}", "CodeBleu_score": 74.9123618198829}]}
{"instance_id": "a5aafaaa944c", "generation_result": [{"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 90.10072137492988}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 90.10072137492988}, {"code": "function M.playMusic(filename, isLoop)\n\t\tlocal loopValue = false\n\tif nil ~= isLoop then\n\t\tloopValue = isLoop\n\tend\n\tcc.SimpleAudioEngine:getInstance():playMusic(filename, loopValue)", "CodeBleu_score": 90.10072137492988}]}
{"instance_id": "16f2ad4bb4e8", "generation_result": [{"code": "function ccs.TriggerObj:detect()\n\t\tif not self._enable then\n\t\treturn false\n\tend\n\n\tif table.getn(self._cons) == 0 then\n\t\treturn true\n\tend\n\n\tlocal result = true\n\tfor i = 1, table.getn(self._cons) do\n\t\tlocal cond = self._cons[i]\n\t\tif nil ~= cond then\n\t\t\tresult = result and cond:detect()\n\t\tend\n\tend\n\n\treturn result", "CodeBleu_score": 58.35117731197733}, {"code": "function ccs.TriggerObj:detect()\n\t\tif not self._enable then \n\t\treturn false \n\tend \n\tif table.getn(self._cons) == 0 then \n\t\treturn true \n\tend \n\tlocal ret = true \n\tfor i = 1, table.getn(self._cons) do \n\t\tlocal cons = self._cons[i] \n\t\tif not cons:detect() then \n\t\t\tret = false \n\t\t\tbreak \n\t\tend \n\tend \n\treturn ret ", "CodeBleu_score": 55.83992807948921}, {"code": "function ccs.TriggerObj:detect()\n\t\tif not self._enable then\n\t\treturn false\n\tend\n\n\tif table.getn(self._cons) == 0 then\n\t\treturn true\n\tend\n\n\tfor i = 1, table.getn(self._cons) do\n\t\tlocal cons = self._cons[i]\n\t\tif cons:detect() == false then\n\t\t\treturn false\n\t\tend\n\tend\n\n\treturn true", "CodeBleu_score": 44.80697774620618}]}
{"instance_id": "e73b10418cb6", "generation_result": [{"code": "function ccs.TriggerObj:removeAll()\n\tif (not self._enable) or (table.getn(self._cons) == 0) then\n\t\treturn\n\tend\n\n\tlocal obj = nil\n\tfor i = 1, table.getn(self._cons) do\n\t\tobj = self._cons[i]\n\t\tif nil ~= obj and nil ~= obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\n\tself._cons = {}\n\n\tif (not self._enable) or (table.getn(self._acts) == 0) then\n\t\treturn\n\tend\n\n\tobj = nil\n\tfor i = 1, table.getn(self._acts) do\n\t\tobj = self._acts[i]\n\t\tif nil ~= obj and obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\n\tself._acts = {}", "CodeBleu_score": 73.17339238065469}, {"code": "function ccs.TriggerObj:removeAll()\n\tif (not self._enable) or (table.getn(self._cons) == 0) then\n\t\treturn\n\tend\n\n\tlocal obj = nil\n\tfor i = 1, table.getn(self._cons) do\n\t\tobj = self._cons[i]\n\t\tif nil ~= obj and nil ~= obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\n\tself._cons = {}\n\n\tif (not self._enable) or (table.getn(self._acts) == 0) then\n\t\treturn\n\tend\n\n\tobj = nil\n\tfor i = 1, table.getn(self._acts) do\n\t\tobj = self._acts[i]\n\t\tif nil ~= obj and obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\n\tself._acts = {}", "CodeBleu_score": 73.17339238065469}, {"code": "function ccs.TriggerObj:removeAll()\n\tfor i = 1, table.getn(self._cons) do\n\t\tlocal obj = self._cons[i]\n\t\tif nil ~= obj and obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\tfor i = 1, table.getn(self._acts) do\n\t\tlocal obj = self._acts[i]\n\t\tif nil ~= obj and obj.removeAll then\n\t\t\tobj:removeAll()\n\t\tend\n\tend\n\tself._cons = {}\n\tself._acts = {}", "CodeBleu_score": 67.05097170239593}]}
{"instance_id": "d5a1333d794d", "generation_result": [{"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtAnimation = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimation3D = cc.Animation3D:", "CodeBleu_score": 33.50729826229174}, {"code": "function BasicCollider:hurtEffect(target)\n\tlocal effect = cc.Sprite3D:create()\n\teffect:setCameraMask(cc.CameraFlag.USER1)\n\teffect:setCascadeColorEnabled(true)\n\teffect:setCascadeOpacityEnabled(true)\n\teffect:setOpacity(255)\n\teffect:setScale(1)\n\teffect:setOpacity(0)\n\tlocal anim = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal anim_action = cc.Animate3D:create(anim)\n\tlocal seq = cc.Sequence:create(anim_action,cc.CallFunc:create(function()\n\t\teffect:removeFromParent()\n\tend))\n\teffect:runAction(seq)\n\teffect:setPosition(target:getPosition())\n\ttarget:addChild(effect)", "CodeBleu_score": 45.68631640123099}, {"code": "function BasicCollider:hurtEffect(target)\n\tlocal hurtAnimation = cc.Animation3D:create(\"hurtAnimation.c3b\")\n\tlocal hurtAnimationState = cc.Animation3DState:create(hurtAnimation)\n\thurtAnimationState:setWeight(1)\n\tlocal hurtAnimationNode = cc.Node3D:create()\n\thurtAnimationNode:addComponent(hurtAnimationState)\n\tlocal hurtBillboard = cc.BillBoard:create()\n\thurtBillboard:setMode(cc.BILLBOARD_MODE_ALL)\n\thurtBillboard:setCameraMask(cc.CameraFlag.USER1)\n\thurtBillboard:setScale(1.5)\n\thurtBillboard:setLookAt(target:getWorldPosition(), cc.vec3(0, 1, 0))\n\thurtBillboard:setLocalZOrder(10)\n\thurtBillboard:setLocalZBias(10)\n\thurtBillboard:setLocalRotation(cc.quatFromEuler(0, 0, 0))\n\thurtBillboard:setLocalPosition(cc.vec3(0, 0, 0))\n\thurtBillboard:setLocalScale(cc.vec3(1, 1, 1))\n\thurtBillboard:setOpacity(255)\n\thurtBillboard:setOpacityModifyRGB(true)\n\thurtBillboard:setBlendFunc(cc.BlendFunc.ALPHA_PREMULTIPLIED)\n\thurtBillboard:setBillboardType(cc.BILLBOARD_TYPE_ALL)\n\thurtBillboard:setCameraMask(cc.CameraFlag.USER1)\n\thurtBillboard:setTexture(\"hurt.png\")\n\thurtBillboard:setFlippedY(true)\n\thurtBillboard:setFlippedX(true)\n\thurtBillboard:setFlippedY(true)\n\thurtBillboard:setFlippedY(true)\n\thurtBillboard:setFlippedY(true)\n\thurtBillboard:setFlippedY(true)\n\thurtBillboard:setFlippedY(true)\n\thurtBillboard:setFlippedY(true)\n\thurtBillboard:", "CodeBleu_score": 40.82178415730417}]}
{"instance_id": "f478d7e70ea6", "generation_result": [{"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\n\tlocal sequence = cc.Sequence:create(cc.DelayTime:create(0.3), cc.CallFunc:create(function() self:removeFromParent() end))\n\tself:runAction(sequence)\n\n\tlocal smoke = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"iceTrail\"))\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"puff.png\")\n\tsmoke:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\tsmoke:setScale(2)\n\tsmoke:setPosition3D(cc.V3(0,0,50))\n\tsmoke:setGlobalZOrder(0)\n\tsmoke:setCameraMask(UserCameraFlagMask)\n\tself:addChild(smoke)\n\n\tlocal pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"pixi\"))\n\tlocal pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particle.png\")\n\tpixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n\tpixi:setScale(2)\n\tpixi:setPosition3D(cc.V3(0,0,50))\n\tpixi:setGlobalZOrder(0)\n\tpixi:setCameraMask(UserCameraFlagMask)\n\tself:addChild(pixi)\n\tpixi:setRotation3D({x=90, y=0, z=0})\n\n\tself.part1 = smoke\n\tself.part2 = pixi\n\n\tself.sp:setTexture(\"FX/FX.png\")\n\tself.sp:runAction(cc.FadeOut:create(0.3))\n\tself.sp:setScale(1.5)", "CodeBleu_score": 56.22097314499832}, {"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\n\tlocal delay = cc.DelayTime:create(0.1)\n\tlocal remove = cc.RemoveSelf:create()\n\tlocal sequence = cc.Sequence:create(delay, remove)\n\tself:runAction(sequence)\n\n\tlocal smoke = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"iceTrail\"))\n\tlocal magicf = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"puff.png\")\n\tsmoke:setTextureWithRect(magicf:getTexture(), magicf:getRect())\n\tsmoke:setScale(2)\n\tself:addChild(smoke)\n\tsmoke:setRotation3D({x=90, y=0, z=0})\n\tsmoke:setGlobalZOrder(0)\n\tsmoke:setPositionZ(50)\n\n\tlocal pixi = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\"pixi\"))\n\tlocal pixif = cc.SpriteFrameCache:getInstance():getSpriteFrame(\"particle.png\")\n\tpixi:setTextureWithRect(pixif:getTexture(), pixif:getRect())\n\tpixi:setScale(2)\n\tself:addChild(pixi)\n\tpixi:setRotation3D({x=90, y=0, z=0})\n\tpixi:setGlobalZOrder(0)\n\tpixi:setPositionZ(50)\n\n\tself.part1 = smoke\n\tself.part2 = pixi\n\tself:setCameraMask(UserCameraFlagMask)", "CodeBleu_score": 56.58494935806342}, {"code": "function MageNormalAttack:onTimeOut()\n\tself.part1:stopSystem()\n\tself.part2:stopSystem()\n\tlocal seq = cc.Sequence:create(cc.DelayTime:create(0.2), cc.CallFunc:create(function()\n\t\tlocal new = cc.ParticleSystemQuad:create(ParticleManager:getInstance():getPlistData(\\\"fireTrail\\\"))\n\t\tnew:setTextureWithRect(cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"puff.png\\\"):getTexture(), cc.rect(0, 0, 100, 100))\n\t\tnew:setScale(2)\n\t\tself:addChild(new)\n\t\tnew:setRotation3D({x=90, y=0, z=0})\n\t\tnew:setGlobalZOrder(0)\n\t\tnew:setPositionZ(50)\n\t\tnew:setBlendFunc(gl.ONE, gl.ONE)\n\t\tnew:setDuration(0.5)\n\t\tnew:setEmissionRate(100)\n\t\tnew:setStartSize(20)\n\t\tnew:setEndSize(20)\n\t\tnew:setStartSizeVar(10)\n\t\tnew:setEndSizeVar(10)\n\t\tnew:setAngle(0)\n\t\tnew:setAngleVar(360)\n\t\tnew:setGravity({x=0, y=0, z=0})\n\t\tnew:setSpeed(0)\n\t\tnew:setSpeedVar(0)\n\t\tnew:setRadialAccel(0)\n\t\tnew:setRadialAccelVar(0)\n\t\tnew:setTangentialAccel(0)\n\t\tnew:setTangentialAccelVar(0)\n\t\tnew:setStartColor({r=255, g=255, b=255, a=255})\n\t\tnew:setStartColorVar({r=0, g=0, b=0, a=0})\n\t\tnew:setEndColor({r=255, g=255, b=255, a=255})\n\t\tnew:setEndColorVar({r=0, g=0, b=0, a=0})\n\t\tnew:setStartSpin(0)\n\t\tnew:setStartSpinVar(0)\n\t\t", "CodeBleu_score": 44.53750084203114}]}
{"instance_id": "d735c4ea6358", "generation_result": [{"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero._name == \\\"Knight\\\" then\n\t\tself.KnightPng:runAction(cc.TintTo:create(0.5,grey))\n\t\tself.KnightFrame:runAction(cc.TintTo:create(0.5,grey))\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\telseif hero._name == \\\"Archer\\\" then\n\t\tself.ArcherPng:runAction(cc.TintTo:create(0.5,grey))\n\t\tself.ArcherFrame:runAction(cc.TintTo:create(0.5,grey))\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\telseif hero._name == \\\"Mage\\\" then\n\t\tself.MagePng:runAction(cc.TintTo:create(0.5,grey))\n\t\tself.MageFrame:runAction(cc.TintTo:create(0.5,grey))\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\tend", "CodeBleu_score": 27.059140215456306}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero._name == \\\"Knight\\\" then\n\t\tself.KnightPng:setSpriteFrame(cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"knight-dead.png\\\"))\n\t\tself.KnightPng:runAction(cc.Sequence:create(cc.TintTo:create(0.5,180,180,180),cc.TintTo:create(0.5,255,255,255)))\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryClone:setVisible(false)\n\t\tself.KnightAngry:setVisible(false)\n\telseif hero._name == \\\"Mage\\\" then\n\t\tself.MagePng:setSpriteFrame(cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"mage-dead.png\\\"))\n\t\tself.MagePng:runAction(cc.Sequence:create(cc.TintTo:create(0.5,180,180,180),cc.TintTo:create(0.5,255,255,255)))\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryClone:setVisible(false)\n\t\tself.MageAngry:setVisible(false)\n\telseif hero._name == \\\"Archer\\\" then\n\t\tself.ArcherPng:setSpriteFrame(cc.SpriteFrameCache:getInstance():getSpriteFrame(\\\"archer-dead.png\\\"))\n\t\tself.ArcherPng:runAction(cc.Sequence:create(cc.TintTo:create(0.5,180,180,180),cc.TintTo:create(0.5,255,255,255)))\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryClone:setVisible(false)\n\t\tself.ArcherAngry:setVisible(false)\n\tend", "CodeBleu_score": 20.012924520187568}, {"code": "function BattlefieldUI:heroDead(hero)\n\t\tif hero._name == \\\"Knight\\\" then\n\t\tself.KnightPng:runAction(cc.TintTo:create(0.5,254,225,26))\n\t\tself.KnightPng:setShaderProgram(greyShader)\n\t\tself.KnightAngryFullSignal:setVisible(false)\n\t\tself.KnightAngryFullSignal:stopAllActions()\n\t\tself.KnightAngryFullSignal:setOpacity(0)\n\t\tself.KnightAngry:setVisible(false)\n\t\tself.KnightAngry:stopAllActions()\n\t\tself.KnightAngry:setOpacity(0)\n\telseif hero._name == \\\"Mage\\\" then\n\t\tself.MagePng:runAction(cc.TintTo:create(0.5,254,26,69))\n\t\tself.MagePng:setShaderProgram(greyShader)\n\t\tself.MageAngryFullSignal:setVisible(false)\n\t\tself.MageAngryFullSignal:stopAllActions()\n\t\tself.MageAngryFullSignal:setOpacity(0)\n\t\tself.MageAngry:setVisible(false)\n\t\tself.MageAngry:stopAllActions()\n\t\tself.MageAngry:setOpacity(0)\n\telseif hero._name == \\\"Archer\\\" then\n\t\tself.ArcherPng:runAction(cc.TintTo:create(0.5,196,255,255))\n\t\tself.ArcherPng:setShaderProgram(greyShader)\n\t\tself.ArcherAngryFullSignal:setVisible(false)\n\t\tself.ArcherAngryFullSignal:stopAllActions()\n\t\tself.ArcherAngryFullSignal:setOpacity(0)\n\t\tself.ArcherAngry:setVisible(false)\n\t\tself.ArcherAngry:stopAllActions()\n\t\tself.ArcherAngry:setOpacity(0)\n\tend", "CodeBleu_score": 19.745582981400485}]}
{"instance_id": "009f167d3ab2", "generation_result": [{"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal newPosition = cc.p(specialCamera.position.x, specialCamera.position.y)\n\t\tlocal currentPosition = cc.p(currentLayer.camera:getPositionX(), currentLayer.camera:getPositionY())\n\t\tlocal diff = cc.pSub(newPosition, currentPosition)\n\t\tlocal length = cc.pLength(diff)\n\t\tlocal speed = 200\n\t\tif length > speed * dt then\n\t\t\tdiff = cc.pMul(diff, speed * dt / length)\n\t\tend\n\t\tcurrentLayer.camera:setPosition(cc.pAdd(currentPosition, diff))\n\t\tlocal lookAt = cc.p(newPosition.x, newPosition.y)\n\t\tlocal lookAtOffset = cc.p(0, 0)\n\t\tcurrentLayer.camera:lookAt(lookAt, lookAtOffset)\n\telse\n\t\tlocal heroes = {}\n\t\tfor _, hero in pairs(currentLayer.heroes) do\n\t\t\ttable.insert(heroes, hero)\n\t\tend\n\t\tif #heroes > 0 then\n\t\t\tlocal focus = cc.p(0, 0)\n\t\t\tfor _, hero in pairs(heroes) do\n\t\t\t\tfocus = cc.pAdd(focus, hero.position)\n\t\t\tend\n\t\t\tfocus = cc.pMul(focus, 1 / #heroes)\n\t\t\tlocal newPosition = cc.p(focus.x, focus.y)\n\t\t\tlocal currentPosition = cc.p(currentLayer.camera:getPositionX(), currentLayer.camera:getPositionY())\n\t\t\tlocal diff = cc.pSub(newPosition, currentPosition)\n\t\t\tlocal length = cc.pLength(diff)\n\t\t\tlocal speed = 200\n\t\t\tif length > speed * dt then\n\t\t\t\tdiff = cc.pMul(diff, speed * dt / length)\n\t\t\tend\n\t\t\tcurrentLayer.camera:setPosition(cc.pAdd(currentPosition, diff))\n\t\t\tlocal lookAt = cc.p(focus.x, focus.y)\n\t\t\tlocal lookAtOffset = cc.p(0, 0)\n\t\t\tcurrentLayer.camera:lookAt(lookAt, lookAtOffset)\n\t\tend\n\tend", "CodeBleu_score": 37.09006244217474}, {"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal newPosition = specialCamera.position\n\t\tlocal currentPosition = uiLayer:getCamera():getPosition()\n\t\tlocal newOrientation = specialCamera.orientation\n\t\tlocal currentOrientation = uiLayer:getCamera():getOrientation()\n\t\tlocal newFocus = specialCamera.focus\n\t\tlocal currentFocus = uiLayer:getCamera():getFocus()\n\t\tlocal newZoom = specialCamera.zoom\n\t\tlocal currentZoom = uiLayer:getCamera():getZoom()\n\t\tlocal newZoomRate = specialCamera.zoomRate\n\t\tlocal currentZoomRate = uiLayer:getCamera():getZoomRate()\n\t\tlocal newZoomMin = specialCamera.zoomMin\n\t\tlocal currentZoomMin = uiLayer:getCamera():getZoomMin()\n\t\tlocal newZoomMax = specialCamera.zoomMax\n\t\tlocal currentZoomMax = uiLayer:getCamera():getZoomMax()\n\t\tlocal newZoomMinRate = specialCamera.zoomMinRate\n\t\tlocal currentZoomMinRate = uiLayer:getCamera():getZoomMinRate()\n\t\tlocal newZoomMaxRate = specialCamera.zoomMaxRate\n\t\tlocal currentZoomMaxRate = uiLayer:getCamera():getZoomMaxRate()\n\t\tlocal newZoomOffset = specialCamera.zoomOffset\n\t\tlocal currentZoomOffset = uiLayer:getCamera():getZoomOffset()\n\t\tlocal newZoomOffsetRate = specialCamera.zoomOffsetRate\n\t\tlocal currentZoomOffsetRate = uiLayer:getCamera():getZoomOffsetRate()\n\t\tlocal newZoomOffsetMin = specialCamera.zoomOffsetMin\n\t\tlocal currentZoomOffsetMin = uiLayer:getCamera():getZoomOffsetMin()\n\t\tlocal newZoomOffsetMax = specialCamera.zoomOffsetMax\n\t\tlocal currentZoomOffsetMax = uiLayer:getCamera():getZoomOffsetMax()\n\t\tlocal newZoomOffsetMinRate = specialCamera.zoomOffsetMinRate\n\t\tlocal currentZoomOffsetMinRate = uiLayer:getCamera():getZoomOffsetMinRate()\n\t\tlocal newZoomOffsetMaxRate = specialCamera.zoomOffsetMaxRate\n\t\tlocal currentZoomOffsetMaxRate = uiLayer:getCamera():getZoomOffsetMaxRate()\n\t\tlocal newZoomOffsetOffset = specialCamera.zoomOffsetOffset\n\t\tlocal currentZoomOffsetOffset = uiLayer:getCamera():getZoomOffsetOffset()\n\t\tlocal newZoomOffsetOffsetRate = specialCamera.zoomOffsetOffsetRate\n\t\t", "CodeBleu_score": 16.303995936456204}, {"code": "local function moveCamera(dt)\n\t\tif specialCamera.valid then\n\t\tlocal position = specialCamera.position\n\t\tlocal target = specialCamera.target\n\t\tlocal camera = uiLayer.camera\n\t\tlocal positionX = camera:getPositionX()\n\t\tlocal positionY = camera:getPositionY()\n\t\tlocal positionXTarget = target.x\n\t\tlocal positionYTarget = target.y\n\t\tlocal positionXOffset = positionXTarget - positionX\n\t\tlocal positionYOffset = positionYTarget - positionY\n\t\tlocal positionXOffsetMax = 50\n\t\tlocal positionYOffsetMax = 50\n\t\tlocal positionXOffsetMin = -50\n\t\tlocal positionYOffsetMin = -50\n\t\tlocal positionXOffsetMaxAbs = math.abs(positionXOffsetMax)\n\t\tlocal positionYOffsetMaxAbs = math.abs(positionYOffsetMax)\n\t\tlocal positionXOffsetMinAbs = math.abs(positionXOffsetMin)\n\t\tlocal positionYOffsetMinAbs = math.abs(positionYOffsetMin)\n\t\tlocal positionXOffsetAbs = math.abs(positionXOffset)\n\t\tlocal positionYOffsetAbs = math.abs(positionYOffset)\n\t\tlocal positionXOffsetAbsMax = positionXOffsetAbs > positionXOffsetMaxAbs and positionXOffsetMaxAbs or positionXOffsetAbs\n\t\tlocal positionYOffsetAbsMax = positionYOffsetAbs > positionYOffsetMaxAbs and positionYOffsetMaxAbs or positionYOffsetAbs\n\t\tlocal positionXOffsetAbsMin = positionXOffsetAbs < positionXOffsetMinAbs and positionXOffsetMinAbs or positionXOffsetAbs\n\t\tlocal positionYOffsetAbsMin = positionYOffsetAbs < positionYOffsetMinAbs and positionYOffsetMinAbs or positionYOffsetAbs\n\t\tlocal positionXOffsetAbsMax = positionXOffsetAbsMax < 0 and 0 or positionXOffsetAbsMax\n\t\tlocal positionYOffsetAbsMax = positionYOffsetAbsMax < 0 and 0 or positionYOffsetAbsMax\n\t\tlocal positionXOffsetAbsMin = positionXOffsetAbsMin < 0 and 0 or positionXOffsetAbsMin\n\t\tlocal positionYOffsetAbsMin = positionYOffsetAbsMin < 0 and 0 or positionYOffsetAbsMin\n\t\tlocal positionXOffset = positionXOffsetAbsMax < positionXOffsetAbsMin and positionXOffsetAbsMin or positionXOffsetAbsMax\n\t\tlocal positionYOffset = position", "CodeBleu_score": 30.017283454909215}]}
{"instance_id": "f7f5e7fe1dc2", "generation_result": [{"code": "local function updateParticlePos()\n\t\tfor _, hero in pairs(HeroManager) do\n\t\tif hero.effectNode ~= nil then\n\t\t\tlocal pos = cc.p(hero.body:getPosition())\n\t\t\thero.effectNode:setPosition(pos)\n\t\tend\n\tend", "CodeBleu_score": 34.660413681963995}, {"code": "local function updateParticlePos()\n\t\tfor key, hero in pairs(HeroManager) do\n\t\tif hero.effectNode ~= nil then\n\t\t\thero.effectNode:setPosition(hero:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 27.524273951592427}, {"code": "local function updateParticlePos()\n\t\tfor _, hero in pairs(HeroManager) do\n\t\tif hero.effectNode then\n\t\t\thero.effectNode:setPosition(hero:getPosition())\n\t\tend\n\tend", "CodeBleu_score": 24.217409429277513}]}
{"instance_id": "77829ef7341e", "generation_result": [{"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == 0 then\n\t\taudio.playSound(\"audio/choose_role/knight.mp3\")\n\telseif type == 1 then\n\t\taudio.playSound(\"audio/choose_role/archer.mp3\")\n\telseif type == 2 then\n\t\taudio.playSound(\"audio/choose_role/mage.mp3\")\n\tend", "CodeBleu_score": 49.57018325492266}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == 1 then --warrior\n\t\taudio.playSound(\"audio/warrior.mp3\",false)\n\telseif type == 2 then --archer\n\t\taudio.playSound(\"audio/archer.mp3\",false)\n\telseif type == 3 then --mage\n\t\taudio.playSound(\"audio/mage.mp3\",false)\n\tend", "CodeBleu_score": 51.026130301863034}, {"code": "function ChooseRoleScene:playAudioWhenRotate()\n\t\tlocal hero = self.layer:getChildByTag(sortorder[2])\n\tlocal type = hero:getRaceType()\n\tif type == 1 then\n\t\taudio.playSound(\"audio/chooseRole/knight.mp3\")\n\telseif type == 2 then\n\t\taudio.playSound(\"audio/chooseRole/archer.mp3\")\n\telseif type == 3 then\n\t\taudio.playSound(\"audio/chooseRole/mage.mp3\")\n\tend", "CodeBleu_score": 49.445006801710825}]}
{"instance_id": "2b35fdb15a13", "generation_result": [{"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create()\n\tknight:setPosition(cc.p(battleSiteX[1] + distanceWithHeroX, distanceWithHeroY))\n\tknight:setScale(0.5)\n\tknight:setZOrder(gloableZOrder)\n\tgloableZOrder = gloableZOrder + 1\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\tknight:setScale(0.5)\n\t", "CodeBleu_score": 24.003917160738368}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create()\n\tknight:setPosition(cc.p(battleSiteX[1], size.height / 2))\n\tself:addChild(knight)\n\tknight:setZOrder(gloableZOrder)\n\tknight:setScale(0.5)\n\tknight:idle()\n\tknight:setZOrder(gloableZOrder)\n\tgloableZOrder = gloableZOrder + 1\n\tHeroManager:push(knight)\n\n\tlocal mage = Mage.create()\n\tmage:setPosition(cc.p(battleSiteX[1], size.height / 2))\n\tself:addChild(mage)\n\tmage:setZOrder(gloableZOrder)\n\tmage:setScale(0.5)\n\tmage:idle()\n\tmage:setZOrder(gloableZOrder)\n\tgloableZOrder = gloableZOrder + 1\n\tHeroManager:push(mage)\n\n\tlocal archer = Archer.create()\n\tarcher:setPosition(cc.p(battleSiteX[1], size.height / 2))\n\tself:addChild(archer)\n\tarcher:setZOrder(gloableZOrder)\n\tarcher:setScale(0.5)\n\tarcher:idle()\n\tarcher:setZOrder(gloableZOrder)\n\tgloableZOrder = gloableZOrder + 1\n\tHeroManager:push(archer)", "CodeBleu_score": 52.63975137524095}, {"code": "function GameMaster:AddHeros()\n\t\tlocal knight = Knight.create()\n\tknight:setPosition(cc.p(size.width / 2, 200))\n\tknight:setZOrder(gloableZOrder)\n\tgloableZOrder = gloableZOrder + 1\n\tself:addChild(knight)\n\tknight:idle()\n\tknight:setScale(0.5)\n\tHeroManager:push(knight)\n\n\tlocal mage = Mage.create()\n\tmage:setPosition(cc.p(size.width / 2, 200))\n\tmage:setZOrder(gloableZOrder)\n\tgloableZOrder = gloableZOrder + 1\n\tself:addChild(mage)\n\tmage:idle()\n\tmage:setScale(0.5)\n\tHeroManager:push(mage)\n\n\tlocal archer = Archer.create()\n\tarcher:setPosition(cc.p(size.width / 2, 200))\n\tarcher:setZOrder(gloableZOrder)\n\tgloableZOrder = gloableZOrder + 1\n\tself:addChild(archer)\n\tarcher:idle()\n\tarcher:setScale(0.5)\n\tHeroManager:push(archer)", "CodeBleu_score": 49.71214284204988}]}
{"instance_id": "cdfbc82ff3cd", "generation_result": [{"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n\tcurrentLayer:addChild(boss)\n\tboss:setCameraMask(2)\n\tboss:reset()\n\tboss._goRight = false\n\tboss:setPosition(battleSiteX[1], 100)\n\tboss:setFacing(180)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tList.pushlast(MonsterManager, boss)", "CodeBleu_score": 35.54183079435689}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n\tcurrentLayer:addChild(boss)\n\tboss:setCameraMask(cc.CameraFlag.USER1)\n\tboss:reset()\n\tlocal appearPos = getFocusPointOfHeros()\n\tappearPos.x = appearPos.x + frontDistanceWithHeroX*1.8\n\tappearPos.y = appearPos.y + distanceWithHeroY\n\tboss:setPosition(appearPos)\n\tboss._myPos = appearPos\n\tboss:setVisible(true)\n\tboss._goRight = true\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tList.pushlast(MonsterManager, boss)", "CodeBleu_score": 46.086238242813295}, {"code": "function GameMaster:showBoss()\n\t\tlocal boss = Rat:create()\n\tcurrentLayer:addChild(boss)\n\tboss:setCameraMask(cc.CameraFlag.USER1)\n\tboss:setPosition(battleSiteX[3], 100)\n\tboss:setFacing(180)\n\tboss:setVisible(false)\n\tboss:setAIEnabled(false)\n\tboss:bounceOut()\n\tboss:setAIEnabled(true)\n\tList.pushlast(MonsterManager, boss)", "CodeBleu_score": 32.551258264521444}]}
{"instance_id": "fa7b402853bb", "generation_result": [{"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file) \n\tlocal animate = cc.Animate3D:create(animation, begin, finish) \n\tanimate:setSpeed(speed) \n\treturn animate ", "CodeBleu_score": 53.146867540374366}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation = cc.Animation3D:create(file)\n\tlocal animate = cc.Animate3D:create(animation, begin, finish)\n\tanimate:setSpeed(speed)\n\treturn animate", "CodeBleu_score": 53.113735341379844}, {"code": "function createAnimation(file, begin, finish, speed)\n\t\tlocal animation3d = cc.Animation3D:create(file)\n\tlocal animate3d = cc.Animate3D:create(animation3d, begin, finish)\n\tanimate3d:setSpeed(speed)\n\treturn animate3d", "CodeBleu_score": 67.31533910400384}]}
{"instance_id": "0725f2413b6b", "generation_result": [{"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do\n\t\ttable[k] = nil\n\tend", "CodeBleu_score": 37.457832536187205}, {"code": "function removeAll(table)\n\t\tfor k, v in pairs(table) do\n\t\ttable[k] = nil\n\tend", "CodeBleu_score": 37.567300370186686}, {"code": "function removeAll(table)\n\t\tfor k,v in pairs(table) do\n\t\ttable[k] = nil\n\tend", "CodeBleu_score": 37.457832536187205}]}
{"instance_id": "526d10bb37bb", "generation_result": [{"code": "function delayExecute(target, func, delay)\n\t\tlocal delay = cc.DelayTime:create(delay)\n\tlocal func = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delay, func)\n\ttarget:runAction(sequence)", "CodeBleu_score": 57.33536164299168}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delay = cc.DelayTime:create(delay)\n\tlocal callfunc = cc.CallFunc:create(func)\n\tlocal sequence = cc.Sequence:create(delay, callfunc)\n\ttarget:runAction(sequence)", "CodeBleu_score": 56.666544395288085}, {"code": "function delayExecute(target, func, delay)\n\t\tlocal delay = cc.DelayTime:create(delay)\n\tlocal seq = cc.Sequence:create(delay, cc.CallFunc:create(func))\n\ttarget:runAction(seq)", "CodeBleu_score": 62.91324847340254}]}
{"instance_id": "3b277bd3d0d0", "generation_result": [{"code": "function LoadingScene:addLoadingText(layer)\n\t\tlocal font = \"fonts/Marker Felt.ttf\"\n\tlocal fontSize = 16\n\tlocal fontColor = cc.c3b(255, 255, 255)\n\tlocal fontOpacity = 255\n\tlocal fontScale = 1.5\n\tlocal fontPosition = cc.p(self.size.width/2, self.size.height*0.3)\n\tlocal fontAnchor = cc.p(0.5, 0.5)\n\tlocal fontRotation = 0\n\tlocal fontAlignment = cc.TEXT_ALIGNMENT_CENTER\n\tlocal fontVerticalAlignment = cc.VERTICAL_TEXT_ALIGNMENT_CENTER\n\tlocal fontLineBreak = cc.TEXT_ALIGNMENT_CENTER\n\tlocal fontLineHeight = 1.5\n\tlocal fontGlow = false\n\tlocal fontShadow = false\n\tlocal fontOutline = false\n\tlocal fontOutlineSize = 0\n\tlocal fontOutlineColor = cc.c3b(0, 0, 0)\n\tlocal fontOutlineOpacity = 255\n\tlocal fontOutlinePosition = cc.p(0, 0)\n\tlocal fontOutlineRotation = 0\n\tlocal fontOutlineScale = 1\n\tlocal fontOutlineAnchor = cc.p(0.5, 0.5)\n\tlocal fontOutlineAlignment = cc.TEXT_ALIGNMENT_CENTER\n\tlocal fontOutlineVerticalAlignment = cc.VERTICAL_TEXT_ALIGNMENT_CENTER\n\tlocal fontOutlineLineBreak = cc.TEXT_ALIGNMENT_CENTER\n\tlocal fontOutlineLineHeight = 1.5\n\n\tself._loading = {}\n\tfor i = 1, table.getn(self._loading) do\n\t\tlocal loadingText = cc.Label:createWithTTF(self._loading[i], font, fontSize, cc.size(0, 0), fontAlignment, fontVerticalAlignment, fontLineBreak, fontLineHeight)\n\t\tloadingText:setGlow(fontGlow)\n\t\tloadingText:setShadow(fontShadow)\n\t\tloadingText:setOutline(fontOutline, fontOutlineSize, fontOutlineColor, fontOutlineOpacity, fontOutlinePosition, fontOutlineRotation, fontOutlineScale, fontOutlineAnchor, fontOutlineAlignment, fontOutlineVerticalAlignment, fontOutlineLineBreak, fontOutlineLineHeight)\n\t\tloadingText:", "CodeBleu_score": 33.44020926733609}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tlocal font = \"fonts/arial.ttf\"\n\tlocal fontSize = 20\n\tlocal fontColor = cc.c3b(255,255,255)\n\tlocal labelOriginX = self.size.width/2\n\tlocal labelOriginY = self.size.height*0.6\n\tlocal labelOffsetY = 20\n\tlocal labelOffsetX = 50\n\tlocal labelIndex = 1\n\tfor i = 1,table.getn(self._loadingText) do\n\t\tlocal label = cc.Label:createWithTTF(self._loadingText[i], font, fontSize)\n\t\tlabel:setColor(fontColor)\n\t\tlabel:setAnchorPoint(0.5,0.5)\n\t\tlabel:setPosition(labelOriginX,labelOriginY-labelOffsetY*labelIndex)\n\t\tlayer:addChild(label)\n\t\tself._loading[labelIndex] = label\n\t\tlabelIndex = labelIndex + 1\n\tend", "CodeBleu_score": 33.737580264207644}, {"code": "function LoadingScene:addLoadingText(layer)\n\t\tself._loading = {}\n\tlocal font = \"fonts/Marker Felt.ttf\"\n\tlocal loadingText = {\"Loading\",\"ResourcesodeBleu_score": 10.924794048235217}]}
{"instance_id": "68250ae97644", "generation_result": [{"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene:new() \n\tscene:init() \n\treturn scene ", "CodeBleu_score": 41.23215594537456}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene.new()\n\tscene:addChild(scene:createLayer())\n\treturn scene", "CodeBleu_score": 55.37164418584136}, {"code": "function MainMenuScene.create()\n\t\tlocal scene = MainMenuScene:new()\n\tscene:init()\n\treturn scene", "CodeBleu_score": 41.03769326615932}]}
{"instance_id": "81470efbb6ff", "generation_result": [{"code": "local function collision(object)\n\n\t\tlocal heroes = HeroManager:getList()\n\tlocal monsters = MonsterManager:getList()\n \n\tfor i,hero in ipairs(heroes) do\n\t\tif hero:isAlive() then\n\t\t\tsolveCollision(object, hero)\n\t\tend\n\tend\n \n\tfor i,monster in ipairs(monsters) do\n\t\tif monster:isAlive() then\n\t\t\tsolveCollision(object, monster)\n\t\tend\n\tend", "CodeBleu_score": 29.424476936239973}, {"code": "local function collision(object)\n\n\t\tfor i, hero in HeroManager:iterator() do\n\t\tif object ~= hero and hero:isAlive() then\n\t\t\tsolveCollision(object, hero)\n\t\tend\n\tend\n \n\tfor i, monster in MonsterManager:iterator() do\n\t\tif object ~= monster and monster:isAlive() then\n\t\t\tsolveCollision(object, monster)\n\t\tend\n\tend", "CodeBleu_score": 27.802814056032265}, {"code": "local function collision(object)\n\n\t\tlocal objectPos = object:getPosition()\n\tlocal objectRadius = object._radius\n\tlocal objectMass = object._mass\n\tlocal objectName = object._name\n\tlocal objectType = object._type\n\tlocal objectSpeed = object._speed\n\tlocal objectAttack = object._attack\n\tlocal objectDefense = object._defense\n\tlocal objectHp = object._hp\n\tlocal objectHpMax = object._hpMax\n\tlocal objectAttackSpeed = object._attackSpeed\n\tlocal objectAttackRange = object._attackRange\n\tlocal objectAttackDamage = object._attackDamage\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object._attackDamageType\n\tlocal objectAttackDamageType = object", "CodeBleu_score": 16.533321564119696}]}
{"instance_id": "f8915bebdc0e", "generation_result": [{"code": "function collisionDetect(dt)\n\t\tfor val = HeroManager.last, HeroManager.first, -1 do\n\t\tlocal sprite = HeroManager[val]\n\t\tif sprite._isalive == true then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\tend\n\tend\n\n\tfor val = MonsterManager.last, MonsterManager.first, -1 do\n\t\tlocal sprite = MonsterManager[val]\n\t\tif sprite._isalive == true then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\tend\n\tend", "CodeBleu_score": 62.77240273161988}, {"code": "function collisionDetect(dt)\n\t\tfor val = HeroManager.last, HeroManager.first, -1 do \n\t\tlocal sprite = HeroManager[val] \n\t\tif sprite._isalive == true then \n\t\t\tcollision(sprite) \n\t\t\tisOutOfBound(sprite) \n\t\tend \n\tend \n\n\tfor val = MonsterManager.last, MonsterManager.first, -1 do \n\t\tlocal sprite = MonsterManager[val] \n\t\tif sprite._isalive == true then \n\t\t\tcollision(sprite) \n\t\t\tisOutOfBound(sprite) \n\t\tend \n\tend ", "CodeBleu_score": 62.90840053493726}, {"code": "function collisionDetect(dt)\n\t\tfor val = HeroManager.last, HeroManager.first, -1 do\n\t\tlocal sprite = HeroManager[val]\n\t\tif sprite._isalive then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\telse\n\t\t\tHeroManager:remove(sprite)\n\t\tend\n\tend\n\n\tfor val = MonsterManager.last, MonsterManager.first, -1 do\n\t\tlocal sprite = MonsterManager[val]\n\t\tif sprite._isalive then\n\t\t\tcollision(sprite)\n\t\t\tisOutOfBound(sprite)\n\t\telse\n\t\t\tMonsterManager:remove(sprite)\n\t\tend\n\tend", "CodeBleu_score": 64.23662744347027}]}
{"instance_id": "fc081bb122f5", "generation_result": [{"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}, {"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}, {"code": "function Actor:specialAttack()\n\t\tBasicCollider.create(self._myPos, self._curFacing, self._specialAttack)\n\tself:specialAttackSoundEffects()", "CodeBleu_score": 82.72368000825026}]}
{"instance_id": "bfc98809aacb", "generation_result": [{"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angryFace ~= trueFalse then\n\t\tself._angryFace = trueFalse\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(\"model/slime/slime_angry.png\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\"model/slime/slime.png\")\n\t\tend\n\tend", "CodeBleu_score": 80.22628189680209}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angryFace ~= trueFalse then\n\t\tself._angryFace = trueFalse\n\t\tif trueFalse then\n\t\t\tself._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\"model/slime/baozi.jpg\")\n\t\tend\n\tend", "CodeBleu_score": 83.81719628567464}, {"code": "function Slime:angryFace(trueFalse)\n\t\tif self._angryFace ~= trueFalse then\n\t\tself._angryFace = trueFalse\n\t\tif self._angryFace then\n\t\t\tself._sprite3d:setTexture(\"model/slime/slime_angry.png\")\n\t\telse\n\t\t\tself._sprite3d:setTexture(\"model/slime/slime.png\")\n\t\tend\n\tend", "CodeBleu_score": 71.27553666249212}]}
{"instance_id": "546a0b8fb77b", "generation_result": [{"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tcharString = char.toString()\nval metrics = getCharMetrics(charString)\nval bitmap = Bitmap.createBitmap(metrics.width, metrics.height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(charString, 0f, metrics.height, paint)\nval pixels = IntArray(metrics.width * metrics.height)\nbitmap.getPixels(pixels, 0, metrics.width, 0, 0, metrics.width, metrics.height)\nbitmap.recycle()\nreturn Pixmap(metrics.width, metrics.height, Pixmap.Format.RGBA8888, pixels)\n}", "CodeBleu_score": 33.26723850877449}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\ttext = char.toString()\nval metrics = getMetrics(text)\nval width = ceil(metrics.width).toInt()\nval height = ceil(metrics.height).toInt()\n\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(text, 0f, metrics.height, paint)\n\nval pixmap = Pixmap(bitmap)\nbitmap.recycle()\n\nreturn pixmap\n}", "CodeBleu_score": 31.742521264873712}, {"code": "override fun getCharPixmap(char: Char): Pixmap{\n\tmetrics = getCharMetrics(char)\nval width = ceil(metrics.width).toInt()\nval height = ceil(metrics.height).toInt()\nval bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888)\nval canvas = Canvas(bitmap)\ncanvas.drawText(char.toString(), 0f, metrics.height, paint)\nval pixels = IntArray(width * height)\nbitmap.getPixels(pixels, 0, width, 0, 0, width, height)\nval pixmap = Pixmap(width, height, Pixmap.Format.RGBA8888)\npixmap.drawPixmap(bitmap, 0, 0, 0, 0, width, height)\nbitmap.recycle()\nreturn pixmap\n}", "CodeBleu_score": 45.12277334058539}]}
{"instance_id": "9c1ce2567ce1", "generation_result": [{"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t//        val uri = Uri.parse(suggestedLocation)\n//        val filename = uri.lastPathSegment?: \"save.txt\"\n//        val contentUri = uri.buildUpon().appendPath(filename).build()\n//        val requestCode = this.requestCode++\n//        val request = Request({ uri ->\n//            val outputStream: OutputStream? = contentResolver.openOutputStream(uri)\n//            if (outputStream!= null) {\n//                outputStream.write(data.toByteArray())\n//                outputStream.close()\n//                onSaved(uri.toString())\n//            } else {\n//                onError(IOException(\"Failed to write to $uri\"))\n//            }\n//        }, onError)\n//        requests[requestCode] = request\n//        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT)\n//        intent.addCategory(Intent.CATEGORY_OPENABLE)\n//        intent.type = \"text/plain\"\n//        intent.putExtra(Intent.EXTRA_TITLE, filename)\n//        intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, contentUri)\n//        activity.startActivityForResult(intent, requestCode)\n    }", "CodeBleu_score": 13.991633962012584}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n//        val uri = Uri.parse(suggestedLocation)\n//        val filename = uri.lastPathSegment\n//        if (filename == null) {\n//            onError(PlatformSaverLoader.Cancelled())\n//            return\n//        }\n//        val file = File(uri.path!!)\n//        if (file.exists()) {\n//            if (!file.delete()) {\n//                onError(PlatformSaverLoader.Cancelled())\n//                return\n//            }\n//        }\n//        val outputStream = FileOutputStream(file)\n//        try {\n//            outputStream.write(data.toByteArray())\n//            outputStream.flush()\n//            onSaved(file.absolutePath)\n//        } catch (ex: Exception) {\n//            onError(ex)\n//        } finally {\n//            outputStream.close()\n//        }\n//        return\n\n//        val intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n//            addCategory(Intent.CATEGORY_OPENABLE)\n//            type = \"text/plain\"\n//            putExtra(Intent.EXTRA_TITLE, filename)\n//        }\n//        if (intent.resolveActivity(activity.packageManager)!= null) {\n//            activity.startActivityForResult(intent, requestCode)\n//            requests[requestCode] = Request({ uri ->\n//                val outputStream = contentResolver.openOutputStream(uri)\n//                try {\n//                    outputStream!!.write(data.toByteArray())\n//                    outputStream.flush()\n//                    onSaved(uri.toString())\n//                } catch (ex: Exception) {\n//                    onError(ex)\n//                } finally {\n//                    outputStream?.close()\n//                }\n//            }, onError)\n//            requestCode++\n//        } else {\n//            onError(PlatformSaverLoader.Cancelled())\n//        }\n    }", "CodeBleu_score": 13.991633962012584}, {"code": " override fun saveGame(\n        data: String,\n        suggestedLocation: String,\n        onSaved: (location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n//        val filename = suggestedLocation.substringAfterLast(\"/\")\n//        val uri = Uri.parse(suggestedLocation)\n//        val request = Request({ uri ->\n//            try {\n//                val file = contentResolver.openOutputStream(uri)\n//                file?.write(data.toByteArray())\n//                file?.close()\n//                onSaved(uri.toString())\n//            } catch (ex: Exception) {\n//                onError(ex)\n//            }\n//        }, { onError(PlatformSaverLoader.Cancelled()) })\n//        requests[requestCode] = request\n//        requestCode++\n//        activity.startActivityForResult(\n//            Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\n//                addCategory(Intent.CATEGORY_OPENABLE)\n//                type = \"text/plain\"\n//                putExtra(Intent.EXTRA_TITLE, filename)\n//                putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n//            }, requestCode\n//        )\n    }", "CodeBleu_score": 13.991633962012584}]}
{"instance_id": "ea556fe12030", "generation_result": [{"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\"\" URI as file location.\n        val onFileChosen = { uri: Uri ->\n            var stream: InputStream? = null\n            try {\n                stream = contentResolver.openInputStream(uri, \"rwt\")\n                val data = stream!!.reader().use { it.readText() }\n                onLoaded(data, uri.toString())\n            } catch (ex: Exception) {\n                onError(ex)\n            } finally {\n                stream?.close()\n            }\n        }\n\n        requests[requestCode] = Request(onFileChosen, onError)\n        openLoadFileChooser(onFileChosen, requestCode)\n        requestCode += 1\n    }", "CodeBleu_score": 85.39667394373518}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\" URI as file location.\nval suggestedUri = Uri.parse(suggestedLocation)\nval fileName = getFilename(suggestedUri, suggestedLocation)\n\nval onFileChosen = { uri: Uri ->\nvar stream: InputStream? = null\ntry {\nstream = contentResolver.openInputStream(uri)\nval data = stream!!.reader().use { it.readText() }\nonLoaded(data, uri.toString())\n} catch (ex: Exception) {\nonError(ex)\n} finally {\nstream?.close()\n}\n}\n\nrequests[requestCode] = Request(onFileChosen, onError)\nopenLoadFileChooser(fileName, suggestedUri, requestCode)\nrequestCode += 1\n}", "CodeBleu_score": 84.62707343877311}, {"code": "override fun loadGame(\n        onLoaded: (data: String, location: String) -> Unit,\n        onError: (ex: Exception) -> Unit\n    ){\n\t\n// When we loaded, we returned a \"content://\"\" URI as file location.\nval suggestedUri = Uri.parse(suggestedLocation)\nval fileName = getFilename(suggestedUri, suggestedLocation)\n\nval onFileChosen = { uri: Uri ->\nvar stream: InputStream? = null\ntry {\nstream = contentResolver.openInputStream(uri)\nval data = stream!!.reader().use { it.readText() }\nonLoaded(data, uri.toString())\n} catch (ex: Exception) {\nonError(ex)\n} finally {\nstream?.close()\n}\n}\n\nrequests[requestCode] = Request(onFileChosen, onError)\nopenLoadFileChooser(fileName, suggestedUri, requestCode)\nrequestCode += 1\n}", "CodeBleu_score": 84.62707343877311}]}
{"instance_id": "813990d9bb4d", "generation_result": [{"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tl intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\naddCategory(Intent.CATEGORY_OPENABLE)\ntype = \"application/json\"\nputExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\") putExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n}\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 68.09943763936926}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tl intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\naddCategory(Intent.CATEGORY_OPENABLE)\ntype = \"application/json\"\nputExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\") {\nputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n}\n}\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 68.03183335429577}, {"code": "private fun openSaveFileChooser(fileName: String, uri: Uri, requestCode: Int){\n\tl intent = Intent(Intent.ACTION_CREATE_DOCUMENT).apply {\naddCategory(Intent.CATEGORY_OPENABLE)\ntype = \"application/json\"\nputExtra(Intent.EXTRA_TITLE, fileName)\nif (uri.scheme == \"content\") {\nputExtra(DocumentsContract.EXTRA_INITIAL_URI, uri)\n}\n}\nactivity.startActivityForResult(intent, requestCode)\n}", "CodeBleu_score": 68.03183335429577}]}
{"instance_id": "a423b39ba6fe", "generation_result": [{"code": "fun createNotificationChannelInfo(appContext: Context){\n\t", "CodeBleu_score": 1.0745600660296022}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tild.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n\t\tval channelInfo = NotificationChannel(\n\t\t\tNOTIFICATION_CHANNEL_ID_INFO,\n\t\t\t\"Unciv Info\",\n\t\t\tNotificationManager.IMPORTANCE_DEFAULT\n\t\t)\n\t\tchannelInfo.description = \"Unciv Info\"\n\t\tchannelInfo.enableLights(true)\n\t\tchannelInfo.lightColor = Color.GREEN\n\t\tchannelInfo.enableVibration(true)\n\t\tchannelInfo.vibrationPattern = longArrayOf(0, 1000, 500, 1000)\n\t\tval notificationManager = appContext.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager\n\t\tnotificationManager.createNotificationChannel(channelInfo)\n\t}\n}", "CodeBleu_score": 40.06055650134628}, {"code": "fun createNotificationChannelInfo(appContext: Context){\n\tannel = NotificationChannel(NOTIFICATION_CHANNEL_ID_INFO, \"Unciv info\", NotificationManager.IMPORTANCE_DEFAULT)\n\n// Sets the notification channel for the notification manager.\nval notificationManager = appContext.getSystemService(NotificationManager::class.java)\nnotificationManager.createNotificationChannel(channel)\n}", "CodeBleu_score": 18.40889578344323}]}
{"instance_id": "4f3e7f77a567", "generation_result": [{"code": "fun packImages(workingPath: String){\n\ttry {\n// Pack images for main assets folder\npackImages(workingPath, \"assets\")\n\n// Pack images for mods\nval modsFolder = File(workingPath, \"mods\")\nif (modsFolder.exists()) {\nval mods = modsFolder.listFiles()\nif (mods!= null) {\nfor (mod in mods) {\nif (mod.isDirectory) {\nval modName = mod.name\nif (!modName.startsWith(\".\")) {\npackImages(workingPath, \"mods/$modName\") } } } } } } catch (e: Exception) { e.printStackTrace() } }", "CodeBleu_score": 40.61301438658257}, {"code": "fun packImages(workingPath: String){\n\tval mainAssetsFolder = File(workingPath, \"assets\")\nval modsFolder = File(workingPath, \"mods\")\nval mods = modsFolder.listFiles()?.filter { it.isDirectory }?: emptyArray()\n\ntry {\npackImages(mainAssetsFolder)\n\nfor (mod in mods) {\nif (mod.name.startsWith(\".\")) continue\n\nval modFolder = File(mod, \"assets\")\npackImages(modFolder)\n}\n} catch (e: Exception) {\nprintln(e.toString())\n}\n}", "CodeBleu_score": 44.88725812592743}, {"code": "fun packImages(workingPath: String){\n\tval workingDir = File(workingPath)\nval mainAssetsPath = workingDir.resolve(\"assets\").path\nval modAssetsPath = workingDir.resolve(\"mods\").path\nval mods = File(modAssetsPath).listFiles()\n\n// Pack the main assets\ntry {\npackImages(mainAssetsPath)\n} catch (e: Exception) {\nprintln(\"Failed to pack main assets: ${e.message}\") } // Pack the mods try { for (mod in mods) { val modName = mod.name val modAssets = mod.resolve(\"assets\").path if (mod.exists() && mod.isDirectory) { println(\"Packing mod assets for $modName\") packImages(modAssets) } } } catch (e: Exception) { println(\"Failed to pack mod assets: ${e.message}\")\n}\n}", "CodeBleu_score": 43.366254906530045}]}
{"instance_id": "206dbb3c21eb", "generation_result": [{"code": "suspend fun reloadWorldscreen(){\n\t\n}", "CodeBleu_score": 3.54716950179408}, {"code": "suspend fun reloadWorldscreen(){\n\tval worldScreen = worldScreen?: return\nval gameInfo = worldScreen.gameInfo\n\n// If we're in a game, then we need to update the worldscreen.\n// If we're not in a game, then we're in the main menu, and we can just reload the worldscreen.\n\nval newWorldScreen = worldScreen.copy(gameInfo = gameInfo, autoPlay = worldScreen.autoPlay)\nworldScreen.dispose()\nworldScreen = newWorldScreen\n}", "CodeBleu_score": 44.41214377945797}, {"code": "suspend fun reloadWorldscreen(){\n\twithThreadPoolContext {\nworldScreen?.dispose()\nworldScreen = null\n}\n}", "CodeBleu_score": 6.854860840670474}]}
{"instance_id": "2d8fdcb5ad6f", "generation_result": [{"code": "fun goToMainMenu(): MainMenuScreen{\n\tval mainMenuScreen = MainMenuScreen()\nsetScreen(mainMenuScreen)\nreturn mainMenuScreen\n}", "CodeBleu_score": 45.585603103618475}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\treturn MainMenuScreen()\n}", "CodeBleu_score": 4.247428048210542}, {"code": "fun goToMainMenu(): MainMenuScreen{\n\tval worldScreen = resetToWorldScreen()\nworldScreen.goToMainMenu()\nreturn worldScreen\n}", "CodeBleu_score": 37.588275641681946}]}
{"instance_id": "df60142d384c", "generation_result": [{"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\t val windowWidth = settings.windowWidth\n val windowHeight = settings.windowHeight\n val windowedBounds = getWindowBounds()\n val windowedWidth = windowedBounds.width\n val windowedHeight = windowedBounds.height\n val windowedX = windowedBounds.x\n val windowedY = windowedBounds.y\n val isFillingDesktop = windowWidth == windowedWidth && windowHeight == windowedHeight\n if (isFillingDesktop) {\n val windowedWidth = windowWidth.toFloat()\n val windowedHeight = windowHeight.toFloat()\n val windowedX = windowX.toFloat()\n val windowedY = windowY.toFloat()\n val maxWindowWidth = windowedBounds.width.toFloat()\n val maxWindowHeight = windowedBounds.height.toFloat()\n val windowWidth = (windowedWidth / maxWindowWidth * windowWidth).roundToInt()\n val windowHeight = (windowedHeight / maxWindowHeight * windowHeight).roundToInt()\n val windowX = (windowedX / maxWindowWidth * windowWidth).roundToInt()\n val windowY = (windowedY / maxWindowHeight * windowHeight).roundToInt()\n val windowedBounds = Rectangle(windowX, windowY, windowWidth, windowHeight)\n setWindowBounds(windowedBounds)\n }\n return isFillingDesktop\n }", "CodeBleu_score": 35.40234244198037}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\tval bounds = getMaximumWindowBounds()\nval windowWidth = settings.windowWidth\nval windowHeight = settings.windowHeight\nval windowedWidth = windowWidth.coerceAtMost(bounds.width)\nval windowedHeight = windowHeight.coerceAtMost(bounds.height)\nval windowedX = bounds.x + (bounds.width - windowedWidth) / 2\nval windowedY = bounds.y + (bounds.height - windowedHeight) / 2\nval windowedBounds = bounds.copy(x = windowedX, y = windowedY, width = windowedWidth, height = windowedHeight)\nval windowedConfig = Lwjgl3ApplicationConfiguration().apply {\n// This is the only place where we can set the window bounds.\n// The window bounds are the same as the maximum bounds, but with the window size restricted to the maximum bounds.\n// This is necessary to prevent the window from being too large on some systems.\nwindowBounds = windowedBounds\n// This is the only place where we can set the window mode.\nwindowMode = Lwjgl3ApplicationConfiguration.WindowMode.WINDOWED\n}\nval windowedGraphics = Lwjgl3Graphics(windowedConfig)\nwindowedGraphics.apply {\n// This is the only place where we can set the window mode.\nwindowMode = Lwjgl3ApplicationConfiguration.WindowMode.WINDOWED\n// This is the only place where we can set the window bounds.\n// The window bounds are the same as the maximum bounds, but with the window size restricted to the maximum bounds.\n// This is necessary to prevent the window from being too large on some systems.\nwindowBounds = windowedBounds\n}\nGdx.graphics = windowedGraphics\nreturn windowedWidth == windowWidth && windowedHeight == windowHeight\n}", "CodeBleu_score": 38.007254889480215}, {"code": " protected fun setWindowedMode(settings: GameSettings): Boolean{\n\tval maxBounds = getMaximumWindowBounds(settings)\nval windowWidth = maxBounds.width.toFloat()\nval windowHeight = maxBounds.height.toFloat()\nval windowedWidth = windowWidth.roundToInt()\nval windowedHeight = windowHeight.roundToInt()\nGdx.graphics.setWindowedMode(windowedWidth, windowedHeight)\nval windowedDisplayMode = Gdx.graphics.displayMode\nval windowedBounds = getWindowBounds(windowedDisplayMode)\nval windowedX = windowedBounds.x\nval windowedY = windowedBounds.y\nval windowedWidth = windowedBounds.width\nval windowedHeight = windowedBounds.height\nval windowedMode = getWindowedMode(windowedDisplayMode, windowedBounds)\nGdx.graphics.setWindowedMode(windowedWidth, windowedHeight)\nGdx.graphics.setDisplayMode(windowedWidth, windowedHeight, windowedMode)\nGdx.graphics.setWindowPosition(windowedX, windowedY)\nreturn windowedWidth == windowWidth && windowedHeight == windowHeight\n}", "CodeBleu_score": 38.34556059198829}]}
{"instance_id": "a8b17234c4e5", "generation_result": [{"code": "private fun getLinuxDistro(): String{\n\teFile = FileHandle.classpath(\"os-release\")\nif (!osReleaseFile.exists()) return \"\"\n\nval osReleaseMap = osReleaseFile.readString().split(\"\\\\s*\\\n\\\\s*\".toRegex())\n   .map { it.split(\"=\", limit = 2) }\n   .associate { it[0] to it[1] }\n\nval osName = osReleaseMap[\"NAME\"]?: return \"\"\nval osVersion = osReleaseMap[\"VERSION\"]?: return \"\"\n\nreturn if (osVersion.isNotEmpty()) \"$osName $osVersion\" else osName\n}", "CodeBleu_score": 35.57025221612501}, {"code": "private fun getLinuxDistro(): String{\n\teFile = FileHandle.classpath(\"os-release\")\nif (!osReleaseFile.exists()) return \"\"\n\nval map = try {\nosReleaseFile.readString(Charset.defaultCharset()).lines()\n.map { it.split('=', limit = 2) }\n.associate { it[0] to it[1] }\n} catch (_: Throwable) { mapOf() }\n\nreturn map[\"PRETTY_NAME\"]?: \"${map[\"NAME\"]} ${map[\"VERSION\"]}\"\n}", "CodeBleu_score": 40.62935294019199}, {"code": "private fun getLinuxDistro(): String{\n\teFile = FileHandle.classpath(\"os-release\")\nif (!osReleaseFile.exists()) return \"\"\n\nval osRelease = osReleaseFile.readString()\n\nval osReleaseMap = osRelease.split(\"\\\n\").associate {\nval split = it.split(\"=\")\nsplit[0].trim() to split[1].trim()\n}\n\nval osName = osReleaseMap[\"NAME\"]?: return \"\"\n\nreturn if (osReleaseMap[\"PRETTY_NAME\"]!= null)\nosReleaseMap[\"PRETTY_NAME\"]!!\nelse\n\"$osName ${osReleaseMap[\"VERSION\"]}\"\n}", "CodeBleu_score": 35.169258989254594}]}
{"instance_id": "36a1d2e56540", "generation_result": [{"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}, {"code": "private fun flashWindow(){\n\t", "CodeBleu_score": 0.9483643708488229}, {"code": "private fun flashWindow(){\n\ttry {\nval hwnd = window?.windowHandle\nval user32 = User32.INSTANCE\nval winUser = WinUser.INSTANCE\n\nif (hwnd == null) {\nLog.warn(\"Unable to flash window: window handle is null\")\nreturn\n}\n\n// Attempt to flash the window using the Win32 API\nif (winUser.FlashWindowEx(hwnd, FLASHW_ALL, FLASHW_TIMERNOFG, FLASHW_TRAY, FLASHW_TIMERCOUNT) == 0) {\nLog.warn(\"Unable to flash window: FlashWindowEx() returned 0\")\nreturn\n}\n} catch (e: Throwable) {\nLog.error(\"Unable to flash window: $e\")\n}\n}", "CodeBleu_score": 48.245066738731964}]}
{"instance_id": "8e3c7096415a", "generation_result": [{"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\ttry {\n\t\t//backup the shared preferences file\n\t\tdata.writeEntityHeader(\"com.shatteredpixel.shatteredpixeldungeon.android.AndroidPreferences\");\n\t\tdata.writeEntityData(new File(getFilesDir(), \"preferences.xml\"), -1);\n\n\t\t//backup the rankings file\n\t\tdata.writeEntityHeader(\"com.shatteredpixel.shatteredpixeldungeon.Rankings\");\n\t\tdata.writeEntityData(new File(getFilesDir(), \"rankings.xml\"), -1);\n\n\t\t//backup the badges file\n\t\tdata.writeEntityHeader(\"com.shatteredpixel.shatteredpixeldungeon.Badges\");\n\t\tdata.writeEntityData(new File(getFilesDir(), \"badges.xml\"), -1);\n\n\t\t//backup the journal file\n\t\tdata.writeEntityHeader(\"com.shatteredpixel.shatteredpixeldungeon.journal.Journal\");\n\t\tdata.writeEntityData(new File(getFilesDir(), \"journal.xml\"), -1);\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 18.297928647513306}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\ttry {\n\t\t//back up shared preferences\n\t\tdata.writeEntityHeader(\"com.shatteredpixel.shatteredpixeldungeon.android.AndroidPreferences\", 0);\n\t\tdata.writeEntityData(new AndroidPreferences(), 0);\n\n\t\t//back up rankings\n\t\tif (Rankings.hasRankings()) {\n\t\t\tdata.writeEntityHeader(\"com.shatteredpixel.shatteredpixeldungeon.android.Rankings\", 0);\n\t\t\tRankings.save(new FullBackupDataOutput(data));\n\t\t}\n\n\t\t//back up badges\n\t\tif (Badges.hasBadges()) {\n\t\t\tdata.writeEntityHeader(\"com.shatteredpixel.shatteredpixeldungeon.android.Badges\", 0);\n\t\t\tBadges.save(new FullBackupDataOutput(data));\n\t\t}\n\n\t\t//back up journal\n\t\tif (Journal.hasJournal()) {\n\t\t\tdata.writeEntityHeader(\"com.shatteredpixel.shatteredpixeldungeon.android.Journal\", 0);\n\t\t\tJournal.save(new FullBackupDataOutput(data));\n\t\t}\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 14.548559901024266}, {"code": "public void onFullBackup(FullBackupDataOutput data){\n\t\ttry {\n\t\t//back up the shared preferences file\n\t\tdata.writeEntityHeader(\"shared_prefs\", 0);\n\t\tdata.writeEntityData(new File(getSharedPreferencesFile().getAbsolutePath()), getSharedPreferencesFile().length());\n\n\t\t//back up rankings\n\t\tdata.writeEntityHeader(\"rankings\", 0);\n\t\tdata.writeEntityData(Rankings.get().save(), Rankings.get().save().length());\n\n\t\t//back up badges\n\t\tdata.writeEntityHeader(\"badges\", 0);\n\t\tdata.writeEntityData(Badges.get().save(), Badges.get().save().length());\n\n\t\t//back up journal entries\n\t\tdata.writeEntityHeader(\"journal\", 0);\n\t\tdata.writeEntityData(Journal.get().save(), Journal.get().save().length());\n\t} catch (Exception e) {\n\t\te.printStackTrace();\n\t}\n}", "CodeBleu_score": 20.90842476583468}]}
{"instance_id": "583999724a15", "generation_result": [{"code": "public boolean connectedToUnmeteredNetwork(){\n\t.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplication().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n\t\tif (networkInfo!= null && networkInfo.isConnected()) {\n\t\t\treturn networkInfo.getType() == ConnectivityManager.TYPE_WIFI\n\t\t\t\t\t|| networkInfo.getType() == ConnectivityManager.TYPE_WIMAX\n\t\t\t\t\t|| networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH\n\t\t\t\t\t|| networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t\t}\n\t} else {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplication().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo[] networkInfos = connectivityManager.getAllNetworkInfo();\n\t\tfor (NetworkInfo networkInfo : networkInfos) {\n\t\t\tif (networkInfo!= null && networkInfo.isConnected()) {\n\t\t\t\treturn networkInfo.getType() == ConnectivityManager.TYPE_WIFI\n\t\t\t\t\t\t|| networkInfo.getType() == ConnectivityManager.TYPE_WIMAX\n\t\t\t\t\t\t|| networkInfo.getType() == ConnectivityManager.TYPE_BLUETOOTH\n\t\t\t\t\t\t|| networkInfo.getType() == ConnectivityManager.TYPE_ETHERNET;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 44.61382895620778}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplication().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo activeNetwork = connectivityManager.getActiveNetworkInfo();\n\t\treturn activeNetwork!= null && activeNetwork.isConnected() && connectivityManager.isActiveNetworkMetered();\n\t} else {\n\t\tConnectivityManager connectivityManager = (ConnectivityManager) Gdx.app.getApplication().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo[] info = connectivityManager.getAllNetworkInfo();\n\t\tfor (NetworkInfo ni : info) {\n\t\t\tif (ni.isConnected() && (ni.getType() == ConnectivityManager.TYPE_WIFI || ni.getType() == ConnectivityManager.TYPE_WIMAX || ni.getType() == ConnectivityManager.TYPE_BLUETOOTH || ni.getType() == ConnectivityManager.TYPE_ETHERNET))\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 50.51520837818075}, {"code": "public boolean connectedToUnmeteredNetwork(){\n\t.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n\t\tConnectivityManager cm = (ConnectivityManager) Gdx.app.getAndroidApplication().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo networkInfo = cm.getActiveNetworkInfo();\n\t\tif (networkInfo!= null && networkInfo.isConnected() && networkInfo.getType() == ConnectivityManager.TYPE_MOBILE) {\n\t\t\treturn!networkInfo.isRoaming();\n\t\t}\n\t} else {\n\t\tConnectivityManager cm = (ConnectivityManager) Gdx.app.getAndroidApplication().getSystemService(Context.CONNECTIVITY_SERVICE);\n\t\tNetworkInfo[] info = cm.getAllNetworkInfo();\n\t\tfor (NetworkInfo i : info) {\n\t\t\tif (i.getState() == NetworkInfo.State.CONNECTED) {\n\t\t\t\tif (i.getType() == ConnectivityManager.TYPE_WIFI || i.getType() == ConnectivityManager.TYPE_WIMAX || i.getType() == ConnectivityManager.TYPE_BLUETOOTH || i.getType() == ConnectivityManager.TYPE_ETHERNET) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "CodeBleu_score": 54.1098132784258}]}
{"instance_id": "f8bd6cd4826b", "generation_result": [{"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t", "CodeBleu_score": 3.251031176819552}, {"code": "protected boolean affectHero( Hero hero ){\n\t\nif ( hero.isAlive() ) {\n\n// Play a sound\nSample.INSTANCE.play(Assets.SND_WATER_OF_HEALING);\n\n// Cure any ailments\nhero.buffs.remove(Hunger.class);\n\n// Remove curses from equipped items\nfor ( Item item : hero.inventory.items ) {\nif ( item instanceof Ankh || item instanceof Waterskin ) {\nitem.removeCurse();\n}\n}\n\n// Satisfy the hero's hunger\nhero.buffs.add(new Hunger(hero));\n\n// Restore health\nhero.hp = hero.maxHP;\nhero.buffs.remove(ShadowParticle.class);\n\n// Display visual effects\nhero.sprite.flash(Assets.getSprite(Assets.SPR_WATER_OF_HEALING), 10);\n\n// Log a message\nif ( hero.journal.has(Landmark.WATER_OF_HEALING) ) {\nMessages.log(Messages.get(Messages.WATER_OF_HEALING_2));\n} else {\nMessages.log(Messages.get(Messages.WATER_OF_HEALING_1));\nhero.journal.add(Landmark.WATER_OF_HEALING);\n}\n\n// Interrupt the hero's current action\nhero.interrupt();\n\n// Return true\nreturn true;\n}\n\n// Return false\nreturn false;\n}", "CodeBleu_score": 37.99162603495761}]}
{"instance_id": "3a94f2e84c83", "generation_result": [{"code": "protected Item affectItem( Item item, int pos ){\n\t\tif (item.type!= Item.Type.Waterskin) return null;\n\tif (!item.isFull()) {\n\t\titem.fill();\n\t\titem.sprite.emitter().start( ShadowParticle.FACTORY, 0.2f, 4 );\n\t\titem.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(item.capacity), FloatingText.HEALING);\n\t\tGLog.p( Messages.get(this, \\\"filled\\\") );\n\t\treturn item;\n\t}\n\tif (item.belongings.isBlessed()) {\n\t\titem.belongings.uncurseEquipped();\n\t\titem.sprite.emitter().start( ShadowParticle.FACTORY, 0.2f, 4 );\n\t\titem.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(item.capacity), FloatingText.HEALING);\n\t\tGLog.p( Messages.get(this, \\\"unblessed\\\") );\n\t\treturn item;\n\t}\n\tif (item.belongings.isCursed()) {\n\t\titem.belongings.uncurseEquipped();\n\t\titem.sprite.emitter().start( ShadowParticle.FACTORY, 0.2f, 4 );\n\t\titem.sprite.showStatusWithIcon(CharSprite.POSITIVE, Integer.toString(item.capacity), FloatingText.HEALING);\n\t\tGLog.p( Messages.get(this, \\\"uncursed\\\") );\n\t\treturn item;\n\t}\n\treturn null;\n}", "CodeBleu_score": 30.146215015924454}, {"code": "protected Item affectItem( Item item, int pos ){\n\t", "CodeBleu_score": 5.531172364104125}, {"code": "protected Item affectItem( Item item, int pos ){\n\t", "CodeBleu_score": 5.531172364104125}]}
{"instance_id": "d322228d1a3e", "generation_result": [{"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}, {"code": "public static void affectAndLoot(Mob enemy, Hero hero, Class<?extends AllyBuff> buffCls){\n\t", "CodeBleu_score": 4.537406718231222}]}
{"instance_id": "9ee21c0149f3", "generation_result": [{"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class)!= null\n\t\t\t&& enemy.buff(AscensionBuffBlocker.class) == null) {\n\t\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t\t}\n\t\tif (enemy.alignment == Char.Alignment.ENEMY) {\n\t\t\tif (modifiers.containsKey(enemy.getClass())) {\n\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).reduce(modifiers.get(enemy.getClass()));\n\t\t\t}\n\t\t}\n\t}\n\tif (Dungeon.hero.buff(AscensionChallenge.class)!= null) {\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks <= 0) {\n\t\t\tDungeon.hero.buff(AscensionChallenge.class).deactivate();\n\t\t} else if (Dungeon.hero.buff(AscensionChallenge.class).stacks <= 5) {\n\t\t\tMessages.show(Messages.get(Messages.AscensionChallenge.WEAKENING));\n\t\t}\n\t}\n\tif (Dungeon.hero.buff(AscensionChallenge.class)!= null\n\t\t\t&& Dungeon.hero.buff(AscensionChallenge.class).stacks >= 20f) {\n\t\tDungeon.hero.gainExp(Dungeon.hero.level * 5);\n\t}\n\tDungeon.hero.buff(AscensionChallenge.class).refresh();\n}", "CodeBleu_score": 29.580994866511755}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class)!= null\n\t\t\t&& enemy.alignment == Char.Alignment.ENEMY\n\t\t\t&& Dungeon.hero.buff(AscensionChallenge.class).stacks >= 2f) {\n\t\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t\t}\n\n\t\tif (enemy.buff(AscensionBuffBlocker.class)!= null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Class<? extends Mob> cls : modifiers.keySet()) {\n\t\t\tif (cls.isAssignableFrom(enemy.getClass())) {\n\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks -= modifiers.get(cls);\n\t\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks < 2f) {\n\t\t\t\t\tMessages.AscensionChallenge.weakening.post();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks <= 0f) {\n\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks = 0f;\n\t\t\tMessages.AscensionChallenge.failure.post();\n\t\t\tDungeon.hero.buff(AscensionChallenge.class).end();\n\t\t}\n\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks >= 6f) {\n\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks = 6f;\n\t\t}\n\n\t\tif (Dungeon.hero.level >= 20) {\n\t\t\tDungeon.hero.gainExp(10000);\n\t\t}\n\n\t\tBuffIndicator.update();\n\t}\n}", "CodeBleu_score": 36.70742617170165}, {"code": "public static void processEnemyKill(Char enemy){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class)!= null) {\n\t\tif (enemy instanceof Ratmogrify.TransmogRat) {\n\t\t\tenemy = ((Ratmogrify.TransmogRat) enemy).getOriginal();\n\t\t}\n\t\tif (enemy.buff(AscensionBuffBlocker.class)!= null) {\n\t\t\treturn;\n\t\t}\n\t\tfor (Class<? extends Mob> cls : modifiers.keySet()) {\n\t\t\tif (cls.isAssignableFrom(enemy.getClass())) {\n\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks -= modifiers.get(cls);\n\t\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks < 2f) {\n\t\t\t\t\tMessages.send(Messages.get(Messages.ASCENSION_WEAKENING, Dungeon.hero.buff(AscensionChallenge.class).stacks));\n\t\t\t\t}\n\t\t\t\tif (Dungeon.hero.buff(AscensionChallenge.class).stacks <= 0f) {\n\t\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).stacks = 0f;\n\t\t\t\t\tDungeon.hero.buff(AscensionChallenge.class).remove();\n\t\t\t\t\tMessages.send(Messages.get(Messages.ASCENSION_END));\n\t\t\t\t\tif (Dungeon.hero.level < Dungeon.hero.maxLevel) {\n\t\t\t\t\t\tDungeon.hero.gainXP(Dungeon.hero.maxXP);\n\t\t\t\t\t}\n\t\t\t\t\tBuffIndicator.refresh();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}", "CodeBleu_score": 36.75751391904531}]}
{"instance_id": "4fc9c3c1fcce", "generation_result": [{"code": "public static int AscensionCorruptResist(Mob m){\n\t\tAscensionChallenge chal = Dungeon.hero.buff(AscensionChallenge.class);\n\tif (chal == null) return m.exp;\n\tif (m instanceof Ratmogrify.TransmogRat) {\n\t\tm = ((Ratmogrify.TransmogRat) m).getOriginal();\n\t\tif (m == null) return m.exp;\n\t}\n\tif (m.buff(AscensionBuffBlocker.class)!= null) return m.exp;\n\tif (m instanceof RipperDemon) return 10;\n\tif (m instanceof Ghoul) return 7;\n\tif (m instanceof Skeleton) return 13;\n\tif (m instanceof DM100) return 13;\n\tif (m instanceof DM200) return 13;\n\tif (m instanceof Guard) return 13;\n\tif (m instanceof Necromancer) return 13;\n\tif (m instanceof Thief) return 13;\n\tif (m instanceof Brute) return 13;\n\tif (m instanceof Shaman) return 13;\n\tif (m instanceof Scorpio) return 13;\n\tif (m instanceof Eye) return 13;\n\tif (m instanceof Slime) return 13;\n\tif (m instanceof Crab) return 13;\n\tif (m instanceof Swarm) return 13;\n\tif (m instanceof Gnoll) return 13;\n\tif (m instanceof Rat) return 13;\n\tif (m instanceof Snake) return 13;\n\tif (m instanceof Spider) return 13;\n\tif (m instanceof Spinner) return 13;\n\tif (m instanceof Bat) return 13;\n\tif (m instanceof Elemental) return 13;\n\tif (m instanceof Warlock) return 13;\n\tif (m instanceof Monk) return 13;\n\tif (m instanceof Golem) return 13;\n\tif (m instanceof Succubus) return 13;\n\treturn Math.max(13, m.exp);\n}", "CodeBleu_score": 36.489323144810925}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t\tif (Dungeon.hero.buff(AscensionChallenge.class) == null) return m.exp;\n\tif (m instanceof Ratmogrify.TransmogRat) {\n\t\tm = ((Ratmogrify.TransmogRat) m).getOriginal();\n\t\tif (m == null) return m.exp;\n\t}\n\tif (m.buff(AscensionBuffBlocker.class)!= null) return m.exp;\n\tif (m instanceof RipperDemon) return 10;\n\tif (m instanceof Ghoul) return 7;\n\tif (m instanceof Scorpio || m instanceof Eye) return 13;\n\tif (m instanceof DM200 || m instanceof DM100) return 15;\n\tif (m instanceof DM150) return 20;\n\tif (m instanceof DM125) return 25;\n\tif (m instanceof DM100) return 30;\n\tif (m instanceof DM75) return 40;\n\tif (m instanceof DM50) return 50;\n\tif (m instanceof DM25) return 60;\n\treturn m.exp;\n}", "CodeBleu_score": 47.32174595450471}, {"code": "public static int AscensionCorruptResist(Mob m){\n\t", "CodeBleu_score": 1.4729374628756662}]}
{"instance_id": "bdc8df5952c7", "generation_result": [{"code": "public void hit( Char enemy ){\n\tif ( enemy.isDead() || enemy.has(Buff.Corruption) && enemy.hp == enemy.maxHP() ) {\n\t\tcomboTime += initialComboTime * (Talent.cleave.points + 1);\n\t} else {\n\t\tcomboTime += initialComboTime;\n\t}\n\tcount++;\n\tupdateComboTime();\n\tupdateActionIndicators();\n\tvalidateCombo();\n\tlogCombo();\n\trefreshBuffIndicator();\n}", "CodeBleu_score": 24.021715714801488}, {"code": "public void hit( Char enemy ){\n\t", "CodeBleu_score": 2.676826499359523}, {"code": "public void hit( Char enemy ){\n\tcount++;\n\tcomboTime = initialComboTime;\n\tif ( enemy.isDead() || enemy.hasBuff( buffType.CORRUPTION ) && enemy.hp == enemy.maxHp ) {\n\t\tcomboTime += Talent.CELEBRATE.points * 0.5f;\n\t}\n\tinitialComboTime = comboTime;\n\tif ( count > 1 ) {\n\t\tActionIndicator.show( this );\n\t\tAttackIndicator.show( this );\n\t}\n\tif ( count >= 3 ) {\n\t\tvalidateCombo();\n\t}\n\tif ( count >= 3 ) {\n\t\tGLog.p( Messages.get( \"combo\" ) );\n\t}\n\trefreshBuffIndicator();\n}", "CodeBleu_score": 38.8754893643807}]}
{"instance_id": "abf7c664b4dd", "generation_result": [{"code": "public int capacity(){\n\t\tint capacity = owner.baseCapacity();\n\tfor (Item item : this) {\n\t\tif (item instanceof Bag) {\n\t\t\tcapacity += ((Bag) item).capacity();\n\t\t}\n\t}\n\tif (owner.secondaryWeapon!= null) {\n\t\tcapacity--;\n\t}\n\treturn capacity;\n}", "CodeBleu_score": 45.33034105145886}, {"code": "public int capacity(){\n\t\tint baseCapacity = owner.baseCapacity();\n\tint capacity = baseCapacity;\n\tfor (Item item : this) {\n\t\tif (item instanceof Bag) {\n\t\t\tcapacity += ((Bag) item).capacity();\n\t\t}\n\t}\n\tif (owner.hasSecondaryWeapon()) {\n\t\tcapacity -= owner.secondaryWeapon().capacity();\n\t}\n\treturn capacity;\n}", "CodeBleu_score": 32.014508844749514}, {"code": "public int capacity(){\n\t\tint cap = owner.baseCapacity;\n\tfor (Item i : inventory) {\n\t\tif (i instanceof Bag)\n\t\t\tcap += ((Bag) i).capacity();\n\t}\n\tif (owner.secondaryWeapon!= null)\n\t\tcap--;\n\treturn cap;\n}", "CodeBleu_score": 35.27016852884777}]}
{"instance_id": "b97e41e092d2", "generation_result": [{"code": "public void updateHT( boolean boostHP ){\n\t\tint HT = 20;\n\tfloat boost = 1f;\n\tfor ( int i = 0; i < belongings.size(); i++ ) {\n\t\tif ( belongings.get( i ) instanceof RingOfMight ) {\n\t\t\tboost += 0.25f;\n\t\t}\n\t\tif ( belongings.get( i ) instanceof ElixirOfMight ) {\n\t\t\tboost += 0.25f;\n\t\t}\n\t}\n\tHT = (int) ( STR * 2f * boost );\n\tif ( boostHP ) {\n\t\tHP = Math.min( HP, HT );\n\t}\n\tHT = Math.max( 1, HT );\n\tthis.HT = HT;\n}", "CodeBleu_score": 23.242273538937525}, {"code": "public void updateHT( boolean boostHP ){\n\t", "CodeBleu_score": 2.218965494326175}, {"code": "public void updateHT( boolean boostHP ){\n\t\tHT = (int) ( 10 * ( 1 + STR / 10.0f ) * ( 1 + HTBoost / 100.0f ) );\n\tif( boostHP ) HP = Math.min( HP, HT );\n\tif( HP > HT ) HP = HT;\n}", "CodeBleu_score": 14.497734360449787}]}
{"instance_id": "b72bd91544e7", "generation_result": [{"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t", "CodeBleu_score": 3.535682149288207}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (!wep.aligned( this ) ) {\n\t\treturn false;\n\t}\n\twep.thrown = true;\n\tboolean hit = wep.attack( enemy );\n\twep.thrown = false;\n\tif ( hit ) {\n\t\tif ( heroClass == HeroClass.GLADIATOR || heroClass == HeroClass.DUELIST ) {\n\t\t\tBuff.affect( this, heroClass == HeroClass.GLADIATOR? Gladiator.class : Duelist.class );\n\t\t}\n\t}\n\treturn hit;\n}", "CodeBleu_score": 25.066061258705442}, {"code": "public boolean shoot( Char enemy, MissileWeapon wep ){\n\t\tif (enemy == null) return false;\n\tif (enemy.isEnemy(this)) {\n\t\t//TODO: Add some sort of hit animation\n\t\t//TODO: Add some sort of hit sound\n\t\tenemy.hit( this, wep.damage( this, enemy ) );\n\t\tif (enemy.isEnemy(this)) {\n\t\t\tif (this instanceof Gladiator) {\n\t\t\t\tBuff.affect( this, Gladiator.class );\n\t\t\t} else if (this instanceof Duelist) {\n\t\t\t\tBuff.affect( this, Duelist.class );\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t} else if (enemy.isNeutral(this)) {\n\t\t//TODO: Add some sort of hit animation\n\t\t//TODO: Add some sort of hit sound\n\t\tenemy.hit( this, wep.damage( this, enemy ) );\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}", "CodeBleu_score": 14.687761246347609}]}
{"instance_id": "f265b39b6677", "generation_result": [{"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}, {"code": "public int attackSkill( Char target ){\n\t", "CodeBleu_score": 3.516528221576535}]}
{"instance_id": "9e50c198348d", "generation_result": [{"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\treset()\n\tstart()\n\trepeat(repeats) {\n\t\ttick()\n\t\toperation()\n\t}\n\tstop()\n\tif (printResults) {\n\t\tprintResults()\n\t}\n}", "CodeBleu_score": 53.8659315777443}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\tif (repeats < 1) throw IllegalArgumentException(\\\"Repeats must be greater than 0.\\\")\n\tif (time.mean == null) time.mean = PerformanceCounter.Mean(repeats)\n\tif (time.mean.windowSize!= repeats) time.mean.windowSize = repeats\n\tfor (i in 0 until repeats) {\n\t\ttick()\n\t\toperation()\n\t}\n\tif (printResults) {\n\t\tprintln(\\\"Performance profiling results:\\\")\n\t\tprintln(\\\"  Name: \\\" + name)\n\t\tprintln(\\\"  Repeats: \\\" + repeats)\n\t\tprintln(\\\"  Mean: \\\" + time.mean.toString())\n\t\tprintln(\\\"  StdDev: \\\" + time.stdDev.toString())\n\t}\n}", "CodeBleu_score": 49.53313477502454}, {"code": "inline fun PerformanceCounter.profile(\n  repeats: Int = if (time.mean != null) time.mean.windowSize else 10,\n  printResults: Boolean = true,\n  operation: () -> Unit,\n){\n\treset()\n\tfor (i in 0 until repeats) {\n\t\ttick()\n\t\toperation()\n\t}\n\tif (printResults) {\n\t\tprint()\n\t}\n}", "CodeBleu_score": 52.48967488306925}]}
{"instance_id": "5f6e11998a1f", "generation_result": [{"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract {\ncallsInPlace(init, InvocationKind.EXACTLY_ONCE)\n}\nval behaviorTree = BehaviorTree<E>(rootTask, blackboard)\nbehaviorTree.init()\nreturn behaviorTree\n}", "CodeBleu_score": 89.01267194168592}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract {\ncallsInPlace(init, InvocationKind.EXACTLY_ONCE)\n}\nreturn BehaviorTree<E>(rootTask, blackboard).apply(init)\n}", "CodeBleu_score": 59.163927991733814}, {"code": "inline fun <E> behaviorTree(\n  rootTask: Task<E>? = null,\n  blackboard: E? = null,\n  init: (@GdxAiDsl BehaviorTree<E>).() -> Unit = {},\n): BehaviorTree<E>{\n\tcontract {\n  callsInPlace(init, InvocationKind.EXACTLY_ONCE)\n}\nval behaviorTree = BehaviorTree<E>()\nbehaviorTree.init()\nreturn behaviorTree\n}", "CodeBleu_score": 79.7465002140934}]}
{"instance_id": "cdda12e45fb9", "generation_result": [{"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.scene.city.map.highlightCell(this);\n\tthis.scene.city.map.highlightRelated(this);\n}", "CodeBleu_score": 16.763584399482234}, {"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.scene.city.map.highlightCell(this);\n\n\tif (this.tiles.heightmap) {\n\t\tthis.tiles.heightmap.alpha = 0.5;\n\t}\n}", "CodeBleu_score": 20.38866427866917}, {"code": "onPointerOver (){\n\t\tthis.scene.city.map.selectedCell.x = this.x;\n\tthis.scene.city.map.selectedCell.y = this.y;\n\n\tthis.scene.city.map.highlightCell(this);\n\tthis.scene.city.map.highlightRelatedCells(this);\n\n\tif (this.heightmap) {\n\t\tthis.heightmap.alpha = 0.5;\n\t}\n}", "CodeBleu_score": 20.891240104090702}]}
{"instance_id": "850931ce3401", "generation_result": [{"code": "getTrafficDensity (){\n\tif (this.current > this.heavyThreshold)\nreturn 'heavy';\nelse if (this.current > this.lightThreshold)\nreturn 'light';\nelse\nreturn null;\n}", "CodeBleu_score": 32.95955456890191}, {"code": "getTrafficDensity (){\n\tif (this.current > this.heavyThreshold)\nreturn 'heavy';\nelse if (this.current > this.lightThreshold)\nreturn 'light';\nelse\nreturn null;\n}", "CodeBleu_score": 32.95955456890191}, {"code": "getTrafficDensity (){\n\tif (this.current < this.lightThreshold)\nreturn 'light';\nelse if (this.current >= this.heavyThreshold)\nreturn 'heavy';\nelse\nreturn null;\n}", "CodeBleu_score": 42.10391942454345}]}
{"instance_id": "5958478bf873", "generation_result": [{"code": "restart: function (){\n\t\nthis.isPlaying = true;\nthis.isFinished = false;\nthis.paused = false;\nthis.loopCount = 0;\n\nthis._timeLastFrame = this.game.time.deltaTotal;\nthis._timeNextFrame = this.game.time.deltaTotal + this.delay;\n\nthis._frameIndex = this.isReversed? this._frames.length - 1 : 0;\nthis.updateCurrentFrame(false, true);\n\nthis._parent.events.onAnimationStart$dispatch(this._parent, this);\n\nthis.onStart.dispatch(this._parent, this);\n\nthis._parent.animations.currentAnim = this;\nthis._parent.animations.currentFrame = this.currentFrame;\n\nreturn this;\n}", "CodeBleu_score": 58.93645265867037}, {"code": "restart: function (){\n\t\nthis.isPlaying = true;\nthis.isFinished = false;\nthis.paused = false;\nthis.loopCount = 0;\n\nthis._timeLastFrame = this.game.time.deltaTotal;\nthis._timeNextFrame = this.game.time.deltaTotal + this.delay;\n\nthis._frameIndex = this.isReversed? this._frames.length - 1 : 0;\nthis.updateCurrentFrame(false, true);\n\nthis._parent.events.onAnimationStart$dispatch(this._parent, this);\n\nthis.onStart.dispatch(this._parent, this);\n\nthis._parent.animations.currentAnim = this;\nthis._parent.animations.currentFrame = this.currentFrame;\n\nreturn this;\n}", "CodeBleu_score": 58.93645265867037}, {"code": "restart: function (){\n\t\nif (this.isReversed) {\nthis._frameIndex = this._frames.length - 1;\n}\nelse {\nthis._frameIndex = 0;\n}\n\nthis.updateCurrentFrame(false, true);\n\nthis._parent.events.onAnimationStart$dispatch(this._parent, this);\n\nthis.onStart.dispatch(this._parent, this);\n\nthis._parent.animations.currentAnim = this;\nthis._parent.animations.currentFrame = this.currentFrame;\n\nreturn this;\n}", "CodeBleu_score": 32.29037296141314}]}
{"instance_id": "d2441e586d58", "generation_result": [{"code": "flash: function (color, duration, force, alpha){\n\t", "CodeBleu_score": 11.898554021788124}, {"code": "flash: function (color, duration, force, alpha){\n\t", "CodeBleu_score": 11.898554021788124}, {"code": "flash: function (color, duration, force, alpha){\n\t", "CodeBleu_score": 11.898554021788124}]}
{"instance_id": "48b26381d975", "generation_result": [{"code": "createFluidLayer: function (children, addToWorld){\n\t\tif (addToWorld === undefined) { addToWorld = true; }\n\n\tthis.boundsFluid.width = this.width;\n\tthis.boundsFluid.height = this.height;\n\n\tvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\n\tif (addToWorld)\n\t{\n\t\tthis.game.world.add(layer);\n\t}\n\n\tthis.layers.push(layer);\n\n\tif (children)\n\t{\n\t\tlayer.addMultiple(children);\n\t}\n\n\treturn layer;\n}", "CodeBleu_score": 81.3724262407168}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\nif (addToWorld === undefined) { addToWorld = true; }\n\nthis.boundsFluid.width = this.width;\nthis.boundsFluid.height = this.height;\n\nvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 82.53039725782975}, {"code": "createFluidLayer: function (children, addToWorld){\n\t\nif (addToWorld === undefined) { addToWorld = true; }\n\nthis.boundsFluid.width = this.width;\nthis.boundsFluid.height = this.height;\n\nvar layer = new Phaser.FlexLayer(this, this.positionFluid, this.boundsFluid, this.scaleFluid);\n\nif (addToWorld)\n{\nthis.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\nlayer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 82.25249870732569}]}
{"instance_id": "624c9e2eb19f", "generation_result": [{"code": "createFullLayer: function (children){\n\t\nif (addToWorld === undefined) { addToWorld = true; }\n\nvar layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 74.27860684888647}, {"code": "createFullLayer: function (children){\n\t\nif (addToWorld === undefined) { addToWorld = true; }\n\nvar layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 74.27860684888647}, {"code": "createFullLayer: function (children){\n\t\nif (addToWorld === undefined) { addToWorld = true; }\n\nvar layer = new Phaser.FlexLayer(this, this.positionFull, this.boundsFull, this.scaleFull);\n\nif (addToWorld)\n{\n    this.game.world.add(layer);\n}\n\nthis.layers.push(layer);\n\nif (children)\n{\n    layer.addMultiple(children);\n}\n\nreturn layer;\n}", "CodeBleu_score": 74.27860684888647}]}
{"instance_id": "1c7529bca3ce", "generation_result": [{"code": "crop: function (rect, copy){\n\t\n}", "CodeBleu_score": 0.45436346467247823}, {"code": "crop: function (rect, copy){\n\t\n}", "CodeBleu_score": 0.45436346467247823}, {"code": "crop: function (rect, copy){\n\t\n}", "CodeBleu_score": 0.45436346467247823}]}
{"instance_id": "d767b9ea9212", "generation_result": [{"code": "move: function (x, y, wrap){\n\t", "CodeBleu_score": 10.306020680619852}, {"code": "move: function (x, y, wrap){\n\t\n}", "CodeBleu_score": 5.93637882297307}, {"code": "move: function (x, y, wrap){\n\t\n}", "CodeBleu_score": 5.93637882297307}]}
{"instance_id": "c7cf015114f3", "generation_result": [{"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tvar frameKey = '_on' + state + 'Frame';\n\n\tif (this[frameKey]!== null)\n\t{\n\t\tif (!this.freezeFrames)\n\t\t{\n\t\t\tthis.frame = this[frameKey];\n\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 30.214539916899046}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t\tvar frameKey = '_on' + state + 'Frame';\n\n\tif (this[frameKey]!== null)\n\t{\n\t\tif (!this.freezeFrames)\n\t\t{\n\t\t\tthis.setFrame(this[frameKey]);\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}", "CodeBleu_score": 29.41080371660696}, {"code": "Phaser.Button.prototype.changeStateFrame = function (state){\n\t", "CodeBleu_score": 2.1564653630926878}]}
{"instance_id": "e0294cb83ca3", "generation_result": [{"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t", "CodeBleu_score": 6.680082188273345}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t", "CodeBleu_score": 6.680082188273345}, {"code": "weapon: function (quantity, key, frame, group, bulletClass){\n\t\n}", "CodeBleu_score": 5.476186467129299}]}
{"instance_id": "2fca91787d6c", "generation_result": [{"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = false; }\n\n\tif (cull)\n\t{\n\t\tvar normal = new Phaser.Point();\n\n\t\tnormal.x = (points[1].x - points[0].x) * (points[2].y - points[0].y) - (points[2].x - points[0].x) * (points[1].y - points[0].y);\n\n\t\tif (normal.x >= 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.moveTo(points[0].x, points[0].y);\n\tthis.lineTo(points[1].x, points[1].y);\n\tthis.lineTo(points[2].x, points[2].y);\n\tthis.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 30.185055352846955}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = false; }\n\n\tthis.beginFill(this.fillColor);\n\n\tif (cull)\n\t{\n\t\tvar normal = Phaser.Point.normalFromPoints(points[0], points[1], points[2]);\n\n\t\tif (normal.dot(this.camera.position) > 0)\n\t\t{\n\t\t\tthis.moveTo(points[0].x, points[0].y);\n\t\t\tthis.lineTo(points[1].x, points[1].y);\n\t\t\tthis.lineTo(points[2].x, points[2].y);\n\t\t\tthis.lineTo(points[0].x, points[0].y);\n\t\t}\n\t}\n\telse\n\t{\n\t\tthis.moveTo(points[0].x, points[0].y);\n\t\tthis.lineTo(points[1].x, points[1].y);\n\t\tthis.lineTo(points[2].x, points[2].y);\n\t\tthis.lineTo(points[0].x, points[0].y);\n\t}\n\n\tthis.endFill();\n}", "CodeBleu_score": 33.02170625200943}, {"code": "Phaser.Graphics.prototype.drawTriangle = function (points, cull){\n\t\tif (cull === undefined) { cull = false; }\n\n\tif (cull)\n\t{\n\t\tvar normal = Phaser.Polygon.getNormal(points);\n\n\t\tif (normal.dot(this.camera.rotationPoint) < 0)\n\t\t{\n\t\t\treturn;\n\t\t}\n\t}\n\n\tthis.moveTo(points[0].x, points[0].y);\n\tthis.lineTo(points[1].x, points[1].y);\n\tthis.lineTo(points[2].x, points[2].y);\n\tthis.lineTo(points[0].x, points[0].y);\n}", "CodeBleu_score": 28.3692399707416}]}
{"instance_id": "5d227ea7f97b", "generation_result": [{"code": "checkVideoProgress: function (){\n\t\nif (this.video.readyState >= 4)\n{\nwindow.clearTimeout(this._retryID);\n\nif (this._pendingChangeSource)\n{\nthis._pendingChangeSource = false;\n\nif (this.video.paused)\n{\nthis.video.play();\n}\n\nif (this._autoplay)\n{\nthis.paused = false;\n}\n\nthis.texture.valid = true;\n}\n}\nelse if (this.retry > 0)\n{\nthis.retry--;\n\nthis._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n}\nelse\n{\nthis.retry = this.retryLimit;\n\nthis.video.pause();\n\nthis.texture.valid = false;\n\nwindow.clearTimeout(this._retryID);\n\nthis.onChangeSource.dispatch(this, this.video.src);\n}\n}", "CodeBleu_score": 60.864064534219665}, {"code": "checkVideoProgress: function (){\n\t\nif (this.video.readyState === 4)\n{\n//  If we have a pending change source, then we need to stop it\nif (this._pendingChangeSource)\n{\nwindow.clearTimeout(this._retryID);\n\nthis._pendingChangeSource = false;\n}\n\nthis.retry = 0;\n\nthis.texture.valid = true;\n\nthis.texture.baseTexture.update();\n\nthis.video.removeEventListener('canplaythrough', this.checkVideoProgress, true);\n\nthis.video.removeEventListener('error', this.checkVideoProgress, true);\n\nthis.video.removeEventListener('playing', this.checkVideoProgress, true);\n\nif (this._autoplay)\n{\nthis.video.play();\n}\n}\nelse if (this.retry > 0)\n{\nthis.retry--;\n\nthis._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n}\nelse\n{\nthis.video.removeEventListener('canplaythrough', this.checkVideoProgress, true);\n\nthis.video.removeEventListener('error', this.checkVideoProgress, true);\n\nthis.video.removeEventListener('playing', this.checkVideoProgress, true);\n\nthis.retry = 0;\n\nthis.video.pause();\n\nthis.texture.valid = false;\n\nthis.texture.baseTexture.update();\n\nthis.video.removeEventListener('canplaythrough', this.checkVideoProgress, true);\n\nthis.video.removeEventListener('error', this.checkVideoProgress, true);\n\nthis.video.removeEventListener('playing', this.checkVideoProgress, true);\n\nthis.game.onVideoError.dispatch(this);\n}\n}", "CodeBleu_score": 57.29713580339349}, {"code": "checkVideoProgress: function (){\n\t\nif (this.video.readyState >= 3)\n{\nwindow.clearTimeout(this._retryID);\n\nthis._pendingChangeSource = false;\n\nthis.texture.valid = true;\n\nthis.texture.dirty = true;\n\nthis.video.play();\n\nif (this._autoplay)\n{\nthis.paused = false;\n}\n\n}\nelse if (this.retry > 0)\n{\nthis.retry--;\n\nthis._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n}\nelse\n{\nthis.game.onVideoError.dispatch(this, this.video.src);\n\nwindow.clearTimeout(this._retryID);\n\nthis.retry = this.retryLimit;\n\nthis._retryID = window.setTimeout(this.checkVideoProgress.bind(this), this.retryInterval);\n}\n\n}", "CodeBleu_score": 59.71937408201462}]}
{"instance_id": "e48c3c53f00a", "generation_result": [{"code": "start: function (event, value){\n\t", "CodeBleu_score": 4.697467111259683}, {"code": "start: function (event, value){\n\t", "CodeBleu_score": 4.697467111259683}, {"code": "start: function (event, value){\n\t", "CodeBleu_score": 4.697467111259683}]}
{"instance_id": "a2cb3bdacb1e", "generation_result": [{"code": "onMouseDown: function (event){\n\t", "CodeBleu_score": 6.864115172258767}, {"code": "onMouseDown: function (event){\n\t", "CodeBleu_score": 6.864115172258767}, {"code": "onMouseDown: function (event){\n\t", "CodeBleu_score": 6.864115172258767}]}
{"instance_id": "88538a5b66e8", "generation_result": [{"code": "onMouseUpGlobal: function (event){\n\t", "CodeBleu_score": 13.408675420784958}, {"code": "onMouseUpGlobal: function (event){\n\t", "CodeBleu_score": 13.408675420784958}, {"code": "onMouseUpGlobal: function (event){\n\t", "CodeBleu_score": 13.408675420784958}]}
{"instance_id": "bf8b43ab3487", "generation_result": [{"code": "onTouchEnter: function (event){\n\t\nthis.event = event;\n\nif (this.touchEnterCallback)\n{\n    this.touchEnterCallback.call(this.callbackContext, event);\n}\n\nif (!this.game.input.enabled ||!this.enabled)\n{\n    return;\n}\n\nif (this.preventDefault)\n{\n    event.preventDefault();\n}\n\n/*\n *  For touch enter and leave its a list of the touch points that have entered or left the target.\n *  Doesn't appear to be supported by most browsers on a canvas element yet.\n */\nfor (var i = 0; i < event.changedTouches.length; i++)\n{\n    this.game.input.stopPointer(event.changedTouches[i]);\n}\n}", "CodeBleu_score": 83.42726443169857}, {"code": "onTouchEnter: function (event){\n\t", "CodeBleu_score": 13.244257735200948}, {"code": "onTouchEnter: function (event){\n\t\nthis.event = event;\n\nif (this.touchEnterCallback)\n{\n    this.touchEnterCallback.call(this.callbackContext, event);\n}\n\nif (!this.game.input.enabled ||!this.enabled)\n{\n    return;\n}\n\nif (this.preventDefault)\n{\n    event.preventDefault();\n}\n}", "CodeBleu_score": 74.57325075839061}]}
